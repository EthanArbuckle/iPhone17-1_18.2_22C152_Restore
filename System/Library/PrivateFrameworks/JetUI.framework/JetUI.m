uint64_t getEnumTagSinglePayload for FontUseCase(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 253);
  }
  v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 <= 3) {
    v4 = -1;
  }
  else {
    v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

ValueMetadata *type metadata accessor for FontSource()
{
  return &type metadata for FontSource;
}

void destroy for FontSource(uint64_t a1)
{
}

ValueMetadata *type metadata accessor for FontUseCase()
{
  return &type metadata for FontUseCase;
}

void destroy for FontUseCase(uint64_t a1)
{
}

uint64_t storeEnumTagSinglePayload for FontUseCase(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 40) = 0;
    *(void *)result = a2 - 253;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 41) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 40) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1B07B2228(double a1, double a2, double a3, double a4)
{
  uint64_t v9 = *v4 + 16;
  swift_beginAccess();
  sub_1B07BBD78(v9, (uint64_t)v13);
  uint64_t v10 = v14;
  uint64_t v11 = v15;
  __swift_project_boxed_opaque_existential_1(v13, v14);
  (*(void (**)(uint64_t, double, double, double, double))(*(void *)(v11 + 8) + 24))(v10, a1, a2, a3, a4);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
}

uint64_t sub_1B07B22DC()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB596378);
  swift_allocObject();
  uint64_t result = sub_1B086AA68();
  qword_1EB596288 = result;
  return result;
}

id sub_1B07B2334()
{
  id result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1930]), sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  qword_1EB595690 = (uint64_t)result;
  return result;
}

uint64_t sub_1B07B2378(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

id sub_1B07B23C0()
{
  id result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C998]), sel_init);
  qword_1EB596470 = (uint64_t)result;
  return result;
}

uint64_t sub_1B07B23F4()
{
  uint64_t result = sub_1B08692D8();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t initializeWithCopy for TextAppearance(uint64_t a1, uint64_t a2)
{
  v3 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  id v4 = v3;
  return a1;
}

uint64_t sub_1B07B24D8()
{
  uint64_t result = sub_1B08692D8();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

id sub_1B07B2564()
{
  id result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C998]), sel_init);
  qword_1EB596490 = (uint64_t)result;
  return result;
}

void LayoutRect.init(representing:)(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  CGFloat Height = CGRectGetHeight(*(CGRect *)&a2);
  *(double *)a1 = a2;
  *(double *)(a1 + 8) = a3;
  *(double *)(a1 + 16) = a4;
  *(double *)(a1 + 24) = a5;
  *(CGFloat *)(a1 + 32) = Height;
  *(void *)(a1 + 40) = 0;
}

double CGFloat.scalingLike(_:with:)(void *a1, void *a2, double a3)
{
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  v7 = __swift_project_boxed_opaque_existential_1(a1, v5);

  return sub_1B07B2690(a3, (uint64_t)v7, a2, v5, v6);
}

uint64_t VerticalStack.Properties.bottomSpacing.setter(long long *a1)
{
  uint64_t v3 = v1 + 40;
  __swift_destroy_boxed_opaque_existential_1(v3);

  return sub_1B07BA8FC(a1, v3);
}

double sub_1B07B2690(double a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  double v6 = CustomTextStyle.scalingValues(compatibleWith:)(a3, a4, a5);
  return v7 * (a1 / v6);
}

uint64_t initializeWithCopy for HorizontalStack(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 40, a2 + 40);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1B07B2794()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1B07B2830(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for LayoutViewPlaceholder()
{
  return self;
}

uint64_t sub_1B07B28A4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1B07B28EC(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB595800);
  MEMORY[0x1F4188790]();
  long long v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EB595988 != -1) {
    swift_once();
  }
  uint64_t v5 = __swift_project_value_buffer(v2, (uint64_t)qword_1EB5957E8);
  uint64_t v6 = sub_1B08691E8();
  uint64_t v7 = *(void *)(v6 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v4, a1, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v4, 0, 1, v6);
  swift_beginAccess();
  sub_1B07C22F0((uint64_t)v4, v5);
  return swift_endAccess();
}

uint64_t sub_1B07B2A60(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = sub_1B0869D98();
  uint64_t v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_1B07B2AA4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_1B0869078();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5963A8);
  MEMORY[0x1F4188790](v6 - 8);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = CTFontCopySystemUIFontExcessiveLineHeightCharacterSet();
  if (v9)
  {
    uint64_t v10 = (void *)v9;
    sub_1B0869048();

    uint64_t v11 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
    v11(v8, v5, v2);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v3 + 56))(v8, 0, 1, v2);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) != 1) {
      return ((uint64_t (*)(uint64_t, char *, uint64_t))v11)(a1, v8, v2);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v8, 1, 1, v2);
  }
  sub_1B0821914((uint64_t)v8);
  return sub_1B0869068();
}

uint64_t sub_1B07B2C6C()
{
  uint64_t v1 = *v0;
  swift_beginAccess();
  return *(unsigned __int8 *)(v1 + 72);
}

uint64_t LayoutViewPlaceholder.__deallocating_deinit()
{
  swift_release();

  return swift_deallocClassInstance();
}

BOOL sub_1B07B2CE4()
{
  uint64_t v1 = *v0;
  swift_beginAccess();
  unint64_t v2 = *(void *)(v1 + 24);
  uint64_t v3 = *(void *)(v1 + 16) & 0xFFFFFFFFFFFFLL;
  if ((v2 & 0x2000000000000000) != 0) {
    uint64_t v3 = HIBYTE(v2) & 0xF;
  }
  return v3 != 0;
}

void sub_1B07B2DAC()
{
  id v0 = objc_msgSend(self, sel_blackColor);
  id v1 = objc_msgSend(v0, sel_colorWithAlphaComponent_, 0.4);

  qword_1EB5959A0 = (uint64_t)v1;
}

uint64_t __swift_instantiateGenericMetadata()
{
  return swift_getGenericMetadata();
}

uint64_t initializeWithCopy for LabelPlaceholder(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  sub_1B07B2F10(*(void **)a2, v5, v6);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  char v7 = *(unsigned char *)(a2 + 96);
  if (v7)
  {
    long long v8 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 48) = v8;
    (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1 + 24, a2 + 24);
    long long v9 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v9;
  }
  else
  {
    uint64_t v10 = *(void **)(a2 + 24);
    *(void *)(a1 + 24) = v10;
    long long v11 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v11;
    id v12 = v10;
  }
  *(unsigned char *)(a1 + 96) = v7;
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  return a1;
}

id sub_1B07B2F10(void *a1, uint64_t a2, char a3)
{
  if (a3) {
    return a1;
  }
  else {
    return (id)swift_bridgeObjectRetain();
  }
}

uint64_t sub_1B07B2F20()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

double sub_1B07B2FB4(uint64_t a1, double a2, double a3)
{
  (*(void (**)(void *__return_ptr))((*MEMORY[0x1E4FBC8C8] & **v3) + 0x50))(v11);
  uint64_t v7 = v12;
  uint64_t v8 = v13;
  __swift_project_boxed_opaque_existential_1(v11, v12);
  double v9 = (*(double (**)(uint64_t, uint64_t, uint64_t, double, double))(v8 + 8))(a1, v7, v8, a2, a3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  return v9;
}

BOOL UITraitCollection.isSizeClassRegular.getter()
{
  return objc_msgSend(v0, sel_userInterfaceIdiom) == (id)1 && objc_msgSend(v0, sel_horizontalSizeClass) == (id)2;
}

void *assignWithCopy for StaticDimension(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

id TextAppearance.init()@<X0>(void *a1@<X8>)
{
  id result = objc_msgSend(self, sel_preferredFontForTextStyle_compatibleWithTraitCollection_, *MEMORY[0x1E4FB28C8], 0);
  *a1 = result;
  a1[1] = 4;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 0;
  return result;
}

uint64_t initializeWithCopy for Resize(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  if (*(unsigned char *)(a2 + 80) == 1)
  {
    uint64_t v8 = *(void *)(a2 + 48);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(void *)(a1 + 48) = v8;
    *(unsigned char *)(a1 + 80) = 1;
    swift_retain();
  }
  else
  {
    uint64_t v5 = (_OWORD *)(a1 + 40);
    char v6 = (_OWORD *)(a2 + 40);
    if (*(unsigned char *)(a2 + 80))
    {
      long long v9 = *(_OWORD *)(a2 + 56);
      *uint64_t v5 = *v6;
      *(_OWORD *)(a1 + 56) = v9;
      *(_OWORD *)(a1 + 65) = *(_OWORD *)(a2 + 65);
    }
    else
    {
      long long v7 = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 64) = v7;
      (**(void (***)(_OWORD *, _OWORD *))(v7 - 8))(v5, v6);
      *(unsigned char *)(a1 + 80) = 0;
    }
  }
  if (*(unsigned char *)(a2 + 128) == 1)
  {
    uint64_t v13 = *(void *)(a2 + 96);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(void *)(a1 + 96) = v13;
    *(unsigned char *)(a1 + 128) = 1;
    swift_retain();
  }
  else
  {
    uint64_t v10 = (_OWORD *)(a1 + 88);
    long long v11 = (_OWORD *)(a2 + 88);
    if (*(unsigned char *)(a2 + 128))
    {
      long long v14 = *(_OWORD *)(a2 + 104);
      *uint64_t v10 = *v11;
      *(_OWORD *)(a1 + 104) = v14;
      *(_OWORD *)(a1 + 113) = *(_OWORD *)(a2 + 113);
    }
    else
    {
      long long v12 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 112) = v12;
      (**(void (***)(_OWORD *, _OWORD *))(v12 - 8))(v10, v11);
      *(unsigned char *)(a1 + 128) = 0;
    }
  }
  if (*(unsigned char *)(a2 + 176) == 1)
  {
    uint64_t v18 = *(void *)(a2 + 144);
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    *(void *)(a1 + 144) = v18;
    *(unsigned char *)(a1 + 176) = 1;
    swift_retain();
  }
  else
  {
    uint64_t v15 = (_OWORD *)(a1 + 136);
    v16 = (_OWORD *)(a2 + 136);
    if (*(unsigned char *)(a2 + 176))
    {
      long long v19 = *(_OWORD *)(a2 + 152);
      *uint64_t v15 = *v16;
      *(_OWORD *)(a1 + 152) = v19;
      *(_OWORD *)(a1 + 161) = *(_OWORD *)(a2 + 161);
    }
    else
    {
      long long v17 = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 160) = v17;
      (**(void (***)(_OWORD *, _OWORD *))(v17 - 8))(v15, v16);
      *(unsigned char *)(a1 + 176) = 0;
    }
  }
  if (*(unsigned char *)(a2 + 224) == 1)
  {
    uint64_t v23 = *(void *)(a2 + 192);
    *(void *)(a1 + 184) = *(void *)(a2 + 184);
    *(void *)(a1 + 192) = v23;
    *(unsigned char *)(a1 + 224) = 1;
    swift_retain();
  }
  else
  {
    v20 = (_OWORD *)(a1 + 184);
    v21 = (_OWORD *)(a2 + 184);
    if (*(unsigned char *)(a2 + 224))
    {
      long long v24 = *(_OWORD *)(a2 + 200);
      _OWORD *v20 = *v21;
      *(_OWORD *)(a1 + 200) = v24;
      *(_OWORD *)(a1 + 209) = *(_OWORD *)(a2 + 209);
    }
    else
    {
      long long v22 = *(_OWORD *)(a2 + 208);
      *(_OWORD *)(a1 + 208) = v22;
      (**(void (***)(_OWORD *, _OWORD *))(v22 - 8))(v20, v21);
      *(unsigned char *)(a1 + 224) = 0;
    }
  }
  return a1;
}

uint64_t sub_1B07B33DC@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for JULoadingViewController.PresentationContext(0);
  uint64_t v6 = __swift_project_value_buffer(v5, a2);

  return sub_1B07B573C(v6, a3);
}

uint64_t sub_1B07B343C()
{
  uint64_t v0 = sub_1B086A2E8();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790]();
  uint64_t v3 = (char *)v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B08694F8();
  MEMORY[0x1F4188790]();
  sub_1B086A2D8();
  MEMORY[0x1F4188790]();
  sub_1B07BE798();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EB595970);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B086C130;
  sub_1B086A2C8();
  v6[1] = v4;
  sub_1B07B2378((unint64_t *)&qword_1EB5962C8, MEMORY[0x1E4FBCC10]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5962B8);
  sub_1B07B2830(&qword_1EB5962C0, &qword_1EB5962B8);
  sub_1B086A498();
  sub_1B08694E8();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, *MEMORY[0x1E4FBCC58], v0);
  uint64_t result = sub_1B086A338();
  qword_1EB5957E0 = result;
  return result;
}

double sub_1B07B36F4()
{
  uint64_t v1 = *v0 + 16;
  swift_beginAccess();
  sub_1B07BBD78(v1, (uint64_t)v6);
  uint64_t v2 = v7;
  uint64_t v3 = v8;
  __swift_project_boxed_opaque_existential_1(v6, v7);
  double v4 = (*(double (**)(uint64_t))(*(void *)(v3 + 8) + 16))(v2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
  return v4;
}

id sub_1B07B37A8(uint64_t a1, uint64_t a2, SEL *a3)
{
  return [*v3 *a3];
}

id sub_1B07B37B4(uint64_t a1, uint64_t a2)
{
  return sub_1B07B37A8(a1, a2, (SEL *)&selRef_frame);
}

uint64_t LayoutViewPlaceholder.init(representing:)(double a1, double a2)
{
  *(unsigned char *)(v2 + 32) = 1;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *(unsigned char *)(v2 + 72) = 0;
  uint64_t v5 = swift_allocObject();
  *(double *)(v5 + 16) = a1;
  *(double *)(v5 + 24) = a2;
  *(double *)(v5 + 32) = a2;
  *(void *)(v5 + 40) = 0;
  *(void *)(v2 + 16) = sub_1B07C1958;
  *(void *)(v2 + 24) = v5;
  BOOL v6 = fabs(a1) >= COERCE_DOUBLE(1);
  BOOL v7 = fabs(a2) >= COERCE_DOUBLE(1) && v6;
  swift_beginAccess();
  *(unsigned char *)(v2 + 32) = v7;
  return v2;
}

CGSize __swiftcall CustomLayoutView.sizeThatFits(_:)(CGSize a1)
{
  double height = a1.height;
  double width = a1.width;
  id v4 = objc_msgSend(v1, sel_traitCollection);
  (*(void (**)(void *__return_ptr))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x50))(v13);
  uint64_t v5 = v14;
  uint64_t v6 = v15;
  __swift_project_boxed_opaque_existential_1(v13, v14);
  double v7 = (*(double (**)(id, uint64_t, uint64_t, double, double))(v6 + 8))(v4, v5, v6, width, height);
  double v9 = v8;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);

  double v10 = v7;
  double v11 = v9;
  result.double height = v11;
  result.double width = v10;
  return result;
}

double Separator.frame(forBoundingRect:in:)(void *a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  uint64_t v6 = v5;
  uint64_t v12 = sub_1B086A868();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790]();
  uint64_t v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v16 = objc_msgSend(a1, sel_traitCollection);
  uint64_t v17 = *(void *)(v6 + 48);
  uint64_t v18 = *(void *)(v6 + 56);
  __swift_project_boxed_opaque_existential_1((void *)(v6 + 24), v17);
  sub_1B07B76D8((uint64_t)v15);
  AnyDimension.value(in:rounded:)((uint64_t)a1, (uint64_t)v15, v17, v18);
  double v20 = v19;
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  v42.origin.x = a2;
  v42.origin.y = a3;
  CGFloat v40 = a4;
  CGFloat v41 = a5;
  v42.size.double width = a4;
  v42.size.double height = a5;
  double Width = CGRectGetWidth(v42);
  double v22 = *(double *)(v6 + 8);
  double v23 = *(double *)(v6 + 16);
  id v24 = objc_msgSend(v16, sel_preferredContentSizeCategory);
  LOBYTE(v12) = sub_1B086A348();

  double v25 = 1.0;
  if ((v12 & 1) == 0)
  {
    objc_msgSend(v16, sel_displayScale, 1.0);
    if (v26 <= 0.0) {
      double v26 = ForJetUIOnly_MainScreenScale();
    }
    double v25 = 1.0 / v26;
  }
  double v27 = Width - (v22 + v23);
  double v28 = v20 + v20 + 0.0 + v25;
  id v29 = objc_msgSend(v16, sel_layoutDirection);
  v43.origin.x = a2;
  v43.origin.y = a3;
  CGFloat v31 = v40;
  CGFloat v30 = v41;
  v43.size.double width = v40;
  v43.size.double height = v41;
  double MinX = CGRectGetMinX(v43);
  if (v29 == (id)1) {
    double v33 = v23;
  }
  else {
    double v33 = v22;
  }
  double v34 = v33 + MinX;
  CGFloat v35 = a2;
  CGFloat v36 = a3;
  CGFloat v37 = v31;
  CGFloat v38 = v30;
  if (*(unsigned char *)v6)
  {
    CGRectGetMaxY(*(CGRect *)&v35);
    v44.origin.y = 0.0;
    v44.origin.x = v34;
    v44.size.double width = v27;
    v44.size.double height = v28;
    CGRectGetHeight(v44);
  }
  else
  {
    CGRectGetMinY(*(CGRect *)&v35);
  }

  return v34;
}

id static Locale.useLocale(forStorefront:)(uint64_t a1)
{
  uint64_t v2 = sub_1B08694D8();
  uint64_t v3 = *(void *)(v2 - 8);
  ((void (*)(void))MEMORY[0x1F4188790])();
  uint64_t v5 = (char *)v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EB595980 != -1) {
    swift_once();
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB595968);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1B086C130;
  sub_1B08694C8();
  v9[1] = v6;
  sub_1B07B2378(&qword_1EB5962A0, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5962A8);
  sub_1B07B2830(&qword_1EB5962B0, &qword_1EB5962A8);
  uint64_t v7 = sub_1B086A498();
  MEMORY[0x1F4188790](v7);
  v9[-2] = a1;
  sub_1B086A308();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  if (qword_1EB5964D0 != -1) {
    swift_once();
  }
  objc_msgSend((id)qword_1EB596470, sel_removeAllObjects);
  if (qword_1EB5964C8 != -1) {
    swift_once();
  }
  return objc_msgSend((id)qword_1EB596490, sel_removeAllObjects);
}

uint64_t HorizontalStack.Properties.leadingSpacing.setter(long long *a1)
{
  __swift_destroy_boxed_opaque_existential_1(v1);

  return sub_1B07BA8FC(a1, v1);
}

uint64_t HorizontalStack.Properties.trailingSpacing.setter(long long *a1)
{
  uint64_t v3 = v1 + 40;
  __swift_destroy_boxed_opaque_existential_1(v3);

  return sub_1B07BA8FC(a1, v3);
}

uint64_t type metadata accessor for LayoutTextViewPlaceholder()
{
  return self;
}

uint64_t Center.init(_:filling:)@<X0>(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = sub_1B07BA8FC(a1, a3);
  *(void *)(a3 + 40) = a2;
  return result;
}

uint64_t VerticalStack.adding(_:with:)@<X0>(uint64_t a1@<X0>, void (*a2)(_OWORD *)@<X1>, uint64_t a3@<X8>)
{
  sub_1B07B3FEC(v3, a3);
  return VerticalStack.add(_:with:)(a1, a2);
}

uint64_t sub_1B07B3FEC(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for VerticalStack(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 40, a2 + 40);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  return a1;
}

void sub_1B07B4118(void *a1)
{
  objc_msgSend(*v1, sel_setFont_, a1);
}

uint64_t sub_1B07B4160(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EB595670);
    uint64_t v3 = sub_1B086A598();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v25 = a1 + 32;
    while (1)
    {
      uint64_t v6 = (uint64_t *)(v25 + 16 * v4);
      uint64_t v8 = *v6;
      uint64_t v7 = v6[1];
      sub_1B086A958();
      swift_bridgeObjectRetain();
      sub_1B0869E38();
      uint64_t result = sub_1B086A998();
      uint64_t v10 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v11 = result & ~v10;
      unint64_t v12 = v11 >> 6;
      uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
      uint64_t v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        uint64_t v15 = *(void *)(v3 + 48);
        id v16 = (void *)(v15 + 16 * v11);
        BOOL v17 = *v16 == v8 && v16[1] == v7;
        if (v17 || (uint64_t result = sub_1B086A8A8(), (result & 1) != 0))
        {
LABEL_3:
          swift_bridgeObjectRelease();
          goto LABEL_4;
        }
        uint64_t v18 = ~v10;
        while (1)
        {
          unint64_t v11 = (v11 + 1) & v18;
          unint64_t v12 = v11 >> 6;
          uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
          uint64_t v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0) {
            break;
          }
          double v19 = (void *)(v15 + 16 * v11);
          if (*v19 != v8 || v19[1] != v7)
          {
            uint64_t result = sub_1B086A8A8();
            if ((result & 1) == 0) {
              continue;
            }
          }
          goto LABEL_3;
        }
      }
      *(void *)(v5 + 8 * v12) = v14 | v13;
      v21 = (void *)(*(void *)(v3 + 48) + 16 * v11);
      void *v21 = v8;
      v21[1] = v7;
      uint64_t v22 = *(void *)(v3 + 16);
      BOOL v23 = __OFADD__(v22, 1);
      uint64_t v24 = v22 + 1;
      if (v23)
      {
        __break(1u);
        return result;
      }
      *(void *)(v3 + 16) = v24;
LABEL_4:
      if (++v4 == v1) {
        return v3;
      }
    }
  }
  return MEMORY[0x1E4FBC870];
}

BOOL UITraitCollection.prefersRightToLeftLayouts.getter()
{
  return objc_msgSend(v0, sel_layoutDirection) == (id)1;
}

uint64_t Locale.hasExtraTallWritingSystem.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1B0869688();
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v3 = sub_1B0869C18();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1B08691A8();
  if (v8)
  {
    uint64_t v9 = v7;
    uint64_t v10 = v8;
    if (qword_1EB595688 != -1) {
      swift_once();
    }
    char v11 = sub_1B07B46DC(v9, v10, qword_1EB595640);
    swift_bridgeObjectRelease();
    return v11 & 1;
  }
  else
  {
    if (qword_1E9B3A6A0 != -1) {
      swift_once();
    }
    uint64_t v13 = __swift_project_value_buffer(v3, (uint64_t)qword_1E9B46108);
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v13, v3);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E9B3AA70);
    sub_1B08696C8();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_1B086C130;
    sub_1B0869678();
    sub_1B0869668();
    uint64_t v14 = sub_1B08691E8();
    v19[3] = v14;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v19);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(boxed_opaque_existential_0, v1, v14);
    sub_1B0869638();
    sub_1B07B86F8((uint64_t)v19);
    sub_1B0869668();
    sub_1B0869698();
    sub_1B0869AC8();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    sub_1B0869198();
    if (qword_1EB595688 != -1) {
      swift_once();
    }
    swift_bridgeObjectRetain();
    uint64_t v16 = swift_bridgeObjectRetain();
    char v17 = sub_1B07EE9E8(v16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    return v17 & 1;
  }
}

uint64_t sub_1B07B46DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    sub_1B086A958();
    sub_1B0869E38();
    uint64_t v6 = sub_1B086A998();
    uint64_t v7 = -1 << *(unsigned char *)(a3 + 32);
    unint64_t v8 = v6 & ~v7;
    uint64_t v9 = a3 + 56;
    if ((*(void *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
    {
      uint64_t v10 = *(void *)(a3 + 48);
      char v11 = (void *)(v10 + 16 * v8);
      BOOL v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (sub_1B086A8A8() & 1) != 0) {
        return 1;
      }
      uint64_t v14 = ~v7;
      unint64_t v15 = (v8 + 1) & v14;
      if ((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15))
      {
        while (1)
        {
          uint64_t v16 = (void *)(v10 + 16 * v15);
          BOOL v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (sub_1B086A8A8() & 1) != 0) {
            break;
          }
          uint64_t result = 0;
          unint64_t v15 = (v15 + 1) & v14;
          if (((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15) & 1) == 0) {
            return result;
          }
        }
        return 1;
      }
    }
  }
  return 0;
}

uint64_t LayoutTextView.withLanguageAwareOutsets.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  MEMORY[0x1F4188790](a1);
  unint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v8, v3, a1);
  uint64_t result = sub_1B07B4900((uint64_t)v8, a1, a2);
  a3[3] = (uint64_t)&type metadata for LanguageAwareLayoutTextView;
  a3[4] = (uint64_t)&off_1F094F7F0;
  *a3 = result;
  return result;
}

uint64_t sub_1B07B4900(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = a2;
  uint64_t v10 = a3;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v8);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(boxed_opaque_existential_0, a1, a2);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB595808);
  uint64_t v6 = swift_allocObject();
  sub_1B07BA8FC(&v8, v6 + 16);
  return v6;
}

CGFloat CGRect.withLayoutDirection(in:relativeTo:)(void *a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9)
{
  id v17 = objc_msgSend(a1, sel_traitCollection);
  id v18 = objc_msgSend(v17, sel_layoutDirection);

  if (v18 == (id)1)
  {
    CGAffineTransformMakeScale(&v29, -1.0, 1.0);
    long long v24 = *(_OWORD *)&v29.c;
    long long v25 = *(_OWORD *)&v29.a;
    CGFloat v27 = a8;
    CGFloat tx = v29.tx;
    CGFloat ty = v29.ty;
    v30.origin.x = a2;
    v30.origin.y = a3;
    v30.size.double width = a4;
    v30.size.double height = a5;
    CGFloat v26 = a9;
    double MinX = CGRectGetMinX(v30);
    v31.origin.x = a2;
    v31.origin.y = a3;
    v31.size.double width = a4;
    v31.size.double height = a5;
    CGFloat MaxX = CGRectGetMaxX(v31);
    *(_OWORD *)&v29.a = v25;
    *(_OWORD *)&v29.c = v24;
    v29.CGFloat tx = tx;
    v29.CGFloat ty = ty;
    CGAffineTransformTranslate(&v28, &v29, -(MinX + MaxX), 0.0);
    CGAffineTransform v29 = v28;
    v32.origin.x = a6;
    v32.origin.y = a7;
    v32.size.double height = v26;
    v32.size.double width = v27;
    *(void *)&a6 = (unint64_t)CGRectApplyAffineTransform(v32, &v29);
  }
  return a6;
}

uint64_t static CharacterSet.excessiveLineHeight.getter@<X0>(uint64_t a1@<X8>)
{
  if (qword_1EB5964B8 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1B0869078();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EB596390);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

uint64_t LayoutTextViewPlaceholder.__deallocating_deinit()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

UIColor __swiftcall UIColor.init(light:lightHighContrast:dark:darkHighContrast:)(UIColor light, UIColor lightHighContrast, UIColor dark, UIColor darkHighContrast)
{
  id v8 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  uint64_t v9 = (UIColor *)swift_allocObject();
  v9[2].super.isa = darkHighContrast.super.isa;
  v9[3].super.isa = dark.super.isa;
  v9[4].super.isa = lightHighContrast.super.isa;
  v9[5].super.isa = light.super.isa;
  v17[4] = sub_1B07B5E04;
  v17[5] = v9;
  v17[0] = MEMORY[0x1E4F143A8];
  v17[1] = 1107296256;
  v17[2] = sub_1B07B5D9C;
  v17[3] = &block_descriptor_2;
  uint64_t v10 = _Block_copy(v17);
  uint64_t v11 = darkHighContrast.super.isa;
  BOOL v12 = dark.super.isa;
  uint64_t v13 = lightHighContrast.super.isa;
  uint64_t v14 = light.super.isa;
  swift_release();
  id v15 = objc_msgSend(v8, sel_initWithDynamicProvider_, v10);

  _Block_release(v10);
  return (UIColor)v15;
}

uint64_t LayoutTextViewPlaceholder.init(text:font:textAlignment:lineBreakMode:lineSpacing:numberOfLines:)(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v7 + 104) = 0;
  uint64_t v13 = (void **)(v7 + 104);
  if (a2) {
    uint64_t v14 = a1;
  }
  else {
    uint64_t v14 = 0;
  }
  unint64_t v15 = 0xE000000000000000;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  *(unsigned char *)(v7 + 80) = 0;
  if (a2) {
    unint64_t v15 = a2;
  }
  *(void *)(v7 + 16) = v14;
  *(void *)(v7 + 24) = v15;
  swift_beginAccess();
  uint64_t v16 = *v13;
  *uint64_t v13 = a3;

  *(void *)(v7 + 32) = a4;
  *(void *)(v7 + 40) = a6;
  *(void *)(v7 + 88) = a7;
  *(void *)(v7 + 96) = a5;
  return v7;
}

uint64_t VerticalStack.Properties.topSpacing.setter(long long *a1)
{
  __swift_destroy_boxed_opaque_existential_1(v1);

  return sub_1B07BA8FC(a1, v1);
}

Swift::Void __swiftcall CustomLayoutView.layoutSubviews()()
{
  v12.receiver = v0;
  v12.super_class = (Class)type metadata accessor for CustomLayoutView();
  id v1 = objc_msgSendSuper2(&v12, sel_layoutSubviews);
  uint64_t v2 = (void *)MEMORY[0x1E4FBC8C8];
  (*(void (**)(id))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x60))(v1);
  id v3 = objc_msgSend(v0, sel_frame);
  double v5 = v4;
  double v7 = v6;
  (*(void (**)(void *__return_ptr, id))((*v2 & *v0) + 0x50))(v11, v3);
  uint64_t v8 = v11[4];
  __swift_project_boxed_opaque_existential_1(v11, v11[3]);
  id v9 = objc_msgSend(v0, sel_traitCollection);
  (*(void (**)(double, double, double, double))(v8 + 16))(0.0, 0.0, v5, v7);

  uint64_t v10 = __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  (*(void (**)(uint64_t))((*v2 & *v0) + 0x68))(v10);
}

uint64_t type metadata accessor for CustomLayoutView()
{
  return self;
}

id sub_1B07B4FE0()
{
  return objc_msgSend(*v0, sel_isHidden);
}

uint64_t destroy for HorizontalStack(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);

  return swift_bridgeObjectRelease();
}

id JULoadingViewController.init(label:presentationContext:pageRenderMetrics:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v10 = &v4[OBJC_IVAR____TtC5JetUI23JULoadingViewController_label];
  *(void *)uint64_t v10 = a1;
  *((void *)v10 + 1) = a2;
  sub_1B07B573C(a3, (uint64_t)&v4[OBJC_IVAR____TtC5JetUI23JULoadingViewController_presentationContext]);
  *(void *)&v4[OBJC_IVAR____TtC5JetUI23JULoadingViewController_pageRenderMetrics] = a4;
  v13.receiver = v4;
  v13.super_class = ObjectType;
  id v11 = objc_msgSendSuper2(&v13, sel_initWithNibName_bundle_, 0, 0);
  sub_1B07B57A0(a3);
  return v11;
}

uint64_t sub_1B07B5150@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB595ED8);
  MEMORY[0x1F4188790](v35);
  CGFloat v36 = (char *)v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for JULoadingViewController.PresentationContext(0);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v32 = (uint64_t)v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB595EA0);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB595E98);
  uint64_t v11 = *(void *)(v34 - 8);
  MEMORY[0x1F4188790](v34);
  objc_super v13 = (char *)v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB595EE8);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  CGRect v31 = (char *)v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  double v33 = (char *)v30 - v18;
  uint64_t v19 = *(void *)(a1 + OBJC_IVAR____TtC5JetUI23JULoadingViewController_label + 8);
  if (v19)
  {
    uint64_t v37 = *(void *)(a1 + OBJC_IVAR____TtC5JetUI23JULoadingViewController_label);
    uint64_t v38 = v19;
    sub_1B07B862C();
    v30[1] = a2;
    swift_bridgeObjectRetain();
    sub_1B08692A8();
    sub_1B0869288();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    uint64_t v20 = v32;
    sub_1B07B573C(a1 + OBJC_IVAR____TtC5JetUI23JULoadingViewController_presentationContext, v32);
    uint64_t v37 = MEMORY[0x1E4F3E2F8];
    uint64_t v38 = MEMORY[0x1E4F3E2E8];
    uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
    uint64_t v22 = v31;
    uint64_t v23 = v34;
    sub_1B08694B8();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v23);
    uint64_t v24 = sub_1B08692D8();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v24 - 8) + 8))(v20, v24);
    long long v25 = v33;
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v33, v22, v14);
  }
  else
  {
    sub_1B0869298();
    sub_1B0869288();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    uint64_t v26 = v32;
    sub_1B07B573C(a1 + OBJC_IVAR____TtC5JetUI23JULoadingViewController_presentationContext, v32);
    uint64_t v37 = MEMORY[0x1E4F3E2F8];
    uint64_t v38 = MEMORY[0x1E4F3E2E8];
    uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
    CGFloat v27 = v31;
    uint64_t v23 = v34;
    sub_1B08694B8();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v23);
    uint64_t v28 = sub_1B08692D8();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v28 - 8) + 8))(v26, v28);
    long long v25 = v33;
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v33, v27, v14);
  }
  (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v36, v25, v14);
  swift_storeEnumTagMultiPayload();
  uint64_t v37 = v23;
  uint64_t v38 = OpaqueTypeConformance2;
  swift_getOpaqueTypeConformance2();
  sub_1B0869498();
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v25, v14);
}

uint64_t sub_1B07B573C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for JULoadingViewController.PresentationContext(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B07B57A0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for JULoadingViewController.PresentationContext(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1B07B57FC(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata accessor for JULoadingViewController.PresentationContext(uint64_t a1)
{
  return sub_1B07B57FC(a1, (uint64_t *)&unk_1EB595E38);
}

uint64_t destroy for Margins(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  __swift_destroy_boxed_opaque_existential_1(a1 + 80);
  __swift_destroy_boxed_opaque_existential_1(a1 + 120);

  return __swift_destroy_boxed_opaque_existential_1(a1 + 160);
}

Swift::Int __swiftcall LayoutTextView.estimatedNumberOfLines(from:)(JUMeasurements from)
{
  double var3 = from.var3;
  double var2 = from.var2;
  double var1 = from.var1;
  Swift::Int result = (*(uint64_t (**)(__n128))(v1 + 64))(*(__n128 *)&from.var0);
  if (!result) {
    goto LABEL_11;
  }
  uint64_t v6 = (void *)result;
  double v7 = var1 - var3 - var2;
  objc_msgSend((id)result, sel_lineHeight);
  double v9 = v8;

  double v10 = round(v7 / v9);
  if ((~*(void *)&v10 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v10 <= -9.22337204e18)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v10 >= 9.22337204e18)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v11 = (uint64_t)v10 & ~((uint64_t)v10 >> 63);
  Swift::Int result = v11 + 1;
  if (__OFADD__(v11, 1))
  {
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
  }
  return result;
}

id sub_1B07B5974()
{
  id v1 = objc_msgSend(*v0, sel_font);

  return v1;
}

uint64_t _s5JetUI7MarginsV6insets5childACSo12UIEdgeInsetsV_AA9Placeable_ptcfC_0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  sub_1B07BBD78(a1, a2);
  uint64_t v23 = MEMORY[0x1E4FBC958];
  uint64_t v24 = &protocol witness table for CGFloat;
  *(double *)&long long v22 = a3;
  uint64_t v20 = MEMORY[0x1E4FBC958];
  v21 = &protocol witness table for CGFloat;
  *(double *)&long long v19 = a4;
  uint64_t v17 = MEMORY[0x1E4FBC958];
  uint64_t v18 = &protocol witness table for CGFloat;
  *(double *)&long long v16 = a5;
  uint64_t v14 = MEMORY[0x1E4FBC958];
  uint64_t v15 = &protocol witness table for CGFloat;
  *(double *)&long long v13 = a6;
  __swift_destroy_boxed_opaque_existential_1(a1);
  sub_1B07BA8FC(&v22, a2 + 40);
  sub_1B07BA8FC(&v19, a2 + 80);
  sub_1B07BA8FC(&v16, a2 + 120);
  return sub_1B07BA8FC(&v13, a2 + 160);
}

double VerticalMarginsMeasurable.init(child:topMargin:bottomMargin:skipIfEmpty:shouldMeasureToBaseline:)@<D0>(long long *a1@<X0>, long long *a2@<X1>, long long *a3@<X2>, char a4@<W3>, char a5@<W4>, void *a6@<X8>)
{
  sub_1B07BA8FC(a1, (uint64_t)v16);
  sub_1B07BA8FC(a2, (uint64_t)v17 + 8);
  sub_1B07BA8FC(a3, (uint64_t)&v18);
  v19[24] = a4;
  v19[25] = a5;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB595810);
  uint64_t v11 = (_OWORD *)swift_allocObject();
  long long v12 = v18;
  void v11[5] = v17[2];
  v11[6] = v12;
  v11[7] = *(_OWORD *)v19;
  *(_OWORD *)((char *)v11 + 122) = *(_OWORD *)&v19[10];
  long long v13 = v16[1];
  v11[1] = v16[0];
  v11[2] = v13;
  double result = *(double *)v17;
  long long v15 = v17[1];
  void v11[3] = v17[0];
  v11[4] = v15;
  *a6 = v11;
  return result;
}

BOOL UITraitCollection.isSizeClassCompact.getter()
{
  return objc_msgSend(v0, sel_horizontalSizeClass) == (id)1;
}

id UIColor.highlighted.getter()
{
  id v1 = v0;
  if (qword_1EB595998 != -1)
  {
    swift_once();
    id v1 = v3;
  }
  id result = objc_msgSend(v1, sel__colorBlendedWithColor_, qword_1EB5959A0);
  if (!result)
  {
    return v3;
  }
  return result;
}

uint64_t sub_1B07B5BE4()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 80) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 88));

  return swift_deallocClassInstance();
}

uint64_t destroy for VerticalMarginsMeasurable.Storage(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);

  return __swift_destroy_boxed_opaque_existential_1(a1 + 80);
}

uint64_t assignWithCopy for FontUseCase(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  char v8 = *(unsigned char *)(a2 + 40);
  sub_1B07BCAAC(*(id *)a2, v4, v5, v6, v7, v8);
  double v9 = *(void **)a1;
  uint64_t v10 = *(void *)(a1 + 8);
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = *(void *)(a1 + 24);
  uint64_t v13 = *(void *)(a1 + 32);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  char v14 = *(unsigned char *)(a1 + 40);
  *(unsigned char *)(a1 + 40) = v8;
  sub_1B07BCA18(v9, v10, v11, v12, v13, v14);
  return a1;
}

uint64_t destroy for VerticalStack(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);

  return swift_bridgeObjectRelease();
}

id sub_1B07B5D9C(uint64_t a1, void *a2)
{
  id v3 = *(uint64_t (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  uint64_t v5 = (void *)v3();
  swift_release();

  return v5;
}

id sub_1B07B5E04(void *a1)
{
  return sub_1B07B5E10(a1, v1[2], v1[3], v1[4], v1[5]);
}

id sub_1B07B5E10(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = objc_msgSend(a1, sel_userInterfaceStyle);
  id v10 = objc_msgSend(a1, sel_accessibilityContrast);
  if (v9 == (id)1)
  {
    if (v10 == (id)1) {
      uint64_t v12 = a4;
    }
    else {
      uint64_t v12 = a5;
    }
  }
  else if (v9 == (id)2)
  {
    BOOL v11 = v10 == (id)-1 || v10 == 0;
    uint64_t v12 = a3;
    if (!v11)
    {
      if (v10 == (id)1) {
        uint64_t v12 = a2;
      }
      else {
        uint64_t v12 = a5;
      }
    }
  }
  else
  {
    uint64_t v12 = a5;
  }

  return v12;
}

uint64_t static Dimensions.defaultRoundingRule.getter@<X0>(uint64_t a1@<X8>)
{
  if (qword_1EB596548 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1B086A868();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EB5964D8);
  id v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

uint64_t static Locale.storefront.getter()
{
  if (qword_1EB595980 != -1) {
    swift_once();
  }
  sub_1B08691E8();
  return sub_1B086A318();
}

uint64_t destroy for Resize(unsigned char *a1)
{
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  if (a1[80] == 1)
  {
    uint64_t result = swift_release();
  }
  else if (!a1[80])
  {
    uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 40));
  }
  if (a1[128] == 1)
  {
    uint64_t result = swift_release();
  }
  else if (!a1[128])
  {
    uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 88));
  }
  if (a1[176] == 1)
  {
    uint64_t result = swift_release();
  }
  else if (!a1[176])
  {
    uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 136));
  }
  if (a1[224] == 1)
  {
    return swift_release();
  }
  else if (!a1[224])
  {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 184));
  }
  return result;
}

uint64_t StaticDimension.init(_:scaledLike:)@<X0>(long long *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB596380);
  uint64_t v6 = swift_allocObject();
  uint64_t result = sub_1B07BA8FC(a1, v6 + 16);
  *(double *)a2 = a3;
  *(void *)(a2 + 8) = v6;
  return result;
}

Swift::Void __swiftcall JULoadingViewController.viewDidLoad()()
{
  id v1 = v0;
  ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB595EE0);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46.receiver = v1;
  v46.super_class = ObjectType;
  objc_msgSendSuper2(&v46, sel_viewDidLoad);
  sub_1B07B5150((uint64_t)v1, (uint64_t)v5);
  id v6 = objc_allocWithZone((Class)__swift_instantiateConcreteTypeFromMangledName(&qword_1EB595ED0));
  uint64_t v7 = (void *)sub_1B0869488();
  objc_msgSend(v1, sel_addChildViewController_, v7);
  id v8 = objc_msgSend(v7, sel_view);
  if (!v8)
  {
    __break(1u);
    goto LABEL_14;
  }
  id v9 = v8;
  objc_msgSend(v8, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);

  id v10 = objc_msgSend(v1, sel_view);
  if (!v10)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  BOOL v11 = v10;
  id v12 = objc_msgSend(v7, sel_view);
  if (!v12)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v13 = v12;
  objc_msgSend(v11, sel_addSubview_, v12);

  __swift_instantiateConcreteTypeFromMangledName(qword_1EB596010);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_1B0871680;
  id v15 = objc_msgSend(v7, sel_view);
  if (!v15)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  long long v16 = v15;
  id v17 = objc_msgSend(v15, sel_topAnchor);

  id v18 = objc_msgSend(v1, sel_view);
  if (!v18)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  long long v19 = v18;
  id v20 = objc_msgSend(v18, sel_topAnchor);

  id v21 = objc_msgSend(v17, sel_constraintEqualToAnchor_, v20);
  *(void *)(v14 + 32) = v21;
  id v22 = objc_msgSend(v7, sel_view);
  if (!v22)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v23 = v22;
  id v24 = objc_msgSend(v22, sel_leadingAnchor);

  id v25 = objc_msgSend(v1, sel_view);
  if (!v25)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v26 = v25;
  id v27 = objc_msgSend(v25, sel_leadingAnchor);

  id v28 = objc_msgSend(v24, sel_constraintEqualToAnchor_, v27);
  *(void *)(v14 + 40) = v28;
  id v29 = objc_msgSend(v7, sel_view);
  if (!v29)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  CGRect v30 = v29;
  id v31 = objc_msgSend(v29, sel_bottomAnchor);

  id v32 = objc_msgSend(v1, sel_view);
  if (!v32)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  double v33 = v32;
  id v34 = objc_msgSend(v32, sel_bottomAnchor);

  id v35 = objc_msgSend(v31, sel_constraintEqualToAnchor_, v34);
  *(void *)(v14 + 48) = v35;
  id v36 = objc_msgSend(v7, sel_view);
  if (!v36)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v37 = v36;
  id v38 = objc_msgSend(v36, sel_trailingAnchor);

  id v39 = objc_msgSend(v1, sel_view);
  if (v39)
  {
    CGFloat v40 = v39;
    CGFloat v41 = self;
    id v42 = objc_msgSend(v40, sel_trailingAnchor);

    id v43 = objc_msgSend(v38, sel_constraintEqualToAnchor_, v42);
    *(void *)(v14 + 56) = v43;
    v45[1] = v14;
    sub_1B0869F98();
    sub_1B07B6684();
    CGRect v44 = (void *)sub_1B0869F78();
    swift_bridgeObjectRelease();
    objc_msgSend(v41, sel_activateConstraints_, v44);

    objc_msgSend(v7, sel_didMoveToParentViewController_, v1);
    return;
  }
LABEL_23:
  __break(1u);
}

unint64_t sub_1B07B6684()
{
  unint64_t result = qword_1EB595EF0;
  if (!qword_1EB595EF0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EB595EF0);
  }
  return result;
}

uint64_t sub_1B07B66C4(uint64_t a1, id *a2)
{
  char v3 = sub_1B0869D88();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_1B07B6744@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB595800);
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EB595988 != -1) {
    swift_once();
  }
  uint64_t v5 = __swift_project_value_buffer(v2, (uint64_t)qword_1EB5957E8);
  swift_beginAccess();
  sub_1B07B68C4(v5, (uint64_t)v4);
  uint64_t v6 = sub_1B08691E8();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v4, 1, v6) != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v4, v6);
  }
  sub_1B08691D8();
  return sub_1B084A010((uint64_t)v4);
}

uint64_t sub_1B07B68C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB595800);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

JUMeasurements __swiftcall Measurable.measurements(fitting:with:)(CGSize fitting, UITraitCollection with)
{
  uint64_t v4 = v3;
  uint64_t v5 = v2;
  double height = fitting.height;
  double width = fitting.width;
  __swift_instantiateConcreteTypeFromMangledName(qword_1EB596010);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1B086C120;
  *(UITraitCollection *)(v9 + 32) = with;
  sub_1B07BCC68();
  id v10 = with.super.isa;
  BOOL v11 = (void *)sub_1B0869F78();
  swift_bridgeObjectRelease();
  id v12 = objc_msgSend(self, sel_traitCollectionWithTraitsFromCollections_, v11);

  uint64_t v13 = (objc_class *)type metadata accessor for TraitEnvironmentPlaceholder();
  uint64_t v14 = (char *)objc_allocWithZone(v13);
  *(void *)&v14[OBJC_IVAR____TtC5JetUI27TraitEnvironmentPlaceholder_traitCollection] = v12;
  v27.receiver = v14;
  v27.super_class = v13;
  id v15 = objc_msgSendSuper2(&v27, sel_init);
  double v16 = (*(double (**)(id, uint64_t, uint64_t, double, double))(v4 + 8))(v15, v5, v4, width, height);
  double v18 = v17;
  double v20 = v19;
  double v22 = v21;

  double v23 = v16;
  double v24 = v18;
  double v25 = v20;
  double v26 = v22;
  result.double var3 = v26;
  result.double var2 = v25;
  result.double var1 = v24;
  result.var0 = v23;
  return result;
}

double sub_1B07B6A84(void *a1, double a2, double a3)
{
  swift_unknownObjectRetain();
  id v6 = a1;
  objc_msgSend(v6, sel_sizeThatFits_, a2, a3);
  *(void *)&double v9 = *(_OWORD *)&constrainWidth(of:toFit:)((CGSize)__PAIR128__(v8, v7), (CGSize)__PAIR128__(*(unint64_t *)&a3, *(unint64_t *)&a2));
  objc_msgSend(v6, sel__firstBaselineOffsetFromTop);
  objc_msgSend(v6, sel__baselineOffsetFromBottom);
  swift_unknownObjectRelease();

  return v9;
}

id sub_1B07B6B3C()
{
  return objc_msgSend(*v0, sel_hasContent);
}

BOOL sub_1B07B6B60(void *a1)
{
  id v1 = a1;
  id v2 = objc_msgSend(v1, sel_text);
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = sub_1B0869D98();
    unint64_t v6 = v5;

    swift_bridgeObjectRelease();
    uint64_t v7 = HIBYTE(v6) & 0xF;
    if ((v6 & 0x2000000000000000) == 0) {
      uint64_t v7 = v4 & 0xFFFFFFFFFFFFLL;
    }
    return v7 != 0;
  }
  else
  {

    return 0;
  }
}

id TraitEnvironmentPlaceholder.__allocating_init(_:)()
{
  sub_1B07BCC68();
  id v1 = (void *)sub_1B0869F78();
  swift_bridgeObjectRelease();
  id v2 = objc_msgSend(self, sel_traitCollectionWithTraitsFromCollections_, v1);

  uint64_t v3 = (char *)objc_allocWithZone(v0);
  *(void *)&v3[OBJC_IVAR____TtC5JetUI27TraitEnvironmentPlaceholder_traitCollection] = v2;
  v5.receiver = v3;
  v5.super_class = v0;
  return objc_msgSendSuper2(&v5, sel_init);
}

void _sSo6UIViewC5JetUIE22setAutomationSemanticsyy0B6Engine0eF0VF_0()
{
  id v1 = v0;
  uint64_t v2 = sub_1B0869848();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  objc_super v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B08699B8();
  sub_1B0869838();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  unint64_t v6 = (void *)sub_1B0869D68();
  swift_bridgeObjectRelease();
  objc_msgSend(v1, sel_setAccessibilityIdentifier_, v6);
}

uint64_t UITraitCollection.prefersAccessibilityLayouts.getter()
{
  id v1 = objc_msgSend(v0, sel_preferredContentSizeCategory);
  char v2 = sub_1B086A348();

  return v2 & 1;
}

uint64_t sub_1B07B6DE4()
{
  uint64_t v0 = sub_1B0869D98();
  uint64_t v2 = v1;
  if (v0 == sub_1B0869D98() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = sub_1B086A8A8();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t initializeWithCopy for FontUseCase(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  char v8 = *(unsigned char *)(a2 + 40);
  sub_1B07BCAAC(*(id *)a2, v4, v5, v6, v7, v8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(unsigned char *)(a1 + 40) = v8;
  return a1;
}

uint64_t sub_1B07B6EE8()
{
  sub_1B0869D98();
  sub_1B086A958();
  sub_1B0869E38();
  uint64_t v0 = sub_1B086A998();
  swift_bridgeObjectRelease();
  return v0;
}

double VerticalMarginsMeasurable.measurements(fitting:in:)(uint64_t a1, double a2, double a3)
{
  uint64_t v7 = sub_1B086A868();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  id v10 = &v34[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = *v3;
  uint64_t v12 = *v3 + 16;
  swift_beginAccess();
  sub_1B07BBD78(v12, (uint64_t)v35);
  uint64_t v13 = v36;
  uint64_t v14 = v37;
  __swift_project_boxed_opaque_existential_1(v35, v36);
  double v15 = (*(double (**)(uint64_t, uint64_t, uint64_t, double, double))(v14 + 8))(a1, v13, v14, a2, a3);
  double v17 = v16;
  double v19 = v18;
  double v21 = v20;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
  double v22 = fabs(v17);
  if (fabs(v15) < COERCE_DOUBLE(1) || v22 < COERCE_DOUBLE(1))
  {
    double v15 = 0.0;
    if ((*(unsigned char *)(v11 + 136) & 1) == 0)
    {
      sub_1B07BBD78(v11 + 56, (uint64_t)v35);
      uint64_t v24 = v36;
      uint64_t v25 = v37;
      __swift_project_boxed_opaque_existential_1(v35, v36);
      sub_1B07B76D8((uint64_t)v10);
      AnyDimension.value(in:rounded:)(a1, (uint64_t)v10, v24, v25);
      double v26 = *(void (**)(unsigned char *, uint64_t))(v8 + 8);
      v26(v10, v7);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
      sub_1B07BBD78(v11 + 96, (uint64_t)v35);
      uint64_t v27 = v36;
      uint64_t v28 = v37;
      __swift_project_boxed_opaque_existential_1(v35, v36);
      sub_1B07B76D8((uint64_t)v10);
      AnyDimension.value(in:rounded:)(a1, (uint64_t)v10, v27, v28);
      v26(v10, v7);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
      return a2;
    }
  }
  else
  {
    sub_1B07BBD78(v11 + 56, (uint64_t)v35);
    uint64_t v29 = v36;
    uint64_t v30 = v37;
    __swift_project_boxed_opaque_existential_1(v35, v36);
    AnyDimension.topMargin(from:in:)(a1, v29, v30, v15, v17, v19);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
    sub_1B07BBD78(v11 + 96, (uint64_t)v35);
    uint64_t v31 = v36;
    uint64_t v32 = v37;
    __swift_project_boxed_opaque_existential_1(v35, v36);
    AnyDimension.bottomMargin(from:in:)(a1, v31, v32, v15, v17, v19, v21);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
  }
  return v15;
}

double AnyDimension.bottomMargin(from:in:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6, double a7)
{
  uint64_t v11 = sub_1B086A868();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B07B76D8((uint64_t)v14);
  AnyDimension.value(in:rounded:)(a1, (uint64_t)v14, a2, a3);
  double v16 = v15;
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  return v16 - a7;
}

double AnyDimension.topMargin(from:in:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6)
{
  uint64_t v10 = sub_1B086A868();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B07B76D8((uint64_t)v13);
  AnyDimension.value(in:rounded:)(a1, (uint64_t)v13, a2, a3);
  double v15 = v14;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return v15 - a6;
}

uint64_t AnyDimension.value(in:rounded:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_1B086A868();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790]();
  uint64_t v11 = (char *)v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13[1] = (*(double (**)(uint64_t, uint64_t, uint64_t))(a4 + 8))(a1, a3, a4);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v9 + 88))(v11, v8);
  if (result != *MEMORY[0x1E4FBBEA0]
    && result != *MEMORY[0x1E4FBBE98]
    && result != *MEMORY[0x1E4FBBEA8]
    && result != *MEMORY[0x1E4FBBEB0]
    && result != *MEMORY[0x1E4FBBE88]
    && result != *MEMORY[0x1E4FBBE90])
  {
    sub_1B086A138();
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  return result;
}

uint64_t sub_1B07B76D8@<X0>(uint64_t a1@<X8>)
{
  if (qword_1EB596548 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1B086A868();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EB5964D8);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

void sub_1B07B7780(void *a1, double a2, double a3)
{
}

void LayoutTextViewPlaceholder.measurements(fitting:in:)(void *a1, double a2, double a3)
{
  swift_beginAccess();
  swift_beginAccess();
  uint64_t v7 = (void *)v3[13];
  if (v7)
  {
    swift_beginAccess();
    uint64_t v8 = v3[4];
    swift_beginAccess();
    uint64_t v9 = v3[12];
    swift_beginAccess();
    uint64_t v10 = v3[5];
    swift_beginAccess();
    uint64_t v11 = v3[11];
    swift_bridgeObjectRetain();
    TextMeasurable.init(text:font:textAlignment:lineBreakMode:lineSpacing:numberOfLines:isLanguageAware:)(v7, v8, v9, v10, v11, 0, (uint64_t)&v13);
    uint64_t v12 = v13;
    TextMeasurable.measurements(fitting:in:)(a1, a2, a3);
  }
  else
  {
    __break(1u);
  }
}

void TextMeasurable.init(text:font:textAlignment:lineBreakMode:lineSpacing:numberOfLines:isLanguageAware:)(void *a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, char a6@<W7>, uint64_t a7@<X8>)
{
  id v13 = objc_allocWithZone(MEMORY[0x1E4F28E48]);
  double v14 = (void *)sub_1B0869D68();
  swift_bridgeObjectRelease();
  id v15 = objc_msgSend(v13, sel_initWithString_, v14);

  id v16 = objc_msgSend(v15, sel_length);
  objc_msgSend(v15, sel_addAttribute_value_range_, *MEMORY[0x1E4FB06F8], a1, 0, v16);
  id v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB0848]), sel_init);
  objc_msgSend(v17, sel_setAlignment_, a2);
  objc_msgSend(v17, sel_setLineBreakMode_, a3);
  objc_msgSend(v17, sel_setLineBreakStrategy_, 0xFFFFLL);
  if (a4)
  {
    objc_msgSend(v17, sel_setMinimumLineHeight_, (double)a4);
    objc_msgSend(v17, sel_setMaximumLineHeight_, (double)a4);
  }
  uint64_t v18 = *MEMORY[0x1E4FB0738];
  id v19 = v17;
  objc_msgSend(v15, sel_addAttribute_value_range_, v18, v19, 0, v16);

  *(void *)a7 = v15;
  *(void *)(a7 + 8) = a5;
  *(unsigned char *)(a7 + 16) = a6 & 1;
}

void TextMeasurable.measurements(fitting:in:)(void *a1, double a2, double a3)
{
  uint64_t v7 = sub_1B086A868();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v11 = &v47[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v9);
  id v13 = &v47[-v12];
  double v14 = *(void **)v3;
  uint64_t v15 = *(void *)(v3 + 8);
  int v48 = *(unsigned __int8 *)(v3 + 16);
  id v16 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB0860]), sel_init);
  objc_msgSend(v16, sel_setWantsBaselineOffset_, 1);
  if (v15 >= 1) {
    objc_msgSend(v16, sel_setMaximumNumberOfLines_, v15);
  }
  v49 = v14;
  id v50 = v16;
  objc_msgSend(v14, sel_boundingRectWithSize_options_context_, 1, v16, a2, a3);
  double v18 = v17;
  double v20 = v19;
  id v21 = objc_msgSend(a1, sel_traitCollection);
  uint64_t v22 = *MEMORY[0x1E4FBBEA8];
  double v23 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v8 + 104);
  v23(v13, v22, v7);
  uint64_t v24 = v21;
  objc_msgSend(v21, sel_displayScale);
  if (v25 <= 0.0) {
    double v25 = ForJetUIOnly_MainScreenScale();
  }
  sub_1B07B8068((uint64_t)v13, v25, v18);
  double v26 = *(void (**)(unsigned char *, uint64_t))(v8 + 8);
  v26(v13, v7);
  v23(v11, v22, v7);
  objc_msgSend(v24, sel_displayScale);
  if (v27 <= 0.0) {
    double v27 = ForJetUIOnly_MainScreenScale();
  }
  sub_1B07B8068((uint64_t)v11, v27, v20);
  v26(v11, v7);
  id v28 = v50;
  objc_msgSend(v50, sel_firstBaselineOffset);
  objc_msgSend(v28, sel_baselineOffset);
  uint64_t v29 = v49;
  if (v48)
  {
    id v30 = objc_msgSend(self, sel_preferredFontForTextStyle_compatibleWithTraitCollection_, *MEMORY[0x1E4FB28C8], 0);
    id v31 = objc_msgSend(v29, sel_string);
    uint64_t v32 = sub_1B0869D98();
    uint64_t v34 = v33;

    uint64_t aBlock = v32;
    uint64_t v52 = v34;
    if (qword_1EB5964B8 != -1) {
      swift_once();
    }
    uint64_t v35 = sub_1B0869078();
    __swift_project_value_buffer(v35, (uint64_t)qword_1EB596390);
    sub_1B07B862C();
    sub_1B086A408();
    char v37 = v36;
    swift_bridgeObjectRelease();
    if (v37)
    {
    }
    else
    {
      long long v38 = *(_OWORD *)(MEMORY[0x1E4FB2848] + 16);
      long long v58 = *MEMORY[0x1E4FB2848];
      long long v59 = v38;
      char v57 = 0;
      id v39 = objc_msgSend(v29, sel_length);
      uint64_t v40 = *MEMORY[0x1E4FB06F8];
      uint64_t v41 = swift_allocObject();
      *(void *)(v41 + 16) = &v58;
      *(void *)(v41 + 24) = &v57;
      uint64_t v42 = swift_allocObject();
      *(void *)(v42 + 16) = sub_1B07CA434;
      *(void *)(v42 + 24) = v41;
      v55 = sub_1B07CA44C;
      uint64_t v56 = v42;
      uint64_t aBlock = MEMORY[0x1E4F143A8];
      uint64_t v52 = 1107296256;
      v53 = sub_1B07C89E8;
      v54 = &block_descriptor_12;
      id v43 = _Block_copy(&aBlock);
      swift_retain();
      swift_release();
      objc_msgSend(v29, sel_enumerateAttribute_inRange_options_usingBlock_, v40, 0, v39, 0x100000, v43);
      _Block_release(v43);
      LOBYTE(v39) = swift_isEscapingClosureAtFileLocation();
      swift_release();
      if (v39)
      {
        __break(1u);
      }
      else
      {
        if (v57 != 1)
        {
          *(void *)&long long v58 = UIFont.languageAwareOutsets.getter();
          *((void *)&v58 + 1) = v44;
          *(void *)&long long v59 = v45;
          *((void *)&v59 + 1) = v46;
        }

        swift_release();
      }
    }
  }
  else
  {
  }
}

double sub_1B07B8068(uint64_t a1, double a2, double a3)
{
  uint64_t v6 = sub_1B086A868();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v10 = a2 * a3;
  double v16 = v10;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
  int v11 = (*(uint64_t (**)(char *, uint64_t))(v7 + 88))(v9, v6);
  if (v11 == *MEMORY[0x1E4FBBEA0])
  {
    double v12 = round(v10);
  }
  else if (v11 == *MEMORY[0x1E4FBBE98])
  {
    double v12 = rint(v10);
  }
  else if (v11 == *MEMORY[0x1E4FBBEA8])
  {
    double v12 = ceil(v10);
  }
  else if (v11 == *MEMORY[0x1E4FBBEB0])
  {
    double v12 = floor(v10);
  }
  else if (v11 == *MEMORY[0x1E4FBBE88])
  {
    double v12 = trunc(v10);
  }
  else if (v11 == *MEMORY[0x1E4FBBE90])
  {
    double v12 = ceil(v10);
    double v13 = floor(v10);
    if (v10 < 0.0) {
      double v12 = v13;
    }
  }
  else
  {
    sub_1B086A138();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    double v12 = v16;
  }
  return v12 / a2;
}

double sub_1B07B8250()
{
  return *(float *)v0;
}

double sub_1B07B825C(uint64_t a1, double a2, double a3)
{
  return sub_1B07B8264(a1, *v3, a2, a3);
}

double sub_1B07B8264(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v7 = a2 + 16;
  swift_beginAccess();
  sub_1B07BBD78(v7, (uint64_t)v14);
  uint64_t v8 = v15;
  uint64_t v9 = v16;
  __swift_project_boxed_opaque_existential_1(v14, v15);
  double v10 = (*(double (**)(uint64_t, uint64_t, double, double))(*(void *)(*(void *)(v9 + 8) + 8) + 8))(a1, v8, a3, a4);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  sub_1B07BBD78(v7, (uint64_t)v14);
  uint64_t v11 = v15;
  uint64_t v12 = v16;
  __swift_project_boxed_opaque_existential_1(v14, v15);
  (*(void (**)(uint64_t, uint64_t))(v12 + 96))(v11, v12);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  return v10;
}

void sub_1B07B8398()
{
}

void LayoutTextViewPlaceholder.languageAwareOutsets.getter()
{
  swift_beginAccess();
  swift_beginAccess();
  uint64_t v1 = *(void **)(v0 + 104);
  if (v1)
  {
    uint64_t v2 = qword_1EB5964B8;
    swift_bridgeObjectRetain();
    id v3 = v1;
    if (v2 != -1) {
      swift_once();
    }
    uint64_t v4 = sub_1B0869078();
    __swift_project_value_buffer(v4, (uint64_t)qword_1EB596390);
    sub_1B07B862C();
    sub_1B086A408();
    if ((v5 & 1) == 0) {
      UIFont.languageAwareOutsets.getter();
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

id sub_1B07B8504()
{
  return objc_msgSend(*v0, sel_jet_isTextExtraTall);
}

uint64_t sub_1B07B8528(void *a1)
{
  id v1 = a1;
  id v2 = objc_msgSend(v1, sel_text);
  if (!v2)
  {

    return 0;
  }
  id v3 = v2;
  sub_1B0869D98();

  if (qword_1EB5964B8 != -1) {
    swift_once();
  }
  uint64_t v4 = sub_1B0869078();
  __swift_project_value_buffer(v4, (uint64_t)qword_1EB596390);
  sub_1B07B862C();
  uint64_t v5 = 1;
  sub_1B086A408();
  char v7 = v6;

  swift_bridgeObjectRelease();
  if (v7) {
    return 0;
  }
  return v5;
}

unint64_t sub_1B07B862C()
{
  unint64_t result = qword_1EB595E10;
  if (!qword_1EB595E10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB595E10);
  }
  return result;
}

uint64_t sub_1B07B86F8(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EB5962E0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1B07B8758(uint64_t a1)
{
  swift_getObjectType();
  sub_1B07B8884(a1, (uint64_t)&v15);
  if (!*((void *)&v16 + 1))
  {
    sub_1B07B86F8((uint64_t)&v15);
    goto LABEL_7;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_7:
    char v10 = 0;
    return v10 & 1;
  }
  id v3 = *(char **)&v12[0];
  uint64_t v4 = *(void *)(v1 + OBJC_IVAR____TtC5JetUIP33_925E47A64C9969C34ACE8A7AFC4CB7868CacheKey_useCase + 32);
  char v5 = *(unsigned char *)(v1 + OBJC_IVAR____TtC5JetUIP33_925E47A64C9969C34ACE8A7AFC4CB7868CacheKey_useCase + 40);
  long long v6 = *(_OWORD *)(v1 + OBJC_IVAR____TtC5JetUIP33_925E47A64C9969C34ACE8A7AFC4CB7868CacheKey_useCase + 16);
  long long v15 = *(_OWORD *)(v1 + OBJC_IVAR____TtC5JetUIP33_925E47A64C9969C34ACE8A7AFC4CB7868CacheKey_useCase);
  long long v16 = v6;
  uint64_t v17 = v4;
  char v18 = v5;
  uint64_t v7 = *(void *)&v12[0] + OBJC_IVAR____TtC5JetUIP33_925E47A64C9969C34ACE8A7AFC4CB7868CacheKey_useCase;
  uint64_t v8 = *(void *)(*(void *)&v12[0] + OBJC_IVAR____TtC5JetUIP33_925E47A64C9969C34ACE8A7AFC4CB7868CacheKey_useCase + 32);
  LOBYTE(v4) = *(unsigned char *)(*(void *)&v12[0]
                        + OBJC_IVAR____TtC5JetUIP33_925E47A64C9969C34ACE8A7AFC4CB7868CacheKey_useCase
                        + 40);
  v12[0] = *(_OWORD *)(*(void *)&v12[0] + OBJC_IVAR____TtC5JetUIP33_925E47A64C9969C34ACE8A7AFC4CB7868CacheKey_useCase);
  v12[1] = *(_OWORD *)(v7 + 16);
  uint64_t v13 = v8;
  char v14 = v4;
  if (!_s5JetUI11FontUseCaseO2eeoiySbAC_ACtFZ_0((uint64_t)&v15, (uint64_t)v12))
  {

    goto LABEL_7;
  }
  sub_1B07B88EC();
  id v9 = *(id *)&v3[OBJC_IVAR____TtC5JetUIP33_925E47A64C9969C34ACE8A7AFC4CB7868CacheKey_traitCollection];
  char v10 = sub_1B086A388();

  return v10 & 1;
}

uint64_t sub_1B07B8884(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EB5962E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1B07B88EC()
{
  unint64_t result = qword_1EB5962D8;
  if (!qword_1EB5962D8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EB5962D8);
  }
  return result;
}

uint64_t Measurable.placeable.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v8 = *(void *)(a1 - 8);
  MEMORY[0x1F4188790](a1);
  char v10 = (char *)&v20[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v11(v10, v4, a1);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB595770);
  if (swift_dynamicCast())
  {
    sub_1B07BA8FC(v23, (uint64_t)a3);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EB595758);
    if (swift_dynamicCast())
    {
      sub_1B07BA8FC(v23, (uint64_t)v20);
      uint64_t v12 = v21;
      uint64_t v13 = v22;
      __swift_project_boxed_opaque_existential_1(v20, v21);
      (*(void (**)(uint64_t, uint64_t))(v13 + 16))(v12, v13);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EB595668);
      if (swift_dynamicCast())
      {
        a3[3] = &type metadata for _MeasurableLayoutPlaceable;
        a3[4] = &protocol witness table for _MeasurableLayoutPlaceable;
        uint64_t v14 = swift_allocObject();
        *a3 = v14;
        sub_1B0810C90(v23, (_OWORD *)(v14 + 16));
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(qword_1EB5963B0);
        if (swift_dynamicCast())
        {
          a3[3] = &type metadata for _LayoutViewPlaceable;
          a3[4] = &protocol witness table for _LayoutViewPlaceable;
          uint64_t v15 = swift_allocObject();
          *a3 = v15;
          sub_1B07BA8FC(v23, v15 + 16);
        }
        else
        {
          a3[3] = &type metadata for _MeasurablePlaceable;
          a3[4] = &protocol witness table for _MeasurablePlaceable;
          long long v16 = (uint64_t *)swift_allocObject();
          *a3 = v16;
          v16[5] = a1;
          v16[6] = a2;
          boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v16 + 2);
          v11((char *)boxed_opaque_existential_0, v4, a1);
        }
      }
    }
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, a1);
}

void sub_1B07B8BE0(void *a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  uint64_t v10 = *(void *)(v5 + 88);
  id v11 = a1;
  swift_bridgeObjectRetain();
  v51.origin.double x = a2;
  v51.origin.double y = a3;
  v51.size.double width = a4;
  v51.size.double height = a5;
  CGFloat v43 = a2;
  CGFloat v44 = a3;
  CGFloat v22 = a5;
  CGFloat v45 = a4;
  CGFloat v46 = a5;
  id v47 = v11;
  uint64_t v48 = v10;
  uint64_t v49 = 0;
  CGFloat MinX = CGRectGetMinX(v51);
  id v12 = v11;
  swift_bridgeObjectRetain();
  HorizontalStack.Placements.next()((uint64_t)&v37);
  while (*((void *)&v38 + 1))
  {
    long long v33 = v39;
    long long v34 = v40;
    long long v35 = v41;
    uint64_t v36 = v42;
    v32[0] = v37;
    v32[1] = v38;
    sub_1B07BBD78((uint64_t)v32, (uint64_t)v29);
    uint64_t v13 = v30;
    uint64_t v14 = v31;
    __swift_project_boxed_opaque_existential_1(v29, v30);
    double x = *((double *)&v33 + 1);
    double width = *((double *)&v34 + 1);
    double y = *(double *)&v34;
    double height = *(double *)&v35;
    if (objc_msgSend(v12, sel_layoutDirection) == (id)1)
    {
      CGAffineTransformMakeScale(&v28, -1.0, 1.0);
      long long v25 = *(_OWORD *)&v28.c;
      long long v26 = *(_OWORD *)&v28.a;
      CGFloat ty = v28.ty;
      CGFloat tx = v28.tx;
      v52.origin.double x = a2;
      v52.origin.double y = a3;
      v52.size.double width = a4;
      v52.size.double height = v22;
      *(double *)rect = x;
      double v19 = CGRectGetMinX(v52);
      v53.origin.double x = a2;
      v53.origin.double y = a3;
      v53.size.double width = a4;
      v53.size.double height = v22;
      CGFloat MaxX = CGRectGetMaxX(v53);
      *(_OWORD *)&v28.a = v26;
      *(_OWORD *)&v28.c = v25;
      v28.CGFloat tx = tx;
      v28.CGFloat ty = ty;
      CGAffineTransformTranslate((CGAffineTransform *)&rect[1], &v28, -(v19 + MaxX), 0.0);
      CGAffineTransform v28 = *(CGAffineTransform *)&rect[1];
      *(void *)&v54.origin.double x = rect[0];
      v54.origin.double y = y;
      v54.size.double width = width;
      v54.size.double height = height;
      CGRect v55 = CGRectApplyAffineTransform(v54, &v28);
      double x = v55.origin.x;
      double y = v55.origin.y;
      double width = v55.size.width;
      double height = v55.size.height;
    }
    (*(void (**)(id, uint64_t, uint64_t, double, double, double, double))(v14 + 16))(v12, v13, v14, x, y, width, height);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
    sub_1B07BD394((uint64_t)v32);
    HorizontalStack.Placements.next()((uint64_t)&v37);
  }
  uint64_t v21 = v47;
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
}

uint64_t HorizontalStack.Placements.next()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 40);
  uint64_t v4 = *(void *)(v1 + 48);
  if (v4 >= *(void *)(v3 + 16))
  {
    *(void *)(a1 + 80) = 0;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
    return result;
  }
  if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = v1;
    sub_1B07B9258(v3 + (v4 << 7) + 32, (uint64_t)v50, &qword_1EB595728);
    *(void *)(v1 + 48) = v4 + 1;
    if (v60)
    {
      double v6 = *(double *)(v1 + 56);
      double MinY = CGRectGetMinY(*(CGRect *)v1);
      sub_1B07BBD78((uint64_t)v50, (uint64_t)v49);
      sub_1B07BBD78((uint64_t)v49, (uint64_t)&v43);
      double v8 = floor(v6);
LABEL_5:
      *((double *)&v45 + 1) = v8;
      long long v46 = COERCE_UNSIGNED_INT64(floor(MinY));
      *(void *)&long long v47 = 0;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
      *((void *)&v47 + 1) = 0;
      *(void *)(a1 + 80) = 0;
      long long v9 = v46;
      *(_OWORD *)(a1 + 32) = v45;
      *(_OWORD *)(a1 + 48) = v9;
      long long v10 = v44;
      *(_OWORD *)a1 = v43;
      *(_OWORD *)(a1 + 16) = v10;
      *(_OWORD *)(a1 + 64) = v47;
      return sub_1B07BBE14((uint64_t)v50, &qword_1EB595728);
    }
    CGFloat v12 = *(double *)v1;
    CGFloat v11 = *(double *)(v1 + 8);
    CGFloat v14 = *(double *)(v1 + 16);
    CGFloat v13 = *(double *)(v1 + 24);
    v61.origin.double x = *(CGFloat *)v1;
    v61.origin.double y = v11;
    v61.size.double width = v14;
    v61.size.double height = v13;
    if (CGRectGetWidth(v61) == 0.0)
    {
      double v15 = v13;
      double v16 = v14;
    }
    else
    {
      v62.origin.double x = v12;
      v62.origin.double y = v11;
      v62.size.double width = v14;
      v62.size.double height = v13;
      CGFloat MaxX = CGRectGetMaxX(v62);
      double v18 = *(double *)(v1 + 56);
      double v16 = MaxX - v18;
      v63.origin.double x = v12;
      v63.origin.double y = v11;
      v63.size.double width = v14;
      v63.size.double height = v13;
      double Height = CGRectGetHeight(v63);
      if (v16 <= 0.0)
      {
        v69.origin.double x = v12;
        v69.origin.double y = v11;
        v69.size.double width = v14;
        v69.size.double height = v13;
        double MinY = CGRectGetMinY(v69);
        sub_1B07BBD78((uint64_t)v50, (uint64_t)v49);
        sub_1B07BBD78((uint64_t)v49, (uint64_t)&v43);
        double v8 = floor(v18);
        goto LABEL_5;
      }
      double v15 = Height;
    }
    double v20 = *(void **)(v1 + 32);
    uint64_t v21 = v51;
    uint64_t v22 = v52;
    __swift_project_boxed_opaque_existential_1(v50, v51);
    double v23 = (*(double (**)(void *, uint64_t, uint64_t, double, double))(v22 + 8))(v20, v21, v22, v16, v15);
    double v41 = v25;
    double v42 = v24;
    double v27 = v26;
    uint64_t v28 = v54;
    uint64_t v29 = v55;
    __swift_project_boxed_opaque_existential_1(v53, v54);
    double v30 = AnyDimension.value(with:)(v20, v28, v29);
    if (v30 < 0.0) {
      double v30 = 0.0;
    }
    double v31 = *(double *)(v5 + 56) + v30;
    uint64_t v32 = v57;
    uint64_t v33 = v58;
    __swift_project_boxed_opaque_existential_1(v56, v57);
    *(double *)(v5 + 56) = v23 + v31 + AnyDimension.value(with:)(v20, v32, v33);
    switch(v59)
    {
      case 1:
        double v34 = v27;
        v65.origin.double x = v12;
        v65.origin.double y = v11;
        v65.size.double width = v14;
        v65.size.double height = v13;
        double v35 = CGRectGetMidY(v65) + v42 * -0.5;
        break;
      case 2:
        double v34 = v27;
        v66.origin.double x = v12;
        v66.origin.double y = v11;
        v66.size.double width = v14;
        v66.size.double height = v13;
        double MaxY = CGRectGetMaxY(v66);
        double v37 = v42;
        goto LABEL_18;
      case 3:
        v67.origin.double x = v12;
        v67.origin.double y = v11;
        v67.size.double width = v14;
        v67.size.double height = v13;
        double MaxY = CGRectGetMaxY(v67);
        double v34 = v27;
        double v37 = v42 - v27;
LABEL_18:
        double v35 = MaxY - v37;
        break;
      default:
        double v34 = v27;
        v64.origin.double x = v12;
        v64.origin.double y = v11;
        v64.size.double width = v14;
        v64.size.double height = v13;
        double v35 = CGRectGetMinY(v64);
        break;
    }
    if (v35 < 0.0)
    {
      v68.origin.double x = v12;
      v68.origin.double y = v11;
      v68.size.double width = v14;
      v68.size.double height = v13;
      if (CGRectGetHeight(v68) == 0.0) {
        double v35 = 0.0;
      }
    }
    sub_1B07BBD78((uint64_t)v50, (uint64_t)v49);
    sub_1B07BBD78((uint64_t)v49, (uint64_t)&v43);
    *((void *)&v45 + 1) = floor(v31);
    *(void *)&long long v46 = floor(v35);
    *((void *)&v46 + 1) = ceil(v23);
    *(void *)&long long v47 = ceil(v42);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
    *((void *)&v47 + 1) = floor(v41);
    double v48 = floor(v34);
    long long v38 = v46;
    *(_OWORD *)(a1 + 32) = v45;
    *(_OWORD *)(a1 + 48) = v38;
    long long v39 = v44;
    *(_OWORD *)a1 = v43;
    *(_OWORD *)(a1 + 16) = v39;
    *(_OWORD *)(a1 + 64) = v47;
    *(double *)(a1 + 80) = v48;
    return sub_1B07BBE14((uint64_t)v50, &qword_1EB595728);
  }
  __break(1u);
  return result;
}

uint64_t sub_1B07B9258(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1B07B92C8(void *a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  uint64_t v11 = *(void *)(v5 + 40);
  sub_1B07BBD78(v5, (uint64_t)&v52);
  uint64_t v67 = 0;
  long long v65 = 0u;
  long long v66 = 0u;
  *(CGFloat *)double v42 = a2;
  *(CGFloat *)&v42[8] = a3;
  v62.double x = a2;
  v62.double y = a3;
  *(CGFloat *)&v42[16] = a4;
  *(CGFloat *)&v42[24] = a5;
  v63.double width = a4;
  v63.double height = a5;
  *(void *)&long long v64 = a1;
  *((void *)&v64 + 1) = v11;
  id v12 = a1;
  sub_1B07B9AF8((uint64_t)&v65);
  sub_1B07BA8FC(&v52, (uint64_t)&v65);
  v68[2] = v64;
  v68[3] = v65;
  v68[4] = v66;
  uint64_t v69 = v67;
  v68[0] = v62;
  v68[1] = v63;
  sub_1B07BB13C((uint64_t)v68, (uint64_t)&v62);
  sub_1B07BA914((uint64_t)&v65, (uint64_t)&v52);
  if (v54)
  {
    while (1)
    {
      sub_1B07BA8FC(&v52, (uint64_t)&v48);
      sub_1B07B9AF8((uint64_t)&v65);
      long long v65 = 0u;
      long long v66 = 0u;
      uint64_t v67 = 0;
      CGFloat d = v48.d;
      CGFloat tx = v48.tx;
      __swift_project_boxed_opaque_existential_1(&v48, *(uint64_t *)&v48.d);
      CGSize v15 = v63;
      double v16 = (*(double (**)(void, CGFloat, CGFloat, CGFloat, CGFloat))(*(void *)&tx + 8))(v64, COERCE_CGFLOAT(*(void *)&d), COERCE_CGFLOAT(*(void *)&tx), v63.width, v63.height);
      double v18 = v17;
      double v20 = v19;
      double v22 = v21;
      CGPoint v23 = v62;
      v70.origin = v62;
      v70.size = v15;
      rect[0] = CGRectGetMidX(v70) - v16 * 0.5;
      v71.origin = v23;
      v71.size = v15;
      double v24 = CGRectGetMidY(v71) - v18 * 0.5;
      sub_1B07BBD78((uint64_t)&v48, (uint64_t)&rect[1]);
      sub_1B07BBD78((uint64_t)&rect[1], (uint64_t)&v52);
      double v56 = floor(rect[0]);
      double v57 = floor(v24);
      double v58 = ceil(v16);
      double v59 = ceil(v18);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&rect[1]);
      long long v25 = v52;
      uint64_t v26 = v53;
      uint64_t v27 = v54;
      uint64_t v28 = v55;
      double v29 = v56;
      double v31 = v57;
      double v30 = v58;
      double v32 = v59;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v48);
      if (!v27) {
        break;
      }
      long long v52 = v25;
      uint64_t v53 = v26;
      uint64_t v54 = v27;
      uint64_t v55 = v28;
      double v56 = v29;
      double v57 = v31;
      double v58 = v30;
      double v59 = v32;
      double v60 = floor(v20);
      double v61 = floor(v22);
      sub_1B07BBD78((uint64_t)&v52, (uint64_t)v49);
      uint64_t v33 = v50;
      uint64_t v34 = v51;
      __swift_project_boxed_opaque_existential_1(v49, v50);
      double x = v56;
      double y = v57;
      double width = v58;
      double height = v59;
      if (objc_msgSend(v12, sel_layoutDirection) == (id)1)
      {
        CGAffineTransformMakeScale(&v48, -1.0, 1.0);
        long long v45 = *(_OWORD *)&v48.c;
        long long v46 = *(_OWORD *)&v48.a;
        CGFloat ty = v48.ty;
        CGFloat v44 = v48.tx;
        rect[0] = x;
        double MinX = CGRectGetMinX(*(CGRect *)v42);
        CGFloat MaxX = CGRectGetMaxX(*(CGRect *)v42);
        *(_OWORD *)&v48.a = v46;
        *(_OWORD *)&v48.c = v45;
        v48.CGFloat tx = v44;
        v48.CGFloat ty = ty;
        CGAffineTransformTranslate((CGAffineTransform *)&rect[1], &v48, -(MinX + MaxX), 0.0);
        CGAffineTransform v48 = *(CGAffineTransform *)&rect[1];
        v72.origin.double x = rect[0];
        v72.origin.double y = y;
        v72.size.double width = width;
        v72.size.double height = height;
        CGRect v73 = CGRectApplyAffineTransform(v72, &v48);
        double x = v73.origin.x;
        double y = v73.origin.y;
        double width = v73.size.width;
        double height = v73.size.height;
      }
      (*(void (**)(id, uint64_t, uint64_t, double, double, double, double))(v34 + 16))(v12, v33, v34, x, y, width, height);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
      sub_1B07BD394((uint64_t)&v52);
      sub_1B07BA914((uint64_t)&v65, (uint64_t)&v52);
      if (!v54) {
        goto LABEL_7;
      }
    }
  }
  else
  {
LABEL_7:
    sub_1B07B9AF8((uint64_t)&v52);
  }
  sub_1B07B968C((uint64_t)&v62);
  return sub_1B07B968C((uint64_t)v68);
}

uint64_t sub_1B07B968C(uint64_t a1)
{
  return a1;
}

void destroy for Center.Placements(uint64_t a1)
{
  if (*(void *)(a1 + 72))
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 48);
  }
}

uint64_t sub_1B07B970C(void *a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  sub_1B07BA7F4(v5 + 40, (uint64_t)&v44);
  sub_1B07BA7F4(v5 + 88, (uint64_t)&v45);
  sub_1B07BA7F4(v5 + 136, (uint64_t)&v46);
  sub_1B07BA7F4(v5 + 184, (uint64_t)&v47);
  sub_1B07BBD78(v5, (uint64_t)v42);
  memset(v48, 0, sizeof(v48));
  *(CGFloat *)long long v43 = a2;
  *(CGFloat *)&v43[1] = a3;
  CGFloat v21 = a5;
  *(CGFloat *)&v43[2] = a4;
  *(CGFloat *)&v43[3] = a5;
  uint64_t v49 = 0;
  v43[4] = a1;
  id v11 = a1;
  sub_1B07B9AF8((uint64_t)v48);
  sub_1B07BA8FC(v42, (uint64_t)v48);
  sub_1B07B9D00((uint64_t)v43, (uint64_t)v42);
  Resize.Placements.next()((uint64_t)&v36);
  while (*((void *)&v37 + 1))
  {
    long long v32 = v38;
    long long v33 = v39;
    long long v34 = v40;
    uint64_t v35 = v41;
    v31[0] = v36;
    v31[1] = v37;
    sub_1B07BBD78((uint64_t)v31, (uint64_t)v28);
    uint64_t v12 = v29;
    uint64_t v13 = v30;
    __swift_project_boxed_opaque_existential_1(v28, v29);
    double x = *((double *)&v32 + 1);
    double width = *((double *)&v33 + 1);
    double y = *(double *)&v33;
    double height = *(double *)&v34;
    if (objc_msgSend(v11, sel_layoutDirection) == (id)1)
    {
      CGAffineTransformMakeScale(&v27, -1.0, 1.0);
      long long v24 = *(_OWORD *)&v27.c;
      long long v25 = *(_OWORD *)&v27.a;
      CGFloat ty = v27.ty;
      CGFloat tx = v27.tx;
      v50.origin.double x = a2;
      v50.origin.double y = a3;
      v50.size.double width = a4;
      v50.size.double height = v21;
      *(double *)rect = x;
      double MinX = CGRectGetMinX(v50);
      v51.origin.double x = a2;
      v51.origin.double y = a3;
      v51.size.double width = a4;
      v51.size.double height = v21;
      CGFloat MaxX = CGRectGetMaxX(v51);
      *(_OWORD *)&v27.a = v25;
      *(_OWORD *)&v27.c = v24;
      v27.CGFloat tx = tx;
      v27.CGFloat ty = ty;
      CGAffineTransformTranslate((CGAffineTransform *)&rect[1], &v27, -(MinX + MaxX), 0.0);
      CGAffineTransform v27 = *(CGAffineTransform *)&rect[1];
      *(void *)&v52.origin.double x = rect[0];
      v52.origin.double y = y;
      v52.size.double width = width;
      v52.size.double height = height;
      CGRect v53 = CGRectApplyAffineTransform(v52, &v27);
      double x = v53.origin.x;
      double y = v53.origin.y;
      double width = v53.size.width;
      double height = v53.size.height;
    }
    (*(void (**)(id, uint64_t, uint64_t, double, double, double, double))(v13 + 16))(v11, v12, v13, x, y, width, height);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
    sub_1B07BD394((uint64_t)v31);
    Resize.Placements.next()((uint64_t)&v36);
  }
  sub_1B07B99C0((uint64_t)v42);
  return sub_1B07B99C0((uint64_t)v43);
}

uint64_t sub_1B07B99C0(uint64_t a1)
{
  return a1;
}

void destroy for Resize.Placements(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 80) == 1)
  {
    swift_release();
  }
  else if (!*(unsigned char *)(a1 + 80))
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  }
  if (*(unsigned char *)(a1 + 128) == 1)
  {
    swift_release();
  }
  else if (!*(unsigned char *)(a1 + 128))
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 88);
  }
  if (*(unsigned char *)(a1 + 176) == 1)
  {
    swift_release();
  }
  else if (!*(unsigned char *)(a1 + 176))
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 136);
  }
  if (*(unsigned char *)(a1 + 224) == 1)
  {
    swift_release();
    if (!*(void *)(a1 + 256)) {
      return;
    }
    goto LABEL_17;
  }
  if (!*(unsigned char *)(a1 + 224)) {
    __swift_destroy_boxed_opaque_existential_1(a1 + 184);
  }
  if (*(void *)(a1 + 256))
  {
LABEL_17:
    __swift_destroy_boxed_opaque_existential_1(a1 + 232);
  }
}

uint64_t sub_1B07B9AF8(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB595778);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

double sub_1B07B9B58(void *a1, CGFloat a2, CGFloat a3)
{
  v10.origin.double x = 0.0;
  v10.origin.double y = 0.0;
  v10.size.double width = a2;
  v10.size.double height = a3;
  if (CGRectGetWidth(v10) == 1.79769313e308) {
    a2 = 0.0;
  }
  v11.origin.double x = 0.0;
  v11.origin.double y = 0.0;
  v11.size.double width = a2;
  v11.size.double height = a3;
  if (CGRectGetHeight(v11) == 1.79769313e308) {
    double v6 = 0.0;
  }
  else {
    double v6 = a3;
  }
  Resize.layout(relativeTo:with:)(a1, (uint64_t)v9, 0.0, 0.0, a2, v6);
  double v7 = sub_1B07B9C38();
  sub_1B07B99C0((uint64_t)v9);
  return v7;
}

double sub_1B07B9C38()
{
  sub_1B07B9D00(v0, (uint64_t)v6);
  Resize.Placements.next()((uint64_t)v3);
  if (v4)
  {
    double v1 = v5;
    sub_1B07BD394((uint64_t)v3);
    sub_1B07B99C0((uint64_t)v6);
  }
  else
  {
    sub_1B07B99C0((uint64_t)v6);
    if (qword_1E9B3A3E8 != -1) {
      swift_once();
    }
    double v1 = *(double *)&xmmword_1E9B3A5A0;
  }
  return ceil(v1);
}

uint64_t sub_1B07B9D00(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for Resize.Placements(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  double v5 = *(void **)(a2 + 32);
  *(void *)(a1 + 32) = v5;
  int v6 = *(unsigned __int8 *)(a2 + 80);
  id v7 = v5;
  if (v6 == 1)
  {
    uint64_t v11 = *(void *)(a2 + 48);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(void *)(a1 + 48) = v11;
    *(unsigned char *)(a1 + 80) = 1;
    swift_retain();
  }
  else
  {
    double v8 = (_OWORD *)(a1 + 40);
    long long v9 = (_OWORD *)(a2 + 40);
    if (v6)
    {
      long long v12 = *(_OWORD *)(a2 + 56);
      _OWORD *v8 = *v9;
      *(_OWORD *)(a1 + 56) = v12;
      *(_OWORD *)(a1 + 65) = *(_OWORD *)(a2 + 65);
    }
    else
    {
      long long v10 = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 64) = v10;
      (**(void (***)(_OWORD *, _OWORD *))(v10 - 8))(v8, v9);
      *(unsigned char *)(a1 + 80) = 0;
    }
  }
  if (*(unsigned char *)(a2 + 128) == 1)
  {
    uint64_t v16 = *(void *)(a2 + 96);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(void *)(a1 + 96) = v16;
    *(unsigned char *)(a1 + 128) = 1;
    swift_retain();
  }
  else
  {
    uint64_t v13 = (_OWORD *)(a1 + 88);
    CGFloat v14 = (_OWORD *)(a2 + 88);
    if (*(unsigned char *)(a2 + 128))
    {
      long long v17 = *(_OWORD *)(a2 + 104);
      *uint64_t v13 = *v14;
      *(_OWORD *)(a1 + 104) = v17;
      *(_OWORD *)(a1 + 113) = *(_OWORD *)(a2 + 113);
    }
    else
    {
      long long v15 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 112) = v15;
      (**(void (***)(_OWORD *, _OWORD *))(v15 - 8))(v13, v14);
      *(unsigned char *)(a1 + 128) = 0;
    }
  }
  if (*(unsigned char *)(a2 + 176) == 1)
  {
    uint64_t v21 = *(void *)(a2 + 144);
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    *(void *)(a1 + 144) = v21;
    *(unsigned char *)(a1 + 176) = 1;
    swift_retain();
  }
  else
  {
    double v18 = (_OWORD *)(a1 + 136);
    double v19 = (_OWORD *)(a2 + 136);
    if (*(unsigned char *)(a2 + 176))
    {
      long long v22 = *(_OWORD *)(a2 + 152);
      *double v18 = *v19;
      *(_OWORD *)(a1 + 152) = v22;
      *(_OWORD *)(a1 + 161) = *(_OWORD *)(a2 + 161);
    }
    else
    {
      long long v20 = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 160) = v20;
      (**(void (***)(_OWORD *, _OWORD *))(v20 - 8))(v18, v19);
      *(unsigned char *)(a1 + 176) = 0;
    }
  }
  if (*(unsigned char *)(a2 + 224) == 1)
  {
    uint64_t v26 = *(void *)(a2 + 192);
    *(void *)(a1 + 184) = *(void *)(a2 + 184);
    *(void *)(a1 + 192) = v26;
    *(unsigned char *)(a1 + 224) = 1;
    swift_retain();
  }
  else
  {
    CGPoint v23 = (_OWORD *)(a1 + 184);
    long long v24 = (_OWORD *)(a2 + 184);
    if (*(unsigned char *)(a2 + 224))
    {
      long long v27 = *(_OWORD *)(a2 + 200);
      *CGPoint v23 = *v24;
      *(_OWORD *)(a1 + 200) = v27;
      *(_OWORD *)(a1 + 209) = *(_OWORD *)(a2 + 209);
    }
    else
    {
      long long v25 = *(_OWORD *)(a2 + 208);
      *(_OWORD *)(a1 + 208) = v25;
      (**(void (***)(_OWORD *, _OWORD *))(v25 - 8))(v23, v24);
      *(unsigned char *)(a1 + 224) = 0;
    }
  }
  uint64_t v28 = (_OWORD *)(a1 + 232);
  uint64_t v29 = (_OWORD *)(a2 + 232);
  uint64_t v30 = *(void *)(a2 + 256);
  if (v30)
  {
    uint64_t v31 = *(void *)(a2 + 264);
    *(void *)(a1 + 256) = v30;
    *(void *)(a1 + 264) = v31;
    (**(void (***)(_OWORD *, _OWORD *))(v30 - 8))(v28, v29);
  }
  else
  {
    long long v32 = *(_OWORD *)(a2 + 248);
    *uint64_t v28 = *v29;
    *(_OWORD *)(a1 + 248) = v32;
    *(void *)(a1 + 264) = *(void *)(a2 + 264);
  }
  return a1;
}

_OWORD *Resize.init(_:width:height:firstBaseline:lastBaseline:)@<X0>(long long *a1@<X0>, long long *a2@<X1>, long long *a3@<X2>, long long *a4@<X3>, long long *a5@<X4>, uint64_t a6@<X8>)
{
  sub_1B07BA7F4((uint64_t)a2, (uint64_t)&v20);
  sub_1B07BA7F4((uint64_t)a3, (uint64_t)&v24);
  sub_1B07BA7F4((uint64_t)a4, (uint64_t)&v28);
  sub_1B07BA7F4((uint64_t)a5, (uint64_t)&v32);
  if (v23 == 2
    && ((int8x16_t v12 = vorrq_s8(v21, v22),
         !(*(void *)&vorr_s8(*(int8x8_t *)v12.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL)) | v20))
      ? (BOOL v13 = v27 == 2)
      : (BOOL v13 = 0),
        v13
     && ((int8x16_t v14 = vorrq_s8(v25, v26),
          !(*(void *)&vorr_s8(*(int8x8_t *)v14.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL)) | v24))
       ? (BOOL v15 = v31 == 2)
       : (BOOL v15 = 0),
         v15
      && ((int8x16_t v16 = vorrq_s8(v29, v30),
           !(*(void *)&vorr_s8(*(int8x8_t *)v16.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL)) | v28))
        ? (BOOL v17 = v35 == 2)
        : (BOOL v17 = 0),
          v17
       && (int8x16_t v18 = vorrq_s8(v33, v34),
           !(*(void *)&vorr_s8(*(int8x8_t *)v18.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL)) | v32))))))
  {
    sub_1B08699A8();
    sub_1B07BABF8((uint64_t)&v28);
    sub_1B07BABF8((uint64_t)&v24);
    sub_1B07BABF8((uint64_t)&v20);
  }
  else
  {
    sub_1B07BBE14((uint64_t)&v20, (uint64_t *)&unk_1EB595760);
  }
  sub_1B07BA8FC(a1, a6);
  sub_1B07BA2D0(a2, (_OWORD *)(a6 + 40));
  sub_1B07BA2D0(a3, (_OWORD *)(a6 + 88));
  sub_1B07BA2D0(a4, (_OWORD *)(a6 + 136));
  return sub_1B07BA2D0(a5, (_OWORD *)(a6 + 184));
}

uint64_t Resize.layout(relativeTo:with:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  uint64_t v7 = v6;
  sub_1B07BA7F4(v7 + 40, (uint64_t)v20);
  sub_1B07BA7F4(v7 + 88, (uint64_t)v19);
  sub_1B07BA7F4(v7 + 136, (uint64_t)v18);
  sub_1B07BA7F4(v7 + 184, (uint64_t)v17);
  sub_1B07BBD78(v7, (uint64_t)v16);
  *(_OWORD *)(a2 + 248) = 0u;
  *(void *)(a2 + 264) = 0;
  *(_OWORD *)(a2 + 232) = 0u;
  *(double *)a2 = a3;
  *(double *)(a2 + 8) = a4;
  *(double *)(a2 + 16) = a5;
  *(double *)(a2 + 24) = a6;
  *(void *)(a2 + 32) = a1;
  sub_1B07BA2D0(v20, (_OWORD *)(a2 + 40));
  sub_1B07BA2D0(v19, (_OWORD *)(a2 + 88));
  sub_1B07BA2D0(v18, (_OWORD *)(a2 + 136));
  sub_1B07BA2D0(v17, (_OWORD *)(a2 + 184));
  id v14 = a1;
  sub_1B07BBE14(a2 + 232, &qword_1EB595778);
  return sub_1B07BA8FC(v16, a2 + 232);
}

_OWORD *sub_1B07BA2D0(long long *a1, _OWORD *a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(_OWORD *)((char *)a2 + 25) = *(long long *)((char *)a1 + 25);
  *a2 = v2;
  a2[1] = v3;
  return a2;
}

uint64_t Resize.Placements.next()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = v1 + 232;
  sub_1B07BA914(v4, (uint64_t)&v47);
  if (*((void *)&v48 + 1))
  {
    sub_1B07BA8FC(&v47, (uint64_t)v56);
    sub_1B07BBE14(v4, &qword_1EB595778);
    *(_OWORD *)uint64_t v4 = 0u;
    *(_OWORD *)(v4 + 16) = 0u;
    *(void *)(v4 + 32) = 0;
    double v5 = *(double *)(v2 + 16);
    double v6 = *(double *)(v2 + 24);
    sub_1B07BA7F4(v2 + 40, (uint64_t)&v47);
    if (BYTE8(v49))
    {
      sub_1B07BABF8((uint64_t)&v47);
    }
    else
    {
      sub_1B07BA8FC(&v47, (uint64_t)v53);
      uint64_t v8 = v54;
      uint64_t v9 = v55;
      __swift_project_boxed_opaque_existential_1(v53, v54);
      double v10 = AnyDimension.value(with:)(*(void **)(v2 + 32), v8, v9);
      if (v10 < v5 || v5 == 0.0) {
        double v5 = v10;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v53);
    }
    sub_1B07BA7F4(v2 + 88, (uint64_t)&v47);
    if (BYTE8(v49))
    {
      sub_1B07BABF8((uint64_t)&v47);
    }
    else
    {
      sub_1B07BA8FC(&v47, (uint64_t)v53);
      uint64_t v12 = v54;
      uint64_t v13 = v55;
      __swift_project_boxed_opaque_existential_1(v53, v54);
      double v14 = AnyDimension.value(with:)(*(void **)(v2 + 32), v12, v13);
      if (v14 < v6 || v6 == 0.0) {
        double v6 = v14;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v53);
    }
    uint64_t v16 = v57;
    uint64_t v17 = v58;
    __swift_project_boxed_opaque_existential_1(v56, v57);
    int8x16_t v18 = *(void **)(v2 + 32);
    double v19 = (*(double (**)(void *, uint64_t, uint64_t, double, double))(v17 + 8))(v18, v16, v17, v5, v6);
    double v21 = v20;
    double v23 = v22;
    double v25 = v24;
    sub_1B07BA7F4(v2 + 40, (uint64_t)&v47);
    if (BYTE8(v49))
    {
      if (BYTE8(v49) == 1)
      {
        double v19 = ((double (*)(void *, double, double, double))v47)(v18, v19, v5, v6);
        swift_release();
      }
    }
    else
    {
      sub_1B07BA8FC(&v47, (uint64_t)v53);
      uint64_t v26 = v54;
      uint64_t v27 = v55;
      __swift_project_boxed_opaque_existential_1(v53, v54);
      double v19 = AnyDimension.value(with:)(v18, v26, v27);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v53);
    }
    uint64_t v28 = *(void **)(v2 + 32);
    sub_1B07BA7F4(v2 + 88, (uint64_t)&v47);
    if (BYTE8(v49))
    {
      if (BYTE8(v49) == 1)
      {
        double v21 = ((double (*)(void *, double, double, double))v47)(v28, v21, v5, v6);
        swift_release();
      }
    }
    else
    {
      sub_1B07BA8FC(&v47, (uint64_t)v53);
      uint64_t v29 = v54;
      uint64_t v30 = v55;
      __swift_project_boxed_opaque_existential_1(v53, v54);
      double v21 = AnyDimension.value(with:)(v28, v29, v30);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v53);
    }
    char v31 = *(void **)(v2 + 32);
    sub_1B07BA7F4(v2 + 136, (uint64_t)&v47);
    if (BYTE8(v49))
    {
      if (BYTE8(v49) == 1)
      {
        double v23 = ((double (*)(void *, double, double, double))v47)(v31, v23, v5, v6);
        swift_release();
      }
    }
    else
    {
      sub_1B07BA8FC(&v47, (uint64_t)v53);
      uint64_t v32 = v54;
      uint64_t v33 = v55;
      __swift_project_boxed_opaque_existential_1(v53, v54);
      double v23 = AnyDimension.value(with:)(v31, v32, v33);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v53);
    }
    int8x16_t v34 = *(void **)(v2 + 32);
    sub_1B07BA7F4(v2 + 184, (uint64_t)&v47);
    double v46 = v23;
    if (BYTE8(v49))
    {
      if (BYTE8(v49) == 1)
      {
        double v35 = ((double (*)(void *, double, double, double))v47)(v34, v25, v5, v6);
        swift_release();
      }
      else
      {
        double v35 = v25;
      }
    }
    else
    {
      sub_1B07BA8FC(&v47, (uint64_t)v53);
      uint64_t v36 = v54;
      uint64_t v37 = v55;
      __swift_project_boxed_opaque_existential_1(v53, v54);
      double v35 = AnyDimension.value(with:)(v34, v36, v37);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v53);
    }
    CGFloat v38 = *(double *)v2;
    CGFloat v39 = *(double *)(v2 + 8);
    CGFloat v40 = *(double *)(v2 + 16);
    CGFloat v41 = *(double *)(v2 + 24);
    v59.origin.double x = *(CGFloat *)v2;
    v59.origin.double y = v39;
    v59.size.double width = v40;
    v59.size.double height = v41;
    double MinX = CGRectGetMinX(v59);
    v60.origin.double x = v38;
    v60.origin.double y = v39;
    v60.size.double width = v40;
    v60.size.double height = v41;
    double MinY = CGRectGetMinY(v60);
    sub_1B07BBD78((uint64_t)v56, (uint64_t)v53);
    sub_1B07BBD78((uint64_t)v53, (uint64_t)&v47);
    *((void *)&v49 + 1) = floor(MinX);
    *(void *)&long long v50 = floor(MinY);
    *((void *)&v50 + 1) = ceil(v19);
    *(void *)&long long v51 = ceil(v21);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v53);
    *((void *)&v51 + 1) = floor(v46);
    double v52 = floor(v35);
    long long v44 = v50;
    *(_OWORD *)(a1 + 32) = v49;
    *(_OWORD *)(a1 + 48) = v44;
    long long v45 = v48;
    *(_OWORD *)a1 = v47;
    *(_OWORD *)(a1 + 16) = v45;
    *(_OWORD *)(a1 + 64) = v51;
    *(double *)(a1 + 80) = v52;
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v56);
  }
  else
  {
    uint64_t result = sub_1B07BBE14((uint64_t)&v47, &qword_1EB595778);
    *(void *)(a1 + 80) = 0;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
  }
  return result;
}

uint64_t sub_1B07BA7F4(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for Resize.Rule(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(unsigned __int8 *)(a2 + 40);
  if (v3 >= 2) {
    unsigned int v3 = *(_DWORD *)a2 + 2;
  }
  if (v3 == 1)
  {
    uint64_t v5 = *(void *)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v5;
    *(unsigned char *)(a1 + 40) = 1;
    swift_retain();
  }
  else if (v3)
  {
    long long v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v4;
    (**(void (***)(uint64_t))(v4 - 8))(a1);
    *(unsigned char *)(a1 + 40) = 0;
  }
  return a1;
}

uint64_t sub_1B07BA8FC(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_1B07BA914(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB595778);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1B07BA97C(void *a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  uint64_t v10 = *(void *)(v5 + 104);
  id v11 = a1;
  swift_bridgeObjectRetain();
  v51.origin.double x = a2;
  v51.origin.double y = a3;
  v51.size.double width = a4;
  v51.size.double height = a5;
  CGFloat v43 = a2;
  CGFloat v44 = a3;
  CGFloat v22 = a5;
  CGFloat v45 = a4;
  CGFloat v46 = a5;
  id v47 = v11;
  uint64_t v48 = v10;
  uint64_t v49 = 0;
  CGFloat MinY = CGRectGetMinY(v51);
  id v12 = v11;
  swift_bridgeObjectRetain();
  VerticalStack.Placements.next()((uint64_t)&v37);
  while (*((void *)&v38 + 1))
  {
    long long v33 = v39;
    long long v34 = v40;
    long long v35 = v41;
    uint64_t v36 = v42;
    v32[0] = v37;
    v32[1] = v38;
    sub_1B07BBD78((uint64_t)v32, (uint64_t)v29);
    uint64_t v13 = v30;
    uint64_t v14 = v31;
    __swift_project_boxed_opaque_existential_1(v29, v30);
    double x = *((double *)&v33 + 1);
    double width = *((double *)&v34 + 1);
    double y = *(double *)&v34;
    double height = *(double *)&v35;
    if (objc_msgSend(v12, sel_layoutDirection) == (id)1)
    {
      CGAffineTransformMakeScale(&v28, -1.0, 1.0);
      long long v25 = *(_OWORD *)&v28.c;
      long long v26 = *(_OWORD *)&v28.a;
      CGFloat ty = v28.ty;
      CGFloat tx = v28.tx;
      v52.origin.double x = a2;
      v52.origin.double y = a3;
      v52.size.double width = a4;
      v52.size.double height = v22;
      *(double *)rect = x;
      double MinX = CGRectGetMinX(v52);
      v53.origin.double x = a2;
      v53.origin.double y = a3;
      v53.size.double width = a4;
      v53.size.double height = v22;
      CGFloat MaxX = CGRectGetMaxX(v53);
      *(_OWORD *)&v28.a = v26;
      *(_OWORD *)&v28.c = v25;
      v28.CGFloat tx = tx;
      v28.CGFloat ty = ty;
      CGAffineTransformTranslate((CGAffineTransform *)&rect[1], &v28, -(MinX + MaxX), 0.0);
      CGAffineTransform v28 = *(CGAffineTransform *)&rect[1];
      *(void *)&v54.origin.double x = rect[0];
      v54.origin.double y = y;
      v54.size.double width = width;
      v54.size.double height = height;
      CGRect v55 = CGRectApplyAffineTransform(v54, &v28);
      double x = v55.origin.x;
      double y = v55.origin.y;
      double width = v55.size.width;
      double height = v55.size.height;
    }
    (*(void (**)(id, uint64_t, uint64_t, double, double, double, double))(v14 + 16))(v12, v13, v14, x, y, width, height);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
    sub_1B07BD394((uint64_t)v32);
    VerticalStack.Placements.next()((uint64_t)&v37);
  }
  double v21 = v47;
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
}

uint64_t sub_1B07BABF8(uint64_t a1)
{
  return a1;
}

uint64_t destroy for Resize.Rule(uint64_t result)
{
  unsigned int v1 = *(unsigned __int8 *)(result + 40);
  if (v1 >= 2) {
    unsigned int v1 = *(_DWORD *)result + 2;
  }
  if (v1 == 1) {
    return swift_release();
  }
  if (!v1) {
    return __swift_destroy_boxed_opaque_existential_1(result);
  }
  return result;
}

JUMeasurements __swiftcall _LayoutViewPlaceable.measure(toFit:with:)(CGSize toFit, UITraitCollection with)
{
  double height = toFit.height;
  double width = toFit.width;
  uint64_t v6 = v2[3];
  uint64_t v7 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v6);
  __swift_instantiateConcreteTypeFromMangledName(qword_1EB596010);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1B086C120;
  *(UITraitCollection *)(v8 + 32) = with;
  uint64_t v27 = v8;
  sub_1B0869F98();
  sub_1B07BCC68();
  uint64_t v9 = with.super.isa;
  uint64_t v10 = (void *)sub_1B0869F78();
  swift_bridgeObjectRelease();
  id v11 = objc_msgSend(self, sel_traitCollectionWithTraitsFromCollections_, v10);

  id v12 = (objc_class *)type metadata accessor for TraitEnvironmentPlaceholder();
  uint64_t v13 = (char *)objc_allocWithZone(v12);
  *(void *)&v13[OBJC_IVAR____TtC5JetUI27TraitEnvironmentPlaceholder_traitCollection] = v11;
  v26.receiver = v13;
  v26.super_class = v12;
  id v14 = objc_msgSendSuper2(&v26, sel_init);
  double v15 = (*(double (**)(id, uint64_t, double, double))(*(void *)(v7 + 8) + 8))(v14, v6, width, height);
  double v17 = v16;
  double v19 = v18;
  double v21 = v20;

  double v22 = v15;
  double v23 = v17;
  double v24 = v19;
  double v25 = v21;
  result.double var3 = v25;
  result.double var2 = v24;
  result.double var1 = v23;
  result.var0 = v22;
  return result;
}

id sub_1B07BADF4(void *a1)
{
  return objc_msgSend(a1, sel_sizeThatFits_);
}

id sub_1B07BAE1C(uint64_t a1)
{
  return objc_msgSend(*v1, sel_measurementsWithFitting_in_, a1);
}

id sub_1B07BAE34()
{
  return sub_1B07BAE60();
}

id sub_1B07BAE60()
{
  return objc_msgSend(v0, sel_setFrame_);
}

uint64_t sub_1B07BAE70(double a1, double a2, double a3, double a4)
{
  uint64_t v9 = v4[3];
  uint64_t v10 = v4[4];
  __swift_project_boxed_opaque_existential_1(v4, v9);
  return (*(uint64_t (**)(uint64_t, uint64_t, double, double, double, double))(v10 + 24))(v9, v10, a1, a2, a3, a4);
}

id sub_1B07BAEF4()
{
  return objc_msgSend(*v0, sel_setFrame_);
}

double sub_1B07BAF04(void *a1, CGFloat a2, CGFloat a3)
{
  v19.origin.double x = 0.0;
  v19.origin.double y = 0.0;
  v19.size.double width = a2;
  v19.size.double height = a3;
  if (CGRectGetWidth(v19) == 1.79769313e308) {
    a2 = 0.0;
  }
  v20.origin.double x = 0.0;
  v20.origin.double y = 0.0;
  v20.size.double width = a2;
  v20.size.double height = a3;
  if (CGRectGetHeight(v20) == 1.79769313e308) {
    a3 = 0.0;
  }
  uint64_t v7 = *(void *)(v3 + 40);
  sub_1B07BBD78(v3, (uint64_t)v16);
  long long v13 = 0u;
  long long v14 = 0u;
  uint64_t v15 = 0;
  *(CGFloat *)&long long v11 = a2;
  *((CGFloat *)&v11 + 1) = a3;
  *(void *)&long long v12 = a1;
  *((void *)&v12 + 1) = v7;
  id v8 = a1;
  sub_1B07B9AF8((uint64_t)&v13);
  sub_1B07BA8FC(v16, (uint64_t)&v13);
  v17[2] = v12;
  long long v17[3] = v13;
  v17[4] = v14;
  uint64_t v18 = v15;
  v17[0] = 0uLL;
  v17[1] = v11;
  double v9 = Center.Placements.measure.getter();
  sub_1B07B968C((uint64_t)v17);
  return v9;
}

double Center.Placements.measure.getter()
{
  unsigned int v1 = (CGRect *)v0;
  sub_1B07BB13C(v0, (uint64_t)v7);
  Center.Placements.next()((uint64_t)v6);
  if (v6[3])
  {
    double v2 = *(double *)&v6[7];
    sub_1B07BD394((uint64_t)v6);
    sub_1B07B968C((uint64_t)v7);
    uint64_t v3 = *(void *)(v0 + 40);
    if ((v3 & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_1B07B968C((uint64_t)v7);
  if (qword_1E9B3A3E8 != -1) {
    swift_once();
  }
  double v2 = *(double *)&xmmword_1E9B3A5A0;
  uint64_t v3 = *(void *)(v0 + 40);
  if (v3)
  {
LABEL_3:
    double Width = CGRectGetWidth(*v1);
    if (v2 <= Width) {
      double v2 = Width;
    }
  }
LABEL_5:
  if ((v3 & 2) != 0) {
    CGRectGetHeight(*v1);
  }
  return v2;
}

uint64_t sub_1B07BB13C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for Center.Placements(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void **)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = v6;
  uint64_t v7 = a1 + 48;
  uint64_t v8 = a2 + 48;
  uint64_t v9 = *(void *)(a2 + 72);
  id v10 = v5;
  if (v9)
  {
    uint64_t v11 = *(void *)(a2 + 80);
    *(void *)(a1 + 72) = v9;
    *(void *)(a1 + 80) = v11;
    (**(void (***)(uint64_t, uint64_t, uint64_t))(v9 - 8))(v7, v8, v9);
  }
  else
  {
    long long v12 = *(_OWORD *)(v8 + 16);
    *(_OWORD *)uint64_t v7 = *(_OWORD *)v8;
    *(_OWORD *)(v7 + 16) = v12;
    *(void *)(v7 + 32) = *(void *)(v8 + 32);
  }
  return a1;
}

uint64_t Center.Placements.next()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = v1 + 48;
  sub_1B07BA914(v4, (uint64_t)&v23);
  if (*((void *)&v24 + 1))
  {
    sub_1B07BA8FC(&v23, (uint64_t)v30);
    sub_1B07B9AF8(v4);
    *(_OWORD *)uint64_t v4 = 0u;
    *(_OWORD *)(v4 + 16) = 0u;
    *(void *)(v4 + 32) = 0;
    uint64_t v5 = v31;
    uint64_t v6 = v32;
    __swift_project_boxed_opaque_existential_1(v30, v31);
    double v7 = *(double *)(v2 + 16);
    double v8 = *(double *)(v2 + 24);
    double v9 = (*(double (**)(void, uint64_t, uint64_t, double, double))(v6 + 8))(*(void *)(v2 + 32), v5, v6, v7, v8);
    double v11 = v10;
    double v21 = v13;
    double v22 = v12;
    CGFloat v14 = *(double *)v2;
    CGFloat v15 = *(double *)(v2 + 8);
    v33.origin.double x = *(CGFloat *)v2;
    v33.origin.double y = v15;
    v33.size.double width = v7;
    v33.size.double height = v8;
    double v16 = CGRectGetMidX(v33) - v9 * 0.5;
    v34.origin.double x = v14;
    v34.origin.double y = v15;
    v34.size.double width = v7;
    v34.size.double height = v8;
    double v17 = CGRectGetMidY(v34) - v11 * 0.5;
    sub_1B07BBD78((uint64_t)v30, (uint64_t)v29);
    sub_1B07BBD78((uint64_t)v29, (uint64_t)&v23);
    *((void *)&v25 + 1) = floor(v16);
    *(void *)&long long v26 = floor(v17);
    *((void *)&v26 + 1) = ceil(v9);
    *(void *)&long long v27 = ceil(v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
    *((void *)&v27 + 1) = floor(v22);
    double v28 = floor(v21);
    long long v18 = v26;
    *(_OWORD *)(a1 + 32) = v25;
    *(_OWORD *)(a1 + 48) = v18;
    long long v19 = v24;
    *(_OWORD *)a1 = v23;
    *(_OWORD *)(a1 + 16) = v19;
    *(_OWORD *)(a1 + 64) = v27;
    *(double *)(a1 + 80) = v28;
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
  }
  else
  {
    uint64_t result = sub_1B07B9AF8((uint64_t)&v23);
    *(void *)(a1 + 80) = 0;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
  }
  return result;
}

double sub_1B07BB3DC(double a1, double a2)
{
  return _sSo8UIButtonC5JetUIE7measure5toFit4withSo14JUMeasurementsVSo6CGSizeV_So17UITraitCollectionCtF_0(a1, a2);
}

double _sSo8UIButtonC5JetUIE7measure5toFit4withSo14JUMeasurementsVSo6CGSizeV_So17UITraitCollectionCtF_0(double a1, double a2)
{
  objc_msgSend(v2, sel_sizeThatFits_);
  double v6 = v5;
  double v8 = v7;
  id v9 = objc_msgSend(v2, sel_titleLabel);
  if (v9)
  {
    double v10 = v9;
    id v11 = objc_msgSend(v2, sel_subtitleLabel);

    if (!v11)
    {
      objc_msgSend(v10, sel_sizeThatFits_, v6, v8);
      objc_msgSend(v10, sel__firstBaselineOffsetFromTop, constrainWidth(of:toFit:)((CGSize)__PAIR128__(v14, v13), (CGSize)__PAIR128__(*(unint64_t *)&v8, *(unint64_t *)&v6)).width);
      objc_msgSend(v10, sel__baselineOffsetFromBottom);
      *(void *)&double v12 = *(_OWORD *)&constrainWidth(of:toFit:)((CGSize)__PAIR128__(*(unint64_t *)&v8, *(unint64_t *)&v6), (CGSize)__PAIR128__(*(unint64_t *)&a2, *(unint64_t *)&a1));

      return v12;
    }
  }
  *(void *)&double v12 = *(_OWORD *)&constrainWidth(of:toFit:)((CGSize)__PAIR128__(*(unint64_t *)&v8, *(unint64_t *)&v6), (CGSize)__PAIR128__(*(unint64_t *)&a2, *(unint64_t *)&a1));
  return v12;
}

void FontUseCase.hash(into:)()
{
  uint64_t v2 = *(void **)v0;
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + 24);
  uint64_t v5 = *(void *)(v0 + 32);
  switch(*(unsigned char *)(v0 + 40))
  {
    case 1:
      sub_1B086A968();
      JetFontTextStyleFastHashValue(v2);
      sub_1B086A968();
      sub_1B086A148();
      sub_1B086A968();
      double v6 = v2;
      uint64_t v7 = v1;
      uint64_t v8 = v3;
      uint64_t v9 = v4;
      uint64_t v10 = v5;
      char v11 = 1;
      goto LABEL_7;
    case 2:
      sub_1B086A968();
      sub_1B0869E38();
      sub_1B086A988();
      break;
    case 3:
      sub_1B086A968();
      sub_1B0869E38();
      sub_1B086A978();
      break;
    default:
      sub_1B086A968();
      JetFontTextStyleFastHashValue(v2);
      sub_1B086A968();
      sub_1B086A978();
      double v6 = v2;
      uint64_t v7 = v1;
      uint64_t v8 = v3;
      uint64_t v9 = v4;
      uint64_t v10 = v5;
      char v11 = 0;
LABEL_7:
      sub_1B07BCA18(v6, v7, v8, v9, v10, v11);
      break;
  }
}

void VerticalStack.Placements.measure.getter()
{
  uint64_t v1 = *(void **)(v0 + 32);
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = *(void *)(v0 + 48);
  uint64_t v4 = *(void *)(v0 + 56);
  long long v5 = *(_OWORD *)(v0 + 16);
  v20[0] = *(_OWORD *)v0;
  v20[1] = v5;
  double v21 = v1;
  v22[0] = v2;
  v22[1] = v3;
  v22[2] = v4;
  VerticalStack.Placements.union.getter((uint64_t)v29);
  double v6 = v30;
  double v7 = v31;
  double v8 = v32;
  double v9 = v33;
  unint64_t v10 = *(void *)(v2 + 16);
  if (v10)
  {
    sub_1B07BBF20(v2 + 32, (uint64_t)v20);
    char v11 = v28;
    uint64_t v12 = v23;
    uint64_t v13 = v24;
    __swift_project_boxed_opaque_existential_1(v22, v23);
    if (v11) {
      double v14 = AnyDimension.topMargin(from:with:)(v1, v12, v13, v6, v7, v8);
    }
    else {
      double v14 = AnyDimension.value(with:)(v1, v12, v13);
    }
    if (v14 < 0.0) {
      double v15 = 0.0;
    }
    else {
      double v15 = v14;
    }
    sub_1B07BBE14((uint64_t)v20, &qword_1EB595730);
    if (v10 > *(void *)(v2 + 16))
    {
      __break(1u);
    }
    else
    {
      double v16 = v7 + v15;
      sub_1B07BBF20(v2 + 32 + 144 * v10 - 144, (uint64_t)v20);
      char v17 = v28;
      uint64_t v18 = v26;
      uint64_t v19 = v27;
      __swift_project_boxed_opaque_existential_1(v25, v26);
      if ((v17 & 2) != 0) {
        AnyDimension.bottomMargin(from:with:)(v1, v18, v19, v6, v16, v8, v9);
      }
      else {
        AnyDimension.value(with:)(v1, v18, v19);
      }
      sub_1B07BBE14((uint64_t)v20, &qword_1EB595730);
    }
  }
}

void VerticalStack.Placements.next()(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 40);
  uint64_t v4 = *(void *)(v1 + 48);
  if (v4 >= *(void *)(v3 + 16))
  {
    *(void *)(a1 + 80) = 0;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
    return;
  }
  if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = v1;
    sub_1B07BBF20(v3 + 144 * v4 + 32, (uint64_t)v53);
    *(void *)(v1 + 48) = v4 + 1;
    CGFloat v6 = *(double *)v1;
    CGFloat v7 = *(double *)(v1 + 8);
    CGFloat v9 = *(double *)(v1 + 16);
    CGFloat v8 = *(double *)(v1 + 24);
    if (v64)
    {
      double MinX = CGRectGetMinX(*(CGRect *)v1);
      double v11 = *(double *)(v1 + 56);
      sub_1B07BBD78((uint64_t)v53, (uint64_t)v52);
      sub_1B07BBD78((uint64_t)v52, (uint64_t)&v46);
      double v12 = floor(MinX);
      double v13 = floor(v11);
LABEL_5:
      *((double *)&v48 + 1) = v12;
      long long v49 = *(unint64_t *)&v13;
      *(void *)&long long v50 = 0;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);
      *((void *)&v50 + 1) = 0;
      *(void *)(a1 + 80) = 0;
      long long v14 = v49;
      *(_OWORD *)(a1 + 32) = v48;
      *(_OWORD *)(a1 + 48) = v14;
      long long v15 = v47;
      *(_OWORD *)a1 = v46;
      *(_OWORD *)(a1 + 16) = v15;
      *(_OWORD *)(a1 + 64) = v50;
LABEL_27:
      sub_1B07BBE14((uint64_t)v53, &qword_1EB595730);
      return;
    }
    CGRect v65 = *(CGRect *)v1;
    double height = v65.size.height;
    double width = v65.size.width;
    if (CGRectGetHeight(*(CGRect *)v1) != 0.0)
    {
      v66.origin.double x = v6;
      v66.origin.double y = v7;
      v66.size.double width = v9;
      v66.size.double height = v8;
      double width = CGRectGetWidth(v66);
      v67.origin.double x = v6;
      v67.origin.double y = v7;
      v67.size.double width = v9;
      v67.size.double height = v8;
      CGFloat MaxY = CGRectGetMaxY(v67);
      double v19 = *(double *)(v1 + 56);
      double height = MaxY - v19;
      if (MaxY - v19 <= 0.0)
      {
        v70.origin.double x = v6;
        v70.origin.double y = v7;
        v70.size.double width = v9;
        v70.size.double height = v8;
        double v44 = CGRectGetMinX(v70);
        sub_1B07BBD78((uint64_t)v53, (uint64_t)v52);
        sub_1B07BBD78((uint64_t)v52, (uint64_t)&v46);
        double v12 = floor(v44);
        double v13 = floor(v19);
        goto LABEL_5;
      }
    }
    CGRect v20 = *(void **)(v1 + 32);
    uint64_t v21 = v54;
    uint64_t v22 = v55;
    __swift_project_boxed_opaque_existential_1(v53, v54);
    double v23 = (*(double (**)(void *, uint64_t, uint64_t, double, double))(v22 + 8))(v20, v21, v22, width, height);
    double v25 = v24;
    double v27 = v26;
    double v45 = v28;
    if (v62)
    {
      CGFloat v29 = v6;
      CGFloat v30 = v7;
      CGFloat v31 = v9;
      CGFloat v32 = v8;
      if (v62 == 1)
      {
        double v33 = CGRectGetMidX(*(CGRect *)&v29) + v23 * -0.5;
        if (v33 >= 0.0) {
          goto LABEL_18;
        }
      }
      else
      {
        double v33 = CGRectGetMaxX(*(CGRect *)&v29) - v23;
        if (v33 >= 0.0)
        {
LABEL_18:
          char v34 = v63;
          uint64_t v35 = v57;
          uint64_t v36 = v58;
          __swift_project_boxed_opaque_existential_1(v56, v57);
          if (v34) {
            double v37 = AnyDimension.topMargin(from:with:)(v20, v35, v36, v23, v25, v27);
          }
          else {
            double v37 = AnyDimension.value(with:)(v20, v35, v36);
          }
          if (v37 < 0.0) {
            double v37 = 0.0;
          }
          double v38 = *(double *)(v5 + 56) + v37;
          uint64_t v39 = v60;
          uint64_t v40 = v61;
          __swift_project_boxed_opaque_existential_1(v59, v60);
          if ((v34 & 2) != 0) {
            double v41 = AnyDimension.bottomMargin(from:with:)(v20, v39, v40, v23, v25, v27, v45);
          }
          else {
            double v41 = AnyDimension.value(with:)(v20, v39, v40);
          }
          *(double *)(v5 + 56) = v25 + v38 + v41;
          sub_1B07BBD78((uint64_t)v53, (uint64_t)v52);
          sub_1B07BBD78((uint64_t)v52, (uint64_t)&v46);
          *((void *)&v48 + 1) = floor(v33);
          *(void *)&long long v49 = floor(v38);
          *((void *)&v49 + 1) = ceil(v23);
          *(void *)&long long v50 = ceil(v25);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);
          *((void *)&v50 + 1) = floor(v27);
          double v51 = floor(v45);
          long long v42 = v49;
          *(_OWORD *)(a1 + 32) = v48;
          *(_OWORD *)(a1 + 48) = v42;
          long long v43 = v47;
          *(_OWORD *)a1 = v46;
          *(_OWORD *)(a1 + 16) = v43;
          *(_OWORD *)(a1 + 64) = v50;
          *(double *)(a1 + 80) = v51;
          goto LABEL_27;
        }
      }
    }
    else
    {
      v68.origin.double x = v6;
      v68.origin.double y = v7;
      v68.size.double width = v9;
      v68.size.double height = v8;
      double v33 = CGRectGetMinX(v68);
      if (v33 >= 0.0) {
        goto LABEL_18;
      }
    }
    v69.origin.double x = v6;
    v69.origin.double y = v7;
    v69.size.double width = v9;
    v69.size.double height = v8;
    if (CGRectGetWidth(v69) == 0.0) {
      double v33 = 0.0;
    }
    goto LABEL_18;
  }
  __break(1u);
}

uint64_t sub_1B07BBD78(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t initializeBufferWithCopyOfBuffer for DSAccessibilityDiagnosticInfo.Rect(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t sub_1B07BBE14(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t destroy for HorizontalStack.Properties(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);

  return __swift_destroy_boxed_opaque_existential_1(a1 + 40);
}

uint64_t destroy for StaticDimension()
{
  return swift_release();
}

uint64_t sub_1B07BBEB0(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = *(uint64_t (**)(unint64_t))(v4 + 8);
  unint64_t v6 = (a1 + *(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);

  return v5(v6);
}

uint64_t sub_1B07BBF20(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB595730);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B07BBF88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v6 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v6;
  (**(void (***)(void))(v6 - 8))();
  uint64_t v7 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 16))((*(unsigned __int8 *)(v7 + 80) + 40 + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(unsigned __int8 *)(v7 + 80) + 40 + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t initializeWithCopy for VerticalStack.Properties(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 40, a2 + 40);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  return a1;
}

void *initializeBufferWithCopyOfBuffer for StaticDimension(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

BOOL _s5JetUI11FontUseCaseO2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  id v2 = *(id *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 32);
  char v7 = *(unsigned char *)(a1 + 40);
  id v8 = *(id *)a2;
  uint64_t v9 = *(void *)(a2 + 8);
  uint64_t v11 = *(void *)(a2 + 16);
  uint64_t v10 = *(void *)(a2 + 24);
  uint64_t v12 = *(uint64_t *)(a2 + 32);
  int v13 = *(unsigned __int8 *)(a2 + 40);
  switch(v7)
  {
    case 1:
      if (v13 != 1) {
        goto LABEL_24;
      }
      uint64_t v73 = *(void *)(a1 + 32);
      uint64_t v78 = *(void *)(a1 + 8);
      uint64_t v28 = *(void *)(a2 + 8);
      uint64_t v29 = *(void *)(a1 + 16);
      uint64_t v71 = *(void *)(a1 + 24);
      id v30 = *(id *)a1;
      uint64_t v31 = sub_1B0869D98();
      uint64_t v33 = v32;
      if (v31 == sub_1B0869D98() && v33 == v34)
      {
        uint64_t v51 = v28;
        uint64_t v52 = v10;
        sub_1B07BCAAC(v8, v28, v11, v10, v12, 1);
        double v38 = *(double *)&v78;
        uint64_t v53 = v29;
        double v40 = *(double *)&v51;
        sub_1B07BCAAC(v30, v78, v53, v71, v73, 1);
        sub_1B07BCAAC(v30, v78, v53, v71, v73, 1);
        sub_1B07BCAAC(v8, v51, v11, v52, v12, 1);
        swift_bridgeObjectRelease_n();
        sub_1B07BCA18(v30, v78, v53, v71, v73, 1);
        sub_1B07BCA18(v8, v51, v11, v52, v12, 1);
        sub_1B07BCA18(v8, v51, v11, v52, v12, 1);
        sub_1B07BCA18(v30, v78, v53, v71, v73, 1);
        goto LABEL_26;
      }
      char v67 = sub_1B086A8A8();
      uint64_t v36 = v28;
      uint64_t v37 = v10;
      sub_1B07BCAAC(v8, v28, v11, v10, v12, 1);
      double v38 = *(double *)&v78;
      uint64_t v39 = v29;
      double v40 = *(double *)&v36;
      sub_1B07BCAAC(v30, v78, v39, v71, v73, 1);
      sub_1B07BCAAC(v30, v78, v39, v71, v73, 1);
      sub_1B07BCAAC(v8, v36, v11, v37, v12, 1);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1B07BCA18(v30, v78, v39, v71, v73, 1);
      sub_1B07BCA18(v8, v36, v11, v37, v12, 1);
      sub_1B07BCA18(v8, v36, v11, v37, v12, 1);
      sub_1B07BCA18(v30, v78, v39, v71, v73, 1);
      BOOL result = 0;
      if (v67)
      {
LABEL_26:
        double v54 = v38;
        double v55 = v40;
        return v54 == v55;
      }
      return result;
    case 2:
      if (v13 != 2) {
        goto LABEL_24;
      }
      if (v2 == v8 && v3 == v9)
      {
        uint64_t v41 = *(void *)(a2 + 24);
        uint64_t v42 = *(void *)(a1 + 16);
        uint64_t v43 = *(uint64_t *)(a1 + 32);
        id v44 = *(id *)a1;
        sub_1B07BCAAC(*(id *)a1, v3, v4, v5, v6, 2);
        sub_1B07BCAAC(v44, v3, v11, v41, v12, 2);
        sub_1B07BCA18(v44, v3, v42, v5, v6, 2);
        sub_1B07BCA18(v44, v3, v11, v41, v12, 2);
      }
      else
      {
        uint64_t v80 = *(void *)(a2 + 24);
        uint64_t v56 = *(void *)(a1 + 16);
        uint64_t v43 = *(uint64_t *)(a1 + 32);
        id v57 = *(id *)a2;
        id v68 = *(id *)a2;
        id v58 = *(id *)a1;
        char v75 = sub_1B086A8A8();
        sub_1B07BCAAC(v58, v3, v56, v5, v43, 2);
        sub_1B07BCAAC(v57, v9, v11, v80, v12, 2);
        sub_1B07BCA18(v58, v3, v56, v5, v43, 2);
        sub_1B07BCA18(v68, v9, v11, v80, v12, 2);
        BOOL result = 0;
        if ((v75 & 1) == 0) {
          return result;
        }
      }
      double v54 = *(double *)&v43;
      double v55 = *(double *)&v12;
      return v54 == v55;
    case 3:
      if (v13 != 3) {
        goto LABEL_24;
      }
      if (v2 == v8 && v3 == v9)
      {
        uint64_t v45 = *(void *)(a2 + 24);
        uint64_t v46 = *(void *)(a1 + 16);
        LODWORD(v47) = *(void *)(a1 + 32);
        id v48 = *(id *)a1;
        sub_1B07BCAAC(*(id *)a1, v3, v4, v5, v6, 3);
        sub_1B07BCAAC(v48, v3, v11, v45, v12, 3);
        sub_1B07BCA18(v48, v3, v46, v5, v6, 3);
        sub_1B07BCA18(v48, v3, v11, v45, v12, 3);
      }
      else
      {
        uint64_t v81 = *(void *)(a2 + 24);
        uint64_t v60 = *(void *)(a1 + 16);
        uint64_t v47 = *(void *)(a1 + 32);
        id v61 = *(id *)a2;
        id v69 = *(id *)a2;
        id v62 = *(id *)a1;
        char v76 = sub_1B086A8A8();
        sub_1B07BCAAC(v62, v3, v60, v5, v47, 3);
        sub_1B07BCAAC(v61, v9, v11, v81, v12, 3);
        sub_1B07BCA18(v62, v3, v60, v5, v47, 3);
        sub_1B07BCA18(v69, v9, v11, v81, v12, 3);
        BOOL result = 0;
        if ((v76 & 1) == 0) {
          return result;
        }
      }
      return v47 == v12;
    default:
      if (*(unsigned char *)(a2 + 40))
      {
LABEL_24:
        id v74 = *(id *)a1;
        uint64_t v79 = *(void *)(a1 + 8);
        uint64_t v49 = *(void *)(a2 + 8);
        uint64_t v50 = *(void *)(a1 + 16);
        sub_1B07BCAAC(*(id *)a1, v79, v4, v5, v6, v7);
        sub_1B07BCAAC(v8, v49, v11, v10, v12, v13);
        sub_1B07BCA18(v74, v79, v50, v5, v6, v7);
        sub_1B07BCA18(v8, v49, v11, v10, v12, v13);
        return 0;
      }
      else
      {
        uint64_t v72 = *(void *)(a1 + 32);
        uint64_t v77 = *(void *)(a1 + 8);
        uint64_t v14 = *(void *)(a2 + 8);
        uint64_t v15 = *(void *)(a1 + 16);
        uint64_t v70 = *(void *)(a1 + 24);
        id v16 = *(id *)a1;
        uint64_t v17 = sub_1B0869D98();
        uint64_t v19 = v18;
        if (v17 == sub_1B0869D98() && v19 == v20)
        {
          uint64_t v63 = v14;
          uint64_t v64 = v10;
          sub_1B07BCAAC(v8, v14, v11, v10, v12, 0);
          int v24 = v77;
          uint64_t v65 = v15;
          int v26 = v63;
          sub_1B07BCAAC(v16, v77, v65, v70, v72, 0);
          sub_1B07BCAAC(v16, v77, v65, v70, v72, 0);
          sub_1B07BCAAC(v8, v63, v11, v64, v12, 0);
          swift_bridgeObjectRelease_n();
          sub_1B07BCA18(v16, v77, v65, v70, v72, 0);
          sub_1B07BCA18(v8, v63, v11, v64, v12, 0);
          sub_1B07BCA18(v8, v63, v11, v64, v12, 0);
          sub_1B07BCA18(v16, v77, v65, v70, v72, 0);
        }
        else
        {
          char v66 = sub_1B086A8A8();
          uint64_t v22 = v14;
          uint64_t v23 = v10;
          sub_1B07BCAAC(v8, v14, v11, v10, v12, 0);
          int v24 = v77;
          uint64_t v25 = v15;
          int v26 = v22;
          sub_1B07BCAAC(v16, v77, v25, v70, v72, 0);
          sub_1B07BCAAC(v16, v77, v25, v70, v72, 0);
          sub_1B07BCAAC(v8, v22, v11, v23, v12, 0);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_1B07BCA18(v16, v77, v25, v70, v72, 0);
          sub_1B07BCA18(v8, v22, v11, v23, v12, 0);
          sub_1B07BCA18(v8, v22, v11, v23, v12, 0);
          sub_1B07BCA18(v16, v77, v25, v70, v72, 0);
          BOOL result = 0;
          if ((v66 & 1) == 0) {
            return result;
          }
        }
        return v24 == v26;
      }
  }
}

void sub_1B07BCA18(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  switch(a6)
  {
    case 0:
    case 1:

      break;
    case 2:
    case 3:
      swift_bridgeObjectRelease();
      swift_release();
      break;
    default:
      return;
  }
}

id sub_1B07BCAAC(id result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  switch(a6)
  {
    case 0:
    case 1:
      BOOL result = result;
      break;
    case 2:
    case 3:
      swift_bridgeObjectRetain();
      BOOL result = (id)swift_retain();
      break;
    default:
      return result;
  }
  return result;
}

double AnyDimension.value(with:)(void *a1, uint64_t a2, uint64_t a3)
{
  __swift_instantiateConcreteTypeFromMangledName(qword_1EB596010);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1B086C120;
  *(void *)(v6 + 32) = a1;
  sub_1B07BCC68();
  id v7 = a1;
  id v8 = (void *)sub_1B0869F78();
  swift_bridgeObjectRelease();
  id v9 = objc_msgSend(self, sel_traitCollectionWithTraitsFromCollections_, v8);

  uint64_t v10 = (objc_class *)type metadata accessor for TraitEnvironmentPlaceholder();
  uint64_t v11 = (char *)objc_allocWithZone(v10);
  *(void *)&v11[OBJC_IVAR____TtC5JetUI27TraitEnvironmentPlaceholder_traitCollection] = v9;
  v15.receiver = v11;
  v15.super_class = v10;
  id v12 = objc_msgSendSuper2(&v15, sel_init);
  double v13 = (*(double (**)(id, uint64_t, uint64_t))(a3 + 8))(v12, a2, a3);

  return v13;
}

unint64_t sub_1B07BCC68()
{
  unint64_t result = qword_1EB5962F0;
  if (!qword_1EB5962F0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EB5962F0);
  }
  return result;
}

uint64_t type metadata accessor for TraitEnvironmentPlaceholder()
{
  return self;
}

double sub_1B07BCCCC()
{
  return *(double *)v0;
}

double sub_1B07BCCD4()
{
  return 0.0;
}

double sub_1B07BCCDC(void *a1)
{
  double v3 = *(double *)v1;
  uint64_t v4 = *(void *)(v1 + 8) + 16;
  swift_beginAccess();
  sub_1B07BBD78(v4, (uint64_t)v12);
  id v5 = objc_msgSend(a1, sel_traitCollection);
  uint64_t v6 = v13;
  uint64_t v7 = v14;
  __swift_project_boxed_opaque_existential_1(v12, v13);
  double v8 = CustomTextStyle.scalingValues(compatibleWith:)(v5, v6, v7);
  double v10 = v9;

  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v10 * (v3 / v8);
}

double CustomTextStyle.scalingValues(compatibleWith:)(void *a1, uint64_t a2, uint64_t a3)
{
  id v6 = objc_msgSend(a1, sel_preferredContentSizeCategory);
  uint64_t v7 = sub_1B0869D98();
  uint64_t v9 = v8;
  if (v7 == sub_1B0869D98() && v9 == v10)
  {

    swift_bridgeObjectRelease_n();
    return 1.0;
  }
  else
  {
    char v12 = sub_1B086A8A8();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    double v13 = 1.0;
    if ((v12 & 1) == 0)
    {
      if (qword_1EB595E28 != -1) {
        swift_once();
      }
      uint64_t v14 = *(uint64_t (**)(void))(a3 + 8);
      id v15 = (id)qword_1EB595E30;
      id v16 = (void *)v14();

      objc_msgSend(v16, sel_lineHeight);
      double v18 = v17;
      objc_msgSend(v16, sel_leading);
      double v13 = v18 + v19;
      uint64_t v20 = (void *)((uint64_t (*)(void *, uint64_t, uint64_t))v14)(a1, a2, a3);
      objc_msgSend(v20, sel_lineHeight);
      objc_msgSend(v20, sel_leading);
    }
  }
  return v13;
}

double sub_1B07BCF78(double a1, double a2)
{
  id v5 = *v2;
  objc_msgSend(*v2, sel_sizeThatFits_);
  *(void *)&double v8 = *(_OWORD *)&constrainWidth(of:toFit:)((CGSize)__PAIR128__(v7, v6), (CGSize)__PAIR128__(*(unint64_t *)&a2, *(unint64_t *)&a1));
  objc_msgSend(v5, sel__firstBaselineOffsetFromTop);
  objc_msgSend(v5, sel__baselineOffsetFromBottom);
  return v8;
}

CGSize __swiftcall constrainWidth(of:toFit:)(CGSize of, CGSize toFit)
{
  double height = toFit.height;
  double width = toFit.width;
  CGFloat v4 = of.height;
  double v5 = of.width;
  if (qword_1EB596280 != -1) {
    swift_once();
  }
  sub_1B086AA78();
  if ((v10 & 2) == 0)
  {
    if (width == 0.0) {
      goto LABEL_12;
    }
    goto LABEL_10;
  }
  if (width != 0.0 || height != 0.0)
  {
LABEL_10:
    if (width < v5) {
      double v5 = width;
    }
  }
LABEL_12:
  double v7 = v5;
  double v8 = v4;
  result.double height = v8;
  result.double width = v7;
  return result;
}

double sub_1B07BD0CC(void *a1, CGFloat a2, CGFloat a3)
{
  v10.origin.double x = 0.0;
  v10.origin.double y = 0.0;
  v10.size.double width = a2;
  v10.size.double height = a3;
  if (CGRectGetWidth(v10) == 1.79769313e308) {
    a2 = 0.0;
  }
  v11.origin.double x = 0.0;
  v11.origin.double y = 0.0;
  v11.size.double width = a2;
  v11.size.double height = a3;
  if (CGRectGetHeight(v11) == 1.79769313e308) {
    a3 = 0.0;
  }
  id v6 = a1;
  swift_bridgeObjectRetain();
  v12.origin.double x = 0.0;
  v12.origin.double y = 0.0;
  v12.size.double width = a2;
  v12.size.double height = a3;
  CGRectGetMinY(v12);
  VerticalStack.Placements.measure.getter();
  double v8 = v7;
  swift_bridgeObjectRelease();

  return v8;
}

void VerticalStack.Placements.union.getter(uint64_t a1@<X8>)
{
  double v3 = (void *)*((void *)v1 + 4);
  uint64_t v4 = *((void *)v1 + 5);
  uint64_t v5 = *((void *)v1 + 6);
  uint64_t v6 = *((void *)v1 + 7);
  long long v7 = v1[1];
  long long v34 = *v1;
  long long v35 = v7;
  uint64_t v36 = v3;
  uint64_t v37 = v4;
  uint64_t v38 = v5;
  uint64_t v39 = v6;
  id v8 = v3;
  swift_bridgeObjectRetain();
  VerticalStack.Placements.next()((uint64_t)&v28);
  if (*((void *)&v29 + 1))
  {
    long long v24 = v30;
    long long v25 = v31;
    long long v26 = v32;
    double v27 = v33;
    long long v22 = v28;
    long long v23 = v29;
    CGFloat x = *((double *)&v30 + 1);
    CGFloat width = *((double *)&v31 + 1);
    CGFloat y = *(double *)&v31;
    uint64_t v13 = *((void *)&v32 + 1);
    CGFloat height = *(double *)&v32;
    double v14 = v33;
    sub_1B07BD394((uint64_t)&v22);
    VerticalStack.Placements.next()((uint64_t)&v28);
    if (*((void *)&v29 + 1))
    {
      uint64_t v20 = v13;
      do
      {
        double v21 = v14;
        long long v24 = v30;
        long long v25 = v31;
        long long v26 = v32;
        double v27 = v33;
        long long v22 = v28;
        long long v23 = v29;
        CGFloat v15 = *((double *)&v30 + 1);
        CGFloat v17 = *((double *)&v31 + 1);
        CGFloat v16 = *(double *)&v31;
        CGFloat v18 = *(double *)&v32;
        v40.origin.CGFloat x = x;
        v40.origin.CGFloat y = y;
        v40.size.CGFloat width = width;
        v40.size.CGFloat height = height;
        v42.origin.CGFloat x = *((CGFloat *)&v30 + 1);
        *(_OWORD *)&v42.origin.CGFloat y = v31;
        *(void *)&v42.size.CGFloat height = v32;
        CGRect v41 = CGRectUnion(v40, v42);
        CGFloat x = v41.origin.x;
        CGFloat y = v41.origin.y;
        CGFloat width = v41.size.width;
        CGFloat height = v41.size.height;
        v41.origin.CGFloat x = v15;
        v41.origin.CGFloat y = v16;
        double v14 = v21;
        v41.size.CGFloat width = v17;
        v41.size.CGFloat height = v18;
        if (!CGRectIsEmpty(v41)) {
          double v14 = v27;
        }
        sub_1B07BD394((uint64_t)&v22);
        VerticalStack.Placements.next()((uint64_t)&v28);
      }
      while (*((void *)&v29 + 1));
      uint64_t v13 = v20;
    }
  }
  else
  {
    uint64_t v13 = 0;
    double v14 = 0.0;
    CGFloat width = 0.0;
    CGFloat height = 0.0;
    CGFloat x = 0.0;
    CGFloat y = 0.0;
  }
  double v19 = v36;
  swift_bridgeObjectRelease();

  *(CGFloat *)a1 = x;
  *(CGFloat *)(a1 + 8) = y;
  *(CGFloat *)(a1 + 16) = width;
  *(CGFloat *)(a1 + 24) = height;
  *(void *)(a1 + 32) = v13;
  *(double *)(a1 + 40) = v14;
}

uint64_t sub_1B07BD394(uint64_t a1)
{
  return a1;
}

double AnyDimension.topMargin(from:with:)(void *a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6)
{
  return AnyDimension.value(with:)(a1, a2, a3) - a6;
}

uint64_t HorizontalStack.init(with:)@<X0>(void (*a1)(unsigned char *)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v6 = &type metadata for ZeroDimension;
  long long v7 = &protocol witness table for ZeroDimension;
  id v8 = &type metadata for ZeroDimension;
  uint64_t v9 = &protocol witness table for ZeroDimension;
  __int16 v10 = 0;
  if (a1) {
    a1(v5);
  }
  sub_1B07BD678((uint64_t)v5, a2);
  sub_1B07BDB64((uint64_t)a1);
  uint64_t result = sub_1B07BD9F8((uint64_t)v5);
  *(void *)(a2 + 88) = MEMORY[0x1E4FBC860];
  return result;
}

uint64_t HorizontalStack.add(_:with:)(uint64_t a1, void (*a2)(_OWORD *))
{
  uint64_t v3 = v2;
  sub_1B07BBD78(a1, (uint64_t)v26);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB595770);
  if (swift_dynamicCast())
  {
    v17[2] = v21;
    long long v17[3] = v22;
    v17[4] = v23;
    uint64_t v18 = v24;
    v17[0] = v19;
    v17[1] = v20;
    if ((BYTE8(v21) & 1) == 0) {
      sub_1B08699A8();
    }
    sub_1B07CEB8C((uint64_t)v17);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
  sub_1B07BD678(v2, (uint64_t)v17);
  if (a2) {
    a2(v17);
  }
  sub_1B07BBD78(a1, (uint64_t)&v19);
  sub_1B07BD678((uint64_t)v17, (uint64_t)&v21 + 8);
  uint64_t v6 = *(void **)(v2 + 88);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v6 = sub_1B07BDB74(0, v6[2] + 1, 1, v6);
  }
  unint64_t v8 = v6[2];
  unint64_t v7 = v6[3];
  if (v8 >= v7 >> 1) {
    uint64_t v6 = sub_1B07BDB74((void *)(v7 > 1), v8 + 1, 1, v6);
  }
  void v6[2] = v8 + 1;
  uint64_t v9 = &v6[16 * v8];
  long long v10 = v19;
  long long v11 = v20;
  long long v12 = v22;
  v9[4] = v21;
  v9[5] = v12;
  void v9[2] = v10;
  v9[3] = v11;
  long long v13 = v23;
  long long v14 = v24;
  long long v15 = v25[0];
  *(_OWORD *)((char *)v9 + 138) = *(_OWORD *)((char *)v25 + 10);
  v9[7] = v14;
  v9[8] = v15;
  v9[6] = v13;
  *(void *)(v3 + 88) = v6;
  return sub_1B07BD9F8((uint64_t)v17);
}

uint64_t sub_1B07BD678(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for HorizontalStack.Properties(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 40, a2 + 40);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  return a1;
}

uint64_t VerticalStack.init(with:)@<X0>(void (*a1)(unsigned char *)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v6 = &type metadata for ZeroDimension;
  unint64_t v7 = &protocol witness table for ZeroDimension;
  unint64_t v8 = &type metadata for ZeroDimension;
  uint64_t v9 = &protocol witness table for ZeroDimension;
  char v10 = 0;
  uint64_t v11 = 0;
  char v12 = 0;
  if (a1) {
    a1(v5);
  }
  sub_1B07BD9C0((uint64_t)v5, a2);
  sub_1B07BDB64((uint64_t)a1);
  uint64_t result = sub_1B07BD9F8((uint64_t)v5);
  *(void *)(a2 + 104) = MEMORY[0x1E4FBC860];
  return result;
}

uint64_t VerticalStack.add(_:with:)(uint64_t a1, void (*a2)(_OWORD *))
{
  uint64_t v3 = v2;
  sub_1B07BBD78(a1, (uint64_t)v27);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB595770);
  if (swift_dynamicCast())
  {
    _OWORD v25[2] = v19;
    void v25[3] = v20;
    v25[4] = v21;
    uint64_t v26 = v22;
    v25[0] = v17;
    v25[1] = v18;
    if (BYTE8(v19) == 1) {
      sub_1B08699A8();
    }
    sub_1B07CEB8C((uint64_t)v25);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
  sub_1B07BD9C0(v2, (uint64_t)v25);
  if (a2) {
    a2(v25);
  }
  sub_1B07BBD78(a1, (uint64_t)&v17);
  sub_1B07BD9C0((uint64_t)v25, (uint64_t)&v19 + 8);
  uint64_t v6 = *(void **)(v2 + 104);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v6 = sub_1B07BDA28(0, v6[2] + 1, 1, v6);
  }
  unint64_t v8 = v6[2];
  unint64_t v7 = v6[3];
  if (v8 >= v7 >> 1) {
    uint64_t v6 = sub_1B07BDA28((void *)(v7 > 1), v8 + 1, 1, v6);
  }
  void v6[2] = v8 + 1;
  uint64_t v9 = &v6[18 * v8];
  void v9[2] = v17;
  long long v10 = v18;
  long long v11 = v19;
  long long v12 = v21;
  v9[5] = v20;
  v9[6] = v12;
  v9[3] = v10;
  v9[4] = v11;
  long long v13 = v22;
  long long v14 = v23;
  long long v15 = v24[0];
  *(_OWORD *)((char *)v9 + 153) = *(_OWORD *)((char *)v24 + 9);
  v9[8] = v14;
  v9[9] = v15;
  v9[7] = v13;
  *(void *)(v3 + 104) = v6;
  return sub_1B07BD9F8((uint64_t)v25);
}

uint64_t sub_1B07BD9C0(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1B07BD9F8(uint64_t a1)
{
  return a1;
}

void *sub_1B07BDA28(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EB595788);
    long long v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 144);
  }
  else
  {
    long long v10 = (void *)MEMORY[0x1E4FBC860];
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[18 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 144 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EB595730);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_1B07BDB64(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

void *sub_1B07BDB74(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EB595780);
    long long v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 + 95;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 7);
  }
  else
  {
    long long v10 = (void *)MEMORY[0x1E4FBC860];
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[16 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, v8 << 7);
    }
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EB595728);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

double sub_1B07BDC9C(void *a1, CGFloat a2, CGFloat a3)
{
  v10.origin.CGFloat x = 0.0;
  v10.origin.CGFloat y = 0.0;
  v10.size.CGFloat width = a2;
  v10.size.CGFloat height = a3;
  if (CGRectGetWidth(v10) == 1.79769313e308) {
    a2 = 0.0;
  }
  v11.origin.CGFloat x = 0.0;
  v11.origin.CGFloat y = 0.0;
  v11.size.CGFloat width = a2;
  v11.size.CGFloat height = a3;
  if (CGRectGetHeight(v11) == 1.79769313e308) {
    a3 = 0.0;
  }
  id v6 = a1;
  swift_bridgeObjectRetain();
  v12.origin.CGFloat x = 0.0;
  v12.origin.CGFloat y = 0.0;
  v12.size.CGFloat width = a2;
  v12.size.CGFloat height = a3;
  CGRectGetMinX(v12);
  HorizontalStack.Placements.measure.getter();
  double v8 = v7;
  swift_bridgeObjectRelease();

  return v8;
}

void HorizontalStack.Placements.measure.getter()
{
  uint64_t v1 = *(void **)(v0 + 32);
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = *(void *)(v0 + 48);
  uint64_t v4 = *(void *)(v0 + 56);
  long long v5 = *(_OWORD *)(v0 + 16);
  v11[0] = *(_OWORD *)v0;
  v11[1] = v5;
  CGRect v12 = v1;
  v13[0] = v2;
  v13[1] = v3;
  void v13[2] = v4;
  HorizontalStack.Placements.union.getter(v19);
  unint64_t v6 = *(void *)(v2 + 16);
  if (v6)
  {
    sub_1B07B9258(v2 + 32, (uint64_t)v11, &qword_1EB595728);
    uint64_t v7 = v14;
    uint64_t v8 = v15;
    __swift_project_boxed_opaque_existential_1(v13, v14);
    AnyDimension.value(with:)(v1, v7, v8);
    sub_1B07BBE14((uint64_t)v11, &qword_1EB595728);
    if (v6 > *(void *)(v2 + 16))
    {
      __break(1u);
    }
    else
    {
      sub_1B07B9258(v2 + 32 + (v6 << 7) - 128, (uint64_t)v11, &qword_1EB595728);
      uint64_t v9 = v17;
      uint64_t v10 = v18;
      __swift_project_boxed_opaque_existential_1(v16, v17);
      AnyDimension.value(with:)(v1, v9, v10);
      sub_1B07BBE14((uint64_t)v11, &qword_1EB595728);
    }
  }
}

double HorizontalStack.Placements.union.getter@<D0>(CGFloat *a1@<X8>)
{
  uint64_t v3 = (void *)*((void *)v1 + 4);
  uint64_t v4 = *((void *)v1 + 5);
  uint64_t v5 = *((void *)v1 + 6);
  uint64_t v6 = *((void *)v1 + 7);
  long long v7 = v1[1];
  long long v34 = *v1;
  long long v35 = v7;
  uint64_t v36 = v3;
  uint64_t v37 = v4;
  uint64_t v38 = v5;
  uint64_t v39 = v6;
  id v8 = v3;
  swift_bridgeObjectRetain();
  HorizontalStack.Placements.next()((uint64_t)&v28);
  if (*((void *)&v29 + 1))
  {
    long long v24 = v30;
    long long v25 = v31;
    long long v26 = v32;
    double v27 = v33;
    long long v22 = v28;
    long long v23 = v29;
    CGFloat x = *((double *)&v30 + 1);
    CGFloat width = *((double *)&v31 + 1);
    CGFloat y = *(double *)&v31;
    CGFloat height = *(double *)&v32;
    double v20 = v33;
    double v21 = *((double *)&v32 + 1);
    sub_1B07BD394((uint64_t)&v22);
    while (1)
    {
      HorizontalStack.Placements.next()((uint64_t)&v28);
      if (!*((void *)&v29 + 1)) {
        break;
      }
      long long v24 = v30;
      long long v25 = v31;
      long long v26 = v32;
      double v27 = v33;
      long long v22 = v28;
      long long v23 = v29;
      CGFloat v13 = *((double *)&v30 + 1);
      long long v15 = v31;
      CGFloat v14 = *(double *)&v32;
      v40.origin.CGFloat x = x;
      v40.origin.CGFloat y = y;
      v40.size.CGFloat width = width;
      v40.size.CGFloat height = height;
      v42.origin.CGFloat x = *((CGFloat *)&v30 + 1);
      *(_OWORD *)&v42.origin.CGFloat y = v31;
      *(void *)&v42.size.CGFloat height = v32;
      CGRect v41 = CGRectUnion(v40, v42);
      CGFloat x = v41.origin.x;
      CGFloat y = v41.origin.y;
      CGFloat width = v41.size.width;
      CGFloat height = v41.size.height;
      v41.origin.CGFloat x = v13;
      *(_OWORD *)&v41.origin.CGFloat y = v15;
      v41.size.CGFloat height = v14;
      if (!CGRectIsEmpty(v41))
      {
        double v16 = v21;
        if (v21 >= *((double *)&v26 + 1)) {
          double v16 = *((double *)&v26 + 1);
        }
        double v17 = v20;
        if (v20 >= v27) {
          double v17 = v27;
        }
        double v20 = v17;
        double v21 = v16;
      }
      sub_1B07BD394((uint64_t)&v22);
    }
  }
  else
  {
    double v20 = 0.0;
    double v21 = 0.0;
    CGFloat width = 0.0;
    CGFloat height = 0.0;
    CGFloat x = 0.0;
    CGFloat y = 0.0;
  }
  uint64_t v18 = v36;
  swift_bridgeObjectRelease();

  *a1 = x;
  a1[1] = y;
  a1[2] = width;
  a1[3] = height;
  double result = v20;
  a1[4] = v21;
  a1[5] = v20;
  return result;
}

JUMeasurements __swiftcall LabelPlaceholder.measure(toFit:with:)(CGSize toFit, UITraitCollection with)
{
  uint64_t v3 = v2;
  double height = toFit.height;
  double width = toFit.width;
  uint64_t v7 = sub_1B0869508();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (uint64_t *)((char *)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1B07BE798();
  *uint64_t v10 = sub_1B086A2F8();
  (*(void (**)(uint64_t *, void, uint64_t))(v8 + 104))(v10, *MEMORY[0x1E4FBCBF0], v7);
  char v11 = sub_1B0869518();
  (*(void (**)(uint64_t *, uint64_t))(v8 + 8))(v10, v7);
  if (v11)
  {
    if (qword_1EB595740 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  id v12 = objc_msgSend((id)qword_1EB595690, sel__defaultAttributes);
  if (v12)
  {
    CGFloat v13 = v12;
    type metadata accessor for Key(0);
    sub_1B07BE6C4();
    uint64_t v14 = sub_1B0869CB8();
  }
  else
  {
    uint64_t v14 = 0;
  }
  sub_1B07BE7D8(v3 + 24, (uint64_t)&v63);
  if (v68)
  {
    long long v60 = v65;
    long long v61 = v66;
    uint64_t v62 = v67;
    long long v59 = v64;
    long long v58 = v63;
    long long v15 = (void *)qword_1EB595690;
    id v16 = objc_msgSend(self, sel_preferredFontForTextStyle_compatibleWithTraitCollection_, *MEMORY[0x1E4FB28C8], 0);
    uint64_t v17 = *((void *)&v59 + 1);
    uint64_t v18 = v60;
    __swift_project_boxed_opaque_existential_1(&v58, *((uint64_t *)&v59 + 1));
    long long v19 = (void *)(*(uint64_t (**)(Class, uint64_t, uint64_t))(v18 + 8))(with.super.isa, v17, v18);

    uint64_t v20 = *((void *)&v60 + 1);
    long long v21 = v61;
    uint64_t v22 = v62;
    objc_msgSend(v15, sel_setFont_, v19);
    objc_msgSend(v15, sel_setTextAlignment_, v20);
    objc_msgSend(v15, sel_setLineBreakMode_, (void)v21);
    objc_msgSend(v15, sel_setNumberOfLines_, *((void *)&v21 + 1));
    objc_msgSend(v15, sel_setLineSpacing_, v22);

    sub_1B07EA0DC((uint64_t)&v58);
  }
  else
  {
    uint64_t v23 = *((void *)&v63 + 1);
    long long v24 = v64;
    uint64_t v25 = v65;
    long long v26 = (void *)qword_1EB595690;
    id v27 = (id)v63;
    objc_msgSend(v26, sel_setFont_, v27);
    objc_msgSend(v26, sel_setTextAlignment_, v23);
    objc_msgSend(v26, sel_setLineBreakMode_, (void)v24);
    objc_msgSend(v26, sel_setNumberOfLines_, *((void *)&v24 + 1));
    objc_msgSend(v26, sel_setLineSpacing_, v25);
  }
  long long v28 = *(void **)v3;
  uint64_t v29 = *(void *)(v3 + 8);
  char v30 = *(unsigned char *)(v3 + 16);
  long long v31 = &selRef_layoutDirection;
  long long v32 = (void *)qword_1EB595690;
  if (v30)
  {
    objc_msgSend((id)qword_1EB595690, sel_setAttributedText_, *(void *)v3);
  }
  else
  {
    if (v29)
    {
      swift_bridgeObjectRetain();
      double v33 = (void *)sub_1B0869D68();
      sub_1B07BE788(v28, v29, 0);
    }
    else
    {
      double v33 = 0;
    }
    objc_msgSend(v32, sel_setText_, v33);

    long long v34 = (void *)qword_1EB595690;
    id v35 = objc_msgSend((id)qword_1EB595690, sel_font);
    objc_msgSend(v34, sel_set_fontForShortcutBaselineCalculation_, v35);

    long long v31 = &selRef_layoutDirection;
  }
  uint64_t v36 = (void *)qword_1EB595690;
  objc_msgSend((id)qword_1EB595690, sel_sizeThatFits_, width, height);
  unint64_t v38 = v37;
  double v40 = v39;
  objc_msgSend(v36, sel__firstBaselineOffsetFromTop);
  double v42 = v41;
  objc_msgSend(v36, sel__baselineOffsetFromBottom);
  double v44 = v43;
  if (*(unsigned char *)(v3 + 104))
  {
    id v45 = objc_msgSend(v36, sel_font);
    sub_1B081D8FC(v45, v28, v29, v30);
    double v47 = v46;
    double v49 = v48;

    double v40 = v49 + v40 + v47;
    double v42 = v42 + v47;
    double v44 = v44 + v49;
  }
  *(void *)&double v50 = *(_OWORD *)&constrainWidth(of:toFit:)((CGSize)__PAIR128__(*(unint64_t *)&v40, v38), (CGSize)__PAIR128__(*(unint64_t *)&height, *(unint64_t *)&width));
  CGSize v51 = constrainHeight(of:toFit:)((CGSize)__PAIR128__(*(unint64_t *)&v40, v38), (CGSize)__PAIR128__(*(unint64_t *)&height, *(unint64_t *)&width));
  uint64_t v52 = (void *)qword_1EB595690;
  objc_msgSend((id)qword_1EB595690, sel_setText_, 0, v51.width);
  if (v14)
  {
    type metadata accessor for Key(0);
    sub_1B07BE6C4();
    uint64_t v53 = (void *)sub_1B0869CA8();
  }
  else
  {
    uint64_t v53 = 0;
  }
  objc_msgSend(v52, sel__setDefaultAttributes_, v53);

  objc_msgSend((id)qword_1EB595690, v31[256], 0);
  swift_bridgeObjectRelease();
  double v54 = v50;
  CGFloat v55 = v51.height;
  double v56 = v42;
  double v57 = v44;
  result.double var3 = v57;
  result.double var2 = v56;
  result.double var1 = v55;
  result.var0 = v54;
  return result;
}

void type metadata accessor for Key(uint64_t a1)
{
}

unint64_t sub_1B07BE6C4()
{
  unint64_t result = qword_1EB595E20;
  if (!qword_1EB595E20)
  {
    type metadata accessor for Key(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB595E20);
  }
  return result;
}

void destroy for LabelPlaceholder(uint64_t a1)
{
  sub_1B07BE788(*(void **)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
  uint64_t v2 = (void **)(a1 + 24);
  if (*(unsigned char *)(a1 + 96))
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
  }
  else
  {
    uint64_t v3 = *v2;
  }
}

void sub_1B07BE788(void *a1, uint64_t a2, char a3)
{
  if (a3) {

  }
  else {
    swift_bridgeObjectRelease();
  }
}

unint64_t sub_1B07BE798()
{
  unint64_t result = qword_1EB5962D0;
  if (!qword_1EB5962D0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EB5962D0);
  }
  return result;
}

uint64_t sub_1B07BE7D8(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for LabelPlaceholder.Appearance(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(unsigned __int8 *)(a2 + 72);
  if (v4 >= 2) {
    unsigned int v4 = *(_DWORD *)a2 + 2;
  }
  if (v4 == 1)
  {
    long long v5 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v5;
    (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1, a2);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    char v6 = 1;
  }
  else
  {
    uint64_t v7 = *(void **)a2;
    *(void *)a1 = *(void *)a2;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    id v8 = v7;
    char v6 = 0;
  }
  *(unsigned char *)(a1 + 72) = v6;
  return a1;
}

CGSize __swiftcall constrainHeight(of:toFit:)(CGSize of, CGSize toFit)
{
  double height = toFit.height;
  double width = toFit.width;
  double v4 = of.height;
  CGFloat v5 = of.width;
  if (qword_1EB596280 != -1) {
    swift_once();
  }
  sub_1B086AA78();
  if ((v10 & 2) == 0)
  {
    if (height == 0.0) {
      goto LABEL_12;
    }
    goto LABEL_10;
  }
  if (width != 0.0 || height != 0.0)
  {
LABEL_10:
    if (height < v4) {
      double v4 = height;
    }
  }
LABEL_12:
  double v7 = v5;
  double v8 = v4;
  result.double height = v8;
  result.double width = v7;
  return result;
}

uint64_t _s5JetUI15StaticDimensionV2eeoiySbAC_ACtFZ_0(double *a1, double *a2)
{
  if (*a1 == *a2)
  {
    StaticDimension.source.getter((uint64_t)&v26);
    uint64_t v14 = v27;
    long long v15 = v26;
    uint64_t v2 = v29;
    uint64_t v13 = v28;
    uint64_t v3 = v30;
    char v4 = v31;
    v24[0] = v26;
    v24[1] = v27;
    _OWORD v24[2] = v28;
    v24[3] = v29;
    v24[4] = v30;
    char v25 = v31;
    StaticDimension.source.getter((uint64_t)&v18);
    CGFloat v5 = v18;
    uint64_t v6 = v19;
    uint64_t v8 = v20;
    uint64_t v7 = v21;
    uint64_t v9 = v22;
    char v10 = v23;
    v16[0] = v18;
    v16[1] = v19;
    long long v16[2] = v20;
    void v16[3] = v21;
    v16[4] = v22;
    char v17 = v23;
    char v11 = _s5JetUI10FontSourceO2eeoiySbAC_ACtFZ_0((uint64_t)v24, (uint64_t)v16);
    sub_1B07BF284(v5, v6, v8, v7, v9, v10);
    sub_1B07BF284(v15, v14, v13, v2, v3, v4);
  }
  else
  {
    char v11 = 0;
  }
  return v11 & 1;
}

UIFont __swiftcall FontSource.font(compatibleWith:)(UITraitCollection compatibleWith)
{
  uint64_t v3 = *(void **)v1;
  int v4 = *(char *)(v1 + 40);
  if (v4 < 0)
  {
    uint64_t v8 = *(void *)(v1 + 24);
    uint64_t v7 = *(void *)(v1 + 32);
    uint64_t v11 = v1 + 8;
    uint64_t v9 = *(void *)(v1 + 8);
    uint64_t v10 = *(void *)(v11 + 8);
    v13[0] = v3;
    v13[1] = v9;
    void v13[2] = v10;
    void v13[3] = v8;
    v13[4] = v7;
    char v14 = v4 & 0x7F;
    sub_1B07BF30C(v3, v9, v10, v8, v7, v4);
    id v12 = _sSo6UIFontC5JetUIE13preferredFont10forUseWith010compatibleH0AbC0eG4CaseO_So17UITraitCollectionCtFZ_0((uint64_t)v13, compatibleWith.super.isa);
    sub_1B07BF284(v3, v9, v10, v8, v7, v4);
    return (UIFont)v12;
  }
  else
  {
    id v5 = objc_msgSend(self, sel_preferredFontForTextStyle_compatibleWithTraitCollection_, v3, compatibleWith.super.isa);
    return (UIFont)v5;
  }
}

id _sSo6UIFontC5JetUIE13preferredFont10forUseWith010compatibleH0AbC0eG4CaseO_So17UITraitCollectionCtFZ_0(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(a1 + 32);
  char v8 = *(unsigned char *)(a1 + 40);
  uint64_t v9 = (objc_class *)type metadata accessor for CacheKey();
  uint64_t v10 = (char *)objc_allocWithZone(v9);
  uint64_t v11 = &v10[OBJC_IVAR____TtC5JetUIP33_925E47A64C9969C34ACE8A7AFC4CB7868CacheKey_useCase];
  *(void *)uint64_t v11 = v3;
  *((void *)v11 + 1) = v4;
  *((void *)v11 + 2) = v5;
  *((void *)v11 + 3) = v6;
  *((void *)v11 + 4) = v7;
  v11[40] = v8;
  *(void *)&v10[OBJC_IVAR____TtC5JetUIP33_925E47A64C9969C34ACE8A7AFC4CB7868CacheKey_traitCollection] = a2;
  id v12 = a2;
  sub_1B07BCAAC(v3, v4, v5, v6, v7, v8);
  v23.receiver = v10;
  v23.super_class = v9;
  id v13 = objc_msgSendSuper2(&v23, sel_init);
  if (qword_1EB5964C8 != -1) {
    swift_once();
  }
  id v14 = objc_msgSend((id)qword_1EB596490, sel_objectForKey_, v13);
  if (v14)
  {
    id v15 = v14;
  }
  else
  {
    id v16 = (char *)objc_allocWithZone(v9);
    char v17 = &v16[OBJC_IVAR____TtC5JetUIP33_925E47A64C9969C34ACE8A7AFC4CB7868CacheKey_useCase];
    *(void *)char v17 = v3;
    *((void *)v17 + 1) = v4;
    *((void *)v17 + 2) = v5;
    *((void *)v17 + 3) = v6;
    *((void *)v17 + 4) = v7;
    v17[40] = v8;
    *(void *)&v16[OBJC_IVAR____TtC5JetUIP33_925E47A64C9969C34ACE8A7AFC4CB7868CacheKey_traitCollection] = v12;
    id compatibleWith = v12;
    sub_1B07BCAAC(v3, v4, v5, v6, v7, v8);
    v22.receiver = v16;
    v22.super_class = v9;
    id v18 = objc_msgSendSuper2(&v22, sel_init);
    if (qword_1EB5964D0 != -1) {
      swift_once();
    }
    Class isa = (Class)objc_msgSend((id)qword_1EB596470, sel_objectForKey_, v18);
    if (!isa)
    {
      Class isa = FontUseCase.makeFontDescriptor(compatibleWith:)((UITraitCollection)compatibleWith).super.isa;
      objc_msgSend((id)qword_1EB596470, sel_setObject_forKey_, isa, v18);
    }

    id v15 = objc_msgSend(self, sel_fontWithDescriptor_size_, isa, 0.0);
    objc_msgSend((id)qword_1EB596490, sel_setObject_forKey_, v15, v13);

    id v13 = isa;
  }

  return v15;
}

uint64_t type metadata accessor for CacheKey()
{
  return self;
}

uint64_t _s5JetUI10FontSourceO2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 32);
  int v7 = *(char *)(a1 + 40);
  uint64_t v9 = *(void **)a2;
  uint64_t v8 = *(void *)(a2 + 8);
  uint64_t v10 = *(void *)(a2 + 16);
  uint64_t v11 = *(void *)(a2 + 24);
  uint64_t v12 = *(void *)(a2 + 32);
  int v13 = *(char *)(a2 + 40);
  uint64_t v40 = v2;
  if (v7 < 0)
  {
    if (v13 < 0)
    {
      v43[0] = *(void *)a1;
      v43[1] = v2;
      v43[2] = v5;
      v43[3] = v4;
      v43[4] = v6;
      char v44 = v7 & 0x7F;
      long long v32 = v9;
      v41[0] = v9;
      v41[1] = v8;
      v41[2] = v10;
      v41[3] = v11;
      v41[4] = v12;
      char v42 = v13 & 0x7F;
      uint64_t v28 = v9;
      uint64_t v35 = v8;
      uint64_t v37 = v6;
      uint64_t v29 = v2;
      uint64_t v30 = v3;
      sub_1B07BF30C(v28, v8, v10, v11, v12, v13);
      sub_1B07BF30C(v30, v29, v5, v4, v6, v7);
      sub_1B07BF30C(v30, v29, v5, v4, v6, v7);
      sub_1B07BF30C(v32, v35, v10, v11, v12, v13);
      BOOL v27 = _s5JetUI11FontUseCaseO2eeoiySbAC_ACtFZ_0((uint64_t)v43, (uint64_t)v41);
      sub_1B07BF284(v30, v40, v5, v4, v37, v7);
      sub_1B07BF284(v32, v35, v10, v11, v12, v13);
      sub_1B07BF284(v32, v35, v10, v11, v12, v13);
      sub_1B07BF284(v30, v40, v5, v4, v37, v7);
      return v27;
    }
    goto LABEL_9;
  }
  if (v13 < 0)
  {
LABEL_9:
    uint64_t v22 = *(void *)(a2 + 16);
    uint64_t v23 = *(void *)(a2 + 24);
    uint64_t v24 = *(void *)(a2 + 32);
    char v39 = *(unsigned char *)(a1 + 40);
    uint64_t v25 = *(void *)(a2 + 8);
    long long v26 = *(void **)a1;
    sub_1B07BF30C(v3, v2, v5, v4, v6, v39);
    sub_1B07BF30C(v9, v25, v22, v23, v24, v13);
    sub_1B07BF284(v26, v40, v5, v4, v6, v39);
    sub_1B07BF284(v9, v25, v22, v23, v24, v13);
    return 0;
  }
  char v38 = *(unsigned char *)(a2 + 40);
  uint64_t v14 = *(void *)(a2 + 8);
  uint64_t v15 = *(void *)(a2 + 32);
  uint64_t v33 = *(void *)(a1 + 24);
  uint64_t v36 = *(void *)(a1 + 32);
  id v16 = *(void **)a1;
  uint64_t v17 = sub_1B0869D98();
  uint64_t v19 = v18;
  if (v17 == sub_1B0869D98() && v19 == v20) {
    char v34 = 1;
  }
  else {
    char v34 = sub_1B086A8A8();
  }
  sub_1B07BF30C(v9, v14, v10, v11, v15, v38);
  sub_1B07BF30C(v16, v40, v5, v33, v36, v7);
  sub_1B07BF30C(v16, v40, v5, v33, v36, v7);
  sub_1B07BF30C(v9, v14, v10, v11, v15, v38);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B07BF284(v16, v40, v5, v33, v36, v7);
  sub_1B07BF284(v9, v14, v10, v11, v15, v38);
  sub_1B07BF284(v9, v14, v10, v11, v15, v38);
  sub_1B07BF284(v16, v40, v5, v33, v36, v7);
  return v34;
}

void sub_1B07BF284(id a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a6 < 0) {
    sub_1B07BCA18(a1, a2, a3, a4, a5, a6 & 0x7F);
  }
  else {
}
  }

uint64_t initializeWithCopy for FontSource(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  char v8 = *(unsigned char *)(a2 + 40);
  sub_1B07BF30C(*(id *)a2, v4, v5, v6, v7, v8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(unsigned char *)(a1 + 40) = v8;
  return a1;
}

id sub_1B07BF30C(id a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a6 < 0) {
    return sub_1B07BCAAC(a1, a2, a3, a4, a5, a6 & 0x7F);
  }
  else {
    return a1;
  }
}

UIFontDescriptor __swiftcall FontUseCase.makeFontDescriptor(compatibleWith:)(UITraitCollection compatibleWith)
{
  uint64_t v3 = sub_1B0869688();
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v4 = sub_1B0869C18();
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void **)v1;
  uint64_t v8 = *(void *)(v1 + 8);
  uint64_t v11 = *(double (**)(id))(v1 + 16);
  uint64_t v10 = *(void *)(v1 + 24);
  uint64_t v12 = *(void *)(v1 + 32);
  switch(*(unsigned char *)(v1 + 40))
  {
    case 1:
      id v18 = objc_msgSend(self, sel_preferredFontDescriptorWithTextStyle_compatibleWithTraitCollection_, v9, compatibleWith.super.isa);
      objc_msgSend(v18, sel_pointSize);
      id v20 = _sSo16UIFontDescriptorC5JetUIE010systemFontB06ofSize6weightAB12CoreGraphics7CGFloatV_So0A6WeightatFZ_0(v19, *(double *)&v8);

      sub_1B07BCA18(v9, v8, (uint64_t)v11, v10, v12, 1);
      return (UIFontDescriptor)v20;
    case 2:
      double v22 = *(double *)(v1 + 32);
      swift_retain();
      id v23 = [(objc_class *)compatibleWith.super.isa preferredContentSizeCategory];
      uint64_t v24 = sub_1B0869D98();
      uint64_t v26 = v25;
      if (v24 == sub_1B0869D98() && v26 == v27)
      {

        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v29 = sub_1B086A8A8();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v29 & 1) == 0)
        {
          id v30 = [(objc_class *)compatibleWith.super.isa preferredContentSizeCategory];
          goto LABEL_17;
        }
      }
      id v36 = objc_msgSend(self, sel_system);
      id v37 = objc_msgSend(v36, sel_preferredContentSizeCategory);

      id v38 = objc_msgSend(self, sel_traitCollectionWithPreferredContentSizeCategory_, v37);
      id v30 = objc_msgSend(v38, sel_preferredContentSizeCategory);

LABEL_17:
      double v39 = v11(v30);
      id v40 = _sSo16UIFontDescriptorC5JetUIE010systemFontB06ofSize6weightAB12CoreGraphics7CGFloatV_So0A6WeightatFZ_0(v39, v22);
      swift_release();

      return (UIFontDescriptor)v40;
    case 3:
      uint64_t v55 = v5;
      uint64_t v31 = swift_retain();
      long long v32 = (void *)((uint64_t (*)(uint64_t))v11)(v31);
      id v33 = objc_msgSend(self, sel_preferredFontDescriptorWithTextStyle_compatibleWithTraitCollection_, v32, compatibleWith.super.isa);
      uint64_t v15 = v33;
      if (!v12)
      {

        swift_release();
        return (UIFontDescriptor)v15;
      }
      id v54 = v32;
      char v34 = (objc_class *)objc_msgSend(v33, sel_fontDescriptorWithSymbolicTraits_, v12);
      if (v34)
      {
        v35.super.Class isa = v34;
        swift_release();

        return v35;
      }
      if (qword_1E9B3A6A0 != -1) {
        swift_once();
      }
      uint64_t v47 = __swift_project_value_buffer(v4, (uint64_t)qword_1E9B46108);
      (*(void (**)(char *, uint64_t, uint64_t))(v55 + 16))(v7, v47, v4);
      uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E9B3AA70);
      uint64_t v48 = *(void *)(sub_1B08696C8() - 8);
      unint64_t v49 = (*(unsigned __int8 *)(v48 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80);
      uint64_t v50 = swift_allocObject();
      *(_OWORD *)(v50 + 16) = xmmword_1B086C130;
      unint64_t v52 = v50 + v49;
      uint64_t v53 = v50;
      sub_1B0869678();
      sub_1B0869668();
      double v57 = &type metadata for FontUseCase;
      uint64_t v51 = swift_allocObject();
      v56[0] = v51;
      *(void *)(v51 + 16) = v9;
      *(void *)(v51 + 24) = v8;
      *(void *)(v51 + 32) = v11;
      *(void *)(v51 + 40) = v10;
      *(void *)(v51 + 48) = v12;
      *(unsigned char *)(v51 + 56) = 3;
      swift_bridgeObjectRetain();
      swift_retain();
      sub_1B0869638();
      sub_1B07B86F8((uint64_t)v56);
      sub_1B0869668();
      sub_1B0869698();
      sub_1B0869AC8();
      swift_bridgeObjectRelease();
      swift_release();

      goto LABEL_26;
    default:
      uint64_t v55 = v5;
      int v13 = self;
      id v54 = v9;
      id v14 = objc_msgSend(v13, sel_preferredFontDescriptorWithTextStyle_compatibleWithTraitCollection_);
      uint64_t v15 = v14;
      if (v8)
      {
        id v16 = (objc_class *)objc_msgSend(v14, sel_fontDescriptorWithSymbolicTraits_, v8);
        if (v16)
        {
          v17.super.Class isa = v16;

          sub_1B07BCA18(v9, v8, (uint64_t)v11, v10, v12, 0);
          return v17;
        }
        else
        {
          if (qword_1E9B3A6A0 != -1) {
            swift_once();
          }
          uint64_t v41 = __swift_project_value_buffer(v4, (uint64_t)qword_1E9B46108);
          (*(void (**)(char *, uint64_t, uint64_t))(v55 + 16))(v7, v41, v4);
          uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E9B3AA70);
          uint64_t v42 = *(void *)(sub_1B08696C8() - 8);
          unint64_t v43 = (*(unsigned __int8 *)(v42 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80);
          uint64_t v44 = swift_allocObject();
          *(_OWORD *)(v44 + 16) = xmmword_1B086C130;
          unint64_t v52 = v44 + v43;
          uint64_t v53 = v44;
          sub_1B0869678();
          sub_1B0869668();
          double v57 = &type metadata for FontUseCase;
          uint64_t v45 = swift_allocObject();
          v56[0] = v45;
          *(void *)(v45 + 16) = v9;
          *(void *)(v45 + 24) = v8;
          *(void *)(v45 + 32) = v11;
          *(void *)(v45 + 40) = v10;
          *(void *)(v45 + 48) = v12;
          *(unsigned char *)(v45 + 56) = 0;
          id v46 = v54;
          sub_1B0869638();
          sub_1B07B86F8((uint64_t)v56);
          sub_1B0869668();
          sub_1B0869698();
          sub_1B0869AC8();
          sub_1B07BCA18(v9, v8, (uint64_t)v11, v10, v12, 0);
          swift_bridgeObjectRelease();
LABEL_26:
          (*(void (**)(char *, uint64_t))(v55 + 8))(v7, v4);
        }
      }
      else
      {
        sub_1B07BCA18(v9, v8, (uint64_t)v11, v10, v12, 0);
      }
      return (UIFontDescriptor)v15;
  }
}

id _sSo16UIFontDescriptorC5JetUIE010systemFontB06ofSize6weightAB12CoreGraphics7CGFloatV_So0A6WeightatFZ_0(double a1, double a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5964A8);
  initeCGFloat d = swift_initStackObject();
  uint64_t v5 = (void **)MEMORY[0x1E4FB0998];
  *(_OWORD *)(inited + 16) = xmmword_1B086D960;
  uint64_t v6 = *v5;
  *(void *)(inited + 32) = *v5;
  uint64_t v7 = sub_1B0869D98();
  uint64_t v8 = MEMORY[0x1E4FBB1A0];
  *(void *)(inited + 40) = v7;
  *(void *)(inited + 48) = v9;
  uint64_t v10 = (void *)*MEMORY[0x1E4FB09F0];
  *(void *)(inited + 64) = v8;
  *(void *)(inited + 72) = v10;
  uint64_t v11 = MEMORY[0x1E4FBB3D0];
  *(void *)(inited + 104) = MEMORY[0x1E4FBB3D0];
  *(double *)(inited + 80) = a2;
  id v12 = v6;
  id v13 = v10;
  unint64_t v14 = sub_1B07C00F4(inited);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5964B0);
  uint64_t v15 = swift_initStackObject();
  *(_OWORD *)(v15 + 16) = xmmword_1B086D960;
  id v16 = (void *)*MEMORY[0x1E4FB0920];
  *(void *)(v15 + 32) = *MEMORY[0x1E4FB0920];
  *(double *)(v15 + 40) = a1;
  UIFontDescriptor v17 = (void *)*MEMORY[0x1E4FB0950];
  *(void *)(v15 + 64) = v11;
  *(void *)(v15 + 72) = v17;
  *(void *)(v15 + 104) = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB596468);
  *(void *)(v15 + 80) = v14;
  id v18 = v16;
  id v19 = v17;
  sub_1B07C00CC(v15);
  id v20 = objc_allocWithZone(MEMORY[0x1E4FB08E8]);
  type metadata accessor for AttributeName(0);
  sub_1B07C0074();
  uint64_t v21 = (void *)sub_1B0869CA8();
  swift_bridgeObjectRelease();
  id v22 = objc_msgSend(v20, sel_initWithFontAttributes_, v21);

  return v22;
}

void sub_1B07BFCCC(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

unint64_t sub_1B07BFD14(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(uint64_t))
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v8 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v7 = sub_1B086A718();
  uint64_t v8 = (void *)v7;
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  uint64_t v10 = v7 + 64;
  uint64_t v11 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1B07B9258(v11, (uint64_t)&v18, a3);
    uint64_t v12 = v18;
    unint64_t result = a4(v18);
    if (v14) {
      break;
    }
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(void *)(v8[6] + 8 * result) = v12;
    unint64_t result = (unint64_t)sub_1B07BFE44(&v19, (_OWORD *)(v8[7] + 32 * result));
    uint64_t v15 = v8[2];
    BOOL v16 = __OFADD__(v15, 1);
    uint64_t v17 = v15 + 1;
    if (v16) {
      goto LABEL_11;
    }
    v8[2] = v17;
    v11 += 40;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

_OWORD *sub_1B07BFE44(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

unint64_t sub_1B07BFE54(uint64_t a1)
{
  sub_1B0869D98();
  sub_1B086A958();
  sub_1B0869E38();
  uint64_t v2 = sub_1B086A998();
  swift_bridgeObjectRelease();
  return sub_1B07BFEE8(a1, v2);
}

unint64_t sub_1B07BFEE8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = sub_1B0869D98();
    uint64_t v8 = v7;
    if (v6 == sub_1B0869D98() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    char v11 = sub_1B086A8A8();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      uint64_t v12 = ~v4;
      unint64_t v5 = (v5 + 1) & v12;
      if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
      {
        while (1)
        {
          uint64_t v13 = sub_1B0869D98();
          uint64_t v15 = v14;
          if (v13 == sub_1B0869D98() && v15 == v16) {
            break;
          }
          char v18 = sub_1B086A8A8();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            unint64_t v5 = (v5 + 1) & v12;
            if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5)) {
              continue;
            }
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

void type metadata accessor for AttributeName(uint64_t a1)
{
}

unint64_t sub_1B07C0074()
{
  unint64_t result = qword_1EB596480;
  if (!qword_1EB596480)
  {
    type metadata accessor for AttributeName(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB596480);
  }
  return result;
}

unint64_t sub_1B07C00CC(uint64_t a1)
{
  return sub_1B07BFD14(a1, &qword_1EB5964A0, &qword_1EB596488, (uint64_t (*)(uint64_t))sub_1B07BFEE4);
}

unint64_t sub_1B07C00F4(uint64_t a1)
{
  return sub_1B07BFD14(a1, &qword_1EB596498, &qword_1EB596478, (uint64_t (*)(uint64_t))sub_1B07BFEE4);
}

uint64_t StaticDimension.source.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 8) + 16;
  swift_beginAccess();
  sub_1B07BBD78(v3, (uint64_t)&v12);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB596388);
  uint64_t result = swift_dynamicCast();
  if (result)
  {
    uint64_t v5 = v10;
    char v6 = v11;
    long long v7 = v9[1];
    *(_OWORD *)a1 = v9[0];
    *(_OWORD *)(a1 + 16) = v7;
    *(void *)(a1 + 32) = v5;
    *(unsigned char *)(a1 + 40) = v6;
  }
  else
  {
    *(void *)&v9[0] = 0;
    *((void *)&v9[0] + 1) = 0xE000000000000000;
    swift_retain();
    sub_1B086A5E8();
    long long v12 = v9[0];
    *(void *)&v9[0] = 0;
    *((void *)&v9[0] + 1) = 0xE000000000000000;
    sub_1B086A5E8();
    long long v8 = v9[0];
    sub_1B0869E68();
    sub_1B086A128();
    sub_1B0869E68();
    swift_bridgeObjectRelease();
    sub_1B0869E68();
    sub_1B07BBD78(v3, (uint64_t)v9);
    sub_1B086A6B8();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
    sub_1B0869E68();
    swift_bridgeObjectRelease();
    long long v12 = v8;
    sub_1B0869E68();
    uint64_t result = sub_1B086A6C8();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B07C0320(void *a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  uint64_t v6 = v5;
  sub_1B07C0A4C((_OWORD *)(v6 + 40), &v62);
  sub_1B07BBD78(v6, (uint64_t)&v56);
  *(_OWORD *)&v61[104] = v68;
  *(_OWORD *)&v61[120] = v69;
  *(_OWORD *)&v61[136] = v70;
  *(_OWORD *)&v61[152] = v71;
  *(_OWORD *)&v61[40] = v64;
  *(_OWORD *)&v61[56] = v65;
  *(_OWORD *)&v61[72] = v66;
  *(_OWORD *)&v61[88] = v67;
  *(_OWORD *)&v61[8] = v62;
  memset(&v61[168], 0, 40);
  *(CGFloat *)uint64_t v47 = a2;
  *(CGFloat *)&v47[8] = a3;
  v60.origin.double x = a2;
  v60.origin.double y = a3;
  *(CGFloat *)&v47[16] = a4;
  *(CGFloat *)&v47[24] = a5;
  v60.size.double width = a4;
  v60.size.double height = a5;
  *(void *)long long v61 = a1;
  *(_OWORD *)&v61[24] = v63;
  id v12 = a1;
  sub_1B07B9AF8((uint64_t)&v61[168]);
  sub_1B07BA8FC((long long *)&v56, (uint64_t)&v61[168]);
  long long v83 = *(_OWORD *)&v61[160];
  long long v84 = *(_OWORD *)&v61[176];
  long long v85 = *(_OWORD *)&v61[192];
  long long v79 = *(_OWORD *)&v61[96];
  long long v80 = *(_OWORD *)&v61[112];
  long long v81 = *(_OWORD *)&v61[128];
  long long v82 = *(_OWORD *)&v61[144];
  long long v75 = *(_OWORD *)&v61[32];
  long long v76 = *(_OWORD *)&v61[48];
  long long v77 = *(_OWORD *)&v61[64];
  long long v78 = *(_OWORD *)&v61[80];
  CGRect v72 = v60;
  long long v73 = *(_OWORD *)v61;
  long long v74 = *(_OWORD *)&v61[16];
  sub_1B07C0D04((uint64_t)&v72, (uint64_t)&v60);
  sub_1B07BA914((uint64_t)&v61[168], (uint64_t)&v62);
  if (*((void *)&v63 + 1))
  {
    while (1)
    {
      sub_1B07BA8FC(&v62, (uint64_t)&v56);
      sub_1B07B9AF8((uint64_t)&v61[168]);
      memset(&v61[168], 0, 40);
      uint64_t v13 = *(void *)v61;
      double v14 = sub_1B07C1158(*(void **)v61);
      rect[0] = v15;
      double v17 = v16;
      CGPoint origin = v60.origin;
      CGSize size = v60.size;
      double v21 = CGRectGetWidth(v60) - (v15 + v20);
      v86.CGPoint origin = origin;
      v86.CGSize size = size;
      double v49 = v17;
      double v22 = CGRectGetHeight(v86) - (v14 + v17);
      if (v21 < 0.0) {
        double v21 = 0.0;
      }
      double v23 = v22 < 0.0 ? 0.0 : v22;
      CGFloat d = v56.d;
      CGFloat tx = v56.tx;
      __swift_project_boxed_opaque_existential_1(&v56, *(uint64_t *)&v56.d);
      double v51 = (*(double (**)(uint64_t, CGFloat, CGFloat, double, double))(*(void *)&tx + 8))(v13, COERCE_CGFLOAT(*(void *)&d), COERCE_CGFLOAT(*(void *)&tx), v21, v23);
      double v53 = v26;
      double v28 = v27;
      double v30 = v29;
      v87.CGPoint origin = origin;
      v87.CGSize size = size;
      double v31 = rect[0] + CGRectGetMinX(v87);
      v88.CGPoint origin = origin;
      v88.CGSize size = size;
      double v32 = v14 + CGRectGetMinY(v88);
      sub_1B07BBD78((uint64_t)&v56, (uint64_t)&rect[1]);
      sub_1B07BBD78((uint64_t)&rect[1], (uint64_t)&v62);
      *((void *)&v64 + 1) = floor(v31);
      *(void *)&long long v65 = floor(v32);
      *((void *)&v65 + 1) = ceil(v51);
      *(void *)&long long v66 = ceil(v53);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&rect[1]);
      long long v33 = v62;
      long long v34 = v63;
      long long v35 = v64;
      long long v36 = v65;
      uint64_t v37 = v66;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v56);
      if (!*((void *)&v34 + 1)) {
        break;
      }
      long long v62 = v33;
      long long v63 = v34;
      long long v64 = v35;
      long long v65 = v36;
      *(void *)&long long v66 = v37;
      *((void *)&v66 + 1) = floor(v14 + v28);
      *(void *)&long long v67 = floor(v49 + v30);
      sub_1B07BBD78((uint64_t)&v62, (uint64_t)v57);
      uint64_t v38 = v58;
      uint64_t v39 = v59;
      __swift_project_boxed_opaque_existential_1(v57, v58);
      double x = *((double *)&v64 + 1);
      double width = *((double *)&v65 + 1);
      double y = *(double *)&v65;
      double height = *(double *)&v66;
      if (objc_msgSend(v12, sel_layoutDirection) == (id)1)
      {
        CGAffineTransformMakeScale(&v56, -1.0, 1.0);
        long long v52 = *(_OWORD *)&v56.c;
        long long v54 = *(_OWORD *)&v56.a;
        CGFloat v50 = v56.tx;
        CGFloat ty = v56.ty;
        rect[0] = x;
        double MinX = CGRectGetMinX(*(CGRect *)v47);
        CGFloat MaxX = CGRectGetMaxX(*(CGRect *)v47);
        *(_OWORD *)&v56.a = v54;
        *(_OWORD *)&v56.c = v52;
        v56.CGFloat tx = v50;
        v56.CGFloat ty = ty;
        CGAffineTransformTranslate((CGAffineTransform *)&rect[1], &v56, -(MinX + MaxX), 0.0);
        CGAffineTransform v56 = *(CGAffineTransform *)&rect[1];
        v89.origin.double x = rect[0];
        v89.origin.double y = y;
        v89.size.double width = width;
        v89.size.double height = height;
        CGRect v90 = CGRectApplyAffineTransform(v89, &v56);
        double x = v90.origin.x;
        double y = v90.origin.y;
        double width = v90.size.width;
        double height = v90.size.height;
      }
      (*(void (**)(id, uint64_t, uint64_t, double, double, double, double))(v39 + 16))(v12, v38, v39, x, y, width, height);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v57);
      sub_1B07BD394((uint64_t)&v62);
      sub_1B07BA914((uint64_t)&v61[168], (uint64_t)&v62);
      if (!*((void *)&v63 + 1)) {
        goto LABEL_12;
      }
    }
  }
  else
  {
LABEL_12:
    sub_1B07B9AF8((uint64_t)&v62);
  }
  sub_1B07C09AC((uint64_t)&v60);
  return sub_1B07C09AC((uint64_t)&v72);
}

double sub_1B07C07F8(void *a1, CGFloat a2, CGFloat a3)
{
  v15.origin.double x = 0.0;
  v15.origin.double y = 0.0;
  v15.size.double width = a2;
  v15.size.double height = a3;
  if (CGRectGetWidth(v15) == 1.79769313e308) {
    a2 = 0.0;
  }
  v16.origin.double x = 0.0;
  v16.origin.double y = 0.0;
  v16.size.double width = a2;
  v16.size.double height = a3;
  if (CGRectGetHeight(v16) == 1.79769313e308) {
    a3 = 0.0;
  }
  sub_1B07C0A4C((_OWORD *)(v3 + 40), v13);
  sub_1B07BBD78(v3, (uint64_t)v12);
  memset(&v11[168], 0, 40);
  *(CGFloat *)&long long v10 = a2;
  *((CGFloat *)&v10 + 1) = a3;
  *(void *)char v11 = a1;
  *(_OWORD *)&v11[104] = v13[6];
  *(_OWORD *)&v11[120] = v13[7];
  *(_OWORD *)&v11[136] = v13[8];
  *(_OWORD *)&v11[152] = v13[9];
  *(_OWORD *)&v11[40] = v13[2];
  *(_OWORD *)&v11[56] = v13[3];
  *(_OWORD *)&v11[72] = v13[4];
  *(_OWORD *)&v11[88] = v13[5];
  *(_OWORD *)&v11[8] = v13[0];
  *(_OWORD *)&v11[24] = v13[1];
  id v7 = a1;
  sub_1B07B9AF8((uint64_t)&v11[168]);
  sub_1B07BA8FC(v12, (uint64_t)&v11[168]);
  v14[12] = *(_OWORD *)&v11[160];
  v14[13] = *(_OWORD *)&v11[176];
  v14[14] = *(_OWORD *)&v11[192];
  v14[8] = *(_OWORD *)&v11[96];
  v14[9] = *(_OWORD *)&v11[112];
  v14[10] = *(_OWORD *)&v11[128];
  v14[11] = *(_OWORD *)&v11[144];
  v14[4] = *(_OWORD *)&v11[32];
  v14[5] = *(_OWORD *)&v11[48];
  v14[6] = *(_OWORD *)&v11[64];
  v14[7] = *(_OWORD *)&v11[80];
  v14[0] = 0uLL;
  v14[1] = v10;
  v14[2] = *(_OWORD *)v11;
  void v14[3] = *(_OWORD *)&v11[16];
  double v8 = Margins.Placements.measure.getter();
  sub_1B07C09AC((uint64_t)v14);
  return v8;
}

uint64_t sub_1B07C09AC(uint64_t a1)
{
  return a1;
}

uint64_t destroy for Margins.Placements(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  __swift_destroy_boxed_opaque_existential_1(a1 + 80);
  __swift_destroy_boxed_opaque_existential_1(a1 + 120);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1(a1 + 160);
  if (*(void *)(a1 + 224))
  {
    return __swift_destroy_boxed_opaque_existential_1(a1 + 200);
  }
  return result;
}

_OWORD *sub_1B07C0A4C(_OWORD *a1, _OWORD *a2)
{
  return a2;
}

_OWORD *initializeWithCopy for Margins.Insets(_OWORD *a1, _OWORD *a2)
{
  long long v4 = *(_OWORD *)((char *)a2 + 24);
  *(_OWORD *)((char *)a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  long long v5 = a2[4];
  a1[4] = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))((uint64_t)a1 + 40, (uint64_t)a2 + 40);
  long long v6 = *(_OWORD *)((char *)a2 + 104);
  *(_OWORD *)((char *)a1 + 104) = v6;
  (**(void (***)(uint64_t, uint64_t))(v6 - 8))((uint64_t)(a1 + 5), (uint64_t)(a2 + 5));
  long long v7 = a2[9];
  a1[9] = v7;
  (**(void (***)(uint64_t, uint64_t))(v7 - 8))((uint64_t)a1 + 120, (uint64_t)a2 + 120);
  return a1;
}

double Margins.Placements.measure.getter()
{
  sub_1B07C0D04(v0, (uint64_t)v18);
  Margins.Placements.next()((uint64_t)&v12);
  if (*((void *)&v13 + 1))
  {
    long long v8 = v14;
    long long v9 = v15;
    long long v10 = v16;
    uint64_t v11 = v17;
    v7[0] = v12;
    v7[1] = v13;
    sub_1B07C1158(*(void **)(v0 + 32));
    double v2 = v1;
    double v4 = v3;
    v19.origin.double x = *((CGFloat *)&v8 + 1);
    *(_OWORD *)&v19.origin.double y = v9;
    *(void *)&v19.size.double height = v10;
    double v5 = v4 + v2 + CGRectGetWidth(v19);
    v20.origin.double x = *((CGFloat *)&v8 + 1);
    *(_OWORD *)&v20.origin.double y = v9;
    *(void *)&v20.size.double height = v10;
    CGRectGetHeight(v20);
    sub_1B07BD394((uint64_t)v7);
    sub_1B07C09AC((uint64_t)v18);
  }
  else
  {
    sub_1B07C09AC((uint64_t)v18);
    return 0.0;
  }
  return v5;
}

uint64_t sub_1B07C0D04(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for Margins.Placements(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  double v5 = *(void **)(a2 + 32);
  *(void *)(a1 + 32) = v5;
  uint64_t v6 = a1 + 40;
  uint64_t v7 = a2 + 40;
  long long v8 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v8;
  uint64_t v9 = v8;
  long long v10 = **(void (***)(uint64_t, uint64_t, uint64_t))(v8 - 8);
  id v11 = v5;
  v10(v6, v7, v9);
  long long v12 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 104) = v12;
  (**(void (***)(uint64_t, uint64_t))(v12 - 8))(a1 + 80, a2 + 80);
  long long v13 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 144) = v13;
  (**(void (***)(uint64_t, uint64_t))(v13 - 8))(a1 + 120, a2 + 120);
  long long v14 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 184) = v14;
  (**(void (***)(uint64_t, uint64_t))(v14 - 8))(a1 + 160, a2 + 160);
  long long v15 = (_OWORD *)(a1 + 200);
  long long v16 = (_OWORD *)(a2 + 200);
  uint64_t v17 = *(void *)(a2 + 224);
  if (v17)
  {
    uint64_t v18 = *(void *)(a2 + 232);
    *(void *)(a1 + 224) = v17;
    *(void *)(a1 + 232) = v18;
    (**(void (***)(_OWORD *, _OWORD *))(v17 - 8))(v15, v16);
  }
  else
  {
    long long v19 = *(_OWORD *)(a2 + 216);
    *long long v15 = *v16;
    *(_OWORD *)(a1 + 216) = v19;
    *(void *)(a1 + 232) = *(void *)(a2 + 232);
  }
  return a1;
}

uint64_t Margins.Placements.next()@<X0>(uint64_t a1@<X8>)
{
  sub_1B07BA914(v1 + 200, (uint64_t)&v36);
  if (*((void *)&v37 + 1))
  {
    sub_1B07BA8FC(&v36, (uint64_t)v43);
    sub_1B07BBE14(v1 + 200, &qword_1EB595778);
    *(_OWORD *)(v1 + 200) = 0u;
    *(_OWORD *)(v1 + 216) = 0u;
    *(void *)(v1 + 232) = 0;
    double v3 = *(void **)(v1 + 32);
    double v4 = sub_1B07C1158(v3);
    double v6 = v5;
    double v34 = v5;
    double v35 = v7;
    double v8 = v7;
    double v10 = v9;
    CGFloat v11 = *(double *)v1;
    CGFloat v12 = *(double *)(v1 + 8);
    CGFloat v13 = *(double *)(v1 + 16);
    CGFloat v14 = *(double *)(v1 + 24);
    v46.origin.double x = *(CGFloat *)v1;
    v46.origin.double y = v12;
    v46.size.double width = v13;
    v46.size.double height = v14;
    double v15 = CGRectGetWidth(v46) - (v6 + v10);
    v47.origin.double x = v11;
    v47.origin.double y = v12;
    v47.size.double width = v13;
    v47.size.double height = v14;
    double v16 = CGRectGetHeight(v47) - (v4 + v8);
    if (v15 < 0.0) {
      double v17 = 0.0;
    }
    else {
      double v17 = v15;
    }
    if (v16 < 0.0) {
      double v18 = 0.0;
    }
    else {
      double v18 = v16;
    }
    uint64_t v19 = v44;
    uint64_t v20 = v45;
    __swift_project_boxed_opaque_existential_1(v43, v44);
    double v21 = (*(double (**)(void *, uint64_t, uint64_t, double, double))(v20 + 8))(v3, v19, v20, v17, v18);
    double v32 = v22;
    double v33 = v21;
    double v24 = v23;
    double v26 = v25;
    v48.origin.double x = v11;
    v48.origin.double y = v12;
    v48.size.double width = v13;
    v48.size.double height = v14;
    double v27 = v34 + CGRectGetMinX(v48);
    v49.origin.double x = v11;
    v49.origin.double y = v12;
    v49.size.double width = v13;
    v49.size.double height = v14;
    double v28 = v4 + CGRectGetMinY(v49);
    sub_1B07BBD78((uint64_t)v43, (uint64_t)v42);
    sub_1B07BBD78((uint64_t)v42, (uint64_t)&v36);
    *((void *)&v38 + 1) = floor(v27);
    *(void *)&long long v39 = floor(v28);
    *((void *)&v39 + 1) = ceil(v33);
    *(void *)&long long v40 = ceil(v32);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v42);
    *((void *)&v40 + 1) = floor(v4 + v24);
    double v41 = floor(v35 + v26);
    long long v29 = v39;
    *(_OWORD *)(a1 + 32) = v38;
    *(_OWORD *)(a1 + 48) = v29;
    long long v30 = v37;
    *(_OWORD *)a1 = v36;
    *(_OWORD *)(a1 + 16) = v30;
    *(_OWORD *)(a1 + 64) = v40;
    *(double *)(a1 + 80) = v41;
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
  }
  else
  {
    uint64_t result = sub_1B07BBE14((uint64_t)&v36, &qword_1EB595778);
    *(void *)(a1 + 80) = 0;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
  }
  return result;
}

double sub_1B07C1158(void *a1)
{
  double v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(qword_1EB596010);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B086C120;
  *(void *)(v4 + 32) = a1;
  uint64_t v28 = v4;
  sub_1B0869F98();
  sub_1B07BCC68();
  id v5 = a1;
  double v6 = (void *)sub_1B0869F78();
  swift_bridgeObjectRelease();
  id v7 = objc_msgSend(self, sel_traitCollectionWithTraitsFromCollections_, v6);

  double v8 = (objc_class *)type metadata accessor for TraitEnvironmentPlaceholder();
  double v9 = (char *)objc_allocWithZone(v8);
  *(void *)&v9[OBJC_IVAR____TtC5JetUI27TraitEnvironmentPlaceholder_traitCollection] = v7;
  v27.receiver = v9;
  v27.super_class = v8;
  id v10 = objc_msgSendSuper2(&v27, sel_init);
  uint64_t v11 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v2[3]);
  CGFloat v12 = *(double (**)(void))(v11 + 8);
  id v13 = v10;
  double v14 = v12();

  uint64_t v15 = v2[9];
  __swift_project_boxed_opaque_existential_1(v2 + 5, v2[8]);
  double v16 = *(void (**)(void))(v15 + 8);
  id v17 = v13;
  v16();

  uint64_t v18 = v2[14];
  __swift_project_boxed_opaque_existential_1(v2 + 10, v2[13]);
  uint64_t v19 = *(void (**)(void))(v18 + 8);
  id v20 = v17;
  v19();

  double v21 = v2 + 15;
  uint64_t v23 = v2[18];
  uint64_t v22 = v2[19];
  __swift_project_boxed_opaque_existential_1(v21, v23);
  double v24 = *(void (**)(void))(v22 + 8);
  id v25 = v20;
  v24();

  return v14;
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t *__swift_allocate_boxed_opaque_existential_0(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

ValueMetadata *type metadata accessor for StaticDimension()
{
  return &type metadata for StaticDimension;
}

uint64_t sub_1B07C15C4(uint64_t result, unsigned int a2)
{
  if (a2 > 1)
  {
    *(void *)(result + 32) = 0;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)uint64_t result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 40) = a2;
  return result;
}

ValueMetadata *type metadata accessor for AspectRatio()
{
  return &type metadata for AspectRatio;
}

uint64_t sub_1B07C1604(uint64_t result, char a2)
{
  *(unsigned char *)(result + 40) = *(unsigned char *)(result + 40) & 3 | (a2 << 7);
  return result;
}

ValueMetadata *type metadata accessor for VerticalStack()
{
  return &type metadata for VerticalStack;
}

uint64_t dispatch thunk of Measurable.measurements(fitting:in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t getEnumTagSinglePayload for AspectRatio(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t dispatch thunk of LayoutView.hasContent.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of LayoutView.isHidden.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t sub_1B07C1694(uint64_t result)
{
  *(unsigned char *)(result + 40) &= ~0x80u;
  return result;
}

uint64_t sub_1B07C16A4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 40) >> 7;
}

__C::CGRect __swiftcall CGRect.subtracting(insets:)(UIEdgeInsets insets)
{
  CGFloat v5 = insets.top + v2;
  double v6 = v3 - (insets.left + insets.right);
  double v7 = v4 - (insets.top + insets.bottom);
  double v8 = insets.left + v1;
  double v9 = v5;
  double v10 = v6;
  result.size.double height = v7;
  result.size.double width = v10;
  result.origin.double y = v9;
  result.origin.double x = v8;
  return result;
}

ValueMetadata *type metadata accessor for Resize.Rule()
{
  return &type metadata for Resize.Rule;
}

id sub_1B07C16E8(uint64_t a1)
{
  return objc_msgSend(*v1, sel_setNumberOfLines_, a1);
}

uint64_t dispatch thunk of LayoutTextView.numberOfLines.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

ValueMetadata *type metadata accessor for Resize()
{
  return &type metadata for Resize;
}

uint64_t VerticalStack.Properties.alignment.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 80) = result;
  return result;
}

ValueMetadata *type metadata accessor for LabelPlaceholder()
{
  return &type metadata for LabelPlaceholder;
}

uint64_t dispatch thunk of Placeable.place(at:with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of LayoutView.frame.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

ValueMetadata *type metadata accessor for HorizontalStack()
{
  return &type metadata for HorizontalStack;
}

void destroy for TextMeasurable(id *a1)
{
}

id sub_1B07C177C(uint64_t a1)
{
  return objc_msgSend(*v1, sel_setLineBreakMode_, a1);
}

uint64_t dispatch thunk of LayoutTextView.lineBreakMode.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of LayoutTextView.isTextExtraTall.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 88))();
}

id sub_1B07C17B8(char a1)
{
  return objc_msgSend(*v1, sel_setHidden_, a1 & 1);
}

uint64_t dispatch thunk of LayoutView.isHidden.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t VerticalStack.Properties.shouldSkip.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 96) = result;
  return result;
}

uint64_t dispatch thunk of Placeable.measure(toFit:with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

ValueMetadata *type metadata accessor for TextMeasurable()
{
  return &type metadata for TextMeasurable;
}

CGSize __swiftcall CGSize.subtracting(insets:)(UIEdgeInsets insets)
{
  double v3 = v1 - (insets.left + insets.right);
  double v4 = v2 - (insets.top + insets.bottom);
  double v5 = v3;
  result.double height = v4;
  result.double width = v5;
  return result;
}

uint64_t HorizontalStack.Properties.alignment.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 80) = result;
  return result;
}

uint64_t sub_1B07C1838(uint64_t result, char a2)
{
  *(unsigned char *)(result + 40) = a2;
  return result;
}

uint64_t storeEnumTagSinglePayload for AspectRatio(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)CGSize result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for LabelPlaceholder(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 112)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t dispatch thunk of LayoutTextView.font.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

ValueMetadata *type metadata accessor for Center()
{
  return &type metadata for Center;
}

uint64_t static Center.Axis.vertical.getter()
{
  return 2;
}

uint64_t static VerticalStack.Edge.top.getter()
{
  return 1;
}

uint64_t VerticalStack.Properties.edgesAlignedToBaseline.setter(uint64_t result)
{
  *(void *)(v1 + 88) = result;
  return result;
}

double AspectRatio.height(fromWidth:)(double a1)
{
  double v2 = 0.0;
  if (*v1 != 0.0) {
    double v2 = v1[1] / *v1;
  }
  return v2 * a1;
}

ValueMetadata *type metadata accessor for ZeroDimension()
{
  return &type metadata for ZeroDimension;
}

uint64_t sub_1B07C1920()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 16))();
}

double sub_1B07C194C()
{
  return *(double *)(v0 + 16);
}

ValueMetadata *type metadata accessor for Margins()
{
  return &type metadata for Margins;
}

uint64_t storeEnumTagSinglePayload for LabelPlaceholder(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)CGSize result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 112) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 112) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t dispatch thunk of LayoutView.frame.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

double LayoutRect.origin.getter()
{
  return *(double *)v0;
}

Swift::Void __swiftcall CGSize.add(outsets:)(UIEdgeInsets outsets)
{
  CGFloat v2 = outsets.top + outsets.bottom + v1[1];
  *uint64_t v1 = outsets.left + outsets.right + *v1;
  v1[1] = v2;
}

__C::CGRect __swiftcall CGRect.withLayoutDirection(_:relativeTo:)(UITraitEnvironmentLayoutDirection _, __C::CGRect relativeTo)
{
  CGFloat v6 = v4;
  CGFloat v7 = v3;
  CGFloat v8 = v2;
  if (_ == UITraitEnvironmentLayoutDirectionRightToLeft)
  {
    CGFloat height = relativeTo.size.height;
    CGFloat width = relativeTo.size.width;
    CGFloat y = relativeTo.origin.y;
    CGFloat x = relativeTo.origin.x;
    CGFloat rect = v5;
    CGAffineTransformMakeScale(&v25, -1.0, 1.0);
    long long v21 = *(_OWORD *)&v25.c;
    long long v22 = *(_OWORD *)&v25.a;
    CGFloat ty = v25.ty;
    CGFloat tx = v25.tx;
    v26.origin.CGFloat x = x;
    v26.origin.CGFloat y = y;
    v26.size.CGFloat width = width;
    v26.size.CGFloat height = height;
    double MinX = CGRectGetMinX(v26);
    v27.origin.CGFloat x = x;
    v27.origin.CGFloat y = y;
    v27.size.CGFloat width = width;
    v27.size.CGFloat height = height;
    CGFloat MaxX = CGRectGetMaxX(v27);
    *(_OWORD *)&v25.a = v22;
    *(_OWORD *)&v25.c = v21;
    v25.CGFloat tx = tx;
    v25.CGFloat ty = ty;
    CGAffineTransformTranslate(&v24, &v25, -(MinX + MaxX), 0.0);
    CGAffineTransform v25 = v24;
    v28.origin.CGFloat x = v8;
    v28.origin.CGFloat y = v7;
    v28.size.CGFloat width = v6;
    v28.size.CGFloat height = rect;
    CGRect v29 = CGRectApplyAffineTransform(v28, &v25);
    CGFloat v8 = v29.origin.x;
    CGFloat v7 = v29.origin.y;
    CGFloat v6 = v29.size.width;
    CGFloat v5 = v29.size.height;
  }
  double v15 = v8;
  double v16 = v7;
  double v17 = v6;
  double v18 = v5;
  result.size.CGFloat height = v18;
  result.size.CGFloat width = v17;
  result.origin.CGFloat y = v16;
  result.origin.CGFloat x = v15;
  return result;
}

void type metadata accessor for TraitKey(uint64_t a1)
{
}

ValueMetadata *type metadata accessor for Pin.Edge()
{
  return &type metadata for Pin.Edge;
}

ValueMetadata *type metadata accessor for VerticalMarginsMeasurable()
{
  return &type metadata for VerticalMarginsMeasurable;
}

ValueMetadata *type metadata accessor for TextAppearance()
{
  return &type metadata for TextAppearance;
}

void AspectRatio.init(_:_:)(double *a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  *a1 = a2;
  a1[1] = a3;
}

double AspectRatio.width(fromHeight:)(double a1)
{
  double v2 = v1[1];
  double v3 = *v1 / v2;
  if (v2 == 0.0) {
    double v3 = 0.0;
  }
  return v3 * a1;
}

uint64_t type metadata accessor for StackChild()
{
  return __swift_instantiateGenericMetadata();
}

double LayoutRect.size.getter()
{
  return *(double *)(v0 + 16);
}

uint64_t sub_1B07C1BC8(uint64_t a1, uint64_t a2)
{
  return sub_1B07B2A60(a1, a2, MEMORY[0x1E4F27EB8]);
}

uint64_t sub_1B07C1BE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 16);
}

__n128 LabelPlaceholder.init(_:with:where:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5 = *a3;
  *(void *)a5 = a1;
  *(void *)(a5 + 8) = a2;
  *(unsigned char *)(a5 + 16) = 0;
  *(void *)(a5 + 24) = v5;
  __n128 result = *(__n128 *)(a3 + 1);
  long long v7 = *(_OWORD *)(a3 + 3);
  *(__n128 *)(a5 + 32) = result;
  *(_OWORD *)(a5 + 48) = v7;
  *(unsigned char *)(a5 + 96) = 0;
  *(void *)(a5 + 104) = a4;
  return result;
}

ValueMetadata *type metadata accessor for HorizontalStack.Properties()
{
  return &type metadata for HorizontalStack.Properties;
}

id TextAppearance.withFont(_:)@<X0>(id a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = a1;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(v2 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(v2 + 24);
  return a1;
}

id TextAppearance.withNumberOfLines(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v3 = *(void **)v2;
  uint64_t v4 = *(void *)(v2 + 32);
  *(void *)a2 = *(void *)v2;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(v2 + 8);
  *(void *)(a2 + 24) = a1;
  *(void *)(a2 + 32) = v4;
  return v3;
}

id TextAppearance.withLineBreakMode(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v3 = *(void **)v2;
  uint64_t v4 = *(void *)(v2 + 8);
  *(void *)a2 = *(void *)v2;
  *(void *)(a2 + 8) = v4;
  *(void *)(a2 + 16) = a1;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(v2 + 24);
  return v3;
}

ValueMetadata *type metadata accessor for VerticalStack.Properties()
{
  return &type metadata for VerticalStack.Properties;
}

uint64_t dispatch thunk of AnyDimension.rawValue(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t type metadata accessor for MutableBox()
{
  return __swift_instantiateGenericMetadata();
}

ValueMetadata *type metadata accessor for LayoutRect()
{
  return &type metadata for LayoutRect;
}

void _s5JetUI10LayoutRectV6origin12measurementsACSo7CGPointV_So14JUMeasurementsVtcfC_0(double *a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>, double a6@<D4>, double a7@<D5>)
{
  *a1 = a2;
  a1[1] = a3;
  a1[2] = a4;
  a1[3] = a5;
  a1[4] = a6;
  a1[5] = a7;
}

__n128 __swift_memcpy96_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

__n128 __swift_memcpy41_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

__n128 __swift_memcpy112_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v5;
  return result;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_5(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_6(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_7(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_9(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_10(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

double sub_1B07C1E50(void *a1)
{
  objc_msgSend(a1, sel__contentInsetsFromFonts);
  return fabs(v1);
}

id sub_1B07C1E80()
{
  return objc_msgSend(*v0, sel_jet_languageAwareOutsets);
}

CGSize __swiftcall CGSize.adding(outsets:)(UIEdgeInsets outsets)
{
  CGFloat v3 = outsets.left + outsets.right + v1;
  double v4 = outsets.top + outsets.bottom + v2;
  double v5 = v3;
  result.CGFloat height = v4;
  result.CGFloat width = v5;
  return result;
}

uint64_t sub_1B07C1EA8()
{
  return sub_1B07B28A4(&qword_1EB596560, type metadata accessor for AttributeName);
}

uint64_t sub_1B07C1EF0()
{
  return sub_1B07B28A4(&qword_1EB595D48, type metadata accessor for FeatureKey);
}

void type metadata accessor for FeatureKey(uint64_t a1)
{
}

uint64_t sub_1B07C1F4C()
{
  return sub_1B07B28A4((unint64_t *)&unk_1EB595FB0, type metadata accessor for Key);
}

uint64_t destroy for Separator(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1 + 24);
}

ValueMetadata *type metadata accessor for Separator()
{
  return &type metadata for Separator;
}

uint64_t Separator.init(position:leadingInset:trailingInset:verticalOutset:)@<X0>(unsigned char *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  *(unsigned char *)a3 = *a1;
  *(double *)(a3 + 8) = a4;
  *(double *)(a3 + 16) = a5;
  return sub_1B07BA8FC(a2, a3 + 24);
}

ValueMetadata *type metadata accessor for Separator.Position()
{
  return &type metadata for Separator.Position;
}

ValueMetadata *type metadata accessor for Baselines()
{
  return &type metadata for Baselines;
}

void Baselines.init(first:last:)(double *a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  *a1 = a2;
  a1[1] = a3;
}

double Baselines.first.getter()
{
  return *(double *)v0;
}

unsigned char *sub_1B07C2030(unsigned char *result, char a2)
{
  *CGSize result = a2 & 1;
  return result;
}

uint64_t sub_1B07C2040()
{
  uint64_t v1 = *v0 + 16;
  swift_beginAccess();
  sub_1B07BBD78(v1, (uint64_t)v5);
  uint64_t v2 = v6;
  uint64_t v3 = v7;
  __swift_project_boxed_opaque_existential_1(v5, v6);
  LOBYTE(v2) = (*(uint64_t (**)(uint64_t))(*(void *)(v3 + 8) + 64))(v2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  return v2 & 1;
}

ValueMetadata *type metadata accessor for VerticalMarginsMeasurable.Storage()
{
  return &type metadata for VerticalMarginsMeasurable.Storage;
}

uint64_t type metadata accessor for JULoadingViewController(uint64_t a1)
{
  return sub_1B07B57FC(a1, (uint64_t *)&unk_1EB595EC0);
}

uint64_t sub_1B07C20FC(uint64_t a1, uint64_t *a2, unsigned int *a3)
{
  uint64_t v5 = type metadata accessor for JULoadingViewController.PresentationContext(0);
  __swift_allocate_value_buffer(v5, a2);
  uint64_t v6 = __swift_project_value_buffer(v5, (uint64_t)a2);
  uint64_t v7 = *a3;
  uint64_t v8 = sub_1B08692D8();
  double v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 104);

  return v9(v6, v7, v8);
}

uint64_t sub_1B07C2198(uint64_t a1)
{
  return sub_1B07C20FC(a1, qword_1EB595F30, MEMORY[0x1E4FB7E28]);
}

uint64_t static JULoadingViewController.PresentationContext.placeholder.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1B07B33DC(&qword_1EB595EB0, (uint64_t)qword_1EB595F30, a1);
}

ValueMetadata *type metadata accessor for DisjointStack()
{
  return &type metadata for DisjointStack;
}

unint64_t sub_1B07C21E4()
{
  unint64_t result = qword_1EB595828[0];
  if (!qword_1EB595828[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1EB595828);
  }
  return result;
}

__n128 LayoutRect.baselines.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = v1[2];
  *a1 = result;
  return result;
}

__n128 LayoutRect.init(origin:size:baselines:)@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  a2->n128_f64[0] = a3;
  a2->n128_f64[1] = a4;
  a2[1].n128_f64[0] = a5;
  a2[1].n128_f64[1] = a6;
  __n128 result = *a1;
  a2[2] = *a1;
  return result;
}

uint64_t sub_1B07C2258()
{
  uint64_t v0 = sub_1B086A868();
  __swift_allocate_value_buffer(v0, qword_1EB5964D8);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EB5964D8);
  uint64_t v2 = *MEMORY[0x1E4FBBEA0];
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 104);

  return v3(v1, v2, v0);
}

ValueMetadata *type metadata accessor for JetUIBugCompatibility()
{
  return &type metadata for JetUIBugCompatibility;
}

uint64_t sub_1B07C22F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB595800);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B07C2358()
{
  uint64_t v0 = sub_1B07B4160((uint64_t)&unk_1F094C5E0);
  uint64_t result = swift_arrayDestroy();
  qword_1EB595640 = v0;
  return result;
}

uint64_t sub_1B07C23A4()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB595800);
  __swift_allocate_value_buffer(v0, qword_1EB5957E8);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EB5957E8);
  uint64_t v2 = sub_1B08691E8();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(v1, 1, 1, v2);
}

uint64_t sub_1B07C243C()
{
  return sub_1B07B28EC(*(void *)(v0 + 16));
}

uint64_t sub_1B07C2458()
{
  uint64_t v0 = sub_1B0869078();
  __swift_allocate_value_buffer(v0, qword_1EB596390);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EB596390);
  return sub_1B07B2AA4(v1);
}

id JetTraitsForScreen(uint64_t a1)
{
  return +[__JUObjCFunctions traitCollectionForScreen:a1];
}

id JetTraitsForView(uint64_t a1)
{
  return +[__JUObjCFunctions traitCollectionForView:a1];
}

id JetTraitsForWindow(uint64_t a1)
{
  return +[__JUObjCFunctions traitCollectionForWindow:a1];
}

void JUAddOverridesForSupportingLayoutDirectionOnUIView()
{
  if (sOverride_UIView_traitCollection != -1) {
    dispatch_once(&sOverride_UIView_traitCollection, &__block_literal_global);
  }
}

id swizzle_UIView_traitCollection(void *a1)
{
  v10[2] = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = sOriginal_UIView_traitCollection();
  uint64_t v3 = [v1 _juLayoutDirectionValue];
  if (v3
    && (uint64_t v4 = [v1 _juLayoutDirectionFromLayoutDirectionValue:v3],
        v4 != [v2 layoutDirection]))
  {
    uint64_t v6 = [MEMORY[0x1E4FB1E20] traitCollectionWithLayoutDirection:v4];
    v10[0] = v2;
    v10[1] = v6;
    uint64_t v7 = [MEMORY[0x1E4F1C978] arrayWithObjects:v10 count:2];
    id v5 = [MEMORY[0x1E4FB1E20] traitCollectionWithTraitsFromCollections:v7];
  }
  else
  {
    id v5 = v2;
  }
  id v8 = v5;

  return v8;
}

void JUNQMLParserStartDocument(void *a1)
{
  id v1 = a1;
  id v2 = [v1 delegate];
  [v2 parserDidStartDocument:v1];
}

void JUNQMLParserEndDocument(void *a1)
{
  id v1 = a1;
  id v2 = [v1 delegate];
  [v2 parserDidEndDocument:v1];
}

uint64_t JUNQMLParserStartElement(void *a1, const xmlChar *a2, xmlChar **a3)
{
  id v17 = a1;
  if (xmlStrEqual(a2, (const xmlChar *)"li"))
  {
    id v5 = [v17 delegate];
    [v5 parserDidStartListElement:v17];
  }
  else
  {
    uint64_t v19 = 0;
    if (TryListTypeFromName(a2, &v19))
    {
      id v5 = [v17 delegate];
      [v5 parser:v17 didStartListOfStyle:v19];
    }
    else
    {
      uint64_t v18 = 0;
      if (!TryTextElementFromName(a2, &v18, [v17 behavior])) {
        goto LABEL_14;
      }
      id v5 = [v17 delegate];
      uint64_t v6 = v18;
      if (a3)
      {
        id v7 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
        id v8 = *a3;
        if (*a3)
        {
          double v9 = a3 + 2;
          do
          {
            double v10 = *(v9 - 1);
            int v11 = xmlStrlen(v8);
            CGFloat v12 = NSStringFromXmlChar((__CFString *)v8, v11);
            int v13 = xmlStrlen(v10);
            double v14 = NSStringFromXmlChar((__CFString *)v10, v13);
            [v7 setObject:v14 forKeyedSubscript:v12];

            double v15 = *v9;
            v9 += 2;
            id v8 = v15;
          }
          while (v15);
        }
      }
      else
      {
        id v7 = (id)MEMORY[0x1E4F1CC08];
      }
      [v5 parser:v17 didStartElement:v6 attributes:v7];
    }
  }

LABEL_14:

  return MEMORY[0x1F41817F8]();
}

uint64_t JUNQMLParserEndElement(void *a1, const xmlChar *a2)
{
  id v5 = a1;
  if (xmlStrEqual(a2, (const xmlChar *)"br"))
  {
    uint64_t v3 = [v5 delegate];
    [v3 parserDidFindNewline:v5];
  }
  else if (xmlStrEqual(a2, (const xmlChar *)"li"))
  {
    uint64_t v3 = [v5 delegate];
    [v3 parserDidEndListElement:v5];
  }
  else
  {
    uint64_t v7 = 0;
    if (TryListTypeFromName(a2, &v7))
    {
      uint64_t v3 = [v5 delegate];
      [v3 parser:v5 didEndListOfStyle:v7];
    }
    else
    {
      uint64_t v6 = 0;
      if (!TryTextElementFromName(a2, &v6, [v5 behavior])) {
        goto LABEL_10;
      }
      uint64_t v3 = [v5 delegate];
      [v3 parser:v5 didEndElement:v6];
    }
  }

LABEL_10:

  return MEMORY[0x1F41817F8]();
}

void JUNQMLParserCharacters(void *a1, __CFString *a2, int a3)
{
  id v7 = a1;
  id v5 = NSStringFromXmlChar(a2, a3);
  if (v5)
  {
    uint64_t v6 = [v7 delegate];
    [v6 parser:v7 didFindCharacters:v5];
  }
}

void JUNQMLParserError(void *a1)
{
  id v3 = a1;
  xmlErrorPtr LastError = xmlCtxtGetLastError((void *)[v3 _parserContext]);
  if (LastError)
  {
    xmlErrorPtr v2 = LastError;
    [v3 reportParseError:LastError];
    if (v2->level == XML_ERR_FATAL) {
      xmlStopParser((xmlParserCtxtPtr)[v3 _parserContext]);
    }
  }
}

uint64_t TryListTypeFromName(const xmlChar *a1, uint64_t *a2)
{
  if (xmlStrEqual(a1, (const xmlChar *)"ol"))
  {
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t result = xmlStrEqual(a1, (const xmlChar *)"ul");
    if (!result) {
      return result;
    }
    uint64_t v4 = 1;
  }
  *a2 = v4;
  return 1;
}

uint64_t TryTextElementFromName(const xmlChar *a1, uint64_t *a2, uint64_t a3)
{
  if (xmlStrEqual(a1, (const xmlChar *)"em"))
  {
    uint64_t v6 = a3 != 1;
LABEL_6:
    *a2 = v6;
    return 1;
  }
  if (xmlStrEqual(a1, (const xmlChar *)"b") || xmlStrEqual(a1, (const xmlChar *)"strong"))
  {
    uint64_t v6 = 0;
    goto LABEL_6;
  }
  if (xmlStrEqual(a1, (const xmlChar *)"i"))
  {
    uint64_t v6 = 1;
    goto LABEL_6;
  }
  if (xmlStrEqual(a1, (const xmlChar *)"u"))
  {
    uint64_t v6 = 2;
    goto LABEL_6;
  }
  if (xmlStrEqual(a1, (const xmlChar *)"strike") || xmlStrEqual(a1, (const xmlChar *)"del"))
  {
    uint64_t v6 = 3;
    goto LABEL_6;
  }
  if (xmlStrEqual(a1, (const xmlChar *)"p") || (uint64_t result = xmlStrEqual(a1, (const xmlChar *)"div"), result))
  {
    uint64_t v6 = 4;
    goto LABEL_6;
  }
  return result;
}

__CFString *NSStringFromXmlChar(__CFString *a1, uint64_t a2)
{
  if (a1)
  {
    if (a2) {
      a1 = (__CFString *)[[NSString alloc] initWithBytes:a1 length:a2 encoding:4];
    }
    else {
      a1 = &stru_1F09547A0;
    }
    uint64_t v2 = vars8;
  }
  return a1;
}

CGFloat JURectWithFlippedOriginRelativeToBoundingRect(double a1, double a2, double a3, double a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  v16.origin.CGFloat x = a5;
  v16.origin.CGFloat y = a6;
  v16.size.CGFloat width = a7;
  v16.size.CGFloat height = a8;
  double v14 = a1 - CGRectGetMinX(v16);
  v17.origin.CGFloat x = a5;
  v17.origin.CGFloat y = a6;
  v17.size.CGFloat width = a7;
  v17.size.CGFloat height = a8;
  return CGRectGetMaxX(v17) - v14 - a3;
}

CGFloat JURectWithConditionalOriginRelativeToBoundingRect(int a1, double a2, double a3, double a4, double a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9)
{
  if (a1)
  {
    v17.origin.CGFloat x = a6;
    v17.origin.CGFloat y = a7;
    v17.size.CGFloat width = a8;
    v17.size.CGFloat height = a9;
    double v15 = a2 - CGRectGetMinX(v17);
    v18.origin.CGFloat x = a6;
    v18.origin.CGFloat y = a7;
    v18.size.CGFloat width = a8;
    v18.size.CGFloat height = a9;
    return CGRectGetMaxX(v18) - v15 - a4;
  }
  return a2;
}

CGFloat JURectMakeWithDirectionalOriginRelativeToBoundingRect(int a1, double a2, double a3, double a4, double a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9)
{
  if (a1)
  {
    v17.origin.CGFloat x = a6;
    v17.origin.CGFloat y = a7;
    v17.size.CGFloat width = a8;
    v17.size.CGFloat height = a9;
    double v15 = a2 - CGRectGetMinX(v17);
    v18.origin.CGFloat x = a6;
    v18.origin.CGFloat y = a7;
    v18.size.CGFloat width = a8;
    v18.size.CGFloat height = a9;
    return CGRectGetMaxX(v18) - v15 - a4;
  }
  return a2;
}

id JUPlaceableForButton(uint64_t a1)
{
  return +[__JUObjCFunctions placeableForButton:a1];
}

id JUPlaceableForImageView(uint64_t a1)
{
  return +[__JUObjCFunctions placeableForImageView:a1];
}

id JUPlaceableForLabel(uint64_t a1)
{
  return +[__JUObjCFunctions placeableForLabel:a1];
}

id JUContentUnavailableViewControllerMake(uint64_t a1, uint64_t a2)
{
  return +[__JUObjCFunctions makeContentUnavailableViewControllerWithError:a1 retryAction:a2];
}

id JULoadingViewControllerMake(uint64_t a1)
{
  return +[__JUObjCFunctions makeLoadingViewControllerWithLabel:a1];
}

float ForJetUIOnly_MainScreenScale()
{
  if (ForJetUIOnly_MainScreenScale_onceToken[0] != -1) {
    dispatch_once(ForJetUIOnly_MainScreenScale_onceToken, &__block_literal_global_0);
  }
  return *(double *)&ForJetUIOnly_MainScreenScale_scale;
}

uint64_t JUGetBidiClass(int a1)
{
  if (a1 == 65532) {
    return 14;
  }
  MEMORY[0x1B3E98ED0]();
  return 2;
}

BOOL JUMeasurementsEqual(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  return a1 == a5 && a2 == a6 && a3 == a7 && a4 == a8;
}

uint64_t sub_1B07C3BE8()
{
  uint64_t v0 = MEMORY[0x1E4FBC860];
  uint64_t v24 = MEMORY[0x1E4FBC860];
  id v1 = objc_msgSend(self, sel_sharedApplication);
  id v2 = objc_msgSend(v1, sel_connectedScenes);

  sub_1B07C7B80(0, (unint64_t *)&qword_1E9B3AA60);
  sub_1B07C7B10();
  uint64_t v3 = sub_1B086A158();

  sub_1B07C3F0C(v3, (uint64_t)&v23);
  sub_1B07C3FDC();
  if (v5)
  {
    uint64_t v6 = v4;
    id v7 = v5;
    for (id i = objc_msgSend(v5, sel_activationState, 1, 3); ; id i = objc_msgSend(v13, sel_activationState, v21))
    {
      if (!i)
      {
        self;
        uint64_t v16 = swift_dynamicCastObjCClass();
        if (v16)
        {
          CGRect v17 = (void *)v16;
          id v18 = v7;
          id v19 = objc_msgSend(v17, sel_keyWindow);
          if (v19)
          {
            double v9 = v19;
            __swift_instantiateConcreteTypeFromMangledName(qword_1EB596010);
            initeCGFloat d = swift_initStackObject();
            *(_OWORD *)(inited + 16) = v21;
            *(void *)(inited + 32) = v9;
            unint64_t v22 = inited;
            sub_1B0869F98();
            id v11 = v9;
            uint64_t v12 = sub_1B07C41DC(v22, v6, 0);
            swift_bridgeObjectRelease();
            sub_1B07D9BC0(v12);

            goto LABEL_4;
          }
        }
      }
      if (qword_1E9B3A6A0 != -1) {
        swift_once();
      }
      uint64_t v15 = sub_1B0869C18();
      __swift_project_value_buffer(v15, (uint64_t)qword_1E9B46108);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E9B3AA70);
      sub_1B08696C8();
      *(_OWORD *)(swift_allocObject() + 16) = xmmword_1B086C130;
      sub_1B0869618();
      sub_1B0869AD8();

      swift_bridgeObjectRelease();
LABEL_4:
      sub_1B07C3FDC();
      uint64_t v6 = v14;
      id v7 = v13;
      if (!v13)
      {
        uint64_t v0 = v24;
        break;
      }
    }
  }
  sub_1B07C7B78();
  return v0;
}

uint64_t sub_1B07C3F0C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  if ((result & 0xC000000000000001) != 0)
  {
    sub_1B086A4C8();
    sub_1B07C7B80(0, (unint64_t *)&qword_1E9B3AA60);
    sub_1B07C7B10();
    sub_1B086A1A8();
    uint64_t result = v10;
    uint64_t v3 = v11;
    long long v4 = v12;
    uint64_t v5 = v13;
  }
  else
  {
    uint64_t v6 = -1;
    uint64_t v7 = -1 << *(unsigned char *)(result + 32);
    uint64_t v8 = ~v7;
    uint64_t v3 = result + 56;
    uint64_t v9 = -v7;
    if (v9 < 64) {
      uint64_t v6 = ~(-1 << v9);
    }
    uint64_t v5 = v6 & *(void *)(result + 56);
    long long v4 = (unint64_t)v8;
  }
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v3;
  *(_OWORD *)(a2 + 16) = v4;
  *(void *)(a2 + 32) = v5;
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1B07C3FDC()
{
  id v1 = v0;
  if ((*v0 & 0x8000000000000000) != 0)
  {
    if (sub_1B086A518())
    {
      sub_1B07C7B80(0, (unint64_t *)&qword_1E9B3AA60);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      swift_unknownObjectRelease();
      if (v15) {
        goto LABEL_6;
      }
    }
    return;
  }
  int64_t v3 = v0[3];
  unint64_t v2 = v0[4];
  if (v2)
  {
    uint64_t v4 = (v2 - 1) & v2;
    unint64_t v5 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_4:
    uint64_t v6 = *(void **)(*(void *)(*v0 + 48) + 8 * v5);
    id v7 = v6;
    goto LABEL_5;
  }
  int64_t v9 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
LABEL_35:
    __break(1u);
    return;
  }
  int64_t v10 = (unint64_t)(v0[2] + 64) >> 6;
  if (v9 >= v10)
  {
    uint64_t v6 = 0;
    uint64_t v4 = 0;
    goto LABEL_5;
  }
  uint64_t v11 = v0[1];
  unint64_t v12 = *(void *)(v11 + 8 * v9);
  if (v12)
  {
LABEL_14:
    uint64_t v4 = (v12 - 1) & v12;
    unint64_t v5 = __clz(__rbit64(v12)) + (v9 << 6);
    int64_t v3 = v9;
    goto LABEL_4;
  }
  int64_t v13 = v3 + 2;
  if (v3 + 2 >= v10) {
    goto LABEL_31;
  }
  unint64_t v12 = *(void *)(v11 + 8 * v13);
  if (v12)
  {
LABEL_19:
    int64_t v9 = v13;
    goto LABEL_14;
  }
  if (v3 + 3 >= v10) {
    goto LABEL_32;
  }
  unint64_t v12 = *(void *)(v11 + 8 * (v3 + 3));
  if (v12)
  {
    int64_t v9 = v3 + 3;
    goto LABEL_14;
  }
  int64_t v13 = v3 + 4;
  if (v3 + 4 < v10)
  {
    unint64_t v12 = *(void *)(v11 + 8 * v13);
    if (v12) {
      goto LABEL_19;
    }
    int64_t v9 = v3 + 5;
    if (v3 + 5 < v10)
    {
      unint64_t v12 = *(void *)(v11 + 8 * v9);
      if (v12) {
        goto LABEL_14;
      }
      int64_t v9 = v10 - 1;
      int64_t v14 = v3 + 6;
      while (v10 != v14)
      {
        unint64_t v12 = *(void *)(v11 + 8 * v14++);
        if (v12)
        {
          int64_t v9 = v14 - 1;
          goto LABEL_14;
        }
      }
LABEL_31:
      uint64_t v6 = 0;
      uint64_t v4 = 0;
      int64_t v3 = v9;
      goto LABEL_5;
    }
LABEL_32:
    uint64_t v6 = 0;
    uint64_t v4 = 0;
    int64_t v3 = v13;
    goto LABEL_5;
  }
  uint64_t v6 = 0;
  uint64_t v4 = 0;
  v3 += 3;
LABEL_5:
  v1[3] = v3;
  v1[4] = v4;
  if (v6)
  {
LABEL_6:
    uint64_t v8 = v1[5];
    if (!__OFADD__(v8, 1))
    {
      v1[5] = v8 + 1;
      return;
    }
    __break(1u);
    goto LABEL_35;
  }
}

uint64_t sub_1B07C41DC(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = a1;
  if (a1 >> 62)
  {
LABEL_29:
    swift_bridgeObjectRetain();
    uint64_t v5 = sub_1B086A6E8();
    if (v5) {
      goto LABEL_3;
    }
LABEL_30:
    CGRect v60 = (char *)MEMORY[0x1E4FBC860];
LABEL_31:
    swift_bridgeObjectRelease();
    return (uint64_t)v60;
  }
  uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v5) {
    goto LABEL_30;
  }
LABEL_3:
  uint64_t result = self;
  id v57 = (id)result;
  if (v5 >= 1)
  {
    uint64_t v7 = 0;
    unint64_t v56 = v4 & 0xC000000000000001;
    uint64_t v52 = a3 + 1;
    BOOL v8 = __OFADD__(a3, 1);
    BOOL v53 = v8;
    int64_t v9 = &selRef_layoutDirection;
    CGRect v60 = (char *)MEMORY[0x1E4FBC860];
    uint64_t v54 = v5;
    unint64_t v55 = v4;
    while (1)
    {
      if (v56) {
        id v10 = (id)MEMORY[0x1B3E97F40](v7, v4);
      }
      else {
        id v10 = *(id *)(v4 + 8 * v7 + 32);
      }
      uint64_t v11 = v10;
      id v12 = objc_msgSend(v10, sel_superview);
      if (!v12) {
        id v12 = v11;
      }
      [v11 v9[108]];
      objc_msgSend(v12, sel_convertPoint_toView_, 0);
      CGFloat v14 = v13;
      CGFloat v16 = v15;

      id v17 = objc_msgSend(v57, sel_mainScreen);
      objc_msgSend(v17, sel_bounds);
      CGFloat v19 = v18;
      CGFloat v21 = v20;
      CGFloat v23 = v22;
      CGFloat v25 = v24;

      v62.origin.CGFloat x = v19;
      v62.origin.CGFloat y = v21;
      v62.size.CGFloat width = v23;
      v62.size.CGFloat height = v25;
      v61.CGFloat x = v14;
      v61.CGFloat y = v16;
      BOOL v26 = CGRectContainsPoint(v62, v61);
      uint64_t v27 = MEMORY[0x1E4FBC860];
      if (v26)
      {
        id v28 = objc_msgSend(v11, sel_subviews);
        sub_1B07C7B80(0, (unint64_t *)&unk_1E9B3AA80);
        a3 = sub_1B0869F88();

        if (v53)
        {
          __break(1u);
          goto LABEL_29;
        }
        uint64_t v27 = sub_1B07C41DC(a3, a2, v52);
        swift_bridgeObjectRelease();
      }
      id v29 = objc_msgSend(v11, sel_accessibilityIdentifier);
      if (v29)
      {
        long long v30 = v29;
        uint64_t v31 = sub_1B0869D98();
        unint64_t v59 = v32;
      }
      else
      {
        uint64_t v31 = 0x3E7974706D653C3CLL;
        unint64_t v59 = 0xE90000000000003ELL;
      }
      id v33 = objc_msgSend(v11, sel_accessibilityLabel);
      if (v33)
      {
        double v34 = v33;
        uint64_t v35 = v27;
        uint64_t v36 = sub_1B0869D98();
        unint64_t v38 = v37;
      }
      else
      {
        uint64_t v35 = v27;
        uint64_t v36 = 0x3E7974706D653C3CLL;
        unint64_t v38 = 0xE90000000000003ELL;
      }
      id v39 = objc_msgSend(v11, sel_accessibilityContainerType);
      [v11 v9[108]];
      uint64_t v41 = v40;
      uint64_t v43 = v42;
      uint64_t v45 = v44;
      uint64_t v47 = v46;
      id v48 = objc_msgSend(v11, sel_accessibilityTraits);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        CGRect v60 = sub_1B07CE974(0, *((void *)v60 + 2) + 1, 1, v60);
      }
      unint64_t v50 = *((void *)v60 + 2);
      unint64_t v49 = *((void *)v60 + 3);
      if (v50 >= v49 >> 1) {
        CGRect v60 = sub_1B07CE974((char *)(v49 > 1), v50 + 1, 1, v60);
      }
      ++v7;
      *((void *)v60 + 2) = v50 + 1;
      double v51 = &v60[96 * v50];
      *((void *)v51 + 4) = v31;
      *((void *)v51 + 5) = v59;
      *((void *)v51 + 6) = v36;
      *((void *)v51 + 7) = v38;
      *((void *)v51 + 8) = v39;
      *((void *)v51 + 9) = v35;
      *((void *)v51 + 10) = v41;
      *((void *)v51 + 11) = v43;
      *((void *)v51 + 12) = v47;
      *((void *)v51 + 13) = v45;
      *((void *)v51 + 14) = v48;
      *((void *)v51 + 15) = a2;

      unint64_t v4 = v55;
      int64_t v9 = &selRef_layoutDirection;
      if (v54 == v7) {
        goto LABEL_31;
      }
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1B07C45D4()
{
  uint64_t result = 120;
  switch(*v0)
  {
    case 1:
      uint64_t result = 121;
      break;
    case 2:
      uint64_t result = 0x746867696568;
      break;
    case 3:
      uint64_t result = 0x6874646977;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1B07C4640@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1B07C75D8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B07C4668()
{
  return 0;
}

void sub_1B07C4674(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_1B07C4680(uint64_t a1)
{
  unint64_t v2 = sub_1B07C4904();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B07C46BC(uint64_t a1)
{
  unint64_t v2 = sub_1B07C4904();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t DSAccessibilityDiagnosticInfo.Rect.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3A728);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v1;
  uint64_t v8 = v1[1];
  uint64_t v11 = v1[2];
  uint64_t v10 = v1[3];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B07C4904();
  sub_1B086A9E8();
  uint64_t v14 = v9;
  HIBYTE(v13) = 0;
  sub_1B07C4958();
  sub_1B086A828();
  if (!v2)
  {
    uint64_t v14 = v8;
    HIBYTE(v13) = 1;
    sub_1B086A828();
    uint64_t v14 = v11;
    HIBYTE(v13) = 2;
    sub_1B086A828();
    uint64_t v14 = v10;
    HIBYTE(v13) = 3;
    sub_1B086A828();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_1B07C4904()
{
  unint64_t result = qword_1E9B3A730;
  if (!qword_1E9B3A730)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3A730);
  }
  return result;
}

unint64_t sub_1B07C4958()
{
  unint64_t result = qword_1E9B3A738;
  if (!qword_1E9B3A738)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3A738);
  }
  return result;
}

uint64_t DSAccessibilityDiagnosticInfo.Rect.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3A740);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B07C4904();
  sub_1B086A9C8();
  if (!v2)
  {
    HIBYTE(v14) = 0;
    sub_1B07C4C08();
    sub_1B086A7C8();
    uint64_t v9 = v15;
    HIBYTE(v14) = 1;
    sub_1B086A7C8();
    uint64_t v10 = v15;
    HIBYTE(v14) = 2;
    sub_1B086A7C8();
    uint64_t v12 = v15;
    HIBYTE(v14) = 3;
    sub_1B086A7C8();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    uint64_t v13 = v15;
    *a2 = v9;
    a2[1] = v10;
    a2[2] = v12;
    a2[3] = v13;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

unint64_t sub_1B07C4C08()
{
  unint64_t result = qword_1E9B3A748;
  if (!qword_1E9B3A748)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3A748);
  }
  return result;
}

uint64_t sub_1B07C4C5C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return DSAccessibilityDiagnosticInfo.Rect.init(from:)(a1, a2);
}

uint64_t sub_1B07C4C74(void *a1)
{
  return DSAccessibilityDiagnosticInfo.Rect.encode(to:)(a1);
}

BOOL sub_1B07C4C8C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t _s5JetUI19VerticalStackLayoutV9AlignmentO9hashValueSivg_0()
{
  return sub_1B086A998();
}

uint64_t sub_1B07C4CE8()
{
  return sub_1B086A968();
}

uint64_t sub_1B07C4D14()
{
  return sub_1B086A998();
}

uint64_t sub_1B07C4D58()
{
  uint64_t result = 0x696669746E656469;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6C6562616CLL;
      break;
    case 2:
      uint64_t result = 0x54746E656D656C65;
      break;
    case 3:
      uint64_t result = 0x6E6572646C696863;
      break;
    case 4:
      uint64_t result = 1952671090;
      break;
    case 5:
      uint64_t result = 0x737469617274;
      break;
    case 6:
      uint64_t result = 0x6449776F646E6977;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1B07C4E3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1B07C7750(a1, a2);
  *a3 = result;
  return result;
}

void sub_1B07C4E64(unsigned char *a1@<X8>)
{
  *a1 = 7;
}

uint64_t sub_1B07C4E70(uint64_t a1)
{
  unint64_t v2 = sub_1B07C51C8();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B07C4EAC(uint64_t a1)
{
  unint64_t v2 = sub_1B07C51C8();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t DSAccessibilityDiagnosticInfo.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3A750);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = v1[2];
  uint64_t v20 = v1[3];
  uint64_t v21 = v7;
  uint64_t v8 = v1[4];
  uint64_t v18 = v1[5];
  uint64_t v19 = v8;
  uint64_t v9 = v1[6];
  uint64_t v10 = v1[7];
  uint64_t v11 = v1[8];
  uint64_t v12 = v1[9];
  uint64_t v13 = v1[10];
  v17[1] = v1[11];
  v17[2] = v13;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B07C51C8();
  sub_1B086A9E8();
  LOBYTE(v23) = 0;
  uint64_t v14 = v22;
  sub_1B086A7F8();
  if (!v14)
  {
    uint64_t v15 = v18;
    LOBYTE(v23) = 1;
    sub_1B086A7F8();
    LOBYTE(v23) = 2;
    sub_1B086A818();
    uint64_t v23 = v15;
    char v27 = 3;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3A760);
    sub_1B07C5738(&qword_1E9B3A768, (void (*)(void))sub_1B07C521C);
    sub_1B086A828();
    uint64_t v23 = v9;
    uint64_t v24 = v10;
    uint64_t v25 = v11;
    uint64_t v26 = v12;
    char v27 = 4;
    sub_1B07C5270();
    sub_1B086A828();
    LOBYTE(v23) = 5;
    sub_1B086A838();
    LOBYTE(v23) = 6;
    sub_1B086A818();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_1B07C51C8()
{
  unint64_t result = qword_1E9B3A758;
  if (!qword_1E9B3A758)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3A758);
  }
  return result;
}

unint64_t sub_1B07C521C()
{
  unint64_t result = qword_1E9B3A770;
  if (!qword_1E9B3A770)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3A770);
  }
  return result;
}

unint64_t sub_1B07C5270()
{
  unint64_t result = qword_1E9B3A778;
  if (!qword_1E9B3A778)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3A778);
  }
  return result;
}

uint64_t DSAccessibilityDiagnosticInfo.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3A780);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B07C51C8();
  sub_1B086A9C8();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  LOBYTE(v31) = 0;
  uint64_t v9 = sub_1B086A798();
  uint64_t v11 = v10;
  uint64_t v30 = v9;
  LOBYTE(v31) = 1;
  swift_bridgeObjectRetain();
  uint64_t v12 = sub_1B086A798();
  uint64_t v14 = v13;
  uint64_t v28 = v12;
  uint64_t v29 = v11;
  LOBYTE(v31) = 2;
  swift_bridgeObjectRetain();
  uint64_t v15 = v14;
  uint64_t v17 = sub_1B086A7B8();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3A760);
  char v35 = 3;
  sub_1B07C5738(&qword_1E9B3A788, (void (*)(void))sub_1B07C57A8);
  sub_1B086A7C8();
  uint64_t v18 = v31;
  char v35 = 4;
  sub_1B07C57FC();
  uint64_t v27 = v18;
  swift_bridgeObjectRetain();
  v26[1] = 0;
  sub_1B086A7C8();
  uint64_t v19 = v31;
  uint64_t v20 = v32;
  uint64_t v21 = v33;
  uint64_t v22 = v34;
  LOBYTE(v31) = 5;
  v26[0] = sub_1B086A7D8();
  LOBYTE(v31) = 6;
  uint64_t v23 = sub_1B086A7B8();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v24 = v29;
  *a2 = v30;
  a2[1] = v24;
  uint64_t v25 = v27;
  a2[2] = v28;
  a2[3] = v15;
  a2[4] = v17;
  a2[5] = v25;
  a2[6] = v19;
  a2[7] = v20;
  a2[8] = v21;
  a2[9] = v22;
  a2[10] = v26[0];
  a2[11] = v23;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B07C5738(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1E9B3A760);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1B07C57A8()
{
  unint64_t result = qword_1E9B3A790;
  if (!qword_1E9B3A790)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3A790);
  }
  return result;
}

unint64_t sub_1B07C57FC()
{
  unint64_t result = qword_1E9B3A798;
  if (!qword_1E9B3A798)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3A798);
  }
  return result;
}

uint64_t sub_1B07C5850@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return DSAccessibilityDiagnosticInfo.init(from:)(a1, a2);
}

uint64_t sub_1B07C5868(void *a1)
{
  return DSAccessibilityDiagnosticInfo.encode(to:)(a1);
}

uint64_t DSAccessibilityDiagnosticCollector.name.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t DSAccessibilityDiagnosticCollector.getDiagnosticInfo()()
{
  sub_1B0869008();
  swift_allocObject();
  sub_1B0868FF8();
  sub_1B07C3BE8();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3A760);
  sub_1B07C5738(&qword_1E9B3A768, (void (*)(void))sub_1B07C521C);
  uint64_t v0 = sub_1B0868FE8();
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t sub_1B07C59B0()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1B07C59E0()
{
  sub_1B0869008();
  swift_allocObject();
  sub_1B0868FF8();
  sub_1B07C3BE8();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3A760);
  sub_1B07C5738(&qword_1E9B3A768, (void (*)(void))sub_1B07C521C);
  uint64_t v1 = sub_1B0868FE8();
  if (v0)
  {

    swift_release();
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    uint64_t v2 = v1;
    swift_bridgeObjectRelease();
    swift_release();
  }
  return v2;
}

uint64_t destroy for DSAccessibilityDiagnosticInfo()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for DSAccessibilityDiagnosticInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  long long v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for DSAccessibilityDiagnosticInfo(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  a1[9] = a2[9];
  a1[10] = a2[10];
  a1[11] = a2[11];
  return a1;
}

uint64_t assignWithTake for DSAccessibilityDiagnosticInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  long long v7 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  return a1;
}

uint64_t getEnumTagSinglePayload for DSAccessibilityDiagnosticInfo(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 96)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DSAccessibilityDiagnosticInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 96) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 96) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DSAccessibilityDiagnosticInfo()
{
  return &type metadata for DSAccessibilityDiagnosticInfo;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for DSAccessibilityDiagnosticInfo.Rect(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for DSAccessibilityDiagnosticInfo.Rect(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 32) = v3;
  return result;
}

ValueMetadata *type metadata accessor for DSAccessibilityDiagnosticInfo.Rect()
{
  return &type metadata for DSAccessibilityDiagnosticInfo.Rect;
}

void *initializeBufferWithCopyOfBuffer for DSAccessibilityDiagnosticCollector(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for DSAccessibilityDiagnosticCollector()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for DSAccessibilityDiagnosticCollector(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for DSAccessibilityDiagnosticCollector(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DSAccessibilityDiagnosticCollector(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DSAccessibilityDiagnosticCollector(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DSAccessibilityDiagnosticCollector()
{
  return &type metadata for DSAccessibilityDiagnosticCollector;
}

void type metadata accessor for UIContentSizeCategory(uint64_t a1)
{
}

void type metadata accessor for Weight(uint64_t a1)
{
}

void type metadata accessor for SymbolicTraits(uint64_t a1)
{
}

void type metadata accessor for TextStyle(uint64_t a1)
{
}

void type metadata accessor for NSLineBreakMode(uint64_t a1)
{
}

void type metadata accessor for NSTextAlignment(uint64_t a1)
{
}

void type metadata accessor for ContentMode(uint64_t a1)
{
}

void type metadata accessor for CGRect(uint64_t a1)
{
}

void type metadata accessor for CGSize(uint64_t a1)
{
}

void type metadata accessor for CGPoint(uint64_t a1)
{
}

void type metadata accessor for Measurements(uint64_t a1)
{
}

void type metadata accessor for NSWritingDirection(uint64_t a1)
{
}

void type metadata accessor for UIEdgeInsets(uint64_t a1)
{
}

void type metadata accessor for _NSRange(uint64_t a1)
{
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  *__n128 result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for DSAccessibilityDiagnosticInfo.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFA) {
    goto LABEL_17;
  }
  if (a2 + 6 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 6) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 6;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v8 = v6 - 7;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for DSAccessibilityDiagnosticInfo.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *__n128 result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B07C6198);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 6;
        break;
    }
  }
  return result;
}

uint64_t sub_1B07C61C0(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_1B07C61C8(unsigned char *result, char a2)
{
  *__n128 result = a2;
  return result;
}

ValueMetadata *type metadata accessor for DSAccessibilityDiagnosticInfo.CodingKeys()
{
  return &type metadata for DSAccessibilityDiagnosticInfo.CodingKeys;
}

uint64_t getEnumTagSinglePayload for DSAccessibilityDiagnosticInfo.Rect.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for DSAccessibilityDiagnosticInfo.Rect.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *__n128 result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B07C633CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DSAccessibilityDiagnosticInfo.Rect.CodingKeys()
{
  return &type metadata for DSAccessibilityDiagnosticInfo.Rect.CodingKeys;
}

unint64_t sub_1B07C6378()
{
  unint64_t result = qword_1E9B3A998;
  if (!qword_1E9B3A998)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3A998);
  }
  return result;
}

unint64_t sub_1B07C63D0()
{
  unint64_t result = qword_1E9B3A9A0;
  if (!qword_1E9B3A9A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3A9A0);
  }
  return result;
}

uint64_t sub_1B07C6428@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = 0;
    uint64_t v5 = (uint64_t *)(a1 + 32);
    do
    {
      uint64_t v7 = *v5++;
      uint64_t v6 = v7;
      if ((v7 & ~v4) == 0) {
        uint64_t v6 = 0;
      }
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

void sub_1B07C6480(void *a1@<X8>)
{
  *a1 = 0;
}

void *sub_1B07C6488@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

void *sub_1B07C649C(void *result)
{
  *v1 |= *result;
  return result;
}

void *sub_1B07C64B0(void *result)
{
  *v1 &= *result;
  return result;
}

uint64_t sub_1B07C64D4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1B0869D98();
  *a1 = result;
  a1[1] = v3;
  return result;
}

BOOL sub_1B07C6500(void *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL sub_1B07C6514(void *a1)
{
  return (*a1 & ~*v1) == 0;
}

void sub_1B07C6528(void *a1@<X8>)
{
  *a1 = *v1;
}

BOOL sub_1B07C6534(void *a1, void *a2)
{
  return *a1 == *a2;
}

_DWORD *sub_1B07C6548@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1B07C6554(uint64_t a1, id *a2)
{
  uint64_t result = sub_1B0869D78();
  *a2 = 0;
  return result;
}

uint64_t sub_1B07C65CC@<X0>(uint64_t *a1@<X8>)
{
  sub_1B0869D98();
  uint64_t v2 = sub_1B0869D68();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

BOOL sub_1B07C6610(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

void sub_1B07C6640(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

_DWORD *sub_1B07C6648@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

_DWORD *sub_1B07C665C@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

_DWORD *sub_1B07C6670@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_1B07C6684(_DWORD *a1, int *a2)
{
  int v3 = *a2;
  int v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

_DWORD *sub_1B07C66B4@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  int v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(_DWORD *)a2 = v3;
  *(unsigned char *)(a2 + 4) = v3 == 0;
  return result;
}

int *sub_1B07C66E0@<X0>(int *result@<X0>, uint64_t a2@<X8>)
{
  int v3 = *result;
  int v4 = *v2;
  *v2 |= *result;
  int v5 = v4 & v3;
  *(_DWORD *)a2 = v5;
  *(unsigned char *)(a2 + 4) = v5 == 0;
  return result;
}

_DWORD *sub_1B07C6704(_DWORD *result)
{
  *v1 |= *result;
  return result;
}

_DWORD *sub_1B07C6718(_DWORD *result)
{
  *v1 &= *result;
  return result;
}

_DWORD *sub_1B07C672C(_DWORD *result)
{
  *v1 ^= *result;
  return result;
}

_DWORD *sub_1B07C6740@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_1B07C6754(_DWORD *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL sub_1B07C6768(_DWORD *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL sub_1B07C677C(_DWORD *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL sub_1B07C6790()
{
  return *v0 == 0;
}

uint64_t sub_1B07C67A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1F4184B08](a1, a4, a2, a5, a3);
}

_DWORD *sub_1B07C67B8(_DWORD *result)
{
  *v1 &= ~*result;
  return result;
}

uint64_t sub_1B07C67CC()
{
  return MEMORY[0x1F40E5F50](*v0);
}

uint64_t sub_1B07C67D4(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = 0;
  char v7 = 1;
  uint64_t result = MEMORY[0x1B3E96B80](a1, &v6);
  char v4 = v7;
  uint64_t v5 = v6;
  if (v7) {
    uint64_t v5 = 0;
  }
  *(void *)a2 = v5;
  *(unsigned char *)(a2 + 8) = v4;
  return result;
}

uint64_t sub_1B07C6828(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = 0;
  char v8 = 1;
  char v3 = MEMORY[0x1B3E96B90](a1, &v7);
  char v4 = v8;
  uint64_t v5 = v7;
  if (v8) {
    uint64_t v5 = 0;
  }
  *(void *)a2 = v5;
  *(unsigned char *)(a2 + 8) = v4;
  return v3 & 1;
}

void sub_1B07C6880(double *a1@<X8>)
{
  *a1 = MEMORY[0x1B3E96BA0]();
}

uint64_t sub_1B07C68A8()
{
  return sub_1B086A148();
}

uint64_t sub_1B07C68B0()
{
  return sub_1B086A988();
}

uint64_t sub_1B07C68E4(uint64_t a1)
{
  if ((*v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    uint64_t v2 = *v1;
  }
  else {
    uint64_t v2 = 0;
  }
  return MEMORY[0x1F4185EA8](a1, v2);
}

_DWORD *sub_1B07C68F4@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(unsigned char *)(a2 + 4) = 0;
  return result;
}

void sub_1B07C6904(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

void *sub_1B07C6910@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

double sub_1B07C6920@<D0>(void *a1@<X8>)
{
  double result = *v1;
  *a1 = *(void *)v1;
  return result;
}

void *sub_1B07C692C@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

BOOL sub_1B07C6938(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1B07C694C@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  int v3 = sub_1B07C7AD8(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

BOOL sub_1B07C698C(double *a1, double *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1B07C69A0()
{
  return sub_1B086A768();
}

uint64_t sub_1B07C6A68()
{
  sub_1B07B28A4((unint64_t *)&qword_1EB595E20, type metadata accessor for Key);
  sub_1B07B28A4(&qword_1E9B3A3C8, type metadata accessor for Key);

  return sub_1B086A768();
}

uint64_t sub_1B07C6B24()
{
  return sub_1B07B28A4((unint64_t *)&unk_1E9B3A3B8, type metadata accessor for Key);
}

uint64_t sub_1B07C6B6C()
{
  return sub_1B07B28A4(&qword_1E9B3A3D0, type metadata accessor for Key);
}

uint64_t sub_1B07C6BB4()
{
  sub_1B07B28A4(&qword_1E9B3AA28, type metadata accessor for UIContentSizeCategory);
  sub_1B07B28A4(&qword_1E9B3AA30, type metadata accessor for UIContentSizeCategory);

  return sub_1B086A768();
}

uint64_t sub_1B07C6C70()
{
  sub_1B07B28A4(&qword_1E9B3AA50, type metadata accessor for TextStyle);
  sub_1B07B28A4(&qword_1E9B3AA58, type metadata accessor for TextStyle);

  return sub_1B086A768();
}

uint64_t sub_1B07C6D2C()
{
  return sub_1B07B28A4(&qword_1E9B3A9A8, type metadata accessor for TextStyle);
}

uint64_t sub_1B07C6D74()
{
  return sub_1B07B28A4(&qword_1E9B3A9B0, type metadata accessor for TextStyle);
}

uint64_t sub_1B07C6DBC()
{
  sub_1B07B28A4(&qword_1EB5957A8, type metadata accessor for TraitKey);
  sub_1B07B28A4(&qword_1EB5957C0, type metadata accessor for TraitKey);

  return sub_1B086A768();
}

uint64_t sub_1B07C6E78()
{
  sub_1B07B28A4((unint64_t *)&qword_1EB596480, type metadata accessor for AttributeName);
  sub_1B07B28A4(&qword_1E9B3AB00, type metadata accessor for AttributeName);

  return sub_1B086A768();
}

uint64_t sub_1B07C6F34()
{
  sub_1B07B28A4(&qword_1E9B3AB08, type metadata accessor for FeatureKey);
  sub_1B07B28A4((unint64_t *)&unk_1E9B3AB10, type metadata accessor for FeatureKey);

  return sub_1B086A768();
}

uint64_t sub_1B07C6FF0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = sub_1B0869D68();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_1B07C7038()
{
  sub_1B07B28A4(&qword_1E9B3AAE8, type metadata accessor for NQMLAttributeName);
  sub_1B07B28A4((unint64_t *)&unk_1E9B3AAF0, type metadata accessor for NQMLAttributeName);

  return sub_1B086A768();
}

uint64_t sub_1B07C70F4(uint64_t a1, uint64_t a2)
{
  return sub_1B07B2A60(a1, a2, MEMORY[0x1E4FBB198]);
}

uint64_t sub_1B07C710C()
{
  sub_1B0869D98();
  sub_1B0869E38();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B07C7160()
{
  return sub_1B07B28A4(&qword_1E9B3A9B8, type metadata accessor for TextStyle);
}

uint64_t sub_1B07C71A8()
{
  return sub_1B07B28A4(&qword_1E9B3A9C0, type metadata accessor for SymbolicTraits);
}

uint64_t sub_1B07C71F0()
{
  return sub_1B07B28A4(&qword_1E9B3A9C8, type metadata accessor for SymbolicTraits);
}

uint64_t sub_1B07C7238()
{
  return sub_1B07B28A4(&qword_1E9B3A9D0, type metadata accessor for SymbolicTraits);
}

uint64_t sub_1B07C7280()
{
  return sub_1B07B28A4(&qword_1E9B3A9D8, type metadata accessor for SymbolicTraits);
}

uint64_t sub_1B07C72C8()
{
  return sub_1B07B28A4(&qword_1E9B3A9E0, type metadata accessor for Weight);
}

uint64_t sub_1B07C7310()
{
  return sub_1B07B28A4(&qword_1E9B3A9E8, type metadata accessor for Weight);
}

uint64_t sub_1B07C7358()
{
  return sub_1B07B28A4(&qword_1E9B3A9F0, type metadata accessor for Weight);
}

uint64_t sub_1B07C73A0()
{
  return sub_1B07B28A4(&qword_1E9B3A9F8, type metadata accessor for UIContentSizeCategory);
}

uint64_t sub_1B07C73E8()
{
  return sub_1B07B28A4(&qword_1E9B3AA00, type metadata accessor for UIContentSizeCategory);
}

uint64_t sub_1B07C7430()
{
  return sub_1B07B28A4(&qword_1EB5957D8, type metadata accessor for UIContentSizeCategory);
}

unint64_t sub_1B07C747C()
{
  unint64_t result = qword_1E9B3AA08;
  if (!qword_1E9B3AA08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3AA08);
  }
  return result;
}

unint64_t sub_1B07C74D4()
{
  unint64_t result = qword_1E9B3AA10;
  if (!qword_1E9B3AA10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3AA10);
  }
  return result;
}

unint64_t sub_1B07C752C()
{
  unint64_t result = qword_1E9B3AA18;
  if (!qword_1E9B3AA18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3AA18);
  }
  return result;
}

unint64_t sub_1B07C7584()
{
  unint64_t result = qword_1E9B3AA20;
  if (!qword_1E9B3AA20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3AA20);
  }
  return result;
}

uint64_t sub_1B07C75D8(uint64_t a1, uint64_t a2)
{
  if (a1 == 120 && a2 == 0xE100000000000000 || (sub_1B086A8A8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 121 && a2 == 0xE100000000000000 || (sub_1B086A8A8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x746867696568 && a2 == 0xE600000000000000 || (sub_1B086A8A8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6874646977 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v5 = sub_1B086A8A8();
    swift_bridgeObjectRelease();
    if (v5) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t sub_1B07C7750(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x696669746E656469 && a2 == 0xEB00000000737265;
  if (v2 || (sub_1B086A8A8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6C6562616CLL && a2 == 0xE500000000000000 || (sub_1B086A8A8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x54746E656D656C65 && a2 == 0xEB00000000657079 || (sub_1B086A8A8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6E6572646C696863 && a2 == 0xE800000000000000 || (sub_1B086A8A8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 1952671090 && a2 == 0xE400000000000000 || (sub_1B086A8A8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x737469617274 && a2 == 0xE600000000000000 || (sub_1B086A8A8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x6449776F646E6977 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    char v6 = sub_1B086A8A8();
    swift_bridgeObjectRelease();
    if (v6) {
      return 6;
    }
    else {
      return 7;
    }
  }
}

unint64_t sub_1B07C7A48()
{
  unint64_t result = qword_1E9B3AA48;
  if (!qword_1E9B3AA48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3AA48);
  }
  return result;
}

uint64_t sub_1B07C7AA0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  uint64_t result = 0;
  char v4 = (uint64_t *)(a1 + 32);
  do
  {
    uint64_t v6 = *v4++;
    uint64_t v5 = v6;
    if ((v6 & ~result) == 0) {
      uint64_t v5 = 0;
    }
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t sub_1B07C7AD8(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = result;
  LODWORD(result) = 0;
  int v3 = (int *)(v2 + 32);
  do
  {
    int v5 = *v3++;
    int v4 = v5;
    if ((v5 & ~result) == 0) {
      int v4 = 0;
    }
    uint64_t result = v4 | result;
    --v1;
  }
  while (v1);
  return result;
}

unint64_t sub_1B07C7B10()
{
  unint64_t result = qword_1E9B3AA68;
  if (!qword_1E9B3AA68)
  {
    sub_1B07C7B80(255, (unint64_t *)&qword_1E9B3AA60);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3AA68);
  }
  return result;
}

uint64_t sub_1B07C7B78()
{
  return swift_release();
}

uint64_t sub_1B07C7B80(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

void type metadata accessor for NQMLAttributeName(uint64_t a1)
{
}

uint64_t sub_1B07C7BD0()
{
  return sub_1B07B28A4(&qword_1E9B3AA98, type metadata accessor for FeatureKey);
}

uint64_t sub_1B07C7C18()
{
  return sub_1B07B28A4((unint64_t *)&unk_1E9B3AAA0, type metadata accessor for FeatureKey);
}

uint64_t sub_1B07C7C60()
{
  return sub_1B07B28A4(&qword_1E9B3AAB0, type metadata accessor for AttributeName);
}

uint64_t sub_1B07C7CA8()
{
  return sub_1B07B28A4(&qword_1E9B3AAB8, type metadata accessor for AttributeName);
}

uint64_t sub_1B07C7CF0()
{
  return sub_1B07B28A4(&qword_1E9B3AAC0, type metadata accessor for NQMLAttributeName);
}

uint64_t sub_1B07C7D38()
{
  return sub_1B07B28A4((unint64_t *)&unk_1E9B3AAC8, type metadata accessor for NQMLAttributeName);
}

uint64_t sub_1B07C7D80()
{
  return sub_1B07B28A4((unint64_t *)&unk_1EB5957B0, type metadata accessor for TraitKey);
}

uint64_t sub_1B07C7DC8()
{
  return sub_1B07B28A4((unint64_t *)&unk_1EB5957C8, type metadata accessor for TraitKey);
}

uint64_t sub_1B07C7E10()
{
  return sub_1B07B28A4(&qword_1EB596550, type metadata accessor for TraitKey);
}

uint64_t sub_1B07C7E58()
{
  return sub_1B07B28A4((unint64_t *)&unk_1E9B3AAD8, type metadata accessor for NQMLAttributeName);
}

id sub_1B07C7F20()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void static UIFontDescriptor.preferred(forUseWith:compatibleWith:)()
{
}

Class static UIFontDescriptor.preferredFontDescriptor(forUseWith:compatibleWith:)(uint64_t a1, void *a2)
{
  int v3 = *(void **)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(a1 + 32);
  char v8 = *(unsigned char *)(a1 + 40);
  uint64_t v9 = (objc_class *)type metadata accessor for CacheKey();
  uint64_t v10 = (char *)objc_allocWithZone(v9);
  uint64_t v11 = &v10[OBJC_IVAR____TtC5JetUIP33_925E47A64C9969C34ACE8A7AFC4CB7868CacheKey_useCase];
  *(void *)uint64_t v11 = v3;
  *((void *)v11 + 1) = v4;
  *((void *)v11 + 2) = v5;
  *((void *)v11 + 3) = v6;
  *((void *)v11 + 4) = v7;
  v11[40] = v8;
  *(void *)&v10[OBJC_IVAR____TtC5JetUIP33_925E47A64C9969C34ACE8A7AFC4CB7868CacheKey_traitCollection] = a2;
  id v12 = a2;
  sub_1B07BCAAC(v3, v4, v5, v6, v7, v8);
  v17.receiver = v10;
  v17.super_class = v9;
  id v13 = objc_msgSendSuper2(&v17, sel_init);
  if (qword_1EB5964D0 != -1) {
    swift_once();
  }
  Class isa = (Class)objc_msgSend((id)qword_1EB596470, sel_objectForKey_, v13);
  if (!isa)
  {
    LOBYTE(v16) = v8;
    Class isa = FontUseCase.makeFontDescriptor(compatibleWith:)((UITraitCollection)v12).super.isa;
    objc_msgSend((id)qword_1EB596470, sel_setObject_forKey_, isa, v13, v3, v4, v5, v6, v7, v16);
  }

  return isa;
}

void static UIFont.preferred(forUseWith:compatibleWith:)()
{
}

void static UIFont.preferredFont(forUseWith:)()
{
}

double UIFont.estimatedFirstBaseline.getter()
{
  objc_msgSend(v0, sel_lineHeight);
  double v2 = v1;
  objc_msgSend(v0, sel_descender);
  return v2 + v3;
}

id static FontUseCase.removeCachedFontsAndDescriptors()()
{
  if (qword_1EB5964D0 != -1) {
    swift_once();
  }
  objc_msgSend((id)qword_1EB596470, sel_removeAllObjects);
  if (qword_1EB5964C8 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)qword_1EB596490;

  return objc_msgSend(v0, sel_removeAllObjects);
}

double PlacementSequence.measure.getter(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void *__return_ptr))(a2 + 16))(v3);
  return ceil(*(double *)&v3[2]);
}

uint64_t dispatch thunk of PlacementSequence.union.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of PlacementSequence.measure.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

double sub_1B07C8330()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v2 + 16))(v4, v1, v2);
  return ceil(*(double *)&v4[2]);
}

double sub_1B07C83AC()
{
  uint64_t v1 = *((void *)v0 + 6);
  uint64_t v2 = *((void *)v0 + 11);
  char v3 = *((unsigned char *)v0 + 96);
  long long v4 = v0[1];
  long long v7 = *v0;
  long long v8 = v4;
  long long v9 = v0[2];
  uint64_t v10 = v1;
  long long v11 = *(long long *)((char *)v0 + 56);
  long long v12 = *(long long *)((char *)v0 + 72);
  uint64_t v13 = v2;
  char v14 = v3;
  DisjointStack.Placements.union.getter(v6);
  return ceil(v6[2]);
}

double sub_1B07C842C()
{
  Pin.Placements.union.getter(v1);
  return ceil(v1[2]);
}

uint64_t static TextMeasurable.defaultTextAlignment.getter()
{
  return 4;
}

uint64_t static TextMeasurable.defaultLineBreakMode.getter()
{
  return 0;
}

void TextMeasurable.init(attributedText:font:textAlignment:lineBreakMode:lineSpacing:numberOfLines:isLanguageAware:)(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X8>)
{
  char v14 = (void *)*MEMORY[0x1E4FB06F8];
  uint64_t v40 = (void *)sub_1B07C7B80(0, (unint64_t *)&qword_1EB595950);
  *(void *)&long long aBlock = a2;
  sub_1B07BFE44(&aBlock, v44);
  id v15 = v14;
  id v16 = a2;
  uint64_t v17 = MEMORY[0x1E4FBC868];
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v43 = v17;
  sub_1B07CA260(v44, v15, isUniquelyReferenced_nonNull_native);
  uint64_t v19 = v43;

  swift_bridgeObjectRelease();
  id v20 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB0848]), sel_init);
  objc_msgSend(v20, sel_setAlignment_, a3);
  objc_msgSend(v20, sel_setLineBreakMode_, a4);
  objc_msgSend(v20, sel_setLineBreakStrategy_, 0xFFFFLL);
  if (a5)
  {
    objc_msgSend(v20, sel_setMinimumLineHeight_, (double)a5);
    objc_msgSend(v20, sel_setMaximumLineHeight_, (double)a5);
  }
  uint64_t v21 = (void *)*MEMORY[0x1E4FB0738];
  uint64_t v40 = (void *)sub_1B07C7B80(0, &qword_1EB595948);
  *(void *)&long long aBlock = v20;
  sub_1B07BFE44(&aBlock, v44);
  id v22 = v21;
  id v23 = v20;
  char v24 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v43 = v19;
  sub_1B07CA260(v44, v22, v24);

  swift_bridgeObjectRelease();
  id v25 = objc_msgSend(a1, sel_string);
  sub_1B0869D98();

  id v26 = objc_allocWithZone(MEMORY[0x1E4F28E48]);
  uint64_t v27 = (void *)sub_1B0869D68();
  swift_bridgeObjectRelease();
  type metadata accessor for Key(0);
  sub_1B07CBE48((unint64_t *)&qword_1EB595E20, type metadata accessor for Key);
  uint64_t v28 = (void *)sub_1B0869CA8();
  swift_bridgeObjectRelease();
  id v29 = objc_msgSend(v26, sel_initWithString_attributes_, v27, v28);

  id v30 = objc_msgSend(a1, sel_length);
  uint64_t v31 = swift_allocObject();
  *(void *)(v31 + 16) = v29;
  uint64_t v32 = swift_allocObject();
  *(void *)(v32 + 16) = sub_1B07CA3DC;
  *(void *)(v32 + 24) = v31;
  uint64_t v41 = sub_1B07CA3F4;
  uint64_t v42 = v32;
  *(void *)&long long aBlock = MEMORY[0x1E4F143A8];
  *((void *)&aBlock + 1) = 1107296256;
  id v39 = sub_1B07C8AA0;
  uint64_t v40 = &block_descriptor;
  uint64_t v33 = _Block_copy(&aBlock);
  id v34 = v29;
  swift_retain();
  swift_release();
  objc_msgSend(a1, sel_enumerateAttributesInRange_options_usingBlock_, 0, v30, 0, v33);
  _Block_release(v33);
  LOBYTE(v33) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v33)
  {
    __break(1u);
  }
  else
  {
    id v35 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28B18]), sel_initWithAttributedString_, v34);

    swift_release();
    *(void *)a8 = v35;
    *(void *)(a8 + 8) = a6;
    *(unsigned char *)(a8 + 16) = a7 & 1;
  }
}

JetUI::TextMeasurable __swiftcall TextMeasurable.init(attributedText:numberOfLines:isLanguageAware:)(NSAttributedString attributedText, Swift::Int numberOfLines, Swift::Bool isLanguageAware)
{
  *(NSAttributedString *)uint64_t v3 = attributedText;
  *(void *)(v3 + 8) = numberOfLines;
  *(unsigned char *)(v3 + 16) = isLanguageAware;
  result.numberOfLines = numberOfLines;
  result.attributedText = attributedText;
  result.isLanguageAware = isLanguageAware;
  return result;
}

id TextMeasurable.attributedText.getter()
{
  return *v0;
}

uint64_t TextMeasurable.numberOfLines.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t TextMeasurable.isLanguageAware.getter()
{
  return *(unsigned __int8 *)(v0 + 16);
}

Swift::Bool __swiftcall TextMeasurable.isTruncated(whenFitting:)(CGSize whenFitting)
{
  double height = whenFitting.height;
  double width = whenFitting.width;
  id v4 = *(id *)v1;
  uint64_t v5 = *(void *)(v1 + 8);
  if ((uint64_t)objc_msgSend(*(id *)v1, sel_length) < 1) {
    return 0;
  }
  Swift::Bool result = 1;
  if (width > 0.0 && height > 0.0)
  {
    id v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB0860]), sel_init);
    long long v8 = v7;
    if (!v5) {
      objc_msgSend(v7, sel_setMaximumNumberOfLines_, 0);
    }
    objc_msgSend(v4, sel_boundingRectWithSize_options_context_, 1, v8, width, 1.79769313e308);
    double v9 = CGRectGetHeight(v10);

    return v9 > height;
  }
  return result;
}

uint64_t sub_1B07C89C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5();
}

uint64_t sub_1B07C89E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  double v9 = *(void (**)(long long *, uint64_t, uint64_t, uint64_t))(a1 + 32);
  if (a2)
  {
    *((void *)&v12 + 1) = swift_getObjectType();
    *(void *)&long long v11 = a2;
  }
  else
  {
    long long v11 = 0u;
    long long v12 = 0u;
  }
  swift_unknownObjectRetain();
  v9(&v11, a3, a4, a5);
  return sub_1B07B86F8((uint64_t)&v11);
}

uint64_t sub_1B07C8A78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5();
}

uint64_t sub_1B07C8AA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  long long v8 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 32);
  type metadata accessor for Key(0);
  sub_1B07CBE48((unint64_t *)&qword_1EB595E20, type metadata accessor for Key);
  uint64_t v9 = sub_1B0869CB8();
  v8(v9, a3, a4, a5);

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B07C8B70(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB595958);
  char v35 = a2;
  uint64_t v6 = sub_1B086A708();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v34 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v33 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v15 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v16 = v15 | (v13 << 6);
      goto LABEL_22;
    }
    int64_t v17 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v17 >= v33) {
      break;
    }
    uint64_t v18 = (void *)(v5 + 64);
    unint64_t v19 = *(void *)(v34 + 8 * v17);
    ++v13;
    if (!v19)
    {
      int64_t v13 = v17 + 1;
      if (v17 + 1 >= v33) {
        goto LABEL_34;
      }
      unint64_t v19 = *(void *)(v34 + 8 * v13);
      if (!v19)
      {
        int64_t v20 = v17 + 2;
        if (v20 >= v33)
        {
LABEL_34:
          swift_release();
          if ((v35 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v19 = *(void *)(v34 + 8 * v20);
        if (!v19)
        {
          while (1)
          {
            int64_t v13 = v20 + 1;
            if (__OFADD__(v20, 1)) {
              goto LABEL_43;
            }
            if (v13 >= v33) {
              goto LABEL_34;
            }
            unint64_t v19 = *(void *)(v34 + 8 * v13);
            ++v20;
            if (v19) {
              goto LABEL_21;
            }
          }
        }
        int64_t v13 = v20;
      }
    }
LABEL_21:
    unint64_t v10 = (v19 - 1) & v19;
    unint64_t v16 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_22:
    uint64_t v21 = *(void **)(*(void *)(v5 + 48) + 8 * v16);
    id v22 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v16);
    if (v35)
    {
      sub_1B07BFE44(v22, v36);
    }
    else
    {
      sub_1B07CBDEC((uint64_t)v22, (uint64_t)v36);
      id v23 = v21;
    }
    sub_1B0869D98();
    sub_1B086A958();
    sub_1B0869E38();
    uint64_t v24 = sub_1B086A998();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v26 = v24 & ~v25;
    unint64_t v27 = v26 >> 6;
    if (((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6))) != 0)
    {
      unint64_t v14 = __clz(__rbit64((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v28 = 0;
      unint64_t v29 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v30 = v27 == v29;
        if (v27 == v29) {
          unint64_t v27 = 0;
        }
        v28 |= v30;
        uint64_t v31 = *(void *)(v11 + 8 * v27);
      }
      while (v31 == -1);
      unint64_t v14 = __clz(__rbit64(~v31)) + (v27 << 6);
    }
    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(void *)(*(void *)(v7 + 48) + 8 * v14) = v21;
    uint64_t result = (uint64_t)sub_1B07BFE44(v36, (_OWORD *)(*(void *)(v7 + 56) + 32 * v14));
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v18 = (void *)(v5 + 64);
  if ((v35 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
  if (v32 >= 64) {
    bzero(v18, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v18 = -1 << v32;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_1B07C8EAC(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3AB90);
  char v42 = a2;
  uint64_t v6 = sub_1B086A708();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v41 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  id v39 = v2;
  int64_t v40 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v40) {
      break;
    }
    uint64_t v24 = (void *)(v5 + 64);
    unint64_t v25 = *(void *)(v41 + 8 * v23);
    ++v13;
    if (!v25)
    {
      int64_t v13 = v23 + 1;
      if (v23 + 1 >= v40) {
        goto LABEL_33;
      }
      unint64_t v25 = *(void *)(v41 + 8 * v13);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v39;
          if ((v42 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v25 = *(void *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v13 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v40) {
              goto LABEL_33;
            }
            unint64_t v25 = *(void *)(v41 + 8 * v13);
            ++v26;
            if (v25) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v26;
      }
    }
LABEL_30:
    unint64_t v10 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    uint64_t v31 = 16 * v22;
    uint64_t v32 = (uint64_t *)(*(void *)(v5 + 48) + v31);
    uint64_t v34 = *v32;
    uint64_t v33 = v32[1];
    char v35 = (uint64_t *)(*(void *)(v5 + 56) + v31);
    uint64_t v36 = *v35;
    uint64_t v37 = v35[1];
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    sub_1B086A958();
    sub_1B0869E38();
    uint64_t result = sub_1B086A998();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v29 = v16 == v28;
        if (v16 == v28) {
          unint64_t v16 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      unint64_t v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = 16 * v17;
    unint64_t v19 = (void *)(*(void *)(v7 + 48) + v18);
    *unint64_t v19 = v34;
    v19[1] = v33;
    int64_t v20 = (void *)(*(void *)(v7 + 56) + v18);
    void *v20 = v36;
    v20[1] = v37;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v39;
  uint64_t v24 = (void *)(v5 + 64);
  if ((v42 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v38 = 1 << *(unsigned char *)(v5 + 32);
  if (v38 >= 64) {
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v24 = -1 << v38;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_1B07C91D4(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v44 = sub_1B08698A8();
  uint64_t v5 = *(void *)(v44 - 8);
  MEMORY[0x1F4188790](v44);
  uint64_t v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3ABB0);
  int v45 = a2;
  uint64_t v9 = sub_1B086A708();
  uint64_t v10 = v9;
  if (*(void *)(v8 + 16))
  {
    uint64_t v38 = v2;
    uint64_t v11 = 1 << *(unsigned char *)(v8 + 32);
    uint64_t v12 = *(void *)(v8 + 64);
    int64_t v40 = (void *)(v8 + 64);
    if (v11 < 64) {
      uint64_t v13 = ~(-1 << v11);
    }
    else {
      uint64_t v13 = -1;
    }
    unint64_t v14 = v13 & v12;
    int64_t v39 = (unint64_t)(v11 + 63) >> 6;
    uint64_t v41 = (void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    uint64_t v46 = (void (**)(char *, unint64_t, uint64_t))(v5 + 32);
    uint64_t v15 = v9 + 64;
    uint64_t result = swift_retain();
    int64_t v17 = 0;
    uint64_t v42 = v8;
    uint64_t v43 = v7;
    while (1)
    {
      if (v14)
      {
        unint64_t v19 = __clz(__rbit64(v14));
        v14 &= v14 - 1;
        unint64_t v20 = v19 | (v17 << 6);
      }
      else
      {
        int64_t v21 = v17 + 1;
        if (__OFADD__(v17, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v21 >= v39) {
          goto LABEL_34;
        }
        unint64_t v22 = v40[v21];
        ++v17;
        if (!v22)
        {
          int64_t v17 = v21 + 1;
          if (v21 + 1 >= v39) {
            goto LABEL_34;
          }
          unint64_t v22 = v40[v17];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v39)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v38;
              if (v45)
              {
                uint64_t v36 = 1 << *(unsigned char *)(v8 + 32);
                if (v36 >= 64) {
                  bzero(v40, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *int64_t v40 = -1 << v36;
                }
                *(void *)(v8 + 16) = 0;
              }
              break;
            }
            unint64_t v22 = v40[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v17 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_41;
                }
                if (v17 >= v39) {
                  goto LABEL_34;
                }
                unint64_t v22 = v40[v17];
                ++v23;
                if (v22) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v17 = v23;
          }
        }
LABEL_21:
        unint64_t v14 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v17 << 6);
      }
      uint64_t v24 = v5;
      uint64_t v25 = *(void *)(v5 + 72);
      unint64_t v26 = *(void *)(v8 + 48) + v25 * v20;
      char v27 = v43;
      uint64_t v28 = v44;
      if (v45)
      {
        (*v46)(v43, v26, v44);
        sub_1B07BFE44((_OWORD *)(*(void *)(v8 + 56) + 32 * v20), v47);
      }
      else
      {
        (*v41)(v43, v26, v44);
        sub_1B07CBDEC(*(void *)(v8 + 56) + 32 * v20, (uint64_t)v47);
      }
      sub_1B07CBE48(&qword_1E9B3B120, MEMORY[0x1E4F71238]);
      uint64_t result = sub_1B0869D08();
      uint64_t v29 = -1 << *(unsigned char *)(v10 + 32);
      unint64_t v30 = result & ~v29;
      unint64_t v31 = v30 >> 6;
      if (((-1 << v30) & ~*(void *)(v15 + 8 * (v30 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v30) & ~*(void *)(v15 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v32 = 0;
        unint64_t v33 = (unint64_t)(63 - v29) >> 6;
        do
        {
          if (++v31 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v34 = v31 == v33;
          if (v31 == v33) {
            unint64_t v31 = 0;
          }
          v32 |= v34;
          uint64_t v35 = *(void *)(v15 + 8 * v31);
        }
        while (v35 == -1);
        unint64_t v18 = __clz(__rbit64(~v35)) + (v31 << 6);
      }
      *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      (*v46)((char *)(*(void *)(v10 + 48) + v25 * v18), (unint64_t)v27, v28);
      uint64_t result = (uint64_t)sub_1B07BFE44(v47, (_OWORD *)(*(void *)(v10 + 56) + 32 * v18));
      ++*(void *)(v10 + 16);
      uint64_t v5 = v24;
      uint64_t v8 = v42;
    }
  }
  uint64_t result = swift_release();
  uint64_t *v3 = v10;
  return result;
}

uint64_t sub_1B07C9604(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3ABA8);
  char v37 = a2;
  uint64_t v6 = sub_1B086A708();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  BOOL v34 = v2;
  int64_t v35 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v35) {
      break;
    }
    unint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v36 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v35) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v36 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v35)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v34;
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v35) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v36 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    char v32 = *(unsigned char *)(*(void *)(v5 + 56) + v20);
    if ((v37 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    sub_1B086A958();
    sub_1B0869E38();
    uint64_t result = sub_1B086A998();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    unint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *unint64_t v18 = v31;
    v18[1] = v30;
    *(unsigned char *)(*(void *)(v7 + 56) + v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v34;
  unint64_t v22 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_1B07C9910(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3ABA0);
  char v37 = a2;
  uint64_t v6 = sub_1B086A708();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  BOOL v34 = v2;
  int64_t v35 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v17 = v16 | (v13 << 6);
      goto LABEL_22;
    }
    int64_t v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v18 >= v35) {
      break;
    }
    unint64_t v19 = (void *)(v5 + 64);
    unint64_t v20 = *(void *)(v36 + 8 * v18);
    ++v13;
    if (!v20)
    {
      int64_t v13 = v18 + 1;
      if (v18 + 1 >= v35) {
        goto LABEL_34;
      }
      unint64_t v20 = *(void *)(v36 + 8 * v13);
      if (!v20)
      {
        int64_t v21 = v18 + 2;
        if (v21 >= v35)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v34;
          if ((v37 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v20 = *(void *)(v36 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            int64_t v13 = v21 + 1;
            if (__OFADD__(v21, 1)) {
              goto LABEL_43;
            }
            if (v13 >= v35) {
              goto LABEL_34;
            }
            unint64_t v20 = *(void *)(v36 + 8 * v13);
            ++v21;
            if (v20) {
              goto LABEL_21;
            }
          }
        }
        int64_t v13 = v21;
      }
    }
LABEL_21:
    unint64_t v10 = (v20 - 1) & v20;
    unint64_t v17 = __clz(__rbit64(v20)) + (v13 << 6);
LABEL_22:
    unint64_t v22 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
    uint64_t v24 = *v22;
    uint64_t v23 = v22[1];
    char v25 = (long long *)(*(void *)(v5 + 56) + 40 * v17);
    if (v37)
    {
      sub_1B07BA8FC(v25, (uint64_t)v38);
    }
    else
    {
      sub_1B07BBD78((uint64_t)v25, (uint64_t)v38);
      swift_bridgeObjectRetain();
    }
    sub_1B086A958();
    sub_1B0869E38();
    uint64_t result = sub_1B086A998();
    uint64_t v26 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v11 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v14 = __clz(__rbit64((-1 << v27) & ~*(void *)(v11 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v31 = v28 == v30;
        if (v28 == v30) {
          unint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v11 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v14 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    unint64_t v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
    *unint64_t v15 = v24;
    v15[1] = v23;
    uint64_t result = sub_1B07BA8FC(v38, *(void *)(v7 + 56) + 40 * v14);
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v34;
  unint64_t v19 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v19, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v19 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_1B07C9C38(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3ABB8);
  char v6 = a2;
  uint64_t v7 = sub_1B086A708();
  uint64_t v8 = v7;
  if (*(void *)(v5 + 16))
  {
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v36 = (void *)(v5 + 64);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v35 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = v7 + 64;
    uint64_t result = swift_retain();
    int64_t v14 = 0;
    while (1)
    {
      if (v11)
      {
        unint64_t v21 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v22 = v21 | (v14 << 6);
      }
      else
      {
        int64_t v23 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v23 >= v35) {
          goto LABEL_33;
        }
        unint64_t v24 = v36[v23];
        ++v14;
        if (!v24)
        {
          int64_t v14 = v23 + 1;
          if (v23 + 1 >= v35) {
            goto LABEL_33;
          }
          unint64_t v24 = v36[v14];
          if (!v24)
          {
            int64_t v25 = v23 + 2;
            if (v25 >= v35)
            {
LABEL_33:
              swift_release();
              uint64_t v3 = v2;
              if (v6)
              {
                uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
                if (v34 >= 64) {
                  bzero(v36, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v36 = -1 << v34;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v24 = v36[v25];
            if (!v24)
            {
              while (1)
              {
                int64_t v14 = v25 + 1;
                if (__OFADD__(v25, 1)) {
                  goto LABEL_40;
                }
                if (v14 >= v35) {
                  goto LABEL_33;
                }
                unint64_t v24 = v36[v14];
                ++v25;
                if (v24) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v14 = v25;
          }
        }
LABEL_30:
        unint64_t v11 = (v24 - 1) & v24;
        unint64_t v22 = __clz(__rbit64(v24)) + (v14 << 6);
      }
      uint64_t v30 = 16 * v22;
      BOOL v31 = (uint64_t *)(*(void *)(v5 + 48) + v30);
      uint64_t v33 = *v31;
      uint64_t v32 = v31[1];
      long long v37 = *(_OWORD *)(*(void *)(v5 + 56) + v30);
      if ((v6 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        sub_1B07CBEE8(v37, *((unint64_t *)&v37 + 1));
      }
      sub_1B086A958();
      sub_1B0869E38();
      uint64_t result = sub_1B086A998();
      uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
      unint64_t v16 = result & ~v15;
      unint64_t v17 = v16 >> 6;
      if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v26 = 0;
        unint64_t v27 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v28 = v17 == v27;
          if (v17 == v27) {
            unint64_t v17 = 0;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v12 + 8 * v17);
        }
        while (v29 == -1);
        unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
      }
      *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      uint64_t v19 = 16 * v18;
      unint64_t v20 = (void *)(*(void *)(v8 + 48) + v19);
      void *v20 = v33;
      v20[1] = v32;
      *(_OWORD *)(*(void *)(v8 + 56) + v19) = v37;
      ++*(void *)(v8 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v3 = v8;
  return result;
}

uint64_t sub_1B07C9F48(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3AB98);
  uint64_t v6 = sub_1B086A708();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    int64_t v35 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v34 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v20 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v21 = v20 | (v13 << 6);
      }
      else
      {
        int64_t v22 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v22 >= v34) {
          goto LABEL_33;
        }
        unint64_t v23 = v35[v22];
        ++v13;
        if (!v23)
        {
          int64_t v13 = v22 + 1;
          if (v22 + 1 >= v34) {
            goto LABEL_33;
          }
          unint64_t v23 = v35[v13];
          if (!v23)
          {
            int64_t v24 = v22 + 2;
            if (v24 >= v34)
            {
LABEL_33:
              swift_release();
              uint64_t v3 = v2;
              if (a2)
              {
                uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
                if (v33 >= 64) {
                  bzero(v35, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *int64_t v35 = -1 << v33;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v23 = v35[v24];
            if (!v23)
            {
              while (1)
              {
                int64_t v13 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_40;
                }
                if (v13 >= v34) {
                  goto LABEL_33;
                }
                unint64_t v23 = v35[v13];
                ++v24;
                if (v23) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v13 = v24;
          }
        }
LABEL_30:
        unint64_t v10 = (v23 - 1) & v23;
        unint64_t v21 = __clz(__rbit64(v23)) + (v13 << 6);
      }
      uint64_t v29 = 16 * v21;
      uint64_t v30 = (uint64_t *)(*(void *)(v5 + 48) + v29);
      uint64_t v32 = *v30;
      uint64_t v31 = v30[1];
      long long v36 = *(_OWORD *)(*(void *)(v5 + 56) + v29);
      if ((a2 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_retain();
      }
      sub_1B086A958();
      swift_bridgeObjectRetain();
      sub_1B0869E38();
      swift_bridgeObjectRelease();
      uint64_t result = sub_1B086A998();
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v27 = v16 == v26;
          if (v16 == v26) {
            unint64_t v16 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v11 + 8 * v16);
        }
        while (v28 == -1);
        unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
      }
      *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      uint64_t v18 = 16 * v17;
      uint64_t v19 = (void *)(*(void *)(v7 + 48) + v18);
      *uint64_t v19 = v32;
      v19[1] = v31;
      *(_OWORD *)(*(void *)(v7 + 56) + v18) = v36;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

_OWORD *sub_1B07CA260(_OWORD *a1, void *a2, char a3)
{
  id v4 = (void **)v3;
  uint64_t v7 = (void *)*v3;
  unint64_t v9 = sub_1B07E45BC((uint64_t)a2);
  uint64_t v10 = v7[2];
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v13 = v8;
  uint64_t v14 = v7[3];
  if (v14 < v12 || (a3 & 1) == 0)
  {
    if (v14 >= v12 && (a3 & 1) == 0)
    {
      sub_1B07CB09C();
      goto LABEL_7;
    }
    sub_1B07C8B70(v12, a3 & 1);
    unint64_t v18 = sub_1B07E45BC((uint64_t)a2);
    if ((v13 & 1) == (v19 & 1))
    {
      unint64_t v9 = v18;
      unint64_t v15 = *v4;
      if (v13) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    type metadata accessor for Key(0);
    uint64_t result = (_OWORD *)sub_1B086A8F8();
    __break(1u);
    return result;
  }
LABEL_7:
  unint64_t v15 = *v4;
  if (v13)
  {
LABEL_8:
    unint64_t v16 = (_OWORD *)(v15[7] + 32 * v9);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
    return sub_1B07BFE44(a1, v16);
  }
LABEL_13:
  sub_1B07CAF04(v9, (uint64_t)a2, a1, v15);

  return a2;
}

uint64_t sub_1B07CA3A4()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

void sub_1B07CA3DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B0844BF8(a1, a2, a3, a4, *(void **)(v4 + 16));
}

uint64_t sub_1B07CA3E4()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1B07CA3F4()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t sub_1B07CA424()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

void sub_1B07CA434(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B07EE900(a1, a2, a3, a4, *(float64x2_t **)(v4 + 16), *(unsigned char **)(v4 + 24));
}

uint64_t sub_1B07CA43C()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1B07CA44C()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t initializeBufferWithCopyOfBuffer for TextMeasurable(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  id v5 = v3;
  return a1;
}

uint64_t assignWithCopy for TextMeasurable(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for TextMeasurable(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for TextMeasurable(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 17)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TextMeasurable(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 17) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t sub_1B07CA5D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  id v6 = v5;
  uint64_t v12 = *v5;
  unint64_t v14 = sub_1B07E4728(a3, a4);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v18 = v13;
  uint64_t v19 = *(void *)(v12 + 24);
  if (v19 >= v17 && (a5 & 1) != 0) {
    goto LABEL_7;
  }
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_1B07CB264();
LABEL_7:
    unint64_t v20 = (void *)*v6;
    if (v18)
    {
LABEL_8:
      unint64_t v21 = (void *)(v20[7] + 16 * v14);
      uint64_t result = swift_bridgeObjectRelease();
      void *v21 = a1;
      v21[1] = a2;
      return result;
    }
    goto LABEL_11;
  }
  sub_1B07C8EAC(v17, a5 & 1);
  unint64_t v23 = sub_1B07E4728(a3, a4);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_17:
    uint64_t result = sub_1B086A8F8();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  unint64_t v20 = (void *)*v6;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  v20[(v14 >> 6) + 8] |= 1 << v14;
  char v25 = (uint64_t *)(v20[6] + 16 * v14);
  *char v25 = a3;
  v25[1] = a4;
  unint64_t v26 = (void *)(v20[7] + 16 * v14);
  *unint64_t v26 = a1;
  v26[1] = a2;
  uint64_t v27 = v20[2];
  BOOL v28 = __OFADD__(v27, 1);
  uint64_t v29 = v27 + 1;
  if (v28)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  _OWORD v20[2] = v29;

  return swift_bridgeObjectRetain();
}

_OWORD *sub_1B07CA758(_OWORD *a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = sub_1B08698A8();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  BOOL v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_1B07E4650(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 < v17 || (a3 & 1) == 0)
  {
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      sub_1B07CB420();
      goto LABEL_7;
    }
    sub_1B07C91D4(v17, a3 & 1);
    unint64_t v23 = sub_1B07E4650(a2);
    if ((v18 & 1) == (v24 & 1))
    {
      unint64_t v14 = v23;
      unint64_t v20 = *v4;
      if (v18) {
        goto LABEL_8;
      }
LABEL_13:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return sub_1B07CAF6C(v14, (uint64_t)v11, a1, v20);
    }
LABEL_15:
    uint64_t result = (_OWORD *)sub_1B086A8F8();
    __break(1u);
    return result;
  }
LABEL_7:
  unint64_t v20 = *v4;
  if ((v18 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  unint64_t v21 = (_OWORD *)(v20[7] + 32 * v14);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);

  return sub_1B07BFE44(a1, v21);
}

uint64_t sub_1B07CA930(char a1, uint64_t a2, uint64_t a3, char a4)
{
  id v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_1B07E4728(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= result && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= result && (a4 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1B07CB6C8();
LABEL_7:
    char v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      *(unsigned char *)(v18[7] + v12) = a1 & 1;
      return result;
    }
    goto LABEL_11;
  }
  sub_1B07C9604(result, a4 & 1);
  uint64_t result = sub_1B07E4728(a2, a3);
  if ((v16 & 1) != (v19 & 1))
  {
LABEL_17:
    uint64_t result = sub_1B086A8F8();
    __break(1u);
    return result;
  }
  unint64_t v12 = result;
  char v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  unint64_t v20 = (uint64_t *)(v18[6] + 16 * v12);
  uint64_t *v20 = a2;
  v20[1] = a3;
  *(unsigned char *)(v18[7] + v12) = a1 & 1;
  uint64_t v21 = v18[2];
  BOOL v22 = __OFADD__(v21, 1);
  uint64_t v23 = v21 + 1;
  if (v22)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v18[2] = v23;

  return swift_bridgeObjectRetain();
}

uint64_t sub_1B07CAA9C(long long *a1, uint64_t a2, uint64_t a3, char a4)
{
  id v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_1B07E4728(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_1B07CB874();
      goto LABEL_7;
    }
    sub_1B07C9910(v15, a4 & 1);
    unint64_t v21 = sub_1B07E4728(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      char v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = sub_1B086A8F8();
    __break(1u);
    return result;
  }
LABEL_7:
  char v18 = *v5;
  if (v16)
  {
LABEL_8:
    uint64_t v19 = v18[7] + 40 * v12;
    __swift_destroy_boxed_opaque_existential_1(v19);
    return sub_1B07BA8FC(a1, v19);
  }
LABEL_13:
  sub_1B07CB02C(v12, a2, a3, a1, v18);

  return swift_bridgeObjectRetain();
}

uint64_t sub_1B07CABF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  id v6 = v5;
  uint64_t v12 = *v5;
  unint64_t v14 = sub_1B07E4728(a3, a4);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v18 = v13;
  uint64_t v19 = *(void *)(v12 + 24);
  if (v19 >= v17 && (a5 & 1) != 0) {
    goto LABEL_7;
  }
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_1B07CBA60();
LABEL_7:
    unint64_t v20 = (void *)*v6;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = v20[7] + 16 * v14;
      uint64_t result = sub_1B07CBE90(*(void *)v21, *(void *)(v21 + 8));
      *(void *)uint64_t v21 = a1;
      *(void *)(v21 + 8) = a2;
      return result;
    }
    goto LABEL_11;
  }
  sub_1B07C9C38(v17, a5 & 1);
  unint64_t v23 = sub_1B07E4728(a3, a4);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_17:
    uint64_t result = sub_1B086A8F8();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  unint64_t v20 = (void *)*v6;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  v20[(v14 >> 6) + 8] |= 1 << v14;
  uint64_t v25 = (uint64_t *)(v20[6] + 16 * v14);
  *uint64_t v25 = a3;
  v25[1] = a4;
  unint64_t v26 = (void *)(v20[7] + 16 * v14);
  *unint64_t v26 = a1;
  v26[1] = a2;
  uint64_t v27 = v20[2];
  BOOL v28 = __OFADD__(v27, 1);
  uint64_t v29 = v27 + 1;
  if (v28)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  _OWORD v20[2] = v29;

  return swift_bridgeObjectRetain();
}

uint64_t sub_1B07CAD7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  id v6 = v5;
  uint64_t v12 = *v5;
  unint64_t v14 = sub_1B07E47A0(a3, a4);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v18 = v13;
  uint64_t v19 = *(void *)(v12 + 24);
  if (v19 >= v17 && (a5 & 1) != 0) {
    goto LABEL_7;
  }
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_1B07CBC28();
LABEL_7:
    unint64_t v20 = (void *)*v6;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = (void *)(v20[7] + 16 * v14);
      uint64_t result = swift_release();
      void *v21 = a1;
      v21[1] = a2;
      return result;
    }
    goto LABEL_11;
  }
  sub_1B07C9F48(v17, a5 & 1);
  uint64_t v23 = sub_1B07E47A0(a3, a4);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_17:
    uint64_t result = sub_1B086A8F8();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  unint64_t v20 = (void *)*v6;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  v20[(v14 >> 6) + 8] |= 1 << v14;
  uint64_t v25 = (void *)(v20[6] + 16 * v14);
  *uint64_t v25 = a3;
  v25[1] = a4;
  unint64_t v26 = (void *)(v20[7] + 16 * v14);
  *unint64_t v26 = a1;
  v26[1] = a2;
  uint64_t v27 = v20[2];
  BOOL v28 = __OFADD__(v27, 1);
  uint64_t v29 = v27 + 1;
  if (v28)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  _OWORD v20[2] = v29;

  return swift_bridgeObjectRetain();
}

_OWORD *sub_1B07CAF04(unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(void *)(a4[6] + 8 * a1) = a2;
  uint64_t result = sub_1B07BFE44(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v6 = a4[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2] = v8;
  }
  return result;
}

_OWORD *sub_1B07CAF6C(unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = sub_1B08698A8();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  uint64_t result = sub_1B07BFE44(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

uint64_t sub_1B07CB02C(unint64_t a1, uint64_t a2, uint64_t a3, long long *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v6 = (void *)(a5[6] + 16 * a1);
  *uint64_t v6 = a2;
  v6[1] = a3;
  uint64_t result = sub_1B07BA8FC(a4, a5[7] + 40 * a1);
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

id sub_1B07CB09C()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB595958);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_1B086A6F8();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      int64_t v9 = v19 + 1;
      if (v19 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v20 = *(void *)(v6 + 8 * v9);
      if (!v20) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 32 * v15;
    sub_1B07CBDEC(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v22);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    sub_1B07BFE44(v22, (_OWORD *)(*(void *)(v4 + 56) + v18));
    id result = v17;
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v13) {
    goto LABEL_26;
  }
  unint64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    int64_t v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1B07CB264()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3AB90);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_1B086A6F8();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      int64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v26 - 1) & v26;
    unint64_t v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    unint64_t v20 = (uint64_t *)(*(void *)(v2 + 56) + v16);
    uint64_t v21 = *v20;
    uint64_t v22 = v20[1];
    uint64_t v23 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v23 = v19;
    v23[1] = v18;
    char v24 = (void *)(*(void *)(v4 + 56) + v16);
    *char v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain();
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v27 = v25 + 2;
  if (v27 >= v13) {
    goto LABEL_26;
  }
  unint64_t v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    int64_t v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1B07CB420()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1B08698A8();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  id v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3ABB0);
  uint64_t v6 = *v0;
  uint64_t v7 = sub_1B086A6F8();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    id result = (void *)swift_release();
LABEL_25:
    *uint64_t v1 = v8;
    return result;
  }
  uint64_t v22 = v1;
  id result = (void *)(v7 + 64);
  unint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10) {
    id result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  }
  uint64_t v23 = v6 + 64;
  int64_t v11 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  uint64_t v12 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v6 + 64);
  int64_t v24 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v25 = v3 + 16;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v11 << 6);
      goto LABEL_9;
    }
    int64_t v19 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v19 >= v24) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v23 + 8 * v19);
    ++v11;
    if (!v20)
    {
      int64_t v11 = v19 + 1;
      if (v19 + 1 >= v24) {
        goto LABEL_23;
      }
      unint64_t v20 = *(void *)(v23 + 8 * v11);
      if (!v20) {
        break;
      }
    }
LABEL_22:
    unint64_t v14 = (v20 - 1) & v20;
    unint64_t v16 = __clz(__rbit64(v20)) + (v11 << 6);
LABEL_9:
    unint64_t v17 = *(void *)(v3 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(void *)(v6 + 48) + v17, v2);
    uint64_t v18 = 32 * v16;
    sub_1B07CBDEC(*(void *)(v6 + 56) + v18, (uint64_t)v26);
    (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(void *)(v8 + 48) + v17, v5, v2);
    id result = sub_1B07BFE44(v26, (_OWORD *)(*(void *)(v8 + 56) + v18));
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v24)
  {
LABEL_23:
    id result = (void *)swift_release();
    uint64_t v1 = v22;
    goto LABEL_25;
  }
  unint64_t v20 = *(void *)(v23 + 8 * v21);
  if (v20)
  {
    int64_t v11 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v11 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v11 >= v24) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v23 + 8 * v11);
    ++v21;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_1B07CB6C8()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3ABA8);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_1B086A6F8();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = *v16;
    uint64_t v17 = v16[1];
    LOBYTE(v16) = *(unsigned char *)(*(void *)(v2 + 56) + v15);
    int64_t v19 = (void *)(*(void *)(v4 + 48) + 16 * v15);
    *int64_t v19 = v18;
    v19[1] = v17;
    *(unsigned char *)(*(void *)(v4 + 56) + v15) = (_BYTE)v16;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1B07CB874()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3ABA0);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_1B086A6F8();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    id result = (void *)swift_release();
LABEL_28:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v25 = v1;
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 40 * v15;
    sub_1B07BBD78(*(void *)(v2 + 56) + 40 * v15, (uint64_t)v26);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    void *v21 = v19;
    v21[1] = v18;
    sub_1B07BA8FC(v26, *(void *)(v4 + 56) + v20);
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t v1 = v25;
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1B07CBA60()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3ABB8);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_1B086A6F8();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v6 + 8 * v9);
      if (!v22) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v22 - 1) & v22;
    unint64_t v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    long long v24 = *(_OWORD *)(*(void *)(v2 + 56) + v16);
    uint64_t v20 = (void *)(*(void *)(v4 + 48) + v16);
    void *v20 = v19;
    v20[1] = v18;
    *(_OWORD *)(*(void *)(v4 + 56) + v16) = v24;
    swift_bridgeObjectRetain();
    id result = (void *)sub_1B07CBEE8(v24, *((unint64_t *)&v24 + 1));
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v13) {
    goto LABEL_26;
  }
  unint64_t v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    int64_t v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1B07CBC28()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3AB98);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_1B086A6F8();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    long long v20 = *(_OWORD *)(*(void *)(v2 + 56) + v16);
    int64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    void *v21 = v19;
    v21[1] = v18;
    *(_OWORD *)(*(void *)(v4 + 56) + v16) = v20;
    swift_bridgeObjectRetain();
    id result = (void *)swift_retain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1B07CBDEC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1B07CBE48(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1B07CBE90(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

uint64_t sub_1B07CBEE8(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

uint64_t sub_1B07CBF5C()
{
  uint64_t v0 = sub_1B0869078();
  __swift_allocate_value_buffer(v0, qword_1E9B3A3F0);
  __swift_project_value_buffer(v0, (uint64_t)qword_1E9B3A3F0);
  return sub_1B0869018();
}

UIColor __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> UIColor.init(htmlColor:)(Swift::String htmlColor)
{
  uint64_t v2 = v1;
  object = htmlColor._object;
  uint64_t countAndFlagsBits = htmlColor._countAndFlagsBits;
  uint64_t v5 = sub_1B0869078();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = countAndFlagsBits;
  uint64_t v68 = (uint64_t)object;
  if (qword_1E9B3A410 != -1) {
    swift_once();
  }
  __swift_project_value_buffer(v5, (uint64_t)qword_1E9B3A3F0);
  sub_1B0869058();
  sub_1B07B862C();
  sub_1B086A408();
  char v10 = v9;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  if ((v10 & 1) == 0)
  {
    uint64_t v11 = sub_1B0869EF8();
    int64_t v13 = v12;
    uint64_t v14 = MEMORY[0x1B3E97720](v11);
    uint64_t v16 = v15;
    swift_bridgeObjectRelease();
    sub_1B07CC5E4();
    swift_allocError();
    *(void *)uint64_t v17 = v14;
    *(void *)(v17 + 8) = v16;
    *(void *)(v17 + 16) = countAndFlagsBits;
    *(void *)(v17 + 24) = object;
    *(unsigned char *)(v17 + 32) = 0;
    goto LABEL_11;
  }
  if (sub_1B0869ED8()) {
    unint64_t v18 = sub_1B0869E58();
  }
  else {
    unint64_t v18 = 15;
  }
  swift_bridgeObjectRetain();
  uint64_t v59 = countAndFlagsBits;
  unint64_t v19 = sub_1B07CC598(v18, countAndFlagsBits, (unint64_t)object);
  uint64_t v21 = v20;
  uint64_t v23 = v22;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v24 = sub_1B086A3D8();
  swift_bridgeObjectRelease();
  uint64_t v25 = v24 - 3;
  if ((unint64_t)(v24 - 3) >= 6 || ((0x2Bu >> v25) & 1) == 0)
  {
    int64_t v13 = (objc_class *)sub_1B086A3D8();
    swift_bridgeObjectRelease();
    sub_1B07CC5E4();
    swift_allocError();
    uint64_t v26 = v59;
    *(void *)uint64_t v27 = v13;
    *(void *)(v27 + 8) = v26;
    *(void *)(v27 + 16) = object;
    *(void *)(v27 + 24) = 0;
    *(unsigned char *)(v27 + 32) = 1;
LABEL_11:
    swift_willThrow();
    return (UIColor)v13;
  }
  uint64_t v65 = v2;
  uint64_t v58 = object;
  uint64_t v29 = 8 * v25;
  double v30 = *(double *)((char *)&unk_1B086D588 + v29);
  uint64_t v31 = *(void *)((char *)&unk_1B086D5B8 + v29);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB595960);
  initeCGFloat d = swift_initStackObject();
  uint64_t v33 = 0;
  unint64_t v34 = 0;
  *(_OWORD *)(inited + 16) = xmmword_1B086D510;
  *(void *)(inited + 32) = 0;
  id v57 = (double *)(inited + 32);
  *(void *)(inited + 40) = 0;
  *(void *)(inited + 48) = 0;
  *(void *)(inited + 56) = 0x3FF0000000000000;
  uint64_t v63 = v23;
  uint64_t v64 = inited;
  unint64_t v61 = v19;
  uint64_t v62 = v21;
  uint64_t v60 = v31;
  do
  {
    uint64_t v35 = sub_1B086A3C8();
    if (v36) {
      break;
    }
    unint64_t v37 = v35;
    result.super.Class isa = (Class)sub_1B086A3C8();
    if (v38) {
      break;
    }
    if ((unint64_t)result.super.isa >> 14 < v37 >> 14)
    {
      __break(1u);
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    uint64_t v41 = sub_1B086A3E8();
    unint64_t v43 = v42;
    unint64_t v44 = v39;
    unint64_t v45 = v40;
    if ((v41 ^ v42) < 0x4000) {
      goto LABEL_35;
    }
    if ((v40 & 0x1000000000000000) != 0)
    {
      swift_bridgeObjectRetain();
      uint64_t v48 = (uint64_t)sub_1B07CC638(v41, v43, v44, v45, 16);
      char v51 = v50;
      swift_bridgeObjectRelease();
      if (v51) {
        goto LABEL_35;
      }
    }
    else
    {
      if ((v40 & 0x2000000000000000) != 0)
      {
        uint64_t v67 = v39;
        uint64_t v68 = v40 & 0xFFFFFFFFFFFFFFLL;
        uint64_t v46 = &v67;
      }
      else if ((v39 & 0x1000000000000000) != 0)
      {
        uint64_t v46 = (void *)((v40 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else
      {
        uint64_t v46 = (void *)sub_1B086A648();
      }
      uint64_t v47 = v65;
      uint64_t v48 = sub_1B07CCEFC((uint64_t)v46, v41, v43, v44, v45, 16);
      uint64_t v65 = v47;
      char v66 = v49 & 1;
      if (v49)
      {
LABEL_35:
        swift_bridgeObjectRelease();
        int64_t v13 = (objc_class *)MEMORY[0x1B3E97720](v41, v43, v44, v45);
        uint64_t v54 = v53;
        swift_bridgeObjectRelease();
        sub_1B07CC5E4();
        swift_allocError();
        *(void *)uint64_t v55 = v13;
        *(void *)(v55 + 8) = v54;
        unint64_t v56 = v58;
        *(void *)(v55 + 16) = v59;
        *(void *)(v55 + 24) = v56;
        *(unsigned char *)(v55 + 32) = 2;
        swift_willThrow();
        swift_setDeallocating();
        return (UIColor)v13;
      }
    }
    result.super.Class isa = (Class)swift_bridgeObjectRelease();
    initeCGFloat d = v64;
    if (v34 >= *(void *)(v64 + 16)) {
      goto LABEL_37;
    }
    *(double *)(v64 + 8 * v34 + 32) = (double)v48 / v30;
    v33 += v60;
    ++v34;
  }
  while (v34 != 4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result.super.Class isa = (Class)objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  unint64_t v52 = *(void *)(inited + 16);
  if (!v52) {
    goto LABEL_38;
  }
  if (v52 == 1)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  if (v52 < 3)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  if (v52 != 3)
  {
    int64_t v13 = [(objc_class *)result.super.isa initWithRed:*v57 green:*(double *)(inited + 40) blue:*(double *)(inited + 48) alpha:*(double *)(inited + 56)];
    swift_setDeallocating();
    return (UIColor)v13;
  }
LABEL_41:
  __break(1u);
  return result;
}

unint64_t sub_1B07CC598(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    uint64_t v3 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (4 * v3 >= result >> 14) {
    return sub_1B0869EF8();
  }
  __break(1u);
  return result;
}

unint64_t sub_1B07CC5E4()
{
  unint64_t result = qword_1E9B3ABC0;
  if (!qword_1E9B3ABC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3ABC0);
  }
  return result;
}

unsigned __int8 *sub_1B07CC638(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = a1;
  uint64_t v16 = a2;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  sub_1B07CD5E8();
  swift_bridgeObjectRetain();
  uint64_t v7 = sub_1B0869EE8();
  unint64_t v8 = v6;
  if ((v6 & 0x1000000000000000) == 0)
  {
    if ((v6 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v10 = HIBYTE(v8) & 0xF;
    uint64_t v15 = v7;
    uint64_t v16 = v8 & 0xFFFFFFFFFFFFFFLL;
    char v9 = (unsigned __int8 *)&v15;
    goto LABEL_7;
  }
  uint64_t v7 = sub_1B07CC9A8();
  unint64_t v12 = v11;
  swift_bridgeObjectRelease();
  unint64_t v8 = v12;
  if ((v12 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v7 & 0x1000000000000000) != 0)
  {
    char v9 = (unsigned __int8 *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v10 = v7 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    char v9 = (unsigned __int8 *)sub_1B086A648();
  }
LABEL_7:
  int64_t v13 = sub_1B07CC72C(v9, v10, a5);
  swift_bridgeObjectRelease();
  return v13;
}

unsigned __int8 *sub_1B07CC72C(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        uint64_t v5 = a2 - 1;
        if (a2 != 1)
        {
          unsigned __int8 v6 = a3 + 48;
          unsigned __int8 v7 = a3 + 55;
          unsigned __int8 v8 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v6 = 58;
          }
          else
          {
            unsigned __int8 v8 = 97;
            unsigned __int8 v7 = 65;
          }
          if (result)
          {
            uint64_t v9 = 0;
            for (id i = result + 1; ; ++i)
            {
              unsigned int v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  uint64_t v13 = 0;
                  if (v11 < 0x61 || v11 >= v8) {
                    return (unsigned __int8 *)v13;
                  }
                  char v12 = -87;
                }
                else
                {
                  char v12 = -55;
                }
              }
              else
              {
                char v12 = -48;
              }
              uint64_t v14 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
                return 0;
              }
              uint64_t v9 = v14 - (v11 + v12);
              if (__OFSUB__(v14, (v11 + v12))) {
                return 0;
              }
              if (!--v5) {
                return (unsigned __int8 *)v9;
              }
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_66;
    }
    if (a2)
    {
      unsigned __int8 v23 = a3 + 48;
      unsigned __int8 v24 = a3 + 55;
      unsigned __int8 v25 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v23 = 58;
      }
      else
      {
        unsigned __int8 v25 = 97;
        unsigned __int8 v24 = 65;
      }
      if (result)
      {
        uint64_t v26 = 0;
        do
        {
          unsigned int v27 = *result;
          if (v27 < 0x30 || v27 >= v23)
          {
            if (v27 < 0x41 || v27 >= v24)
            {
              uint64_t v13 = 0;
              if (v27 < 0x61 || v27 >= v25) {
                return (unsigned __int8 *)v13;
              }
              char v28 = -87;
            }
            else
            {
              char v28 = -55;
            }
          }
          else
          {
            char v28 = -48;
          }
          uint64_t v29 = v26 * a3;
          if ((unsigned __int128)(v26 * (__int128)a3) >> 64 != (v26 * a3) >> 63) {
            return 0;
          }
          uint64_t v26 = v29 + (v27 + v28);
          if (__OFADD__(v29, (v27 + v28))) {
            return 0;
          }
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v29 + (v27 + v28));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_66:
    __break(1u);
    return result;
  }
  uint64_t v15 = a2 - 1;
  if (a2 == 1) {
    return 0;
  }
  unsigned __int8 v16 = a3 + 48;
  unsigned __int8 v17 = a3 + 55;
  unsigned __int8 v18 = a3 + 87;
  if (a3 > 10)
  {
    unsigned __int8 v16 = 58;
  }
  else
  {
    unsigned __int8 v18 = 97;
    unsigned __int8 v17 = 65;
  }
  if (!result) {
    return 0;
  }
  uint64_t v9 = 0;
  unint64_t v19 = result + 1;
  do
  {
    unsigned int v20 = *v19;
    if (v20 < 0x30 || v20 >= v16)
    {
      if (v20 < 0x41 || v20 >= v17)
      {
        uint64_t v13 = 0;
        if (v20 < 0x61 || v20 >= v18) {
          return (unsigned __int8 *)v13;
        }
        char v21 = -87;
      }
      else
      {
        char v21 = -55;
      }
    }
    else
    {
      char v21 = -48;
    }
    uint64_t v22 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
      return 0;
    }
    uint64_t v9 = v22 + (v20 + v21);
    if (__OFADD__(v22, (v20 + v21))) {
      return 0;
    }
    ++v19;
    --v15;
  }
  while (v15);
  return (unsigned __int8 *)v9;
}

uint64_t sub_1B07CC9A8()
{
  unint64_t v0 = sub_1B0869EF8();
  uint64_t v4 = sub_1B07CCA28(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_1B07CCA28(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    unint64_t v9 = sub_1B07CCB80(a1, a2, a3, a4);
    if (v9)
    {
      uint64_t v10 = v9;
      unsigned int v11 = sub_1B07CCC80(v9, 0);
      unint64_t v12 = sub_1B07CCCE8((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v12 != v10)
      {
        __break(1u);
LABEL_11:
        sub_1B086A648();
LABEL_4:
        JUMPOUT(0x1B3E97750);
      }
    }
    else
    {
      unsigned int v11 = (void *)MEMORY[0x1E4FBC860];
    }
    uint64_t v13 = MEMORY[0x1B3E97750](v11 + 4, v11[2]);
    swift_release();
    return v13;
  }
  else
  {
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return MEMORY[0x1B3E97750]((char *)v14 + (a1 >> 16), (a2 >> 16) - (a1 >> 16));
  }
}

unint64_t sub_1B07CCB80(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7 = result;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    unint64_t result = sub_1B08176B4(result, a3, a4);
    unint64_t v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    unint64_t result = sub_1B08176B4(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0) {
      return (a2 >> 16) - (v7 >> 16);
    }
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  unint64_t v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0) {
    unint64_t v10 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v10 < v7 >> 16)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v10 < a2 >> 16)
  {
LABEL_17:
    __break(1u);
    return result;
  }

  return sub_1B0869E98();
}

void *sub_1B07CCC80(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E9B3ABD0);
  uint64_t v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  void v4[3] = 2 * v5 - 64;
  return v4;
}

unint64_t sub_1B07CCCE8(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t v9 = (void *)result;
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
    unint64_t v12 = a4;
    uint64_t v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0) {
    goto LABEL_36;
  }
  unint64_t v10 = a5 >> 14;
  unint64_t v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    uint64_t v11 = 0;
    unint64_t v12 = a4;
LABEL_33:
    *uint64_t v9 = a4;
    v9[1] = a5;
    _OWORD v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  uint64_t v11 = 0;
  uint64_t v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0) {
    LOBYTE(v14) = 1;
  }
  uint64_t v15 = 4 << v14;
  uint64_t v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0) {
    uint64_t v16 = a6 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v23 = v16;
  uint64_t v26 = a3 - 1;
  unint64_t v12 = a4;
  while (1)
  {
    unint64_t v17 = v12 & 0xC;
    unint64_t result = v12;
    if (v17 == v15) {
      unint64_t result = sub_1B08176B4(v12, a6, a7);
    }
    if (result >> 14 < v27 || result >> 14 >= v10) {
      break;
    }
    if ((a7 & 0x1000000000000000) != 0)
    {
      unint64_t result = sub_1B0869EA8();
      char v19 = result;
      if (v17 != v15) {
        goto LABEL_23;
      }
    }
    else
    {
      unint64_t v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        char v19 = *((unsigned char *)v28 + v18);
        if (v17 != v15) {
          goto LABEL_23;
        }
      }
      else
      {
        unint64_t result = v21;
        if ((a6 & 0x1000000000000000) == 0) {
          unint64_t result = sub_1B086A648();
        }
        char v19 = *(unsigned char *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0) {
            goto LABEL_24;
          }
          goto LABEL_27;
        }
      }
    }
    unint64_t result = sub_1B08176B4(v12, a6, a7);
    unint64_t v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16) {
      goto LABEL_35;
    }
    unint64_t v12 = sub_1B0869E78();
LABEL_29:
    *(unsigned char *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      uint64_t v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14) {
      goto LABEL_33;
    }
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_1B07CCEFC(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  unint64_t v10 = a2;
  uint64_t v11 = result;
  uint64_t v12 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0) {
    LOBYTE(v12) = 1;
  }
  uint64_t v13 = 4 << v12;
  unint64_t v14 = a2 & 0xC;
  if (v14 == 4 << v12)
  {
    unint64_t result = sub_1B08176B4(a2, a4, a5);
    a2 = result;
    if ((a5 & 0x1000000000000000) == 0)
    {
LABEL_5:
      int64_t v15 = a2 >> 16;
      if (v14 != v13) {
        goto LABEL_6;
      }
      goto LABEL_14;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
    goto LABEL_5;
  }
  unint64_t v16 = a4 & 0xFFFFFFFFFFFFLL;
  if ((a5 & 0x2000000000000000) != 0) {
    unint64_t v16 = HIBYTE(a5) & 0xF;
  }
  if (v16 < a2 >> 16) {
    goto LABEL_95;
  }
  unint64_t result = sub_1B0869E98();
  int64_t v15 = result;
  if (v14 == v13)
  {
LABEL_14:
    unint64_t result = sub_1B08176B4(v10, a4, a5);
    unint64_t v10 = result;
  }
LABEL_6:
  if ((a3 & 0xC) == v13)
  {
    unint64_t result = sub_1B08176B4(a3, a4, a5);
    a3 = result;
    if ((a5 & 0x1000000000000000) == 0) {
      goto LABEL_8;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
LABEL_8:
    unint64_t result = (a3 >> 16) - (v10 >> 16);
    goto LABEL_21;
  }
  unint64_t v17 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000) == 0) {
    unint64_t v17 = a4 & 0xFFFFFFFFFFFFLL;
  }
  if (v17 < v10 >> 16) {
    goto LABEL_91;
  }
  if (v17 < a3 >> 16)
  {
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
  unint64_t result = sub_1B0869E98();
LABEL_21:
  int64_t v18 = v15 + result;
  if (__OFADD__(v15, result))
  {
    __break(1u);
    goto LABEL_90;
  }
  if (v18 < v15)
  {
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
    goto LABEL_92;
  }
  char v19 = (unsigned __int8 *)(v11 + v15);
  if (!v11) {
    char v19 = 0;
  }
  int v20 = *v19;
  if (v20 == 43)
  {
    if (result >= 1)
    {
      if (result != 1)
      {
        unsigned __int8 v31 = a6 + 48;
        unsigned __int8 v32 = a6 + 55;
        unsigned __int8 v33 = a6 + 87;
        if (a6 > 10)
        {
          unsigned __int8 v31 = 58;
        }
        else
        {
          unsigned __int8 v33 = 97;
          unsigned __int8 v32 = 65;
        }
        if (v19)
        {
          uint64_t v24 = 0;
          unint64_t v34 = v19 + 1;
          uint64_t v35 = result - 1;
          do
          {
            unsigned int v36 = *v34;
            if (v36 < 0x30 || v36 >= v31)
            {
              if (v36 < 0x41 || v36 >= v32)
              {
                uint64_t v29 = 0;
                if (v36 < 0x61 || v36 >= v33) {
                  return v29;
                }
                char v37 = -87;
              }
              else
              {
                char v37 = -55;
              }
            }
            else
            {
              char v37 = -48;
            }
            uint64_t v38 = v24 * a6;
            if ((unsigned __int128)(v24 * (__int128)a6) >> 64 != (v24 * a6) >> 63) {
              return 0;
            }
            uint64_t v24 = v38 + (v36 + v37);
            if (__OFADD__(v38, (v36 + v37))) {
              return 0;
            }
            ++v34;
            --v35;
          }
          while (v35);
          return v24;
        }
        return 0;
      }
      return 0;
    }
    goto LABEL_94;
  }
  if (v20 != 45)
  {
    if (v18 != v15)
    {
      unsigned __int8 v39 = a6 + 48;
      unsigned __int8 v40 = a6 + 55;
      unsigned __int8 v41 = a6 + 87;
      if (a6 > 10)
      {
        unsigned __int8 v39 = 58;
      }
      else
      {
        unsigned __int8 v41 = 97;
        unsigned __int8 v40 = 65;
      }
      if (v19)
      {
        uint64_t v42 = 0;
        do
        {
          unsigned int v43 = *v19;
          if (v43 < 0x30 || v43 >= v39)
          {
            if (v43 < 0x41 || v43 >= v40)
            {
              uint64_t v29 = 0;
              if (v43 < 0x61 || v43 >= v41) {
                return v29;
              }
              char v44 = -87;
            }
            else
            {
              char v44 = -55;
            }
          }
          else
          {
            char v44 = -48;
          }
          uint64_t v45 = v42 * a6;
          if ((unsigned __int128)(v42 * (__int128)a6) >> 64 != (v42 * a6) >> 63) {
            return 0;
          }
          uint64_t v42 = v45 + (v43 + v44);
          if (__OFADD__(v45, (v43 + v44))) {
            return 0;
          }
          ++v19;
          --result;
        }
        while (result);
        return v45 + (v43 + v44);
      }
      return 0;
    }
    return 0;
  }
  if (result >= 1)
  {
    if (result != 1)
    {
      unsigned __int8 v21 = a6 + 48;
      unsigned __int8 v22 = a6 + 55;
      unsigned __int8 v23 = a6 + 87;
      if (a6 > 10)
      {
        unsigned __int8 v21 = 58;
      }
      else
      {
        unsigned __int8 v23 = 97;
        unsigned __int8 v22 = 65;
      }
      if (v19)
      {
        uint64_t v24 = 0;
        unsigned __int8 v25 = v19 + 1;
        uint64_t v26 = result - 1;
        while (1)
        {
          unsigned int v27 = *v25;
          if (v27 < 0x30 || v27 >= v21)
          {
            if (v27 < 0x41 || v27 >= v22)
            {
              uint64_t v29 = 0;
              if (v27 < 0x61 || v27 >= v23) {
                return v29;
              }
              char v28 = -87;
            }
            else
            {
              char v28 = -55;
            }
          }
          else
          {
            char v28 = -48;
          }
          uint64_t v30 = v24 * a6;
          if ((unsigned __int128)(v24 * (__int128)a6) >> 64 != (v24 * a6) >> 63) {
            return 0;
          }
          uint64_t v24 = v30 - (v27 + v28);
          if (__OFSUB__(v30, (v27 + v28))) {
            return 0;
          }
          ++v25;
          if (!--v26) {
            return v24;
          }
        }
      }
      return 0;
    }
    return 0;
  }
LABEL_93:
  __break(1u);
LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
  return result;
}

uint64_t sub_1B07CD324(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a5 == 2)
  {
LABEL_4:
    swift_bridgeObjectRetain();
    goto LABEL_5;
  }
  if (a5 != 1)
  {
    if (a5) {
      return result;
    }
    goto LABEL_4;
  }
LABEL_5:

  return swift_bridgeObjectRetain();
}

uint64_t _s14HTMLColorErrorOwxx(uint64_t a1)
{
  return sub_1B07CD39C(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
}

uint64_t sub_1B07CD39C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a5 == 2)
  {
LABEL_4:
    swift_bridgeObjectRelease();
    goto LABEL_5;
  }
  if (a5 != 1)
  {
    if (a5) {
      return result;
    }
    goto LABEL_4;
  }
LABEL_5:

  return swift_bridgeObjectRelease();
}

uint64_t _s14HTMLColorErrorOwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(unsigned char *)(a2 + 32);
  sub_1B07CD324(*(void *)a2, v4, v5, v6, v7);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  return a1;
}

uint64_t _s14HTMLColorErrorOwca(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(unsigned char *)(a2 + 32);
  sub_1B07CD324(*(void *)a2, v4, v5, v6, v7);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  char v12 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v7;
  sub_1B07CD39C(v8, v9, v10, v11, v12);
  return a1;
}

__n128 __swift_memcpy33_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t _s14HTMLColorErrorOwta(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  long long v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  char v9 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v3;
  sub_1B07CD39C(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t _s14HTMLColorErrorOwet(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t _s14HTMLColorErrorOwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)__n128 result = a2 - 254;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 32) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1B07CD5C8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32);
}

uint64_t sub_1B07CD5D0(uint64_t result, char a2)
{
  *(unsigned char *)(result + 32) = a2;
  return result;
}

ValueMetadata *type metadata accessor for UIColor.HTMLColorError()
{
  return &type metadata for UIColor.HTMLColorError;
}

unint64_t sub_1B07CD5E8()
{
  unint64_t result = qword_1E9B3ABC8;
  if (!qword_1E9B3ABC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3ABC8);
  }
  return result;
}

uint64_t VerticalSpaceMeasurable.init(_:multiplier:)@<X0>(long long *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB595F50);
  uint64_t v6 = swift_allocObject();
  uint64_t result = sub_1B07BA8FC(a1, v6 + 16);
  *(void *)a2 = v6;
  *(double *)(a2 + 8) = a3;
  return result;
}

uint64_t VerticalSpaceMeasurable.verticalSpace.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1 + 16;
  swift_beginAccess();
  return sub_1B07BBD78(v3, a1);
}

double VerticalSpaceMeasurable.multiplier.getter()
{
  return *(double *)(v0 + 8);
}

double VerticalSpaceMeasurable.measurements(fitting:in:)(uint64_t a1, double a2)
{
  uint64_t v5 = sub_1B086A868();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  char v9 = &v23[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v7);
  uint64_t v11 = &v23[-v10];
  double v12 = *(double *)(v2 + 8);
  uint64_t v13 = *(void *)v2 + 16;
  swift_beginAccess();
  sub_1B07BBD78(v13, (uint64_t)v24);
  uint64_t v14 = v25;
  uint64_t v15 = v26;
  __swift_project_boxed_opaque_existential_1(v24, v25);
  double v16 = (*(double (**)(uint64_t, uint64_t, uint64_t))(v15 + 8))(a1, v14, v15);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
  double v17 = v12 * v16;
  if (qword_1EB596548 != -1) {
    swift_once();
  }
  uint64_t v18 = __swift_project_value_buffer(v5, (uint64_t)qword_1EB5964D8);
  char v19 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v6 + 16);
  v19(v11, v18, v5);
  *(double *)uint64_t v24 = v17;
  v19(v9, (uint64_t)v11, v5);
  int v20 = (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 88))(v9, v5);
  if (v20 == *MEMORY[0x1E4FBBEA0]
    || v20 == *MEMORY[0x1E4FBBE98]
    || v20 == *MEMORY[0x1E4FBBEA8]
    || v20 == *MEMORY[0x1E4FBBEB0]
    || v20 == *MEMORY[0x1E4FBBE88]
    || v20 == *MEMORY[0x1E4FBBE90])
  {
    (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v11, v5);
  }
  else
  {
    sub_1B086A138();
    unsigned __int8 v22 = *(void (**)(unsigned char *, uint64_t))(v6 + 8);
    v22(v11, v5);
    v22(v9, v5);
  }
  return a2;
}

double sub_1B07CDA24(uint64_t a1, double a2)
{
  return VerticalSpaceMeasurable.measurements(fitting:in:)(a1, a2);
}

void *initializeBufferWithCopyOfBuffer for VerticalSpaceMeasurable(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

uint64_t destroy for VerticalSpaceMeasurable()
{
  return swift_release();
}

void *assignWithCopy for VerticalSpaceMeasurable(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  return a1;
}

void *assignWithTake for VerticalSpaceMeasurable(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  return a1;
}

uint64_t getEnumTagSinglePayload for VerticalSpaceMeasurable(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for VerticalSpaceMeasurable(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for VerticalSpaceMeasurable()
{
  return &type metadata for VerticalSpaceMeasurable;
}

uint64_t static ObjCFunctions.placeable(for:)(void *a1)
{
  return sub_1B07CDBF4(a1, &qword_1E9B3ABE0, 0x1E4FB14D0, (uint64_t)&protocol witness table for UIButton);
}

{
  return sub_1B07CDBF4(a1, &qword_1E9B3ABE8, 0x1E4FB1838, (uint64_t)&protocol witness table for UIImageView);
}

{
  return sub_1B07CDBF4(a1, (unint64_t *)&unk_1E9B3ABF0, 0x1E4FB1930, (uint64_t)&protocol witness table for UILabel);
}

uint64_t sub_1B07CDBF4(void *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  v15[5] = &unk_1F096D278;
  uint64_t v7 = swift_dynamicCastObjCProtocolConditional();
  if (v7)
  {
    uint64_t v8 = v7;
    id v9 = a1;
  }
  else
  {
    v15[3] = sub_1B07C7B80(0, a2);
    v15[4] = a4;
    v15[0] = a1;
    uint64_t v10 = (objc_class *)type metadata accessor for _PlaceableAsJUPlaceable();
    id v11 = objc_allocWithZone(v10);
    sub_1B07BBD78((uint64_t)v15, (uint64_t)v11 + OBJC_IVAR____TtC5JetUI23_PlaceableAsJUPlaceable_base);
    v14.receiver = v11;
    v14.super_class = v10;
    id v12 = a1;
    uint64_t v8 = (uint64_t)objc_msgSendSuper2(&v14, sel_init);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  }
  return v8;
}

id sub_1B07CDCE8(uint64_t a1, uint64_t a2, void *a3, unint64_t *a4, uint64_t a5, uint64_t a6)
{
  _OWORD v17[5] = &unk_1F096D278;
  uint64_t v9 = swift_dynamicCastObjCProtocolConditional();
  if (v9)
  {
    id v10 = (id)v9;
    id v11 = a3;
  }
  else
  {
    void v17[3] = sub_1B07C7B80(0, a4);
    v17[4] = a6;
    v17[0] = a3;
    id v12 = (objc_class *)type metadata accessor for _PlaceableAsJUPlaceable();
    id v13 = objc_allocWithZone(v12);
    sub_1B07BBD78((uint64_t)v17, (uint64_t)v13 + OBJC_IVAR____TtC5JetUI23_PlaceableAsJUPlaceable_base);
    v16.receiver = v13;
    v16.super_class = v12;
    id v14 = a3;
    id v10 = objc_msgSendSuper2(&v16, sel_init);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  }

  return v10;
}

uint64_t HorizontalStack.Alignment._verticalLayoutAlignment.getter@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = 0x3030201u >> (8 * result);
  return result;
}

uint64_t HorizontalStack.Alignment.hash(into:)()
{
  return sub_1B086A968();
}

BOOL static HorizontalStack.Alignment.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

uint64_t HorizontalStack.Alignment.hashValue.getter()
{
  return sub_1B086A998();
}

void HorizontalStack.Properties.init()(uint64_t a1@<X8>)
{
  *(void *)(a1 + 24) = &type metadata for ZeroDimension;
  *(void *)(a1 + 32) = &protocol witness table for ZeroDimension;
  *(void *)(a1 + 64) = &type metadata for ZeroDimension;
  *(void *)(a1 + 72) = &protocol witness table for ZeroDimension;
  *(_WORD *)(a1 + 80) = 0;
}

uint64_t HorizontalStack.Properties.leadingSpacing.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1B07BBD78(v1, a1);
}

uint64_t (*HorizontalStack.Properties.leadingSpacing.modify())()
{
  return nullsub_1;
}

uint64_t HorizontalStack.Properties.trailingSpacing.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1B07BBD78(v1 + 40, a1);
}

uint64_t (*HorizontalStack.Properties.trailingSpacing.modify())()
{
  return nullsub_1;
}

uint64_t HorizontalStack.Properties.alignment.getter()
{
  return *(unsigned __int8 *)(v0 + 80);
}

uint64_t (*HorizontalStack.Properties.alignment.modify())()
{
  return nullsub_1;
}

uint64_t HorizontalStack.Properties.shouldSkip.getter()
{
  return *(unsigned __int8 *)(v0 + 81);
}

uint64_t HorizontalStack.Properties.shouldSkip.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 81) = result;
  return result;
}

uint64_t (*HorizontalStack.Properties.shouldSkip.modify())()
{
  return nullsub_1;
}

double sub_1B07CDFC8@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 48);
  double result = *(double *)(v1 + 56);
  long long v4 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v1 + 32);
  *(void *)(a1 + 48) = v2;
  *(double *)(a1 + 56) = result;
  return result;
}

uint64_t sub_1B07CDFEC()
{
  return 0;
}

uint64_t sub_1B07CDFF4()
{
  return 2;
}

void *sub_1B07CDFFC()
{
  long long v1 = v0[1];
  v5[0] = *v0;
  v5[1] = v1;
  long long v2 = v0[3];
  v5[2] = v0[2];
  void v5[3] = v2;
  uint64_t v3 = sub_1B084EF50(v5);
  sub_1B07D051C((uint64_t)v5);
  return v3;
}

long long *sub_1B07CE048(long long *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B084CB5C(a1, a2, a3);
}

uint64_t sub_1B07CE084()
{
  return sub_1B0869F28();
}

unint64_t sub_1B07CE0A8()
{
  return 0xD00000000000005ALL;
}

uint64_t HorizontalStack.adding(_:with:)@<X0>(uint64_t a1@<X0>, void (*a2)(_OWORD *)@<X1>, uint64_t a3@<X8>)
{
  sub_1B07CEBE0(v3, a3);
  return HorizontalStack.add(_:with:)(a1, a2);
}

uint64_t HorizontalStack.insert(_:at:with:)(uint64_t a1, int64_t a2, void (*a3)(unsigned char *))
{
  sub_1B07BBD78(a1, (uint64_t)v22);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB595770);
  if (swift_dynamicCast())
  {
    long long v10 = v17;
    long long v11 = v18;
    long long v12 = v19;
    *(void *)&long long v13 = v20;
    long long v8 = v15;
    long long v9 = v16;
    if ((BYTE8(v17) & 1) == 0) {
      sub_1B08699A8();
    }
    sub_1B07CEB8C((uint64_t)&v8);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
  sub_1B07BD678(v3, (uint64_t)v22);
  if (a3) {
    a3(v22);
  }
  sub_1B07BBD78(a1, (uint64_t)&v15);
  uint64_t result = sub_1B07BD678((uint64_t)v22, (uint64_t)&v17 + 8);
  if (*(void *)(*(void *)(v3 + 88) + 16) < a2)
  {
    __break(1u);
  }
  else if ((a2 & 0x8000000000000000) == 0)
  {
    long long v12 = v19;
    long long v13 = v20;
    v14[0] = v21[0];
    *(_OWORD *)((char *)v14 + 10) = *(_OWORD *)((char *)v21 + 10);
    long long v8 = v15;
    long long v9 = v16;
    long long v10 = v17;
    long long v11 = v18;
    sub_1B07CF9F4(a2, a2, (uint64_t)&v8);
    return sub_1B07BD9F8((uint64_t)v22);
  }
  __break(1u);
  return result;
}

uint64_t HorizontalStack.inserting(_:at:with:)@<X0>(uint64_t a1@<X0>, int64_t a2@<X1>, void (*a3)(unsigned char *)@<X2>, uint64_t a4@<X8>)
{
  sub_1B07CEBE0(v4, a4);
  return HorizontalStack.insert(_:at:with:)(a1, a2, a3);
}

void HorizontalStack.layout(relativeTo:with:)(void *a1@<X0>, uint64_t a2@<X8>, CGFloat a3@<D0>, CGFloat a4@<D1>, CGFloat a5@<D2>, CGFloat a6@<D3>)
{
  uint64_t v12 = *(void *)(v6 + 88);
  id v13 = a1;
  swift_bridgeObjectRetain();
  v15.origin.CGFloat x = a3;
  v15.origin.CGFloat y = a4;
  v15.size.double width = a5;
  v15.size.double height = a6;
  CGFloat MinX = CGRectGetMinX(v15);
  *(CGFloat *)a2 = a3;
  *(CGFloat *)(a2 + 8) = a4;
  *(CGFloat *)(a2 + 16) = a5;
  *(CGFloat *)(a2 + 24) = a6;
  *(void *)(a2 + 32) = v13;
  *(void *)(a2 + 40) = v12;
  *(void *)(a2 + 48) = 0;
  *(CGFloat *)(a2 + 56) = MinX;
}

uint64_t sub_1B07CE390@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  sub_1B07BBD78(a1, (uint64_t)v13);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB595770);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB595748);
  if (swift_dynamicCast())
  {
    sub_1B07BA8FC(v11, (uint64_t)v14);
    uint64_t v6 = v15;
    uint64_t v7 = v16;
    __swift_project_boxed_opaque_existential_1(v14, v15);
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t, uint64_t))(v7 + 8))(v13, a2, v6, v7);
    unsigned int v8 = 0x3030201u >> (8 * *(unsigned char *)(a1 + 120));
    *a3 = v13[0];
    a3[1] = v8;
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  }
  else
  {
    uint64_t v12 = 0;
    memset(v11, 0, sizeof(v11));
    uint64_t result = sub_1B07BBE14((uint64_t)v11, &qword_1EB595750);
    unsigned int v10 = 0x3030201u >> (8 * *(unsigned char *)(a1 + 120));
    *a3 = 0;
    a3[1] = v10;
  }
  return result;
}

JetUI::_LayoutAlignment __swiftcall HorizontalStack._layoutAlignment(with:)(UITraitCollection with)
{
  uint64_t v3 = v1;
  uint64_t v4 = *(void *)(v2 + 88);
  if (*(void *)(v4 + 16))
  {
    Class isa = with.super.isa;
    sub_1B07B9258(v4 + 32, (uint64_t)v29, &qword_1EB595728);
    LOWORD(with.super.isa) = sub_1B07CE390((uint64_t)v29, (uint64_t)isa, &v27);
    unint64_t v6 = *(void *)(v4 + 16);
    unint64_t v7 = v6 != 0;
    unint64_t v8 = v6 - v7;
    if (v6 == v7)
    {
      LOBYTE(v9) = v27;
      LOBYTE(v10) = v28;
LABEL_17:
      LOWORD(with.super.isa) = sub_1B07BBE14((uint64_t)v29, &qword_1EB595728);
      unsigned char *v3 = v9;
      v3[1] = v10;
      return (JetUI::_LayoutAlignment)with.super.isa;
    }
    if (v6 > v7)
    {
      Class v18 = isa;
      int v9 = v27;
      int v10 = v28;
      swift_bridgeObjectRetain();
      uint64_t v12 = v4 + (v7 << 7) + 32;
      do
      {
        sub_1B07B9258(v12, (uint64_t)v25, &qword_1EB595728);
        sub_1B07BBD78((uint64_t)v25, (uint64_t)v21);
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EB595770);
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EB595748);
        if (swift_dynamicCast())
        {
          sub_1B07BA8FC(v19, (uint64_t)v22);
          uint64_t v17 = v23;
          uint64_t v16 = v24;
          __swift_project_boxed_opaque_existential_1(v22, v23);
          (*(void (**)(void *__return_ptr, Class, uint64_t, uint64_t))(v16 + 8))(v21, v18, v17, v16);
          int v13 = LOBYTE(v21[0]);
          char v14 = v26;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
        }
        else
        {
          uint64_t v20 = 0;
          memset(v19, 0, sizeof(v19));
          sub_1B07BBE14((uint64_t)v19, &qword_1EB595750);
          int v13 = 0;
          char v14 = v26;
        }
        unsigned int v15 = 0x3030201u >> (8 * v14);
        sub_1B07BBE14((uint64_t)v25, &qword_1EB595728);
        if (v13 != v9) {
          int v9 = 0;
        }
        if (v10 != v15) {
          int v10 = 0;
        }
        v12 += 128;
        --v8;
      }
      while (v8);
      swift_bridgeObjectRelease();
      goto LABEL_17;
    }
    __break(1u);
  }
  else
  {
    unsigned int v11 = 0x3030201u >> (8 * *(unsigned char *)(v2 + 80));
    unsigned char *v3 = 0;
    v3[1] = v11;
  }
  return (JetUI::_LayoutAlignment)with.super.isa;
}

void sub_1B07CE6E0(void *a1@<X0>, uint64_t a2@<X8>, CGFloat a3@<D0>, CGFloat a4@<D1>, CGFloat a5@<D2>, CGFloat a6@<D3>)
{
  uint64_t v12 = *(void *)(v6 + 88);
  id v13 = a1;
  swift_bridgeObjectRetain();
  v15.origin.CGFloat x = a3;
  v15.origin.CGFloat y = a4;
  v15.size.double width = a5;
  v15.size.double height = a6;
  CGFloat MinX = CGRectGetMinX(v15);
  *(CGFloat *)a2 = a3;
  *(CGFloat *)(a2 + 8) = a4;
  *(CGFloat *)(a2 + 16) = a5;
  *(CGFloat *)(a2 + 24) = a6;
  *(void *)(a2 + 32) = v13;
  *(void *)(a2 + 40) = v12;
  *(void *)(a2 + 48) = 0;
  *(CGFloat *)(a2 + 56) = MinX;
}

char *sub_1B07CE768(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EB595678);
    int v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    int v10 = (char *)MEMORY[0x1E4FBC860];
  }
  id v13 = v10 + 32;
  char v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1B07CE86C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3A560);
    int v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    int v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  id v13 = a4 + 32;
  size_t v14 = 40 * v8;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v12, v13, v14);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, v14);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1B07CE974(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3AC88);
    int v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 96);
  }
  else
  {
    int v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  id v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[96 * v8]) {
      memmove(v12, v13, 96 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1B07CEA90(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EB595960);
    int v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    int v10 = (char *)MEMORY[0x1E4FBC860];
  }
  id v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_1B07CEB8C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1B07CEBE0(uint64_t a1, uint64_t a2)
{
  return a2;
}

char *sub_1B07CEC18(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3AC08);
    int v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    int v10 = (char *)MEMORY[0x1E4FBC860];
  }
  id v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *sub_1B07CED1C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3A558);
    int v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    void v10[3] = 2 * ((uint64_t)(v11 - 32) / 208);
  }
  else
  {
    int v10 = (void *)MEMORY[0x1E4FBC860];
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[26 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 208 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3A4A0);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1B07CEE58(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3AC78);
    int v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 104);
  }
  else
  {
    int v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  id v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[104 * v8]) {
      memmove(v12, v13, 104 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *sub_1B07CEF74(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EB595FC8);
    int v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    void v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    int v10 = (void *)MEMORY[0x1E4FBC860];
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[5 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 40 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EB595F48);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

size_t sub_1B07CF0AC(size_t result, int64_t a2, char a3, void *a4)
{
  char v5 = result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    id v13 = (void *)MEMORY[0x1E4FBC860];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3AC60);
  uint64_t v10 = *(void *)(type metadata accessor for DSLocalizationInfoLog() - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  id v13 = (void *)swift_allocObject();
  uint64_t result = _swift_stdlib_malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v12 == 0x8000000000000000 && v11 == -1) {
    goto LABEL_29;
  }
  void v13[2] = v8;
  void v13[3] = 2 * ((uint64_t)(result - v12) / v11);
LABEL_19:
  uint64_t v15 = *(void *)(type metadata accessor for DSLocalizationInfoLog() - 8);
  if (v5)
  {
    if (v13 < a4
      || (unint64_t v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80),
          (char *)v13 + v16 >= (char *)a4 + v16 + *(void *)(v15 + 72) * v8))
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return (size_t)v13;
}

char *sub_1B07CF280(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3AC38);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  id v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1B07CF37C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3AC30);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 29;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 2);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  id v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[4 * v8]) {
      memmove(v13, v14, 4 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 4 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1B07CF478(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3AC28);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  id v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *sub_1B07CF574(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3AC48);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    v10[2] = v8;
    void v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[2 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 16 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3AC50);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1B07CF698(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3AC40);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 56);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  id v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[56 * v8]) {
      memmove(v12, v13, 56 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1B07CF7B8(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EB596000);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 136);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  id v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[136 * v8]) {
      memmove(v12, v13, 136 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *sub_1B07CF8D0(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3AC10);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    v10[2] = v8;
    void v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 8 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3AC18);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

unint64_t sub_1B07CF9F4(unint64_t result, int64_t a2, uint64_t a3)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  char v5 = *(void **)v3;
  int64_t v6 = *(void *)(*(void *)v3 + 16);
  if (v6 < a2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  unint64_t v7 = result;
  unint64_t v8 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  int64_t v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  *(void *)uint64_t v3 = v5;
  if (!isUniquelyReferenced_nonNull_native || v10 > v5[3] >> 1)
  {
    if (v6 <= v10) {
      int64_t v13 = v6 + v9;
    }
    else {
      int64_t v13 = v6;
    }
    char v5 = sub_1B07BDB74(isUniquelyReferenced_nonNull_native, v13, 1, v5);
    *(void *)uint64_t v3 = v5;
  }
  uint64_t v14 = (uint64_t)&v5[16 * v7 + 4];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB595728);
  uint64_t result = swift_arrayDestroy();
  if (!v9) {
    goto LABEL_19;
  }
  uint64_t v15 = v5[2];
  BOOL v16 = __OFSUB__(v15, a2);
  uint64_t v17 = v15 - a2;
  if (v16) {
    goto LABEL_25;
  }
  uint64_t result = v14 + 128;
  Class v18 = &v5[16 * a2 + 4];
  size_t v19 = v17 << 7;
  if ((void *)(v14 + 128) != v18 || result >= (unint64_t)v18 + v19) {
    uint64_t result = (unint64_t)memmove((void *)result, v18, v19);
  }
  uint64_t v20 = v5[2];
  BOOL v16 = __OFADD__(v20, v9);
  uint64_t v21 = v20 + v9;
  if (!v16)
  {
    v5[2] = v21;
LABEL_19:
    sub_1B07B9258(a3, (uint64_t)&v5[16 * v7 + 4], &qword_1EB595728);
    return sub_1B07BBE14(a3, &qword_1E9B3AC80);
  }
LABEL_26:
  __break(1u);
  return result;
}

unint64_t sub_1B07CFB50()
{
  unint64_t result = qword_1E9B3AC00;
  if (!qword_1E9B3AC00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3AC00);
  }
  return result;
}

unint64_t sub_1B07CFBA4(uint64_t a1)
{
  unint64_t result = sub_1B07CFBCC();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1B07CFBCC()
{
  unint64_t result = qword_1E9B3A4A8;
  if (!qword_1E9B3A4A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3A4A8);
  }
  return result;
}

unint64_t sub_1B07CFC24()
{
  unint64_t result = qword_1E9B3A4B0;
  if (!qword_1E9B3A4B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3A4B0);
  }
  return result;
}

unint64_t sub_1B07CFC7C()
{
  unint64_t result = qword_1E9B3A4B8;
  if (!qword_1E9B3A4B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3A4B8);
  }
  return result;
}

uint64_t assignWithCopy for HorizontalStack(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(unsigned char *)(a1 + 81) = *(unsigned char *)(a2 + 81);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        unint64_t result = (uint64_t *)swift_release();
        uint64_t *v3 = v12;
      }
      else
      {
        int64_t v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *unint64_t result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          uint64_t *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

uint64_t assignWithTake for HorizontalStack(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(unsigned char *)(a1 + 81) = *(unsigned char *)(a2 + 81);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for HorizontalStack(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 96)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HorizontalStack(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 96) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 96) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for HorizontalStack.Alignment(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B07D0148);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HorizontalStack.Alignment()
{
  return &type metadata for HorizontalStack.Alignment;
}

uint64_t assignWithCopy for HorizontalStack.Properties(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(unsigned char *)(a1 + 81) = *(unsigned char *)(a2 + 81);
  return a1;
}

__n128 __swift_memcpy82_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for HorizontalStack.Properties(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(unsigned char *)(a1 + 81) = *(unsigned char *)(a2 + 81);
  return a1;
}

uint64_t getEnumTagSinglePayload for HorizontalStack.Properties(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 82)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HorizontalStack.Properties(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 80) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 82) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 82) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t destroy for HorizontalStack.Placements(uint64_t a1)
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for HorizontalStack.Placements(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  long long v4 = *(void **)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v5;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  id v6 = v4;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for HorizontalStack.Placements(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  long long v4 = (void *)a2[4];
  uint64_t v5 = (void *)a1[4];
  a1[4] = v4;
  id v6 = v4;

  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  return a1;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for HorizontalStack.Placements(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;

  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for HorizontalStack.Placements(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HorizontalStack.Placements(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HorizontalStack.Placements()
{
  return &type metadata for HorizontalStack.Placements;
}

uint64_t sub_1B07D051C(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 32);
  swift_bridgeObjectRelease();

  return a1;
}

unint64_t sub_1B07D054C(unint64_t result, int64_t a2, uint64_t a3)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v5 = *(void **)v3;
  int64_t v6 = *(void *)(*(void *)v3 + 16);
  if (v6 < a2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  unint64_t v7 = result;
  unint64_t v8 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  int64_t v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  *(void *)uint64_t v3 = v5;
  if (!isUniquelyReferenced_nonNull_native || v10 > v5[3] >> 1)
  {
    if (v6 <= v10) {
      int64_t v13 = v6 + v9;
    }
    else {
      int64_t v13 = v6;
    }
    uint64_t v5 = sub_1B07CED1C(isUniquelyReferenced_nonNull_native, v13, 1, v5);
    *(void *)uint64_t v3 = v5;
  }
  uint64_t v14 = (uint64_t)&v5[26 * v7 + 4];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3A4A0);
  __n128 result = swift_arrayDestroy();
  if (!v9) {
    goto LABEL_19;
  }
  uint64_t v15 = v5[2];
  BOOL v16 = __OFSUB__(v15, a2);
  uint64_t v17 = v15 - a2;
  if (v16) {
    goto LABEL_25;
  }
  __n128 result = v14 + 208;
  Class v18 = &v5[26 * a2 + 4];
  size_t v19 = 26 * v17;
  if ((void *)(v14 + 208) != v18 || result >= (unint64_t)&v18[v19]) {
    __n128 result = (unint64_t)memmove((void *)result, v18, v19 * 8);
  }
  uint64_t v20 = v5[2];
  BOOL v16 = __OFADD__(v20, v9);
  uint64_t v21 = v20 + v9;
  if (!v16)
  {
    v5[2] = v21;
LABEL_19:
    sub_1B07B9258(a3, v14, &qword_1E9B3A4A0);
    return sub_1B07BBE14(a3, &qword_1E9B3A550);
  }
LABEL_26:
  __break(1u);
  return result;
}

unint64_t sub_1B07D06B0(unint64_t result, int64_t a2, uint64_t a3)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v5 = *v3;
  int64_t v6 = *((void *)*v3 + 2);
  if (v6 < a2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  unint64_t v7 = result;
  unint64_t v8 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  int64_t v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  uint64_t *v3 = v5;
  if (!isUniquelyReferenced_nonNull_native || v10 > *((void *)v5 + 3) >> 1)
  {
    if (v6 <= v10) {
      int64_t v13 = v6 + v9;
    }
    else {
      int64_t v13 = v6;
    }
    uint64_t v5 = sub_1B07CEE58(isUniquelyReferenced_nonNull_native, v13, 1, v5);
    uint64_t *v3 = v5;
  }
  uint64_t v14 = (uint64_t)&v5[104 * v7 + 32];
  __n128 result = swift_arrayDestroy();
  if (!v9) {
    goto LABEL_19;
  }
  uint64_t v15 = *((void *)v5 + 2);
  BOOL v16 = __OFSUB__(v15, a2);
  uint64_t v17 = v15 - a2;
  if (v16) {
    goto LABEL_25;
  }
  __n128 result = v14 + 104;
  Class v18 = &v5[104 * a2 + 32];
  size_t v19 = 104 * v17;
  if ((char *)(v14 + 104) != v18 || result >= (unint64_t)&v18[v19]) {
    __n128 result = (unint64_t)memmove((void *)result, v18, v19);
  }
  uint64_t v20 = *((void *)v5 + 2);
  BOOL v16 = __OFADD__(v20, v9);
  uint64_t v21 = v20 + v9;
  if (!v16)
  {
    *((void *)v5 + 2) = v21;
LABEL_19:
    sub_1B07D0C7C(a3, (uint64_t)&v5[104 * v7 + 32]);
    return sub_1B07BBE14(a3, &qword_1E9B3AC70);
  }
LABEL_26:
  __break(1u);
  return result;
}

unint64_t sub_1B07D0804(unint64_t result, int64_t a2, uint64_t a3)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v5 = *(void **)v3;
  int64_t v6 = *(void *)(*(void *)v3 + 16);
  if (v6 < a2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  unint64_t v7 = result;
  unint64_t v8 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  int64_t v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  *(void *)uint64_t v3 = v5;
  if (!isUniquelyReferenced_nonNull_native || v10 > v5[3] >> 1)
  {
    if (v6 <= v10) {
      int64_t v13 = v6 + v9;
    }
    else {
      int64_t v13 = v6;
    }
    uint64_t v5 = sub_1B07CEF74(isUniquelyReferenced_nonNull_native, v13, 1, v5);
    *(void *)uint64_t v3 = v5;
  }
  uint64_t v14 = (uint64_t)&v5[5 * v7 + 4];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB595F48);
  __n128 result = swift_arrayDestroy();
  if (!v9) {
    goto LABEL_19;
  }
  uint64_t v15 = v5[2];
  BOOL v16 = __OFSUB__(v15, a2);
  uint64_t v17 = v15 - a2;
  if (v16) {
    goto LABEL_25;
  }
  __n128 result = v14 + 40;
  Class v18 = &v5[5 * a2 + 4];
  if ((void *)(v14 + 40) != v18 || result >= (unint64_t)&v18[5 * v17]) {
    __n128 result = (unint64_t)memmove((void *)result, v18, 40 * v17);
  }
  uint64_t v19 = v5[2];
  BOOL v16 = __OFADD__(v19, v9);
  uint64_t v20 = v19 + v9;
  if (!v16)
  {
    v5[2] = v20;
LABEL_19:
    sub_1B07BBD78(a3, v14);
    return sub_1B07BBE14(a3, &qword_1E9B3AC68);
  }
LABEL_26:
  __break(1u);
  return result;
}

unint64_t sub_1B07D0964(unint64_t result, int64_t a2, uint64_t a3)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v5 = *(void **)v3;
  int64_t v6 = *(void *)(*(void *)v3 + 16);
  if (v6 < a2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  unint64_t v7 = result;
  unint64_t v8 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  int64_t v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  *(void *)uint64_t v3 = v5;
  if (!isUniquelyReferenced_nonNull_native || v10 > v5[3] >> 1)
  {
    if (v6 <= v10) {
      int64_t v13 = v6 + v9;
    }
    else {
      int64_t v13 = v6;
    }
    uint64_t v5 = sub_1B07BDA28(isUniquelyReferenced_nonNull_native, v13, 1, v5);
    *(void *)uint64_t v3 = v5;
  }
  uint64_t v14 = (uint64_t)&v5[18 * v7 + 4];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB595730);
  __n128 result = swift_arrayDestroy();
  if (!v9) {
    goto LABEL_19;
  }
  uint64_t v15 = v5[2];
  BOOL v16 = __OFSUB__(v15, a2);
  uint64_t v17 = v15 - a2;
  if (v16) {
    goto LABEL_25;
  }
  __n128 result = v14 + 144;
  Class v18 = &v5[18 * a2 + 4];
  size_t v19 = 18 * v17;
  if ((void *)(v14 + 144) != v18 || result >= (unint64_t)&v18[v19]) {
    __n128 result = (unint64_t)memmove((void *)result, v18, v19 * 8);
  }
  uint64_t v20 = v5[2];
  BOOL v16 = __OFADD__(v20, v9);
  uint64_t v21 = v20 + v9;
  if (!v16)
  {
    v5[2] = v21;
LABEL_19:
    sub_1B07B9258(a3, v14, &qword_1EB595730);
    return sub_1B07BBE14(a3, &qword_1E9B3AC58);
  }
LABEL_26:
  __break(1u);
  return result;
}

unint64_t sub_1B07D0AC8(unint64_t result, int64_t a2, uint64_t a3)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v5 = *v3;
  int64_t v6 = *((void *)*v3 + 2);
  if (v6 < a2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  unint64_t v7 = result;
  unint64_t v8 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  int64_t v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  uint64_t *v3 = v5;
  if (!isUniquelyReferenced_nonNull_native || v10 > *((void *)v5 + 3) >> 1)
  {
    if (v6 <= v10) {
      int64_t v13 = v6 + v9;
    }
    else {
      int64_t v13 = v6;
    }
    uint64_t v5 = sub_1B07CF7B8(isUniquelyReferenced_nonNull_native, v13, 1, v5);
    uint64_t *v3 = v5;
  }
  uint64_t v14 = (uint64_t)&v5[136 * v7 + 32];
  __n128 result = swift_arrayDestroy();
  if (!v9) {
    goto LABEL_19;
  }
  uint64_t v15 = *((void *)v5 + 2);
  BOOL v16 = __OFSUB__(v15, a2);
  uint64_t v17 = v15 - a2;
  if (v16) {
    goto LABEL_25;
  }
  __n128 result = v14 + 136;
  Class v18 = &v5[136 * a2 + 32];
  if ((char *)(v14 + 136) != v18 || result >= (unint64_t)&v18[136 * v17]) {
    __n128 result = (unint64_t)memmove((void *)result, v18, 136 * v17);
  }
  uint64_t v19 = *((void *)v5 + 2);
  BOOL v16 = __OFADD__(v19, v9);
  uint64_t v20 = v19 + v9;
  if (!v16)
  {
    *((void *)v5 + 2) = v20;
LABEL_19:
    sub_1B07D0C20(a3, (uint64_t)&v5[136 * v7 + 32]);
    return sub_1B07BBE14(a3, &qword_1E9B3AC20);
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_1B07D0C20(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1B07D0C7C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t Constrain.Placements.union.getter@<X0>(uint64_t a1@<X8>)
{
  sub_1B07D0DAC(v1, (uint64_t)v15);
  Constrain.Placements.next()((uint64_t)v9);
  uint64_t result = sub_1B07D10AC((uint64_t)v15);
  if (v10)
  {
    long long v7 = v12;
    long long v8 = v11;
    uint64_t v4 = v13;
    uint64_t v5 = v14;
    uint64_t result = sub_1B07BD394((uint64_t)v9);
    *(_OWORD *)a1 = v8;
    *(_OWORD *)(a1 + 16) = v7;
    *(void *)(a1 + 32) = v4;
    *(void *)(a1 + 40) = v5;
  }
  else
  {
    if (qword_1E9B3A3E8 != -1) {
      uint64_t result = swift_once();
    }
    long long v6 = xmmword_1E9B3A5A0;
    *(_OWORD *)a1 = xmmword_1E9B3A590;
    *(_OWORD *)(a1 + 16) = v6;
    *(_OWORD *)(a1 + 32) = xmmword_1E9B3A5B0;
  }
  return result;
}

uint64_t sub_1B07D0DAC(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t Constrain.Placements.next()@<X0>(uint64_t a1@<X8>)
{
  sub_1B07BA914(v1 + 104, (uint64_t)&v46);
  if (*((void *)&v47 + 1))
  {
    sub_1B07BA8FC(&v46, (uint64_t)v53);
    sub_1B07BBE14(v1 + 104, &qword_1EB595778);
    *(_OWORD *)(v1 + 104) = 0u;
    *(_OWORD *)(v1 + 120) = 0u;
    *(void *)(v1 + 136) = 0;
    double v3 = *(double *)(v1 + 40);
    int v4 = *(unsigned __int8 *)(v1 + 48);
    double v5 = *(double *)(v1 + 56);
    int v6 = *(unsigned __int8 *)(v1 + 64);
    CGFloat v7 = *(double *)v1;
    CGFloat v8 = *(double *)(v1 + 8);
    CGFloat v9 = *(double *)(v1 + 16);
    CGFloat v10 = *(double *)(v1 + 24);
    v56.origin.CGFloat x = *(CGFloat *)v1;
    v56.origin.CGFloat y = v8;
    v56.size.double width = v9;
    v56.size.double height = v10;
    double Width = CGRectGetWidth(v56);
    unsigned __int8 v12 = v4 ^ 1;
    int v13 = (v4 ^ 1) & (Width < v3);
    double v45 = v3;
    if (v13) {
      double v14 = v3;
    }
    else {
      double v14 = Width;
    }
    if (Width > v5) {
      double Width = v5;
    }
    if (v6) {
      double Width = v14;
    }
    if (v13) {
      double v15 = v14;
    }
    else {
      double v15 = Width;
    }
    double v16 = *(double *)(v1 + 72);
    int v17 = *(unsigned __int8 *)(v1 + 80);
    double v18 = *(double *)(v1 + 88);
    char v19 = *(unsigned char *)(v1 + 96);
    v57.origin.CGFloat x = v7;
    v57.origin.CGFloat y = v8;
    v57.size.double width = v9;
    v57.size.double height = v10;
    double Height = CGRectGetHeight(v57);
    unsigned __int8 v21 = v17 ^ 1;
    int v22 = (v17 ^ 1) & (Height < v16);
    if (v22) {
      double v23 = v16;
    }
    else {
      double v23 = Height;
    }
    if (Height > v18) {
      double Height = v18;
    }
    if (v19) {
      double Height = v23;
    }
    if (v22) {
      double v24 = v23;
    }
    else {
      double v24 = Height;
    }
    uint64_t v25 = v54;
    uint64_t v26 = v55;
    __swift_project_boxed_opaque_existential_1(v53, v54);
    double v27 = (*(double (**)(void, uint64_t, uint64_t, double, double))(v26 + 8))(*(void *)(v1 + 32), v25, v26, v15, v24);
    double v29 = v28;
    double v43 = v31;
    double v44 = v30;
    v58.origin.CGFloat x = v7;
    v58.origin.CGFloat y = v8;
    v58.size.double width = v9;
    v58.size.double height = v10;
    double MinX = CGRectGetMinX(v58);
    v59.origin.CGFloat x = v7;
    v59.origin.CGFloat y = v8;
    v59.size.double width = v9;
    v59.size.double height = v10;
    double MinY = CGRectGetMinY(v59);
    double v34 = v45;
    if ((v12 & (v27 < v45)) == 0) {
      double v34 = v27;
    }
    double v35 = v5;
    if (v27 <= v5) {
      double v35 = v27;
    }
    if (v12 & (v27 < v45) | v6 & 1) {
      double v36 = v34;
    }
    else {
      double v36 = v35;
    }
    if ((v21 & (v29 < v16)) != 0) {
      double v37 = v16;
    }
    else {
      double v37 = v29;
    }
    double v38 = v18;
    if (v29 <= v18) {
      double v38 = v29;
    }
    if (v21 & (v29 < v16) | v19 & 1) {
      double v39 = v37;
    }
    else {
      double v39 = v38;
    }
    sub_1B07BBD78((uint64_t)v53, (uint64_t)v52);
    sub_1B07BBD78((uint64_t)v52, (uint64_t)&v46);
    *((void *)&v48 + 1) = floor(MinX);
    *(void *)&long long v49 = floor(MinY);
    *((void *)&v49 + 1) = ceil(v36);
    *(void *)&long long v50 = ceil(v39);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);
    *((void *)&v50 + 1) = floor(v44);
    double v51 = floor(v43);
    long long v40 = v49;
    *(_OWORD *)(a1 + 32) = v48;
    *(_OWORD *)(a1 + 48) = v40;
    long long v41 = v47;
    *(_OWORD *)a1 = v46;
    *(_OWORD *)(a1 + 16) = v41;
    *(_OWORD *)(a1 + 64) = v50;
    *(double *)(a1 + 80) = v51;
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v53);
  }
  else
  {
    uint64_t result = sub_1B07BBE14((uint64_t)&v46, &qword_1EB595778);
    *(void *)(a1 + 80) = 0;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
  }
  return result;
}

uint64_t sub_1B07D10AC(uint64_t a1)
{
  return a1;
}

__n128 sub_1B07D10E4@<Q0>(uint64_t a1@<X8>)
{
  long long v2 = *(_OWORD *)(v1 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(v1 + 96);
  *(_OWORD *)(a1 + 112) = v2;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(v1 + 128);
  long long v3 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(a1 + 48) = v3;
  long long v4 = *(_OWORD *)(v1 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(v1 + 64);
  *(_OWORD *)(a1 + 80) = v4;
  __n128 result = *(__n128 *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1B07D1110()
{
  uint64_t v1 = sub_1B084EF7C(v0);
  sub_1B07D10AC(v0);
  return v1;
}

BOOL sub_1B07D1148(double a1, double a2)
{
  return a1 < a2;
}

unint64_t sub_1B07D1154()
{
  return 0xD000000000000054;
}

unint64_t sub_1B07D1170()
{
  return 0xD000000000000056;
}

uint64_t Constrain.init(_:width:height:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, unsigned __int8 a10)
{
  char v13 = a5;
  char v15 = a3;
  int v17 = (long long *)a1;
  if (((a3 | a5) & 1) == 0)
  {
    unsigned __int8 v21 = &v20;
    MEMORY[0x1F4188790](a1);
    a1 = sub_1B0869BC8();
  }
  if (((a7 | a10) & 1) == 0)
  {
    unsigned __int8 v21 = &v20;
    MEMORY[0x1F4188790](a1);
    sub_1B0869BC8();
  }
  uint64_t result = sub_1B07BA8FC(v17, a9);
  *(void *)(a9 + 40) = a2;
  *(unsigned char *)(a9 + 48) = v15 & 1;
  *(void *)(a9 + 56) = a4;
  *(unsigned char *)(a9 + 64) = v13 & 1;
  *(void *)(a9 + 72) = a6;
  *(unsigned char *)(a9 + 80) = a7 & 1;
  *(void *)(a9 + 88) = a8;
  *(unsigned char *)(a9 + 96) = a10 & 1;
  return result;
}

uint64_t Constrain.layout(relativeTo:with:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  uint64_t v13 = *(void *)(v6 + 40);
  char v14 = *(unsigned char *)(v6 + 48);
  uint64_t v15 = *(void *)(v6 + 56);
  char v16 = *(unsigned char *)(v6 + 64);
  uint64_t v17 = *(void *)(v6 + 72);
  char v18 = *(unsigned char *)(v6 + 80);
  uint64_t v19 = *(void *)(v6 + 88);
  char v22 = *(unsigned char *)(v6 + 96);
  sub_1B07BBD78(v6, (uint64_t)v23);
  *(_OWORD *)(a2 + 120) = 0u;
  *(void *)(a2 + 136) = 0;
  *(_OWORD *)(a2 + 104) = 0u;
  *(double *)a2 = a3;
  *(double *)(a2 + 8) = a4;
  *(double *)(a2 + 16) = a5;
  *(double *)(a2 + 24) = a6;
  *(void *)(a2 + 32) = a1;
  *(void *)(a2 + 40) = v13;
  *(unsigned char *)(a2 + 48) = v14;
  *(void *)(a2 + 56) = v15;
  *(unsigned char *)(a2 + 64) = v16;
  *(void *)(a2 + 72) = v17;
  *(unsigned char *)(a2 + 80) = v18;
  *(void *)(a2 + 88) = v19;
  *(unsigned char *)(a2 + 96) = v22;
  id v20 = a1;
  sub_1B07BBE14(a2 + 104, &qword_1EB595778);
  return sub_1B07BA8FC(v23, a2 + 104);
}

JetUI::_LayoutAlignment __swiftcall Constrain._layoutAlignment(with:)(UITraitCollection with)
{
  uint64_t v3 = v2;
  double v5 = v1;
  sub_1B07BBD78(v3, (uint64_t)v11);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB595770);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB595748);
  if (swift_dynamicCast())
  {
    sub_1B07BA8FC(v9, (uint64_t)v12);
    uint64_t v6 = v13;
    uint64_t v7 = v14;
    __swift_project_boxed_opaque_existential_1(v12, v13);
    (*(void (**)(Class, uint64_t, uint64_t))(v7 + 8))(with.super.isa, v6, v7);
    return (JetUI::_LayoutAlignment)__swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  }
  else
  {
    uint64_t v10 = 0;
    memset(v9, 0, sizeof(v9));
    JetUI::_LayoutAlignment v8 = (JetUI::_LayoutAlignment)sub_1B07BBE14((uint64_t)v9, &qword_1EB595750);
    *double v5 = 0;
  }
  return v8;
}

uint64_t sub_1B07D1520@<X0>(void *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  uint64_t v13 = *(void *)(v6 + 40);
  char v14 = *(unsigned char *)(v6 + 48);
  uint64_t v15 = *(void *)(v6 + 56);
  char v16 = *(unsigned char *)(v6 + 64);
  uint64_t v17 = *(void *)(v6 + 72);
  char v18 = *(unsigned char *)(v6 + 80);
  uint64_t v19 = *(void *)(v6 + 88);
  char v22 = *(unsigned char *)(v6 + 96);
  sub_1B07BBD78(v6, (uint64_t)v23);
  *(_OWORD *)(a2 + 120) = 0u;
  *(void *)(a2 + 136) = 0;
  *(_OWORD *)(a2 + 104) = 0u;
  *(double *)a2 = a3;
  *(double *)(a2 + 8) = a4;
  *(double *)(a2 + 16) = a5;
  *(double *)(a2 + 24) = a6;
  *(void *)(a2 + 32) = a1;
  *(void *)(a2 + 40) = v13;
  *(unsigned char *)(a2 + 48) = v14;
  *(void *)(a2 + 56) = v15;
  *(unsigned char *)(a2 + 64) = v16;
  *(void *)(a2 + 72) = v17;
  *(unsigned char *)(a2 + 80) = v18;
  *(void *)(a2 + 88) = v19;
  *(unsigned char *)(a2 + 96) = v22;
  id v20 = a1;
  sub_1B07BBE14(a2 + 104, &qword_1EB595778);
  return sub_1B07BA8FC(v23, a2 + 104);
}

BOOL sub_1B07D1620()
{
  return *(double *)(v0 + 16) < *(double *)(v0 + 24);
}

unint64_t sub_1B07D1630(uint64_t a1)
{
  unint64_t result = sub_1B07D1658();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1B07D1658()
{
  unint64_t result = qword_1E9B3AC90;
  if (!qword_1E9B3AC90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3AC90);
  }
  return result;
}

unint64_t sub_1B07D16B0()
{
  unint64_t result = qword_1E9B3AC98;
  if (!qword_1E9B3AC98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3AC98);
  }
  return result;
}

unint64_t sub_1B07D1708()
{
  unint64_t result = qword_1E9B3ACA0;
  if (!qword_1E9B3ACA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3ACA0);
  }
  return result;
}

uint64_t initializeWithCopy for Constrain(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 49) = *(_OWORD *)(a2 + 49);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 81) = *(_OWORD *)(a2 + 81);
  return a1;
}

uint64_t assignWithCopy for Constrain(uint64_t a1, uint64_t a2)
{
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  uint64_t v4 = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 40) = v4;
  uint64_t v5 = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 56) = v5;
  uint64_t v6 = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(void *)(a1 + 72) = v6;
  uint64_t v7 = *(void *)(a2 + 88);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(void *)(a1 + 88) = v7;
  return a1;
}

__n128 __swift_memcpy97_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[5];
  *(unsigned char *)(a1 + 96) = *((unsigned char *)a2 + 96);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for Constrain(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  return a1;
}

uint64_t getEnumTagSinglePayload for Constrain(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 97)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Constrain(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 96) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 97) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 97) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Constrain()
{
  return &type metadata for Constrain;
}

void destroy for Constrain.Placements(uint64_t a1)
{
  if (*(void *)(a1 + 128))
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 104);
  }
}

uint64_t initializeWithCopy for Constrain.Placements(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void **)(a2 + 32);
  *(void *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 49) = *(_OWORD *)(a2 + 49);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 81) = *(_OWORD *)(a2 + 81);
  uint64_t v6 = a1 + 104;
  uint64_t v7 = a2 + 104;
  uint64_t v8 = *(void *)(a2 + 128);
  id v9 = v5;
  if (v8)
  {
    uint64_t v10 = *(void *)(a2 + 136);
    *(void *)(a1 + 128) = v8;
    *(void *)(a1 + 136) = v10;
    (**(void (***)(uint64_t, uint64_t, uint64_t))(v8 - 8))(v6, v7, v8);
  }
  else
  {
    long long v11 = *(_OWORD *)(v7 + 16);
    *(_OWORD *)uint64_t v6 = *(_OWORD *)v7;
    *(_OWORD *)(v6 + 16) = v11;
    *(void *)(v6 + 32) = *(void *)(v7 + 32);
  }
  return a1;
}

uint64_t assignWithCopy for Constrain.Placements(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  long long v4 = *(void **)(a2 + 32);
  uint64_t v5 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = v4;
  id v6 = v4;

  uint64_t v7 = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 40) = v7;
  uint64_t v8 = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 56) = v8;
  uint64_t v9 = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(void *)(a1 + 72) = v9;
  uint64_t v10 = *(void *)(a2 + 88);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(void *)(a1 + 88) = v10;
  uint64_t v11 = *(void *)(a2 + 128);
  if (!*(void *)(a1 + 128))
  {
    if (v11)
    {
      *(void *)(a1 + 128) = v11;
      *(void *)(a1 + 136) = *(void *)(a2 + 136);
      (**(void (***)(uint64_t, uint64_t))(v11 - 8))(a1 + 104, a2 + 104);
      return a1;
    }
LABEL_7:
    long long v12 = *(_OWORD *)(a2 + 104);
    long long v13 = *(_OWORD *)(a2 + 120);
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    *(_OWORD *)(a1 + 104) = v12;
    *(_OWORD *)(a1 + 120) = v13;
    return a1;
  }
  if (!v11)
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 104);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 104), (uint64_t *)(a2 + 104));
  return a1;
}

__n128 __swift_memcpy144_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  __n128 result = *(__n128 *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(__n128 *)(a1 + 80) = result;
  *(_OWORD *)(a1 + 96) = v6;
  return result;
}

uint64_t assignWithTake for Constrain.Placements(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);

  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  if (*(void *)(a1 + 128)) {
    __swift_destroy_boxed_opaque_existential_1(a1 + 104);
  }
  long long v6 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = v6;
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  return a1;
}

uint64_t getEnumTagSinglePayload for Constrain.Placements(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 144)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Constrain.Placements(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 144) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 144) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Constrain.Placements()
{
  return &type metadata for Constrain.Placements;
}

BOOL sub_1B07D1D78(void *a1)
{
  id v1 = a1;
  BOOL v2 = UIView.hasContent.getter();

  return v2;
}

BOOL UIView.hasContent.getter()
{
  objc_msgSend(v0, sel_sizeThatFits_, *MEMORY[0x1E4FB2C70], *(double *)(MEMORY[0x1E4FB2C70] + 8));
  return (v2 & 0x7FFFFFFFFFFFFFFFLL) != 0 && (v1 & 0x7FFFFFFFFFFFFFFFLL) != 0;
}

id sub_1B07D1DF4(void *a1)
{
  return objc_msgSend(a1, sel_frame);
}

id UIView.focusedFrame.getter()
{
  return objc_msgSend(v0, sel_frame);
}

void (*sub_1B07D1E10(void *a1))(double **a1)
{
  long long v3 = malloc(0x28uLL);
  *a1 = v3;
  long long v4 = *v1;
  v3[4] = *v1;
  objc_msgSend(v4, sel_frame);
  void *v3 = v5;
  v3[1] = v6;
  v3[2] = v7;
  void v3[3] = v8;
  return sub_1B07D1E80;
}

void sub_1B07D1E80(double **a1)
{
  uint64_t v1 = *a1;
  objc_msgSend(*((id *)*a1 + 4), sel_setFrame_, *v1, v1[1], v1[2], v1[3]);

  free(v1);
}

id (*sub_1B07D1ECC(uint64_t a1))(uint64_t a1)
{
  long long v3 = *v1;
  *(void *)a1 = *v1;
  *(unsigned char *)(a1 + 8) = objc_msgSend(v3, sel_isHidden);
  return sub_1B07D1F20;
}

id sub_1B07D1F20(uint64_t a1)
{
  return objc_msgSend(*(id *)a1, sel_setHidden_, *(unsigned __int8 *)(a1 + 8));
}

id sub_1B07D1F38(uint64_t a1, uint64_t a2)
{
  return sub_1B07B37A8(a1, a2, (SEL *)&selRef_jet_focusedFrame);
}

double AnyDimension.bottomMargin(from:with:)(void *a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6, double a7)
{
  return AnyDimension.value(with:)(a1, a2, a3) - a7;
}

double EstimatedMeasurable<>.measurements(fitting:in:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  uint64_t v10 = *(void *)(a3 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  char v14 = (char *)&v17 - v13;
  (*(void (**)(uint64_t, uint64_t))(v10 + 16))(a2, v10);
  double v15 = (*(double (**)(char *, uint64_t, uint64_t, uint64_t, double, double))(a3 + 16))(v14, a1, a2, a3, a4, a5);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, AssociatedTypeWitness);
  return v15;
}

uint64_t static EstimatedMeasurable.estimatedSize(fitting:using:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of static EstimatedMeasurable.estimatedMeasurements(fitting:using:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

double static AspectRatio.square.getter@<D0>(_OWORD *a1@<X8>)
{
  swift_beginAccess();
  double result = *(double *)&xmmword_1E9B3ACA8;
  *a1 = xmmword_1E9B3ACA8;
  return result;
}

uint64_t static AspectRatio.square.setter(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  uint64_t result = swift_beginAccess();
  *(void *)&xmmword_1E9B3ACA8 = v1;
  *((void *)&xmmword_1E9B3ACA8 + 1) = v2;
  return result;
}

uint64_t (*static AspectRatio.square.modify())()
{
  return j__swift_endAccess;
}

double AspectRatio.horizontal.getter()
{
  return *(double *)v0;
}

void AspectRatio.horizontal.setter(double a1)
{
  *uint64_t v1 = a1;
}

uint64_t (*AspectRatio.horizontal.modify())()
{
  return nullsub_1;
}

double AspectRatio.vertical.getter()
{
  return *(double *)(v0 + 8);
}

void AspectRatio.vertical.setter(double a1)
{
  *(double *)(v1 + 8) = a1;
}

uint64_t (*AspectRatio.vertical.modify())()
{
  return nullsub_1;
}

double AspectRatio.horizontalFraction.getter()
{
  double v1 = v0[1];
  double result = *v0 / v1;
  if (v1 == 0.0) {
    return 0.0;
  }
  return result;
}

double AspectRatio.verticalFraction.getter()
{
  double result = 0.0;
  if (*v0 != 0.0) {
    return v0[1] / *v0;
  }
  return result;
}

BOOL AspectRatio.isSquare.getter()
{
  return *v0 == v0[1];
}

BOOL static AspectRatio.== infix(_:_:)(double *a1, double *a2)
{
  return a1[1] == a2[1] && *a1 == *a2;
}

uint64_t AspectRatio.description.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3ACB8);
  uint64_t v3 = swift_allocObject();
  uint64_t v4 = MEMORY[0x1E4FBB3D0];
  *(_OWORD *)(v3 + 16) = xmmword_1B086D960;
  uint64_t v5 = MEMORY[0x1E4FBB460];
  *(void *)(v3 + 56) = v4;
  *(void *)(v3 + 64) = v5;
  *(void *)(v3 + 32) = v1;
  *(void *)(v3 + 96) = v4;
  *(void *)(v3 + 104) = v5;
  *(void *)(v3 + 72) = v2;

  return sub_1B0869DB8();
}

BOOL sub_1B07D2344(double *a1, double *a2)
{
  return a1[1] == a2[1] && *a1 == *a2;
}

uint64_t sub_1B07D2360()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3ACB8);
  uint64_t v3 = swift_allocObject();
  uint64_t v4 = MEMORY[0x1E4FBB3D0];
  *(_OWORD *)(v3 + 16) = xmmword_1B086D960;
  uint64_t v5 = MEMORY[0x1E4FBB460];
  *(void *)(v3 + 56) = v4;
  *(void *)(v3 + 64) = v5;
  *(void *)(v3 + 32) = v1;
  *(void *)(v3 + 96) = v4;
  *(void *)(v3 + 104) = v5;
  *(void *)(v3 + 72) = v2;

  return sub_1B0869DB8();
}

double LayoutRect.measurements.getter()
{
  return *(double *)(v0 + 16);
}

double sub_1B07D23F4()
{
  double result = 0.0;
  xmmword_1E9B3A5A0 = 0u;
  xmmword_1E9B3A5B0 = 0u;
  xmmword_1E9B3A590 = 0u;
  return result;
}

double static LayoutRect.zero.getter@<D0>(_OWORD *a1@<X8>)
{
  if (qword_1E9B3A3E8 != -1) {
    swift_once();
  }
  long long v2 = xmmword_1E9B3A5A0;
  *a1 = xmmword_1E9B3A590;
  a1[1] = v2;
  double result = *(double *)&xmmword_1E9B3A5B0;
  a1[2] = xmmword_1E9B3A5B0;
  return result;
}

double LayoutRect.init()@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

void LayoutRect.origin.setter(double a1, double a2)
{
  *long long v2 = a1;
  v2[1] = a2;
}

uint64_t (*LayoutRect.origin.modify())()
{
  return nullsub_1;
}

void LayoutRect.size.setter(double a1, double a2)
{
  *(double *)(v2 + 16) = a1;
  *(double *)(v2 + 24) = a2;
}

uint64_t (*LayoutRect.size.modify())()
{
  return nullsub_1;
}

__n128 LayoutRect.baselines.setter(__n128 *a1)
{
  __n128 result = *a1;
  v1[2] = *a1;
  return result;
}

uint64_t (*LayoutRect.baselines.modify())()
{
  return nullsub_1;
}

double LayoutRect.minX.getter()
{
  return *(double *)v0;
}

double LayoutRect.minY.getter()
{
  return *(double *)(v0 + 8);
}

double LayoutRect.midX.getter()
{
  return *v0 + v0[2] * 0.5;
}

double LayoutRect.midY.getter()
{
  return *(double *)(v0 + 8) + *(double *)(v0 + 24) * 0.5;
}

double LayoutRect.maxX.getter()
{
  return *v0 + v0[2];
}

double LayoutRect.maxY.getter()
{
  return *(double *)(v0 + 8) + *(double *)(v0 + 24);
}

double LayoutRect.width.getter()
{
  return *(double *)(v0 + 16);
}

double LayoutRect.height.getter()
{
  return *(double *)(v0 + 24);
}

double LayoutRect.firstBaseline.getter()
{
  return *(double *)(v0 + 32);
}

double LayoutRect.firstBaselineFromTop.getter()
{
  return *(double *)(v0 + 8) + *(double *)(v0 + 32);
}

double LayoutRect.lastBaseline.getter()
{
  return *(double *)(v0 + 40);
}

double LayoutRect.lastBaselineFromBottom.getter()
{
  return v0[1] + v0[3] - v0[5];
}

double LayoutRect.cgRect.getter()
{
  return *(double *)v0;
}

BOOL _s5JetUI10LayoutRectV2eeoiySbAC_ACtFZ_0(float64x2_t *a1, float64x2_t *a2)
{
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*a1, *a2), (int32x4_t)vceqq_f64(a1[1], a2[1]))), 0xFuLL))) & 1) == 0)return 0; {
  if (a1[2].f64[1] == a2[2].f64[1])
  }
    return a1[2].f64[0] == a2[2].f64[0];
  return 0;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for LayoutRect(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for LayoutRect(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 48) = v3;
  return result;
}

uint64_t CollectionContentReloadTriggerPublisher._subscribeContent<A, B>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 48))(a2, a3);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  uint64_t v6 = swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  uint64_t v7 = swift_getAssociatedConformanceWitness();
  CollectionContent.observeReloadTriggers<A>(_:)(v3, AssociatedTypeWitness, AssociatedConformanceWitness, v6, v7);

  return swift_unknownObjectRelease();
}

uint64_t dispatch thunk of _AnyCollectionContentReloadTriggerPublisher._subscribeContent<A, B>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t dispatch thunk of CollectionContentReloadTriggerPublisher.onContentReloadTrigger.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

__n128 AppStore.HorizontalPairLayout.init(leadingView:trailingView:priorityView:alignmentSpace:interViewSpacing:)@<Q0>(long long *a1@<X0>, long long *a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, long long *a5@<X4>, uint64_t *a6@<X8>)
{
  char v10 = *a3;
  sub_1B07BA8FC(a1, (uint64_t)v17);
  sub_1B07BA8FC(a2, (uint64_t)v18 + 8);
  LOBYTE(v19[0]) = v10;
  sub_1B07D28D0(a4, (uint64_t)v19 + 8);
  sub_1B07BA8FC(a5, (uint64_t)v20);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E9B3A3D8);
  uint64_t v11 = swift_allocObject();
  long long v12 = v20[1];
  *(_OWORD *)(v11 + 144) = v20[0];
  *(_OWORD *)(v11 + 160) = v12;
  *(void *)(v11 + 176) = v21;
  long long v13 = v19[0];
  *(_OWORD *)(v11 + 80) = v18[2];
  *(_OWORD *)(v11 + 96) = v13;
  long long v14 = v19[2];
  *(_OWORD *)(v11 + 112) = v19[1];
  *(_OWORD *)(v11 + 128) = v14;
  long long v15 = v17[1];
  *(_OWORD *)(v11 + 16) = v17[0];
  *(_OWORD *)(v11 + 32) = v15;
  __n128 result = (__n128)v18[1];
  *(_OWORD *)(v11 + 48) = v18[0];
  *(__n128 *)(v11 + 64) = result;
  *a6 = v11;
  return result;
}

uint64_t sub_1B07D28D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB596438);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t AppStore.HorizontalPairLayout.leadingView.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1 + 16;
  swift_beginAccess();
  return sub_1B07BBD78(v3, a1);
}

uint64_t AppStore.HorizontalPairLayout.leadingView.setter(uint64_t *a1)
{
  uint64_t v3 = *v1 + 16;
  swift_beginAccess();
  sub_1B07D2AA0(v3, (uint64_t)v12);
  __swift_assign_boxed_opaque_existential_1((uint64_t *)v12, a1);
  if (swift_isUniquelyReferenced_nonNull_native())
  {
    uint64_t v4 = *v1 + 16;
    swift_beginAccess();
    sub_1B07D2AD8((uint64_t)v12, v4);
    swift_endAccess();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E9B3A3D8);
    uint64_t v5 = swift_allocObject();
    long long v6 = v12[9];
    *(_OWORD *)(v5 + 144) = v12[8];
    *(_OWORD *)(v5 + 160) = v6;
    *(void *)(v5 + 176) = v13;
    long long v7 = v12[5];
    *(_OWORD *)(v5 + 80) = v12[4];
    *(_OWORD *)(v5 + 96) = v7;
    long long v8 = v12[7];
    *(_OWORD *)(v5 + 112) = v12[6];
    *(_OWORD *)(v5 + 128) = v8;
    long long v9 = v12[1];
    *(_OWORD *)(v5 + 16) = v12[0];
    *(_OWORD *)(v5 + 32) = v9;
    long long v10 = v12[3];
    *(_OWORD *)(v5 + 48) = v12[2];
    *(_OWORD *)(v5 + 64) = v10;
    swift_release();
    *uint64_t v1 = v5;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1B07D2AA0(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1B07D2AD8(uint64_t a1, uint64_t a2)
{
  return a2;
}

void (*AppStore.HorizontalPairLayout.leadingView.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x70uLL);
  *a1 = v3;
  v3[13] = v1;
  uint64_t v4 = *v1 + 16;
  swift_beginAccess();
  sub_1B07BBD78(v4, (uint64_t)v3);
  return sub_1B07D2B90;
}

void sub_1B07D2B90(uint64_t *a1, char a2)
{
}

uint64_t AppStore.HorizontalPairLayout.trailingView.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  swift_beginAccess();
  return sub_1B07BBD78(v3 + 56, a1);
}

uint64_t AppStore.HorizontalPairLayout.trailingView.setter(uint64_t *a1)
{
  uint64_t v3 = *v1 + 16;
  swift_beginAccess();
  sub_1B07D2AA0(v3, (uint64_t)v12);
  __swift_assign_boxed_opaque_existential_1((uint64_t *)v13 + 1, a1);
  if (swift_isUniquelyReferenced_nonNull_native())
  {
    uint64_t v4 = *v1 + 16;
    swift_beginAccess();
    sub_1B07D2AD8((uint64_t)v12, v4);
    swift_endAccess();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E9B3A3D8);
    uint64_t v5 = swift_allocObject();
    long long v6 = v13[7];
    *(_OWORD *)(v5 + 144) = v13[6];
    *(_OWORD *)(v5 + 160) = v6;
    *(void *)(v5 + 176) = v14;
    long long v7 = v13[3];
    *(_OWORD *)(v5 + 80) = v13[2];
    *(_OWORD *)(v5 + 96) = v7;
    long long v8 = v13[5];
    *(_OWORD *)(v5 + 112) = v13[4];
    *(_OWORD *)(v5 + 128) = v8;
    long long v9 = v12[1];
    *(_OWORD *)(v5 + 16) = v12[0];
    *(_OWORD *)(v5 + 32) = v9;
    long long v10 = v13[1];
    *(_OWORD *)(v5 + 48) = v13[0];
    *(_OWORD *)(v5 + 64) = v10;
    swift_release();
    *uint64_t v1 = v5;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

void (*AppStore.HorizontalPairLayout.trailingView.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x70uLL);
  *a1 = v3;
  v3[13] = v1;
  uint64_t v4 = *v1;
  swift_beginAccess();
  sub_1B07BBD78(v4 + 56, (uint64_t)v3);
  return sub_1B07D2D94;
}

void sub_1B07D2D94(uint64_t *a1, char a2)
{
}

void sub_1B07D2DAC(uint64_t *a1, char a2, void (*a3)(char *))
{
  uint64_t v4 = (char *)*a1;
  if (a2)
  {
    sub_1B07BBD78(*a1, (uint64_t)(v4 + 40));
    a3(v4 + 40);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
  }
  else
  {
    a3((char *)*a1);
  }

  free(v4);
}

BOOL static AppStore.HorizontalPairLayout.Edge.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t AppStore.HorizontalPairLayout.Edge.hash(into:)()
{
  return sub_1B086A968();
}

uint64_t AppStore.HorizontalPairLayout.Edge.hashValue.getter()
{
  return sub_1B086A998();
}

BOOL sub_1B07D2EB8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t AppStore.HorizontalPairLayout.priorityView.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t result = swift_beginAccess();
  *a1 = *(unsigned char *)(v3 + 96);
  return result;
}

uint64_t AppStore.HorizontalPairLayout.priorityView.setter(char *a1)
{
  char v2 = *a1;
  uint64_t v3 = *v1 + 16;
  swift_beginAccess();
  sub_1B07D2AA0(v3, (uint64_t)v12);
  LOBYTE(v13) = v2;
  if (swift_isUniquelyReferenced_nonNull_native())
  {
    uint64_t v4 = *v1 + 16;
    swift_beginAccess();
    sub_1B07D2AD8((uint64_t)v12, v4);
    return swift_endAccess();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E9B3A3D8);
    uint64_t v6 = swift_allocObject();
    long long v7 = v17;
    *(_OWORD *)(v6 + 144) = v16;
    *(_OWORD *)(v6 + 160) = v7;
    *(void *)(v6 + 176) = v18;
    long long v8 = v13;
    *(_OWORD *)(v6 + 80) = v12[4];
    *(_OWORD *)(v6 + 96) = v8;
    long long v9 = v15;
    *(_OWORD *)(v6 + 112) = v14;
    *(_OWORD *)(v6 + 128) = v9;
    long long v10 = v12[1];
    *(_OWORD *)(v6 + 16) = v12[0];
    *(_OWORD *)(v6 + 32) = v10;
    long long v11 = v12[3];
    *(_OWORD *)(v6 + 48) = v12[2];
    *(_OWORD *)(v6 + 64) = v11;
    uint64_t result = swift_release();
    *uint64_t v1 = v6;
  }
  return result;
}

void (*AppStore.HorizontalPairLayout.priorityView.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x100uLL);
  *a1 = v3;
  v3[30] = v1;
  uint64_t v4 = *v1;
  swift_beginAccess();
  *((unsigned char *)v3 + 248) = *(unsigned char *)(v4 + 96);
  return sub_1B07D3098;
}

void sub_1B07D3098(uint64_t a1, char a2)
{
  char v2 = *(unsigned char **)a1;
  char v3 = *(unsigned char *)(*(void *)a1 + 248);
  uint64_t v4 = **(void **)(*(void *)a1 + 240) + 16;
  if (a2)
  {
    swift_beginAccess();
    sub_1B07D2AA0(v4, (uint64_t)v2);
    v2[80] = v3;
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v6 = (uint64_t *)*((void *)v2 + 30);
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v7 = *v6 + 16;
      swift_beginAccess();
      sub_1B07D2AD8((uint64_t)v2, v7);
      swift_endAccess();
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E9B3A3D8);
      uint64_t v11 = swift_allocObject();
      long long v13 = *((_OWORD *)v2 + 1);
      long long v12 = *((_OWORD *)v2 + 2);
      *(_OWORD *)(v11 + 16) = *(_OWORD *)v2;
      *(_OWORD *)(v11 + 32) = v13;
      *(_OWORD *)(v11 + 48) = v12;
      long long v14 = *((_OWORD *)v2 + 6);
      long long v16 = *((_OWORD *)v2 + 3);
      long long v15 = *((_OWORD *)v2 + 4);
      *(_OWORD *)(v11 + 96) = *((_OWORD *)v2 + 5);
      *(_OWORD *)(v11 + 112) = v14;
      *(_OWORD *)(v11 + 64) = v16;
      *(_OWORD *)(v11 + 80) = v15;
      long long v18 = *((_OWORD *)v2 + 8);
      long long v17 = *((_OWORD *)v2 + 9);
      long long v19 = *((_OWORD *)v2 + 7);
      *(void *)(v11 + 176) = *((void *)v2 + 20);
      *(_OWORD *)(v11 + 144) = v18;
      *(_OWORD *)(v11 + 160) = v17;
      *(_OWORD *)(v11 + 128) = v19;
      swift_release();
      *uint64_t v6 = v11;
    }
  }
  else
  {
    swift_beginAccess();
    sub_1B07D2AA0(v4, (uint64_t)v2);
    v2[80] = v3;
    int v8 = swift_isUniquelyReferenced_nonNull_native();
    long long v9 = (uint64_t *)*((void *)v2 + 30);
    if (v8)
    {
      uint64_t v10 = *v9 + 16;
      swift_beginAccess();
      sub_1B07D2AD8((uint64_t)v2, v10);
      swift_endAccess();
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E9B3A3D8);
      uint64_t v20 = swift_allocObject();
      long long v22 = *((_OWORD *)v2 + 1);
      long long v21 = *((_OWORD *)v2 + 2);
      *(_OWORD *)(v20 + 16) = *(_OWORD *)v2;
      *(_OWORD *)(v20 + 32) = v22;
      *(_OWORD *)(v20 + 48) = v21;
      long long v23 = *((_OWORD *)v2 + 6);
      long long v25 = *((_OWORD *)v2 + 3);
      long long v24 = *((_OWORD *)v2 + 4);
      *(_OWORD *)(v20 + 96) = *((_OWORD *)v2 + 5);
      *(_OWORD *)(v20 + 112) = v23;
      *(_OWORD *)(v20 + 64) = v25;
      *(_OWORD *)(v20 + 80) = v24;
      long long v27 = *((_OWORD *)v2 + 8);
      long long v26 = *((_OWORD *)v2 + 9);
      long long v28 = *((_OWORD *)v2 + 7);
      *(void *)(v20 + 176) = *((void *)v2 + 20);
      *(_OWORD *)(v20 + 144) = v27;
      *(_OWORD *)(v20 + 160) = v26;
      *(_OWORD *)(v20 + 128) = v28;
      swift_release();
      *long long v9 = v20;
    }
  }

  free(v2);
}

uint64_t AppStore.HorizontalPairLayout.alignmentSpace.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  swift_beginAccess();
  return sub_1B07D32D4(v3 + 104, a1);
}

uint64_t sub_1B07D32D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB596438);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t AppStore.HorizontalPairLayout.alignmentSpace.setter(uint64_t a1)
{
  uint64_t v3 = *v1 + 16;
  swift_beginAccess();
  sub_1B07D2AA0(v3, (uint64_t)v12);
  sub_1B07D3460(a1, (uint64_t)v13 + 8);
  if (swift_isUniquelyReferenced_nonNull_native())
  {
    uint64_t v4 = *v1 + 16;
    swift_beginAccess();
    sub_1B07D2AD8((uint64_t)v12, v4);
    swift_endAccess();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E9B3A3D8);
    uint64_t v5 = swift_allocObject();
    long long v6 = v13[4];
    *(_OWORD *)(v5 + 144) = v13[3];
    *(_OWORD *)(v5 + 160) = v6;
    *(void *)(v5 + 176) = v14;
    long long v7 = v13[0];
    *(_OWORD *)(v5 + 80) = v12[4];
    *(_OWORD *)(v5 + 96) = v7;
    long long v8 = v13[2];
    *(_OWORD *)(v5 + 112) = v13[1];
    *(_OWORD *)(v5 + 128) = v8;
    long long v9 = v12[1];
    *(_OWORD *)(v5 + 16) = v12[0];
    *(_OWORD *)(v5 + 32) = v9;
    long long v10 = v12[3];
    *(_OWORD *)(v5 + 48) = v12[2];
    *(_OWORD *)(v5 + 64) = v10;
    swift_release();
    *uint64_t v1 = v5;
  }
  return sub_1B07D34C8(a1);
}

uint64_t sub_1B07D3460(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB596438);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B07D34C8(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB596438);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void (*AppStore.HorizontalPairLayout.alignmentSpace.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x70uLL);
  *a1 = v3;
  v3[13] = v1;
  uint64_t v4 = *v1;
  swift_beginAccess();
  sub_1B07D32D4(v4 + 104, (uint64_t)v3);
  return sub_1B07D35A4;
}

void sub_1B07D35A4(uint64_t *a1, char a2)
{
  uint64_t v2 = (void *)*a1;
  if (a2)
  {
    sub_1B07D32D4(*a1, (uint64_t)v2 + 40);
    AppStore.HorizontalPairLayout.alignmentSpace.setter((uint64_t)v2 + 40);
    sub_1B07D34C8((uint64_t)v2);
  }
  else
  {
    AppStore.HorizontalPairLayout.alignmentSpace.setter(*a1);
  }

  free(v2);
}

uint64_t AppStore.HorizontalPairLayout.interViewSpacing.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  swift_beginAccess();
  return sub_1B07BBD78(v3 + 144, a1);
}

uint64_t AppStore.HorizontalPairLayout.interViewSpacing.setter(uint64_t *a1)
{
  uint64_t v3 = *v1 + 16;
  swift_beginAccess();
  sub_1B07D2AA0(v3, (uint64_t)v12);
  __swift_assign_boxed_opaque_existential_1((uint64_t *)v13, a1);
  if (swift_isUniquelyReferenced_nonNull_native())
  {
    uint64_t v4 = *v1 + 16;
    swift_beginAccess();
    sub_1B07D2AD8((uint64_t)v12, v4);
    swift_endAccess();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E9B3A3D8);
    uint64_t v5 = swift_allocObject();
    long long v6 = v13[1];
    *(_OWORD *)(v5 + 144) = v13[0];
    *(_OWORD *)(v5 + 160) = v6;
    *(void *)(v5 + 176) = v14;
    long long v7 = v12[5];
    *(_OWORD *)(v5 + 80) = v12[4];
    *(_OWORD *)(v5 + 96) = v7;
    long long v8 = v12[7];
    *(_OWORD *)(v5 + 112) = v12[6];
    *(_OWORD *)(v5 + 128) = v8;
    long long v9 = v12[1];
    *(_OWORD *)(v5 + 16) = v12[0];
    *(_OWORD *)(v5 + 32) = v9;
    long long v10 = v12[3];
    *(_OWORD *)(v5 + 48) = v12[2];
    *(_OWORD *)(v5 + 64) = v10;
    swift_release();
    *uint64_t v1 = v5;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

void (*AppStore.HorizontalPairLayout.interViewSpacing.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x70uLL);
  *a1 = v3;
  v3[13] = v1;
  uint64_t v4 = *v1;
  swift_beginAccess();
  sub_1B07BBD78(v4 + 144, (uint64_t)v3);
  return sub_1B07D3804;
}

void sub_1B07D3804(uint64_t *a1, char a2)
{
}

double sub_1B07D381C@<D0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, CGFloat a4@<D0>, CGFloat a5@<D1>, CGFloat a6@<D2>, CGFloat a7@<D3>)
{
  uint64_t v15 = *v7;
  uint64_t v16 = a1[3];
  uint64_t v17 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v16);
  double v18 = (*(double (**)(uint64_t, uint64_t, CGFloat, CGFloat))(*(void *)(v17 + 8) + 8))(a2, v16, a6, a7);
  double v20 = v19;
  double v32 = v21;
  uint64_t v23 = v22;
  swift_beginAccess();
  sub_1B07D32D4(v15 + 104, (uint64_t)&v33);
  if (v34)
  {
    sub_1B07BA8FC(&v33, (uint64_t)v35);
    v38.origin.CGFloat x = a4;
    v38.origin.CGFloat y = a5;
    v38.size.double width = a6;
    v38.size.double height = a7;
    double MinY = CGRectGetMinY(v38);
    uint64_t v25 = v36;
    uint64_t v26 = v37;
    __swift_project_boxed_opaque_existential_1(v35, v36);
    double v27 = MinY + AnyDimension.topMargin(from:in:)(a2, v25, v26, v18, v20, v32);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
  }
  else
  {
    sub_1B07D34C8((uint64_t)&v33);
    v39.origin.CGFloat x = a4;
    v39.origin.CGFloat y = a5;
    v39.size.double width = a6;
    v39.size.double height = a7;
    double v27 = CGRectGetMinY(v39);
  }
  v40.origin.CGFloat x = a4;
  v40.origin.CGFloat y = a5;
  v40.size.double width = a6;
  v40.size.double height = a7;
  double MinX = CGRectGetMinX(v40);
  uint64_t v29 = a1[3];
  uint64_t v30 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v29);
  (*(void (**)(uint64_t, uint64_t, double, double, double, double))(v30 + 24))(v29, v30, MinX, v27, v18, v20);
  *(double *)a3 = MinX;
  *(double *)(a3 + 8) = v27;
  *(double *)(a3 + 16) = v18;
  *(double *)(a3 + 24) = v20;
  double result = v32;
  *(double *)(a3 + 32) = v32;
  *(void *)(a3 + 40) = v23;
  return result;
}

double sub_1B07D39FC@<D0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, CGFloat a4@<D0>, CGFloat a5@<D1>, CGFloat a6@<D2>, CGFloat a7@<D3>)
{
  uint64_t v15 = *v7;
  uint64_t v16 = a1[3];
  uint64_t v17 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v16);
  double v18 = (*(double (**)(uint64_t, uint64_t, CGFloat, CGFloat))(*(void *)(v17 + 8) + 8))(a2, v16, a6, a7);
  double v20 = v19;
  double v32 = v21;
  uint64_t v23 = v22;
  swift_beginAccess();
  sub_1B07D32D4(v15 + 104, (uint64_t)&v33);
  if (v34)
  {
    sub_1B07BA8FC(&v33, (uint64_t)v35);
    v38.origin.CGFloat x = a4;
    v38.origin.CGFloat y = a5;
    v38.size.double width = a6;
    v38.size.double height = a7;
    double MinY = CGRectGetMinY(v38);
    uint64_t v25 = v36;
    uint64_t v26 = v37;
    __swift_project_boxed_opaque_existential_1(v35, v36);
    double v27 = MinY + AnyDimension.topMargin(from:in:)(a2, v25, v26, v18, v20, v32);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
  }
  else
  {
    sub_1B07D34C8((uint64_t)&v33);
    v39.origin.CGFloat x = a4;
    v39.origin.CGFloat y = a5;
    v39.size.double width = a6;
    v39.size.double height = a7;
    double v27 = CGRectGetMinY(v39);
  }
  v40.origin.CGFloat x = a4;
  v40.origin.CGFloat y = a5;
  v40.size.double width = a6;
  v40.size.double height = a7;
  CGFloat v28 = CGRectGetMaxX(v40) - v18;
  uint64_t v29 = a1[3];
  uint64_t v30 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v29);
  (*(void (**)(uint64_t, uint64_t, CGFloat, double, double, double))(v30 + 24))(v29, v30, v28, v27, v18, v20);
  *(CGFloat *)a3 = v28;
  *(double *)(a3 + 8) = v27;
  *(double *)(a3 + 16) = v18;
  *(double *)(a3 + 24) = v20;
  double result = v32;
  *(double *)(a3 + 32) = v32;
  *(void *)(a3 + 40) = v23;
  return result;
}

uint64_t AppStore.HorizontalPairLayout.placeChildren(relativeTo:in:)@<X0>(void *a1@<X0>, CGFloat *a2@<X8>, CGFloat a3@<D0>, CGFloat a4@<D1>, CGFloat a5@<D2>, CGFloat a6@<D3>)
{
  CGFloat v79 = a5;
  uint64_t v12 = sub_1B086A868();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v71 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *v6;
  id v17 = objc_msgSend(a1, sel_traitCollection);
  id v18 = objc_msgSend(v17, sel_layoutDirection);

  CGFloat v78 = a3;
  if (v18 == (id)1)
  {
    swift_beginAccess();
    sub_1B07BBD78(v16 + 56, (uint64_t)v90);
    sub_1B07BBD78(v16 + 16, (uint64_t)v87);
    swift_beginAccess();
    if ((*(unsigned char *)(v16 + 96) & 1) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    swift_beginAccess();
    sub_1B07BBD78(v16 + 16, (uint64_t)v90);
    sub_1B07BBD78(v16 + 56, (uint64_t)v87);
    swift_beginAccess();
    if (*(unsigned char *)(v16 + 96))
    {
LABEL_3:
      uint64_t v80 = v16;
      CGFloat v19 = v79;
      sub_1B07D39FC(v87, (uint64_t)a1, (uint64_t)&v81, a3, a4, v79, a6);
      double v77 = v82;
      double v20 = v83;
      double v75 = v84;
      double v73 = v85;
      double v21 = v86;
      sub_1B07BBD78(v16 + 144, (uint64_t)&v81);
      uint64_t v22 = *(void *)&v84;
      uint64_t v23 = *(void *)&v85;
      __swift_project_boxed_opaque_existential_1(&v81, *(uint64_t *)&v84);
      sub_1B07B76D8((uint64_t)v15);
      AnyDimension.value(in:rounded:)((uint64_t)a1, (uint64_t)v15, v22, v23);
      double v25 = v24;
      (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v81);
      v95.origin.CGFloat x = v78;
      v95.origin.CGFloat y = a4;
      v95.size.double width = v19;
      v95.size.double height = a6;
      double v26 = CGRectGetWidth(v95) - (v20 + v25);
      CGFloat v27 = v78;
      double v28 = floor(v26);
      v96.origin.CGFloat x = v78;
      v96.origin.CGFloat y = a4;
      v96.size.double width = v28;
      v96.size.double height = a6;
      double MinX = CGRectGetMinX(v96);
      v97.origin.CGFloat x = v27;
      v97.origin.CGFloat y = a4;
      v97.size.double width = v19;
      v97.size.double height = a6;
      if (CGRectGetMinX(v97) > MinX) {
        goto LABEL_5;
      }
      v98.origin.CGFloat x = v27;
      v98.origin.CGFloat y = a4;
      v98.size.double width = v28;
      v98.size.double height = a6;
      double MaxX = CGRectGetMaxX(v98);
      v99.origin.CGFloat x = v27;
      v99.origin.CGFloat y = a4;
      v99.size.double width = v79;
      v99.size.double height = a6;
      if (MaxX <= CGRectGetMaxX(v99))
      {
        uint64_t v80 = v16;
        sub_1B07D381C(v90, (uint64_t)a1, (uint64_t)&v81, v27, a4, v28, a6);
        double v31 = v82;
        double v76 = v84;
        double v74 = v85;
        double v32 = v86;
      }
      else
      {
LABEL_5:
        if (qword_1E9B3A3E8 != -1) {
          swift_once();
        }
        double v31 = *((double *)&xmmword_1E9B3A590 + 1);
        double v76 = *((double *)&xmmword_1E9B3A5A0 + 1);
        double v32 = *((double *)&xmmword_1E9B3A5B0 + 1);
        double v74 = *(double *)&xmmword_1E9B3A5B0;
        uint64_t v33 = v91;
        uint64_t v34 = v92;
        __swift_project_boxed_opaque_existential_1(v90, v91);
        (*(void (**)(uint64_t, uint64_t, double, double, double, double))(v34 + 24))(v33, v34, 0.0, 0.0, 0.0, 0.0);
      }
      double v46 = v77;
      goto LABEL_18;
    }
  }
  uint64_t v80 = v16;
  CGFloat v35 = v79;
  sub_1B07D381C(v90, (uint64_t)a1, (uint64_t)&v81, a3, a4, v79, a6);
  double v77 = v82;
  double v36 = v83;
  double v76 = v84;
  double v74 = v85;
  double v32 = v86;
  sub_1B07BBD78(v16 + 144, (uint64_t)&v81);
  uint64_t v37 = *(void *)&v84;
  uint64_t v38 = *(void *)&v85;
  __swift_project_boxed_opaque_existential_1(&v81, *(uint64_t *)&v84);
  sub_1B07B76D8((uint64_t)v15);
  AnyDimension.value(in:rounded:)((uint64_t)a1, (uint64_t)v15, v37, v38);
  double v40 = v39;
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v81);
  double v41 = v36 + v40 + v78;
  CGFloat v27 = v78;
  double v42 = ceil(v41);
  v100.origin.CGFloat x = v78;
  v100.origin.CGFloat y = a4;
  v100.size.double width = v35;
  v100.size.double height = a6;
  double v43 = floor(CGRectGetMaxX(v100) - v42);
  v101.origin.CGFloat x = v42;
  v101.origin.CGFloat y = a4;
  v101.size.double width = v43;
  v101.size.double height = a6;
  double v44 = CGRectGetMinX(v101);
  v102.origin.CGFloat x = v27;
  v102.origin.CGFloat y = a4;
  v102.size.double width = v35;
  v102.size.double height = a6;
  if (CGRectGetMinX(v102) > v44) {
    goto LABEL_11;
  }
  v103.origin.CGFloat x = v42;
  v103.origin.CGFloat y = a4;
  v103.size.double width = v43;
  v103.size.double height = a6;
  double v45 = CGRectGetMaxX(v103);
  v104.origin.CGFloat x = v27;
  v104.origin.CGFloat y = a4;
  v104.size.double width = v79;
  v104.size.double height = a6;
  if (v45 <= CGRectGetMaxX(v104))
  {
    uint64_t v80 = v16;
    sub_1B07D39FC(v87, (uint64_t)a1, (uint64_t)&v81, v42, a4, v43, a6);
    double v46 = v82;
    double v75 = v84;
    double v73 = v85;
    double v21 = v86;
  }
  else
  {
LABEL_11:
    if (qword_1E9B3A3E8 != -1) {
      swift_once();
    }
    double v46 = *((double *)&xmmword_1E9B3A590 + 1);
    double v75 = *((double *)&xmmword_1E9B3A5A0 + 1);
    double v21 = *((double *)&xmmword_1E9B3A5B0 + 1);
    double v73 = *(double *)&xmmword_1E9B3A5B0;
    uint64_t v47 = v88;
    uint64_t v48 = v89;
    __swift_project_boxed_opaque_existential_1(v87, v88);
    (*(void (**)(uint64_t, uint64_t, double, double, double, double))(v48 + 24))(v47, v48, 0.0, 0.0, 0.0, 0.0);
  }
  double v31 = v77;
LABEL_18:
  v105.origin.CGFloat x = v27;
  v105.origin.CGFloat y = a4;
  CGFloat v49 = v79;
  v105.size.double width = v79;
  v105.size.double height = a6;
  CGFloat MinY = CGRectGetMinY(v105);
  CGFloat v51 = v27;
  double v52 = v31 - MinY;
  v106.origin.CGFloat x = v51;
  v106.origin.CGFloat y = a4;
  v106.size.double width = v49;
  v106.size.double height = a6;
  double v53 = v46 - CGRectGetMinY(v106);
  if (v52 > v53) {
    double v53 = v52;
  }
  double v77 = v46;
  if (v53 <= 0.0)
  {
    CGFloat v55 = a4;
    if (v32 > v21) {
      double v60 = v32;
    }
    else {
      double v60 = v21;
    }
    double v72 = v60;
    double v54 = v31;
    CGFloat v56 = a6;
    if (v74 <= v73) {
      double v58 = v73 + 0.0;
    }
    else {
      double v58 = v74 + 0.0;
    }
    CGRect v59 = (double *)&v94;
  }
  else
  {
    double v54 = v31;
    CGFloat v55 = a4;
    CGFloat v56 = a6;
    double v57 = v74;
    if (v74 <= v73) {
      double v57 = v73;
    }
    double v74 = v57 + v53;
    if (v32 <= v21) {
      double v58 = v21;
    }
    else {
      double v58 = v32;
    }
    CGRect v59 = (double *)&v93;
  }
  *(v59 - 32) = v58;
  CGFloat v61 = v78;
  v107.origin.CGFloat x = v78;
  CGFloat v62 = v55;
  v107.origin.CGFloat y = v55;
  CGFloat v63 = v79;
  v107.size.double width = v79;
  v107.size.double height = v56;
  CGFloat v64 = CGRectGetMinX(v107);
  v108.origin.CGFloat x = v61;
  v108.origin.CGFloat y = v62;
  v108.size.double width = v63;
  v108.size.double height = v56;
  CGFloat v65 = CGRectGetMinY(v108);
  v109.origin.CGFloat x = v61;
  v109.origin.CGFloat y = v62;
  v109.size.double width = v63;
  v109.size.double height = v56;
  CGFloat Width = CGRectGetWidth(v109);
  if (v54 + v76 > v77 + v75) {
    double v67 = v54 + v76;
  }
  else {
    double v67 = v77 + v75;
  }
  v110.origin.CGFloat x = v61;
  v110.origin.CGFloat y = v62;
  v110.size.double width = v63;
  v110.size.double height = v56;
  CGFloat v68 = CGRectGetMinY(v110);
  *a2 = v64;
  a2[1] = v65;
  a2[2] = Width;
  a2[3] = v67 - v68;
  double v69 = v72;
  a2[4] = v74;
  a2[5] = v69;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v87);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v90);
}

unint64_t sub_1B07D4458()
{
  unint64_t result = qword_1E9B3ACC0;
  if (!qword_1E9B3ACC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3ACC0);
  }
  return result;
}

uint64_t sub_1B07D44AC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1 + 16;
  swift_beginAccess();
  return sub_1B07BBD78(v3, a2);
}

uint64_t sub_1B07D44FC(uint64_t a1)
{
  sub_1B07BBD78(a1, (uint64_t)v2);
  return AppStore.HorizontalPairLayout.leadingView.setter(v2);
}

uint64_t sub_1B07D4534@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  return sub_1B07BBD78(v3 + 56, a2);
}

uint64_t sub_1B07D4580(uint64_t a1)
{
  sub_1B07BBD78(a1, (uint64_t)v2);
  return AppStore.HorizontalPairLayout.trailingView.setter(v2);
}

uint64_t sub_1B07D45B8@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t result = swift_beginAccess();
  *a2 = *(unsigned char *)(v3 + 96);
  return result;
}

uint64_t sub_1B07D4600(char *a1)
{
  char v2 = *a1;
  return AppStore.HorizontalPairLayout.priorityView.setter(&v2);
}

uint64_t sub_1B07D4638@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  return sub_1B07D32D4(v3 + 104, a2);
}

uint64_t sub_1B07D4684(uint64_t a1)
{
  sub_1B07D32D4(a1, (uint64_t)v2);
  return AppStore.HorizontalPairLayout.alignmentSpace.setter((uint64_t)v2);
}

uint64_t sub_1B07D46BC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  return sub_1B07BBD78(v3 + 144, a2);
}

uint64_t sub_1B07D4708(uint64_t a1)
{
  sub_1B07BBD78(a1, (uint64_t)v2);
  return AppStore.HorizontalPairLayout.interViewSpacing.setter(v2);
}

ValueMetadata *type metadata accessor for AppStore.HorizontalPairLayout()
{
  return &type metadata for AppStore.HorizontalPairLayout;
}

uint64_t _s20HorizontalPairLayoutV4EdgeOwet(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s20HorizontalPairLayoutV4EdgeOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B07D48ACLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AppStore.HorizontalPairLayout.Edge()
{
  return &type metadata for AppStore.HorizontalPairLayout.Edge;
}

uint64_t _s20HorizontalPairLayoutV7StorageVwxx(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  if (*(void *)(a1 + 112)) {
    __swift_destroy_boxed_opaque_existential_1(a1 + 88);
  }

  return __swift_destroy_boxed_opaque_existential_1(a1 + 128);
}

uint64_t _s20HorizontalPairLayoutV7StorageVwcp(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 40, a2 + 40);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  unsigned int v6 = (_OWORD *)(a1 + 88);
  BOOL v7 = (_OWORD *)(a2 + 88);
  uint64_t v8 = *(void *)(a2 + 112);
  if (v8)
  {
    uint64_t v9 = *(void *)(a2 + 120);
    *(void *)(a1 + 112) = v8;
    *(void *)(a1 + 120) = v9;
    (**(void (***)(_OWORD *, _OWORD *))(v8 - 8))(v6, v7);
  }
  else
  {
    long long v10 = *(_OWORD *)(a2 + 104);
    *unsigned int v6 = *v7;
    *(_OWORD *)(a1 + 104) = v10;
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
  }
  long long v11 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 152) = v11;
  (**(void (***)(uint64_t, uint64_t))(v11 - 8))(a1 + 128, a2 + 128);
  return a1;
}

uint64_t _s20HorizontalPairLayoutV7StorageVwca(uint64_t a1, uint64_t a2)
{
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 40), (uint64_t *)(a2 + 40));
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  uint64_t v4 = *(void *)(a2 + 112);
  if (!*(void *)(a1 + 112))
  {
    if (v4)
    {
      *(void *)(a1 + 112) = v4;
      *(void *)(a1 + 120) = *(void *)(a2 + 120);
      (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 88, a2 + 88);
      goto LABEL_8;
    }
LABEL_7:
    long long v5 = *(_OWORD *)(a2 + 88);
    long long v6 = *(_OWORD *)(a2 + 104);
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    *(_OWORD *)(a1 + 88) = v5;
    *(_OWORD *)(a1 + 104) = v6;
    goto LABEL_8;
  }
  if (!v4)
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 88);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 88), (uint64_t *)(a2 + 88));
LABEL_8:
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 128), (uint64_t *)(a2 + 128));
  return a1;
}

__n128 __swift_memcpy168_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  long long v4 = a2[3];
  long long v5 = a2[4];
  long long v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  __n128 result = (__n128)a2[7];
  long long v8 = a2[8];
  long long v9 = a2[9];
  *(void *)(a1 + 160) = *((void *)a2 + 20);
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  *(__n128 *)(a1 + 112) = result;
  return result;
}

uint64_t _s20HorizontalPairLayoutV7StorageVwta(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  if (*(void *)(a1 + 112)) {
    __swift_destroy_boxed_opaque_existential_1(a1 + 88);
  }
  long long v5 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = v5;
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  __swift_destroy_boxed_opaque_existential_1(a1 + 128);
  long long v6 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v6;
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  return a1;
}

uint64_t _s20HorizontalPairLayoutV7StorageVwet(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 168)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s20HorizontalPairLayoutV7StorageVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 168) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 168) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *_s20HorizontalPairLayoutV7StorageVMa()
{
  return &_s20HorizontalPairLayoutV7StorageVN;
}

uint64_t static Center.Axis.neither.getter()
{
  return 0;
}

uint64_t static Center.Axis.horizontal.getter()
{
  return 1;
}

uint64_t static Center.Axis.both.getter()
{
  return 3;
}

void *sub_1B07D4D18@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

void *sub_1B07D4D2C@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

void *sub_1B07D4D40@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_1B07D4D6C@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v4 = *v2;
  *v2 |= *result;
  uint64_t v5 = v4 & v3;
  *(void *)a2 = v5;
  *(unsigned char *)(a2 + 8) = v5 == 0;
  return result;
}

void *sub_1B07D4D90(void *result)
{
  *v1 ^= *result;
  return result;
}

void *sub_1B07D4DA4@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_1B07D4DB8(void *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL sub_1B07D4DCC()
{
  return *v0 == 0;
}

void *sub_1B07D4DDC(void *result)
{
  *v1 &= ~*result;
  return result;
}

uint64_t sub_1B07D4DF0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = sub_1B07C7A9C();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t Center.Placements.union.getter@<X0>(uint64_t a1@<X8>)
{
  sub_1B07BB13C(v1, (uint64_t)&v39);
  sub_1B07BA914((uint64_t)v44, (uint64_t)&v25);
  if (*((void *)&v26 + 1))
  {
    sub_1B07BA8FC(&v25, (uint64_t)v32);
    sub_1B07B9AF8((uint64_t)v44);
    memset(v44, 0, sizeof(v44));
    uint64_t v45 = 0;
    uint64_t v3 = v33;
    uint64_t v4 = v34;
    __swift_project_boxed_opaque_existential_1(v32, v33);
    CGFloat v5 = v41;
    CGFloat v6 = v42;
    double v7 = (*(double (**)(uint64_t, uint64_t, uint64_t, double, double))(v4 + 8))(v43, v3, v4, v41, v42);
    double v9 = v8;
    double v23 = v10;
    double v21 = v11;
    CGFloat v12 = v39;
    CGFloat v13 = v40;
    v46.origin.CGFloat x = v39;
    v46.origin.CGFloat y = v40;
    v46.size.double width = v5;
    v46.size.double height = v6;
    double v14 = CGRectGetMidX(v46) - v7 * 0.5;
    v47.origin.CGFloat x = v12;
    v47.origin.CGFloat y = v13;
    v47.size.double width = v5;
    v47.size.double height = v6;
    double v15 = CGRectGetMidY(v47) - v9 * 0.5;
    sub_1B07BBD78((uint64_t)v32, (uint64_t)v31);
    sub_1B07BBD78((uint64_t)v31, (uint64_t)&v25);
    *((void *)&v27 + 1) = floor(v14);
    *(void *)&long long v28 = floor(v15);
    *((void *)&v28 + 1) = ceil(v7);
    *(void *)&long long v29 = ceil(v9);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
    *((void *)&v29 + 1) = floor(v23);
    double v30 = floor(v21);
    *(_OWORD *)uint64_t v37 = v27;
    *(_OWORD *)&v37[16] = v28;
    long long v35 = v25;
    long long v36 = v26;
    *(_OWORD *)&v37[32] = v29;
    double v38 = v30;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v32);
    uint64_t v16 = *((void *)&v36 + 1);
    uint64_t result = sub_1B07B968C((uint64_t)&v39);
    if (v16)
    {
      long long v22 = *(_OWORD *)&v37[24];
      long long v24 = *(_OWORD *)&v37[8];
      uint64_t v18 = *(void *)&v37[40];
      double v19 = v38;
      uint64_t result = sub_1B07BD394((uint64_t)&v35);
      *(_OWORD *)a1 = v24;
      *(_OWORD *)(a1 + 16) = v22;
      *(void *)(a1 + 32) = v18;
      *(double *)(a1 + 40) = v19;
      return result;
    }
  }
  else
  {
    sub_1B07B9AF8((uint64_t)&v25);
    uint64_t result = sub_1B07B968C((uint64_t)&v39);
  }
  if (qword_1E9B3A3E8 != -1) {
    uint64_t result = swift_once();
  }
  long long v20 = xmmword_1E9B3A5A0;
  *(_OWORD *)a1 = xmmword_1E9B3A590;
  *(_OWORD *)(a1 + 16) = v20;
  *(_OWORD *)(a1 + 32) = xmmword_1E9B3A5B0;
  return result;
}

__n128 sub_1B07D5080@<Q0>(uint64_t a1@<X8>)
{
  long long v2 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(a1 + 48) = v2;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(v1 + 64);
  *(void *)(a1 + 80) = *(void *)(v1 + 80);
  __n128 result = *(__n128 *)v1;
  long long v4 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v4;
  return result;
}

uint64_t sub_1B07D50A4()
{
  uint64_t v1 = sub_1B084F408(v0);
  sub_1B07B968C(v0);
  return v1;
}

uint64_t Center.layout(relativeTo:with:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  uint64_t v13 = *(void *)(v6 + 40);
  sub_1B07BBD78(v6, (uint64_t)v16);
  *(_OWORD *)(a2 + 64) = 0u;
  *(void *)(a2 + 80) = 0;
  *(_OWORD *)(a2 + 48) = 0u;
  *(double *)a2 = a3;
  *(double *)(a2 + 8) = a4;
  *(double *)(a2 + 16) = a5;
  *(double *)(a2 + 24) = a6;
  *(void *)(a2 + 32) = a1;
  *(void *)(a2 + 40) = v13;
  id v14 = a1;
  sub_1B07B9AF8(a2 + 48);
  return sub_1B07BA8FC(v16, a2 + 48);
}

JetUI::_LayoutAlignment __swiftcall Center._layoutAlignment(with:)(UITraitCollection with)
{
  *uint64_t v1 = 514;
  return (JetUI::_LayoutAlignment)with.super.isa;
}

uint64_t sub_1B07D5184@<X0>(void *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  uint64_t v13 = *(void *)(v6 + 40);
  sub_1B07BBD78(v6, (uint64_t)v16);
  *(_OWORD *)(a2 + 64) = 0u;
  *(void *)(a2 + 80) = 0;
  *(_OWORD *)(a2 + 48) = 0u;
  *(double *)a2 = a3;
  *(double *)(a2 + 8) = a4;
  *(double *)(a2 + 16) = a5;
  *(double *)(a2 + 24) = a6;
  *(void *)(a2 + 32) = a1;
  *(void *)(a2 + 40) = v13;
  id v14 = a1;
  sub_1B07B9AF8(a2 + 48);
  return sub_1B07BA8FC(v16, a2 + 48);
}

void sub_1B07D5220(_WORD *a1@<X8>)
{
  *a1 = 514;
}

unint64_t sub_1B07D5230()
{
  unint64_t result = qword_1E9B3ACC8;
  if (!qword_1E9B3ACC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3ACC8);
  }
  return result;
}

unint64_t sub_1B07D5288()
{
  unint64_t result = qword_1E9B3ACD0;
  if (!qword_1E9B3ACD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3ACD0);
  }
  return result;
}

unint64_t sub_1B07D52E0()
{
  unint64_t result = qword_1E9B3ACD8;
  if (!qword_1E9B3ACD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3ACD8);
  }
  return result;
}

unint64_t sub_1B07D5338()
{
  unint64_t result = qword_1E9B3ACE0;
  if (!qword_1E9B3ACE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3ACE0);
  }
  return result;
}

unint64_t sub_1B07D538C(uint64_t a1)
{
  unint64_t result = sub_1B07D53B4();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1B07D53B4()
{
  unint64_t result = qword_1E9B3ACE8;
  if (!qword_1E9B3ACE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3ACE8);
  }
  return result;
}

unint64_t sub_1B07D540C()
{
  unint64_t result = qword_1E9B3ACF0;
  if (!qword_1E9B3ACF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3ACF0);
  }
  return result;
}

unint64_t sub_1B07D5464()
{
  unint64_t result = qword_1E9B3ACF8[0];
  if (!qword_1E9B3ACF8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1E9B3ACF8);
  }
  return result;
}

uint64_t initializeWithCopy for Center(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

uint64_t *assignWithCopy for Center(uint64_t *a1, uint64_t *a2)
{
  a1[5] = a2[5];
  return a1;
}

uint64_t assignWithTake for Center(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  return a1;
}

uint64_t getEnumTagSinglePayload for Center(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Center(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Center.Axis()
{
  return &type metadata for Center.Axis;
}

uint64_t assignWithCopy for Center.Placements(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  long long v4 = *(void **)(a2 + 32);
  uint64_t v5 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = v4;
  id v6 = v4;

  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v7 = *(void *)(a2 + 72);
  if (!*(void *)(a1 + 72))
  {
    if (v7)
    {
      *(void *)(a1 + 72) = v7;
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 48, a2 + 48);
      return a1;
    }
LABEL_7:
    long long v8 = *(_OWORD *)(a2 + 48);
    long long v9 = *(_OWORD *)(a2 + 64);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(_OWORD *)(a1 + 48) = v8;
    *(_OWORD *)(a1 + 64) = v9;
    return a1;
  }
  if (!v7)
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 48);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 48), (uint64_t *)(a2 + 48));
  return a1;
}

__n128 __swift_memcpy88_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for Center.Placements(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  long long v5 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);

  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  if (*(void *)(a1 + 72)) {
    __swift_destroy_boxed_opaque_existential_1(a1 + 48);
  }
  long long v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v6;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  return a1;
}

uint64_t getEnumTagSinglePayload for Center.Placements(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 88)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Center.Placements(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 88) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 88) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Center.Placements()
{
  return &type metadata for Center.Placements;
}

id sub_1B07D5868()
{
  return static JUComponent.makeView()();
}

id static JUComponent.makeView()()
{
  swift_getAssociatedTypeWitness();
  id v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());

  return objc_msgSend(v0, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
}

uint64_t sub_1B07D58E0()
{
  return MEMORY[0x1E4FBC870];
}

uint64_t static JUComponent.reapplyTriggers(for:)()
{
  return MEMORY[0x1E4FBC870];
}

uint64_t sub_1B07D58F8()
{
  return 0;
}

uint64_t static JUComponent.reapplyDirectly(from:to:)()
{
  return 0;
}

uint64_t JUComponentConfiguration.init(contentsOf:with:asPartOf:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t *a5@<X8>)
{
  *a5 = sub_1B07D5A14(MEMORY[0x1E4FBC860]);
  double v10 = (int *)type metadata accessor for JUComponentConfiguration();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))((char *)a5 + v10[13], a1, a4);
  double v11 = (char *)a5 + v10[14];
  uint64_t v12 = sub_1B0869978();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32))(v11, a2, v12);
  *(unint64_t *)((char *)a5 + v10[15]) = a3;
  return result;
}

unint64_t sub_1B07D5A14(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3ADA8);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  long long v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3ABB0);
  uint64_t v6 = sub_1B086A718();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  long long v9 = &v5[*(int *)(v2 + 48)];
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_1B07B9258(v12, (uint64_t)v5, &qword_1E9B3ADA8);
    unint64_t result = sub_1B07E4650((uint64_t)v5);
    if (v15) {
      break;
    }
    unint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v17 = v7[6];
    uint64_t v18 = sub_1B08698A8();
    (*(void (**)(unint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16, v5, v18);
    unint64_t result = (unint64_t)sub_1B07BFE44(v9, (_OWORD *)(v7[7] + 32 * v16));
    uint64_t v19 = v7[2];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (v20) {
      goto LABEL_11;
    }
    _OWORD v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for JUComponentConfiguration()
{
  return swift_getGenericMetadata();
}

unint64_t sub_1B07D5C2C(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3AD80);
  uint64_t v2 = (void *)sub_1B086A718();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    uint64_t v5 = *v4;
    id v6 = (id)*(v4 - 1);
    swift_unknownObjectRetain();
    unint64_t result = sub_1B07E46E4((uint64_t)v6);
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v9 = 8 * result;
    *(void *)(v2[6] + v9) = v6;
    *(void *)(v2[7] + v9) = v5;
    uint64_t v10 = v2[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v2[2] = v12;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1B07D5D38(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3AB90);
  uint64_t v2 = (void *)sub_1B086A718();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 3);
    uint64_t v6 = *(v4 - 2);
    uint64_t v8 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_1B07E4728(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    BOOL v11 = (uint64_t *)(v2[6] + 16 * result);
    *BOOL v11 = v5;
    v11[1] = v6;
    uint64_t v12 = (void *)(v2[7] + 16 * result);
    *uint64_t v12 = v8;
    v12[1] = v7;
    uint64_t v13 = v2[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1B07D5E5C(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3ADA0);
  uint64_t v2 = (void *)sub_1B086A718();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 3);
    uint64_t v6 = *(v4 - 2);
    uint64_t v8 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_1B07E47A0(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    BOOL v11 = (void *)(v2[6] + 16 * result);
    *BOOL v11 = v5;
    v11[1] = v6;
    uint64_t v12 = (void *)(v2[7] + 16 * result);
    *uint64_t v12 = v8;
    v12[1] = v7;
    uint64_t v13 = v2[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1B07D5F80(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3AD98);
  uint64_t v2 = (void *)sub_1B086A718();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (id *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = (uint64_t)*(v4 - 2);
    uint64_t v6 = (uint64_t)*(v4 - 1);
    id v7 = *v4;
    id v8 = *v4;
    swift_bridgeObjectRetain();
    unint64_t result = sub_1B07E4728(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    BOOL v11 = (uint64_t *)(v2[6] + 16 * result);
    *BOOL v11 = v5;
    v11[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    uint64_t v12 = v2[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v4 += 3;
    v2[2] = v14;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1B07D6098(uint64_t a1)
{
  return sub_1B07BFD14(a1, &qword_1EB595958, &qword_1E9B3AD90, (uint64_t (*)(uint64_t))sub_1B07E45BC);
}

unint64_t sub_1B07D60C0(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3ABA8);
  uint64_t v2 = (void *)sub_1B086A718();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (unsigned char *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *((void *)v4 - 2);
    uint64_t v6 = *((void *)v4 - 1);
    char v7 = *v4;
    swift_bridgeObjectRetain();
    unint64_t result = sub_1B07E4728(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    char v10 = (uint64_t *)(v2[6] + 16 * result);
    *char v10 = v5;
    v10[1] = v6;
    *(unsigned char *)(v2[7] + result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v4 += 24;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1B07D61D4(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3ABB8);
  uint64_t v2 = (void *)sub_1B086A718();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (unint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 3);
    uint64_t v6 = *(v4 - 2);
    uint64_t v7 = *(v4 - 1);
    unint64_t v8 = *v4;
    swift_bridgeObjectRetain();
    sub_1B07CBEE8(v7, v8);
    unint64_t result = sub_1B07E4728(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v11 = v5;
    v11[1] = v6;
    BOOL v12 = (uint64_t *)(v2[7] + 16 * result);
    *BOOL v12 = v7;
    v12[1] = v8;
    uint64_t v13 = v2[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1B07D62FC(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3AB98);
  uint64_t v2 = (void *)sub_1B086A718();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (_OWORD *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *((void *)v4 - 2);
    uint64_t v6 = *((void *)v4 - 1);
    long long v13 = *v4;
    swift_bridgeObjectRetain();
    swift_retain();
    unint64_t result = sub_1B07E47A0(v5, v6);
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    char v9 = (void *)(v2[6] + 16 * result);
    *char v9 = v5;
    v9[1] = v6;
    *(_OWORD *)(v2[7] + 16 * result) = v13;
    uint64_t v10 = v2[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v2[2] = v12;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1B07D6428(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3AD88);
  uint64_t v2 = (void *)sub_1B086A718();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    uint64_t v5 = *v4;
    id v6 = (id)*(v4 - 1);
    unint64_t result = sub_1B07BFEE4();
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v9 = 8 * result;
    *(void *)(v2[6] + v9) = v6;
    *(void *)(v2[7] + v9) = v5;
    uint64_t v10 = v2[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v4 += 2;
    v2[2] = v12;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t JUComponentConfiguration.model.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 52));
}

uint64_t JUComponentConfiguration.model.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2 + *(int *)(a2 + 52), a1);
}

uint64_t (*JUComponentConfiguration.model.modify())()
{
  return nullsub_1;
}

uint64_t JUComponentConfiguration.state.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 56);
  uint64_t v5 = sub_1B0869978();
  id v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t JUComponentConfiguration.state.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 56);
  uint64_t v5 = sub_1B0869978();
  id v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);

  return v6(v4, a1, v5);
}

uint64_t (*JUComponentConfiguration.state.modify())()
{
  return nullsub_1;
}

uint64_t JUComponentConfiguration.objectGraph.getter()
{
  return swift_retain();
}

uint64_t JUComponentConfiguration.objectGraph.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(int *)(a2 + 60);
  uint64_t result = swift_release();
  *(void *)(v2 + v4) = a1;
  return result;
}

uint64_t (*JUComponentConfiguration.objectGraph.modify())()
{
  return nullsub_1;
}

uint64_t dispatch thunk of static JUComponent.makeView()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of static JUComponent.prepare(toReuse:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t dispatch thunk of static JUComponent.apply(_:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 72))();
}

uint64_t dispatch thunk of static JUComponent.reapplyTriggers(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 80))();
}

uint64_t dispatch thunk of static JUComponent.reapplyDirectly(from:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 88))();
}

uint64_t sub_1B07D6798(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 48);
}

uint64_t sub_1B07D67A0()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = sub_1B0869978();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_1B07D688C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v5 = *a2;
  *a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
  }
  else
  {
    uint64_t v8 = *(int *)(a3 + 52);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = *(void *)(a3 + 16);
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = *(int *)(a3 + 56);
    BOOL v14 = (char *)a1 + v13;
    uint64_t v15 = (char *)a2 + v13;
    uint64_t v16 = sub_1B0869978();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 60)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 60));
  }
  swift_retain();
  return a1;
}

uint64_t sub_1B07D69C0(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 8))(a1 + *(int *)(a2 + 52));
  uint64_t v4 = a1 + *(int *)(a2 + 56);
  uint64_t v5 = sub_1B0869978();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);

  return swift_release();
}

void *sub_1B07D6A84(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 52);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = *(void *)(a3 + 16);
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 56);
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = sub_1B0869978();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
  *(void *)((char *)a1 + *(int *)(a3 + 60)) = *(void *)((char *)a2 + *(int *)(a3 + 60));
  swift_retain();
  return a1;
}

char *sub_1B07D6B74(char *a1, char *a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, char *))(*(void *)(*(void *)(a3 + 16) - 8) + 24))(&a1[*(int *)(a3 + 52)], &a2[*(int *)(a3 + 52)]);
  uint64_t v6 = *(int *)(a3 + 56);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = sub_1B0869978();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  *(void *)&a1[*(int *)(a3 + 60)] = *(void *)&a2[*(int *)(a3 + 60)];
  swift_retain();
  swift_release();
  return a1;
}

char *sub_1B07D6C68(char *a1, char *a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  (*(void (**)(char *, char *))(*(void *)(*(void *)(a3 + 16) - 8) + 32))(&a1[*(int *)(a3 + 52)], &a2[*(int *)(a3 + 52)]);
  uint64_t v6 = *(int *)(a3 + 56);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = sub_1B0869978();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  *(void *)&a1[*(int *)(a3 + 60)] = *(void *)&a2[*(int *)(a3 + 60)];
  return a1;
}

char *sub_1B07D6D3C(char *a1, char *a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, char *))(*(void *)(*(void *)(a3 + 16) - 8) + 40))(&a1[*(int *)(a3 + 52)], &a2[*(int *)(a3 + 52)]);
  uint64_t v6 = *(int *)(a3 + 56);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = sub_1B0869978();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  *(void *)&a1[*(int *)(a3 + 60)] = *(void *)&a2[*(int *)(a3 + 60)];
  swift_release();
  return a1;
}

uint64_t sub_1B07D6E20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B07D6E34);
}

uint64_t sub_1B07D6E34(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = *(void *)(*(void *)(a3 + 16) - 8);
    if (*(_DWORD *)(v8 + 84) == a2)
    {
      uint64_t v9 = (char *)a1 + *(int *)(a3 + 52);
      uint64_t v10 = *(uint64_t (**)(char *))(v8 + 48);
      return v10(v9);
    }
    else
    {
      uint64_t v11 = sub_1B0869978();
      uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48);
      uint64_t v13 = v11;
      uint64_t v14 = (char *)a1 + *(int *)(a3 + 56);
      return v12(v14, a2, v13);
    }
  }
}

uint64_t sub_1B07D6F5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B07D6F70);
}

void *sub_1B07D6F70(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
    if (*(_DWORD *)(v7 + 84) == a3)
    {
      uint64_t v8 = (char *)result + *(int *)(a4 + 52);
      uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 56);
      return (void *)v9(v8, a2, a2);
    }
    else
    {
      uint64_t v10 = sub_1B0869978();
      uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
      uint64_t v12 = v10;
      uint64_t v13 = (char *)v5 + *(int *)(a4 + 56);
      return (void *)v11(v13, a2, a2, v12);
    }
  }
  return result;
}

void sub_1B07D7094()
{
  uint64_t v0 = sub_1B0869688();
  MEMORY[0x1F4188790](v0 - 8);
  uint64_t v75 = sub_1B0869C18();
  uint64_t v1 = *(void *)(v75 - 8);
  MEMORY[0x1F4188790](v75);
  double v76 = (char *)&v58 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v3 = objc_msgSend(self, sel_sharedApplication);
  id v4 = objc_msgSend(v3, sel_connectedScenes);

  unint64_t v5 = sub_1B07D7A28();
  sub_1B07C7B10();
  uint64_t v6 = sub_1B086A158();

  unint64_t v67 = v5;
  if ((v6 & 0xC000000000000001) != 0)
  {
    sub_1B086A4C8();
    sub_1B086A1A8();
    uint64_t v6 = v82;
    uint64_t v70 = v83;
    uint64_t v7 = v84;
    uint64_t v8 = v85;
    uint64_t v9 = v86;
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v10 = -1 << *(unsigned char *)(v6 + 32);
    uint64_t v11 = *(void *)(v6 + 56);
    uint64_t v70 = v6 + 56;
    uint64_t v7 = ~v10;
    uint64_t v12 = -v10;
    if (v12 < 64) {
      uint64_t v13 = ~(-1 << v12);
    }
    else {
      uint64_t v13 = -1;
    }
    uint64_t v9 = v13 & v11;
  }
  CGFloat v65 = 0;
  uint64_t v64 = 0;
  uint64_t v68 = v6 & 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v62 = v7;
  int64_t v69 = (unint64_t)(v7 + 64) >> 6;
  double v74 = (void (**)(char *, uint64_t, uint64_t))(v1 + 16);
  double v73 = (void (**)(char *, uint64_t))(v1 + 8);
  CGFloat v61 = &v79;
  CGFloat v63 = (char *)MEMORY[0x1E4FBC860];
  long long v72 = xmmword_1B086C130;
  unint64_t v71 = 0x80000001B0874270;
  uint64_t v66 = MEMORY[0x1E4FBC838] + 8;
LABEL_8:
  uint64_t v14 = v8;
  unint64_t v15 = v9;
  while (v6 < 0)
  {
    uint64_t v23 = sub_1B086A518();
    if (!v23) {
      goto LABEL_48;
    }
    uint64_t v77 = v23;
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v24 = (id)aBlock;
    swift_unknownObjectRelease();
    uint64_t v8 = v14;
    uint64_t v9 = v15;
    if (!v24) {
      goto LABEL_48;
    }
LABEL_32:
    if (!objc_msgSend(v24, sel_activationState))
    {
      self;
      uint64_t v28 = swift_dynamicCastObjCClass();
      if (v28)
      {
        long long v29 = (void *)v28;
        id v30 = v24;
        id v31 = objc_msgSend(v29, sel_keyWindow);
        if (v31)
        {
          long long v36 = v31;
          objc_msgSend(v31, sel_bounds);
          id v60 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB17D8]), sel_initWithBounds_, v37, v38, v39, v40);
          uint64_t v41 = swift_allocObject();
          *(void *)(v41 + 16) = v36;
          double v42 = v36;
          sub_1B07BDB64((uint64_t)v65);
          uint64_t v43 = swift_allocObject();
          *(void *)(v43 + 16) = sub_1B07D7BA4;
          *(void *)(v43 + 24) = v41;
          uint64_t v64 = v41;
          uint64_t v80 = sub_1B07D7BBC;
          uint64_t v81 = v43;
          *(void *)&long long aBlock = MEMORY[0x1E4F143A8];
          *((void *)&aBlock + 1) = 1107296256;
          *(void *)&long long v79 = sub_1B07D7B20;
          *((void *)&v79 + 1) = &block_descriptor_0;
          double v44 = _Block_copy(&aBlock);
          swift_retain();
          swift_release();
          id v45 = v60;
          CGRect v46 = (UIImage *)objc_msgSend(v60, sel_imageWithActions_, v44);

          _Block_release(v44);
          LOBYTE(v44) = swift_isEscapingClosureAtFileLocation();
          swift_release();
          if (v44) {
            goto LABEL_50;
          }
          CGRect v47 = UIImagePNGRepresentation(v46);
          if (v47)
          {
            uint64_t v48 = v47;
            CGFloat v65 = v42;
            uint64_t v49 = sub_1B0869128();
            CGFloat v51 = v50;

            id v60 = v51;
            sub_1B07CBEE8(v49, (unint64_t)v51);
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v59 = v6;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
              CGFloat v63 = sub_1B07CEC18(0, *((void *)v63 + 2) + 1, 1, v63);
            }
            unint64_t v54 = *((void *)v63 + 2);
            unint64_t v53 = *((void *)v63 + 3);
            if (v54 >= v53 >> 1) {
              CGFloat v63 = sub_1B07CEC18((char *)(v53 > 1), v54 + 1, 1, v63);
            }
            CGFloat v55 = v63;
            *((void *)v63 + 2) = v54 + 1;
            CGFloat v56 = &v55[16 * v54];
            unint64_t v57 = (unint64_t)v60;
            *((void *)v56 + 4) = v49;
            *((void *)v56 + 5) = v57;

            sub_1B07CBE90(v49, v57);
            CGFloat v65 = sub_1B07D7BA4;
            uint64_t v6 = v59;
          }
          else
          {

            CGFloat v65 = sub_1B07D7BA4;
          }
          goto LABEL_8;
        }
      }
    }
    uint64_t v32 = v6;
    if (qword_1E9B3A6A0 != -1) {
      swift_once();
    }
    uint64_t v33 = v75;
    uint64_t v34 = __swift_project_value_buffer(v75, (uint64_t)qword_1E9B46108);
    (*v74)(v76, v34, v33);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E9B3AA70);
    sub_1B08696C8();
    *(_OWORD *)(swift_allocObject() + 16) = v72;
    sub_1B0869678();
    sub_1B0869668();
    id v35 = objc_msgSend(v24, sel_title);
    if (v35)
    {
      uint64_t v16 = v35;
      uint64_t v17 = sub_1B0869D98();
      uint64_t v19 = v18;

      *((void *)&v79 + 1) = MEMORY[0x1E4FBB1A0];
      *(void *)&long long aBlock = v17;
      *((void *)&aBlock + 1) = v19;
    }
    else
    {
      long long aBlock = 0u;
      long long v79 = 0u;
    }
    sub_1B0869638();
    sub_1B07B86F8((uint64_t)&aBlock);
    sub_1B0869668();
    sub_1B0869698();
    uint64_t v21 = v75;
    BOOL v20 = v76;
    sub_1B0869AD8();

    swift_bridgeObjectRelease();
    (*v73)(v20, v21);
    uint64_t v14 = v8;
    unint64_t v15 = v9;
    uint64_t v6 = v32;
  }
  if (v15)
  {
    uint64_t v9 = (v15 - 1) & v15;
    unint64_t v22 = __clz(__rbit64(v15)) | (v14 << 6);
    uint64_t v8 = v14;
LABEL_31:
    id v24 = *(id *)(*(void *)(v6 + 48) + 8 * v22);
    if (!v24) {
      goto LABEL_48;
    }
    goto LABEL_32;
  }
  int64_t v25 = v14 + 1;
  if (!__OFADD__(v14, 1))
  {
    if (v25 >= v69) {
      goto LABEL_48;
    }
    unint64_t v26 = *(void *)(v70 + 8 * v25);
    uint64_t v8 = v14 + 1;
    if (!v26)
    {
      uint64_t v8 = v14 + 2;
      if (v14 + 2 >= v69) {
        goto LABEL_48;
      }
      unint64_t v26 = *(void *)(v70 + 8 * v8);
      if (!v26)
      {
        uint64_t v8 = v14 + 3;
        if (v14 + 3 >= v69) {
          goto LABEL_48;
        }
        unint64_t v26 = *(void *)(v70 + 8 * v8);
        if (!v26)
        {
          uint64_t v8 = v14 + 4;
          if (v14 + 4 >= v69) {
            goto LABEL_48;
          }
          unint64_t v26 = *(void *)(v70 + 8 * v8);
          if (!v26)
          {
            uint64_t v27 = v14 + 5;
            while (v69 != v27)
            {
              unint64_t v26 = *(void *)(v70 + 8 * v27++);
              if (v26)
              {
                uint64_t v8 = v27 - 1;
                goto LABEL_30;
              }
            }
LABEL_48:
            sub_1B07C7B78();
            sub_1B07BDB64((uint64_t)v65);
            return;
          }
        }
      }
    }
LABEL_30:
    uint64_t v9 = (v26 - 1) & v26;
    unint64_t v22 = __clz(__rbit64(v26)) + (v8 << 6);
    goto LABEL_31;
  }
  __break(1u);
LABEL_50:
  __break(1u);
}

unint64_t sub_1B07D7A28()
{
  unint64_t result = qword_1E9B3AA60;
  if (!qword_1E9B3AA60)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1E9B3AA60);
  }
  return result;
}

void sub_1B07D7A68(void *a1, id a2)
{
  id v3 = objc_msgSend(a2, sel_layer);
  id v4 = objc_msgSend(a1, sel_CGContext);
  objc_msgSend(v3, sel_renderInContext_, v4);
}

uint64_t sub_1B07D7AF8(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

void sub_1B07D7B20(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void (**)(void))(a1 + 32);
  id v3 = a2;
  v2();
}

uint64_t sub_1B07D7B6C()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

void sub_1B07D7BA4(void *a1)
{
  sub_1B07D7A68(a1, *(id *)(v1 + 16));
}

uint64_t sub_1B07D7BAC()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1B07D7BBC()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

void destroy for DSPNGPackager(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void **)(a1 + 24);
}

void *initializeWithCopy for DSPNGPackager(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  id v4 = (void *)a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v5 = v4;
  return a1;
}

void *assignWithCopy for DSPNGPackager(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  id v4 = (void *)a2[3];
  id v5 = (void *)a1[3];
  a1[3] = v4;
  id v6 = v4;

  return a1;
}

uint64_t assignWithTake for DSPNGPackager(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  id v4 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);

  return a1;
}

uint64_t getEnumTagSinglePayload for DSPNGPackager(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DSPNGPackager(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DSPNGPackager()
{
  return &type metadata for DSPNGPackager;
}

uint64_t sub_1B07D7DE8(uint64_t a1, unint64_t a2, unsigned char *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v12 = sub_1B0869DD8();
  MEMORY[0x1F4188790](v12 - 8);
  if (*a3 != 1)
  {
    uint64_t v19 = *(void *)(v6 + 16);
    uint64_t v18 = (uint64_t *)(v6 + 16);
    if (!*(void *)(v19 + 16)
      || (swift_bridgeObjectRetain(), sub_1B07E4728(a4, a5), char v21 = v20, swift_bridgeObjectRelease(), (v21 & 1) == 0))
    {
      swift_bridgeObjectRetain();
      sub_1B0869DC8();
      uint64_t v23 = sub_1B0869DA8();
      if (v24)
      {
        uint64_t v25 = v23;
        uint64_t v26 = v24;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v28 = *v18;
        *uint64_t v18 = 0x8000000000000000;
        sub_1B07CA5D0(v25, v26, a4, a5, isUniquelyReferenced_nonNull_native);
        *uint64_t v18 = v28;
      }
      else
      {
        sub_1B07D83D0(a4, a5);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return 1;
    }
    return 0;
  }
  id v13 = objc_allocWithZone(MEMORY[0x1E4FB1818]);
  sub_1B07CBEE8(a1, a2);
  uint64_t v14 = (void *)sub_1B0869108();
  id v15 = objc_msgSend(v13, sel_initWithData_, v14);
  sub_1B07CBE90(a1, a2);

  if (!v15) {
    return 0;
  }
  uint64_t v16 = *(void **)(v6 + 24);
  uint64_t v17 = sub_1B0844CF4(v16, v15);

  if (!v17) {
    return 0;
  }

  *(void *)(v6 + 24) = v17;
  return 1;
}

NSData *sub_1B07D7FE8@<X0>(uint64_t a1@<X2>, UIImage *a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v25 = a1;
  uint64_t v6 = sub_1B08690F8();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v24 - v11;
  id v13 = objc_msgSend(self, sel_defaultManager);
  id v14 = objc_msgSend(v13, sel_temporaryDirectory);

  sub_1B08690C8();
  sub_1B08690B8();
  sub_1B08690B8();
  unint64_t result = UIImagePNGRepresentation(a2);
  if (result)
  {
    uint64_t v16 = result;
    uint64_t v17 = sub_1B0869128();
    unint64_t v19 = v18;

    sub_1B0869138();
    if (v3)
    {
      sub_1B07CBE90(v17, v19);
      char v20 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
      v20(a3, v6);
    }
    else
    {
      uint64_t v24 = a3;
      sub_1B07CBE90(v17, v19);
      sub_1B0869008();
      swift_allocObject();
      sub_1B0868FF8();
      uint64_t v26 = v25;
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3ADB0);
      sub_1B07D8364();
      uint64_t v21 = sub_1B0868FE8();
      unint64_t v23 = v22;
      swift_release();
      swift_bridgeObjectRelease();
      sub_1B0869118();
      sub_1B07CBE90(v21, v23);
      sub_1B07D8DAC();
      swift_bridgeObjectRelease();
      char v20 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
    }
    v20((uint64_t)v10, v6);
    return (NSData *)((uint64_t (*)(char *, uint64_t))v20)(v12, v6);
  }
  else
  {
    __break(1u);
  }
  return result;
}

NSData *sub_1B07D8310@<X0>(uint64_t a1@<X8>)
{
  return sub_1B07D7FE8(*(void *)(v1 + 16), *(UIImage **)(v1 + 24), a1);
}

uint64_t sub_1B07D832C()
{
  unint64_t v1 = sub_1B07D5D38(MEMORY[0x1E4FBC860]);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v0 + 16) = v1;
  return result;
}

unint64_t sub_1B07D8364()
{
  unint64_t result = qword_1E9B3ADB8;
  if (!qword_1E9B3ADB8)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1E9B3ADB0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3ADB8);
  }
  return result;
}

uint64_t sub_1B07D83D0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_1B07E4728(a1, a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *v3;
  uint64_t v12 = *v3;
  uint64_t *v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1B07CB264();
    uint64_t v9 = v12;
  }
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(*(void *)(v9 + 56) + 16 * v6);
  sub_1B07D86F0(v6, v9);
  uint64_t *v3 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

double sub_1B07D84B8@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_1B07E4650(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v13 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1B07CB420();
      uint64_t v9 = v13;
    }
    uint64_t v10 = *(void *)(v9 + 48);
    uint64_t v11 = sub_1B08698A8();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * v6, v11);
    sub_1B07BFE44((_OWORD *)(*(void *)(v9 + 56) + 32 * v6), a2);
    sub_1B07D88C8(v6, v9);
    uint64_t *v3 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

double sub_1B07D85E4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  id v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_1B07E4728(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v13 = *v4;
    uint64_t *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1B07CB874();
      uint64_t v11 = v13;
    }
    swift_bridgeObjectRelease();
    sub_1B07BA8FC((long long *)(*(void *)(v11 + 56) + 40 * v8), a3);
    sub_1B07D8BC0(v8, v11);
    uint64_t *v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    *(void *)(a3 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return result;
}

unint64_t sub_1B07D86F0(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = sub_1B086A4A8();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        sub_1B086A958();
        swift_bridgeObjectRetain();
        sub_1B0869E38();
        uint64_t v9 = sub_1B086A998();
        double result = swift_bridgeObjectRelease();
        unint64_t v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          uint64_t v12 = (_OWORD *)(v11 + 16 * v3);
          uint64_t v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            *uint64_t v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          id v15 = (_OWORD *)(v14 + 16 * v3);
          uint64_t v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            *id v15 = *v16;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v18 = *v17;
    uint64_t v19 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v19 = *v17;
    uint64_t v18 = (-1 << result) - 1;
  }
  *uint64_t v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  BOOL v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1B07D88C8(int64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1B08698A8();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t result = MEMORY[0x1F4188790](v4);
  unint64_t v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v11 = ~v9;
    uint64_t v35 = a2 + 64;
    unint64_t result = sub_1B086A4A8();
    uint64_t v12 = v35;
    if ((*(void *)(v35 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      unint64_t v32 = (result + 1) & v11;
      uint64_t v33 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v34 = v5 + 16;
      uint64_t v13 = (uint64_t (**)(char *, uint64_t))(v5 + 8);
      uint64_t v14 = *(void *)(v5 + 72);
      do
      {
        uint64_t v15 = v14;
        int64_t v16 = v14 * v10;
        v33(v8, *(void *)(a2 + 48) + v14 * v10, v4);
        sub_1B07D909C(&qword_1E9B3B120, MEMORY[0x1E4F71238]);
        uint64_t v17 = sub_1B0869D08();
        unint64_t result = (*v13)(v8, v4);
        unint64_t v18 = v17 & v11;
        if (a1 >= (uint64_t)v32)
        {
          if (v18 >= v32 && a1 >= (uint64_t)v18)
          {
LABEL_16:
            uint64_t v21 = *(void *)(a2 + 48);
            uint64_t v14 = v15;
            unint64_t result = v21 + v15 * a1;
            if (v15 * a1 < v16 || result >= v21 + v16 + v15)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
            }
            else if (v15 * a1 != v16)
            {
              unint64_t result = swift_arrayInitWithTakeBackToFront();
            }
            uint64_t v22 = *(void *)(a2 + 56);
            unint64_t v23 = (_OWORD *)(v22 + 32 * a1);
            uint64_t v24 = (_OWORD *)(v22 + 32 * v10);
            uint64_t v12 = v35;
            if (a1 != v10 || (a1 = v10, v23 >= v24 + 2))
            {
              long long v25 = v24[1];
              *unint64_t v23 = *v24;
              v23[1] = v25;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v18 >= v32 || a1 >= (uint64_t)v18)
        {
          goto LABEL_16;
        }
        uint64_t v12 = v35;
        uint64_t v14 = v15;
LABEL_5:
        unint64_t v10 = (v10 + 1) & v11;
      }
      while (((*(void *)(v12 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    uint64_t v26 = (uint64_t *)(v12 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v27 = *v26;
    uint64_t v28 = (-1 << a1) - 1;
  }
  else
  {
    uint64_t v26 = (uint64_t *)(a2 + 64 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v28 = *v26;
    uint64_t v27 = (-1 << a1) - 1;
  }
  *uint64_t v26 = v28 & v27;
  uint64_t v29 = *(void *)(a2 + 16);
  BOOL v30 = __OFSUB__(v29, 1);
  uint64_t v31 = v29 - 1;
  if (v30)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v31;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1B07D8BC0(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = sub_1B086A4A8();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        sub_1B086A958();
        swift_bridgeObjectRetain();
        sub_1B0869E38();
        uint64_t v11 = sub_1B086A998();
        unint64_t result = swift_bridgeObjectRelease();
        unint64_t v12 = v11 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v12 < v8) {
            goto LABEL_5;
          }
        }
        else if (v12 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v12)
        {
LABEL_11:
          uint64_t v13 = *(void *)(a2 + 48);
          uint64_t v14 = (_OWORD *)(v13 + 16 * v3);
          uint64_t v15 = (_OWORD *)(v13 + 16 * v6);
          if (v3 != v6 || v14 >= v15 + 1) {
            *uint64_t v14 = *v15;
          }
          uint64_t v16 = *(void *)(a2 + 56);
          unint64_t v17 = v16 + 40 * v3;
          unint64_t v18 = (long long *)(v16 + 40 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v17 >= (unint64_t)v18 + 40))
          {
            long long v9 = *v18;
            long long v10 = v18[1];
            *(void *)(v17 + 32) = *((void *)v18 + 4);
            *(_OWORD *)unint64_t v17 = v9;
            *(_OWORD *)(v17 + 16) = v10;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v20 = *v19;
    uint64_t v21 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v21 = *v19;
    uint64_t v20 = (-1 << result) - 1;
  }
  *uint64_t v19 = v21 & v20;
  uint64_t v22 = *(void *)(a2 + 16);
  BOOL v23 = __OFSUB__(v22, 1);
  uint64_t v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

void sub_1B07D8DAC()
{
  CFURLRef v0 = (const __CFURL *)sub_1B08690A8();
  unint64_t v1 = CGImageSourceCreateWithURL(v0, 0);

  if (v1)
  {
    CFURLRef v2 = (const __CFURL *)sub_1B08690A8();
    int64_t v3 = CGImageDestinationCreateWithURL(v2, (CFStringRef)*MEMORY[0x1E4F22678], 1uLL, 0);

    if (v3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3ADC8);
      initeCGFloat d = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1B086C130;
      uint64_t v5 = (void *)*MEMORY[0x1E4F2F958];
      *(void *)(inited + 32) = *MEMORY[0x1E4F2F958];
      id v6 = v5;
      *(void *)(inited + 40) = sub_1B0869D68();
      sub_1B07D5C2C(inited);
      uint64_t v7 = swift_initStackObject();
      *(_OWORD *)(v7 + 16) = xmmword_1B086C130;
      unint64_t v8 = (void *)*MEMORY[0x1E4F2F800];
      *(void *)(v7 + 32) = *MEMORY[0x1E4F2F800];
      sub_1B07D905C();
      sub_1B07D909C(&qword_1E9B3ADD8, (void (*)(uint64_t))sub_1B07D905C);
      id v9 = v8;
      uint64_t v10 = sub_1B0869CA8();
      swift_bridgeObjectRelease();
      *(void *)(v7 + 40) = v10;
      sub_1B07D5C2C(v7);
      CFDictionaryRef v11 = (const __CFDictionary *)sub_1B0869CA8();
      swift_bridgeObjectRelease();
      CGImageDestinationAddImageFromSource(v3, v1, 0, v11);

      CGImageDestinationFinalize(v3);
    }
    else
    {
      sub_1B07D9008();
      swift_allocError();
      *uint64_t v13 = 0;
      swift_willThrow();
    }
  }
  else
  {
    sub_1B07D9008();
    swift_allocError();
    *unint64_t v12 = 1;
    swift_willThrow();
  }
}

unint64_t sub_1B07D9008()
{
  unint64_t result = qword_1E9B3ADC0;
  if (!qword_1E9B3ADC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3ADC0);
  }
  return result;
}

unint64_t sub_1B07D905C()
{
  unint64_t result = qword_1E9B3ADD0;
  if (!qword_1E9B3ADD0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1E9B3ADD0);
  }
  return result;
}

uint64_t sub_1B07D909C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for DSPNGPackagerError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B07D91B0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DSPNGPackagerError()
{
  return &type metadata for DSPNGPackagerError;
}

unint64_t sub_1B07D91EC()
{
  unint64_t result = qword_1E9B3ADE0;
  if (!qword_1E9B3ADE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3ADE0);
  }
  return result;
}

uint64_t sub_1B07D9240(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

id sub_1B07D9254(void *a1)
{
  id v1 = objc_msgSend(a1, sel_navigationController);

  return v1;
}

id UINavigationController.ju_navigationController.getter()
{
  id v1 = objc_msgSend(v0, sel_navigationController);

  return v1;
}

id sub_1B07D92C4(void *a1)
{
  id v1 = objc_msgSend(a1, sel_navigationItem);

  return v1;
}

id UINavigationController.ju_navigationItem.getter()
{
  id v1 = objc_msgSend(v0, sel_navigationItem);

  return v1;
}

void *LayoutView.withMeasurements(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>, double a7@<D3>)
{
  uint64_t v15 = *(void *)(a1 - 8);
  MEMORY[0x1F4188790](a1);
  unint64_t v17 = (char *)&v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for PartialLayoutView();
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, v7, a1);
  unint64_t result = sub_1B0842244((uint64_t)v17, a4, a5, a6, a7, v18, a1, a2);
  a3[3] = v18;
  a3[4] = &off_1F094E1C8;
  *a3 = result;
  return result;
}

void *LayoutView.withMeasurements(representing:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  uint64_t v11 = *(void *)(a1 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for PartialLayoutView();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v5, a1);
  unint64_t result = sub_1B0842244((uint64_t)v13, a4, a5, a5, 0.0, v14, a1, a2);
  a3[3] = v14;
  a3[4] = &off_1F094E1C8;
  *a3 = result;
  return result;
}

uint64_t LayoutView.withMeasurements(providedBy:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v9 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PartialLayoutView();
  sub_1B07BBD78(a1, (uint64_t)v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v4, a2);
  uint64_t result = sub_1B0842334(v15, (uint64_t)v11, v12, a2, a3);
  a4[3] = v12;
  a4[4] = (uint64_t)&off_1F094E1C8;
  *a4 = result;
  return result;
}

uint64_t dispatch thunk of LayoutView.frame.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of LayoutView.isHidden.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of LayoutView.focusedFrame.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t static JetUIBugCompatibility.textFieldAdoptsMeasurableIncorrectly.getter()
{
  return 1;
}

uint64_t static JetUIBugCompatibility.compressedFitSizeRequiresExactMatch.getter()
{
  return 2;
}

uint64_t static JetUIBugCompatibility.enable<A>(_:perform:)()
{
  if (qword_1EB596280 != -1) {
    swift_once();
  }
  sub_1B086AA78();
  return sub_1B086AA88();
}

uint64_t static JetUIBugCompatibility.disable<A>(_:perform:)()
{
  if (qword_1EB596280 != -1) {
    swift_once();
  }
  sub_1B086AA78();
  return sub_1B086AA88();
}

unint64_t sub_1B07D9888()
{
  unint64_t result = qword_1E9B3ADE8;
  if (!qword_1E9B3ADE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3ADE8);
  }
  return result;
}

unint64_t sub_1B07D98E0()
{
  unint64_t result = qword_1E9B3ADF0;
  if (!qword_1E9B3ADF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3ADF0);
  }
  return result;
}

unint64_t sub_1B07D9938()
{
  unint64_t result = qword_1E9B3ADF8;
  if (!qword_1E9B3ADF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3ADF8);
  }
  return result;
}

unint64_t sub_1B07D9990()
{
  unint64_t result = qword_1E9B3AE00;
  if (!qword_1E9B3AE00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3AE00);
  }
  return result;
}

uint64_t destroy for DSScreenshotCapturer()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *_s5JetUI20DSScreenshotCapturerVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for DSScreenshotCapturer(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

void *assignWithTake for DSScreenshotCapturer(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DSScreenshotCapturer(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DSScreenshotCapturer(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DSScreenshotCapturer()
{
  return &type metadata for DSScreenshotCapturer;
}

uint64_t sub_1B07D9BC0(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = result;
  __n128 result = swift_isUniquelyReferenced_nonNull_native();
  if (result && v5 <= *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(v6 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  if (v4 <= v5) {
    int64_t v10 = v4 + v2;
  }
  else {
    int64_t v10 = v4;
  }
  __n128 result = (uint64_t)sub_1B07CE974((char *)result, v10, 1, (char *)v3);
  uint64_t v3 = result;
  if (!*(void *)(v6 + 16))
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
LABEL_5:
  if ((*(void *)(v3 + 24) >> 1) - *(void *)(v3 + 16) < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  __n128 result = swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    __n128 result = swift_bridgeObjectRelease();
    *id v1 = v3;
    return result;
  }
  uint64_t v7 = *(void *)(v3 + 16);
  BOOL v8 = __OFADD__(v7, v2);
  uint64_t v9 = v7 + v2;
  if (!v8)
  {
    *(void *)(v3 + 16) = v9;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_1B07D9CB0(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = result;
  __n128 result = swift_isUniquelyReferenced_nonNull_native();
  if (result && v5 <= *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(v6 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  if (v4 <= v5) {
    int64_t v10 = v4 + v2;
  }
  else {
    int64_t v10 = v4;
  }
  __n128 result = (uint64_t)sub_1B07CEC18((char *)result, v10, 1, (char *)v3);
  uint64_t v3 = result;
  if (!*(void *)(v6 + 16))
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
LABEL_5:
  if ((*(void *)(v3 + 24) >> 1) - *(void *)(v3 + 16) < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  __n128 result = swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    __n128 result = swift_bridgeObjectRelease();
    *id v1 = v3;
    return result;
  }
  uint64_t v7 = *(void *)(v3 + 16);
  BOOL v8 = __OFADD__(v7, v2);
  uint64_t v9 = v7 + v2;
  if (!v8)
  {
    *(void *)(v3 + 16) = v9;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_1B07D9D9C()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1B07D9DCC()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B07D9DD4()
{
  sub_1B07D7094();
  sub_1B07D9CB0(v0);
  return 1;
}

uint64_t ReusePool.init(recycler:limit:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  swift_getAssociatedTypeWitness();
  *a4 = sub_1B0869FE8();
  uint64_t v8 = type metadata accessor for ReusePool();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))((char *)a4 + *(int *)(v8 + 36), a1, a3);
  *(uint64_t *)((char *)a4 + *(int *)(v8 + 40)) = a2;
  return result;
}

uint64_t ReusePool.limit.getter(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 40));
}

uint64_t ReusePool.limit.setter(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + *(int *)(a2 + 40)) = a1;
  return sub_1B07D9ECC(a2);
}

uint64_t sub_1B07D9ECC(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v27 = *(void *)(a1 + 16);
  uint64_t v28 = v3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v8 = (char *)v22 - v7;
  uint64_t v9 = *(void *)((char *)v1 + *(int *)(a1 + 40));
  if (v9 >= 1)
  {
    uint64_t v10 = *v1;
    uint64_t result = MEMORY[0x1B3E97950](*v1, AssociatedTypeWitness);
    if (v9 < result)
    {
      uint64_t result = MEMORY[0x1B3E97950](v10, AssociatedTypeWitness);
      BOOL v11 = __OFSUB__(result, v9);
      uint64_t v12 = result - v9;
      if (v11)
      {
LABEL_13:
        __break(1u);
        goto LABEL_14;
      }
      if (v12 < 0)
      {
LABEL_14:
        __break(1u);
        return result;
      }
      int64_t v25 = a1;
      sub_1B086A0B8();
      uint64_t v14 = v13;
      uint64_t v16 = v15;
      unint64_t v18 = v17;
      uint64_t v29 = 0;
      uint64_t v30 = v12;
      sub_1B086A098();
      swift_getWitnessTable();
      sub_1B086A278();
      swift_unknownObjectRetain();
      uint64_t v19 = sub_1B086A448();
      uint64_t v20 = sub_1B086A468();
      uint64_t v26 = v19;
      if (v19 != v20)
      {
        uint64_t v21 = v26;
        BOOL v23 = *(void (**)(char *, uint64_t, uint64_t))(v28 + 24);
        uint64_t v24 = v28 + 24;
        int64_t v25 = v18 >> 1;
        v22[1] = v5 + 16;
        while (1)
        {
          uint64_t result = sub_1B086A458();
          if (v26 < v16 || v25 <= v21) {
            break;
          }
          (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v14 + *(void *)(v5 + 72) * v21++, AssociatedTypeWitness);
          v23(v8, v27, v28);
          (*(void (**)(char *, uint64_t))(v5 + 8))(v8, AssociatedTypeWitness);
          if (v21 == sub_1B086A468()) {
            return swift_unknownObjectRelease_n();
          }
        }
        __break(1u);
        goto LABEL_13;
      }
      return swift_unknownObjectRelease_n();
    }
  }
  return result;
}

uint64_t *(*ReusePool.limit.modify(void *a1, uint64_t a2))(uint64_t *result, char a2)
{
  *a1 = a2;
  a1[1] = v2;
  return sub_1B07DA1A0;
}

uint64_t *sub_1B07DA1A0(uint64_t *result, char a2)
{
  if ((a2 & 1) == 0) {
    return (uint64_t *)sub_1B07D9ECC(*result);
  }
  return result;
}

uint64_t ReusePool.isEmpty.getter()
{
  return sub_1B086A248() & 1;
}

BOOL ReusePool.canRecycleMore.getter(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return MEMORY[0x1B3E97950](v3, AssociatedTypeWitness) < *(uint64_t *)((char *)v1 + *(int *)(a1 + 40));
}

uint64_t ReusePool.dequeue()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_1B086A098();
  swift_getWitnessTable();
  if (sub_1B086A248())
  {
    uint64_t v6 = 1;
  }
  else
  {
    swift_getWitnessTable();
    swift_getWitnessTable();
    sub_1B086A298();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(a2, v4, v3);
    uint64_t v6 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(a2, v6, 1, AssociatedTypeWitness);
}

uint64_t ReusePool.dequeue(or:)@<X0>(uint64_t (*a1)(uint64_t)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = sub_1B086A3B8();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v14 - v9;
  ReusePool.dequeue()(a2, (uint64_t)&v14 - v9);
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, AssociatedTypeWitness) != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a3, v10, AssociatedTypeWitness);
  }
  uint64_t v12 = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return a1(v12);
}

BOOL ReusePool.recycle(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v9 = (char *)&v12 - v8;
  BOOL v10 = ReusePool.canRecycleMore.getter(a2);
  if (v10)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, AssociatedTypeWitness);
    sub_1B086A098();
    sub_1B086A048();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(a1, v5, v4);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 24))(a1, v5, v4);
  }
  return v10;
}

Swift::Void __swiftcall ReusePool.drain()()
{
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  int64_t v20 = v0;
  uint64_t v21 = v3;
  uint64_t v22 = v2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v7 = (char *)&v17 - v6;
  uint64_t v24 = *v1;
  sub_1B086A098();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  sub_1B086A478();
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  unint64_t v13 = v12;
  sub_1B086A088();
  swift_unknownObjectRetain();
  uint64_t v14 = sub_1B086A448();
  uint64_t v15 = sub_1B086A468();
  uint64_t v23 = v14;
  if (v14 == v15)
  {
LABEL_6:
    swift_unknownObjectRelease_n();
  }
  else
  {
    uint64_t v16 = v23;
    unint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 24);
    uint64_t v19 = v22 + 24;
    int64_t v20 = v13 >> 1;
    uint64_t v17 = v5 + 16;
    while (1)
    {
      sub_1B086A458();
      if (v23 < v11 || v20 <= v16) {
        break;
      }
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v9 + *(void *)(v5 + 72) * v16++, AssociatedTypeWitness);
      v18(v7, v21, v22);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, AssociatedTypeWitness);
      if (v16 == sub_1B086A468()) {
        goto LABEL_6;
      }
    }
    __break(1u);
  }
}

uint64_t ReusePool.description.getter()
{
  sub_1B086A5E8();
  swift_bridgeObjectRelease();
  sub_1B086AA98();
  sub_1B0869E68();
  swift_bridgeObjectRelease();
  sub_1B0869E68();
  sub_1B086A848();
  sub_1B0869E68();
  swift_bridgeObjectRelease();
  sub_1B0869E68();
  uint64_t v1 = *v0;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1B3E97950](v1, AssociatedTypeWitness);
  sub_1B086A848();
  sub_1B0869E68();
  swift_bridgeObjectRelease();
  sub_1B0869E68();
  return 0x6F6F506573756552;
}

uint64_t sub_1B07DAB14()
{
  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for ReusePool()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1B07DAB90@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = type metadata accessor for ReusePool();
  *a2 = *(void *)(a1 + *(int *)(result + 40));
  return result;
}

uint64_t sub_1B07DABD0(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = type metadata accessor for ReusePool();
  return ReusePool.limit.setter(v1, v2);
}

uint64_t sub_1B07DAC10()
{
  return 16;
}

__n128 sub_1B07DAC1C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t dispatch thunk of Recycler.didRecycle(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of Recycler.didDiscard(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of Recycler.didDequeue(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t sub_1B07DAC64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 32);
}

uint64_t sub_1B07DAC6C()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1B07DAD18(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64) + 7;
  int v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  uint64_t v9 = *a2;
  *a1 = *a2;
  if (v6 > 7 || v8 != 0 || ((v7 + ((v6 + 8) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v12 = ((unint64_t)a1 + v6 + 8) & ~v6;
    uint64_t v13 = ((unint64_t)a2 + v6 + 8) & ~v6;
    uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain();
    v14(v12, v13, v4);
    *(void *)((v7 + v12) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v7 + v13) & 0xFFFFFFFFFFFFFFF8);
  }
  return a1;
}

uint64_t sub_1B07DAE48(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = *(uint64_t (**)(unint64_t))(v4 + 8);
  unint64_t v6 = (a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);

  return v5(v6);
}

void *sub_1B07DAEBC(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  uint64_t v6 = *(void *)(v4 - 8) + 16;
  uint64_t v7 = *(unsigned __int8 *)(*(void *)(v4 - 8) + 80);
  uint64_t v8 = ((unint64_t)a1 + v7 + 8) & ~v7;
  uint64_t v9 = ((unint64_t)a2 + v7 + 8) & ~v7;
  swift_bridgeObjectRetain();
  v5(v8, v9, v4);
  *(void *)((*(void *)(v6 + 48) + 7 + v8) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v6 + 48) + 7 + v9) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

void *sub_1B07DAF6C(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v7 = v6 + 24;
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = ((unint64_t)a1 + v8 + 8) & ~v8;
  uint64_t v10 = ((unint64_t)a2 + v8 + 8) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v6 + 24))(v9, v10);
  *(void *)((*(void *)(v7 + 40) + 7 + v9) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v7 + 40) + 7 + v10) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

void *sub_1B07DB024(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4 + 32;
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = ((unint64_t)a1 + v6 + 8) & ~v6;
  uint64_t v8 = ((unint64_t)a2 + v6 + 8) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v7, v8);
  *(void *)((*(void *)(v5 + 32) + 7 + v7) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 32) + 7 + v8) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

void *sub_1B07DB0C4(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v7 = v6 + 40;
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = ((unint64_t)a1 + v8 + 8) & ~v8;
  uint64_t v10 = ((unint64_t)a2 + v8 + 8) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v6 + 40))(v9, v10);
  *(void *)((*(void *)(v7 + 24) + 7 + v9) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v7 + 24) + 7 + v10) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_1B07DB174(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + ((v6 + 8) & ~v6) + 7) & 0xFFFFFFFFFFFFFFF8)
       + 8;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1B07DB2CCLL);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if ((v5 & 0x80000000) != 0) {
    return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 8) & ~v6);
  }
  uint64_t v17 = *(void *)a1;
  if (*(void *)a1 >= 0xFFFFFFFFuLL) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void sub_1B07DB2E0(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((*(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 8) & ~v9) + 7) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  if (v8 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_43;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if ((v7 & 0x80000000) != 0)
            {
              unint64_t v19 = (unint64_t)&a1[v9 + 8] & ~v9;
              int64_t v20 = *(void (**)(unint64_t))(v6 + 56);
              v20(v19);
            }
            else
            {
              if ((a2 & 0x80000000) != 0) {
                uint64_t v18 = a2 ^ 0x80000000;
              }
              else {
                uint64_t v18 = a2 - 1;
              }
              *(void *)a1 = v18;
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v11 = a3 - v8;
    if (((*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 8) & ~v9) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v12 = v11 + 1;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 8) & ~v9) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    int v16 = v15;
  }
  else {
    int v16 = 1;
  }
  if (((*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 8) & ~v9) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    int v17 = ~v8 + a2;
    bzero(a1, v10);
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v10] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v16;
      break;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x1B07DB4D0);
    case 4:
      *(_DWORD *)&a1[v10] = v16;
      break;
    default:
      return;
  }
}

id NSAttributedString.baseWritingDirection(forCharacterAt:)(uint64_t a1)
{
  if ((uint64_t)objc_msgSend(v1, sel_length) <= a1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3ACB8);
    uint64_t v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_1B086E250;
    *(void *)(v6 + 56) = MEMORY[0x1E4FBB1A0];
    unint64_t v7 = sub_1B07DB6C0();
    uint64_t v8 = MEMORY[0x1E4FBB550];
    uint64_t v9 = MEMORY[0x1E4FBB5C8];
    *(void *)(v6 + 32) = 0xD000000000000025;
    *(void *)(v6 + 40) = 0x80000001B08743D0;
    *(void *)(v6 + 96) = v8;
    *(void *)(v6 + 104) = v9;
    *(void *)(v6 + 64) = v7;
    *(void *)(v6 + 72) = a1;
    id v10 = objc_msgSend(v1, sel_length);
    *(void *)(v6 + 136) = v8;
    *(void *)(v6 + 144) = v9;
    *(void *)(v6 + 112) = v10;
    sub_1B0869DB8();
    unsigned int v11 = (void *)*MEMORY[0x1E4F1C4A8];
    id v12 = objc_allocWithZone(MEMORY[0x1E4F1CA00]);
    id v13 = v11;
    int v14 = (void *)sub_1B0869D68();
    swift_bridgeObjectRelease();
    id v4 = objc_msgSend(v12, sel_initWithName_reason_userInfo_, v13, v14, 0);

    objc_msgSend(v4, sel_raise);
    id v5 = 0;
  }
  else
  {
    id v3 = objc_msgSend(v1, sel_juParagraphStyleAtIndex_effectiveRange_, a1, 0);
    if (!v3) {
      return 0;
    }
    id v4 = v3;
    id v5 = objc_msgSend(v3, sel_baseWritingDirection);
  }

  return v5;
}

unint64_t sub_1B07DB6C0()
{
  unint64_t result = qword_1E9B3BF00;
  if (!qword_1E9B3BF00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3BF00);
  }
  return result;
}

uint64_t NSAttributedString.juBaseWritingDirectionForCharacterAtIndex(_:unknownStyle:)(uint64_t a1, unsigned char *a2)
{
  uint64_t result = (uint64_t)NSAttributedString.baseWritingDirection(forCharacterAt:)(a1);
  if (a2) {
    *a2 = v4 & 1;
  }
  if (v4) {
    return -1;
  }
  return result;
}

uint64_t sub_1B07DB74C(void *a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  id v6 = a1;
  id v7 = NSAttributedString.baseWritingDirection(forCharacterAt:)(a3);
  if (a4) {
    *a4 = v8 & 1;
  }
  if (v8) {
    uint64_t v9 = -1;
  }
  else {
    uint64_t v9 = (uint64_t)v7;
  }

  return v9;
}

Swift::String __swiftcall NSAttributedString.convertedWritingDirectionToBidiControlCharacters()()
{
  id v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28E48]), sel_initWithAttributedString_, v0);
  if (qword_1E9B3A650 != -1) {
    swift_once();
  }
  uint64_t v2 = qword_1E9B3AE10;
  id v3 = v1;
  objc_msgSend(v3, sel_performSelector_, v2);
  id v4 = objc_msgSend(v3, sel_string);
  uint64_t v5 = sub_1B0869D98();
  id v7 = v6;

  uint64_t v8 = v5;
  uint64_t v9 = v7;
  result._object = v9;
  result._uint64_t countAndFlagsBits = v8;
  return result;
}

Swift::Void __swiftcall NSMutableAttributedString.convertWritingDirectionToBidiControlCharacters()()
{
  if (qword_1E9B3A650 != -1) {
    swift_once();
  }
  uint64_t v1 = qword_1E9B3AE10;
  id v2 = v0;

  objc_msgSend(v2, sel_performSelector_, v1);
}

void sub_1B07DB8EC()
{
  id v0 = objc_allocWithZone(MEMORY[0x1E4F28B18]);
  uint64_t v1 = (void *)sub_1B0869D68();
  id v2 = objc_msgSend(v0, sel_initWithString_, v1);

  qword_1E9B3AE08 = (uint64_t)v2;
}

id static NSAttributedString.juEmpty.getter()
{
  if (qword_1E9B3A648 != -1) {
    swift_once();
  }
  id v0 = (void *)qword_1E9B3AE08;

  return v0;
}

id sub_1B07DB9A8()
{
  if (qword_1E9B3A648 != -1) {
    swift_once();
  }
  id v0 = (void *)qword_1E9B3AE08;

  return v0;
}

uint64_t sub_1B07DBA04(void *a1)
{
  return 0;
}

uint64_t NSAttributedString.juFullRange.getter()
{
  objc_msgSend(v0, sel_length);
  return 0;
}

uint64_t NSAttributedString.juParagraphStyle(at:effectiveRange:)(uint64_t a1, uint64_t a2)
{
  if (objc_msgSend(v2, sel_attribute_atIndex_effectiveRange_, *MEMORY[0x1E4FB0738], a1, a2))
  {
    sub_1B086A438();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v5, 0, sizeof(v5));
  }
  sub_1B07DC004((uint64_t)v5, (uint64_t)v6);
  if (v7)
  {
    sub_1B07C7B80(0, (unint64_t *)&unk_1E9B3BEE0);
    if (swift_dynamicCast()) {
      return v4;
    }
    else {
      return 0;
    }
  }
  else
  {
    sub_1B07B86F8((uint64_t)v6);
    return 0;
  }
}

id sub_1B07DBB34(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v6 = a1;
  uint64_t v7 = NSAttributedString.juParagraphStyle(at:effectiveRange:)(a3, a4);

  return v7;
}

uint64_t NSAttributedString.juStrongBaseWritingDirectionOfParagraph(atOrBefore:)(uint64_t a1)
{
  if ((uint64_t)objc_msgSend(v1, sel_length) <= a1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3ACB8);
    uint64_t v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_1B086E250;
    *(void *)(v10 + 56) = MEMORY[0x1E4FBB1A0];
    unint64_t v11 = sub_1B07DB6C0();
    uint64_t v12 = MEMORY[0x1E4FBB550];
    uint64_t v13 = MEMORY[0x1E4FBB5C8];
    *(void *)(v10 + 32) = 0xD000000000000034;
    *(void *)(v10 + 40) = 0x80000001B0874400;
    *(void *)(v10 + 96) = v12;
    *(void *)(v10 + 104) = v13;
    *(void *)(v10 + 64) = v11;
    *(void *)(v10 + 72) = a1;
    id v14 = objc_msgSend(v1, sel_length);
    *(void *)(v10 + 136) = v12;
    *(void *)(v10 + 144) = v13;
    *(void *)(v10 + 112) = v14;
    sub_1B0869DB8();
    int v15 = (void *)*MEMORY[0x1E4F1C4A8];
    id v16 = objc_allocWithZone(MEMORY[0x1E4F1CA00]);
    id v17 = v15;
    uint64_t v18 = (void *)sub_1B0869D68();
    swift_bridgeObjectRelease();
    id v19 = objc_msgSend(v16, sel_initWithName_reason_userInfo_, v17, v18, 0);

    objc_msgSend(v19, sel_raise);
    return 0;
  }
  uint64_t v21 = 0;
  char v22 = 1;
  uint64_t v3 = *MEMORY[0x1E4FB0738];
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = &v21;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = sub_1B07DC07C;
  *(void *)(v5 + 24) = v4;
  v20[4] = sub_1B07DC094;
  v20[5] = v5;
  v20[0] = MEMORY[0x1E4F143A8];
  v20[1] = 1107296256;
  _OWORD v20[2] = sub_1B07C89E8;
  long long v20[3] = &block_descriptor_1;
  id v6 = _Block_copy(v20);
  swift_retain();
  swift_release();
  objc_msgSend(v1, sel_enumerateAttribute_inRange_options_usingBlock_, v3, 0, a1, 2, v6);
  _Block_release(v6);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) == 0)
  {
    uint64_t v9 = v21;
    swift_release();
    return v9;
  }
  __break(1u);
  return result;
}

void sub_1B07DBE70(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4, uint64_t a5)
{
  sub_1B07B8884(a1, (uint64_t)v8);
  if (v9)
  {
    sub_1B07C7B80(0, (unint64_t *)&unk_1E9B3BEE0);
    if (swift_dynamicCast())
    {
      if (objc_msgSend(v7, sel_baseWritingDirection) == (id)1 || !objc_msgSend(v7, sel_baseWritingDirection))
      {
        *(void *)a5 = objc_msgSend(v7, sel_baseWritingDirection);
        *(unsigned char *)(a5 + 8) = 0;
        *a4 = 1;
      }
    }
  }
  else
  {
    sub_1B07B86F8((uint64_t)v8);
  }
}

uint64_t NSAttributedString.juStrongBaseWritingDirectionOfParagraphAtOrBeforeIndex(_:)(uint64_t a1)
{
  uint64_t result = NSAttributedString.juStrongBaseWritingDirectionOfParagraph(atOrBefore:)(a1);
  if (v2) {
    return -1;
  }
  return result;
}

uint64_t sub_1B07DBF68(void *a1, uint64_t a2, uint64_t a3)
{
  id v4 = a1;
  uint64_t v5 = NSAttributedString.juStrongBaseWritingDirectionOfParagraph(atOrBefore:)(a3);
  char v7 = v6;

  if (v7) {
    return -1;
  }
  else {
    return v5;
  }
}

void sub_1B07DBFB4()
{
  id v0 = (NSString *)sub_1B0869D68();
  SEL v1 = NSSelectorFromString(v0);

  qword_1E9B3AE10 = (uint64_t)v1;
}

uint64_t sub_1B07DC004(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EB5962E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B07DC06C()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

void sub_1B07DC07C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  sub_1B07DBE70(a1, a2, a3, a4, *(void *)(v4 + 16));
}

uint64_t sub_1B07DC084()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1B07DC094(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B07C89C0(a1, a2, a3, a4, *(uint64_t (**)(void))(v4 + 16));
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

Swift::Void __swiftcall NSMutableAttributedString.convertLineSeparatorsIntoLineFeeds(at:paragraphRanges:)(Swift::OpaquePointer at, Swift::OpaquePointer paragraphRanges)
{
  uint64_t v3 = *((void *)at._rawValue + 2);
  if (v3)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v3; ++i)
    {
      uint64_t v7 = *((void *)at._rawValue + i + 4);
      uint64_t v8 = v7;
      sub_1B07DC148(&v8, v2, (unint64_t)paragraphRanges._rawValue);
    }
    swift_bridgeObjectRelease();
  }
}

void sub_1B07DC148(uint64_t *a1, void *a2, unint64_t a3)
{
  uint64_t v5 = *a1;
  char v6 = (void *)sub_1B0869D68();
  objc_msgSend(a2, sel_replaceCharactersInRange_withString_, v5, 1, v6);

  if (!(a3 >> 62))
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v7) {
      goto LABEL_3;
    }
LABEL_23:
    swift_bridgeObjectRelease();
    return;
  }
LABEL_22:
  swift_bridgeObjectRetain();
  uint64_t v7 = sub_1B086A6E8();
  if (!v7) {
    goto LABEL_23;
  }
LABEL_3:
  uint64_t v8 = 4;
  while (1)
  {
    if ((a3 & 0xC000000000000001) != 0) {
      id v9 = (id)MEMORY[0x1B3E97F40](v8 - 4, a3);
    }
    else {
      id v9 = *(id *)(a3 + 8 * v8);
    }
    uint64_t v10 = v9;
    uint64_t v11 = v8 - 3;
    if (__OFADD__(v8 - 4, 1))
    {
      __break(1u);
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
    objc_msgSend(v9, sel_juDirectionalRangeValue);
    if (v5 >= v17)
    {
      if (__OFSUB__(v5, v17)) {
        goto LABEL_21;
      }
      if (v5 - v17 < v18) {
        break;
      }
    }

    ++v8;
    if (v11 == v7) {
      goto LABEL_23;
    }
  }
  swift_bridgeObjectRelease();
  objc_msgSend(v10, sel_juDirectionalRangeValue);
  id v12 = objc_msgSend(a2, sel_juParagraphStyleAtIndex_effectiveRange_, v17, 0);
  if (v12)
  {
    uint64_t v13 = v12;
    objc_msgSend(v12, sel_paragraphSpacing);
    if (v14 == 0.0
      || (objc_msgSend(v13, sel_mutableCopy),
          sub_1B086A438(),
          swift_unknownObjectRelease(),
          sub_1B07C7B80(0, &qword_1EB595948),
          (swift_dynamicCast() & 1) == 0))
    {
    }
    else
    {
      objc_msgSend(v19, sel_setParagraphSpacing_, 0.0);
      uint64_t v15 = *MEMORY[0x1E4FB0738];
      id v16 = v19;
      objc_msgSend(a2, sel_addAttribute_value_range_, v15, v16, v17, v18);
    }
  }
}

Swift::Void __swiftcall NSMutableString.convertLineSeparatorsIntoLineFeeds(at:)(Swift::OpaquePointer at)
{
  uint64_t v2 = *((void *)at._rawValue + 2);
  if (v2)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = 0;
    do
    {
      uint64_t v5 = *((void *)at._rawValue + v4++ + 4);
      char v6 = (void *)sub_1B0869D68();
      objc_msgSend(v1, sel_replaceCharactersInRange_withString_, v5, 1, v6);
    }
    while (v2 != v4);
    swift_bridgeObjectRelease();
  }
}

id NSParagraphStyle.juWithBaseWritingDirection(_:)(uint64_t a1)
{
  objc_msgSend(v1, sel_mutableCopy);
  sub_1B086A438();
  swift_unknownObjectRelease();
  sub_1B07C7B80(0, &qword_1EB595948);
  swift_dynamicCast();
  objc_msgSend(v4, sel_setBaseWritingDirection_, a1);
  objc_msgSend(v4, sel_copy);
  sub_1B086A438();

  swift_unknownObjectRelease();
  sub_1B07C7B80(0, (unint64_t *)&unk_1E9B3BEE0);
  swift_dynamicCast();
  return v4;
}

id sub_1B07DC59C(void *a1, uint64_t a2, uint64_t a3)
{
  id v4 = a1;
  id v5 = NSParagraphStyle.juWithBaseWritingDirection(_:)(a3);

  return v5;
}

uint64_t UIUserInterfaceLayoutDirection.textAlignment(whenLeftToRight:rightToLeft:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 == 1) {
    return a2;
  }
  return result;
}

void static Models.Artwork.Style.unspecified.getter(void *a1@<X8>)
{
  *a1 = 0x6669636570736E75;
  a1[1] = 0xEB00000000646569;
}

void static Models.Artwork.Format.png.getter(void *a1@<X8>)
{
  *a1 = 6778480;
  a1[1] = 0xE300000000000000;
}

void static Models.Artwork.Format.jpeg.getter(void *a1@<X8>)
{
  *a1 = 1734701162;
  a1[1] = 0xE400000000000000;
}

void static Models.Artwork.Format.heic.getter(void *a1@<X8>)
{
  *a1 = 1667851624;
  a1[1] = 0xE400000000000000;
}

void static Models.Artwork.Format.lcr.getter(void *a1@<X8>)
{
  *a1 = 7496556;
  a1[1] = 0xE300000000000000;
}

void static Models.Artwork.Crop.boundingBox.getter(void *a1@<X8>)
{
  *a1 = 25186;
  a1[1] = 0xE200000000000000;
}

void static Models.Artwork.Crop.specificRectangle.getter(void *a1@<X8>)
{
  *a1 = 29299;
  a1[1] = 0xE200000000000000;
}

void static Models.Artwork.Crop.sourceSize.getter(void *a1@<X8>)
{
  *a1 = 29555;
  a1[1] = 0xE200000000000000;
}

void static Models.Artwork.Crop.squareCenterCrop.getter(void *a1@<X8>)
{
  *a1 = 25443;
  a1[1] = 0xE200000000000000;
}

void static Models.Artwork.Crop.fa.getter(void *a1@<X8>)
{
  *a1 = 24934;
  a1[1] = 0xE200000000000000;
}

void static Models.Artwork.Crop.fm.getter(void *a1@<X8>)
{
  *a1 = 28006;
  a1[1] = 0xE200000000000000;
}

void static Models.Artwork.Crop.fn.getter(void *a1@<X8>)
{
  *a1 = 28262;
  a1[1] = 0xE200000000000000;
}

void static Models.Artwork.Crop.fo.getter(void *a1@<X8>)
{
  *a1 = 28518;
  a1[1] = 0xE200000000000000;
}

void static Models.Artwork.Crop.em.getter(void *a1@<X8>)
{
  *a1 = 28005;
  a1[1] = 0xE200000000000000;
}

void static Models.Artwork.Crop.el.getter(void *a1@<X8>)
{
  *a1 = 27749;
  a1[1] = 0xE200000000000000;
}

void static Models.Artwork.Crop.ek.getter(void *a1@<X8>)
{
  *a1 = 27493;
  a1[1] = 0xE200000000000000;
}

void static Models.Artwork.Crop.en.getter(void *a1@<X8>)
{
  *a1 = 28261;
  a1[1] = 0xE200000000000000;
}

void static Models.Artwork.Crop.ep.getter(void *a1@<X8>)
{
  *a1 = 28773;
  a1[1] = 0xE200000000000000;
}

void static Models.Artwork.Crop.oa.getter(void *a1@<X8>)
{
  *a1 = 24943;
  a1[1] = 0xE200000000000000;
}

void static Models.Artwork.Crop.ob.getter(void *a1@<X8>)
{
  *a1 = 25199;
  a1[1] = 0xE200000000000000;
}

void static Models.Artwork.Crop.ta.getter(void *a1@<X8>)
{
  *a1 = 24948;
  a1[1] = 0xE200000000000000;
}

CGSize __swiftcall Models.Artwork.Crop.scale(_:toFit:)(CGSize _, CGSize toFit)
{
  double height = toFit.height;
  double width = toFit.width;
  double v5 = _.height;
  double v6 = _.width;
  uint64_t v7 = *v2;
  uint64_t v8 = v2[1];
  double v9 = 0.0;
  if (v6 == 0.0 && _.height == 0.0)
  {
    double v10 = 0.0;
    goto LABEL_34;
  }
  if (toFit.width != 0.0 || (double v10 = 0.0, toFit.height != 0.0))
  {
    if (toFit.width == 0.0)
    {
      double v11 = 0.0;
      double v12 = 0.0;
      if (toFit.height == 0.0)
      {
LABEL_9:
        if (v7 == 25443 && v8 == 0xE200000000000000)
        {
          if (v6 != v5) {
            goto LABEL_21;
          }
        }
        else
        {
          char v13 = sub_1B086A8A8() & (v6 == v5);
          BOOL v15 = v7 == 29299 && v8 == 0xE200000000000000;
          if ((v13 & 1) == 0 && !v15)
          {
LABEL_21:
            if ((sub_1B086A8A8() & 1) == 0)
            {
              double v16 = v12 * width;
              double v17 = v11 * height;
              if (v7 == 25186 && v8 == 0xE200000000000000 || (sub_1B086A8A8() & 1) != 0)
              {
                if (v11 >= v12) {
                  double v6 = v16;
                }
                else {
                  double v5 = v17;
                }
              }
              else if (v11 < v12)
              {
                double v6 = v16;
              }
              else
              {
                double v5 = v17;
              }
            }
          }
        }
        double v9 = floor(v6);
        double v10 = floor(v5);
        goto LABEL_34;
      }
    }
    else
    {
      double v12 = 0.0;
      double v11 = v6 / toFit.width;
      if (toFit.height == 0.0) {
        goto LABEL_9;
      }
    }
    double v12 = v5 / toFit.height;
    goto LABEL_9;
  }
LABEL_34:
  result.double height = v10;
  result.double width = v9;
  return result;
}

uint64_t Models.Artwork.URLTemplate.Key.init(rawValue:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

void static Models.Artwork.URLTemplate.Key.width.getter(void *a1@<X8>)
{
  *a1 = 8222587;
  a1[1] = 0xE300000000000000;
}

void static Models.Artwork.URLTemplate.Key.height.getter(void *a1@<X8>)
{
  *a1 = 8218747;
  a1[1] = 0xE300000000000000;
}

void static Models.Artwork.URLTemplate.Key.crop.getter(void *a1@<X8>)
{
  *a1 = 8217467;
  a1[1] = 0xE300000000000000;
}

void static Models.Artwork.URLTemplate.Key.format.getter(void *a1@<X8>)
{
  *a1 = 8218235;
  a1[1] = 0xE300000000000000;
}

uint64_t Models.Artwork.URLTemplate.Key.rawValue.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

void *sub_1B07DC984@<X0>(void *result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = result[1];
  *a2 = *result;
  a2[1] = v2;
  return result;
}

uint64_t sub_1B07DC990@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t Models.Artwork.URLTemplate.init(deserializing:using:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = sub_1B08695E8();
  if (v7)
  {
    uint64_t v8 = v6;
    uint64_t v9 = v7;
    uint64_t v10 = sub_1B0869728();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(a2, v10);
    uint64_t v11 = sub_1B08695F8();
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(a1, v11);
    *a3 = v8;
    a3[1] = v9;
  }
  else
  {
    uint64_t v13 = sub_1B0869C28();
    sub_1B07DCB60();
    swift_allocError();
    uint64_t v14 = MEMORY[0x1E4FBC860];
    *BOOL v15 = &type metadata for Models.Artwork.URLTemplate;
    v15[1] = v14;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v13 - 8) + 104))(v15, *MEMORY[0x1E4F717E0], v13);
    swift_willThrow();
    uint64_t v16 = sub_1B0869728();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(a2, v16);
    uint64_t v17 = sub_1B08695F8();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(a1, v17);
  }
  return result;
}

unint64_t sub_1B07DCB60()
{
  unint64_t result = qword_1E9B3AE18;
  if (!qword_1E9B3AE18)
  {
    sub_1B0869C28();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3AE18);
  }
  return result;
}

uint64_t Models.Artwork.URLTemplate.makeURL(withSubstitutions:)(Swift::OpaquePointer a1)
{
  Models.Artwork.URLTemplate.makeString(withSubstitutions:)(a1);
  sub_1B08690E8();

  return swift_bridgeObjectRelease();
}

Swift::String __swiftcall Models.Artwork.URLTemplate.makeString(withSubstitutions:)(Swift::OpaquePointer withSubstitutions)
{
  uint64_t v3 = *v1;
  uint64_t v2 = (void *)v1[1];
  id v4 = (char *)withSubstitutions._rawValue + 64;
  uint64_t v5 = 1 << *((unsigned char *)withSubstitutions._rawValue + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  uint64_t v7 = v6 & *((void *)withSubstitutions._rawValue + 8);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  swift_bridgeObjectRetain();
  uint64_t v9 = swift_bridgeObjectRetain();
  int64_t v11 = 0;
  while (1)
  {
    if (v7)
    {
      v7 &= v7 - 1;
      goto LABEL_5;
    }
    int64_t v14 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_23;
    }
    if (v14 >= v8) {
      goto LABEL_21;
    }
    uint64_t v15 = *(void *)&v4[8 * v14];
    ++v11;
    if (!v15)
    {
      int64_t v11 = v14 + 1;
      if (v14 + 1 >= v8) {
        goto LABEL_21;
      }
      uint64_t v15 = *(void *)&v4[8 * v11];
      if (!v15)
      {
        int64_t v11 = v14 + 2;
        if (v14 + 2 >= v8) {
          goto LABEL_21;
        }
        uint64_t v15 = *(void *)&v4[8 * v11];
        if (!v15) {
          break;
        }
      }
    }
LABEL_20:
    uint64_t v7 = (v15 - 1) & v15;
LABEL_5:
    sub_1B07B862C();
    swift_bridgeObjectRetain();
    uint64_t v3 = sub_1B086A428();
    uint64_t v13 = v12;
    swift_bridgeObjectRelease();
    uint64_t v9 = swift_bridgeObjectRelease();
    uint64_t v2 = v13;
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v8)
  {
LABEL_21:
    swift_release();
    uint64_t v9 = v3;
    uint64_t v10 = v2;
    goto LABEL_24;
  }
  uint64_t v15 = *(void *)&v4[8 * v16];
  if (v15)
  {
    int64_t v11 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v11 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v11 >= v8) {
      goto LABEL_21;
    }
    uint64_t v15 = *(void *)&v4[8 * v11];
    ++v16;
    if (v15) {
      goto LABEL_20;
    }
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result._object = v10;
  result._uint64_t countAndFlagsBits = v9;
  return result;
}

uint64_t sub_1B07DCDF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v8 = sub_1B08695E8();
  if (v9)
  {
    uint64_t v10 = v8;
    uint64_t v11 = v9;
    uint64_t v12 = sub_1B0869728();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(a2, v12);
    uint64_t v13 = sub_1B08695F8();
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(a1, v13);
    *a3 = v10;
    a3[1] = v11;
  }
  else
  {
    uint64_t v15 = sub_1B0869C28();
    sub_1B07DCB60();
    swift_allocError();
    uint64_t v16 = MEMORY[0x1E4FBC860];
    *uint64_t v17 = v4;
    v17[1] = v16;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v15 - 8) + 104))(v17, *MEMORY[0x1E4F717E0], v15);
    swift_willThrow();
    uint64_t v18 = sub_1B0869728();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(a2, v18);
    uint64_t v19 = sub_1B08695F8();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(a1, v19);
  }
  return result;
}

uint64_t sub_1B07DCFB0()
{
  return sub_1B086A998();
}

uint64_t sub_1B07DD00C()
{
  swift_bridgeObjectRetain();
  sub_1B0869E38();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B07DD064()
{
  return sub_1B086A998();
}

uint64_t sub_1B07DD0BC(void *a1, void *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return 1;
  }
  else {
    return sub_1B086A8A8();
  }
}

void *Models.Artwork.init(template:size:style:crop:format:quality:supportsWideGamut:)@<X0>(void *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, char a7@<W6>, uint64_t a8@<X8>, double a9@<D0>, double a10@<D1>)
{
  uint64_t v10 = result[1];
  uint64_t v11 = *a2;
  uint64_t v12 = a2[1];
  uint64_t v13 = *a3;
  uint64_t v14 = a3[1];
  uint64_t v15 = *a4;
  uint64_t v16 = a4[1];
  *(void *)a8 = *result;
  *(void *)(a8 + 8) = v10;
  *(double *)(a8 + 16) = a9;
  *(double *)(a8 + 24) = a10;
  *(void *)(a8 + 32) = v11;
  *(void *)(a8 + 40) = v12;
  *(void *)(a8 + 48) = v13;
  *(void *)(a8 + 56) = v14;
  *(void *)(a8 + 64) = v15;
  *(void *)(a8 + 72) = v16;
  *(void *)(a8 + 80) = a5;
  *(unsigned char *)(a8 + 88) = a6 & 1;
  *(unsigned char *)(a8 + 89) = a7;
  return result;
}

uint64_t Models.Artwork.init(deserializing:using:)@<X0>(unsigned char *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  CGFloat v61 = a3;
  uint64_t v5 = sub_1B08695F8();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  id v60 = &v51[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  CGFloat v63 = &v51[-v10];
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v13 = &v51[-v12];
  uint64_t v14 = MEMORY[0x1F4188790](v11);
  uint64_t v16 = &v51[-v15];
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = &v51[-v17];
  uint64_t v68 = a1;
  sub_1B0869608();
  sub_1B07DD874();
  sub_1B0869578();
  CGFloat v65 = *(void (**)(unsigned char *, uint64_t))(v6 + 8);
  v65(v18, v5);
  uint64_t v19 = v67;
  if (!v67)
  {
    uint64_t v33 = sub_1B0869C28();
    sub_1B07DCB60();
    swift_allocError();
    *uint64_t v34 = 0x6574616C706D6574;
    v34[1] = 0xE800000000000000;
    v34[2] = &type metadata for Models.Artwork;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v33 - 8) + 104))(v34, *MEMORY[0x1E4F717D8], v33);
    swift_willThrow();
    uint64_t v35 = sub_1B0869728();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v35 - 8) + 8))(a2, v35);
    return ((uint64_t (*)(unsigned char *, uint64_t))v65)(v68, v5);
  }
  uint64_t v64 = a2;
  uint64_t v20 = v66;
  sub_1B0869608();
  uint64_t v21 = sub_1B08695C8();
  char v23 = v22;
  v65(v16, v5);
  if (v23)
  {
    swift_bridgeObjectRelease();
    uint64_t v36 = sub_1B0869C28();
    sub_1B07DCB60();
    swift_allocError();
    double v38 = v37;
    *double v37 = 0x6874646977;
    v37[1] = 0xE500000000000000;
LABEL_9:
    v37[2] = &type metadata for Models.Artwork;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v36 - 8) + 104))(v38, *MEMORY[0x1E4F717D8], v36);
    swift_willThrow();
    uint64_t v39 = sub_1B0869728();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v39 - 8) + 8))(v64, v39);
    return ((uint64_t (*)(unsigned char *, uint64_t))v65)(v68, v5);
  }
  sub_1B0869608();
  uint64_t v59 = sub_1B08695C8();
  char v25 = v24;
  v65(v13, v5);
  if (v25)
  {
    swift_bridgeObjectRelease();
    uint64_t v36 = sub_1B0869C28();
    sub_1B07DCB60();
    swift_allocError();
    double v38 = v37;
    *double v37 = 0x746867696568;
    v37[1] = 0xE600000000000000;
    goto LABEL_9;
  }
  uint64_t v57 = v20;
  sub_1B0869608();
  sub_1B07DD8EC();
  sub_1B0869558();
  uint64_t v26 = v65;
  v65(v18, v5);
  uint64_t v56 = v66;
  uint64_t v58 = v67;
  sub_1B0869608();
  sub_1B07DD950();
  sub_1B0869558();
  v26(v18, v5);
  uint64_t v27 = v67;
  uint64_t v55 = v66;
  uint64_t v28 = v63;
  sub_1B0869608();
  sub_1B07DD9A4();
  uint64_t v29 = v62;
  sub_1B0869568();
  if (v29)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v30 = sub_1B0869728();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v30 - 8) + 8))(v64, v30);
    uint64_t v31 = (uint64_t (*)(unsigned char *, uint64_t))v65;
    v65(v68, v5);
    return v31(v28, v5);
  }
  else
  {
    CGFloat v63 = v27;
    double v40 = v65;
    v65(v28, v5);
    uint64_t v62 = v66;
    unint64_t v54 = v67;
    uint64_t v41 = v68;
    sub_1B0869608();
    uint64_t v53 = sub_1B0869588();
    int v52 = v42;
    v40(v18, v5);
    uint64_t v43 = v60;
    sub_1B0869608();
    char v44 = sub_1B08695A8();
    v40(v43, v5);
    uint64_t v45 = sub_1B0869728();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v45 - 8) + 8))(v64, v45);
    uint64_t result = ((uint64_t (*)(unsigned char *, uint64_t))v40)(v41, v5);
    CGRect v46 = v61;
    *CGFloat v61 = v57;
    v46[1] = v19;
    uint64_t v47 = v59;
    v46[2] = v21;
    v46[3] = v47;
    uint64_t v48 = v58;
    v46[4] = v56;
    v46[5] = v48;
    uint64_t v49 = v63;
    v46[6] = v55;
    v46[7] = v49;
    long long v50 = v54;
    v46[8] = v62;
    v46[9] = v50;
    v46[10] = v53;
    *((unsigned char *)v46 + 88) = v52 & 1;
    *((unsigned char *)v46 + 89) = v44 & 1;
  }
  return result;
}

unint64_t sub_1B07DD874()
{
  unint64_t result = qword_1E9B3AE20;
  if (!qword_1E9B3AE20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3AE20);
  }
  return result;
}

void sub_1B07DD8C8(void *a1@<X8>)
{
  *a1 = 0x6669636570736E75;
  a1[1] = 0xEB00000000646569;
}

unint64_t sub_1B07DD8EC()
{
  unint64_t result = qword_1E9B3AE28;
  if (!qword_1E9B3AE28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3AE28);
  }
  return result;
}

void sub_1B07DD940(void *a1@<X8>)
{
  *a1 = 25186;
  a1[1] = 0xE200000000000000;
}

unint64_t sub_1B07DD950()
{
  unint64_t result = qword_1E9B3AE30;
  if (!qword_1E9B3AE30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3AE30);
  }
  return result;
}

unint64_t sub_1B07DD9A4()
{
  unint64_t result = qword_1E9B3AE38;
  if (!qword_1E9B3AE38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3AE38);
  }
  return result;
}

uint64_t Models.Artwork.template.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

double Models.Artwork.size.getter()
{
  return *(double *)(v0 + 16);
}

uint64_t Models.Artwork.style.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 40);
  *a1 = *(void *)(v1 + 32);
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t Models.Artwork.crop.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 56);
  *a1 = *(void *)(v1 + 48);
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t Models.Artwork.format.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 72);
  *a1 = *(void *)(v1 + 64);
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t Models.Artwork.quality.getter()
{
  return *(void *)(v0 + 80);
}

uint64_t Models.Artwork.supportsWideGamut.getter()
{
  return *(unsigned __int8 *)(v0 + 89);
}

uint64_t Models.Artwork.removingStyle.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 8);
  uint64_t v3 = *(void *)(v1 + 48);
  uint64_t v4 = *(void *)(v1 + 56);
  uint64_t v5 = *(void *)(v1 + 64);
  uint64_t v6 = *(void *)(v1 + 72);
  uint64_t v7 = *(void *)(v1 + 80);
  char v8 = *(unsigned char *)(v1 + 88);
  char v9 = *(unsigned char *)(v1 + 89);
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v1 + 16);
  *(void *)(a1 + 32) = 0x6669636570736E75;
  *(void *)(a1 + 40) = 0xEB00000000646569;
  *(void *)(a1 + 48) = v3;
  *(void *)(a1 + 56) = v4;
  *(void *)(a1 + 64) = v5;
  *(void *)(a1 + 72) = v6;
  *(void *)(a1 + 80) = v7;
  *(unsigned char *)(a1 + 88) = v8;
  *(unsigned char *)(a1 + 89) = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

JSValue __swiftcall Models.Artwork.makeValue(in:)(JSContext in)
{
  char v27 = *(unsigned char *)(v1 + 88);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3AE40);
  initeCGFloat d = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B086E270;
  *(void *)(inited + 32) = 0x6574616C706D6574;
  *(void *)(inited + 40) = 0xE800000000000000;
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_1B07D5E5C(MEMORY[0x1E4FBC860]);
  Models.Artwork.URLTemplate.makeString(withSubstitutions:)((Swift::OpaquePointer)v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = in.super.isa;
  uint64_t v6 = sub_1B086A8D8();
  uint64_t v7 = self;
  id v8 = objc_msgSend(v7, sel_valueWithObject_inContext_, v6, v5);
  swift_unknownObjectRelease();

  *(void *)(inited + 48) = v8;
  *(void *)(inited + 56) = 0x6874646977;
  *(void *)(inited + 64) = 0xE500000000000000;
  char v9 = v5;
  id v10 = objc_msgSend(v7, sel_valueWithObject_inContext_, sub_1B086A8D8(), v9);
  swift_unknownObjectRelease();

  *(void *)(inited + 72) = v10;
  *(void *)(inited + 80) = 0x746867696568;
  *(void *)(inited + 88) = 0xE600000000000000;
  uint64_t v11 = v9;
  id v12 = objc_msgSend(v7, sel_valueWithObject_inContext_, sub_1B086A8D8(), v11);
  swift_unknownObjectRelease();

  *(void *)(inited + 96) = v12;
  *(void *)(inited + 104) = 0x656C797473;
  *(void *)(inited + 112) = 0xE500000000000000;
  uint64_t v13 = v11;
  swift_bridgeObjectRetain();
  id v14 = objc_msgSend(v7, sel_valueWithObject_inContext_, sub_1B086A8D8(), v13);
  swift_unknownObjectRelease();

  *(void *)(inited + 120) = v14;
  *(void *)(inited + 128) = 1886351971;
  *(void *)(inited + 136) = 0xE400000000000000;
  uint64_t v15 = v13;
  swift_bridgeObjectRetain();
  id v16 = objc_msgSend(v7, sel_valueWithObject_inContext_, sub_1B086A8D8(), v15);
  swift_unknownObjectRelease();

  *(void *)(inited + 144) = v16;
  *(void *)(inited + 152) = 0x74616D726F66;
  *(void *)(inited + 160) = 0xE600000000000000;
  uint64_t v17 = v15;
  swift_bridgeObjectRetain();
  id v18 = objc_msgSend(v7, sel_valueWithObject_inContext_, sub_1B086A8D8(), v17);
  swift_unknownObjectRelease();

  *(void *)(inited + 168) = v18;
  *(void *)(inited + 176) = 0x7974696C617571;
  *(void *)(inited + 184) = 0xE700000000000000;
  uint64_t v19 = v17;
  if (v27) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = sub_1B086A898();
  }
  id v21 = objc_msgSend(v7, (SEL)0x1E5FD2E98, v20, v17);
  swift_unknownObjectRelease();

  *(void *)(inited + 192) = v21;
  *(void *)(inited + 200) = 0xD000000000000011;
  *(void *)(inited + 208) = 0x80000001B0874530;
  char v22 = v17;
  id v23 = objc_msgSend(v7, (SEL)0x1E5FD2E98, sub_1B086A8D8(), v22);
  swift_unknownObjectRelease();

  *(void *)(inited + 216) = v23;
  sub_1B07D5F80(inited);
  char v24 = v22;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3AE48);
  id v25 = objc_msgSend(v7, (SEL)0x1E5FD2E98, sub_1B086A8D8(), v24);
  swift_unknownObjectRelease();

  if (v25) {
    return (JSValue)v25;
  }
  __break(1u);
  return result;
}

uint64_t sub_1B07DDFA0@<X0>(unsigned char *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return Models.Artwork.init(deserializing:using:)(a1, a2, a3);
}

uint64_t sub_1B07DDFB8()
{
  return sub_1B0869A68();
}

uint64_t sub_1B07DDFD0()
{
  return sub_1B0869A78();
}

uint64_t sub_1B07DDFEC()
{
  return sub_1B0869F58();
}

uint64_t sub_1B07DE04C()
{
  return sub_1B0869F48();
}

unint64_t sub_1B07DE09C(char a1)
{
  unint64_t result = 0x6574616C706D6574;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6874646977;
      break;
    case 2:
      unint64_t result = 0x746867696568;
      break;
    case 3:
      unint64_t result = 0x656C797473;
      break;
    case 4:
      unint64_t result = 1886351971;
      break;
    case 5:
      unint64_t result = 0x74616D726F66;
      break;
    case 6:
      unint64_t result = 0x7974696C617571;
      break;
    case 7:
      unint64_t result = 0xD000000000000011;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1B07DE18C()
{
  return sub_1B0869F58();
}

uint64_t sub_1B07DE1EC()
{
  return sub_1B0869F48();
}

uint64_t sub_1B07DE23C()
{
  return sub_1B0869F58();
}

uint64_t sub_1B07DE29C()
{
  return sub_1B0869F48();
}

uint64_t sub_1B07DE2EC()
{
  return sub_1B0869F58();
}

uint64_t sub_1B07DE34C()
{
  return sub_1B0869F48();
}

unint64_t sub_1B07DE39C()
{
  return sub_1B07DE09C(*v0);
}

uint64_t sub_1B07DE3A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1B07DF9A0(a1, a2);
  *a3 = result;
  return result;
}

void sub_1B07DE3CC(unsigned char *a1@<X8>)
{
  *a1 = 8;
}

uint64_t sub_1B07DE3D8(uint64_t a1)
{
  unint64_t v2 = sub_1B07DE9B4();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B07DE414(uint64_t a1)
{
  unint64_t v2 = sub_1B07DE9B4();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t Models.Artwork.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3AE50);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  id v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B07DE9B4();
  sub_1B086A9C8();
  if (!v2)
  {
    char v34 = 0;
    sub_1B07DEA08();
    sub_1B086A7C8();
    uint64_t v10 = v31;
    unint64_t v9 = v32;
    LOBYTE(v31) = 1;
    sub_1B086A7A8();
    uint64_t v12 = v11;
    LOBYTE(v31) = 2;
    sub_1B086A7A8();
    uint64_t v14 = v13;
    uint64_t v30 = v10;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3AE68);
    char v34 = 3;
    sub_1B07DEB28(&qword_1E9B3AE70, &qword_1E9B3AE68, (void (*)(void))sub_1B07DEA5C);
    sub_1B086A788();
    if (v32 >= 2)
    {
      uint64_t v28 = v31;
      unint64_t v29 = v32;
    }
    else
    {
      sub_1B07DEBE8(v31, v32);
      unint64_t v29 = 0xEB00000000646569;
      uint64_t v28 = 0x6669636570736E75;
    }
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3AE90);
    char v34 = 4;
    sub_1B07DEB28(&qword_1E9B3AE98, &qword_1E9B3AE90, (void (*)(void))sub_1B07DEAEC);
    sub_1B086A788();
    unint64_t v16 = v32;
    if (v32 >= 2)
    {
      uint64_t v27 = v31;
    }
    else
    {
      sub_1B07DEBE8(v31, v32);
      unint64_t v16 = 0xE200000000000000;
      uint64_t v27 = 25186;
    }
    char v34 = 5;
    sub_1B07DEBFC();
    sub_1B086A7C8();
    uint64_t v25 = v31;
    unint64_t v26 = v32;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3AEC0);
    char v34 = 6;
    sub_1B07DEC50();
    sub_1B086A788();
    uint64_t v23 = v31;
    unint64_t v24 = v16;
    int v33 = v32;
    int v17 = BYTE1(v32);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3AED8);
    char v34 = 7;
    sub_1B07DECF0();
    sub_1B086A788();
    v33 |= v17;
    if (v17) {
      uint64_t v18 = 0;
    }
    else {
      uint64_t v18 = v23;
    }
    char v19 = ((v31 & 0xFE) != 2) & v31;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *(void *)a2 = v30;
    *(void *)(a2 + 8) = v9;
    *(void *)(a2 + 16) = v12;
    *(void *)(a2 + 24) = v14;
    unint64_t v20 = v29;
    *(void *)(a2 + 32) = v28;
    *(void *)(a2 + 40) = v20;
    unint64_t v21 = v24;
    *(void *)(a2 + 48) = v27;
    *(void *)(a2 + 56) = v21;
    unint64_t v22 = v26;
    *(void *)(a2 + 64) = v25;
    *(void *)(a2 + 72) = v22;
    *(void *)(a2 + 80) = v18;
    *(unsigned char *)(a2 + 88) = v33 & 1;
    *(unsigned char *)(a2 + 89) = v19;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

unint64_t sub_1B07DE9B4()
{
  unint64_t result = qword_1E9B3AE58;
  if (!qword_1E9B3AE58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3AE58);
  }
  return result;
}

unint64_t sub_1B07DEA08()
{
  unint64_t result = qword_1E9B3AE60;
  if (!qword_1E9B3AE60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3AE60);
  }
  return result;
}

uint64_t sub_1B07DEA5C()
{
  return sub_1B07DEB28(&qword_1E9B3AE78, &qword_1E9B3AE80, (void (*)(void))sub_1B07DEA98);
}

unint64_t sub_1B07DEA98()
{
  unint64_t result = qword_1E9B3AE88;
  if (!qword_1E9B3AE88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3AE88);
  }
  return result;
}

uint64_t sub_1B07DEAEC()
{
  return sub_1B07DEB28(&qword_1E9B3AEA0, &qword_1E9B3AEA8, (void (*)(void))sub_1B07DEB94);
}

uint64_t sub_1B07DEB28(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1B07DEB94()
{
  unint64_t result = qword_1E9B3AEB0;
  if (!qword_1E9B3AEB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3AEB0);
  }
  return result;
}

uint64_t sub_1B07DEBE8(uint64_t a1, uint64_t a2)
{
  if (a2 != 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_1B07DEBFC()
{
  unint64_t result = qword_1E9B3AEB8;
  if (!qword_1E9B3AEB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3AEB8);
  }
  return result;
}

unint64_t sub_1B07DEC50()
{
  unint64_t result = qword_1E9B3AEC8;
  if (!qword_1E9B3AEC8)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1E9B3AEC0);
    sub_1B07DF268(&qword_1E9B3AED0, &qword_1EB595F20);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3AEC8);
  }
  return result;
}

unint64_t sub_1B07DECF0()
{
  unint64_t result = qword_1E9B3AEE0;
  if (!qword_1E9B3AEE0)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1E9B3AED8);
    sub_1B07DF268((unint64_t *)&qword_1E9B3AEE8, &qword_1E9B3AEF0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3AEE0);
  }
  return result;
}

uint64_t Models.Artwork.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3AEF8);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v1;
  uint64_t v8 = v1[1];
  uint64_t v10 = v1[2];
  uint64_t v9 = v1[3];
  uint64_t v11 = v1[4];
  uint64_t v25 = v1[5];
  uint64_t v26 = v11;
  uint64_t v12 = v1[6];
  uint64_t v23 = v1[7];
  uint64_t v24 = v12;
  uint64_t v13 = v1[9];
  uint64_t v21 = v1[8];
  uint64_t v22 = v13;
  uint64_t v20 = v1[10];
  int v30 = *((unsigned __int8 *)v1 + 88);
  _OWORD v19[3] = *((unsigned __int8 *)v1 + 89);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B07DE9B4();
  sub_1B086A9E8();
  uint64_t v28 = v7;
  uint64_t v29 = v8;
  char v31 = 0;
  sub_1B07DF118();
  uint64_t v14 = v27;
  sub_1B086A828();
  if (!v14)
  {
    uint64_t v15 = v25;
    uint64_t v16 = v26;
    uint64_t v17 = v24;
    uint64_t v28 = v10;
    char v31 = 1;
    sub_1B07C4958();
    sub_1B086A828();
    uint64_t v28 = v9;
    char v31 = 2;
    sub_1B086A828();
    uint64_t v28 = v16;
    uint64_t v29 = v15;
    char v31 = 3;
    sub_1B07DF16C();
    sub_1B086A828();
    uint64_t v28 = v17;
    uint64_t v29 = v23;
    char v31 = 4;
    sub_1B07DF1C0();
    sub_1B086A828();
    uint64_t v28 = v21;
    uint64_t v29 = v22;
    char v31 = 5;
    sub_1B07DF214();
    sub_1B086A828();
    uint64_t v28 = v20;
    LOBYTE(v29) = v30;
    char v31 = 6;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EB595F20);
    sub_1B07DF268(&qword_1E9B3AF20, &qword_1EB595F20);
    sub_1B086A828();
    LOBYTE(v28) = 7;
    sub_1B086A808();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_1B07DF118()
{
  unint64_t result = qword_1E9B3AF00;
  if (!qword_1E9B3AF00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3AF00);
  }
  return result;
}

unint64_t sub_1B07DF16C()
{
  unint64_t result = qword_1E9B3AF08;
  if (!qword_1E9B3AF08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3AF08);
  }
  return result;
}

unint64_t sub_1B07DF1C0()
{
  unint64_t result = qword_1E9B3AF10;
  if (!qword_1E9B3AF10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3AF10);
  }
  return result;
}

unint64_t sub_1B07DF214()
{
  unint64_t result = qword_1E9B3AF18;
  if (!qword_1E9B3AF18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3AF18);
  }
  return result;
}

uint64_t sub_1B07DF268(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1B07DF2CC()
{
  unint64_t result = qword_1E9B3AF28;
  if (!qword_1E9B3AF28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3AF28);
  }
  return result;
}

unint64_t sub_1B07DF324()
{
  unint64_t result = qword_1E9B3AF30;
  if (!qword_1E9B3AF30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3AF30);
  }
  return result;
}

uint64_t sub_1B07DF378@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return Models.Artwork.init(from:)(a1, a2);
}

uint64_t sub_1B07DF390(void *a1)
{
  return Models.Artwork.encode(to:)(a1);
}

uint64_t _s7ArtworkVwxx()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t _s7ArtworkVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v6;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s7ArtworkVwca(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 80) = v4;
  *(unsigned char *)(a1 + 89) = *(unsigned char *)(a2 + 89);
  return a1;
}

__n128 __swift_memcpy90_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 74) = *(_OWORD *)(a2 + 74);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t _s7ArtworkVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v7;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(unsigned char *)(a1 + 89) = *(unsigned char *)(a2 + 89);
  return a1;
}

uint64_t _s7ArtworkVwet(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 90)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s7ArtworkVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 88) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 90) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 90) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Models.Artwork()
{
  return &type metadata for Models.Artwork;
}

ValueMetadata *type metadata accessor for Models.Artwork.Style()
{
  return &type metadata for Models.Artwork.Style;
}

ValueMetadata *type metadata accessor for Models.Artwork.Format()
{
  return &type metadata for Models.Artwork.Format;
}

ValueMetadata *type metadata accessor for Models.Artwork.Crop()
{
  return &type metadata for Models.Artwork.Crop;
}

ValueMetadata *type metadata accessor for Models.Artwork.URLTemplate()
{
  return &type metadata for Models.Artwork.URLTemplate;
}

ValueMetadata *type metadata accessor for Models.Artwork.URLTemplate.Key()
{
  return &type metadata for Models.Artwork.URLTemplate.Key;
}

uint64_t _s7ArtworkV10CodingKeysOwet(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF9) {
    goto LABEL_17;
  }
  if (a2 + 7 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 7) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 7;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 8;
  int v8 = v6 - 8;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s7ArtworkV10CodingKeysOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *__n128 result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B07DF860);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *_s7ArtworkV10CodingKeysOMa()
{
  return &_s7ArtworkV10CodingKeysON;
}

unint64_t sub_1B07DF89C()
{
  unint64_t result = qword_1E9B3AF38;
  if (!qword_1E9B3AF38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3AF38);
  }
  return result;
}

unint64_t sub_1B07DF8F4()
{
  unint64_t result = qword_1E9B3AF40;
  if (!qword_1E9B3AF40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3AF40);
  }
  return result;
}

unint64_t sub_1B07DF94C()
{
  unint64_t result = qword_1E9B3AF48[0];
  if (!qword_1E9B3AF48[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1E9B3AF48);
  }
  return result;
}

uint64_t sub_1B07DF9A0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6574616C706D6574 && a2 == 0xE800000000000000;
  if (v2 || (sub_1B086A8A8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6874646977 && a2 == 0xE500000000000000 || (sub_1B086A8A8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x746867696568 && a2 == 0xE600000000000000 || (sub_1B086A8A8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x656C797473 && a2 == 0xE500000000000000 || (sub_1B086A8A8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 1886351971 && a2 == 0xE400000000000000 || (sub_1B086A8A8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x74616D726F66 && a2 == 0xE600000000000000 || (sub_1B086A8A8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x7974696C617571 && a2 == 0xE700000000000000 || (sub_1B086A8A8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001B0874530)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else
  {
    char v6 = sub_1B086A8A8();
    swift_bridgeObjectRelease();
    if (v6) {
      return 7;
    }
    else {
      return 8;
    }
  }
}

uint64_t type metadata accessor for ImmutableBox()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1B07DFD04()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 80) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 88));
  return v0;
}

id JUComponentCollectionViewCell.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  id v9 = objc_allocWithZone(v4);

  return objc_msgSend(v9, sel_initWithFrame_, a1, a2, a3, a4);
}

char *JUComponentCollectionViewCell.init(frame:)(double a1, double a2, double a3, double a4)
{
  uint64_t v9 = *(void *)((*MEMORY[0x1E4FBC8C8] & *v4) + 0x68);
  uint64_t v10 = *(void *)((*MEMORY[0x1E4FBC8C8] & *v4) + 0x70);
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 56);
  uint64_t v12 = v4;
  *(void *)((char *)v12 + qword_1E9B3AFD0) = v11(v9, v10);
  *(void *)((char *)v12 + qword_1E9B3AFD8) = MEMORY[0x1E4FBC870];

  v17.receiver = v12;
  v17.super_class = (Class)type metadata accessor for JUComponentCollectionViewCell();
  uint64_t v13 = (char *)objc_msgSendSuper2(&v17, sel_initWithFrame_, a1, a2, a3, a4);
  id v14 = objc_msgSend(v13, sel_contentView);
  id v15 = *(id *)&v13[qword_1E9B3AFD0];
  objc_msgSend(v14, sel_addSubview_, v15);

  return v13;
}

uint64_t type metadata accessor for JUComponentCollectionViewCell()
{
  return __swift_instantiateGenericMetadata();
}

char *sub_1B07DFF54(double a1, double a2, double a3, double a4)
{
  return JUComponentCollectionViewCell.init(frame:)(a1, a2, a3, a4);
}

id JUComponentCollectionViewCell.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

id JUComponentCollectionViewCell.init()()
{
  return objc_msgSend(v0, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
}

id sub_1B07DFFCC()
{
  return JUComponentCollectionViewCell.init()();
}

id JUComponentCollectionViewCell.componentView.getter()
{
  return *(id *)(v0 + qword_1E9B3AFD0);
}

Swift::Void __swiftcall JUComponentCollectionViewCell.prepareForReuse()()
{
  uint64_t v1 = *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x68);
  uint64_t v2 = *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70);
  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for JUComponentCollectionViewCell();
  objc_msgSendSuper2(&v3, sel_prepareForReuse);
  (*(void (**)(void, uint64_t, uint64_t))(v2 + 64))(*(void *)((char *)v0 + qword_1E9B3AFD0), v1, v2);
}

void sub_1B07E00B8(void *a1)
{
  id v1 = a1;
  JUComponentCollectionViewCell.prepareForReuse()();
}

id sub_1B07E0100(void *a1)
{
  return objc_msgSend(a1, sel_size);
}

void *sub_1B07E012C(void *a1)
{
  objc_super v3 = (void *)MEMORY[0x1E4FBC8C8];
  objc_msgSend(a1, sel_copy);
  sub_1B086A438();
  swift_unknownObjectRelease();
  sub_1B07E0314();
  swift_dynamicCast();
  double v4 = (*(double (**)(void *))((*v3 & *v1) + 0x88))(a1);
  double v6 = v5;
  BOOL v7 = *(void **)((char *)v1 + qword_1E9B3AFD0);
  id v8 = objc_msgSend(v7, sel_traitCollection);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v10 = *(double (**)(id, uint64_t, uint64_t, double, double))(AssociatedConformanceWitness + 8);
  id v11 = v7;
  uint64_t v12 = swift_checkMetadataState();
  double v13 = v10(v8, v12, AssociatedConformanceWitness, v4, v6);
  double v15 = v14;

  objc_msgSend(v17, sel_setSize_, v13, v15);
  return v17;
}

unint64_t sub_1B07E0314()
{
  unint64_t result = qword_1E9B3AFE0;
  if (!qword_1E9B3AFE0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1E9B3AFE0);
  }
  return result;
}

id sub_1B07E0354(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = a1;
  double v6 = sub_1B07E012C(v4);

  return v6;
}

id sub_1B07E03B4()
{
  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for JUComponentCollectionViewCell();
  objc_msgSendSuper2(&v3, sel_layoutSubviews);
  id v1 = *(void **)&v0[qword_1E9B3AFD0];
  objc_msgSend(v0, sel_frame);
  return objc_msgSend(v1, sel_setFrame_, 0.0, 0.0);
}

void sub_1B07E0464(void *a1)
{
  id v1 = a1;
  sub_1B07E03B4();
}

uint64_t JUComponentCollectionViewCell.apply(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *MEMORY[0x1E4FBC8C8] & *(void *)v1;
  uint64_t v44 = sub_1B0869848();
  uint64_t v42 = *(void *)(v44 - 8);
  MEMORY[0x1F4188790](v44);
  double v40 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v4 + 112);
  uint64_t v7 = *(void *)(v4 + 104);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v37 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v36 = (char *)&v35 - v9;
  uint64_t v43 = sub_1B08699E8();
  uint64_t v41 = *(void *)(v43 - 8);
  MEMORY[0x1F4188790](v43);
  uint64_t v39 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3AFE8);
  MEMORY[0x1F4188790](v11 - 8);
  double v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_1B0869948();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v35 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 72))(a1, *(void *)&v2[qword_1E9B3AFD0], v7, v6);
  uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 80))(a1, v7, v6);
  uint64_t v18 = (uint64_t *)&v2[qword_1E9B3AFD8];
  swift_beginAccess();
  *uint64_t v18 = v17;
  swift_bridgeObjectRelease();
  id v38 = v2;
  objc_msgSend(v2, sel_setIsAccessibilityElement_, 1);
  uint64_t v19 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v21 = swift_getAssociatedConformanceWitness();
  v46[0] = AssociatedTypeWitness;
  v46[1] = v19;
  v46[2] = AssociatedConformanceWitness;
  uint64_t v47 = v21;
  uint64_t v22 = a1 + *(int *)(type metadata accessor for JUComponentConfiguration() + 52);
  sub_1B0869C68();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    sub_1B07BBE14((uint64_t)v13, &qword_1E9B3AFE8);
    uint64_t v24 = v36;
    uint64_t v23 = v37;
    (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))(v36, v22, AssociatedTypeWitness);
    swift_getDynamicType();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v24, AssociatedTypeWitness);
    sub_1B086AA98();
    uint64_t v47 = MEMORY[0x1E4FBB960];
    v46[0] = swift_allocObject();
    sub_1B0869878();
    memset(v45, 0, sizeof(v45));
    uint64_t v25 = v39;
    sub_1B08699D8();
    swift_bridgeObjectRelease();
    sub_1B07BBE14((uint64_t)v45, (uint64_t *)&unk_1EB5962E0);
    sub_1B07BBE14((uint64_t)v46, (uint64_t *)&unk_1EB5962E0);
    uint64_t v26 = v40;
    sub_1B08699B8();
    sub_1B0869838();
    (*(void (**)(char *, uint64_t))(v42 + 8))(v26, v44);
    uint64_t v27 = (void *)sub_1B0869D68();
    swift_bridgeObjectRelease();
    objc_msgSend(v38, sel_setAccessibilityIdentifier_, v27);

    return (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v25, v43);
  }
  else
  {
    uint64_t v29 = v35;
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v35, v13, v14);
    char v31 = v36;
    uint64_t v30 = v37;
    (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))(v36, v22, AssociatedTypeWitness);
    swift_getDynamicType();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v31, AssociatedTypeWitness);
    sub_1B086AA98();
    unint64_t v32 = v39;
    sub_1B08699C8();
    swift_bridgeObjectRelease();
    int v33 = v40;
    sub_1B08699B8();
    sub_1B0869838();
    (*(void (**)(char *, uint64_t))(v42 + 8))(v33, v44);
    char v34 = (void *)sub_1B0869D68();
    swift_bridgeObjectRelease();
    objc_msgSend(v38, sel_setAccessibilityIdentifier_, v34);

    (*(void (**)(char *, uint64_t))(v41 + 8))(v32, v43);
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v29, v14);
  }
}

uint64_t sub_1B07E0B8C()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);

  return MEMORY[0x1F4186498](v0, 56, 7);
}

uint64_t JUComponentCollectionViewCell.apply(contentsOf:with:asPartOf:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v46 = a2;
  unint64_t v47 = a3;
  uint64_t v45 = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB596230);
  uint64_t v36 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v35 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3AFF0);
  uint64_t v43 = *(void *)(v6 - 8);
  uint64_t v44 = v6;
  MEMORY[0x1F4188790](v6);
  uint64_t v42 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = v3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = sub_1B0869978();
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v41 = (char *)&v33 - v10;
  uint64_t v11 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v13 = swift_getAssociatedConformanceWitness();
  uint64_t v49 = v11;
  uint64_t v50 = AssociatedTypeWitness;
  uint64_t v40 = AssociatedConformanceWitness;
  uint64_t v51 = AssociatedConformanceWitness;
  uint64_t v52 = v13;
  uint64_t v38 = v13;
  uint64_t v39 = type metadata accessor for JUComponentConfiguration();
  uint64_t v14 = *(void *)(v39 - 8);
  MEMORY[0x1F4188790](v39);
  uint64_t v16 = (unint64_t *)((char *)&v33 - v15);
  uint64_t v17 = sub_1B086A3B8();
  uint64_t v33 = *(void *)(v17 - 8);
  uint64_t v34 = v17;
  uint64_t v18 = MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)&v33 - v19;
  uint64_t v21 = *(void *)(v11 - 8);
  uint64_t v22 = MEMORY[0x1F4188790](v18);
  uint64_t v24 = (char *)&v33 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v22);
  uint64_t v26 = (char *)&v33 - v25;
  uint64_t v37 = v4;
  sub_1B0869778();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB595F28);
  int v27 = swift_dynamicCast();
  uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56);
  if (v27)
  {
    v28(v20, 0, 1, v11);
    (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v26, v20, v11);
    (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v24, v26, v11);
    (*(void (**)(char *, uint64_t, uint64_t))(v43 + 16))(v42, v46, v44);
    uint64_t v29 = (uint64_t)v41;
    sub_1B0869988();
    unint64_t v30 = v47;
    swift_retain();
    JUComponentConfiguration.init(contentsOf:with:asPartOf:)((uint64_t)v24, v29, v30, v11, v16);
    JUComponentCollectionViewCell.apply(_:)((uint64_t)v16);
    (*(void (**)(unint64_t *, uint64_t))(v14 + 8))(v16, v39);
    return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v26, v11);
  }
  else
  {
    v28(v20, 1, 1, v11);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v20, v34);
    (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v35, v45, v37);
    sub_1B07E11C4();
    uint64_t v49 = sub_1B086A848();
    uint64_t v50 = v32;
    sub_1B0869E68();
    sub_1B086AA98();
    sub_1B0869E68();
    swift_bridgeObjectRelease();
    uint64_t result = sub_1B086A6C8();
    __break(1u);
  }
  return result;
}

unint64_t sub_1B07E11C4()
{
  unint64_t result = qword_1E9B3AFF8;
  if (!qword_1E9B3AFF8)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EB596230);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3AFF8);
  }
  return result;
}

uint64_t JUComponentCollectionViewCell.automaticReloadTriggers.getter()
{
  sub_1B07E27A4();

  return swift_bridgeObjectRetain();
}

uint64_t JUComponentCollectionViewCell.applyMatchedReloadTriggers(_:)(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x70) + 88))(a1, *(void *)((char *)v1 + qword_1E9B3AFD0)) & 1;
}

uint64_t JUComponentCollectionViewCell.shouldSelect(contentsOf:with:asPartOf:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v49 = a2;
  unint64_t v50 = a3;
  uint64_t v48 = a1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB596230);
  uint64_t v39 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v38 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3AFF0);
  uint64_t v46 = *(void *)(v7 - 8);
  uint64_t v47 = v7;
  MEMORY[0x1F4188790](v7);
  uint64_t v45 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = sub_1B0869978();
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v44 = (char *)&v35 - v11;
  uint64_t v12 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v14 = swift_getAssociatedConformanceWitness();
  uint64_t v51 = v12;
  uint64_t v52 = AssociatedTypeWitness;
  uint64_t v43 = AssociatedConformanceWitness;
  uint64_t v53 = AssociatedConformanceWitness;
  uint64_t v54 = v14;
  uint64_t v41 = v14;
  uint64_t v42 = type metadata accessor for JUComponentConfiguration();
  uint64_t v15 = *(void *)(v42 - 8);
  MEMORY[0x1F4188790](v42);
  uint64_t v17 = (unint64_t *)((char *)&v35 - v16);
  uint64_t v18 = sub_1B086A3B8();
  uint64_t v36 = *(void *)(v18 - 8);
  uint64_t v37 = v18;
  uint64_t v19 = MEMORY[0x1F4188790](v18);
  uint64_t v21 = (char *)&v35 - v20;
  uint64_t v22 = *(void *)(v12 - 8);
  uint64_t v23 = MEMORY[0x1F4188790](v19);
  uint64_t v25 = (char *)&v35 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v23);
  int v27 = (char *)&v35 - v26;
  uint64_t v40 = v5;
  sub_1B0869778();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB595F28);
  int v28 = swift_dynamicCast();
  uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56);
  if (v28)
  {
    v29(v21, 0, 1, v12);
    (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v27, v21, v12);
    (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v25, v27, v12);
    (*(void (**)(char *, uint64_t, uint64_t))(v46 + 16))(v45, v49, v47);
    uint64_t v30 = (uint64_t)v44;
    sub_1B0869988();
    unint64_t v31 = v50;
    swift_retain();
    JUComponentConfiguration.init(contentsOf:with:asPartOf:)((uint64_t)v25, v30, v31, v12, v17);
    char v32 = (*(uint64_t (**)(unint64_t *))((*MEMORY[0x1E4FBC8C8] & *v4) + 0x90))(v17);
    (*(void (**)(unint64_t *, uint64_t))(v15 + 8))(v17, v42);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v27, v12);
    return v32 & 1;
  }
  else
  {
    v29(v21, 1, 1, v12);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v21, v37);
    (*(void (**)(char *, uint64_t, uint64_t))(v39 + 16))(v38, v48, v40);
    sub_1B07E11C4();
    uint64_t v51 = sub_1B086A848();
    uint64_t v52 = v34;
    sub_1B0869E68();
    sub_1B086AA98();
    sub_1B0869E68();
    swift_bridgeObjectRelease();
    uint64_t result = sub_1B086A6C8();
    __break(1u);
  }
  return result;
}

BOOL sub_1B07E1900()
{
  v2[0] = swift_getAssociatedTypeWitness();
  v2[1] = swift_getAssociatedTypeWitness();
  v2[2] = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for JUComponentConfiguration();
  sub_1B0869888();
  BOOL v0 = AssociatedConformanceWitness != 0;
  sub_1B07BBE14((uint64_t)v2, &qword_1E9B3B000);
  return v0;
}

uint64_t JUComponentCollectionViewCell.didSelect(contentsOf:with:withMetrics:asPartOf:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = v4;
  unint64_t v49 = a4;
  uint64_t v50 = a3;
  uint64_t v47 = a1;
  uint64_t v48 = a2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB596230);
  uint64_t v38 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v37 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3AFF0);
  uint64_t v45 = *(void *)(v8 - 8);
  uint64_t v46 = v8;
  MEMORY[0x1F4188790](v8);
  uint64_t v44 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = sub_1B0869978();
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v43 = (char *)&v35 - v12;
  uint64_t v13 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v15 = swift_getAssociatedConformanceWitness();
  uint64_t v51 = v13;
  uint64_t v52 = AssociatedTypeWitness;
  uint64_t v42 = AssociatedConformanceWitness;
  uint64_t v53 = AssociatedConformanceWitness;
  uint64_t v54 = v15;
  uint64_t v40 = v15;
  uint64_t v41 = type metadata accessor for JUComponentConfiguration();
  uint64_t v16 = *(void *)(v41 - 8);
  MEMORY[0x1F4188790](v41);
  uint64_t v18 = (unint64_t *)((char *)&v35 - v17);
  uint64_t v19 = sub_1B086A3B8();
  uint64_t v35 = *(void *)(v19 - 8);
  uint64_t v36 = v19;
  uint64_t v20 = MEMORY[0x1F4188790](v19);
  uint64_t v22 = (char *)&v35 - v21;
  uint64_t v23 = *(void *)(v13 - 8);
  uint64_t v24 = MEMORY[0x1F4188790](v20);
  uint64_t v26 = (char *)&v35 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v24);
  int v28 = (char *)&v35 - v27;
  uint64_t v39 = v6;
  sub_1B0869778();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB595F28);
  int v29 = swift_dynamicCast();
  uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56);
  if (v29)
  {
    v30(v22, 0, 1, v13);
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v28, v22, v13);
    (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v26, v28, v13);
    (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v44, v48, v46);
    uint64_t v31 = (uint64_t)v43;
    sub_1B0869988();
    unint64_t v32 = v49;
    swift_retain();
    JUComponentConfiguration.init(contentsOf:with:asPartOf:)((uint64_t)v26, v31, v32, v13, v18);
    (*(void (**)(unint64_t *, uint64_t))((*MEMORY[0x1E4FBC8C8] & *v5) + 0x98))(v18, v50);
    (*(void (**)(unint64_t *, uint64_t))(v16 + 8))(v18, v41);
    return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v28, v13);
  }
  else
  {
    v30(v22, 1, 1, v13);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v22, v36);
    (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v37, v47, v39);
    sub_1B07E11C4();
    uint64_t v51 = sub_1B086A848();
    uint64_t v52 = v34;
    sub_1B0869E68();
    sub_1B086AA98();
    sub_1B0869E68();
    swift_bridgeObjectRelease();
    uint64_t result = sub_1B086A6C8();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B07E2080(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(qword_1E9B3B008);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v10 = swift_getAssociatedConformanceWitness();
  v17[0] = AssociatedTypeWitness;
  v17[1] = v8;
  _OWORD v17[2] = AssociatedConformanceWitness;
  void v17[3] = v10;
  uint64_t v11 = type metadata accessor for JUComponentConfiguration();
  sub_1B0869888();
  if (!v16) {
    return sub_1B07BBE14((uint64_t)&v15, &qword_1E9B3B000);
  }
  sub_1B07BA8FC(&v15, (uint64_t)v17);
  sub_1B07BBD78((uint64_t)v17, (uint64_t)&v15);
  sub_1B07E27EC(a2, (uint64_t)v6);
  uint64_t v12 = *(void *)(a1 + *(int *)(v11 + 60));
  type metadata accessor for JUActionPerformer();
  uint64_t v13 = swift_allocObject();
  sub_1B07BA8FC(&v15, v13 + 16);
  sub_1B07E2854((uint64_t)v6, v13 + OBJC_IVAR____TtC5JetUI17JUActionPerformer_metricsContext);
  *(void *)(v13 + OBJC_IVAR____TtC5JetUI17JUActionPerformer_objectGraph) = v12;
  swift_retain();
  sub_1B08132D4();
  swift_setDeallocating();
  __swift_destroy_boxed_opaque_existential_1(v13 + 16);
  sub_1B07BBE14(v13 + OBJC_IVAR____TtC5JetUI17JUActionPerformer_metricsContext, qword_1E9B3B008);
  swift_release();
  swift_deallocClassInstance();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
}

uint64_t sub_1B07E230C()
{
  return swift_bridgeObjectRelease();
}

id JUComponentCollectionViewCell.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for JUComponentCollectionViewCell();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1B07E23C0(uint64_t a1)
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B07E240C()
{
  sub_1B07E27A4();

  return swift_bridgeObjectRetain();
}

id JUAnyComponentCollectionViewCell.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void JUAnyComponentCollectionViewCell.init(coder:)()
{
}

Swift::Void __swiftcall JUAnyComponentCollectionViewCell.encode(with:)(NSCoder with)
{
}

void sub_1B07E265C()
{
}

void sub_1B07E26B8()
{
}

void sub_1B07E2714()
{
}

id JUAnyComponentCollectionViewCell.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for JUAnyComponentCollectionViewCell();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1B07E27A4()
{
  uint64_t v1 = v0 + qword_1E9B3AFD8;
  swift_beginAccess();
  return *(void *)v1;
}

uint64_t sub_1B07E27EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(qword_1E9B3B008);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B07E2854(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(qword_1E9B3B008);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for JUAnyComponentCollectionViewCell()
{
  return self;
}

uint64_t sub_1B07E28E0()
{
  return swift_initClassMetadata2();
}

uint64_t method lookup function for JUComponentCollectionViewCell(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for JUComponentCollectionViewCell);
}

uint64_t dispatch thunk of JUComponentCollectionViewCell.fitSize(for:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of JUComponentCollectionViewCell.shouldSelect(for:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x90))();
}

uint64_t dispatch thunk of JUComponentCollectionViewCell.didSelect(for:withMetrics:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x98))();
}

uint64_t method lookup function for JUAnyComponentCollectionViewCell(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for JUAnyComponentCollectionViewCell);
}

uint64_t dispatch thunk of JUAnyComponentCollectionViewCell.apply(contentsOf:with:asPartOf:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x50))();
}

uint64_t dispatch thunk of JUAnyComponentCollectionViewCell.shouldSelect(contentsOf:with:asPartOf:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x58))();
}

uint64_t dispatch thunk of JUAnyComponentCollectionViewCell.didSelect(contentsOf:with:withMetrics:asPartOf:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x60))();
}

uint64_t Margins.init(top:left:bottom:right:child:)(void *a1, double a2, double a3, double a4, double a5)
{
  return sub_1B07E2AC8(a1, (void (*)(void *, double, double, double, double))Margins.init(top:left:bottom:right:child:), a2, a3, a4, a5);
}

uint64_t Margins.init(insets:child:)(void *a1, double a2, double a3, double a4, double a5)
{
  return sub_1B07E2AC8(a1, (void (*)(void *, double, double, double, double))Margins.init(insets:child:), a2, a3, a4, a5);
}

uint64_t sub_1B07E2AC8(void *a1, void (*a2)(void *, double, double, double, double), double a3, double a4, double a5, double a6)
{
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[5];
  __swift_project_boxed_opaque_existential_1(a1, v12);
  Measurable.placeable.getter(v12, v13, v15);
  a2(v15, a3, a4, a5, a6);

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t Margins.init(_:top:leading:bottom:trailing:)@<X0>(void *a1@<X0>, long long *a2@<X1>, long long *a3@<X2>, long long *a4@<X3>, long long *a5@<X4>, void *a6@<X8>)
{
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[5];
  __swift_project_boxed_opaque_existential_1(a1, v12);
  Measurable.placeable.getter(v12, v13, a6);
  sub_1B07BA8FC(a2, (uint64_t)(a6 + 5));
  sub_1B07BA8FC(a3, (uint64_t)(a6 + 10));
  sub_1B07BA8FC(a4, (uint64_t)(a6 + 15));
  sub_1B07BA8FC(a5, (uint64_t)(a6 + 20));

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

id ObjCFunctions.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for ObjCFunctions()
{
  return self;
}

double _sSo7CGPointV5JetUIE19interpolateLinearly7between3and8forInputA2B_AB12CoreGraphics7CGFloatVtFZ_0(double a1, double a2, double a3, double a4, double a5)
{
  return a3 * a5 + (1.0 - a5) * a1;
}

float64x2_t sub_1B07E2D14@<Q0>(float64x2_t *a1@<X0>, float64x2_t *a2@<X1>, float64x2_t *a3@<X8>, double a4@<D0>)
{
  float64x2_t result = vaddq_f64(vmulq_n_f64(*a1, 1.0 - a4), vmulq_n_f64(*a2, nullsub_1()));
  *a3 = result;
  return result;
}

double static CGRect.interpolateLinearly(between:and:forInput:)(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, double a9)
{
  return sub_1B07E2DD0(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

void sub_1B07E2D84(CGFloat *a1@<X0>, CGFloat *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  *(double *)a3 = sub_1B07E2DD0(*a1, a1[1], a1[2], a1[3], *a2, a2[1], a2[2], a2[3], a4);
  *(void *)(a3 + 8) = v5;
  *(void *)(a3 + 16) = v6;
  *(void *)(a3 + 24) = v7;
}

double sub_1B07E2DD0(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, double a9)
{
  double MinX = CGRectGetMinX(*(CGRect *)&a1);
  v29.origin.CGFloat x = a5;
  v29.origin.CGFloat y = a6;
  v29.size.double width = a7;
  v29.size.double height = a8;
  double v24 = (1.0 - a9) * MinX + CGRectGetMinX(v29) * a9;
  v30.origin.CGFloat x = a1;
  v30.origin.CGFloat y = a2;
  v30.size.double width = a3;
  v30.size.double height = a4;
  CGRectGetMinY(v30);
  v31.origin.CGFloat x = a5;
  v31.origin.CGFloat y = a6;
  v31.size.double width = a7;
  v31.size.double height = a8;
  CGRectGetMinY(v31);
  v32.origin.CGFloat x = a1;
  v32.origin.CGFloat y = a2;
  v32.size.double width = a3;
  v32.size.double height = a4;
  CGRectGetWidth(v32);
  v33.origin.CGFloat x = a5;
  v33.origin.CGFloat y = a6;
  v33.size.double width = a7;
  v33.size.double height = a8;
  CGRectGetWidth(v33);
  v34.origin.CGFloat x = a1;
  v34.origin.CGFloat y = a2;
  v34.size.double width = a3;
  v34.size.double height = a4;
  CGRectGetHeight(v34);
  v35.origin.CGFloat x = a5;
  v35.origin.CGFloat y = a6;
  v35.size.double width = a7;
  v35.size.double height = a8;
  CGRectGetHeight(v35);
  return v24;
}

BOOL sub_1B07E2F3C(void *a1)
{
  id v1 = a1;
  id v2 = objc_msgSend(v1, sel_contents);
  if (v2)
  {
    sub_1B086A438();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v4, 0, sizeof(v4));
  }
  sub_1B07B86F8((uint64_t)v4);

  return v2 != 0;
}

BOOL CALayer.hasContent.getter()
{
  id v1 = objc_msgSend(v0, sel_contents);
  if (v1)
  {
    sub_1B086A438();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v3, 0, sizeof(v3));
  }
  sub_1B07B86F8((uint64_t)v3);
  return v1 != 0;
}

id sub_1B07E3034(void *a1)
{
  return objc_msgSend(a1, sel_frame);
}

id CALayer.focusedFrame.getter()
{
  return objc_msgSend(v0, sel_frame);
}

double CALayer.measurements(fitting:in:)()
{
  objc_msgSend(v0, sel_bounds);
  return v1;
}

double sub_1B07E3084(void *a1)
{
  objc_msgSend(a1, sel_bounds);
  return v1;
}

id sub_1B07E30B4()
{
  qword_1E9B460E0 = *MEMORY[0x1E4FB2628];
  return (id)qword_1E9B460E0;
}

id sub_1B07E30CC()
{
  qword_1E9B460E8 = *MEMORY[0x1E4FB2640];
  return (id)qword_1E9B460E8;
}

uint64_t ApplicationStatePresenter.__allocating_init(isEnabled:)(char a1)
{
  uint64_t v2 = swift_allocObject();
  ApplicationStatePresenter.init(isEnabled:)(a1);
  return v2;
}

uint64_t ApplicationStatePresenter.init(isEnabled:)(char a1)
{
  uint64_t v2 = v1;
  *(void *)(v2 + 32) = 0;
  swift_unknownObjectWeakInit();
  *(unsigned char *)(v2 + 16) = a1;
  __swift_instantiateConcreteTypeFromMangledName(qword_1E9B3B090);
  swift_allocObject();
  *(void *)(v2 + 40) = sub_1B0869C58();
  id v4 = objc_msgSend(self, sel_defaultCenter);
  uint64_t v5 = qword_1E9B3A658;
  swift_retain();
  if (v5 != -1) {
    swift_once();
  }
  objc_msgSend(v4, sel_addObserver_selector_name_object_, v2, sel_applicationDidBecomeActive, qword_1E9B460E0, 0);
  swift_release();
  uint64_t v6 = qword_1E9B3A660;
  swift_retain();
  if (v6 != -1) {
    swift_once();
  }
  objc_msgSend(v4, sel_addObserver_selector_name_object_, v2, sel_applicationDidResignActive, qword_1E9B460E8, 0);

  swift_release();
  return v2;
}

uint64_t ApplicationStatePresenter.deinit()
{
  id v1 = objc_msgSend(self, sel_defaultCenter);
  objc_msgSend(v1, sel_removeObserver_, v0);

  sub_1B07E32F8(v0 + 24);
  swift_release();
  return v0;
}

uint64_t sub_1B07E32F8(uint64_t a1)
{
  return a1;
}

uint64_t ApplicationStatePresenter.__deallocating_deinit()
{
  id v1 = objc_msgSend(self, sel_defaultCenter);
  objc_msgSend(v1, sel_removeObserver_, v0);

  sub_1B07E32F8(v0 + 24);
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t ApplicationStatePresenter.isEnabled.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t ApplicationStatePresenter.isEnabled.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 16) = a1;
  return result;
}

uint64_t (*ApplicationStatePresenter.isEnabled.modify())()
{
  return j__swift_endAccess;
}

uint64_t ApplicationStatePresenter.delegate.getter()
{
  swift_beginAccess();
  return MEMORY[0x1B3E98E70](v0 + 24);
}

uint64_t ApplicationStatePresenter.delegate.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 32) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*ApplicationStatePresenter.delegate.modify(void *a1))(uint64_t a1, char a2)
{
  id v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x1B3E98E70](v1 + 24);
  uint64_t v5 = *(void *)(v1 + 32);
  void v3[3] = v4;
  v3[4] = v5;
  return sub_1B07E3594;
}

void sub_1B07E3594(uint64_t a1, char a2)
{
  id v3 = *(void **)a1;
  *(void *)(*(void *)(*(void *)a1 + 40) + 32) = *(void *)(*(void *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if (a2)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }

  free(v3);
}

uint64_t ApplicationStatePresenter.onActiveDidChange.getter()
{
  return swift_retain();
}

uint64_t sub_1B07E3620@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 24;
  swift_beginAccess();
  uint64_t result = MEMORY[0x1B3E98E70](v4);
  uint64_t v6 = *(void *)(v3 + 32);
  *a2 = result;
  a2[1] = v6;
  return result;
}

uint64_t sub_1B07E367C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *a2;
  swift_beginAccess();
  *(void *)(v3 + 32) = v2;
  return swift_unknownObjectWeakAssign();
}

uint64_t dispatch thunk of ApplicationStatePresenterDelegate.applicationDidBecomeActive()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ApplicationStatePresenterDelegate.applicationDidResignActive()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t sub_1B07E3700()
{
  uint64_t result = swift_beginAccess();
  if (*(unsigned char *)(v0 + 16) == 1)
  {
    swift_beginAccess();
    if (MEMORY[0x1B3E98E70](v0 + 24))
    {
      uint64_t v2 = *(void *)(v0 + 32);
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v2 + 8))(ObjectType, v2);
      swift_unknownObjectRelease();
    }
    return sub_1B0869C48();
  }
  return result;
}

uint64_t sub_1B07E37CC()
{
  uint64_t result = swift_beginAccess();
  if (*(unsigned char *)(v0 + 16) == 1)
  {
    swift_beginAccess();
    if (MEMORY[0x1B3E98E70](v0 + 24))
    {
      uint64_t v2 = *(void *)(v0 + 32);
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v2 + 16))(ObjectType, v2);
      swift_unknownObjectRelease();
    }
    return sub_1B0869C48();
  }
  return result;
}

uint64_t sub_1B07E3894(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v4 = swift_retain();
  a3(v4);

  return swift_release();
}

uint64_t type metadata accessor for ApplicationStatePresenter()
{
  return self;
}

uint64_t method lookup function for ApplicationStatePresenter(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ApplicationStatePresenter);
}

uint64_t dispatch thunk of ApplicationStatePresenter.__allocating_init(isEnabled:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t JUComponentShelfLayoutConfiguration.init(forContentsOf:with:at:in:asPartOf:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, unint64_t *a7@<X8>)
{
  *a7 = sub_1B07D5A14(MEMORY[0x1E4FBC860]);
  uint64_t v14 = (int *)type metadata accessor for JUComponentShelfLayoutConfiguration();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32))((char *)a7 + v14[9], a1, a6);
  long long v15 = (char *)a7 + v14[10];
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EB596240);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 32))(v15, a2, v16);
  uint64_t v17 = (char *)a7 + v14[11];
  uint64_t v18 = sub_1B0869238();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 32))(v17, a3, v18);
  *(unint64_t *)((char *)a7 + v14[12]) = a4;
  *(unint64_t *)((char *)a7 + v14[13]) = a5;
  return result;
}

uint64_t type metadata accessor for JUComponentShelfLayoutConfiguration()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t JUComponentShelfLayoutConfiguration.model.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 36));
}

uint64_t JUComponentShelfLayoutConfiguration.model.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2 + *(int *)(a2 + 36), a1);
}

double (*JUComponentShelfLayoutConfiguration.model.modify())(void)
{
  return nullsub_1;
}

uint64_t JUComponentShelfLayoutConfiguration.state.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 40);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EB596240);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t JUComponentShelfLayoutConfiguration.state.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 40);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EB596240);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);

  return v6(v4, a1, v5);
}

double (*JUComponentShelfLayoutConfiguration.state.modify())(void)
{
  return nullsub_1;
}

uint64_t JUComponentShelfLayoutConfiguration.indexPath.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 44);
  uint64_t v5 = sub_1B0869238();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t JUComponentShelfLayoutConfiguration.indexPath.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 44);
  uint64_t v5 = sub_1B0869238();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);

  return v6(v4, a1, v5);
}

double (*JUComponentShelfLayoutConfiguration.indexPath.modify())(void)
{
  return nullsub_1;
}

uint64_t JUComponentShelfLayoutConfiguration.layoutEnvironment.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t JUComponentShelfLayoutConfiguration.layoutEnvironment.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(int *)(a2 + 48);
  uint64_t result = swift_unknownObjectRelease();
  *(void *)(v2 + v4) = a1;
  return result;
}

double (*JUComponentShelfLayoutConfiguration.layoutEnvironment.modify())(void)
{
  return nullsub_1;
}

uint64_t JUComponentShelfLayoutConfiguration.objectGraph.getter()
{
  return swift_retain();
}

uint64_t JUComponentShelfLayoutConfiguration.objectGraph.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(int *)(a2 + 52);
  uint64_t result = swift_release();
  *(void *)(v2 + v4) = a1;
  return result;
}

double (*JUComponentShelfLayoutConfiguration.objectGraph.modify())(void)
{
  return nullsub_1;
}

uint64_t JUComponentShelfLayoutConfiguration.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v28 = a2;
  uint64_t v30 = a5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = sub_1B086A3B8();
  uint64_t v27 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v27 - v11;
  uint64_t v13 = sub_1B08698A8();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *v5;
  uint64_t v29 = a1;
  sub_1B08698B8();
  if (*(void *)(v17 + 16) && (unint64_t v18 = sub_1B07E4650((uint64_t)v16), (v19 & 1) != 0))
  {
    sub_1B07CBDEC(*(void *)(v17 + 56) + 32 * v18, (uint64_t)&v31);
  }
  else
  {
    long long v31 = 0u;
    long long v32 = 0u;
  }
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  if (*((void *)&v32 + 1))
  {
    sub_1B07BFE44(&v31, v33);
    sub_1B07CBDEC((uint64_t)v33, (uint64_t)&v31);
    int v20 = swift_dynamicCast();
    uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56);
    if (v20)
    {
      uint64_t v22 = *(void *)(AssociatedTypeWitness - 8);
      v21(v12, 0, 1, AssociatedTypeWitness);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v22 + 32))(v30, v12, AssociatedTypeWitness);
    }
    else
    {
      v21(v12, 1, 1, AssociatedTypeWitness);
      uint64_t v24 = (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v12, v10);
      MEMORY[0x1F4188790](v24);
      uint64_t v25 = *(void *)(v28 + 24);
      *(&v27 - 6) = *(void *)(v28 + 16);
      *(&v27 - 5) = a3;
      *(&v27 - 4) = v25;
      *(&v27 - 3) = a4;
      uint64_t v26 = v29;
      *(&v27 - 2) = (uint64_t)v33;
      *(&v27 - 1) = v26;
      sub_1B08699A8();
      (*(void (**)(uint64_t, uint64_t))(a4 + 16))(a3, a4);
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
    }
  }
  else
  {
    sub_1B07B86F8((uint64_t)&v31);
    return (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(a3, a4);
  }
}

uint64_t sub_1B07E4184()
{
  return 0;
}

uint64_t JUComponentShelfLayoutConfiguration.subscript.setter(uint64_t a1)
{
  sub_1B07E4BC4(a1);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8);

  return v3(a1, AssociatedTypeWitness);
}

void (*JUComponentShelfLayoutConfiguration.subscript.modify(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(uint64_t a1, char a2)
{
  uint64_t v11 = malloc(0x48uLL);
  *a1 = v11;
  void v11[3] = a5;
  v11[4] = v5;
  v11[1] = a3;
  long long v11[2] = a4;
  *uint64_t v11 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  void v11[5] = AssociatedTypeWitness;
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  v11[6] = v13;
  size_t v14 = *(void *)(v13 + 64);
  v11[7] = malloc(v14);
  uint64_t v15 = malloc(v14);
  v11[8] = v15;
  JUComponentShelfLayoutConfiguration.subscript.getter(a2, a3, a4, a5, (uint64_t)v15);
  return sub_1B07E446C;
}

void sub_1B07E446C(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 56);
  uint64_t v4 = *(void **)(*(void *)a1 + 64);
  uint64_t v5 = *(void *)(*(void *)a1 + 40);
  uint64_t v6 = *(void *)(*(void *)a1 + 48);
  if (a2)
  {
    (*(void (**)(void, void *, uint64_t))(v6 + 16))(*(void *)(*(void *)a1 + 56), v4, v5);
    sub_1B07E4BC4((uint64_t)v3);
    uint64_t v7 = *(void (**)(void *, uint64_t))(v6 + 8);
    v7(v3, v5);
    v7(v4, v5);
  }
  else
  {
    sub_1B07E4BC4(*(void *)(*(void *)a1 + 64));
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  free(v4);
  free(v3);

  free(v2);
}

id JUComponentShelfLayoutConfiguration.traitCollection.getter(uint64_t a1)
{
  id v2 = objc_msgSend(*(id *)(v1 + *(int *)(a1 + 48)), sel_traitCollection);

  return v2;
}

unint64_t sub_1B07E45BC(uint64_t a1)
{
  sub_1B0869D98();
  sub_1B086A958();
  sub_1B0869E38();
  uint64_t v2 = sub_1B086A998();
  swift_bridgeObjectRelease();

  return sub_1B07BFEE8(a1, v2);
}

unint64_t sub_1B07E4650(uint64_t a1)
{
  sub_1B08698A8();
  sub_1B07E6008(&qword_1E9B3B120);
  uint64_t v2 = sub_1B0869D08();

  return sub_1B07E4828(a1, v2);
}

uint64_t sub_1B07E46D4()
{
  return sub_1B07E4184();
}

unint64_t sub_1B07E46E4(uint64_t a1)
{
  uint64_t v2 = sub_1B086A378();

  return sub_1B07E49D4(a1, v2);
}

unint64_t sub_1B07E4728(uint64_t a1, uint64_t a2)
{
  sub_1B086A958();
  sub_1B0869E38();
  uint64_t v4 = sub_1B086A998();

  return sub_1B07E4AE0(a1, a2, v4);
}

unint64_t sub_1B07E47A4(uint64_t a1, uint64_t a2)
{
  sub_1B086A958();
  swift_bridgeObjectRetain();
  sub_1B0869E38();
  swift_bridgeObjectRelease();
  uint64_t v4 = sub_1B086A998();
  return sub_1B07E4AE0(a1, a2, v4);
}

unint64_t sub_1B07E4828(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = a1;
  uint64_t v4 = sub_1B08698A8();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = v2;
  uint64_t v8 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v9 = a2 & ~v8;
  uint64_t v18 = v2 + 64;
  if ((*(void *)(v2 + 64 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
  {
    uint64_t v10 = ~v8;
    uint64_t v13 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    uint64_t v12 = v5 + 16;
    uint64_t v11 = v13;
    uint64_t v14 = *(void *)(v12 + 56);
    do
    {
      v11(v7, *(void *)(v20 + 48) + v14 * v9, v4);
      sub_1B07E6008(&qword_1E9B3B128);
      char v15 = sub_1B0869D58();
      (*(void (**)(char *, uint64_t))(v12 - 8))(v7, v4);
      if (v15) {
        break;
      }
      unint64_t v9 = (v9 + 1) & v10;
    }
    while (((*(void *)(v18 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  return v9;
}

unint64_t sub_1B07E49D4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    sub_1B07D905C();
    id v6 = *(id *)(*(void *)(v2 + 48) + 8 * i);
    char v7 = sub_1B086A388();

    if ((v7 & 1) == 0)
    {
      uint64_t v8 = ~v4;
      for (unint64_t i = (i + 1) & v8; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v8)
      {
        id v9 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        char v10 = sub_1B086A388();

        if (v10) {
          break;
        }
      }
    }
  }
  return i;
}

unint64_t sub_1B07E4AE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    char v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_1B086A8A8() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_1B086A8A8() & 1) == 0);
    }
  }
  return v6;
}

uint64_t sub_1B07E4BC4(uint64_t a1)
{
  uint64_t v2 = sub_1B08698A8();
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B08698B8();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8[3] = AssociatedTypeWitness;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v8);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16))(boxed_opaque_existential_0, a1, AssociatedTypeWitness);
  return sub_1B080B25C((uint64_t)v8, (uint64_t)v4);
}

uint64_t dispatch thunk of static JUComponentShelfLayout.layoutSection(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t sub_1B07E4CD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 40);
}

void sub_1B07E4CE0()
{
  swift_checkMetadataState();
  if (v0 <= 0x3F)
  {
    sub_1B07E5F9C();
    if (v1 <= 0x3F)
    {
      sub_1B0869238();
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

uint64_t *sub_1B07E4E10(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v42 = *(void *)(a3 + 16);
  uint64_t v40 = *(void *)(v42 - 8);
  int v5 = *(_DWORD *)(v40 + 80);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v40 + 64);
  uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EB596240);
  uint64_t v8 = *(void *)(v39 - 8);
  int v9 = *(_DWORD *)(v8 + 80);
  uint64_t v10 = v9;
  uint64_t v11 = v7 + v9;
  uint64_t v12 = *(void *)(v8 + 64);
  uint64_t v13 = sub_1B0869238();
  BOOL v14 = a2;
  uint64_t v15 = *(void *)(v13 - 8);
  unint64_t v16 = *(_DWORD *)(v15 + 80);
  uint64_t v17 = v12 + v16;
  uint64_t v18 = (v17 + ((v7 + v10 + ((v6 + 8) & ~v6)) & ~v10)) & ~v16;
  uint64_t v19 = *(void *)(v15 + 64) + 7;
  unint64_t v20 = ((((v19 + v18) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  unint64_t v21 = v9 | v16 | v5;
  int v22 = (v9 | *(_DWORD *)(v15 + 80) | v5) & 0x100000;
  uint64_t v23 = *v14;
  *a1 = *v14;
  if (v21 > 7 || v22 != 0 || v20 > 0x18)
  {
    long long v31 = (uint64_t *)(v23 + ((v21 & 0xF8 ^ 0x1F8) & (v21 + 16)));
  }
  else
  {
    uint64_t v26 = a1;
    unint64_t v27 = ~(unint64_t)v9;
    uint64_t v37 = ~v16;
    uint64_t v38 = v26;
    uint64_t v28 = ((unint64_t)v26 + v6 + 8) & ~v6;
    uint64_t v29 = ((unint64_t)v14 + v6 + 8) & ~v6;
    uint64_t v36 = *(void (**)(void, void, void))(v40 + 16);
    uint64_t v41 = v13;
    swift_bridgeObjectRetain();
    v36(v28, v29, v42);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))((v28 + v11) & v27, (v29 + v11) & v27, v39);
    uint64_t v30 = (((v28 + v11) & ~v10) + v17) & v37;
    long long v31 = v38;
    unint64_t v32 = (((v29 + v11) & v27) + v17) & v37;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v15 + 16))(v30, v32, v41);
    CGRect v33 = (void *)((v19 + v30) & 0xFFFFFFFFFFFFFFF8);
    CGRect v34 = (void *)((v19 + v32) & 0xFFFFFFFFFFFFFFF8);
    *CGRect v33 = *v34;
    *(void *)(((unint64_t)v33 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v34 + 15) & 0xFFFFFFFFFFFFFFF8);
    swift_unknownObjectRetain();
  }
  swift_retain();
  return v31;
}

uint64_t sub_1B07E50D8(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = v4 + 8;
  unint64_t v6 = (a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  (*(void (**)(unint64_t))(v4 + 8))(v6);
  uint64_t v7 = *(void *)(v5 + 56);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EB596240);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = v9 + 8;
  unint64_t v11 = (v6 + v7 + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  (*(void (**)(unint64_t, uint64_t))(v9 + 8))(v11, v8);
  uint64_t v12 = *(void *)(v10 + 56);
  uint64_t v13 = sub_1B0869238();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v13 - 8) + 8))((v11 + v12 + *(unsigned __int8 *)(*(void *)(v13 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v13 - 8) + 80), v13);
  swift_unknownObjectRelease();

  return swift_release();
}

void *sub_1B07E5218(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  uint64_t v6 = *(void *)(v4 - 8) + 16;
  uint64_t v7 = *(unsigned __int8 *)(*(void *)(v4 - 8) + 80);
  uint64_t v8 = ((unint64_t)a1 + v7 + 8) & ~v7;
  uint64_t v9 = ((unint64_t)a2 + v7 + 8) & ~v7;
  swift_bridgeObjectRetain();
  v5(v8, v9, v4);
  uint64_t v10 = *(void *)(v6 + 48);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EB596240);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = v12 + 16;
  uint64_t v14 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v15 = v10 + v14;
  uint64_t v16 = (v10 + v14 + v8) & ~v14;
  uint64_t v17 = (v15 + v9) & ~v14;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v16, v17, v11);
  uint64_t v18 = *(void *)(v13 + 48);
  uint64_t v19 = sub_1B0869238();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = v20 + 16;
  uint64_t v22 = *(unsigned __int8 *)(v20 + 80);
  uint64_t v23 = (v18 + v22 + v16) & ~v22;
  uint64_t v24 = (v18 + v22 + v17) & ~v22;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v23, v24, v19);
  uint64_t v25 = *(void *)(v21 + 48) + 7;
  uint64_t v26 = (void *)((v25 + v23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v27 = (void *)((v25 + v24) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v26 = *v27;
  *(void *)(((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8);
  swift_unknownObjectRetain();
  swift_retain();
  return a1;
}

void *sub_1B07E5398(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v7 = v6 + 24;
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = ((unint64_t)a1 + v8 + 8) & ~v8;
  uint64_t v10 = ((unint64_t)a2 + v8 + 8) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v6 + 24))(v9, v10);
  uint64_t v11 = *(void *)(v7 + 40);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EB596240);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = v13 + 24;
  uint64_t v15 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = (v11 + v15 + v9) & ~v15;
  uint64_t v17 = (v11 + v15 + v10) & ~v15;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 24))(v16, v17, v12);
  uint64_t v18 = *(void *)(v14 + 40);
  uint64_t v19 = sub_1B0869238();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = v20 + 24;
  uint64_t v22 = *(unsigned __int8 *)(v20 + 80);
  uint64_t v23 = (v18 + v22 + v16) & ~v22;
  uint64_t v24 = (v18 + v22 + v17) & ~v22;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 24))(v23, v24, v19);
  uint64_t v25 = *(void *)(v21 + 40) + 7;
  uint64_t v26 = (void *)((v25 + v23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v27 = v25 + v24;
  unint64_t v28 = (v27 & 0xFFFFFFFFFFFFFFF8) + 15;
  *uint64_t v26 = *(void *)(v27 & 0xFFFFFFFFFFFFFFF8);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(v28 & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  return a1;
}

void *sub_1B07E553C(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4 + 32;
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = ((unint64_t)a1 + v6 + 8) & ~v6;
  uint64_t v8 = ((unint64_t)a2 + v6 + 8) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v7, v8);
  uint64_t v9 = *(void *)(v5 + 32);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EB596240);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = v11 + 32;
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = (v9 + v13 + v7) & ~v13;
  uint64_t v15 = (v9 + v13 + v8) & ~v13;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(v14, v15, v10);
  uint64_t v16 = *(void *)(v12 + 32);
  uint64_t v17 = sub_1B0869238();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = v18 + 32;
  uint64_t v20 = *(unsigned __int8 *)(v18 + 80);
  uint64_t v21 = (v16 + v20 + v14) & ~v20;
  uint64_t v22 = (v16 + v20 + v15) & ~v20;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 32))(v21, v22, v17);
  uint64_t v23 = *(void *)(v19 + 32) + 7;
  uint64_t v24 = (void *)((v23 + v21) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v25 = (void *)((v23 + v22) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v24 = *v25;
  *(void *)(((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

void *sub_1B07E56A8(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v7 = v6 + 40;
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = ((unint64_t)a1 + v8 + 8) & ~v8;
  uint64_t v10 = ((unint64_t)a2 + v8 + 8) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v6 + 40))(v9, v10);
  uint64_t v11 = *(void *)(v7 + 24);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EB596240);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = v13 + 40;
  uint64_t v15 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = (v11 + v15 + v9) & ~v15;
  uint64_t v17 = (v11 + v15 + v10) & ~v15;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 40))(v16, v17, v12);
  uint64_t v18 = *(void *)(v14 + 24);
  uint64_t v19 = sub_1B0869238();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = v20 + 40;
  uint64_t v22 = *(unsigned __int8 *)(v20 + 80);
  uint64_t v23 = (v18 + v22 + v16) & ~v22;
  uint64_t v24 = (v18 + v22 + v17) & ~v22;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 40))(v23, v24, v19);
  uint64_t v25 = *(void *)(v21 + 24) + 7;
  uint64_t v26 = (void *)((v25 + v23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v27 = (void *)((v25 + v24) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v26 = *v27;
  swift_unknownObjectRelease();
  *(void *)(((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t sub_1B07E5834(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v35 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v35 - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EB596240);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  if (v6 <= v9) {
    unsigned int v10 = *(_DWORD *)(v8 + 84);
  }
  else {
    unsigned int v10 = v6;
  }
  uint64_t v11 = sub_1B0869238();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v14 = *(void *)(v5 + 64);
  uint64_t v15 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v16 = *(unsigned __int8 *)(v12 + 80);
  if (v10 <= *(_DWORD *)(v12 + 84)) {
    unsigned int v17 = *(_DWORD *)(v12 + 84);
  }
  else {
    unsigned int v17 = v10;
  }
  if (v17 <= 0x7FFFFFFF) {
    unsigned int v18 = 0x7FFFFFFF;
  }
  else {
    unsigned int v18 = v17;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v19 = *(void *)(v8 + 64) + v16;
  if (v18 < a2)
  {
    unint64_t v20 = ((((*(void *)(*(void *)(v11 - 8) + 64) + ((v19 + ((v14 + v15 + ((v13 + 8) & ~v13)) & ~v15)) & ~v16) + 7) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + 8;
    if ((v20 & 0xFFFFFFF8) != 0) {
      unsigned int v21 = 2;
    }
    else {
      unsigned int v21 = a2 - v18 + 1;
    }
    if (v21 >= 0x10000) {
      unsigned int v22 = 4;
    }
    else {
      unsigned int v22 = 2;
    }
    if (v21 < 0x100) {
      unsigned int v22 = 1;
    }
    if (v21 >= 2) {
      uint64_t v23 = v22;
    }
    else {
      uint64_t v23 = 0;
    }
    switch(v23)
    {
      case 1:
        int v24 = *((unsigned __int8 *)a1 + v20);
        if (!*((unsigned char *)a1 + v20)) {
          break;
        }
        goto LABEL_28;
      case 2:
        int v24 = *(unsigned __int16 *)((char *)a1 + v20);
        if (*(_WORD *)((char *)a1 + v20)) {
          goto LABEL_28;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1B07E5BA0);
      case 4:
        int v24 = *(_DWORD *)((char *)a1 + v20);
        if (!v24) {
          break;
        }
LABEL_28:
        int v26 = v24 - 1;
        if ((v20 & 0xFFFFFFF8) != 0)
        {
          int v26 = 0;
          int v27 = *a1;
        }
        else
        {
          int v27 = 0;
        }
        return v18 + (v27 | v26) + 1;
      default:
        break;
    }
  }
  if ((v17 & 0x80000000) == 0)
  {
    uint64_t v28 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v28) = -1;
    }
    return (v28 + 1);
  }
  uint64_t v29 = ((unint64_t)a1 + v13 + 8) & ~v13;
  if (v6 == v18)
  {
    uint64_t v30 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
    uint64_t v31 = v6;
    uint64_t v32 = v35;
    return v30(v29, v31, v32);
  }
  uint64_t v29 = (v29 + v14 + v15) & ~v15;
  if (v9 == v18)
  {
    uint64_t v30 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    uint64_t v31 = v9;
    uint64_t v32 = v7;
    return v30(v29, v31, v32);
  }
  uint64_t v33 = (v19 + v29) & ~v16;
  CGRect v34 = *(uint64_t (**)(uint64_t))(v12 + 48);

  return v34(v33);
}

void sub_1B07E5BB4(_DWORD *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v38 = *(void *)(a4 + 16);
  uint64_t v7 = *(void *)(v38 - 8);
  uint64_t v39 = v7;
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EB596240);
  uint64_t v9 = *(void *)(v37 - 8);
  uint64_t v10 = *(unsigned int *)(v9 + 84);
  if (v8 <= v10) {
    unsigned int v11 = *(_DWORD *)(v9 + 84);
  }
  else {
    unsigned int v11 = v8;
  }
  uint64_t v12 = *(void *)(sub_1B0869238() - 8);
  uint64_t v13 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v14 = *(void *)(v7 + 64);
  uint64_t v15 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v16 = *(void *)(v9 + 64);
  uint64_t v17 = *(unsigned __int8 *)(v12 + 80);
  if (v11 <= *(_DWORD *)(v12 + 84)) {
    unsigned int v18 = *(_DWORD *)(v12 + 84);
  }
  else {
    unsigned int v18 = v11;
  }
  if (v18 <= 0x7FFFFFFF) {
    unsigned int v19 = 0x7FFFFFFF;
  }
  else {
    unsigned int v19 = v18;
  }
  uint64_t v20 = v16 + v17;
  size_t v21 = ((((*(void *)(v12 + 64) + ((v16 + v17 + ((v14 + v15 + ((v13 + 8) & ~v13)) & ~v15)) & ~v17) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  if (v19 >= a3)
  {
    int v24 = 0;
    int v25 = a2 - v19;
    if (a2 <= v19) {
      goto LABEL_23;
    }
LABEL_27:
    if (v21) {
      int v27 = 1;
    }
    else {
      int v27 = v25;
    }
    if (v21)
    {
      int v28 = ~v19 + a2;
      bzero(a1, v21);
      *a1 = v28;
    }
    switch(v24)
    {
      case 1:
        *((unsigned char *)a1 + v21) = v27;
        break;
      case 2:
        *(_WORD *)((char *)a1 + v21) = v27;
        break;
      case 3:
LABEL_57:
        __break(1u);
        JUMPOUT(0x1B07E5F74);
      case 4:
        *(_DWORD *)((char *)a1 + v21) = v27;
        break;
      default:
        return;
    }
    return;
  }
  if (((((*(_DWORD *)(v12 + 64)
         + ((v16
           + v17
           + ((v14 + v15 + ((v13 + 8) & ~v13)) & ~v15)) & ~v17)
         + 7) & 0xFFFFFFF8)
       + 15) & 0xFFFFFFF8) == 0xFFFFFFF8)
    unsigned int v22 = a3 - v19 + 1;
  else {
    unsigned int v22 = 2;
  }
  if (v22 >= 0x10000) {
    int v23 = 4;
  }
  else {
    int v23 = 2;
  }
  if (v22 < 0x100) {
    int v23 = 1;
  }
  if (v22 >= 2) {
    int v24 = v23;
  }
  else {
    int v24 = 0;
  }
  int v25 = a2 - v19;
  if (a2 > v19) {
    goto LABEL_27;
  }
LABEL_23:
  uint64_t v26 = ~v17;
  switch(v24)
  {
    case 1:
      *((unsigned char *)a1 + v21) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_36;
    case 2:
      *(_WORD *)((char *)a1 + v21) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_36;
    case 3:
      goto LABEL_57;
    case 4:
      *(_DWORD *)((char *)a1 + v21) = 0;
      goto LABEL_35;
    default:
LABEL_35:
      if (!a2) {
        return;
      }
LABEL_36:
      if ((v18 & 0x80000000) == 0)
      {
        if ((a2 & 0x80000000) != 0) {
          uint64_t v29 = a2 ^ 0x80000000;
        }
        else {
          uint64_t v29 = (a2 - 1);
        }
        *(void *)a1 = v29;
        return;
      }
      uint64_t v30 = ((unint64_t)a1 + v13 + 8) & ~v13;
      if (v8 == v19)
      {
        uint64_t v31 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v39 + 56);
        uint64_t v32 = a2;
        uint64_t v33 = v8;
        uint64_t v34 = v38;
LABEL_46:
        v31(v30, v32, v33, v34);
        return;
      }
      uint64_t v30 = (v30 + v14 + v15) & ~v15;
      if (v10 == v19)
      {
        uint64_t v31 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
        uint64_t v32 = a2;
        uint64_t v33 = v10;
        uint64_t v34 = v37;
        goto LABEL_46;
      }
      uint64_t v35 = (v20 + v30) & v26;
      uint64_t v36 = *(void (**)(uint64_t, uint64_t))(v12 + 56);
      v36(v35, a2);
      break;
  }
}

void sub_1B07E5F9C()
{
  if (!qword_1EB596250)
  {
    unint64_t v0 = sub_1B0869818();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB596250);
    }
  }
}

uint64_t dispatch thunk of static JUComponentShelfLayoutConfigurationKey.defaultValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t sub_1B07E6008(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1B08698A8();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1B07E604C()
{
  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

uint64_t LayoutAttributedTextViewPlaceholder.__allocating_init(attributedText:font:textAlignment:lineBreakMode:lineSpacing:numberOfLines:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = swift_allocObject();
  LayoutAttributedTextViewPlaceholder.init(attributedText:font:textAlignment:lineBreakMode:lineSpacing:numberOfLines:)(a1, a2, a3, a4, a5, a6);
  return v12;
}

uint64_t LayoutAttributedTextViewPlaceholder.init(attributedText:font:textAlignment:lineBreakMode:lineSpacing:numberOfLines:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + 96) = 0;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(unsigned char *)(v6 + 72) = 0;
  if (a1)
  {
    id v12 = a1;
  }
  else
  {
    id v13 = objc_allocWithZone(MEMORY[0x1E4F28B18]);
    uint64_t v14 = (void *)sub_1B0869D68();
    id v12 = objc_msgSend(v13, sel_initWithString_, v14);
  }
  *(void *)(v6 + 16) = v12;
  swift_beginAccess();
  uint64_t v15 = *(void **)(v6 + 96);
  *(void *)(v6 + 96) = a2;

  *(void *)(v6 + 24) = a3;
  *(void *)(v6 + 32) = a5;
  *(void *)(v6 + 80) = a6;
  *(void *)(v6 + 88) = a4;
  return v6;
}

id LayoutAttributedTextViewPlaceholder.attributedText.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void **)(v0 + 16);

  return v1;
}

void LayoutAttributedTextViewPlaceholder.attributedText.setter(uint64_t a1)
{
  swift_beginAccess();
  uint64_t v3 = *(void **)(v1 + 16);
  *(void *)(v1 + 16) = a1;
}

uint64_t (*LayoutAttributedTextViewPlaceholder.attributedText.modify())()
{
  return j__swift_endAccess;
}

uint64_t LayoutAttributedTextViewPlaceholder.textAlignment.getter()
{
  swift_beginAccess();
  return *(void *)(v0 + 24);
}

uint64_t LayoutAttributedTextViewPlaceholder.textAlignment.setter(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  *(void *)(v1 + 24) = a1;
  return result;
}

uint64_t (*LayoutAttributedTextViewPlaceholder.textAlignment.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t LayoutAttributedTextViewPlaceholder.lineSpacing.getter()
{
  swift_beginAccess();
  return *(void *)(v0 + 32);
}

uint64_t LayoutAttributedTextViewPlaceholder.lineSpacing.setter(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  *(void *)(v1 + 32) = a1;
  return result;
}

uint64_t (*LayoutAttributedTextViewPlaceholder.lineSpacing.modify())()
{
  return j_j__swift_endAccess;
}

void LayoutAttributedTextViewPlaceholder.measurements(fitting:in:)(void *a1, double a2, double a3)
{
  swift_beginAccess();
  uint64_t v7 = (void *)v3[2];
  swift_beginAccess();
  uint64_t v8 = (void *)v3[12];
  if (v8)
  {
    swift_beginAccess();
    uint64_t v9 = v3[3];
    swift_beginAccess();
    uint64_t v10 = v3[11];
    swift_beginAccess();
    uint64_t v11 = v3[4];
    swift_beginAccess();
    TextMeasurable.init(attributedText:font:textAlignment:lineBreakMode:lineSpacing:numberOfLines:isLanguageAware:)(v7, v8, v9, v10, v11, v3[10], 0, (uint64_t)&v13);
    id v12 = v13;
    TextMeasurable.measurements(fitting:in:)(a1, a2, a3);
  }
  else
  {
    __break(1u);
  }
}

uint64_t LayoutAttributedTextViewPlaceholder.description.getter()
{
  uint64_t v1 = v0;
  sub_1B086A5E8();
  uint64_t v2 = sub_1B086AA98();
  swift_bridgeObjectRelease();
  sub_1B0869E68();
  swift_beginAccess();
  id v3 = objc_msgSend(*(id *)(v0 + 16), sel_string);
  sub_1B0869D98();

  sub_1B0869E68();
  swift_bridgeObjectRelease();
  sub_1B0869E68();
  uint64_t result = swift_beginAccess();
  uint64_t v5 = *(void **)(v1 + 96);
  if (v5)
  {
    id v6 = v5;
    id v7 = objc_msgSend(v6, sel_description);
    sub_1B0869D98();

    sub_1B0869E68();
    swift_bridgeObjectRelease();
    sub_1B0869E68();
    return v2;
  }
  else
  {
    __break(1u);
  }
  return result;
}

BOOL LayoutAttributedTextViewPlaceholder.hasContent.getter()
{
  swift_beginAccess();
  id v1 = objc_msgSend(*(id *)(v0 + 16), sel_string);
  uint64_t v2 = sub_1B0869D98();
  unint64_t v4 = v3;

  swift_bridgeObjectRelease();
  uint64_t v5 = HIBYTE(v4) & 0xF;
  if ((v4 & 0x2000000000000000) == 0) {
    uint64_t v5 = v2 & 0xFFFFFFFFFFFFLL;
  }
  return v5 != 0;
}

double _s5JetUI35LayoutAttributedTextViewPlaceholderC12focusedFrameSo6CGRectVvg_0()
{
  swift_beginAccess();
  return *(double *)(v0 + 40);
}

uint64_t LayoutAttributedTextViewPlaceholder.frame.setter(double a1, double a2, double a3, double a4)
{
  uint64_t result = swift_beginAccess();
  v4[5] = a1;
  v4[6] = a2;
  v4[7] = a3;
  v4[8] = a4;
  return result;
}

uint64_t (*LayoutAttributedTextViewPlaceholder.frame.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t LayoutAttributedTextViewPlaceholder.isHidden.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 72);
}

uint64_t LayoutAttributedTextViewPlaceholder.isHidden.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 72) = a1;
  return result;
}

uint64_t (*LayoutAttributedTextViewPlaceholder.isHidden.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t LayoutAttributedTextViewPlaceholder.numberOfLines.getter()
{
  swift_beginAccess();
  return *(void *)(v0 + 80);
}

uint64_t LayoutAttributedTextViewPlaceholder.numberOfLines.setter(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  *(void *)(v1 + 80) = a1;
  return result;
}

uint64_t (*LayoutAttributedTextViewPlaceholder.numberOfLines.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t LayoutAttributedTextViewPlaceholder.lineBreakMode.getter()
{
  swift_beginAccess();
  return *(void *)(v0 + 88);
}

uint64_t LayoutAttributedTextViewPlaceholder.lineBreakMode.setter(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  *(void *)(v1 + 88) = a1;
  return result;
}

uint64_t (*LayoutAttributedTextViewPlaceholder.lineBreakMode.modify())()
{
  return j_j__swift_endAccess;
}

void *LayoutAttributedTextViewPlaceholder.font.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void **)(v0 + 96);
  id v2 = v1;
  return v1;
}

void LayoutAttributedTextViewPlaceholder.font.setter(uint64_t a1)
{
  swift_beginAccess();
  unint64_t v3 = *(void **)(v1 + 96);
  *(void *)(v1 + 96) = a1;
}

uint64_t (*LayoutAttributedTextViewPlaceholder.font.modify())()
{
  return j_j__swift_endAccess;
}

BOOL LayoutAttributedTextViewPlaceholder.isTextExtraTall.getter()
{
  swift_beginAccess();
  id v1 = objc_msgSend(*(id *)(v0 + 16), sel_string);
  sub_1B0869D98();

  if (qword_1EB5964B8 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1B0869078();
  __swift_project_value_buffer(v2, (uint64_t)qword_1EB596390);
  sub_1B07B862C();
  sub_1B086A408();
  BOOL v4 = (v3 & 1) == 0;
  swift_bridgeObjectRelease();
  return v4;
}

void LayoutAttributedTextViewPlaceholder.languageAwareOutsets.getter()
{
  swift_beginAccess();
  id v1 = objc_msgSend(*(id *)(v0 + 16), sel_string);
  sub_1B0869D98();

  swift_beginAccess();
  uint64_t v2 = *(void **)(v0 + 96);
  if (v2)
  {
    uint64_t v3 = qword_1EB5964B8;
    id v4 = v2;
    if (v3 != -1) {
      swift_once();
    }
    uint64_t v5 = sub_1B0869078();
    __swift_project_value_buffer(v5, (uint64_t)qword_1EB596390);
    sub_1B07B862C();
    sub_1B086A408();
    if ((v6 & 1) == 0) {
      UIFont.languageAwareOutsets.getter();
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

uint64_t LayoutAttributedTextViewPlaceholder.textLength.getter()
{
  swift_beginAccess();
  id v1 = objc_msgSend(*(id *)(v0 + 16), sel_string);
  sub_1B0869D98();

  uint64_t v2 = sub_1B0869E48();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t LayoutAttributedTextViewPlaceholder.deinit()
{
  return v0;
}

uint64_t LayoutAttributedTextViewPlaceholder.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t sub_1B07E6F80()
{
  uint64_t v1 = *v0;
  swift_beginAccess();
  return *(void *)(v1 + 80);
}

uint64_t sub_1B07E6FC0(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t result = swift_beginAccess();
  *(void *)(v3 + 80) = a1;
  return result;
}

uint64_t (*sub_1B07E7004())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1B07E705C()
{
  uint64_t v1 = *v0;
  swift_beginAccess();
  return *(void *)(v1 + 88);
}

uint64_t sub_1B07E709C(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t result = swift_beginAccess();
  *(void *)(v3 + 88) = a1;
  return result;
}

uint64_t (*sub_1B07E70E0())()
{
  return j_j__swift_endAccess;
}

void *sub_1B07E7138()
{
  uint64_t v1 = *v0;
  swift_beginAccess();
  uint64_t v2 = *(void **)(v1 + 96);
  id v3 = v2;
  return v2;
}

void sub_1B07E7180(uint64_t a1)
{
  uint64_t v3 = *v1;
  swift_beginAccess();
  id v4 = *(void **)(v3 + 96);
  *(void *)(v3 + 96) = a1;
}

uint64_t (*sub_1B07E71CC())()
{
  return j_j__swift_endAccess;
}

BOOL sub_1B07E7224()
{
  uint64_t v1 = *v0;
  swift_beginAccess();
  id v2 = objc_msgSend(*(id *)(v1 + 16), sel_string);
  sub_1B0869D98();

  if (qword_1EB5964B8 != -1) {
    swift_once();
  }
  uint64_t v3 = sub_1B0869078();
  __swift_project_value_buffer(v3, (uint64_t)qword_1EB596390);
  sub_1B07B862C();
  sub_1B086A408();
  BOOL v5 = (v4 & 1) == 0;
  swift_bridgeObjectRelease();
  return v5;
}

void sub_1B07E7320()
{
}

uint64_t sub_1B07E7344()
{
  uint64_t v1 = *v0;
  swift_beginAccess();
  id v2 = objc_msgSend(*(id *)(v1 + 16), sel_string);
  sub_1B0869D98();

  uint64_t v3 = sub_1B0869E48();
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_1B07E73D0()
{
  return LayoutAttributedTextViewPlaceholder.description.getter();
}

uint64_t sub_1B07E73F8(double a1, double a2, double a3, double a4)
{
  uint64_t v9 = *v4;
  uint64_t result = swift_beginAccess();
  v9[5] = a1;
  v9[6] = a2;
  v9[7] = a3;
  v9[8] = a4;
  return result;
}

uint64_t (*sub_1B07E745C())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1B07E74B4(char a1)
{
  uint64_t v3 = *v1;
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v3 + 72) = a1;
  return result;
}

uint64_t (*sub_1B07E74F8())()
{
  return j_j__swift_endAccess;
}

BOOL sub_1B07E7550()
{
  return LayoutAttributedTextViewPlaceholder.hasContent.getter();
}

double sub_1B07E7578()
{
  uint64_t v1 = *v0;
  swift_beginAccess();
  return *(double *)(v1 + 40);
}

void sub_1B07E75BC(void *a1, double a2, double a3)
{
}

uint64_t type metadata accessor for LayoutAttributedTextViewPlaceholder()
{
  return self;
}

uint64_t method lookup function for LayoutAttributedTextViewPlaceholder(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for LayoutAttributedTextViewPlaceholder);
}

uint64_t dispatch thunk of LayoutAttributedTextViewPlaceholder.__allocating_init(attributedText:font:textAlignment:lineBreakMode:lineSpacing:numberOfLines:)()
{
  return (*(uint64_t (**)(void))(v0 + 144))();
}

UIEdgeInsets __swiftcall CGFloat.languageAwareOutsets(compatibleWith:)(UITraitCollection compatibleWith)
{
  double v1 = *MEMORY[0x1E4FB2848];
  double v2 = *(double *)(MEMORY[0x1E4FB2848] + 8);
  double v3 = *(double *)(MEMORY[0x1E4FB2848] + 16);
  double v4 = *(double *)(MEMORY[0x1E4FB2848] + 24);
  result.right = v4;
  result.bottom = v3;
  result.left = v2;
  result.top = v1;
  return result;
}

double sub_1B07E764C()
{
  return *MEMORY[0x1E4FB2848];
}

double Float.rawValue(in:)(float a1)
{
  return a1;
}

UIEdgeInsets __swiftcall Float.languageAwareOutsets(compatibleWith:)(UITraitCollection compatibleWith)
{
  double v1 = *MEMORY[0x1E4FB2848];
  double v2 = *(double *)(MEMORY[0x1E4FB2848] + 8);
  double v3 = *(double *)(MEMORY[0x1E4FB2848] + 16);
  double v4 = *(double *)(MEMORY[0x1E4FB2848] + 24);
  result.right = v4;
  result.bottom = v3;
  result.left = v2;
  result.top = v1;
  return result;
}

double JUMeasurements.toNearestPixel.getter(double a1)
{
  return ceil(a1);
}

float64x2_t Baselines.toNearestPixel.getter@<Q0>(float64x2_t *a1@<X8>)
{
  float64x2_t result = vrndmq_f64(*v1);
  *a1 = result;
  return result;
}

double CGPoint.toNearestPixel.getter(double a1)
{
  return floor(a1);
}

double CGSize.toNearestPixel.getter(double a1)
{
  return ceil(a1);
}

double CGRect.toNearestPixel.getter(double a1)
{
  return floor(a1);
}

float64x2_t LayoutRect.toNearestPixel.getter@<Q0>(float64x2_t *a1@<X8>)
{
  float64x2_t v2 = vrndpq_f64(v1[1]);
  *a1 = vrndmq_f64(*v1);
  a1[1] = v2;
  float64x2_t result = vrndmq_f64(v1[2]);
  a1[2] = result;
  return result;
}

uint64_t dispatch thunk of FlowActionFactory.makeViewController(toSatisfy:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

double ZStack.EdgePosition.init(_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_1B07E7774(a1, (uint64_t)&v6);
  uint64_t v4 = v7;
  sub_1B07E77D0(a1);
  if (v4)
  {
    sub_1B07BA8FC(&v6, a2);
  }
  else
  {
    *(void *)(a2 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

uint64_t sub_1B07E7774(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1B07E77D0(uint64_t a1)
{
  return a1;
}

double ZStack.EdgePosition.base.getter@<D0>(uint64_t a1@<X8>)
{
  sub_1B07E787C(v1, (uint64_t)&v4);
  if (v5)
  {
    sub_1B07BA8FC(&v4, a1);
  }
  else
  {
    *(void *)(a1 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t sub_1B07E787C(long long *a1, uint64_t a2)
{
  unint64_t v3 = *((void *)a1 + 3);
  if (v3 < 0xFFFFFFFF)
  {
    long long v5 = *a1;
    long long v6 = a1[1];
    *(void *)(a2 + 32) = *((void *)a1 + 4);
    *(_OWORD *)a2 = v5;
    *(_OWORD *)(a2 + 16) = v6;
  }
  else
  {
    uint64_t v4 = *((void *)a1 + 4);
    *(void *)(a2 + 24) = v3;
    *(void *)(a2 + 32) = v4;
    (**(void (***)(uint64_t))(v3 - 8))(a2);
  }
  return a2;
}

double ZStack.Properties.init()@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t ZStack.Properties.init(_:)@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  a2[5] = 0u;
  uint64_t v4 = (uint64_t)(a2 + 5);
  a2[8] = 0u;
  a2[9] = 0u;
  uint64_t v5 = (uint64_t)a2 + 40;
  a2[6] = 0u;
  a2[7] = 0u;
  a2[3] = 0u;
  a2[4] = 0u;
  a2[1] = 0u;
  a2[2] = 0u;
  *a2 = 0u;
  sub_1B07E7774(a1, (uint64_t)v14);
  sub_1B07E7774((uint64_t)v14, (uint64_t)&v15);
  uint64_t v6 = v16;
  sub_1B07E77D0((uint64_t)v14);
  if (v6)
  {
    sub_1B07BA8FC(&v15, (uint64_t)&v11);
  }
  else
  {
    uint64_t v13 = 0;
    long long v11 = 0u;
    long long v12 = 0u;
  }
  sub_1B07BA8FC(&v11, (uint64_t)&v15);
  sub_1B07E7AF8(&v15, (uint64_t)a2);
  sub_1B07E7774(a1 + 40, (uint64_t)v14);
  sub_1B07E7774((uint64_t)v14, (uint64_t)&v15);
  uint64_t v7 = v16;
  sub_1B07E77D0((uint64_t)v14);
  if (v7)
  {
    sub_1B07BA8FC(&v15, (uint64_t)&v11);
  }
  else
  {
    uint64_t v13 = 0;
    long long v11 = 0u;
    long long v12 = 0u;
  }
  sub_1B07BA8FC(&v11, (uint64_t)&v15);
  sub_1B07E7AF8(&v15, v5);
  sub_1B07E7774(a1 + 80, (uint64_t)v14);
  sub_1B07E7774((uint64_t)v14, (uint64_t)&v15);
  uint64_t v8 = v16;
  sub_1B07E77D0((uint64_t)v14);
  if (v8)
  {
    sub_1B07BA8FC(&v15, (uint64_t)&v11);
  }
  else
  {
    uint64_t v13 = 0;
    long long v11 = 0u;
    long long v12 = 0u;
  }
  sub_1B07BA8FC(&v11, (uint64_t)&v15);
  sub_1B07E7AF8(&v15, v4);
  sub_1B07E7774(a1 + 120, (uint64_t)v14);
  sub_1B07E7774((uint64_t)v14, (uint64_t)&v15);
  uint64_t v9 = v16;
  sub_1B07E77D0((uint64_t)v14);
  if (v9)
  {
    sub_1B07BA8FC(&v15, (uint64_t)&v11);
  }
  else
  {
    uint64_t v13 = 0;
    long long v11 = 0u;
    long long v12 = 0u;
  }
  sub_1B07BA8FC(&v11, (uint64_t)&v15);
  sub_1B07E7AF8(&v15, (uint64_t)a2 + 120);
  return sub_1B07E7B60(a1);
}

uint64_t ZStack.Properties.topEdge.setter(long long *a1)
{
  return sub_1B07E7AF8(a1, v1);
}

uint64_t sub_1B07E7AF8(long long *a1, uint64_t a2)
{
  if (*(void *)(a2 + 24) >= 0xFFFFFFFFuLL) {
    __swift_destroy_boxed_opaque_existential_1(a2);
  }
  long long v4 = *a1;
  long long v5 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v4;
  *(_OWORD *)(a2 + 16) = v5;
  return a2;
}

uint64_t ZStack.Properties.leadingEdge.setter(long long *a1)
{
  return sub_1B07E7AF8(a1, v1 + 40);
}

uint64_t ZStack.Properties.bottomEdge.setter(long long *a1)
{
  return sub_1B07E7AF8(a1, v1 + 80);
}

uint64_t ZStack.Properties.trailingEdge.setter(long long *a1)
{
  return sub_1B07E7AF8(a1, v1 + 120);
}

uint64_t sub_1B07E7B60(uint64_t a1)
{
  return a1;
}

uint64_t ZStack.Properties.topEdge.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1B07E787C(v1, a1);
}

double (*ZStack.Properties.topEdge.modify())(void)
{
  return nullsub_1;
}

uint64_t ZStack.Properties.leadingEdge.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1B07E787C((long long *)(v1 + 40), a1);
}

double (*ZStack.Properties.leadingEdge.modify())(void)
{
  return nullsub_1;
}

uint64_t ZStack.Properties.bottomEdge.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1B07E787C((long long *)(v1 + 80), a1);
}

double (*ZStack.Properties.bottomEdge.modify())(void)
{
  return nullsub_1;
}

uint64_t ZStack.Properties.trailingEdge.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1B07E787C((long long *)(v1 + 120), a1);
}

double (*ZStack.Properties.trailingEdge.modify())(void)
{
  return nullsub_1;
}

uint64_t ZStack.Properties.base.getter@<X0>(uint64_t a1@<X8>)
{
  *(_OWORD *)(a1 + 80) = 0u;
  uint64_t v3 = a1 + 80;
  *(_WORD *)(a1 + 160) = 0;
  uint64_t v4 = a1 + 40;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  sub_1B07E787C(v1, (uint64_t)v11);
  sub_1B07E787C(v11, (uint64_t)&v6);
  if (v7)
  {
    sub_1B07BA8FC(&v6, (uint64_t)&v8);
  }
  else
  {
    uint64_t v10 = 0;
    long long v8 = 0u;
    long long v9 = 0u;
  }
  sub_1B07E7E00((uint64_t)v11);
  sub_1B07E7E3C((uint64_t)&v8, a1);
  sub_1B07E787C((long long *)((char *)v1 + 40), (uint64_t)v11);
  sub_1B07E787C(v11, (uint64_t)&v6);
  if (v7)
  {
    sub_1B07BA8FC(&v6, (uint64_t)&v8);
  }
  else
  {
    uint64_t v10 = 0;
    long long v8 = 0u;
    long long v9 = 0u;
  }
  sub_1B07E7E00((uint64_t)v11);
  sub_1B07E7E3C((uint64_t)&v8, v4);
  sub_1B07E787C(v1 + 5, (uint64_t)v11);
  sub_1B07E787C(v11, (uint64_t)&v6);
  if (v7)
  {
    sub_1B07BA8FC(&v6, (uint64_t)&v8);
  }
  else
  {
    uint64_t v10 = 0;
    long long v8 = 0u;
    long long v9 = 0u;
  }
  sub_1B07E7E00((uint64_t)v11);
  sub_1B07E7E3C((uint64_t)&v8, v3);
  sub_1B07E787C((long long *)((char *)v1 + 120), (uint64_t)v11);
  sub_1B07E787C(v11, (uint64_t)&v6);
  if (v7)
  {
    sub_1B07BA8FC(&v6, (uint64_t)&v8);
  }
  else
  {
    uint64_t v10 = 0;
    long long v8 = 0u;
    long long v9 = 0u;
  }
  sub_1B07E7E00((uint64_t)v11);
  return sub_1B07E7E3C((uint64_t)&v8, a1 + 120);
}

uint64_t sub_1B07E7E00(uint64_t a1)
{
  if (*(void *)(a1 + 24) >= 0xFFFFFFFFuLL) {
    __swift_destroy_boxed_opaque_existential_1(a1);
  }
  return a1;
}

uint64_t sub_1B07E7E3C(uint64_t a1, uint64_t a2)
{
  return a2;
}

void ZStack.Placements.union.getter(CGFloat *a1@<X8>)
{
}

double ZStack.Placements.measure.getter()
{
  uint64_t v1 = *((void *)v0 + 6);
  uint64_t v2 = *((void *)v0 + 11);
  char v3 = *((unsigned char *)v0 + 96);
  long long v4 = v0[1];
  long long v7 = *v0;
  long long v8 = v4;
  long long v9 = v0[2];
  uint64_t v10 = v1;
  long long v11 = *(long long *)((char *)v0 + 56);
  long long v12 = *(long long *)((char *)v0 + 72);
  uint64_t v13 = v2;
  char v14 = v3;
  DisjointStack.Placements.union.getter(v6);
  return ceil(v6[2]);
}

void sub_1B07E7F80(CGFloat *a1@<X8>)
{
}

__n128 sub_1B07E7FE8@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 48);
  uint64_t v3 = *(void *)(v1 + 88);
  char v4 = *(unsigned char *)(v1 + 96);
  long long v5 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v1 + 32);
  *(void *)(a1 + 48) = v2;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(v1 + 56);
  __n128 result = *(__n128 *)(v1 + 72);
  *(__n128 *)(a1 + 72) = result;
  *(void *)(a1 + 88) = v3;
  *(unsigned char *)(a1 + 96) = v4;
  return result;
}

uint64_t sub_1B07E8024()
{
  long long v1 = *(_OWORD *)(v0 + 80);
  v7[4] = *(_OWORD *)(v0 + 64);
  v7[5] = v1;
  char v8 = *(unsigned char *)(v0 + 96);
  long long v2 = *(_OWORD *)(v0 + 16);
  v7[0] = *(_OWORD *)v0;
  v7[1] = v2;
  long long v3 = *(_OWORD *)(v0 + 48);
  _OWORD v7[2] = *(_OWORD *)(v0 + 32);
  v7[3] = v3;
  sub_1B084F770((uint64_t)v7);
  uint64_t v5 = v4;
  sub_1B07E9C40((uint64_t)v7);
  return v5;
}

uint64_t sub_1B07E8080(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B084C998(a1, a2, a3);
}

uint64_t sub_1B07E80CC(uint64_t a1, void (*a2)(_OWORD *))
{
  long long v4 = *(_OWORD *)(a1 + 144);
  v10[8] = *(_OWORD *)(a1 + 128);
  v10[9] = v4;
  __int16 v11 = *(_WORD *)(a1 + 160);
  long long v5 = *(_OWORD *)(a1 + 80);
  v10[4] = *(_OWORD *)(a1 + 64);
  v10[5] = v5;
  long long v6 = *(_OWORD *)(a1 + 112);
  v10[6] = *(_OWORD *)(a1 + 96);
  v10[7] = v6;
  long long v7 = *(_OWORD *)(a1 + 16);
  v10[0] = *(_OWORD *)a1;
  v10[1] = v7;
  long long v8 = *(_OWORD *)(a1 + 48);
  v10[2] = *(_OWORD *)(a1 + 32);
  void v10[3] = v8;
  ZStack.Properties.init(_:)((uint64_t)v10, v12);
  a2(v12);
  ZStack.Properties.base.getter(a1);
  return sub_1B07E9C84((uint64_t)v12);
}

uint64_t ZStack.init(with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  if (a1)
  {
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = a1;
    *(void *)(v6 + 24) = a2;
    long long v7 = sub_1B07E87CC;
  }
  else
  {
    long long v7 = 0;
  }
  __int16 v15 = 0;
  memset(v14, 0, sizeof(v14));
  if (a1)
  {
    sub_1B07E8728(a1);
    v7((uint64_t)v14);
  }
  else
  {
    sub_1B07E8728(0);
  }
  sub_1B07E8738((uint64_t)v14, (uint64_t)v16);
  sub_1B07BDB64((uint64_t)v7);
  sub_1B07E7B60((uint64_t)v14);
  *((void *)&v17 + 1) = MEMORY[0x1E4FBC860];
  long long v8 = v16[9];
  a3[8] = v16[8];
  a3[9] = v8;
  a3[10] = v17;
  long long v9 = v16[5];
  a3[4] = v16[4];
  a3[5] = v9;
  long long v10 = v16[7];
  a3[6] = v16[6];
  a3[7] = v10;
  long long v11 = v16[1];
  *a3 = v16[0];
  a3[1] = v11;
  long long v12 = v16[3];
  a3[2] = v16[2];
  a3[3] = v12;
  return sub_1B07BDB64(a1);
}

uint64_t ZStack.add(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + 16) = a2;
    *(void *)(v7 + 24) = a3;
    sub_1B07E8738(v3, (uint64_t)v26);
    sub_1B07E8728(a2);
    sub_1B07E80CC((uint64_t)v26, *(void (**)(_OWORD *))(v7 + 16));
    long long v8 = sub_1B07E9CBC;
  }
  else
  {
    sub_1B07E8738(v3, (uint64_t)v26);
    sub_1B07E8728(0);
    long long v8 = 0;
  }
  sub_1B07BBD78(a1, (uint64_t)v23);
  sub_1B07E8738((uint64_t)v26, (uint64_t)v24 + 8);
  long long v9 = *(void **)(v3 + 168);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    long long v9 = sub_1B07CED1C(0, v9[2] + 1, 1, v9);
  }
  unint64_t v11 = v9[2];
  unint64_t v10 = v9[3];
  if (v11 >= v10 >> 1) {
    long long v9 = sub_1B07CED1C((void *)(v10 > 1), v11 + 1, 1, v9);
  }
  long long v9[2] = v11 + 1;
  long long v12 = &v9[26 * v11];
  _OWORD v12[2] = v23[0];
  long long v13 = v23[1];
  long long v14 = v24[0];
  long long v15 = v24[2];
  _OWORD v12[5] = v24[1];
  v12[6] = v15;
  void v12[3] = v13;
  v12[4] = v14;
  long long v16 = v24[3];
  long long v17 = v24[4];
  long long v18 = v24[6];
  v12[9] = v24[5];
  _OWORD v12[10] = v18;
  v12[7] = v16;
  _OWORD v12[8] = v17;
  long long v19 = v24[7];
  long long v20 = v24[8];
  long long v21 = v25[0];
  *(_OWORD *)((char *)v12 + 218) = *(_OWORD *)((char *)v25 + 10);
  v12[12] = v20;
  v12[13] = v21;
  v12[11] = v19;
  *(void *)(v3 + 168) = v9;
  sub_1B07E7B60((uint64_t)v26);
  return sub_1B07BDB64((uint64_t)v8);
}

uint64_t ZStack.adding(_:with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_1B07E87D4(v4, a4);
  return ZStack.add(_:with:)(a1, a2, a3);
}

uint64_t ZStack.insert(_:at:with:)(uint64_t a1, int64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = a3;
    *(void *)(v9 + 24) = a4;
    sub_1B07E8738(v4, (uint64_t)v17);
    sub_1B07E8728(a3);
    sub_1B07E80CC((uint64_t)v17, *(void (**)(_OWORD *))(v9 + 16));
    unint64_t v10 = sub_1B07E9CBC;
  }
  else
  {
    sub_1B07E8738(v4, (uint64_t)v17);
    sub_1B07E8728(0);
    unint64_t v10 = 0;
  }
  sub_1B07BBD78(a1, (uint64_t)v14);
  uint64_t result = sub_1B07E8738((uint64_t)v17, (uint64_t)v15 + 8);
  if (*(void *)(*(void *)(v4 + 168) + 16) < a2)
  {
    __break(1u);
  }
  else if ((a2 & 0x8000000000000000) == 0)
  {
    _OWORD v12[10] = v15[8];
    v13[0] = v16[0];
    *(_OWORD *)((char *)v13 + 10) = *(_OWORD *)((char *)v16 + 10);
    v12[6] = v15[4];
    v12[7] = v15[5];
    _OWORD v12[8] = v15[6];
    v12[9] = v15[7];
    _OWORD v12[2] = v15[0];
    void v12[3] = v15[1];
    v12[4] = v15[2];
    _OWORD v12[5] = v15[3];
    v12[0] = v14[0];
    v12[1] = v14[1];
    sub_1B07D054C(a2, a2, (uint64_t)v12);
    sub_1B07E7B60((uint64_t)v17);
    return sub_1B07BDB64((uint64_t)v10);
  }
  __break(1u);
  return result;
}

uint64_t ZStack.inserting(_:at:with:)@<X0>(uint64_t a1@<X0>, int64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  sub_1B07E87D4(v5, a5);
  return ZStack.insert(_:at:with:)(a1, a2, a3, a4);
}

void __swiftcall ZStack.layout(relativeTo:with:)(JetUI::ZStack::Placements *__return_ptr retstr, __C::CGRect relativeTo, UITraitCollection with)
{
  CGFloat height = relativeTo.size.height;
  CGFloat width = relativeTo.size.width;
  CGFloat y = relativeTo.origin.y;
  CGFloat x = relativeTo.origin.x;
  uint64_t v9 = *(void **)(v3 + 168);
  uint64_t v10 = v9[2];
  unint64_t v11 = with.super.isa;
  swift_bridgeObjectRetain();
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3A548);
    long long v12 = (void *)sub_1B0869FF8();
    _OWORD v12[2] = v10;
    uint64_t v13 = 4;
    do
    {
      long long v14 = &v12[v13];
      *(_OWORD *)long long v14 = 0uLL;
      *((_OWORD *)v14 + 1) = 0uLL;
      *((unsigned char *)v14 + 32) = 1;
      v13 += 5;
      --v10;
    }
    while (v10);
  }
  else
  {
    long long v12 = (void *)MEMORY[0x1E4FBC860];
  }
  retstr->base.boundingRect.origin.CGFloat x = x;
  retstr->base.boundingRect.origin.CGFloat y = y;
  retstr->base.boundingRect.size.CGFloat width = width;
  retstr->base.boundingRect.size.CGFloat height = height;
  retstr->base.traits.super.Class isa = v11;
  retstr->base.children._rawValue = v9;
  retstr->base.measurements._rawValue = v12;
  *(_OWORD *)&retstr->base.walkingChildIndeCGFloat x = 0u;
  *(_OWORD *)&retstr->base.$__lazy_storage_$_contentBoundingRect.value.origin.CGFloat y = 0u;
  retstr->base.$__lazy_storage_$_contentBoundingRect.value.size.CGFloat height = 0.0;
  retstr->base.$__lazy_storage_$_contentBoundingRect.is_nil = 1;
}

uint64_t sub_1B07E8728(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_1B07E8738(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1B07E8794()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1B07E87CC(uint64_t a1)
{
  return sub_1B07E80CC(a1, *(void (**)(_OWORD *))(v1 + 16));
}

uint64_t sub_1B07E87D4(uint64_t a1, uint64_t a2)
{
  return a2;
}

unint64_t sub_1B07E880C(uint64_t a1)
{
  unint64_t result = sub_1B07E8834();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1B07E8834()
{
  unint64_t result = qword_1E9B3B130;
  if (!qword_1E9B3B130)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3B130);
  }
  return result;
}

unint64_t sub_1B07E888C()
{
  unint64_t result = qword_1E9B3B138;
  if (!qword_1E9B3B138)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3B138);
  }
  return result;
}

unint64_t sub_1B07E88E4()
{
  unint64_t result = qword_1E9B3B140;
  if (!qword_1E9B3B140)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3B140);
  }
  return result;
}

uint64_t destroy for DisjointStack(void *a1)
{
  if (a1[3]) {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  if (a1[8]) {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 5));
  }
  if (a1[13]) {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 10));
  }
  if (a1[18]) {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 15));
  }

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for DisjointStack(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    uint64_t v5 = *(void *)(a2 + 32);
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + 32) = v5;
    (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1, a2);
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
  }
  uint64_t v7 = (_OWORD *)(a1 + 40);
  long long v8 = (_OWORD *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 64);
  if (v9)
  {
    uint64_t v10 = *(void *)(a2 + 72);
    *(void *)(a1 + 64) = v9;
    *(void *)(a1 + 72) = v10;
    (**(void (***)(_OWORD *, _OWORD *))(v9 - 8))(v7, v8);
  }
  else
  {
    long long v11 = *(_OWORD *)(a2 + 56);
    _OWORD *v7 = *v8;
    *(_OWORD *)(a1 + 56) = v11;
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
  }
  long long v12 = (_OWORD *)(a1 + 80);
  uint64_t v13 = (_OWORD *)(a2 + 80);
  uint64_t v14 = *(void *)(a2 + 104);
  if (v14)
  {
    uint64_t v15 = *(void *)(a2 + 112);
    *(void *)(a1 + 104) = v14;
    *(void *)(a1 + 112) = v15;
    (**(void (***)(_OWORD *, _OWORD *))(v14 - 8))(v12, v13);
  }
  else
  {
    long long v16 = *(_OWORD *)(a2 + 96);
    *long long v12 = *v13;
    *(_OWORD *)(a1 + 96) = v16;
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
  }
  long long v17 = (_OWORD *)(a1 + 120);
  long long v18 = (_OWORD *)(a2 + 120);
  uint64_t v19 = *(void *)(a2 + 144);
  if (v19)
  {
    uint64_t v20 = *(void *)(a2 + 152);
    *(void *)(a1 + 144) = v19;
    *(void *)(a1 + 152) = v20;
    (**(void (***)(_OWORD *, _OWORD *))(v19 - 8))(v17, v18);
  }
  else
  {
    long long v21 = *(_OWORD *)(a2 + 136);
    *long long v17 = *v18;
    *(_OWORD *)(a1 + 136) = v21;
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
  }
  *(_WORD *)(a1 + 160) = *(_WORD *)(a2 + 160);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ZStack(uint64_t a1, long long *a2)
{
  uint64_t v4 = *((void *)a2 + 3);
  if (*(void *)(a1 + 24))
  {
    if (v4)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
    }
    else
    {
      sub_1B07E8DE4(a1);
      uint64_t v5 = *((void *)a2 + 4);
      long long v6 = a2[1];
      *(_OWORD *)a1 = *a2;
      *(_OWORD *)(a1 + 16) = v6;
      *(void *)(a1 + 32) = v5;
    }
  }
  else if (v4)
  {
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + 32) = *((void *)a2 + 4);
    (**(void (***)(uint64_t, long long *))(v4 - 8))(a1, a2);
  }
  else
  {
    long long v7 = *a2;
    long long v8 = a2[1];
    *(void *)(a1 + 32) = *((void *)a2 + 4);
    *(_OWORD *)a1 = v7;
    *(_OWORD *)(a1 + 16) = v8;
  }
  uint64_t v9 = (_OWORD *)(a1 + 40);
  uint64_t v10 = (long long *)((char *)a2 + 40);
  uint64_t v11 = *((void *)a2 + 8);
  if (*(void *)(a1 + 64))
  {
    if (v11)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 40), (uint64_t *)a2 + 5);
    }
    else
    {
      sub_1B07E8DE4(a1 + 40);
      uint64_t v12 = *((void *)a2 + 9);
      long long v13 = *(long long *)((char *)a2 + 56);
      *uint64_t v9 = *v10;
      *(_OWORD *)(a1 + 56) = v13;
      *(void *)(a1 + 72) = v12;
    }
  }
  else if (v11)
  {
    *(void *)(a1 + 64) = v11;
    *(void *)(a1 + 72) = *((void *)a2 + 9);
    (**(void (***)(uint64_t, uint64_t))(v11 - 8))(a1 + 40, (uint64_t)a2 + 40);
  }
  else
  {
    long long v14 = *v10;
    long long v15 = *(long long *)((char *)a2 + 56);
    *(void *)(a1 + 72) = *((void *)a2 + 9);
    *uint64_t v9 = v14;
    *(_OWORD *)(a1 + 56) = v15;
  }
  long long v16 = (_OWORD *)(a1 + 80);
  long long v17 = a2 + 5;
  uint64_t v18 = *((void *)a2 + 13);
  if (*(void *)(a1 + 104))
  {
    if (v18)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 80), (uint64_t *)a2 + 10);
    }
    else
    {
      sub_1B07E8DE4(a1 + 80);
      uint64_t v19 = *((void *)a2 + 14);
      long long v20 = a2[6];
      _OWORD *v16 = *v17;
      *(_OWORD *)(a1 + 96) = v20;
      *(void *)(a1 + 112) = v19;
    }
  }
  else if (v18)
  {
    *(void *)(a1 + 104) = v18;
    *(void *)(a1 + 112) = *((void *)a2 + 14);
    (**(void (***)(uint64_t, uint64_t))(v18 - 8))(a1 + 80, (uint64_t)(a2 + 5));
  }
  else
  {
    long long v21 = *v17;
    long long v22 = a2[6];
    *(void *)(a1 + 112) = *((void *)a2 + 14);
    _OWORD *v16 = v21;
    *(_OWORD *)(a1 + 96) = v22;
  }
  int v23 = (_OWORD *)(a1 + 120);
  int v24 = (long long *)((char *)a2 + 120);
  uint64_t v25 = *((void *)a2 + 18);
  if (*(void *)(a1 + 144))
  {
    if (v25)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 120), (uint64_t *)a2 + 15);
    }
    else
    {
      sub_1B07E8DE4(a1 + 120);
      uint64_t v26 = *((void *)a2 + 19);
      long long v27 = *(long long *)((char *)a2 + 136);
      *int v23 = *v24;
      *(_OWORD *)(a1 + 136) = v27;
      *(void *)(a1 + 152) = v26;
    }
  }
  else if (v25)
  {
    *(void *)(a1 + 144) = v25;
    *(void *)(a1 + 152) = *((void *)a2 + 19);
    (**(void (***)(uint64_t, uint64_t))(v25 - 8))(a1 + 120, (uint64_t)a2 + 120);
  }
  else
  {
    long long v28 = *v24;
    long long v29 = *(long long *)((char *)a2 + 136);
    *(void *)(a1 + 152) = *((void *)a2 + 19);
    *int v23 = v28;
    *(_OWORD *)(a1 + 136) = v29;
  }
  *(unsigned char *)(a1 + 160) = *((unsigned char *)a2 + 160);
  *(unsigned char *)(a1 + 161) = *((unsigned char *)a2 + 161);
  *(void *)(a1 + 168) = *((void *)a2 + 21);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1B07E8DE4(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3B148);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

__n128 __swift_memcpy176_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  long long v4 = a2[3];
  long long v5 = a2[4];
  long long v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  __n128 result = (__n128)a2[7];
  long long v8 = a2[8];
  long long v9 = a2[10];
  *(_OWORD *)(a1 + 144) = a2[9];
  *(_OWORD *)(a1 + 160) = v9;
  *(__n128 *)(a1 + 112) = result;
  *(_OWORD *)(a1 + 128) = v8;
  return result;
}

uint64_t assignWithTake for ZStack(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24))
  {
    if (*(void *)(a2 + 24)) {
      __swift_destroy_boxed_opaque_existential_1(a1);
    }
    else {
      sub_1B07E8DE4(a1);
    }
  }
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  if (*(void *)(a1 + 64))
  {
    if (*(void *)(a2 + 64)) {
      __swift_destroy_boxed_opaque_existential_1(a1 + 40);
    }
    else {
      sub_1B07E8DE4(a1 + 40);
    }
  }
  long long v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = v5;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  if (*(void *)(a1 + 104))
  {
    if (*(void *)(a2 + 104)) {
      __swift_destroy_boxed_opaque_existential_1(a1 + 80);
    }
    else {
      sub_1B07E8DE4(a1 + 80);
    }
  }
  long long v6 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v6;
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  if (*(void *)(a1 + 144))
  {
    if (*(void *)(a2 + 144)) {
      __swift_destroy_boxed_opaque_existential_1(a1 + 120);
    }
    else {
      sub_1B07E8DE4(a1 + 120);
    }
  }
  long long v7 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = v7;
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  *(unsigned char *)(a1 + 161) = *(unsigned char *)(a2 + 161);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DisjointStack(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 176)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 168);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DisjointStack(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 168) = 0;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 176) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 168) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 176) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ZStack()
{
  return &type metadata for ZStack;
}

uint64_t destroy for DisjointStack.EdgePosition(uint64_t a1)
{
  if (*(void *)(a1 + 24) >= 0xFFFFFFFFuLL) {
    return __swift_destroy_boxed_opaque_existential_1(a1);
  }
  return a1;
}

uint64_t initializeWithCopy for DisjointStack.EdgePosition(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 24);
  if (v3 < 0xFFFFFFFF)
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
  }
  else
  {
    uint64_t v4 = *(void *)(a2 + 32);
    *(void *)(a1 + 24) = v3;
    *(void *)(a1 + 32) = v4;
    (**(void (***)(uint64_t))(v3 - 8))(a1);
  }
  return a1;
}

uint64_t assignWithCopy for DisjointStack.EdgePosition(uint64_t a1, long long *a2)
{
  unint64_t v4 = *((void *)a2 + 3);
  if (*(void *)(a1 + 24) < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *(void *)(a1 + 24) = v4;
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      (**(void (***)(uint64_t, long long *))(v4 - 8))(a1, a2);
      return a1;
    }
LABEL_7:
    long long v5 = *a2;
    long long v6 = a2[1];
    *(void *)(a1 + 32) = *((void *)a2 + 4);
    *(_OWORD *)a1 = v5;
    *(_OWORD *)(a1 + 16) = v6;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    __swift_destroy_boxed_opaque_existential_1(a1);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  return a1;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for DisjointStack.EdgePosition(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24) >= 0xFFFFFFFFuLL) {
    __swift_destroy_boxed_opaque_existential_1(a1);
  }
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for DisjointStack.EdgePosition(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for DisjointStack.EdgePosition(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 32) = 0;
    *(_OWORD *)__n128 result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 40) = 0;
    }
    if (a2) {
      *(void *)(result + 24) = a2;
    }
  }
  return result;
}

uint64_t sub_1B07E92D0(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

double sub_1B07E92E8(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    double result = 0.0;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(void *)a1 = a2 ^ 0x80000000;
  }
  else if (a2)
  {
    *(void *)(a1 + 24) = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for ZStack.EdgePosition()
{
  return &type metadata for ZStack.EdgePosition;
}

uint64_t destroy for DisjointStack.Properties(uint64_t result)
{
  unint64_t v1 = (void *)result;
  if (*(void *)(result + 24)) {
    double result = __swift_destroy_boxed_opaque_existential_1(result);
  }
  if (v1[8]) {
    double result = __swift_destroy_boxed_opaque_existential_1((uint64_t)(v1 + 5));
  }
  if (v1[13]) {
    double result = __swift_destroy_boxed_opaque_existential_1((uint64_t)(v1 + 10));
  }
  if (v1[18])
  {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)(v1 + 15));
  }
  return result;
}

uint64_t initializeWithCopy for ZStack.Properties(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    uint64_t v5 = *(void *)(a2 + 32);
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + 32) = v5;
    (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1, a2);
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
  }
  long long v7 = (_OWORD *)(a1 + 40);
  long long v8 = (_OWORD *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 64);
  if (v9)
  {
    uint64_t v10 = *(void *)(a2 + 72);
    *(void *)(a1 + 64) = v9;
    *(void *)(a1 + 72) = v10;
    (**(void (***)(_OWORD *, _OWORD *))(v9 - 8))(v7, v8);
  }
  else
  {
    long long v11 = *(_OWORD *)(a2 + 56);
    _OWORD *v7 = *v8;
    *(_OWORD *)(a1 + 56) = v11;
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
  }
  uint64_t v12 = (_OWORD *)(a1 + 80);
  long long v13 = (_OWORD *)(a2 + 80);
  uint64_t v14 = *(void *)(a2 + 104);
  if (v14)
  {
    uint64_t v15 = *(void *)(a2 + 112);
    *(void *)(a1 + 104) = v14;
    *(void *)(a1 + 112) = v15;
    (**(void (***)(_OWORD *, _OWORD *))(v14 - 8))(v12, v13);
  }
  else
  {
    long long v16 = *(_OWORD *)(a2 + 96);
    *uint64_t v12 = *v13;
    *(_OWORD *)(a1 + 96) = v16;
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
  }
  long long v17 = (_OWORD *)(a1 + 120);
  uint64_t v18 = (_OWORD *)(a2 + 120);
  uint64_t v19 = *(void *)(a2 + 144);
  if (v19)
  {
    uint64_t v20 = *(void *)(a2 + 152);
    *(void *)(a1 + 144) = v19;
    *(void *)(a1 + 152) = v20;
    (**(void (***)(_OWORD *, _OWORD *))(v19 - 8))(v17, v18);
  }
  else
  {
    long long v21 = *(_OWORD *)(a2 + 136);
    *long long v17 = *v18;
    *(_OWORD *)(a1 + 136) = v21;
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
  }
  return a1;
}

uint64_t assignWithCopy for ZStack.Properties(uint64_t a1, long long *a2)
{
  uint64_t v4 = *((void *)a2 + 3);
  if (*(void *)(a1 + 24))
  {
    if (v4)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
    }
    else
    {
      sub_1B07E8DE4(a1);
      uint64_t v5 = *((void *)a2 + 4);
      long long v6 = a2[1];
      *(_OWORD *)a1 = *a2;
      *(_OWORD *)(a1 + 16) = v6;
      *(void *)(a1 + 32) = v5;
    }
  }
  else if (v4)
  {
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + 32) = *((void *)a2 + 4);
    (**(void (***)(uint64_t, long long *))(v4 - 8))(a1, a2);
  }
  else
  {
    long long v7 = *a2;
    long long v8 = a2[1];
    *(void *)(a1 + 32) = *((void *)a2 + 4);
    *(_OWORD *)a1 = v7;
    *(_OWORD *)(a1 + 16) = v8;
  }
  uint64_t v9 = (_OWORD *)(a1 + 40);
  uint64_t v10 = (long long *)((char *)a2 + 40);
  uint64_t v11 = *((void *)a2 + 8);
  if (*(void *)(a1 + 64))
  {
    if (v11)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 40), (uint64_t *)a2 + 5);
    }
    else
    {
      sub_1B07E8DE4(a1 + 40);
      uint64_t v12 = *((void *)a2 + 9);
      long long v13 = *(long long *)((char *)a2 + 56);
      *uint64_t v9 = *v10;
      *(_OWORD *)(a1 + 56) = v13;
      *(void *)(a1 + 72) = v12;
    }
  }
  else if (v11)
  {
    *(void *)(a1 + 64) = v11;
    *(void *)(a1 + 72) = *((void *)a2 + 9);
    (**(void (***)(uint64_t, uint64_t))(v11 - 8))(a1 + 40, (uint64_t)a2 + 40);
  }
  else
  {
    long long v14 = *v10;
    long long v15 = *(long long *)((char *)a2 + 56);
    *(void *)(a1 + 72) = *((void *)a2 + 9);
    *uint64_t v9 = v14;
    *(_OWORD *)(a1 + 56) = v15;
  }
  long long v16 = (_OWORD *)(a1 + 80);
  long long v17 = a2 + 5;
  uint64_t v18 = *((void *)a2 + 13);
  if (*(void *)(a1 + 104))
  {
    if (v18)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 80), (uint64_t *)a2 + 10);
    }
    else
    {
      sub_1B07E8DE4(a1 + 80);
      uint64_t v19 = *((void *)a2 + 14);
      long long v20 = a2[6];
      _OWORD *v16 = *v17;
      *(_OWORD *)(a1 + 96) = v20;
      *(void *)(a1 + 112) = v19;
    }
  }
  else if (v18)
  {
    *(void *)(a1 + 104) = v18;
    *(void *)(a1 + 112) = *((void *)a2 + 14);
    (**(void (***)(uint64_t, uint64_t))(v18 - 8))(a1 + 80, (uint64_t)(a2 + 5));
  }
  else
  {
    long long v21 = *v17;
    long long v22 = a2[6];
    *(void *)(a1 + 112) = *((void *)a2 + 14);
    _OWORD *v16 = v21;
    *(_OWORD *)(a1 + 96) = v22;
  }
  int v23 = (_OWORD *)(a1 + 120);
  int v24 = (long long *)((char *)a2 + 120);
  uint64_t v25 = *((void *)a2 + 18);
  if (*(void *)(a1 + 144))
  {
    if (v25)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 120), (uint64_t *)a2 + 15);
    }
    else
    {
      sub_1B07E8DE4(a1 + 120);
      uint64_t v26 = *((void *)a2 + 19);
      long long v27 = *(long long *)((char *)a2 + 136);
      *int v23 = *v24;
      *(_OWORD *)(a1 + 136) = v27;
      *(void *)(a1 + 152) = v26;
    }
  }
  else if (v25)
  {
    *(void *)(a1 + 144) = v25;
    *(void *)(a1 + 152) = *((void *)a2 + 19);
    (**(void (***)(uint64_t, uint64_t))(v25 - 8))(a1 + 120, (uint64_t)a2 + 120);
  }
  else
  {
    long long v28 = *v24;
    long long v29 = *(long long *)((char *)a2 + 136);
    *(void *)(a1 + 152) = *((void *)a2 + 19);
    *int v23 = v28;
    *(_OWORD *)(a1 + 136) = v29;
  }
  return a1;
}

__n128 __swift_memcpy160_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  __n128 result = *(__n128 *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(__n128 *)(a1 + 96) = result;
  *(_OWORD *)(a1 + 112) = v7;
  return result;
}

uint64_t assignWithTake for ZStack.Properties(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24))
  {
    if (*(void *)(a2 + 24)) {
      __swift_destroy_boxed_opaque_existential_1(a1);
    }
    else {
      sub_1B07E8DE4(a1);
    }
  }
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  if (*(void *)(a1 + 64))
  {
    if (*(void *)(a2 + 64)) {
      __swift_destroy_boxed_opaque_existential_1(a1 + 40);
    }
    else {
      sub_1B07E8DE4(a1 + 40);
    }
  }
  long long v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = v5;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  if (*(void *)(a1 + 104))
  {
    if (*(void *)(a2 + 104)) {
      __swift_destroy_boxed_opaque_existential_1(a1 + 80);
    }
    else {
      sub_1B07E8DE4(a1 + 80);
    }
  }
  long long v6 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v6;
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  if (*(void *)(a1 + 144))
  {
    if (*(void *)(a2 + 144)) {
      __swift_destroy_boxed_opaque_existential_1(a1 + 120);
    }
    else {
      sub_1B07E8DE4(a1 + 120);
    }
  }
  long long v7 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = v7;
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  return a1;
}

uint64_t getEnumTagSinglePayload for ZStack.Properties(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 160)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ZStack.Properties(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 152) = 0;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 160) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 160) = 0;
    }
    if (a2) {
      *(void *)(result + 24) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ZStack.Properties()
{
  return &type metadata for ZStack.Properties;
}

uint64_t destroy for DisjointStack.Placements(uint64_t a1)
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for DisjointStack.Placements(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  int v4 = *(void **)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  long long v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  id v8 = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DisjointStack.Placements(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  int v4 = *(void **)(a2 + 32);
  uint64_t v5 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = v4;
  id v6 = v4;

  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  long long v7 = *(_OWORD *)(a2 + 64);
  long long v8 = *(_OWORD *)(a2 + 80);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 80) = v8;
  return a1;
}

uint64_t assignWithTake for DisjointStack.Placements(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;

  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  return a1;
}

uint64_t getEnumTagSinglePayload for DisjointStack.Placements(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 97)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DisjointStack.Placements(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 96) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 97) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 97) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ZStack.Placements()
{
  return &type metadata for ZStack.Placements;
}

uint64_t sub_1B07E9C40(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 32);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return a1;
}

uint64_t sub_1B07E9C84(uint64_t a1)
{
  return a1;
}

id sub_1B07E9CC0()
{
  return *v0;
}

id DynamicLabel.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  id v9 = objc_allocWithZone(v4);

  return objc_msgSend(v9, sel_initWithFrame_, a1, a2, a3, a4);
}

id DynamicLabel.init(frame:)(double a1, double a2, double a3, double a4)
{
  id v9 = &v4[OBJC_IVAR____TtC5JetUI12DynamicLabel_customTextStyle];
  uint64_t v10 = (objc_class *)type metadata accessor for DynamicLabel();
  *(_OWORD *)id v9 = 0u;
  *((_OWORD *)v9 + 1) = 0u;
  *((void *)v9 + 4) = 0;
  v13.receiver = v4;
  v13.super_class = v10;
  id v11 = objc_msgSendSuper2(&v13, sel_initWithFrame_, a1, a2, a3, a4);
  objc_msgSend(v11, sel_setAdjustsFontForContentSizeCategory_, 1);
  return v11;
}

uint64_t type metadata accessor for DynamicLabel()
{
  return self;
}

id DynamicLabel.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void DynamicLabel.init(coder:)()
{
  unint64_t v1 = &v0[OBJC_IVAR____TtC5JetUI12DynamicLabel_customTextStyle];
  *(_OWORD *)unint64_t v1 = 0u;
  *((_OWORD *)v1 + 1) = 0u;
  *((void *)v1 + 4) = 0;

  sub_1B086A6C8();
  __break(1u);
}

void *DynamicLabel.__allocating_init(with:)(uint64_t a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  sub_1B07EA080(a1, (uint64_t)v7);
  long long v4 = *(void (**)(unsigned char *))((*MEMORY[0x1E4FBC8C8] & *v3) + 0x78);
  long long v5 = v3;
  v4(v7);

  sub_1B07EA0DC(a1);
  return v5;
}

uint64_t sub_1B07EA080(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1B07EA0DC(uint64_t a1)
{
  return a1;
}

uint64_t sub_1B07EA130()
{
  unint64_t v1 = v0;
  (*(void (**)(long long *__return_ptr))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x58))(&v7);
  if (!v8) {
    return sub_1B07EA3D0((uint64_t)&v7);
  }
  sub_1B07BA8FC(&v7, (uint64_t)v9);
  uint64_t v2 = v9[4];
  __swift_project_boxed_opaque_existential_1(v9, v9[3]);
  id v3 = objc_msgSend(v0, sel_traitCollection);
  long long v4 = (void *)(*(uint64_t (**)(void))(v2 + 8))();

  v6.receiver = v1;
  v6.super_class = (Class)type metadata accessor for DynamicLabel();
  objc_msgSendSuper2(&v6, sel_setFont_, v4);

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
}

uint64_t sub_1B07EA23C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC5JetUI12DynamicLabel_customTextStyle;
  swift_beginAccess();
  return sub_1B07EA290(v3, a1);
}

uint64_t sub_1B07EA290(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB595738);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B07EA2F8(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC5JetUI12DynamicLabel_customTextStyle;
  swift_beginAccess();
  sub_1B07EA368(a1, v3);
  swift_endAccess();
  sub_1B07EA130();
  return sub_1B07EA3D0(a1);
}

uint64_t sub_1B07EA368(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB595738);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B07EA3D0(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB595738);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t (*sub_1B07EA430(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return sub_1B07EA490;
}

uint64_t sub_1B07EA490(uint64_t a1, char a2)
{
  uint64_t result = swift_endAccess();
  if ((a2 & 1) == 0) {
    return sub_1B07EA130();
  }
  return result;
}

id sub_1B07EA51C()
{
  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for DynamicLabel();
  id v1 = objc_msgSendSuper2(&v3, sel_font);

  return v1;
}

void sub_1B07EA614(void *a1)
{
  uint64_t v5 = 0;
  memset(v4, 0, sizeof(v4));
  (*(void (**)(_OWORD *))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x60))(v4);
  v3.receiver = v1;
  v3.super_class = (Class)type metadata accessor for DynamicLabel();
  objc_msgSendSuper2(&v3, sel_setFont_, a1);
}

id sub_1B07EA6A0@<X0>(uint64_t *a1@<X8>)
{
  objc_super v3 = (void *)*MEMORY[0x1E4FB28C8];
  a1[3] = (uint64_t)&type metadata for FontSource;
  a1[4] = (uint64_t)&protocol witness table for FontSource;
  uint64_t v4 = swift_allocObject();
  *a1 = v4;
  *(void *)(v4 + 16) = v3;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(unsigned char *)(v4 + 56) = 0;
  a1[5] = 4;
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  (*(void (**)(long long *__return_ptr, void *))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x58))(&v6, v3);
  if (v7)
  {
    sub_1B07BA8FC(&v6, (uint64_t)&v8);
LABEL_5:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    sub_1B07BA8FC(&v8, (uint64_t)a1);
    a1[5] = (uint64_t)objc_msgSend(v1, sel_textAlignment);
    a1[6] = (uint64_t)objc_msgSend(v1, sel_lineBreakMode);
    a1[7] = (uint64_t)objc_msgSend(v1, sel_numberOfLines);
    id result = objc_msgSend(v1, sel_lineSpacing);
    a1[8] = (uint64_t)result;
    return result;
  }
  sub_1B07EA3D0((uint64_t)&v6);
  id result = objc_msgSend(v1, sel_font);
  if (result)
  {
    id v9 = &type metadata for DynamicLabel.StubTextStyle;
    uint64_t v10 = &off_1F094CA58;
    *(void *)&long long v8 = result;
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t sub_1B07EA828()
{
  sub_1B07BF284(*(id *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(unsigned char *)(v0 + 56));

  return MEMORY[0x1F4186498](v0, 57, 7);
}

uint64_t sub_1B07EA87C(void *a1)
{
  sub_1B07BBD78((uint64_t)a1, (uint64_t)v4);
  (*(void (**)(unsigned char *))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x60))(v4);
  objc_msgSend(v1, sel_setTextAlignment_, a1[5]);
  objc_msgSend(v1, sel_setLineBreakMode_, a1[6]);
  objc_msgSend(v1, sel_setNumberOfLines_, a1[7]);
  objc_msgSend(v1, sel_setLineSpacing_, a1[8]);
  return sub_1B07EA0DC((uint64_t)a1);
}

void (*sub_1B07EA93C(uint64_t **a1))(uint64_t *a1, char a2)
{
  objc_super v3 = (uint64_t *)malloc(0xC0uLL);
  *a1 = v3;
  v3[23] = v1;
  sub_1B07EA6A0(v3);
  return sub_1B07EA99C;
}

void sub_1B07EA99C(uint64_t *a1, char a2)
{
  uint64_t v2 = (void *)*a1;
  uint64_t v3 = *a1 + 72;
  uint64_t v4 = *(void **)(*a1 + 184);
  if (a2)
  {
    sub_1B07EA080(*a1, v3);
    sub_1B07BBD78(v3, (uint64_t)(v2 + 18));
    (*(void (**)(void *))((*MEMORY[0x1E4FBC8C8] & *v4) + 0x60))(v2 + 18);
    objc_msgSend(v4, sel_setTextAlignment_, v2[14]);
    objc_msgSend(v4, sel_setLineBreakMode_, v2[15]);
    objc_msgSend(v4, sel_setNumberOfLines_, v2[16]);
    objc_msgSend(v4, sel_setLineSpacing_, v2[17]);
    sub_1B07EA0DC(v3);
  }
  else
  {
    sub_1B07BBD78(*a1, v3);
    (*(void (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v4) + 0x60))(v3);
    objc_msgSend(v4, sel_setTextAlignment_, v2[5]);
    objc_msgSend(v4, sel_setLineBreakMode_, v2[6]);
    objc_msgSend(v4, sel_setNumberOfLines_, v2[7]);
    objc_msgSend(v4, sel_setLineSpacing_, v2[8]);
  }
  sub_1B07EA0DC((uint64_t)v2);

  free(v2);
}

void sub_1B07EAB34(id a1)
{
  v11.receiver = v1;
  v11.super_class = (Class)type metadata accessor for DynamicLabel();
  objc_msgSendSuper2(&v11, sel_traitCollectionDidChange_, a1);
  if (objc_msgSend(v1, sel_adjustsFontForContentSizeCategory))
  {
    if (a1) {
      a1 = objc_msgSend(a1, sel_preferredContentSizeCategory);
    }
    id v3 = objc_msgSend(v1, sel_traitCollection);
    id v4 = objc_msgSend(v3, sel_preferredContentSizeCategory);

    if (!a1) {
      goto LABEL_10;
    }
    uint64_t v5 = sub_1B0869D98();
    uint64_t v7 = v6;
    if (v5 == sub_1B0869D98() && v7 == v8)
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_12;
    }
    char v10 = sub_1B086A8A8();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v10 & 1) == 0) {
LABEL_10:
    }
      sub_1B07EA130();
LABEL_12:
  }
}

id DynamicLabel.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DynamicLabel();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1B07EAD08(void **a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x58))();
}

uint64_t sub_1B07EAD5C(uint64_t a1, void **a2)
{
  sub_1B07EA290(a1, (uint64_t)v4);
  return (*(uint64_t (**)(unsigned char *))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x60))(v4);
}

uint64_t sub_1B07EADC8(void **a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x70))();
}

uint64_t sub_1B07EAE1C(uint64_t a1, void **a2)
{
  sub_1B07EA080(a1, (uint64_t)v4);
  return (*(uint64_t (**)(unsigned char *))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x78))(v4);
}

uint64_t method lookup function for DynamicLabel(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for DynamicLabel);
}

uint64_t dispatch thunk of DynamicLabel.customTextStyle.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x58))();
}

uint64_t dispatch thunk of DynamicLabel.customTextStyle.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x60))();
}

uint64_t dispatch thunk of DynamicLabel.customTextStyle.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x68))();
}

uint64_t dispatch thunk of DynamicLabel.dynamicTextAppearance.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70))();
}

uint64_t dispatch thunk of DynamicLabel.dynamicTextAppearance.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x78))();
}

uint64_t dispatch thunk of DynamicLabel.dynamicTextAppearance.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x80))();
}

ValueMetadata *type metadata accessor for DynamicLabel.StubTextStyle()
{
  return &type metadata for DynamicLabel.StubTextStyle;
}

uint64_t VerticalStackLayout.init(alignment:spacing:children:)@<X0>(char *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v7 = *a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB595F50);
  uint64_t v8 = swift_allocObject();
  uint64_t result = sub_1B07BA8FC(a2, v8 + 16);
  *(unsigned char *)a4 = v7;
  *(void *)(a4 + 8) = v8;
  *(void *)(a4 + 16) = a3;
  return result;
}

void VerticalStackLayout.alignment.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

unsigned char *VerticalStackLayout.alignment.setter(unsigned char *result)
{
  *uint64_t v1 = *result;
  return result;
}

double (*VerticalStackLayout.alignment.modify())(void)
{
  return nullsub_1;
}

uint64_t VerticalStackLayout.spacing.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 8) + 16;
  swift_beginAccess();
  return sub_1B07BBD78(v3, a1);
}

uint64_t VerticalStackLayout.spacing.setter(uint64_t a1)
{
  sub_1B07BBD78(a1, (uint64_t)v6);
  if (swift_isUniquelyReferenced_nonNull_native())
  {
    uint64_t v3 = *(void *)(v1 + 8) + 16;
    swift_beginAccess();
    __swift_destroy_boxed_opaque_existential_1(v3);
    sub_1B07BA8FC(v6, v3);
    swift_endAccess();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EB595F50);
    uint64_t v4 = swift_allocObject();
    sub_1B07BA8FC(v6, v4 + 16);
    swift_release();
    *(void *)(v1 + 8) = v4;
  }
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

void (*VerticalStackLayout.spacing.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0xB0uLL);
  *a1 = v3;
  v3[21] = v1;
  uint64_t v4 = *(void *)(v1 + 8) + 16;
  swift_beginAccess();
  sub_1B07BBD78(v4, (uint64_t)v3);
  return sub_1B07EB21C;
}

void sub_1B07EB21C(uint64_t *a1, char a2)
{
  uint64_t v3 = (void *)*a1;
  uint64_t v4 = (long long *)(*a1 + 40);
  uint64_t v5 = (long long *)(*a1 + 80);
  sub_1B07BBD78(*a1, (uint64_t)v4);
  if (a2)
  {
    sub_1B07BBD78((uint64_t)v4, (uint64_t)v5);
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v7 = v3[21];
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v8 = *(void *)(v7 + 8) + 16;
      swift_beginAccess();
      __swift_destroy_boxed_opaque_existential_1(v8);
      sub_1B07BA8FC(v5, v8);
      swift_endAccess();
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EB595F50);
      uint64_t v12 = swift_allocObject();
      sub_1B07BA8FC(v5, v12 + 16);
      swift_release();
      *(void *)(v7 + 8) = v12;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
  }
  else
  {
    int v9 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v10 = v3[21];
    if (v9)
    {
      uint64_t v11 = *(void *)(v10 + 8) + 16;
      swift_beginAccess();
      __swift_destroy_boxed_opaque_existential_1(v11);
      sub_1B07BA8FC(v4, v11);
      swift_endAccess();
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EB595F50);
      uint64_t v13 = swift_allocObject();
      sub_1B07BA8FC(v4, v13 + 16);
      swift_release();
      *(void *)(v10 + 8) = v13;
    }
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);

  free(v3);
}

JetUI::VerticalStackLayout::ExclusionCondition __swiftcall VerticalStackLayout.ExclusionCondition.init(rawValue:)(JetUI::VerticalStackLayout::ExclusionCondition rawValue)
{
  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

uint64_t VerticalStackLayout.ExclusionCondition.rawValue.getter()
{
  return *(void *)v0;
}

void static VerticalStackLayout.ExclusionCondition.isHidden.getter(void *a1@<X8>)
{
  *a1 = 1;
}

void static VerticalStackLayout.ExclusionCondition.hasNoContent.getter(void *a1@<X8>)
{
  *a1 = 2;
}

uint64_t static VerticalStackLayout.Child.make(forView:space:spaceMultiplier:alignment:excludeWhen:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  char v9 = *a3;
  uint64_t v10 = *a4;
  sub_1B07BBD78(a1, a5);
  uint64_t result = sub_1B07BBD78(a2, a5 + 40);
  *(double *)(a5 + 80) = a6;
  *(unsigned char *)(a5 + 96) = v9;
  *(void *)(a5 + 88) = v10;
  return result;
}

void *static VerticalStackLayout.Child.make(forView:withMeasurementsFitting:in:alignment:excludeWhen:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>, double a6@<D0>, double a7@<D1>)
{
  char v12 = *a3;
  uint64_t v13 = *a4;
  uint64_t v14 = a1[3];
  uint64_t v15 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v14);
  double v16 = (*(double (**)(uint64_t, uint64_t, double, double))(*(void *)(v15 + 8) + 8))(a2, v14, a6, a7);
  double v18 = v17;
  double v20 = v19;
  double v22 = v21;
  uint64_t v23 = a1[3];
  uint64_t v24 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v23);
  uint64_t result = LayoutView.withMeasurements(_:)(v23, v24, (void *)a5, v16, v18, v20, v22);
  *(void *)(a5 + 64) = MEMORY[0x1E4FBC958];
  *(void *)(a5 + 72) = &protocol witness table for CGFloat;
  *(double *)(a5 + 40) = v18;
  *(unsigned char *)(a5 + 96) = v12;
  *(void *)(a5 + 80) = 0x3FF0000000000000;
  *(void *)(a5 + 88) = v13;
  return result;
}

uint64_t VerticalStackLayout.Child.view.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1B07BBD78(v1, a1);
}

uint64_t VerticalStackLayout.Child.space.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1B07BBD78(v1 + 40, a1);
}

double VerticalStackLayout.Child.spaceMultiplier.getter()
{
  return *(double *)(v0 + 80);
}

void VerticalStackLayout.Child.excludeWhen.getter(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 88);
}

BOOL static VerticalStackLayout.Child.Alignment.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t VerticalStackLayout.Child.Alignment.hash(into:)()
{
  return sub_1B086A968();
}

void VerticalStackLayout.Child.alignment.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 96);
}

uint64_t VerticalStackLayout.children.getter()
{
  return swift_bridgeObjectRetain();
}

__n128 VerticalStackLayout.addChild(_:)(uint64_t a1)
{
  sub_1B07D0C7C(a1, (uint64_t)v11);
  objc_super v2 = *(char **)(v1 + 16);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    objc_super v2 = sub_1B07CEE58(0, *((void *)v2 + 2) + 1, 1, v2);
  }
  unint64_t v4 = *((void *)v2 + 2);
  unint64_t v3 = *((void *)v2 + 3);
  if (v4 >= v3 >> 1) {
    objc_super v2 = sub_1B07CEE58((char *)(v3 > 1), v4 + 1, 1, v2);
  }
  *((void *)v2 + 2) = v4 + 1;
  uint64_t v5 = &v2[104 * v4];
  long long v6 = v11[0];
  long long v7 = v11[2];
  *((_OWORD *)v5 + 3) = v11[1];
  *((_OWORD *)v5 + 4) = v7;
  *((_OWORD *)v5 + 2) = v6;
  __n128 result = (__n128)v11[3];
  long long v9 = v11[4];
  long long v10 = v11[5];
  v5[128] = v12;
  *((_OWORD *)v5 + 6) = v9;
  *((_OWORD *)v5 + 7) = v10;
  *((__n128 *)v5 + 5) = result;
  *(void *)(v1 + 16) = v2;
  return result;
}

unint64_t VerticalStackLayout.insertChild(_:at:)(unint64_t result, int64_t a2)
{
  if (*(void *)(*(void *)(v2 + 16) + 16) < a2)
  {
    __break(1u);
  }
  else if ((a2 & 0x8000000000000000) == 0)
  {
    sub_1B07D0C7C(result, (uint64_t)v4);
    return sub_1B07D06B0(a2, a2, (uint64_t)v4);
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall VerticalStackLayout.removeChild(at:)(Swift::Int at)
{
  sub_1B07EB748(at, (uint64_t)v1);
  sub_1B07BD9F8((uint64_t)v1);
}

uint64_t sub_1B07EB748@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *v2;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1B0860E84(v5);
    uint64_t v5 = result;
  }
  unint64_t v7 = *(void *)(v5 + 16);
  if (v7 <= a1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v8 = v5 + 104 * a1;
    long long v9 = *(_OWORD *)(v8 + 112);
    unint64_t v10 = v7 - 1;
    *(_OWORD *)(a2 + 64) = *(_OWORD *)(v8 + 96);
    *(_OWORD *)(a2 + 80) = v9;
    *(unsigned char *)(a2 + 96) = *(unsigned char *)(v8 + 128);
    long long v11 = *(_OWORD *)(v8 + 48);
    *(_OWORD *)a2 = *(_OWORD *)(v8 + 32);
    *(_OWORD *)(a2 + 16) = v11;
    long long v12 = *(_OWORD *)(v8 + 80);
    *(_OWORD *)(a2 + 32) = *(_OWORD *)(v8 + 64);
    *(_OWORD *)(a2 + 48) = v12;
    uint64_t result = (uint64_t)memmove((void *)(v8 + 32), (const void *)(v8 + 136), 104 * (v7 - 1 - a1));
    *(void *)(v5 + 16) = v10;
    *uint64_t v2 = v5;
  }
  return result;
}

uint64_t sub_1B07EB7F4@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *v2;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1B0860E98(v5);
    uint64_t v5 = (void *)result;
  }
  unint64_t v7 = v5[2];
  if (v7 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v8 = v7 - 1;
    long long v9 = (long long *)&v5[5 * a1];
    sub_1B07BA8FC(v9 + 2, a2);
    uint64_t result = (uint64_t)memmove(v9 + 2, (char *)v9 + 72, 40 * (v8 - a1));
    _OWORD v5[2] = v8;
    *uint64_t v2 = v5;
  }
  return result;
}

uint64_t sub_1B07EB89C(unint64_t a1)
{
  unint64_t v3 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1B0860EC0(v3);
    unint64_t v3 = (void *)result;
  }
  unint64_t v5 = v3[2];
  if (v5 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v6 = v5 - 1;
    unint64_t v7 = &v3[2 * a1];
    uint64_t v8 = v7[4];
    memmove(v7 + 4, v7 + 6, 16 * (v5 - 1 - a1));
    _OWORD v3[2] = v6;
    *uint64_t v1 = v3;
    return v8;
  }
  return result;
}

uint64_t sub_1B07EB928@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *v2;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1B0860ED4(v5);
    uint64_t v5 = result;
  }
  unint64_t v7 = *(void *)(v5 + 16);
  if (v7 <= a1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v8 = v5 + 136 * a1;
    long long v9 = *(_OWORD *)(v8 + 144);
    unint64_t v10 = v7 - 1;
    *(_OWORD *)(a2 + 96) = *(_OWORD *)(v8 + 128);
    *(_OWORD *)(a2 + 112) = v9;
    *(void *)(a2 + 128) = *(void *)(v8 + 160);
    long long v11 = *(_OWORD *)(v8 + 80);
    *(_OWORD *)(a2 + 32) = *(_OWORD *)(v8 + 64);
    *(_OWORD *)(a2 + 48) = v11;
    long long v12 = *(_OWORD *)(v8 + 112);
    *(_OWORD *)(a2 + 64) = *(_OWORD *)(v8 + 96);
    *(_OWORD *)(a2 + 80) = v12;
    long long v13 = *(_OWORD *)(v8 + 48);
    *(_OWORD *)a2 = *(_OWORD *)(v8 + 32);
    *(_OWORD *)(a2 + 16) = v13;
    uint64_t result = (uint64_t)memmove((void *)(v8 + 32), (const void *)(v8 + 168), 136 * (v7 - 1 - a1));
    *(void *)(v5 + 16) = v10;
    *uint64_t v2 = v5;
  }
  return result;
}

uint64_t sub_1B07EB9E0(unint64_t a1)
{
  unint64_t v3 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1B0860EE8(v3);
    unint64_t v3 = (void *)result;
  }
  unint64_t v5 = v3[2];
  if (v5 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v6 = v5 - 1;
    unint64_t v7 = &v3[a1];
    uint64_t v8 = v7[4];
    memmove(v7 + 4, v7 + 5, 8 * (v5 - 1 - a1));
    _OWORD v3[2] = v6;
    *uint64_t v1 = v3;
    return v8;
  }
  return result;
}

Swift::Void __swiftcall VerticalStackLayout.removeAllChildren()()
{
  swift_bridgeObjectRelease();
  *(void *)(v0 + 16) = MEMORY[0x1E4FBC860];
}

uint64_t VerticalStackLayout.measurements(fitting:in:)(uint64_t a1, double a2, double a3)
{
  uint64_t v7 = sub_1B086A868();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  unint64_t v10 = (char *)&v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v11 = *v3;
  uint64_t v12 = *((void *)v3 + 2);
  uint64_t v13 = *((void *)v3 + 1) + 16;
  swift_beginAccess();
  sub_1B07BBD78(v13, (uint64_t)v85);
  uint64_t v14 = v86;
  uint64_t v15 = v87;
  __swift_project_boxed_opaque_existential_1(v85, v86);
  sub_1B07B76D8((uint64_t)v10);
  uint64_t v76 = a1;
  AnyDimension.value(in:rounded:)(a1, (uint64_t)v10, v14, v15);
  uint64_t v17 = v16;
  double v18 = *(void (**)(char *, uint64_t))(v8 + 8);
  uint64_t v74 = v8 + 8;
  uint64_t v75 = v7;
  double v73 = v18;
  v18(v10, v7);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v85);
  double v20 = *(void **)(v12 + 16);
  if (v11 != 3)
  {
    if (!v20) {
      return result;
    }
    unint64_t v71 = v88;
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v49 = 0;
    int v50 = 0;
    unint64_t v51 = 0;
    unint64_t v52 = v12 + 32;
    double v53 = 0.0;
    unint64_t v69 = v12 + 32;
    uint64_t v70 = (void *)((char *)v20 - 1);
LABEL_27:
    int v72 = v50;
    uint64_t v54 = v52 + 104 * v51;
    while (1)
    {
      if (v51 >= *(void *)(v12 + 16))
      {
LABEL_47:
        __break(1u);
        goto LABEL_48;
      }
      sub_1B07D0C7C(v54, (uint64_t)v85);
      char v55 = v92;
      sub_1B07D0C7C((uint64_t)v85, (uint64_t)v82);
      if ((v55 & 2) != 0)
      {
        uint64_t v56 = v83;
        uint64_t v57 = v84;
        __swift_project_boxed_opaque_existential_1(v82, v83);
        char v58 = (*(uint64_t (**)(uint64_t, uint64_t))(v57 + 64))(v56, v57);
        sub_1B07BD9F8((uint64_t)v82);
        sub_1B07D0C7C((uint64_t)v85, (uint64_t)v80);
        if ((v58 & 1) == 0)
        {
          sub_1B07BD9F8((uint64_t)v80);
          goto LABEL_29;
        }
      }
      else
      {
        sub_1B07BD9F8((uint64_t)v82);
        sub_1B07D0C7C((uint64_t)v85, (uint64_t)v80);
      }
      char v59 = v81;
      sub_1B07D0C7C((uint64_t)v80, (uint64_t)v77);
      if ((v59 & 1) == 0)
      {
        sub_1B07BD9F8((uint64_t)v80);
        uint64_t result = sub_1B07BD9F8((uint64_t)v77);
LABEL_38:
        BOOL v36 = __OFADD__(v49++, 1);
        if (!v36)
        {
          uint64_t v63 = v89;
          uint64_t v64 = v90;
          __swift_project_boxed_opaque_existential_1(v71, v89);
          sub_1B07B76D8((uint64_t)v10);
          AnyDimension.value(in:rounded:)(v76, (uint64_t)v10, v63, v64);
          double v66 = v65;
          v73(v10, v75);
          double v53 = v53 + v66 * v91;
          uint64_t result = sub_1B07BD9F8((uint64_t)v85);
          int v50 = 1;
          BOOL v48 = v70 == (void *)v51++;
          unint64_t v52 = v69;
          if (!v48) {
            goto LABEL_27;
          }
LABEL_41:
          uint64_t result = swift_bridgeObjectRelease();
          if (!__OFSUB__(v49, 1)) {
            return result;
          }
LABEL_48:
          __break(1u);
LABEL_49:
          __break(1u);
        }
LABEL_50:
        __break(1u);
        return result;
      }
      uint64_t v60 = v78;
      uint64_t v61 = v79;
      __swift_project_boxed_opaque_existential_1(v77, v78);
      char v62 = (*(uint64_t (**)(uint64_t, uint64_t))(v61 + 40))(v60, v61);
      sub_1B07BD9F8((uint64_t)v80);
      uint64_t result = sub_1B07BD9F8((uint64_t)v77);
      if ((v62 & 1) == 0) {
        goto LABEL_38;
      }
LABEL_29:
      ++v51;
      uint64_t result = sub_1B07BD9F8((uint64_t)v85);
      v54 += 104;
      if (v20 == (void *)v51) {
        goto LABEL_41;
      }
    }
  }
  if (!v20) {
    return result;
  }
  uint64_t v67 = v17;
  uint64_t v70 = v88;
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v21 = 0;
  int v22 = 0;
  unint64_t v23 = 0;
  uint64_t v24 = v12 + 32;
  double v25 = 0.0;
  double v26 = a2;
  uint64_t v68 = v12 + 32;
  unint64_t v69 = (unint64_t)v20 - 1;
  while (2)
  {
    int v72 = v22;
    uint64_t v27 = v24 + 104 * v23;
    while (1)
    {
      if (v23 >= *(void *)(v12 + 16))
      {
        __break(1u);
        goto LABEL_47;
      }
      sub_1B07D0C7C(v27, (uint64_t)v85);
      char v28 = v92;
      sub_1B07D0C7C((uint64_t)v85, (uint64_t)v82);
      if ((v28 & 2) != 0)
      {
        uint64_t v29 = v83;
        uint64_t v30 = v84;
        __swift_project_boxed_opaque_existential_1(v82, v83);
        char v31 = (*(uint64_t (**)(uint64_t, uint64_t))(v30 + 64))(v29, v30);
        sub_1B07BD9F8((uint64_t)v82);
        sub_1B07D0C7C((uint64_t)v85, (uint64_t)v80);
        if ((v31 & 1) == 0)
        {
          sub_1B07BD9F8((uint64_t)v80);
          goto LABEL_6;
        }
      }
      else
      {
        sub_1B07BD9F8((uint64_t)v82);
        sub_1B07D0C7C((uint64_t)v85, (uint64_t)v80);
      }
      char v32 = v81;
      sub_1B07D0C7C((uint64_t)v80, (uint64_t)v77);
      if ((v32 & 1) == 0) {
        break;
      }
      uint64_t v33 = v78;
      uint64_t v34 = v79;
      __swift_project_boxed_opaque_existential_1(v77, v78);
      char v35 = (*(uint64_t (**)(uint64_t, uint64_t))(v34 + 40))(v33, v34);
      sub_1B07BD9F8((uint64_t)v80);
      uint64_t result = sub_1B07BD9F8((uint64_t)v77);
      if ((v35 & 1) == 0) {
        goto LABEL_15;
      }
LABEL_6:
      ++v23;
      uint64_t result = sub_1B07BD9F8((uint64_t)v85);
      v27 += 104;
      if (v20 == (void *)v23) {
        goto LABEL_22;
      }
    }
    sub_1B07BD9F8((uint64_t)v80);
    uint64_t result = sub_1B07BD9F8((uint64_t)v77);
LABEL_15:
    BOOL v36 = __OFADD__(v21++, 1);
    if (v36) {
      goto LABEL_49;
    }
    unint64_t v71 = (void *)(v23 + 1);
    uint64_t v37 = v86;
    uint64_t v38 = v87;
    __swift_project_boxed_opaque_existential_1(v85, v86);
    uint64_t v39 = v76;
    double v40 = (*(double (**)(uint64_t, uint64_t, double, double))(*(void *)(v38 + 8) + 8))(v76, v37, a2, a3);
    double v42 = v41;
    uint64_t v43 = v89;
    uint64_t v44 = v90;
    __swift_project_boxed_opaque_existential_1(v70, v89);
    sub_1B07B76D8((uint64_t)v10);
    AnyDimension.value(in:rounded:)(v39, (uint64_t)v10, v43, v44);
    double v46 = v45;
    v73(v10, v75);
    double v47 = v46 * v91;
    if (v46 * v91 >= v42) {
      double v47 = v42;
    }
    if (v40 > v26) {
      double v26 = v40;
    }
    double v25 = v25 + v47;
    uint64_t result = sub_1B07BD9F8((uint64_t)v85);
    int v22 = 1;
    BOOL v48 = v69 == v23;
    unint64_t v23 = (unint64_t)v71;
    uint64_t v24 = v68;
    if (!v48) {
      continue;
    }
    break;
  }
LABEL_22:
  uint64_t result = swift_bridgeObjectRelease();
  if (__OFSUB__(v21, 1)) {
    goto LABEL_50;
  }
  return result;
}

double VerticalStackLayout.placeChildren(relativeTo:in:)@<D0>(void *a1@<X0>, CGFloat *a2@<X8>, CGFloat a3@<D0>, CGFloat a4@<D1>, CGFloat a5@<D2>, CGFloat a6@<D3>)
{
  uint64_t v13 = sub_1B086A868();
  CGFloat v144 = *(double *)(v13 - 8);
  uint64_t v14 = ((uint64_t (*)(uint64_t))MEMORY[0x1F4188790])(v13);
  v128 = (char *)&v116 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = ((uint64_t (*)(uint64_t))MEMORY[0x1F4188790])(v14);
  uint64_t v124 = (uint64_t)&v116 - v17;
  uint64_t v18 = ((uint64_t (*)(uint64_t))MEMORY[0x1F4188790])(v16);
  uint64_t v135 = (uint64_t)&v116 - v19;
  MEMORY[0x1F4188790](v18);
  uint64_t v21 = (char *)&v116 - v20;
  uint64_t v127 = *v6;
  uint64_t v22 = *((void *)v6 + 1);
  uint64_t v23 = *((void *)v6 + 2);
  CGFloat v145 = a3;
  CGFloat v146 = a4;
  v162.origin.CGFloat x = a3;
  v162.origin.CGFloat y = a4;
  v162.size.CGFloat width = a5;
  v162.size.CGFloat height = a6;
  double MinY = CGRectGetMinY(v162);
  swift_beginAccess();
  sub_1B07BBD78(v22 + 16, (uint64_t)v153);
  uint64_t v25 = v154;
  uint64_t v26 = v155;
  __swift_project_boxed_opaque_existential_1(v153, v154);
  sub_1B07B76D8((uint64_t)v21);
  id v137 = a1;
  AnyDimension.value(in:rounded:)((uint64_t)a1, (uint64_t)v21, v25, v26);
  double v27 = v144;
  double v139 = v28;
  uint64_t v29 = *(void (**)(uint64_t, uint64_t))(*(void *)&v144 + 8);
  v134 = v21;
  v141 = v29;
  uint64_t v142 = *(void *)&v144 + 8;
  v29((uint64_t)v21, v13);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v153);
  uint64_t v30 = *(void *)(v23 + 16);
  if (!v30)
  {
    double v112 = 0.0;
    double v111 = 0.0;
    double v35 = 0.0;
    CGFloat v144 = 0.0;
    uint64_t v113 = -1;
    goto LABEL_63;
  }
  uint64_t v136 = v13;
  v123 = a2;
  v131 = &v156;
  unsigned int v121 = *MEMORY[0x1E4FBBEA8];
  v125 = (void (**)(uint64_t, void, uint64_t))(*(void *)&v27 + 104);
  unsigned int v120 = *MEMORY[0x1E4FBBEB0];
  swift_bridgeObjectRetain();
  uint64_t v31 = 0;
  int v32 = 0;
  unint64_t v33 = 0;
  double v143 = 0.0;
  CGFloat v144 = 0.0;
  uint64_t v34 = v23 + 32;
  double v132 = 0.0;
  double v35 = 0.0;
  uint64_t v129 = v23 + 32;
  uint64_t v130 = v30 - 1;
  do
  {
    int v138 = v32;
    uint64_t v36 = v34 + 104 * v33;
    unint64_t v37 = v33;
    while (1)
    {
      if (v37 >= *(void *)(v23 + 16)) {
        goto LABEL_66;
      }
      sub_1B07D0C7C(v36, (uint64_t)v153);
      char v38 = v160;
      sub_1B07D0C7C((uint64_t)v153, (uint64_t)&v152);
      if ((v38 & 2) != 0)
      {
        CGFloat d = v152.d;
        CGFloat tx = v152.tx;
        __swift_project_boxed_opaque_existential_1(&v152, *(uint64_t *)&v152.d);
        char v41 = (*(uint64_t (**)(CGFloat, CGFloat))(*(void *)&tx + 64))(COERCE_CGFLOAT(*(void *)&d), COERCE_CGFLOAT(*(void *)&tx));
        sub_1B07BD9F8((uint64_t)&v152);
        sub_1B07D0C7C((uint64_t)v153, (uint64_t)&v150);
        if ((v41 & 1) == 0)
        {
          sub_1B07BD9F8((uint64_t)&v150);
          goto LABEL_5;
        }
      }
      else
      {
        sub_1B07BD9F8((uint64_t)&v152);
        sub_1B07D0C7C((uint64_t)v153, (uint64_t)&v150);
      }
      char v42 = v151;
      sub_1B07D0C7C((uint64_t)&v150, (uint64_t)v147);
      if ((v42 & 1) == 0) {
        break;
      }
      uint64_t v43 = v148;
      uint64_t v44 = v149;
      __swift_project_boxed_opaque_existential_1(v147, v148);
      char v45 = (*(uint64_t (**)(uint64_t, uint64_t))(v44 + 40))(v43, v44);
      sub_1B07BD9F8((uint64_t)&v150);
      sub_1B07BD9F8((uint64_t)v147);
      if ((v45 & 1) == 0) {
        goto LABEL_14;
      }
LABEL_5:
      ++v37;
      sub_1B07BD9F8((uint64_t)v153);
      v36 += 104;
      if (v30 == v37) {
        goto LABEL_62;
      }
    }
    sub_1B07BD9F8((uint64_t)&v150);
    sub_1B07BD9F8((uint64_t)v147);
LABEL_14:
    if (__OFADD__(v31++, 1)) {
      goto LABEL_67;
    }
    double v133 = v35;
    uint64_t v47 = v157;
    uint64_t v48 = v158;
    __swift_project_boxed_opaque_existential_1(v131, v157);
    uint64_t v49 = (uint64_t)v134;
    sub_1B07B76D8((uint64_t)v134);
    id v50 = v137;
    AnyDimension.value(in:rounded:)((uint64_t)v137, v49, v47, v48);
    double v52 = v51;
    uint64_t v53 = v136;
    v141(v49, v136);
    double v140 = v52 * v159;
    uint64_t v54 = v154;
    uint64_t v55 = v155;
    __swift_project_boxed_opaque_existential_1(v153, v154);
    double v56 = (*(double (**)(id, uint64_t, CGFloat, CGFloat))(*(void *)(v55 + 8) + 8))(v50, v54, a5, a6);
    double v122 = v57;
    double v143 = v58;
    double v60 = v59;
    double v61 = fabs(v59);
    if (fabs(v56) < COERCE_DOUBLE(1) || v61 < COERCE_DOUBLE(1))
    {
      uint64_t v34 = v129;
      if ((v138 & 1) == 0)
      {
        v163.origin.CGFloat x = v145;
        v163.origin.CGFloat y = v146;
        v163.size.CGFloat width = a5;
        v163.size.CGFloat height = a6;
        double v132 = v140 + MinY - CGRectGetMinY(v163);
      }
      double v63 = v140;
      double v64 = MinY + v140;
      double v143 = 0.0;
      double v65 = v133;
    }
    else
    {
      double v66 = *v125;
      (*v125)(v135, v121, v53);
      id v67 = objc_msgSend(v50, sel_traitCollection);
      objc_msgSend(v67, sel_displayScale);
      unint64_t v69 = v50;
      if (v68 <= 0.0) {
        double v68 = ForJetUIOnly_MainScreenScale();
      }
      uint64_t v70 = v135;
      double v126 = sub_1B07B8068(v135, v68, v56);

      uint64_t v71 = v136;
      v141(v70, v136);
      uint64_t v72 = (uint64_t)v128;
      if (v161)
      {
        if (v161 == 1)
        {
          v164.origin.CGFloat x = v145;
          v164.origin.CGFloat y = v146;
          v164.size.CGFloat width = a5;
          v164.size.CGFloat height = a6;
          double MidX = CGRectGetMidX(v164);
          v66(v124, v120, v71);
          id v74 = objc_msgSend(v50, sel_traitCollection);
          objc_msgSend(v74, sel_displayScale);
          if (v75 <= 0.0) {
            double v75 = ForJetUIOnly_MainScreenScale();
          }
          uint64_t v76 = v124;
          double MinX = sub_1B07B8068(v124, v75, MidX + v126 * -0.5);

          uint64_t v71 = v136;
          v141(v76, v136);
        }
        else
        {
          v166.origin.CGFloat x = v145;
          v166.origin.CGFloat y = v146;
          v166.size.CGFloat width = a5;
          v166.size.CGFloat height = a6;
          double MinX = CGRectGetMaxX(v166) - v126;
        }
      }
      else
      {
        v165.origin.CGFloat x = v145;
        v165.origin.CGFloat y = v146;
        v165.size.CGFloat width = a5;
        v165.size.CGFloat height = a6;
        double MinX = CGRectGetMinX(v165);
      }
      double v78 = v60;
      switch(v127)
      {
        case 1:
          double v79 = v140;
          if (v140 < v60) {
            double v60 = v140;
          }
          v66(v72, v120, v71);
          uint64_t v80 = v71;
          id v81 = objc_msgSend(v69, sel_traitCollection);
          objc_msgSend(v81, sel_displayScale);
          if (v82 <= 0.0) {
            double v82 = ForJetUIOnly_MainScreenScale();
          }
          double v83 = sub_1B07B8068(v72, v82, MinY + v79 * 0.5 - v60 * 0.5);

          v141(v72, v80);
          double v64 = MinY + v139 + v79;
          double MinY = v83;
          double v78 = v60;
          goto LABEL_53;
        case 2:
          double v84 = v140;
          if (v140 < v60) {
            double v78 = v140;
          }
          double v85 = v140 - v78;
          goto LABEL_52;
        case 3:
          if (v140 < v60) {
            double v78 = v140;
          }
          v167.origin.CGFloat x = MinX;
          v167.origin.CGFloat y = MinY;
          double v86 = v126;
          v167.size.CGFloat width = v126;
          v167.size.CGFloat height = v78;
          double MaxY = CGRectGetMaxY(v167);
          goto LABEL_50;
        case 4:
          if (v159 == 1.0)
          {
            double MinY = MinY + v140 - v122;
            v168.origin.CGFloat x = MinX;
            v168.origin.CGFloat y = MinY;
            double v86 = v126;
            v168.size.CGFloat width = v126;
            v168.size.CGFloat height = v78;
            double MaxY = CGRectGetMaxY(v168) - v143;
LABEL_50:
            double v64 = v139 + MaxY;
          }
          else
          {
            double v85 = v140 / v159 - v122;
            double v84 = v140 - v143;
LABEL_52:
            double v64 = MinY + v139 + v84;
            double MinY = MinY + v85;
LABEL_53:
            double v86 = v126;
          }
          uint64_t v91 = v154;
          uint64_t v92 = v155;
          __swift_project_boxed_opaque_existential_1(v153, v154);
          id v93 = objc_msgSend(v137, sel_traitCollection);
          id v94 = objc_msgSend(v93, sel_layoutDirection);

          v95.n128_f64[0] = MinX;
          v96.n128_f64[0] = MinY;
          v97.n128_f64[0] = v86;
          v98.n128_f64[0] = v78;
          if (v94 == (id)1)
          {
            CGAffineTransformMakeScale(&v152, -1.0, 1.0);
            long long v116 = *(_OWORD *)&v152.c;
            long long v117 = *(_OWORD *)&v152.a;
            double v118 = v78;
            double v119 = MinY;
            CGFloat v99 = v152.tx;
            CGFloat ty = v152.ty;
            double v101 = v145;
            v170.origin.CGFloat x = v145;
            double v102 = v64;
            double v103 = MinX;
            CGFloat v104 = v146;
            v170.origin.CGFloat y = v146;
            v170.size.CGFloat width = a5;
            v170.size.CGFloat height = a6;
            CGFloat v105 = CGRectGetMinX(v170);
            v171.origin.CGFloat y = v104;
            double MinX = v103;
            double v64 = v102;
            CGFloat v106 = v101;
            double v107 = v105;
            v171.origin.CGFloat x = v106;
            v171.size.CGFloat width = a5;
            v171.size.CGFloat height = a6;
            CGFloat v108 = -(v107 + CGRectGetMaxX(v171));
            *(_OWORD *)&v152.a = v117;
            *(_OWORD *)&v152.c = v116;
            v152.CGFloat tx = v99;
            double v78 = v118;
            double MinY = v119;
            v152.CGFloat ty = ty;
            double v86 = v126;
            CGAffineTransformTranslate(&v150, &v152, v108, 0.0);
            CGAffineTransform v152 = v150;
            v172.origin.CGFloat x = MinX;
            v172.origin.CGFloat y = MinY;
            v172.size.CGFloat width = v86;
            v172.size.CGFloat height = v78;
            *(CGRect *)v95.n128_u64 = CGRectApplyAffineTransform(v172, &v152);
          }
          (*(void (**)(uint64_t, uint64_t, __n128, __n128, __n128, __n128))(v92 + 24))(v91, v92, v95, v96, v97, v98);
          double v109 = v144;
          if (v86 > v144) {
            double v109 = v86;
          }
          CGFloat v144 = v109;
          if ((v138 & 1) == 0)
          {
            v173.origin.CGFloat x = MinX;
            v173.origin.CGFloat y = MinY;
            v173.size.CGFloat width = v86;
            v173.size.CGFloat height = v78;
            double v110 = CGRectGetMinY(v173);
            v174.origin.CGFloat x = v145;
            v174.origin.CGFloat y = v146;
            v174.size.CGFloat width = a5;
            v174.size.CGFloat height = a6;
            double v132 = v122 + v110 - CGRectGetMinY(v174);
          }
          double v65 = v133;
          uint64_t v34 = v129;
          double v63 = v140;
          break;
        case 5:
          double v88 = v143;
          double MinY = MinY + v140 - (v60 - v143);
          v169.origin.CGFloat x = MinX;
          v169.origin.CGFloat y = MinY;
          double v89 = MinX;
          double v90 = v126;
          v169.size.CGFloat width = v126;
          v169.size.CGFloat height = v60;
          double MaxY = CGRectGetMaxY(v169) - v88;
          double v78 = v60;
          double v86 = v90;
          double MinX = v89;
          goto LABEL_50;
        default:
          if (v140 < v60) {
            double v78 = v140;
          }
          double v64 = MinY + v139 + v140;
          goto LABEL_53;
      }
    }
    unint64_t v33 = v37 + 1;
    double v35 = v65 + v63;
    sub_1B07BD9F8((uint64_t)v153);
    int v32 = 1;
    double MinY = v64;
  }
  while (v130 != v37);
LABEL_62:
  swift_bridgeObjectRelease();
  a2 = v123;
  double v111 = v132;
  double v112 = v143;
  uint64_t v113 = v31 - 1;
  if (__OFSUB__(v31, 1))
  {
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
    JUMPOUT(0x1B07ECBD0);
  }
LABEL_63:
  double result = v35 + v139 * (double)(v113 & ~(v113 >> 63));
  CGFloat v115 = v146;
  *a2 = v145;
  a2[1] = v115;
  a2[2] = v144;
  a2[3] = result;
  a2[4] = v111;
  a2[5] = v112;
  return result;
}

uint64_t sub_1B07ECBEC(uint64_t a1, double a2, double a3)
{
  return VerticalStackLayout.measurements(fitting:in:)(a1, a2, a3);
}

unint64_t sub_1B07ECC0C()
{
  unint64_t result = qword_1E9B3B158;
  if (!qword_1E9B3B158)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3B158);
  }
  return result;
}

unint64_t sub_1B07ECC64()
{
  unint64_t result = qword_1E9B3B160;
  if (!qword_1E9B3B160)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3B160);
  }
  return result;
}

unint64_t sub_1B07ECCBC()
{
  unint64_t result = qword_1E9B3B168;
  if (!qword_1E9B3B168)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3B168);
  }
  return result;
}

unint64_t sub_1B07ECD14()
{
  unint64_t result = qword_1EB595658;
  if (!qword_1EB595658)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB595658);
  }
  return result;
}

unint64_t sub_1B07ECD6C()
{
  unint64_t result = qword_1EB595660;
  if (!qword_1EB595660)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB595660);
  }
  return result;
}

unint64_t sub_1B07ECDC4()
{
  unint64_t result = qword_1E9B3B170;
  if (!qword_1E9B3B170)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3B170);
  }
  return result;
}

uint64_t sub_1B07ECE18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8) + 16;
  swift_beginAccess();
  return sub_1B07BBD78(v3, a2);
}

uint64_t sub_1B07ECE68(uint64_t a1)
{
  sub_1B07BBD78(a1, (uint64_t)v2);
  return VerticalStackLayout.spacing.setter((uint64_t)v2);
}

uint64_t destroy for VerticalStackLayout()
{
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t _s5JetUI19VerticalStackLayoutVwCP_0(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for VerticalStackLayout(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for VerticalStackLayout(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for VerticalStackLayout(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for VerticalStackLayout(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for VerticalStackLayout()
{
  return &type metadata for VerticalStackLayout;
}

uint64_t getEnumTagSinglePayload for VerticalStackLayout.Alignment(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 5 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 5) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 5;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v8 = v6 - 6;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for VerticalStackLayout.Alignment(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B07ED1C4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for VerticalStackLayout.Alignment()
{
  return &type metadata for VerticalStackLayout.Alignment;
}

ValueMetadata *type metadata accessor for VerticalStackLayout.ExclusionCondition()
{
  return &type metadata for VerticalStackLayout.ExclusionCondition;
}

uint64_t initializeWithCopy for VerticalStackLayout.Child(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 40, a2 + 40);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  return a1;
}

uint64_t assignWithCopy for VerticalStackLayout.Child(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  return a1;
}

uint64_t assignWithTake for VerticalStackLayout.Child(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  return a1;
}

ValueMetadata *type metadata accessor for VerticalStackLayout.Child()
{
  return &type metadata for VerticalStackLayout.Child;
}

uint64_t getEnumTagSinglePayload for VerticalStackLayout.Child.Alignment(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for VerticalStackLayout.Child.Alignment(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B07ED4F8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for VerticalStackLayout.Child.Alignment()
{
  return &type metadata for VerticalStackLayout.Child.Alignment;
}

unsigned char *StackMeasurable.init(axis:skipEmptyChildren:children:)@<X0>(unsigned char *result@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(unsigned char *)a4 = *result;
  *(void *)(a4 + 8) = a3;
  *(unsigned char *)(a4 + 16) = a2;
  return result;
}

BOOL static StackMeasurable.Axis.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t StackMeasurable.Axis.hash(into:)()
{
  return sub_1B086A968();
}

uint64_t StackMeasurable.Axis.hashValue.getter()
{
  return sub_1B086A998();
}

void StackMeasurable.axis.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

unsigned char *StackMeasurable.axis.setter(unsigned char *result)
{
  *uint64_t v1 = *result;
  return result;
}

double (*StackMeasurable.axis.modify())(void)
{
  return nullsub_1;
}

uint64_t StackMeasurable.children.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t StackMeasurable.addChild(_:)(uint64_t a1)
{
  sub_1B07BBD78(a1, (uint64_t)v6);
  int v2 = *(void **)(v1 + 8);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    int v2 = sub_1B07CEF74(0, v2[2] + 1, 1, v2);
  }
  unint64_t v4 = v2[2];
  unint64_t v3 = v2[3];
  if (v4 >= v3 >> 1) {
    int v2 = sub_1B07CEF74((void *)(v3 > 1), v4 + 1, 1, v2);
  }
  v2[2] = v4 + 1;
  uint64_t result = sub_1B07BA8FC(v6, (uint64_t)&v2[5 * v4 + 4]);
  *(void *)(v1 + 8) = v2;
  return result;
}

unint64_t StackMeasurable.insertChild(_:at:)(unint64_t result, int64_t a2)
{
  if (*(void *)(*(void *)(v2 + 8) + 16) < a2)
  {
    __break(1u);
  }
  else if ((a2 & 0x8000000000000000) == 0)
  {
    sub_1B07BBD78(result, (uint64_t)v4);
    return sub_1B07D0804(a2, a2, (uint64_t)v4);
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall StackMeasurable.removeChild(at:)(Swift::Int at)
{
  sub_1B07EB7F4(at, (uint64_t)v1);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v1);
}

Swift::Void __swiftcall StackMeasurable.removeAllChildren()()
{
  swift_bridgeObjectRelease();
  *(void *)(v0 + 8) = MEMORY[0x1E4FBC860];
}

uint64_t StackMeasurable.skipEmptyChildren.getter()
{
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t StackMeasurable.skipEmptyChildren.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 16) = result;
  return result;
}

double (*StackMeasurable.skipEmptyChildren.modify())(void)
{
  return nullsub_1;
}

uint64_t sub_1B07ED7B4(uint64_t result, double a2, double a3)
{
  uint64_t v4 = *(void *)(v3 + 8);
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    uint64_t v6 = result;
    int v9 = *(unsigned __int8 *)(v3 + 16);
    uint64_t result = swift_bridgeObjectRetain();
    unint64_t v10 = 0;
    uint64_t v11 = v4 + 32;
    double v12 = 0.0;
    double v13 = 0.0;
LABEL_6:
    uint64_t v14 = v11 + 40 * v10;
    for (unint64_t i = v10; i < *(void *)(v4 + 16); ++i)
    {
      unint64_t v10 = i + 1;
      sub_1B07BBD78(v14, (uint64_t)v22);
      uint64_t v16 = v23;
      uint64_t v17 = v24;
      __swift_project_boxed_opaque_existential_1(v22, v23);
      (*(void (**)(uint64_t, uint64_t, uint64_t, double, double))(v17 + 8))(v6, v16, v17, a2, a3);
      if (!v9
        || ((double v20 = fabs(v19), fabs(v18) >= COERCE_DOUBLE(1)) ? (v21 = v20 < COERCE_DOUBLE(1)) : (v21 = 1), !v21))
      {
        if (v13 <= v18) {
          double v13 = v18;
        }
        double v12 = v12 + v19;
        uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
        uint64_t v11 = v4 + 32;
        if (v5 - 1 == i) {
          return swift_bridgeObjectRelease();
        }
        goto LABEL_6;
      }
      uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
      v14 += 40;
      if (v5 == v10) {
        return swift_bridgeObjectRelease();
      }
    }
    __break(1u);
  }
  return result;
}

double StackMeasurable.measurements(fitting:in:)(uint64_t a1, double a2, double a3)
{
  uint64_t v7 = *(void *)(v3 + 8);
  if (*(unsigned char *)v3)
  {
    char v8 = *(unsigned char *)(v3 + 16);
    LOBYTE(v18[0]) = 1;
    v18[1] = v7;
    char v19 = v8;
    sub_1B07ED7B4(a1, a2, a3);
    return v9;
  }
  else
  {
    uint64_t v11 = *(void *)(v7 + 16);
    if (v11)
    {
      uint64_t v12 = v7 + 32;
      swift_bridgeObjectRetain();
      double v13 = 0.0;
      double v10 = 0.0;
      do
      {
        sub_1B07BBD78(v12, (uint64_t)v18);
        uint64_t v14 = v20;
        uint64_t v15 = v21;
        __swift_project_boxed_opaque_existential_1(v18, v20);
        double v10 = v10
            + (*(double (**)(uint64_t, uint64_t, uint64_t, double, double))(v15 + 8))(a1, v14, v15, a2, a3);
        if (v13 <= v16) {
          double v13 = v16;
        }
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
        v12 += 40;
        --v11;
      }
      while (v11);
      swift_bridgeObjectRelease();
    }
    else
    {
      return 0.0;
    }
  }
  return v10;
}

unint64_t sub_1B07EDAC4()
{
  unint64_t result = qword_1E9B3B178;
  if (!qword_1E9B3B178)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3B178);
  }
  return result;
}

uint64_t sub_1B07EDB1C(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for StackMeasurable(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for StackMeasurable(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for StackMeasurable(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 17)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for StackMeasurable(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 17) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for StackMeasurable()
{
  return &type metadata for StackMeasurable;
}

unsigned char *storeEnumTagSinglePayload for StackMeasurable.Axis(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B07EDD60);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for StackMeasurable.Axis()
{
  return &type metadata for StackMeasurable.Axis;
}

uint64_t HorizontalStack.add(_:with:)(void *a1, void (*a2)(_OWORD *))
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[5];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  Measurable.placeable.getter(v3, v4, v6);
  HorizontalStack.add(_:with:)((uint64_t)v6, a2);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
}

uint64_t HorizontalStack.adding(_:with:)@<X0>(void *a1@<X0>, void (*a2)(_OWORD *)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[5];
  __swift_project_boxed_opaque_existential_1(a1, v7);
  Measurable.placeable.getter(v7, v8, v10);
  sub_1B07CEBE0(v4, a3);
  HorizontalStack.add(_:with:)((uint64_t)v10, a2);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
}

uint64_t HorizontalStack.insert(_:at:with:)(void *a1, int64_t a2, void (*a3)(unsigned char *))
{
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[5];
  __swift_project_boxed_opaque_existential_1(a1, v5);
  Measurable.placeable.getter(v5, v6, v8);
  HorizontalStack.insert(_:at:with:)((uint64_t)v8, a2, a3);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
}

uint64_t HorizontalStack.inserting(_:at:with:)@<X0>(void *a1@<X0>, int64_t a2@<X1>, void (*a3)(unsigned char *)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[5];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  Measurable.placeable.getter(v9, v10, v12);
  sub_1B07CEBE0(v5, a4);
  HorizontalStack.insert(_:at:with:)((uint64_t)v12, a2, a3);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
}

void NSAttributedString.languageAwareOutsets.getter()
{
  uint64_t v1 = v0;
  id v2 = objc_msgSend(self, sel_preferredFontForTextStyle_compatibleWithTraitCollection_, *MEMORY[0x1E4FB28C8], 0);
  id v3 = objc_msgSend(v0, sel_string);
  uint64_t v4 = sub_1B0869D98();
  uint64_t v6 = v5;

  uint64_t aBlock = v4;
  uint64_t v20 = v6;
  if (qword_1EB5964B8 != -1) {
    swift_once();
  }
  uint64_t v7 = sub_1B0869078();
  __swift_project_value_buffer(v7, (uint64_t)qword_1EB596390);
  sub_1B07B862C();
  sub_1B086A408();
  char v9 = v8;
  swift_bridgeObjectRelease();
  if (v9)
  {
  }
  else
  {
    long long v10 = *(_OWORD *)(MEMORY[0x1E4FB2848] + 16);
    long long v26 = *MEMORY[0x1E4FB2848];
    long long v27 = v10;
    char v25 = 0;
    id v11 = objc_msgSend(v1, sel_length);
    uint64_t v12 = *MEMORY[0x1E4FB06F8];
    uint64_t v13 = swift_allocObject();
    *(void *)(v13 + 16) = &v26;
    *(void *)(v13 + 24) = &v25;
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = sub_1B07CA434;
    *(void *)(v14 + 24) = v13;
    uint64_t v23 = sub_1B07DC094;
    uint64_t v24 = v14;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v20 = 1107296256;
    uint64_t v21 = sub_1B07C89E8;
    uint64_t v22 = &block_descriptor_3;
    uint64_t v15 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(v1, sel_enumerateAttribute_inRange_options_usingBlock_, v12, 0, v11, 0x100000, v15);
    _Block_release(v15);
    LOBYTE(v11) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if (v11)
    {
      __break(1u);
    }
    else
    {
      if (v25 != 1)
      {
        *(void *)&long long v26 = UIFont.languageAwareOutsets.getter();
        *((void *)&v26 + 1) = v16;
        *(void *)&long long v27 = v17;
        *((void *)&v27 + 1) = v18;
      }

      swift_release();
    }
  }
}

UIEdgeInsets __swiftcall String.languageAwareOutsets(whenUsedWith:)(UIFont whenUsedWith)
{
  if (qword_1EB5964B8 != -1) {
    swift_once();
  }
  uint64_t v1 = sub_1B0869078();
  __swift_project_value_buffer(v1, (uint64_t)qword_1EB596390);
  sub_1B07B862C();
  sub_1B086A408();
  if (v2)
  {
    double v3 = *MEMORY[0x1E4FB2848];
    double v4 = *(double *)(MEMORY[0x1E4FB2848] + 8);
    double v5 = *(double *)(MEMORY[0x1E4FB2848] + 16);
    double v6 = *(double *)(MEMORY[0x1E4FB2848] + 24);
  }
  else
  {
    double v3 = UIFont.languageAwareOutsets.getter();
  }
  result.right = v6;
  result.bottom = v5;
  result.left = v4;
  result.top = v3;
  return result;
}

uint64_t sub_1B07EE3A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB596268);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  double v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(a2 + 16)
    && (sub_1B07EEBB0(&qword_1E9B3B180),
        uint64_t v7 = sub_1B0869D08(),
        uint64_t v8 = -1 << *(unsigned char *)(a2 + 32),
        unint64_t v9 = v7 & ~v8,
        uint64_t v10 = a2 + 56,
        ((*(void *)(a2 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0))
  {
    uint64_t v15 = ~v8;
    uint64_t v16 = a2;
    id v11 = *(void (**)(char *, unint64_t, uint64_t))(v4 + 16);
    uint64_t v12 = *(void *)(v4 + 72);
    do
    {
      v11(v6, *(void *)(v16 + 48) + v12 * v9, v3);
      sub_1B07EEBB0(&qword_1E9B3B188);
      char v13 = sub_1B0869D58();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      if (v13) {
        break;
      }
      unint64_t v9 = (v9 + 1) & v15;
    }
    while (((*(void *)(v10 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  else
  {
    char v13 = 0;
  }
  return v13 & 1;
}

double UIFont.languageAwareOutsets.getter()
{
  int LanguageAwareOutsets = CTFontGetLanguageAwareOutsets();
  double result = 0.0;
  if (!LanguageAwareOutsets) {
    return *MEMORY[0x1E4FB2848];
  }
  return result;
}

UIEdgeInsets __swiftcall NSAttributedString.languageAwareOutsets(whenUsedWith:)(UIFont whenUsedWith)
{
  char v2 = v1;
  id v3 = objc_msgSend(v1, sel_string);
  uint64_t v4 = sub_1B0869D98();
  uint64_t v6 = v5;

  uint64_t aBlock = v4;
  uint64_t v28 = v6;
  if (qword_1EB5964B8 != -1) {
    swift_once();
  }
  uint64_t v7 = sub_1B0869078();
  __swift_project_value_buffer(v7, (uint64_t)qword_1EB596390);
  sub_1B07B862C();
  sub_1B086A408();
  char v9 = v8;
  swift_bridgeObjectRelease();
  if (v9)
  {
    double v20 = *MEMORY[0x1E4FB2848];
    double v21 = *(double *)(MEMORY[0x1E4FB2848] + 8);
    double v22 = *(double *)(MEMORY[0x1E4FB2848] + 16);
    double v23 = *(double *)(MEMORY[0x1E4FB2848] + 24);
  }
  else
  {
    long long v10 = *(_OWORD *)(MEMORY[0x1E4FB2848] + 16);
    long long v34 = *MEMORY[0x1E4FB2848];
    long long v35 = v10;
    char v33 = 0;
    id v11 = objc_msgSend(v2, sel_length);
    uint64_t v12 = *MEMORY[0x1E4FB06F8];
    uint64_t v13 = swift_allocObject();
    *(void *)(v13 + 16) = &v34;
    *(void *)(v13 + 24) = &v33;
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = sub_1B07EEC54;
    *(void *)(v14 + 24) = v13;
    uint64_t v31 = sub_1B07EEC58;
    uint64_t v32 = v14;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v28 = 1107296256;
    uint64_t v29 = sub_1B07C89E8;
    uint64_t v30 = &block_descriptor_14;
    uint64_t v15 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(v2, sel_enumerateAttribute_inRange_options_usingBlock_, v12, 0, v11, 0x100000, v15);
    _Block_release(v15);
    LOBYTE(v11) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if (v11)
    {
      __break(1u);
      goto LABEL_12;
    }
    if (v33 == 1)
    {
      double v21 = *((double *)&v34 + 1);
      double v20 = *(double *)&v34;
      double v23 = *((double *)&v35 + 1);
      double v22 = *(double *)&v35;
    }
    else
    {
      double v20 = UIFont.languageAwareOutsets.getter();
      double v21 = v24;
      double v22 = v25;
      double v23 = v26;
      *(double *)&long long v34 = v20;
      *((double *)&v34 + 1) = v24;
      *(double *)&long long v35 = v25;
      *((double *)&v35 + 1) = v26;
    }
    swift_release();
  }
  double v16 = v20;
  double v17 = v21;
  double v18 = v22;
  double v19 = v23;
LABEL_12:
  result.right = v19;
  result.bottom = v18;
  result.left = v17;
  result.top = v16;
  return result;
}

void sub_1B07EE900(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float64x2_t *a5, unsigned char *a6)
{
  sub_1B07B8884(a1, (uint64_t)v20);
  if (v21)
  {
    sub_1B07EEC14();
    if (swift_dynamicCast())
    {
      double v8 = UIFont.languageAwareOutsets.getter();
      float64_t v15 = v9;
      float64_t v16 = v8;
      float64_t v17 = v11;
      float64_t v18 = v10;

      v12.f64[0] = v16;
      v12.f64[1] = v15;
      int8x16_t v13 = vbslq_s8((int8x16_t)vcgeq_f64(v12, *a5), (int8x16_t)v12, *(int8x16_t *)a5);
      v12.f64[0] = v18;
      v12.f64[1] = v17;
      int8x16_t v14 = vbslq_s8((int8x16_t)vcgeq_f64(v12, a5[1]), (int8x16_t)v12, (int8x16_t)a5[1]);
      *a5 = (float64x2_t)v13;
      a5[1] = (float64x2_t)v14;
      *a6 = 1;
    }
  }
  else
  {
    sub_1B07B86F8((uint64_t)v20);
  }
}

uint64_t sub_1B07EE9C0()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1B07EE9D0()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t block_destroy_helper_3()
{
  return swift_release();
}

uint64_t sub_1B07EE9E8(uint64_t a1)
{
  uint64_t v1 = a1 + 56;
  uint64_t v2 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v3 = -1;
  if (v2 < 64) {
    uint64_t v3 = ~(-1 << v2);
  }
  uint64_t v4 = v3 & *(void *)(a1 + 56);
  int64_t v5 = (unint64_t)(v2 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v7 = 0;
  while (1)
  {
    if (v4)
    {
      v4 &= v4 - 1;
      goto LABEL_5;
    }
    int64_t v9 = v7 + 1;
    if (__OFADD__(v7, 1)) {
      break;
    }
    if (v9 >= v5) {
      goto LABEL_24;
    }
    uint64_t v10 = *(void *)(v1 + 8 * v9);
    ++v7;
    if (!v10)
    {
      int64_t v7 = v9 + 1;
      if (v9 + 1 >= v5) {
        goto LABEL_24;
      }
      uint64_t v10 = *(void *)(v1 + 8 * v7);
      if (!v10)
      {
        int64_t v7 = v9 + 2;
        if (v9 + 2 >= v5) {
          goto LABEL_24;
        }
        uint64_t v10 = *(void *)(v1 + 8 * v7);
        if (!v10)
        {
          int64_t v7 = v9 + 3;
          if (v9 + 3 >= v5) {
            goto LABEL_24;
          }
          uint64_t v10 = *(void *)(v1 + 8 * v7);
          if (!v10)
          {
            int64_t v11 = v9 + 4;
            if (v11 >= v5)
            {
LABEL_24:
              uint64_t v12 = 0;
              goto LABEL_25;
            }
            uint64_t v10 = *(void *)(v1 + 8 * v11);
            if (!v10)
            {
              while (1)
              {
                int64_t v7 = v11 + 1;
                if (__OFADD__(v11, 1)) {
                  goto LABEL_27;
                }
                if (v7 >= v5) {
                  goto LABEL_24;
                }
                uint64_t v10 = *(void *)(v1 + 8 * v7);
                ++v11;
                if (v10) {
                  goto LABEL_22;
                }
              }
            }
            int64_t v7 = v11;
          }
        }
      }
    }
LABEL_22:
    uint64_t v4 = (v10 - 1) & v10;
LABEL_5:
    swift_bridgeObjectRetain();
    char v8 = sub_1B0869ED8();
    uint64_t result = swift_bridgeObjectRelease();
    if (v8)
    {
      uint64_t v12 = 1;
LABEL_25:
      swift_release();
      return v12;
    }
  }
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_1B07EEB90()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1B07EEBA0()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1B07EEBB0(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EB596268);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1B07EEC14()
{
  unint64_t result = qword_1EB595950;
  if (!qword_1EB595950)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EB595950);
  }
  return result;
}

void Layout.withMeasurements(providedBy:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v8 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B07BBD78(v11, (uint64_t)v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v4, a2);
  sub_1B0842590(v14, (uint64_t)v10, a2, a3);
  a4[3] = &type metadata for PartialMeasurableLayout;
  a4[4] = &off_1F094F398;
  a4[5] = &off_1F094F388;
  *a4 = v12;
}

uint64_t dispatch thunk of Layout.placeChildren(relativeTo:in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

id ViewRecycler.didRecycle(_:)(void *a1)
{
  return sub_1B07EEDDC(a1);
}

id ViewRecycler.didDiscard(_:)(void *a1)
{
  return sub_1B07EEDC0(a1);
}

id ViewRecycler.didDequeue(_:)(void *a1)
{
  return sub_1B07EEDCC(a1);
}

id sub_1B07EED9C(void **a1)
{
  return sub_1B07EEDDC(*a1);
}

id sub_1B07EEDA8(void **a1)
{
  return sub_1B07EEDC0(*a1);
}

id sub_1B07EEDB4(void **a1)
{
  return sub_1B07EEDCC(*a1);
}

id sub_1B07EEDC0(void *a1)
{
  return objc_msgSend(a1, sel_removeFromSuperview);
}

id sub_1B07EEDCC(void *a1)
{
  return objc_msgSend(a1, sel_setHidden_, 0);
}

id sub_1B07EEDDC(void *a1)
{
  return objc_msgSend(a1, sel_setHidden_, 1);
}

uint64_t sub_1B07EEDEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 8);
}

uint64_t type metadata accessor for ViewRecycler()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1B07EEE0C()
{
  uint64_t v1 = 0x65756C6176;
  if (*v0 != 1) {
    uint64_t v1 = 0x5474736575716572;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 7955819;
  }
}

uint64_t sub_1B07EEE64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1B07F0328(a1, a2);
  *a3 = result;
  return result;
}

void sub_1B07EEE8C(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_1B07EEE98(uint64_t a1)
{
  unint64_t v2 = sub_1B07EF0F0();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B07EEED4(uint64_t a1)
{
  unint64_t v2 = sub_1B07EF0F0();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t DSLocalizationInfoLog.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3B1A8);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B07EF0F0();
  sub_1B086A9E8();
  v8[15] = 0;
  sub_1B086A7F8();
  if (!v1)
  {
    v8[14] = 1;
    sub_1B086A7F8();
    type metadata accessor for DSLocalizationInfoLog();
    v8[13] = 2;
    sub_1B0869158();
    sub_1B07EF814(&qword_1E9B3B1B8, MEMORY[0x1E4F27928]);
    sub_1B086A828();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_1B07EF0F0()
{
  unint64_t result = qword_1E9B3B1B0;
  if (!qword_1E9B3B1B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3B1B0);
  }
  return result;
}

uint64_t type metadata accessor for DSLocalizationInfoLog()
{
  uint64_t result = qword_1E9B3B1E8;
  if (!qword_1E9B3B1E8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t DSLocalizationInfoLog.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v23 = a2;
  uint64_t v4 = sub_1B0869158();
  uint64_t v22 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3B1C0);
  uint64_t v24 = *(void *)(v7 - 8);
  uint64_t v25 = v7;
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DSLocalizationInfoLog();
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (uint64_t *)((char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = a1[3];
  double v26 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v13);
  sub_1B07EF0F0();
  sub_1B086A9C8();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
  }
  uint64_t v14 = v24;
  float64_t v15 = v6;
  char v29 = 0;
  uint64_t v16 = (uint64_t)v12;
  *uint64_t v12 = sub_1B086A798();
  v12[1] = v17;
  char v28 = 1;
  _OWORD v12[2] = sub_1B086A798();
  void v12[3] = v18;
  char v27 = 2;
  sub_1B07EF814(&qword_1E9B3B1C8, MEMORY[0x1E4F27928]);
  uint64_t v21 = v15;
  uint64_t v19 = v25;
  sub_1B086A7C8();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v9, v19);
  (*(void (**)(uint64_t, char *, uint64_t))(v22 + 32))(v16 + *(int *)(v10 + 24), v21, v4);
  sub_1B07EF4EC(v16, v23);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
  return sub_1B07EF550(v16);
}

uint64_t sub_1B07EF4EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DSLocalizationInfoLog();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B07EF550(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DSLocalizationInfoLog();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1B07EF5AC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return DSLocalizationInfoLog.init(from:)(a1, a2);
}

uint64_t sub_1B07EF5C4(void *a1)
{
  return DSLocalizationInfoLog.encode(to:)(a1);
}

void sub_1B07EF5DC()
{
  qword_1E9B3B190 = MEMORY[0x1E4FBC860];
  *(void *)algn_1E9B3B198 = 0xD000000000000022;
  qword_1E9B3B1A0 = 0x80000001B086F3A0;
}

uint64_t static DSLocalizationDiagnosticsCollector.shared.getter@<X0>(void *a1@<X8>)
{
  if (qword_1E9B3A670 != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)algn_1E9B3B198;
  uint64_t v3 = qword_1E9B3B1A0;
  *a1 = qword_1E9B3B190;
  a1[1] = v2;
  a1[2] = v3;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t DSLocalizationDiagnosticsCollector.name.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t DSLocalizationDiagnosticsCollector.getDiagnosticInfo()()
{
  sub_1B0869008();
  swift_allocObject();
  sub_1B0868FF8();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3B1D0);
  sub_1B07EF770();
  uint64_t v0 = sub_1B0868FE8();
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

unint64_t sub_1B07EF770()
{
  unint64_t result = qword_1E9B3B1D8;
  if (!qword_1E9B3B1D8)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1E9B3B1D0);
    sub_1B07EF814(&qword_1E9B3B1E0, (void (*)(uint64_t))type metadata accessor for DSLocalizationInfoLog);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3B1D8);
  }
  return result;
}

uint64_t sub_1B07EF814(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

Swift::Void __swiftcall DSLocalizationDiagnosticsCollector.addLocalizationLog(by:and:)(Swift::String by, Swift::String and)
{
  object = and._object;
  uint64_t countAndFlagsBits = and._countAndFlagsBits;
  uint64_t v5 = by._object;
  uint64_t v6 = by._countAndFlagsBits;
  uint64_t v7 = type metadata accessor for DSLocalizationInfoLog();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v10 = (uint64_t *)((char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1B0869148();
  *uint64_t v10 = v6;
  v10[1] = (uint64_t)v5;
  v10[2] = countAndFlagsBits;
  void v10[3] = (uint64_t)object;
  uint64_t v11 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v11 = (void *)sub_1B07CF0AC(0, v11[2] + 1, 1, v11);
  }
  unint64_t v13 = v11[2];
  unint64_t v12 = v11[3];
  if (v13 >= v12 >> 1) {
    uint64_t v11 = (void *)sub_1B07CF0AC(v12 > 1, v13 + 1, 1, v11);
  }
  long long v11[2] = v13 + 1;
  sub_1B07EFA9C((uint64_t)v10, (uint64_t)v11+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(void *)(v8 + 72) * v13);
  *uint64_t v2 = v11;
}

Swift::Void __swiftcall DSLocalizationDiagnosticsCollector.clearLogs()()
{
  swift_bridgeObjectRelease();
  void *v0 = MEMORY[0x1E4FBC860];
}

uint64_t sub_1B07EF9EC()
{
  sub_1B0869008();
  swift_allocObject();
  sub_1B0868FF8();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3B1D0);
  sub_1B07EF770();
  uint64_t v0 = sub_1B0868FE8();
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1B07EFA9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DSLocalizationInfoLog();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t *initializeBufferWithCopyOfBuffer for DSLocalizationInfoLog(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    uint64_t *v3 = *a2;
    uint64_t v3 = (uint64_t *)(v12 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    uint64_t v7 = *(int *)(a3 + 24);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = sub_1B0869158();
    uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11(v8, v9, v10);
  }
  return v3;
}

uint64_t destroy for DSLocalizationInfoLog(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = sub_1B0869158();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

void *initializeWithCopy for DSLocalizationInfoLog(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_1B0869158();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  return a1;
}

void *assignWithCopy for DSLocalizationInfoLog(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_1B0869158();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_OWORD *initializeWithTake for DSLocalizationInfoLog(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = sub_1B0869158();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

void *assignWithTake for DSLocalizationInfoLog(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = sub_1B0869158();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for DSLocalizationInfoLog(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B07EFF08);
}

uint64_t sub_1B07EFF08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_1B0869158();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for DSLocalizationInfoLog(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B07EFFCC);
}

uint64_t sub_1B07EFFCC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_1B0869158();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 24);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1B07F0074()
{
  uint64_t result = sub_1B0869158();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for DSLocalizationDiagnosticsCollector()
{
  return &type metadata for DSLocalizationDiagnosticsCollector;
}

unsigned char *storeEnumTagSinglePayload for DSLocalizationInfoLog.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B07F01E8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DSLocalizationInfoLog.CodingKeys()
{
  return &type metadata for DSLocalizationInfoLog.CodingKeys;
}

unint64_t sub_1B07F0224()
{
  unint64_t result = qword_1E9B3B1F8;
  if (!qword_1E9B3B1F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3B1F8);
  }
  return result;
}

unint64_t sub_1B07F027C()
{
  unint64_t result = qword_1E9B3B200;
  if (!qword_1E9B3B200)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3B200);
  }
  return result;
}

unint64_t sub_1B07F02D4()
{
  unint64_t result = qword_1E9B3B208;
  if (!qword_1E9B3B208)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3B208);
  }
  return result;
}

uint64_t sub_1B07F0328(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 7955819 && a2 == 0xE300000000000000;
  if (v2 || (sub_1B086A8A8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65756C6176 && a2 == 0xE500000000000000 || (sub_1B086A8A8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x5474736575716572 && a2 == 0xEB00000000656D69)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = sub_1B086A8A8();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

id sub_1B07F0480()
{
  if (qword_1EB595E28 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)qword_1EB595E30;
  qword_1E9B3B210 = qword_1EB595E30;

  return v0;
}

uint64_t Models.Paragraph.Alignment.init(rawValue:)@<X0>(char *a1@<X8>)
{
  unint64_t v2 = sub_1B086A778();
  uint64_t result = swift_bridgeObjectRelease();
  char v4 = 5;
  if (v2 < 5) {
    char v4 = v2;
  }
  *a1 = v4;
  return result;
}

void *static Models.Paragraph.Alignment.allCases.getter()
{
  return &unk_1F0952140;
}

uint64_t Models.Paragraph.Alignment.rawValue.getter()
{
  uint64_t result = 1952867692;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x7265746E6563;
      break;
    case 2:
      uint64_t result = 0x7468676972;
      break;
    case 3:
      uint64_t result = 0x656966697473756ALL;
      break;
    case 4:
      uint64_t result = 0x657A696C61636F6CLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1B07F05E8(unsigned __int8 *a1, char *a2)
{
  return sub_1B084A540(*a1, *a2);
}

uint64_t sub_1B07F05F4()
{
  return sub_1B086A998();
}

uint64_t sub_1B07F06DC()
{
  sub_1B0869E38();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B07F07AC()
{
  return sub_1B086A998();
}

uint64_t sub_1B07F0890@<X0>(char *a1@<X8>)
{
  return Models.Paragraph.Alignment.init(rawValue:)(a1);
}

void sub_1B07F089C(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE400000000000000;
  uint64_t v3 = 1952867692;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE600000000000000;
      uint64_t v3 = 0x7265746E6563;
      goto LABEL_3;
    case 2:
      *a1 = 0x7468676972;
      a1[1] = 0xE500000000000000;
      return;
    case 3:
      uint64_t v4 = 0x656966697473756ALL;
      goto LABEL_7;
    case 4:
      uint64_t v4 = 0x657A696C61636F6CLL;
LABEL_7:
      *a1 = v4;
      a1[1] = 0xE900000000000064;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

void sub_1B07F0944(void *a1@<X8>)
{
  *a1 = &unk_1F0952290;
}

uint64_t Models.Paragraph.Style.init(rawValue:)@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2 = sub_1B086A778();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

void *static Models.Paragraph.Style.allCases.getter()
{
  return &unk_1F0951FF0;
}

uint64_t Models.Paragraph.Style.rawValue.getter()
{
  return 0x647261646E617473;
}

uint64_t sub_1B07F09D0()
{
  return 1;
}

uint64_t sub_1B07F09D8()
{
  return sub_1B086A998();
}

uint64_t sub_1B07F0A2C()
{
  return sub_1B0869E38();
}

uint64_t sub_1B07F0A44()
{
  return sub_1B086A998();
}

uint64_t sub_1B07F0A94@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2 = sub_1B086A778();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

void sub_1B07F0AE8(void *a1@<X8>)
{
  *a1 = 0x647261646E617473;
  a1[1] = 0xE800000000000000;
}

void sub_1B07F0B04(void *a1@<X8>)
{
  *a1 = &unk_1F0952118;
}

uint64_t Models.Paragraph.init(text:style:alignment:isCollapsed:wantsCollapsedNewlines:impressionMetrics:)@<X0>(uint64_t *a1@<X0>, char *a2@<X2>, char a3@<W3>, char a4@<W4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v10 = *a1;
  uint64_t v11 = a1[1];
  char v12 = *((unsigned char *)a1 + 16);
  char v13 = *a2;
  uint64_t v14 = (int *)type metadata accessor for Models.Paragraph();
  uint64_t v15 = a6 + v14[5];
  *(void *)uint64_t v15 = v10;
  *(void *)(v15 + 8) = v11;
  *(unsigned char *)(v15 + 16) = v12;
  v29[0] = v10;
  v29[1] = v11;
  char v30 = v12;
  id v16 = sub_1B07F1E94((uint64_t)v29);
  uint64_t v17 = v16;
  *(void *)(a6 + v14[6]) = v16;
  if (a4)
  {
    id v18 = objc_allocWithZone(MEMORY[0x1E4F28E48]);
    id v19 = v17;
    id v20 = objc_msgSend(v18, sel_initWithAttributedString_, v19);
    id v28 = objc_msgSend(v20, sel_length);
    id v21 = objc_msgSend(v20, sel_mutableString);
    LOBYTE(v18) = v13;
    char v22 = a3;
    uint64_t v23 = a5;
    uint64_t v24 = (void *)sub_1B0869D68();
    uint64_t v25 = (void *)sub_1B0869D68();
    objc_msgSend(v21, sel_replaceOccurrencesOfString_withString_options_range_, v24, v25, 1024, 0, v28);

    a5 = v23;
    a3 = v22;
    char v13 = (char)v18;

    *(void *)(a6 + v14[7]) = v20;
  }
  else
  {
    *(void *)(a6 + v14[7]) = v16;
    id v26 = v16;
  }
  *(unsigned char *)(a6 + v14[8]) = v13;
  *(unsigned char *)(a6 + v14[10]) = a3 & 1;

  return sub_1B07F2374(a5, a6);
}

uint64_t type metadata accessor for Models.Paragraph()
{
  uint64_t result = qword_1E9B3B2C8;
  if (!qword_1E9B3B2C8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t Models.Paragraph.init(deserializing:using:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v72 = a2;
  uint64_t v67 = a3;
  uint64_t v69 = type metadata accessor for Models.Paragraph();
  MEMORY[0x1F4188790](v69);
  double v68 = (char *)&v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3AFE8);
  MEMORY[0x1F4188790](v5 - 8);
  double v66 = (char *)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1B0869728();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  double v65 = (char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  char v12 = (char *)&v55 - v11;
  uint64_t v71 = sub_1B08695F8();
  uint64_t v13 = *(void *)(v71 - 8);
  MEMORY[0x1F4188790](v71);
  double v64 = (char *)&v55 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  char v62 = (char *)&v55 - v16;
  MEMORY[0x1F4188790](v17);
  id v19 = (char *)&v55 - v18;
  MEMORY[0x1F4188790](v20);
  char v22 = (char *)&v55 - v21;
  sub_1B0869608();
  double v63 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v63(v12, v72, v7);
  uint64_t v23 = v70;
  Models.ProgrammedText.init(deserializing:using:)((uint64_t)v22, (uint64_t)v12, v75);
  if (v23)
  {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v72, v7);
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(a1, v71);
  }
  else
  {
    uint64_t v60 = 0;
    uint64_t v61 = v8;
    uint64_t v58 = v75[0];
    uint64_t v57 = v75[1];
    int v56 = v76;
    uint64_t v70 = v7;
    uint64_t v25 = a1;
    sub_1B0869608();
    sub_1B07F23DC();
    sub_1B0869558();
    id v26 = *(void (**)(char *, uint64_t))(v13 + 8);
    uint64_t v27 = v71;
    v26(v19, v71);
    sub_1B0869608();
    sub_1B07F2430();
    sub_1B0869558();
    v26(v19, v27);
    int v77 = v78;
    id v28 = v62;
    sub_1B0869608();
    char v29 = sub_1B08695A8();
    v26(v28, v27);
    int v59 = v29 & 1;
    char v30 = v64;
    sub_1B0869608();
    int v55 = sub_1B08695A8();
    double v64 = (char *)(v13 + 8);
    char v62 = (char *)v26;
    v26(v30, v27);
    sub_1B0869948();
    sub_1B0869608();
    uint64_t v31 = v72;
    v63(v65, v72, v70);
    uint64_t v32 = (uint64_t)v66;
    sub_1B0869928();
    uint64_t v34 = (uint64_t)v68;
    char v33 = (int *)v69;
    long long v35 = &v68[*(int *)(v69 + 20)];
    uint64_t v36 = v58;
    uint64_t v37 = v57;
    *(void *)long long v35 = v58;
    *((void *)v35 + 1) = v37;
    char v38 = v56;
    v35[16] = v56;
    v73[0] = v36;
    v73[1] = v37;
    char v74 = v38;
    id v39 = sub_1B07F1E94((uint64_t)v73);
    double v40 = v39;
    *(void *)(v34 + v33[6]) = v39;
    uint64_t v41 = v31;
    if (v55)
    {
      id v44 = objc_allocWithZone(MEMORY[0x1E4F28E48]);
      id v45 = v40;
      id v46 = objc_msgSend(v44, sel_initWithAttributedString_, v45);
      id v47 = objc_msgSend(v46, sel_length);
      id v48 = objc_msgSend(v46, sel_mutableString);
      double v65 = v25;
      id v49 = v48;
      id v50 = (void *)sub_1B0869D68();
      double v51 = (void *)sub_1B0869D68();
      id v52 = v47;
      uint64_t v34 = (uint64_t)v68;
      objc_msgSend(v49, sel_replaceOccurrencesOfString_withString_options_range_, v50, v51, 1024, 0, v52);

      char v33 = (int *)v69;
      uint64_t v25 = v65;

      uint64_t v42 = v71;
      *(void *)(v34 + v33[7]) = v46;
    }
    else
    {
      uint64_t v42 = v27;
      *(void *)(v34 + v33[7]) = v39;
      id v43 = v39;
    }
    uint64_t v53 = v67;
    uint64_t v54 = v61;
    *(unsigned char *)(v34 + v33[8]) = v77;
    *(unsigned char *)(v34 + v33[10]) = v59;
    sub_1B07F2374(v32, v34);
    sub_1B07F2484(v34, v53);
    (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v41, v70);
    return ((uint64_t (*)(char *, uint64_t))v62)(v25, v42);
  }
}

uint64_t Models.Paragraph.impressionMetrics.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1B07F24E8(v1, a1);
}

id Models.Paragraph.text.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Models.Paragraph() + 20);
  uint64_t v4 = *(void **)v3;
  uint64_t v5 = *(void *)(v3 + 8);
  char v6 = *(unsigned char *)(v3 + 16);
  *(void *)a1 = *(void *)v3;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;

  return sub_1B07B2F10(v4, v5, v6);
}

id Models.Paragraph.attributedText.getter()
{
  uint64_t v1 = *(void **)(v0 + *(int *)(type metadata accessor for Models.Paragraph() + 24));

  return v1;
}

id Models.Paragraph.collapsedAttributedText.getter()
{
  uint64_t v1 = *(void **)(v0 + *(int *)(type metadata accessor for Models.Paragraph() + 28));

  return v1;
}

uint64_t Models.Paragraph.alignment.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = type metadata accessor for Models.Paragraph();
  *a1 = *(unsigned char *)(v1 + *(int *)(result + 32));
  return result;
}

uint64_t Models.Paragraph.isCollapsed.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for Models.Paragraph() + 40));
}

unint64_t sub_1B07F1510(char a1)
{
  unint64_t result = 1954047348;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x656C797473;
      break;
    case 2:
      unint64_t result = 0x6E656D6E67696C61;
      break;
    case 3:
      unint64_t result = 0x70616C6C6F437369;
      break;
    case 4:
      unint64_t result = 0xD000000000000016;
      break;
    case 5:
      unint64_t result = 0xD000000000000011;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1B07F15E8@<X0>(uint64_t a1@<X8>)
{
  return sub_1B07F24E8(v1, a1);
}

uint64_t sub_1B07F15F4@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return Models.Paragraph.init(deserializing:using:)(a1, a2, a3);
}

uint64_t sub_1B07F160C()
{
  return sub_1B0869F58();
}

uint64_t sub_1B07F166C()
{
  return sub_1B0869F58();
}

unint64_t sub_1B07F16CC()
{
  return sub_1B07F1510(*v0);
}

uint64_t sub_1B07F16D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1B07F3AC0(a1, a2);
  *a3 = result;
  return result;
}

void sub_1B07F16FC(unsigned char *a1@<X8>)
{
  *a1 = 6;
}

uint64_t sub_1B07F1708(uint64_t a1)
{
  unint64_t v2 = sub_1B07F2550();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B07F1744(uint64_t a1)
{
  unint64_t v2 = sub_1B07F2550();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t Models.Paragraph.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v53 = a2;
  uint64_t v52 = type metadata accessor for Models.Paragraph();
  MEMORY[0x1F4188790](v52);
  uint64_t v4 = (char *)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3AFE8);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v41 - v9;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3B228);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = a1[3];
  uint64_t v54 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v15);
  sub_1B07F2550();
  uint64_t v16 = (uint64_t)v55;
  sub_1B086A9C8();
  if (!v16)
  {
    id v50 = v4;
    double v51 = v7;
    int v55 = v10;
    uint64_t v17 = v12;
    char v60 = 0;
    sub_1B07F25A4();
    sub_1B086A7C8();
    uint64_t v18 = v56;
    uint64_t v19 = v57;
    int v20 = v58;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3B240);
    char v60 = 1;
    sub_1B07F2634(&qword_1E9B3B248, &qword_1E9B3B240, (void (*)(void))sub_1B07F25F8);
    sub_1B086A788();
    int v59 = v20;
    uint64_t v48 = v19;
    id v49 = v18;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3B268);
    char v60 = 2;
    sub_1B07F2634(&qword_1E9B3B270, &qword_1E9B3B268, (void (*)(void))sub_1B07F26F4);
    sub_1B086A788();
    if (v56 - 5 >= 2) {
      int v21 = v56;
    }
    else {
      int v21 = 4;
    }
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3AED8);
    char v60 = 3;
    sub_1B07F2634((unint64_t *)&qword_1E9B3AEE0, &qword_1E9B3AED8, (void (*)(void))sub_1B07F2784);
    sub_1B086A788();
    int v47 = v21;
    int v23 = v56;
    BOOL v24 = (v56 & 0xFE) != 2;
    char v60 = 4;
    sub_1B086A788();
    LODWORD(v44) = v24;
    int v45 = v23;
    LODWORD(v46) = v56;
    sub_1B0869948();
    LOBYTE(v56) = 5;
    sub_1B07F3D78((unint64_t *)&qword_1E9B3B290, MEMORY[0x1E4F713A0]);
    uint64_t v25 = (uint64_t)v55;
    sub_1B086A788();
    char v26 = v59;
    v45 &= v44;
    int v27 = v46 & 0xFE;
    sub_1B07F24E8(v25, (uint64_t)v51);
    id v28 = (int *)v52;
    char v30 = v49;
    uint64_t v29 = (uint64_t)v50;
    uint64_t v31 = &v50[*(int *)(v52 + 20)];
    uint64_t v32 = v48;
    *(void *)uint64_t v31 = v49;
    *((void *)v31 + 1) = v32;
    v31[16] = v26;
    int v56 = v30;
    uint64_t v57 = v32;
    unsigned __int8 v58 = v26;
    sub_1B07B2F10(v30, v32, v26);
    id v33 = sub_1B07F1E94((uint64_t)&v56);
    uint64_t v34 = v33;
    *(void *)(v29 + v28[6]) = v33;
    if (v27 == 2 || (v46 & 1) == 0)
    {
      *(void *)(v29 + v28[7]) = v33;
      id v39 = v33;
    }
    else
    {
      id v35 = objc_allocWithZone(MEMORY[0x1E4F28E48]);
      id v44 = v34;
      id v36 = objc_msgSend(v35, sel_initWithAttributedString_, v44);
      id v46 = v36;
      id v43 = objc_msgSend(v36, sel_length);
      id v37 = objc_msgSend(v36, sel_mutableString);
      char v38 = (void *)sub_1B0869D68();
      id v42 = (id)sub_1B0869D68();
      objc_msgSend(v37, sel_replaceOccurrencesOfString_withString_options_range_, v38, v42, 1024, 0, v43);

      *(void *)(v29 + v28[7]) = v46;
    }
    uint64_t v40 = v53;
    *(unsigned char *)(v29 + v28[8]) = v47;
    *(unsigned char *)(v29 + v28[10]) = v45;
    sub_1B07F2374((uint64_t)v51, v29);
    sub_1B07F2484(v29, v40);
    sub_1B07BE788(v30, v48, v59);
    sub_1B07F27F0((uint64_t)v55);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v14, v11);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v54);
}

uint64_t sub_1B07F1E7C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return Models.Paragraph.init(from:)(a1, a2);
}

id sub_1B07F1E94(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 16);
  if (v1 == 255)
  {
    id v23 = objc_allocWithZone(MEMORY[0x1E4F28B18]);
    return objc_msgSend(v23, sel_init);
  }
  else
  {
    unint64_t v2 = *(void **)a1;
    uint64_t v3 = *(void *)(a1 + 8);
    uint64_t v4 = self;
    id v5 = (id)*MEMORY[0x1E4FB2950];
    sub_1B07F3D48(v2, v3, v1);
    if (qword_1E9B3A678 != -1) {
      swift_once();
    }
    id v6 = objc_msgSend(v4, sel_preferredFontForTextStyle_compatibleWithTraitCollection_, v5, qword_1E9B3B210);

    id v7 = v6;
    id v8 = sub_1B08107A4();
    uint64_t v9 = (void *)sub_1B0810938();
    uint64_t v10 = (void *)sub_1B0810938();

    if (v1)
    {
      sub_1B07B2F10(v2, v3, 1);
      id v24 = objc_msgSend(v2, sel_string);
      uint64_t v25 = sub_1B0869D98();
      uint64_t v27 = v26;

      sub_1B07F3D60(v2, v3, v1);
      sub_1B07F3D60(v2, v3, v1);
      v39[0] = 10;
      v39[1] = 0xE100000000000000;
      v39[2] = (uint64_t)v7;
      v39[3] = (uint64_t)v8;
      v39[4] = 161644770;
      v39[5] = 0xA400000000000000;
      v39[6] = (uint64_t)v9;
      v39[7] = 606245;
      v39[8] = 0xE300000000000000;
      v39[9] = (uint64_t)v10;
      char v40 = 0;
      id v28 = objc_allocWithZone((Class)type metadata accessor for NQMLStringGenerator());
      swift_bridgeObjectRetain();
      id v29 = v7;
      id v30 = v8;
      swift_bridgeObjectRetain();
      id v31 = v9;
      swift_bridgeObjectRetain();
      id v32 = v10;
      id v33 = sub_1B085F8C4(v25, v27, v39);
      objc_msgSend(*(id *)&v33[OBJC_IVAR____TtC5JetUIP33_F1C4EBA6165AEBFE43471B55508F17DF19NQMLStringGenerator_parser], sel_parse);
      uint64_t v34 = OBJC_IVAR____TtC5JetUIP33_F1C4EBA6165AEBFE43471B55508F17DF19NQMLStringGenerator_accumulator;
      id v35 = objc_msgSend(*(id *)&v33[OBJC_IVAR____TtC5JetUIP33_F1C4EBA6165AEBFE43471B55508F17DF19NQMLStringGenerator_accumulator], sel_mutableString);
      if (qword_1E9B3A708 != -1) {
        swift_once();
      }
      sub_1B080B034((void *)qword_1E9B3BDD8);

      id v36 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28B18]), sel_initWithAttributedString_, *(void *)&v33[v34]);
      sub_1B07F3D60(v2, v3, v1);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      return v36;
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E9B3BED0);
      initeCGFloat d = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1B086D960;
      char v38 = v9;
      uint64_t v12 = (void *)*MEMORY[0x1E4FB0738];
      *(void *)(inited + 32) = *MEMORY[0x1E4FB0738];
      uint64_t v13 = sub_1B07C7B80(0, (unint64_t *)&unk_1E9B3BEE0);
      *(void *)(inited + 40) = v8;
      uint64_t v14 = (void *)*MEMORY[0x1E4FB06F8];
      *(void *)(inited + 64) = v13;
      *(void *)(inited + 72) = v14;
      *(void *)(inited + 104) = sub_1B07C7B80(0, (unint64_t *)&qword_1EB595950);
      *(void *)(inited + 80) = v7;
      sub_1B07F3D48(v2, v3, v1);
      id v37 = v7;
      id v15 = v12;
      id v16 = v8;
      id v17 = v14;
      sub_1B07D6098(inited);
      id v18 = objc_allocWithZone(MEMORY[0x1E4F28B18]);
      uint64_t v19 = (void *)sub_1B0869D68();
      sub_1B07F3D60(v2, v3, v1);
      type metadata accessor for Key(0);
      sub_1B07F3D78((unint64_t *)&qword_1EB595E20, type metadata accessor for Key);
      int v20 = (void *)sub_1B0869CA8();
      swift_bridgeObjectRelease();
      id v21 = objc_msgSend(v18, sel_initWithString_attributes_, v19, v20);

      sub_1B07F3D60(v2, v3, v1);
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v21;
    }
  }
}

uint64_t sub_1B07F2374(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3AFE8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1B07F23DC()
{
  unint64_t result = qword_1E9B3B218;
  if (!qword_1E9B3B218)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3B218);
  }
  return result;
}

unint64_t sub_1B07F2430()
{
  unint64_t result = qword_1E9B3B220;
  if (!qword_1E9B3B220)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3B220);
  }
  return result;
}

uint64_t sub_1B07F2484(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Models.Paragraph();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B07F24E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3AFE8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1B07F2550()
{
  unint64_t result = qword_1E9B3B230;
  if (!qword_1E9B3B230)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3B230);
  }
  return result;
}

unint64_t sub_1B07F25A4()
{
  unint64_t result = qword_1E9B3B238;
  if (!qword_1E9B3B238)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3B238);
  }
  return result;
}

uint64_t sub_1B07F25F8()
{
  return sub_1B07F2634(&qword_1E9B3B250, &qword_1E9B3B258, (void (*)(void))sub_1B07F26A0);
}

uint64_t sub_1B07F2634(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1B07F26A0()
{
  unint64_t result = qword_1E9B3B260;
  if (!qword_1E9B3B260)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3B260);
  }
  return result;
}

uint64_t sub_1B07F26F4()
{
  return sub_1B07F2634(&qword_1E9B3B278, &qword_1E9B3B280, (void (*)(void))sub_1B07F2730);
}

unint64_t sub_1B07F2730()
{
  unint64_t result = qword_1E9B3B288;
  if (!qword_1E9B3B288)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3B288);
  }
  return result;
}

unint64_t sub_1B07F2784()
{
  unint64_t result = qword_1E9B3AEE8;
  if (!qword_1E9B3AEE8)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1E9B3AEF0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3AEE8);
  }
  return result;
}

uint64_t sub_1B07F27F0(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3AFE8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1B07F2854()
{
  unint64_t result = qword_1E9B3B298;
  if (!qword_1E9B3B298)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3B298);
  }
  return result;
}

uint64_t sub_1B07F28A8()
{
  return sub_1B07F2950(&qword_1E9B3B2A0, &qword_1E9B3B2A8);
}

unint64_t sub_1B07F28D4()
{
  unint64_t result = qword_1E9B3B2B0;
  if (!qword_1E9B3B2B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3B2B0);
  }
  return result;
}

uint64_t sub_1B07F2928()
{
  return sub_1B07F2950(&qword_1E9B3B2B8, &qword_1E9B3B2C0);
}

uint64_t sub_1B07F2950(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *_s9ParagraphVwCP(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_1B0869948();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3AFE8);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    uint64_t v11 = a3[5];
    uint64_t v12 = (char *)a1 + v11;
    uint64_t v13 = (char *)a2 + v11;
    uint64_t v14 = *(void **)v13;
    uint64_t v15 = *((void *)v13 + 1);
    char v16 = v13[16];
    sub_1B07B2F10(*(void **)v13, v15, v16);
    *(void *)uint64_t v12 = v14;
    *((void *)v12 + 1) = v15;
    v12[16] = v16;
    uint64_t v17 = a3[6];
    uint64_t v18 = a3[7];
    uint64_t v19 = *(void **)((char *)a2 + v17);
    *(uint64_t *)((char *)a1 + v17) = (uint64_t)v19;
    int v20 = *(void **)((char *)a2 + v18);
    *(uint64_t *)((char *)a1 + v18) = (uint64_t)v20;
    *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
    *((unsigned char *)a1 + a3[10]) = *((unsigned char *)a2 + a3[10]);
    id v21 = v19;
    id v22 = v20;
  }
  return a1;
}

void _s9ParagraphVwxx(uint64_t a1, int *a2)
{
  uint64_t v4 = sub_1B0869948();
  uint64_t v5 = *(void *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  }
  sub_1B07BE788(*(void **)(a1 + a2[5]), *(void *)(a1 + a2[5] + 8), *(unsigned char *)(a1 + a2[5] + 16));

  id v6 = *(void **)(a1 + a2[7]);
}

char *_s9ParagraphVwcp(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1B0869948();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3AFE8);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v9 = a3[5];
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  uint64_t v12 = *(void **)v11;
  uint64_t v13 = *((void *)v11 + 1);
  char v14 = v11[16];
  sub_1B07B2F10(*(void **)v11, v13, v14);
  *(void *)uint64_t v10 = v12;
  *((void *)v10 + 1) = v13;
  v10[16] = v14;
  uint64_t v15 = a3[6];
  uint64_t v16 = a3[7];
  uint64_t v17 = *(void **)&a2[v15];
  *(void *)&a1[v15] = v17;
  uint64_t v18 = *(void **)&a2[v16];
  *(void *)&a1[v16] = v18;
  a1[a3[8]] = a2[a3[8]];
  a1[a3[10]] = a2[a3[10]];
  id v19 = v17;
  id v20 = v18;
  return a1;
}

char *_s9ParagraphVwca(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1B0869948();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3AFE8);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  uint64_t v12 = a3[5];
  uint64_t v13 = &a1[v12];
  char v14 = &a2[v12];
  uint64_t v15 = *(void **)v14;
  uint64_t v16 = *((void *)v14 + 1);
  char v17 = v14[16];
  sub_1B07B2F10(*(void **)v14, v16, v17);
  uint64_t v18 = *(void **)v13;
  uint64_t v19 = *((void *)v13 + 1);
  char v20 = v13[16];
  *(void *)uint64_t v13 = v15;
  *((void *)v13 + 1) = v16;
  v13[16] = v17;
  sub_1B07BE788(v18, v19, v20);
  uint64_t v21 = a3[6];
  id v22 = *(void **)&a2[v21];
  id v23 = *(void **)&a1[v21];
  *(void *)&a1[v21] = v22;
  id v24 = v22;

  uint64_t v25 = a3[7];
  uint64_t v26 = *(void **)&a2[v25];
  uint64_t v27 = *(void **)&a1[v25];
  *(void *)&a1[v25] = v26;
  id v28 = v26;

  a1[a3[8]] = a2[a3[8]];
  a1[a3[10]] = a2[a3[10]];
  return a1;
}

char *_s9ParagraphVwtk(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1B0869948();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3AFE8);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v9 = a3[5];
  uint64_t v10 = a3[6];
  uint64_t v11 = &a1[v9];
  uint64_t v12 = &a2[v9];
  *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
  v11[16] = v12[16];
  *(void *)&a1[v10] = *(void *)&a2[v10];
  uint64_t v13 = a3[8];
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  a1[v13] = a2[v13];
  a1[a3[10]] = a2[a3[10]];
  return a1;
}

char *_s9ParagraphVwta(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1B0869948();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3AFE8);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  uint64_t v12 = a3[5];
  uint64_t v13 = &a1[v12];
  char v14 = &a2[v12];
  char v15 = v14[16];
  uint64_t v16 = *(void **)v13;
  uint64_t v17 = *((void *)v13 + 1);
  char v18 = v13[16];
  *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
  v13[16] = v15;
  sub_1B07BE788(v16, v17, v18);
  uint64_t v19 = a3[6];
  char v20 = *(void **)&a1[v19];
  *(void *)&a1[v19] = *(void *)&a2[v19];

  uint64_t v21 = a3[7];
  id v22 = *(void **)&a1[v21];
  *(void *)&a1[v21] = *(void *)&a2[v21];

  a1[a3[8]] = a2[a3[8]];
  a1[a3[10]] = a2[a3[10]];
  return a1;
}

uint64_t _s9ParagraphVwet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B07F3340);
}

uint64_t sub_1B07F3340(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3AFE8);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 24));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t _s9ParagraphVwst(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B07F3418);
}

uint64_t sub_1B07F3418(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3AFE8);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  }
  return result;
}

void sub_1B07F34D8()
{
  sub_1B07F35A0();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_1B07F35A0()
{
  if (!qword_1E9B3B2D8)
  {
    sub_1B0869948();
    unint64_t v0 = sub_1B086A3B8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9B3B2D8);
    }
  }
}

uint64_t _s9ParagraphV9AlignmentOwet(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s9ParagraphV9AlignmentOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B07F3754);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Models.Paragraph.Alignment()
{
  return &type metadata for Models.Paragraph.Alignment;
}

uint64_t _s9ParagraphV5StyleOwet(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *_s9ParagraphV5StyleOwst(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1B07F387CLL);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for Models.Paragraph.Style()
{
  return &type metadata for Models.Paragraph.Style;
}

unsigned char *_s9ParagraphV10CodingKeysOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B07F3980);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *_s9ParagraphV10CodingKeysOMa()
{
  return &_s9ParagraphV10CodingKeysON;
}

unint64_t sub_1B07F39BC()
{
  unint64_t result = qword_1E9B3B2E0;
  if (!qword_1E9B3B2E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3B2E0);
  }
  return result;
}

unint64_t sub_1B07F3A14()
{
  unint64_t result = qword_1E9B3B2E8;
  if (!qword_1E9B3B2E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3B2E8);
  }
  return result;
}

unint64_t sub_1B07F3A6C()
{
  unint64_t result = qword_1E9B3B2F0;
  if (!qword_1E9B3B2F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3B2F0);
  }
  return result;
}

uint64_t sub_1B07F3AC0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1954047348 && a2 == 0xE400000000000000;
  if (v2 || (sub_1B086A8A8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656C797473 && a2 == 0xE500000000000000 || (sub_1B086A8A8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6E656D6E67696C61 && a2 == 0xE900000000000074 || (sub_1B086A8A8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x70616C6C6F437369 && a2 == 0xEB00000000646573 || (sub_1B086A8A8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x80000001B0874950 || (sub_1B086A8A8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001B0874970)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v6 = sub_1B086A8A8();
    swift_bridgeObjectRelease();
    if (v6) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

id sub_1B07F3D48(id result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255) {
    return sub_1B07B2F10(result, a2, a3 & 1);
  }
  return result;
}

void sub_1B07F3D60(void *a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255) {
    sub_1B07BE788(a1, a2, a3 & 1);
  }
}

uint64_t sub_1B07F3D78(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1B07F3DC0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  a2[3] = v3;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(a2);
  uint64_t v5 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v5(boxed_opaque_existential_0, v2, v3);
}

uint64_t sub_1B07F3E28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>, double a7@<D3>)
{
  uint64_t v14 = *(void *)(a2 + 16);
  uint64_t v13 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v17 = (char *)&v19 - v16;
  (*(void (**)(uint64_t, uint64_t, uint64_t, double, double, double, double))(v13 + 40))(a1, v14, v13, a4, a5, a6, a7);
  swift_getAssociatedConformanceWitness();
  return AnyPlacementSequence.init<A>(_:)((uint64_t)v17, AssociatedTypeWitness, a3);
}

uint64_t AnyPrimitiveLayout.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  a3[3] = type metadata accessor for _ConcretePrimitiveLayoutBox();
  a3[4] = (uint64_t)&off_1F094F8F8;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(a3);
  BOOL v7 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32);

  return v7(boxed_opaque_existential_0, a1, a2);
}

uint64_t type metadata accessor for _ConcretePrimitiveLayoutBox()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t AnyPrimitiveLayout.base.getter()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
}

uint64_t AnyPrimitiveLayout.layout(relativeTo:with:)(uint64_t a1, double a2, double a3, double a4, double a5)
{
  uint64_t v11 = v5[3];
  uint64_t v12 = v5[4];
  __swift_project_boxed_opaque_existential_1(v5, v11);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, double, double, double, double))(v12 + 16))(a1, v11, v12, a2, a3, a4, a5);
}

unint64_t sub_1B07F40F8()
{
  unint64_t result = qword_1E9B3B2F8;
  if (!qword_1E9B3B2F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3B2F8);
  }
  return result;
}

uint64_t sub_1B07F414C(uint64_t a1, double a2, double a3, double a4, double a5)
{
  uint64_t v11 = v5[3];
  uint64_t v12 = v5[4];
  __swift_project_boxed_opaque_existential_1(v5, v11);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, double, double, double, double))(v12 + 16))(a1, v11, v12, a2, a3, a4, a5);
}

uint64_t initializeWithCopy for AnyPrimitiveLayout(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v3;
  (**(void (***)(void))(v3 - 8))();
  return a1;
}

uint64_t *assignWithCopy for AnyPrimitiveLayout(uint64_t *a1, uint64_t *a2)
{
  return a1;
}

uint64_t assignWithTake for AnyPrimitiveLayout(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for AnyPrimitiveLayout(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AnyPrimitiveLayout(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AnyPrimitiveLayout()
{
  return &type metadata for AnyPrimitiveLayout;
}

uint64_t sub_1B07F4344(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 24);
}

uint64_t sub_1B07F434C()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1B07F43DC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  long long v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  if (v5 <= 7
    && *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 0x18uLL
    && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
  }
  else
  {
    uint64_t v8 = *a2;
    uint64_t *v3 = *a2;
    long long v3 = (uint64_t *)(v8 + ((v5 + 16) & ~v5));
    swift_retain();
  }
  return v3;
}

uint64_t sub_1B07F4494(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
}

uint64_t sub_1B07F44C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_1B07F4510(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_1B07F4560(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_1B07F45B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_1B07F4600(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void sub_1B07F475C(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x1B07F4974);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

void LabelPlaceholder.init(text:font:textAlignment:lineBreakMode:lineSpacing:numberOfLines:isLanguageAware:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>)
{
  *(void *)a9 = a1;
  *(void *)(a9 + 8) = a2;
  *(unsigned char *)(a9 + 16) = 0;
  *(void *)(a9 + 24) = a3;
  *(void *)(a9 + 32) = a4;
  *(void *)(a9 + 40) = a5;
  *(void *)(a9 + 48) = a7;
  *(void *)(a9 + 56) = a6;
  *(unsigned char *)(a9 + 96) = 0;
  *(void *)(a9 + 104) = a8 & 1;
}

void LabelPlaceholder.init(attributedText:font:textAlignment:lineBreakMode:lineSpacing:numberOfLines:isLanguageAware:)(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X8>)
{
  id v15 = objc_msgSend(self, sel_preferredFontForTextStyle_compatibleWithTraitCollection_, *MEMORY[0x1E4FB28C8], 0);
  id v16 = a2;

  *(void *)a8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28B18]), sel_initWithAttributedString_, a1);
  *(void *)(a8 + 8) = 0;
  *(unsigned char *)(a8 + 16) = 1;
  *(void *)(a8 + 24) = v16;
  *(void *)(a8 + 32) = a3;
  *(void *)(a8 + 40) = a4;
  *(void *)(a8 + 48) = a6;
  *(void *)(a8 + 56) = a5;
  *(unsigned char *)(a8 + 96) = 0;

  *(void *)(a8 + 104) = a7 & 1;
}

void LabelPlaceholder.init(attributedText:numberOfLines:isLanguageAware:)()
{
}

__n128 LabelPlaceholder.layoutTextView.getter@<Q0>(uint64_t *a1@<X8>)
{
  sub_1B07F6144(v1, (uint64_t)v9);
  uint64_t v3 = type metadata accessor for _LabelPlaceholderLayoutTextView();
  uint64_t v4 = swift_allocObject();
  long long v5 = v9[5];
  *(_OWORD *)(v4 + 80) = v9[4];
  *(_OWORD *)(v4 + 96) = v5;
  __n128 result = (__n128)v9[6];
  long long v7 = v9[1];
  *(_OWORD *)(v4 + 16) = v9[0];
  *(_OWORD *)(v4 + 32) = v7;
  long long v8 = v9[3];
  *(_OWORD *)(v4 + 48) = v9[2];
  *(_OWORD *)(v4 + 64) = v8;
  *(__n128 *)(v4 + 112) = result;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_OWORD *)(v4 + 144) = 0u;
  *(unsigned char *)(v4 + 160) = 0;
  a1[3] = v3;
  a1[4] = (uint64_t)&off_1F094FDB0;
  *a1 = v4;
  return result;
}

Swift::Bool __swiftcall LabelPlaceholder.isTruncated(whenFitting:)(CGSize whenFitting)
{
  double height = whenFitting.height;
  double width = whenFitting.width;
  uint64_t v4 = *(void *)v1;
  if (*(unsigned char *)(v1 + 16))
  {
    if (!v4) {
      return v4;
    }
    uint64_t v4 = (uint64_t)objc_msgSend((id)v4, sel_length);
    if (!v4) {
      return v4;
    }
    goto LABEL_10;
  }
  unint64_t v5 = *(void *)(v1 + 8);
  if (!v5)
  {
    LOBYTE(v4) = 0;
    return v4;
  }
  if ((v5 & 0x2000000000000000) != 0) {
    uint64_t v4 = HIBYTE(v5) & 0xF;
  }
  else {
    v4 &= 0xFFFFFFFFFFFFuLL;
  }
  if (v4)
  {
LABEL_10:
    if (width == 0.0 && height == 0.0)
    {
      LOBYTE(v4) = 1;
    }
    else
    {
      id v7 = objc_msgSend(self, sel_system);
      id v8 = objc_msgSend(v7, sel_preferredContentSizeCategory);

      id v9 = objc_msgSend(self, sel_traitCollectionWithPreferredContentSizeCategory_, v8);
      Swift::Bool v10 = LabelPlaceholder.willTextTruncate(fitting:with:)((CGSize)__PAIR128__(*(unint64_t *)&height, *(unint64_t *)&width), (UITraitCollection)v9);

      LOBYTE(v4) = v10;
    }
  }
  return v4;
}

double LabelPlaceholder.measurements(fitting:in:)(void *a1, double a2, double a3)
{
  id v5 = objc_msgSend(a1, sel_traitCollection);
  *(void *)&double v6 = (unint64_t)LabelPlaceholder.measure(toFit:with:)((CGSize)__PAIR128__(*(unint64_t *)&a3, *(unint64_t *)&a2), (UITraitCollection)v5);

  return v6;
}

double sub_1B07F4DC8(void *a1, double a2, double a3)
{
  id v5 = objc_msgSend(a1, sel_traitCollection);
  *(void *)&double v6 = (unint64_t)LabelPlaceholder.measure(toFit:with:)((CGSize)__PAIR128__(*(unint64_t *)&a3, *(unint64_t *)&a2), (UITraitCollection)v5);

  return v6;
}

BOOL sub_1B07F4E44()
{
  swift_beginAccess();
  unint64_t v1 = *(void *)(v0 + 16);
  if (*(unsigned char *)(v0 + 32))
  {
    if (v1) {
      BOOL v2 = objc_msgSend((id)v1, sel_length) == 0;
    }
    else {
      BOOL v2 = 1;
    }
  }
  else
  {
    unint64_t v3 = *(void *)(v0 + 24);
    uint64_t v4 = HIBYTE(v3) & 0xF;
    if ((v3 & 0x2000000000000000) == 0) {
      uint64_t v4 = v1 & 0xFFFFFFFFFFFFLL;
    }
    BOOL v5 = v4 == 0;
    if (v3) {
      BOOL v2 = v5;
    }
    else {
      BOOL v2 = 1;
    }
  }
  return !v2;
}

uint64_t sub_1B07F4ED0(uint64_t a1)
{
  swift_beginAccess();
  sub_1B07BE7D8(v1 + 40, (uint64_t)v12);
  if (v16)
  {
    v10[2] = v13;
    void v10[3] = v14;
    uint64_t v11 = v15;
    v10[0] = *(_OWORD *)v12;
    v10[1] = *(_OWORD *)&v12[16];
    sub_1B07EA080((uint64_t)v10, (uint64_t)&v4);
    uint64_t v8 = a1;
    sub_1B07EA0DC((uint64_t)v10);
    char v9 = 1;
    swift_beginAccess();
  }
  else
  {
    uint64_t v4 = *(void *)v12;
    long long v5 = *(_OWORD *)&v12[8];
    uint64_t v6 = a1;
    uint64_t v7 = v13;
    char v9 = 0;
    swift_beginAccess();
  }
  sub_1B07F61C4((uint64_t)&v4, v1 + 40);
  return swift_endAccess();
}

uint64_t sub_1B07F4FE8(uint64_t a1)
{
  swift_beginAccess();
  sub_1B07BE7D8(v1 + 40, (uint64_t)&v11);
  if (v15)
  {
    long long v9[2] = *(_OWORD *)&v12[16];
    v9[3] = v13;
    uint64_t v10 = v14;
    v9[0] = v11;
    v9[1] = *(_OWORD *)v12;
    sub_1B07EA080((uint64_t)v9, (uint64_t)&v4);
    uint64_t v7 = a1;
    sub_1B07EA0DC((uint64_t)v9);
    char v8 = 1;
    swift_beginAccess();
  }
  else
  {
    long long v4 = v11;
    uint64_t v5 = a1;
    long long v6 = *(_OWORD *)&v12[8];
    char v8 = 0;
    swift_beginAccess();
  }
  sub_1B07F61C4((uint64_t)&v4, v1 + 40);
  return swift_endAccess();
}

uint64_t sub_1B07F50FC()
{
  swift_beginAccess();
  sub_1B07BE7D8(v0 + 40, (uint64_t)&v10);
  if ((v15 & 1) == 0) {
    return v10;
  }
  v8[2] = v12;
  v8[3] = v13;
  uint64_t v9 = v14;
  v8[0] = v10;
  v8[1] = v11;
  uint64_t v1 = *((void *)&v11 + 1);
  uint64_t v2 = v12;
  __swift_project_boxed_opaque_existential_1(v8, *((uint64_t *)&v11 + 1));
  id v3 = objc_msgSend(self, sel_system);
  id v4 = objc_msgSend(v3, sel_preferredContentSizeCategory);

  id v5 = objc_msgSend(self, sel_traitCollectionWithPreferredContentSizeCategory_, v4);
  uint64_t v6 = (*(uint64_t (**)(id, uint64_t, uint64_t))(v2 + 8))(v5, v1, v2);

  sub_1B07EA0DC((uint64_t)v8);
  return v6;
}

void sub_1B07F5234(uint64_t a1)
{
  swift_beginAccess();
  uint64_t v3 = v1 + 40;
  sub_1B07BE7D8(v1 + 40, (uint64_t)v24);
  if (v27)
  {
    *(_OWORD *)id v22 = *(_OWORD *)&v24[32];
    *(_OWORD *)&v22[16] = v25;
    uint64_t v23 = v26;
    long long v20 = *(_OWORD *)v24;
    long long v21 = *(_OWORD *)&v24[16];
    id v4 = objc_msgSend(self, sel_system);
    id v5 = objc_msgSend(v4, sel_preferredContentSizeCategory);

    id v6 = objc_msgSend(self, sel_traitCollectionWithPreferredContentSizeCategory_, v5);
    id v7 = objc_msgSend(self, sel_preferredFontForTextStyle_compatibleWithTraitCollection_, *MEMORY[0x1E4FB28C8], 0);
    uint64_t v8 = *((void *)&v21 + 1);
    uint64_t v9 = *(void *)v22;
    __swift_project_boxed_opaque_existential_1(&v20, *((uint64_t *)&v21 + 1));
    long long v10 = (void *)(*(uint64_t (**)(id, uint64_t, uint64_t))(v9 + 8))(v6, v8, v9);

    if (a1)
    {
      uint64_t v12 = *(void *)&v22[24];
      uint64_t v11 = v23;
      long long v14 = *(_OWORD *)&v22[8];
      sub_1B07EA0DC((uint64_t)&v20);

      uint64_t v16 = a1;
      long long v17 = v14;
      *(void *)&long long v18 = v12;
      *((void *)&v18 + 1) = v11;
      char v19 = 0;
      swift_beginAccess();
      sub_1B07F61C4((uint64_t)&v16, v3);
LABEL_6:
      swift_endAccess();
      return;
    }
    __break(1u);
  }
  else if (a1)
  {
    long long v13 = *(_OWORD *)&v24[24];
    long long v15 = *(_OWORD *)&v24[8];

    uint64_t v16 = a1;
    long long v17 = v15;
    long long v18 = v13;
    char v19 = 0;
    swift_beginAccess();
    sub_1B07F61C4((uint64_t)&v16, v1 + 40);
    goto LABEL_6;
  }
  __break(1u);
}

BOOL sub_1B07F5468()
{
  swift_beginAccess();
  uint64_t v2 = *(void **)(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 24);
  if (*(unsigned char *)(v0 + 32))
  {
    if (v2)
    {
      id v3 = objc_msgSend(v2, sel_string);
      sub_1B0869D98();

      if (qword_1EB5964B8 != -1) {
        swift_once();
      }
      uint64_t v4 = sub_1B0869078();
      __swift_project_value_buffer(v4, (uint64_t)qword_1EB596390);
      sub_1B07B862C();
      sub_1B086A408();
      BOOL v6 = (v5 & 1) == 0;
      sub_1B07BE788(v2, v1, 1);
      swift_bridgeObjectRelease();
      return v6;
    }
    return 0;
  }
  if (!v1) {
    return 0;
  }
  uint64_t v7 = qword_1EB5964B8;
  swift_bridgeObjectRetain();
  if (v7 != -1) {
    swift_once();
  }
  uint64_t v8 = sub_1B0869078();
  __swift_project_value_buffer(v8, (uint64_t)qword_1EB596390);
  sub_1B07B862C();
  sub_1B086A408();
  BOOL v6 = (v9 & 1) == 0;
  sub_1B07BE788(v2, v1, 0);
  return v6;
}

double sub_1B07F5630()
{
  uint64_t v1 = v0;
  swift_beginAccess();
  sub_1B07BE7D8(v0 + 40, (uint64_t)&v23);
  if (v28)
  {
    _OWORD v21[2] = v25;
    v21[3] = v26;
    uint64_t v22 = v27;
    v21[0] = v23;
    v21[1] = v24;
    uint64_t v2 = *((void *)&v24 + 1);
    uint64_t v3 = v25;
    __swift_project_boxed_opaque_existential_1(v21, *((uint64_t *)&v24 + 1));
    id v4 = objc_msgSend(self, sel_system);
    id v5 = objc_msgSend(v4, sel_preferredContentSizeCategory);

    id v6 = objc_msgSend(self, sel_traitCollectionWithPreferredContentSizeCategory_, v5);
    uint64_t v7 = (void *)(*(uint64_t (**)(id, uint64_t, uint64_t))(v3 + 8))(v6, v2, v3);

    uint64_t v8 = *(void **)(v1 + 16);
    uint64_t v9 = *(void *)(v1 + 24);
    char v10 = *(unsigned char *)(v1 + 32);
    sub_1B07B2F10(v8, v9, v10);
    id v11 = v7;
    sub_1B081D8FC(v7, v8, v9, v10);
    double v13 = v12;

    sub_1B07BE788(v8, v9, v10);
    sub_1B07EA0DC((uint64_t)v21);
  }
  else
  {
    long long v14 = (void *)v23;
    long long v15 = *(void **)(v1 + 16);
    uint64_t v16 = *(void *)(v1 + 24);
    char v17 = *(unsigned char *)(v1 + 32);
    sub_1B07B2F10(v15, v16, v17);
    id v18 = v14;
    sub_1B081D8FC(v14, v15, v16, v17);
    double v13 = v19;

    sub_1B07BE788(v15, v16, v17);
  }
  return v13;
}

id sub_1B07F5848()
{
  swift_beginAccess();
  uint64_t v1 = *(void **)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  if ((*(unsigned char *)(v0 + 32) & 1) == 0)
  {
    if (v2)
    {
      swift_bridgeObjectRetain();
      uint64_t v3 = sub_1B0869E48();
      sub_1B07BE788(v1, v2, 0);
      return (id)v3;
    }
    id v4 = *(void **)(v0 + 16);
    uint64_t v5 = 0;
    char v6 = 0;
LABEL_8:
    sub_1B07BE788(v4, v5, v6);
    return 0;
  }
  if (!v1)
  {
    id v4 = 0;
    uint64_t v5 = *(void *)(v0 + 24);
    char v6 = 1;
    goto LABEL_8;
  }
  return objc_msgSend(*(id *)(v0 + 16), sel_length);
}

uint64_t sub_1B07F5908()
{
  sub_1B07F6278(v0 + 16);

  return swift_deallocClassInstance();
}

uint64_t sub_1B07F5940()
{
  uint64_t v1 = *v0;
  swift_beginAccess();
  sub_1B07BE7D8(v1 + 40, (uint64_t)&v6);
  if (v11)
  {
    _OWORD v4[2] = v8;
    void v4[3] = v9;
    uint64_t v5 = v10;
    v4[0] = v6;
    v4[1] = v7;
    uint64_t v2 = *((void *)&v9 + 1);
    sub_1B07EA0DC((uint64_t)v4);
  }
  else
  {
    uint64_t v2 = *((void *)&v7 + 1);
  }
  return v2;
}

uint64_t sub_1B07F59D0(uint64_t a1)
{
  return sub_1B07F4ED0(a1);
}

void (*sub_1B07F59F4(void *a1))(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = malloc(0xC0uLL);
  *a1 = v3;
  uint64_t v4 = *v1;
  v3[23] = v4;
  swift_beginAccess();
  sub_1B07BE7D8(v4 + 40, (uint64_t)v3);
  if (v3[9])
  {
    long long v5 = *((_OWORD *)v3 + 3);
    *((_OWORD *)v3 + 7) = *((_OWORD *)v3 + 2);
    *((_OWORD *)v3 + 8) = v5;
    v3[18] = v3[8];
    long long v6 = *((_OWORD *)v3 + 1);
    *((_OWORD *)v3 + 5) = *(_OWORD *)v3;
    *((_OWORD *)v3 + 6) = v6;
    uint64_t v7 = v3[17];
    sub_1B07EA0DC((uint64_t)(v3 + 10));
  }
  else
  {
    uint64_t v7 = v3[3];
  }
  v3[22] = v7;
  return sub_1B07F5AB4;
}

void sub_1B07F5AB4(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1B07F5ACC()
{
  uint64_t v1 = *v0;
  swift_beginAccess();
  sub_1B07BE7D8(v1 + 40, (uint64_t)&v6);
  if (v11)
  {
    _OWORD v4[2] = v8;
    void v4[3] = v9;
    uint64_t v5 = v10;
    v4[0] = v6;
    v4[1] = v7;
    uint64_t v2 = v9;
    sub_1B07EA0DC((uint64_t)v4);
  }
  else
  {
    uint64_t v2 = v7;
  }
  return v2;
}

uint64_t sub_1B07F5B5C(uint64_t a1)
{
  return sub_1B07F4FE8(a1);
}

void (*sub_1B07F5B80(void *a1))(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = malloc(0xC0uLL);
  *a1 = v3;
  uint64_t v4 = *v1;
  v3[23] = v4;
  swift_beginAccess();
  sub_1B07BE7D8(v4 + 40, (uint64_t)v3);
  if (v3[9])
  {
    long long v5 = *((_OWORD *)v3 + 3);
    *((_OWORD *)v3 + 7) = *((_OWORD *)v3 + 2);
    *((_OWORD *)v3 + 8) = v5;
    v3[18] = v3[8];
    long long v6 = *((_OWORD *)v3 + 1);
    *((_OWORD *)v3 + 5) = *(_OWORD *)v3;
    *((_OWORD *)v3 + 6) = v6;
    uint64_t v7 = v3[16];
    sub_1B07EA0DC((uint64_t)(v3 + 10));
  }
  else
  {
    uint64_t v7 = v3[2];
  }
  v3[22] = v7;
  return sub_1B07F5C40;
}

void sub_1B07F5C40(uint64_t a1, uint64_t a2)
{
}

void sub_1B07F5C58(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  uint64_t v3 = *(void **)a1;
  a3(*(void *)(*(void *)a1 + 176));

  free(v3);
}

uint64_t sub_1B07F5C98()
{
  return sub_1B07F50FC();
}

void sub_1B07F5CBC(uint64_t a1)
{
}

void (*sub_1B07F5CE0(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[1] = *v1;
  *a1 = sub_1B07F50FC();
  return sub_1B07F5D2C;
}

void sub_1B07F5D2C(uint64_t *a1, char a2)
{
  uint64_t v2 = (void *)*a1;
  if (a2)
  {
    id v3 = v2;
    sub_1B07F5234((uint64_t)v2);
  }
  else
  {
    sub_1B07F5234(*a1);
  }
}

BOOL sub_1B07F5D94()
{
  return sub_1B07F5468();
}

double sub_1B07F5DBC()
{
  return sub_1B07F5630();
}

id sub_1B07F5DE0()
{
  return sub_1B07F5848();
}

uint64_t sub_1B07F5E04@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *v1 + 16;
  swift_beginAccess();
  a1[3] = (uint64_t)&type metadata for LabelPlaceholder;
  a1[4] = (uint64_t)&protocol witness table for LabelPlaceholder;
  uint64_t v4 = swift_allocObject();
  *a1 = v4;
  return sub_1B07F6144(v3, v4 + 16);
}

double sub_1B07F5E80()
{
  uint64_t v1 = *v0;
  swift_beginAccess();
  return *(double *)(v1 + 128);
}

uint64_t sub_1B07F5EC4(double a1, double a2, double a3, double a4)
{
  long long v9 = *v4;
  uint64_t result = swift_beginAccess();
  v9[16] = a1;
  v9[17] = a2;
  v9[18] = a3;
  v9[19] = a4;
  return result;
}

uint64_t (*sub_1B07F5F28())()
{
  return j__swift_endAccess;
}

uint64_t sub_1B07F5F80()
{
  uint64_t v1 = *v0;
  swift_beginAccess();
  return *(unsigned __int8 *)(v1 + 160);
}

uint64_t sub_1B07F5FC0(char a1)
{
  uint64_t v3 = *v1;
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v3 + 160) = a1;
  return result;
}

uint64_t (*sub_1B07F6004())()
{
  return j_j__swift_endAccess;
}

BOOL sub_1B07F605C()
{
  return sub_1B07F4E44();
}

double sub_1B07F6084(void *a1, double a2, double a3)
{
  uint64_t v7 = *v3 + 16;
  swift_beginAccess();
  sub_1B07F6144(v7, (uint64_t)v11);
  id v8 = objc_msgSend(a1, sel_traitCollection);
  *(void *)&double v9 = (unint64_t)LabelPlaceholder.measure(toFit:with:)((CGSize)__PAIR128__(*(unint64_t *)&a3, *(unint64_t *)&a2), (UITraitCollection)v8);

  sub_1B07F6278((uint64_t)v11);
  return v9;
}

uint64_t sub_1B07F6144(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t type metadata accessor for _LabelPlaceholderLayoutTextView()
{
  return self;
}

uint64_t sub_1B07F61C4(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1B07F6220()
{
  sub_1B07BE788(*(void **)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
  uint64_t v1 = (id *)(v0 + 40);
  if (*(unsigned char *)(v0 + 112)) {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v1);
  }
  else {

  }
  return MEMORY[0x1F4186498](v0, 128, 7);
}

uint64_t sub_1B07F6278(uint64_t a1)
{
  return a1;
}

uint64_t sub_1B07F62CC()
{
  uint64_t result = sub_1B086A848();
  qword_1E9B3B300 = result;
  *(void *)algn_1E9B3B308 = v1;
  return result;
}

uint64_t sub_1B07F631C()
{
  uint64_t result = sub_1B086A848();
  qword_1E9B3B310 = result;
  *(void *)algn_1E9B3B318 = v1;
  return result;
}

uint64_t WritingDirectionsCounts.natural.getter()
{
  return *(void *)(v0 + OBJC_IVAR___JUWritingDirectionsCounts_natural);
}

uint64_t WritingDirectionsCounts.leftToRight.getter()
{
  return *(void *)(v0 + OBJC_IVAR___JUWritingDirectionsCounts_leftToRight);
}

uint64_t WritingDirectionsCounts.rightToLeft.getter()
{
  return *(void *)(v0 + OBJC_IVAR___JUWritingDirectionsCounts_rightToLeft);
}

uint64_t WritingDirectionsCounts.total.getter()
{
  return *(void *)(v0 + OBJC_IVAR___JUWritingDirectionsCounts_total);
}

uint64_t WritingDirectionsCounts.significantValues.getter()
{
  return *(void *)(v0 + OBJC_IVAR___JUWritingDirectionsCounts_significantValues);
}

uint64_t WritingDirectionsCounts.hasStronglyTypedCounts.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR___JUWritingDirectionsCounts_hasStronglyTypedCounts);
}

uint64_t WritingDirectionsCounts.isRTLEnough.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR___JUWritingDirectionsCounts_isRTLEnough);
}

uint64_t WritingDirectionsCounts.isRTLMinimal.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR___JUWritingDirectionsCounts_isRTLMinimal);
}

char *WritingDirectionsCounts.__allocating_init(natural:leftToRight:rightToLeft:)(char *a1, uint64_t a2, unint64_t a3)
{
  id v7 = objc_allocWithZone(v3);
  return WritingDirectionsCounts.init(natural:leftToRight:rightToLeft:)(a1, a2, a3);
}

char *WritingDirectionsCounts.init(natural:leftToRight:rightToLeft:)(char *result, uint64_t a2, unint64_t a3)
{
  *(void *)&v3[OBJC_IVAR___JUWritingDirectionsCounts_natural] = result;
  *(void *)&v3[OBJC_IVAR___JUWritingDirectionsCounts_leftToRight] = a2;
  *(void *)&v3[OBJC_IVAR___JUWritingDirectionsCounts_rightToLeft] = a3;
  uint64_t v4 = &result[a2];
  if (__CFADD__(result, a2))
  {
    __break(1u);
    goto LABEL_14;
  }
  BOOL v5 = __CFADD__(v4, a3);
  long long v6 = &v4[a3];
  if (v5)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  *(void *)&v3[OBJC_IVAR___JUWritingDirectionsCounts_total] = v6;
  uint64_t v7 = result != 0;
  if (!a3)
  {
    if (a2) {
      ++v7;
    }
    *(void *)&v3[OBJC_IVAR___JUWritingDirectionsCounts_significantValues] = v7;
    v3[OBJC_IVAR___JUWritingDirectionsCounts_hasStronglyTypedCounts] = a2 != 0;
    v3[OBJC_IVAR___JUWritingDirectionsCounts_isRTLEnough] = 0;
    v3[OBJC_IVAR___JUWritingDirectionsCounts_isRTLMinimal] = 0;
    goto LABEL_12;
  }
  if (a2) {
    uint64_t v8 = 2;
  }
  else {
    uint64_t v8 = 1;
  }
  *(void *)&v3[OBJC_IVAR___JUWritingDirectionsCounts_significantValues] = v8 + v7;
  v3[OBJC_IVAR___JUWritingDirectionsCounts_hasStronglyTypedCounts] = 1;
  if (!__CFADD__(a3, a2))
  {
    float v9 = (float)a3 / (float)(a3 + a2);
    v3[OBJC_IVAR___JUWritingDirectionsCounts_isRTLEnough] = v9 >= 0.4;
    v3[OBJC_IVAR___JUWritingDirectionsCounts_isRTLMinimal] = v9 >= 0.15;
LABEL_12:
    v10.receiver = v3;
    v10.super_class = (Class)type metadata accessor for WritingDirectionsCounts();
    return (char *)objc_msgSendSuper2(&v10, sel_init);
  }
LABEL_15:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for WritingDirectionsCounts()
{
  return self;
}

char *WritingDirectionsCounts.__allocating_init(summing:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  unint64_t v2 = 0;
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  if (!v1)
  {
LABEL_10:
    swift_bridgeObjectRelease();
    id v13 = objc_allocWithZone((Class)type metadata accessor for WritingDirectionsCounts());
    return WritingDirectionsCounts.init(natural:leftToRight:rightToLeft:)(v4, v3, v2);
  }
  BOOL v5 = (void **)(a1 + 32);
  while (1)
  {
    uint64_t v7 = *v5++;
    long long v6 = v7;
    if (!v7) {
      goto LABEL_3;
    }
    uint64_t result = (char *)objc_msgSend(v6, sel_writingDirectionsQuantities);
    uint64_t v9 = *(void *)&result[OBJC_IVAR___JUWritingDirectionsCounts_natural];
    BOOL v10 = __CFADD__(v4, v9);
    v4 += v9;
    if (v10) {
      break;
    }
    uint64_t v11 = *(void *)&result[OBJC_IVAR___JUWritingDirectionsCounts_leftToRight];
    BOOL v10 = __CFADD__(v3, v11);
    v3 += v11;
    if (v10) {
      goto LABEL_12;
    }
    uint64_t v12 = *(void *)&result[OBJC_IVAR___JUWritingDirectionsCounts_rightToLeft];

    BOOL v10 = __CFADD__(v2, v12);
    v2 += v12;
    if (v10)
    {
      __break(1u);
      goto LABEL_10;
    }
LABEL_3:
    if (!--v1) {
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

void WritingDirectionsCounts.__allocating_init(counting:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1)
  {
LABEL_14:
    unint64_t v2 = 0;
    uint64_t v3 = 0;
    uint64_t v4 = 0;
LABEL_15:
    swift_bridgeObjectRelease();
    id v11 = objc_allocWithZone((Class)type metadata accessor for WritingDirectionsCounts());
    WritingDirectionsCounts.init(natural:leftToRight:rightToLeft:)(v4, v3, v2);
    return;
  }
  unint64_t v2 = 0;
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  BOOL v5 = (void **)(a1 + 32);
  while (1)
  {
    uint64_t v8 = *v5++;
    uint64_t v7 = v8;
    if (!v8) {
      goto LABEL_4;
    }
    uint64_t v9 = objc_msgSend(v7, sel_writingDirectionsQuantities);
    if (v9[OBJC_IVAR___JUWritingDirectionsCounts_isRTLEnough]) {
      break;
    }
    int v10 = v9[OBJC_IVAR___JUWritingDirectionsCounts_hasStronglyTypedCounts];

    if (v10 == 1)
    {
      BOOL v6 = __CFADD__(v3++, 1);
      if (v6) {
        goto LABEL_17;
      }
    }
    else
    {
      BOOL v6 = __CFADD__(v4++, 1);
      if (v6)
      {
        __break(1u);
        goto LABEL_14;
      }
    }
LABEL_4:
    if (!--v1) {
      goto LABEL_15;
    }
  }

  BOOL v6 = __CFADD__(v2++, 1);
  if (!v6) {
    goto LABEL_4;
  }
  __break(1u);
LABEL_17:
  __break(1u);
}

BOOL sub_1B07F6850(uint64_t a1)
{
  sub_1B07B8884(a1, (uint64_t)v6);
  if (v7)
  {
    type metadata accessor for WritingDirectionsCounts();
    if (swift_dynamicCast())
    {
      if (*(void *)(v1 + OBJC_IVAR___JUWritingDirectionsCounts_natural) == *(void *)&v5[OBJC_IVAR___JUWritingDirectionsCounts_natural]
        && *(void *)(v1 + OBJC_IVAR___JUWritingDirectionsCounts_leftToRight) == *(void *)&v5[OBJC_IVAR___JUWritingDirectionsCounts_leftToRight])
      {
        uint64_t v2 = *(void *)(v1 + OBJC_IVAR___JUWritingDirectionsCounts_rightToLeft);
        uint64_t v3 = *(void *)&v5[OBJC_IVAR___JUWritingDirectionsCounts_rightToLeft];

        return v2 == v3;
      }
    }
  }
  else
  {
    sub_1B07B86F8((uint64_t)v6);
  }
  return 0;
}

BOOL == infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + OBJC_IVAR___JUWritingDirectionsCounts_natural) == *(void *)(a2
                                                                                      + OBJC_IVAR___JUWritingDirectionsCounts_natural)
      && *(void *)(a1 + OBJC_IVAR___JUWritingDirectionsCounts_leftToRight) == *(void *)(a2
                                                                                          + OBJC_IVAR___JUWritingDirectionsCounts_leftToRight)
      && *(void *)(a1 + OBJC_IVAR___JUWritingDirectionsCounts_rightToLeft) == *(void *)(a2
                                                                                          + OBJC_IVAR___JUWritingDirectionsCounts_rightToLeft);
}

char *+ infix(_:_:)(char *result, uint64_t a2)
{
  uint64_t v2 = *(void *)&result[OBJC_IVAR___JUWritingDirectionsCounts_natural];
  uint64_t v3 = *(void *)(a2 + OBJC_IVAR___JUWritingDirectionsCounts_natural);
  uint64_t v4 = (char *)(v2 + v3);
  if (__CFADD__(v2, v3))
  {
    __break(1u);
    goto LABEL_6;
  }
  uint64_t v5 = *(void *)&result[OBJC_IVAR___JUWritingDirectionsCounts_leftToRight];
  uint64_t v6 = *(void *)(a2 + OBJC_IVAR___JUWritingDirectionsCounts_leftToRight);
  uint64_t v7 = v5 + v6;
  if (__CFADD__(v5, v6))
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v8 = *(void *)&result[OBJC_IVAR___JUWritingDirectionsCounts_rightToLeft];
  uint64_t v9 = *(void *)(a2 + OBJC_IVAR___JUWritingDirectionsCounts_rightToLeft);
  unint64_t v10 = v8 + v9;
  if (!__CFADD__(v8, v9))
  {
    id v11 = objc_allocWithZone((Class)type metadata accessor for WritingDirectionsCounts());
    return WritingDirectionsCounts.init(natural:leftToRight:rightToLeft:)(v4, v7, v10);
  }
LABEL_7:
  __break(1u);
  return result;
}

char *sub_1B07F6AE0()
{
  id v0 = objc_allocWithZone((Class)type metadata accessor for WritingDirectionsCounts());
  uint64_t result = WritingDirectionsCounts.init(natural:leftToRight:rightToLeft:)(0, 0, 0);
  qword_1E9B3B320 = (uint64_t)result;
  return result;
}

id static WritingDirectionsCounts.zero.getter()
{
  if (qword_1E9B3A690 != -1) {
    swift_once();
  }
  id v0 = (void *)qword_1E9B3B320;

  return v0;
}

uint64_t sub_1B07F6C40()
{
  strcpy((char *)v2, "Natural: ");
  sub_1B086A848();
  sub_1B0869E68();
  swift_bridgeObjectRelease();
  sub_1B0869E68();
  strcpy((char *)v2, "{ Counts: { ");
  sub_1B0869E68();
  swift_bridgeObjectRelease();
  sub_1B086A5E8();
  swift_bridgeObjectRelease();
  sub_1B086A848();
  sub_1B0869E68();
  swift_bridgeObjectRelease();
  sub_1B0869E68();
  swift_bridgeObjectRetain();
  sub_1B0869E68();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v0 = v2[0];
  sub_1B086A5E8();
  swift_bridgeObjectRelease();
  sub_1B086A848();
  sub_1B0869E68();
  swift_bridgeObjectRelease();
  sub_1B0869E68();
  swift_bridgeObjectRetain();
  sub_1B0869E68();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1B0869E68();
  swift_bridgeObjectRelease();
  sub_1B086A5E8();
  swift_bridgeObjectRelease();
  v2[0] = 0x45204C5452207349;
  v2[1] = 0xEF28206867756F6ELL;
  if (qword_1E9B3A680 != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  sub_1B0869E68();
  swift_bridgeObjectRelease();
  sub_1B0869E68();
  sub_1B0869E68();
  swift_bridgeObjectRelease();
  sub_1B0869E68();
  swift_bridgeObjectRetain();
  sub_1B0869E68();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B086A5E8();
  swift_bridgeObjectRelease();
  v2[0] = 0xD000000000000010;
  v2[1] = 0x80000001B0874A50;
  if (qword_1E9B3A688 != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  sub_1B0869E68();
  swift_bridgeObjectRelease();
  sub_1B0869E68();
  sub_1B0869E68();
  swift_bridgeObjectRelease();
  sub_1B0869E68();
  swift_bridgeObjectRetain();
  sub_1B0869E68();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1B0869E68();
  swift_bridgeObjectRelease();
  return v0;
}

id WritingDirectionsCounts.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void WritingDirectionsCounts.init()()
{
}

id WritingDirectionsCounts.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for WritingDirectionsCounts();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void += infix(_:_:)(void **a1, uint64_t a2)
{
  objc_super v2 = (char *)*a1;
  uint64_t v3 = *(void *)((char *)*a1 + OBJC_IVAR___JUWritingDirectionsCounts_natural);
  uint64_t v4 = *(void *)(a2 + OBJC_IVAR___JUWritingDirectionsCounts_natural);
  uint64_t v5 = (char *)(v3 + v4);
  if (__CFADD__(v3, v4))
  {
    __break(1u);
    goto LABEL_6;
  }
  uint64_t v7 = *(void *)&v2[OBJC_IVAR___JUWritingDirectionsCounts_leftToRight];
  uint64_t v8 = *(void *)(a2 + OBJC_IVAR___JUWritingDirectionsCounts_leftToRight);
  uint64_t v9 = v7 + v8;
  if (__CFADD__(v7, v8))
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v11 = *(void *)&v2[OBJC_IVAR___JUWritingDirectionsCounts_rightToLeft];

  uint64_t v12 = *(void *)(a2 + OBJC_IVAR___JUWritingDirectionsCounts_rightToLeft);
  unint64_t v13 = v11 + v12;
  if (!__CFADD__(v11, v12))
  {
    id v14 = objc_allocWithZone((Class)type metadata accessor for WritingDirectionsCounts());
    *a1 = WritingDirectionsCounts.init(natural:leftToRight:rightToLeft:)(v5, v9, v13);
    return;
  }
LABEL_7:
  __break(1u);
}

char *sub_1B07F72C8(char *result, uint64_t a2)
{
  uint64_t v2 = *(void *)&result[OBJC_IVAR___JUWritingDirectionsCounts_natural];
  uint64_t v3 = *(void *)(a2 + OBJC_IVAR___JUWritingDirectionsCounts_natural);
  uint64_t v4 = (char *)(v2 + v3);
  if (__CFADD__(v2, v3))
  {
    __break(1u);
    goto LABEL_6;
  }
  uint64_t v5 = *(void *)&result[OBJC_IVAR___JUWritingDirectionsCounts_leftToRight];
  uint64_t v6 = *(void *)(a2 + OBJC_IVAR___JUWritingDirectionsCounts_leftToRight);
  uint64_t v7 = v5 + v6;
  if (__CFADD__(v5, v6))
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v8 = *(void *)&result[OBJC_IVAR___JUWritingDirectionsCounts_rightToLeft];
  uint64_t v9 = *(void *)(a2 + OBJC_IVAR___JUWritingDirectionsCounts_rightToLeft);
  unint64_t v10 = v8 + v9;
  if (!__CFADD__(v8, v9))
  {
    id v11 = objc_allocWithZone((Class)type metadata accessor for WritingDirectionsCounts());
    return WritingDirectionsCounts.init(natural:leftToRight:rightToLeft:)(v4, v7, v10);
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t method lookup function for WritingDirectionsCounts(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for WritingDirectionsCounts);
}

uint64_t dispatch thunk of WritingDirectionsCounts.__allocating_init(natural:leftToRight:rightToLeft:)()
{
  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t dispatch thunk of static WritingDirectionsCounts.add(_:_:)()
{
  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t Models.Button.Kind.init(rawValue:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t Models.Button.Kind.rawValue.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

void static Models.Button.Kind.standard.getter(void *a1@<X8>)
{
  *a1 = 0x647261646E617473;
  a1[1] = 0xE800000000000000;
}

void static Models.Button.Kind.share.getter(void *a1@<X8>)
{
  *a1 = 0x6572616873;
  a1[1] = 0xE500000000000000;
}

uint64_t Models.Button.init(kind:title:action:buttonColor:titleColor:impressionMetrics:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v15 = *a1;
  uint64_t v16 = a1[1];
  char v17 = (int *)type metadata accessor for Models.Button();
  id v18 = (void *)(a8 + v17[5]);
  *id v18 = v15;
  v18[1] = v16;
  double v19 = (void *)(a8 + v17[6]);
  *double v19 = a2;
  v19[1] = a3;
  sub_1B07F7514(a4, a8 + v17[9], &qword_1E9B3B000);
  *(void *)(a8 + v17[7]) = a5;
  *(void *)(a8 + v17[8]) = a6;
  return sub_1B07F7514(a7, a8, &qword_1E9B3AFE8);
}

uint64_t type metadata accessor for Models.Button()
{
  uint64_t result = qword_1E9B3B3B0;
  if (!qword_1E9B3B3B0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1B07F7514(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t Models.Button.init(deserializing:using:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v61 = a2;
  uint64_t v56 = a3;
  uint64_t v4 = sub_1B0869728();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_1B08695F8();
  uint64_t v59 = *(void *)(v8 - 8);
  uint64_t v60 = v8;
  MEMORY[0x1F4188790](v8);
  uint64_t v57 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v50 - v11;
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v50 - v14;
  MEMORY[0x1F4188790](v16);
  uint64_t v17 = sub_1B0869948();
  uint64_t v58 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  double v19 = (char *)&v50 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v66 = a1;
  sub_1B0869608();
  uint64_t v20 = v4;
  uint64_t v21 = v61;
  (*(void (**)(char *))(v5 + 16))(v7);
  uint64_t v22 = v62;
  sub_1B0869938();
  if (v22)
  {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v21, v20);
    return (*(uint64_t (**)(char *, uint64_t))(v59 + 8))(v66, v60);
  }
  else
  {
    uint64_t v24 = (uint64_t)v12;
    uint64_t v53 = v19;
    uint64_t v54 = v5;
    uint64_t v55 = v20;
    uint64_t v25 = v21;
    uint64_t v62 = v17;
    sub_1B0869608();
    uint64_t v26 = sub_1B08695E8();
    uint64_t v28 = v27;
    uint64_t v29 = v60;
    id v30 = *(void (**)(char *, uint64_t))(v59 + 8);
    v30(v15, v60);
    if (v28)
    {
      uint64_t v51 = v26;
      uint64_t v59 = v28;
      uint64_t v31 = v24;
      sub_1B0869608();
      sub_1B0869858();
      v30((char *)v24, v29);
      sub_1B07F7C20();
      sub_1B0869608();
      static UIColor.tryToMakeInstance(byDeserializing:using:)(v24, v25);
      uint64_t v52 = v32;
      v30((char *)v24, v29);
      sub_1B0869608();
      static UIColor.tryToMakeInstance(byDeserializing:using:)(v24, v25);
      uint64_t v34 = v33;
      v30((char *)v31, v29);
      id v35 = v57;
      sub_1B0869608();
      sub_1B07F7C60();
      sub_1B0869568();
      (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v25, v55);
      v30(v66, v29);
      v30(v35, v29);
      uint64_t v40 = v63;
      uint64_t v41 = v64;
      id v42 = (int *)type metadata accessor for Models.Button();
      uint64_t v43 = v56;
      sub_1B07F7514((uint64_t)v65, v56 + v42[9], &qword_1E9B3B000);
      uint64_t v44 = v34;
      uint64_t v45 = v58;
      uint64_t v46 = v62;
      (*(void (**)(uint64_t, char *, uint64_t))(v58 + 32))(v43, v53, v62);
      uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v45 + 56))(v43, 0, 1, v46);
      int v47 = (void *)(v43 + v42[5]);
      *int v47 = v40;
      v47[1] = v41;
      uint64_t v48 = (uint64_t *)(v43 + v42[6]);
      uint64_t v49 = v59;
      *uint64_t v48 = v51;
      v48[1] = v49;
      *(void *)(v43 + v42[7]) = v52;
      *(void *)(v43 + v42[8]) = v44;
    }
    else
    {
      uint64_t v36 = sub_1B0869C28();
      sub_1B07F89B0((unint64_t *)&qword_1E9B3AE18, MEMORY[0x1E4F717F0]);
      swift_allocError();
      char v38 = v37;
      uint64_t v39 = type metadata accessor for Models.Button();
      *char v38 = 0x656C746974;
      v38[1] = 0xE500000000000000;
      long long v38[2] = v39;
      (*(void (**)(void *, void, uint64_t))(*(void *)(v36 - 8) + 104))(v38, *MEMORY[0x1E4F717D8], v36);
      swift_willThrow();
      (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v25, v55);
      v30(v66, v29);
      return (*(uint64_t (**)(char *, uint64_t))(v58 + 8))(v53, v62);
    }
  }
  return result;
}

unint64_t sub_1B07F7C20()
{
  unint64_t result = qword_1E9B3B368;
  if (!qword_1E9B3B368)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1E9B3B368);
  }
  return result;
}

unint64_t sub_1B07F7C60()
{
  unint64_t result = qword_1E9B3B370;
  if (!qword_1E9B3B370)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3B370);
  }
  return result;
}

uint64_t Models.Button.impressionMetrics.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1B07B9258(v1, a1, &qword_1E9B3AFE8);
}

uint64_t Models.Button.kind.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = (void *)(v1 + *(int *)(type metadata accessor for Models.Button() + 20));
  uint64_t v4 = v3[1];
  *a1 = *v3;
  a1[1] = v4;

  return swift_bridgeObjectRetain();
}

uint64_t Models.Button.title.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Models.Button() + 24));
  swift_bridgeObjectRetain();
  return v1;
}

void *Models.Button.buttonColor.getter()
{
  uint64_t v1 = *(void **)(v0 + *(int *)(type metadata accessor for Models.Button() + 28));
  id v2 = v1;
  return v1;
}

void *Models.Button.titleColor.getter()
{
  uint64_t v1 = *(void **)(v0 + *(int *)(type metadata accessor for Models.Button() + 32));
  id v2 = v1;
  return v1;
}

uint64_t Models.Button.action.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Models.Button();
  return sub_1B07B9258(v1 + *(int *)(v3 + 36), a1, &qword_1E9B3B000);
}

uint64_t sub_1B07F7E0C@<X0>(uint64_t a1@<X8>)
{
  return sub_1B07B9258(v1, a1, &qword_1E9B3AFE8);
}

uint64_t sub_1B07F7E34@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return Models.Button.init(deserializing:using:)(a1, a2, a3);
}

uint64_t sub_1B07F7E4C()
{
  return sub_1B0869F58();
}

unint64_t sub_1B07F7EAC()
{
  unint64_t result = 0xD000000000000011;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x656C746974;
      break;
    case 2:
      unint64_t result = 0x6E6F69746361;
      break;
    case 3:
      unint64_t result = 0x6F436E6F74747562;
      break;
    case 4:
      unint64_t result = 0x6C6F43656C746974;
      break;
    case 5:
      unint64_t result = 1684957547;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1B07F7F74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1B07F99F0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B07F7F9C(uint64_t a1)
{
  unint64_t v2 = sub_1B07F8844();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B07F7FD8(uint64_t a1)
{
  unint64_t v2 = sub_1B07F8844();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t Models.Button.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v52 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3B378);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v58 = (char *)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3AFE8);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v53 = (uint64_t)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1B0869728();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v54 = v7;
  uint64_t v55 = v8;
  MEMORY[0x1F4188790](v7);
  uint64_t v59 = (uint64_t)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_1B08695F8();
  uint64_t v11 = *(char **)(v10 - 8);
  uint64_t v56 = v10;
  uint64_t v57 = v11;
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v46 - v15;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3B380);
  uint64_t v60 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  double v19 = (char *)&v46 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  unint64_t v20 = sub_1B07F8844();
  uint64_t v21 = v61;
  sub_1B086A9C8();
  if (v21)
  {
    uint64_t v45 = (uint64_t)a1;
  }
  else
  {
    uint64_t v49 = v13;
    uint64_t v50 = v20;
    uint64_t v51 = v19;
    uint64_t v61 = v17;
    sub_1B07BBD78((uint64_t)a1, (uint64_t)v64);
    sub_1B08695B8();
    uint64_t v22 = v16;
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    sub_1B086A9B8();
    sub_1B0869718();
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3B390);
    v64[0] = 0;
    sub_1B07F8898();
    uint64_t v24 = (uint64_t)v58;
    uint64_t v25 = v61;
    sub_1B086A788();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 48))(v24, 1, v23) == 1)
    {
      sub_1B07BBE14(v24, &qword_1E9B3B378);
      uint64_t v26 = sub_1B0869948();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v53, 1, 1, v26);
    }
    else
    {
      sub_1B07B9258(v24, v53, &qword_1E9B3AFE8);
      sub_1B07BBE14(v24, &qword_1E9B3B390);
    }
    v64[0] = 1;
    uint64_t v50 = sub_1B086A798();
    uint64_t v58 = v28;
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    sub_1B086A9B8();
    sub_1B0869A58();
    swift_bridgeObjectRelease();
    LOBYTE(v62) = 2;
    sub_1B0869998();
    uint64_t v48 = a1;
    unint64_t v46 = sub_1B07F7C20();
    uint64_t v29 = (uint64_t)v49;
    sub_1B0869608();
    uint64_t v30 = v59;
    static UIColor.tryToMakeInstance(byDeserializing:using:)(v29, v59);
    uint64_t v47 = v31;
    uint64_t v32 = v56;
    uint64_t v33 = (void (*)(uint64_t, uint64_t))*((void *)v57 + 1);
    v33(v29, v56);
    uint64_t v57 = v22;
    sub_1B0869608();
    uint64_t v34 = v32;
    static UIColor.tryToMakeInstance(byDeserializing:using:)(v29, v30);
    uint64_t v36 = v35;
    id v37 = v51;
    v33(v29, v34);
    v64[63] = 5;
    sub_1B07F89F8();
    sub_1B086A7C8();
    (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v30, v54);
    v33((uint64_t)v57, v34);
    (*(void (**)(char *, uint64_t))(v60 + 8))(v37, v25);
    uint64_t v39 = v62;
    uint64_t v38 = v63;
    uint64_t v40 = (int *)type metadata accessor for Models.Button();
    uint64_t v41 = v52;
    sub_1B07F7514((uint64_t)v64, v52 + v40[9], &qword_1E9B3B000);
    sub_1B07F7514(v53, v41, &qword_1E9B3AFE8);
    id v42 = (void *)(v41 + v40[5]);
    *id v42 = v39;
    v42[1] = v38;
    uint64_t v43 = (uint64_t *)(v41 + v40[6]);
    uint64_t v44 = v58;
    *uint64_t v43 = v50;
    v43[1] = (uint64_t)v44;
    *(void *)(v41 + v40[7]) = v47;
    *(void *)(v41 + v40[8]) = v36;
    uint64_t v45 = (uint64_t)v48;
  }
  return __swift_destroy_boxed_opaque_existential_1(v45);
}

unint64_t sub_1B07F8844()
{
  unint64_t result = qword_1E9B3B388;
  if (!qword_1E9B3B388)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3B388);
  }
  return result;
}

unint64_t sub_1B07F8898()
{
  unint64_t result = qword_1E9B3B398;
  if (!qword_1E9B3B398)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1E9B3B390);
    sub_1B07F890C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3B398);
  }
  return result;
}

unint64_t sub_1B07F890C()
{
  unint64_t result = qword_1E9B3B3A0;
  if (!qword_1E9B3B3A0)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1E9B3AFE8);
    sub_1B07F89B0((unint64_t *)&qword_1E9B3B290, MEMORY[0x1E4F713A0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3B3A0);
  }
  return result;
}

uint64_t sub_1B07F89B0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1B07F89F8()
{
  unint64_t result = qword_1E9B3B3A8;
  if (!qword_1E9B3B3A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3B3A8);
  }
  return result;
}

uint64_t sub_1B07F8A4C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return Models.Button.init(from:)(a1, a2);
}

uint64_t *_s6ButtonVwCP(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_1B0869948();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3AFE8);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    uint64_t v11 = a3[5];
    uint64_t v12 = a3[6];
    uint64_t v13 = (uint64_t *)((char *)a1 + v11);
    uint64_t v14 = (uint64_t *)((char *)a2 + v11);
    uint64_t v15 = v14[1];
    *uint64_t v13 = *v14;
    v13[1] = v15;
    uint64_t v16 = (uint64_t *)((char *)a1 + v12);
    uint64_t v17 = (uint64_t *)((char *)a2 + v12);
    uint64_t v18 = v17[1];
    void *v16 = *v17;
    v16[1] = v18;
    uint64_t v19 = a3[7];
    uint64_t v20 = a3[8];
    uint64_t v21 = *(void **)((char *)a2 + v19);
    *(uint64_t *)((char *)a1 + v19) = (uint64_t)v21;
    uint64_t v22 = *(void **)((char *)a2 + v20);
    *(uint64_t *)((char *)a1 + v20) = (uint64_t)v22;
    uint64_t v23 = a3[9];
    uint64_t v24 = (char *)a1 + v23;
    uint64_t v25 = (char *)a2 + v23;
    uint64_t v26 = *((void *)v25 + 3);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v27 = v21;
    id v28 = v22;
    if (v26)
    {
      uint64_t v29 = *((void *)v25 + 4);
      *((void *)v24 + 3) = v26;
      *((void *)v24 + 4) = v29;
      (**(void (***)(char *, char *, uint64_t))(v26 - 8))(v24, v25, v26);
    }
    else
    {
      long long v30 = *((_OWORD *)v25 + 1);
      *(_OWORD *)uint64_t v24 = *(_OWORD *)v25;
      *((_OWORD *)v24 + 1) = v30;
      *((void *)v24 + 4) = *((void *)v25 + 4);
    }
  }
  return a1;
}

uint64_t _s6ButtonVwxx(uint64_t a1, int *a2)
{
  uint64_t v4 = sub_1B0869948();
  uint64_t v5 = *(void *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t result = a1 + a2[9];
  if (*(void *)(result + 24))
  {
    return __swift_destroy_boxed_opaque_existential_1(result);
  }
  return result;
}

char *_s6ButtonVwcp(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1B0869948();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3AFE8);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v9 = a3[5];
  uint64_t v10 = a3[6];
  uint64_t v11 = &a1[v9];
  uint64_t v12 = &a2[v9];
  uint64_t v13 = *((void *)v12 + 1);
  *(void *)uint64_t v11 = *(void *)v12;
  *((void *)v11 + 1) = v13;
  uint64_t v14 = &a1[v10];
  uint64_t v15 = &a2[v10];
  uint64_t v16 = *((void *)v15 + 1);
  *(void *)uint64_t v14 = *(void *)v15;
  *((void *)v14 + 1) = v16;
  uint64_t v17 = a3[7];
  uint64_t v18 = a3[8];
  uint64_t v19 = *(void **)&a2[v17];
  *(void *)&a1[v17] = v19;
  uint64_t v20 = *(void **)&a2[v18];
  *(void *)&a1[v18] = v20;
  uint64_t v21 = a3[9];
  uint64_t v22 = &a1[v21];
  uint64_t v23 = &a2[v21];
  uint64_t v24 = *((void *)v23 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v25 = v19;
  id v26 = v20;
  if (v24)
  {
    uint64_t v27 = *((void *)v23 + 4);
    *((void *)v22 + 3) = v24;
    *((void *)v22 + 4) = v27;
    (**(void (***)(char *, char *, uint64_t))(v24 - 8))(v22, v23, v24);
  }
  else
  {
    long long v28 = *((_OWORD *)v23 + 1);
    *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
    *((_OWORD *)v22 + 1) = v28;
    *((void *)v22 + 4) = *((void *)v23 + 4);
  }
  return a1;
}

char *_s6ButtonVwca(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1B0869948();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3AFE8);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v12 = a3[5];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  *(void *)uint64_t v13 = *(void *)v14;
  *((void *)v13 + 1) = *((void *)v14 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v15 = a3[6];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  *(void *)uint64_t v16 = *(void *)v17;
  *((void *)v16 + 1) = *((void *)v17 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v18 = a3[7];
  uint64_t v19 = *(void **)&a1[v18];
  uint64_t v20 = *(void **)&a2[v18];
  *(void *)&a1[v18] = v20;
  id v21 = v20;

  uint64_t v22 = a3[8];
  uint64_t v23 = *(void **)&a1[v22];
  uint64_t v24 = *(void **)&a2[v22];
  *(void *)&a1[v22] = v24;
  id v25 = v24;

  uint64_t v26 = a3[9];
  uint64_t v27 = (uint64_t)&a1[v26];
  long long v28 = &a2[v26];
  uint64_t v29 = *((void *)v28 + 3);
  if (!*(void *)&a1[v26 + 24])
  {
    if (v29)
    {
      *(void *)(v27 + 24) = v29;
      *(void *)(v27 + 32) = *((void *)v28 + 4);
      (**(void (***)(uint64_t, char *))(v29 - 8))(v27, v28);
      return a1;
    }
LABEL_13:
    long long v30 = *(_OWORD *)v28;
    long long v31 = *((_OWORD *)v28 + 1);
    *(void *)(v27 + 32) = *((void *)v28 + 4);
    *(_OWORD *)uint64_t v27 = v30;
    *(_OWORD *)(v27 + 16) = v31;
    return a1;
  }
  if (!v29)
  {
    __swift_destroy_boxed_opaque_existential_1(v27);
    goto LABEL_13;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)v27, (uint64_t *)v28);
  return a1;
}

char *_s6ButtonVwtk(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1B0869948();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3AFE8);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v9 = a3[6];
  *(_OWORD *)&a1[a3[5]] = *(_OWORD *)&a2[a3[5]];
  *(_OWORD *)&a1[v9] = *(_OWORD *)&a2[v9];
  uint64_t v10 = a3[8];
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  *(void *)&a1[v10] = *(void *)&a2[v10];
  uint64_t v11 = a3[9];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  long long v14 = *((_OWORD *)v13 + 1);
  *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
  *((_OWORD *)v12 + 1) = v14;
  *((void *)v12 + 4) = *((void *)v13 + 4);
  return a1;
}

char *_s6ButtonVwta(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1B0869948();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3AFE8);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v12 = a3[5];
  uint64_t v13 = &a1[v12];
  long long v14 = &a2[v12];
  uint64_t v16 = *(void *)v14;
  uint64_t v15 = *((void *)v14 + 1);
  *(void *)uint64_t v13 = v16;
  *((void *)v13 + 1) = v15;
  swift_bridgeObjectRelease();
  uint64_t v17 = a3[6];
  uint64_t v18 = &a1[v17];
  uint64_t v19 = &a2[v17];
  uint64_t v21 = *(void *)v19;
  uint64_t v20 = *((void *)v19 + 1);
  *(void *)uint64_t v18 = v21;
  *((void *)v18 + 1) = v20;
  swift_bridgeObjectRelease();
  uint64_t v22 = a3[7];
  uint64_t v23 = *(void **)&a1[v22];
  *(void *)&a1[v22] = *(void *)&a2[v22];

  uint64_t v24 = a3[8];
  id v25 = *(void **)&a1[v24];
  *(void *)&a1[v24] = *(void *)&a2[v24];

  uint64_t v26 = a3[9];
  uint64_t v27 = &a1[v26];
  if (*(void *)&a1[v26 + 24]) {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&a1[v26]);
  }
  long long v28 = *(_OWORD *)&a2[v26 + 16];
  *(_OWORD *)uint64_t v27 = *(_OWORD *)&a2[v26];
  *((_OWORD *)v27 + 1) = v28;
  *((void *)v27 + 4) = *(void *)&a2[v26 + 32];
  return a1;
}

uint64_t _s6ButtonVwet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B07F9588);
}

uint64_t sub_1B07F9588(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3AFE8);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t _s6ButtonVwst(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B07F9664);
}

uint64_t sub_1B07F9664(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3AFE8);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  }
  return result;
}

void sub_1B07F9728()
{
  sub_1B07F35A0();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

ValueMetadata *type metadata accessor for Models.Button.Kind()
{
  return &type metadata for Models.Button.Kind;
}

unsigned char *_s6ButtonV10CodingKeysOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B07F98B0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *_s6ButtonV10CodingKeysOMa()
{
  return &_s6ButtonV10CodingKeysON;
}

unint64_t sub_1B07F98EC()
{
  unint64_t result = qword_1E9B3B3C0;
  if (!qword_1E9B3B3C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3B3C0);
  }
  return result;
}

unint64_t sub_1B07F9944()
{
  unint64_t result = qword_1E9B3B3C8;
  if (!qword_1E9B3B3C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3B3C8);
  }
  return result;
}

unint64_t sub_1B07F999C()
{
  unint64_t result = qword_1E9B3B3D0;
  if (!qword_1E9B3B3D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3B3D0);
  }
  return result;
}

uint64_t sub_1B07F99F0(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000011 && a2 == 0x80000001B0874970 || (sub_1B086A8A8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656C746974 && a2 == 0xE500000000000000 || (sub_1B086A8A8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6E6F69746361 && a2 == 0xE600000000000000 || (sub_1B086A8A8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6F436E6F74747562 && a2 == 0xEB00000000726F6CLL || (sub_1B086A8A8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6C6F43656C746974 && a2 == 0xEA0000000000726FLL || (sub_1B086A8A8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 1684957547 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v5 = sub_1B086A8A8();
    swift_bridgeObjectRelease();
    if (v5) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

id TraitEnvironmentPlaceholder.__allocating_init(traitCollection:)(uint64_t a1)
{
  int v3 = (char *)objc_allocWithZone(v1);
  *(void *)&v3[OBJC_IVAR____TtC5JetUI27TraitEnvironmentPlaceholder_traitCollection] = a1;
  v5.receiver = v3;
  v5.super_class = v1;
  return objc_msgSendSuper2(&v5, sel_init);
}

id TraitEnvironmentPlaceholder.init(traitCollection:)(uint64_t a1)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v1[OBJC_IVAR____TtC5JetUI27TraitEnvironmentPlaceholder_traitCollection] = a1;
  v5.receiver = v1;
  v5.super_class = ObjectType;
  return objc_msgSendSuper2(&v5, sel_init);
}

id TraitEnvironmentPlaceholder.traitCollection.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC5JetUI27TraitEnvironmentPlaceholder_traitCollection);
}

id TraitEnvironmentPlaceholder.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void TraitEnvironmentPlaceholder.init()()
{
}

id TraitEnvironmentPlaceholder.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id UITraitEnvironment.withOverrideTraitCollection(_:)(void *a1)
{
  __swift_instantiateConcreteTypeFromMangledName(qword_1EB596010);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1B086FDB0;
  *(void *)(v3 + 32) = objc_msgSend(v1, sel_traitCollection);
  *(void *)(v3 + 40) = a1;
  uint64_t v11 = v3;
  sub_1B0869F98();
  sub_1B07BCC68();
  id v4 = a1;
  objc_super v5 = (void *)sub_1B0869F78();
  swift_bridgeObjectRelease();
  id v6 = objc_msgSend(self, sel_traitCollectionWithTraitsFromCollections_, v5);

  uint64_t v7 = (objc_class *)type metadata accessor for TraitEnvironmentPlaceholder();
  uint64_t v8 = (char *)objc_allocWithZone(v7);
  *(void *)&v8[OBJC_IVAR____TtC5JetUI27TraitEnvironmentPlaceholder_traitCollection] = v6;
  v10.receiver = v8;
  v10.super_class = v7;
  return objc_msgSendSuper2(&v10, sel_init);
}

id UITraitEnvironment.withAccessibleContentSizesDisabled.getter()
{
  id v1 = objc_msgSend(v0, sel_traitCollection);
  id v2 = objc_msgSend(v1, sel_preferredContentSizeCategory);
  char v3 = sub_1B086A348();

  if (v3)
  {
    __swift_instantiateConcreteTypeFromMangledName(qword_1EB596010);
    uint64_t v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_1B086FDB0;
    *(void *)(v4 + 32) = objc_msgSend(v0, sel_traitCollection);
    uint64_t v5 = *MEMORY[0x1E4FB27B0];
    id v6 = self;
    *(void *)(v4 + 40) = objc_msgSend(v6, sel_traitCollectionWithPreferredContentSizeCategory_, v5);
    uint64_t v13 = v4;
    sub_1B0869F98();
    sub_1B07BCC68();
    uint64_t v7 = (void *)sub_1B0869F78();
    swift_bridgeObjectRelease();
    id v8 = objc_msgSend(v6, sel_traitCollectionWithTraitsFromCollections_, v7);

    uint64_t v9 = (objc_class *)type metadata accessor for TraitEnvironmentPlaceholder();
    objc_super v10 = (char *)objc_allocWithZone(v9);
    *(void *)&v10[OBJC_IVAR____TtC5JetUI27TraitEnvironmentPlaceholder_traitCollection] = v8;
    v12.receiver = v10;
    v12.super_class = v9;
    return objc_msgSendSuper2(&v12, sel_init);
  }
  else
  {
    swift_unknownObjectRetain();
  }
  return v0;
}

uint64_t method lookup function for TraitEnvironmentPlaceholder(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for TraitEnvironmentPlaceholder);
}

uint64_t dispatch thunk of TraitEnvironmentPlaceholder.__allocating_init(traitCollection:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t VerticalMarginsMeasurable.child.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1 + 16;
  swift_beginAccess();
  return sub_1B07BBD78(v3, a1);
}

uint64_t VerticalMarginsMeasurable.topMargin.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  swift_beginAccess();
  return sub_1B07BBD78(v3 + 56, a1);
}

uint64_t VerticalMarginsMeasurable.bottomMargin.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  swift_beginAccess();
  return sub_1B07BBD78(v3 + 96, a1);
}

uint64_t VerticalMarginsMeasurable.skipIfEmpty.getter()
{
  uint64_t v1 = *v0;
  swift_beginAccess();
  return *(unsigned __int8 *)(v1 + 136);
}

uint64_t VerticalMarginsMeasurable.shouldMeasureToBaseline.getter()
{
  uint64_t v1 = *v0;
  swift_beginAccess();
  return *(unsigned __int8 *)(v1 + 137);
}

uint64_t initializeWithCopy for VerticalMarginsMeasurable.Storage(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 40, a2 + 40);
  long long v6 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 104) = v6;
  (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 80, a2 + 80);
  *(_WORD *)(a1 + 120) = *(_WORD *)(a2 + 120);
  return a1;
}

uint64_t assignWithCopy for VerticalMarginsMeasurable.Storage(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(unsigned char *)(a1 + 121) = *(unsigned char *)(a2 + 121);
  return a1;
}

__n128 __swift_memcpy122_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  long long v6 = a2[5];
  long long v7 = a2[6];
  *(_OWORD *)(a1 + 106) = *(long long *)((char *)a2 + 106);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for VerticalMarginsMeasurable.Storage(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  __swift_destroy_boxed_opaque_existential_1(a1 + 80);
  long long v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v5;
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(unsigned char *)(a1 + 121) = *(unsigned char *)(a2 + 121);
  return a1;
}

uint64_t getEnumTagSinglePayload for VerticalMarginsMeasurable.Storage(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 122)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for VerticalMarginsMeasurable.Storage(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 120) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 122) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 122) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t Margins.init(_:top:leading:bottom:trailing:)@<X0>(long long *a1@<X0>, long long *a2@<X1>, long long *a3@<X2>, long long *a4@<X3>, long long *a5@<X4>, uint64_t a6@<X8>)
{
  sub_1B07BA8FC(a1, a6);
  sub_1B07BA8FC(a2, a6 + 40);
  sub_1B07BA8FC(a3, a6 + 80);
  sub_1B07BA8FC(a4, a6 + 120);

  return sub_1B07BA8FC(a5, a6 + 160);
}

uint64_t Margins.Placements.union.getter@<X0>(uint64_t a1@<X8>)
{
  sub_1B07C0D04(v1, (uint64_t)v15);
  Margins.Placements.next()((uint64_t)v9);
  uint64_t result = sub_1B07C09AC((uint64_t)v15);
  if (v10)
  {
    long long v7 = v12;
    long long v8 = v11;
    uint64_t v4 = v13;
    uint64_t v5 = v14;
    uint64_t result = sub_1B07BD394((uint64_t)v9);
    *(_OWORD *)a1 = v8;
    *(_OWORD *)(a1 + 16) = v7;
    *(void *)(a1 + 32) = v4;
    *(void *)(a1 + 40) = v5;
  }
  else
  {
    if (qword_1E9B3A3E8 != -1) {
      uint64_t result = swift_once();
    }
    long long v6 = xmmword_1E9B3A5A0;
    *(_OWORD *)a1 = xmmword_1E9B3A590;
    *(_OWORD *)(a1 + 16) = v6;
    *(_OWORD *)(a1 + 32) = xmmword_1E9B3A5B0;
  }
  return result;
}

__n128 sub_1B07FA630@<Q0>(uint64_t a1@<X8>)
{
  long long v2 = *(_OWORD *)(v1 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(v1 + 192);
  *(_OWORD *)(a1 + 208) = v2;
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(v1 + 224);
  long long v3 = *(_OWORD *)(v1 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(v1 + 128);
  *(_OWORD *)(a1 + 144) = v3;
  long long v4 = *(_OWORD *)(v1 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(v1 + 160);
  *(_OWORD *)(a1 + 176) = v4;
  long long v5 = *(_OWORD *)(v1 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(v1 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  long long v6 = *(_OWORD *)(v1 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(v1 + 96);
  *(_OWORD *)(a1 + 112) = v6;
  long long v7 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v7;
  __n128 result = *(__n128 *)(v1 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v1 + 32);
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t sub_1B07FA674()
{
  uint64_t v1 = sub_1B08501A8(v0);
  sub_1B07C09AC(v0);
  return v1;
}

uint64_t Margins.layout(relativeTo:with:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  sub_1B07C0A4C((_OWORD *)(v6 + 40), v21);
  sub_1B07BBD78(v6, (uint64_t)v20);
  *(_OWORD *)(a2 + 216) = 0u;
  *(void *)(a2 + 232) = 0;
  *(_OWORD *)(a2 + 200) = 0u;
  *(double *)a2 = a3;
  *(double *)(a2 + 8) = a4;
  *(double *)(a2 + 16) = a5;
  *(double *)(a2 + 24) = a6;
  *(void *)(a2 + 32) = a1;
  long long v13 = v21[7];
  *(_OWORD *)(a2 + 136) = v21[6];
  *(_OWORD *)(a2 + 152) = v13;
  long long v14 = v21[9];
  *(_OWORD *)(a2 + 168) = v21[8];
  *(_OWORD *)(a2 + 184) = v14;
  long long v15 = v21[3];
  *(_OWORD *)(a2 + 72) = v21[2];
  *(_OWORD *)(a2 + 88) = v15;
  long long v16 = v21[5];
  *(_OWORD *)(a2 + 104) = v21[4];
  *(_OWORD *)(a2 + 120) = v16;
  long long v17 = v21[1];
  *(_OWORD *)(a2 + 40) = v21[0];
  *(_OWORD *)(a2 + 56) = v17;
  id v18 = a1;
  sub_1B07BBE14(a2 + 200, &qword_1EB595778);
  return sub_1B07BA8FC(v20, a2 + 200);
}

JetUI::_LayoutAlignment __swiftcall Margins._layoutAlignment(with:)(UITraitCollection with)
{
  uint64_t v3 = v2;
  long long v5 = v1;
  sub_1B07BBD78(v3, (uint64_t)v11);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB595770);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB595748);
  if (swift_dynamicCast())
  {
    sub_1B07BA8FC(v9, (uint64_t)v12);
    uint64_t v6 = v13;
    uint64_t v7 = v14;
    __swift_project_boxed_opaque_existential_1(v12, v13);
    (*(void (**)(Class, uint64_t, uint64_t))(v7 + 8))(with.super.isa, v6, v7);
    return (JetUI::_LayoutAlignment)__swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  }
  else
  {
    uint64_t v10 = 0;
    memset(v9, 0, sizeof(v9));
    JetUI::_LayoutAlignment v8 = (JetUI::_LayoutAlignment)sub_1B07BBE14((uint64_t)v9, &qword_1EB595750);
    *long long v5 = 0;
  }
  return v8;
}

unint64_t sub_1B07FA890(uint64_t a1)
{
  unint64_t result = sub_1B07FA8B8();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1B07FA8B8()
{
  unint64_t result = qword_1E9B3B3E0;
  if (!qword_1E9B3B3E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3B3E0);
  }
  return result;
}

unint64_t sub_1B07FA910()
{
  unint64_t result = qword_1E9B3B3E8;
  if (!qword_1E9B3B3E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3B3E8);
  }
  return result;
}

unint64_t sub_1B07FA968()
{
  unint64_t result = qword_1E9B3B3F0;
  if (!qword_1E9B3B3F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3B3F0);
  }
  return result;
}

uint64_t sub_1B07FA9BC@<X0>(void *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  sub_1B07C0A4C((_OWORD *)(v6 + 40), v21);
  sub_1B07BBD78(v6, (uint64_t)v20);
  *(_OWORD *)(a2 + 216) = 0u;
  *(void *)(a2 + 232) = 0;
  *(_OWORD *)(a2 + 200) = 0u;
  *(double *)a2 = a3;
  *(double *)(a2 + 8) = a4;
  *(double *)(a2 + 16) = a5;
  *(double *)(a2 + 24) = a6;
  *(void *)(a2 + 32) = a1;
  long long v13 = v21[7];
  *(_OWORD *)(a2 + 136) = v21[6];
  *(_OWORD *)(a2 + 152) = v13;
  long long v14 = v21[9];
  *(_OWORD *)(a2 + 168) = v21[8];
  *(_OWORD *)(a2 + 184) = v14;
  long long v15 = v21[3];
  *(_OWORD *)(a2 + 72) = v21[2];
  *(_OWORD *)(a2 + 88) = v15;
  long long v16 = v21[5];
  *(_OWORD *)(a2 + 104) = v21[4];
  *(_OWORD *)(a2 + 120) = v16;
  long long v17 = v21[1];
  *(_OWORD *)(a2 + 40) = v21[0];
  *(_OWORD *)(a2 + 56) = v17;
  id v18 = a1;
  sub_1B07BBE14(a2 + 200, &qword_1EB595778);
  return sub_1B07BA8FC(v20, a2 + 200);
}

_OWORD *initializeWithCopy for Margins(_OWORD *a1, _OWORD *a2)
{
  long long v4 = *(_OWORD *)((char *)a2 + 24);
  *(_OWORD *)((char *)a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  long long v5 = a2[4];
  a1[4] = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))((uint64_t)a1 + 40, (uint64_t)a2 + 40);
  long long v6 = *(_OWORD *)((char *)a2 + 104);
  *(_OWORD *)((char *)a1 + 104) = v6;
  (**(void (***)(uint64_t, uint64_t))(v6 - 8))((uint64_t)(a1 + 5), (uint64_t)(a2 + 5));
  long long v7 = a2[9];
  a1[9] = v7;
  (**(void (***)(uint64_t, uint64_t))(v7 - 8))((uint64_t)a1 + 120, (uint64_t)a2 + 120);
  long long v8 = *(_OWORD *)((char *)a2 + 184);
  *(_OWORD *)((char *)a1 + 184) = v8;
  (**(void (***)(uint64_t, uint64_t))(v8 - 8))((uint64_t)(a1 + 10), (uint64_t)(a2 + 10));
  return a1;
}

uint64_t *assignWithCopy for Margins(uint64_t *a1, uint64_t *a2)
{
  return a1;
}

__n128 __swift_memcpy200_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  long long v5 = *(_OWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  __n128 result = *(__n128 *)(a2 + 144);
  long long v9 = *(_OWORD *)(a2 + 160);
  long long v10 = *(_OWORD *)(a2 + 176);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 144) = result;
  return result;
}

uint64_t assignWithTake for Margins(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  __swift_destroy_boxed_opaque_existential_1(a1 + 80);
  long long v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v5;
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  __swift_destroy_boxed_opaque_existential_1(a1 + 120);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  __swift_destroy_boxed_opaque_existential_1(a1 + 160);
  long long v6 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v6;
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  return a1;
}

uint64_t getEnumTagSinglePayload for Margins(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 200)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Margins(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 200) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 200) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t assignWithCopy for Margins.Placements(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  long long v4 = *(void **)(a2 + 32);
  long long v5 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = v4;
  id v6 = v4;

  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 40), (uint64_t *)(a2 + 40));
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 80), (uint64_t *)(a2 + 80));
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 120), (uint64_t *)(a2 + 120));
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 160), (uint64_t *)(a2 + 160));
  uint64_t v7 = *(void *)(a2 + 224);
  if (!*(void *)(a1 + 224))
  {
    if (v7)
    {
      *(void *)(a1 + 224) = v7;
      *(void *)(a1 + 232) = *(void *)(a2 + 232);
      (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 200, a2 + 200);
      return a1;
    }
LABEL_7:
    long long v8 = *(_OWORD *)(a2 + 200);
    long long v9 = *(_OWORD *)(a2 + 216);
    *(void *)(a1 + 232) = *(void *)(a2 + 232);
    *(_OWORD *)(a1 + 200) = v8;
    *(_OWORD *)(a1 + 216) = v9;
    return a1;
  }
  if (!v7)
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 200);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 200), (uint64_t *)(a2 + 200));
  return a1;
}

__n128 __swift_memcpy240_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  long long v4 = a2[3];
  long long v5 = a2[4];
  long long v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  long long v7 = a2[7];
  long long v8 = a2[8];
  long long v9 = a2[10];
  *(_OWORD *)(a1 + 144) = a2[9];
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  __n128 result = (__n128)a2[11];
  long long v11 = a2[12];
  long long v12 = a2[14];
  *(_OWORD *)(a1 + 208) = a2[13];
  *(_OWORD *)(a1 + 224) = v12;
  *(__n128 *)(a1 + 176) = result;
  *(_OWORD *)(a1 + 192) = v11;
  return result;
}

uint64_t assignWithTake for Margins.Placements(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  long long v5 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);

  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  __swift_destroy_boxed_opaque_existential_1(a1 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v6;
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  __swift_destroy_boxed_opaque_existential_1(a1 + 120);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  __swift_destroy_boxed_opaque_existential_1(a1 + 160);
  long long v7 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v7;
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  if (*(void *)(a1 + 224)) {
    __swift_destroy_boxed_opaque_existential_1(a1 + 200);
  }
  long long v8 = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = v8;
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  return a1;
}

uint64_t getEnumTagSinglePayload for Margins.Placements(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 240)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Margins.Placements(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 232) = 0;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 240) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 240) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Margins.Placements()
{
  return &type metadata for Margins.Placements;
}

uint64_t destroy for Margins.Insets(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  __swift_destroy_boxed_opaque_existential_1(a1 + 80);

  return __swift_destroy_boxed_opaque_existential_1(a1 + 120);
}

uint64_t *assignWithCopy for Margins.Insets(uint64_t *a1, uint64_t *a2)
{
  return a1;
}

uint64_t assignWithTake for Margins.Insets(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  __swift_destroy_boxed_opaque_existential_1(a1 + 80);
  long long v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v5;
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  __swift_destroy_boxed_opaque_existential_1(a1 + 120);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  return a1;
}

uint64_t getEnumTagSinglePayload for Margins.Insets(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 160)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Margins.Insets(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 152) = 0;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 160) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 160) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Margins.Insets()
{
  return &type metadata for Margins.Insets;
}

CGPoint *sub_1B07FB350(CGPoint *result, uint64_t a2, uint64_t a3)
{
  long long v4 = result;
  CGPoint v5 = v3[3];
  CGPoint v54 = v3[2];
  CGPoint v55 = v5;
  CGPoint v56 = v3[4];
  CGFloat x = v3[5].x;
  CGPoint v6 = v3[1];
  CGPoint v52 = *v3;
  CGSize v53 = (CGSize)v6;
  if (!a2)
  {
    uint64_t v7 = 0;
LABEL_15:
    CGPoint v26 = v3[3];
    _OWORD v4[2] = v3[2];
    void v4[3] = v26;
    _OWORD v4[4] = v3[4];
    v4[5].CGFloat x = v3[5].x;
    CGPoint v27 = v3[1];
    CGPoint *v4 = *v3;
    v4[1] = v27;
    return (CGPoint *)v7;
  }
  uint64_t v7 = a3;
  if (!a3)
  {
LABEL_11:
    long long v3 = &v52;
    goto LABEL_15;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    uint64_t v8 = a2;
    sub_1B07BA914((uint64_t)&v55, (uint64_t)&v30);
    if (*((void *)&v31 + 1))
    {
      uint64_t v9 = 0;
      while (1)
      {
        sub_1B07BA8FC(&v30, (uint64_t)v37);
        sub_1B07BBE14((uint64_t)&v55, &qword_1EB595778);
        CGPoint v55 = (CGPoint)0;
        CGPoint v56 = (CGPoint)0;
        CGFloat x = 0.0;
        uint64_t v10 = v38;
        uint64_t v11 = v39;
        __swift_project_boxed_opaque_existential_1(v37, v38);
        CGSize v12 = v53;
        double v13 = (*(double (**)(void, uint64_t, uint64_t, CGFloat, CGFloat))(v11 + 8))(*(void *)&v54.x, v10, v11, v53.width, v53.height);
        double v15 = v14;
        double v28 = v17;
        double v29 = v16;
        CGPoint v18 = v52;
        v58.CGPoint origin = v52;
        v58.CGSize size = v12;
        double v19 = CGRectGetMidX(v58) - v13 * 0.5;
        v59.CGPoint origin = v18;
        v59.CGSize size = v12;
        double v20 = CGRectGetMidY(v59) - v15 * 0.5;
        sub_1B07BBD78((uint64_t)v37, (uint64_t)v36);
        sub_1B07BBD78((uint64_t)v36, (uint64_t)&v30);
        *((void *)&v32 + 1) = floor(v19);
        *(void *)&long long v33 = floor(v20);
        *((void *)&v33 + 1) = ceil(v13);
        *(void *)&long long v34 = ceil(v15);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
        *((void *)&v34 + 1) = floor(v29);
        double v35 = floor(v28);
        long long v42 = v32;
        long long v43 = v33;
        long long v40 = v30;
        long long v41 = v31;
        long long v44 = v34;
        double v45 = v35;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
        if (!*((void *)&v41 + 1)) {
          break;
        }
        long long v21 = v43;
        long long v48 = v42;
        long long v49 = v43;
        long long v22 = v44;
        long long v50 = v44;
        double v23 = v45;
        double v51 = v45;
        long long v24 = v40;
        long long v25 = v41;
        long long v46 = v40;
        long long v47 = v41;
        *(_OWORD *)(v8 + 32) = v42;
        *(_OWORD *)(v8 + 48) = v21;
        *(_OWORD *)(v8 + 64) = v22;
        *(double *)(v8 + 80) = v23;
        *(_OWORD *)uint64_t v8 = v24;
        *(_OWORD *)(v8 + 16) = v25;
        if (v7 - 1 == v9) {
          goto LABEL_11;
        }
        v8 += 88;
        sub_1B07BA914((uint64_t)&v55, (uint64_t)&v30);
        ++v9;
        if (!*((void *)&v31 + 1)) {
          goto LABEL_13;
        }
      }
    }
    else
    {
      uint64_t v9 = 0;
LABEL_13:
      sub_1B07BBE14((uint64_t)&v30, &qword_1EB595778);
      long long v40 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      double v45 = 0.0;
    }
    sub_1B07BBE14((uint64_t)&v40, &qword_1E9B3B3F8);
    long long v3 = &v52;
    uint64_t v7 = v9;
    goto LABEL_15;
  }
  __break(1u);
  return result;
}

CGPoint *sub_1B07FB61C(CGPoint *result, uint64_t a2, uint64_t a3)
{
  long long v4 = result;
  CGSize size = v3[6].size;
  v88[0] = v3[6].origin;
  v88[1] = size;
  v88[2] = v3[7].origin;
  CGSize v6 = v3[4].size;
  CGPoint origin = v3[4].origin;
  CGSize v85 = v6;
  CGSize v7 = v3[5].size;
  CGPoint v86 = v3[5].origin;
  CGSize v87 = v7;
  CGSize v8 = v3[2].size;
  CGPoint v80 = v3[2].origin;
  CGSize v81 = v8;
  CGSize v9 = v3[3].size;
  CGPoint v82 = v3[3].origin;
  CGSize v83 = v9;
  CGSize v10 = v3->size;
  v77.CGPoint origin = v3->origin;
  v77.CGSize size = v10;
  CGSize v11 = v3[1].size;
  CGPoint v78 = v3[1].origin;
  CGSize v79 = v11;
  if (!a2)
  {
    uint64_t v12 = 0;
LABEL_22:
    CGSize v42 = v3[6].size;
    v4[12] = v3[6].origin;
    v4[13] = (CGPoint)v42;
    v4[14] = v3[7].origin;
    CGSize v43 = v3[4].size;
    v4[8] = v3[4].origin;
    v4[9] = (CGPoint)v43;
    CGSize v44 = v3[5].size;
    v4[10] = v3[5].origin;
    v4[11] = (CGPoint)v44;
    CGSize v45 = v3[2].size;
    _OWORD v4[4] = v3[2].origin;
    v4[5] = (CGPoint)v45;
    CGSize v46 = v3[3].size;
    v4[6] = v3[3].origin;
    v4[7] = (CGPoint)v46;
    CGSize v47 = v3->size;
    CGPoint *v4 = v3->origin;
    v4[1] = (CGPoint)v47;
    CGSize v48 = v3[1].size;
    _OWORD v4[2] = v3[1].origin;
    void v4[3] = (CGPoint)v48;
    return (CGPoint *)v12;
  }
  uint64_t v12 = a3;
  if (!a3)
  {
    long long v3 = &v77;
    goto LABEL_22;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    uint64_t v13 = a2;
    sub_1B07BA914((uint64_t)v88 + 8, (uint64_t)&v55);
    if (*((void *)&v56 + 1))
    {
      uint64_t v14 = 0;
      uint64_t v49 = v12;
      uint64_t v50 = v12 - 1;
      while (1)
      {
        sub_1B07BA8FC(&v55, (uint64_t)v62);
        sub_1B07BBE14((uint64_t)v88 + 8, &qword_1EB595778);
        memset((char *)v88 + 8, 0, 40);
        CGFloat x = v78.x;
        double v16 = sub_1B07C1158(*(void **)&v78.x);
        double v53 = v17;
        double v54 = v18;
        double v19 = v18;
        CGPoint v20 = v77.origin;
        CGSize v21 = v77.size;
        double v23 = CGRectGetWidth(v77) - (v17 + v22);
        v89.CGPoint origin = v20;
        v89.CGSize size = v21;
        double v24 = CGRectGetHeight(v89) - (v16 + v19);
        double v25 = v23 < 0.0 ? 0.0 : v23;
        double v26 = v24 < 0.0 ? 0.0 : v24;
        uint64_t v27 = v63;
        uint64_t v28 = v64;
        __swift_project_boxed_opaque_existential_1(v62, v63);
        double v29 = (*(double (**)(CGFloat, uint64_t, uint64_t, double, double))(v28 + 8))(COERCE_CGFLOAT(*(void *)&x), v27, v28, v25, v26);
        double v51 = v30;
        double v52 = v29;
        double v32 = v31;
        double v34 = v33;
        v90.CGPoint origin = v20;
        v90.CGSize size = v21;
        double v35 = v53 + CGRectGetMinX(v90);
        v91.CGPoint origin = v20;
        v91.CGSize size = v21;
        double v36 = v16 + CGRectGetMinY(v91);
        sub_1B07BBD78((uint64_t)v62, (uint64_t)v61);
        sub_1B07BBD78((uint64_t)v61, (uint64_t)&v55);
        *((void *)&v57 + 1) = floor(v35);
        *(void *)&long long v58 = floor(v36);
        *((void *)&v58 + 1) = ceil(v52);
        *(void *)&long long v59 = ceil(v51);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v61);
        *((void *)&v59 + 1) = floor(v16 + v32);
        double v60 = floor(v54 + v34);
        long long v67 = v57;
        long long v68 = v58;
        long long v65 = v55;
        long long v66 = v56;
        long long v69 = v59;
        double v70 = v60;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v62);
        if (!*((void *)&v66 + 1)) {
          break;
        }
        long long v37 = v68;
        long long v73 = v67;
        long long v74 = v68;
        long long v38 = v69;
        long long v75 = v69;
        double v39 = v70;
        double v76 = v70;
        long long v40 = v65;
        long long v41 = v66;
        long long v71 = v65;
        long long v72 = v66;
        *(_OWORD *)(v13 + 32) = v67;
        *(_OWORD *)(v13 + 48) = v37;
        *(_OWORD *)(v13 + 64) = v38;
        *(double *)(v13 + 80) = v39;
        *(_OWORD *)uint64_t v13 = v40;
        *(_OWORD *)(v13 + 16) = v41;
        if (v50 == v14)
        {
          long long v3 = &v77;
          uint64_t v12 = v49;
          goto LABEL_22;
        }
        v13 += 88;
        sub_1B07BA914((uint64_t)v88 + 8, (uint64_t)&v55);
        ++v14;
        if (!*((void *)&v56 + 1)) {
          goto LABEL_19;
        }
      }
    }
    else
    {
      uint64_t v14 = 0;
LABEL_19:
      sub_1B07BBE14((uint64_t)&v55, &qword_1EB595778);
      long long v65 = 0u;
      long long v66 = 0u;
      long long v67 = 0u;
      long long v68 = 0u;
      long long v69 = 0u;
      double v70 = 0.0;
    }
    sub_1B07BBE14((uint64_t)&v65, &qword_1E9B3B3F8);
    long long v3 = &v77;
    uint64_t v12 = v14;
    goto LABEL_22;
  }
  __break(1u);
  return result;
}

CGPoint *sub_1B07FB9B0(CGPoint *result, uint64_t a2, uint64_t a3)
{
  CGSize size = v3[3].size;
  v84[0] = v3[3].origin;
  v84[1] = size;
  v84[2] = v3[4].origin;
  CGSize v5 = v3[1].size;
  CGPoint origin = v3[1].origin;
  CGSize v81 = v5;
  CGSize v6 = v3[2].size;
  CGPoint v82 = v3[2].origin;
  CGSize v83 = v6;
  CGSize v7 = v3->size;
  v79.CGPoint origin = v3->origin;
  v79.CGSize size = v7;
  if (!a2)
  {
    uint64_t v8 = 0;
LABEL_48:
    CGSize v46 = v3[3].size;
    result[6] = v3[3].origin;
    result[7] = (CGPoint)v46;
    result[8] = v3[4].origin;
    CGSize v47 = v3[1].size;
    result[2] = v3[1].origin;
    result[3] = (CGPoint)v47;
    CGSize v48 = v3[2].size;
    result[4] = v3[2].origin;
    result[5] = (CGPoint)v48;
    CGSize v49 = v3->size;
    *__n128 result = v3->origin;
    result[1] = (CGPoint)v49;
    return (CGPoint *)v8;
  }
  uint64_t v8 = a3;
  if (!a3)
  {
    long long v3 = &v79;
    goto LABEL_48;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = a2;
    double v51 = result;
    sub_1B07BA914((uint64_t)v84 + 8, (uint64_t)&v57);
    if (*((void *)&v58 + 1))
    {
      uint64_t v10 = v8;
      uint64_t v8 = 0;
      uint64_t v50 = v10;
      uint64_t v52 = v10 - 1;
      while (1)
      {
        sub_1B07BA8FC(&v57, (uint64_t)v64);
        sub_1B07BBE14((uint64_t)v84 + 8, &qword_1EB595778);
        memset((char *)v84 + 8, 0, 40);
        double y = origin.y;
        int width_low = LOBYTE(v81.width);
        double height = v81.height;
        int x_low = LOBYTE(v82.x);
        CGPoint v15 = v79.origin;
        CGSize v16 = v79.size;
        double Width = CGRectGetWidth(v79);
        unsigned __int8 v18 = width_low ^ 1;
        int v19 = (width_low ^ 1) & (Width < y);
        double v56 = y;
        if (v19) {
          double v20 = y;
        }
        else {
          double v20 = Width;
        }
        if (Width > height) {
          double Width = height;
        }
        if (x_low) {
          double Width = v20;
        }
        if (v19) {
          double v21 = v20;
        }
        else {
          double v21 = Width;
        }
        double v22 = v82.y;
        int v23 = LOBYTE(v83.width);
        double v24 = v83.height;
        int v25 = LOBYTE(v84[0]);
        v85.CGPoint origin = v15;
        v85.CGSize size = v16;
        double v26 = CGRectGetHeight(v85);
        int v27 = (v23 ^ 1) & (v26 < v22);
        if (v27) {
          double v28 = v22;
        }
        else {
          double v28 = v26;
        }
        double v53 = v24;
        if (v26 > v24) {
          double v26 = v24;
        }
        if (v25) {
          double v26 = v28;
        }
        if (v27) {
          double v29 = v28;
        }
        else {
          double v29 = v26;
        }
        uint64_t v30 = v65;
        uint64_t v31 = v66;
        __swift_project_boxed_opaque_existential_1(v64, v65);
        double v32 = (*(double (**)(void, uint64_t, uint64_t, double, double))(v31 + 8))(*(void *)&origin.x, v30, v31, v21, v29);
        double v34 = v33;
        double v54 = v36;
        double v55 = v35;
        v86.CGPoint origin = v15;
        v86.CGSize size = v16;
        double MinX = CGRectGetMinX(v86);
        v87.CGPoint origin = v15;
        v87.CGSize size = v16;
        double MinY = CGRectGetMinY(v87);
        if ((v18 & (v32 < v56)) != 0) {
          double v39 = v56;
        }
        else {
          double v39 = v32;
        }
        if ((v18 & (v32 < v56) | x_low) != 1)
        {
          double v39 = height;
          if (v32 <= height) {
            double v39 = v32;
          }
        }
        double v40 = ((v23 ^ 1) & (v34 < v22)) != 0 ? v22 : v34;
        if (((v23 ^ 1) & (v34 < v22) | v25) != 1)
        {
          double v40 = v53;
          if (v34 <= v53) {
            double v40 = v34;
          }
        }
        sub_1B07BBD78((uint64_t)v64, (uint64_t)v63);
        sub_1B07BBD78((uint64_t)v63, (uint64_t)&v57);
        *((void *)&v59 + 1) = floor(MinX);
        *(void *)&long long v60 = floor(MinY);
        *((void *)&v60 + 1) = ceil(v39);
        *(void *)&long long v61 = ceil(v40);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v63);
        *((void *)&v61 + 1) = floor(v55);
        double v62 = floor(v54);
        long long v69 = v59;
        long long v70 = v60;
        long long v67 = v57;
        long long v68 = v58;
        long long v71 = v61;
        double v72 = v62;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v64);
        if (!*((void *)&v68 + 1)) {
          break;
        }
        long long v41 = v70;
        long long v75 = v69;
        long long v76 = v70;
        long long v42 = v71;
        long long v77 = v71;
        double v43 = v72;
        double v78 = v72;
        long long v44 = v67;
        long long v45 = v68;
        long long v73 = v67;
        long long v74 = v68;
        *(_OWORD *)(v9 + 32) = v69;
        *(_OWORD *)(v9 + 48) = v41;
        *(_OWORD *)(v9 + 64) = v42;
        *(double *)(v9 + 80) = v43;
        *(_OWORD *)uint64_t v9 = v44;
        *(_OWORD *)(v9 + 16) = v45;
        if (v52 == v8)
        {
          long long v3 = &v79;
          uint64_t v8 = v50;
          __n128 result = v51;
          goto LABEL_48;
        }
        v9 += 88;
        sub_1B07BA914((uint64_t)v84 + 8, (uint64_t)&v57);
        ++v8;
        if (!*((void *)&v58 + 1)) {
          goto LABEL_45;
        }
      }
    }
    else
    {
      uint64_t v8 = 0;
LABEL_45:
      sub_1B07BBE14((uint64_t)&v57, &qword_1EB595778);
      long long v67 = 0u;
      long long v68 = 0u;
      long long v69 = 0u;
      long long v70 = 0u;
      long long v71 = 0u;
      double v72 = 0.0;
    }
    sub_1B07BBE14((uint64_t)&v67, &qword_1E9B3B3F8);
    long long v3 = &v79;
    __n128 result = v51;
    goto LABEL_48;
  }
  __break(1u);
  return result;
}

void sub_1B07FBDB0()
{
  uint64_t v0 = (void *)*MEMORY[0x1E4FB27D0];
  uint64_t v1 = self;
  id v2 = v0;
  id v3 = objc_msgSend(v1, sel_traitCollectionWithPreferredContentSizeCategory_, v2);

  qword_1EB595E30 = (uint64_t)v3;
}

id static UITraitCollection.unscaledContentSizeCategory.getter()
{
  if (qword_1EB595E28 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)qword_1EB595E30;

  return v0;
}

id sub_1B07FBE7C(void *a1)
{
  id v3 = *(void **)v1;
  int v4 = *(char *)(v1 + 40);
  if (v4 < 0)
  {
    uint64_t v8 = *(void *)(v1 + 24);
    uint64_t v7 = *(void *)(v1 + 32);
    uint64_t v11 = v1 + 8;
    uint64_t v9 = *(void *)(v1 + 8);
    uint64_t v10 = *(void *)(v11 + 8);
    v13[0] = v3;
    v13[1] = v9;
    _OWORD v13[2] = v10;
    void v13[3] = v8;
    v13[4] = v7;
    char v14 = v4 & 0x7F;
    sub_1B07BF30C(v3, v9, v10, v8, v7, v4);
    id v12 = _sSo6UIFontC5JetUIE13preferredFont10forUseWith010compatibleH0AbC0eG4CaseO_So17UITraitCollectionCtFZ_0((uint64_t)v13, a1);
    sub_1B07BF284(v3, v9, v10, v8, v7, v4);
    return v12;
  }
  else
  {
    id v5 = objc_msgSend(self, sel_preferredFontForTextStyle_compatibleWithTraitCollection_, v3, a1);
    return v5;
  }
}

double sub_1B07FBF80(void *a1)
{
  id v3 = objc_msgSend(a1, sel_preferredContentSizeCategory);
  uint64_t v4 = sub_1B0869D98();
  uint64_t v6 = v5;
  if (v4 == sub_1B0869D98() && v6 == v7)
  {

    swift_bridgeObjectRelease_n();
    return 1.0;
  }
  else
  {
    char v9 = sub_1B086A8A8();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    double v10 = 1.0;
    if ((v9 & 1) == 0)
    {
      if (qword_1EB595E28 != -1) {
        swift_once();
      }
      uint64_t v11 = (void *)qword_1EB595E30;
      sub_1B07BA2D0(v1, v24);
      if (v25 < 0)
      {
        v25 &= ~0x80u;
        sub_1B07FC7A8((uint64_t)v24, (uint64_t)v26);
        sub_1B07FC7A8((uint64_t)v26, (uint64_t)v23);
        id v13 = v11;
        sub_1B07FC5CC((uint64_t)v1, (void (*)(void, void, void, void, void, void))sub_1B07BF30C);
        id v12 = _sSo6UIFontC5JetUIE13preferredFont10forUseWith010compatibleH0AbC0eG4CaseO_So17UITraitCollectionCtFZ_0((uint64_t)v23, v13);
        sub_1B07FC5CC((uint64_t)v1, (void (*)(void, void, void, void, void, void))sub_1B07BF284);
      }
      else
      {
        id v12 = objc_msgSend(self, sel_preferredFontForTextStyle_compatibleWithTraitCollection_, *(void *)&v24[0], v11);
      }
      objc_msgSend(v12, sel_lineHeight);
      double v15 = v14;
      objc_msgSend(v12, sel_leading);
      double v17 = v16;
      sub_1B07BA2D0(v1, v21);
      if (v22 < 0)
      {
        v22 &= ~0x80u;
        sub_1B07FC7A8((uint64_t)v21, (uint64_t)v23);
        sub_1B07FC7A8((uint64_t)v23, (uint64_t)v20);
        sub_1B07FC5CC((uint64_t)v1, (void (*)(void, void, void, void, void, void))sub_1B07BF30C);
        id v18 = _sSo6UIFontC5JetUIE13preferredFont10forUseWith010compatibleH0AbC0eG4CaseO_So17UITraitCollectionCtFZ_0((uint64_t)v20, a1);
        sub_1B07FC5CC((uint64_t)v1, (void (*)(void, void, void, void, void, void))sub_1B07BF284);
      }
      else
      {
        id v18 = objc_msgSend(self, sel_preferredFontForTextStyle_compatibleWithTraitCollection_, *(void *)&v21[0], a1);
      }
      double v10 = v15 + v17;
      objc_msgSend(v18, sel_lineHeight);
      objc_msgSend(v18, sel_leading);
    }
  }
  return v10;
}

double CGFloat.scaled(by:compatibleWith:)(long long *a1, void *a2, double a3)
{
  sub_1B07BA2D0(a1, v9);
  sub_1B07FC5CC((uint64_t)v9, (void (*)(void, void, void, void, void, void))sub_1B07BF30C);
  double v5 = sub_1B07FBF80(a2);
  double v7 = v6;
  sub_1B07FC5CC((uint64_t)v9, (void (*)(void, void, void, void, void, void))sub_1B07BF284);
  return v7 * (a3 / v5);
}

char *Array<A>.scalingLike(_:with:)(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  double v7 = __swift_project_boxed_opaque_existential_1(a1, v5);

  return sub_1B07FC4D0((uint64_t)v7, a2, a3, v5, v6);
}

char *Array<A>.scaled(by:compatibleWith:)(long long *a1, void *a2, uint64_t a3)
{
  sub_1B07BA2D0(a1, v7);
  sub_1B07FC5CC((uint64_t)v7, (void (*)(void, void, void, void, void, void))sub_1B07BF30C);
  uint64_t v5 = sub_1B07FC3DC((uint64_t)v7, a2, a3);
  sub_1B07FC5CC((uint64_t)v7, (void (*)(void, void, void, void, void, void))sub_1B07BF284);
  return v5;
}

char *sub_1B07FC3DC(uint64_t a1, void *a2, uint64_t a3)
{
  double v4 = sub_1B07FBF80(a2);
  double v6 = v5;
  int64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = sub_1B07CEA90(0, v7, 0, MEMORY[0x1E4FBC860]);
  char v9 = v8;
  if (v7)
  {
    unint64_t v10 = *((void *)v8 + 2);
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v7; ++i)
    {
      double v12 = *(double *)(a3 + 8 * i + 32);
      unint64_t v13 = *((void *)v9 + 3);
      if (v10 >= v13 >> 1) {
        char v9 = sub_1B07CEA90((char *)(v13 > 1), v10 + 1, 1, v9);
      }
      *((void *)v9 + 2) = v10 + 1;
      *(double *)&v9[8 * v10++ + 32] = v6 * (v12 / v4);
    }
    swift_bridgeObjectRelease();
  }
  return v9;
}

char *sub_1B07FC4D0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  double v6 = CustomTextStyle.scalingValues(compatibleWith:)(a2, a4, a5);
  double v8 = v7;
  int64_t v9 = *(void *)(a3 + 16);
  unint64_t v10 = sub_1B07CEA90(0, v9, 0, MEMORY[0x1E4FBC860]);
  uint64_t v11 = v10;
  if (v9)
  {
    unint64_t v12 = *((void *)v10 + 2);
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v9; ++i)
    {
      double v14 = *(double *)(a3 + 8 * i + 32);
      unint64_t v15 = *((void *)v11 + 3);
      if (v12 >= v15 >> 1) {
        uint64_t v11 = sub_1B07CEA90((char *)(v15 > 1), v12 + 1, 1, v11);
      }
      *((void *)v11 + 2) = v12 + 1;
      *(double *)&v11[8 * v12++ + 32] = v8 * (v14 / v6);
    }
    swift_bridgeObjectRelease();
  }
  return v11;
}

uint64_t sub_1B07FC5CC(uint64_t a1, void (*a2)(void, void, void, void, void, void))
{
  return a1;
}

uint64_t assignWithCopy for FontSource(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  char v8 = *(unsigned char *)(a2 + 40);
  sub_1B07BF30C(*(id *)a2, v4, v5, v6, v7, v8);
  int64_t v9 = *(void **)a1;
  uint64_t v10 = *(void *)(a1 + 8);
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = *(void *)(a1 + 24);
  uint64_t v13 = *(void *)(a1 + 32);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  char v14 = *(unsigned char *)(a1 + 40);
  *(unsigned char *)(a1 + 40) = v8;
  sub_1B07BF284(v9, v10, v11, v12, v13, v14);
  return a1;
}

uint64_t assignWithTake for FontSource(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32);
  char v4 = *(unsigned char *)(a2 + 40);
  uint64_t v5 = *(void **)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  long long v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  *(void *)(a1 + 32) = v3;
  char v11 = *(unsigned char *)(a1 + 40);
  *(unsigned char *)(a1 + 40) = v4;
  sub_1B07BF284(v5, v7, v6, v8, v9, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for FontSource(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x3F && *(unsigned char *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 63);
  }
  unsigned int v3 = ((*(unsigned __int8 *)(a1 + 40) >> 1) & 0x3E | (*(unsigned __int8 *)(a1 + 40) >> 7)) ^ 0x3F;
  if (v3 >= 0x3E) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for FontSource(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x3E)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 40) = 0;
    *(void *)__n128 result = a2 - 63;
    if (a3 >= 0x3F) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if (a3 >= 0x3F) {
      *(unsigned char *)(result + 41) = 0;
    }
    if (a2)
    {
      *(void *)(result + 32) = 0;
      *(_OWORD *)__n128 result = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(unsigned char *)(result + 40) = 4 * (((-a2 >> 1) & 0x1F) - 32 * a2);
    }
  }
  return result;
}

uint64_t sub_1B07FC7A8(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t static Interpolatable.interpolate(between:and:following:forInput:)(uint64_t a1, uint64_t a2, id a3, uint64_t a4, uint64_t a5, double a6)
{
  *(float *)&a6 = a6;
  objc_msgSend(a3, sel__solveForInput_, a6);
  v10.n128_f64[0] = v10.n128_f32[0];
  char v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(a5 + 8);

  return v11(a1, a2, a4, a5, v10);
}

uint64_t dispatch thunk of static Interpolatable.interpolateLinearly(between:and:forInput:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t CollectionContent.__allocating_init<A>(_:collectionView:cellProvider:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1B07FC8D4(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void))sub_1B07FDC20);
}

uint64_t CollectionContent.init<A>(_:collectionView:cellProvider:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1B07FC8D4(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void))sub_1B07FD7C0);
}

uint64_t sub_1B07FC8D4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(void))
{
  uint64_t v8 = a7();
  swift_unknownObjectRelease();

  swift_release();
  return v8;
}

uint64_t sub_1B07FC928(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_beginAccess();
  if (!swift_weakLoadStrong()) {
    return 0;
  }
  uint64_t v8 = sub_1B07FC9C4(a2, a3, a4, a1);
  swift_release();
  return v8;
}

uint64_t sub_1B07FC9C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v35 = a4;
  uint64_t v36 = a3;
  uint64_t v31 = *(void *)v4;
  uint64_t v34 = sub_1B0869238();
  uint64_t v29 = *(void *)(v34 - 8);
  MEMORY[0x1F4188790](v34);
  double v28 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v30 = (char *)&v26 - v10;
  uint64_t v11 = sub_1B08697A8();
  uint64_t v12 = sub_1B086A3B8();
  uint64_t v26 = *(void *)(v12 - 8);
  uint64_t v27 = v12;
  MEMORY[0x1F4188790](v12);
  char v14 = (char *)&v26 - v13;
  uint64_t v15 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v16);
  id v18 = (char *)&v26 - v17;
  swift_beginAccess();
  uint64_t v19 = *((void *)v4 + 3);
  uint64_t v32 = a1;
  v37[0] = a1;
  v37[1] = a2;
  uint64_t v20 = type metadata accessor for CollectionContent.SupplementaryViewProvider();
  swift_bridgeObjectRetain();
  MEMORY[0x1B3E97610](v38, v37, v19, MEMORY[0x1E4FBB1A0], v20, MEMORY[0x1E4FBB1B0]);
  uint64_t v33 = a2;
  swift_bridgeObjectRelease();
  double v21 = (uint64_t (*)(char *, uint64_t, uint64_t))v38[0];
  uint64_t v22 = v38[1];
  int v23 = v39;
  swift_endAccess();
  if (v23 == 255)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v28, v36, v34);
    uint64_t v40 = 0;
    unint64_t v41 = 0xE000000000000000;
    sub_1B086A5E8();
    v37[0] = v5;
    sub_1B086A878();
    sub_1B0869E68();
    sub_1B0869E68();
    sub_1B0869E68();
    sub_1B07FE278();
    sub_1B086A848();
    sub_1B0869E68();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (v23)
    {
      uint64_t v24 = v21(v5, v36, v35);
      sub_1B07FE2D0((uint64_t)v21, v22, v23);
      return v24;
    }
    sub_1B0869228();
    sub_1B0869428();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v14, 1, v11) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v14, v11);
      uint64_t v24 = v21(v18, v36, v35);
      sub_1B07FE2D0((uint64_t)v21, v22, v23);
      (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v11);
      return v24;
    }
    (*(void (**)(char *, uint64_t))(v26 + 8))(v14, v27);
    (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v30, v36, v34);
    uint64_t v40 = 0;
    unint64_t v41 = 0xE000000000000000;
    sub_1B086A5E8();
    v37[0] = v5;
    sub_1B086A878();
    sub_1B0869E68();
    sub_1B0869E68();
    sub_1B0869E68();
    sub_1B07FE278();
    sub_1B086A848();
    sub_1B0869E68();
    swift_bridgeObjectRelease();
  }
  uint64_t result = sub_1B086A6C8();
  __break(1u);
  return result;
}

uint64_t sub_1B07FCF14(uint64_t a1)
{
  swift_beginAccess();
  return CollectionContent.apply(_:animatingDifferences:completion:)(a1, *(unsigned __int8 *)(v1 + 40), 0, 0);
}

uint64_t *CollectionContent.__allocating_init<A>(_:collectionView:cellProvider:)(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return sub_1B07FCFA4(a1, a2, a3, a4, (uint64_t)&unk_1F0953A20, (uint64_t)sub_1B07FDCA0);
}

{
  return sub_1B07FCFA4(a1, a2, a3, a4, (uint64_t)&unk_1F0953A48, (uint64_t)sub_1B07FDD04);
}

uint64_t *sub_1B07FCFA4(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = *a1;
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = *(_OWORD *)(v6 + 80);
  *(void *)(v13 + 32) = a3;
  *(void *)(v13 + 40) = a4;
  *(void *)(v13 + 48) = a1;
  uint64_t v14 = *(void *)(v12 + 80);
  uint64_t v15 = *(void *)(v12 + 88);
  swift_allocObject();
  uint64_t v16 = swift_unknownObjectRetain();
  uint64_t v17 = sub_1B07FD7C0(v16, a2, a6, v13, v14, v15);
  swift_unknownObjectRelease();

  swift_release();
  return v17;
}

uint64_t sub_1B07FD0AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, char *, uint64_t), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9, void (*a10)(uint64_t, __n128))
{
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(a9);
  uint64_t v15 = *(void *)(v14 - 8);
  __n128 v16 = MEMORY[0x1F4188790](v14);
  id v18 = (char *)&v21 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  a10(a1, v16);
  uint64_t v19 = a4(a1, a2, v18, a3);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  return v19;
}

id CollectionContent.view.getter()
{
  return *(id *)(v0 + 32);
}

uint64_t CollectionContent.animatePresenterChanges.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 40);
}

uint64_t CollectionContent.animatePresenterChanges.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 40) = a1;
  return result;
}

uint64_t (*CollectionContent.animatePresenterChanges.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t CollectionContent.animateReloadTriggers.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 41);
}

uint64_t CollectionContent.animateReloadTriggers.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 41) = a1;
  return result;
}

uint64_t (*CollectionContent.animateReloadTriggers.modify())()
{
  return j__swift_endAccess;
}

uint64_t CollectionContent.onSnapshotApplied.getter()
{
  return swift_retain();
}

uint64_t CollectionContent.addSectionViewProvider(forKind:_:)()
{
  return sub_1B07FD378();
}

uint64_t CollectionContent.addSupplementaryViewProvider(forKind:_:)()
{
  return sub_1B07FD378();
}

uint64_t sub_1B07FD378()
{
  return swift_endAccess();
}

uint64_t CollectionContent.section(for:)()
{
  return sub_1B0869428();
}

uint64_t CollectionContent.snapshot()()
{
  return sub_1B0869458();
}

uint64_t CollectionContent.apply(_:animatingDifferences:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *v4;
  uint64_t v8 = swift_allocObject();
  swift_weakInit();
  uint64_t v9 = (void *)swift_allocObject();
  long long v9[2] = *(void *)(v7 + 80);
  _OWORD v9[3] = *(void *)(v7 + 88);
  _OWORD v9[4] = a3;
  void v9[5] = a4;
  v9[6] = v8;
  sub_1B07E8728(a3);
  swift_retain();
  sub_1B0869438();
  swift_release();

  return swift_release();
}

uint64_t sub_1B07FD5D8(void (*a1)(void))
{
  if (a1) {
    a1();
  }
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_1B0869528();
    return swift_release();
  }
  return result;
}

uint64_t CollectionContent.indexPath(forSection:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_1B0869448();
  if (v3)
  {
    uint64_t v9 = sub_1B0869238();
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56);
    uint64_t v6 = v9;
    uint64_t v7 = a1;
    uint64_t v8 = 1;
  }
  else
  {
    MEMORY[0x1B3E96B40](0, v2);
    uint64_t v4 = sub_1B0869238();
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
    uint64_t v6 = v4;
    uint64_t v7 = a1;
    uint64_t v8 = 0;
  }

  return v5(v7, v8, 1, v6);
}

uint64_t CollectionContent.item(for:)()
{
  return sub_1B0869418();
}

uint64_t CollectionContent.indexPath(forItem:)()
{
  return sub_1B0869468();
}

uint64_t CollectionContent.deinit()
{
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t CollectionContent.__deallocating_deinit()
{
  CollectionContent.deinit();

  return swift_deallocClassInstance();
}

uint64_t *sub_1B07FD7C0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v28 = a3;
  id v29 = a2;
  uint64_t v33 = a1;
  uint64_t v30 = *v7;
  uint64_t v11 = *(void *)(v30 + 80);
  uint64_t v12 = sub_1B08697A8();
  uint64_t v13 = *(void *)(v30 + 88);
  v36[0] = v12;
  v36[1] = sub_1B08697A8();
  _OWORD v36[2] = swift_getWitnessTable();
  v36[3] = swift_getWitnessTable();
  uint64_t v31 = sub_1B0869388();
  uint64_t v14 = sub_1B0869918();
  uint64_t v34 = *(void *)(v14 - 8);
  uint64_t v35 = v14;
  MEMORY[0x1F4188790](v14);
  uint64_t v32 = (char *)&v27 - v15;
  v36[0] = v12;
  sub_1B0869478();
  __n128 v16 = (void *)swift_allocObject();
  _OWORD v16[2] = v11;
  void v16[3] = v13;
  v16[4] = a5;
  void v16[5] = a6;
  v16[6] = v28;
  v16[7] = a4;
  id v17 = v29;
  swift_retain();
  id v18 = (void *)sub_1B08693F8();
  _OWORD v7[2] = (uint64_t)v18;
  v7[4] = (uint64_t)v17;
  type metadata accessor for CollectionContent.SupplementaryViewProvider();
  id v19 = v17;
  swift_getTupleTypeMetadata2();
  sub_1B0869FE8();
  _OWORD v7[3] = sub_1B0869CC8();
  *((_WORD *)v7 + 20) = 1;
  sub_1B0869548();
  _OWORD v7[6] = sub_1B0869538();
  uint64_t v20 = swift_allocObject();
  swift_weakInit();
  uint64_t v21 = (void *)swift_allocObject();
  _OWORD v21[2] = v11;
  v21[3] = v13;
  _OWORD v21[4] = a5;
  void v21[5] = a6;
  v21[6] = v20;
  id v22 = v18;
  swift_retain();
  sub_1B0869408();

  swift_release();
  (*(void (**)(uint64_t, uint64_t))(a6 + 32))(a5, a6);
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = a5;
  *(void *)(v23 + 24) = a6;
  uint64_t v24 = (void *)swift_allocObject();
  _OWORD v24[2] = a5;
  void v24[3] = a6;
  v24[4] = sub_1B07FE14C;
  void v24[5] = v23;
  sub_1B0869548();
  swift_getWitnessTable();
  sub_1B0866644();
  char v25 = v32;
  sub_1B08697C8();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v25, v35);
  (*(void (**)(uint64_t, uint64_t))(a6 + 40))(a5, a6);
  return v7;
}

uint64_t *sub_1B07FDC20(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1B07FD7C0(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_1B07FDCA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B07FDD24(a1, a2, a3, &qword_1EB596260, (void (*)(uint64_t, __n128))DiffableDataStatePresenter.lens(for:));
}

uint64_t objectdestroyTm()
{
  swift_release();
  swift_release();

  return MEMORY[0x1F4186498](v0, 56, 7);
}

uint64_t sub_1B07FDD04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B07FDD24(a1, a2, a3, &qword_1E9B3AFF0, (void (*)(uint64_t, __n128))DiffableDataStatePresenter.writableLens(for:));
}

uint64_t sub_1B07FDD24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, void (*a5)(uint64_t, __n128))
{
  return sub_1B07FD0AC(a1, a2, a3, *(uint64_t (**)(uint64_t, uint64_t, char *, uint64_t))(v5 + 32), *(void *)(v5 + 40), *(void *)(v5 + 48), *(void *)(v5 + 16), *(void *)(v5 + 24), a4, a5);
}

uint64_t type metadata accessor for CollectionContent.SupplementaryViewProvider()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1B07FDD74()
{
  if (*(void *)(v0 + 32)) {
    swift_release();
  }
  swift_release();

  return MEMORY[0x1F4186498](v0, 56, 7);
}

uint64_t sub_1B07FDDBC()
{
  return sub_1B07FD5D8(*(void (**)(void))(v0 + 32));
}

uint64_t sub_1B07FDDCC()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for CollectionContent()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t method lookup function for CollectionContent(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for CollectionContent);
}

uint64_t dispatch thunk of CollectionContent.__allocating_init<A>(_:collectionView:cellProvider:)()
{
  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t sub_1B07FDE84()
{
  return swift_retain();
}

uint64_t sub_1B07FDE8C()
{
  return sub_1B07FDE9C();
}

uint64_t sub_1B07FDE9C()
{
  return swift_release();
}

uint64_t sub_1B07FDEA4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  char v5 = *((unsigned char *)a2 + 16);
  sub_1B07FDE84();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t sub_1B07FDEF0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  char v5 = *((unsigned char *)a2 + 16);
  sub_1B07FDE84();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  sub_1B07FDE9C();
  return a1;
}

uint64_t sub_1B07FDF48(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v3;
  sub_1B07FDE9C();
  return a1;
}

uint64_t _s14ProgrammedTextOwet(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t _s14ProgrammedTextOwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1B07FE01C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_1B07FE024(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2 & 1;
  return result;
}

uint64_t sub_1B07FE030()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 64, 7);
}

uint64_t sub_1B07FE068(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(a3, a2, a1);
}

uint64_t sub_1B07FE09C()
{
  swift_weakDestroy();

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1B07FE0D4()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 56, 7);
}

uint64_t sub_1B07FE10C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B07FC928(a1, a2, a3, a4);
}

uint64_t sub_1B07FE13C()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t (*sub_1B07FE14C(uint64_t a1))(uint64_t a1)
{
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(v1 + 16);
  *(void *)(v3 + 32) = a1;
  swift_retain();
  return sub_1B07FE254;
}

uint64_t sub_1B07FE1BC()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t sub_1B07FE1F4()
{
  return (*(uint64_t (**)(void))(v0 + 32))();
}

uint64_t sub_1B07FE21C()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t sub_1B07FE254(uint64_t a1)
{
  return sub_1B07FCF14(a1);
}

unint64_t sub_1B07FE278()
{
  unint64_t result = qword_1E9B3B400;
  if (!qword_1E9B3B400)
  {
    sub_1B0869238();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3B400);
  }
  return result;
}

uint64_t sub_1B07FE2D0(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255) {
    return sub_1B07FDE9C();
  }
  return result;
}

double sub_1B07FE2EC()
{
  sub_1B07D0DAC(v0, (uint64_t)v6);
  Constrain.Placements.next()((uint64_t)v3);
  if (v4)
  {
    double v1 = v5;
    sub_1B07BD394((uint64_t)v3);
    sub_1B07D10AC((uint64_t)v6);
  }
  else
  {
    sub_1B07D10AC((uint64_t)v6);
    if (qword_1E9B3A3E8 != -1) {
      swift_once();
    }
    double v1 = *(double *)&xmmword_1E9B3A5A0;
  }
  return ceil(v1);
}

double sub_1B07FE3B4(void *a1, CGFloat a2, CGFloat a3)
{
  v26.origin.CGFloat x = 0.0;
  v26.origin.double y = 0.0;
  v26.size.double width = a2;
  v26.size.double height = a3;
  if (CGRectGetWidth(v26) == 1.79769313e308) {
    a2 = 0.0;
  }
  v27.origin.CGFloat x = 0.0;
  v27.origin.double y = 0.0;
  v27.size.double width = a2;
  v27.size.double height = a3;
  if (CGRectGetHeight(v27) == 1.79769313e308) {
    a3 = 0.0;
  }
  uint64_t v6 = *(void *)(v3 + 40);
  char v7 = *(unsigned char *)(v3 + 48);
  uint64_t v8 = *(void *)(v3 + 56);
  char v9 = *(unsigned char *)(v3 + 64);
  uint64_t v10 = *(void *)(v3 + 72);
  char v11 = *(unsigned char *)(v3 + 80);
  uint64_t v12 = *(void *)(v3 + 88);
  char v13 = *(unsigned char *)(v3 + 96);
  sub_1B07BBD78(v3, (uint64_t)v24);
  memset(&v23[8], 0, 40);
  *(CGFloat *)&long long v18 = a2;
  *((CGFloat *)&v18 + 1) = a3;
  *(void *)&long long v19 = a1;
  *((void *)&v19 + 1) = v6;
  LOBYTE(v20) = v7;
  *((void *)&v20 + 1) = v8;
  LOBYTE(v21) = v9;
  *((void *)&v21 + 1) = v10;
  LOBYTE(v22) = v11;
  *((void *)&v22 + 1) = v12;
  v23[0] = v13;
  id v14 = a1;
  sub_1B07B9AF8((uint64_t)&v23[8]);
  sub_1B07BA8FC(v24, (uint64_t)&v23[8]);
  v25[6] = *(_OWORD *)v23;
  v25[7] = *(_OWORD *)&v23[16];
  v25[8] = *(_OWORD *)&v23[32];
  _OWORD v25[2] = v19;
  void v25[3] = v20;
  v25[4] = v21;
  _OWORD v25[5] = v22;
  v25[0] = 0uLL;
  v25[1] = v18;
  double v15 = sub_1B07FE2EC();
  sub_1B07D10AC((uint64_t)v25);
  return v15;
}

double sub_1B07FE554(void *a1, CGFloat a2, CGFloat a3)
{
  v22.origin.CGFloat x = 0.0;
  v22.origin.double y = 0.0;
  v22.size.double width = a2;
  v22.size.double height = a3;
  if (CGRectGetWidth(v22) == 1.79769313e308) {
    a2 = 0.0;
  }
  v23.origin.CGFloat x = 0.0;
  v23.origin.double y = 0.0;
  v23.size.double width = a2;
  v23.size.double height = a3;
  double Height = CGRectGetHeight(v23);
  CGFloat v8 = *(double *)(v3 + 168);
  uint64_t v9 = *(void *)(*(void *)&v8 + 16);
  id v10 = a1;
  swift_bridgeObjectRetain();
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3A548);
    uint64_t v11 = sub_1B0869FF8();
    CGFloat v12 = *(double *)&v11;
    *(void *)(v11 + 16) = v9;
    uint64_t v13 = 32;
    do
    {
      uint64_t v14 = v11 + v13;
      *(_OWORD *)uint64_t v14 = 0uLL;
      *(_OWORD *)(v14 + 16) = 0uLL;
      *(unsigned char *)(v14 + 32) = 1;
      v13 += 40;
      --v9;
    }
    while (v9);
  }
  else
  {
    CGFloat v12 = MEMORY[0x1E4FBC860];
  }
  void v17[6] = 0.0;
  v17[7] = 0.0;
  if (Height == 1.79769313e308) {
    double v15 = 0.0;
  }
  else {
    double v15 = a3;
  }
  v17[8] = a2;
  v17[9] = v15;
  *(void *)&v17[10] = v10;
  v17[11] = v8;
  v17[12] = v12;
  long long v18 = 0u;
  long long v19 = 0u;
  uint64_t v20 = 0;
  char v21 = 1;
  DisjointStack.Placements.union.getter(v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return ceil(v17[2]);
}

double sub_1B07FE6C0(uint64_t a1, CGFloat a2, CGFloat a3)
{
  v17.origin.CGFloat x = 0.0;
  v17.origin.double y = 0.0;
  v17.size.double width = a2;
  v17.size.double height = a3;
  if (CGRectGetWidth(v17) == 1.79769313e308) {
    a2 = 0.0;
  }
  v18.origin.CGFloat x = 0.0;
  v18.origin.double y = 0.0;
  v18.size.double width = a2;
  v18.size.double height = a3;
  if (CGRectGetHeight(v18) == 1.79769313e308) {
    a3 = 0.0;
  }
  uint64_t v7 = v3[3];
  uint64_t v8 = v3[4];
  __swift_project_boxed_opaque_existential_1(v3, v7);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t, uint64_t, double, double, CGFloat, CGFloat))(v8 + 16))(v14, a1, v7, v8, 0.0, 0.0, a2, a3);
  uint64_t v9 = v15;
  uint64_t v10 = v16;
  __swift_project_boxed_opaque_existential_1(v14, v15);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v10 + 16))(v13, v9, v10);
  double v11 = ceil(*(double *)&v13[2]);
  sub_1B0800544((uint64_t)v14);
  return v11;
}

JUMeasurements __swiftcall PrimitiveLayout.measure(toFit:with:)(CGSize toFit, UITraitCollection with)
{
  uint64_t v4 = v3;
  uint64_t v5 = v2;
  double height = toFit.height;
  double width = toFit.width;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  CGFloat v12 = (char *)&v26 - v11;
  v27.origin.CGFloat x = 0.0;
  v27.origin.double y = 0.0;
  v27.size.double width = width;
  v27.size.double height = height;
  if (CGRectGetWidth(v27) == 1.79769313e308) {
    double width = 0.0;
  }
  v28.origin.CGFloat x = 0.0;
  v28.origin.double y = 0.0;
  v28.size.double width = width;
  v28.size.double height = height;
  if (CGRectGetHeight(v28) == 1.79769313e308) {
    v13.n128_u64[0] = 0;
  }
  else {
    v13.n128_f64[0] = height;
  }
  (*(void (**)(Class, uint64_t, uint64_t, double, double, double, __n128))(v4 + 40))(with.super.isa, v5, v4, 0.0, 0.0, width, v13);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  double v15 = (*(double (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 24))(AssociatedTypeWitness, AssociatedConformanceWitness);
  double v17 = v16;
  double v19 = v18;
  double v21 = v20;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, AssociatedTypeWitness);
  double v22 = v15;
  double v23 = v17;
  double v24 = v19;
  double v25 = v21;
  result.double var3 = v25;
  result.double var2 = v24;
  result.double var1 = v23;
  result.var0 = v22;
  return result;
}

uint64_t sub_1B07FE9E4(void *a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  uint64_t v11 = *(void *)(v5 + 40);
  char v12 = *(unsigned char *)(v5 + 48);
  uint64_t v13 = *(void *)(v5 + 56);
  char v14 = *(unsigned char *)(v5 + 64);
  uint64_t v15 = *(void *)(v5 + 72);
  char v16 = *(unsigned char *)(v5 + 80);
  rect[0] = *(double *)(v5 + 88);
  char v69 = *(unsigned char *)(v5 + 96);
  sub_1B07BBD78(v5, (uint64_t)&v77);
  memset(&v92[8], 0, 40);
  *(CGFloat *)uint64_t v64 = a2;
  *(CGFloat *)&v64[8] = a3;
  v87.origin.double x = a2;
  v87.origin.double y = a3;
  *(CGFloat *)&v64[16] = a4;
  *(CGFloat *)&v64[24] = a5;
  v87.size.double width = a4;
  v87.size.double height = a5;
  *(void *)&long long v88 = a1;
  *((void *)&v88 + 1) = v11;
  LOBYTE(v89) = v12;
  *((void *)&v89 + 1) = v13;
  LOBYTE(v90) = v14;
  *((void *)&v90 + 1) = v15;
  LOBYTE(v91) = v16;
  *((double *)&v91 + 1) = rect[0];
  v92[0] = v69;
  id v17 = a1;
  sub_1B07B9AF8((uint64_t)&v92[8]);
  sub_1B07BA8FC(&v77, (uint64_t)&v92[8]);
  long long v98 = *(_OWORD *)v92;
  long long v99 = *(_OWORD *)&v92[16];
  long long v100 = *(_OWORD *)&v92[32];
  long long v94 = v88;
  long long v95 = v89;
  long long v96 = v90;
  long long v97 = v91;
  CGRect v93 = v87;
  sub_1B07D0DAC((uint64_t)&v93, (uint64_t)&v87);
  sub_1B07BA914((uint64_t)&v92[8], (uint64_t)&v77);
  if (v79)
  {
    while (1)
    {
      sub_1B07BA8FC(&v77, (uint64_t)&v73);
      sub_1B07B9AF8((uint64_t)&v92[8]);
      memset(&v92[8], 0, 40);
      double v18 = *((double *)&v88 + 1);
      int v19 = v89;
      double v20 = *((double *)&v89 + 1);
      int v21 = v90;
      CGPoint origin = v87.origin;
      CGSize size = v87.size;
      double Width = CGRectGetWidth(v87);
      unsigned __int8 v25 = v19 ^ 1;
      int v26 = (v19 ^ 1) & (Width < v18);
      if (v26) {
        double v27 = v18;
      }
      else {
        double v27 = Width;
      }
      if (Width > v20) {
        double Width = v20;
      }
      if (v21) {
        double Width = v27;
      }
      if (v26) {
        double v28 = v27;
      }
      else {
        double v28 = Width;
      }
      double v29 = *((double *)&v90 + 1);
      int v30 = v91;
      double v31 = *((double *)&v91 + 1);
      int v32 = v92[0];
      v101.CGPoint origin = origin;
      v101.CGSize size = size;
      double Height = CGRectGetHeight(v101);
      int v34 = (v30 ^ 1) & (Height < v29);
      if (v34) {
        double v35 = v29;
      }
      else {
        double v35 = Height;
      }
      if (Height > v31) {
        double Height = v31;
      }
      if (v32) {
        double Height = v35;
      }
      if (v34) {
        double v36 = v35;
      }
      else {
        double v36 = Height;
      }
      CGFloat d = v73.d;
      CGFloat tx = v73.tx;
      __swift_project_boxed_opaque_existential_1(&v73, *(uint64_t *)&v73.d);
      double v39 = (*(double (**)(void, CGFloat, CGFloat, double, double))(*(void *)&tx + 8))(v88, COERCE_CGFLOAT(*(void *)&d), COERCE_CGFLOAT(*(void *)&tx), v28, v36);
      double v41 = v40;
      double v70 = v42;
      double v67 = v43;
      v102.CGPoint origin = origin;
      v102.CGSize size = size;
      rect[0] = CGRectGetMinX(v102);
      v103.CGPoint origin = origin;
      v103.CGSize size = size;
      double MinY = CGRectGetMinY(v103);
      if ((v25 & (v39 < v18)) != 0) {
        double v45 = v18;
      }
      else {
        double v45 = v39;
      }
      if ((v25 & (v39 < v18) | v21) != 1)
      {
        double v45 = v20;
        if (v39 <= v20) {
          double v45 = v39;
        }
      }
      int v46 = (v30 ^ 1) & (v41 < v29) | v32;
      if (((v30 ^ 1) & (v41 < v29)) == 0) {
        double v29 = v41;
      }
      if (v46 != 1)
      {
        double v29 = v31;
        if (v41 <= v31) {
          double v29 = v41;
        }
      }
      sub_1B07BBD78((uint64_t)&v73, (uint64_t)&rect[1]);
      sub_1B07BBD78((uint64_t)&rect[1], (uint64_t)&v77);
      double v81 = floor(rect[0]);
      double v82 = floor(MinY);
      double v83 = ceil(v45);
      double v84 = ceil(v29);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&rect[1]);
      long long v47 = v77;
      uint64_t v48 = v78;
      uint64_t v49 = v79;
      uint64_t v50 = v80;
      double v51 = v81;
      double v52 = v82;
      double v53 = v83;
      double v54 = v84;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v73);
      if (!v49) {
        break;
      }
      long long v77 = v47;
      uint64_t v78 = v48;
      uint64_t v79 = v49;
      uint64_t v80 = v50;
      double v81 = v51;
      double v82 = v52;
      double v83 = v53;
      double v84 = v54;
      double v85 = floor(v70);
      double v86 = floor(v67);
      sub_1B07BBD78((uint64_t)&v77, (uint64_t)v74);
      uint64_t v55 = v75;
      uint64_t v56 = v76;
      __swift_project_boxed_opaque_existential_1(v74, v75);
      double x = v81;
      double y = v82;
      double v59 = v83;
      double v60 = v84;
      if (objc_msgSend(v17, sel_layoutDirection) == (id)1)
      {
        CGAffineTransformMakeScale(&v73, -1.0, 1.0);
        long long v68 = *(_OWORD *)&v73.c;
        long long v71 = *(_OWORD *)&v73.a;
        CGFloat ty = v73.ty;
        CGFloat v66 = v73.tx;
        rect[0] = x;
        double MinX = CGRectGetMinX(*(CGRect *)v64);
        CGFloat MaxX = CGRectGetMaxX(*(CGRect *)v64);
        *(_OWORD *)&v73.a = v71;
        *(_OWORD *)&v73.c = v68;
        v73.CGFloat tx = v66;
        v73.CGFloat ty = ty;
        CGAffineTransformTranslate((CGAffineTransform *)&rect[1], &v73, -(MinX + MaxX), 0.0);
        CGAffineTransform v73 = *(CGAffineTransform *)&rect[1];
        v104.origin.double x = rect[0];
        v104.origin.double y = y;
        v104.size.double width = v59;
        v104.size.double height = v60;
        CGRect v105 = CGRectApplyAffineTransform(v104, &v73);
        double x = v105.origin.x;
        double y = v105.origin.y;
        double v59 = v105.size.width;
        double v60 = v105.size.height;
      }
      (*(void (**)(id, uint64_t, uint64_t, double, double, double, double))(v56 + 16))(v17, v55, v56, x, y, v59, v60);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v74);
      sub_1B07BD394((uint64_t)&v77);
      sub_1B07BA914((uint64_t)&v92[8], (uint64_t)&v77);
      if (!v79) {
        goto LABEL_38;
      }
    }
  }
  else
  {
LABEL_38:
    sub_1B07B9AF8((uint64_t)&v77);
  }
  sub_1B07D10AC((uint64_t)&v87);
  return sub_1B07D10AC((uint64_t)&v93);
}

void sub_1B07FEEF0(void *a1, double a2, double a3, double a4, double a5)
{
  *(double *)&v23[16] = a4;
  *(double *)&unsigned char v23[24] = a5;
  *(double *)double v23 = a2;
  *(double *)&v23[8] = a3;
  uint64_t v6 = *(void *)(v5 + 168);
  uint64_t v7 = *(void *)(v6 + 16);
  id v8 = a1;
  swift_bridgeObjectRetain();
  if (v7)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3A548);
    uint64_t v9 = sub_1B0869FF8();
    uint64_t v10 = v9;
    *(void *)(v9 + 16) = v7;
    uint64_t v11 = 32;
    do
    {
      uint64_t v12 = v9 + v11;
      *(_OWORD *)uint64_t v12 = 0uLL;
      *(_OWORD *)(v12 + 16) = 0uLL;
      *(unsigned char *)(v12 + 32) = 1;
      v11 += 40;
      --v7;
    }
    while (v7);
  }
  else
  {
    uint64_t v10 = MEMORY[0x1E4FBC860];
  }
  uint64_t v44 = *(void *)v23;
  uint64_t v45 = *(void *)&v23[8];
  uint64_t v46 = *(void *)&v23[16];
  uint64_t v47 = *(void *)&v23[24];
  id v48 = v8;
  uint64_t v49 = v6;
  long long v51 = 0u;
  long long v52 = 0u;
  uint64_t v50 = v10;
  uint64_t v53 = 0;
  char v54 = 1;
  id v13 = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  DisjointStack.Placements.next()((uint64_t)&v38);
  while (*((void *)&v39 + 1))
  {
    long long v34 = v40;
    long long v35 = v41;
    long long v36 = v42;
    uint64_t v37 = v43;
    v33[0] = v38;
    v33[1] = v39;
    sub_1B07BBD78((uint64_t)v33, (uint64_t)v30);
    uint64_t v14 = v31;
    uint64_t v15 = v32;
    __swift_project_boxed_opaque_existential_1(v30, v31);
    double x = *((double *)&v34 + 1);
    double width = *((double *)&v35 + 1);
    double y = *(double *)&v35;
    double height = *(double *)&v36;
    if (objc_msgSend(v13, sel_layoutDirection) == (id)1)
    {
      CGAffineTransformMakeScale(&v29, -1.0, 1.0);
      long long v26 = *(_OWORD *)&v29.c;
      long long v27 = *(_OWORD *)&v29.a;
      CGFloat ty = v29.ty;
      CGFloat tx = v29.tx;
      *(double *)CGFloat rect = x;
      double MinX = CGRectGetMinX(*(CGRect *)v23);
      CGFloat MaxX = CGRectGetMaxX(*(CGRect *)v23);
      *(_OWORD *)&v29.a = v27;
      *(_OWORD *)&v29.c = v26;
      v29.CGFloat tx = tx;
      v29.CGFloat ty = ty;
      CGAffineTransformTranslate((CGAffineTransform *)&rect[1], &v29, -(MinX + MaxX), 0.0);
      CGAffineTransform v29 = *(CGAffineTransform *)&rect[1];
      *(void *)&v55.origin.double x = rect[0];
      v55.origin.double y = y;
      v55.size.double width = width;
      v55.size.double height = height;
      CGRect v56 = CGRectApplyAffineTransform(v55, &v29);
      double x = v56.origin.x;
      double y = v56.origin.y;
      double width = v56.size.width;
      double height = v56.size.height;
    }
    (*(void (**)(id, uint64_t, uint64_t, double, double, double, double))(v15 + 16))(v13, v14, v15, x, y, width, height);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
    sub_1B07BD394((uint64_t)v33);
    DisjointStack.Placements.next()((uint64_t)&v38);
  }
  double v22 = v48;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

uint64_t sub_1B07FF1DC(void *a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  char v11 = *(unsigned char *)(v5 + 40);
  sub_1B07BBD78(v5 + 48, (uint64_t)&v47);
  sub_1B07BBD78(v5, (uint64_t)v48);
  *(CGFloat *)uint64_t v44 = a2;
  *(CGFloat *)&v44[1] = a3;
  CGFloat v22 = a5;
  *(CGFloat *)&_OWORD v44[2] = a4;
  *(CGFloat *)&v44[3] = a5;
  v44[4] = a1;
  char v45 = 0;
  char v46 = v11;
  v48[40] = 0;
  sub_1B0800124((uint64_t)v44, (uint64_t)v43);
  id v12 = a1;
  Pin.Placements.next()((uint64_t)&v37);
  while (*((void *)&v38 + 1))
  {
    long long v33 = v39;
    long long v34 = v40;
    long long v35 = v41;
    uint64_t v36 = v42;
    v32[0] = v37;
    v32[1] = v38;
    sub_1B07BBD78((uint64_t)v32, (uint64_t)v29);
    uint64_t v13 = v30;
    uint64_t v14 = v31;
    __swift_project_boxed_opaque_existential_1(v29, v30);
    double x = *((double *)&v33 + 1);
    double width = *((double *)&v34 + 1);
    double y = *(double *)&v34;
    double height = *(double *)&v35;
    if (objc_msgSend(v12, sel_layoutDirection) == (id)1)
    {
      CGAffineTransformMakeScale(&v28, -1.0, 1.0);
      long long v25 = *(_OWORD *)&v28.c;
      long long v26 = *(_OWORD *)&v28.a;
      CGFloat ty = v28.ty;
      CGFloat tx = v28.tx;
      v49.origin.double x = a2;
      v49.origin.double y = a3;
      v49.size.double width = a4;
      v49.size.double height = v22;
      *(double *)CGFloat rect = x;
      double MinX = CGRectGetMinX(v49);
      v50.origin.double x = a2;
      v50.origin.double y = a3;
      v50.size.double width = a4;
      v50.size.double height = v22;
      CGFloat MaxX = CGRectGetMaxX(v50);
      *(_OWORD *)&v28.a = v26;
      *(_OWORD *)&v28.c = v25;
      v28.CGFloat tx = tx;
      v28.CGFloat ty = ty;
      CGAffineTransformTranslate((CGAffineTransform *)&rect[1], &v28, -(MinX + MaxX), 0.0);
      CGAffineTransform v28 = *(CGAffineTransform *)&rect[1];
      *(void *)&v51.origin.double x = rect[0];
      v51.origin.double y = y;
      v51.size.double width = width;
      v51.size.double height = height;
      CGRect v52 = CGRectApplyAffineTransform(v51, &v28);
      double x = v52.origin.x;
      double y = v52.origin.y;
      double width = v52.size.width;
      double height = v52.size.height;
    }
    (*(void (**)(id, uint64_t, uint64_t, double, double, double, double))(v14 + 16))(v12, v13, v14, x, y, width, height);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
    sub_1B07BD394((uint64_t)v32);
    Pin.Placements.next()((uint64_t)&v37);
  }
  sub_1B0800180((uint64_t)v43);
  return sub_1B0800180((uint64_t)v44);
}

uint64_t sub_1B07FF454(void *a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  uint64_t v11 = v5[3];
  uint64_t v12 = v5[4];
  __swift_project_boxed_opaque_existential_1(v5, v11);
  CGFloat v24 = a5;
  (*(void (**)(void *__return_ptr, void *, uint64_t, uint64_t, CGFloat, CGFloat, CGFloat, CGFloat))(v12 + 16))(v45, a1, v11, v12, a2, a3, a4, a5);
  sub_1B08004E8((uint64_t)v45, (uint64_t)&v39);
  uint64_t v13 = *((void *)&v40 + 1);
  uint64_t v14 = v41;
  __swift_project_boxed_opaque_existential_1(&v39, *((uint64_t *)&v40 + 1));
  (*(void (**)(uint64_t, uint64_t))(v14 + 24))(v13, v14);
  sub_1B0800544((uint64_t)&v39);
  sub_1B086A728();
  while (*((void *)&v40 + 1))
  {
    long long v35 = v41;
    long long v36 = v42;
    long long v37 = v43;
    uint64_t v38 = v44;
    v34[0] = v39;
    v34[1] = v40;
    sub_1B07BBD78((uint64_t)v34, (uint64_t)v31);
    uint64_t v15 = v32;
    uint64_t v16 = v33;
    __swift_project_boxed_opaque_existential_1(v31, v32);
    double x = *((double *)&v35 + 1);
    double width = *((double *)&v36 + 1);
    double y = *(double *)&v36;
    double height = *(double *)&v37;
    if (objc_msgSend(a1, sel_layoutDirection) == (id)1)
    {
      CGAffineTransformMakeScale(&v30, -1.0, 1.0);
      long long v27 = *(_OWORD *)&v30.c;
      long long v28 = *(_OWORD *)&v30.a;
      CGFloat ty = v30.ty;
      CGFloat tx = v30.tx;
      v46.origin.double x = a2;
      v46.origin.double y = a3;
      v46.size.double width = a4;
      v46.size.double height = v24;
      *(double *)CGFloat rect = x;
      double MinX = CGRectGetMinX(v46);
      v47.origin.double x = a2;
      v47.origin.double y = a3;
      v47.size.double width = a4;
      v47.size.double height = v24;
      CGFloat MaxX = CGRectGetMaxX(v47);
      *(_OWORD *)&v30.a = v28;
      *(_OWORD *)&v30.c = v27;
      v30.CGFloat tx = tx;
      v30.CGFloat ty = ty;
      CGAffineTransformTranslate((CGAffineTransform *)&rect[1], &v30, -(MinX + MaxX), 0.0);
      CGAffineTransform v30 = *(CGAffineTransform *)&rect[1];
      *(void *)&v48.origin.double x = rect[0];
      v48.origin.double y = y;
      v48.size.double width = width;
      v48.size.double height = height;
      CGRect v49 = CGRectApplyAffineTransform(v48, &v30);
      double x = v49.origin.x;
      double y = v49.origin.y;
      double width = v49.size.width;
      double height = v49.size.height;
    }
    (*(void (**)(void *, uint64_t, uint64_t, double, double, double, double))(v16 + 16))(a1, v15, v16, x, y, width, height);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
    sub_1B07BD394((uint64_t)v34);
    sub_1B086A728();
  }
  swift_release();
  return sub_1B0800544((uint64_t)v45);
}

Swift::Void __swiftcall PrimitiveLayout.place(at:with:)(__C::CGRect at, UITraitCollection with)
{
  uint64_t v4 = v3;
  *(void *)&long long v45 = v2;
  double height = at.size.height;
  double width = at.size.width;
  double y = at.origin.y;
  double x = at.origin.x;
  swift_getAssociatedTypeWitness();
  CGFloat v46 = *(double *)(swift_getAssociatedConformanceWitness() + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v37 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v12 = (char *)&v34 - v11;
  uint64_t v13 = swift_checkMetadataState();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  int v19 = (char *)&v34 - v18;
  double v20 = *(void (**)(Class, void, uint64_t, double, double, double, double))(v4 + 40);
  double v38 = x;
  double v39 = y;
  double v40 = width;
  double v41 = height;
  v20(with.super.isa, v45, v4, x, y, width, height);
  long long v34 = v19;
  uint64_t v35 = v14;
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v16, v19, v13);
  sub_1B0869F08();
  uint64_t v36 = v13;
  swift_getAssociatedConformanceWitness();
  sub_1B086A3F8();
  if (*((void *)&v58 + 1))
  {
    CGFloat v22 = v38;
    CGFloat v21 = v39;
    CGFloat v23 = v40;
    CGFloat v24 = v41;
    do
    {
      long long v53 = v59;
      long long v54 = v60;
      long long v55 = v61;
      uint64_t v56 = v62;
      v52[0] = v57;
      v52[1] = v58;
      sub_1B07BBD78((uint64_t)v52, (uint64_t)v49);
      uint64_t v25 = v50;
      uint64_t v26 = v51;
      __swift_project_boxed_opaque_existential_1(v49, v50);
      double v27 = *((double *)&v53 + 1);
      double v29 = *((double *)&v54 + 1);
      double v28 = *(double *)&v54;
      double v30 = *(double *)&v55;
      if ([(objc_class *)with.super.isa layoutDirection] == (id)1)
      {
        CGAffineTransformMakeScale(&v48, -1.0, 1.0);
        long long v44 = *(_OWORD *)&v48.c;
        long long v45 = *(_OWORD *)&v48.a;
        CGFloat ty = v48.ty;
        CGFloat tx = v48.tx;
        v63.origin.double x = v22;
        v63.origin.double y = v21;
        v63.size.double width = v23;
        v63.size.double height = v24;
        CGFloat MinX = CGRectGetMinX(v63);
        CGFloat v46 = v27;
        double v32 = MinX;
        v64.origin.double x = v22;
        v64.origin.double y = v21;
        v64.size.double width = v23;
        v64.size.double height = v24;
        CGFloat MaxX = CGRectGetMaxX(v64);
        *(_OWORD *)&v48.a = v45;
        *(_OWORD *)&v48.c = v44;
        v48.CGFloat tx = tx;
        v48.CGFloat ty = ty;
        CGAffineTransformTranslate(&v47, &v48, -(v32 + MaxX), 0.0);
        CGAffineTransform v48 = v47;
        v65.origin.double x = v46;
        v65.origin.double y = v28;
        v65.size.double width = v29;
        v65.size.double height = v30;
        CGRect v66 = CGRectApplyAffineTransform(v65, &v48);
        double v27 = v66.origin.x;
        double v28 = v66.origin.y;
        double v29 = v66.size.width;
        double v30 = v66.size.height;
      }
      (*(void (**)(Class, uint64_t, uint64_t, double, double, double, double))(v26 + 16))(with.super.isa, v25, v26, v27, v28, v29, v30);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
      sub_1B07BD394((uint64_t)v52);
      sub_1B086A3F8();
    }
    while (*((void *)&v58 + 1));
  }
  (*(void (**)(char *, uint64_t))(v37 + 8))(v12, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v34, v36);
}

uint64_t sub_1B07FFB70@<X0>(uint64_t *a1@<X8>)
{
  a1[3] = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3B450);
  a1[4] = (uint64_t)&off_1F094F8F8;
  uint64_t v3 = swift_allocObject();
  *a1 = v3;

  return sub_1B07CEBE0(v1, v3 + 16);
}

uint64_t PrimitiveLayout._eraseToAnyForTesting(with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  __n128 v6 = MEMORY[0x1F4188790](a1);
  id v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v9 + 16))(v8, v3, a2, v6);
  return AnyPrimitiveLayout.init<A>(_:)((uint64_t)v8, a2, a3);
}

uint64_t sub_1B07FFCB8@<X0>(uint64_t *a1@<X8>)
{
  a1[3] = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3B448);
  a1[4] = (uint64_t)&off_1F094F8F8;
  uint64_t v3 = swift_allocObject();
  *a1 = v3;

  return sub_1B08006E0(v1, v3 + 16);
}

uint64_t sub_1B07FFD20@<X0>(uint64_t *a1@<X8>)
{
  a1[3] = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3B440);
  a1[4] = (uint64_t)&off_1F094F8F8;
  uint64_t v3 = swift_allocObject();
  *a1 = v3;

  return sub_1B080064C(v1, v3 + 16);
}

uint64_t sub_1B07FFD90@<X0>(uint64_t *a1@<X8>)
{
  return sub_1B07FFF88(&qword_1E9B3B438, sub_1B07E87D4, a1);
}

uint64_t sub_1B07FFDC0@<X0>(uint64_t *a1@<X8>)
{
  a1[3] = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3B430);
  a1[4] = (uint64_t)&off_1F094F8F8;
  uint64_t v3 = swift_allocObject();
  *a1 = v3;

  return sub_1B080048C(v1, v3 + 16);
}

uint64_t sub_1B07FFE28@<X0>(uint64_t *a1@<X8>)
{
  a1[3] = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3B428);
  a1[4] = (uint64_t)&off_1F094F8F8;
  uint64_t v3 = swift_allocObject();
  *a1 = v3;

  return sub_1B08003F8(v1, v3 + 16);
}

uint64_t sub_1B07FFE90@<X0>(uint64_t *a1@<X8>)
{
  a1[3] = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3B420);
  a1[4] = (uint64_t)&off_1F094F8F8;
  uint64_t v3 = swift_allocObject();
  *a1 = v3;

  return sub_1B07B3FEC(v1, v3 + 16);
}

uint64_t sub_1B07FFEF8@<X0>(uint64_t *a1@<X8>)
{
  a1[3] = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3B418);
  a1[4] = (uint64_t)&off_1F094F8F8;
  uint64_t v3 = swift_allocObject();
  *a1 = v3;

  return sub_1B08002FC(v1, v3 + 16);
}

uint64_t sub_1B07FFF60@<X0>(uint64_t *a1@<X8>)
{
  return sub_1B07FFF88(&qword_1E9B3B410, sub_1B08001D8, a1);
}

uint64_t sub_1B07FFF88@<X0>(uint64_t *a1@<X3>, uint64_t (*a2)(uint64_t, uint64_t)@<X5>, uint64_t *a3@<X8>)
{
  a3[3] = __swift_instantiateConcreteTypeFromMangledName(a1);
  a3[4] = (uint64_t)&off_1F094F8F8;
  uint64_t v5 = swift_allocObject();
  *a3 = v5;

  return a2(v3, v5 + 16);
}

uint64_t sub_1B080000C@<X0>(uint64_t *a1@<X8>)
{
  a1[3] = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3B408);
  a1[4] = (uint64_t)&off_1F094F8F8;
  uint64_t v3 = swift_allocObject();
  *a1 = v3;

  return sub_1B08000C8(v1, v3 + 16);
}

uint64_t dispatch thunk of PrimitiveLayout.layout(relativeTo:with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t sub_1B0800088()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 64);

  return MEMORY[0x1F4186498](v0, 104, 7);
}

uint64_t sub_1B08000C8(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1B0800124(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1B0800180(uint64_t a1)
{
  return a1;
}

uint64_t sub_1B08001D8(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1B0800234()
{
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 16));
  if (v0[96] == 1)
  {
    swift_release();
  }
  else if (!v0[96])
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 56));
  }
  if (v0[144] == 1)
  {
    swift_release();
  }
  else if (!v0[144])
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 104));
  }
  if (v0[192] == 1)
  {
    swift_release();
  }
  else if (!v0[192])
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 152));
  }
  if (v0[240] == 1)
  {
    swift_release();
  }
  else if (!v0[240])
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 200));
  }

  return MEMORY[0x1F4186498](v0, 241, 7);
}

uint64_t sub_1B08002FC(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1B0800358()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 128, 7);
}

uint64_t sub_1B08003A0()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  __swift_destroy_boxed_opaque_existential_1(v0 + 96);
  __swift_destroy_boxed_opaque_existential_1(v0 + 136);
  __swift_destroy_boxed_opaque_existential_1(v0 + 176);

  return MEMORY[0x1F4186498](v0, 216, 7);
}

uint64_t sub_1B08003F8(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1B0800454()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);

  return MEMORY[0x1F4186498](v0, 56, 7);
}

uint64_t sub_1B080048C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1B08004E8(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1B0800544(uint64_t a1)
{
  return a1;
}

uint64_t objectdestroy_2Tm()
{
  if (v0[5]) {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  }
  if (v0[10]) {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 7));
  }
  if (v0[15]) {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 12));
  }
  if (v0[20]) {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 17));
  }
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 192, 7);
}

uint64_t sub_1B0800614()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);

  return MEMORY[0x1F4186498](v0, 64, 7);
}

uint64_t sub_1B080064C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1B08006A8()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);

  return MEMORY[0x1F4186498](v0, 113, 7);
}

uint64_t sub_1B08006E0(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1B080073C()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 112, 7);
}

uint64_t static VerticalStack.Edge.bottom.getter()
{
  return 2;
}

uint64_t static VerticalStack.Edge.none.getter()
{
  return 0;
}

uint64_t static VerticalStack.Edge.all.getter()
{
  return 3;
}

uint64_t VerticalStack.Alignment._horizontalLayoutAlignment.getter@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = result + 1;
  return result;
}

uint64_t VerticalStack.Alignment.hash(into:)()
{
  return sub_1B086A968();
}

BOOL static VerticalStack.Alignment.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

uint64_t VerticalStack.Alignment.hashValue.getter()
{
  return sub_1B086A998();
}

void VerticalStack.Properties.init()(uint64_t a1@<X8>)
{
  *(void *)(a1 + 24) = &type metadata for ZeroDimension;
  *(void *)(a1 + 32) = &protocol witness table for ZeroDimension;
  *(void *)(a1 + 64) = &type metadata for ZeroDimension;
  *(void *)(a1 + 72) = &protocol witness table for ZeroDimension;
  *(unsigned char *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(unsigned char *)(a1 + 96) = 0;
}

uint64_t VerticalStack.Properties.topSpacing.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1B07BBD78(v1, a1);
}

double (*VerticalStack.Properties.topSpacing.modify())(void)
{
  return nullsub_1;
}

uint64_t VerticalStack.Properties.bottomSpacing.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1B07BBD78(v1 + 40, a1);
}

double (*VerticalStack.Properties.bottomSpacing.modify())(void)
{
  return nullsub_1;
}

uint64_t VerticalStack.Properties.alignment.getter()
{
  return *(unsigned __int8 *)(v0 + 80);
}

double (*VerticalStack.Properties.alignment.modify())(void)
{
  return nullsub_1;
}

uint64_t VerticalStack.Properties.edgesAlignedToBaseline.getter()
{
  return *(void *)(v0 + 88);
}

double (*VerticalStack.Properties.edgesAlignedToBaseline.modify())(void)
{
  return nullsub_1;
}

uint64_t VerticalStack.Properties.shouldSkip.getter()
{
  return *(unsigned __int8 *)(v0 + 96);
}

double (*VerticalStack.Properties.shouldSkip.modify())(void)
{
  return nullsub_1;
}

void VerticalStack.Properties.topSpacing(from:with:)(void *a1, double a2, double a3, double a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = v4[11];
  uint64_t v11 = v4[3];
  uint64_t v12 = v5[4];
  __swift_project_boxed_opaque_existential_1(v5, v11);
  if (v10) {
    AnyDimension.topMargin(from:with:)(a1, v11, v12, a2, a3, a4);
  }
  else {
    AnyDimension.value(with:)(a1, v11, v12);
  }
}

void VerticalStack.Properties.bottomSpacing(from:with:)(void *a1, double a2, double a3, double a4, double a5)
{
  uint64_t v11 = v5[11];
  uint64_t v13 = v5[8];
  uint64_t v12 = v5[9];
  __swift_project_boxed_opaque_existential_1(v5 + 5, v13);
  if ((v11 & 2) != 0) {
    AnyDimension.bottomMargin(from:with:)(a1, v13, v12, a2, a3, a4, a5);
  }
  else {
    AnyDimension.value(with:)(a1, v13, v12);
  }
}

void *sub_1B0800AAC()
{
  long long v1 = v0[1];
  v5[0] = *v0;
  v5[1] = v1;
  long long v2 = v0[3];
  _OWORD v5[2] = v0[2];
  void v5[3] = v2;
  uint64_t v3 = sub_1B084F97C(v5);
  sub_1B07D051C((uint64_t)v5);
  return v3;
}

long long *sub_1B0800AF8(long long *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B084CB44(a1, a2, a3);
}

unint64_t sub_1B0800B34()
{
  return 0xD000000000000056;
}

uint64_t VerticalStack.insert(_:at:with:)(uint64_t a1, int64_t a2, void (*a3)(unsigned char *))
{
  sub_1B07BBD78(a1, (uint64_t)v24);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB595770);
  if (swift_dynamicCast())
  {
    long long v10 = v18;
    long long v11 = v19;
    long long v12 = v20;
    *(void *)&long long v13 = v21;
    long long v8 = v16;
    long long v9 = v17;
    if (BYTE8(v18) == 1) {
      sub_1B08699A8();
    }
    sub_1B07CEB8C((uint64_t)&v8);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
  sub_1B07BD9C0(v3, (uint64_t)v24);
  if (a3) {
    a3(v24);
  }
  sub_1B07BBD78(a1, (uint64_t)&v16);
  uint64_t result = sub_1B07BD9C0((uint64_t)v24, (uint64_t)&v18 + 8);
  if (*(void *)(*(void *)(v3 + 104) + 16) < a2)
  {
    __break(1u);
  }
  else if ((a2 & 0x8000000000000000) == 0)
  {
    long long v14 = v22;
    v15[0] = v23[0];
    *(_OWORD *)((char *)v15 + 9) = *(_OWORD *)((char *)v23 + 9);
    long long v10 = v18;
    long long v11 = v19;
    long long v12 = v20;
    long long v13 = v21;
    long long v8 = v16;
    long long v9 = v17;
    sub_1B07D0964(a2, a2, (uint64_t)&v8);
    return sub_1B07BD9F8((uint64_t)v24);
  }
  __break(1u);
  return result;
}

uint64_t VerticalStack.inserting(_:at:with:)@<X0>(uint64_t a1@<X0>, int64_t a2@<X1>, void (*a3)(unsigned char *)@<X2>, uint64_t a4@<X8>)
{
  sub_1B07B3FEC(v4, a4);
  return VerticalStack.insert(_:at:with:)(a1, a2, a3);
}

void VerticalStack.layout(relativeTo:with:)(void *a1@<X0>, uint64_t a2@<X8>, CGFloat a3@<D0>, CGFloat a4@<D1>, CGFloat a5@<D2>, CGFloat a6@<D3>)
{
  uint64_t v12 = *(void *)(v6 + 104);
  id v13 = a1;
  swift_bridgeObjectRetain();
  v15.origin.double x = a3;
  v15.origin.double y = a4;
  v15.size.double width = a5;
  v15.size.double height = a6;
  CGFloat MinY = CGRectGetMinY(v15);
  *(CGFloat *)a2 = a3;
  *(CGFloat *)(a2 + 8) = a4;
  *(CGFloat *)(a2 + 16) = a5;
  *(CGFloat *)(a2 + 24) = a6;
  *(void *)(a2 + 32) = v13;
  *(void *)(a2 + 40) = v12;
  *(void *)(a2 + 48) = 0;
  *(CGFloat *)(a2 + 56) = MinY;
}

uint64_t sub_1B0800DC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  sub_1B07BBD78(a1, (uint64_t)v12);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB595770);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB595748);
  if (swift_dynamicCast())
  {
    sub_1B07BA8FC(v10, (uint64_t)v13);
    uint64_t v6 = v14;
    uint64_t v7 = v15;
    __swift_project_boxed_opaque_existential_1(v13, v14);
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t, uint64_t))(v7 + 8))(v12, a2, v6, v7);
    char v8 = BYTE1(v12[0]);
    *a3 = *(unsigned char *)(a1 + 120) + 1;
    a3[1] = v8;
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  }
  else
  {
    uint64_t v11 = 0;
    memset(v10, 0, sizeof(v10));
    uint64_t result = sub_1B07BBE14((uint64_t)v10, &qword_1EB595750);
    *a3 = *(unsigned char *)(a1 + 120) + 1;
    a3[1] = 0;
  }
  return result;
}

JetUI::_LayoutAlignment __swiftcall VerticalStack._layoutAlignment(with:)(UITraitCollection with)
{
  uint64_t v3 = v1;
  uint64_t v4 = *(void *)(v2 + 104);
  if (*(void *)(v4 + 16))
  {
    Class isa = with.super.isa;
    sub_1B07BBF20(v4 + 32, (uint64_t)v27);
    LOWORD(with.super.isa) = sub_1B0800DC4((uint64_t)v27, (uint64_t)isa, &v25);
    unint64_t v6 = *(void *)(v4 + 16);
    unint64_t v7 = v6 != 0;
    unint64_t v8 = v6 - v7;
    if (v6 == v7)
    {
      unsigned __int8 v9 = v25;
      LOBYTE(v10) = v26;
LABEL_17:
      LOWORD(with.super.isa) = sub_1B07BBE14((uint64_t)v27, &qword_1EB595730);
      unsigned __int8 *v3 = v9;
      v3[1] = v10;
      return (JetUI::_LayoutAlignment)with.super.isa;
    }
    if (v6 > v7)
    {
      Class v16 = isa;
      unsigned __int8 v9 = v25;
      int v10 = v26;
      swift_bridgeObjectRetain();
      uint64_t v11 = v4 + 144 * v7 + 32;
      do
      {
        sub_1B07BBF20(v11, (uint64_t)v23);
        sub_1B07BBD78((uint64_t)v23, (uint64_t)v19);
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EB595770);
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EB595748);
        if (swift_dynamicCast())
        {
          sub_1B07BA8FC(v17, (uint64_t)v20);
          uint64_t v15 = v21;
          uint64_t v14 = v22;
          __swift_project_boxed_opaque_existential_1(v20, v21);
          (*(void (**)(void *__return_ptr, Class, uint64_t, uint64_t))(v14 + 8))(v19, v16, v15, v14);
          int v12 = BYTE1(v19[0]);
          char v13 = v24;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
        }
        else
        {
          uint64_t v18 = 0;
          memset(v17, 0, sizeof(v17));
          sub_1B07BBE14((uint64_t)v17, &qword_1EB595750);
          int v12 = 0;
          char v13 = v24;
        }
        sub_1B07BBE14((uint64_t)v23, &qword_1EB595730);
        if (v9 != (v13 + 1)) {
          unsigned __int8 v9 = 0;
        }
        if (v12 != v10) {
          int v10 = 0;
        }
        v11 += 144;
        --v8;
      }
      while (v8);
      swift_bridgeObjectRelease();
      goto LABEL_17;
    }
    __break(1u);
  }
  else
  {
    *long long v1 = *(unsigned char *)(v2 + 80) + 1;
    v1[1] = 0;
  }
  return (JetUI::_LayoutAlignment)with.super.isa;
}

void sub_1B08010E0(void *a1@<X0>, uint64_t a2@<X8>, CGFloat a3@<D0>, CGFloat a4@<D1>, CGFloat a5@<D2>, CGFloat a6@<D3>)
{
  uint64_t v12 = *(void *)(v6 + 104);
  id v13 = a1;
  swift_bridgeObjectRetain();
  v15.origin.double x = a3;
  v15.origin.double y = a4;
  v15.size.double width = a5;
  v15.size.double height = a6;
  CGFloat MinY = CGRectGetMinY(v15);
  *(CGFloat *)a2 = a3;
  *(CGFloat *)(a2 + 8) = a4;
  *(CGFloat *)(a2 + 16) = a5;
  *(CGFloat *)(a2 + 24) = a6;
  *(void *)(a2 + 32) = v13;
  *(void *)(a2 + 40) = v12;
  *(void *)(a2 + 48) = 0;
  *(CGFloat *)(a2 + 56) = MinY;
}

unint64_t sub_1B080116C()
{
  unint64_t result = qword_1E9B3B458;
  if (!qword_1E9B3B458)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3B458);
  }
  return result;
}

unint64_t sub_1B08011C4()
{
  unint64_t result = qword_1E9B3B460;
  if (!qword_1E9B3B460)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3B460);
  }
  return result;
}

unint64_t sub_1B080121C()
{
  unint64_t result = qword_1E9B3B468;
  if (!qword_1E9B3B468)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3B468);
  }
  return result;
}

unint64_t sub_1B0801274()
{
  unint64_t result = qword_1E9B3B470;
  if (!qword_1E9B3B470)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3B470);
  }
  return result;
}

unint64_t sub_1B08012CC()
{
  unint64_t result = qword_1E9B3B478;
  if (!qword_1E9B3B478)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3B478);
  }
  return result;
}

unint64_t sub_1B0801320(uint64_t a1)
{
  unint64_t result = sub_1B0801348();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1B0801348()
{
  unint64_t result = qword_1E9B3B480;
  if (!qword_1E9B3B480)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3B480);
  }
  return result;
}

unint64_t sub_1B08013A0()
{
  unint64_t result = qword_1E9B3B488;
  if (!qword_1E9B3B488)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3B488);
  }
  return result;
}

unint64_t sub_1B08013F8()
{
  unint64_t result = qword_1E9B3B490;
  if (!qword_1E9B3B490)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3B490);
  }
  return result;
}

uint64_t assignWithCopy for VerticalStack(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for VerticalStack(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for VerticalStack(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 112)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for VerticalStack(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 112) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 112) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for VerticalStack.Edge()
{
  return &type metadata for VerticalStack.Edge;
}

unsigned char *storeEnumTagSinglePayload for VerticalStack.Alignment(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B08016B8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for VerticalStack.Alignment()
{
  return &type metadata for VerticalStack.Alignment;
}

uint64_t assignWithCopy for VerticalStack.Properties(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  return a1;
}

uint64_t assignWithTake for VerticalStack.Properties(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  return a1;
}

ValueMetadata *type metadata accessor for VerticalStack.Placements()
{
  return &type metadata for VerticalStack.Placements;
}

double ZeroDimension.rawValue(in:)()
{
  return 0.0;
}

UIEdgeInsets __swiftcall ZeroDimension.languageAwareOutsets(compatibleWith:)(UITraitCollection compatibleWith)
{
  double v1 = *MEMORY[0x1E4FB2848];
  double v2 = *(double *)(MEMORY[0x1E4FB2848] + 8);
  double v3 = *(double *)(MEMORY[0x1E4FB2848] + 16);
  double v4 = *(double *)(MEMORY[0x1E4FB2848] + 24);
  result.right = v4;
  result.bottom = v3;
  result.left = v2;
  result.top = v1;
  return result;
}

uint64_t static ZeroDimension.== infix(_:_:)()
{
  return 1;
}

uint64_t ZeroDimension.description.getter()
{
  return 0x6F72657A2ELL;
}

uint64_t sub_1B08017FC()
{
  return 0x6F72657A2ELL;
}

double static LayoutViewPlaceholder.withIdentityMeasurement.getter()
{
  uint64_t v0 = swift_allocObject();
  *(unsigned char *)(v0 + 32) = 1;
  double result = 0.0;
  *(_OWORD *)(v0 + 40) = 0u;
  *(_OWORD *)(v0 + 56) = 0u;
  *(unsigned char *)(v0 + 72) = 0;
  *(void *)(v0 + 16) = sub_1B0801860;
  *(void *)(v0 + 24) = 0;
  return result;
}

double LayoutViewPlaceholder.__allocating_init(measureWith:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  *(unsigned char *)(v4 + 32) = 1;
  double result = 0.0;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(unsigned char *)(v4 + 72) = 0;
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  return result;
}

uint64_t LayoutViewPlaceholder.init(measureWith:)(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(v2 + 32) = 1;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *(unsigned char *)(v2 + 72) = 0;
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return v2;
}

uint64_t LayoutViewPlaceholder.__allocating_init(measurements:)(double a1, double a2, double a3, double a4)
{
  uint64_t v8 = swift_allocObject();
  *(unsigned char *)(v8 + 32) = 1;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(unsigned char *)(v8 + 72) = 0;
  unsigned __int8 v9 = (double *)swift_allocObject();
  long long v9[2] = a1;
  _OWORD v9[3] = a2;
  _OWORD v9[4] = a3;
  void v9[5] = a4;
  *(void *)(v8 + 16) = sub_1B07C1958;
  *(void *)(v8 + 24) = v9;
  BOOL v10 = fabs(a1) >= COERCE_DOUBLE(1);
  BOOL v11 = fabs(a2) >= COERCE_DOUBLE(1) && v10;
  swift_beginAccess();
  *(unsigned char *)(v8 + 32) = v11;
  return v8;
}

uint64_t LayoutViewPlaceholder.init(measurements:)(double a1, double a2, double a3, double a4)
{
  *(unsigned char *)(v4 + 32) = 1;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(unsigned char *)(v4 + 72) = 0;
  unsigned __int8 v9 = (double *)swift_allocObject();
  long long v9[2] = a1;
  _OWORD v9[3] = a2;
  _OWORD v9[4] = a3;
  void v9[5] = a4;
  *(void *)(v4 + 16) = sub_1B07C1958;
  *(void *)(v4 + 24) = v9;
  BOOL v10 = fabs(a1) >= COERCE_DOUBLE(1);
  BOOL v11 = fabs(a2) >= COERCE_DOUBLE(1) && v10;
  swift_beginAccess();
  *(unsigned char *)(v4 + 32) = v11;
  return v4;
}

uint64_t sub_1B0801AA4()
{
  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t sub_1B0801AB4()
{
  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t LayoutViewPlaceholder.__allocating_init(representing:)(double a1, double a2)
{
  uint64_t v4 = swift_allocObject();
  *(unsigned char *)(v4 + 32) = 1;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(unsigned char *)(v4 + 72) = 0;
  uint64_t v5 = swift_allocObject();
  *(double *)(v5 + 16) = a1;
  *(double *)(v5 + 24) = a2;
  *(double *)(v5 + 32) = a2;
  *(void *)(v5 + 40) = 0;
  *(void *)(v4 + 16) = sub_1B07C1958;
  *(void *)(v4 + 24) = v5;
  BOOL v6 = fabs(a1) >= COERCE_DOUBLE(1);
  BOOL v7 = fabs(a2) >= COERCE_DOUBLE(1) && v6;
  swift_beginAccess();
  *(unsigned char *)(v4 + 32) = v7;
  return v4;
}

uint64_t sub_1B0801BA0()
{
  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t sub_1B0801BB0()
{
  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t LayoutViewPlaceholder.measurements(fitting:in:)()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t LayoutViewPlaceholder.hasContent.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t LayoutViewPlaceholder.hasContent.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 32) = a1;
  return result;
}

uint64_t (*LayoutViewPlaceholder.hasContent.modify())()
{
  return j__swift_endAccess;
}

uint64_t LayoutViewPlaceholder.frame.setter(double a1, double a2, double a3, double a4)
{
  uint64_t result = swift_beginAccess();
  v4[5] = a1;
  v4[6] = a2;
  v4[7] = a3;
  v4[8] = a4;
  return result;
}

uint64_t (*LayoutViewPlaceholder.frame.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t LayoutViewPlaceholder.isHidden.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 72);
}

uint64_t LayoutViewPlaceholder.isHidden.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 72) = a1;
  return result;
}

uint64_t (*LayoutViewPlaceholder.isHidden.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t LayoutViewPlaceholder.deinit()
{
  swift_release();
  return v0;
}

uint64_t sub_1B0801E4C()
{
  uint64_t v1 = *v0;
  swift_beginAccess();
  return *(unsigned __int8 *)(v1 + 32);
}

uint64_t method lookup function for LayoutViewPlaceholder(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for LayoutViewPlaceholder);
}

uint64_t dispatch thunk of LayoutViewPlaceholder.__allocating_init(measureWith:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of LayoutViewPlaceholder.__allocating_init(measurements:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of LayoutViewPlaceholder.__allocating_init(representing:)()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

id TextAppearance.withTextAlignment(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v3 = *(void **)v2;
  uint64_t v4 = *(void *)(v2 + 32);
  *(void *)a2 = *(void *)v2;
  *(void *)(a2 + 8) = a1;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(v2 + 16);
  *(void *)(a2 + 32) = v4;
  return v3;
}

id TextAppearance.withLineSpacing(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v3 = *(void **)v2;
  uint64_t v4 = *(void *)(v2 + 24);
  *(void *)a2 = *(void *)v2;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(v2 + 8);
  *(void *)(a2 + 24) = v4;
  *(void *)(a2 + 32) = a1;
  return v3;
}

id TextAppearance.font.getter()
{
  return *v0;
}

void TextAppearance.font.setter(void *a1)
{
  *uint64_t v1 = a1;
}

double (*TextAppearance.font.modify())(void)
{
  return nullsub_1;
}

uint64_t TextAppearance.textAlignment.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t TextAppearance.textAlignment.setter(uint64_t result)
{
  *(void *)(v1 + 8) = result;
  return result;
}

double (*TextAppearance.textAlignment.modify())(void)
{
  return nullsub_1;
}

uint64_t TextAppearance.lineBreakMode.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t TextAppearance.lineBreakMode.setter(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

double (*TextAppearance.lineBreakMode.modify())(void)
{
  return nullsub_1;
}

uint64_t TextAppearance.numberOfLines.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t TextAppearance.numberOfLines.setter(uint64_t result)
{
  *(void *)(v1 + 24) = result;
  return result;
}

double (*TextAppearance.numberOfLines.modify())(void)
{
  return nullsub_1;
}

uint64_t TextAppearance.lineSpacing.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t TextAppearance.lineSpacing.setter(uint64_t result)
{
  *(void *)(v1 + 32) = result;
  return result;
}

double (*TextAppearance.lineSpacing.modify())(void)
{
  return nullsub_1;
}

BOOL _s5JetUI14TextAppearanceV2eeoiySbAC_ACtFZ_0(void *a1, void *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  uint64_t v6 = a2[1];
  uint64_t v7 = a2[2];
  uint64_t v8 = a2[3];
  uint64_t v9 = a2[4];
  sub_1B07B88EC();
  char v10 = sub_1B086A388();
  BOOL result = 0;
  if ((v10 & 1) != 0 && v2 == v6) {
    return v3 == v7 && v4 == v8 && v5 == v9;
  }
  return result;
}

uint64_t assignWithCopy for TextAppearance(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

uint64_t assignWithTake for TextAppearance(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for TextAppearance(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TextAppearance(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)BOOL result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)BOOL result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t Models.Video.Behavior.init(rawValue:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static Models.Video.Behavior.allowAutoPlay.getter(void *a1@<X8>)
{
  *a1 = 1;
}

void static Models.Video.Behavior.loop.getter(void *a1@<X8>)
{
  *a1 = 2;
}

void static Models.Video.Behavior.allowFullScreen.getter(void *a1@<X8>)
{
  *a1 = 4;
}

uint64_t Models.Video.Behavior.rawValue.getter()
{
  return *(void *)v0;
}

uint64_t Models.Video.Behavior.init(deserializing:using:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v22 = a3;
  uint64_t v5 = sub_1B08695F8();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  BOOL v11 = (char *)&v21 - v10;
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v21 - v13;
  sub_1B0869608();
  char v15 = sub_1B08695A8();
  Class v16 = *(void (**)(char *, uint64_t))(v6 + 8);
  v16(v14, v5);
  LODWORD(v14) = v15 & 1;
  sub_1B0869608();
  char v17 = sub_1B08695A8();
  v16(v11, v5);
  LODWORD(v14) = v14 & 0xFFFFFFFD | (2 * (v17 & 1));
  sub_1B0869608();
  char v18 = sub_1B08695A8();
  v16(v8, v5);
  uint64_t v19 = sub_1B0869728();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(a2, v19);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v16)(a1, v5);
  *uint64_t v22 = v14 & 0xFFFFFFFB | (4 * (v18 & 1));
  return result;
}

uint64_t sub_1B080247C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return Models.Video.Behavior.init(deserializing:using:)(a1, a2, a3);
}

uint64_t Models.Video.init(videoURL:preview:behavior:playbackControls:autoPlayPlaybackControls:templateMediaEvent:templateClickEvent:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v53 = a6;
  uint64_t v54 = a7;
  uint64_t v52 = a1;
  uint64_t v14 = sub_1B0869188();
  uint64_t v55 = *(void *)(v14 - 8);
  uint64_t v56 = v14;
  MEMORY[0x1F4188790](v14);
  Class v16 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *a2;
  uint64_t v18 = a2[1];
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[3];
  long long v21 = *((_OWORD *)a2 + 2);
  long long v46 = *((_OWORD *)a2 + 3);
  long long v47 = v21;
  long long v45 = *((_OWORD *)a2 + 4);
  uint64_t v22 = a2[10];
  int v44 = *((unsigned __int8 *)a2 + 88);
  LOBYTE(a2) = *((unsigned char *)a2 + 89);
  uint64_t v23 = *a3;
  uint64_t v24 = *a4;
  uint64_t v48 = v17;
  uint64_t v49 = v24;
  uint64_t v50 = *a5;
  LOBYTE(a5) = *((unsigned char *)a5 + 8);
  uint64_t v51 = sub_1B08690F8();
  uint64_t v25 = *(void *)(v51 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))(a8, a1, v51);
  unsigned __int8 v26 = (int *)type metadata accessor for Models.Video();
  uint64_t v27 = a8 + v26[5];
  *(void *)uint64_t v27 = v48;
  *(void *)(v27 + 8) = v18;
  *(void *)(v27 + 16) = v19;
  *(void *)(v27 + 24) = v20;
  long long v28 = v46;
  *(_OWORD *)(v27 + 32) = v47;
  *(_OWORD *)(v27 + 48) = v28;
  *(_OWORD *)(v27 + 64) = v45;
  *(void *)(v27 + 80) = v22;
  *(unsigned char *)(v27 + 88) = v44;
  *(unsigned char *)(v27 + 89) = (_BYTE)a2;
  *(void *)(a8 + v26[6]) = v23;
  *(void *)(a8 + v26[7]) = v49;
  uint64_t v29 = a8 + v26[8];
  *(void *)uint64_t v29 = v50;
  *(unsigned char *)(v29 + 8) = (_BYTE)a5;
  uint64_t v30 = a8 + v26[9];
  uint64_t v31 = sub_1B0869758();
  uint64_t v32 = *(void *)(v31 - 8);
  uint64_t v33 = *(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 16);
  uint64_t v34 = v53;
  v33(v30, v53, v31);
  uint64_t v35 = v54;
  v33(a8 + v26[10], v54, v31);
  sub_1B0869178();
  uint64_t v36 = v16;
  uint64_t v37 = sub_1B0869168();
  uint64_t v50 = v38;
  double v39 = *(void (**)(uint64_t, uint64_t))(v32 + 8);
  v39(v35, v31);
  v39(v34, v31);
  (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v52, v51);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v55 + 8))(v36, v56);
  double v41 = (uint64_t *)(a8 + v26[11]);
  uint64_t v42 = v50;
  *double v41 = v37;
  v41[1] = v42;
  return result;
}

uint64_t type metadata accessor for Models.Video()
{
  uint64_t result = qword_1E9B3B560;
  if (!qword_1E9B3B560) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t Models.Video.init(deserializing:using:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v136 = a2;
  uint64_t v113 = a3;
  uint64_t v112 = sub_1B0869188();
  uint64_t v111 = *(void *)(v112 - 8);
  MEMORY[0x1F4188790](v112);
  double v110 = (char *)&v95 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v131 = type metadata accessor for Models.Video();
  MEMORY[0x1F4188790](v131);
  double v109 = (char *)&v95 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v118 = sub_1B0869758();
  uint64_t v117 = *(void *)(v118 - 8);
  MEMORY[0x1F4188790](v118);
  long long v116 = (char *)&v95 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  unsigned int v121 = (char *)&v95 - v8;
  uint64_t v135 = sub_1B0869728();
  uint64_t v133 = *(void *)(v135 - 8);
  MEMORY[0x1F4188790](v135);
  CGFloat v115 = (char *)&v95 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  unsigned int v120 = (char *)&v95 - v11;
  MEMORY[0x1F4188790](v12);
  v125 = (char *)&v95 - v13;
  MEMORY[0x1F4188790](v14);
  v128 = (char *)&v95 - v15;
  MEMORY[0x1F4188790](v16);
  double v126 = (char *)&v95 - v17;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3B498);
  MEMORY[0x1F4188790](v18 - 8);
  uint64_t v20 = (char *)&v95 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_1B08695F8();
  uint64_t v22 = *(void *)(v21 - 8);
  MEMORY[0x1F4188790](v21);
  v114 = (char *)&v95 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v24);
  double v119 = (char *)&v95 - v25;
  MEMORY[0x1F4188790](v26);
  uint64_t v124 = (char *)&v95 - v27;
  MEMORY[0x1F4188790](v28);
  uint64_t v127 = (char *)&v95 - v29;
  MEMORY[0x1F4188790](v30);
  MEMORY[0x1F4188790](v31);
  uint64_t v33 = (char *)&v95 - v32;
  uint64_t v34 = sub_1B08690F8();
  uint64_t v35 = *(void *)(v34 - 8);
  MEMORY[0x1F4188790](v34);
  double v132 = (char *)&v95 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v37);
  double v39 = (char *)&v95 - v38;
  uint64_t v134 = a1;
  sub_1B0869608();
  sub_1B0869598();
  double v40 = v33;
  uint64_t v41 = v35;
  uint64_t v42 = *(void (**)(char *, uint64_t))(v22 + 8);
  v42(v40, v21);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v20, 1, v34) == 1)
  {
    sub_1B080371C((uint64_t)v20);
    uint64_t v43 = sub_1B0869C28();
    sub_1B0805378((unint64_t *)&qword_1E9B3AE18, MEMORY[0x1E4F717F0]);
    swift_allocError();
    *int v44 = 0x4C52556F65646976;
    uint64_t v45 = v131;
    v44[1] = 0xE800000000000000;
    _OWORD v44[2] = v45;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v43 - 8) + 104))(v44, *MEMORY[0x1E4F717D8], v43);
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v133 + 8))(v136, v135);
    return ((uint64_t (*)(uint64_t, uint64_t))v42)(v134, v21);
  }
  else
  {
    CGFloat v106 = (void (*)(uint64_t, uint64_t))v42;
    uint64_t v107 = v21;
    uint64_t v108 = v22 + 8;
    uint64_t v123 = v41;
    long long v47 = *(void (**)(char *, char *, uint64_t))(v41 + 32);
    uint64_t v130 = v34;
    v47(v39, v20, v34);
    sub_1B0869608();
    uint64_t v48 = v133 + 16;
    uint64_t v49 = *(void (**)(char *, uint64_t, uint64_t))(v133 + 16);
    uint64_t v50 = v126;
    v49(v126, v136, v135);
    sub_1B080377C();
    uint64_t v51 = &v137;
    sub_1B0869928();
    double v122 = v39;
    if (v138 == 1)
    {
      if (qword_1E9B3A6B0 != -1) {
        swift_once();
      }
      uint64_t v51 = &qword_1E9B3B808;
    }
    uint64_t v52 = *v51;
    sub_1B0869608();
    uint64_t v53 = v135;
    v49(v50, v136, v135);
    sub_1B0869928();
    uint64_t v54 = v137;
    uint64_t v104 = v52;
    if ((_BYTE)v138) {
      uint64_t v54 = v52;
    }
    uint64_t v103 = v54;
    uint64_t v55 = v123;
    uint64_t v56 = (char *)(v123 + 16);
    long long v57 = v122;
    CGRect v102 = *(void (**)(char *, char *, uint64_t))(v123 + 16);
    v102(v132, v122, v130);
    long long v58 = v127;
    sub_1B0869608();
    uint64_t v59 = v53;
    uint64_t v60 = v136;
    uint64_t v61 = (uint64_t)v128;
    double v126 = (char *)v49;
    uint64_t v105 = v48;
    v49(v128, v136, v59);
    uint64_t v62 = v129;
    Models.Artwork.init(deserializing:using:)(v58, v61, &v137);
    if (v62)
    {
      (*(void (**)(uint64_t, uint64_t))(v133 + 8))(v60, v59);
      v106(v134, v107);
      CGRect v63 = *(void (**)(char *, uint64_t))(v55 + 8);
      uint64_t v64 = v130;
      v63(v132, v130);
      return ((uint64_t (*)(char *, uint64_t))v63)(v57, v64);
    }
    else
    {
      uint64_t v127 = v56;
      uint64_t v101 = v137;
      uint64_t v129 = v138;
      uint64_t v65 = v139;
      uint64_t v66 = v140;
      uint64_t v100 = v141;
      v128 = v142;
      double v67 = v144;
      uint64_t v99 = v143;
      long long v68 = v146;
      uint64_t v98 = v145;
      uint64_t v97 = v147;
      int v96 = v148;
      int v95 = v149;
      uint64_t v69 = (uint64_t)v124;
      sub_1B0869608();
      uint64_t v70 = (uint64_t)v125;
      ((void (*)(char *, uint64_t, uint64_t))v126)(v125, v60, v135);
      Models.Video.Behavior.init(deserializing:using:)(v69, v70, &v150);
      uint64_t v124 = v68;
      v125 = v67;
      long long v71 = v150;
      sub_1B0869608();
      uint64_t v72 = v60;
      ((void (*)(char *, uint64_t, uint64_t))v126)(v120, v60, v135);
      CGAffineTransform v73 = v121;
      sub_1B0869748();
      long long v74 = v73;
      unsigned int v120 = v71;
      sub_1B0869608();
      ((void (*)(char *, uint64_t, uint64_t))v126)(v115, v72, v135);
      uint64_t v75 = v116;
      sub_1B0869748();
      uint64_t v76 = v128;
      long long v77 = v125;
      uint64_t v78 = (uint64_t)v109;
      v102(v109, v132, v130);
      uint64_t v79 = (int *)v131;
      uint64_t v80 = v78 + *(int *)(v131 + 20);
      uint64_t v81 = v129;
      *(void *)uint64_t v80 = v101;
      *(void *)(v80 + 8) = v81;
      *(void *)(v80 + 16) = v65;
      *(void *)(v80 + 24) = v66;
      *(void *)(v80 + 32) = v100;
      *(void *)(v80 + 40) = v76;
      *(void *)(v80 + 48) = v99;
      *(void *)(v80 + 56) = v77;
      double v82 = v124;
      *(void *)(v80 + 64) = v98;
      *(void *)(v80 + 72) = v82;
      *(void *)(v80 + 80) = v97;
      *(unsigned char *)(v80 + 88) = v96;
      *(unsigned char *)(v80 + 89) = v95;
      *(void *)(v78 + v79[6]) = v120;
      *(void *)(v78 + v79[7]) = v104;
      uint64_t v83 = v78 + v79[8];
      *(void *)uint64_t v83 = v103;
      *(unsigned char *)(v83 + 8) = 0;
      double v84 = v75;
      uint64_t v85 = v117;
      double v86 = *(void (**)(uint64_t, char *, uint64_t))(v117 + 16);
      uint64_t v87 = v118;
      v86(v78 + v79[9], v74, v118);
      v86(v78 + v79[10], v84, v87);
      long long v88 = v110;
      sub_1B0869178();
      uint64_t v129 = sub_1B0869168();
      v128 = v89;
      long long v90 = *(void (**)(char *, uint64_t))(v85 + 8);
      v90(v84, v87);
      v90(v74, v87);
      long long v91 = *(void (**)(char *, uint64_t))(v123 + 8);
      uint64_t v92 = v130;
      v91(v132, v130);
      (*(void (**)(char *, uint64_t))(v111 + 8))(v88, v112);
      CGRect v93 = (uint64_t *)(v78 + v79[11]);
      long long v94 = v128;
      *CGRect v93 = v129;
      v93[1] = (uint64_t)v94;
      sub_1B0804F5C(v78, v113);
      (*(void (**)(uint64_t, uint64_t))(v133 + 8))(v136, v135);
      v106(v134, v107);
      return ((uint64_t (*)(char *, uint64_t))v91)(v122, v92);
    }
  }
}

uint64_t sub_1B080371C(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3B498);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1B080377C()
{
  unint64_t result = qword_1E9B3B4A0;
  if (!qword_1E9B3B4A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3B4A0);
  }
  return result;
}

uint64_t Models.Video.videoURL.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_1B08690F8();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t Models.Video.preview.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Models.Video() + 20);
  uint64_t v4 = *(void *)(v3 + 8);
  uint64_t v5 = *(void *)(v3 + 32);
  uint64_t v6 = *(void *)(v3 + 40);
  uint64_t v7 = *(void *)(v3 + 48);
  uint64_t v8 = *(void *)(v3 + 56);
  uint64_t v9 = *(void *)(v3 + 64);
  uint64_t v10 = *(void *)(v3 + 72);
  uint64_t v11 = *(void *)(v3 + 80);
  char v12 = *(unsigned char *)(v3 + 88);
  char v13 = *(unsigned char *)(v3 + 89);
  *(void *)a1 = *(void *)v3;
  *(void *)(a1 + 8) = v4;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v3 + 16);
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = v6;
  *(void *)(a1 + 48) = v7;
  *(void *)(a1 + 56) = v8;
  *(void *)(a1 + 64) = v9;
  *(void *)(a1 + 72) = v10;
  *(void *)(a1 + 80) = v11;
  *(unsigned char *)(a1 + 88) = v12;
  *(unsigned char *)(a1 + 89) = v13;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t Models.Video.behavior.getter@<X0>(void *a1@<X8>)
{
  uint64_t result = type metadata accessor for Models.Video();
  *a1 = *(void *)(v1 + *(int *)(result + 24));
  return result;
}

uint64_t Models.Video.playbackControls.getter@<X0>(void *a1@<X8>)
{
  uint64_t result = type metadata accessor for Models.Video();
  *a1 = *(void *)(v1 + *(int *)(result + 28));
  return result;
}

uint64_t Models.Video.autoPlayPlaybackControls.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = type metadata accessor for Models.Video();
  uint64_t v4 = (uint64_t *)(v1 + *(int *)(result + 32));
  uint64_t v5 = *v4;
  LOBYTE(v4) = *((unsigned char *)v4 + 8);
  *(void *)a1 = v5;
  *(unsigned char *)(a1 + 8) = (_BYTE)v4;
  return result;
}

uint64_t Models.Video.templateMediaEvent.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Models.Video() + 36);
  uint64_t v4 = sub_1B0869758();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t Models.Video.templateClickEvent.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Models.Video() + 40);
  uint64_t v4 = sub_1B0869758();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t Models.Video.playbackID.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Models.Video() + 44));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1B0803AB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return Models.Video.init(deserializing:using:)(a1, a2, a3);
}

uint64_t Models.Video.Behavior.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = sub_1B0869728();
  uint64_t v30 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v24 - v9;
  uint64_t v11 = sub_1B08695F8();
  uint64_t v27 = *(void *)(v11 - 8);
  uint64_t v28 = v11;
  MEMORY[0x1F4188790](v11);
  char v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v24 - v15;
  sub_1B07BBD78((uint64_t)a1, (uint64_t)v29);
  sub_1B08695B8();
  if (v2)
  {
    uint64_t v23 = (uint64_t)a1;
  }
  else
  {
    uint64_t v25 = a2;
    uint64_t v17 = a1[3];
    uint64_t v26 = a1;
    __swift_project_boxed_opaque_existential_1(a1, v17);
    uint64_t v18 = v5;
    sub_1B086A9B8();
    sub_1B0869718();
    uint64_t v20 = v27;
    uint64_t v19 = v28;
    (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v13, v16, v28);
    uint64_t v21 = v30;
    (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v7, v10, v18);
    Models.Video.Behavior.init(deserializing:using:)((uint64_t)v13, (uint64_t)v7, v29);
    (*(void (**)(char *, uint64_t))(v21 + 8))(v10, v18);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v16, v19);
    uint64_t v23 = (uint64_t)v26;
    *uint64_t v25 = v29[0];
  }
  return __swift_destroy_boxed_opaque_existential_1(v23);
}

uint64_t Models.Video.Behavior.encode(to:)(void *a1)
{
  uint64_t v2 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B086A9D8();
  sub_1B07D60C0(MEMORY[0x1E4FBC860]);
  if ((v2 & 1) == 0)
  {
    if ((v2 & 2) == 0) {
      goto LABEL_3;
    }
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_1B07CA930(1, 1886351212, 0xE400000000000000, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    if ((v2 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  char v5 = swift_isUniquelyReferenced_nonNull_native();
  sub_1B07CA930(1, 0x747541776F6C6C61, 0xED000079616C506FLL, v5);
  swift_bridgeObjectRelease();
  if ((v2 & 2) != 0) {
    goto LABEL_7;
  }
LABEL_3:
  if ((v2 & 4) != 0)
  {
LABEL_4:
    char v3 = swift_isUniquelyReferenced_nonNull_native();
    sub_1B07CA930(1, 0x6C7546776F6C6C61, 0xEF6E65657263536CLL, v3);
    swift_bridgeObjectRelease();
  }
LABEL_5:
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v7, v8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3B4A8);
  sub_1B0805010();
  sub_1B086A8C8();
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
}

unint64_t sub_1B0803F30(char a1)
{
  unint64_t result = 0x4C52556F65646976;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000010;
      break;
    case 2:
      unint64_t result = 0xD000000000000018;
      break;
    case 3:
      unint64_t result = 0x77656976657270;
      break;
    case 4:
      unint64_t result = 0x726F697661686562;
      break;
    case 5:
    case 6:
      unint64_t result = 0xD000000000000012;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1B0804014@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return Models.Video.Behavior.init(from:)(a1, a2);
}

uint64_t sub_1B080402C(void *a1)
{
  return Models.Video.Behavior.encode(to:)(a1);
}

unint64_t sub_1B0804044()
{
  return sub_1B0803F30(*v0);
}

uint64_t sub_1B080404C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1B080643C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B0804074(uint64_t a1)
{
  unint64_t v2 = sub_1B0805084();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B08040B0(uint64_t a1)
{
  unint64_t v2 = sub_1B0805084();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t Models.Video.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v75 = a2;
  uint64_t v74 = sub_1B0869188();
  uint64_t v73 = *(void *)(v74 - 8);
  MEMORY[0x1F4188790](v74);
  uint64_t v72 = (char *)&v53 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = type metadata accessor for Models.Video();
  MEMORY[0x1F4188790](v76);
  long long v71 = (char *)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = sub_1B0869758();
  uint64_t v77 = *(void *)(v79 - 8);
  MEMORY[0x1F4188790](v79);
  uint64_t v78 = (char *)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v53 - v7;
  uint64_t v9 = sub_1B08690F8();
  uint64_t v80 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v53 - v13;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3B4B8);
  uint64_t v81 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = a1[3];
  double v82 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v18);
  sub_1B0805084();
  uint64_t v19 = v83;
  sub_1B086A9C8();
  if (!v19)
  {
    uint64_t v70 = v8;
    uint64_t v83 = v11;
    uint64_t v20 = v80;
    LOBYTE(v85) = 0;
    sub_1B0805378(&qword_1E9B3B4C8, MEMORY[0x1E4F276F0]);
    sub_1B086A7C8();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3B4D0);
    LOBYTE(v98) = 1;
    sub_1B0805114(&qword_1E9B3B4D8, &qword_1E9B3B4D0, (void (*)(void))sub_1B08050D8);
    sub_1B086A788();
    if (v86 & 0x100) != 0 || (v86)
    {
      if (qword_1E9B3A6B0 != -1) {
        swift_once();
      }
      uint64_t v69 = qword_1E9B3B808;
    }
    else
    {
      uint64_t v69 = v85;
    }
    LOBYTE(v98) = 2;
    sub_1B086A788();
    if ((v86 & 0x100) != 0)
    {
      uint64_t v22 = v69;
    }
    else
    {
      uint64_t v22 = v69;
      if ((v86 & 1) == 0) {
        uint64_t v22 = v85;
      }
    }
    uint64_t v68 = v22;
    double v67 = *(void (**)(char *, char *, uint64_t))(v20 + 16);
    v67(v83, v14, v9);
    LOBYTE(v98) = 3;
    sub_1B08051D4();
    sub_1B086A7C8();
    uint64_t v66 = v14;
    uint64_t v64 = v20 + 16;
    uint64_t v23 = v86;
    uint64_t v63 = v85;
    uint64_t v24 = v87;
    uint64_t v25 = v88;
    uint64_t v62 = v89;
    uint64_t v65 = v90;
    uint64_t v26 = v92;
    uint64_t v61 = v91;
    uint64_t v27 = v93;
    uint64_t v28 = v94;
    uint64_t v60 = v95;
    int v59 = v96;
    int v58 = v97;
    char v84 = 4;
    sub_1B0805228();
    sub_1B086A7C8();
    uint64_t v54 = v27;
    uint64_t v57 = v28;
    uint64_t v55 = v26;
    uint64_t v56 = v23;
    uint64_t v29 = v98;
    char v84 = 5;
    sub_1B0805378(&qword_1E9B3B508, MEMORY[0x1E4F71158]);
    sub_1B086A7C8();
    char v84 = 6;
    sub_1B086A7C8();
    uint64_t v30 = v57;
    uint64_t v31 = v71;
    v67(v71, v83, v9);
    uint64_t v32 = (int *)v76;
    uint64_t v33 = &v31[*(int *)(v76 + 20)];
    uint64_t v34 = v56;
    *(void *)uint64_t v33 = v63;
    *((void *)v33 + 1) = v34;
    *((void *)v33 + 2) = v24;
    *((void *)v33 + 3) = v25;
    uint64_t v35 = v65;
    *((void *)v33 + 4) = v62;
    *((void *)v33 + 5) = v35;
    uint64_t v36 = v55;
    *((void *)v33 + 6) = v61;
    *((void *)v33 + 7) = v36;
    *((void *)v33 + 8) = v54;
    *((void *)v33 + 9) = v30;
    *((void *)v33 + 10) = v60;
    v33[88] = v59;
    v33[89] = v58;
    *(void *)&v31[v32[6]] = v29;
    *(void *)&v31[v32[7]] = v69;
    uint64_t v37 = &v31[v32[8]];
    *(void *)uint64_t v37 = v68;
    v37[8] = 0;
    uint64_t v38 = &v31[v32[9]];
    uint64_t v39 = (uint64_t)v31;
    uint64_t v40 = v77;
    uint64_t v69 = (uint64_t)v17;
    double v67 = (void (*)(char *, char *, uint64_t))v9;
    uint64_t v68 = v15;
    uint64_t v41 = *(void (**)(char *, char *, uint64_t))(v77 + 16);
    uint64_t v42 = v70;
    uint64_t v43 = v79;
    v41(v38, v70, v79);
    int v44 = v78;
    v41((char *)(v39 + v32[10]), v78, v43);
    uint64_t v45 = v72;
    sub_1B0869178();
    uint64_t v46 = sub_1B0869168();
    uint64_t v65 = v47;
    uint64_t v48 = *(void (**)(char *, uint64_t))(v40 + 8);
    v48(v44, v43);
    v48(v42, v43);
    uint64_t v49 = *(void (**)(char *, void (*)(char *, char *, uint64_t)))(v80 + 8);
    uint64_t v50 = v67;
    v49(v83, v67);
    (*(void (**)(char *, uint64_t))(v73 + 8))(v45, v74);
    uint64_t v51 = (uint64_t *)(v39 + *(int *)(v76 + 44));
    uint64_t v52 = v65;
    *uint64_t v51 = v46;
    v51[1] = v52;
    sub_1B0804F5C(v39, v75);
    v49(v66, v50);
    (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v69, v68);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v82);
}

uint64_t Models.Video.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3B510);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B0805084();
  sub_1B086A9E8();
  LOBYTE(v21) = 0;
  sub_1B08690F8();
  sub_1B0805378(&qword_1E9B3B518, MEMORY[0x1E4F276F0]);
  sub_1B086A828();
  if (!v2)
  {
    uint64_t v9 = (int *)type metadata accessor for Models.Video();
    uint64_t v21 = *(void *)(v3 + v9[7]);
    char v30 = 1;
    sub_1B080527C();
    sub_1B086A828();
    uint64_t v10 = (uint64_t *)(v3 + v9[8]);
    uint64_t v11 = *v10;
    LOBYTE(v10) = *((unsigned char *)v10 + 8);
    uint64_t v21 = v11;
    LOBYTE(v22) = (_BYTE)v10;
    char v30 = 2;
    sub_1B086A7E8();
    uint64_t v12 = (uint64_t *)(v3 + v9[5]);
    uint64_t v13 = v12[1];
    long long v14 = *((_OWORD *)v12 + 3);
    long long v15 = *((_OWORD *)v12 + 4);
    uint64_t v16 = v12[10];
    char v17 = *((unsigned char *)v12 + 88);
    char v18 = *((unsigned char *)v12 + 89);
    uint64_t v21 = *v12;
    uint64_t v22 = v13;
    long long v19 = *((_OWORD *)v12 + 2);
    long long v23 = *((_OWORD *)v12 + 1);
    long long v24 = v19;
    long long v25 = v14;
    long long v26 = v15;
    uint64_t v27 = v16;
    char v28 = v17;
    char v29 = v18;
    char v30 = 3;
    sub_1B08052D0();
    sub_1B086A828();
    uint64_t v21 = *(void *)(v3 + v9[6]);
    char v30 = 4;
    sub_1B0805324();
    sub_1B086A828();
    LOBYTE(v21) = 5;
    sub_1B0869758();
    sub_1B0805378(&qword_1E9B3B538, MEMORY[0x1E4F71158]);
    sub_1B086A828();
    LOBYTE(v21) = 6;
    sub_1B086A828();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1B0804F2C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return Models.Video.init(from:)(a1, a2);
}

uint64_t sub_1B0804F44(void *a1)
{
  return Models.Video.encode(to:)(a1);
}

uint64_t sub_1B0804F5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Models.Video();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

unint64_t sub_1B0805010()
{
  unint64_t result = qword_1E9B3B4B0;
  if (!qword_1E9B3B4B0)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1E9B3B4A8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3B4B0);
  }
  return result;
}

unint64_t sub_1B0805084()
{
  unint64_t result = qword_1E9B3B4C0;
  if (!qword_1E9B3B4C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3B4C0);
  }
  return result;
}

uint64_t sub_1B08050D8()
{
  return sub_1B0805114(&qword_1E9B3B4E0, &qword_1E9B3B4E8, (void (*)(void))sub_1B0805180);
}

uint64_t sub_1B0805114(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1B0805180()
{
  unint64_t result = qword_1E9B3B4F0;
  if (!qword_1E9B3B4F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3B4F0);
  }
  return result;
}

unint64_t sub_1B08051D4()
{
  unint64_t result = qword_1E9B3B4F8;
  if (!qword_1E9B3B4F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3B4F8);
  }
  return result;
}

unint64_t sub_1B0805228()
{
  unint64_t result = qword_1E9B3B500;
  if (!qword_1E9B3B500)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3B500);
  }
  return result;
}

unint64_t sub_1B080527C()
{
  unint64_t result = qword_1E9B3B520;
  if (!qword_1E9B3B520)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3B520);
  }
  return result;
}

unint64_t sub_1B08052D0()
{
  unint64_t result = qword_1E9B3B528;
  if (!qword_1E9B3B528)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3B528);
  }
  return result;
}

unint64_t sub_1B0805324()
{
  unint64_t result = qword_1E9B3B530;
  if (!qword_1E9B3B530)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3B530);
  }
  return result;
}

uint64_t sub_1B0805378(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1B08053C4()
{
  unint64_t result = qword_1E9B3B540;
  if (!qword_1E9B3B540)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3B540);
  }
  return result;
}

unint64_t sub_1B080541C()
{
  unint64_t result = qword_1E9B3B548;
  if (!qword_1E9B3B548)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3B548);
  }
  return result;
}

unint64_t sub_1B0805474()
{
  unint64_t result = qword_1E9B3B550;
  if (!qword_1E9B3B550)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3B550);
  }
  return result;
}

unint64_t sub_1B08054CC()
{
  unint64_t result = qword_1E9B3B558;
  if (!qword_1E9B3B558)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3B558);
  }
  return result;
}

char *_s5VideoVwCP(char *a1, char *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v26 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v26 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_1B08690F8();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = &a1[v8];
    uint64_t v11 = &a2[v8];
    uint64_t v12 = *((void *)v11 + 1);
    *(void *)uint64_t v10 = *(void *)v11;
    *((void *)v10 + 1) = v12;
    *((_OWORD *)v10 + 1) = *((_OWORD *)v11 + 1);
    uint64_t v13 = *((void *)v11 + 5);
    *((void *)v10 + 4) = *((void *)v11 + 4);
    *((void *)v10 + 5) = v13;
    uint64_t v14 = *((void *)v11 + 7);
    *((void *)v10 + 6) = *((void *)v11 + 6);
    *((void *)v10 + 7) = v14;
    uint64_t v15 = *((void *)v11 + 10);
    *((void *)v10 + 9) = *((void *)v11 + 9);
    *((void *)v10 + 10) = v15;
    *((void *)v10 + 8) = *((void *)v11 + 8);
    *((_WORD *)v10 + 44) = *((_WORD *)v11 + 44);
    *(void *)&a1[v9] = *(void *)&a2[v9];
    uint64_t v16 = a3[8];
    *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
    char v17 = &a1[v16];
    char v18 = &a2[v16];
    v17[8] = v18[8];
    *(void *)char v17 = *(void *)v18;
    uint64_t v19 = a3[9];
    char v28 = &a1[v19];
    char v29 = &a2[v19];
    uint64_t v20 = sub_1B0869758();
    uint64_t v21 = *(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v21(v28, v29, v20);
    v21(&a1[a3[10]], &a2[a3[10]], v20);
    uint64_t v22 = a3[11];
    long long v23 = &a1[v22];
    long long v24 = &a2[v22];
    uint64_t v25 = *((void *)v24 + 1);
    *(void *)long long v23 = *(void *)v24;
    *((void *)v23 + 1) = v25;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t _s5VideoVwxx(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1B08690F8();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = a1 + *(int *)(a2 + 36);
  uint64_t v6 = sub_1B0869758();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
  v7(v5, v6);
  v7(a1 + *(int *)(a2 + 40), v6);

  return swift_bridgeObjectRelease();
}

uint64_t _s5VideoVwcp(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1B08690F8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  uint64_t v11 = *(void *)(v10 + 8);
  *(void *)uint64_t v9 = *(void *)v10;
  *(void *)(v9 + 8) = v11;
  *(_OWORD *)(v9 + 16) = *(_OWORD *)(v10 + 16);
  uint64_t v12 = *(void *)(v10 + 40);
  *(void *)(v9 + 32) = *(void *)(v10 + 32);
  *(void *)(v9 + 40) = v12;
  uint64_t v13 = *(void *)(v10 + 56);
  *(void *)(v9 + 48) = *(void *)(v10 + 48);
  *(void *)(v9 + 56) = v13;
  uint64_t v14 = *(void *)(v10 + 80);
  *(void *)(v9 + 72) = *(void *)(v10 + 72);
  *(void *)(v9 + 80) = v14;
  *(void *)(v9 + 64) = *(void *)(v10 + 64);
  *(_WORD *)(v9 + 88) = *(_WORD *)(v10 + 88);
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  uint64_t v15 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  *(unsigned char *)(v16 + 8) = *(unsigned char *)(v17 + 8);
  *(void *)uint64_t v16 = *(void *)v17;
  uint64_t v18 = a3[9];
  uint64_t v26 = a1 + v18;
  uint64_t v27 = a2 + v18;
  uint64_t v19 = sub_1B0869758();
  uint64_t v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v20(v26, v27, v19);
  v20(a1 + a3[10], a2 + a3[10], v19);
  uint64_t v21 = a3[11];
  uint64_t v22 = (void *)(a1 + v21);
  long long v23 = (void *)(a2 + v21);
  uint64_t v24 = v23[1];
  *uint64_t v22 = *v23;
  v22[1] = v24;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s5VideoVwca(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1B08690F8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(void *)uint64_t v8 = *(void *)(a2 + v7);
  *(void *)(v8 + 8) = *(void *)(a2 + v7 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v8 + 16) = *(void *)(v9 + 16);
  *(void *)(v8 + 24) = *(void *)(v9 + 24);
  *(void *)(v8 + 32) = *(void *)(v9 + 32);
  *(void *)(v8 + 40) = *(void *)(v9 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v8 + 48) = *(void *)(v9 + 48);
  *(void *)(v8 + 56) = *(void *)(v9 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v8 + 64) = *(void *)(v9 + 64);
  *(void *)(v8 + 72) = *(void *)(v9 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(v9 + 80);
  *(unsigned char *)(v8 + 88) = *(unsigned char *)(v9 + 88);
  *(void *)(v8 + 80) = v10;
  *(unsigned char *)(v8 + 89) = *(unsigned char *)(v9 + 89);
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  uint64_t v11 = a3[8];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = (uint64_t *)(a2 + v11);
  uint64_t v14 = *v13;
  *(unsigned char *)(v12 + 8) = *((unsigned char *)v13 + 8);
  *(void *)uint64_t v12 = v14;
  uint64_t v15 = a3[9];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = sub_1B0869758();
  uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 24);
  v19(v16, v17, v18);
  v19(a1 + a3[10], a2 + a3[10], v18);
  uint64_t v20 = a3[11];
  uint64_t v21 = (void *)(a1 + v20);
  uint64_t v22 = (void *)(a2 + v20);
  void *v21 = *v22;
  v21[1] = v22[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s5VideoVwtk(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1B08690F8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = (_OWORD *)(a1 + v7);
  uint64_t v10 = (_OWORD *)(a2 + v7);
  long long v11 = v10[3];
  long long v9[2] = v10[2];
  _OWORD v9[3] = v11;
  _OWORD v9[4] = v10[4];
  *(_OWORD *)((char *)v9 + 74) = *(_OWORD *)((char *)v10 + 74);
  long long v12 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v12;
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  uint64_t v13 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  *(void *)uint64_t v14 = *(void *)v15;
  *(unsigned char *)(v14 + 8) = *(unsigned char *)(v15 + 8);
  uint64_t v16 = a3[9];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = sub_1B0869758();
  uint64_t v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 32);
  v20(v17, v18, v19);
  v20(a1 + a3[10], a2 + a3[10], v19);
  *(_OWORD *)(a1 + a3[11]) = *(_OWORD *)(a2 + a3[11]);
  return a1;
}

uint64_t _s5VideoVwta(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1B08690F8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = *(void *)(a2 + v7 + 8);
  *(void *)uint64_t v8 = *(void *)(a2 + v7);
  *(void *)(v8 + 8) = v10;
  swift_bridgeObjectRelease();
  *(_OWORD *)(v8 + 16) = *(_OWORD *)(v9 + 16);
  uint64_t v11 = *(void *)(v9 + 40);
  *(void *)(v8 + 32) = *(void *)(v9 + 32);
  *(void *)(v8 + 40) = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)(v9 + 56);
  *(void *)(v8 + 48) = *(void *)(v9 + 48);
  *(void *)(v8 + 56) = v12;
  swift_bridgeObjectRelease();
  uint64_t v13 = *(void *)(v9 + 72);
  *(void *)(v8 + 64) = *(void *)(v9 + 64);
  *(void *)(v8 + 72) = v13;
  swift_bridgeObjectRelease();
  *(void *)(v8 + 80) = *(void *)(v9 + 80);
  *(unsigned char *)(v8 + 88) = *(unsigned char *)(v9 + 88);
  *(unsigned char *)(v8 + 89) = *(unsigned char *)(v9 + 89);
  uint64_t v14 = a3[7];
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  *(void *)(a1 + v14) = *(void *)(a2 + v14);
  uint64_t v15 = a3[8];
  uint64_t v16 = a3[9];
  uint64_t v17 = a1 + v15;
  uint64_t v18 = a2 + v15;
  *(unsigned char *)(v17 + 8) = *(unsigned char *)(v18 + 8);
  *(void *)uint64_t v17 = *(void *)v18;
  uint64_t v19 = a1 + v16;
  uint64_t v20 = a2 + v16;
  uint64_t v21 = sub_1B0869758();
  uint64_t v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 40);
  v22(v19, v20, v21);
  v22(a1 + a3[10], a2 + a3[10], v21);
  uint64_t v23 = a3[11];
  uint64_t v24 = (void *)(a1 + v23);
  uint64_t v25 = (uint64_t *)(a2 + v23);
  uint64_t v27 = *v25;
  uint64_t v26 = v25[1];
  *uint64_t v24 = v27;
  v24[1] = v26;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s5VideoVwet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B0805EB4);
}

uint64_t sub_1B0805EB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1B08690F8();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else if (a2 == 0x7FFFFFFF)
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
  else
  {
    uint64_t v11 = sub_1B0869758();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a3 + 36);
    return v12(v14, a2, v13);
  }
}

uint64_t _s5VideoVwst(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B0805FF8);
}

uint64_t sub_1B0805FF8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_1B08690F8();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v11 = sub_1B0869758();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a4 + 36);
    return v12(v14, a2, a2, v13);
  }
  return result;
}

uint64_t sub_1B0806128()
{
  uint64_t result = sub_1B08690F8();
  if (v1 <= 0x3F)
  {
    uint64_t result = sub_1B0869758();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Models.Video.Behavior()
{
  return &type metadata for Models.Video.Behavior;
}

unsigned char *_s5VideoV10CodingKeysOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *uint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B08062FCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *_s5VideoV10CodingKeysOMa()
{
  return &_s5VideoV10CodingKeysON;
}

unint64_t sub_1B0806338()
{
  unint64_t result = qword_1E9B3B570;
  if (!qword_1E9B3B570)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3B570);
  }
  return result;
}

unint64_t sub_1B0806390()
{
  unint64_t result = qword_1E9B3B578;
  if (!qword_1E9B3B578)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3B578);
  }
  return result;
}

unint64_t sub_1B08063E8()
{
  unint64_t result = qword_1E9B3B580;
  if (!qword_1E9B3B580)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3B580);
  }
  return result;
}

uint64_t sub_1B080643C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x4C52556F65646976 && a2 == 0xE800000000000000;
  if (v2 || (sub_1B086A8A8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001B0874F20 || (sub_1B086A8A8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x80000001B0874F40 || (sub_1B086A8A8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x77656976657270 && a2 == 0xE700000000000000 || (sub_1B086A8A8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x726F697661686562 && a2 == 0xE800000000000000 || (sub_1B086A8A8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000001B0874F60 || (sub_1B086A8A8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000001B0874F80)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    char v6 = sub_1B086A8A8();
    swift_bridgeObjectRelease();
    if (v6) {
      return 6;
    }
    else {
      return 7;
    }
  }
}

uint64_t dispatch thunk of _TestableLayout._eraseToAnyForTesting(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

ValueMetadata *type metadata accessor for AppStore()
{
  return &type metadata for AppStore;
}

uint64_t Models.TitledParagraph.Style.init(rawValue:)@<X0>(char *a1@<X8>)
{
  uint64_t v2 = sub_1B086A778();
  uint64_t result = swift_bridgeObjectRelease();
  if (v2 == 1) {
    char v4 = 1;
  }
  else {
    char v4 = 2;
  }
  if (!v2) {
    char v4 = 0;
  }
  *a1 = v4;
  return result;
}

void *static Models.TitledParagraph.Style.allCases.getter()
{
  return &unk_1F09518C0;
}

uint64_t Models.TitledParagraph.Style.rawValue.getter()
{
  if (*v0) {
    return 0x6C6961746564;
  }
  else {
    return 0x776569767265766FLL;
  }
}

uint64_t sub_1B08067CC(char *a1, char *a2)
{
  return sub_1B084A6D8(*a1, *a2);
}

uint64_t sub_1B08067D8()
{
  return sub_1B086A998();
}

uint64_t sub_1B0806858()
{
  sub_1B0869E38();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B08068C4()
{
  return sub_1B086A998();
}

uint64_t sub_1B0806940@<X0>(char *a1@<X8>)
{
  return Models.TitledParagraph.Style.init(rawValue:)(a1);
}

void sub_1B080694C(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x776569767265766FLL;
  if (*v1) {
    uint64_t v2 = 0x6C6961746564;
  }
  unint64_t v3 = 0xE800000000000000;
  if (*v1) {
    unint64_t v3 = 0xE600000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

void sub_1B0806988(void *a1@<X8>)
{
  *a1 = &unk_1F09519C8;
}

uint64_t Models.TitledParagraph.init(text:style:primarySubtitle:secondarySubtitle:isCollapsed:wantsCollapsedNewlines:impressionMetrics:)@<X0>(uint64_t *a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, char a5@<W4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v12 = *a1;
  uint64_t v13 = a1[1];
  char v14 = *((unsigned char *)a1 + 16);
  uint64_t v38 = a3[1];
  uint64_t v39 = *a3;
  char v36 = *a2;
  char v37 = *((unsigned char *)a3 + 16);
  uint64_t v15 = *a4;
  uint64_t v16 = a4[1];
  char v40 = *((unsigned char *)a4 + 16);
  uint64_t v17 = (int *)type metadata accessor for Models.TitledParagraph();
  uint64_t v18 = a8 + v17[5];
  *(void *)uint64_t v18 = v12;
  *(void *)(v18 + 8) = v13;
  *(unsigned char *)(v18 + 16) = v14;
  v41[0] = v12;
  v41[1] = v13;
  char v42 = v14;
  id v19 = sub_1B07F1E94((uint64_t)v41);
  uint64_t v20 = v19;
  *(void *)(a8 + v17[6]) = v19;
  if (a6)
  {
    id v21 = objc_allocWithZone(MEMORY[0x1E4F28E48]);
    id v22 = v20;
    id v23 = objc_msgSend(v21, sel_initWithAttributedString_, v22);
    id v34 = objc_msgSend(v23, sel_length);
    id v24 = objc_msgSend(v23, sel_mutableString);
    uint64_t v35 = v15;
    char v25 = a5;
    uint64_t v26 = a7;
    uint64_t v27 = (void *)sub_1B0869D68();
    uint64_t v28 = v16;
    char v29 = (void *)sub_1B0869D68();
    objc_msgSend(v24, sel_replaceOccurrencesOfString_withString_options_range_, v27, v29, 1024, 0, v34);

    a7 = v26;
    a5 = v25;
    uint64_t v15 = v35;

    uint64_t v16 = v28;
    *(void *)(a8 + v17[7]) = v23;
  }
  else
  {
    *(void *)(a8 + v17[7]) = v19;
    id v30 = v19;
  }
  *(unsigned char *)(a8 + v17[8]) = v36;
  uint64_t v31 = a8 + v17[9];
  *(void *)uint64_t v31 = v39;
  *(void *)(v31 + 8) = v38;
  *(unsigned char *)(v31 + 16) = v37;
  uint64_t v32 = a8 + v17[10];
  *(void *)uint64_t v32 = v15;
  *(void *)(v32 + 8) = v16;
  *(unsigned char *)(v32 + 16) = v40;
  *(unsigned char *)(a8 + v17[11]) = a5 & 1;

  return sub_1B07F2374(a7, a8);
}

uint64_t type metadata accessor for Models.TitledParagraph()
{
  uint64_t result = qword_1E9B3B600;
  if (!qword_1E9B3B600) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void Models.TitledParagraph.init(deserializing:using:)(unsigned char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v106 = a2;
  uint64_t v91 = a3;
  uint64_t v93 = type metadata accessor for Models.TitledParagraph();
  MEMORY[0x1F4188790](v93);
  uint64_t v94 = &v80[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3AFE8);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v95 = &v80[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = sub_1B0869728();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v92 = &v80[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v10);
  unsigned __int8 v96 = &v80[-v11];
  MEMORY[0x1F4188790](v12);
  uint64_t v98 = &v80[-v13];
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = &v80[-v15];
  uint64_t v102 = sub_1B08695F8();
  uint64_t v104 = *(void *)(v102 - 8);
  MEMORY[0x1F4188790](v102);
  uint64_t v18 = &v80[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v19);
  id v21 = &v80[-v20];
  MEMORY[0x1F4188790](v22);
  id v24 = &v80[-v23];
  MEMORY[0x1F4188790](v25);
  unsigned __int8 v97 = &v80[-v26];
  MEMORY[0x1F4188790](v27);
  char v29 = &v80[-v28];
  MEMORY[0x1F4188790](v30);
  uint64_t v32 = &v80[-v31];
  uint64_t v105 = a1;
  sub_1B0869608();
  uint64_t v33 = v106;
  id v34 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v8 + 16);
  uint64_t v103 = v7;
  uint64_t v99 = v8 + 16;
  uint64_t v100 = v34;
  v34(v16, v106, v7);
  uint64_t v35 = v101;
  Models.ProgrammedText.init(deserializing:using:)((uint64_t)v32, (uint64_t)v16, v113);
  if (v35)
  {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v33, v103);
    (*(void (**)(unsigned char *, uint64_t))(v104 + 8))(v105, v102);
  }
  else
  {
    uint64_t v87 = v24;
    uint64_t v85 = v21;
    uint64_t v86 = v18;
    uint64_t v88 = v8;
    uint64_t v89 = v113[0];
    uint64_t v90 = v113[1];
    LODWORD(v101) = v114;
    sub_1B0869608();
    sub_1B08082BC();
    sub_1B0869558();
    uint64_t v36 = v104 + 8;
    char v37 = *(unsigned char **)(v104 + 8);
    uint64_t v38 = v102;
    ((void (*)(unsigned char *, uint64_t))v37)(v29, v102);
    int v115 = v116;
    uint64_t v39 = (uint64_t)v97;
    sub_1B0869608();
    uint64_t v40 = (uint64_t)v98;
    uint64_t v41 = v103;
    v100(v98, v106, v103);
    Models.ProgrammedText.init(deserializing:using:)(v39, v40, v111);
    uint64_t v83 = v29;
    uint64_t v98 = v37;
    uint64_t v104 = v36;
    char v42 = (unsigned char *)v111[1];
    uint64_t v84 = v111[0];
    LODWORD(v97) = v112;
    uint64_t v43 = (uint64_t)v87;
    sub_1B0869608();
    uint64_t v44 = (uint64_t)v96;
    v100(v96, v106, v41);
    Models.ProgrammedText.init(deserializing:using:)(v43, v44, v109);
    unsigned __int8 v96 = v42;
    uint64_t v87 = (unsigned char *)v109[0];
    uint64_t v82 = v109[1];
    int v81 = v110;
    uint64_t v45 = v85;
    uint64_t v46 = v38;
    sub_1B0869608();
    LOBYTE(v36) = sub_1B08695A8();
    uint64_t v47 = v45;
    uint64_t v48 = (void (*)(unsigned char *, uint64_t))v98;
    ((void (*)(unsigned char *, uint64_t))v98)(v47, v38);
    LODWORD(v85) = v36 & 1;
    uint64_t v49 = v86;
    sub_1B0869608();
    LOBYTE(v38) = sub_1B08695A8();
    v48(v49, v46);
    sub_1B0869948();
    sub_1B0869608();
    v100(v92, v106, v41);
    sub_1B0869928();
    uint64_t v50 = (int *)v93;
    uint64_t v51 = (uint64_t)v94;
    uint64_t v52 = &v94[*(int *)(v93 + 20)];
    uint64_t v53 = v89;
    uint64_t v54 = v90;
    *(void *)uint64_t v52 = v89;
    *((void *)v52 + 1) = v54;
    char v55 = v101;
    v52[16] = v101;
    v107[0] = v53;
    v107[1] = v54;
    char v108 = v55;
    id v56 = sub_1B07F1E94((uint64_t)v107);
    uint64_t v57 = v56;
    *(void *)(v51 + v50[6]) = v56;
    if (v38)
    {
      id v59 = objc_allocWithZone(MEMORY[0x1E4F28E48]);
      id v60 = v57;
      id v61 = objc_msgSend(v59, sel_initWithAttributedString_, v60);
      id v62 = objc_msgSend(v61, sel_length);
      id v63 = objc_msgSend(v61, sel_mutableString);
      uint64_t v64 = (void *)sub_1B0869D68();
      uint64_t v65 = (void *)sub_1B0869D68();
      objc_msgSend(v63, sel_replaceOccurrencesOfString_withString_options_range_, v64, v65, 1024, 0, v62);

      uint64_t v51 = (uint64_t)v94;
      *(void *)(v51 + v50[7]) = v61;
    }
    else
    {
      *(void *)(v51 + v50[7]) = v56;
      id v58 = v56;
    }
    uint64_t v66 = v105;
    uint64_t v67 = v106;
    uint64_t v68 = v91;
    uint64_t v69 = v88;
    uint64_t v70 = v102;
    uint64_t v71 = (uint64_t)v95;
    uint64_t v72 = v96;
    uint64_t v73 = v84;
    uint64_t v74 = v87;
    uint64_t v75 = v82;
    char v76 = v81;
    char v77 = (char)v85;
    *(unsigned char *)(v51 + v50[8]) = v115;
    uint64_t v78 = v51 + v50[9];
    *(void *)uint64_t v78 = v73;
    *(void *)(v78 + 8) = v72;
    *(unsigned char *)(v78 + 16) = (_BYTE)v97;
    uint64_t v79 = v51 + v50[10];
    *(void *)uint64_t v79 = v74;
    *(void *)(v79 + 8) = v75;
    *(unsigned char *)(v79 + 16) = v76;
    *(unsigned char *)(v51 + v50[11]) = v77;
    sub_1B07F2374(v71, v51);
    sub_1B0808310(v51, v68);
    (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v67, v103);
    v48(v66, v70);
  }
}

void sub_1B0807580(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t Models.TitledParagraph.impressionMetrics.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1B07F24E8(v1, a1);
}

id Models.TitledParagraph.text.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Models.TitledParagraph() + 20);
  uint64_t v4 = *(void **)v3;
  uint64_t v5 = *(void *)(v3 + 8);
  char v6 = *(unsigned char *)(v3 + 16);
  *(void *)a1 = *(void *)v3;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;

  return sub_1B07B2F10(v4, v5, v6);
}

id Models.TitledParagraph.attributedText.getter()
{
  uint64_t v1 = *(void **)(v0 + *(int *)(type metadata accessor for Models.TitledParagraph() + 24));

  return v1;
}

id Models.TitledParagraph.collapsedAttributedText.getter()
{
  uint64_t v1 = *(void **)(v0 + *(int *)(type metadata accessor for Models.TitledParagraph() + 28));

  return v1;
}

uint64_t Models.TitledParagraph.style.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = type metadata accessor for Models.TitledParagraph();
  *a1 = *(unsigned char *)(v1 + *(int *)(result + 32));
  return result;
}

id Models.TitledParagraph.primarySubtitle.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Models.TitledParagraph() + 36);
  uint64_t v4 = *(void **)v3;
  uint64_t v5 = *(void *)(v3 + 8);
  *(void *)a1 = *(void *)v3;
  *(void *)(a1 + 8) = v5;
  unsigned __int8 v6 = *(unsigned char *)(v3 + 16);
  *(unsigned char *)(a1 + 16) = v6;

  return sub_1B07F3D48(v4, v5, v6);
}

id Models.TitledParagraph.secondarySubtitle.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Models.TitledParagraph() + 40);
  uint64_t v4 = *(void **)v3;
  uint64_t v5 = *(void *)(v3 + 8);
  *(void *)a1 = *(void *)v3;
  *(void *)(a1 + 8) = v5;
  unsigned __int8 v6 = *(unsigned char *)(v3 + 16);
  *(unsigned char *)(a1 + 16) = v6;

  return sub_1B07F3D48(v4, v5, v6);
}

uint64_t Models.TitledParagraph.isCollapsed.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for Models.TitledParagraph() + 44));
}

uint64_t Models.TitledParagraph.isCollapsed.setter(char a1)
{
  uint64_t result = type metadata accessor for Models.TitledParagraph();
  *(unsigned char *)(v1 + *(int *)(result + 44)) = a1;
  return result;
}

double (*Models.TitledParagraph.isCollapsed.modify())(void)
{
  return nullsub_1;
}

unint64_t sub_1B08077BC(char a1)
{
  unint64_t result = 1954047348;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x656C797473;
      break;
    case 2:
      unint64_t result = 0x537972616D697270;
      break;
    case 3:
    case 6:
      unint64_t result = 0xD000000000000011;
      break;
    case 4:
      unint64_t result = 0x70616C6C6F437369;
      break;
    case 5:
      unint64_t result = 0xD000000000000016;
      break;
    default:
      return result;
  }
  return result;
}

void sub_1B08078AC(unsigned char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
}

uint64_t sub_1B08078C4()
{
  return sub_1B0869F58();
}

unint64_t sub_1B0807924()
{
  return sub_1B08077BC(*v0);
}

uint64_t sub_1B080792C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1B0809948(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B0807954(uint64_t a1)
{
  unint64_t v2 = sub_1B0808374();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B0807990(uint64_t a1)
{
  unint64_t v2 = sub_1B0808374();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t Models.TitledParagraph.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v83 = a2;
  uint64_t v82 = type metadata accessor for Models.TitledParagraph();
  MEMORY[0x1F4188790](v82);
  uint64_t v4 = (char *)&v61 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3AFE8);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v61 - v9;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3B590);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = a1[3];
  uint64_t v85 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v15);
  sub_1B0808374();
  uint64_t v16 = (uint64_t)v84;
  sub_1B086A9C8();
  if (!v16)
  {
    uint64_t v80 = v4;
    int v81 = v7;
    uint64_t v84 = v10;
    uint64_t v17 = v12;
    char v90 = 0;
    sub_1B07F25A4();
    sub_1B086A7C8();
    uint64_t v18 = v86;
    uint64_t v19 = v87;
    int v20 = v88;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3B5A0);
    char v90 = 1;
    sub_1B08084A8(&qword_1E9B3B5A8, &qword_1E9B3B5A0, (void (*)(void))sub_1B08083C8);
    sub_1B086A788();
    int v89 = v20;
    uint64_t v78 = v19;
    uint64_t v79 = v18;
    int v21 = v86;
    LODWORD(v18) = v86 != 3;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3B5C8);
    char v90 = 2;
    sub_1B08084A8(&qword_1E9B3B5D0, &qword_1E9B3B5C8, (void (*)(void))sub_1B0808458);
    sub_1B086A788();
    int v74 = v21;
    int v75 = (int)v18;
    uint64_t v23 = v86;
    uint64_t v22 = v87;
    int v24 = v88;
    if (v88 == 254) {
      uint64_t v25 = 0;
    }
    else {
      uint64_t v25 = v86;
    }
    if (v88 == 254) {
      uint64_t v26 = 0;
    }
    else {
      uint64_t v26 = v87;
    }
    uint64_t v76 = v26;
    char v77 = v25;
    if (v88 == 254) {
      int v27 = -1;
    }
    else {
      int v27 = v88;
    }
    char v90 = 3;
    sub_1B086A788();
    int v72 = v24;
    int v69 = v27;
    uint64_t v73 = v23;
    uint64_t v71 = v22;
    char v29 = v86;
    uint64_t v28 = v87;
    int v30 = v88;
    if (v88 == 254) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = v86;
    }
    if (v88 == 254) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = v87;
    }
    uint64_t v67 = v32;
    uint64_t v68 = v31;
    if (v88 == 254) {
      int v33 = -1;
    }
    else {
      int v33 = v88;
    }
    int v66 = v33;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3AED8);
    char v90 = 4;
    uint64_t v70 = sub_1B08084A8((unint64_t *)&qword_1E9B3AEE0, &qword_1E9B3AED8, (void (*)(void))sub_1B07F2784);
    sub_1B086A788();
    int v63 = v30;
    uint64_t v64 = v29;
    uint64_t v65 = v28;
    int v35 = v86;
    BOOL v36 = (v86 & 0xFE) != 2;
    char v90 = 5;
    sub_1B086A788();
    char v37 = (char)v86;
    sub_1B0869948();
    LOBYTE(v86) = 6;
    sub_1B0808514();
    uint64_t v38 = (uint64_t)v84;
    sub_1B086A788();
    uint64_t v70 = 0;
    unsigned __int8 v39 = v63;
    v74 &= v75;
    int v75 = v36 & v35;
    char v40 = v37;
    int v41 = v37 & 0xFE;
    sub_1B07F24E8(v38, (uint64_t)v81);
    char v42 = (int *)v82;
    uint64_t v43 = v79;
    uint64_t v44 = (uint64_t)v80;
    uint64_t v45 = &v80[*(int *)(v82 + 20)];
    uint64_t v46 = v78;
    *(void *)uint64_t v45 = v79;
    *((void *)v45 + 1) = v46;
    char v47 = v89;
    v45[16] = v89;
    uint64_t v86 = v43;
    uint64_t v87 = v46;
    unsigned __int8 v88 = v47;
    sub_1B07B2F10(v43, v46, v47);
    sub_1B080856C(v73, v71, v72);
    sub_1B080856C(v64, v65, v39);
    id v48 = sub_1B07F1E94((uint64_t)&v86);
    uint64_t v49 = v48;
    *(void *)(v44 + v42[6]) = v48;
    if (v41 == 2 || (v40 & 1) == 0)
    {
      *(void *)(v44 + v42[7]) = v48;
      id v55 = v48;
    }
    else
    {
      id v50 = objc_allocWithZone(MEMORY[0x1E4F28E48]);
      id v61 = v49;
      id v51 = objc_msgSend(v50, sel_initWithAttributedString_, v61);
      id v62 = objc_msgSend(v51, sel_length);
      id v52 = objc_msgSend(v51, sel_mutableString);
      uint64_t v53 = (void *)sub_1B0869D68();
      uint64_t v54 = (void *)sub_1B0869D68();
      objc_msgSend(v52, sel_replaceOccurrencesOfString_withString_options_range_, v53, v54, 1024, 0, v62);

      *(void *)(v44 + v42[7]) = v51;
    }
    uint64_t v56 = v83;
    *(unsigned char *)(v44 + v42[8]) = v74;
    uint64_t v57 = v44 + v42[9];
    uint64_t v58 = v76;
    *(void *)uint64_t v57 = v77;
    *(void *)(v57 + 8) = v58;
    *(unsigned char *)(v57 + 16) = v69;
    uint64_t v59 = v44 + v42[10];
    uint64_t v60 = v67;
    *(void *)uint64_t v59 = v68;
    *(void *)(v59 + 8) = v60;
    *(unsigned char *)(v59 + 16) = v66;
    *(unsigned char *)(v44 + v42[11]) = v75;
    sub_1B07F2374((uint64_t)v81, v44);
    sub_1B0808310(v44, v56);
    sub_1B0808494(v64, v65, v63);
    sub_1B0808494(v73, v71, v72);
    sub_1B07BE788(v79, v78, v89);
    sub_1B07F27F0((uint64_t)v84);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v14, v11);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v85);
}

uint64_t sub_1B08082A4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return Models.TitledParagraph.init(from:)(a1, a2);
}

unint64_t sub_1B08082BC()
{
  unint64_t result = qword_1E9B3B588;
  if (!qword_1E9B3B588)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3B588);
  }
  return result;
}

uint64_t sub_1B0808310(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Models.TitledParagraph();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1B0808374()
{
  unint64_t result = qword_1E9B3B598;
  if (!qword_1E9B3B598)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3B598);
  }
  return result;
}

uint64_t sub_1B08083C8()
{
  return sub_1B08084A8(&qword_1E9B3B5B0, &qword_1E9B3B5B8, (void (*)(void))sub_1B0808404);
}

unint64_t sub_1B0808404()
{
  unint64_t result = qword_1E9B3B5C0;
  if (!qword_1E9B3B5C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3B5C0);
  }
  return result;
}

uint64_t sub_1B0808458()
{
  return sub_1B08084A8(&qword_1E9B3B5D8, &qword_1E9B3B5E0, (void (*)(void))sub_1B07F25A4);
}

void sub_1B0808494(void *a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 254) {
    sub_1B07F3D60(a1, a2, a3);
  }
}

uint64_t sub_1B08084A8(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1B0808514()
{
  unint64_t result = qword_1E9B3B290;
  if (!qword_1E9B3B290)
  {
    sub_1B0869948();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3B290);
  }
  return result;
}

id sub_1B080856C(id result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 254) {
    return sub_1B07F3D48(result, a2, a3);
  }
  return result;
}

unint64_t sub_1B0808584()
{
  unint64_t result = qword_1E9B3B5E8;
  if (!qword_1E9B3B5E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3B5E8);
  }
  return result;
}

unint64_t sub_1B08085DC()
{
  unint64_t result = qword_1E9B3B5F0;
  if (!qword_1E9B3B5F0)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1E9B3B5F8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3B5F0);
  }
  return result;
}

uint64_t *_s15TitledParagraphVwCP(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_1B0869948();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3AFE8);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    uint64_t v11 = a3[5];
    uint64_t v12 = (char *)a1 + v11;
    uint64_t v13 = (char *)a2 + v11;
    uint64_t v14 = *(void **)v13;
    uint64_t v15 = *((void *)v13 + 1);
    char v16 = v13[16];
    sub_1B07B2F10(*(void **)v13, v15, v16);
    *(void *)uint64_t v12 = v14;
    *((void *)v12 + 1) = v15;
    v12[16] = v16;
    uint64_t v17 = a3[6];
    uint64_t v18 = a3[7];
    uint64_t v19 = *(void **)((char *)a2 + v17);
    *(uint64_t *)((char *)a1 + v17) = (uint64_t)v19;
    int v20 = *(void **)((char *)a2 + v18);
    *(uint64_t *)((char *)a1 + v18) = (uint64_t)v20;
    uint64_t v21 = a3[9];
    *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
    uint64_t v22 = (char *)a1 + v21;
    uint64_t v23 = (char *)a2 + v21;
    int v24 = *((unsigned __int8 *)a2 + v21 + 16);
    id v25 = v19;
    id v26 = v20;
    if (v24 == 255)
    {
      *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
      v22[16] = v23[16];
    }
    else
    {
      char v27 = v24 & 1;
      uint64_t v28 = *(void **)v23;
      uint64_t v29 = *((void *)v23 + 1);
      sub_1B07B2F10(v28, v29, v27);
      *(void *)uint64_t v22 = v28;
      *((void *)v22 + 1) = v29;
      v22[16] = v27;
    }
    uint64_t v30 = a3[10];
    uint64_t v31 = (char *)a1 + v30;
    uint64_t v32 = (char *)a2 + v30;
    int v33 = v32[16];
    if (v33 == 255)
    {
      *(_OWORD *)uint64_t v31 = *(_OWORD *)v32;
      v31[16] = v32[16];
    }
    else
    {
      char v34 = v33 & 1;
      uint64_t v35 = *(void *)v32;
      uint64_t v36 = *((void *)v32 + 1);
      sub_1B07B2F10(*(void **)v32, v36, v33 & 1);
      *(void *)uint64_t v31 = v35;
      *((void *)v31 + 1) = v36;
      v31[16] = v34;
    }
    *((unsigned char *)a1 + a3[11]) = *((unsigned char *)a2 + a3[11]);
  }
  return a1;
}

void _s15TitledParagraphVwxx(uint64_t a1, int *a2)
{
  uint64_t v4 = sub_1B0869948();
  uint64_t v5 = *(void *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  }
  sub_1B07BE788(*(void **)(a1 + a2[5]), *(void *)(a1 + a2[5] + 8), *(unsigned char *)(a1 + a2[5] + 16));

  uint64_t v6 = a1 + a2[9];
  int v7 = *(unsigned __int8 *)(v6 + 16);
  if (v7 != 255) {
    sub_1B07BE788(*(void **)v6, *(void *)(v6 + 8), v7 & 1);
  }
  uint64_t v8 = a1 + a2[10];
  int v9 = *(unsigned __int8 *)(v8 + 16);
  if (v9 != 255)
  {
    uint64_t v10 = *(void **)v8;
    uint64_t v11 = *(void *)(v8 + 8);
    sub_1B07BE788(v10, v11, v9 & 1);
  }
}

char *_s15TitledParagraphVwcp(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1B0869948();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3AFE8);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v9 = a3[5];
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  uint64_t v12 = *(void **)v11;
  uint64_t v13 = *((void *)v11 + 1);
  char v14 = v11[16];
  sub_1B07B2F10(*(void **)v11, v13, v14);
  *(void *)uint64_t v10 = v12;
  *((void *)v10 + 1) = v13;
  v10[16] = v14;
  uint64_t v15 = a3[6];
  uint64_t v16 = a3[7];
  uint64_t v17 = *(void **)&a2[v15];
  *(void *)&a1[v15] = v17;
  uint64_t v18 = *(void **)&a2[v16];
  *(void *)&a1[v16] = v18;
  uint64_t v19 = a3[9];
  a1[a3[8]] = a2[a3[8]];
  int v20 = &a1[v19];
  uint64_t v21 = &a2[v19];
  int v22 = a2[v19 + 16];
  id v23 = v17;
  id v24 = v18;
  if (v22 == 255)
  {
    *(_OWORD *)int v20 = *(_OWORD *)v21;
    v20[16] = v21[16];
  }
  else
  {
    char v25 = v22 & 1;
    id v26 = *(void **)v21;
    uint64_t v27 = *((void *)v21 + 1);
    sub_1B07B2F10(v26, v27, v25);
    *(void *)int v20 = v26;
    *((void *)v20 + 1) = v27;
    v20[16] = v25;
  }
  uint64_t v28 = a3[10];
  uint64_t v29 = &a1[v28];
  uint64_t v30 = &a2[v28];
  int v31 = v30[16];
  if (v31 == 255)
  {
    *(_OWORD *)uint64_t v29 = *(_OWORD *)v30;
    unsigned char v29[16] = v30[16];
  }
  else
  {
    char v32 = v31 & 1;
    uint64_t v33 = *(void *)v30;
    uint64_t v34 = *((void *)v30 + 1);
    sub_1B07B2F10(*(void **)v30, v34, v31 & 1);
    *(void *)uint64_t v29 = v33;
    *((void *)v29 + 1) = v34;
    unsigned char v29[16] = v32;
  }
  a1[a3[11]] = a2[a3[11]];
  return a1;
}

char *_s15TitledParagraphVwca(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1B0869948();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3AFE8);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v12 = a3[5];
  uint64_t v13 = &a1[v12];
  char v14 = &a2[v12];
  uint64_t v15 = *(void **)v14;
  uint64_t v16 = *((void *)v14 + 1);
  char v17 = v14[16];
  sub_1B07B2F10(*(void **)v14, v16, v17);
  uint64_t v18 = *(void **)v13;
  uint64_t v19 = *((void *)v13 + 1);
  char v20 = v13[16];
  *(void *)uint64_t v13 = v15;
  *((void *)v13 + 1) = v16;
  v13[16] = v17;
  sub_1B07BE788(v18, v19, v20);
  uint64_t v21 = a3[6];
  int v22 = *(void **)&a2[v21];
  id v23 = *(void **)&a1[v21];
  *(void *)&a1[v21] = v22;
  id v24 = v22;

  uint64_t v25 = a3[7];
  id v26 = *(void **)&a2[v25];
  uint64_t v27 = *(void **)&a1[v25];
  *(void *)&a1[v25] = v26;
  id v28 = v26;

  a1[a3[8]] = a2[a3[8]];
  uint64_t v29 = a3[9];
  uint64_t v30 = (uint64_t)&a1[v29];
  int v31 = &a2[v29];
  int v32 = a1[v29 + 16];
  int v33 = a2[v29 + 16];
  if (v32 == 255)
  {
    if (v33 == 255)
    {
      long long v35 = *(_OWORD *)v31;
      *(unsigned char *)(v30 + 16) = v31[16];
      *(_OWORD *)uint64_t v30 = v35;
    }
    else
    {
      char v42 = v33 & 1;
      uint64_t v43 = *(void **)v31;
      uint64_t v44 = *((void *)v31 + 1);
      sub_1B07B2F10(v43, v44, v33 & 1);
      *(void *)uint64_t v30 = v43;
      *(void *)(v30 + 8) = v44;
      *(unsigned char *)(v30 + 16) = v42;
    }
  }
  else if (v33 == 255)
  {
    sub_1B0808F4C(v30);
    char v34 = v31[16];
    *(_OWORD *)uint64_t v30 = *(_OWORD *)v31;
    *(unsigned char *)(v30 + 16) = v34;
  }
  else
  {
    char v36 = v33 & 1;
    char v37 = *(void **)v31;
    uint64_t v38 = *((void *)v31 + 1);
    sub_1B07B2F10(v37, v38, v33 & 1);
    unsigned __int8 v39 = *(void **)v30;
    uint64_t v40 = *(void *)(v30 + 8);
    char v41 = *(unsigned char *)(v30 + 16);
    *(void *)uint64_t v30 = v37;
    *(void *)(v30 + 8) = v38;
    *(unsigned char *)(v30 + 16) = v36;
    sub_1B07BE788(v39, v40, v41);
  }
  uint64_t v45 = a3[10];
  uint64_t v46 = (uint64_t)&a1[v45];
  char v47 = &a2[v45];
  int v48 = a1[v45 + 16];
  int v49 = a2[v45 + 16];
  if (v48 == 255)
  {
    if (v49 == 255)
    {
      long long v51 = *(_OWORD *)v47;
      *(unsigned char *)(v46 + 16) = v47[16];
      *(_OWORD *)uint64_t v46 = v51;
    }
    else
    {
      char v58 = v49 & 1;
      uint64_t v59 = *(void **)v47;
      uint64_t v60 = *((void *)v47 + 1);
      sub_1B07B2F10(v59, v60, v49 & 1);
      *(void *)uint64_t v46 = v59;
      *(void *)(v46 + 8) = v60;
      *(unsigned char *)(v46 + 16) = v58;
    }
  }
  else if (v49 == 255)
  {
    sub_1B0808F4C(v46);
    char v50 = v47[16];
    *(_OWORD *)uint64_t v46 = *(_OWORD *)v47;
    *(unsigned char *)(v46 + 16) = v50;
  }
  else
  {
    char v52 = v49 & 1;
    uint64_t v53 = *(void **)v47;
    uint64_t v54 = *((void *)v47 + 1);
    sub_1B07B2F10(v53, v54, v49 & 1);
    id v55 = *(void **)v46;
    uint64_t v56 = *(void *)(v46 + 8);
    char v57 = *(unsigned char *)(v46 + 16);
    *(void *)uint64_t v46 = v53;
    *(void *)(v46 + 8) = v54;
    *(unsigned char *)(v46 + 16) = v52;
    sub_1B07BE788(v55, v56, v57);
  }
  a1[a3[11]] = a2[a3[11]];
  return a1;
}

uint64_t sub_1B0808F4C(uint64_t a1)
{
  return a1;
}

char *_s15TitledParagraphVwtk(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1B0869948();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3AFE8);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v9 = a3[5];
  uint64_t v10 = a3[6];
  uint64_t v11 = &a1[v9];
  uint64_t v12 = &a2[v9];
  *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
  v11[16] = v12[16];
  *(void *)&a1[v10] = *(void *)&a2[v10];
  uint64_t v13 = a3[8];
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  a1[v13] = a2[v13];
  uint64_t v14 = a3[9];
  uint64_t v15 = a3[10];
  uint64_t v16 = &a1[v14];
  char v17 = &a2[v14];
  long long v18 = *(_OWORD *)v17;
  v16[16] = v17[16];
  *(_OWORD *)uint64_t v16 = v18;
  uint64_t v19 = &a1[v15];
  char v20 = &a2[v15];
  *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
  v19[16] = v20[16];
  a1[a3[11]] = a2[a3[11]];
  return a1;
}

char *_s15TitledParagraphVwta(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1B0869948();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3AFE8);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v12 = a3[5];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  char v15 = v14[16];
  uint64_t v16 = *(void **)v13;
  uint64_t v17 = *((void *)v13 + 1);
  char v18 = v13[16];
  *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
  v13[16] = v15;
  sub_1B07BE788(v16, v17, v18);
  uint64_t v19 = a3[6];
  char v20 = *(void **)&a1[v19];
  *(void *)&a1[v19] = *(void *)&a2[v19];

  uint64_t v21 = a3[7];
  int v22 = *(void **)&a1[v21];
  *(void *)&a1[v21] = *(void *)&a2[v21];

  uint64_t v23 = a3[9];
  a1[a3[8]] = a2[a3[8]];
  uint64_t v24 = (uint64_t)&a1[v23];
  uint64_t v25 = &a2[v23];
  int v26 = a1[v23 + 16];
  if (v26 == 255)
  {
LABEL_10:
    *(_OWORD *)uint64_t v24 = *(_OWORD *)v25;
    *(unsigned char *)(v24 + 16) = v25[16];
    goto LABEL_12;
  }
  int v27 = v25[16];
  if (v27 == 255)
  {
    sub_1B0808F4C(v24);
    goto LABEL_10;
  }
  id v28 = *(void **)v24;
  uint64_t v29 = *(void *)(v24 + 8);
  *(_OWORD *)uint64_t v24 = *(_OWORD *)v25;
  *(unsigned char *)(v24 + 16) = v27 & 1;
  sub_1B07BE788(v28, v29, v26 & 1);
LABEL_12:
  uint64_t v30 = a3[10];
  uint64_t v31 = (uint64_t)&a1[v30];
  int v32 = &a2[v30];
  int v33 = a1[v30 + 16];
  if (v33 != 255)
  {
    int v34 = v32[16];
    if (v34 != 255)
    {
      long long v35 = *(void **)v31;
      uint64_t v36 = *(void *)(v31 + 8);
      *(_OWORD *)uint64_t v31 = *(_OWORD *)v32;
      *(unsigned char *)(v31 + 16) = v34 & 1;
      sub_1B07BE788(v35, v36, v33 & 1);
      goto LABEL_17;
    }
    sub_1B0808F4C(v31);
  }
  *(_OWORD *)uint64_t v31 = *(_OWORD *)v32;
  *(unsigned char *)(v31 + 16) = v32[16];
LABEL_17:
  a1[a3[11]] = a2[a3[11]];
  return a1;
}

uint64_t _s15TitledParagraphVwet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B08093E4);
}

uint64_t sub_1B08093E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3AFE8);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 24));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t _s15TitledParagraphVwst(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B08094BC);
}

uint64_t sub_1B08094BC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3AFE8);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  }
  return result;
}

void sub_1B080957C()
{
  sub_1B07F35A0();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

unsigned char *_s15TitledParagraphV5StyleOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B0809704);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Models.TitledParagraph.Style()
{
  return &type metadata for Models.TitledParagraph.Style;
}

unsigned char *_s15TitledParagraphV10CodingKeysOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *uint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B0809808);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *_s15TitledParagraphV10CodingKeysOMa()
{
  return &_s15TitledParagraphV10CodingKeysON;
}

unint64_t sub_1B0809844()
{
  unint64_t result = qword_1E9B3B610;
  if (!qword_1E9B3B610)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3B610);
  }
  return result;
}

unint64_t sub_1B080989C()
{
  unint64_t result = qword_1E9B3B618;
  if (!qword_1E9B3B618)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3B618);
  }
  return result;
}

unint64_t sub_1B08098F4()
{
  unint64_t result = qword_1E9B3B620;
  if (!qword_1E9B3B620)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3B620);
  }
  return result;
}

uint64_t sub_1B0809948(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1954047348 && a2 == 0xE400000000000000;
  if (v2 || (sub_1B086A8A8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656C797473 && a2 == 0xE500000000000000 || (sub_1B086A8A8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x537972616D697270 && a2 == 0xEF656C7469746275 || (sub_1B086A8A8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001B0874FA0 || (sub_1B086A8A8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x70616C6C6F437369 && a2 == 0xEB00000000646573 || (sub_1B086A8A8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x80000001B0874950 || (sub_1B086A8A8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001B0874970)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    char v6 = sub_1B086A8A8();
    swift_bridgeObjectRelease();
    if (v6) {
      return 6;
    }
    else {
      return 7;
    }
  }
}

JUMeasurements __swiftcall CustomLayout.measure(toFit:with:)(CGSize toFit, UITraitCollection with)
{
  uint64_t v4 = v3;
  uint64_t v5 = v2;
  double height = toFit.height;
  double width = toFit.width;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  __n128 v11 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v13 = (char *)&v26 - v12;
  (*(void (**)(uint64_t, uint64_t, __n128))(v4 + 40))(v5, v4, v11);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  double v15 = (*(double (**)(Class, uint64_t, uint64_t, double, double))(AssociatedConformanceWitness + 8))(with.super.isa, AssociatedTypeWitness, AssociatedConformanceWitness, width, height);
  double v17 = v16;
  double v19 = v18;
  double v21 = v20;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, AssociatedTypeWitness);
  double v22 = v15;
  double v23 = v17;
  double v24 = v19;
  double v25 = v21;
  result.double var3 = v25;
  result.double var2 = v24;
  result.double var1 = v23;
  result.var0 = v22;
  return result;
}

Swift::Void __swiftcall CustomLayout.place(at:with:)(__C::CGRect at, UITraitCollection with)
{
  uint64_t v4 = v3;
  uint64_t v5 = v2;
  double height = at.size.height;
  double width = at.size.width;
  double y = at.origin.y;
  double x = at.origin.x;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  __n128 v13 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  double v15 = (char *)&v17 - v14;
  (*(void (**)(uint64_t, uint64_t, __n128))(v4 + 40))(v5, v4, v13);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(Class, uint64_t, uint64_t, double, double, double, double))(AssociatedConformanceWitness + 16))(with.super.isa, AssociatedTypeWitness, AssociatedConformanceWitness, x, y, width, height);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, AssociatedTypeWitness);
}

uint64_t CustomLayout._eraseToAnyForTesting(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  __n128 v11 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t, __n128))(a3 + 40))(a2, a3, v11);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3B628);
  if (swift_dynamicCast())
  {
    sub_1B07BA8FC(v15, (uint64_t)v17);
    uint64_t v12 = v18;
    uint64_t v13 = v19;
    __swift_project_boxed_opaque_existential_1(v17, v18);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 8))(a1, v12, v13);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  }
  else
  {
    uint64_t v16 = 0;
    memset(v15, 0, sizeof(v15));
    sub_1B080A198((uint64_t)v15);
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v3, a2);
    v17[0] = 0;
    v17[1] = 0xE000000000000000;
    sub_1B086A5E8();
    sub_1B086A878();
    sub_1B0869E68();
    uint64_t result = sub_1B086A6C8();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B080A198(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3B630);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t dispatch thunk of CustomLayout.layout.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

double sub_1B080A20C(double a1, double a2, double a3)
{
  return a2 * a3 + (1.0 - a3) * a1;
}

float sub_1B080A224(float a1, float a2, double a3)
{
  float v3 = 1.0 - a3;
  float v4 = a3;
  return (float)(v4 * a2) + (float)(v3 * a1);
}

uint64_t static BinaryFloatingPoint<>.interpolateLinearly(between:and:forInput:)(uint64_t a1, double a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  __n128 v11 = (char *)v17 - v10;
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)v17 - v13;
  sub_1B0869C88();
  sub_1B086A1E8();
  double v15 = *(void (**)(char *, uint64_t))(v6 + 8);
  v15(v11, a4);
  *(double *)&v17[1] = a2;
  sub_1B080A43C();
  sub_1B0869C98();
  sub_1B086A1E8();
  v15(v8, a4);
  sub_1B086A6D8();
  v15(v11, a4);
  return ((uint64_t (*)(char *, uint64_t))v15)(v14, a4);
}

unint64_t sub_1B080A43C()
{
  unint64_t result = qword_1E9B3B638;
  if (!qword_1E9B3B638)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3B638);
  }
  return result;
}

void sub_1B080A490(float *a1@<X0>, float *a2@<X1>, float *a3@<X8>, double a4@<D0>)
{
  *a3 = sub_1B080A224(*a1, *a2, a4);
}

void sub_1B080A4C4(double *a1@<X0>, double *a2@<X1>, double *a3@<X8>, double a4@<D0>)
{
  *a3 = sub_1B080A20C(*a1, *a2, a4);
}

double sub_1B080A4F8@<D0>(double *a1@<X0>, double *a2@<X1>, double *a3@<X8>, double a4@<D0>)
{
  double v5 = *a2;
  double v6 = (1.0 - a4) * *a1;
  double result = v6 + v5 * nullsub_1();
  *a3 = result;
  return result;
}

id sub_1B080A590()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR___JULanguageAwareTextStorage_textStorage);
  swift_beginAccess();
  uint64_t v2 = *v1;

  return v2;
}

void sub_1B080A648(void **a1, void *a2)
{
  uint64_t v2 = *a1;
  float v3 = (void **)(*a2 + OBJC_IVAR___JULanguageAwareTextStorage_textStorage);
  swift_beginAccess();
  float v4 = *v3;
  void *v3 = v2;
  id v5 = v2;
}

id LanguageAwareTextStorage.__allocating_init(_:)(void *a1)
{
  uint64_t v2 = v1;
  float v4 = (char *)objc_allocWithZone(v2);
  *(void *)&v4[OBJC_IVAR___JULanguageAwareTextStorage_textStorage] = a1;
  id v5 = v4;
  id v6 = a1;
  id v7 = objc_msgSend(v6, sel_delegate);
  *(void *)&v5[OBJC_IVAR___JULanguageAwareTextStorage_originalTextStorageDelegate] = v7;
  swift_beginAccess();
  int v8 = byte_1E9B3BBE1;
  objc_allocWithZone((Class)type metadata accessor for LanguageAwareString());
  id v9 = v6;
  id v10 = sub_1B08542D0(v9, v8);

  *(void *)&v5[OBJC_IVAR___JULanguageAwareTextStorage_languageAwareString] = v10;
  v13.receiver = v5;
  v13.super_class = v2;
  id v11 = objc_msgSendSuper2(&v13, sel_init);
  objc_msgSend(v9, sel_setDelegate_, v11);

  return v11;
}

id LanguageAwareTextStorage.init(_:)(void *a1)
{
  uint64_t v2 = a1;
  *(void *)&v1[OBJC_IVAR___JULanguageAwareTextStorage_textStorage] = a1;
  float v3 = v1;
  id v4 = v2;
  id v5 = objc_msgSend(v4, sel_delegate);
  *(void *)&v3[OBJC_IVAR___JULanguageAwareTextStorage_originalTextStorageDelegate] = v5;
  swift_beginAccess();
  LODWORD(v2) = byte_1E9B3BBE1;
  objc_allocWithZone((Class)type metadata accessor for LanguageAwareString());
  id v6 = v4;
  id v7 = sub_1B08542D0(v6, (int)v2);

  *(void *)&v3[OBJC_IVAR___JULanguageAwareTextStorage_languageAwareString] = v7;
  v10.receiver = v3;
  v10.super_class = (Class)type metadata accessor for LanguageAwareTextStorage();
  id v8 = objc_msgSendSuper2(&v10, sel_init);
  objc_msgSend(v6, sel_setDelegate_, v8);

  return v8;
}

id sub_1B080A8FC(id result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v6 = *(void **)(v5 + OBJC_IVAR___JULanguageAwareTextStorage_originalTextStorageDelegate);
  if (v6)
  {
    id v11 = result;
    double result = objc_msgSend(v6, sel_respondsToSelector_, sel_textStorage_willProcessEditing_range_changeInLength_);
    if (result)
    {
      return objc_msgSend(v6, sel_textStorage_willProcessEditing_range_changeInLength_, v11, a2, a3, a4, a5);
    }
  }
  return result;
}

void sub_1B080AA6C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v10 = a2;
  if ((a2 & 2) != 0)
  {
    swift_beginAccess();
    int v12 = byte_1E9B3BBE1;
    objc_allocWithZone((Class)type metadata accessor for LanguageAwareString());
    id v13 = a1;
    id v14 = sub_1B08542D0(v13, v12);

    double v15 = *(void **)(v6 + OBJC_IVAR___JULanguageAwareTextStorage_languageAwareString);
    *(void *)(v6 + OBJC_IVAR___JULanguageAwareTextStorage_languageAwareString) = v14;

    v10 |= 1uLL;
  }
  uint64_t v16 = *(void **)(v6 + OBJC_IVAR___JULanguageAwareTextStorage_originalTextStorageDelegate);
  if (v16)
  {
    if (objc_msgSend(v16, sel_respondsToSelector_, sel_textStorage_didProcessEditing_range_changeInLength_))objc_msgSend(v16, sel_textStorage_didProcessEditing_range_changeInLength_, a1, v10, a3, a4, a5); {
  }
    }
}

id sub_1B080AC0C()
{
  return objc_retain(*(id *)(*(void *)(v0 + OBJC_IVAR___JULanguageAwareTextStorage_languageAwareString)
                           + OBJC_IVAR___JULanguageAwareString_knownBaseWritingDirections));
}

uint64_t sub_1B080AC44(uint64_t a1, void *a2, void *a3, char a4, double a5)
{
  id v11 = *(id *)(v5 + OBJC_IVAR___JULanguageAwareTextStorage_languageAwareString);
  sub_1B0853530(a1, a2, a3, a4, a5);
  uint64_t v13 = v12;

  return v13;
}

id LanguageAwareTextStorage.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void LanguageAwareTextStorage.init()()
{
}

id LanguageAwareTextStorage.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for LanguageAwareTextStorage();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for LanguageAwareTextStorage()
{
  return self;
}

id sub_1B080AE9C@<X0>(void *a1@<X0>, void **a2@<X8>)
{
  float v3 = (void **)(*a1 + OBJC_IVAR___JULanguageAwareTextStorage_textStorage);
  swift_beginAccess();
  id v4 = *v3;
  *a2 = *v3;

  return v4;
}

uint64_t method lookup function for LanguageAwareTextStorage(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for LanguageAwareTextStorage);
}

uint64_t dispatch thunk of LanguageAwareTextStorage.textStorage.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x68))();
}

uint64_t dispatch thunk of LanguageAwareTextStorage.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t dispatch thunk of LanguageAwareTextStorage.textStorage(_:willProcessEditing:range:changeInLength:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of LanguageAwareTextStorage.textStorage(_:didProcessEditing:range:changeInLength:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of LanguageAwareTextStorage.writingDirectionsQuantities()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of LanguageAwareTextStorage.writingDirectionOfLine(_:maximumLinesShown:withWidth:lineBreakMode:cacheLayoutInfo:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB8))();
}

uint64_t sub_1B080B034(void *a1)
{
  uint64_t result = (uint64_t)objc_msgSend(v1, sel_length);
  uint64_t v4 = result;
  if (result >= 1)
  {
    uint64_t v5 = 0;
    while (1)
    {
      uint64_t result = (uint64_t)objc_msgSend(a1, sel_characterIsMember_, objc_msgSend(v1, sel_characterAtIndex_, v5));
      if ((result & 1) == 0) {
        break;
      }
      if (v4 == ++v5) {
        goto LABEL_17;
      }
    }
    if (v4 == v5) {
      goto LABEL_17;
    }
LABEL_9:
    uint64_t v6 = v4 - 1;
    if (__OFSUB__(v4, 1))
    {
LABEL_21:
      __break(1u);
    }
    else
    {
      while (v6 >= v5)
      {
        uint64_t result = (uint64_t)objc_msgSend(a1, sel_characterIsMember_, objc_msgSend(v1, sel_characterAtIndex_, v6));
        if (!result) {
          break;
        }
        if (__OFSUB__(v6--, 1))
        {
          __break(1u);
          goto LABEL_21;
        }
      }
      uint64_t v8 = v4 - v6;
      if (!__OFSUB__(v4, v6))
      {
        if (!__OFSUB__(v8, 1))
        {
          objc_msgSend(v1, sel_deleteCharactersInRange_, v6 + 1, v8 - 1);
          uint64_t v4 = v5;
          goto LABEL_17;
        }
LABEL_23:
        __break(1u);
        return result;
      }
    }
    __break(1u);
    goto LABEL_23;
  }
  if (result)
  {
    uint64_t v5 = 0;
    goto LABEL_9;
  }
LABEL_17:

  return (uint64_t)objc_msgSend(v1, sel_deleteCharactersInRange_, 0, v4);
}

id sub_1B080B180(void *a1)
{
  uint64_t v3 = (uint64_t)objc_msgSend(v1, sel_length);
  uint64_t v4 = v3;
  if (v3 < 1)
  {
    if (!v3) {
      goto LABEL_10;
    }
    uint64_t v5 = 0;
    goto LABEL_9;
  }
  uint64_t v5 = 0;
  while ((objc_msgSend(a1, sel_characterIsMember_, objc_msgSend(v1, sel_characterAtIndex_, v5)) & 1) != 0)
  {
    if (v4 == ++v5) {
      goto LABEL_10;
    }
  }
  if (v4 != v5) {
LABEL_9:
  }
    uint64_t v4 = v5;
LABEL_10:

  return objc_msgSend(v1, sel_deleteCharactersInRange_, 0, v4);
}

uint64_t dispatch thunk of MetricsConfigurable.metrics.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t sub_1B080B25C(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24))
  {
    sub_1B07BFE44((_OWORD *)a1, v9);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *v2;
    *objc_super v2 = 0x8000000000000000;
    sub_1B07CA758(v9, a2, isUniquelyReferenced_nonNull_native);
    *objc_super v2 = v8;
    swift_bridgeObjectRelease();
    uint64_t v5 = sub_1B08698A8();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a2, v5);
  }
  else
  {
    sub_1B07BBE14(a1, (uint64_t *)&unk_1EB5962E0);
    sub_1B07D84B8(a2, v9);
    uint64_t v7 = sub_1B08698A8();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(a2, v7);
    return sub_1B07BBE14((uint64_t)v9, (uint64_t *)&unk_1EB5962E0);
  }
}

uint64_t sub_1B080B37C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 24))
  {
    sub_1B07BA8FC((long long *)a1, (uint64_t)v9);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    sub_1B07CAA9C(v9, a2, a3, isUniquelyReferenced_nonNull_native);
    uint64_t *v3 = v8;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_1B07BBE14(a1, &qword_1E9B3B680);
    sub_1B07D85E4(a2, a3, (uint64_t)v9);
    swift_bridgeObjectRelease();
    return sub_1B07BBE14((uint64_t)v9, &qword_1E9B3B680);
  }
}

uint64_t sub_1B080B454(uint64_t a1)
{
  unint64_t v2 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v3 = sub_1B086A4B8();
    uint64_t v5 = v4;
    uint64_t v6 = sub_1B086A528();
    char v8 = MEMORY[0x1B3E97E00](v3, v5, v6, v7);
    swift_bridgeObjectRelease();
    if (v8)
    {
LABEL_3:
      sub_1B080D6C8(v3, v5, v2 != 0);
      return 0;
    }
LABEL_7:
    sub_1B080C5D4(v3, v5, v2 != 0, a1);
    uint64_t v9 = v13;
    sub_1B080D6C8(v3, v5, v2 != 0);
    return v9;
  }
  uint64_t result = sub_1B080C82C(a1);
  if ((v12 & 1) == 0)
  {
    uint64_t v5 = v11;
    if (*(_DWORD *)(a1 + 36) == v11)
    {
      uint64_t v3 = result;
      if (result == 1 << *(unsigned char *)(a1 + 32)) {
        goto LABEL_3;
      }
      goto LABEL_7;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

BOOL static DSPackageDataKind.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t DSPackageDataKind.hash(into:)()
{
  return sub_1B086A968();
}

BOOL static DSTriggerMode.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t DSTriggerMode.hash(into:)()
{
  return sub_1B086A968();
}

uint64_t DSTriggerMode.hashValue.getter()
{
  return sub_1B086A998();
}

uint64_t PostCollectionAction.execute(_:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  if (*v1)
  {
    swift_retain();
    char v4 = v3(a1);
    sub_1B07BDB64((uint64_t)v3);
    return v4 & 1;
  }
  id v6 = objc_msgSend(self, sel_sharedApplication);
  id v7 = objc_msgSend(v6, sel_connectedScenes);

  sub_1B07D7A28();
  sub_1B07C7B10();
  uint64_t v8 = sub_1B086A158();

  uint64_t v9 = (void *)sub_1B080B454(v8);
  swift_bridgeObjectRelease();
  if (v9)
  {
    self;
    uint64_t v10 = (void *)swift_dynamicCastObjCClass();
    if (v10)
    {
      id v11 = objc_msgSend(v10, sel_keyWindow);
      if (v11)
      {
        char v12 = v11;
        __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3B658);
        uint64_t v13 = swift_allocObject();
        *(_OWORD *)(v13 + 16) = xmmword_1B086C130;
        uint64_t v14 = sub_1B08690F8();
        *(void *)(v13 + 56) = v14;
        boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v13 + 32));
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(boxed_opaque_existential_0, a1, v14);
        id v16 = objc_allocWithZone(MEMORY[0x1E4F42718]);
        uint64_t v17 = (void *)sub_1B0869F78();
        swift_bridgeObjectRelease();
        id v18 = objc_msgSend(v16, sel_initWithActivityItems_applicationActivities_, v17, 0);

        id v19 = objc_msgSend(v12, sel_rootViewController);
        if (v19)
        {
          double v20 = v19;
          uint64_t v21 = 1;
          objc_msgSend(v19, sel_presentViewController_animated_completion_, v18, 1, 0);
        }
        else
        {

          return 1;
        }
        return v21;
      }
    }
  }
  return 0;
}

BOOL DSCore.register(infoProvider:)(void *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[4];
  char v4 = __swift_project_boxed_opaque_existential_1(a1, v2);

  return sub_1B080CAFC((uint64_t)v4, v1, v2, v3);
}

Swift::Bool __swiftcall DSCore.trigger()()
{
  uint64_t v1 = v0;
  uint64_t v2 = 0;
  uint64_t v3 = sub_1B0869688();
  MEMORY[0x1F4188790](v3 - 8);
  int v75 = (char *)&v70 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v78 = sub_1B0869C18();
  uint64_t v77 = *(void *)(v78 - 8);
  MEMORY[0x1F4188790](v78);
  uint64_t v76 = (char *)&v70 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = sub_1B08690F8();
  uint64_t v72 = *(void *)(v73 - 8);
  MEMORY[0x1F4188790](v73);
  int v74 = (char *)&v70 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v71 = (char *)&v70 - v8;
  uint64_t v9 = v0 + 7;
  uint64_t v10 = v0[10];
  uint64_t v11 = v0[11];
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v0 + 7), v10);
  (*(void (**)(uint64_t, uint64_t))(v11 + 24))(v10, v11);
  uint64_t v12 = v0[10];
  uint64_t v13 = v0[11];
  __swift_project_boxed_opaque_existential_1(v0 + 7, v12);
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 16))(v12, v13);
  double v15 = *(void **)(v14 + 16);
  if (v15)
  {
    uint64_t v83 = 0;
    id v16 = 0;
    uint64_t v84 = v0 + 2;
    uint64_t v82 = (uint64_t *)v14;
    uint64_t v17 = (unint64_t *)(v14 + 40);
    uint64_t v85 = v15;
    do
    {
      uint64_t v18 = *(v17 - 1);
      unint64_t v19 = *v17;
      double v20 = (void *)((char *)v16 + 1);
      char v94 = 1;
      *(void *)&long long v92 = 0;
      *((void *)&v92 + 1) = 0xE000000000000000;
      sub_1B07CBEE8(v18, v19);
      sub_1B086A5E8();
      swift_bridgeObjectRelease();
      *(void *)&long long v92 = 0x68736E6565726373;
      *((void *)&v92 + 1) = 0xEB000000005B746FLL;
      v88[0] = v16;
      sub_1B086A848();
      sub_1B0869E68();
      swift_bridgeObjectRelease();
      sub_1B0869E68();
      uint64_t v21 = v1[10];
      uint64_t v22 = v1[11];
      __swift_project_boxed_opaque_existential_1(v9, v21);
      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v22);
      sub_1B0869E68();
      swift_bridgeObjectRelease();
      uint64_t v24 = *((void *)&v92 + 1);
      uint64_t v23 = v92;
      uint64_t v25 = v1[5];
      uint64_t v26 = v1[6];
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v84, v25);
      (*(void (**)(uint64_t, unint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 16))(v18, v19, &v94, v23, v24, v25, v26);
      sub_1B07CBE90(v18, v19);
      swift_bridgeObjectRelease();
      v17 += 2;
      id v16 = v20;
    }
    while (v85 != v20);
    swift_bridgeObjectRelease();
    uint64_t v2 = v83;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v27 = v1[1];
  uint64_t v28 = *(void *)(v27 + 64);
  uint64_t v79 = v27 + 64;
  uint64_t v29 = 1 << *(unsigned char *)(v27 + 32);
  uint64_t v30 = -1;
  if (v29 < 64) {
    uint64_t v30 = ~(-1 << v29);
  }
  unint64_t v31 = v30 & v28;
  int64_t v80 = (unint64_t)(v29 + 63) >> 6;
  uint64_t v83 = v93;
  uint64_t v82 = &v89;
  uint64_t v85 = v1;
  int v81 = v1 + 2;
  uint64_t v84 = (void *)v27;
  swift_bridgeObjectRetain();
  int64_t v32 = 0;
  if (!v31) {
    goto LABEL_10;
  }
LABEL_9:
  unint64_t v33 = __clz(__rbit64(v31));
  v31 &= v31 - 1;
  for (unint64_t i = v33 | (v32 << 6); ; unint64_t i = __clz(__rbit64(v36)) + (v32 << 6))
  {
    uint64_t v39 = v84[7];
    uint64_t v40 = (void *)(v84[6] + 16 * i);
    uint64_t v41 = v40[1];
    *(void *)&long long v92 = *v40;
    uint64_t v42 = v92;
    *((void *)&v92 + 1) = v41;
    uint64_t v43 = (uint64_t)v83;
    sub_1B07BBD78(v39 + 40 * i, (uint64_t)v83);
    v88[0] = v42;
    v88[1] = v41;
    uint64_t v44 = (long long *)v43;
    uint64_t v45 = v82;
    sub_1B07BA8FC(v44, (uint64_t)v82);
    uint64_t v46 = v90;
    uint64_t v47 = v91;
    __swift_project_boxed_opaque_existential_1(v45, v90);
    int v48 = *(uint64_t (**)(uint64_t, uint64_t))(v47 + 16);
    swift_bridgeObjectRetain_n();
    uint64_t v49 = v48(v46, v47);
    if (v2)
    {
      swift_bridgeObjectRelease();
      swift_release();
      sub_1B07BBE14((uint64_t)v88, &qword_1E9B3B660);
      goto LABEL_31;
    }
    uint64_t v51 = v49;
    unint64_t v52 = v50;
    char v94 = 0;
    uint64_t v54 = v85[5];
    uint64_t v53 = v85[6];
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v81, v54);
    (*(void (**)(uint64_t, unint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))(v53 + 16))(v51, v52, &v94, v42, v41, v54, v53);
    sub_1B07CBE90(v51, v52);
    swift_bridgeObjectRelease();
    sub_1B07BBE14((uint64_t)v88, &qword_1E9B3B660);
    if (v31) {
      goto LABEL_9;
    }
LABEL_10:
    if (__OFADD__(v32++, 1))
    {
      __break(1u);
      goto LABEL_36;
    }
    if (v32 >= v80) {
      break;
    }
    unint64_t v36 = *(void *)(v79 + 8 * v32);
    char v37 = v85;
    if (!v36)
    {
      int64_t v38 = v32 + 1;
      if (v32 + 1 >= v80) {
        goto LABEL_30;
      }
      unint64_t v36 = *(void *)(v79 + 8 * v38);
      if (!v36)
      {
        int64_t v38 = v32 + 2;
        if (v32 + 2 >= v80) {
          goto LABEL_30;
        }
        unint64_t v36 = *(void *)(v79 + 8 * v38);
        if (!v36)
        {
          int64_t v38 = v32 + 3;
          if (v32 + 3 >= v80) {
            goto LABEL_30;
          }
          unint64_t v36 = *(void *)(v79 + 8 * v38);
          if (!v36)
          {
            while (1)
            {
              int64_t v32 = v38 + 1;
              if (__OFADD__(v38, 1)) {
                break;
              }
              if (v32 >= v80) {
                goto LABEL_30;
              }
              unint64_t v36 = *(void *)(v79 + 8 * v32);
              ++v38;
              if (v36) {
                goto LABEL_20;
              }
            }
LABEL_36:
            __break(1u);
LABEL_37:
            swift_once();
LABEL_32:
            uint64_t v58 = v78;
            uint64_t v59 = __swift_project_value_buffer(v78, (uint64_t)qword_1E9B46108);
            uint64_t v60 = v77;
            id v61 = v76;
            (*(void (**)(char *, uint64_t, uint64_t))(v77 + 16))(v76, v59, v58);
            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E9B3AA70);
            sub_1B08696C8();
            *(_OWORD *)(swift_allocObject() + 16) = xmmword_1B086C130;
            sub_1B0869678();
            sub_1B0869668();
            swift_getErrorValue();
            uint64_t v63 = v86;
            uint64_t v62 = v87;
            v93[1] = v87;
            boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v92);
            (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v62 - 8) + 16))(boxed_opaque_existential_0, v63, v62);
            sub_1B0869638();
            sub_1B07BBE14((uint64_t)&v92, (uint64_t *)&unk_1EB5962E0);
            sub_1B0869668();
            sub_1B0869698();
            sub_1B0869AD8();
            swift_bridgeObjectRelease();

            (*(void (**)(char *, uint64_t))(v60 + 8))(v61, v58);
            char v65 = 0;
            return v65 & 1;
          }
        }
      }
      int64_t v32 = v38;
    }
LABEL_20:
    unint64_t v31 = (v36 - 1) & v36;
  }
  char v37 = v85;
LABEL_30:
  id v55 = v74;
  swift_release();
  uint64_t v56 = v37[5];
  uint64_t v57 = v37[6];
  __swift_project_boxed_opaque_existential_1(v81, v56);
  (*(void (**)(uint64_t, uint64_t))(v57 + 24))(v56, v57);
  if (v2)
  {
LABEL_31:
    if (qword_1E9B3A6A0 != -1) {
      goto LABEL_37;
    }
    goto LABEL_32;
  }
  uint64_t v67 = v72;
  uint64_t v68 = (uint64_t)v71;
  uint64_t v69 = v73;
  (*(void (**)(char *, char *, uint64_t))(v72 + 32))(v71, v55, v73);
  long long v92 = *((_OWORD *)v37 + 6);
  char v65 = PostCollectionAction.execute(_:)(v68);
  (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v68, v69);
  return v65 & 1;
}

uint64_t static DSCore.deepshot(in:using:)@<X0>(unsigned char *a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  char v4 = *a2;
  if (*a1)
  {
    char v14 = *a2;
    return sub_1B080C3F0(&v14, a3);
  }
  else
  {
    *(void *)(a3 + 88) = &off_1F094EB78;
    uint64_t v6 = MEMORY[0x1E4FBC860];
    *(void *)(a3 + 56) = MEMORY[0x1E4FBC860];
    *(void *)(a3 + 64) = 6778480;
    *(void *)(a3 + 72) = 0xE300000000000000;
    *(void *)(a3 + 80) = &type metadata for DSScreenshotCapturer;
    unint64_t v7 = sub_1B07D5D38(v6);
    id v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1818]), sel_init);
    *(void *)(a3 + 40) = &type metadata for DSPNGPackager;
    *(void *)(a3 + 48) = &off_1F094CA90;
    uint64_t v9 = (void *)swift_allocObject();
    long long v9[2] = 0x616B636150474E50;
    _OWORD v9[3] = 0xEB00000000726567;
    uint64_t v10 = MEMORY[0x1E4FBC868];
    _OWORD v9[4] = v7;
    void v9[5] = v8;
    *(void *)(a3 + 8) = v10;
    *(void *)(a3 + 16) = v9;
    *(unsigned char *)a3 = v4;
    *(void *)(a3 + 96) = 0;
    *(void *)(a3 + 104) = 0;
    sub_1B080C8B4(0xD000000000000022, 0x80000001B08751C0, a3);
    if (qword_1E9B3A670 != -1) {
      swift_once();
    }
    uint64_t v11 = qword_1E9B3B190;
    uint64_t v12 = *(void *)algn_1E9B3B198;
    uint64_t v13 = qword_1E9B3B1A0;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1B080C9C4(v11, v12, v13, a3);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_1B080C3F0@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  char v3 = *a1;
  *(void *)(a2 + 88) = &off_1F094EB78;
  uint64_t v4 = MEMORY[0x1E4FBC860];
  *(void *)(a2 + 56) = MEMORY[0x1E4FBC860];
  *(void *)(a2 + 64) = 6778480;
  *(void *)(a2 + 72) = 0xE300000000000000;
  *(void *)(a2 + 80) = &type metadata for DSScreenshotCapturer;
  uint64_t v5 = (int *)type metadata accessor for DSZipPackager();
  *(void *)(a2 + 40) = v5;
  *(void *)(a2 + 48) = &off_1F094CBD0;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)(a2 + 16));
  id v7 = objc_msgSend(self, sel_defaultManager);
  id v8 = objc_msgSend(v7, sel_temporaryDirectory);

  sub_1B08690C8();
  uint64_t v9 = v5[5];
  *(uint64_t *)((char *)boxed_opaque_existential_0 + v9) = sub_1B07D61D4(v4);
  uint64_t v10 = v5[6];
  *(uint64_t *)((char *)boxed_opaque_existential_0 + v10) = sub_1B07D61D4(v4);
  uint64_t v11 = (char *)boxed_opaque_existential_0 + v5[7];
  strcpy(v11, "DSZipPackager");
  *((_WORD *)v11 + 7) = -4864;
  *(void *)(a2 + 8) = MEMORY[0x1E4FBC868];
  *(unsigned char *)a2 = v3;
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  sub_1B080C8B4(0xD000000000000022, 0x80000001B08751C0, a2);
  if (qword_1E9B3A670 != -1) {
    swift_once();
  }
  uint64_t v12 = qword_1E9B3B190;
  uint64_t v13 = *(void *)algn_1E9B3B198;
  uint64_t v14 = qword_1E9B3B1A0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1B080C9C4(v12, v13, v14, a2);
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void sub_1B080C5D4(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  unint64_t v6 = a1;
  if ((a4 & 0xC000000000000001) != 0)
  {
    if (a3)
    {
      if (a4 < 0) {
        uint64_t v7 = a4;
      }
      else {
        uint64_t v7 = a4 & 0xFFFFFFFFFFFFFF8;
      }
      MEMORY[0x1B3E97E30](a1, a2, v7);
      sub_1B07D7A28();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      swift_unknownObjectRelease();
      return;
    }
LABEL_27:
    __break(1u);
    return;
  }
  if (a3) {
    goto LABEL_13;
  }
  if (a1 < 0 || 1 << *(unsigned char *)(a4 + 32) <= a1)
  {
    __break(1u);
    goto LABEL_24;
  }
  if (((*(void *)(a4 + 8 * ((unint64_t)a1 >> 6) + 56) >> a1) & 1) == 0)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (*(_DWORD *)(a4 + 36) == a2) {
    goto LABEL_20;
  }
  __break(1u);
LABEL_13:
  if (sub_1B086A4E8() != *(_DWORD *)(a4 + 36))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  sub_1B086A4F8();
  sub_1B07D7A28();
  swift_unknownObjectRetain();
  swift_dynamicCast();
  uint64_t v4 = v17;
  swift_unknownObjectRelease();
  uint64_t v8 = sub_1B086A378();
  uint64_t v9 = -1 << *(unsigned char *)(a4 + 32);
  unint64_t v6 = v8 & ~v9;
  if (((*(void *)(a4 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
  {
LABEL_26:

    __break(1u);
    goto LABEL_27;
  }
  id v10 = *(id *)(*(void *)(a4 + 48) + 8 * v6);
  char v11 = sub_1B086A388();

  if ((v11 & 1) == 0)
  {
    uint64_t v12 = ~v9;
    do
    {
      unint64_t v6 = (v6 + 1) & v12;
      if (((*(void *)(a4 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
        goto LABEL_26;
      }
      id v13 = *(id *)(*(void *)(a4 + 48) + 8 * v6);
      char v14 = sub_1B086A388();
    }
    while ((v14 & 1) == 0);
  }

LABEL_20:
  double v15 = *(void **)(*(void *)(a4 + 48) + 8 * v6);

  id v16 = v15;
}

uint64_t sub_1B080C82C(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2;
  }
  unint64_t v8 = v7 - 2;
  uint64_t v9 = (unint64_t *)(a1 + 72);
  uint64_t v2 = 64;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t sub_1B080C8B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v17 = &type metadata for DSAccessibilityDiagnosticCollector;
  uint64_t v18 = &protocol witness table for DSAccessibilityDiagnosticCollector;
  uint64_t v15 = a1;
  uint64_t v16 = a2;
  uint64_t v4 = *(void *)(a3 + 8);
  if (!*(void *)(v4 + 16))
  {
    uint64_t v14 = 0;
    long long v12 = 0u;
    long long v13 = 0u;
    swift_bridgeObjectRetain();
LABEL_6:
    sub_1B07BBE14((uint64_t)&v12, &qword_1E9B3B680);
    uint64_t v9 = v15;
    uint64_t v10 = v16;
    sub_1B07BBD78((uint64_t)&v15, (uint64_t)&v12);
    swift_bridgeObjectRetain();
    sub_1B080B37C((uint64_t)&v12, v9, v10);
    uint64_t v8 = 1;
    goto LABEL_7;
  }
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_1B07E4728(a1, a2);
  if ((v7 & 1) == 0)
  {
    uint64_t v14 = 0;
    long long v12 = 0u;
    long long v13 = 0u;
    goto LABEL_6;
  }
  sub_1B07BBD78(*(void *)(v4 + 56) + 40 * v6, (uint64_t)&v12);
  sub_1B07BBE14((uint64_t)&v12, &qword_1E9B3B680);
  uint64_t v8 = 0;
LABEL_7:
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v15);
  return v8;
}

uint64_t sub_1B080C9C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v19 = &type metadata for DSLocalizationDiagnosticsCollector;
  double v20 = &protocol witness table for DSLocalizationDiagnosticsCollector;
  uint64_t v16 = a1;
  uint64_t v17 = a2;
  uint64_t v18 = a3;
  uint64_t v5 = *(void *)(a4 + 8);
  if (!*(void *)(v5 + 16))
  {
    uint64_t v15 = 0;
    long long v13 = 0u;
    long long v14 = 0u;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_7;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  unint64_t v7 = sub_1B07E4728(a2, a3);
  if ((v8 & 1) == 0)
  {
    uint64_t v15 = 0;
    long long v13 = 0u;
    long long v14 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  sub_1B07BBD78(*(void *)(v5 + 56) + 40 * v7, (uint64_t)&v13);
  swift_bridgeObjectRelease();
  if (!*((void *)&v14 + 1))
  {
LABEL_7:
    sub_1B07BBE14((uint64_t)&v13, &qword_1E9B3B680);
    uint64_t v10 = v17;
    uint64_t v11 = v18;
    sub_1B07BBD78((uint64_t)&v16, (uint64_t)&v13);
    swift_bridgeObjectRetain();
    sub_1B080B37C((uint64_t)&v13, v10, v11);
    uint64_t v9 = 1;
    goto LABEL_8;
  }
  sub_1B07BBE14((uint64_t)&v13, &qword_1E9B3B680);
  uint64_t v9 = 0;
LABEL_8:
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v16);
  return v9;
}

BOOL sub_1B080CAFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v23[3] = a3;
  v23[4] = a4;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v23);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))(boxed_opaque_existential_0, a1, a3);
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 8);
  uint64_t v10 = v9(a3, a4);
  uint64_t v12 = *(void *)(a2 + 8);
  if (*(void *)(v12 + 16) && (unint64_t v13 = sub_1B07E4728(v10, v11), (v14 & 1) != 0))
  {
    sub_1B07BBD78(*(void *)(v12 + 56) + 40 * v13, (uint64_t)&v20);
  }
  else
  {
    uint64_t v22 = 0;
    long long v20 = 0u;
    long long v21 = 0u;
  }
  swift_bridgeObjectRelease();
  uint64_t v15 = *((void *)&v21 + 1);
  sub_1B07BBE14((uint64_t)&v20, &qword_1E9B3B680);
  if (!v15)
  {
    uint64_t v16 = v9(a3, a4);
    uint64_t v18 = v17;
    sub_1B07BBD78((uint64_t)v23, (uint64_t)&v20);
    sub_1B080B37C((uint64_t)&v20, v16, v18);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  return v15 == 0;
}

uint64_t sub_1B080CC5C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 48, 7);
}

unint64_t sub_1B080CCA8()
{
  unint64_t result = qword_1E9B3B668;
  if (!qword_1E9B3B668)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3B668);
  }
  return result;
}

unint64_t sub_1B080CD00()
{
  unint64_t result = qword_1E9B3B670;
  if (!qword_1E9B3B670)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3B670);
  }
  return result;
}

unint64_t sub_1B080CD58()
{
  unint64_t result = qword_1E9B3B678;
  if (!qword_1E9B3B678)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3B678);
  }
  return result;
}

uint64_t dispatch thunk of DSDiagnosticsCollector.name.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of DSDiagnosticsCollector.getDiagnosticInfo()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

ValueMetadata *type metadata accessor for DSPackageDataKind()
{
  return &type metadata for DSPackageDataKind;
}

uint64_t dispatch thunk of DSPackager.name.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of DSPackager.add(_:of:withName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 16))();
}

uint64_t dispatch thunk of DSPackager.createPackage()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of DSPackager.clear()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of DSScreenCapturer.fileExtension.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of DSScreenCapturer.screenCaptures.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of DSScreenCapturer.capture()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

unsigned char *storeEnumTagSinglePayload for DSTriggerMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B080CF6CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DSTriggerMode()
{
  return &type metadata for DSTriggerMode;
}

void *destroy for PostCollectionAction(void *result)
{
  if (*result >= 0xFFFFFFFFuLL) {
    return (void *)swift_release();
  }
  return result;
}

uint64_t _s5JetUI20PostCollectionActionOwCP_0(uint64_t a1, uint64_t a2)
{
  if (*(void *)a2 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    swift_retain();
  }
  return a1;
}

unint64_t *assignWithCopy for PostCollectionAction(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4 = *a2;
  if (*a1 < 0xFFFFFFFF)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      unint64_t v6 = a2[1];
      *a1 = v4;
      a1[1] = v6;
      swift_retain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_7;
  }
  unint64_t v5 = a2[1];
  *a1 = v4;
  a1[1] = v5;
  swift_retain();
  swift_release();
  return a1;
}

unint64_t *assignWithTake for PostCollectionAction(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4 = *a2;
  if (*a1 < 0xFFFFFFFF)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      unint64_t v6 = a2[1];
      *a1 = v4;
      a1[1] = v6;
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_7;
  }
  unint64_t v5 = a2[1];
  *a1 = v4;
  a1[1] = v5;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for PostCollectionAction(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 16)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for PostCollectionAction(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)unint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2;
    }
  }
  return result;
}

uint64_t sub_1B080D1C8(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *sub_1B080D1E0(void *result, int a2)
{
  if (a2 < 0)
  {
    uint64_t v2 = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else
  {
    if (!a2) {
      return result;
    }
    uint64_t v2 = (a2 - 1);
  }
  *unint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for PostCollectionAction()
{
  return &type metadata for PostCollectionAction;
}

uint64_t destroy for DSCore(uint64_t a1)
{
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 16);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1(a1 + 56);
  if (*(void *)(a1 + 96))
  {
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for DSCore(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v4 = a2 + 16;
  long long v5 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 40) = v5;
  uint64_t v6 = v5;
  unint64_t v7 = **(void (***)(uint64_t, uint64_t, uint64_t))(v5 - 8);
  swift_bridgeObjectRetain();
  v7(a1 + 16, v4, v6);
  long long v8 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 80) = v8;
  (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1 + 56, a2 + 56);
  uint64_t v9 = *(void *)(a2 + 96);
  if (v9)
  {
    uint64_t v10 = *(void *)(a2 + 104);
    *(void *)(a1 + 96) = v9;
    *(void *)(a1 + 104) = v10;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  }
  return a1;
}

uint64_t assignWithCopy for DSCore(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 16), (uint64_t *)(a2 + 16));
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 56), (uint64_t *)(a2 + 56));
  uint64_t v4 = *(void *)(a2 + 96);
  if (!*(void *)(a1 + 96))
  {
    if (v4)
    {
      uint64_t v6 = *(void *)(a2 + 104);
      *(void *)(a1 + 96) = v4;
      *(void *)(a1 + 104) = v6;
      swift_retain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    return a1;
  }
  if (!v4)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v5 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = v4;
  *(void *)(a1 + 104) = v5;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for DSCore(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  __swift_destroy_boxed_opaque_existential_1(a1 + 56);
  uint64_t v5 = *(void *)(a2 + 96);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  uint64_t v6 = *(void *)(a1 + 96);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  if (!v6)
  {
    if (v5)
    {
      uint64_t v8 = *(void *)(a2 + 104);
      *(void *)(a1 + 96) = v5;
      *(void *)(a1 + 104) = v8;
      return a1;
    }
LABEL_7:
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    return a1;
  }
  if (!v5)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v7 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = v5;
  *(void *)(a1 + 104) = v7;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for DSCore(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 112)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DSCore(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 112) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 112) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DSCore()
{
  return &type metadata for DSCore;
}

unsigned char *_s5JetUI17DSPackageDataKindOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B080D690);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DeepshotPackageFormat()
{
  return &type metadata for DeepshotPackageFormat;
}

uint64_t sub_1B080D6C8(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t ZStack.add(_:with:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[5];
  __swift_project_boxed_opaque_existential_1(a1, v5);
  Measurable.placeable.getter(v5, v6, v8);
  ZStack.add(_:with:)((uint64_t)v8, a2, a3);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
}

uint64_t ZStack.adding(_:with:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[5];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  Measurable.placeable.getter(v9, v10, v12);
  sub_1B07E87D4(v5, a4);
  ZStack.add(_:with:)((uint64_t)v12, a2, a3);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
}

uint64_t ZStack.insert(_:at:with:)(void *a1, int64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[5];
  __swift_project_boxed_opaque_existential_1(a1, v7);
  Measurable.placeable.getter(v7, v8, v10);
  ZStack.insert(_:at:with:)((uint64_t)v10, a2, a3, a4);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
}

uint64_t ZStack.inserting(_:at:with:)@<X0>(void *a1@<X0>, int64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = v5;
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[5];
  __swift_project_boxed_opaque_existential_1(a1, v11);
  Measurable.placeable.getter(v11, v12, v14);
  sub_1B07E87D4(v6, a5);
  ZStack.insert(_:at:with:)((uint64_t)v14, a2, a3, a4);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
}

uint64_t ImageAppearance.Scaling.init(rawValue:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t ImageAppearance.Scaling.rawValue.getter()
{
  return *(void *)v0;
}

void static ImageAppearance.Scaling.none.getter(void *a1@<X8>)
{
  *a1 = 4;
}

void static ImageAppearance.Scaling.fill.getter(void *a1@<X8>)
{
  *a1 = 0;
}

void static ImageAppearance.Scaling.aspectFit.getter(void *a1@<X8>)
{
  *a1 = 1;
}

double ImageAppearance.init()@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = xmmword_1B0871040;
  return result;
}

id ImageAppearance.symbolConfiguration.getter()
{
  id v1 = *v0;
  id v2 = *v0;
  return v1;
}

void ImageAppearance.symbolConfiguration.setter(void *a1)
{
  *id v1 = a1;
}

double (*ImageAppearance.symbolConfiguration.modify())(void)
{
  return nullsub_1;
}

id ImageAppearance.withSymbolConfiguration(_:)@<X0>(id a1@<X0>, id *a2@<X8>)
{
  int v3 = *(void **)(v2 + 8);
  *a2 = a1;
  a2[1] = v3;
  return a1;
}

void ImageAppearance.scaling.getter(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 8);
}

void *ImageAppearance.scaling.setter(void *result)
{
  *(void *)(v1 + 8) = *result;
  return result;
}

double (*ImageAppearance.scaling.modify())(void)
{
  return nullsub_1;
}

id ImageAppearance.withScaling(_:)@<X0>(void **a1@<X0>, void **a2@<X8>)
{
  int v3 = *a1;
  uint64_t v4 = *v2;
  *a2 = *v2;
  a2[1] = v3;
  return v4;
}

BOOL _s5JetUI15ImageAppearanceV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  if (*(void *)a1)
  {
    if (v4)
    {
      sub_1B080DC48();
      id v6 = v4;
      id v7 = v2;
      char v8 = sub_1B086A388();

      if (v8) {
        return v3 == v5;
      }
    }
  }
  else if (!v4)
  {
    return v3 == v5;
  }
  return 0;
}

void *initializeBufferWithCopyOfBuffer for ImageAppearance(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  id v5 = v3;
  return a1;
}

uint64_t assignWithCopy for ImageAppearance(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  id v5 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  id v6 = v5;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  return a1;
}

uint64_t assignWithTake for ImageAppearance(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *a2;

  *(void *)(a1 + 8) = a2[1];
  return a1;
}

uint64_t getEnumTagSinglePayload for ImageAppearance(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 16)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ImageAppearance(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)double result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)double result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ImageAppearance()
{
  return &type metadata for ImageAppearance;
}

ValueMetadata *type metadata accessor for ImageAppearance.Scaling()
{
  return &type metadata for ImageAppearance.Scaling;
}

unint64_t sub_1B080DC48()
{
  unint64_t result = qword_1E9B3B688;
  if (!qword_1E9B3B688)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1E9B3B688);
  }
  return result;
}

double AppStore.CenteredThreeLineTextLayout.init(primaryText:secondaryText:secondarySpace:numberOfLines:)@<D0>(long long *a1@<X0>, long long *a2@<X1>, long long *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  sub_1B07BA8FC(a1, (uint64_t)v15);
  sub_1B07BA8FC(a2, (uint64_t)v16 + 8);
  sub_1B07BA8FC(a3, (uint64_t)v17);
  *((void *)&v18 + 1) = a4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB595650);
  uint64_t v9 = (_OWORD *)swift_allocObject();
  long long v10 = v17[0];
  void v9[5] = v16[2];
  v9[6] = v10;
  long long v11 = v18;
  _OWORD v9[7] = v17[1];
  v9[8] = v11;
  long long v12 = v15[1];
  v9[1] = v15[0];
  long long v9[2] = v12;
  double result = *(double *)v16;
  long long v14 = v16[1];
  _OWORD v9[3] = v16[0];
  _OWORD v9[4] = v14;
  *a5 = v9;
  return result;
}

uint64_t AppStore.CenteredThreeLineTextLayout.primaryText.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1 + 16;
  swift_beginAccess();
  return sub_1B07BBD78(v3, a1);
}

uint64_t AppStore.CenteredThreeLineTextLayout.primaryText.setter(uint64_t *a1)
{
  uint64_t v3 = *v1 + 16;
  swift_beginAccess();
  sub_1B080DE78(v3, (uint64_t)v11);
  __swift_assign_boxed_opaque_existential_1((uint64_t *)v11, a1);
  if (swift_isUniquelyReferenced_nonNull_native())
  {
    uint64_t v4 = *v1 + 16;
    swift_beginAccess();
    sub_1B080DEB0((uint64_t)v11, v4);
    swift_endAccess();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EB595650);
    id v5 = (_OWORD *)swift_allocObject();
    long long v6 = v11[5];
    v5[5] = v11[4];
    v5[6] = v6;
    long long v7 = v11[7];
    v5[7] = v11[6];
    v5[8] = v7;
    long long v8 = v11[1];
    v5[1] = v11[0];
    _OWORD v5[2] = v8;
    long long v9 = v11[3];
    void v5[3] = v11[2];
    long long v5[4] = v9;
    swift_release();
    *uint64_t v1 = v5;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1B080DE78(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1B080DEB0(uint64_t a1, uint64_t a2)
{
  return a2;
}

void (*AppStore.CenteredThreeLineTextLayout.primaryText.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x70uLL);
  *a1 = v3;
  v3[13] = v1;
  uint64_t v4 = *v1 + 16;
  swift_beginAccess();
  sub_1B07BBD78(v4, (uint64_t)v3);
  return sub_1B080DF68;
}

void sub_1B080DF68(uint64_t *a1, char a2)
{
}

uint64_t AppStore.CenteredThreeLineTextLayout.secondaryText.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  swift_beginAccess();
  return sub_1B07BBD78(v3 + 56, a1);
}

uint64_t AppStore.CenteredThreeLineTextLayout.secondaryText.setter(uint64_t *a1)
{
  uint64_t v3 = *v1 + 16;
  swift_beginAccess();
  sub_1B080DE78(v3, (uint64_t)v11);
  __swift_assign_boxed_opaque_existential_1((uint64_t *)v12 + 1, a1);
  if (swift_isUniquelyReferenced_nonNull_native())
  {
    uint64_t v4 = *v1 + 16;
    swift_beginAccess();
    sub_1B080DEB0((uint64_t)v11, v4);
    swift_endAccess();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EB595650);
    id v5 = (_OWORD *)swift_allocObject();
    long long v6 = v12[3];
    v5[5] = v12[2];
    v5[6] = v6;
    long long v7 = v12[5];
    v5[7] = v12[4];
    v5[8] = v7;
    long long v8 = v11[1];
    v5[1] = v11[0];
    _OWORD v5[2] = v8;
    long long v9 = v12[1];
    void v5[3] = v12[0];
    long long v5[4] = v9;
    swift_release();
    *uint64_t v1 = v5;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

void (*AppStore.CenteredThreeLineTextLayout.secondaryText.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x70uLL);
  *a1 = v3;
  v3[13] = v1;
  uint64_t v4 = *v1;
  swift_beginAccess();
  sub_1B07BBD78(v4 + 56, (uint64_t)v3);
  return sub_1B080E140;
}

void sub_1B080E140(uint64_t *a1, char a2)
{
}

void sub_1B080E158(uint64_t *a1, char a2, void (*a3)(char *))
{
  uint64_t v4 = (char *)*a1;
  if (a2)
  {
    sub_1B07BBD78(*a1, (uint64_t)(v4 + 40));
    a3(v4 + 40);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
  }
  else
  {
    a3((char *)*a1);
  }

  free(v4);
}

uint64_t AppStore.CenteredThreeLineTextLayout.secondarySpace.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  swift_beginAccess();
  return sub_1B07BBD78(v3 + 96, a1);
}

uint64_t AppStore.CenteredThreeLineTextLayout.secondarySpace.setter(uint64_t *a1)
{
  uint64_t v3 = *v1 + 16;
  swift_beginAccess();
  sub_1B080DE78(v3, (uint64_t)v11);
  __swift_assign_boxed_opaque_existential_1((uint64_t *)v12, a1);
  if (swift_isUniquelyReferenced_nonNull_native())
  {
    uint64_t v4 = *v1 + 16;
    swift_beginAccess();
    sub_1B080DEB0((uint64_t)v11, v4);
    swift_endAccess();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EB595650);
    id v5 = (_OWORD *)swift_allocObject();
    long long v6 = v12[0];
    v5[5] = v11[4];
    v5[6] = v6;
    long long v7 = v12[2];
    v5[7] = v12[1];
    v5[8] = v7;
    long long v8 = v11[1];
    v5[1] = v11[0];
    _OWORD v5[2] = v8;
    long long v9 = v11[3];
    void v5[3] = v11[2];
    long long v5[4] = v9;
    swift_release();
    *uint64_t v1 = v5;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

void (*AppStore.CenteredThreeLineTextLayout.secondarySpace.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x70uLL);
  *a1 = v3;
  v3[13] = v1;
  uint64_t v4 = *v1;
  swift_beginAccess();
  sub_1B07BBD78(v4 + 96, (uint64_t)v3);
  return sub_1B080E398;
}

void sub_1B080E398(uint64_t *a1, char a2)
{
}

uint64_t AppStore.CenteredThreeLineTextLayout.numberOfLines.getter()
{
  uint64_t v1 = *v0;
  swift_beginAccess();
  return *(void *)(v1 + 136);
}

uint64_t AppStore.CenteredThreeLineTextLayout.numberOfLines.setter(uint64_t a1)
{
  uint64_t v3 = *v1 + 16;
  swift_beginAccess();
  sub_1B080DE78(v3, (uint64_t)v11);
  *((void *)&v12 + 1) = a1;
  if (swift_isUniquelyReferenced_nonNull_native())
  {
    uint64_t v4 = *v1 + 16;
    swift_beginAccess();
    sub_1B080DEB0((uint64_t)v11, v4);
    return swift_endAccess();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EB595650);
    long long v6 = (_OWORD *)swift_allocObject();
    long long v7 = v11[5];
    void v6[5] = v11[4];
    v6[6] = v7;
    long long v8 = v12;
    v6[7] = v11[6];
    void v6[8] = v8;
    long long v9 = v11[1];
    v6[1] = v11[0];
    long long v6[2] = v9;
    long long v10 = v11[3];
    CGFloat v6[3] = v11[2];
    v6[4] = v10;
    uint64_t result = swift_release();
    *uint64_t v1 = v6;
  }
  return result;
}

void (*AppStore.CenteredThreeLineTextLayout.numberOfLines.modify(void *a1))(uint64_t a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  uint64_t v4 = *v1;
  swift_beginAccess();
  void v3[3] = *(void *)(v4 + 136);
  return sub_1B080E54C;
}

void sub_1B080E54C(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  AppStore.CenteredThreeLineTextLayout.numberOfLines.setter(*(void *)(*(void *)a1 + 24));

  free(v1);
}

double AppStore.CenteredThreeLineTextLayout.placeChildren(relativeTo:in:)@<D0>(void *a1@<X0>, CGFloat *a2@<X8>, CGFloat a3@<D0>, CGFloat a4@<D1>, CGFloat a5@<D2>, CGFloat a6@<D3>)
{
  CGFloat v105 = a6;
  CGFloat v103 = a4;
  *(double *)&uint64_t v11 = COERCE_DOUBLE(sub_1B086A868());
  double v101 = *(double *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  unint64_t v13 = (char *)&v96 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *v6;
  uint64_t v15 = *v6 + 16;
  swift_beginAccess();
  sub_1B07BBD78(v15, (uint64_t)v109);
  uint64_t v16 = v110;
  uint64_t v17 = v111;
  __swift_project_boxed_opaque_existential_1(v109, v110);
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v17 + 88))(v16, v17))
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v109);
  }
  else
  {
    sub_1B07BBD78(v14 + 56, (uint64_t)v106);
    uint64_t v18 = v107;
    uint64_t v19 = v108;
    __swift_project_boxed_opaque_existential_1(v106, v107);
    char v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 88))(v18, v19);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v106);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v109);
    if ((v20 & 1) == 0)
    {
      double v99 = *(double *)&v11;
      sub_1B07BBD78(v15, (uint64_t)v109);
      uint64_t v39 = v110;
      uint64_t v40 = v111;
      __swift_project_boxed_opaque_existential_1(v109, v110);
      (*(void (**)(void, uint64_t, uint64_t))(v40 + 24))(*(void *)(v14 + 136), v39, v40);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v109);
      sub_1B07BBD78(v15, (uint64_t)v109);
      uint64_t v41 = v110;
      uint64_t v42 = v111;
      __swift_project_boxed_opaque_existential_1(v109, v110);
      double v43 = (*(double (**)(void *, uint64_t, CGFloat, CGFloat))(*(void *)(*(void *)(v42 + 8) + 8) + 8))(a1, v41, a5, v105);
      double v45 = v44;
      double v47 = v46;
      double v49 = v48;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v109);
      sub_1B07BBD78(v15, (uint64_t)v109);
      __swift_project_boxed_opaque_existential_1(v109, v110);
      v112.var0 = v43;
      CGFloat v104 = v45;
      v112.double var1 = v45;
      double v100 = v47;
      v112.double var2 = v47;
      CGFloat v102 = v49;
      v112.double var3 = v49;
      Swift::Int v50 = LayoutTextView.estimatedNumberOfLines(from:)(v112);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v109);
      sub_1B07BBD78(v14 + 56, (uint64_t)v109);
      uint64_t v51 = v110;
      uint64_t v52 = v111;
      __swift_project_boxed_opaque_existential_1(v109, v110);
      if (v50 <= 1) {
        uint64_t v53 = *(void *)(v14 + 136);
      }
      else {
        uint64_t v53 = 1;
      }
      *(double *)&uint64_t v11 = v99;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 24))(v53, v51, v52);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v109);
      sub_1B07BBD78(v14 + 56, (uint64_t)v109);
      uint64_t v54 = v110;
      uint64_t v55 = v111;
      __swift_project_boxed_opaque_existential_1(v109, v110);
      v56.n128_f64[0] = a5;
      v57.n128_f64[0] = v105;
      double v35 = (*(double (**)(void *, uint64_t, __n128, __n128))(*(void *)(*(void *)(v55 + 8) + 8) + 8))(a1, v54, v56, v57);
      goto LABEL_9;
    }
  }
  sub_1B07BBD78(v15, (uint64_t)v109);
  uint64_t v21 = v110;
  uint64_t v22 = v111;
  __swift_project_boxed_opaque_existential_1(v109, v110);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 24))(1, v21, v22);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v109);
  sub_1B07BBD78(v14 + 56, (uint64_t)v109);
  uint64_t v23 = v110;
  uint64_t v24 = v111;
  __swift_project_boxed_opaque_existential_1(v109, v110);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 24))(1, v23, v24);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v109);
  sub_1B07BBD78(v15, (uint64_t)v109);
  uint64_t v25 = v110;
  uint64_t v26 = v111;
  __swift_project_boxed_opaque_existential_1(v109, v110);
  unint64_t v27 = *(void *)&v105;
  (*(void (**)(void *, uint64_t, CGFloat, CGFloat))(*(void *)(*(void *)(v26 + 8) + 8) + 8))(a1, v25, a5, v105);
  CGFloat v104 = v28;
  double v100 = v29;
  CGFloat v102 = v30;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v109);
  sub_1B07BBD78(v14 + 56, (uint64_t)v109);
  uint64_t v31 = v110;
  uint64_t v32 = v111;
  __swift_project_boxed_opaque_existential_1(v109, v110);
  v33.n128_f64[0] = a5;
  v34.n128_u64[0] = v27;
  double v35 = (*(double (**)(void *, uint64_t, __n128, __n128))(*(void *)(*(void *)(v32 + 8) + 8) + 8))(a1, v31, v33, v34);
LABEL_9:
  double v58 = v35;
  double v59 = v36;
  double v60 = v37;
  double v61 = v38;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v109);
  sub_1B07BBD78(v14 + 96, (uint64_t)v109);
  uint64_t v62 = v110;
  uint64_t v63 = v111;
  __swift_project_boxed_opaque_existential_1(v109, v110);
  double v64 = v59;
  double v99 = v61;
  double v65 = AnyDimension.topMargin(from:in:)((uint64_t)a1, v62, v63, v58, v59, v60);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v109);
  v113.origin.double x = a3;
  CGFloat v66 = v103;
  v113.origin.double y = v103;
  v113.size.double width = a5;
  CGFloat v67 = v105;
  v113.size.double height = v105;
  double Height = CGRectGetHeight(v113);
  v114.origin.double x = a3;
  v114.origin.double y = v66;
  v114.size.double width = a5;
  v114.size.double height = v67;
  double MinY = CGRectGetMinY(v114);
  double v70 = v101;
  (*(void (**)(char *, void, uint64_t))(*(void *)&v101 + 104))(v13, *MEMORY[0x1E4FBBEB0], v11);
  id v71 = objc_msgSend(a1, sel_traitCollection);
  objc_msgSend(v71, sel_displayScale);
  if (v72 <= 0.0) {
    double v72 = ForJetUIOnly_MainScreenScale();
  }
  double v73 = v104;
  CGFloat v97 = v65;
  double v98 = v64;
  double v74 = sub_1B07B8068((uint64_t)v13, v72, (Height - (v64 + v104 - v102 + v65)) * 0.5);

  (*(void (**)(char *, uint64_t))(*(void *)&v70 + 8))(v13, v11);
  CGFloat v75 = MinY + v74;
  CGFloat v96 = v75;
  v115.origin.double x = a3;
  CGFloat v76 = v103;
  v115.origin.double y = v103;
  v115.size.double width = a5;
  CGFloat v77 = v105;
  v115.size.double height = v105;
  double MinX = CGRectGetMinX(v115);
  v116.origin.double x = a3;
  v116.origin.double y = v76;
  v116.size.double width = a5;
  v116.size.double height = v77;
  double Width = CGRectGetWidth(v116);
  sub_1B07BBD78(v15, (uint64_t)v109);
  uint64_t v81 = v110;
  uint64_t v80 = v111;
  __swift_project_boxed_opaque_existential_1(v109, v110);
  uint64_t v82 = *(void (**)(uint64_t, double, double, double, double))(*(void *)(v80 + 8) + 24);
  CGFloat v104 = v73;
  v82(v81, MinX, v75, Width, v73);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v109);
  v117.origin.double x = a3;
  v117.origin.double y = v76;
  v117.size.double width = a5;
  v117.size.double height = v77;
  double v101 = CGRectGetMinX(v117);
  v118.origin.double x = MinX;
  v118.origin.double y = v75;
  v118.size.double width = Width;
  v118.size.double height = v73;
  CGFloat v83 = v97 + CGRectGetMaxY(v118) - v102;
  CGFloat v97 = v83;
  v119.origin.double x = a3;
  v119.origin.double y = v76;
  v119.size.double width = a5;
  v119.size.double height = v77;
  double v84 = CGRectGetWidth(v119);
  CGFloat v102 = v84;
  sub_1B07BBD78(v14 + 56, (uint64_t)v109);
  uint64_t v86 = v110;
  uint64_t v85 = v111;
  __swift_project_boxed_opaque_existential_1(v109, v110);
  double v87 = v83;
  CGFloat v88 = v98;
  (*(void (**)(uint64_t, double, double, double, double))(*(void *)(v85 + 8) + 24))(v86, v101, v87, v84, v98);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v109);
  v120.origin.double x = MinX;
  v120.origin.double y = v96;
  v120.size.double width = Width;
  v120.size.double height = v104;
  double v89 = CGRectGetMinY(v120);
  v121.origin.double x = a3;
  v121.origin.double y = v76;
  v121.size.double width = a5;
  v121.size.double height = v77;
  CGFloat v104 = v100 + v89 - CGRectGetMinY(v121);
  v122.origin.double x = a3;
  v122.origin.double y = v76;
  v122.size.double width = a5;
  v122.size.double height = v77;
  CGFloat v90 = CGRectGetMinX(v122);
  v123.origin.double x = a3;
  v123.origin.double y = v76;
  v123.size.double width = a5;
  v123.size.double height = v77;
  CGFloat v91 = CGRectGetMinY(v123);
  v124.origin.double x = a3;
  v124.origin.double y = v76;
  v124.size.double width = a5;
  v124.size.double height = v77;
  CGFloat v92 = CGRectGetWidth(v124);
  v125.origin.double x = v101;
  v125.origin.double y = v97;
  v125.size.double width = v102;
  v125.size.double height = v88;
  double MaxY = CGRectGetMaxY(v125);
  v126.origin.double x = a3;
  v126.origin.double y = v76;
  v126.size.double width = a5;
  v126.size.double height = v77;
  CGFloat v94 = CGRectGetMinY(v126);
  *a2 = v90;
  a2[1] = v91;
  a2[2] = v92;
  a2[3] = MaxY - v94;
  double result = v99;
  a2[4] = v104;
  a2[5] = result;
  return result;
}

uint64_t sub_1B080EE40@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1 + 16;
  swift_beginAccess();
  return sub_1B07BBD78(v3, a2);
}

uint64_t sub_1B080EE90(uint64_t a1)
{
  sub_1B07BBD78(a1, (uint64_t)v2);
  return AppStore.CenteredThreeLineTextLayout.primaryText.setter(v2);
}

uint64_t sub_1B080EEC8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  return sub_1B07BBD78(v3 + 56, a2);
}

uint64_t sub_1B080EF14(uint64_t a1)
{
  sub_1B07BBD78(a1, (uint64_t)v2);
  return AppStore.CenteredThreeLineTextLayout.secondaryText.setter(v2);
}

uint64_t sub_1B080EF4C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  return sub_1B07BBD78(v3 + 96, a2);
}

uint64_t sub_1B080EF98(uint64_t a1)
{
  sub_1B07BBD78(a1, (uint64_t)v2);
  return AppStore.CenteredThreeLineTextLayout.secondarySpace.setter(v2);
}

uint64_t sub_1B080EFD0@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t result = swift_beginAccess();
  *a2 = *(void *)(v3 + 136);
  return result;
}

uint64_t sub_1B080F018(uint64_t *a1)
{
  return AppStore.CenteredThreeLineTextLayout.numberOfLines.setter(*a1);
}

ValueMetadata *type metadata accessor for AppStore.CenteredThreeLineTextLayout()
{
  return &type metadata for AppStore.CenteredThreeLineTextLayout;
}

uint64_t _s27CenteredThreeLineTextLayoutV7StorageVwcp(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 40, a2 + 40);
  long long v6 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 104) = v6;
  (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 80, a2 + 80);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  return a1;
}

uint64_t *_s27CenteredThreeLineTextLayoutV7StorageVwca(uint64_t *a1, uint64_t *a2)
{
  a1[15] = a2[15];
  return a1;
}

__n128 __swift_memcpy128_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 64) = result;
  *(_OWORD *)(a1 + 80) = v6;
  return result;
}

uint64_t _s27CenteredThreeLineTextLayoutV7StorageVwta(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  __swift_destroy_boxed_opaque_existential_1(a1 + 80);
  long long v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v5;
  uint64_t v6 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v6;
  return a1;
}

uint64_t _s27CenteredThreeLineTextLayoutV7StorageVwet(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 128)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s27CenteredThreeLineTextLayoutV7StorageVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 128) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 128) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *_s27CenteredThreeLineTextLayoutV7StorageVMa()
{
  return &_s27CenteredThreeLineTextLayoutV7StorageVN;
}

BOOL static FlankedVerticalLayout.Alignment.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t FlankedVerticalLayout.Alignment.hash(into:)()
{
  return sub_1B086A968();
}

uint64_t FlankedVerticalLayout.Alignment.hashValue.getter()
{
  return sub_1B086A998();
}

uint64_t FlankedVerticalLayout.init(sublayout:topView:topViewAlignment:topMargin:bottomView:bottomViewAlignment:bottomMargin:)@<X0>(long long *a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, long long *a4@<X3>, uint64_t a5@<X4>, char *a6@<X5>, long long *a7@<X6>, uint64_t a8@<X8>)
{
  char v13 = *a3;
  char v14 = *a6;
  *(_OWORD *)(a8 + 64) = 0u;
  *(_OWORD *)(a8 + 48) = 0u;
  uint64_t v15 = a8 + 48;
  *(void *)(a8 + 80) = 0;
  *(_OWORD *)(a8 + 144) = 0u;
  *(void *)(a8 + 160) = 0;
  *(_OWORD *)(a8 + 128) = 0u;
  uint64_t v16 = a8 + 128;
  sub_1B07BA8FC(a1, a8 + 8);
  sub_1B080F440(a2, v15);
  *(unsigned char *)a8 = v13;
  sub_1B07BA8FC(a4, a8 + 88);
  sub_1B080F440(a5, v16);
  *(unsigned char *)(a8 + 1) = v14;

  return sub_1B07BA8FC(a7, a8 + 168);
}

uint64_t sub_1B080F440(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB595DD8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void FlankedVerticalLayout.topViewAlignment.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

void FlankedVerticalLayout.bottomViewAlignment.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 1);
}

uint64_t FlankedVerticalLayout.sublayout.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1B07BBD78(v1 + 8, a1);
}

uint64_t FlankedVerticalLayout.sublayout.setter(long long *a1)
{
  uint64_t v3 = v1 + 8;
  __swift_destroy_boxed_opaque_existential_1(v3);

  return sub_1B07BA8FC(a1, v3);
}

double (*FlankedVerticalLayout.sublayout.modify())(void)
{
  return nullsub_1;
}

uint64_t FlankedVerticalLayout.topView.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1B080F550(v1 + 48, a1);
}

uint64_t sub_1B080F550(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB595DD8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t FlankedVerticalLayout.topView.setter(uint64_t a1)
{
  return sub_1B080F440(a1, v1 + 48);
}

double (*FlankedVerticalLayout.topView.modify())(void)
{
  return nullsub_1;
}

uint64_t FlankedVerticalLayout.topMargin.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1B07BBD78(v1 + 88, a1);
}

uint64_t FlankedVerticalLayout.topMargin.setter(long long *a1)
{
  uint64_t v3 = v1 + 88;
  __swift_destroy_boxed_opaque_existential_1(v3);

  return sub_1B07BA8FC(a1, v3);
}

double (*FlankedVerticalLayout.topMargin.modify())(void)
{
  return nullsub_1;
}

uint64_t FlankedVerticalLayout.bottomView.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1B080F550(v1 + 128, a1);
}

uint64_t FlankedVerticalLayout.bottomView.setter(uint64_t a1)
{
  return sub_1B080F440(a1, v1 + 128);
}

double (*FlankedVerticalLayout.bottomView.modify())(void)
{
  return nullsub_1;
}

uint64_t FlankedVerticalLayout.bottomMargin.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1B07BBD78(v1 + 168, a1);
}

uint64_t FlankedVerticalLayout.bottomMargin.setter(long long *a1)
{
  uint64_t v3 = v1 + 168;
  __swift_destroy_boxed_opaque_existential_1(v3);

  return sub_1B07BA8FC(a1, v3);
}

double (*FlankedVerticalLayout.bottomMargin.modify())(void)
{
  return nullsub_1;
}

void FlankedVerticalLayout.placeChildren(relativeTo:in:)(void *a1@<X0>, uint64_t a2@<X8>, CGFloat a3@<D0>, CGFloat a4@<D1>, CGFloat a5@<D2>, CGFloat a6@<D3>)
{
  long long v7 = v6;
  uint64_t v14 = sub_1B086A868();
  uint64_t v108 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  *(void *)&double v106 = (char *)&v100 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v100 - v17;
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = (char *)&v100 - v20;
  sub_1B080F550((uint64_t)(v6 + 48), (uint64_t)&v110);
  if (*(void *)&v110.d)
  {
    uint64_t v22 = v14;
    sub_1B07BA8FC((long long *)&v110, (uint64_t)v111);
    uint64_t v23 = v112;
    uint64_t v24 = v113;
    __swift_project_boxed_opaque_existential_1(v111, v112);
    if ((*(uint64_t (**)(uint64_t, uint64_t))(v24 + 40))(v23, v24))
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v111);
      double v25 = a6;
      double v107 = a4;
      uint64_t v14 = v22;
    }
    else
    {
      uint64_t v27 = v112;
      uint64_t v26 = v113;
      __swift_project_boxed_opaque_existential_1(v111, v112);
      double v28 = (*(double (**)(void *, uint64_t, CGFloat, CGFloat))(*(void *)(v26 + 8) + 8))(a1, v27, a5, a6);
      CGFloat v105 = v29;
      CGFloat v30 = a3;
      CGFloat v31 = a4;
      CGFloat v32 = a5;
      CGFloat v33 = a6;
      if (*v6)
      {
        if (*v6 == 1)
        {
          double v34 = CGRectGetMidX(*(CGRect *)&v30) + v28 * -0.5;
          (*(void (**)(char *, void, uint64_t))(v108 + 104))(v21, *MEMORY[0x1E4FBBEB0], v22);
          id v35 = objc_msgSend(a1, sel_traitCollection);
          objc_msgSend(v35, sel_displayScale);
          if (v36 <= 0.0) {
            double v36 = ForJetUIOnly_MainScreenScale();
          }
          double MinX = sub_1B07B8068((uint64_t)v21, v36, v34);

          (*(void (**)(char *, uint64_t))(v108 + 8))(v21, v22);
        }
        else
        {
          double MinX = CGRectGetWidth(*(CGRect *)&v30) - v28;
        }
      }
      else
      {
        double MinX = CGRectGetMinX(*(CGRect *)&v30);
      }
      v114.origin.double x = a3;
      v114.origin.double y = a4;
      v114.size.double width = a5;
      v114.size.double height = a6;
      CGFloat MinY = CGRectGetMinY(v114);
      uint64_t v38 = v112;
      uint64_t v39 = v113;
      __swift_project_boxed_opaque_existential_1(v111, v112);
      id v40 = objc_msgSend(a1, sel_traitCollection);
      id v41 = objc_msgSend(v40, sel_layoutDirection);

      double v103 = a3;
      if (v41 == (id)1)
      {
        CGAffineTransformMakeScale(&v110, -1.0, 1.0);
        long long v102 = *(_OWORD *)&v110.a;
        long long v101 = *(_OWORD *)&v110.c;
        double v107 = v28;
        CGFloat tx = v110.tx;
        CGFloat ty = v110.ty;
        v115.origin.double x = a3;
        v115.origin.double y = a4;
        v115.size.double width = a5;
        v115.size.double height = a6;
        double v47 = CGRectGetMinX(v115);
        v116.origin.double x = a3;
        v116.origin.double y = a4;
        v116.size.double width = a5;
        v116.size.double height = a6;
        CGFloat v48 = -(v47 + CGRectGetMaxX(v116));
        *(_OWORD *)&v110.a = v102;
        *(_OWORD *)&v110.c = v101;
        v110.CGFloat tx = tx;
        v110.CGFloat ty = ty;
        CGFloat v49 = v107;
        CGAffineTransformTranslate(&v109, &v110, v48, 0.0);
        CGAffineTransform v110 = v109;
        v117.origin.double x = MinX;
        v117.origin.double y = MinY;
        double v28 = v49;
        v117.size.double width = v49;
        v117.size.double height = v105;
        *(CGRect *)((char *)&v42 - 8) = CGRectApplyAffineTransform(v117, &v110);
        CGFloat v50 = MinX;
        double MinX = v51;
      }
      else
      {
        CGFloat v50 = MinX;
        v42.n128_f64[0] = MinY;
        v43.n128_f64[0] = v28;
        v44.n128_f64[0] = v105;
      }
      uint64_t v14 = v22;
      double v52 = a4;
      (*(void (**)(uint64_t, uint64_t, double, __n128, __n128, __n128))(v39 + 24))(v38, v39, MinX, v42, v43, v44);
      uint64_t v53 = *((void *)v7 + 14);
      uint64_t v54 = *((void *)v7 + 15);
      __swift_project_boxed_opaque_existential_1((void *)v7 + 11, v53);
      sub_1B07B76D8((uint64_t)v18);
      AnyDimension.value(in:rounded:)((uint64_t)a1, (uint64_t)v18, v53, v54);
      double v56 = v55;
      (*(void (**)(char *, uint64_t))(v108 + 8))(v18, v22);
      v118.origin.double x = v50;
      CGFloat v57 = MinY;
      v118.origin.double y = MinY;
      CGFloat v58 = v28;
      v118.size.double width = v28;
      CGFloat v59 = v105;
      v118.size.double height = v105;
      double v107 = v56 + CGRectGetHeight(v118) + v52;
      v119.origin.double x = v50;
      v119.origin.double y = v57;
      v119.size.double width = v58;
      v119.size.double height = v59;
      double v25 = a6 - (v56 + CGRectGetHeight(v119));
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v111);
      a4 = v52;
      a3 = v103;
    }
  }
  else
  {
    sub_1B08100A8((uint64_t)&v110);
    double v25 = a6;
    double v107 = a4;
  }
  sub_1B080F550((uint64_t)(v7 + 128), (uint64_t)&v110);
  if (*(void *)&v110.d)
  {
    sub_1B07BA8FC((long long *)&v110, (uint64_t)v111);
    uint64_t v60 = v112;
    uint64_t v61 = v113;
    __swift_project_boxed_opaque_existential_1(v111, v112);
    if (((*(uint64_t (**)(uint64_t, uint64_t))(v61 + 40))(v60, v61) & 1) == 0)
    {
      uint64_t v62 = v112;
      uint64_t v63 = v113;
      __swift_project_boxed_opaque_existential_1(v111, v112);
      double v64 = (*(double (**)(void *, uint64_t, CGFloat, CGFloat))(*(void *)(v63 + 8) + 8))(a1, v62, a5, a6);
      double v66 = v65;
      int v67 = v7[1];
      CGFloat MinY = v64;
      if (v67)
      {
        double v68 = v64;
        CGFloat v69 = a3;
        CGFloat v70 = a4;
        CGFloat v71 = a5;
        CGFloat v72 = a6;
        if (v67 == 1)
        {
          double v73 = CGRectGetMidX(*(CGRect *)&v69) + v68 * -0.5;
          uint64_t v74 = *(void *)&v106;
          (*(void (**)(double, void, uint64_t))(v108 + 104))(COERCE_DOUBLE(*(void *)&v106), *MEMORY[0x1E4FBBEB0], v14);
          id v75 = objc_msgSend(a1, sel_traitCollection);
          objc_msgSend(v75, sel_displayScale);
          if (v76 <= 0.0) {
            double v76 = ForJetUIOnly_MainScreenScale();
          }
          double v77 = sub_1B07B8068(v74, v76, v73);

          (*(void (**)(uint64_t, uint64_t))(v108 + 8))(v74, v14);
        }
        else
        {
          double v77 = CGRectGetWidth(*(CGRect *)&v69) - v68;
        }
      }
      else
      {
        v120.origin.double x = a3;
        v120.origin.double y = a4;
        v120.size.double width = a5;
        v120.size.double height = a6;
        double v77 = CGRectGetMinX(v120);
      }
      v121.origin.double x = a3;
      v121.origin.double y = a4;
      v121.size.double width = a5;
      v121.size.double height = a6;
      double v106 = CGRectGetMaxY(v121) - v66;
      uint64_t v78 = v112;
      uint64_t v79 = v113;
      __swift_project_boxed_opaque_existential_1(v111, v112);
      id v80 = objc_msgSend(a1, sel_traitCollection);
      id v81 = objc_msgSend(v80, sel_layoutDirection);

      CGFloat v105 = v66;
      if (v81 == (id)1)
      {
        CGAffineTransformMakeScale(&v110, -1.0, 1.0);
        long long v101 = *(_OWORD *)&v110.a;
        long long v100 = *(_OWORD *)&v110.c;
        *(double *)&long long v102 = v25;
        CGFloat v86 = v110.tx;
        CGFloat v85 = v110.ty;
        v122.origin.double x = a3;
        v122.origin.double y = a4;
        v122.size.double width = a5;
        v122.size.double height = a6;
        double v87 = CGRectGetMinX(v122);
        v123.origin.double x = a3;
        v123.origin.double y = a4;
        v123.size.double width = a5;
        v123.size.double height = a6;
        CGFloat MaxX = CGRectGetMaxX(v123);
        *(_OWORD *)&v110.a = v101;
        *(_OWORD *)&v110.c = v100;
        v110.CGFloat tx = v86;
        v110.CGFloat ty = v85;
        double v25 = *(double *)&v102;
        CGAffineTransformTranslate(&v109, &v110, -(v87 + MaxX), 0.0);
        CGAffineTransform v110 = v109;
        v124.origin.double x = v77;
        v124.origin.double y = v106;
        CGFloat v89 = MinY;
        v124.size.double width = MinY;
        v124.size.double height = v105;
        *(CGRect *)((char *)&v82 - 8) = CGRectApplyAffineTransform(v124, &v110);
        CGFloat v90 = v77;
        double v77 = v91;
      }
      else
      {
        CGFloat v90 = v77;
        v82.n128_f64[0] = v106;
        v84.n128_f64[0] = v66;
        CGFloat v89 = MinY;
        v83.n128_f64[0] = MinY;
      }
      (*(void (**)(uint64_t, uint64_t, double, __n128, __n128, __n128))(v79 + 24))(v78, v79, v77, v82, v83, v84);
      uint64_t v92 = *((void *)v7 + 24);
      uint64_t v93 = *((void *)v7 + 25);
      __swift_project_boxed_opaque_existential_1((void *)v7 + 21, v92);
      sub_1B07B76D8((uint64_t)v18);
      AnyDimension.value(in:rounded:)((uint64_t)a1, (uint64_t)v18, v92, v93);
      double v95 = v94;
      (*(void (**)(char *, uint64_t))(v108 + 8))(v18, v14);
      v125.origin.double x = v90;
      v125.origin.double y = v106;
      v125.size.double width = v89;
      v125.size.double height = v105;
      double v25 = v25 - (v95 + CGRectGetHeight(v125));
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v111);
  }
  else
  {
    sub_1B08100A8((uint64_t)&v110);
  }
  CGFloat v96 = v7 + 8;
  uint64_t v98 = *((void *)v7 + 4);
  uint64_t v97 = *((void *)v7 + 5);
  __swift_project_boxed_opaque_existential_1(v96, v98);
  (*(void (**)(CGAffineTransform *__return_ptr, void *, uint64_t, uint64_t, CGFloat, double, CGFloat, double))(v97 + 8))(&v110, a1, v98, v97, a3, v107, a5, v25);
  v126.origin.double x = a3;
  v126.origin.double y = a4;
  v126.size.double width = a5;
  v126.size.double height = a6;
  CGFloat Height = CGRectGetHeight(v126);
  *(CGFloat *)a2 = a3;
  *(CGFloat *)(a2 + 8) = a4;
  *(CGFloat *)(a2 + 16) = a5;
  *(CGFloat *)(a2 + 24) = a6;
  *(CGFloat *)(a2 + 32) = Height;
  *(void *)(a2 + 40) = 0;
}

uint64_t sub_1B08100A8(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB595DD8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1B0810110()
{
  unint64_t result = qword_1E9B3B690;
  if (!qword_1E9B3B690)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3B690);
  }
  return result;
}

uint64_t destroy for FlankedVerticalLayout(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  if (*(void *)(a1 + 72)) {
    __swift_destroy_boxed_opaque_existential_1(a1 + 48);
  }
  __swift_destroy_boxed_opaque_existential_1(a1 + 88);
  if (*(void *)(a1 + 152)) {
    __swift_destroy_boxed_opaque_existential_1(a1 + 128);
  }

  return __swift_destroy_boxed_opaque_existential_1(a1 + 168);
}

uint64_t initializeWithCopy for FlankedVerticalLayout(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v4;
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 8, a2 + 8);
  long long v5 = (_OWORD *)(a1 + 48);
  uint64_t v6 = (_OWORD *)(a2 + 48);
  uint64_t v7 = *(void *)(a2 + 72);
  if (v7)
  {
    uint64_t v8 = *(void *)(a2 + 80);
    *(void *)(a1 + 72) = v7;
    *(void *)(a1 + 80) = v8;
    (**(void (***)(_OWORD *, _OWORD *))(v7 - 8))(v5, v6);
  }
  else
  {
    long long v9 = *(_OWORD *)(a2 + 64);
    *long long v5 = *v6;
    *(_OWORD *)(a1 + 64) = v9;
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
  }
  long long v10 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 112) = v10;
  (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1 + 88, a2 + 88);
  uint64_t v11 = (_OWORD *)(a1 + 128);
  uint64_t v12 = (_OWORD *)(a2 + 128);
  uint64_t v13 = *(void *)(a2 + 152);
  if (v13)
  {
    uint64_t v14 = *(void *)(a2 + 160);
    *(void *)(a1 + 152) = v13;
    *(void *)(a1 + 160) = v14;
    (**(void (***)(_OWORD *, _OWORD *))(v13 - 8))(v11, v12);
  }
  else
  {
    long long v15 = *(_OWORD *)(a2 + 144);
    *uint64_t v11 = *v12;
    *(_OWORD *)(a1 + 144) = v15;
    *(void *)(a1 + 160) = *(void *)(a2 + 160);
  }
  long long v16 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 192) = v16;
  (**(void (***)(uint64_t, uint64_t))(v16 - 8))(a1 + 168, a2 + 168);
  return a1;
}

uint64_t assignWithCopy for FlankedVerticalLayout(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8));
  uint64_t v4 = *(void *)(a2 + 72);
  if (*(void *)(a1 + 72))
  {
    if (v4)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 48), (uint64_t *)(a2 + 48));
      goto LABEL_8;
    }
    __swift_destroy_boxed_opaque_existential_1(a1 + 48);
  }
  else if (v4)
  {
    *(void *)(a1 + 72) = v4;
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 48, a2 + 48);
    goto LABEL_8;
  }
  long long v5 = *(_OWORD *)(a2 + 48);
  long long v6 = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v5;
  *(_OWORD *)(a1 + 64) = v6;
LABEL_8:
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 88), (uint64_t *)(a2 + 88));
  uint64_t v7 = *(void *)(a2 + 152);
  if (!*(void *)(a1 + 152))
  {
    if (v7)
    {
      *(void *)(a1 + 152) = v7;
      *(void *)(a1 + 160) = *(void *)(a2 + 160);
      (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 128, a2 + 128);
      goto LABEL_15;
    }
LABEL_14:
    long long v8 = *(_OWORD *)(a2 + 128);
    long long v9 = *(_OWORD *)(a2 + 144);
    *(void *)(a1 + 160) = *(void *)(a2 + 160);
    *(_OWORD *)(a1 + 128) = v8;
    *(_OWORD *)(a1 + 144) = v9;
    goto LABEL_15;
  }
  if (!v7)
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 128);
    goto LABEL_14;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 128), (uint64_t *)(a2 + 128));
LABEL_15:
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 168), (uint64_t *)(a2 + 168));
  return a1;
}

__n128 __swift_memcpy208_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  long long v5 = *(_OWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  __n128 result = *(__n128 *)(a2 + 144);
  long long v9 = *(_OWORD *)(a2 + 160);
  long long v10 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v10;
  *(__n128 *)(a1 + 144) = result;
  *(_OWORD *)(a1 + 160) = v9;
  return result;
}

uint64_t assignWithTake for FlankedVerticalLayout(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  if (*(void *)(a1 + 72)) {
    __swift_destroy_boxed_opaque_existential_1(a1 + 48);
  }
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  __swift_destroy_boxed_opaque_existential_1(a1 + 88);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  if (*(void *)(a1 + 152)) {
    __swift_destroy_boxed_opaque_existential_1(a1 + 128);
  }
  long long v5 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v5;
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  __swift_destroy_boxed_opaque_existential_1(a1 + 168);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  return a1;
}

uint64_t getEnumTagSinglePayload for FlankedVerticalLayout(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 208)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FlankedVerticalLayout(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 200) = 0;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 208) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 208) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FlankedVerticalLayout()
{
  return &type metadata for FlankedVerticalLayout;
}

unsigned char *storeEnumTagSinglePayload for FlankedVerticalLayout.Alignment(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B081076CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FlankedVerticalLayout.Alignment()
{
  return &type metadata for FlankedVerticalLayout.Alignment;
}

id sub_1B08107A4()
{
  uint64_t v0 = sub_1B08691E8();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  int v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EB595980 != -1) {
    swift_once();
  }
  sub_1B086A318();
  id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB0848]), sel_init);
  objc_msgSend(v4, sel_setAlignment_, 4);
  sub_1B0869198();
  uint64_t v5 = sub_1B08691B8();
  swift_bridgeObjectRelease();
  uint64_t v6 = 1;
  if (v5 != 2) {
    uint64_t v6 = -1;
  }
  if (v5 == 1) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = v6;
  }
  objc_msgSend(v4, sel_setBaseWritingDirection_, v7);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v4;
}

id sub_1B081093C()
{
  uint64_t v0 = sub_1B08691E8();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  int v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EB595980 != -1) {
    swift_once();
  }
  sub_1B086A318();
  id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB0848]), sel_init);
  objc_msgSend(v4, sel_setFirstLineHeadIndent_, 0.0);
  objc_msgSend(v4, sel_setHeadIndent_, 40.0);
  sub_1B0810B64();
  uint64_t v5 = (void *)sub_1B0869F78();
  objc_msgSend(v4, sel_setTabStops_, v5);

  objc_msgSend(v4, sel_setDefaultTabInterval_, 40.0);
  objc_msgSend(v4, sel_setParagraphSpacing_, 18.0);
  objc_msgSend(v4, sel_setAlignment_, 4);
  sub_1B0869198();
  uint64_t v6 = sub_1B08691B8();
  swift_bridgeObjectRelease();
  uint64_t v7 = 1;
  if (v6 != 2) {
    uint64_t v7 = -1;
  }
  if (v6 == 1) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = v7;
  }
  objc_msgSend(v4, sel_setBaseWritingDirection_, v8);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v4;
}

unint64_t sub_1B0810B64()
{
  unint64_t result = qword_1E9B3B698;
  if (!qword_1E9B3B698)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1E9B3B698);
  }
  return result;
}

JUMeasurements __swiftcall UILabel.measure(toFit:with:)(CGSize toFit, UITraitCollection with)
{
  CGFloat height = toFit.height;
  CGFloat width = toFit.width;
  objc_msgSend(v2, sel_sizeThatFits_);
  CGSize v7 = constrainWidth(of:toFit:)((CGSize)__PAIR128__(v6, v5), (CGSize)__PAIR128__(*(unint64_t *)&height, *(unint64_t *)&width));
  objc_msgSend(v2, sel__firstBaselineOffsetFromTop);
  double v9 = v8;
  objc_msgSend(v2, sel__baselineOffsetFromBottom);
  double v11 = v10;
  CGFloat v12 = v7.width;
  CGFloat v13 = v7.height;
  double v14 = v9;
  result.double var3 = v11;
  result.double var2 = v14;
  result.double var1 = v13;
  result.var0 = v12;
  return result;
}

uint64_t VerticalSplitLayout.init(prioritySublayout:otherSublayout:priorityPosition:spacing:useLastBaseline:)@<X0>(long long *a1@<X0>, long long *a2@<X1>, char *a3@<X2>, long long *a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  char v10 = *a3;
  sub_1B0810C90(a1, (_OWORD *)a6);
  sub_1B0810C90(a2, (_OWORD *)(a6 + 48));
  *(unsigned char *)(a6 + 96) = v10;
  uint64_t result = sub_1B07BA8FC(a4, a6 + 104);
  *(unsigned char *)(a6 + 144) = a5;
  return result;
}

_OWORD *sub_1B0810C90(long long *a1, _OWORD *a2)
{
  long long v2 = *a1;
  long long v3 = a1[2];
  a2[1] = a1[1];
  a2[2] = v3;
  *a2 = v2;
  return a2;
}

uint64_t VerticalSplitLayout.prioritySublayout.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1B0810CB4(v1, a1);
}

uint64_t sub_1B0810CB4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

_OWORD *VerticalSplitLayout.prioritySublayout.setter(long long *a1)
{
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v1);

  return sub_1B0810C90(a1, v1);
}

double (*VerticalSplitLayout.prioritySublayout.modify())(void)
{
  return nullsub_1;
}

uint64_t VerticalSplitLayout.otherSublayout.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1B0810CB4(v1 + 48, a1);
}

_OWORD *VerticalSplitLayout.otherSublayout.setter(long long *a1)
{
  uint64_t v3 = (_OWORD *)(v1 + 48);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);

  return sub_1B0810C90(a1, v3);
}

double (*VerticalSplitLayout.otherSublayout.modify())(void)
{
  return nullsub_1;
}

JetUI::VerticalSplitLayout::Position_optional __swiftcall VerticalSplitLayout.Position.init(rawValue:)(Swift::Int rawValue)
{
  if (rawValue == 1) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (!rawValue) {
    char v2 = 0;
  }
  *uint64_t v1 = v2;
  return (JetUI::VerticalSplitLayout::Position_optional)rawValue;
}

uint64_t VerticalSplitLayout.Position.rawValue.getter()
{
  return *v0;
}

void *sub_1B0810E0C@<X0>(void *result@<X0>, char *a2@<X8>)
{
  if (*result == 1) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (*result) {
    char v3 = v2;
  }
  else {
    char v3 = 0;
  }
  *a2 = v3;
  return result;
}

void sub_1B0810E2C(void *a1@<X8>)
{
  *a1 = *v1;
}

void VerticalSplitLayout.priorityPosition.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 96);
}

unsigned char *VerticalSplitLayout.priorityPosition.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 96) = *result;
  return result;
}

double (*VerticalSplitLayout.priorityPosition.modify())(void)
{
  return nullsub_1;
}

uint64_t VerticalSplitLayout.spacing.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1B07BBD78(v1 + 104, a1);
}

uint64_t VerticalSplitLayout.spacing.setter(long long *a1)
{
  uint64_t v3 = v1 + 104;
  __swift_destroy_boxed_opaque_existential_1(v3);

  return sub_1B07BA8FC(a1, v3);
}

double (*VerticalSplitLayout.spacing.modify())(void)
{
  return nullsub_1;
}

uint64_t VerticalSplitLayout.useLastBaseline.getter()
{
  return *(unsigned __int8 *)(v0 + 144);
}

uint64_t VerticalSplitLayout.useLastBaseline.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 144) = result;
  return result;
}

double (*VerticalSplitLayout.useLastBaseline.modify())(void)
{
  return nullsub_1;
}

void VerticalSplitLayout.placeChildren(relativeTo:in:)(uint64_t a1@<X0>, uint64_t a2@<X8>, CGFloat a3@<D0>, CGFloat a4@<D1>, CGFloat a5@<D2>, CGFloat a6@<D3>)
{
  uint64_t v7 = v6;
  uint64_t v14 = sub_1B086A868();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = (void *)(v6 + 104);
  uint64_t v19 = *(void *)(v6 + 128);
  uint64_t v20 = *(void *)(v7 + 136);
  __swift_project_boxed_opaque_existential_1(v18, v19);
  sub_1B07B76D8((uint64_t)v17);
  AnyDimension.value(in:rounded:)(a1, (uint64_t)v17, v19, v20);
  double v55 = v21;
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  uint64_t v22 = *(void *)(v7 + 24);
  uint64_t v23 = *(void *)(v7 + 40);
  __swift_project_boxed_opaque_existential_1((void *)v7, v22);
  (*(void (**)(uint64_t, uint64_t, uint64_t, CGFloat, CGFloat))(v23 + 8))(a1, v22, v23, a5, a6);
  double v25 = v24;
  v59.origin.double x = a3;
  v59.origin.double y = a4;
  v59.size.CGFloat width = a5;
  v59.size.CGFloat height = a6;
  double MinX = CGRectGetMinX(v59);
  v60.origin.double x = a3;
  v60.origin.double y = a4;
  v60.size.CGFloat width = a5;
  v60.size.CGFloat height = a6;
  double Width = CGRectGetWidth(v60);
  char v27 = *(unsigned char *)(v7 + 96);
  CGFloat v28 = a3;
  CGFloat v29 = a4;
  CGFloat v30 = a5;
  CGFloat v31 = a6;
  if (v27) {
    double MinY = CGRectGetMaxY(*(CGRect *)&v28) - v25;
  }
  else {
    double MinY = CGRectGetMinY(*(CGRect *)&v28);
  }
  double v56 = MinY;
  CGFloat v33 = a6;
  uint64_t v34 = *(void *)(v7 + 24);
  uint64_t v35 = *(void *)(v7 + 32);
  __swift_project_boxed_opaque_existential_1((void *)v7, v34);
  CGFloat v36 = v56;
  CGFloat v37 = MinX;
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t, uint64_t, double, double, double, double))(v35 + 8))(v58, a1, v34, v35, MinX, v56, Width, v25);
  CGFloat v38 = *(double *)&v58[3];
  double v51 = *(double *)&v58[5];
  CGFloat v52 = Width;
  v61.origin.double x = a3;
  v61.origin.double y = a4;
  v61.size.CGFloat width = a5;
  v61.size.CGFloat height = v33;
  double v54 = CGRectGetMinX(v61);
  v62.origin.double x = a3;
  v62.origin.double y = a4;
  v62.size.CGFloat width = a5;
  v62.size.CGFloat height = v33;
  double v53 = CGRectGetWidth(v62);
  v63.origin.double x = a3;
  v63.origin.double y = a4;
  v63.size.CGFloat width = a5;
  v63.size.CGFloat height = v33;
  double Height = CGRectGetHeight(v63);
  v64.origin.double x = v37;
  v64.origin.double y = v36;
  CGFloat v40 = v52;
  v64.size.CGFloat width = v52;
  CGFloat v41 = v38;
  v64.size.CGFloat height = v38;
  double v42 = Height - CGRectGetHeight(v64) - v55;
  if (v27)
  {
    v65.origin.double x = a3;
    v65.origin.double y = a4;
    v65.size.CGFloat width = a5;
    v65.size.CGFloat height = v33;
    double v43 = CGRectGetMinY(v65);
  }
  else
  {
    double v44 = v55;
    v66.origin.double y = v56;
    v66.origin.double x = MinX;
    v66.size.CGFloat width = v40;
    v66.size.CGFloat height = v41;
    double v45 = v44 + CGRectGetMaxY(v66);
    if (*(unsigned char *)(v7 + 144))
    {
      double v42 = v51 + v42;
      double v43 = v45 - v51;
    }
    else
    {
      double v43 = v45;
    }
  }
  double v46 = (void *)(v7 + 48);
  uint64_t v48 = *(void *)(v7 + 72);
  uint64_t v47 = *(void *)(v7 + 80);
  __swift_project_boxed_opaque_existential_1(v46, v48);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t, uint64_t, double, double, double, double))(v47 + 8))(v58, a1, v48, v47, v54, v43, v53, v42);
  v67.origin.double x = a3;
  v67.origin.double y = a4;
  v67.size.CGFloat width = a5;
  v67.size.CGFloat height = v33;
  CGFloat v49 = CGRectGetHeight(v67);
  *(CGFloat *)a2 = a3;
  *(CGFloat *)(a2 + 8) = a4;
  *(CGFloat *)(a2 + 16) = a5;
  *(CGFloat *)(a2 + 24) = v33;
  *(CGFloat *)(a2 + 32) = v49;
  *(void *)(a2 + 40) = 0;
}

unint64_t sub_1B08112A0()
{
  unint64_t result = qword_1E9B3B6A0;
  if (!qword_1E9B3B6A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3B6A0);
  }
  return result;
}

uint64_t destroy for VerticalSplitLayout(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1 + 104);
}

uint64_t initializeWithCopy for VerticalSplitLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 40);
  long long v5 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v5;
  *(void *)(a1 + 40) = v4;
  (**(void (***)(void))(v5 - 8))();
  uint64_t v6 = *(void *)(a2 + 88);
  long long v7 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 72) = v7;
  *(void *)(a1 + 88) = v6;
  (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 48, a2 + 48);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  long long v8 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 128) = v8;
  (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1 + 104, a2 + 104);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  return a1;
}

uint64_t assignWithCopy for VerticalSplitLayout(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 104), (uint64_t *)(a2 + 104));
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_2(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        unint64_t result = (uint64_t *)swift_release();
        uint64_t *v3 = v12;
      }
      else
      {
        double v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      result[5] = a2[5];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *unint64_t result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          uint64_t *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

__n128 __swift_memcpy145_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  __n128 result = *(__n128 *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 128);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t assignWithTake for VerticalSplitLayout(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  __swift_destroy_boxed_opaque_existential_1(a1 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  __swift_destroy_boxed_opaque_existential_1(a1 + 104);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  return a1;
}

uint64_t getEnumTagSinglePayload for VerticalSplitLayout(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 145)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for VerticalSplitLayout(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 144) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 145) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 145) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for VerticalSplitLayout()
{
  return &type metadata for VerticalSplitLayout;
}

unsigned char *storeEnumTagSinglePayload for VerticalSplitLayout.Position(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B0811918);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for VerticalSplitLayout.Position()
{
  return &type metadata for VerticalSplitLayout.Position;
}

uint64_t Models.ProgrammedText.init(deserializing:using:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v45 = a2;
  double v44 = a3;
  uint64_t v4 = sub_1B08695F8();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  long long v7 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v44 - v9;
  sub_1B0869608();
  uint64_t v11 = sub_1B08695E8();
  uint64_t v13 = v12;
  uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
  v14(v10, v4);
  uint64_t v48 = a1;
  if (!v13)
  {
    uint64_t v22 = sub_1B0869C28();
    sub_1B07DCB60();
    swift_allocError();
    *uint64_t v23 = 0x646E696B24;
    v23[1] = 0xE500000000000000;
    _OWORD v23[2] = &type metadata for Models.ProgrammedText;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v22 - 8) + 104))(v23, *MEMORY[0x1E4F717D8], v22);
    uint64_t v24 = v45;
    uint64_t v18 = (uint64_t (*)(uint64_t, uint64_t))v14;
LABEL_12:
    swift_willThrow();
    uint64_t v29 = sub_1B0869728();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v29 - 8) + 8))(v24, v29);
    return v18(v48, v4);
  }
  sub_1B0869608();
  id v15 = (id)sub_1B08695E8();
  uint64_t v17 = v16;
  v14(v7, v4);
  uint64_t v18 = (uint64_t (*)(uint64_t, uint64_t))v14;
  if (!v17)
  {
    swift_bridgeObjectRelease();
    uint64_t v25 = sub_1B0869C28();
    sub_1B07DCB60();
    swift_allocError();
    char v27 = v26;
    *uint64_t v26 = 1954047348;
    v26[1] = 0xE400000000000000;
    long long v26[2] = (uint64_t)&type metadata for Models.ProgrammedText;
    CGFloat v28 = (unsigned int *)MEMORY[0x1E4F717D8];
LABEL_11:
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v25 - 8) + 104))(v27, *v28, v25);
    uint64_t v24 = v45;
    goto LABEL_12;
  }
  BOOL v19 = v11 == 0x6E69616C70 && v13 == 0xE500000000000000;
  if (!v19 && (sub_1B086A8A8() & 1) == 0)
  {
    BOOL v31 = v11 == 1751345522 && v13 == 0xE400000000000000;
    if (v31 || (sub_1B086A8A8() & 1) != 0)
    {
      uint64_t v20 = v4;
      swift_bridgeObjectRelease();
      id v32 = objc_msgSend(self, sel_systemFontOfSize_, 15.0);
      id v33 = sub_1B08107A4();
      uint64_t v34 = sub_1B0810938();
      uint64_t v35 = sub_1B0810938();

      v46[0] = 10;
      v46[1] = 0xE100000000000000;
      v46[2] = (uint64_t)v32;
      void v46[3] = (uint64_t)v33;
      v46[4] = 161644770;
      v46[5] = 0xA400000000000000;
      v46[6] = v34;
      v46[7] = 606245;
      v46[8] = 0xE300000000000000;
      v46[9] = v35;
      char v47 = 0;
      id v36 = objc_allocWithZone((Class)type metadata accessor for NQMLStringGenerator());
      CGFloat v37 = sub_1B085F8C4((uint64_t)v15, v17, v46);
      objc_msgSend(*(id *)&v37[OBJC_IVAR____TtC5JetUIP33_F1C4EBA6165AEBFE43471B55508F17DF19NQMLStringGenerator_parser], sel_parse);
      uint64_t v38 = OBJC_IVAR____TtC5JetUIP33_F1C4EBA6165AEBFE43471B55508F17DF19NQMLStringGenerator_accumulator;
      id v39 = objc_msgSend(*(id *)&v37[OBJC_IVAR____TtC5JetUIP33_F1C4EBA6165AEBFE43471B55508F17DF19NQMLStringGenerator_accumulator], sel_mutableString);
      if (qword_1E9B3A708 != -1) {
        swift_once();
      }
      sub_1B080B034((void *)qword_1E9B3BDD8);

      id v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28B18]), sel_initWithAttributedString_, *(void *)&v37[v38]);
      uint64_t v17 = 0;
      char v21 = 1;
      goto LABEL_21;
    }
    swift_bridgeObjectRelease();
    uint64_t v25 = sub_1B0869C28();
    sub_1B07DCB60();
    swift_allocError();
    char v27 = v43;
    *double v43 = v11;
    v43[1] = v13;
    v43[2] = (uint64_t)&type metadata for Models.ProgrammedText;
    CGFloat v28 = (unsigned int *)MEMORY[0x1E4F717C8];
    goto LABEL_11;
  }
  uint64_t v20 = v4;
  swift_bridgeObjectRelease();
  char v21 = 0;
LABEL_21:
  uint64_t v40 = v48;
  uint64_t v41 = sub_1B0869728();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v41 - 8) + 8))(v45, v41);
  uint64_t result = v18(v40, v20);
  double v42 = v44;
  *double v44 = v15;
  v42[1] = v17;
  *((unsigned char *)v42 + 16) = v21;
  return result;
}

void Models.ProgrammedText.mediaType.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 16);
}

void *Models.ProgrammedText.text.getter()
{
  uint64_t v1 = *(void **)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  if (*(unsigned char *)(v0 + 16))
  {
    id v3 = objc_msgSend(v1, sel_string);
    uint64_t v4 = sub_1B0869D98();

    sub_1B07BE788(v1, v2, 1);
    return (void *)v4;
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  return v1;
}

uint64_t Models.ProgrammedText.MediaType.init(rawValue:)@<X0>(char *a1@<X8>)
{
  uint64_t v2 = sub_1B086A778();
  uint64_t result = swift_bridgeObjectRelease();
  if (v2 == 1) {
    char v4 = 1;
  }
  else {
    char v4 = 2;
  }
  if (!v2) {
    char v4 = 0;
  }
  *a1 = v4;
  return result;
}

uint64_t Models.ProgrammedText.MediaType.rawValue.getter()
{
  if (*v0) {
    return 0xD000000000000015;
  }
  else {
    return 0x616C702F74786574;
  }
}

uint64_t sub_1B081201C(char *a1, char *a2)
{
  return sub_1B084A77C(*a1, *a2);
}

uint64_t sub_1B0812028()
{
  return sub_1B086A998();
}

uint64_t sub_1B08120B4()
{
  sub_1B0869E38();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B081212C()
{
  return sub_1B086A998();
}

uint64_t sub_1B08121B4@<X0>(char *a1@<X8>)
{
  return Models.ProgrammedText.MediaType.init(rawValue:)(a1);
}

void sub_1B08121C0(unint64_t *a1@<X8>)
{
  unint64_t v2 = 0x616C702F74786574;
  if (*v1) {
    unint64_t v2 = 0xD000000000000015;
  }
  unint64_t v3 = 0x80000001B0873E80;
  if (!*v1) {
    unint64_t v3 = 0xEA00000000006E69;
  }
  *a1 = v2;
  a1[1] = v3;
}

id Models.ProgrammedText.attributedText.getter()
{
  uint64_t v1 = *(void **)v0;
  if (*(unsigned char *)(v0 + 16))
  {
    return v1;
  }
  else
  {
    uint64_t v3 = *(void *)(v0 + 8);
    long long v7 = *(void **)v0;
    id v4 = objc_allocWithZone(MEMORY[0x1E4F28B18]);
    swift_bridgeObjectRetain();
    uint64_t v5 = (void *)sub_1B0869D68();
    sub_1B07BE788(v7, v3, 0);
    id v6 = objc_msgSend(v4, sel_initWithString_, v5);

    return v6;
  }
}

uint64_t sub_1B08122C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return Models.ProgrammedText.init(deserializing:using:)(a1, a2, a3);
}

uint64_t sub_1B08122DC(char *a1, char *a2)
{
  return sub_1B084A82C(*a1, *a2);
}

uint64_t sub_1B08122E8()
{
  return sub_1B086A998();
}

uint64_t sub_1B0812360()
{
  sub_1B0869E38();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B08123C4()
{
  return sub_1B086A998();
}

uint64_t sub_1B0812438@<X0>(char *a1@<X8>)
{
  uint64_t v2 = sub_1B086A778();
  uint64_t result = swift_bridgeObjectRelease();
  if (v2 == 1) {
    char v4 = 1;
  }
  else {
    char v4 = 2;
  }
  if (!v2) {
    char v4 = 0;
  }
  *a1 = v4;
  return result;
}

void sub_1B0812498(uint64_t *a1@<X8>)
{
  uint64_t v2 = 1954047348;
  if (!*v1) {
    uint64_t v2 = 0x646E696B24;
  }
  unint64_t v3 = 0xE500000000000000;
  if (*v1) {
    unint64_t v3 = 0xE400000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1B08124CC()
{
  if (*v0) {
    return 1954047348;
  }
  else {
    return 0x646E696B24;
  }
}

uint64_t sub_1B08124FC@<X0>(char *a1@<X8>)
{
  uint64_t v2 = sub_1B086A778();
  uint64_t result = swift_bridgeObjectRelease();
  if (v2 == 1) {
    char v4 = 1;
  }
  else {
    char v4 = 2;
  }
  if (!v2) {
    char v4 = 0;
  }
  *a1 = v4;
  return result;
}

void sub_1B0812560(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_1B081256C(uint64_t a1)
{
  unint64_t v2 = sub_1B0812A88();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B08125A8(uint64_t a1)
{
  unint64_t v2 = sub_1B0812A88();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t Models.ProgrammedText.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3B6A8);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B0812A88();
  sub_1B086A9C8();
  if (!v2)
  {
    uint64_t v9 = a2;
    LOBYTE(v29) = 0;
    uint64_t v10 = sub_1B086A798();
    unint64_t v12 = v11;
    LOBYTE(v29) = 1;
    id v13 = (id)sub_1B086A798();
    uint64_t v15 = v14;
    id v28 = v13;
    BOOL v16 = v10 == 0x6E69616C70 && v12 == 0xE500000000000000;
    if (v16 || (sub_1B086A8A8() & 1) != 0)
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      swift_bridgeObjectRelease();
      char v17 = 0;
    }
    else
    {
      BOOL v18 = v10 == 1751345522 && v12 == 0xE400000000000000;
      if (!v18 && (sub_1B086A8A8() & 1) == 0)
      {
        swift_bridgeObjectRelease();
        char v40 = 0;
        uint64_t v29 = 0;
        unint64_t v30 = 0xE000000000000000;
        sub_1B086A5E8();
        swift_bridgeObjectRelease();
        uint64_t v29 = v10;
        unint64_t v30 = v12;
        sub_1B0869E68();
        sub_1B086A638();
        swift_allocError();
        sub_1B0812ADC();
        sub_1B086A628();
        swift_bridgeObjectRelease();
        swift_willThrow();
        (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
      }
      swift_bridgeObjectRelease();
      id v19 = objc_msgSend(self, sel_systemFontOfSize_, 15.0);
      id v20 = sub_1B08107A4();
      uint64_t v26 = sub_1B0810938();
      uint64_t v27 = sub_1B0810938();

      uint64_t v29 = 10;
      unint64_t v30 = 0xE100000000000000;
      id v31 = v19;
      id v32 = v20;
      uint64_t v33 = 161644770;
      unint64_t v34 = 0xA400000000000000;
      uint64_t v35 = v26;
      uint64_t v36 = 606245;
      unint64_t v37 = 0xE300000000000000;
      uint64_t v38 = v27;
      char v39 = 0;
      id v21 = objc_allocWithZone((Class)type metadata accessor for NQMLStringGenerator());
      uint64_t v22 = sub_1B085F8C4((uint64_t)v28, v15, &v29);
      objc_msgSend(*(id *)&v22[OBJC_IVAR____TtC5JetUIP33_F1C4EBA6165AEBFE43471B55508F17DF19NQMLStringGenerator_parser], sel_parse);
      uint64_t v23 = OBJC_IVAR____TtC5JetUIP33_F1C4EBA6165AEBFE43471B55508F17DF19NQMLStringGenerator_accumulator;
      id v24 = objc_msgSend(*(id *)&v22[OBJC_IVAR____TtC5JetUIP33_F1C4EBA6165AEBFE43471B55508F17DF19NQMLStringGenerator_accumulator], sel_mutableString);
      if (qword_1E9B3A708 != -1) {
        swift_once();
      }
      sub_1B080B034((void *)qword_1E9B3BDD8);

      id v28 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28B18]), sel_initWithAttributedString_, *(void *)&v22[v23]);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      uint64_t v15 = 0;
      char v17 = 1;
    }
    *(void *)uint64_t v9 = v28;
    *(void *)(v9 + 8) = v15;
    *(unsigned char *)(v9 + 16) = v17;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1B0812A70@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return Models.ProgrammedText.init(from:)(a1, a2);
}

unint64_t sub_1B0812A88()
{
  unint64_t result = qword_1E9B3B6B0;
  if (!qword_1E9B3B6B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3B6B0);
  }
  return result;
}

unint64_t sub_1B0812ADC()
{
  unint64_t result = qword_1E9B3B6B8;
  if (!qword_1E9B3B6B8)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1E9B3B6A8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3B6B8);
  }
  return result;
}

unint64_t sub_1B0812B3C()
{
  unint64_t result = qword_1E9B3B6C0;
  if (!qword_1E9B3B6C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3B6C0);
  }
  return result;
}

void _s14ProgrammedTextOwxx(uint64_t a1)
{
}

uint64_t _s14ProgrammedTextOwCP_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_1B07B2F10(*(void **)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t _s14ProgrammedTextOwca(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_1B07B2F10(*(void **)a2, v4, v5);
  uint64_t v6 = *(void **)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  char v8 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  sub_1B07BE788(v6, v7, v8);
  return a1;
}

uint64_t _s14ProgrammedTextOwta(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  char v6 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v3;
  sub_1B07BE788(v4, v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for Models.ProgrammedText()
{
  return &type metadata for Models.ProgrammedText;
}

ValueMetadata *type metadata accessor for Models.ProgrammedText.MediaType()
{
  return &type metadata for Models.ProgrammedText.MediaType;
}

unsigned char *_s14ProgrammedTextO9MediaTypeOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B0812D80);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *_s14ProgrammedTextO10CodingKeysOMa()
{
  return &_s14ProgrammedTextO10CodingKeysON;
}

unint64_t sub_1B0812DBC()
{
  unint64_t result = qword_1E9B3B6C8;
  if (!qword_1E9B3B6C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3B6C8);
  }
  return result;
}

unint64_t sub_1B0812E14()
{
  unint64_t result = qword_1E9B3B6D0;
  if (!qword_1E9B3B6D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3B6D0);
  }
  return result;
}

unint64_t sub_1B0812E6C()
{
  unint64_t result = qword_1E9B3B6D8;
  if (!qword_1E9B3B6D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3B6D8);
  }
  return result;
}

void Baselines.init()(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

double Baselines.last.getter()
{
  return *(double *)(v0 + 8);
}

BOOL static Baselines.== infix(_:_:)(double *a1, double *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

void static Baselines.zero.getter(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void Baselines.first.setter(double a1)
{
  *uint64_t v1 = a1;
}

double (*Baselines.first.modify())(void)
{
  return nullsub_1;
}

void Baselines.last.setter(double a1)
{
  *(double *)(v1 + 8) = a1;
}

double (*Baselines.last.modify())(void)
{
  return nullsub_1;
}

BOOL sub_1B0812F54(double *a1, double *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

Swift::Void __swiftcall CGSize.subtract(insets:)(UIEdgeInsets insets)
{
  double v2 = v1[1] - (insets.top + insets.bottom);
  *uint64_t v1 = *v1 - (insets.left + insets.right);
  v1[1] = v2;
}

id UIView.measurements(fitting:in:)()
{
  return objc_msgSend(v0, sel_sizeThatFits_);
}

double UILabel.measurements(fitting:in:)(double a1, double a2)
{
  objc_msgSend(v2, sel_sizeThatFits_);
  *(void *)&double v7 = *(_OWORD *)&constrainWidth(of:toFit:)((CGSize)__PAIR128__(v6, v5), (CGSize)__PAIR128__(*(unint64_t *)&a2, *(unint64_t *)&a1));
  objc_msgSend(v2, sel__firstBaselineOffsetFromTop);
  objc_msgSend(v2, sel__baselineOffsetFromBottom);
  return v7;
}

double sub_1B0813050(void *a1, double a2)
{
  swift_unknownObjectRetain();
  id v4 = a1;
  double v5 = _sSo8UIButtonC5JetUIE12measurements7fitting2inSo14JUMeasurementsVSo6CGSizeV_So18UITraitEnvironment_ptF_0(a2);
  swift_unknownObjectRelease();

  return v5;
}

double _sSo8UIButtonC5JetUIE12measurements7fitting2inSo14JUMeasurementsVSo6CGSizeV_So18UITraitEnvironment_ptF_0(double a1)
{
  objc_msgSend(v1, sel_sizeThatFits_);
  double v3 = v2;
  CGFloat v5 = v4;
  objc_msgSend(v1, sel_bounds);
  CGFloat v9 = v8;
  CGFloat v11 = v10;
  BOOL v12 = v6 == 0.0;
  BOOL v13 = v7 == 0.0;
  if (!v12 || !v13) {
    CGFloat v5 = v7;
  }
  double v34 = v3;
  if (v12 && v13) {
    CGFloat v14 = v3;
  }
  else {
    CGFloat v14 = v6;
  }
  objc_msgSend(v1, sel_contentRectForBounds_);
  CGFloat v16 = v15;
  CGFloat v18 = v17;
  CGFloat v20 = v19;
  CGFloat v22 = v21;
  v36.origin.double x = v9;
  v36.origin.double y = v11;
  v36.size.CGFloat width = v14;
  v36.size.CGFloat height = v5;
  CGFloat Height = CGRectGetHeight(v36);
  v37.origin.double x = v16;
  v37.origin.double y = v18;
  v37.size.CGFloat width = v20;
  v37.size.CGFloat height = v22;
  CGRectGetMaxY(v37);
  id v23 = objc_msgSend(v1, sel_titleLabel);
  if (v23)
  {
    id v24 = v23;
    objc_msgSend(v23, sel__baselineOffsetFromBottom);
  }
  objc_msgSend(v1, sel_contentEdgeInsets, *(void *)&Height);
  objc_msgSend(v1, sel_titleEdgeInsets);
  objc_msgSend(v1, sel_contentEdgeInsets);
  objc_msgSend(v1, sel_titleEdgeInsets);
  id v25 = objc_msgSend(v1, sel_titleLabel);
  if (v25)
  {
    uint64_t v26 = v25;
    objc_msgSend(v25, sel__firstBaselineOffsetFromTop);
  }
  CGFloat v27 = v20;
  CGFloat v28 = v22;
  if (v34 <= a1) {
    double v29 = v34;
  }
  else {
    double v29 = a1;
  }
  CGFloat v31 = v18;
  CGFloat v30 = v16;
  CGRectGetMinY(*(CGRect *)(&v27 - 2));
  return v29;
}

uint64_t sub_1B08132D4()
{
  sub_1B0813408(v0 + 16, v0 + OBJC_IVAR____TtC5JetUI17JUActionPerformer_metricsContext);
  sub_1B07BBD78(v0 + 16, (uint64_t)v5);
  uint64_t v1 = swift_allocObject();
  sub_1B07BA8FC(v5, v1 + 16);
  sub_1B07BBD78(v0 + 16, (uint64_t)v5);
  uint64_t v2 = swift_allocObject();
  sub_1B07BA8FC(v5, v2 + 16);
  void v4[3] = sub_1B0869968();
  _OWORD v4[4] = MEMORY[0x1E4F713E0];
  __swift_allocate_boxed_opaque_existential_0(v4);
  sub_1B0869958();
  sub_1B0869BB8();
  swift_release();
  swift_release();
  swift_release();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
}

uint64_t sub_1B0813408(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = a2;
  uint64_t v29 = a1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(qword_1E9B3B008);
  MEMORY[0x1F4188790](v3 - 8);
  CGFloat v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_1B08699F8();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  id v25 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1B0869908();
  uint64_t v28 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  CGFloat v11 = (char *)&v24 - v10;
  uint64_t v26 = v2;
  sub_1B08698D8();
  uint64_t v12 = sub_1B08698E8();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  double v15 = (char *)&v24 - v14;
  sub_1B07E27EC(v27, (uint64_t)v5);
  uint64_t v16 = v7;
  double v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  uint64_t v18 = v6;
  if (v17(v5, 1, v6) == 1)
  {
    sub_1B07BBE14((uint64_t)v5, qword_1E9B3B008);
    double v19 = (unsigned int *)MEMORY[0x1E4F712D0];
  }
  else
  {
    CGFloat v20 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
    double v21 = v25;
    v20(v25, v5, v18);
    v20(v15, v21, v18);
    double v19 = (unsigned int *)MEMORY[0x1E4F712C8];
  }
  (*(void (**)(char *, void, uint64_t))(v13 + 104))(v15, *v19, v12);
  uint64_t v22 = sub_1B08698F8();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v11, v9);
  return v22;
}

uint64_t sub_1B0813754(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_1B0869688();
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v4 = sub_1B08697E8();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v14[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E4F711E0], v4);
  char v8 = sub_1B08697D8();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if (v8)
  {
    sub_1B0869BD8();
    __swift_project_boxed_opaque_existential_1(v15, v15[3]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E9B3AA70);
    sub_1B08696C8();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_1B086D960;
    sub_1B0869678();
    sub_1B0869668();
    uint64_t v10 = a2[3];
    CGFloat v11 = __swift_project_boxed_opaque_existential_1(a2, v10);
    void v14[3] = v10;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v14);
    (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v10 - 8) + 16))(boxed_opaque_existential_0, v11, v10);
    sub_1B0869658();
    sub_1B07BBE14((uint64_t)v14, (uint64_t *)&unk_1EB5962E0);
    sub_1B0869668();
    sub_1B0869698();
    sub_1B0869618();
    sub_1B0869AD8();
    swift_bridgeObjectRelease();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  }
  return result;
}

uint64_t sub_1B0813A54(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_1B0869688();
  MEMORY[0x1F4188790](v3 - 8);
  sub_1B0869BD8();
  __swift_project_boxed_opaque_existential_1(v12, v12[3]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E9B3AA70);
  sub_1B08696C8();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_1B086C130;
  sub_1B0869678();
  sub_1B0869668();
  uint64_t v4 = a2[3];
  uint64_t v5 = __swift_project_boxed_opaque_existential_1(a2, v4);
  uint64_t v11 = v4;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v10);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v4 - 8) + 16))(boxed_opaque_existential_0, v5, v4);
  sub_1B0869658();
  sub_1B07BBE14((uint64_t)v10, (uint64_t *)&unk_1EB5962E0);
  sub_1B0869668();
  swift_getErrorValue();
  uint64_t v11 = v9;
  uint64_t v7 = __swift_allocate_boxed_opaque_existential_0(v10);
  (*(void (**)(uint64_t *))(*(void *)(v9 - 8) + 16))(v7);
  sub_1B0869638();
  sub_1B07BBE14((uint64_t)v10, (uint64_t *)&unk_1EB5962E0);
  sub_1B0869668();
  sub_1B0869698();
  sub_1B0869AD8();
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
}

uint64_t sub_1B0813D18()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  sub_1B07BBE14(v0 + OBJC_IVAR____TtC5JetUI17JUActionPerformer_metricsContext, qword_1E9B3B008);
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t sub_1B0813D9C()
{
  return type metadata accessor for JUActionPerformer();
}

uint64_t type metadata accessor for JUActionPerformer()
{
  uint64_t result = qword_1E9B3B6F0;
  if (!qword_1E9B3B6F0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1B0813DF0()
{
  sub_1B0813E98();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_1B0813E98()
{
  if (!qword_1E9B3B700)
  {
    sub_1B08699F8();
    unint64_t v0 = sub_1B086A3B8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9B3B700);
    }
  }
}

uint64_t sub_1B0813EF0()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);

  return MEMORY[0x1F4186498](v0, 56, 7);
}

uint64_t sub_1B0813F28(uint64_t a1)
{
  return sub_1B0813754(a1, (void *)(v1 + 16));
}

uint64_t sub_1B0813F30(uint64_t a1)
{
  return sub_1B0813A54(a1, (void *)(v1 + 16));
}

uint64_t static DiffableData.makeSnapshot<A, B>(fromSections:withItemsAt:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v73 = a4;
  uint64_t v78 = a3;
  uint64_t v79 = a2;
  uint64_t v7 = *a2;
  uint64_t v8 = sub_1B0869688();
  MEMORY[0x1F4188790](v8 - 8);
  CGFloat v71 = (char *)v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = sub_1B0869C18();
  uint64_t v10 = *(void *)(v70 - 8);
  MEMORY[0x1F4188790](v70);
  CGFloat v69 = (char *)v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (uint64_t *)(v7 + *MEMORY[0x1E4FBC5F0]);
  uint64_t v13 = *v12;
  uint64_t v14 = sub_1B08697A8();
  uint64_t v68 = sub_1B086A3B8();
  uint64_t v86 = *(void *)(v68 - 8);
  MEMORY[0x1F4188790](v68);
  CGRect v67 = (char *)v56 - v15;
  uint64_t v16 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v17);
  CGRect v66 = (char *)v56 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  double v21 = (char *)v56 - v20;
  v56[0] = v22;
  MEMORY[0x1F4188790](v23);
  id v80 = (char *)v56 - v24;
  uint64_t v83 = v12[1];
  uint64_t v65 = *(void *)(v83 + 16);
  uint64_t v25 = sub_1B08697A8();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v27 = swift_getWitnessTable();
  uint64_t v72 = a5;
  uint64_t v64 = v25;
  uint64_t v63 = WitnessTable;
  uint64_t v62 = v27;
  sub_1B0869378();
  uint64_t v28 = swift_bridgeObjectRetain();
  uint64_t v87 = a1;
  if (!MEMORY[0x1B3E97990](v28, v13))
  {
    return swift_bridgeObjectRelease();
  }
  uint64_t v29 = 0;
  uint64_t v74 = 0;
  __n128 v82 = (void (**)(char *, uint64_t *, uint64_t))(v16 + 16);
  double v76 = (void (**)(char *, char *, uint64_t))(v16 + 32);
  uint64_t v61 = v14 - 8;
  CGRect v60 = (void (**)(char *, uint64_t))(v86 + 8);
  id v75 = (void (**)(char *, uint64_t))(v16 + 8);
  CGRect v59 = (void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  CGFloat v58 = (void (**)(char *, uint64_t))(v10 + 8);
  long long v57 = xmmword_1B086D960;
  void v56[3] = 0x80000001B08752D0;
  v56[2] = 0x80000001B08752F0;
  v56[1] = 0x80000001B0875310;
  uint64_t v86 = v14;
  uint64_t v77 = v16;
  id v81 = v21;
  while (1)
  {
    char v44 = sub_1B086A008();
    sub_1B0869FB8();
    if ((v44 & 1) == 0) {
      break;
    }
    uint64_t v45 = *(void (**)(char *, uint64_t *, uint64_t))(v16 + 16);
    double v46 = v80;
    uint64_t result = ((uint64_t (*)(char *, unint64_t, uint64_t))v45)(v80, v87+ ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))+ *(void *)(v16 + 72) * v29, v13);
    uint64_t v48 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      goto LABEL_19;
    }
LABEL_7:
    uint64_t v85 = v29;
    (*v76)(v21, v46, v13);
    swift_getAtKeyPath();
    CGFloat v49 = v21;
    uint64_t v50 = v88[0];
    uint64_t v51 = swift_getWitnessTable();
    char v52 = sub_1B086A248();
    uint64_t v84 = v48;
    if (v52)
    {
      uint64_t v35 = v13;
      swift_bridgeObjectRelease();
      if (qword_1E9B3A6A0 != -1) {
        swift_once();
      }
      uint64_t v53 = v70;
      uint64_t v54 = __swift_project_value_buffer(v70, (uint64_t)qword_1E9B46108);
      double v55 = v69;
      (*v59)(v69, v54, v53);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E9B3AA70);
      sub_1B08696C8();
      *(_OWORD *)(swift_allocObject() + 16) = v57;
      sub_1B0869678();
      sub_1B0869668();
      uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      __swift_allocate_boxed_opaque_existential_0(v88);
      sub_1B086A5F8();
      sub_1B0869628();
      sub_1B07B86F8((uint64_t)v88);
      sub_1B0869668();
      sub_1B0869698();
      sub_1B0869618();
      sub_1B0869AE8();
      swift_bridgeObjectRelease();
      (*v58)(v55, v53);
      uint64_t v14 = v86;
    }
    else
    {
      sub_1B086A858();
      uint64_t v30 = *(void *)(v14 - 8);
      swift_allocObject();
      uint64_t v31 = sub_1B0869FA8();
      v45(v66, (uint64_t *)v49, v13);
      uint64_t v32 = v78;
      sub_1B0869798();
      v88[0] = v31;
      uint64_t v33 = sub_1B086A098();
      nullsub_1(v33);
      uint64_t v34 = v64;
      v88[0] = v86;
      v88[1] = v64;
      void v88[2] = v63;
      uint64_t AssociatedTypeWitness = v62;
      sub_1B0869388();
      uint64_t v35 = v13;
      sub_1B0869318();
      uint64_t v36 = swift_bridgeObjectRelease();
      v88[0] = v50;
      MEMORY[0x1F4188790](v36);
      uint64_t v37 = v65;
      v56[-4] = v13;
      v56[-3] = v37;
      uint64_t v38 = v73;
      v56[-2] = v32;
      v56[-1] = v38;
      uint64_t v39 = v34;
      uint64_t v40 = v74;
      sub_1B0814A24((void (*)(char *, char *))sub_1B0815FEC, (uint64_t)&v56[-6], v83, v39, MEMORY[0x1E4FBC248], v51, MEMORY[0x1E4FBC278], v41);
      uint64_t v74 = v40;
      swift_bridgeObjectRelease();
      uint64_t v14 = v86;
      double v42 = v67;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v30 + 56))(v67, 1, 1, v86);
      sub_1B08692F8();
      swift_bridgeObjectRelease();
      (*v60)(v42, v68);
    }
    double v21 = v81;
    (*v75)(v81, v35);
    uint64_t v43 = MEMORY[0x1B3E97990](v87, v35);
    uint64_t v29 = v85 + 1;
    uint64_t v13 = v35;
    uint64_t v16 = v77;
    if (v84 == v43) {
      return swift_bridgeObjectRelease();
    }
  }
  uint64_t result = sub_1B086A608();
  if (v56[0] != 8) {
    goto LABEL_20;
  }
  v88[0] = result;
  uint64_t v45 = *v82;
  double v46 = v80;
  (*v82)(v80, v88, v13);
  uint64_t result = swift_unknownObjectRelease();
  uint64_t v48 = v29 + 1;
  if (!__OFADD__(v29, 1)) {
    goto LABEL_7;
  }
LABEL_19:
  __break(1u);
LABEL_20:
  __break(1u);
  return result;
}

uint64_t sub_1B0814948(uint64_t a1)
{
  __n128 v1 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, __n128))(v3 + 16))((char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v1);
  return sub_1B0869798();
}

uint64_t sub_1B0814A24(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v28 = a5;
  uint64_t v29 = a8;
  uint64_t v38 = a1;
  uint64_t v39 = a2;
  uint64_t v27 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v40 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v33 = *(void (***)(char *, uint64_t))(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v11 = (char *)&v26 - v10;
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = swift_getAssociatedTypeWitness();
  uint64_t v30 = *(void *)(v15 - 8);
  uint64_t v31 = v15;
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v26 - v16;
  uint64_t v18 = sub_1B086A218();
  if (!v18) {
    return sub_1B0869FE8();
  }
  uint64_t v19 = v18;
  uint64_t v43 = sub_1B0869C78();
  uint64_t v32 = sub_1B086A6A8();
  sub_1B086A678();
  uint64_t v36 = v8;
  uint64_t result = sub_1B086A208();
  if (v19 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v34 = (void (**)(char *))(v33 + 2);
    uint64_t v35 = v14;
    ++v33;
    while (1)
    {
      double v21 = (void (*)(char *, void))sub_1B086A268();
      uint64_t v22 = v11;
      uint64_t v23 = v11;
      uint64_t v24 = AssociatedTypeWitness;
      (*v34)(v22);
      v21(v42, 0);
      uint64_t v25 = v41;
      v38(v23, v40);
      if (v25) {
        break;
      }
      uint64_t v41 = 0;
      (*v33)(v23, v24);
      sub_1B086A688();
      sub_1B086A228();
      --v19;
      uint64_t v11 = v23;
      if (!v19)
      {
        (*(void (**)(char *, uint64_t))(v30 + 8))(v17, v31);
        return v43;
      }
    }
    (*v33)(v23, v24);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v17, v31);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v27 + 32))(v29, v40, v28);
  }
  return result;
}

uint64_t static DiffableData.makeSnapshot<A>(fromShelves:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v83 = a3;
  uint64_t v7 = sub_1B0869688();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v63 = (char *)v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = sub_1B0869C18();
  uint64_t v86 = *(void *)(v62 - 8);
  MEMORY[0x1F4188790](v62);
  uint64_t v74 = (char *)v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB596230);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_1B08697A8();
  uint64_t v70 = sub_1B086A3B8();
  uint64_t v15 = *(void *)(v70 - 8);
  MEMORY[0x1F4188790](v70);
  CGFloat v69 = (char *)v57 - v16;
  uint64_t v17 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v68 = (char *)v57 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  id v80 = (char *)v57 - v21;
  v57[0] = v22;
  MEMORY[0x1F4188790](v23);
  uint64_t v87 = (char *)v57 - v24;
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t v26 = sub_1B0816010();
  uint64_t v82 = a4;
  uint64_t v27 = a1;
  uint64_t v67 = WitnessTable;
  unint64_t v66 = v26;
  sub_1B0869378();
  uint64_t v28 = swift_bridgeObjectRetain();
  if (MEMORY[0x1B3E97990](v28, a2))
  {
    uint64_t v79 = v10;
    uint64_t v29 = 0;
    uint64_t v85 = (void (**)(char *, uint64_t *, uint64_t))(v17 + 16);
    uint64_t v77 = (void (**)(char *, char *, uint64_t))(v17 + 32);
    uint64_t v65 = v14 - 8;
    uint64_t v64 = (void (**)(char *, uint64_t))(v15 + 8);
    uint64_t v78 = v17;
    double v76 = (void (**)(char *, uint64_t))(v17 + 8);
    CGRect v60 = (void (**)(char *, uint64_t, uint64_t))(v86 + 16);
    CGRect v59 = (void (**)(char *, uint64_t))(v86 + 8);
    long long v58 = xmmword_1B086D960;
    void v57[3] = 0x80000001B0875350;
    v57[2] = 0x80000001B08752F0;
    v57[1] = 0x80000001B0875370;
    uint64_t v73 = a2;
    uint64_t v84 = v14;
    uint64_t v30 = v80;
    uint64_t v31 = v14;
    uint64_t v32 = a2;
    uint64_t v75 = a1;
    uint64_t v61 = v11 + 32;
    while (1)
    {
      char v35 = sub_1B086A008();
      sub_1B0869FB8();
      if (v35)
      {
        unint64_t v36 = v27
            + ((*(unsigned __int8 *)(v78 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v78 + 80))
            + *(void *)(v78 + 72) * v29;
        uint64_t v37 = *(void (**)(char *, uint64_t *, uint64_t))(v78 + 16);
        uint64_t v38 = v32;
        uint64_t result = ((uint64_t (*)(char *, unint64_t, uint64_t))v37)(v87, v36, v32);
      }
      else
      {
        uint64_t result = sub_1B086A608();
        if (v57[0] != 8) {
          goto LABEL_28;
        }
        v89[0] = result;
        uint64_t v37 = *v85;
        uint64_t v38 = v32;
        (*v85)(v87, v89, v32);
        uint64_t result = swift_unknownObjectRelease();
      }
      BOOL v40 = __OFADD__(v29, 1);
      uint64_t v41 = v29 + 1;
      if (v40) {
        break;
      }
      uint64_t v32 = v38;
      (*v77)(v30, v87, v38);
      uint64_t v42 = *(void *)(sub_1B08696D8() + 16);
      swift_bridgeObjectRelease();
      uint64_t v86 = v41;
      if (v42)
      {
        sub_1B086A858();
        uint64_t v81 = *(void *)(v31 - 8);
        swift_allocObject();
        uint64_t v43 = sub_1B0869FA8();
        v37(v68, (uint64_t *)v30, v38);
        sub_1B0869798();
        v89[0] = v43;
        uint64_t v44 = sub_1B086A098();
        nullsub_1(v44);
        v89[0] = v31;
        v89[1] = v79;
        v89[2] = v67;
        uint64_t AssociatedTypeWitness = v66;
        uint64_t v45 = sub_1B0869388();
        sub_1B0869318();
        swift_bridgeObjectRelease();
        uint64_t v46 = sub_1B08696D8();
        int64_t v47 = *(void *)(v46 + 16);
        if (v47)
        {
          uint64_t v72 = v45;
          uint64_t v91 = MEMORY[0x1E4FBC860];
          sub_1B081606C(0, v47, 0);
          uint64_t v71 = v46;
          uint64_t v48 = v46 + 32;
          uint64_t v49 = v91;
          uint64_t v50 = v79;
          do
          {
            sub_1B07BBD78(v48, (uint64_t)v89);
            sub_1B07BBD78((uint64_t)v89, (uint64_t)v88);
            sub_1B0869788();
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v89);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              sub_1B081606C(0, *(void *)(v49 + 16) + 1, 1);
              uint64_t v49 = v91;
            }
            unint64_t v52 = *(void *)(v49 + 16);
            unint64_t v51 = *(void *)(v49 + 24);
            if (v52 >= v51 >> 1)
            {
              sub_1B081606C(v51 > 1, v52 + 1, 1);
              uint64_t v49 = v91;
            }
            *(void *)(v49 + 16) = v52 + 1;
            (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v49+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(void *)(v11 + 72) * v52, v13, v50);
            v48 += 40;
            --v47;
          }
          while (v47);
          swift_bridgeObjectRelease();
          uint64_t v32 = v73;
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        uint64_t v33 = v69;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v81 + 56))(v69, 1, 1, v84);
        sub_1B08692F8();
        swift_bridgeObjectRelease();
        (*v64)(v33, v70);
        uint64_t v27 = v75;
        uint64_t v30 = v80;
      }
      else
      {
        if (qword_1E9B3A6A0 != -1) {
          swift_once();
        }
        uint64_t v53 = v62;
        uint64_t v54 = __swift_project_value_buffer(v62, (uint64_t)qword_1E9B46108);
        (*v60)(v74, v54, v53);
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E9B3AA70);
        uint64_t v81 = *(void *)(*(void *)(sub_1B08696C8() - 8) + 72);
        *(_OWORD *)(swift_allocObject() + 16) = v58;
        sub_1B0869678();
        sub_1B0869668();
        uint64_t v55 = v73;
        uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
        __swift_allocate_boxed_opaque_existential_0(v89);
        uint64_t v30 = v80;
        sub_1B086A5F8();
        sub_1B0869628();
        sub_1B07B86F8((uint64_t)v89);
        sub_1B0869668();
        sub_1B0869698();
        uint64_t v32 = v55;
        sub_1B0869618();
        double v56 = v74;
        sub_1B0869AE8();
        swift_bridgeObjectRelease();
        (*v59)(v56, v53);
        uint64_t v27 = v75;
      }
      (*v76)(v30, v32);
      uint64_t v34 = MEMORY[0x1B3E97990](v27, v32);
      uint64_t v29 = v86;
      uint64_t v31 = v84;
      if (v86 == v34) {
        return swift_bridgeObjectRelease();
      }
    }
    __break(1u);
LABEL_28:
    __break(1u);
  }
  else
  {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t static DiffableData.joinSnapshots<A, B>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B08697A8();
  uint64_t v17 = sub_1B08697A8();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v19 = swift_getWitnessTable();
  uint64_t v8 = sub_1B0869388();
  __n128 v9 = MEMORY[0x1F4188790](v8);
  uint64_t v16 = a2;
  (*(void (**)(unsigned char *, uint64_t, uint64_t, __n128))(v11 + 16))(&v13[-v10], a1, v8, v9);
  uint64_t v14 = a3;
  uint64_t v15 = a4;
  sub_1B086A098();
  swift_getWitnessTable();
  return sub_1B0869F38();
}

uint64_t sub_1B0815AC0(uint64_t a1, uint64_t a2)
{
  uint64_t v45 = a1;
  uint64_t v3 = sub_1B08697A8();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v44 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = v5;
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v34 - v7;
  uint64_t v43 = sub_1B086A3B8();
  uint64_t v9 = *(void *)(v43 - 8);
  MEMORY[0x1F4188790](v43);
  uint64_t v42 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  int64_t v47 = (char *)&v34 - v12;
  uint64_t v13 = sub_1B08697A8();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v15 = swift_getWitnessTable();
  v52[0] = v3;
  v52[1] = v13;
  _OWORD v52[2] = WitnessTable;
  v52[3] = v15;
  uint64_t v41 = sub_1B0869388();
  uint64_t v46 = a2;
  uint64_t v16 = sub_1B0869368();
  if (MEMORY[0x1B3E97990](v16, v3))
  {
    uint64_t v17 = 0;
    uint64_t v53 = (void (**)(char *, unint64_t, uint64_t))(v4 + 16);
    unint64_t v51 = (uint64_t (**)(char *, char *, uint64_t))(v4 + 32);
    uint64_t v18 = (void (**)(void, void, void, void))(v4 + 56);
    uint64_t v39 = v16;
    BOOL v40 = (unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48);
    uint64_t v36 = v4 + 8;
    uint64_t v37 = (void (**)(char *, uint64_t))(v9 + 8);
    uint64_t v38 = v4;
    while (1)
    {
      char v19 = sub_1B086A008();
      sub_1B0869FB8();
      uint64_t v20 = v47;
      if (v19)
      {
        uint64_t v21 = *(void (**)(char *, unint64_t, uint64_t))(v4 + 16);
        v21(v8, v16+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v17, v3);
      }
      else
      {
        uint64_t result = sub_1B086A608();
        if (v35 != 8) {
          goto LABEL_14;
        }
        v52[0] = result;
        uint64_t v21 = *v53;
        (*v53)(v8, (unint64_t)v52, v3);
        swift_unknownObjectRelease();
      }
      uint64_t v22 = *v51;
      uint64_t result = (*v51)(v20, v8, v3);
      if (__OFADD__(v17, 1)) {
        break;
      }
      uint64_t v49 = v17 + 1;
      uint64_t v50 = (void (*)(char *, uint64_t, uint64_t, uint64_t))*v18;
      v50(v20, 0, 1, v3);
      if ((*v40)(v20, 1, v3) == 1) {
        return swift_bridgeObjectRelease();
      }
      uint64_t v24 = v44;
      v22(v44, v20, v3);
      sub_1B086A858();
      swift_allocObject();
      uint64_t v25 = sub_1B0869FA8();
      v21(v26, (unint64_t)v24, v3);
      v52[0] = v25;
      uint64_t v27 = sub_1B086A098();
      nullsub_1(v27);
      uint64_t v48 = v17;
      sub_1B0869318();
      swift_bridgeObjectRelease();
      sub_1B0869348();
      uint64_t v28 = v18;
      uint64_t v29 = v42;
      v50(v42, 1, 1, v3);
      uint64_t v30 = v48;
      uint64_t v4 = v38;
      sub_1B08692F8();
      swift_bridgeObjectRelease();
      uint64_t v31 = v29;
      uint64_t v18 = v28;
      (*v37)(v31, v43);
      uint64_t v32 = v24;
      uint64_t v16 = v39;
      (*(void (**)(char *, uint64_t))(v4 + 8))(v32, v3);
      uint64_t v33 = MEMORY[0x1B3E97990](v16, v3);
      uint64_t v17 = v30 + 1;
      if (v49 == v33)
      {
        v50(v47, 1, 1, v3);
        return swift_bridgeObjectRelease();
      }
    }
    __break(1u);
LABEL_14:
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v47, 1, 1, v3);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1B0815FEC(uint64_t a1)
{
  return sub_1B0814948(a1);
}

unint64_t sub_1B0816010()
{
  unint64_t result = qword_1EB596228;
  if (!qword_1EB596228)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EB596230);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB596228);
  }
  return result;
}

size_t sub_1B081606C(size_t a1, int64_t a2, char a3)
{
  size_t result = sub_1B08160B8(a1, a2, a3, (void *)*v3);
  size_t *v3 = result;
  return result;
}

uint64_t sub_1B081608C(uint64_t a1, uint64_t a2)
{
  return sub_1B0815AC0(a1, a2);
}

ValueMetadata *type metadata accessor for DiffableData()
{
  return &type metadata for DiffableData;
}

size_t sub_1B08160B8(size_t result, int64_t a2, char a3, void *a4)
{
  char v5 = result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v13 = (void *)MEMORY[0x1E4FBC860];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EB596270);
  uint64_t v10 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EB596230) - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (void *)swift_allocObject();
  size_t result = _swift_stdlib_malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v12 == 0x8000000000000000 && v11 == -1) {
    goto LABEL_29;
  }
  _OWORD v13[2] = v8;
  void v13[3] = 2 * ((uint64_t)(result - v12) / v11);
LABEL_19:
  uint64_t v15 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EB596230) - 8);
  if (v5)
  {
    if (v13 < a4
      || (unint64_t v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80),
          (char *)v13 + v16 >= (char *)a4 + v16 + *(void *)(v15 + 72) * v8))
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (size_t)v13;
}

uint64_t sub_1B0816294(uint64_t a1)
{
  return sub_1B07C20FC(a1, qword_1E9B3B708, MEMORY[0x1E4FB7E30]);
}

uint64_t static JULoadingViewController.PresentationContext.inline.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1B07B33DC(&qword_1E9B3A638, (uint64_t)qword_1E9B3B708, a1);
}

uint64_t sub_1B08162CC(uint64_t a1)
{
  return sub_1B07C20FC(a1, qword_1EB595790, MEMORY[0x1E4FB7E38]);
}

uint64_t static JULoadingViewController.PresentationContext.fullCover.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1B07B33DC(qword_1EB5956A0, (uint64_t)qword_1EB595790, a1);
}

id JULoadingViewController.__allocating_init(label:presentationContext:pageRenderMetrics:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (char *)objc_allocWithZone(v4);
  uint64_t v10 = &v9[OBJC_IVAR____TtC5JetUI23JULoadingViewController_label];
  *(void *)uint64_t v10 = a1;
  *((void *)v10 + 1) = a2;
  sub_1B07B573C(a3, (uint64_t)&v9[OBJC_IVAR____TtC5JetUI23JULoadingViewController_presentationContext]);
  *(void *)&v9[OBJC_IVAR____TtC5JetUI23JULoadingViewController_pageRenderMetrics] = a4;
  v13.receiver = v9;
  v13.super_class = v4;
  id v11 = objc_msgSendSuper2(&v13, sel_initWithNibName_bundle_, 0, 0);
  sub_1B07B57A0(a3);
  return v11;
}

id JULoadingViewController.__allocating_init(label:)(uint64_t a1, uint64_t a2)
{
  char v5 = (char *)objc_allocWithZone(v2);
  unint64_t v6 = &v5[OBJC_IVAR____TtC5JetUI23JULoadingViewController_label];
  *(void *)unint64_t v6 = a1;
  *((void *)v6 + 1) = a2;
  uint64_t v7 = qword_1E9B3A638;
  uint64_t v8 = v5;
  if (v7 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for JULoadingViewController.PresentationContext(0);
  uint64_t v10 = __swift_project_value_buffer(v9, (uint64_t)qword_1E9B3B708);
  sub_1B07B573C(v10, (uint64_t)&v8[OBJC_IVAR____TtC5JetUI23JULoadingViewController_presentationContext]);
  *(void *)&v8[OBJC_IVAR____TtC5JetUI23JULoadingViewController_pageRenderMetrics] = 0;

  v12.receiver = v8;
  v12.super_class = v2;
  return objc_msgSendSuper2(&v12, sel_initWithNibName_bundle_, 0, 0);
}

id JULoadingViewController.init(label:)(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  unint64_t v6 = &v2[OBJC_IVAR____TtC5JetUI23JULoadingViewController_label];
  *(void *)unint64_t v6 = a1;
  *((void *)v6 + 1) = a2;
  uint64_t v7 = qword_1E9B3A638;
  uint64_t v8 = v2;
  if (v7 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for JULoadingViewController.PresentationContext(0);
  uint64_t v10 = __swift_project_value_buffer(v9, (uint64_t)qword_1E9B3B708);
  sub_1B07B573C(v10, (uint64_t)&v8[OBJC_IVAR____TtC5JetUI23JULoadingViewController_presentationContext]);
  *(void *)&v8[OBJC_IVAR____TtC5JetUI23JULoadingViewController_pageRenderMetrics] = 0;

  v12.receiver = v8;
  v12.super_class = ObjectType;
  return objc_msgSendSuper2(&v12, sel_initWithNibName_bundle_, 0, 0);
}

id JULoadingViewController.__allocating_init(label:presentationContext:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (char *)objc_allocWithZone(v3);
  uint64_t v8 = &v7[OBJC_IVAR____TtC5JetUI23JULoadingViewController_label];
  *(void *)uint64_t v8 = a1;
  *((void *)v8 + 1) = a2;
  sub_1B07B573C(a3, (uint64_t)&v7[OBJC_IVAR____TtC5JetUI23JULoadingViewController_presentationContext]);
  *(void *)&v7[OBJC_IVAR____TtC5JetUI23JULoadingViewController_pageRenderMetrics] = 0;
  v11.receiver = v7;
  v11.super_class = v3;
  id v9 = objc_msgSendSuper2(&v11, sel_initWithNibName_bundle_, 0, 0);
  sub_1B07B57A0(a3);
  return v9;
}

id JULoadingViewController.init(label:presentationContext:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v8 = &v3[OBJC_IVAR____TtC5JetUI23JULoadingViewController_label];
  *(void *)uint64_t v8 = a1;
  *((void *)v8 + 1) = a2;
  sub_1B07B573C(a3, (uint64_t)&v3[OBJC_IVAR____TtC5JetUI23JULoadingViewController_presentationContext]);
  *(void *)&v3[OBJC_IVAR____TtC5JetUI23JULoadingViewController_pageRenderMetrics] = 0;
  v11.receiver = v3;
  v11.super_class = ObjectType;
  id v9 = objc_msgSendSuper2(&v11, sel_initWithNibName_bundle_, 0, 0);
  sub_1B07B57A0(a3);
  return v9;
}

id JULoadingViewController.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void JULoadingViewController.init(coder:)()
{
}

Swift::Void __swiftcall JULoadingViewController.encode(with:)(NSCoder with)
{
}

id JULoadingViewController.__allocating_init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  if (a2)
  {
    unint64_t v6 = (void *)sub_1B0869D68();
    swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v6 = 0;
  }
  id v7 = objc_msgSend(objc_allocWithZone(v4), sel_initWithNibName_bundle_, v6, a3);

  return v7;
}

void JULoadingViewController.init(nibName:bundle:)()
{
}

id JULoadingViewController.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id static ObjCFunctions.makeLoadingViewController(withLabel:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for JULoadingViewController.PresentationContext(0);
  MEMORY[0x1F4188790](v4);
  unint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = qword_1EB595EB0;
  swift_bridgeObjectRetain();
  if (v7 != -1) {
    swift_once();
  }
  uint64_t v8 = __swift_project_value_buffer(v4, (uint64_t)qword_1EB595F30);
  sub_1B07B573C(v8, (uint64_t)v6);
  id v9 = (objc_class *)type metadata accessor for JULoadingViewController(0);
  uint64_t v10 = (char *)objc_allocWithZone(v9);
  objc_super v11 = &v10[OBJC_IVAR____TtC5JetUI23JULoadingViewController_label];
  *(void *)objc_super v11 = a1;
  *((void *)v11 + 1) = a2;
  sub_1B07B573C((uint64_t)v6, (uint64_t)&v10[OBJC_IVAR____TtC5JetUI23JULoadingViewController_presentationContext]);
  *(void *)&v10[OBJC_IVAR____TtC5JetUI23JULoadingViewController_pageRenderMetrics] = 0;
  v14.receiver = v10;
  v14.super_class = v9;
  id v12 = objc_msgSendSuper2(&v14, sel_initWithNibName_bundle_, 0, 0);
  sub_1B07B57A0((uint64_t)v6);
  return v12;
}

uint64_t sub_1B0816ABC()
{
  return type metadata accessor for JULoadingViewController(0);
}

uint64_t method lookup function for JULoadingViewController(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for JULoadingViewController);
}

uint64_t dispatch thunk of JULoadingViewController.__allocating_init(label:presentationContext:pageRenderMetrics:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of JULoadingViewController.__allocating_init(label:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of JULoadingViewController.__allocating_init(label:presentationContext:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t initializeBufferWithCopyOfBuffer for JULoadingViewController.PresentationContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1B08692D8();
  uint64_t v5 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);

  return v5(a1, a2, v4);
}

uint64_t destroy for JULoadingViewController.PresentationContext(uint64_t a1)
{
  uint64_t v2 = sub_1B08692D8();
  id v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(a1, v2);
}

uint64_t initializeWithCopy for JULoadingViewController.PresentationContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1B08692D8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for JULoadingViewController.PresentationContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1B08692D8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for JULoadingViewController.PresentationContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1B08692D8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for JULoadingViewController.PresentationContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1B08692D8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for JULoadingViewController.PresentationContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B0816D8C);
}

uint64_t sub_1B0816D8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1B08692D8();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for JULoadingViewController.PresentationContext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B0816E0C);
}

uint64_t sub_1B0816E0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1B08692D8();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t Resize.init(_:width:height:firstBaseline:lastBaseline:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[5];
  __swift_project_boxed_opaque_existential_1(a1, v12);
  Measurable.placeable.getter(v12, v13, v19);
  sub_1B07BA7F4(a2, (uint64_t)v18);
  sub_1B07BA7F4(a3, (uint64_t)v17);
  sub_1B07BA7F4(a4, (uint64_t)v16);
  sub_1B07BA7F4(a5, (uint64_t)v15);
  Resize.init(_:width:height:firstBaseline:lastBaseline:)(v19, v18, v17, v16, v15, a6);
  sub_1B07BABF8(a5);
  sub_1B07BABF8(a4);
  sub_1B07BABF8(a3);
  sub_1B07BABF8(a2);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t JUPlaceable.placeable.getter@<X0>(void *a1@<X8>)
{
  swift_unknownObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB595770);
  if (swift_dynamicCast())
  {
    sub_1B07BA8FC(&v5, (uint64_t)a1);
    return swift_unknownObjectRelease();
  }
  else
  {
    swift_unknownObjectRelease();
    type metadata accessor for _PlaceableAsJUPlaceable();
    uint64_t v4 = swift_dynamicCastClass();
    if (v4)
    {
      return sub_1B07BBD78(v4 + OBJC_IVAR____TtC5JetUI23_PlaceableAsJUPlaceable_base, (uint64_t)a1);
    }
    else
    {
      a1[3] = &type metadata for _JUPlaceableAsPlacable;
      a1[4] = &protocol witness table for _JUPlaceableAsPlacable;
      *a1 = v1;
      return swift_unknownObjectRetain();
    }
  }
}

uint64_t _JUPlaceableAsPlacable.base.getter()
{
  return swift_unknownObjectRetain();
}

JUMeasurements __swiftcall _JUPlaceableAsPlacable.measure(toFit:with:)(CGSize toFit, UITraitCollection with)
{
  objc_msgSend(*v2, sel_measureToFit_withTraitCollection_, with.super.isa, toFit.width, toFit.height);
  result.double var3 = v6;
  result.double var2 = v5;
  result.double var1 = v4;
  result.var0 = v3;
  return result;
}

Swift::Void __swiftcall _JUPlaceableAsPlacable.place(at:with:)(__C::CGRect at, UITraitCollection with)
{
  objc_msgSend(*v2, sel_placeAtRect_withTraitCollection_, with.super.isa, at.origin.x, at.origin.y, at.size.width, at.size.height);
}

uint64_t _JUPlaceableAsPlacable.description.getter()
{
  return sub_1B0869DE8();
}

id sub_1B0817238(uint64_t a1)
{
  return objc_msgSend(*v1, sel_measureToFit_withTraitCollection_, a1);
}

id sub_1B081724C(uint64_t a1)
{
  return objc_msgSend(*v1, sel_placeAtRect_withTraitCollection_, a1);
}

uint64_t sub_1B0817260()
{
  return sub_1B0869DE8();
}

ValueMetadata *type metadata accessor for _JUPlaceableAsPlacable()
{
  return &type metadata for _JUPlaceableAsPlacable;
}

double *StaticMeasurable.init(_:)@<X0>(double **a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB595820);
  JUMeasurements result = (double *)swift_allocObject();
  result[2] = a2;
  result[3] = a3;
  result[4] = a4;
  result[5] = a5;
  *a1 = result;
  return result;
}

double StaticMeasurable.measurements.getter()
{
  uint64_t v1 = *v0;
  swift_beginAccess();
  return *(double *)(v1 + 16);
}

double StaticMeasurable.measurements(fitting:in:)()
{
  uint64_t v1 = *v0;
  swift_beginAccess();
  return *(double *)(v1 + 16);
}

double sub_1B081739C()
{
  uint64_t v1 = *v0;
  swift_beginAccess();
  return *(double *)(v1 + 16);
}

ValueMetadata *type metadata accessor for StaticMeasurable()
{
  return &type metadata for StaticMeasurable;
}

uint64_t sub_1B08173F0(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1B07CF478(0, *(void *)(v3 + 16) + 1, 1, (char *)v3);
    uint64_t v3 = result;
  }
  unint64_t v6 = *(void *)(v3 + 16);
  unint64_t v5 = *(void *)(v3 + 24);
  if (v6 >= v5 >> 1)
  {
    uint64_t result = (uint64_t)sub_1B07CF478((char *)(v5 > 1), v6 + 1, 1, (char *)v3);
    uint64_t v3 = result;
  }
  *(void *)(v3 + 16) = v6 + 1;
  *(void *)(v3 + 8 * v6 + 32) = a1;
  *uint64_t v1 = v3;
  return result;
}

uint64_t sub_1B0817490(int a1)
{
  uint64_t v3 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1B07CF37C(0, *(void *)(v3 + 16) + 1, 1, (char *)v3);
    uint64_t v3 = result;
  }
  unint64_t v6 = *(void *)(v3 + 16);
  unint64_t v5 = *(void *)(v3 + 24);
  if (v6 >= v5 >> 1)
  {
    uint64_t result = (uint64_t)sub_1B07CF37C((char *)(v5 > 1), v6 + 1, 1, (char *)v3);
    uint64_t v3 = result;
  }
  *(void *)(v3 + 16) = v6 + 1;
  *(_DWORD *)(v3 + 4 * v6 + 32) = a1;
  *uint64_t v1 = v3;
  return result;
}

uint64_t sub_1B0817530(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1B07CF280(0, *(void *)(v5 + 16) + 1, 1, (char *)v5);
    uint64_t v5 = result;
  }
  unint64_t v8 = *(void *)(v5 + 16);
  unint64_t v7 = *(void *)(v5 + 24);
  if (v8 >= v7 >> 1)
  {
    uint64_t result = (uint64_t)sub_1B07CF280((char *)(v7 > 1), v8 + 1, 1, (char *)v5);
    uint64_t v5 = result;
  }
  *(void *)(v5 + 16) = v8 + 1;
  unint64_t v9 = v5 + 16 * v8;
  *(void *)(v9 + 32) = a1;
  *(void *)(v9 + 40) = a2;
  *uint64_t v2 = v5;
  return result;
}

uint64_t sub_1B08175D4()
{
  MEMORY[0x1B3E97890]();
  if (*(void *)((*v0 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v0 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_1B0869FC8();
  }
  sub_1B086A018();

  return sub_1B0869F98();
}

uint64_t sub_1B0817648()
{
  uint64_t v1 = *v0;
  if (!*(void *)(*v0 + 16))
  {
    __break(1u);
LABEL_6:
    uint64_t result = (uint64_t)sub_1B0860EAC(v1);
    uint64_t v1 = result;
    uint64_t v3 = *(void *)(result + 16);
    if (v3) {
      goto LABEL_4;
    }
    goto LABEL_7;
  }
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0) {
    goto LABEL_6;
  }
  uint64_t v3 = *(void *)(v1 + 16);
  if (v3)
  {
LABEL_4:
    uint64_t v4 = v3 - 1;
    uint64_t result = *(unsigned int *)(v1 + 4 * v4 + 32);
    *(void *)(v1 + 16) = v4;
    uint64_t *v0 = v1;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_1B08176B4(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3 = a1;
  uint64_t v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    uint64_t v10 = sub_1B0869EC8();
    uint64_t v11 = v10 + (v4 << 16);
    unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v13 = v12;
    }
    return v13 | 4;
  }
  else
  {
    uint64_t v5 = MEMORY[0x1B3E977B0](15, a1 >> 16);
    uint64_t v6 = v5 + (v4 << 16);
    unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v8 = v7;
    }
    return v8 | 8;
  }
}

unint64_t sub_1B0817730(unint64_t a1, unint64_t a2)
{
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    sub_1B0817810(0xFuLL, a1, a2);
    if ((a2 & 0x1000000000000000) != 0)
    {
      unsigned int v5 = sub_1B086A5D8();
    }
    else
    {
      if ((a2 & 0x2000000000000000) == 0 && (a1 & 0x1000000000000000) == 0) {
        sub_1B086A648();
      }
      unsigned int v5 = sub_1B086A658();
    }
  }
  else
  {
    unsigned int v5 = 0;
  }
  return v5 | ((unint64_t)(v2 == 0) << 32);
}

unint64_t sub_1B0817810(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0) {
    LOBYTE(v5) = 1;
  }
  if ((result & 1) == 0 || (result & 0xC) == 4 << v5) {
    goto LABEL_9;
  }
  unint64_t v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    unint64_t v6 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v6 <= result >> 16)
  {
    __break(1u);
LABEL_9:
    uint64_t result = sub_1B08178B0(result, a2, a3);
    if ((result & 1) == 0) {
      return result & 0xC | sub_1B0817920(result, a2, a3) & 0xFFFFFFFFFFFFFFF3 | 1;
    }
  }
  return result;
}

unint64_t sub_1B08178B0(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0) {
    LOBYTE(v5) = 1;
  }
  if ((result & 0xC) == 4 << v5) {
    uint64_t result = sub_1B08176B4(result, a2, a3);
  }
  unint64_t v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    unint64_t v6 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v6 <= result >> 16) {
    __break(1u);
  }
  return result;
}

unint64_t sub_1B0817920(unint64_t result, uint64_t a2, unint64_t a3)
{
  if ((result & 0xC000) != 0 || result < 0x10000)
  {
    result &= 0xFFFFFFFFFFFF0000;
  }
  else
  {
    unint64_t v5 = result >> 16;
    if ((a3 & 0x1000000000000000) == 0)
    {
      _OWORD v13[2] = v3;
      void v13[3] = v4;
      if ((a3 & 0x2000000000000000) != 0)
      {
        v13[0] = a2;
        v13[1] = a3 & 0xFFFFFFFFFFFFFFLL;
        if (v5 != (HIBYTE(a3) & 0xF) && (*((unsigned char *)v13 + v5) & 0xC0) == 0x80)
        {
          do
          {
            unint64_t v7 = v5 - 1;
            int v11 = *((unsigned char *)&v12 + v5-- + 7) & 0xC0;
          }
          while (v11 == 128);
          return v7 << 16;
        }
        goto LABEL_14;
      }
      if ((a2 & 0x1000000000000000) != 0)
      {
        uint64_t v6 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if (v5 == (a2 & 0xFFFFFFFFFFFFLL)) {
          goto LABEL_14;
        }
      }
      else
      {
        unint64_t v12 = result >> 16;
        uint64_t v6 = sub_1B086A648();
        unint64_t v5 = v12;
        if (v12 == v10) {
          goto LABEL_14;
        }
      }
      if ((*(unsigned char *)(v6 + v5) & 0xC0) == 0x80)
      {
        do
        {
          unint64_t v7 = v5 - 1;
          int v8 = *(unsigned char *)(v6 - 1 + v5--) & 0xC0;
        }
        while (v8 == 128);
        return v7 << 16;
      }
LABEL_14:
      unint64_t v7 = v5;
      return v7 << 16;
    }
    uint64_t v9 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000) == 0) {
      uint64_t v9 = a2 & 0xFFFFFFFFFFFFLL;
    }
    if (v5 != v9)
    {
      return MEMORY[0x1F4184CD0]();
    }
  }
  return result;
}

id sub_1B0817A44(void *a1, uint64_t a2, uint64_t a3, id a4, id a5, void *a6)
{
  void v18[2] = *MEMORY[0x1E4F143B8];
  if (a5) {
    return objc_msgSend(a5, sel_juParagraphStyleWithBaseWritingDirection_, a4);
  }
  v18[0] = 0;
  v18[1] = 0;
  id v12 = objc_msgSend(a1, sel_juParagraphStyleAtIndex_effectiveRange_, a2, v18);
  if (!v12) {
    return a6;
  }
  int v8 = v12;
  uint64_t v13 = sub_1B086A3A8();
  if ((v15 & 1) != 0
    || v13 != a2
    || v14 != a3
    || objc_msgSend(v8, sel_baseWritingDirection) != a4
    && (a4 != (id)-1 || objc_msgSend(v8, sel_baseWritingDirection) == (id)-1))
  {
    id v16 = objc_msgSend(v8, sel_juParagraphStyleWithBaseWritingDirection_, a4);

    return v16;
  }
  return v8;
}

void sub_1B0817BA4(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v144 = a4;
  uint64_t v138 = sub_1B086A9F8();
  uint64_t v9 = *(void *)(v138 - 8);
  MEMORY[0x1F4188790](v138);
  int v11 = (char *)&v114 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v140 = sub_1B086AA28();
  uint64_t v12 = *(void *)(v140 - 8);
  MEMORY[0x1F4188790](v140);
  uint64_t v137 = (char *)&v114 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&double v15 = MEMORY[0x1F4188790](v14).n128_u64[0];
  uint64_t v136 = (char *)&v114 - v16;
  if (a1)
  {
    uint64_t v17 = (char *)objc_msgSend(a1, sel_mutableString, v15);
  }
  else
  {
    if (!a2)
    {
      if (qword_1E9B3A690 != -1) {
        goto LABEL_296;
      }
      goto LABEL_265;
    }
    uint64_t v17 = a2;
  }
  uint64_t v18 = v17;
  uint64_t v19 = (uint64_t)objc_msgSend(v17, sel_length);
  if (v19 < 1)
  {
    if (qword_1E9B3A690 == -1)
    {
LABEL_263:
      double v107 = (char *)(id)qword_1E9B3B320;

      goto LABEL_266;
    }
LABEL_289:
    swift_once();
    goto LABEL_263;
  }
  uint64_t v20 = v19;
  uint64_t v135 = v11;
  id v117 = a3;
  uint64_t v126 = a5;
  CGRect v119 = a1;
  CGRect v125 = v18;
  uint64_t v152 = v20;
  sub_1B083FED0(v125, 0, v20, &v159);
  uint64_t v21 = sub_1B0868FD8();
  uint64_t v147 = sub_1B0868FD8();
  uint64_t v22 = 0;
  int v143 = 0;
  uint64_t v145 = 0;
  int v149 = 0;
  v128 = 0;
  unint64_t v130 = 0;
  uint64_t v129 = 0;
  uint64_t v151 = 0;
  uint64_t v141 = 0;
  int v127 = 0;
  uint64_t v155 = 0;
  uint64_t v157 = MEMORY[0x1E4FBC860];
  uint64_t v158 = MEMORY[0x1E4FBC860];
  uint64_t v156 = MEMORY[0x1E4FBC860];
  uint64_t v139 = (void (**)(char *, uint64_t))(v12 + 8);
  uint64_t v134 = (uint64_t (**)(uint64_t, uint64_t))(v9 + 88);
  double v132 = (void (**)(uint64_t, uint64_t))(v9 + 8);
  uint64_t v154 = MEMORY[0x1E4FBC860];
  int v118 = (a1 == 0) | v144;
  int v133 = *MEMORY[0x1E4FBC640];
  uint64_t v115 = *MEMORY[0x1E4FB0818];
  uint64_t v116 = *MEMORY[0x1E4FB0738];
  long long v114 = xmmword_1B086C120;
  uint64_t v23 = v21;
  uint64_t v146 = v21;
  uint64_t v150 = v21;
LABEL_7:
  CGRect v122 = 0;
  unint64_t v124 = 0;
  uint64_t v123 = 0;
  int v24 = 0;
  uint64_t v18 = 0;
  uint64_t v121 = v22;
  uint64_t v25 = v22;
LABEL_8:
  int v120 = v24;
  uint64_t v131 = v25;
LABEL_9:
  int v142 = 0;
  uint64_t v26 = 0;
  LODWORD(v27) = -1;
  uint64_t v148 = -1;
  while (2)
  {
    if (v25 < 0 || (uint64_t v28 = v161, v25 >= v161))
    {
      uint64_t v29 = v23;
      a5 = 0;
    }
    else
    {
      LODWORD(v27) = v162;
      if (v162)
      {
        if (__OFADD__(v25, v160)) {
          goto LABEL_271;
        }
        a5 = *(unsigned __int16 *)(v162 + 2 * (v25 + v160));
      }
      else
      {
        LODWORD(v27) = v163;
        if (v163)
        {
          if (__OFADD__(v25, v160)) {
            goto LABEL_275;
          }
          LODWORD(v27) = *(char *)(v163 + v25 + v160);
          if ((v27 & 0x80000000) != 0) {
            goto LABEL_276;
          }
          a5 = *(unsigned __int8 *)(v163 + v25 + v160);
        }
        else
        {
          if (v25 >= v166 || (a5 = v165, v25 < v165))
          {
            uint64_t v60 = 4;
            if (v25 > 4) {
              uint64_t v60 = v25;
            }
            a5 = v60 - 4;
            uint64_t v165 = v60 - 4;
            BOOL v31 = __OFADD__(v60, 2044);
            uint64_t v61 = v60 + 2044;
            if (v31) {
              goto LABEL_286;
            }
            if (v161 < v61) {
              uint64_t v61 = v161;
            }
            uint64_t v166 = v61;
            if (__OFADD__(v160, a5)) {
              goto LABEL_287;
            }
            if (__OFSUB__(v61, a5)) {
              goto LABEL_288;
            }
            unint64_t v52 = v164;
            v167.location = v160 + a5;
            v167.length = v61 - a5;
            CFStringGetCharacters(v159, v167, v164);
          }
          else
          {
            unint64_t v52 = v164;
          }
          if (!v52) {
            goto LABEL_308;
          }
          uint64_t v27 = v25 - a5;
          if (__OFSUB__(v25, a5)) {
            goto LABEL_277;
          }
          a5 = v52[v27];
        }
      }
      uint64_t v29 = v23;
      if ((unsigned __int16)((unsigned __int16)(a5 + 9216) >> 10) >= 0x3Fu)
      {
        if (v25 >= v28 - 1
          || (sub_1B083FDBC(v25 + 1), (unsigned __int16)((unsigned __int16)(v62 + 0x2000) >> 10) < 0x3Fu))
        {
LABEL_115:
          LODWORD(v27) = 0;
          ++v25;
          int v33 = 1;
          int v34 = 1;
          int v35 = 1;
          BOOL v31 = __OFADD__(v18++, 1);
          if (v31) {
            goto LABEL_267;
          }
          goto LABEL_187;
        }
        LODWORD(v27) = ((unsigned __int16)(a5 + 10240) << 10) + (unsigned __int16)(v62 + 9216);
        a5 = (v27 + 0x10000);
        uint64_t v30 = 2;
        BOOL v31 = __OFADD__(v25, 2);
        v25 += 2;
        if (v31) {
          goto LABEL_268;
        }
        goto LABEL_19;
      }
      LODWORD(v27) = a5 >> 11;
      if (a5 >> 11 == 27) {
        goto LABEL_115;
      }
    }
    uint64_t v30 = 1;
    BOOL v31 = __OFADD__(v25++, 1);
    if (v31) {
      goto LABEL_268;
    }
LABEL_19:
    uint64_t v32 = JUGetBidiClass(a5);
    LODWORD(v27) = 0;
    int v33 = 1;
    int v34 = 1;
    int v35 = 1;
    switch(v32)
    {
      case 8:
        sub_1B0817490(a5);
        LODWORD(v27) = 0;
        int v36 = 1;
        switch((int)a5)
        {
          case 8234:
          case 8237:
            goto LABEL_78;
          case 8235:
          case 8238:
            goto LABEL_77;
          default:
            goto LABEL_84;
        }
        goto LABEL_84;
      case 9:
        uint64_t v27 = *(void *)(v154 + 16);
        if (!v27) {
          goto LABEL_83;
        }
        int v39 = *(_DWORD *)(v154 + 4 * v27 + 28);
        LODWORD(v27) = 0;
        int v36 = 1;
        unsigned int v53 = v39 - 8234;
        if (v53 <= 4 && v53 != 2)
        {
LABEL_73:
          sub_1B0817648();
          uint64_t v27 = *(void *)(v154 + 16);
          if (v27)
          {
            int v54 = *(_DWORD *)(v154 + 4 * v27 + 28);
            LODWORD(v27) = 0;
            int v36 = 1;
            uint64_t v55 = (v54 - 8234);
            if (v55 <= 0x3E)
            {
              if (((1 << v55) & 0x1000000000000009) != 0)
              {
LABEL_78:
                int v143 = 0;
                uint64_t v145 = 0;
                LODWORD(v27) = v149 ^ 1;
                int v149 = 1;
              }
              else if (((1 << v55) & 0x2000000000000012) != 0)
              {
LABEL_77:
                int v143 = 0;
                int v149 = 0;
                LODWORD(v27) = v145 ^ 1;
                uint64_t v145 = 1;
              }
              else if (v55 == 62)
              {
                uint64_t v145 = 0;
                int v149 = 0;
                LODWORD(v27) = v143 ^ 1;
                int v143 = 1;
              }
            }
          }
          else
          {
            LODWORD(v27) = 1;
LABEL_83:
            int v36 = 1;
          }
        }
        goto LABEL_84;
      case 10:
        sub_1B0817490(a5);
        switch(a5)
        {
          case 0x2068:
            uint64_t v145 = 0;
            int v149 = 0;
            LODWORD(v27) = v143 ^ 1;
            int v143 = 1;
            break;
          case 0x2067:
            int v143 = 0;
            int v149 = 0;
            LODWORD(v27) = v145 ^ 1;
            uint64_t v145 = 1;
            break;
          case 0x2066:
            int v143 = 0;
            uint64_t v145 = 0;
            LODWORD(v27) = v149 ^ 1;
            int v149 = 1;
            break;
          default:
            LODWORD(v27) = 0;
            break;
        }
        goto LABEL_83;
      case 11:
        uint64_t v37 = *(void *)(v154 + 16);
        if (v37) {
          int v38 = *(_DWORD *)(v154 + 4 * v37 + 28);
        }
        else {
          int v38 = 0;
        }
        LODWORD(v27) = 0;
        int v36 = 1;
        if (!v37 || (v38 - 8297) < 0xFFFFFFFD) {
          goto LABEL_84;
        }
        goto LABEL_73;
      case 12:
        goto LABEL_46;
      case 13:
        goto LABEL_186;
      case 14:
        if (a5 > 0x7F)
        {
          int v78 = (a5 & 0x3F) << 8;
          if (a5 >= 0x800)
          {
            unsigned int v79 = (v78 | (a5 >> 6) & 0x3F) << 8;
            unsigned int v80 = (((v79 | (a5 >> 12) & 0x3F) << 8) | (a5 >> 18)) - 2122219023;
            unsigned int v46 = (v79 | (a5 >> 12)) + 8487393;
            if (WORD1(a5)) {
              unsigned int v46 = v80;
            }
          }
          else
          {
            unsigned int v46 = (v78 | (a5 >> 6)) + 33217;
          }
        }
        else
        {
          unsigned int v46 = a5 + 1;
        }
        v153[0] = (v46 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * (4 - (__clz(v46) >> 3))));
        unint64_t v47 = MEMORY[0x1B3E97750](v153);
        unint64_t v49 = sub_1B0817730(v47, v48);
        if ((v49 & 0x100000000) != 0) {
          goto LABEL_307;
        }
        int v50 = v49;
        swift_bridgeObjectRelease();
        if ((v50 - 14) > 0xFFFFFFFB || (v50 - 8232) < 2 || v50 == 133)
        {
LABEL_46:
          if (a5 == 8232)
          {
            uint64_t v27 = v155;
            if (!v155) {
              uint64_t v27 = MEMORY[0x1E4FBC860];
            }
            uint64_t v155 = v27;
            if (__OFSUB__(v25, v30)) {
              goto LABEL_274;
            }
            sub_1B08173F0(v25 - v30);
            goto LABEL_55;
          }
          LODWORD(v27) = 1;
          if (v152 > v25 && a5 == 13)
          {
            sub_1B083FCE4(v25);
            if ((v51 & 0x1FFFFFFFFLL) == 0xA)
            {
              ++v30;
              ++v25;
            }
LABEL_55:
            LODWORD(v27) = 1;
            goto LABEL_56;
          }
        }
        else
        {
          LODWORD(v27) = 0;
        }
        goto LABEL_56;
      case 15:
        BOOL v40 = v136;
        sub_1B086AA38();
        a5 = (uint64_t)v135;
        sub_1B086AA18();
        (*v139)(v40, v140);
        uint64_t v41 = v138;
        int v42 = (*v134)(a5, v138);
        if (v42 == v133)
        {
          LODWORD(v27) = 0;
          if (v26)
          {
LABEL_56:
            int v33 = 1;
LABEL_57:
            int v34 = 1;
LABEL_58:
            int v35 = 1;
            BOOL v31 = __OFADD__(v18, v30);
            v18 += v30;
            if (v31) {
              goto LABEL_267;
            }
            goto LABEL_187;
          }
          int v36 = 0;
        }
        else
        {
          (*v132)(a5, v41);
LABEL_62:
          LODWORD(v27) = 0;
          int v36 = 0;
        }
LABEL_84:
        BOOL v31 = __OFADD__(v26, v30);
        v26 += v30;
        if (v31) {
          goto LABEL_269;
        }
        if ((*(void *)(v154 + 16) != 0) | v27 & 1)
        {
          if (v149)
          {
            BOOL v56 = sub_1B084A534(0, v148);
            uint64_t v148 = 0;
            LODWORD(v27) = 0;
            int v33 = 0;
            int v142 = !v56;
            int v149 = 1;
          }
          else
          {
            if (v145)
            {
              uint64_t v145 = 1;
              BOOL v57 = sub_1B084A534(1, v148);
              int v149 = 0;
              LODWORD(v27) = 0;
              int v33 = 0;
              int v142 = !v57;
              uint64_t v58 = 1;
            }
            else
            {
              if ((v143 & 1) == 0)
              {
                int v143 = 0;
                uint64_t v145 = 0;
                int v149 = 0;
LABEL_184:
                LODWORD(v27) = 0;
                int v33 = 0;
                goto LABEL_185;
              }
              BOOL v59 = sub_1B084A534(-1, v148);
              uint64_t v145 = 0;
              int v149 = 0;
              LODWORD(v27) = 0;
              int v33 = 0;
              int v142 = !v59;
              int v143 = 1;
              uint64_t v58 = -1;
            }
            uint64_t v148 = v58;
          }
LABEL_185:
          int v34 = v36;
          int v35 = v36;
LABEL_186:
          BOOL v31 = __OFADD__(v18, v30);
          v18 += v30;
          if (v31)
          {
LABEL_267:
            __break(1u);
LABEL_268:
            __break(1u);
LABEL_269:
            __break(1u);
LABEL_270:
            __break(1u);
LABEL_271:
            __break(1u);
LABEL_272:
            __break(1u);
LABEL_273:
            __break(1u);
LABEL_274:
            __break(1u);
LABEL_275:
            __break(1u);
LABEL_276:
            __break(1u);
LABEL_277:
            __break(1u);
            goto LABEL_278;
          }
          goto LABEL_187;
        }
        break;
      default:
        uint64_t v43 = v137;
        sub_1B086AA38();
        char v44 = sub_1B086AA08();
        (*v139)(v43, v140);
        if ((v44 & 1) == 0) {
          goto LABEL_62;
        }
        uint64_t v45 = v148;
        if (v26)
        {
          BOOL v31 = __OFSUB__(v25, v30);
          v25 -= v30;
          if (v31) {
            goto LABEL_285;
          }
          LODWORD(v27) = 0;
          uint64_t v30 = 0;
          goto LABEL_56;
        }
        if (v32 == 1)
        {
          if (sub_1B084A534(-1, v148))
          {
            uint64_t v148 = 0;
            LODWORD(v27) = 0;
          }
          else
          {
            BOOL v77 = sub_1B084A534(0, v45);
            LODWORD(v27) = 0;
            v142 |= !v77;
          }
          int v33 = 1;
          uint64_t v26 = v30;
          int v34 = 1;
        }
        else
        {
          if (v32 != 4 && v32 != 2)
          {
            LODWORD(v27) = 0;
            int v33 = 1;
            uint64_t v26 = v30;
            goto LABEL_57;
          }
          if (sub_1B084A534(-1, v148))
          {
            LODWORD(v27) = 0;
            int v33 = 1;
            uint64_t v26 = v30;
            uint64_t v148 = 1;
            goto LABEL_57;
          }
          int v34 = 1;
          BOOL v72 = sub_1B084A534(1, v45);
          LODWORD(v27) = 0;
          v142 |= !v72;
          uint64_t v26 = v30;
          int v33 = 1;
        }
        goto LABEL_58;
    }
    LODWORD(v27) = 0;
    int v33 = 0;
    int v34 = 1;
    int v35 = 1;
    switch(v32)
    {
      case 0:
      case 15:
      case 16:
        goto LABEL_186;
      case 1:
        uint64_t v63 = v148;
        if (sub_1B084A534(-1, v148))
        {
          uint64_t v148 = 0;
          LODWORD(v27) = 0;
          int v33 = 0;
        }
        else
        {
          BOOL v70 = sub_1B084A534(0, v63);
          LODWORD(v27) = 0;
          int v33 = 0;
          v142 |= !v70;
        }
        int v34 = 1;
        int v35 = 1;
        BOOL v31 = __OFADD__(v18, v30);
        v18 += v30;
        if (!v31) {
          goto LABEL_187;
        }
        goto LABEL_267;
      case 2:
        uint64_t v64 = v148;
        if (sub_1B084A534(-1, v148))
        {
          LODWORD(v27) = 0;
          int v33 = 0;
          int v34 = 1;
          uint64_t v148 = 1;
          goto LABEL_58;
        }
        int v35 = 1;
        BOOL v71 = sub_1B084A534(1, v64);
        LODWORD(v27) = 0;
        int v33 = 0;
        v142 |= !v71;
        int v34 = 1;
        BOOL v31 = __OFADD__(v18, v30);
        v18 += v30;
        if (v31) {
          goto LABEL_267;
        }
        goto LABEL_187;
      case 3:
      case 4:
        if (sub_1B0868FD8() != v29) {
          goto LABEL_92;
        }
        if (sub_1B0868FD8() == v150)
        {
          uint64_t v29 = v25 - v30;
          if (__OFSUB__(v25, v30)) {
            goto LABEL_291;
          }
LABEL_92:
          int v35 = v36;
        }
        else
        {
          uint64_t v151 = v141 + v30;
          if (__OFADD__(v141, v30)) {
            goto LABEL_294;
          }
          int v35 = 1;
          uint64_t v29 = v150;
        }
        uint64_t v65 = v151 + v30;
        if (__OFADD__(v151, v30))
        {
          __break(1u);
LABEL_284:
          __break(1u);
LABEL_285:
          __break(1u);
LABEL_286:
          __break(1u);
LABEL_287:
          __break(1u);
LABEL_288:
          __break(1u);
          goto LABEL_289;
        }
        v151 += v30;
        uint64_t v66 = v65 + v29;
        BOOL v31 = __OFSUB__(v66, 1);
        uint64_t v67 = v66 - 1;
        if (v31) {
          goto LABEL_284;
        }
        uint64_t v147 = v67;
        uint64_t v68 = v148;
        if (sub_1B084A534(-1, v148))
        {
          BOOL v69 = sub_1B084A534(4, v32);
          LODWORD(v27) = 0;
          int v33 = 0;
          if (v69) {
            uint64_t v68 = 1;
          }
          uint64_t v148 = v68;
        }
        else
        {
          LODWORD(v27) = 0;
          int v33 = 0;
        }
LABEL_180:
        int v34 = v36;
        BOOL v31 = __OFADD__(v18, v30);
        v18 += v30;
        if (v31) {
          goto LABEL_267;
        }
LABEL_187:
        a5 = v25 == v152;
        if (v25 == v152) {
          int v73 = 1;
        }
        else {
          int v73 = v35;
        }
        if (v25 == v152) {
          int v74 = 1;
        }
        else {
          int v74 = v27;
        }
        if (v25 == v152) {
          int v75 = 1;
        }
        else {
          int v75 = v33;
        }
        if (v25 == v152) {
          int v76 = 1;
        }
        else {
          int v76 = v34;
        }
        uint64_t v23 = v29;
        if (v73 == 1)
        {
          if (sub_1B0868FD8() == v150)
          {
            LODWORD(v27) = v74;
            int v33 = v75;
            int v34 = v76;
            goto LABEL_202;
          }
          if (v76)
          {
            uint64_t v141 = 0;
            uint64_t v150 = v146;
            goto LABEL_206;
          }
          uint64_t v141 = 0;
          LODWORD(v27) = v146;
          uint64_t v150 = v146;
          if (v75)
          {
            a5 = 0;
            uint64_t v150 = v146;
            goto LABEL_225;
          }
          continue;
        }
LABEL_202:
        int v74 = v27;
        int v75 = v33;
        if (!v34) {
          goto LABEL_10;
        }
LABEL_206:
        if (sub_1B0868FD8() == v29)
        {
LABEL_10:
          if (v75) {
            goto LABEL_225;
          }
          goto LABEL_11;
        }
        uint64_t v27 = v29 + v151 - 1;
        if (__OFSUB__(v29 + v151, 1)) {
          goto LABEL_270;
        }
        if (v147 < v27)
        {
          uint64_t v27 = v147 - v29;
          if (__OFSUB__(v147, v29)) {
            goto LABEL_272;
          }
          BOOL v31 = __OFADD__(v27++, 1);
          uint64_t v151 = v27;
          if (v31) {
            goto LABEL_273;
          }
        }
        if (v144) {
          sub_1B0817530(v29, v151);
        }
        uint64_t v147 = sub_1B0868FD8();
        if ((v75 & 1) == 0)
        {
          uint64_t v151 = 0;
          uint64_t v23 = v146;
LABEL_11:
          LODWORD(v27) = v152;
          if (v25 == v152) {
            goto LABEL_279;
          }
          continue;
        }
        uint64_t v151 = 0;
        uint64_t v23 = v146;
LABEL_225:
        uint64_t v81 = v148;
        if (v148 != 1)
        {
          if (v148)
          {
            if (v26 < 1) {
              goto LABEL_238;
            }
            BOOL v82 = __CFADD__(v122++, 1);
            if (!v82) {
              goto LABEL_235;
            }
            __break(1u);
LABEL_298:
            __break(1u);
LABEL_299:
            __break(1u);
LABEL_300:
            __break(1u);
LABEL_301:
            __break(1u);
LABEL_302:
            __break(1u);
LABEL_303:
            __break(1u);
LABEL_304:
            __break(1u);
LABEL_305:
            __break(1u);
LABEL_306:
            __break(1u);
LABEL_307:
            __break(1u);
LABEL_308:
            __break(1u);
LABEL_309:
            v153[0] = 0;
            v153[1] = 0xE000000000000000;
            sub_1B086A5E8();
            sub_1B086A888();
            sub_1B07DAB14();
            sub_1B086A888();
            sub_1B086A6C8();
            __break(1u);
            JUMPOUT(0x1B0819264);
          }
          BOOL v82 = __CFADD__(v123++, 1);
          if (v82)
          {
            __break(1u);
            goto LABEL_290;
          }
LABEL_231:
          if (v26 < 1) {
            goto LABEL_238;
          }
LABEL_235:
          if (v144)
          {
            sub_1B07C7B80(0, &qword_1E9B3B728);
            id v83 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_valueWithRange_direction_hasMixedDirectionality_, v131, v26, v81, v142 & 1);
            sub_1B08175D4();
          }
          if ((v142 & 1) == 0)
          {
LABEL_238:
            if (v74) {
              goto LABEL_247;
            }
            uint64_t v131 = v25;
            if (a5) {
              goto LABEL_279;
            }
            goto LABEL_9;
          }
          uint64_t v84 = v119;
          if (v119)
          {
            uint64_t v85 = nullsub_1(v148);
            sub_1B07C7B80(0, (unint64_t *)&unk_1E9B3BEF0);
            id v86 = v84;
            uint64_t v87 = v23;
            id v88 = sub_1B085F0E8(v85);
            __swift_instantiateConcreteTypeFromMangledName(qword_1EB596010);
            uint64_t v89 = swift_allocObject();
            *(_OWORD *)(v89 + 16) = v114;
            *(void *)(v89 + 32) = v88;
            v153[0] = v89;
            sub_1B0869F98();
            uint64_t v148 = (uint64_t)v88;
            CGFloat v90 = (void *)sub_1B0869F78();
            swift_bridgeObjectRelease();
            objc_msgSend(v86, sel_addAttribute_value_range_, v115, v90, v131, v26);

            uint64_t v23 = v87;
          }
          if (v74)
          {
            int v120 = 1;
            int v127 = 1;
LABEL_247:
            uint64_t v91 = v122;
            uint64_t v92 = v123;
            unint64_t v93 = v124;
            if (__CFADD__(v129, v123)) {
              goto LABEL_304;
            }
            unint64_t v94 = v130 + v124;
            if (__CFADD__(v130, v124)) {
              goto LABEL_305;
            }
            BOOL v82 = __CFADD__(v128, v122);
            v128 = &v122[(void)v128];
            if (v82) {
              goto LABEL_306;
            }
            v129 += v123;
            id v95 = objc_allocWithZone((Class)type metadata accessor for WritingDirectionsCounts());
            CGFloat v96 = WritingDirectionsCounts.init(natural:leftToRight:rightToLeft:)(v91, v92, v93);
            uint64_t v97 = v96;
            if (v96[OBJC_IVAR___JUWritingDirectionsCounts_isRTLEnough]) {
              uint64_t v98 = 1;
            }
            else {
              uint64_t v98 = v96[OBJC_IVAR___JUWritingDirectionsCounts_hasStronglyTypedCounts] - 1;
            }
            unint64_t v130 = v94;
            if ((v118 & 1) != 0
              && (sub_1B07C7B80(0, &qword_1E9B3B728),
                  id v99 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_valueWithRange_direction_hasMixedDirectionality_, v121, v18, v98, v120 & 1), sub_1B08175D4(), !v119))
            {

              uint64_t v22 = v25;
              if (a5)
              {
LABEL_279:
                swift_bridgeObjectRelease();
                char v108 = v127;
                if (v164) {
                  MEMORY[0x1B3E98D90](v164, -1, -1);
                }
                id v113 = objc_allocWithZone((Class)type metadata accessor for WritingDirectionsCounts());
                double v107 = WritingDirectionsCounts.init(natural:leftToRight:rightToLeft:)(v128, v129, v130);

                uint64_t v111 = v157;
                uint64_t v110 = v158;
                uint64_t v109 = v155;
                uint64_t v112 = v156;
                a5 = v126;
                goto LABEL_282;
              }
            }
            else
            {
              uint64_t v100 = v23;
              id v101 = (id)sub_1B0854140(v98);
              long long v102 = v119;
              uint64_t v103 = v121;
              id v104 = sub_1B0817A44(v119, v121, (uint64_t)v18, (id)v98, v117, v101);
              char v106 = v105;

              if (v106)
              {
                objc_msgSend(v102, sel_addAttribute_value_range_, v116, v104, v103, v18);
              }
              else
              {
              }
              uint64_t v22 = v25;
              uint64_t v23 = v100;
              if (a5) {
                goto LABEL_279;
              }
            }
            goto LABEL_7;
          }
          int v24 = 1;
          LODWORD(v27) = 1;
          int v127 = 1;
          if (a5)
          {
LABEL_278:
            int v127 = v27;
            goto LABEL_279;
          }
          goto LABEL_8;
        }
        BOOL v82 = __CFADD__(v124++, 1);
        if (!v82) {
          goto LABEL_231;
        }
LABEL_290:
        __break(1u);
LABEL_291:
        __break(1u);
LABEL_292:
        __break(1u);
LABEL_293:
        __break(1u);
LABEL_294:
        __break(1u);
LABEL_295:
        __break(1u);
LABEL_296:
        swift_once();
LABEL_265:
        double v107 = (char *)(id)qword_1E9B3B320;
LABEL_266:
        char v108 = 0;
        uint64_t v109 = 0;
        uint64_t v110 = MEMORY[0x1E4FBC860];
        uint64_t v111 = MEMORY[0x1E4FBC860];
        uint64_t v112 = MEMORY[0x1E4FBC860];
LABEL_282:
        *(void *)a5 = v110;
        *(void *)(a5 + 8) = v111;
        *(void *)(a5 + 16) = v112;
        *(void *)(a5 + 24) = v107;
        *(unsigned char *)(a5 + 32) = v108 & 1;
        *(void *)(a5 + 40) = v109;
        return;
      case 5:
        if (sub_1B0868FD8() == v29)
        {
          if (sub_1B0868FD8() != v150)
          {
            LODWORD(v27) = 0;
            int v33 = 0;
            int v35 = 1;
            goto LABEL_180;
          }
          uint64_t v150 = v25 - v30;
          if (__OFSUB__(v25, v30)) {
            goto LABEL_299;
          }
          BOOL v31 = __OFADD__(v141, v30);
          v141 += v30;
          if (v31) {
            goto LABEL_303;
          }
        }
        else
        {
          BOOL v31 = __OFADD__(v151, v30);
          v151 += v30;
          if (v31) {
            goto LABEL_292;
          }
        }
        goto LABEL_184;
      case 6:
        if (sub_1B0868FD8() == v29)
        {
          if (sub_1B0868FD8() == v150)
          {
            uint64_t v150 = v25 - v30;
            if (__OFSUB__(v25, v30)) {
              goto LABEL_298;
            }
            BOOL v31 = __OFADD__(v141, v30);
            v141 += v30;
            if (v31) {
              goto LABEL_302;
            }
          }
          else
          {
            BOOL v31 = __OFADD__(v141, v30);
            v141 += v30;
            if (v31) {
              goto LABEL_301;
            }
          }
        }
        else
        {
          BOOL v31 = __OFADD__(v151, v30);
          v151 += v30;
          if (v31) {
            goto LABEL_293;
          }
        }
        goto LABEL_184;
      case 7:
        if (sub_1B0868FD8() == v29)
        {
          if (sub_1B0868FD8() != v150)
          {
            BOOL v31 = __OFADD__(v141, v30);
            v141 += v30;
            if (v31) {
              goto LABEL_300;
            }
          }
        }
        else
        {
          BOOL v31 = __OFADD__(v151, v30);
          v151 += v30;
          if (v31) {
            goto LABEL_295;
          }
        }
        goto LABEL_184;
      case 8:
      case 9:
      case 10:
      case 11:
        goto LABEL_184;
      default:
        goto LABEL_309;
    }
  }
}

uint64_t DiffableDataStatePresenter.lens(for:)(uint64_t a1)
{
  return sub_1B081931C(a1, (uint64_t)&associated type descriptor for DiffableDataPresenter.Item, MEMORY[0x1E4F71800]);
}

{
  return sub_1B081931C(a1, (uint64_t)&associated type descriptor for DiffableDataPresenter.Section, MEMORY[0x1E4F71800]);
}

uint64_t DiffableDataStatePresenter.writableLens(for:)(uint64_t a1)
{
  return sub_1B081931C(a1, (uint64_t)&associated type descriptor for DiffableDataPresenter.Item, MEMORY[0x1E4F713E8]);
}

{
  return sub_1B081931C(a1, (uint64_t)&associated type descriptor for DiffableDataPresenter.Section, MEMORY[0x1E4F713E8]);
}

uint64_t sub_1B081931C(uint64_t a1, uint64_t a2, uint64_t (*a3)(char *, char *, void, uint64_t, uint64_t))
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EB596240);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  int v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB596268);
  MEMORY[0x1F4188790](v9 - 8);
  int v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B081A620();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v3 + *(void *)(*(void *)v3 + 120), v5);
  uint64_t v12 = sub_1B081D0C4(&qword_1EB596238, (uint64_t *)&unk_1EB596240);
  return a3(v11, v8, MEMORY[0x1E4FBC248], v5, v12);
}

uint64_t DiffableDataStatePresenter.__allocating_init<A>(dataPresenter:stateStore:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_allocObject();
  uint64_t v8 = sub_1B081C3DC(a1, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8))(a2, a3);
  swift_unknownObjectRelease();
  return v8;
}

uint64_t DiffableDataStatePresenter.init<A>(dataPresenter:stateStore:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = sub_1B081C3DC(a1, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8))(a2, a3);
  swift_unknownObjectRelease();
  return v6;
}

uint64_t sub_1B08195D4()
{
  uint64_t v1 = *(void *)(*v0 + 88);
  uint64_t v2 = *(void *)(*v0 + 80);
  swift_getAssociatedTypeWitness();
  uint64_t v3 = sub_1B08697A8();
  uint64_t v37 = v2;
  uint64_t v38 = v1;
  swift_getAssociatedTypeWitness();
  uint64_t v47 = v3;
  uint64_t v48 = sub_1B08697A8();
  uint64_t v44 = v48;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v50 = swift_getWitnessTable();
  uint64_t v4 = sub_1B0869388();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v34 - v6;
  uint64_t v8 = sub_1B0869508();
  uint64_t v9 = *(void *)(v8 - 8);
  __n128 v10 = MEMORY[0x1F4188790](v8);
  uint64_t v12 = (uint64_t *)((char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = (void *)v0[2];
  *uint64_t v12 = v13;
  (*(void (**)(void *, void, uint64_t, __n128))(v9 + 104))(v12, *MEMORY[0x1E4FBCBF0], v8, v10);
  id v14 = v13;
  LOBYTE(v13) = sub_1B0869518();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v9 + 8))(v12, v8);
  if (v13)
  {
    uint64_t v16 = swift_bridgeObjectRetain();
    uint64_t v17 = sub_1B081D2D4(v16);
    uint64_t v43 = v3;
    uint64_t v18 = v17;
    uint64_t v41 = v17;
    swift_bridgeObjectRelease();
    uint64_t v19 = *(void *)(*v0 + 104);
    uint64_t v45 = v0;
    uint64_t v20 = v4;
    uint64_t v21 = (char *)v0 + v19;
    swift_beginAccess();
    uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v22(v7, v21, v20);
    uint64_t v23 = sub_1B0869368();
    int v24 = *(uint64_t (**)(char *, uint64_t))(v5 + 8);
    uint64_t v25 = v24(v7, v20);
    int v39 = &v34;
    uint64_t v46 = v23;
    MEMORY[0x1F4188790](v25);
    uint64_t v26 = v45;
    *(&v34 - 2) = v18;
    *(&v34 - 1) = (uint64_t)v26;
    uint64_t v27 = sub_1B086A098();
    uint64_t v40 = MEMORY[0x1E4FBB378];
    uint64_t v43 = v27;
    swift_getWitnessTable();
    uint64_t v42 = sub_1B086A668();
    uint64_t v34 = v5 + 16;
    int v35 = v21;
    uint64_t v28 = v21;
    uint64_t v29 = v20;
    uint64_t v30 = v45;
    v22(v7, v28, v29);
    uint64_t v31 = sub_1B0869358();
    int v39 = (uint64_t *)(v5 + 8);
    int v36 = v24;
    uint64_t v32 = v24(v7, v29);
    uint64_t v46 = v31;
    MEMORY[0x1F4188790](v32);
    *(&v34 - 2) = v41;
    *(&v34 - 1) = (uint64_t)v30;
    sub_1B086A098();
    swift_getWitnessTable();
    uint64_t v33 = sub_1B086A668();
    swift_bridgeObjectRelease();
    uint64_t v46 = v42;
    swift_getWitnessTable();
    LOBYTE(v31) = sub_1B086A248();
    swift_bridgeObjectRelease();
    if (v31 & 1) != 0 && (uint64_t v46 = v33, swift_getWitnessTable(), (sub_1B086A248()))
    {
      return swift_bridgeObjectRelease();
    }
    else
    {
      v22(v7, v35, v29);
      sub_1B0869308();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t))(v38 + 32))(v37);
      sub_1B0869528();
      swift_release();
      return v36(v7, v29);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1B0819B60(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v79 = a1;
  uint64_t v3 = *v1;
  uint64_t v4 = *(void **)(*v1 + 88);
  uint64_t v5 = *(void **)(v3 + 80);
  swift_getAssociatedTypeWitness();
  uint64_t v6 = sub_1B08697A8();
  uint64_t v7 = sub_1B086A748();
  uint64_t v74 = *(void *)(v7 - 8);
  uint64_t v75 = v7;
  MEMORY[0x1F4188790](v7);
  BOOL v71 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  BOOL v72 = (char *)&v56 - v10;
  BOOL v77 = v5;
  int v78 = v4;
  swift_getAssociatedTypeWitness();
  uint64_t v11 = sub_1B08697A8();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v13 = swift_getWitnessTable();
  uint64_t v82 = v11;
  uint64_t v83 = v6;
  uint64_t v73 = v6;
  uint64_t v68 = WitnessTable;
  uint64_t v84 = WitnessTable;
  uint64_t v85 = v13;
  uint64_t v70 = v13;
  uint64_t v14 = sub_1B0869388();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v56 - v16;
  uint64_t v18 = sub_1B086A748();
  uint64_t v69 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v66 = (char *)&v56 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v67 = (char *)&v56 - v21;
  uint64_t v22 = sub_1B0869508();
  uint64_t v23 = *(void *)(v22 - 8);
  __n128 v24 = MEMORY[0x1F4188790](v22);
  uint64_t v26 = (void **)((char *)&v56 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v27 = (void *)v2[2];
  *uint64_t v26 = v27;
  (*(void (**)(void *, void, uint64_t, __n128))(v23 + 104))(v26, *MEMORY[0x1E4FBCBF0], v22, v24);
  id v28 = v27;
  LOBYTE(v27) = sub_1B0869518();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v23 + 8))(v26, v22);
  if (v27)
  {
    uint64_t v80 = sub_1B0869368();
    uint64_t v30 = *(void *)(*v2 + 104);
    BOOL v56 = v2;
    uint64_t v31 = (char *)v2 + v30;
    int v76 = (char *)v2 + v30;
    swift_beginAccess();
    uint64_t v32 = v15;
    uint64_t v33 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
    uint64_t v62 = v15 + 16;
    uint64_t v63 = v33;
    v33(v17, v31, v14);
    uint64_t v34 = sub_1B0869368();
    uint64_t v65 = v32;
    int v35 = *(void (**)(char *, uint64_t))(v32 + 8);
    uint64_t v60 = v32 + 8;
    uint64_t v61 = v35;
    v35(v17, v14);
    uint64_t v81 = v34;
    uint64_t v36 = sub_1B086A098();
    uint64_t v59 = MEMORY[0x1E4FBB338];
    swift_getWitnessTable();
    uint64_t v58 = MEMORY[0x1E4F711A0];
    swift_getWitnessTable();
    uint64_t v37 = v66;
    uint64_t v64 = v36;
    sub_1B0869D38();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v38 = v67;
    sub_1B086A758();
    int v39 = *(uint64_t (**)(char *, uint64_t))(v69 + 8);
    uint64_t v40 = v39(v37, v18);
    MEMORY[0x1F4188790](v40);
    uint64_t v41 = v78;
    *(&v56 - 2) = v77;
    *(&v56 - 1) = v41;
    uint64_t v68 = MEMORY[0x1E4FBBD88];
    swift_getWitnessTable();
    uint64_t v69 = sub_1B0869F18();
    v39(v38, v18);
    uint64_t v57 = v14;
    uint64_t v80 = sub_1B0869358();
    v63(v17, v76, v14);
    uint64_t v42 = sub_1B0869358();
    v61(v17, v14);
    uint64_t v81 = v42;
    uint64_t v43 = sub_1B086A098();
    swift_getWitnessTable();
    swift_getWitnessTable();
    uint64_t v44 = v71;
    uint64_t v67 = (char *)v43;
    sub_1B0869D38();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v45 = v72;
    uint64_t v46 = v75;
    sub_1B086A758();
    uint64_t v47 = *(uint64_t (**)(char *, uint64_t))(v74 + 8);
    uint64_t v48 = v47(v44, v46);
    MEMORY[0x1F4188790](v48);
    unint64_t v49 = v78;
    *(&v56 - 2) = v77;
    *(&v56 - 1) = v49;
    swift_getWitnessTable();
    uint64_t v50 = sub_1B0869F18();
    uint64_t v51 = v69;
    v47(v45, v46);
    uint64_t v80 = v51;
    swift_getWitnessTable();
    uint64_t v52 = sub_1B086A248();
    uint64_t v53 = v57;
    if (v52 & 1) != 0 && (v80 = v50, swift_getWitnessTable(), uint64_t v52 = sub_1B086A248(), (v52))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      MEMORY[0x1F4188790](v52);
      *(&v56 - 4) = (void *)v51;
      *(&v56 - 3) = v54;
      *(&v56 - 2) = (void *)v50;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EB596240);
      sub_1B0869808();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    uint64_t v55 = v76;
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v65 + 24))(v55, v79, v53);
    return swift_endAccess();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t DiffableDataStatePresenter.dataPresenter.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t DiffableDataStatePresenter.stateStore.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 120);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EB596240);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t sub_1B081A518(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB596268);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B081A620();
  char v7 = sub_1B07EE3A0((uint64_t)v6, a2);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v7 & 1;
}

uint64_t sub_1B081A620()
{
  return sub_1B0869C38();
}

uint64_t sub_1B081A6C0@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  swift_getAssociatedTypeWitness();
  sub_1B08697A8();
  uint64_t v4 = sub_1B086A738();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  char v7 = (char *)v18 - v6;
  uint64_t v8 = swift_checkMetadataState();
  uint64_t v9 = *(void *)(v8 - 8);
  __n128 v10 = MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)v18 - v11;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16))(v7, a1, v4, v10);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
LABEL_6:
    uint64_t v16 = 1;
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(a2, v16, 1, v8);
  }
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EB595F20);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  char v14 = v7[*(int *)(TupleTypeMetadata3 + 64) + 8];
  uint64_t v15 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
  v15(v12, &v7[*(int *)(TupleTypeMetadata3 + 48)], v8);
  if ((v14 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    goto LABEL_6;
  }
  v15(a2, v12, v8);
  uint64_t v16 = 0;
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(a2, v16, 1, v8);
}

uint64_t sub_1B081A940(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v71 = a3;
  swift_getAssociatedTypeWitness();
  uint64_t v5 = sub_1B08697A8();
  uint64_t v70 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v65 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = v6;
  MEMORY[0x1F4188790](v7);
  uint64_t v68 = (char *)&v54 - v8;
  uint64_t v74 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB596268);
  uint64_t v56 = *(void *)(v74 - 8);
  MEMORY[0x1F4188790](v74);
  uint64_t v73 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_1B086A3B8();
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v69 = (char *)&v54 - v11;
  uint64_t v12 = a1;
  swift_getAssociatedTypeWitness();
  uint64_t v13 = sub_1B08697A8();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  MEMORY[0x1F4188790](v13);
  uint64_t v66 = (char *)&v54 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v54 - v17;
  uint64_t v19 = sub_1B086A3B8();
  MEMORY[0x1F4188790](v19 - 8);
  uint64_t v21 = (char *)&v54 - v20;
  uint64_t v22 = swift_bridgeObjectRetain();
  uint64_t v23 = MEMORY[0x1B3E97990](v22, v13);
  uint64_t v75 = a2;
  if (v23)
  {
    uint64_t v54 = v15;
    uint64_t v24 = 0;
    uint64_t v60 = a2 + *(void *)(*(void *)a2 + 120);
    uint64_t v61 = v18;
    BOOL v72 = (void (**)(char *, uint64_t *, uint64_t))(v14 + 32);
    uint64_t v67 = (unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 56);
    uint64_t v63 = (unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
    uint64_t v64 = (void (**)(char *, uint64_t *, uint64_t))(v14 + 16);
    uint64_t v58 = (void (**)(char *, uint64_t))(v14 + 8);
    uint64_t v59 = (void (**)(char *, uint64_t))(v56 + 8);
    unint64_t v62 = v13;
    while (1)
    {
      char v25 = sub_1B086A008();
      sub_1B0869FB8();
      if (v25)
      {
        (*(void (**)(char *, unint64_t, uint64_t))(v14 + 16))(v18, v12+ ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))+ *(void *)(v14 + 72) * v24, v13);
      }
      else
      {
        uint64_t result = sub_1B086A608();
        if (v54 != 8) {
          goto LABEL_27;
        }
        uint64_t v76 = result;
        (*v64)(v18, &v76, v13);
        swift_unknownObjectRelease();
      }
      uint64_t v26 = (uint64_t (*)(char *, char *, uint64_t))*v72;
      uint64_t result = ((uint64_t (*)(char *, char *, uint64_t))*v72)(v21, v18, v13);
      uint64_t v28 = v24 + 1;
      if (__OFADD__(v24, 1)) {
        break;
      }
      uint64_t v57 = *v67;
      ((void (*)(char *, void, uint64_t, uint64_t))v57)(v21, 0, 1, v13);
      if ((*v63)(v21, 1, v13) == 1) {
        goto LABEL_12;
      }
      uint64_t v29 = v21;
      uint64_t v30 = v66;
      v26(v66, v29, v13);
      uint64_t v31 = v14;
      uint64_t v32 = v5;
      uint64_t v33 = v12;
      uint64_t v34 = v73;
      sub_1B081A620();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EB596240);
      sub_1B08697F8();
      int v35 = v34;
      uint64_t v12 = v33;
      uint64_t v5 = v32;
      uint64_t v14 = v31;
      uint64_t v13 = v62;
      (*v59)(v35, v74);
      uint64_t v36 = v30;
      uint64_t v21 = v29;
      uint64_t v18 = v61;
      (*v58)(v36, v13);
      ++v24;
      if (v28 == MEMORY[0x1B3E97990](v12, v13))
      {
        ((void (*)(char *, uint64_t, uint64_t, uint64_t))v57)(v21, 1, 1, v13);
        goto LABEL_12;
      }
    }
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v21, 1, 1, v13);
LABEL_12:
    swift_bridgeObjectRelease();
    uint64_t v37 = v71;
    uint64_t v38 = swift_bridgeObjectRetain();
    if (MEMORY[0x1B3E97990](v38, v5))
    {
      uint64_t v39 = 0;
      uint64_t v66 = (char *)(v75 + *(void *)(*(void *)v75 + 120));
      BOOL v72 = (void (**)(char *, uint64_t *, uint64_t))(v70 + 16);
      uint64_t v40 = (uint64_t (**)(char *, char *, uint64_t))(v70 + 32);
      uint64_t v41 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v70 + 56);
      uint64_t v67 = (unsigned int (**)(char *, uint64_t, uint64_t))(v70 + 48);
      uint64_t v63 = (unsigned int (**)(char *, uint64_t, uint64_t))(v70 + 8);
      uint64_t v64 = (void (**)(char *, uint64_t *, uint64_t))(v56 + 8);
      unint64_t v62 = (v70 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
      uint64_t v42 = v73;
      while (1)
      {
        char v43 = sub_1B086A008();
        sub_1B0869FB8();
        if (v43)
        {
          unint64_t v44 = v37
              + ((*(unsigned __int8 *)(v70 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v70 + 80))
              + *(void *)(v70 + 72) * v39;
          uint64_t v45 = v68;
          (*(void (**)(char *, unint64_t, uint64_t))(v70 + 16))(v68, v44, v5);
          uint64_t v46 = v69;
        }
        else
        {
          uint64_t result = sub_1B086A608();
          uint64_t v45 = v68;
          uint64_t v46 = v69;
          if (v55 != 8) {
            goto LABEL_28;
          }
          uint64_t v76 = result;
          (*v72)(v68, &v76, v5);
          swift_unknownObjectRelease();
        }
        uint64_t v47 = *v40;
        uint64_t result = (*v40)(v46, v45, v5);
        uint64_t v48 = v39 + 1;
        if (__OFADD__(v39, 1)) {
          goto LABEL_26;
        }
        unint64_t v49 = *v41;
        (*v41)(v46, 0, 1, v5);
        if ((*v67)(v46, 1, v5) == 1) {
          break;
        }
        uint64_t v50 = v46;
        uint64_t v51 = v65;
        v47(v65, v50, v5);
        sub_1B081A620();
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EB596240);
        sub_1B08697F8();
        ((void (*)(char *, uint64_t))*v64)(v42, v74);
        ((void (*)(char *, uint64_t))*v63)(v51, v5);
        uint64_t v52 = v71;
        ++v39;
        BOOL v53 = v48 == MEMORY[0x1B3E97990](v71, v5);
        uint64_t v37 = v52;
        if (v53)
        {
          v49(v69, 1, 1, v5);
          return swift_bridgeObjectRelease();
        }
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v70 + 56))(v69, 1, 1, v5);
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

id *DiffableDataStatePresenter.deinit()
{
  uint64_t v1 = (char *)v0 + *((void *)*v0 + 13);
  swift_getAssociatedTypeWitness();
  sub_1B08697A8();
  swift_getAssociatedTypeWitness();
  sub_1B08697A8();
  swift_getWitnessTable();
  swift_getWitnessTable();
  uint64_t v2 = sub_1B0869388();
  (*(void (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_unknownObjectRelease();
  uint64_t v3 = (char *)v0 + *((void *)*v0 + 15);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EB596240);
  (*(void (**)(char *, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  return v0;
}

uint64_t DiffableDataStatePresenter.__deallocating_deinit()
{
  DiffableDataStatePresenter.deinit();

  return swift_deallocClassInstance();
}

uint64_t sub_1B081B3F8(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB596268);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  sub_1B07EEBB0(&qword_1E9B3B180);
  swift_bridgeObjectRetain();
  uint64_t v32 = a2;
  uint64_t v11 = sub_1B0869D08();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  uint64_t v31 = v10 + 56;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    uint64_t v27 = v2;
    uint64_t v28 = a1;
    uint64_t v29 = ~v12;
    uint64_t v26 = v7;
    uint64_t v15 = v7 + 16;
    uint64_t v14 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v30 = *(void *)(v7 + 72);
    uint64_t v16 = (void (**)(char *, uint64_t))(v7 + 8);
    v25[1] = v15 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v17 = v10;
      unint64_t v18 = v30 * v13;
      uint64_t v19 = v14;
      v14(v9, *(void *)(v10 + 48) + v30 * v13, v6);
      sub_1B07EEBB0(&qword_1E9B3B188);
      char v20 = sub_1B0869D58();
      uint64_t v21 = *v16;
      (*v16)(v9, v6);
      if (v20) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v29;
      uint64_t v10 = v17;
      uint64_t v14 = v19;
      if (((*(void *)(v31 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v27;
        a1 = v28;
        uint64_t v7 = v26;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v21(v32, v6);
    v19(v28, *(void *)(*v27 + 48) + v18, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v14 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v23 = v32;
    v14(v9, v32, v6);
    uint64_t v33 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    sub_1B081BB00((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    uint64_t *v3 = v33;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v23, v6);
    return 1;
  }
}

uint64_t sub_1B081B70C()
{
  uint64_t v1 = v0;
  uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB596268);
  uint64_t v2 = *(void *)(v42 - 8);
  MEMORY[0x1F4188790](v42);
  uint64_t v41 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3B738);
  uint64_t v5 = sub_1B086A588();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v8 = *(void *)(v4 + 56);
    uint64_t v37 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & v8;
    int v35 = v0;
    int64_t v36 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v39 = v2;
    uint64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    uint64_t v38 = v6;
    uint64_t v14 = v41;
    uint64_t v15 = v42;
    while (1)
    {
      if (v10)
      {
        unint64_t v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        int64_t v40 = v13;
        unint64_t v18 = v17 | (v13 << 6);
      }
      else
      {
        int64_t v19 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v19 >= v36) {
          goto LABEL_33;
        }
        unint64_t v20 = v37[v19];
        int64_t v21 = v13 + 1;
        if (!v20)
        {
          int64_t v21 = v13 + 2;
          if (v13 + 2 >= v36) {
            goto LABEL_33;
          }
          unint64_t v20 = v37[v21];
          if (!v20)
          {
            int64_t v21 = v13 + 3;
            if (v13 + 3 >= v36) {
              goto LABEL_33;
            }
            unint64_t v20 = v37[v21];
            if (!v20)
            {
              uint64_t v22 = v13 + 4;
              if (v13 + 4 >= v36)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v35;
                uint64_t v34 = 1 << *(unsigned char *)(v4 + 32);
                if (v34 > 63) {
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v37 = -1 << v34;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v20 = v37[v22];
              if (!v20)
              {
                while (1)
                {
                  int64_t v21 = v22 + 1;
                  if (__OFADD__(v22, 1)) {
                    goto LABEL_39;
                  }
                  if (v21 >= v36) {
                    goto LABEL_33;
                  }
                  unint64_t v20 = v37[v21];
                  ++v22;
                  if (v20) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v21 = v13 + 4;
            }
          }
        }
LABEL_23:
        unint64_t v10 = (v20 - 1) & v20;
        int64_t v40 = v21;
        unint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
      }
      uint64_t v23 = v4;
      uint64_t v24 = *(void *)(v4 + 48);
      uint64_t v25 = *(void *)(v39 + 72);
      uint64_t v26 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 32);
      v26(v14, v24 + v25 * v18, v15);
      uint64_t v6 = v38;
      sub_1B07EEBB0(&qword_1E9B3B180);
      uint64_t result = sub_1B0869D08();
      uint64_t v27 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v28 = result & ~v27;
      unint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v30 = 0;
        unint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v32 = v29 == v31;
          if (v29 == v31) {
            unint64_t v29 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v11 + 8 * v29);
        }
        while (v33 == -1);
        unint64_t v16 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v11 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v6 + 48) + v16 * v25, v41, v42);
      ++*(void *)(v6 + 16);
      uint64_t v4 = v23;
      int64_t v13 = v40;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v6;
  return result;
}

uint64_t sub_1B081BB00(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v32 = a1;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB596268);
  uint64_t v7 = *(void *)(v6 - 8);
  __n128 v8 = MEMORY[0x1F4188790](v6);
  unint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = *(void *)(*v3 + 16);
  unint64_t v12 = *(void *)(*v3 + 24);
  unint64_t v29 = v3;
  uint64_t v30 = v7;
  if (v12 > v11 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_1B081B70C();
  }
  else
  {
    if (v12 > v11)
    {
      sub_1B081BD8C();
      goto LABEL_12;
    }
    sub_1B081C034();
  }
  uint64_t v13 = *v3;
  sub_1B07EEBB0(&qword_1E9B3B180);
  uint64_t v14 = sub_1B0869D08();
  uint64_t v15 = -1 << *(unsigned char *)(v13 + 32);
  a2 = v14 & ~v15;
  uint64_t v31 = v13;
  uint64_t v16 = v13 + 56;
  if ((*(void *)(v16 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v17 = ~v15;
    unint64_t v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v18 = v7 + 16;
    int64_t v19 = v20;
    uint64_t v21 = *(void *)(v18 + 56);
    do
    {
      v19(v10, *(void *)(v31 + 48) + v21 * a2, v6);
      sub_1B07EEBB0(&qword_1E9B3B188);
      char v22 = sub_1B0869D58();
      (*(void (**)(char *, uint64_t))(v18 - 8))(v10, v6);
      if (v22) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v17;
    }
    while (((*(void *)(v16 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v23 = v30;
  uint64_t v24 = *v29;
  *(void *)(v24 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, __n128))(v23 + 32))(*(void *)(v24 + 48) + *(void *)(v23 + 72) * a2, v32, v6, v8);
  uint64_t v26 = *(void *)(v24 + 16);
  BOOL v27 = __OFADD__(v26, 1);
  uint64_t v28 = v26 + 1;
  if (!v27)
  {
    *(void *)(v24 + 16) = v28;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = sub_1B086A8E8();
  __break(1u);
  return result;
}

void *sub_1B081BD8C()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB596268);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3B738);
  uint64_t v6 = *v0;
  uint64_t v7 = sub_1B086A578();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_27:
    *uint64_t v1 = v8;
    return result;
  }
  char v22 = v1;
  uint64_t result = (void *)(v7 + 56);
  unint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 56 + 8 * v10) {
    uint64_t result = memmove(result, (const void *)(v6 + 56), 8 * v10);
  }
  uint64_t v23 = v6 + 56;
  int64_t v11 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  uint64_t v12 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v6 + 56);
  int64_t v24 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v11 << 6);
      goto LABEL_9;
    }
    int64_t v18 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v18 >= v24) {
      goto LABEL_25;
    }
    unint64_t v19 = *(void *)(v23 + 8 * v18);
    ++v11;
    if (!v19)
    {
      int64_t v11 = v18 + 1;
      if (v18 + 1 >= v24) {
        goto LABEL_25;
      }
      unint64_t v19 = *(void *)(v23 + 8 * v11);
      if (!v19)
      {
        int64_t v11 = v18 + 2;
        if (v18 + 2 >= v24) {
          goto LABEL_25;
        }
        unint64_t v19 = *(void *)(v23 + 8 * v11);
        if (!v19) {
          break;
        }
      }
    }
LABEL_24:
    unint64_t v14 = (v19 - 1) & v19;
    unint64_t v16 = __clz(__rbit64(v19)) + (v11 << 6);
LABEL_9:
    unint64_t v17 = *(void *)(v3 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(void *)(v6 + 48) + v17, v2);
    uint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(void *)(v8 + 48) + v17, v5, v2);
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v24)
  {
LABEL_25:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v22;
    goto LABEL_27;
  }
  unint64_t v19 = *(void *)(v23 + 8 * v20);
  if (v19)
  {
    int64_t v11 = v20;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v11 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v11 >= v24) {
      goto LABEL_25;
    }
    unint64_t v19 = *(void *)(v23 + 8 * v11);
    ++v20;
    if (v19) {
      goto LABEL_24;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_1B081C034()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB596268);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3B738);
  uint64_t v7 = sub_1B086A588();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v8;
    return result;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  uint64_t v34 = v0;
  uint64_t v35 = v6 + 56;
  if (v9 < 64) {
    uint64_t v11 = ~(-1 << v9);
  }
  else {
    uint64_t v11 = -1;
  }
  unint64_t v12 = v11 & v10;
  int64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v37 = v3 + 16;
  uint64_t v13 = v7 + 56;
  uint64_t v38 = v3;
  unint64_t v14 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v16 = 0;
  while (1)
  {
    if (v12)
    {
      unint64_t v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v19 = v18 | (v16 << 6);
      goto LABEL_24;
    }
    int64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v20 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v20);
    ++v16;
    if (!v21)
    {
      int64_t v16 = v20 + 1;
      if (v20 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v21 = *(void *)(v35 + 8 * v16);
      if (!v21)
      {
        int64_t v16 = v20 + 2;
        if (v20 + 2 >= v36) {
          goto LABEL_33;
        }
        unint64_t v21 = *(void *)(v35 + 8 * v16);
        if (!v21) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_24:
    uint64_t v23 = v6;
    uint64_t v24 = *(void *)(v6 + 48);
    uint64_t v25 = *(void *)(v38 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v5, v24 + v25 * v19, v2);
    sub_1B07EEBB0(&qword_1E9B3B180);
    uint64_t result = sub_1B0869D08();
    uint64_t v26 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v31 = v28 == v30;
        if (v28 == v30) {
          unint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v13 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v17 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t result = (*v14)(*(void *)(v8 + 48) + v17 * v25, v5, v2);
    ++*(void *)(v8 + 16);
    uint64_t v6 = v23;
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v36)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v34;
    goto LABEL_35;
  }
  unint64_t v21 = *(void *)(v35 + 8 * v22);
  if (v21)
  {
    int64_t v16 = v22;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v16 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v16 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v16);
    ++v22;
    if (v21) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1B081C3DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v74 = a1;
  uint64_t v75 = a4;
  uint64_t v70 = *(void *)v4;
  uint64_t v8 = *(void *)(v70 + 88);
  uint64_t v9 = *(void *)(v70 + 80);
  swift_getAssociatedTypeWitness();
  uint64_t v10 = sub_1B08697A8();
  uint64_t v71 = v9;
  uint64_t v72 = v8;
  swift_getAssociatedTypeWitness();
  uint64_t v60 = sub_1B08697A8();
  uint64_t v61 = v10;
  v76[0] = v10;
  v76[1] = v60;
  uint64_t WitnessTable = swift_getWitnessTable();
  v76[2] = WitnessTable;
  uint64_t v77 = swift_getWitnessTable();
  uint64_t v58 = v77;
  uint64_t v11 = sub_1B0869388();
  uint64_t v12 = sub_1B0869918();
  uint64_t v67 = *(void *)(v12 - 8);
  uint64_t v68 = v12;
  MEMORY[0x1F4188790](v12);
  uint64_t v66 = (char *)&v48 - v13;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB596258);
  uint64_t v63 = *(void *)(v14 - 8);
  uint64_t v64 = v14;
  MEMORY[0x1F4188790](v14);
  unint64_t v62 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EB596240);
  uint64_t v56 = *(void *)(v57 - 8);
  MEMORY[0x1F4188790](v57);
  uint64_t v55 = (char *)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = v11;
  uint64_t v54 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v17);
  BOOL v53 = (char *)&v48 - v18;
  uint64_t v52 = sub_1B086A2E8();
  uint64_t v50 = *(void *)(v52 - 8);
  MEMORY[0x1F4188790](v52);
  uint64_t v51 = (char *)&v48 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_1B086A2D8();
  MEMORY[0x1F4188790](v20);
  uint64_t v21 = sub_1B08694F8();
  MEMORY[0x1F4188790](v21 - 8);
  uint64_t v22 = *(void *)(a3 - 8);
  __n128 v24 = MEMORY[0x1F4188790](v23);
  uint64_t v26 = (char *)&v48 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v27 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 16);
  uint64_t v65 = a2;
  unint64_t v49 = v27;
  ((void (*)(char *, uint64_t, uint64_t, __n128))v27)(v26, a2, a3, v24);
  LOBYTE(v11) = sub_1B08696E8();
  unint64_t v28 = *(uint64_t (**)(char *, uint64_t))(v22 + 8);
  uint64_t v69 = a3;
  uint64_t result = v28(v26, a3);
  if (v11)
  {
    unint64_t v30 = sub_1B07BE798();
    sub_1B08694E8();
    v76[0] = MEMORY[0x1E4FBC860];
    sub_1B081CF54();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5962B8);
    sub_1B081D0C4(&qword_1EB5962C0, &qword_1EB5962B8);
    sub_1B086A498();
    (*(void (**)(char *, void, uint64_t))(v50 + 104))(v51, *MEMORY[0x1E4FBCC58], v52);
    unint64_t v31 = v30;
    unint64_t v48 = v30;
    *((void *)v5 + 2) = sub_1B086A338();
    uint64_t v32 = v53;
    sub_1B0869378();
    (*(void (**)(char *, char *, uint64_t))(v54 + 32))(&v5[*(void *)(*(void *)v5 + 104)], v32, v73);
    *(void *)&v5[*(void *)(*(void *)v5 + 112)] = v74;
    uint64_t v33 = v69;
    v49(v26, v65, v69);
    swift_unknownObjectRetain();
    uint64_t v34 = v55;
    uint64_t v35 = v75;
    sub_1B0869828();
    (*(void (**)(char *, char *, uint64_t))(v56 + 32))(&v5[*(void *)(*(void *)v5 + 120)], v34, v57);
    sub_1B08696F8();
    int64_t v36 = (void *)*((void *)v5 + 2);
    uint64_t v77 = v31;
    uint64_t v78 = MEMORY[0x1E4F71860];
    v76[0] = v36;
    uint64_t v37 = swift_allocObject();
    *(void *)(v37 + 16) = v33;
    *(void *)(v37 + 24) = v35;
    uint64_t v38 = (void *)swift_allocObject();
    void v38[2] = v33;
    v38[3] = v35;
    v38[4] = sub_1B081CFBC;
    v38[5] = v37;
    id v39 = v36;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EB596220);
    uint64_t v65 = MEMORY[0x1E4F710F0];
    sub_1B081D0C4(&qword_1EB596218, &qword_1EB596220);
    int64_t v40 = v62;
    sub_1B08697C8();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v63 + 8))(v40, v64);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v76);
    uint64_t v41 = v72;
    uint64_t v42 = v71;
    (*(void (**)(uint64_t, uint64_t))(v72 + 32))(v71, v72);
    char v43 = (void *)*((void *)v5 + 2);
    uint64_t v77 = v48;
    uint64_t v78 = MEMORY[0x1E4F71860];
    v76[0] = v43;
    uint64_t v44 = swift_allocObject();
    *(void *)(v44 + 16) = v33;
    *(void *)(v44 + 24) = v35;
    uint64_t v45 = (void *)swift_allocObject();
    _OWORD v45[2] = v33;
    v45[3] = v35;
    v45[4] = sub_1B081D118;
    void v45[5] = v44;
    sub_1B0869548();
    id v46 = v43;
    swift_getWitnessTable();
    uint64_t v47 = v66;
    sub_1B08697C8();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v67 + 8))(v47, v68);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v76);
    (*(void (**)(uint64_t, uint64_t))(v41 + 40))(v42, v41);
    return (uint64_t)v5;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1B081CD80()
{
  swift_getAssociatedTypeWitness();
  sub_1B08697A8();
  swift_getAssociatedTypeWitness();
  sub_1B08697A8();
  swift_getWitnessTable();
  swift_getWitnessTable();
  sub_1B0869388();
  if (v0 <= 0x3F)
  {
    sub_1B07E5F9C();
    if (v1 <= 0x3F) {
      swift_initClassMetadata2();
    }
  }
}

uint64_t type metadata accessor for DiffableDataStatePresenter()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t method lookup function for DiffableDataStatePresenter(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for DiffableDataStatePresenter);
}

uint64_t dispatch thunk of DiffableDataStatePresenter.__allocating_init<A>(dataPresenter:stateStore:)()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

unint64_t sub_1B081CF54()
{
  unint64_t result = qword_1EB5962C8;
  if (!qword_1EB5962C8)
  {
    sub_1B086A2D8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB5962C8);
  }
  return result;
}

uint64_t sub_1B081CFAC()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t (*sub_1B081CFBC(uint64_t a1))()
{
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(v1 + 16);
  *(void *)(v3 + 32) = a1;
  swift_retain();
  return sub_1B081D2B0;
}

uint64_t sub_1B081D02C()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t (*sub_1B081D064())(void *a1)
{
  uint64_t v1 = (*(uint64_t (**)(void))(v0 + 32))();
  uint64_t v3 = v2;
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v1;
  *(void *)(v4 + 24) = v3;
  return sub_1B081D284;
}

uint64_t sub_1B081D0C4(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1B081D108()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t (*sub_1B081D118(uint64_t a1))(uint64_t a1)
{
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(v1 + 16);
  *(void *)(v3 + 32) = a1;
  swift_retain();
  return sub_1B081D1C0;
}

uint64_t sub_1B081D188()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t sub_1B081D1C0(uint64_t a1)
{
  return sub_1B0819B60(a1);
}

uint64_t sub_1B081D1E4@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  return sub_1B081A6C0(a1, a2);
}

uint64_t sub_1B081D208@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  return sub_1B081A6C0(a1, a2);
}

uint64_t sub_1B081D22C()
{
  return sub_1B081A940(v0[2], v0[3], v0[4]);
}

uint64_t sub_1B081D24C()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1B081D284(void *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

uint64_t sub_1B081D2B0()
{
  return sub_1B08195D4();
}

uint64_t sub_1B081D2D4(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB596268);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  unint64_t v28 = (char *)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  unint64_t v27 = (char *)v21 - v6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3B730);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(a1 + 16);
  sub_1B07EEBB0(&qword_1E9B3B180);
  uint64_t v29 = sub_1B086A168();
  if (v10)
  {
    uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    uint64_t v13 = a1 + ((*(unsigned __int8 *)(v11 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 64));
    uint64_t v14 = *(void *)(v11 + 56);
    unint64_t v15 = v11 + 40;
    __n128 v24 = (unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 32);
    uint64_t v25 = v12;
    uint64_t v22 = (void (**)(char *, char *, uint64_t))(v11 + 16);
    uint64_t v23 = v14;
    uint64_t v26 = v11;
    uint64_t v16 = (void (**)(uint64_t, uint64_t))(v11 - 8);
    v21[1] = v15 & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    uint64_t v18 = (uint64_t)v27;
    uint64_t v17 = v28;
    while (1)
    {
      v25(v9, v13, v2);
      uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))v15;
      (*(void (**)(char *, void, uint64_t, uint64_t))v15)(v9, 0, 1, v2);
      if ((*v24)(v9, 1, v2) == 1) {
        break;
      }
      (*v22)(v17, v9, v2);
      sub_1B081B3F8(v18, v17);
      (*v16)(v18, v2);
      v13 += v23;
      if (!--v10) {
        goto LABEL_7;
      }
    }
  }
  else
  {
    uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
LABEL_7:
    v19(v9, 1, 1, v2);
  }
  return v29;
}

uint64_t sub_1B081D574(uint64_t a1)
{
  return sub_1B081A518(a1, *(void *)(v1 + 16)) & 1;
}

uint64_t sub_1B081D59C(uint64_t a1)
{
  return sub_1B081A518(a1, *(void *)(v1 + 16)) & 1;
}

double static Dimensions.cumulativeLanguageAwareOutsets(of:compatibleWith:)(uint64_t a1, uint64_t a2)
{
  double v3 = *MEMORY[0x1E4FB2848];
  double v2 = *(double *)(MEMORY[0x1E4FB2848] + 8);
  double v5 = *(double *)(MEMORY[0x1E4FB2848] + 16);
  double v4 = *(double *)(MEMORY[0x1E4FB2848] + 24);
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    uint64_t v8 = (void *)(a1 + 32);
    swift_bridgeObjectRetain();
    do
    {
      uint64_t v9 = v8[3];
      uint64_t v10 = v8[4];
      __swift_project_boxed_opaque_existential_1(v8, v9);
      double v3 = v3 + (*(double (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(a2, v9, v10);
      double v2 = v2 + v11;
      double v5 = v5 + v12;
      double v4 = v4 + v13;
      v8 += 5;
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease();
  }
  return v3;
}

void AnyDimension.value(for:roundingRule:)()
{
}

ValueMetadata *type metadata accessor for Dimensions()
{
  return &type metadata for Dimensions;
}

uint64_t dispatch thunk of AnyDimension.languageAwareOutsets(compatibleWith:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t static LabelPlaceholder.Options.languageAware.getter()
{
  return 1;
}

void LabelPlaceholder.init(_:with:where:)(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = *a2;
  long long v7 = *(_OWORD *)(a2 + 1);
  long long v8 = *(_OWORD *)(a2 + 3);
  if (a1)
  {
    long long v11 = *(_OWORD *)(a2 + 3);
    long long v12 = *(_OWORD *)(a2 + 1);
    id v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28B18]), sel_initWithAttributedString_, a1);

    long long v8 = v11;
    long long v7 = v12;
  }
  else
  {
    id v10 = 0;
  }
  *(void *)a4 = v10;
  *(void *)(a4 + 8) = 0;
  *(unsigned char *)(a4 + 16) = 1;
  *(void *)(a4 + 24) = v6;
  *(_OWORD *)(a4 + 32) = v7;
  *(_OWORD *)(a4 + 48) = v8;
  *(unsigned char *)(a4 + 96) = 0;
  *(void *)(a4 + 104) = a3;
}

uint64_t LabelPlaceholder.isTextEmpty.getter()
{
  unint64_t v1 = *(void *)v0;
  if (*(unsigned char *)(v0 + 16))
  {
    return !v1 || objc_msgSend((id)v1, sel_length) == 0;
  }
  else
  {
    unint64_t v3 = *(void *)(v0 + 8);
    uint64_t v4 = HIBYTE(v3) & 0xF;
    if ((v3 & 0x2000000000000000) == 0) {
      uint64_t v4 = v1 & 0xFFFFFFFFFFFFLL;
    }
    BOOL v5 = v4 == 0;
    return !v3 || v5;
  }
}

Swift::Bool __swiftcall LabelPlaceholder.willTextTruncate(fitting:with:)(CGSize fitting, UITraitCollection with)
{
  double height = fitting.height;
  double width = fitting.width;
  if (fitting.width == 0.0 && fitting.height == 0.0)
  {
    __break(1u);
    return (Swift::Bool)with.super.isa;
  }
  Class isa = with.super.isa;
  with.super.Class isa = *(Class *)v2;
  if (*(unsigned char *)(v2 + 16))
  {
    if (!with.super.isa) {
      return (Swift::Bool)with.super.isa;
    }
    with.super.Class isa = (Class)[(objc_class *)with.super.isa length];
    if (!with.super.isa) {
      return (Swift::Bool)with.super.isa;
    }
    goto LABEL_14;
  }
  unint64_t v7 = *(void *)(v2 + 8);
  if (!v7)
  {
    LOBYTE(with.super.isa) = 0;
    return (Swift::Bool)with.super.isa;
  }
  if ((v7 & 0x2000000000000000) != 0) {
    with.super.Class isa = (Class)(HIBYTE(v7) & 0xF);
  }
  else {
    with.super.Class isa = (Class)((unint64_t)with.super.isa & 0xFFFFFFFFFFFFLL);
  }
  if (with.super.isa)
  {
LABEL_14:
    LOBYTE(with.super.isa) = 1;
    if (width > 0.0 && height > 0.0)
    {
      JUMeasurements v9 = LabelPlaceholder.measure(toFit:with:)((CGSize)__PAIR128__(0x7FEFFFFFFFFFFFFFLL, *(unint64_t *)&width), (UITraitCollection)isa);
      LOBYTE(with.super.isa) = ceil(height) < ceil(v9.var1);
    }
  }
  return (Swift::Bool)with.super.isa;
}

void sub_1B081D8FC(void *a1, void *a2, uint64_t a3, char a4)
{
  if (a1)
  {
    if (a4)
    {
      if (a2)
      {
        sub_1B07B2F10(a2, a3, 1);
        id v11 = a1;
        sub_1B07B2F10(a2, a3, 1);
        id v12 = objc_msgSend(a2, sel_string);
        uint64_t v13 = sub_1B0869D98();
        uint64_t v15 = v14;

        uint64_t aBlock = v13;
        uint64_t v29 = v15;
        if (qword_1EB5964B8 != -1) {
          swift_once();
        }
        uint64_t v16 = sub_1B0869078();
        __swift_project_value_buffer(v16, (uint64_t)qword_1EB596390);
        sub_1B07B862C();
        sub_1B086A408();
        char v18 = v17;
        swift_bridgeObjectRelease();
        if ((v18 & 1) == 0)
        {
          long long v19 = *(_OWORD *)(MEMORY[0x1E4FB2848] + 16);
          long long v35 = *MEMORY[0x1E4FB2848];
          long long v36 = v19;
          char v34 = 0;
          id v20 = objc_msgSend(a2, sel_length);
          uint64_t v21 = *MEMORY[0x1E4FB06F8];
          uint64_t v22 = swift_allocObject();
          *(void *)(v22 + 16) = &v35;
          *(void *)(v22 + 24) = &v34;
          uint64_t v23 = swift_allocObject();
          *(void *)(v23 + 16) = sub_1B07CA434;
          *(void *)(v23 + 24) = v22;
          uint64_t v32 = sub_1B07DC094;
          uint64_t v33 = v23;
          uint64_t aBlock = MEMORY[0x1E4F143A8];
          uint64_t v29 = 1107296256;
          unint64_t v30 = sub_1B07C89E8;
          unint64_t v31 = &block_descriptor_4;
          __n128 v24 = _Block_copy(&aBlock);
          swift_retain();
          swift_release();
          objc_msgSend(a2, sel_enumerateAttribute_inRange_options_usingBlock_, v21, 0, v20, 0x100000, v24);
          _Block_release(v24);
          LOBYTE(v20) = swift_isEscapingClosureAtFileLocation();
          swift_release();
          if (v20)
          {
            __break(1u);
            return;
          }
          if (v34 != 1)
          {
            *(void *)&long long v35 = UIFont.languageAwareOutsets.getter();
            *((void *)&v35 + 1) = v25;
            *(void *)&long long v36 = v26;
            *((void *)&v36 + 1) = v27;
          }
          swift_release();
        }
        sub_1B07BE788(a2, a3, 1);
        sub_1B07BE788(a2, a3, 1);
      }
    }
    else if (a3)
    {
      uint64_t aBlock = (uint64_t)a2;
      uint64_t v29 = a3;
      uint64_t v7 = qword_1EB5964B8;
      id v8 = a1;
      if (v7 != -1) {
        swift_once();
      }
      uint64_t v9 = sub_1B0869078();
      __swift_project_value_buffer(v9, (uint64_t)qword_1EB596390);
      sub_1B07B862C();
      sub_1B086A408();
      if ((v10 & 1) == 0) {
        UIFont.languageAwareOutsets.getter();
      }
    }
  }
}

uint64_t LabelPlaceholder.Options.description.getter(char a1)
{
  if (a1)
  {
    unint64_t v1 = sub_1B07CE768(0, 1, 1, MEMORY[0x1E4FBC860]);
    unint64_t v3 = *((void *)v1 + 2);
    unint64_t v2 = *((void *)v1 + 3);
    if (v3 >= v2 >> 1) {
      unint64_t v1 = sub_1B07CE768((char *)(v2 > 1), v3 + 1, 1, v1);
    }
    *((void *)v1 + 2) = v3 + 1;
    uint64_t v4 = &v1[16 * v3];
    strcpy(v4 + 32, ".languageAware");
    v4[47] = -18;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3B740);
  sub_1B081E4A4();
  sub_1B0869D48();
  swift_bridgeObjectRelease();
  sub_1B0869E68();
  swift_bridgeObjectRelease();
  sub_1B0869E68();
  return 91;
}

uint64_t sub_1B081DE24()
{
  return LabelPlaceholder.Options.description.getter(*v0);
}

__n128 LabelPlaceholder.init(_:with:where:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  long long v5 = *a3;
  *(_OWORD *)(a5 + 40) = a3[1];
  __n128 result = (__n128)a3[2];
  long long v7 = a3[3];
  *(__n128 *)(a5 + 56) = result;
  *(_OWORD *)(a5 + 72) = v7;
  *(void *)a5 = a1;
  *(void *)(a5 + 8) = a2;
  *(unsigned char *)(a5 + 16) = 0;
  *(void *)(a5 + 88) = *((void *)a3 + 8);
  *(_OWORD *)(a5 + 24) = v5;
  *(unsigned char *)(a5 + 96) = 1;
  *(void *)(a5 + 104) = a4;
  return result;
}

__n128 LabelPlaceholder.init(_:with:where:)@<Q0>(void *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (a1)
  {
    id v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28B18]), sel_initWithAttributedString_, a1);
  }
  else
  {
    id v8 = 0;
  }
  long long v9 = *a2;
  *(_OWORD *)(a4 + 40) = a2[1];
  __n128 result = (__n128)a2[2];
  long long v11 = a2[3];
  *(__n128 *)(a4 + 56) = result;
  *(_OWORD *)(a4 + 72) = v11;
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = 0;
  *(unsigned char *)(a4 + 16) = 1;
  *(void *)(a4 + 88) = *((void *)a2 + 8);
  *(_OWORD *)(a4 + 24) = v9;
  *(unsigned char *)(a4 + 96) = 1;
  *(void *)(a4 + 104) = a3;
  return result;
}

uint64_t LabelPlaceholder.description.getter()
{
  uint64_t v1 = v0;
  unint64_t v3 = *(void **)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  if (*(unsigned char *)(v0 + 16))
  {
    if (v3)
    {
      sub_1B07B2F10(v3, v2, 1);
      id v4 = v3;
      sub_1B086A5E8();
      swift_bridgeObjectRelease();
      *(void *)id v39 = 0xD000000000000010;
      *(void *)&v39[8] = 0x80000001B0875650;
      id v5 = objc_msgSend(v4, sel_description);
      sub_1B0869D98();

      sub_1B0869E68();
      swift_bridgeObjectRelease();
      long long v6 = *(_OWORD *)v39;
      long long v7 = sub_1B07CE768(0, 1, 1, MEMORY[0x1E4FBC860]);
      unint64_t v9 = *((void *)v7 + 2);
      unint64_t v8 = *((void *)v7 + 3);
      if (v9 >= v8 >> 1) {
        long long v7 = sub_1B07CE768((char *)(v8 > 1), v9 + 1, 1, v7);
      }
      *((void *)v7 + 2) = v9 + 1;
      *(_OWORD *)&v7[16 * v9 + 32] = v6;
      sub_1B07BE788(v3, v2, 1);
      sub_1B07BE788(v3, v2, 1);
      goto LABEL_17;
    }
    long long v7 = sub_1B07CE768(0, 1, 1, MEMORY[0x1E4FBC860]);
    unint64_t v14 = *((void *)v7 + 2);
    unint64_t v13 = *((void *)v7 + 3);
    if (v14 >= v13 >> 1) {
      long long v7 = sub_1B07CE768((char *)(v13 > 1), v14 + 1, 1, v7);
    }
    *((void *)v7 + 2) = v14 + 1;
    uint64_t v15 = &v7[16 * v14];
    unint64_t v16 = 0xD000000000000013;
    unint64_t v17 = 0x80000001B08755D0;
LABEL_16:
    *((void *)v15 + 4) = v16;
    *((void *)v15 + 5) = v17;
    goto LABEL_17;
  }
  if (!v2)
  {
    long long v7 = sub_1B07CE768(0, 1, 1, MEMORY[0x1E4FBC860]);
    unint64_t v19 = *((void *)v7 + 2);
    unint64_t v18 = *((void *)v7 + 3);
    if (v19 >= v18 >> 1) {
      long long v7 = sub_1B07CE768((char *)(v18 > 1), v19 + 1, 1, v7);
    }
    *((void *)v7 + 2) = v19 + 1;
    uint64_t v15 = &v7[16 * v19];
    unint64_t v16 = 0x696E203A74786574;
    unint64_t v17 = 0xE90000000000006CLL;
    goto LABEL_16;
  }
  *(void *)id v39 = 0x203A74786574;
  *(void *)&v39[8] = 0xE600000000000000;
  sub_1B07B2F10(v3, v2, 0);
  sub_1B0869E68();
  sub_1B07BE788(v3, v2, 0);
  long long v10 = *(_OWORD *)v39;
  long long v7 = sub_1B07CE768(0, 1, 1, MEMORY[0x1E4FBC860]);
  unint64_t v12 = *((void *)v7 + 2);
  unint64_t v11 = *((void *)v7 + 3);
  if (v12 >= v11 >> 1) {
    long long v7 = sub_1B07CE768((char *)(v11 > 1), v12 + 1, 1, v7);
  }
  *((void *)v7 + 2) = v12 + 1;
  *(_OWORD *)&v7[16 * v12 + 32] = v10;
LABEL_17:
  sub_1B07BE7D8(v1 + 24, (uint64_t)v39);
  if (v43)
  {
    long long v36 = v40;
    long long v37 = v41;
    uint64_t v38 = v42;
    *(_OWORD *)long long v35 = *(_OWORD *)v39;
    *(_OWORD *)&v35[16] = *(_OWORD *)&v39[16];
    sub_1B086A5E8();
    sub_1B0869E68();
    sub_1B086A6B8();
    unint64_t v21 = *((void *)v7 + 2);
    unint64_t v20 = *((void *)v7 + 3);
    if (v21 >= v20 >> 1) {
      long long v7 = sub_1B07CE768((char *)(v20 > 1), v21 + 1, 1, v7);
    }
    *((void *)v7 + 2) = v21 + 1;
    uint64_t v22 = &v7[16 * v21];
    *((void *)v22 + 4) = 0;
    *((void *)v22 + 5) = 0xE000000000000000;
    sub_1B07EA0DC((uint64_t)v35);
    uint64_t v23 = *(void *)(v1 + 104);
    if (!v23) {
      goto LABEL_28;
    }
LABEL_25:
    strcpy(v39, "options: ");
    *(_WORD *)&uint64_t v39[10] = 0;
    *(_DWORD *)&v39[12] = -385875968;
    LabelPlaceholder.Options.description.getter(v23);
    sub_1B0869E68();
    swift_bridgeObjectRelease();
    long long v29 = *(_OWORD *)v39;
    unint64_t v31 = *((void *)v7 + 2);
    unint64_t v30 = *((void *)v7 + 3);
    if (v31 >= v30 >> 1) {
      long long v7 = sub_1B07CE768((char *)(v30 > 1), v31 + 1, 1, v7);
    }
    *((void *)v7 + 2) = v31 + 1;
    *(_OWORD *)&v7[16 * v31 + 32] = v29;
    goto LABEL_28;
  }
  __n128 v24 = *(void **)v39;
  long long v33 = *(_OWORD *)&v39[8];
  uint64_t v25 = *(void *)&v39[24];
  uint64_t v26 = v40;
  *(void *)long long v35 = 0;
  *(void *)&v35[8] = 0xE000000000000000;
  sub_1B086A5E8();
  long long v34 = *(_OWORD *)v35;
  sub_1B0869E68();
  *(void *)long long v35 = v24;
  *(_OWORD *)&v35[8] = v33;
  *(void *)&v35[24] = v25;
  *(void *)&long long v36 = v26;
  sub_1B086A6B8();
  unint64_t v28 = *((void *)v7 + 2);
  unint64_t v27 = *((void *)v7 + 3);
  if (v28 >= v27 >> 1) {
    long long v7 = sub_1B07CE768((char *)(v27 > 1), v28 + 1, 1, v7);
  }
  *((void *)v7 + 2) = v28 + 1;
  *(_OWORD *)&v7[16 * v28 + 32] = v34;

  uint64_t v23 = *(void *)(v1 + 104);
  if (v23) {
    goto LABEL_25;
  }
LABEL_28:
  *(void *)id v39 = 0xD000000000000011;
  *(void *)&v39[8] = 0x80000001B0875610;
  *(void *)long long v35 = v7;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3B740);
  sub_1B081E4A4();
  sub_1B0869D48();
  swift_bridgeObjectRelease();
  sub_1B0869E68();
  swift_bridgeObjectRelease();
  sub_1B0869E68();
  return *(void *)v39;
}

unint64_t sub_1B081E4A4()
{
  unint64_t result = qword_1E9B3B748;
  if (!qword_1E9B3B748)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1E9B3B740);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3B748);
  }
  return result;
}

unint64_t sub_1B081E504()
{
  unint64_t result = qword_1E9B3B750;
  if (!qword_1E9B3B750)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3B750);
  }
  return result;
}

unint64_t sub_1B081E55C()
{
  unint64_t result = qword_1E9B3B758;
  if (!qword_1E9B3B758)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3B758);
  }
  return result;
}

unint64_t sub_1B081E5B4()
{
  unint64_t result = qword_1E9B3B760;
  if (!qword_1E9B3B760)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3B760);
  }
  return result;
}

unint64_t sub_1B081E60C()
{
  unint64_t result = qword_1E9B3B768[0];
  if (!qword_1E9B3B768[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1E9B3B768);
  }
  return result;
}

uint64_t assignWithCopy for LabelPlaceholder(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  sub_1B07B2F10(*(void **)a2, v5, v6);
  long long v7 = *(void **)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  char v9 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  sub_1B07BE788(v7, v8, v9);
  if (a1 != a2)
  {
    sub_1B081E784(a1 + 24);
    if (*(unsigned char *)(a2 + 96))
    {
      uint64_t v10 = *(void *)(a2 + 48);
      *(void *)(a1 + 48) = v10;
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1 + 24, a2 + 24);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      *(unsigned char *)(a1 + 96) = 1;
    }
    else
    {
      unint64_t v11 = *(void **)(a2 + 24);
      *(void *)(a1 + 24) = v11;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      *(unsigned char *)(a1 + 96) = 0;
      id v12 = v11;
    }
  }
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  return a1;
}

uint64_t sub_1B081E784(uint64_t a1)
{
  return a1;
}

uint64_t assignWithTake for LabelPlaceholder(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void **)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  char v7 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v4;
  sub_1B07BE788(v5, v6, v7);
  if (a1 != a2)
  {
    sub_1B081E784(a1 + 24);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 81) = *(_OWORD *)(a2 + 81);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  }
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  return a1;
}

ValueMetadata *type metadata accessor for LabelPlaceholder.Options()
{
  return &type metadata for LabelPlaceholder.Options;
}

ValueMetadata *type metadata accessor for LabelPlaceholder.TextContent()
{
  return &type metadata for LabelPlaceholder.TextContent;
}

void destroy for LabelPlaceholder.Appearance(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 72);
  if (v1 >= 2) {
    unsigned int v1 = *(_DWORD *)a1 + 2;
  }
  if (v1 == 1) {
    __swift_destroy_boxed_opaque_existential_1(a1);
  }
  else {
}
  }

uint64_t assignWithCopy for LabelPlaceholder.Appearance(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 72);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 == 1) {
      __swift_destroy_boxed_opaque_existential_1(a1);
    }
    else {

    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 72);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      uint64_t v6 = *(void *)(a2 + 24);
      *(void *)(a1 + 24) = v6;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1, a2);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(unsigned char *)(a1 + 72) = 1;
    }
    else
    {
      char v7 = *(void **)a2;
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(unsigned char *)(a1 + 72) = 0;
      id v8 = v7;
    }
  }
  return a1;
}

__n128 __swift_memcpy73_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for LabelPlaceholder.Appearance(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 72);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 == 1) {
      __swift_destroy_boxed_opaque_existential_1(a1);
    }
    else {

    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 72);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      long long v6 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v6;
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      long long v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v7;
      char v8 = 1;
    }
    else
    {
      char v8 = 0;
      long long v9 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v9;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
    }
    *(unsigned char *)(a1 + 72) = v8;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for LabelPlaceholder.Appearance(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 73)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 72);
  if (v3 >= 2) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for LabelPlaceholder.Appearance(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 57) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)__n128 result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 73) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 73) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 72) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1B081EB00(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 72);
  if (result >= 2) {
    return (*(_DWORD *)a1 + 2);
  }
  return result;
}

uint64_t sub_1B081EB1C(uint64_t result, unsigned int a2)
{
  if (a2 > 1)
  {
    *(void *)(result + 64) = 0;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)uint64_t result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 72) = a2;
  return result;
}

ValueMetadata *type metadata accessor for LabelPlaceholder.Appearance()
{
  return &type metadata for LabelPlaceholder.Appearance;
}

uint64_t sub_1B081EB58()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1B081EB68()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t block_destroy_helper_4()
{
  return swift_release();
}

double MeasurementRange.constrain(_:)(uint64_t a1, char a2, uint64_t a3, char a4, double result)
{
  double v5 = *(double *)&a1;
  BOOL v6 = (a2 & 1) == 0 && *(double *)&a1 > result;
  if (!v6) {
    double v5 = result;
  }
  if (*(double *)&a3 < result) {
    uint64_t result = *(double *)&a3;
  }
  if (a4) {
    uint64_t result = v5;
  }
  if (v6) {
    return v5;
  }
  return result;
}

uint64_t static MeasurementRange.infinite.getter()
{
  return 0;
}

uint64_t MeasurementRange.minimum.setter(uint64_t result, char a2)
{
  *(void *)uint64_t v2 = result;
  *(unsigned char *)(v2 + 8) = a2 & 1;
  return result;
}

double (*MeasurementRange.minimum.modify())(void)
{
  return nullsub_1;
}

uint64_t MeasurementRange.maximum.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t MeasurementRange.maximum.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 16) = result;
  *(unsigned char *)(v2 + 24) = a2 & 1;
  return result;
}

double (*MeasurementRange.maximum.modify())(void)
{
  return nullsub_1;
}

uint64_t MeasurementRange.contains(_:)(uint64_t a1, char a2, uint64_t a3, char a4, double a5)
{
  if ((a2 & 1) != 0 || *(double *)&a1 <= a5) {
    return a4 & 1 | (*(double *)&a3 >= a5);
  }
  else {
    return 0;
  }
}

uint64_t MeasurementRange.description.getter(uint64_t a1, char a2, uint64_t a3, char a4)
{
  if ((a2 & 1) == 0)
  {
    if (a4)
    {
      uint64_t v5 = sub_1B086A128();
      sub_1B0869E68();
      return v5;
    }
    uint64_t v5 = sub_1B086A128();
    sub_1B0869E68();
LABEL_6:
    sub_1B086A128();
    sub_1B0869E68();
    swift_bridgeObjectRelease();
    return v5;
  }
  if ((a4 & 1) == 0)
  {
    uint64_t v5 = 3026478;
    goto LABEL_6;
  }
  return 0x6574696E69666E69;
}

uint64_t static MeasurementRange.== infix(_:_:)(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, char a6, uint64_t a7, char a8)
{
  if (a2)
  {
    if ((a6 & 1) == 0) {
      return 0;
    }
  }
  else if ((a6 & 1) != 0 || *(double *)&a1 != *(double *)&a5)
  {
    return 0;
  }
  if (a4)
  {
    if (a8) {
      return 1;
    }
  }
  else if ((a8 & 1) == 0 && *(double *)&a3 == *(double *)&a7)
  {
    return 1;
  }
  return 0;
}

uint64_t sub_1B081EDC0(uint64_t a1, uint64_t a2)
{
  char v2 = *(unsigned char *)(a2 + 8);
  char v3 = *(unsigned char *)(a2 + 24);
  if (*(unsigned char *)(a1 + 8))
  {
    if (!*(unsigned char *)(a2 + 8)) {
      return 0;
    }
  }
  else
  {
    if (*(double *)a1 != *(double *)a2) {
      char v2 = 1;
    }
    if (v2) {
      return 0;
    }
  }
  if (*(unsigned char *)(a1 + 24))
  {
    if (*(unsigned char *)(a2 + 24)) {
      return 1;
    }
  }
  else
  {
    if (*(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      char v3 = 1;
    }
    if ((v3 & 1) == 0) {
      return 1;
    }
  }
  return 0;
}

uint64_t sub_1B081EE28()
{
  return MeasurementRange.description.getter(*(void *)v0, *(unsigned char *)(v0 + 8), *(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

uint64_t ... prefix(_:)()
{
  return 0;
}

__n128 __swift_memcpy25_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for MeasurementRange(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for MeasurementRange(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 25) = v3;
  return result;
}

ValueMetadata *type metadata accessor for MeasurementRange()
{
  return &type metadata for MeasurementRange;
}

void UILabel.textAppearance.setter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  id v6 = *(id *)a1;
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 32);
  objc_msgSend(v1, sel_setFont_);
  objc_msgSend(v1, sel_setTextAlignment_, v2);
  objc_msgSend(v1, sel_setLineBreakMode_, v3);
  objc_msgSend(v1, sel_setNumberOfLines_, v4);
  objc_msgSend(v1, sel_setLineSpacing_, v5);
}

id UILabel.init(with:)(uint64_t a1)
{
  unsigned int v1 = *(void **)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v6, sel_setFont_, v1);
  objc_msgSend(v6, sel_setTextAlignment_, v2);
  objc_msgSend(v6, sel_setLineBreakMode_, v4);
  objc_msgSend(v6, sel_setNumberOfLines_, v3);
  objc_msgSend(v6, sel_setLineSpacing_, v5);

  return v6;
}

id UILabel.textAppearance.getter@<X0>(void *a1@<X8>)
{
  id v3 = objc_msgSend(self, sel_preferredFontForTextStyle_compatibleWithTraitCollection_, *MEMORY[0x1E4FB28C8], 0);
  id result = objc_msgSend(v1, sel_font);
  if (result)
  {
    id v5 = result;

    id v6 = objc_msgSend(v1, sel_textAlignment);
    id v7 = objc_msgSend(v1, sel_lineBreakMode);
    id v8 = objc_msgSend(v1, sel_numberOfLines);
    id result = objc_msgSend(v1, sel_lineSpacing);
    *a1 = v5;
    a1[1] = v6;
    a1[2] = v7;
    a1[3] = v8;
    a1[4] = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1B081F198(uint64_t a1, void **a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = *a2;
  id v7 = *(id *)a1;
  objc_msgSend(v6, sel_setFont_, v7);
  objc_msgSend(v6, sel_setTextAlignment_, v2);
  objc_msgSend(v6, sel_setLineBreakMode_, v3);
  objc_msgSend(v6, sel_setNumberOfLines_, v4);
  objc_msgSend(v6, sel_setLineSpacing_, v5);
}

void (*UILabel.textAppearance.modify(void *a1))(void ***a1, char a2)
{
  uint64_t v2 = v1;
  uint64_t v4 = malloc(0x30uLL);
  *a1 = v4;
  uint64_t v4[5] = v2;
  id v5 = objc_msgSend(self, sel_preferredFontForTextStyle_compatibleWithTraitCollection_, *MEMORY[0x1E4FB28C8], 0);
  id result = (void (*)(void ***, char))objc_msgSend(v2, sel_font);
  if (result)
  {
    id v7 = result;

    id v8 = objc_msgSend(v2, sel_textAlignment);
    id v9 = objc_msgSend(v2, sel_lineBreakMode);
    id v10 = objc_msgSend(v2, sel_numberOfLines);
    id v11 = objc_msgSend(v2, sel_lineSpacing);
    void *v4 = v7;
    v4[1] = v8;
    _OWORD v4[2] = v9;
    void v4[3] = v10;
    _OWORD v4[4] = v11;
    return sub_1B081F37C;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1B081F37C(void ***a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  uint64_t v4 = (*a1)[1];
  id v6 = (*a1)[2];
  id v5 = (*a1)[3];
  id v7 = (*a1)[4];
  id v8 = (*a1)[5];
  if (a2)
  {
    id v9 = v3;
    objc_msgSend(v8, sel_setFont_, v9);
    objc_msgSend(v8, sel_setTextAlignment_, v4);
    objc_msgSend(v8, sel_setLineBreakMode_, v6);
    objc_msgSend(v8, sel_setNumberOfLines_, v5);
    objc_msgSend(v8, sel_setLineSpacing_, v7);

    uint64_t v3 = *v2;
  }
  else
  {
    objc_msgSend((*a1)[5], sel_setFont_, v3);
    objc_msgSend(v8, sel_setTextAlignment_, v4);
    objc_msgSend(v8, sel_setLineBreakMode_, v6);
    objc_msgSend(v8, sel_setNumberOfLines_, v5);
    objc_msgSend(v8, sel_setLineSpacing_, v7);
  }

  free(v2);
}

double sub_1B081F4B8@<D0>(uint64_t a1@<X8>)
{
  UILabel.textAppearance.getter(&v3);
  *(void *)a1 = v3;
  *(_OWORD *)(a1 + 8) = v4;
  double result = *(double *)&v5;
  *(_OWORD *)(a1 + 24) = v5;
  return result;
}

ValueMetadata *type metadata accessor for MetricsVisualizer()
{
  return &type metadata for MetricsVisualizer;
}

uint64_t sub_1B081F51C()
{
  uint64_t v0 = sub_1B0869BE8();
  __swift_allocate_value_buffer(v0, qword_1E9B460F0);
  __swift_project_value_buffer(v0, (uint64_t)qword_1E9B460F0);
  return sub_1B0869BF8();
}

uint64_t sub_1B081F588()
{
  uint64_t v0 = sub_1B0869BE8();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_1B0869C18();
  __swift_allocate_value_buffer(v4, qword_1E9B46108);
  __swift_project_value_buffer(v4, (uint64_t)qword_1E9B46108);
  if (qword_1E9B3A698 != -1) {
    swift_once();
  }
  uint64_t v5 = __swift_project_value_buffer(v0, (uint64_t)qword_1E9B460F0);
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v5, v0);
  return sub_1B0869C08();
}

uint64_t sub_1B081F6D0()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);

  return swift_deallocClassInstance();
}

double sub_1B081F708()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 40);
  uint64_t v3 = *(void *)(*v0 + 48);
  __swift_project_boxed_opaque_existential_1((void *)(*v0 + 16), v2);
  return (*(double (**)(uint64_t, uint64_t))(v3 + 16))(v2, v3) - *(double *)(v1 + 64);
}

uint64_t sub_1B081F780(double a1, double a2, double a3, double a4)
{
  uint64_t v9 = *v4;
  uint64_t v10 = *(void *)(v9 + 40);
  uint64_t v11 = *(void *)(v9 + 48);
  __swift_project_boxed_opaque_existential_1((void *)(v9 + 16), v10);
  return (*(uint64_t (**)(uint64_t, uint64_t, double, double, double, double))(v11 + 24))(v10, v11, *(double *)(v9 + 64) + a1, *(double *)(v9 + 56) + a2, a3 - (*(double *)(v9 + 64) + *(double *)(v9 + 80)), a4 - (*(double *)(v9 + 56) + *(double *)(v9 + 72)));
}

void (*sub_1B081F818(double **a1))(double **a1)
{
  uint64_t v3 = (double *)malloc(0x28uLL);
  *a1 = v3;
  uint64_t v4 = *(void *)v1;
  v3[4] = *v1;
  uint64_t v5 = *(void *)(v4 + 40);
  uint64_t v6 = *(void *)(v4 + 48);
  __swift_project_boxed_opaque_existential_1((void *)(v4 + 16), v5);
  double v7 = (*(double (**)(uint64_t, uint64_t))(v6 + 16))(v5, v6);
  double v8 = *(double *)(v4 + 56);
  double v9 = *(double *)(v4 + 64);
  double v12 = v11 + v9 + *(double *)(v4 + 80);
  double v14 = v13 + v8 + *(double *)(v4 + 72);
  double *v3 = v7 - v9;
  v3[1] = v10 - v8;
  _OWORD v3[2] = v12;
  void v3[3] = v14;
  return sub_1B081F8D4;
}

void sub_1B081F8D4(double **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *((void *)*a1 + 4);
  double v3 = **a1;
  double v4 = (*a1)[1];
  double v5 = (*a1)[2];
  double v6 = (*a1)[3];
  uint64_t v7 = *(void *)(v2 + 40);
  uint64_t v8 = *(void *)(v2 + 48);
  __swift_project_boxed_opaque_existential_1((void *)(v2 + 16), v7);
  (*(void (**)(uint64_t, uint64_t, double, double, double, double))(v8 + 24))(v7, v8, v3 + *(double *)(v2 + 64), v4 + *(double *)(v2 + 56), v5 - (*(double *)(v2 + 64) + *(double *)(v2 + 80)), v6 - (*(double *)(v2 + 56) + *(double *)(v2 + 72)));

  free(v1);
}

uint64_t sub_1B081F97C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 40);
  uint64_t v2 = *(void *)(*(void *)v0 + 48);
  __swift_project_boxed_opaque_existential_1((void *)(*(void *)v0 + 16), v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 40))(v1, v2) & 1;
}

uint64_t sub_1B081F9D8(uint64_t a1)
{
  uint64_t v3 = *(void *)(*(void *)v1 + 40);
  uint64_t v4 = *(void *)(*(void *)v1 + 48);
  __swift_project_boxed_opaque_existential_1((void *)(*(void *)v1 + 16), v3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(a1, v3, v4);
}

uint64_t (*sub_1B081FA38(uint64_t a1))(unsigned __int8 *a1)
{
  uint64_t v3 = (void *)*v1;
  *(void *)a1 = *v1;
  uint64_t v4 = v3[5];
  uint64_t v5 = v3[6];
  __swift_project_boxed_opaque_existential_1(v3 + 2, v4);
  *(unsigned char *)(a1 + 8) = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 40))(v4, v5) & 1;
  return sub_1B081FABC;
}

uint64_t sub_1B081FABC(unsigned __int8 *a1)
{
  uint64_t v1 = a1[8];
  uint64_t v2 = *(void *)(*(void *)a1 + 40);
  uint64_t v3 = *(void *)(*(void *)a1 + 48);
  __swift_project_boxed_opaque_existential_1((void *)(*(void *)a1 + 16), v2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, v2, v3);
}

uint64_t sub_1B081FB20()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 40);
  uint64_t v2 = *(void *)(*(void *)v0 + 48);
  __swift_project_boxed_opaque_existential_1((void *)(*(void *)v0 + 16), v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 64))(v1, v2) & 1;
}

double sub_1B081FB7C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 40);
  uint64_t v3 = *(void *)(*v0 + 48);
  __swift_project_boxed_opaque_existential_1((void *)(*v0 + 16), v2);
  return (*(double (**)(uint64_t, uint64_t))(v3 + 72))(v2, v3) - *(double *)(v1 + 64);
}

double sub_1B081FBF4(uint64_t a1, double a2, double a3)
{
  double v5 = *(double *)(*(void *)v3 + 64) + *(double *)(*(void *)v3 + 80);
  double v6 = a2 - v5;
  double v7 = a3 - (*(double *)(*(void *)v3 + 56) + *(double *)(*(void *)v3 + 72));
  uint64_t v8 = *(void *)(*(void *)v3 + 40);
  uint64_t v9 = *(void *)(*(void *)v3 + 48);
  __swift_project_boxed_opaque_existential_1((void *)(*(void *)v3 + 16), v8);
  return v5 + (*(double (**)(uint64_t, uint64_t, double, double))(*(void *)(v9 + 8) + 8))(a1, v8, v6, v7);
}

double *LayoutView.withLayoutMargins(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, double **a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>, double a7@<D3>)
{
  uint64_t v15 = *(void *)(a1 - 8);
  MEMORY[0x1F4188790](a1);
  unint64_t v17 = (char *)&v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for InsetLayoutView();
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, v7, a1);
  double result = sub_1B081FDE8((uint64_t)v17, a4, a5, a6, a7, v18, a1, a2);
  a3[3] = (double *)v18;
  a3[4] = (double *)&off_1F094D688;
  *a3 = result;
  return result;
}

uint64_t type metadata accessor for InsetLayoutView()
{
  return self;
}

double *sub_1B081FDE8(uint64_t a1, double a2, double a3, double a4, double a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v18 = a7;
  uint64_t v19 = a8;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v17);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a7 - 8) + 32))(boxed_opaque_existential_0, a1, a7);
  uint64_t v15 = (double *)swift_allocObject();
  sub_1B07BA8FC(&v17, (uint64_t)(v15 + 2));
  v15[7] = a2;
  v15[8] = a3;
  _OWORD v15[9] = a4;
  v15[10] = a5;
  return v15;
}

id UIImageView.init(with:)(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  id v3 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v3, sel_setContentMode_, v2);
  objc_msgSend(v3, sel_setPreferredSymbolConfiguration_, v1);

  return v3;
}

void UIImageView.imageAppearance.setter(uint64_t a1)
{
  id v2 = *(id *)a1;
  objc_msgSend(v1, sel_setContentMode_, *(void *)(a1 + 8));
  objc_msgSend(v1, sel_setPreferredSymbolConfiguration_, v2);
}

id UIImageView.imageAppearance.getter@<X0>(void *a1@<X8>)
{
  id v3 = objc_msgSend(v1, sel_contentMode);
  id result = objc_msgSend(v1, sel_preferredSymbolConfiguration);
  *a1 = result;
  a1[1] = v3;
  return result;
}

void sub_1B081FFE4(uint64_t a1, void **a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  id v3 = *a2;
  id v4 = *(id *)a1;
  objc_msgSend(v3, sel_setContentMode_, v2);
  objc_msgSend(v3, sel_setPreferredSymbolConfiguration_, v4);
}

void (*UIImageView.imageAppearance.modify(void *a1))(uint64_t a1, char a2)
{
  a1[2] = v1;
  id v3 = objc_msgSend(v1, sel_contentMode);
  *a1 = objc_msgSend(v1, sel_preferredSymbolConfiguration);
  a1[1] = v3;
  return sub_1B08200CC;
}

void sub_1B08200CC(uint64_t a1, char a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  id v3 = *(void **)(a1 + 16);
  if (a2)
  {
    id v4 = *(id *)a1;
    objc_msgSend(v3, sel_setContentMode_, v2);
    objc_msgSend(v3, sel_setPreferredSymbolConfiguration_, v4);
  }
  else
  {
    id v4 = *(id *)a1;
    objc_msgSend(*(id *)(a1 + 16), sel_setContentMode_, v2);
    objc_msgSend(v3, sel_setPreferredSymbolConfiguration_, v4);
  }
}

id sub_1B0820178@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id v3 = *a1;
  id v4 = objc_msgSend(*a1, sel_contentMode);
  id result = objc_msgSend(v3, sel_preferredSymbolConfiguration);
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t HorizontalSpaceMeasurable.init(_:multiplier:)@<X0>(long long *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB595F50);
  uint64_t v6 = swift_allocObject();
  uint64_t result = sub_1B07BA8FC(a1, v6 + 16);
  *(void *)a2 = v6;
  *(double *)(a2 + 8) = a3;
  return result;
}

uint64_t HorizontalSpaceMeasurable.horizontalSpace.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1 + 16;
  swift_beginAccess();
  return sub_1B07BBD78(v3, a1);
}

double HorizontalSpaceMeasurable.multiplier.getter()
{
  return *(double *)(v0 + 8);
}

double HorizontalSpaceMeasurable.measurements(fitting:in:)(uint64_t a1)
{
  uint64_t v3 = sub_1B086A868();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = &v24[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = &v24[-v8];
  double v10 = *(double *)(v1 + 8);
  uint64_t v11 = *(void *)v1 + 16;
  swift_beginAccess();
  sub_1B07BBD78(v11, (uint64_t)v25);
  uint64_t v12 = v26;
  uint64_t v13 = v27;
  __swift_project_boxed_opaque_existential_1(v25, v26);
  double v14 = (*(double (**)(uint64_t, uint64_t, uint64_t))(v13 + 8))(a1, v12, v13);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
  double v15 = v10 * v14;
  if (qword_1EB596548 != -1) {
    swift_once();
  }
  uint64_t v16 = __swift_project_value_buffer(v3, (uint64_t)qword_1EB5964D8);
  long long v17 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v4 + 16);
  v17(v9, v16, v3);
  *(double *)uint64_t v25 = v15;
  v17(v6, (uint64_t)v9, v3);
  int v18 = (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 88))(v6, v3);
  if (v18 == *MEMORY[0x1E4FBBEA0])
  {
    double v19 = round(v15);
LABEL_13:
    (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v9, v3);
    return v19;
  }
  if (v18 == *MEMORY[0x1E4FBBE98])
  {
    double v19 = rint(v15);
    goto LABEL_13;
  }
  if (v18 == *MEMORY[0x1E4FBBEA8])
  {
    double v19 = ceil(v15);
    goto LABEL_13;
  }
  if (v18 == *MEMORY[0x1E4FBBEB0])
  {
    double v19 = floor(v15);
    goto LABEL_13;
  }
  if (v18 == *MEMORY[0x1E4FBBE88])
  {
    double v19 = trunc(v15);
    goto LABEL_13;
  }
  if (v18 == *MEMORY[0x1E4FBBE90])
  {
    (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v9, v3);
    double v21 = ceil(v15);
    double v22 = floor(v15);
    if (v15 < 0.0) {
      return v22;
    }
    else {
      return v21;
    }
  }
  else
  {
    sub_1B086A138();
    uint64_t v23 = *(void (**)(unsigned char *, uint64_t))(v4 + 8);
    v23(v9, v3);
    v23(v6, v3);
    return *(double *)v25;
  }
}

double sub_1B08205C0(uint64_t a1)
{
  return HorizontalSpaceMeasurable.measurements(fitting:in:)(a1);
}

ValueMetadata *type metadata accessor for HorizontalSpaceMeasurable()
{
  return &type metadata for HorizontalSpaceMeasurable;
}

uint64_t type metadata accessor for Indirect()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1B0820604(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = v6 + *(void *)(*(void *)v6 + 88);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v7, a2);
  return sub_1B0869DE8();
}

uint64_t sub_1B08206F4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = 0x7463657269646E49;
  unint64_t v11 = 0xE900000000000028;
  uint64_t v7 = v6 + *(void *)(*(void *)v6 + 88);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v7, a2);
  sub_1B0869DE8();
  sub_1B0869E68();
  swift_bridgeObjectRelease();
  sub_1B0869E68();
  return v10;
}

uint64_t sub_1B0820824(uint64_t a1)
{
  return sub_1B0820604(*v1, *(void *)(a1 + 16));
}

uint64_t sub_1B0820834(uint64_t a1)
{
  return sub_1B08206F4(*v1, *(void *)(a1 + 16));
}

uint64_t sub_1B0820844()
{
  return swift_getWitnessTable();
}

uint64_t sub_1B082088C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = &v18[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = &v18[-v9];
  uint64_t v12 = v11 + *(void *)(*(void *)v11 + 88);
  swift_beginAccess();
  uint64_t v13 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v5 + 16);
  v13(v10, v12, a3);
  uint64_t v14 = a2 + *(void *)(*(void *)a2 + 88);
  swift_beginAccess();
  v13(v7, v14, a3);
  char v15 = sub_1B0869D58();
  uint64_t v16 = *(void (**)(unsigned char *, uint64_t))(v5 + 8);
  v16(v7, a3);
  v16(v10, a3);
  return v15 & 1;
}

uint64_t sub_1B0820A40(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_1B082088C(*a1, *a2, *(void *)(a3 + 16));
}

uint64_t sub_1B0820A54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = v7 + *(void *)(*(void *)v7 + 88);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v8, a3);
  sub_1B0869D18();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, a3);
}

uint64_t sub_1B0820B78(uint64_t a1, uint64_t a2)
{
  sub_1B086A958();
  sub_1B0820A54((uint64_t)v5, a1, a2);
  return sub_1B086A998();
}

uint64_t sub_1B0820BD8(uint64_t a1)
{
  return sub_1B0820B78(*v1, *(void *)(a1 + 16));
}

uint64_t sub_1B0820BEC(uint64_t a1, uint64_t a2)
{
  return sub_1B0820A54(a1, *v2, *(void *)(a2 + 16));
}

uint64_t sub_1B0820C00(uint64_t a1, uint64_t a2)
{
  sub_1B086A958();
  sub_1B0820A54((uint64_t)v5, *v2, *(void *)(a2 + 16));
  return sub_1B086A998();
}

uint64_t AnyPlacementSequence.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  a3[3] = type metadata accessor for _ConcretePlacementSequenceBox();
  a3[4] = (uint64_t)&off_1F094FD40;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(a3);
  uint64_t v7 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32);

  return v7(boxed_opaque_existential_0, a1, a2);
}

uint64_t type metadata accessor for _ConcretePlacementSequenceBox()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1B0820CF8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 16))(*(void *)(a1 + 16));
}

uint64_t sub_1B0820D10(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  __n128 v7 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v3 + 16))(v5, v1, v2, v7);
  sub_1B0869F08();
  swift_getAssociatedConformanceWitness();
  return sub_1B086A568();
}

uint64_t AnyPlacementSequence.base.getter()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
}

uint64_t AnyPlacementSequence.union.getter()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2);
}

uint64_t AnyPlacementSequence.makeIterator()()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 24))(v1, v2);
}

uint64_t AnyPlacementSequence.description.getter()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v2 + 8))(v4, v1, v2);
  return sub_1B0869DE8();
}

uint64_t sub_1B0821010()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2);
}

unint64_t sub_1B082106C(uint64_t a1)
{
  unint64_t result = sub_1B0821094();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1B0821094()
{
  unint64_t result = qword_1E9B3B7F0;
  if (!qword_1E9B3B7F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3B7F0);
  }
  return result;
}

uint64_t sub_1B08210E8()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v2 + 8))(v4, v1, v2);
  return sub_1B0869DE8();
}

unint64_t sub_1B0821160()
{
  unint64_t result = qword_1E9B3B7F8;
  if (!qword_1E9B3B7F8)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1E9B3B800);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3B7F8);
  }
  return result;
}

uint64_t sub_1B08211BC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = (uint64_t)v1;
  uint64_t v4 = v1[3];
  uint64_t v5 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v4);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 24))(v4, v5);
  uint64_t result = sub_1B0800544(v2);
  *a1 = v6;
  return result;
}

uint64_t sub_1B0821230()
{
  uint64_t v1 = sub_1B084FBA4(v0);
  sub_1B0800544(v0);
  return v1;
}

uint64_t sub_1B0821268(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t sub_1B082127C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t sub_1B0821290(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

ValueMetadata *type metadata accessor for AnyPlacementSequence()
{
  return &type metadata for AnyPlacementSequence;
}

uint64_t sub_1B08212B4(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void sub_1B0821410(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x1B0821628);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t TallLocaleMeasurable.init(_:)@<X0>(long long *a1@<X0>, uint64_t *a2@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB595F50);
  uint64_t v4 = swift_allocObject();
  uint64_t result = sub_1B07BA8FC(a1, v4 + 16);
  *a2 = v4;
  return result;
}

uint64_t TallLocaleMeasurable.dimension.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1 + 16;
  swift_beginAccess();
  return sub_1B07BBD78(v3, a1);
}

uint64_t _s5JetUI20TallLocaleMeasurableV12measurements7fitting2inSo14JUMeasurementsVSo6CGSizeV_So18UITraitEnvironment_ptF_0(void *a1)
{
  uint64_t v3 = sub_1B08691E8();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0) + 16;
  uint64_t v7 = *v1;
  if (qword_1EB595980 != -1) {
    swift_once();
  }
  sub_1B086A318();
  char v8 = Locale.hasExtraTallWritingSystem.getter();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  if (v8)
  {
    swift_beginAccess();
    sub_1B07BBD78(v7 + 16, (uint64_t)v13);
    uint64_t v10 = v13[4];
    __swift_project_boxed_opaque_existential_1(v13, v13[3]);
    id v11 = objc_msgSend(a1, sel_traitCollection);
    (*(void (**)(void))(v10 + 16))();

    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  }
  return result;
}

ValueMetadata *type metadata accessor for TallLocaleMeasurable()
{
  return &type metadata for TallLocaleMeasurable;
}

uint64_t sub_1B0821914(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5963A8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t dispatch thunk of LayoutTextView.numberOfLines.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of LayoutTextView.numberOfLines.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of LayoutTextView.lineBreakMode.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of LayoutTextView.lineBreakMode.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of LayoutTextView.font.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of LayoutTextView.font.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 80))();
}

uint64_t dispatch thunk of LayoutTextView.languageAwareOutsets.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 96))();
}

uint64_t dispatch thunk of LayoutTextView.textLength.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 104))();
}

id static UITraitCollection.withSystemPreferredContentSizeCategory.getter()
{
  id v0 = objc_msgSend(self, sel_system);
  id v1 = objc_msgSend(v0, sel_preferredContentSizeCategory);

  id v2 = objc_msgSend(self, sel_traitCollectionWithPreferredContentSizeCategory_, v1);
  return v2;
}

id Placeable<>.place(at:with:)()
{
  return sub_1B07BAE60();
}

id static ObjCFunctions.traitCollection(for:)(void *a1)
{
  id v1 = objc_msgSend(a1, sel_traitCollection);

  return v1;
}

uint64_t Measurable.measuredSize(fitting:in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

CGSize __swiftcall Measurable.measuredSize(fitting:with:)(CGSize fitting, UITraitCollection with)
{
  uint64_t v4 = v3;
  uint64_t v5 = v2;
  double height = fitting.height;
  double width = fitting.width;
  __swift_instantiateConcreteTypeFromMangledName(qword_1EB596010);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1B086C120;
  *(UITraitCollection *)(v9 + 32) = with;
  sub_1B07BCC68();
  uint64_t v10 = with.super.isa;
  id v11 = (void *)sub_1B0869F78();
  swift_bridgeObjectRelease();
  id v12 = objc_msgSend(self, sel_traitCollectionWithTraitsFromCollections_, v11);

  int v13 = (objc_class *)type metadata accessor for TraitEnvironmentPlaceholder();
  unsigned int v14 = (char *)objc_allocWithZone(v13);
  *(void *)&v14[OBJC_IVAR____TtC5JetUI27TraitEnvironmentPlaceholder_traitCollection] = v12;
  v22.receiver = v14;
  v22.super_class = v13;
  id v15 = objc_msgSendSuper2(&v22, sel_init);
  double v16 = (*(double (**)(id, uint64_t, uint64_t, double, double))(v4 + 8))(v15, v5, v4, width, height);
  double v18 = v17;

  double v19 = v16;
  double v20 = v18;
  result.double height = v20;
  result.double width = v19;
  return result;
}

__n128 AspectFitMeasurable.init(_:)@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void AspectFitMeasurable.init(_:_:)(double *a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  *a1 = a2;
  a1[1] = a3;
}

__n128 AspectFitMeasurable.aspectRatio.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = *v1;
  *a1 = *v1;
  return result;
}

__n128 AspectFitMeasurable.aspectRatio.setter(__n128 *a1)
{
  __n128 result = *a1;
  *id v1 = *a1;
  return result;
}

double (*AspectFitMeasurable.aspectRatio.modify())(void)
{
  return nullsub_1;
}

double AspectFitMeasurable.measurements(fitting:in:)(void *a1, double a2, double a3)
{
  uint64_t v7 = sub_1B086A868();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  int v13 = (char *)&v29 - v12;
  double v14 = *v3;
  double v15 = v3[1];
  if (*v3 == v15)
  {
    if (a3 < a2) {
      return a3;
    }
  }
  else
  {
    uint64_t v16 = *MEMORY[0x1E4FBBEA8];
    double v17 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 104);
    if (v15 >= v14)
    {
      double v24 = v14 / v15;
      if (v15 == 0.0) {
        double v24 = 0.0;
      }
      double v25 = v24 * a3;
      v17(v10, v16, v7);
      id v26 = objc_msgSend(a1, sel_traitCollection);
      objc_msgSend(v26, sel_displayScale);
      if (v27 <= 0.0) {
        double v27 = ForJetUIOnly_MainScreenScale();
      }
      a2 = sub_1B07B8068((uint64_t)v10, v27, v25);

      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    }
    else
    {
      double v18 = v15 / v14;
      BOOL v19 = v14 == 0.0;
      double v20 = 0.0;
      if (!v19) {
        double v20 = v18;
      }
      double v21 = v20 * a2;
      v17((char *)&v29 - v12, v16, v7);
      id v22 = objc_msgSend(a1, sel_traitCollection);
      objc_msgSend(v22, sel_displayScale);
      if (v23 <= 0.0) {
        double v23 = ForJetUIOnly_MainScreenScale();
      }
      sub_1B07B8068((uint64_t)v13, v23, v21);

      (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
    }
  }
  return a2;
}

double sub_1B0821EFC(void *a1, double a2, double a3)
{
  return AspectFitMeasurable.measurements(fitting:in:)(a1, a2, a3);
}

ValueMetadata *type metadata accessor for AspectFitMeasurable()
{
  return &type metadata for AspectFitMeasurable;
}

ValueMetadata *type metadata accessor for PlatformUI()
{
  return &type metadata for PlatformUI;
}

uint64_t Models.VideoControls.init(rawValue:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static Models.VideoControls.prominentPlay.getter(void *a1@<X8>)
{
  *a1 = 1;
}

void static Models.VideoControls.fullScreenToggle.getter(void *a1@<X8>)
{
  *a1 = 2;
}

void static Models.VideoControls.inlinePlayPause.getter(void *a1@<X8>)
{
  *a1 = 4;
}

void static Models.VideoControls.muteUnmute.getter(void *a1@<X8>)
{
  *a1 = 8;
}

void static Models.VideoControls.scrubber.getter(void *a1@<X8>)
{
  *a1 = 16;
}

void sub_1B0821F7C()
{
  uint64_t v0 = unk_1F0951560;
  if ((unk_1F0951560 & ~qword_1F0951558) == 0) {
    uint64_t v0 = 0;
  }
  uint64_t v1 = v0 | qword_1F0951558;
  uint64_t v2 = qword_1F0951568;
  if ((qword_1F0951568 & ~v1) == 0) {
    uint64_t v2 = 0;
  }
  uint64_t v3 = v2 | v1;
  if ((unk_1F0951570 & ~v3) != 0) {
    uint64_t v4 = unk_1F0951570;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = v4 | v3;
  uint64_t v6 = qword_1F0951578;
  if ((qword_1F0951578 & ~v5) == 0) {
    uint64_t v6 = 0;
  }
  qword_1E9B3B808 = v6 | v5;
}

void *static Models.VideoControls.all.getter@<X0>(void *a1@<X8>)
{
  return sub_1B0822048(&qword_1E9B3A6B0, &qword_1E9B3B808, a1);
}

void sub_1B0821FF0()
{
  uint64_t v0 = unk_1F09515A8;
  if ((unk_1F09515A8 & ~qword_1F09515A0) == 0) {
    uint64_t v0 = 0;
  }
  uint64_t v1 = qword_1F09515B0;
  if ((qword_1F09515B0 & ~(v0 | qword_1F09515A0)) == 0) {
    uint64_t v1 = 0;
  }
  qword_1E9B3B810 = v1 | v0 | qword_1F09515A0;
}

void *static Models.VideoControls.inline.getter@<X0>(void *a1@<X8>)
{
  return sub_1B0822048(&qword_1E9B3A6B8, &qword_1E9B3B810, a1);
}

void *sub_1B0822048@<X0>(void *result@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  if (*result != -1) {
    __n128 result = (void *)swift_once();
  }
  *a3 = *a2;
  return result;
}

void static Models.VideoControls.none.getter(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t Models.VideoControls.rawValue.getter()
{
  return *(void *)v0;
}

uint64_t Models.VideoControls.init(deserializing:using:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v27 = a2;
  unint64_t v28 = a3;
  uint64_t v4 = sub_1B08695F8();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  id v26 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v25 - v8;
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v25 - v11;
  MEMORY[0x1F4188790](v13);
  double v15 = (char *)&v25 - v14;
  MEMORY[0x1F4188790](v16);
  double v18 = (char *)&v25 - v17;
  sub_1B0869608();
  char v19 = sub_1B08695A8();
  double v20 = *(void (**)(char *, uint64_t))(v5 + 8);
  v20(v18, v4);
  LODWORD(v18) = v19 & 1;
  sub_1B0869608();
  char v21 = sub_1B08695A8();
  v20(v15, v4);
  sub_1B0869608();
  LOBYTE(v15) = sub_1B08695A8();
  v20(v12, v4);
  LODWORD(v18) = v18 & 0xFFFFFFF9 | (2 * (v21 & 1)) & 0xFB | (4 * (v15 & 1));
  sub_1B0869608();
  LOBYTE(v15) = sub_1B08695A8();
  v20(v9, v4);
  LODWORD(v18) = v18 & 0xFFFFFFF7 | (8 * (v15 & 1));
  id v22 = v26;
  sub_1B0869608();
  LOBYTE(v15) = sub_1B08695A8();
  v20(v22, v4);
  uint64_t v23 = sub_1B0869728();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v23 - 8) + 8))(v27, v23);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v20)(a1, v4);
  *unint64_t v28 = v18 & 0xFFFFFFEF | (16 * (v15 & 1));
  return result;
}

BOOL Models.VideoControls.containsInlineControls.getter()
{
  uint64_t v1 = *v0;
  if (qword_1E9B3A6B8 != -1) {
    swift_once();
  }
  return (qword_1E9B3B810 & v1) != 0;
}

uint64_t sub_1B082241C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return Models.VideoControls.init(deserializing:using:)(a1, a2, a3);
}

uint64_t Models.VideoControls.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = sub_1B0869728();
  uint64_t v30 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v24 - v9;
  uint64_t v11 = sub_1B08695F8();
  uint64_t v27 = *(void *)(v11 - 8);
  uint64_t v28 = v11;
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v24 - v15;
  sub_1B07BBD78((uint64_t)a1, (uint64_t)v29);
  sub_1B08695B8();
  if (v2)
  {
    uint64_t v23 = (uint64_t)a1;
  }
  else
  {
    uint64_t v25 = a2;
    uint64_t v17 = a1[3];
    id v26 = a1;
    __swift_project_boxed_opaque_existential_1(a1, v17);
    uint64_t v18 = v5;
    sub_1B086A9B8();
    sub_1B0869718();
    uint64_t v20 = v27;
    uint64_t v19 = v28;
    (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v13, v16, v28);
    uint64_t v21 = v30;
    (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v7, v10, v18);
    Models.VideoControls.init(deserializing:using:)((uint64_t)v13, (uint64_t)v7, v29);
    (*(void (**)(char *, uint64_t))(v21 + 8))(v10, v18);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v16, v19);
    uint64_t v23 = (uint64_t)v26;
    *uint64_t v25 = v29[0];
  }
  return __swift_destroy_boxed_opaque_existential_1(v23);
}

uint64_t Models.VideoControls.encode(to:)(void *a1)
{
  uint64_t v2 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B086A9D8();
  sub_1B07D60C0(MEMORY[0x1E4FBC860]);
  if (v2)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_1B07CA930(1, 0x6E656E696D6F7270, 0xED000079616C5074, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    if ((v2 & 2) == 0)
    {
LABEL_3:
      if ((v2 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  char v6 = swift_isUniquelyReferenced_nonNull_native();
  sub_1B07CA930(1, 0xD000000000000010, 0x80000001B08756C0, v6);
  swift_bridgeObjectRelease();
  if ((v2 & 4) == 0)
  {
LABEL_4:
    if ((v2 & 8) == 0) {
      goto LABEL_5;
    }
LABEL_11:
    char v8 = swift_isUniquelyReferenced_nonNull_native();
    sub_1B07CA930(1, 0x756D6E556574756DLL, 0xEA00000000006574, v8);
    swift_bridgeObjectRelease();
    if ((v2 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_10:
  char v7 = swift_isUniquelyReferenced_nonNull_native();
  sub_1B07CA930(1, 0x6C50656E696C6E69, 0xEF65737561507961, v7);
  swift_bridgeObjectRelease();
  if ((v2 & 8) != 0) {
    goto LABEL_11;
  }
LABEL_5:
  if ((v2 & 0x10) != 0)
  {
LABEL_6:
    char v3 = swift_isUniquelyReferenced_nonNull_native();
    sub_1B07CA930(1, 0x7265626275726373, 0xE800000000000000, v3);
    swift_bridgeObjectRelease();
  }
LABEL_7:
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v9, v10);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9B3B4A8);
  sub_1B0805010();
  sub_1B086A8C8();
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
}

uint64_t sub_1B0822934@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return Models.VideoControls.init(from:)(a1, a2);
}

uint64_t sub_1B082294C(void *a1)
{
  return Models.VideoControls.encode(to:)(a1);
}

unint64_t sub_1B0822968()
{
  unint64_t result = qword_1E9B3B818;
  if (!qword_1E9B3B818)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3B818);
  }
  return result;
}

unint64_t sub_1B08229C0()
{
  unint64_t result = qword_1E9B3B820;
  if (!qword_1E9B3B820)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3B820);
  }
  return result;
}

unint64_t sub_1B0822A18()
{
  unint64_t result = qword_1E9B3B828;
  if (!qword_1E9B3B828)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3B828);
  }
  return result;
}

unint64_t sub_1B0822A70()
{
  unint64_t result = qword_1E9B3B830;
  if (!qword_1E9B3B830)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9B3B830);
  }
  return result;
}

ValueMetadata *type metadata accessor for Models.VideoControls()
{
  return &type metadata for Models.VideoControls;
}

uint64_t *sub_1B0822AD4(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_1B08690F8();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *(uint64_t *)((char *)a1 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    *(uint64_t *)((char *)a1 + v8) = *(uint64_t *)((char *)a2 + v8);
    uint64_t v9 = a3[7];
    uint64_t v10 = (uint64_t *)((char *)a1 + v9);
    uint64_t v11 = (uint64_t *)((char *)a2 + v9);
    uint64_t v12 = v11[1];
    *uint64_t v10 = *v11;
    v10[1] = v12;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1B0822BD0(uint64_t a1)
{
  uint64_t v2 = sub_1B08690F8();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B0822C60(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1B08690F8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  uint64_t v8 = a3[7];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1B0822D0C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1B08690F8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[7];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  void *v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1B0822DE0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1B08690F8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_1B0822E70(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1B08690F8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[7];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  void *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1B0822F24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B0822F38);
}

uint64_t sub_1B0822F38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1B08690F8();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_1B0822FF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B082300C);
}

uint64_t sub_1B082300C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_1B08690F8();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for DSZipPackager()
{
  uint64_t result = qword_1E9B3B838;
  if (!qword_1E9B3B838) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1B0823114()
{
  uint64_t result = sub_1B08690F8();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1B08231B8(uint64_t a1, unint64_t a2, char *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  char v11 = *a3;
  uint64_t v12 = type metadata accessor for DSZipPackager();
  if (v11) {
    uint64_t v13 = *(int *)(v12 + 20);
  }
  else {
    uint64_t v13 = *(int *)(v12 + 24);
  }
  if (*(void *)(*(void *)(v6 + v13) + 16))
  {
    swift_bridgeObjectRetain();
    sub_1B07E4728(a4, a5);
    char v15 = v14;
    swift_bridgeObjectRelease();
    if (v15) {
      return 0;
    }
  }
  swift_bridgeObjectRetain();
  sub_1B07CBEE8(a1, a2);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v18 = *(void *)(v6 + v13);
  *(void *)(v6 + v13) = 0x8000000000000000;
  sub_1B07CABF4(a1, a2, a4, a5, isUniquelyReferenced_nonNull_native);
  *(void *)(v6 + v13) = v18;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 1;
}

void sub_1B08232C4(uint64_t a1@<X8>)
{
  uint64_t v84 = a1;
  uint64_t v104 = *MEMORY[0x1E4F143B8];
  uint64_t v96 = sub_1B08690F8();
  uint64_t v89 = *(void *)(v96 - 8);
  MEMORY[0x1F4188790](v96);
  id v86 = (char *)&v83 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v3);
  unint64_t v93 = (char *)&v83 - v4;
  MEMORY[0x1F4188790](v5);
  unint64_t v94 = (char *)&v83 - v6;
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v83 - v8;
  uint64_t v85 = v10;
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v83 - v12;
  sub_1B08690B8();
  uint64_t v90 = v1;
  sub_1B08690B8();
  char v14 = self;
  id v15 = objc_msgSend(v14, sel_defaultManager);
  sub_1B08690D8();
  uint64_t v16 = (void *)sub_1B0869D68();
  swift_bridgeObjectRelease();
  unsigned int v17 = objc_msgSend(v15, sel_fileExistsAtPath_, v16);

  id v95 = v15;
  if (v17)
  {
    sub_1B08690D8();
    uint64_t v18 = (void *)sub_1B0869D68();
    swift_bridgeObjectRelease();
    uint64_t aBlock = 0;
    unsigned int v19 = objc_msgSend(v15, sel_removeItemAtPath_error_, v18, &aBlock);

    if (v19)
    {
      id v20 = (id)aBlock;
    }
    else
    {
      id v21 = (id)aBlock;
      id v22 = (void *)sub_1B0869088();

      swift_willThrow();
    }
  }
  id v23 = objc_msgSend(v14, sel_defaultManager);
  sub_1B08690D8();
  uint64_t v24 = (void *)sub_1B0869D68();
  swift_bridgeObjectRelease();
  unsigned int v25 = objc_msgSend(v23, sel_fileExistsAtPath_, v24);

  if (v25)
  {
    sub_1B08690D8();
    id v26 = (void *)sub_1B0869D68();
    swift_bridgeObjectRelease();
    uint64_t aBlock = 0;
    id v27 = v95;
    unsigned int v28 = objc_msgSend(v95, sel_removeItemAtPath_error_, v26, &aBlock);

    uint64_t v29 = v89;
    if (v28)
    {
      id v30 = (id)aBlock;
    }
    else
    {
      id v32 = (id)aBlock;
      long long v33 = (void *)sub_1B0869088();

      swift_willThrow();
    }
    uint64_t v31 = v96;
  }
  else
  {
    id v27 = v95;
    uint64_t v31 = v96;
    uint64_t v29 = v89;
  }
  long long v34 = (void *)sub_1B08690A8();
  uint64_t aBlock = 0;
  unsigned int v35 = objc_msgSend(v27, sel_createDirectoryAtURL_withIntermediateDirectories_attributes_error_, v34, 1, 0, &aBlock);

  uint64_t v97 = v9;
  id v88 = v13;
  if (v35)
  {
    id v36 = (id)aBlock;
  }
  else
  {
    id v37 = (id)aBlock;
    uint64_t v38 = (void *)sub_1B0869088();

    swift_willThrow();
  }
  uint64_t v87 = type metadata accessor for DSZipPackager();
  uint64_t v39 = *(void *)(v90 + *(int *)(v87 + 20));
  uint64_t v40 = *(void *)(v39 + 64);
  uint64_t v91 = v39 + 64;
  uint64_t v41 = 1 << *(unsigned char *)(v39 + 32);
  uint64_t v42 = -1;
  if (v41 < 64) {
    uint64_t v42 = ~(-1 << v41);
  }
  unint64_t v43 = v42 & v40;
  int64_t v92 = (unint64_t)(v41 + 63) >> 6;
  uint64_t v44 = (void (**)(char *, uint64_t))(v29 + 8);
  swift_bridgeObjectRetain();
  int64_t v45 = 0;
  if (v43) {
    goto LABEL_19;
  }
  while (1)
  {
    BOOL v48 = __OFADD__(v45++, 1);
    if (v48)
    {
      __break(1u);
LABEL_62:
      __break(1u);
      goto LABEL_63;
    }
    if (v45 >= v92) {
      break;
    }
    unint64_t v49 = *(void *)(v91 + 8 * v45);
    id v50 = v95;
    if (!v49)
    {
      int64_t v51 = v45 + 1;
      if (v45 + 1 >= v92) {
        goto LABEL_37;
      }
      unint64_t v49 = *(void *)(v91 + 8 * v51);
      if (!v49)
      {
        int64_t v51 = v45 + 2;
        if (v45 + 2 >= v92) {
          goto LABEL_37;
        }
        unint64_t v49 = *(void *)(v91 + 8 * v51);
        if (!v49)
        {
          int64_t v51 = v45 + 3;
          if (v45 + 3 >= v92) {
            goto LABEL_37;
          }
          unint64_t v49 = *(void *)(v91 + 8 * v51);
          if (!v49)
          {
            while (1)
            {
              int64_t v45 = v51 + 1;
              if (__OFADD__(v51, 1)) {
                break;
              }
              if (v45 >= v92) {
                goto LABEL_37;
              }
              unint64_t v49 = *(void *)(v91 + 8 * v45);
              ++v51;
              if (v49) {
                goto LABEL_30;
              }
            }
LABEL_63:
            __break(1u);
            goto LABEL_64;
          }
        }
      }
      int64_t v45 = v51;
    }
LABEL_30:
    unint64_t v43 = (v49 - 1) & v49;
    for (unint64_t i = __clz(__rbit64(v49)) + (v45 << 6); ; unint64_t i = v46 | (v45 << 6))
    {
      uint64_t v52 = (uint64_t *)(*(void *)(v39 + 56) + 16 * i);
      uint64_t v54 = *v52;
      unint64_t v53 = v52[1];
      uint64_t aBlock = 0x5F73676F6CLL;
      unint64_t v99 = 0xE500000000000000;
      swift_bridgeObjectRetain();
      sub_1B07CBEE8(v54, v53);
      sub_1B0869E68();
      swift_bridgeObjectRelease();
      uint64_t v55 = v94;
      sub_1B08690B8();
      swift_bridgeObjectRelease();
      sub_1B0869138();
      uint64_t v31 = v96;
      (*v44)(v55, v96);
      sub_1B07CBE90(v54, v53);
      if (!v43) {
        break;
      }
LABEL_19:
      unint64_t v46 = __clz(__rbit64(v43));
      v43 &= v43 - 1;
    }
  }
  id v50 = v95;
LABEL_37:
  uint64_t v56 = v87;
  swift_release();
  uint64_t v57 = *(void *)(v90 + *(int *)(v56 + 24));
  uint64_t v58 = *(void *)(v57 + 64);
  int64_t v92 = v57 + 64;
  uint64_t v59 = 1 << *(unsigned char *)(v57 + 32);
  uint64_t v60 = -1;
  if (v59 < 64) {
    uint64_t v60 = ~(-1 << v59);
  }
  unint64_t v61 = v60 & v58;
  unint64_t v94 = (char *)((unint64_t)(v59 + 63) >> 6);
  swift_bridgeObjectRetain();
  uint64_t v62 = 0;
  if (v61) {
    goto LABEL_42;
  }
  while (1)
  {
    BOOL v48 = __OFADD__(v62++, 1);
    if (v48) {
      goto LABEL_62;
    }
    if (v62 >= (uint64_t)v94) {
      goto LABEL_59;
    }
    unint64_t v65 = *(void *)(v92 + 8 * v62);
    if (!v65) {
      break;
    }
LABEL_53:
    unint64_t v61 = (v65 - 1) & v65;
    for (unint64_t j = __clz(__rbit64(v65)) + (v62 << 6); ; unint64_t j = v63 | (v62 << 6))
    {
      uint64_t v67 = (uint64_t *)(*(void *)(v57 + 56) + 16 * j);
      uint64_t v69 = *v67;
      unint64_t v68 = v67[1];
      uint64_t aBlock = 0x7365727574706163;
      unint64_t v99 = 0xE800000000000000;
      swift_bridgeObjectRetain();
      sub_1B07CBEE8(v69, v68);
      sub_1B0869E68();
      swift_bridgeObjectRelease();
      uint64_t v70 = v93;
      sub_1B08690B8();
      swift_bridgeObjectRelease();
      sub_1B0869138();
      uint64_t v31 = v96;
      (*v44)(v70, v96);
      sub_1B07CBE90(v69, v68);
      id v50 = v95;
      if (!v61) {
        break;
      }
LABEL_42:
      unint64_t v63 = __clz(__rbit64(v61));
      v61 &= v61 - 1;
    }
  }
  uint64_t v66 = v62 + 1;
  if (v62 + 1 >= (uint64_t)v94) {
    goto LABEL_59;
  }
  unint64_t v65 = *(void *)(v92 + 8 * v66);
  if (v65) {
    goto LABEL_52;
  }
  uint64_t v66 = v62 + 2;
  if (v62 + 2 >= (uint64_t)v94) {
    goto LABEL_59;
  }
  unint64_t v65 = *(void *)(v92 + 8 * v66);
  if (v65)
  {
LABEL_52:
    uint64_t v62 = v66;
    goto LABEL_53;
  }
  uint64_t v66 = v62 + 3;
  if (v62 + 3 < (uint64_t)v94)
  {
    unint64_t v65 = *(void *)(v92 + 8 * v66);
    if (!v65)
    {
      while (1)
      {
        uint64_t v62 = v66 + 1;
        if (__OFADD__(v66, 1)) {
          break;
        }
        if (v62 >= (uint64_t)v94) {
          goto LABEL_59;
        }
        unint64_t v65 = *(void *)(v92 + 8 * v62);
        ++v66;
        if (v65) {
          goto LABEL_53;
        }
      }
LABEL_64:
      __break(1u);
LABEL_65:
      __break(1u);
    }
    goto LABEL_52;
  }
LABEL_59:
  swift_release();
  id v71 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28CA0]), sel_init);
  uint64_t v72 = (void *)sub_1B08690A8();
  uint64_t v73 = v89;
  uint64_t v74 = v86;
  (*(void (**)(char *, char *, uint64_t))(v89 + 16))(v86, v88, v31);
  unint64_t v75 = (*(unsigned __int8 *)(v73 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v73 + 80);
  uint64_t v76 = swift_allocObject();
  *(void *)(v76 + 16) = v50;
  id v95 = *(id *)(v73 + 32);
  ((void (*)(unint64_t, char *, uint64_t))v95)(v76 + v75, v74, v96);
  uint64_t v77 = swift_allocObject();
  *(void *)(v77 + 16) = sub_1B08241C8;
  *(void *)(v77 + 24) = v76;
  long long v102 = sub_1B082424C;
  uint64_t v103 = v77;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  unint64_t v99 = 1107296256;
  uint64_t v100 = sub_1B0823E74;
  id v101 = &block_descriptor_5;
  uint64_t v78 = _Block_copy(&aBlock);
  id v79 = v50;
  swift_retain();
  swift_release();
  uint64_t aBlock = 0;
  objc_msgSend(v71, sel_coordinateReadingItemAtURL_options_error_byAccessor_, v72, 8, &aBlock, v78);
  uint64_t v80 = v78;
  uint64_t v81 = v96;
  _Block_release(v80);

  (*(void (**)(char *, uint64_t))(v73 + 8))(v97, v81);
  id v82 = (id)aBlock;
  LOBYTE(v71) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v71) {
    goto LABEL_65;
  }
  ((void (*)(uint64_t, char *, uint64_t))v95)(v84, v88, v81);
  swift_release();
}

void sub_1B0823D60(uint64_t a1, void *a2)
{
  v10[1] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v3 = (void *)sub_1B08690A8();
  uint64_t v4 = (void *)sub_1B08690A8();
  v10[0] = 0;
  unsigned int v5 = objc_msgSend(a2, sel_moveItemAtURL_toURL_error_, v3, v4, v10);

  id v6 = v10[0];
  if (v5)
  {
    id v7 = v6;
  }
  else
  {
    id v8 = v10[0];
    uint64_t v9 = (void *)sub_1B0869088();

    swift_willThrow();
  }
}

uint64_t sub_1B0823E74(uint64_t a1)
{
  uint64_t v2 = sub_1B08690F8();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  unsigned int v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = *(void (**)(char *))(a1 + 32);
  sub_1B08690C8();
  v6(v5);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_1B0823F58(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 28));
  swift_bridgeObjectRetain();
  return v2;
}

void sub_1B0823F94(uint64_t a1@<X8>)
{
}

uint64_t sub_1B0823FBC(uint64_t a1)
{
  uint64_t v3 = sub_1B08690F8();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  id v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = objc_msgSend(self, sel_defaultManager);
  id v8 = objc_msgSend(v7, sel_temporaryDirectory);

  sub_1B08690C8();
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 40))(v1, v6, v3);
  unint64_t v9 = sub_1B07D61D4(MEMORY[0x1E4FBC860]);
  uint64_t v10 = *(int *)(a1 + 20);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + v10) = v9;
  return result;
}

uint64_t sub_1B08240FC()
{
  uint64_t v1 = sub_1B08690F8();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x1F4186498](v0, v5, v6);
}

void sub_1B08241C8(uint64_t a1)
{
  sub_1B08690F8();
  uint64_t v3 = *(void **)(v1 + 16);

  sub_1B0823D60(a1, v3);
}

uint64_t sub_1B082423C()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1B082424C()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t block_destroy_helper_5()
{
  return swift_release();
}

uint64_t CollectionContentReloadableCell.applyMatchedReloadTriggers(_:)()
{
  return 0;
}

uint64_t dispatch thunk of CollectionContentReloadableCell.automaticReloadTriggers.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of CollectionContentReloadableCell.applyMatchedReloadTriggers(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t LineHeightDimension.init(with:multipliedBy:)@<X0>(long long *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB596380);
  uint64_t v6 = swift_allocObject();
  uint64_t result = sub_1B07BA8FC(a1, v6 + 16);
  *(void *)a2 = v6;
  *(double *)(a2 + 8) = a3;
  return result;
}

uint64_t LineHeightDimension.init(multiplier:source:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v13 = &type metadata for FontSource;
  char v14 = &protocol witness table for FontSource;
  uint64_t v6 = swift_allocObject();
  *(void *)&long long v12 = v6;
  uint64_t v7 = *(void *)(a1 + 32);
  char v8 = *(unsigned char *)(a1 + 40);
  long long v9 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v6 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v6 + 32) = v9;
  *(void *)(v6 + 48) = v7;
  *(unsigned char *)(v6 + 56) = v8;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB596380);
  uint64_t v10 = swift_allocObject();
  uint64_t result = sub_1B07BA8FC(&v12, v10 + 16);
  *(void *)a2 = v10;
  *(double *)(a2 + 8) = a3;
  return result;
}

uint64_t sub_1B08243C0()
{
  sub_1B07BF284(*(id *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(unsigned char *)(v0 + 56));

  return MEMORY[0x1F4186498](v0, 57, 7);
}

uint64_t LineHeightDimension.description.getter()
{
  uint64_t v1 = *v0;
  v3[0] = 0;
  v3[1] = 0xE000000000000000;
  sub_1B086A5E8();
  uint64_t v4 = 0;
  unint64_t v5 = 0xE000000000000000;
  sub_1B0869E68();
  swift_beginAccess();
  sub_1B07BBD78(v1 + 16, (uint64_t)v3);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB596388);
  sub_1B086A6B8();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
  sub_1B0869E68();
  sub_1B086A128();
  sub_1B0869E68();
  swift_bridgeObjectRelease();
  sub_1B0869E68();
  return v4;
}

double LineHeightDimension.rawValue(in:)(void *a1)
{
  double v3 = *(double *)(v1 + 8);
  uint64_t v4 = *(void *)v1 + 16;
  swift_beginAccess();
  sub_1B07BBD78(v4, (uint64_t)v11);
  uint64_t v5 = v11[4];
  __swift_project_boxed_opaque_existential_1(v11, v11[3]);
  id v6 = objc_msgSend(a1, sel_traitCollection);
  uint64_t v7 = (void *)(*(uint64_t (**)(void))(v5 + 8))();

  __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  objc_msgSend(v7, sel_lineHeight);
  double v9 = v8;

  return v3 * v9;
}

UIEdgeInsets __swiftcall LineHeightDimension.languageAwareOutsets(compatibleWith:)(UITraitCollection compatibleWith)
{
  uint64_t v3 = *v1 + 16;
  swift_beginAccess();
  sub_1B07BBD78(v3, (uint64_t)v18);
  uint64_t v4 = v19;
  uint64_t v5 = v20;
  __swift_project_boxed_opaque_existential_1(v18, v19);
  id v6 = (void *)(*(uint64_t (**)(Class, uint64_t, uint64_t))(v5 + 8))(compatibleWith.super.isa, v4, v5);
  double v7 = UIFont.languageAwareOutsets.getter();
  double v9 = v8;
  double v11 = v10;
  double v13 = v12;

  __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
  double v14 = v7;
  double v15 = v9;
  double v16 = v11;
  double v17 = v13;
  result.right = v17;
  result.bottom = v16;
  result.left = v15;
  result.top = v14;
  return result;
}

double sub_1B08246C4(uint64_t a1)
{
  uint64_t v3 = *v1 + 16;
  swift_beginAccess();
  sub_1B07BBD78(v3, (uint64_t)v9);
  uint64_t v4 = v10;
  uint64_t v5 = v11;
  __swift_project_boxed_opaque_existential_1(v9, v10);
  id v6 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 8))(a1, v4, v5);
  double v7 = UIFont.languageAwareOutsets.getter();

  __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  return v7;
}

double LineHeightDimension.multiplier.getter()
{
  return *(double *)(v0 + 8);
}

uint64_t LineHeightDimension.source.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1 + 16;
  swift_beginAccess();
  sub_1B07BBD78(v3, (uint64_t)&v12);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB596388);
  uint64_t result = swift_dynamicCast();
  if (result)
  {
    uint64_t v5 = v10;
    char v6 = v11;
    long long v7 = v9[1];
    *(_OWORD *)a1 = v9[0];
    *(_OWORD *)(a1 + 16) = v7;
    *(void *)(a1 + 32) = v5;
    *(unsigned char *)(a1 + 40) = v6;
  }
  else
  {
    *(void *)&v9[0] = 0;
    *((void *)&v9[0] + 1) = 0xE000000000000000;
    swift_retain();
    sub_1B086A5E8();
    long long v12 = v9[0];
    *(void *)&v9[0] = 0;
    *((void *)&v9[0] + 1) = 0xE000000000000000;
    sub_1B086A5E8();
    long long v8 = v9[0];
    sub_1B0869E68();
    sub_1B07BBD78(v3, (uint64_t)v9);
    sub_1B086A6B8();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
    sub_1B0869E68();
    sub_1B086A128();
    sub_1B0869E68();
    swift_bridgeObjectRelease();
    sub_1B0869E68();
    swift_bridgeObjectRelease();
    long long v12 = v8;
    sub_1B0869E68();
    uint64_t result = sub_1B086A6C8();
    __break(1u);
  }
  return result;
}

uint64_t _s5JetUI19LineHeightDimensionV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  if (*(double *)(a1 + 8) == *(double *)(a2 + 8))
  {
    LineHeightDimension.source.getter((uint64_t)&v26);
    uint64_t v14 = v27;
    double v15 = v26;
    uint64_t v2 = v29;
    uint64_t v13 = v28;
    uint64_t v3 = v30;
    char v4 = v31;
    v24[0] = v26;
    v24[1] = v27;
    long long v24[2] = v28;
    void v24[3] = v29;
    v24[4] = v30;
    char v25 = v31;
    LineHeightDimension.source.getter((uint64_t)&v18);
    uint64_t v5 = v18;
    uint64_t v6 = v19;
    uint64_t v8 = v20;
    uint64_t v7 = v21;
    uint64_t v9 = v22;
    char v10 = v23;
    v16[0] = v18;
    v16[1] = v19;
    _OWORD v16[2] = v20;
    long long v16[3] = v21;
    v16[4] = v22;
    char v17 = v23;
    char v11 = _s5JetUI10FontSourceO2eeoiySbAC_ACtFZ_0((uint64_t)v24, (uint64_t)v16);
    sub_1B07BF284(v5, v6, v8, v7, v9, v10);
    sub_1B07BF284(v15, v14, v13, v2, v3, v4);
  }
  else
  {
    char v11 = 0;
  }
  return v11 & 1;
}

ValueMetadata *type metadata accessor for LineHeightDimension()
{
  return &type metadata for LineHeightDimension;
}

uint64_t sub_1B0824AD4()
{
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v1 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v3 = (char *)&v6 - v2;
  swift_checkMetadataState();
  sub_1B086A5F8();
  swift_getAssociatedConformanceWitness();
  char v4 = sub_1B0869D58();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, AssociatedTypeWitness);
  return v4 & 1;
}

uint64_t sub_1B0824C48()
{
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v1 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v3 = (char *)&v6 - v2;
  swift_checkMetadataState();
  sub_1B086A5F8();
  swift_getAssociatedConformanceWitness();
  char v4 = sub_1B0869D58();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, AssociatedTypeWitness);
  return v4 & 1;
}

uint64_t sub_1B0824DC0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(*(void *)(a2 + 24) + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  char v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v27 - v13;
  __n128 v16 = MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v19 + 16))(v18, v3, a2, v16);
  uint64_t v20 = 0;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v18, AssociatedTypeWitness);
      uint64_t v27 = a1;
      uint64_t v24 = sub_1B086A098();
      uint64_t WitnessTable = swift_getWitnessTable();
      uint64_t v30 = v24;
      uint64_t v31 = WitnessTable;
      uint64_t v32 = v7;
      long long v33 = v11;
      sub_1B0869D28();
      if (v29 == 1) {
        goto LABEL_7;
      }
      uint64_t v20 = v28 + 1;
      if (__OFADD__(v28, 1))
      {
        __break(1u);
        JUMPOUT(0x1B082514CLL);
      }
      if (v20 >= MEMORY[0x1B3E97990](a1, v6)) {
LABEL_7:
      }
        uint64_t v20 = MEMORY[0x1B3E97990](a1, v6);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, AssociatedTypeWitness);
      break;
    case 2u:
      return v20;
    case 3u:
      uint64_t v20 = MEMORY[0x1B3E97990](a1, v6);
      break;
    default:
      (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v14, v18, AssociatedTypeWitness);
      uint64_t v27 = a1;
      uint64_t v21 = sub_1B086A098();
      uint64_t v22 = swift_getWitnessTable();
      uint64_t v30 = v21;
      uint64_t v31 = v22;
      uint64_t v32 = v7;
      long long v33 = v14;
      sub_1B086A238();
      char v23 = (void (**)(char *, uint64_t))(v9 + 8);
      if (v29)
      {
        (*v23)(v14, AssociatedTypeWitness);
        uint64_t v20 = 0;
      }
      else
      {
        uint64_t v20 = v28;
        (*v23)(v14, AssociatedTypeWitness);
      }
      break;
  }
  return v20;
}

uint64_t ShelvesPresenter.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  ShelvesPresenter.init()();
  return v0;
}

uint64_t ShelvesPresenter.init()()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1B086A2D8();
  MEMORY[0x1F4188790](v2);
  uint64_t v3 = sub_1B08694F8();
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v4 = sub_1B086A2E8();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B07BE798();
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E4FBCC68], v4);
  sub_1B08694E8();
  v13[0] = MEMORY[0x1E4FBC860];
  sub_1B0829C48((unint64_t *)&qword_1EB5962C8, MEMORY[0x1E4FBCC10]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5962B8);
  sub_1B081D0C4(&qword_1EB5962C0, &qword_1EB5962B8);
  sub_1B086A498();
  *(void *)(v0 + 16) = sub_1B086A338();
  *(void *)(v0 + 24) = sub_1B0869FE8();
  uint64_t v8 = sub_1B08697A8();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EB596230);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v11 = sub_1B081D0C4((unint64_t *)&qword_1EB596228, &qword_1EB596230);
  v13[0] = v8;
  v13[1] = v9;
  _OWORD v13[2] = WitnessTable;
  void v13[3] = v11;
  sub_1B0869388();
  sub_1B0869548();
  *(void *)(v1 + 32) = sub_1B0869538();
  return v1;
}

uint64_t ShelvesPresenter.onApplySnapshot.getter()
{
  sub_1B0829C34();

  return swift_retain();
}

uint64_t sub_1B08254C4(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a3 + 24;
  swift_beginAccess();
  a1(v4);
  swift_endAccess();
  return sub_1B0825530();
}

uint64_t sub_1B0825530()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 80);
  v17[0] = sub_1B08697A8();
  v17[1] = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EB596230);
  _OWORD v17[2] = swift_getWitnessTable();
  long long v17[3] = sub_1B081D0C4((unint64_t *)&qword_1EB596228, &qword_1EB596230);
  uint64_t v3 = sub_1B0869388();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)v17 - v5;
  uint64_t v7 = sub_1B0869508();
  uint64_t v8 = *(void *)(v7 - 8);
  __n128 v9 = MEMORY[0x1F4188790](v7);
  uint64_t v11 = (void *)((char *)v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = (void *)v0[2];
  *uint64_t v11 = v12;
  (*(void (**)(void *, void, uint64_t, __n128))(v8 + 104))(v11, *MEMORY[0x1E4FBCBF0], v7, v9);
  id v13 = v12;
  LOBYTE(v12) = sub_1B0869518();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v8 + 8))(v11, v7);
  if (v12)
  {
    swift_beginAccess();
    uint64_t v15 = *(void *)(v1 + 88);
    uint64_t v16 = swift_bridgeObjectRetain();
    static DiffableData.makeSnapshot<A>(fromShelves:)(v16, v2, v15, (uint64_t)v6);
    swift_bridgeObjectRelease();
    sub_1B0869528();
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1B08257C8(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);

  return swift_release();
}

Swift::Void __swiftcall ShelvesPresenter.reapplySnapshot()()
{
  uint64_t v1 = sub_1B08694D8();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_1B08694F8();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10[0] = *(void *)(v0 + 16);
  aBlock[4] = sub_1B0829C3C;
  uint64_t v12 = v0;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1B08257C8;
  aBlock[3] = &block_descriptor_6;
  __n128 v9 = _Block_copy(aBlock);
  swift_retain();
  sub_1B08694E8();
  v10[1] = MEMORY[0x1E4FBC860];
  sub_1B0829C48(&qword_1EB5962A0, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5962A8);
  sub_1B081D0C4(&qword_1EB5962B0, &qword_1EB5962A8);
  sub_1B086A498();
  MEMORY[0x1B3E97C50](0, v8, v4, v9);
  _Block_release(v9);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  swift_release();
}

uint64_t ShelvesPresenter.setContents<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B082747C(a1, a2, a3, (uint64_t)&unk_1F0954038, (uint64_t)sub_1B0829C94);
}

uint64_t sub_1B0825AD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B086A098();
  sub_1B086A088();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a2, a4);
  return sub_1B086A038();
}

uint64_t ShelvesPresenter.insert<A>(contentsOf:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v26 = a4;
  uint64_t v22 = a2;
  uint64_t v7 = *(void *)(a3 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  MEMORY[0x1F4188790](a1);
  uint64_t v25 = v4;
  uint64_t v23 = *(void *)(v9 + 80);
  uint64_t v24 = *(void *)(v9 + 88);
  uint64_t v10 = type metadata accessor for ShelvesPresenter.InsertionPoint();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __n128 v13 = MEMORY[0x1F4188790](v10);
  uint64_t v15 = (char *)&v21 - v14;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v11 + 16))((char *)&v21 - v14, v22, v10, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a3);
  unint64_t v16 = (*(unsigned __int8 *)(v11 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  unint64_t v17 = (v12 + *(unsigned __int8 *)(v7 + 80) + v16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v18 = (char *)swift_allocObject();
  *((void *)v18 + 2) = v23;
  *((void *)v18 + 3) = a3;
  uint64_t v19 = v26;
  *((void *)v18 + 4) = v24;
  *((void *)v18 + 5) = v19;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v18[v16], v15, v10);
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v18[v17], (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a3);
  sub_1B08287DC((uint64_t)sub_1B0829E74, (uint64_t)v18, (uint64_t)&unk_1F09541A0, (uint64_t)sub_1B0838A38, (uint64_t)&block_descriptor_42);
  return swift_release();
}

uint64_t sub_1B0825E54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v10;
  uint64_t v12 = type metadata accessor for ShelvesPresenter.InsertionPoint();
  uint64_t v13 = sub_1B0824DC0(v11, v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a3, a5);
  v15[1] = v13;
  sub_1B086A098();
  swift_getWitnessTable();
  return sub_1B086A288();
}

uint64_t ShelvesPresenter.replace<A>(_:handlingProblemsWith:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v27 = a5;
  uint64_t v28 = a2;
  uint64_t v29 = a3;
  uint64_t v9 = *v5;
  uint64_t v31 = sub_1B08694D8();
  uint64_t v34 = *(void *)(v31 - 8);
  MEMORY[0x1F4188790](v31);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_1B08694F8();
  uint64_t v32 = *(void *)(v12 - 8);
  uint64_t v33 = v12;
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void *)(a4 - 8);
  uint64_t v16 = *(void *)(v15 + 64);
  __n128 v18 = MEMORY[0x1F4188790](v17);
  uint64_t v30 = v6[2];
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v15 + 16))((char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a4, v18);
  unint64_t v19 = (*(unsigned __int8 *)(v15 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  uint64_t v20 = (char *)swift_allocObject();
  *((void *)v20 + 2) = *(void *)(v9 + 80);
  *((void *)v20 + 3) = a4;
  *((void *)v20 + 4) = *(void *)(v9 + 88);
  *((void *)v20 + 5) = v27;
  *((void *)v20 + 6) = v6;
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(&v20[v19], (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), a4);
  uint64_t v21 = &v20[(v16 + v19 + 7) & 0xFFFFFFFFFFFFFFF8];
  uint64_t v22 = v29;
  *(void *)uint64_t v21 = v28;
  *((void *)v21 + 1) = v22;
  aBlock[4] = sub_1B082A050;
  void aBlock[5] = v20;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1B08257C8;
  aBlock[3] = &block_descriptor_9;
  uint64_t v23 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  sub_1B08694E8();
  uint64_t v35 = MEMORY[0x1E4FBC860];
  sub_1B0829C48(&qword_1EB5962A0, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5962A8);
  sub_1B081D0C4(&qword_1EB5962B0, &qword_1EB5962A8);
  uint64_t v24 = v31;
  sub_1B086A498();
  MEMORY[0x1B3E97C50](0, v14, v11, v23);
  _Block_release(v23);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v11, v24);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v14, v33);
  return swift_release();
}

uint64_t sub_1B0826390(uint64_t *a1, uint64_t a2, void (*a3)(char *), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v100 = a4;
  unint64_t v99 = a3;
  uint64_t v115 = a2;
  uint64_t v9 = *(void *)(*a1 + 80);
  uint64_t v10 = *(void *)(*a1 + 88);
  uint64_t v108 = type metadata accessor for ShelvesPresenter.InsertionPoint();
  uint64_t v91 = *(void (***)(char *, uint64_t))(v108 - 8);
  MEMORY[0x1F4188790](v108);
  unint64_t v93 = (char *)&v82 - v11;
  uint64_t v12 = sub_1B08697A8();
  uint64_t v112 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v98 = (char *)&v82 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v97 = (char *)&v82 - v15;
  uint64_t v16 = type metadata accessor for ShelvesPresenter.ReplaceSolution();
  MEMORY[0x1F4188790](v16 - 8);
  double v107 = (char *)&v82 - v17;
  uint64_t v88 = v10;
  uint64_t v117 = *(void *)(v10 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v110 = *(void (***)(char *, uint64_t))(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  unint64_t v19 = (char *)&v82 - v18;
  uint64_t v103 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v20);
  char v106 = (char *)&v82 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v22);
  uint64_t v24 = (char *)&v82 - v23;
  uint64_t v25 = sub_1B086A3B8();
  MEMORY[0x1F4188790](v25 - 8);
  id v101 = (char *)&v82 - v26;
  uint64_t v114 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](v27);
  uint64_t v29 = (char *)&v82 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v87 = a6;
  id v113 = *(unsigned int (**)(char *, uint64_t, uint64_t))(a6 + 8);
  uint64_t v89 = a5;
  uint64_t v119 = swift_getAssociatedTypeWitness();
  uint64_t v85 = *(void *)(v119 - 8);
  MEMORY[0x1F4188790](v119);
  int v118 = (char *)&v82 - v30;
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EB596230);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v33 = sub_1B081D0C4((unint64_t *)&qword_1EB596228, &qword_1EB596230);
  uint64_t v124 = v12;
  uint64_t v125 = v31;
  uint64_t v104 = WitnessTable;
  uint64_t v126 = WitnessTable;
  uint64_t v127 = v33;
  uint64_t v83 = sub_1B0869388();
  uint64_t v34 = *(void *)(v83 - 8);
  MEMORY[0x1F4188790](v83);
  uint64_t v86 = (uint64_t)&v82 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v36);
  uint64_t v90 = (uint64_t)&v82 - v37;
  uint64_t v38 = sub_1B0869FE8();
  uint64_t v39 = MEMORY[0x1B3E979A0](v38, v12);
  uint64_t v102 = v12;
  if (v39) {
    uint64_t v40 = sub_1B0838610(v38, v12, v104);
  }
  else {
    uint64_t v40 = MEMORY[0x1E4FBC870];
  }
  uint64_t v82 = v34;
  swift_bridgeObjectRelease();
  uint64_t v123 = v40;
  uint64_t v41 = a1 + 3;
  swift_beginAccess();
  uint64_t v84 = a1;
  uint64_t v42 = swift_bridgeObjectRetain();
  static DiffableData.makeSnapshot<A>(fromShelves:)(v42, v9, v88, v90);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t, uint64_t))(v114 + 16))(v29, v115, v89);
  sub_1B0869F08();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v44 = v101;
  uint64_t v115 = AssociatedConformanceWitness;
  sub_1B086A3F8();
  int64_t v45 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v103 + 48);
  uint64_t v114 = v103 + 48;
  id v113 = v45;
  if (v45(v44, 1, v9) != 1)
  {
    uint64_t v111 = *(void (**)(char *, char *, uint64_t))(v103 + 32);
    ++v110;
    uint64_t v96 = v103 + 24;
    char v105 = (void (**)(char *, char *, uint64_t))(v103 + 16);
    id v95 = (void (**)(char *, uint64_t))(v112 + 8);
    uint64_t v112 = v103 + 32;
    uint64_t v109 = (void (**)(char *, uint64_t))(v103 + 8);
    unint64_t v94 = (unsigned int (**)(char *, uint64_t, uint64_t))(v91 + 6);
    int64_t v92 = (void (**)(char *, char *, uint64_t))(v91 + 4);
    ++v91;
    v111(v24, v44, v9);
    while (1)
    {
      uint64_t v120 = *v41;
      swift_bridgeObjectRetain();
      uint64_t v62 = v117;
      sub_1B086A5F8();
      uint64_t v63 = sub_1B086A098();
      uint64_t v64 = swift_getWitnessTable();
      uint64_t v126 = v63;
      uint64_t v127 = v64;
      uint64_t v128 = v62;
      uint64_t v129 = v19;
      sub_1B086A238();
      unint64_t v65 = *v110;
      uint64_t v66 = AssociatedTypeWitness;
      (*v110)(v19, AssociatedTypeWitness);
      swift_bridgeObjectRelease();
      if (v122 == 1)
      {
        uint64_t v67 = v66;
        sub_1B086A5F8();
        unint64_t v68 = v107;
        v99(v19);
        uint64_t v69 = v101;
        v65(v19, v67);
        uint64_t v44 = v69;
        if ((*v94)(v68, 1, v108) != 1)
        {
          uint64_t v70 = v93;
          uint64_t v71 = v108;
          (*v92)(v93, v107, v108);
          uint64_t v72 = swift_bridgeObjectRetain();
          sub_1B0824DC0(v72, v71);
          swift_bridgeObjectRelease();
          (*v105)(v106, v24, v9);
          swift_beginAccess();
          sub_1B086A058();
          swift_endAccess();
          (*v91)(v70, v71);
        }
      }
      else
      {
        unint64_t v55 = v121;
        swift_beginAccess();
        sub_1B0869FD8();
        uint64_t v56 = *v41;
        sub_1B0829BE0(v55, *v41);
        char isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
        uint64_t v58 = v56 & 0xFFFFFFFFFFFFFF8;
        if ((isClassOrObjCExistentialType & 1) == 0) {
          uint64_t v58 = v56;
        }
        uint64_t v59 = v103;
        (*(void (**)(unint64_t, char *, uint64_t))(v103 + 24))(v58+ ((*(unsigned __int8 *)(v103 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v103 + 80))+ *(void *)(v103 + 72) * v55, v24, v9);
        swift_endAccess();
        (*(void (**)(char *, char *, uint64_t))(v59 + 16))(v106, v24, v9);
        sub_1B0869798();
        uint64_t v60 = v102;
        sub_1B086A1C8();
        unint64_t v61 = v97;
        sub_1B086A188();
        (*v95)(v61, v60);
      }
      (*v109)(v24, v9);
      sub_1B086A3F8();
      if (v113(v44, 1, v9) == 1) {
        break;
      }
      v111(v24, v44, v9);
    }
  }
  (*(void (**)(char *, uint64_t))(v85 + 8))(v118, v119);
  uint64_t v46 = swift_bridgeObjectRetain();
  uint64_t v47 = v86;
  uint64_t v48 = v88;
  static DiffableData.makeSnapshot<A>(fromShelves:)(v46, v9, v88, v86);
  uint64_t v49 = swift_bridgeObjectRelease();
  MEMORY[0x1F4188790](v49);
  uint64_t v50 = v89;
  *(&v82 - 6) = v9;
  *(&v82 - 5) = v50;
  uint64_t v51 = v87;
  *(&v82 - 4) = v48;
  *(&v82 - 3) = v51;
  *(&v82 - 2) = v90;
  *(&v82 - 1) = v47;
  swift_bridgeObjectRetain();
  uint64_t v52 = sub_1B086A178();
  swift_bridgeObjectRelease();
  uint64_t v123 = v52;
  swift_bridgeObjectRetain();
  char v53 = sub_1B086A198();
  swift_bridgeObjectRelease();
  if ((v53 & 1) == 0)
  {
    id v73 = objc_msgSend(self, sel_mainBundle);
    id v74 = objc_msgSend(v73, sel_bundleIdentifier);

    if (v74)
    {
      uint64_t v75 = sub_1B0869D98();
      uint64_t v77 = v76;

      if (v75 == 0x6C7070612E6D6F63 && v77 == 0xEF636973754D2E65)
      {
        swift_bridgeObjectRelease();
LABEL_21:
        sub_1B0869528();
        goto LABEL_22;
      }
      char v78 = sub_1B086A8A8();
      swift_bridgeObjectRelease();
      if (v78) {
        goto LABEL_21;
      }
    }
LABEL_22:
    uint64_t v124 = v52;
    sub_1B086A1C8();
    swift_getWitnessTable();
    sub_1B086A0A8();
    uint64_t v54 = v83;
    sub_1B0869338();
    goto LABEL_23;
  }
  uint64_t v54 = v83;
LABEL_23:
  uint64_t v79 = v82;
  swift_bridgeObjectRelease();
  sub_1B0869528();
  uint64_t v80 = *(void (**)(uint64_t, uint64_t))(v79 + 8);
  v80(v90, v54);
  return ((uint64_t (*)(uint64_t, uint64_t))v80)(v47, v54);
}

BOOL sub_1B0827218(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v19 = a3;
  uint64_t v4 = sub_1B08697A8();
  v18[0] = v4;
  v18[1] = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EB596230);
  void v18[2] = swift_getWitnessTable();
  void v18[3] = sub_1B081D0C4((unint64_t *)&qword_1EB596228, &qword_1EB596230);
  uint64_t v5 = sub_1B0869388();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)v18 - v7;
  uint64_t v9 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)v18 - v11;
  sub_1B0869328();
  char v14 = v13;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a1, v4);
  if (v14)
  {
    BOOL v16 = 0;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v19, v5);
    sub_1B0869328();
    BOOL v16 = (v15 & 1) == 0;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v4);
  return v16;
}

uint64_t ShelvesPresenter.remove<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B082747C(a1, a2, a3, (uint64_t)&unk_1F09540B0, (uint64_t)sub_1B082A14C);
}

uint64_t sub_1B082747C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *v5;
  uint64_t v10 = *(void *)(a2 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __n128 v12 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, __n128))(v10 + 16))((char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v12);
  unint64_t v13 = (*(unsigned __int8 *)(v10 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  char v14 = (char *)swift_allocObject();
  *((void *)v14 + 2) = *(void *)(v9 + 80);
  *((void *)v14 + 3) = a2;
  *((void *)v14 + 4) = *(void *)(v9 + 88);
  *((void *)v14 + 5) = a3;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v14[v13], (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a2);
  sub_1B08287DC(a5, (uint64_t)v14, (uint64_t)&unk_1F09541A0, (uint64_t)sub_1B0838A38, (uint64_t)&block_descriptor_42);
  return swift_release();
}

uint64_t sub_1B0827600(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __n128 v10 = MEMORY[0x1F4188790](a1);
  (*(void (**)(unsigned char *, __n128))(v12 + 16))(&v15[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)], v10);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v13 = sub_1B086A1D8();
  uint64_t v16 = a3;
  uint64_t v17 = a4;
  uint64_t v18 = a5;
  uint64_t v19 = a6;
  uint64_t v20 = v13;
  sub_1B086A098();
  swift_getWitnessTable();
  swift_getWitnessTable();
  sub_1B086A2A8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B08277CC()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v1 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v3 = (char *)&v6 - v2;
  sub_1B086A5F8();
  swift_getAssociatedConformanceWitness();
  char v4 = sub_1B086A1B8();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, AssociatedTypeWitness);
  return v4 & 1;
}

uint64_t ShelvesPresenter.reload<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B0827EEC(a1, a2, a3, (uint64_t)&unk_1F09540D8, (uint64_t)sub_1B082A1B4, (uint64_t)&block_descriptor_18);
}

uint64_t sub_1B0827938(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v26 = a2;
  uint64_t v27 = a4;
  uint64_t v5 = *a1;
  uint64_t v6 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v24 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(v5 + 80);
  uint64_t v9 = sub_1B08697A8();
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EB596230);
  uint64_t v25 = v9;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v12 = sub_1B081D0C4((unint64_t *)&qword_1EB596228, &qword_1EB596230);
  uint64_t v35 = v9;
  uint64_t v36 = v10;
  uint64_t v37 = WitnessTable;
  uint64_t v38 = v12;
  uint64_t v13 = sub_1B0869388();
  uint64_t v28 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  char v15 = (char *)&v23 - v14;
  swift_beginAccess();
  uint64_t v16 = *(void *)(v5 + 88);
  uint64_t v17 = swift_bridgeObjectRetain();
  static DiffableData.makeSnapshot<A>(fromShelves:)(v17, v8, v16, (uint64_t)v15);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v24, v26, a3);
  uint64_t v18 = v13;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v19 = v27;
  uint64_t v20 = sub_1B086A1D8();
  uint64_t v34 = sub_1B0869368();
  uint64_t v29 = v8;
  uint64_t v30 = a3;
  uint64_t v31 = v16;
  uint64_t v32 = v19;
  uint64_t v33 = v20;
  sub_1B086A098();
  swift_getWitnessTable();
  uint64_t v21 = sub_1B086A668();
  swift_bridgeObjectRelease();
  uint64_t v34 = v21;
  swift_getWitnessTable();
  if (sub_1B086A248())
  {
    (*(void (**)(char *, uint64_t))(v28 + 8))(v15, v18);
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_1B0869338();
    swift_bridgeObjectRelease();
    sub_1B0869528();
    return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v15, v18);
  }
}

uint64_t sub_1B0827CE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v7 = (char *)&v14 - v6;
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B08697A8();
  sub_1B0869778();
  sub_1B086A5F8();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, a3);
  swift_getAssociatedConformanceWitness();
  char v12 = sub_1B086A1B8();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, AssociatedTypeWitness);
  return v12 & 1;
}

uint64_t ShelvesPresenter.reloadItems<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B0827EEC(a1, a2, a3, (uint64_t)&unk_1F0954100, (uint64_t)sub_1B082A294, (uint64_t)&block_descriptor_24);
}

uint64_t sub_1B0827EEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v29 = a6;
  uint64_t v26 = a3;
  uint64_t v27 = a5;
  v25[1] = a4;
  uint64_t v9 = *v6;
  uint64_t v10 = sub_1B08694D8();
  uint64_t v32 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  char v12 = (char *)v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_1B08694F8();
  uint64_t v30 = *(void *)(v13 - 8);
  uint64_t v31 = v13;
  MEMORY[0x1F4188790](v13);
  char v15 = (char *)v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *(void *)(a2 - 8);
  uint64_t v17 = *(void *)(v16 + 64);
  __n128 v19 = MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = v6[2];
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v16 + 16))(v20, a1, a2, v19);
  unint64_t v21 = (*(unsigned __int8 *)(v16 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  uint64_t v22 = (char *)swift_allocObject();
  *((void *)v22 + 2) = *(void *)(v9 + 80);
  *((void *)v22 + 3) = a2;
  *((void *)v22 + 4) = *(void *)(v9 + 88);
  *((void *)v22 + 5) = v26;
  *((void *)v22 + 6) = v6;
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(&v22[v21], v20, a2);
  aBlock[4] = v27;
  void aBlock[5] = v22;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1B08257C8;
  aBlock[3] = v29;
  uint64_t v23 = _Block_copy(aBlock);
  swift_retain();
  sub_1B08694E8();
  uint64_t v33 = MEMORY[0x1E4FBC860];
  sub_1B0829C48(&qword_1EB5962A0, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5962A8);
  sub_1B081D0C4(&qword_1EB5962B0, &qword_1EB5962A8);
  sub_1B086A498();
  MEMORY[0x1B3E97C50](0, v15, v12, v23);
  _Block_release(v23);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v12, v10);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v15, v31);
  return swift_release();
}

uint64_t sub_1B0828298(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v25 = a2;
  uint64_t v26 = a4;
  uint64_t v24 = a3;
  uint64_t v4 = *a1;
  uint64_t v5 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(v4 + 80);
  uint64_t v9 = sub_1B08697A8();
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EB596230);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v12 = sub_1B081D0C4((unint64_t *)&qword_1EB596228, &qword_1EB596230);
  uint64_t v27 = v9;
  uint64_t v28 = v10;
  uint64_t v29 = WitnessTable;
  uint64_t v30 = v12;
  uint64_t v13 = sub_1B0869388();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v24 - v15;
  swift_beginAccess();
  uint64_t v17 = *(void *)(v4 + 88);
  uint64_t v18 = swift_bridgeObjectRetain();
  static DiffableData.makeSnapshot<A>(fromShelves:)(v18, v8, v17, (uint64_t)v16);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v25, v24);
  uint64_t v19 = sub_1B086A1D8();
  uint64_t v20 = sub_1B0869358();
  sub_1B083800C(v20, v19);
  uint64_t v22 = v21;
  swift_bridgeObjectRelease();
  if (*(void *)(v22 + 16))
  {
    sub_1B0869308();
    swift_bridgeObjectRelease();
    sub_1B0869528();
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    return swift_bridgeObjectRelease();
  }
}

uint64_t ShelvesPresenter.updateEachShelf(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  uint64_t v6 = (void *)swift_allocObject();
  long long v6[2] = *(void *)(v5 + 80);
  CGFloat v6[3] = *(void *)(v5 + 88);
  v6[4] = a1;
  void v6[5] = a2;
  swift_retain();
  sub_1B08287DC((uint64_t)sub_1B082A330, (uint64_t)v6, (uint64_t)&unk_1F09541A0, (uint64_t)sub_1B0838A38, (uint64_t)&block_descriptor_42);

  return swift_release();
}

uint64_t sub_1B0828644(uint64_t *a1, uint64_t (*a2)(unint64_t), uint64_t a3, uint64_t a4)
{
  sub_1B086A098();
  swift_getWitnessTable();
  uint64_t result = sub_1B086A1F8();
  unint64_t v8 = v12;
  if (v12 == v13) {
    return result;
  }
  if (v13 < v12)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (v12 >= v13)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  do
  {
    unint64_t v9 = v8 + 1;
    sub_1B0869FD8();
    uint64_t v10 = *a1;
    sub_1B0829BE0(v8, *a1);
    if (_swift_isClassOrObjCExistentialType()) {
      uint64_t v11 = v10 & 0xFFFFFFFFFFFFFF8;
    }
    else {
      uint64_t v11 = v10;
    }
    uint64_t result = a2(v11+ ((*(unsigned __int8 *)(*(void *)(a4 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(a4 - 8) + 80))+ *(void *)(*(void *)(a4 - 8) + 72) * v8++);
  }
  while (v13 != v9);
  return result;
}

uint64_t ShelvesPresenter.withUnsafeShelves(_:)(uint64_t a1, uint64_t a2)
{
  return sub_1B08287DC(a1, a2, (uint64_t)&unk_1F0954150, (uint64_t)sub_1B082A340, (uint64_t)&block_descriptor_33);
}

uint64_t sub_1B08287DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v19[0] = a5;
  uint64_t v9 = sub_1B08694D8();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  int64_t v12 = (char *)v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_1B08694F8();
  uint64_t v13 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790](v20);
  uint64_t v15 = (char *)v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[1] = *(void *)(v5 + 16);
  uint64_t v16 = (void *)swift_allocObject();
  _OWORD v16[2] = a1;
  long long v16[3] = a2;
  v16[4] = v5;
  aBlock[4] = a4;
  void aBlock[5] = v16;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1B08257C8;
  aBlock[3] = v19[0];
  uint64_t v17 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  sub_1B08694E8();
  uint64_t v21 = MEMORY[0x1E4FBC860];
  sub_1B0829C48(&qword_1EB5962A0, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5962A8);
  sub_1B081D0C4(&qword_1EB5962B0, &qword_1EB5962A8);
  sub_1B086A498();
  MEMORY[0x1B3E97C50](0, v15, v12, v17);
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v20);
  return swift_release();
}

uint64_t sub_1B0828AA0(void (*a1)(uint64_t))
{
  swift_beginAccess();
  uint64_t v2 = swift_bridgeObjectRetain();
  a1(v2);
  return swift_bridgeObjectRelease();
}

uint64_t ShelvesPresenter.deinit()
{
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t ShelvesPresenter.__deallocating_deinit()
{
  ShelvesPresenter.deinit();

  return swift_deallocClassInstance();
}

uint64_t sub_1B0828B6C()
{
  sub_1B0829C34();

  return swift_retain();
}

uint64_t ShelvesPresenter<>.merge<A>(contentsOf:handlingProblemsWith:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v20 = a6;
  uint64_t v21 = a2;
  uint64_t v10 = *v6;
  uint64_t v11 = *(void *)(a4 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __n128 v13 = MEMORY[0x1F4188790](a1);
  uint64_t v14 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v11 + 16))(v14, v13);
  unint64_t v15 = (*(unsigned __int8 *)(v11 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  unint64_t v16 = (v12 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v17 = (char *)swift_allocObject();
  *((void *)v17 + 2) = *(void *)(v10 + 80);
  *((void *)v17 + 3) = a4;
  *((void *)v17 + 4) = a5;
  *((void *)v17 + 5) = *(void *)(v10 + 88);
  *((void *)v17 + 6) = v20;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v17[v15], v14, a4);
  uint64_t v18 = &v17[v16];
  *(void *)uint64_t v18 = v21;
  *((void *)v18 + 1) = a3;
  swift_retain();
  sub_1B08287DC((uint64_t)sub_1B082A3EC, (uint64_t)v17, (uint64_t)&unk_1F09541A0, (uint64_t)sub_1B0838A38, (uint64_t)&block_descriptor_42);
  return swift_release();
}

uint64_t sub_1B0828D60(uint64_t *a1, void (**a2)(char *, uint64_t), void (*a3)(char *), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v104 = a4;
  uint64_t v103 = a3;
  uint64_t v129 = a2;
  uint64_t v102 = type metadata accessor for ShelvesPresenter.InsertionPoint();
  uint64_t v110 = *(char **)(v102 - 8);
  MEMORY[0x1F4188790](v102);
  int64_t v92 = (char *)&v84 - v13;
  uint64_t v14 = type metadata accessor for ShelvesPresenter<>.MergeSolution();
  MEMORY[0x1F4188790](v14 - 8);
  id v101 = (char *)&v84 - v15;
  uint64_t v105 = a7;
  uint64_t v16 = type metadata accessor for ShelvesPresenter<>.MergeProblem();
  uint64_t v115 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v120 = (char *)&v84 - v17;
  uint64_t v107 = *(void *)(a8 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v126 = *(void (***)(char *, uint64_t))(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  char v122 = (char *)&v84 - v18;
  uint64_t v130 = v16;
  uint64_t v19 = a5;
  uint64_t v127 = sub_1B086A3B8();
  uint64_t v112 = *(void (***)(char *, char *, uint64_t))(v127 - 8);
  MEMORY[0x1F4188790](v127);
  unint64_t v121 = (char *)&v84 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  uint64_t v100 = (char *)&v84 - v22;
  MEMORY[0x1F4188790](v23);
  uint64_t v128 = (char *)&v84 - v24;
  uint64_t v93 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](v25);
  uint64_t v91 = (char *)&v84 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v27);
  unint64_t v99 = (char *)&v84 - v28;
  MEMORY[0x1F4188790](v29);
  uint64_t v98 = (char *)&v84 - v30;
  MEMORY[0x1F4188790](v31);
  uint64_t v33 = (char *)&v84 - v32;
  uint64_t v34 = sub_1B086A3B8();
  MEMORY[0x1F4188790](v34 - 8);
  uint64_t v36 = (char *)&v84 - v35;
  uint64_t v37 = a6;
  uint64_t v38 = *(void *)(a6 - 8);
  MEMORY[0x1F4188790](v39);
  uint64_t v41 = (char *)&v84 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = swift_getAssociatedTypeWitness();
  uint64_t v86 = *(void *)(v42 - 8);
  __n128 v43 = MEMORY[0x1F4188790](v42);
  int64_t v45 = (char *)&v84 - v44;
  uint64_t v85 = a1;
  uint64_t v134 = *a1;
  (*(void (**)(char *, void (**)(char *, uint64_t), uint64_t, __n128))(v38 + 16))(v41, v129, v37, v43);
  swift_bridgeObjectRetain();
  uint64_t v46 = v107;
  sub_1B0869F08();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v124 = v45;
  uint64_t v125 = v42;
  uint64_t v119 = AssociatedConformanceWitness;
  sub_1B086A3F8();
  uint64_t v48 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v93 + 48);
  uint64_t v118 = v93 + 48;
  uint64_t v117 = v48;
  if (v48(v36, 1, v19) == 1)
  {
LABEL_2:
    uint64_t v49 = v85;
    swift_bridgeObjectRelease();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v86 + 8))(v124, v125);
    uint64_t *v49 = v134;
    return result;
  }
  uint64_t v116 = 0;
  uint64_t v114 = *(void (**)(char *, char *, uint64_t))(v93 + 32);
  uint64_t v51 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v115 + 56);
  id v113 = v126 + 1;
  uint64_t v126 = (void (**)(char *, uint64_t))(v93 + 8);
  uint64_t v129 = (void (**)(char *, uint64_t))(v112 + 1);
  uint64_t v87 = v93 + 24;
  uint64_t v97 = v112 + 4;
  v112 += 2;
  uint64_t v111 = (unsigned int (**)(char *, uint64_t, uint64_t))(v115 + 48);
  uint64_t v96 = (void (**)(char *, char *, uint64_t))(v115 + 32);
  id v95 = (uint64_t (**)(char *, uint64_t, uint64_t))(v110 + 48);
  unint64_t v94 = (void (**)(char *, uint64_t))(v115 + 8);
  uint64_t v90 = (void (**)(char *, char *, uint64_t))(v110 + 32);
  uint64_t v115 = v93 + 32;
  uint64_t v89 = (void (**)(char *, char *, uint64_t))(v93 + 16);
  uint64_t v88 = (void (**)(char *, uint64_t))(v110 + 8);
  uint64_t v110 = v33;
  char v106 = v51;
  uint64_t v109 = v19;
  uint64_t v108 = v36;
  v114(v33, v36, v19);
  while (1)
  {
    uint64_t v57 = *v51;
    uint64_t v58 = v128;
    (*v51)(v128, 1, 1, v130);
    uint64_t v131 = v134;
    swift_bridgeObjectRetain();
    uint64_t v59 = v122;
    sub_1B086A5F8();
    uint64_t v60 = sub_1B086A098();
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v135 = v60;
    uint64_t v136 = WitnessTable;
    uint64_t v137 = v46;
    uint64_t v138 = v59;
    sub_1B086A238();
    (*v113)(v59, AssociatedTypeWitness);
    swift_bridgeObjectRelease();
    if (v133 == 1)
    {
      uint64_t v62 = v100;
      sub_1B086A5F8();
      uint64_t v63 = v127;
      (*v129)(v58, v127);
      uint64_t v64 = v130;
      swift_storeEnumTagMultiPayload();
      v57(v62, 0, 1, v64);
      (*v97)(v58, v62, v63);
    }
    else
    {
      unint64_t v65 = v132;
      uint64_t v66 = v98;
      sub_1B086A0C8();
      uint64_t v67 = v99;
      uint64_t v68 = v116;
      sub_1B0869898();
      if (v68)
      {
        (*v126)(v66, v19);
        uint64_t v58 = v128;
        uint64_t v63 = v127;
        (*v129)(v128, v127);
        *(void *)uint64_t v58 = v68;
        uint64_t v69 = v130;
        swift_storeEnumTagMultiPayload();
        uint64_t v51 = v106;
        v57(v58, 0, 1, v69);
        uint64_t v116 = 0;
        uint64_t v46 = v107;
      }
      else
      {
        uint64_t v116 = 0;
        sub_1B0869FD8();
        uint64_t v70 = v134;
        sub_1B0829BE0(v65, v134);
        char isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
        uint64_t v72 = v70 & 0xFFFFFFFFFFFFFF8;
        if ((isClassOrObjCExistentialType & 1) == 0) {
          uint64_t v72 = v70;
        }
        uint64_t v73 = v93;
        (*(void (**)(unint64_t, char *, uint64_t))(v93 + 24))(v72+ ((*(unsigned __int8 *)(v93 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v93 + 80))+ *(void *)(v93 + 72) * v65, v67, v19);
        id v74 = *(void (**)(char *, uint64_t))(v73 + 8);
        v74(v67, v19);
        v74(v66, v19);
        uint64_t v46 = v107;
        uint64_t v63 = v127;
        uint64_t v58 = v128;
        uint64_t v51 = v106;
      }
    }
    uint64_t v75 = v121;
    (*v112)(v121, v58, v63);
    if ((*v111)(v75, 1, v130) == 1)
    {
      uint64_t v52 = *v129;
      (*v129)(v58, v63);
      char v53 = v110;
      uint64_t v54 = v109;
      (*v126)(v110, v109);
      uint64_t v55 = v63;
      uint64_t v19 = v54;
      v52(v75, v55);
      goto LABEL_5;
    }
    uint64_t v76 = v120;
    (*v96)(v120, v75, v130);
    uint64_t v77 = v101;
    v103(v76);
    uint64_t v78 = v102;
    int v79 = (*v95)(v77, 2, v102);
    if (v79) {
      break;
    }
    uint64_t v80 = v92;
    (*v90)(v92, v77, v78);
    uint64_t v81 = swift_bridgeObjectRetain();
    sub_1B0824DC0(v81, v78);
    swift_bridgeObjectRelease();
    char v53 = v110;
    uint64_t v82 = v109;
    (*v89)(v91, v110, v109);
    uint64_t v46 = v107;
    sub_1B086A058();
    uint64_t v83 = v80;
    uint64_t v19 = v82;
    uint64_t v51 = v106;
    (*v88)(v83, v78);
    (*v94)(v120, v130);
    (*v129)(v58, v127);
    (*v126)(v53, v82);
LABEL_5:
    uint64_t v56 = v108;
    sub_1B086A3F8();
    if (v117(v56, 1, v19) == 1) {
      goto LABEL_2;
    }
    v114(v53, v56, v19);
  }
  if (v79 == 2)
  {
    (*v94)(v120, v130);
    (*v129)(v58, v127);
    char v53 = v110;
    uint64_t v19 = v109;
    (*v126)(v110, v109);
    goto LABEL_5;
  }
  (*v94)(v120, v130);
  (*v129)(v58, v127);
  (*v126)(v110, v109);
  (*(void (**)(char *, uint64_t))(v86 + 8))(v124, v125);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B0829BE0(unint64_t a1, uint64_t a2)
{
  uint64_t result = _swift_isClassOrObjCExistentialType();
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }
  uint64_t v5 = a2 & 0xFFFFFFFFFFFFFF8;
  if ((result & 1) == 0) {
    uint64_t v5 = a2;
  }
  if (*(void *)(v5 + 16) <= a1) {
    goto LABEL_7;
  }
  return result;
}

uint64_t sub_1B0829C34()
{
  return *(void *)(v0 + 32);
}

uint64_t block_destroy_helper_6()
{
  return swift_release();
}

uint64_t sub_1B0829C48(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1B0829C94(uint64_t a1)
{
  return sub_1B082A164(a1, (uint64_t (*)(uint64_t, unint64_t, void))sub_1B0825AD0);
}

uint64_t type metadata accessor for ShelvesPresenter.InsertionPoint()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1B0829CC4()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(type metadata accessor for ShelvesPresenter.InsertionPoint() - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  uint64_t v12 = *(void *)(v2 + 64);
  uint64_t v5 = *(void *)(v1 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  if (swift_getEnumCaseMultiPayload() <= 1)
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(v0 + v4, AssociatedTypeWitness);
  }
  uint64_t v9 = (v4 + v12 + v6) & ~v6;
  uint64_t v10 = v9 + v7;
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v0 + v9, v1);

  return MEMORY[0x1F4186498](v0, v10, v3 | v6 | 7);
}

uint64_t sub_1B0829E74(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v5 = *(void *)(type metadata accessor for ShelvesPresenter.InsertionPoint() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = v1
     + ((v6 + *(void *)(v5 + 64) + *(unsigned __int8 *)(*(void *)(v4 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v4 - 8) + 80));

  return sub_1B0825E54(a1, v1 + v6, v7, v3, v4);
}

uint64_t sub_1B0829F6C()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 56) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return MEMORY[0x1F4186498](v0, v6, v5);
}

uint64_t sub_1B082A050()
{
  unint64_t v1 = (*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 24) - 8) + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 24) - 8) + 80);
  uint64_t v2 = v0 + ((*(void *)(*(void *)(*(void *)(v0 + 24) - 8) + 64) + v1 + 7) & 0xFFFFFFFFFFFFFFF8);
  return sub_1B0826390(*(uint64_t **)(v0 + 48), v0 + v1, *(void (**)(char *))v2, *(void *)(v2 + 8), *(void *)(v0 + 24), *(void *)(v0 + 40));
}

uint64_t objectdestroyTm_0()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 24) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 48) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t v5 = v2 | 7;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);

  return MEMORY[0x1F4186498](v0, v4, v5);
}

uint64_t sub_1B082A14C(uint64_t a1)
{
  return sub_1B082A164(a1, (uint64_t (*)(uint64_t, unint64_t, void))sub_1B0827600);
}

uint64_t sub_1B082A164(uint64_t a1, uint64_t (*a2)(uint64_t, unint64_t, void))
{
  return a2(a1, v2+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v2 + 24) - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v2 + 24) - 8) + 80)), *(void *)(v2 + 16));
}

uint64_t sub_1B082A1B4()
{
  return sub_1B082A2AC((uint64_t (*)(void, unint64_t))sub_1B0827938);
}

uint64_t objectdestroy_14Tm()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 56) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x1F4186498](v0, v5, v6);
}

uint64_t sub_1B082A294()
{
  return sub_1B082A2AC((uint64_t (*)(void, unint64_t))sub_1B0828298);
}

uint64_t sub_1B082A2AC(uint64_t (*a1)(void, unint64_t))
{
  return a1(*(void *)(v1 + 48), v1+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v1 + 24) - 8) + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v1 + 24) - 8) + 80)));
}

uint64_t sub_1B082A2F8()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t sub_1B082A330(uint64_t *a1)
{
  return sub_1B0828644(a1, *(uint64_t (**)(unint64_t))(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 16));
}

uint64_t sub_1B082A340()
{
  return sub_1B0828AA0(*(void (**)(uint64_t))(v0 + 16));
}

uint64_t sub_1B082A34C()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 24) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 56) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (*(void *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);
  swift_release();

  return MEMORY[0x1F4186498](v0, v5 + 16, v4);
}

uint64_t sub_1B082A3EC(uint64_t *a1)
{
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)(v1[3] - 8) + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1[3] - 8) + 80);
  uint64_t v3 = (char *)v1 + ((*(void *)(*(void *)(v1[3] - 8) + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  return sub_1B0828D60(a1, (void (**)(char *, uint64_t))((char *)v1 + v2), *(void (**)(char *))v3, *((void *)v3 + 1), v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_1B082A480(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1B082A4BC()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for ShelvesPresenter()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t method lookup function for ShelvesPresenter(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ShelvesPresenter);
}

uint64_t dispatch thunk of ShelvesPresenter.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t sub_1B082A564()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

void *sub_1B082A604(void *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  if (v6 > 3) {
    goto LABEL_5;
  }
  unsigned int v7 = ((1 << (8 * v6)) + 1) >> (8 * v6);
  uint64_t v8 = 2;
  if (v7 > 0xFFFD) {
    uint64_t v8 = 4;
  }
  if (v7 <= 0xFD) {
LABEL_5:
  }
    uint64_t v8 = 1;
  unint64_t v9 = v8 + v6;
  uint64_t v10 = *(_DWORD *)(v5 + 80);
  if (v10 > 7 || v9 > 0x18 || (*(_DWORD *)(v5 + 80) & 0x100000) != 0)
  {
    uint64_t v13 = *(void *)a2;
    *a1 = *(void *)a2;
    a1 = (void *)(v13 + ((v10 + 16) & ~v10));
    swift_retain();
    return a1;
  }
  if (v6 > 3) {
    goto LABEL_15;
  }
  unsigned int v15 = ((1 << (8 * v6)) + 1) >> (8 * v6);
  if (v15 > 0xFFFD)
  {
    unsigned int v14 = *(_DWORD *)&a2[v6];
  }
  else
  {
    if (v15 <= 0xFD)
    {
LABEL_15:
      unsigned int v14 = a2[v6];
      goto LABEL_20;
    }
    unsigned int v14 = *(unsigned __int16 *)&a2[v6];
  }
LABEL_20:
  unsigned int v16 = v14 - 2;
  if (v14 >= 2)
  {
    if (v6 <= 3) {
      uint64_t v17 = v6;
    }
    else {
      uint64_t v17 = 4;
    }
    switch(v17)
    {
      case 1:
        int v18 = *a2;
        if (v6 < 4) {
          goto LABEL_32;
        }
        goto LABEL_33;
      case 2:
        int v18 = *(unsigned __int16 *)a2;
        if (v6 >= 4) {
          goto LABEL_33;
        }
        goto LABEL_32;
      case 3:
        int v18 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        if (v6 >= 4) {
          goto LABEL_33;
        }
        goto LABEL_32;
      case 4:
        int v18 = *(_DWORD *)a2;
        if (v6 < 4) {
LABEL_32:
        }
          v18 |= v16 << (8 * v6);
LABEL_33:
        unsigned int v14 = v18 + 2;
        break;
      default:
        break;
    }
  }
  if (v14 == 1)
  {
    (*(void (**)(void *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    if (v6 > 3) {
      goto LABEL_41;
    }
    unsigned int v22 = ((1 << (8 * v6)) + 1) >> (8 * v6);
    if (v22 > 0xFFFD)
    {
      *(_DWORD *)((char *)a1 + v6) = 1;
      return a1;
    }
    if (v22 <= 0xFD) {
LABEL_41:
    }
      *((unsigned char *)a1 + v6) = 1;
    else {
      *(_WORD *)((char *)a1 + v6) = 1;
    }
  }
  else if (v14)
  {
    if (v6 > 3) {
      goto LABEL_46;
    }
    unsigned int v20 = ((1 << (8 * v6)) + 1) >> (8 * v6);
    uint64_t v21 = 2;
    if (v20 > 0xFFFD) {
      uint64_t v21 = 4;
    }
    if (v20 <= 0xFD) {
LABEL_46:
    }
      uint64_t v21 = 1;
    memcpy(a1, a2, v21 + v6);
  }
  else
  {
    (*(void (**)(void *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    if (v6 <= 3)
    {
      unsigned int v19 = ((1 << (8 * v6)) + 1) >> (8 * v6);
      if (v19 > 0xFFFD)
      {
        *(_DWORD *)((char *)a1 + v6) = 0;
        return a1;
      }
      if (v19 > 0xFD)
      {
        *(_WORD *)((char *)a1 + v6) = 0;
        return a1;
      }
    }
    *((unsigned char *)a1 + v6) = 0;
  }
  return a1;
}

uint64_t sub_1B082A910(unsigned __int8 *a1)
{
  uint64_t result = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(*(void *)(result - 8) + 64);
  if (v3 > 3) {
    goto LABEL_2;
  }
  unsigned int v5 = ((1 << (8 * v3)) + 1) >> (8 * v3);
  if (v5 > 0xFFFD)
  {
    unsigned int v4 = *(_DWORD *)&a1[v3];
  }
  else
  {
    if (v5 <= 0xFD)
    {
LABEL_2:
      unsigned int v4 = a1[v3];
      goto LABEL_7;
    }
    unsigned int v4 = *(unsigned __int16 *)&a1[v3];
  }
LABEL_7:
  unsigned int v6 = v4 - 2;
  if (v4 >= 2)
  {
    if (v3 <= 3) {
      uint64_t v7 = v3;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a1;
        goto LABEL_16;
      case 2:
        int v8 = *(unsigned __int16 *)a1;
        goto LABEL_16;
      case 3:
        int v8 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_16;
      case 4:
        int v8 = *(_DWORD *)a1;
LABEL_16:
        int v9 = (v8 | (v6 << (8 * v3))) + 2;
        unsigned int v4 = v8 + 2;
        if (v3 < 4) {
          unsigned int v4 = v9;
        }
        break;
      default:
        break;
    }
  }
  if (v4 <= 1)
  {
    uint64_t v10 = *(uint64_t (**)(unsigned __int8 *, uint64_t))(*(void *)(result - 8) + 8);
    return v10(a1, result);
  }
  return result;
}

unsigned char *sub_1B082AA98(unsigned char *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  if (v6 > 3) {
    goto LABEL_2;
  }
  unsigned int v8 = ((1 << (8 * v6)) + 1) >> (8 * v6);
  if (v8 > 0xFFFD)
  {
    unsigned int v7 = *(_DWORD *)&a2[v6];
  }
  else
  {
    if (v8 <= 0xFD)
    {
LABEL_2:
      unsigned int v7 = a2[v6];
      goto LABEL_7;
    }
    unsigned int v7 = *(unsigned __int16 *)&a2[v6];
  }
LABEL_7:
  unsigned int v9 = v7 - 2;
  if (v7 >= 2)
  {
    if (v6 <= 3) {
      uint64_t v10 = v6;
    }
    else {
      uint64_t v10 = 4;
    }
    switch(v10)
    {
      case 1:
        int v11 = *a2;
        goto LABEL_16;
      case 2:
        int v11 = *(unsigned __int16 *)a2;
        goto LABEL_16;
      case 3:
        int v11 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_16;
      case 4:
        int v11 = *(_DWORD *)a2;
LABEL_16:
        int v12 = (v11 | (v9 << (8 * v6))) + 2;
        unsigned int v7 = v11 + 2;
        if (v6 < 4) {
          unsigned int v7 = v12;
        }
        break;
      default:
        break;
    }
  }
  if (v7 == 1)
  {
    (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    if (v6 > 3) {
      goto LABEL_25;
    }
    unsigned int v16 = ((1 << (8 * v6)) + 1) >> (8 * v6);
    if (v16 > 0xFFFD)
    {
      *(_DWORD *)&a1[v6] = 1;
      return a1;
    }
    if (v16 <= 0xFD) {
LABEL_25:
    }
      a1[v6] = 1;
    else {
      *(_WORD *)&a1[v6] = 1;
    }
  }
  else if (v7)
  {
    if (v6 > 3) {
      goto LABEL_30;
    }
    unsigned int v14 = ((1 << (8 * v6)) + 1) >> (8 * v6);
    uint64_t v15 = 2;
    if (v14 > 0xFFFD) {
      uint64_t v15 = 4;
    }
    if (v14 <= 0xFD) {
LABEL_30:
    }
      uint64_t v15 = 1;
    memcpy(a1, a2, v15 + v6);
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    if (v6 <= 3)
    {
      unsigned int v13 = ((1 << (8 * v6)) + 1) >> (8 * v6);
      if (v13 > 0xFFFD)
      {
        *(_DWORD *)&a1[v6] = 0;
        return a1;
      }
      if (v13 > 0xFD)
      {
        *(_WORD *)&a1[v6] = 0;
        return a1;
      }
    }
    a1[v6] = 0;
  }
  return a1;
}

unsigned __int8 *sub_1B082AD18(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1 == a2) {
    return a1;
  }
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  if (v6 > 3) {
    goto LABEL_3;
  }
  unsigned int v8 = ((1 << (8 * v6)) + 1) >> (8 * v6);
  if (v8 > 0xFFFD)
  {
    unsigned int v7 = *(_DWORD *)&a1[v6];
  }
  else
  {
    if (v8 <= 0xFD)
    {
LABEL_3:
      unsigned int v7 = a1[v6];
      goto LABEL_8;
    }
    unsigned int v7 = *(unsigned __int16 *)&a1[v6];
  }
LABEL_8:
  unsigned int v9 = v7 - 2;
  if (v7 >= 2)
  {
    if (v6 <= 3) {
      uint64_t v10 = v6;
    }
    else {
      uint64_t v10 = 4;
    }
    switch(v10)
    {
      case 1:
        int v11 = *a1;
        goto LABEL_17;
      case 2:
        int v11 = *(unsigned __int16 *)a1;
        goto LABEL_17;
      case 3:
        int v11 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_17;
      case 4:
        int v11 = *(_DWORD *)a1;
LABEL_17:
        int v12 = (v11 | (v9 << (8 * v6))) + 2;
        unsigned int v7 = v11 + 2;
        if (v6 < 4) {
          unsigned int v7 = v12;
        }
        break;
      default:
        break;
    }
  }
  if (v7 <= 1) {
    (*(void (**)(unsigned __int8 *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
  }
  if (v6 > 3) {
    goto LABEL_22;
  }
  unsigned int v14 = ((1 << (8 * v6)) + 1) >> (8 * v6);
  if (v14 > 0xFFFD)
  {
    unsigned int v13 = *(_DWORD *)&a2[v6];
  }
  else
  {
    if (v14 <= 0xFD)
    {
LABEL_22:
      unsigned int v13 = a2[v6];
      goto LABEL_27;
    }
    unsigned int v13 = *(unsigned __int16 *)&a2[v6];
  }
LABEL_27:
  unsigned int v15 = v13 - 2;
  if (v13 >= 2)
  {
    if (v6 <= 3) {
      uint64_t v16 = v6;
    }
    else {
      uint64_t v16 = 4;
    }
    switch(v16)
    {
      case 1:
        int v17 = *a2;
        goto LABEL_36;
      case 2:
        int v17 = *(unsigned __int16 *)a2;
        goto LABEL_36;
      case 3:
        int v17 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_36;
      case 4:
        int v17 = *(_DWORD *)a2;
LABEL_36:
        int v18 = (v17 | (v15 << (8 * v6))) + 2;
        unsigned int v13 = v17 + 2;
        if (v6 < 4) {
          unsigned int v13 = v18;
        }
        break;
      default:
        break;
    }
  }
  if (v13 == 1)
  {
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    if (v6 > 3) {
      goto LABEL_45;
    }
    unsigned int v22 = ((1 << (8 * v6)) + 1) >> (8 * v6);
    if (v22 > 0xFFFD)
    {
      *(_DWORD *)&a1[v6] = 1;
      return a1;
    }
    if (v22 <= 0xFD) {
LABEL_45:
    }
      a1[v6] = 1;
    else {
      *(_WORD *)&a1[v6] = 1;
    }
  }
  else if (v13)
  {
    if (v6 > 3) {
      goto LABEL_50;
    }
    unsigned int v20 = ((1 << (8 * v6)) + 1) >> (8 * v6);
    uint64_t v21 = 2;
    if (v20 > 0xFFFD) {
      uint64_t v21 = 4;
    }
    if (v20 <= 0xFD) {
LABEL_50:
    }
      uint64_t v21 = 1;
    memcpy(a1, a2, v21 + v6);
  }
  else
  {
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    if (v6 <= 3)
    {
      unsigned int v19 = ((1 << (8 * v6)) + 1) >> (8 * v6);
      if (v19 > 0xFFFD)
      {
        *(_DWORD *)&a1[v6] = 0;
        return a1;
      }
      if (v19 > 0xFD)
      {
        *(_WORD *)&a1[v6] = 0;
        return a1;
      }
    }
    a1[v6] = 0;
  }
  return a1;
}

unsigned char *sub_1B082B0A0(unsigned char *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  if (v6 > 3) {
    goto LABEL_2;
  }
  unsigned int v8 = ((1 << (8 * v6)) + 1) >> (8 * v6);
  if (v8 > 0xFFFD)
  {
    unsigned int v7 = *(_DWORD *)&a2[v6];
  }
  else
  {
    if (v8 <= 0xFD)
    {
LABEL_2:
      unsigned int v7 = a2[v6];
      goto LABEL_7;
    }
    unsigned int v7 = *(unsigned __int16 *)&a2[v6];
  }
LABEL_7:
  unsigned int v9 = v7 - 2;
  if (v7 >= 2)
  {
    if (v6 <= 3) {
      uint64_t v10 = v6;
    }
    else {
      uint64_t v10 = 4;
    }
    switch(v10)
    {
      case 1:
        int v11 = *a2;
        goto LABEL_16;
      case 2:
        int v11 = *(unsigned __int16 *)a2;
        goto LABEL_16;
      case 3:
        int v11 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_16;
      case 4:
        int v11 = *(_DWORD *)a2;
LABEL_16:
        int v12 = (v11 | (v9 << (8 * v6))) + 2;
        unsigned int v7 = v11 + 2;
        if (v6 < 4) {
          unsigned int v7 = v12;
        }
        break;
      default:
        break;
    }
  }
  if (v7 == 1)
  {
    (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
    if (v6 > 3) {
      goto LABEL_25;
    }
    unsigned int v16 = ((1 << (8 * v6)) + 1) >> (8 * v6);
    if (v16 > 0xFFFD)
    {
      *(_DWORD *)&a1[v6] = 1;
      return a1;
    }
    if (v16 <= 0xFD) {
LABEL_25:
    }
      a1[v6] = 1;
    else {
      *(_WORD *)&a1[v6] = 1;
    }
  }
  else if (v7)
  {
    if (v6 > 3) {
      goto LABEL_30;
    }
    unsigned int v14 = ((1 << (8 * v6)) + 1) >> (8 * v6);
    uint64_t v15 = 2;
    if (v14 > 0xFFFD) {
      uint64_t v15 = 4;
    }
    if (v14 <= 0xFD) {
LABEL_30:
    }
      uint64_t v15 = 1;
    memcpy(a1, a2, v15 + v6);
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
    if (v6 <= 3)
    {
      unsigned int v13 = ((1 << (8 * v6)) + 1) >> (8 * v6);
      if (v13 > 0xFFFD)
      {
        *(_DWORD *)&a1[v6] = 0;
        return a1;
      }
      if (v13 > 0xFD)
      {
        *(_WORD *)&a1[v6] = 0;
        return a1;
      }
    }
    a1[v6] = 0;
  }
  return a1;
}

unsigned __int8 *sub_1B082B320(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1 == a2) {
    return a1;
  }
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  if (v6 > 3) {
    goto LABEL_3;
  }
  unsigned int v8 = ((1 << (8 * v6)) + 1) >> (8 * v6);
  if (v8 > 0xFFFD)
  {
    unsigned int v7 = *(_DWORD *)&a1[v6];
  }
  else
  {
    if (v8 <= 0xFD)
    {
LABEL_3:
      unsigned int v7 = a1[v6];
      goto LABEL_8;
    }
    unsigned int v7 = *(unsigned __int16 *)&a1[v6];
  }
LABEL_8:
  unsigned int v9 = v7 - 2;
  if (v7 >= 2)
  {
    if (v6 <= 3) {
      uint64_t v10 = v6;
    }
    else {
      uint64_t v10 = 4;
    }
    switch(v10)
    {
      case 1:
        int v11 = *a1;
        goto LABEL_17;
      case 2:
        int v11 = *(unsigned __int16 *)a1;
        goto LABEL_17;
      case 3:
        int v11 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_17;
      case 4:
        int v11 = *(_DWORD *)a1;
LABEL_17:
        int v12 = (v11 | (v9 << (8 * v6))) + 2;
        unsigned int v7 = v11 + 2;
        if (v6 < 4) {
          unsigned int v7 = v12;
        }
        break;
      default:
        break;
    }
  }
  if (v7 <= 1) {
    (*(void (**)(unsigned __int8 *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
  }
  if (v6 > 3) {
    goto LABEL_22;
  }
  unsigned int v14 = ((1 << (8 * v6)) + 1) >> (8 * v6);
  if (v14 > 0xFFFD)
  {
    unsigned int v13 = *(_DWORD *)&a2[v6];
  }
  else
  {
    if (v14 <= 0xFD)
    {
LABEL_22:
      unsigned int v13 = a2[v6];
      goto LABEL_27;
    }
    unsigned int v13 = *(unsigned __int16 *)&a2[v6];
  }
LABEL_27:
  unsigned int v15 = v13 - 2;
  if (v13 >= 2)
  {
    if (v6 <= 3) {
      uint64_t v16 = v6;
    }
    else {
      uint64_t v16 = 4;
    }
    switch(v16)
    {
      case 1:
        int v17 = *a2;
        goto LABEL_36;
      case 2:
        int v17 = *(unsigned __int16 *)a2;
        goto LABEL_36;
      case 3:
        int v17 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_36;
      case 4:
        int v17 = *(_DWORD *)a2;
LABEL_36:
        int v18 = (v17 | (v15 << (8 * v6))) + 2;
        unsigned int v13 = v17 + 2;
        if (v6 < 4) {
          unsigned int v13 = v18;
        }
        break;
      default:
        break;
    }
  }
  if (v13 == 1)
  {
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
    if (v6 > 3) {
      goto LABEL_45;
    }
    unsigned int v22 = ((1 << (8 * v6)) + 1) >> (8 * v6);
    if (v22 > 0xFFFD)
    {
      *(_DWORD *)&a1[v6] = 1;
      return a1;
    }
    if (v22 <= 0xFD) {
LABEL_45:
    }
      a1[v6] = 1;
    else {
      *(_WORD *)&a1[v6] = 1;
    }
  }
  else if (v13)
  {
    if (v6 > 3) {
      goto LABEL_50;
    }
    unsigned int v20 = ((1 << (8 * v6)) + 1) >> (8 * v6);
    uint64_t v21 = 2;
    if (v20 > 0xFFFD) {
      uint64_t v21 = 4;
    }
    if (v20 <= 0xFD) {
LABEL_50:
    }
      uint64_t v21 = 1;
    memcpy(a1, a2, v21 + v6);
  }
  else
  {
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
    if (v6 <= 3)
    {
      unsigned int v19 = ((1 << (8 * v6)) + 1) >> (8 * v6);
      if (v19 > 0xFFFD)
      {
        *(_DWORD *)&a1[v6] = 0;
        return a1;
      }
      if (v19 > 0xFD)
      {
        *(_WORD *)&a1[v6] = 0;
        return a1;
      }
    }
    a1[v6] = 0;
  }
  return a1;
}

uint64_t sub_1B082B6A8(unsigned __int16 *a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v4 > 3)
  {
    int v5 = 3;
LABEL_5:
    char v7 = 8;
    goto LABEL_6;
  }
  unsigned int v6 = ((1 << (8 * v4)) + 1) >> (8 * v4);
  if (v6 > 0xFFFD) {
    goto LABEL_9;
  }
  int v5 = v6 + 2;
  if (v6 <= 0xFD) {
    goto LABEL_5;
  }
  char v7 = 16;
LABEL_6:
  unsigned int v8 = (1 << v7) - v5;
  if ((v8 & 0x80000000) == 0)
  {
    if (v4 > 3) {
      goto LABEL_13;
    }
LABEL_10:
    unsigned int v9 = ((1 << (8 * v4)) + 1) >> (8 * v4);
    uint64_t v10 = 2;
    if (v9 > 0xFFFD) {
      uint64_t v10 = 4;
    }
    if (v9 > 0xFD) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
LABEL_9:
  unsigned int v8 = 0x7FFFFFFF;
  if (v4 <= 3) {
    goto LABEL_10;
  }
LABEL_13:
  uint64_t v10 = 1;
LABEL_14:
  if (!a2) {
    return 0;
  }
  if (a2 <= v8) {
    goto LABEL_33;
  }
  uint64_t v11 = v10 + v4;
  char v12 = 8 * v11;
  if (v11 <= 3)
  {
    unsigned int v14 = ((a2 - v8 + ~(-1 << v12)) >> v12) + 1;
    if (HIWORD(v14))
    {
      int v13 = *(_DWORD *)((char *)a1 + v11);
      if (!v13) {
        goto LABEL_33;
      }
      goto LABEL_25;
    }
    if (v14 > 0xFF)
    {
      int v13 = *(unsigned __int16 *)((char *)a1 + v11);
      if (!*(unsigned __int16 *)((char *)a1 + v11)) {
        goto LABEL_33;
      }
      goto LABEL_25;
    }
    if (v14 < 2)
    {
LABEL_33:
      if (v8)
      {
        if (v4 <= 3)
        {
          unsigned int v22 = ((1 << (8 * v4)) + 1) >> (8 * v4);
          if (v22 > 0xFFFD)
          {
            unsigned int v17 = *(_DWORD *)((char *)a1 + v4);
            unsigned int v18 = ~v17;
LABEL_43:
            unsigned int v25 = 0x7FFFFFFF;
LABEL_44:
            if (v25 > v18) {
              return -v17;
            }
            else {
              return 0;
            }
          }
          int v20 = v22 + 2;
          if (v22 > 0xFD)
          {
            int v24 = *(unsigned __int16 *)((char *)a1 + v4);
            unsigned int v17 = v24 | 0xFFFF0000;
            unsigned int v18 = v24 ^ 0xFFFF;
            char v19 = 16;
          }
          else
          {
            int v23 = *((unsigned __int8 *)a1 + v4);
            unsigned int v17 = v23 | 0xFFFFFF00;
            unsigned int v18 = v23 ^ 0xFF;
            char v19 = 8;
          }
        }
        else
        {
          int v16 = *((unsigned __int8 *)a1 + v4);
          unsigned int v17 = v16 | 0xFFFFFF00;
          unsigned int v18 = v16 ^ 0xFF;
          char v19 = 8;
          int v20 = 3;
        }
        unsigned int v25 = (1 << v19) - v20;
        if ((v25 & 0x80000000) == 0) {
          goto LABEL_44;
        }
        goto LABEL_43;
      }
      return 0;
    }
  }
  int v13 = *((unsigned __int8 *)a1 + v11);
  if (!*((unsigned char *)a1 + v11)) {
    goto LABEL_33;
  }
LABEL_25:
  int v15 = (v13 - 1) << v12;
  if (v11 > 3) {
    int v15 = 0;
  }
  if (v11)
  {
    if (v11 > 3) {
      LODWORD(v11) = 4;
    }
    switch((int)v11)
    {
      case 2:
        LODWORD(v11) = *a1;
        break;
      case 3:
        LODWORD(v11) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v11) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v11) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v8 + (v11 | v15) + 1;
}

void sub_1B082B93C(unsigned char *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  char v7 = 8 * v6;
  if (v6 > 3)
  {
    int v8 = 3;
LABEL_3:
    char v9 = 8;
    goto LABEL_4;
  }
  unsigned int v11 = ((1 << v7) + 1) >> v7;
  if (v11 > 0xFFFD) {
    goto LABEL_10;
  }
  int v8 = v11 + 2;
  if (v11 <= 0xFD) {
    goto LABEL_3;
  }
  char v9 = 16;
LABEL_4:
  unsigned int v10 = (1 << v9) - v8;
  if ((v10 & 0x80000000) == 0)
  {
    if (v6 > 3) {
      goto LABEL_14;
    }
    goto LABEL_11;
  }
LABEL_10:
  unsigned int v10 = 0x7FFFFFFF;
  if (v6 > 3)
  {
LABEL_14:
    uint64_t v13 = 1;
    goto LABEL_15;
  }
LABEL_11:
  unsigned int v12 = ((1 << v7) + 1) >> v7;
  uint64_t v13 = 2;
  if (v12 > 0xFFFD) {
    uint64_t v13 = 4;
  }
  if (v12 <= 0xFD) {
    goto LABEL_14;
  }
LABEL_15:
  size_t v14 = v13 + v6;
  if (a3 <= v10)
  {
    int v15 = 0;
  }
  else if (v14 <= 3)
  {
    unsigned int v18 = ((a3 - v10 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
    if (HIWORD(v18))
    {
      int v15 = 4;
    }
    else if (v18 >= 0x100)
    {
      int v15 = 2;
    }
    else
    {
      int v15 = v18 > 1;
    }
  }
  else
  {
    int v15 = 1;
  }
  if (v10 < a2)
  {
    unsigned int v16 = ~v10 + a2;
    if (v14 < 4)
    {
      int v17 = (v16 >> (8 * v14)) + 1;
      if (v14)
      {
        int v19 = v16 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1 = v19;
          a1[2] = BYTE2(v19);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1 = v19;
        }
        else
        {
          *a1 = v19;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v16;
      int v17 = 1;
    }
    switch(v15)
    {
      case 1:
        a1[v14] = v17;
        return;
      case 2:
        *(_WORD *)&a1[v14] = v17;
        return;
      case 3:
        goto LABEL_51;
      case 4:
        *(_DWORD *)&a1[v14] = v17;
        return;
      default:
        return;
    }
  }
  switch(v15)
  {
    case 1:
      a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_35;
    case 2:
      *(_WORD *)&a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_35;
    case 3:
LABEL_51:
      __break(1u);
      JUMPOUT(0x1B082BBF4);
    case 4:
      *(_DWORD *)&a1[v14] = 0;
      goto LABEL_34;
    default:
LABEL_34:
      if (!a2) {
        return;
      }
LABEL_35:
      int v20 = -a2;
      if (v6 > 3) {
        goto LABEL_36;
      }
      unsigned int v21 = ((1 << v7) + 1) >> v7;
      if (v21 > 0xFFFD)
      {
        *(_DWORD *)&a1[v6] = v20;
      }
      else if (v21 <= 0xFD)
      {
LABEL_36:
        a1[v6] = v20;
      }
      else
      {
        *(_WORD *)&a1[v6] = v20;
      }
      return;
  }
}

uint64_t sub_1B082BC1C(unsigned __int8 *a1)
{
  uint64_t v2 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v2 > 3) {
    goto LABEL_2;
  }
  unsigned int v4 = ((1 << (8 * v2)) + 1) >> (8 * v2);
  if (v4 > 0xFFFD)
  {
    uint64_t result = *(unsigned int *)&a1[v2];
  }
  else
  {
    if (v4 <= 0xFD)
    {
LABEL_2:
      uint64_t result = a1[v2];
      goto LABEL_7;
    }
    uint64_t result = *(unsigned __int16 *)&a1[v2];
  }
LABEL_7:
  if (result >= 2)
  {
    if (v2 <= 3) {
      uint64_t v5 = v2;
    }
    else {
      uint64_t v5 = 4;
    }
    switch(v5)
    {
      case 1:
        int v6 = *a1;
        goto LABEL_16;
      case 2:
        int v6 = *(unsigned __int16 *)a1;
        goto LABEL_16;
      case 3:
        int v6 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_16;
      case 4:
        int v6 = *(_DWORD *)a1;
LABEL_16:
        unsigned int v7 = (v6 | ((result - 2) << (8 * v2))) + 2;
        unsigned int v8 = v6 + 2;
        if (v2 >= 4) {
          uint64_t result = v8;
        }
        else {
          uint64_t result = v7;
        }
        break;
      default:
        return result;
    }
  }
  return result;
}

void sub_1B082BD3C(unsigned char *a1, unsigned int a2)
{
  size_t v4 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (a2 > 1)
  {
    unsigned int v5 = a2 - 2;
    if (v4 < 4)
    {
      int v7 = (v5 >> (8 * v4)) + 2;
      v5 &= ~(-1 << (8 * v4));
      unsigned int v8 = (int *)&a1[v4];
      unsigned int v9 = ((1 << (8 * v4)) + 1) >> (8 * v4);
      if (v9 > 0xFFFD)
      {
        int *v8 = v7;
      }
      else if (v9 > 0xFD)
      {
        *(_WORD *)unsigned int v8 = v7;
      }
      else
      {
        *(unsigned char *)unsigned int v8 = v7;
      }
    }
    else
    {
      a1[v4] = 2;
    }
    if (v4 <= 3) {
      int v10 = v4;
    }
    else {
      int v10 = 4;
    }
    bzero(a1, v4);
    switch(v10)
    {
      case 2:
        *(_WORD *)a1 = v5;
        break;
      case 3:
        *(_WORD *)a1 = v5;
        a1[2] = BYTE2(v5);
        break;
      case 4:
        *(_DWORD *)a1 = v5;
        break;
      default:
        *a1 = v5;
        break;
    }
  }
  else
  {
    if (v4 > 3)
    {
LABEL_3:
      a1[v4] = a2;
      return;
    }
    unsigned int v6 = ((1 << (8 * v4)) + 1) >> (8 * v4);
    if (v6 > 0xFFFD)
    {
      *(_DWORD *)&a1[v4] = a2;
    }
    else
    {
      if (v6 <= 0xFD) {
        goto LABEL_3;
      }
      *(_WORD *)&a1[v4] = a2;
    }
  }
}

uint64_t sub_1B082BEC8()
{
  uint64_t result = type metadata accessor for ShelvesPresenter.InsertionPoint();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

void *sub_1B082BF44(void *a1, unsigned __int16 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  if (v6 > 3) {
    goto LABEL_5;
  }
  unsigned int v7 = ((1 << (8 * v6)) + 1) >> (8 * v6);
  uint64_t v8 = 2;
  if (v7 > 0xFFFD) {
    uint64_t v8 = 4;
  }
  if (v7 <= 0xFD) {
LABEL_5:
  }
    uint64_t v8 = 1;
  unint64_t v9 = v8 + v6;
  uint64_t v10 = *(_DWORD *)(v5 + 80);
  if (v10 > 7 || v9 > 0x18 || (*(_DWORD *)(v5 + 80) & 0x100000) != 0)
  {
    uint64_t v13 = *(void *)a2;
    *a1 = *(void *)a2;
    a1 = (void *)(v13 + ((v10 + 16) & ~v10));
    swift_retain();
    return a1;
  }
  if (v6 > 3)
  {
    char v14 = 8;
    int v15 = 3;
    goto LABEL_20;
  }
  unsigned int v16 = ((1 << (8 * v6)) + 1) >> (8 * v6);
  if (v16 <= 0xFFFD)
  {
    int v15 = v16 + 2;
    if (v16 >= 0xFE) {
      char v14 = 16;
    }
    else {
      char v14 = 8;
    }
LABEL_20:
    unsigned int v17 = (1 << v14) - v15;
    if ((v17 & 0x80000000) == 0) {
      goto LABEL_22;
    }
  }
  unsigned int v17 = 0x7FFFFFFF;
LABEL_22:
  if (v6 > 3)
  {
    int v18 = 3;
LABEL_26:
    char v20 = 8;
    goto LABEL_27;
  }
  unsigned int v19 = ((1 << (8 * v6)) + 1) >> (8 * v6);
  if (v19 > 0xFFFD) {
    goto LABEL_30;
  }
  int v18 = v19 + 2;
  if (v19 <= 0xFD) {
    goto LABEL_26;
  }
  char v20 = 16;
LABEL_27:
  unsigned int v21 = (1 << v20) - v18;
  if ((v21 & 0x80000000) == 0)
  {
    if (v6 > 3) {
      goto LABEL_34;
    }
LABEL_31:
    unsigned int v22 = ((1 << (8 * v6)) + 1) >> (8 * v6);
    uint64_t v23 = 2;
    if (v22 > 0xFFFD) {
      uint64_t v23 = 4;
    }
    if (v22 > 0xFD) {
      goto LABEL_35;
    }
    goto LABEL_34;
  }
LABEL_30:
  unsigned int v21 = 0x7FFFFFFF;
  if (v6 <= 3) {
    goto LABEL_31;
  }
LABEL_34:
  uint64_t v23 = 1;
LABEL_35:
  if (!v17) {
    goto LABEL_72;
  }
  unsigned int v24 = v17 - v21;
  if (v17 > v21)
  {
    uint64_t v25 = v23 + v6;
    char v26 = 8 * (v23 + v6);
    if (v25 > 3) {
      goto LABEL_38;
    }
    unsigned int v28 = ((v24 + ~(-1 << v26)) >> v26) + 1;
    if (HIWORD(v28))
    {
      int v27 = *(_DWORD *)((char *)a2 + v25);
      if (!v27) {
        goto LABEL_54;
      }
      goto LABEL_46;
    }
    if (v28 > 0xFF)
    {
      int v27 = *(unsigned __int16 *)((char *)a2 + v25);
      if (!*(unsigned __int16 *)((char *)a2 + v25)) {
        goto LABEL_54;
      }
      goto LABEL_46;
    }
    if (v28 >= 2)
    {
LABEL_38:
      int v27 = *((unsigned __int8 *)a2 + v25);
      if (!*((unsigned char *)a2 + v25)) {
        goto LABEL_54;
      }
LABEL_46:
      int v29 = (v27 - 1) << v26;
      if (v25 > 3) {
        int v29 = 0;
      }
      if (v25)
      {
        if (v25 > 3) {
          LODWORD(v25) = 4;
        }
        switch((int)v25)
        {
          case 2:
            LODWORD(v25) = *a2;
            break;
          case 3:
            LODWORD(v25) = *a2 | (*((unsigned __int8 *)a2 + 2) << 16);
            break;
          case 4:
            LODWORD(v25) = *(_DWORD *)a2;
            break;
          default:
            LODWORD(v25) = *(unsigned __int8 *)a2;
            break;
        }
      }
      if (v21 + (v25 | v29) != -1) {
        goto LABEL_96;
      }
      goto LABEL_72;
    }
  }
LABEL_54:
  if (!v21) {
    goto LABEL_72;
  }
  if (v6 <= 3)
  {
    unsigned int v35 = ((1 << (8 * v6)) + 1) >> (8 * v6);
    if (v35 > 0xFFFD)
    {
      unsigned int v31 = *(_DWORD *)((char *)a2 + v6);
      unsigned int v32 = ~v31;
      goto LABEL_65;
    }
    int v34 = v35 + 2;
    if (v35 > 0xFD)
    {
      int v37 = *(unsigned __int16 *)((char *)a2 + v6);
      unsigned int v31 = v37 | 0xFFFF0000;
      unsigned int v32 = v37 ^ 0xFFFF;
      char v33 = 16;
    }
    else
    {
      int v36 = *((unsigned __int8 *)a2 + v6);
      unsigned int v31 = v36 | 0xFFFFFF00;
      unsigned int v32 = v36 ^ 0xFF;
      char v33 = 8;
    }
  }
  else
  {
    int v30 = *((unsigned __int8 *)a2 + v6);
    unsigned int v31 = v30 | 0xFFFFFF00;
    unsigned int v32 = v30 ^ 0xFF;
    char v33 = 8;
    int v34 = 3;
  }
  unsigned int v38 = (1 << v33) - v34;
  if ((v38 & 0x80000000) == 0)
  {
    if (v38 <= v32) {
      goto LABEL_72;
    }
    goto LABEL_66;
  }
LABEL_65:
  if (v32 >= 0x7FFFFFFF) {
    goto LABEL_72;
  }
LABEL_66:
  if (v31) {
    goto LABEL_96;
  }
LABEL_72:
  if (v6 > 3)
  {
LABEL_73:
    unsigned int v39 = *((unsigned __int8 *)a2 + v6);
    goto LABEL_78;
  }
  unsigned int v40 = ((1 << (8 * v6)) + 1) >> (8 * v6);
  if (v40 > 0xFFFD)
  {
    unsigned int v39 = *(_DWORD *)((char *)a2 + v6);
  }
  else
  {
    if (v40 <= 0xFD) {
      goto LABEL_73;
    }
    unsigned int v39 = *(unsigned __int16 *)((char *)a2 + v6);
  }
LABEL_78:
  unsigned int v41 = v39 - 2;
  if (v39 >= 2)
  {
    if (v6 <= 3) {
      uint64_t v42 = v6;
    }
    else {
      uint64_t v42 = 4;
    }
    switch(v42)
    {
      case 1:
        int v43 = *(unsigned __int8 *)a2;
        goto LABEL_87;
      case 2:
        int v43 = *a2;
        goto LABEL_87;
      case 3:
        int v43 = *a2 | (*((unsigned __int8 *)a2 + 2) << 16);
        goto LABEL_87;
      case 4:
        int v43 = *(_DWORD *)a2;
LABEL_87:
        if (v6 < 4) {
          v43 |= v41 << (8 * v6);
        }
        unsigned int v39 = v43 + 2;
        break;
      default:
        break;
    }
  }
  if (v39 == 1)
  {
    (*(void (**)(void *, unsigned __int16 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    if (v6 <= 3)
    {
      unsigned int v47 = ((1 << (8 * v6)) + 1) >> (8 * v6);
      if (v47 > 0xFFFD)
      {
        *(_DWORD *)((char *)a1 + v6) = 1;
        return a1;
      }
      if (v47 > 0xFD)
      {
        *(_WORD *)((char *)a1 + v6) = 1;
        return a1;
      }
    }
    *((unsigned char *)a1 + v6) = 1;
    return a1;
  }
  if (v39)
  {
LABEL_96:
    if (v6 > 3) {
      goto LABEL_100;
    }
    unsigned int v45 = ((1 << (8 * v6)) + 1) >> (8 * v6);
    uint64_t v46 = 2;
    if (v45 > 0xFFFD) {
      uint64_t v46 = 4;
    }
    if (v45 <= 0xFD) {
LABEL_100:
    }
      uint64_t v46 = 1;
    memcpy(a1, a2, v46 + v6);
    return a1;
  }
  (*(void (**)(void *, unsigned __int16 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  if (v6 <= 3)
  {
    unsigned int v44 = ((1 << (8 * v6)) + 1) >> (8 * v6);
    if (v44 > 0xFFFD)
    {
      *(_DWORD *)((char *)a1 + v6) = 0;
      return a1;
    }
    if (v44 > 0xFD)
    {
      *(_WORD *)((char *)a1 + v6) = 0;
      return a1;
    }
  }
  *((unsigned char *)a1 + v6) = 0;
  return a1;
}

uint64_t sub_1B082C50C(unsigned __int8 *a1)
{
  uint64_t result = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(*(void *)(result - 8) + 64);
  if (v3 > 3)
  {
    char v4 = 8;
    int v5 = 3;
    goto LABEL_7;
  }
  unsigned int v6 = ((1 << (8 * v3)) + 1) >> (8 * v3);
  if (v6 <= 0xFFFD)
  {
    int v5 = v6 + 2;
    if (v6 >= 0xFE) {
      char v4 = 16;
    }
    else {
      char v4 = 8;
    }
LABEL_7:
    unsigned int v7 = (1 << v4) - v5;
    if ((v7 & 0x80000000) == 0) {
      goto LABEL_9;
    }
  }
  unsigned int v7 = 0x7FFFFFFF;
LABEL_9:
  if (v3 > 3)
  {
    int v8 = 3;
LABEL_13:
    char v10 = 8;
    goto LABEL_14;
  }
  unsigned int v9 = ((1 << (8 * v3)) + 1) >> (8 * v3);
  if (v9 > 0xFFFD) {
    goto LABEL_17;
  }
  int v8 = v9 + 2;
  if (v9 <= 0xFD) {
    goto LABEL_13;
  }
  char v10 = 16;
LABEL_14:
  unsigned int v11 = (1 << v10) - v8;
  if ((v11 & 0x80000000) == 0)
  {
    if (v3 > 3) {
      goto LABEL_21;
    }
LABEL_18:
    unsigned int v12 = ((1 << (8 * v3)) + 1) >> (8 * v3);
    uint64_t v13 = 2;
    if (v12 > 0xFFFD) {
      uint64_t v13 = 4;
    }
    if (v12 > 0xFD) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
LABEL_17:
  unsigned int v11 = 0x7FFFFFFF;
  if (v3 <= 3) {
    goto LABEL_18;
  }
LABEL_21:
  uint64_t v13 = 1;
LABEL_22:
  if (!v7) {
    goto LABEL_59;
  }
  unsigned int v14 = v7 - v11;
  if (v7 <= v11) {
    goto LABEL_41;
  }
  uint64_t v15 = v13 + v3;
  char v16 = 8 * (v13 + v3);
  if (v15 <= 3)
  {
    unsigned int v18 = ((v14 + ~(-1 << v16)) >> v16) + 1;
    if (HIWORD(v18))
    {
      int v17 = *(_DWORD *)&a1[v15];
      if (!v17) {
        goto LABEL_41;
      }
      goto LABEL_33;
    }
    if (v18 > 0xFF)
    {
      int v17 = *(unsigned __int16 *)&a1[v15];
      if (!*(_WORD *)&a1[v15]) {
        goto LABEL_41;
      }
      goto LABEL_33;
    }
    if (v18 < 2)
    {
LABEL_41:
      if (!v11) {
        goto LABEL_59;
      }
      if (v3 <= 3)
      {
        unsigned int v25 = ((1 << (8 * v3)) + 1) >> (8 * v3);
        if (v25 > 0xFFFD)
        {
          unsigned int v21 = *(_DWORD *)&a1[v3];
          unsigned int v22 = ~v21;
LABEL_52:
          if (v22 < 0x7FFFFFFF) {
            goto LABEL_53;
          }
LABEL_59:
          if (v3 > 3) {
            goto LABEL_60;
          }
          unsigned int v30 = ((1 << (8 * v3)) + 1) >> (8 * v3);
          if (v30 > 0xFFFD)
          {
            unsigned int v29 = *(_DWORD *)&a1[v3];
            goto LABEL_65;
          }
          if (v30 <= 0xFD) {
LABEL_60:
          }
            unsigned int v29 = a1[v3];
          else {
            unsigned int v29 = *(unsigned __int16 *)&a1[v3];
          }
LABEL_65:
          unsigned int v31 = v29 - 2;
          if (v29 >= 2)
          {
            if (v3 <= 3) {
              uint64_t v32 = v3;
            }
            else {
              uint64_t v32 = 4;
            }
            switch(v32)
            {
              case 1:
                int v33 = *a1;
                if (v3 >= 4) {
                  goto LABEL_81;
                }
                goto LABEL_75;
              case 2:
                int v33 = *(unsigned __int16 *)a1;
                if (v3 >= 4) {
                  goto LABEL_81;
                }
                goto LABEL_75;
              case 3:
                int v33 = *(unsigned __int16 *)a1 | (a1[2] << 16);
                if (v3 < 4) {
                  goto LABEL_75;
                }
                goto LABEL_81;
              case 4:
                int v33 = *(_DWORD *)a1;
                if (v3 < 4)
                {
LABEL_75:
                  unsigned int v29 = (v33 | (v31 << (8 * v3))) + 2;
                  break;
                }
LABEL_81:
                if ((v33 + 2) > 1) {
                  return result;
                }
                goto LABEL_77;
              default:
                break;
            }
          }
          if (v29 <= 1)
          {
LABEL_77:
            int v34 = *(uint64_t (**)(unsigned __int8 *, uint64_t))(*(void *)(result - 8) + 8);
            return v34(a1, result);
          }
          return result;
        }
        int v24 = v25 + 2;
        if (v25 > 0xFD)
        {
          int v27 = *(unsigned __int16 *)&a1[v3];
          unsigned int v21 = v27 | 0xFFFF0000;
          unsigned int v22 = v27 ^ 0xFFFF;
          char v23 = 16;
        }
        else
        {
          int v26 = a1[v3];
          unsigned int v21 = v26 | 0xFFFFFF00;
          unsigned int v22 = v26 ^ 0xFF;
          char v23 = 8;
        }
      }
      else
      {
        int v20 = a1[v3];
        unsigned int v21 = v20 | 0xFFFFFF00;
        unsigned int v22 = v20 ^ 0xFF;
        char v23 = 8;
        int v24 = 3;
      }
      unsigned int v28 = (1 << v23) - v24;
      if ((v28 & 0x80000000) == 0)
      {
        if (v28 <= v22) {
          goto LABEL_59;
        }
LABEL_53:
        if (v21) {
          return result;
        }
        goto LABEL_59;
      }
      goto LABEL_52;
    }
  }
  int v17 = a1[v15];
  if (!a1[v15]) {
    goto LABEL_41;
  }
LABEL_33:
  int v19 = (v17 - 1) << v16;
  if (v15 > 3) {
    int v19 = 0;
  }
  if (v15)
  {
    if (v15 > 3) {
      LODWORD(v15) = 4;
    }
    switch((int)v15)
    {
      case 2:
        LODWORD(v15) = *(unsigned __int16 *)a1;
        break;
      case 3:
        LODWORD(v15) = *(unsigned __int16 *)a1 | (a1[2] << 16);
        break;
      case 4:
        LODWORD(v15) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v15) = *a1;
        break;
    }
  }
  if (v11 + (v15 | v19) == -1) {
    goto LABEL_59;
  }
  return result;
}

unsigned char *sub_1B082C984(unsigned char *a1, unsigned __int16 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  if (v6 > 3)
  {
    char v7 = 8;
    int v8 = 3;
    goto LABEL_7;
  }
  unsigned int v9 = ((1 << (8 * v6)) + 1) >> (8 * v6);
  if (v9 <= 0xFFFD)
  {
    int v8 = v9 + 2;
    if (v9 >= 0xFE) {
      char v7 = 16;
    }
    else {
      char v7 = 8;
    }
LABEL_7:
    unsigned int v10 = (1 << v7) - v8;
    if ((v10 & 0x80000000) == 0) {
      goto LABEL_9;
    }
  }
  unsigned int v10 = 0x7FFFFFFF;
LABEL_9:
  if (v6 > 3)
  {
    int v11 = 3;
LABEL_13:
    char v13 = 8;
    goto LABEL_14;
  }
  unsigned int v12 = ((1 << (8 * v6)) + 1) >> (8 * v6);
  if (v12 > 0xFFFD) {
    goto LABEL_17;
  }
  int v11 = v12 + 2;
  if (v12 <= 0xFD) {
    goto LABEL_13;
  }
  char v13 = 16;
LABEL_14:
  unsigned int v14 = (1 << v13) - v11;
  if ((v14 & 0x80000000) == 0)
  {
    if (v6 > 3) {
      goto LABEL_21;
    }
LABEL_18:
    unsigned int v15 = ((1 << (8 * v6)) + 1) >> (8 * v6);
    uint64_t v16 = 2;
    if (v15 > 0xFFFD) {
      uint64_t v16 = 4;
    }
    if (v15 > 0xFD) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
LABEL_17:
  unsigned int v14 = 0x7FFFFFFF;
  if (v6 <= 3) {
    goto LABEL_18;
  }
LABEL_21:
  uint64_t v16 = 1;
LABEL_22:
  if (!v10) {
    goto LABEL_59;
  }
  unsigned int v17 = v10 - v14;
  if (v10 > v14)
  {
    uint64_t v18 = v16 + v6;
    char v19 = 8 * (v16 + v6);
    if (v18 > 3) {
      goto LABEL_25;
    }
    unsigned int v21 = ((v17 + ~(-1 << v19)) >> v19) + 1;
    if (HIWORD(v21))
    {
      int v20 = *(_DWORD *)((char *)a2 + v18);
      if (!v20) {
        goto LABEL_41;
      }
      goto LABEL_33;
    }
    if (v21 > 0xFF)
    {
      int v20 = *(unsigned __int16 *)((char *)a2 + v18);
      if (!*(unsigned __int16 *)((char *)a2 + v18)) {
        goto LABEL_41;
      }
      goto LABEL_33;
    }
    if (v21 >= 2)
    {
LABEL_25:
      int v20 = *((unsigned __int8 *)a2 + v18);
      if (!*((unsigned char *)a2 + v18)) {
        goto LABEL_41;
      }
LABEL_33:
      int v22 = (v20 - 1) << v19;
      if (v18 > 3) {
        int v22 = 0;
      }
      if (v18)
      {
        if (v18 > 3) {
          LODWORD(v18) = 4;
        }
        switch((int)v18)
        {
          case 2:
            LODWORD(v18) = *a2;
            break;
          case 3:
            LODWORD(v18) = *a2 | (*((unsigned __int8 *)a2 + 2) << 16);
            break;
          case 4:
            LODWORD(v18) = *(_DWORD *)a2;
            break;
          default:
            LODWORD(v18) = *(unsigned __int8 *)a2;
            break;
        }
      }
      if (v14 + (v18 | v22) != -1) {
        goto LABEL_85;
      }
      goto LABEL_59;
    }
  }
LABEL_41:
  if (!v14) {
    goto LABEL_59;
  }
  if (v6 <= 3)
  {
    unsigned int v28 = ((1 << (8 * v6)) + 1) >> (8 * v6);
    if (v28 > 0xFFFD)
    {
      unsigned int v24 = *(_DWORD *)((char *)a2 + v6);
      unsigned int v25 = ~v24;
      goto LABEL_52;
    }
    int v27 = v28 + 2;
    if (v28 > 0xFD)
    {
      int v30 = *(unsigned __int16 *)((char *)a2 + v6);
      unsigned int v24 = v30 | 0xFFFF0000;
      unsigned int v25 = v30 ^ 0xFFFF;
      char v26 = 16;
    }
    else
    {
      int v29 = *((unsigned __int8 *)a2 + v6);
      unsigned int v24 = v29 | 0xFFFFFF00;
      unsigned int v25 = v29 ^ 0xFF;
      char v26 = 8;
    }
  }
  else
  {
    int v23 = *((unsigned __int8 *)a2 + v6);
    unsigned int v24 = v23 | 0xFFFFFF00;
    unsigned int v25 = v23 ^ 0xFF;
    char v26 = 8;
    int v27 = 3;
  }
  unsigned int v31 = (1 << v26) - v27;
  if ((v31 & 0x80000000) == 0)
  {
    if (v31 <= v25) {
      goto LABEL_59;
    }
    goto LABEL_53;
  }
LABEL_52:
  if (v25 >= 0x7FFFFFFF) {
    goto LABEL_59;
  }
LABEL_53:
  if (v24) {
    goto LABEL_85;
  }
LABEL_59:
  if (v6 > 3)
  {
LABEL_60:
    unsigned int v32 = *((unsigned __int8 *)a2 + v6);
    goto LABEL_65;
  }
  unsigned int v33 = ((1 << (8 * v6)) + 1) >> (8 * v6);
  if (v33 > 0xFFFD)
  {
    unsigned int v32 = *(_DWORD *)((char *)a2 + v6);
  }
  else
  {
    if (v33 <= 0xFD) {
      goto LABEL_60;
    }
    unsigned int v32 = *(unsigned __int16 *)((char *)a2 + v6);
  }
LABEL_65:
  unsigned int v34 = v32 - 2;
  if (v32 >= 2)
  {
    if (v6 <= 3) {
      uint64_t v35 = v6;
    }
    else {
      uint64_t v35 = 4;
    }
    switch(v35)
    {
      case 1:
        int v36 = *(unsigned __int8 *)a2;
        if (v6 < 4) {
          goto LABEL_77;
        }
        goto LABEL_78;
      case 2:
        int v36 = *a2;
        if (v6 >= 4) {
          goto LABEL_78;
        }
        goto LABEL_77;
      case 3:
        int v36 = *a2 | (*((unsigned __int8 *)a2 + 2) << 16);
        if (v6 >= 4) {
          goto LABEL_78;
        }
        goto LABEL_77;
      case 4:
        int v36 = *(_DWORD *)a2;
        if (v6 < 4) {
LABEL_77:
        }
          v36 |= v34 << (8 * v6);
LABEL_78:
        unsigned int v32 = v36 + 2;
        break;
      default:
        break;
    }
  }
  if (v32 == 1)
  {
    (*(void (**)(unsigned char *, unsigned __int16 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    if (v6 <= 3)
    {
      unsigned int v40 = ((1 << (8 * v6)) + 1) >> (8 * v6);
      if (v40 > 0xFFFD)
      {
        *(_DWORD *)&a1[v6] = 1;
        return a1;
      }
      if (v40 > 0xFD)
      {
        *(_WORD *)&a1[v6] = 1;
        return a1;
      }
    }
    a1[v6] = 1;
    return a1;
  }
  if (v32)
  {
LABEL_85:
    if (v6 > 3) {
      goto LABEL_89;
    }
    unsigned int v38 = ((1 << (8 * v6)) + 1) >> (8 * v6);
    uint64_t v39 = 2;
    if (v38 > 0xFFFD) {
      uint64_t v39 = 4;
    }
    if (v38 <= 0xFD) {
LABEL_89:
    }
      uint64_t v39 = 1;
    memcpy(a1, a2, v39 + v6);
    return a1;
  }
  (*(void (**)(unsigned char *, unsigned __int16 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  if (v6 <= 3)
  {
    unsigned int v37 = ((1 << (8 * v6)) + 1) >> (8 * v6);
    if (v37 > 0xFFFD)
    {
      *(_DWORD *)&a1[v6] = 0;
      return a1;
    }
    if (v37 > 0xFD)
    {
      *(_WORD *)&a1[v6] = 0;
      return a1;
    }
  }
  a1[v6] = 0;
  return a1;
}

unsigned __int16 *sub_1B082CEEC(unsigned __int16 *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  char v7 = 8 * v6;
  if (v6 > 3)
  {
    char v8 = 8;
    int v9 = 3;
    goto LABEL_7;
  }
  unsigned int v10 = ((1 << v7) + 1) >> v7;
  if (v10 <= 0xFFFD)
  {
    int v9 = v10 + 2;
    if (v10 >= 0xFE) {
      char v8 = 16;
    }
    else {
      char v8 = 8;
    }
LABEL_7:
    unsigned int v11 = (1 << v8) - v9;
    if ((v11 & 0x80000000) == 0) {
      goto LABEL_9;
    }
  }
  unsigned int v11 = 0x7FFFFFFF;
LABEL_9:
  if (v6 > 3)
  {
    int v12 = 3;
LABEL_13:
    char v14 = 8;
    goto LABEL_14;
  }
  unsigned int v13 = ((1 << v7) + 1) >> v7;
  if (v13 > 0xFFFD) {
    goto LABEL_17;
  }
  int v12 = v13 + 2;
  if (v13 <= 0xFD) {
    goto LABEL_13;
  }
  char v14 = 16;
LABEL_14:
  unsigned int v15 = (1 << v14) - v12;
  if ((v15 & 0x80000000) == 0)
  {
    if (v6 > 3) {
      goto LABEL_21;
    }
LABEL_18:
    unsigned int v16 = ((1 << v7) + 1) >> v7;
    uint64_t v17 = 2;
    if (v16 > 0xFFFD) {
      uint64_t v17 = 4;
    }
    if (v16 > 0xFD) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
LABEL_17:
  unsigned int v15 = 0x7FFFFFFF;
  if (v6 <= 3) {
    goto LABEL_18;
  }
LABEL_21:
  uint64_t v17 = 1;
LABEL_22:
  if (!v11) {
    goto LABEL_54;
  }
  unsigned int v18 = v11 - v15;
  if (v11 <= v15) {
    goto LABEL_41;
  }
  uint64_t v19 = v17 + v6;
  char v20 = 8 * (v17 + v6);
  if (v19 <= 3)
  {
    unsigned int v22 = ((v18 + ~(-1 << v20)) >> v20) + 1;
    if (HIWORD(v22))
    {
      int v21 = *(_DWORD *)((char *)a1 + v19);
      if (!v21) {
        goto LABEL_41;
      }
      goto LABEL_33;
    }
    if (v22 > 0xFF)
    {
      int v21 = *(unsigned __int16 *)((char *)a1 + v19);
      if (!*(unsigned __int16 *)((char *)a1 + v19)) {
        goto LABEL_41;
      }
      goto LABEL_33;
    }
    if (v22 < 2)
    {
LABEL_41:
      if (!v15) {
        goto LABEL_54;
      }
      if (v6 <= 3)
      {
        unsigned int v29 = ((1 << v7) + 1) >> v7;
        if (v29 > 0xFFFD)
        {
          unsigned int v25 = *(_DWORD *)((char *)a1 + v6);
          unsigned int v26 = ~v25;
          goto LABEL_52;
        }
        int v28 = v29 + 2;
        if (v29 > 0xFD)
        {
          int v31 = *(unsigned __int16 *)((char *)a1 + v6);
          unsigned int v25 = v31 | 0xFFFF0000;
          unsigned int v26 = v31 ^ 0xFFFF;
          char v27 = 16;
        }
        else
        {
          int v30 = *((unsigned __int8 *)a1 + v6);
          unsigned int v25 = v30 | 0xFFFFFF00;
          unsigned int v26 = v30 ^ 0xFF;
          char v27 = 8;
        }
      }
      else
      {
        int v24 = *((unsigned __int8 *)a1 + v6);
        unsigned int v25 = v24 | 0xFFFFFF00;
        unsigned int v26 = v24 ^ 0xFF;
        char v27 = 8;
        int v28 = 3;
      }
      unsigned int v32 = (1 << v27) - v28;
      if ((v32 & 0x80000000) == 0)
      {
        if (v32 <= v26) {
          goto LABEL_54;
        }
        goto LABEL_53;
      }
LABEL_52:
      if (v26 >= 0x7FFFFFFF) {
        goto LABEL_54;
      }
LABEL_53:
      if (!v25) {
        goto LABEL_54;
      }
      goto LABEL_105;
    }
  }
  int v21 = *((unsigned __int8 *)a1 + v19);
  if (!*((unsigned char *)a1 + v19)) {
    goto LABEL_41;
  }
LABEL_33:
  int v23 = (v21 - 1) << v20;
  if (v19 > 3) {
    int v23 = 0;
  }
  if (v19)
  {
    if (v19 > 3) {
      LODWORD(v19) = 4;
    }
    switch((int)v19)
    {
      case 2:
        LODWORD(v19) = *a1;
        break;
      case 3:
        LODWORD(v19) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v19) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v19) = *(unsigned __int8 *)a1;
        break;
    }
  }
  if (v15 + (v19 | v23) == -1)
  {
LABEL_54:
    if (v6 <= 3)
    {
      unsigned int v35 = ((1 << v7) + 1) >> v7;
      if (v35 > 0xFFFD)
      {
LABEL_61:
        unsigned int v36 = 0x7FFFFFFF;
LABEL_62:
        if (v6 <= 3)
        {
          unsigned int v38 = ((1 << v7) + 1) >> v7;
          if (v38 > 0xFFFD) {
            goto LABEL_70;
          }
          int v37 = v38 + 2;
          if (v38 > 0xFD)
          {
            char v39 = 16;
LABEL_67:
            unsigned int v40 = (1 << v39) - v37;
            if ((v40 & 0x80000000) == 0)
            {
              if (v6 > 3) {
                goto LABEL_74;
              }
              goto LABEL_71;
            }
LABEL_70:
            unsigned int v40 = 0x7FFFFFFF;
            if (v6 > 3)
            {
LABEL_74:
              uint64_t v42 = 1;
LABEL_75:
              if (!v36) {
                goto LABEL_140;
              }
              unsigned int v43 = v36 - v40;
              if (v36 <= v40) {
                goto LABEL_94;
              }
              uint64_t v44 = v42 + v6;
              char v45 = 8 * (v42 + v6);
              if (v44 <= 3)
              {
                unsigned int v47 = ((v43 + ~(-1 << v45)) >> v45) + 1;
                if (HIWORD(v47))
                {
                  int v46 = *(_DWORD *)&a2[v44];
                  if (!v46) {
                    goto LABEL_94;
                  }
                  goto LABEL_86;
                }
                if (v47 > 0xFF)
                {
                  int v46 = *(unsigned __int16 *)&a2[v44];
                  if (!*(_WORD *)&a2[v44]) {
                    goto LABEL_94;
                  }
                  goto LABEL_86;
                }
                if (v47 < 2)
                {
LABEL_94:
                  if (!v40) {
                    goto LABEL_140;
                  }
                  if (v6 <= 3)
                  {
                    unsigned int v54 = ((1 << v7) + 1) >> v7;
                    if (v54 > 0xFFFD)
                    {
                      unsigned int v50 = *(_DWORD *)&a2[v6];
                      unsigned int v51 = ~v50;
LABEL_138:
                      if (v51 < 0x7FFFFFFF) {
                        goto LABEL_139;
                      }
LABEL_140:
                      if (a1 == (unsigned __int16 *)a2) {
                        return a1;
                      }
                      if (v6 > 3) {
                        goto LABEL_144;
                      }
                      unsigned int v73 = ((1 << v7) + 1) >> v7;
                      if (v73 > 0xFFFD)
                      {
                        unsigned int v74 = *(_DWORD *)((char *)a1 + v6);
                        unsigned int v75 = v74 - 2;
                        if (v74 < 2) {
                          goto LABEL_157;
                        }
                        goto LABEL_149;
                      }
                      if (v73 > 0xFD)
                      {
                        unsigned int v74 = *(unsigned __int16 *)((char *)a1 + v6);
                        unsigned int v75 = v74 - 2;
                        if (v74 < 2)
                        {
LABEL_157:
                          if (v74 <= 1) {
LABEL_158:
                          }
                            (*(void (**)(unsigned __int16 *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
                          if (v6 > 3) {
                            goto LABEL_162;
                          }
LABEL_159:
                          unsigned int v78 = ((1 << v7) + 1) >> v7;
                          if (v78 > 0xFFFD)
                          {
                            unsigned int v79 = *(_DWORD *)&a2[v6];
                            unsigned int v80 = v79 - 2;
                            if (v79 < 2) {
                              goto LABEL_185;
                            }
                            goto LABEL_167;
                          }
                          if (v78 > 0xFD)
                          {
                            unsigned int v79 = *(unsigned __int16 *)&a2[v6];
                            unsigned int v80 = v79 - 2;
                            if (v79 < 2) {
                              goto LABEL_185;
                            }
                          }
                          else
                          {
LABEL_162:
                            unsigned int v79 = a2[v6];
                            unsigned int v80 = v79 - 2;
                            if (v79 < 2) {
                              goto LABEL_185;
                            }
                          }
LABEL_167:
                          if (v6 <= 3) {
                            uint64_t v81 = v6;
                          }
                          else {
                            uint64_t v81 = 4;
                          }
                          switch(v81)
                          {
                            case 1:
                              int v82 = *a2;
                              if (v6 < 4) {
                                goto LABEL_183;
                              }
                              goto LABEL_184;
                            case 2:
                              int v82 = *(unsigned __int16 *)a2;
                              if (v6 >= 4) {
                                goto LABEL_184;
                              }
                              goto LABEL_183;
                            case 3:
                              int v82 = *(unsigned __int16 *)a2 | (a2[2] << 16);
                              if (v6 >= 4) {
                                goto LABEL_184;
                              }
                              goto LABEL_183;
                            case 4:
                              int v82 = *(_DWORD *)a2;
                              if (v6 < 4) {
LABEL_183:
                              }
                                v82 |= v80 << v7;
LABEL_184:
                              unsigned int v79 = v82 + 2;
                              break;
                            default:
                              break;
                          }
LABEL_185:
                          if (v79 != 1)
                          {
                            if (!v79)
                            {
                              (*(void (**)(unsigned __int16 *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
                              if (v6 <= 3)
                              {
                                unsigned int v83 = ((1 << v7) + 1) >> v7;
                                if (v83 <= 0xFFFD)
                                {
                                  if (v83 <= 0xFD) {
                                    goto LABEL_270;
                                  }
LABEL_283:
                                  *(unsigned __int16 *)((char *)a1 + v6) = 0;
                                  return a1;
                                }
LABEL_281:
                                *(_DWORD *)((char *)a1 + v6) = 0;
                                return a1;
                              }
                              goto LABEL_270;
                            }
                            goto LABEL_271;
                          }
                          (*(void (**)(unsigned __int16 *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
                          if (v6 > 3) {
                            goto LABEL_280;
                          }
                          unsigned int v84 = ((1 << v7) + 1) >> v7;
                          if (v84 <= 0xFFFD)
                          {
                            if (v84 > 0xFD) {
                              goto LABEL_284;
                            }
                            goto LABEL_280;
                          }
                          goto LABEL_282;
                        }
                      }
                      else
                      {
LABEL_144:
                        unsigned int v74 = *((unsigned __int8 *)a1 + v6);
                        unsigned int v75 = v74 - 2;
                        if (v74 < 2) {
                          goto LABEL_157;
                        }
                      }
LABEL_149:
                      if (v6 <= 3) {
                        uint64_t v76 = v6;
                      }
                      else {
                        uint64_t v76 = 4;
                      }
                      switch(v76)
                      {
                        case 1:
                          int v77 = *(unsigned __int8 *)a1;
                          if (v6 >= 4) {
                            goto LABEL_176;
                          }
                          goto LABEL_156;
                        case 2:
                          int v77 = *a1;
                          if (v6 < 4) {
                            goto LABEL_156;
                          }
                          goto LABEL_176;
                        case 3:
                          int v77 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
                          if (v6 < 4) {
                            goto LABEL_156;
                          }
                          goto LABEL_176;
                        case 4:
                          int v77 = *(_DWORD *)a1;
                          if (v6 < 4)
                          {
LABEL_156:
                            unsigned int v74 = (v77 | (v75 << v7)) + 2;
                            goto LABEL_157;
                          }
LABEL_176:
                          if ((v77 + 2) > 1) {
                            goto LABEL_159;
                          }
                          goto LABEL_158;
                        default:
                          goto LABEL_157;
                      }
                    }
                    int v53 = v54 + 2;
                    if (v54 > 0xFD)
                    {
                      int v71 = *(unsigned __int16 *)&a2[v6];
                      unsigned int v50 = v71 | 0xFFFF0000;
                      unsigned int v51 = v71 ^ 0xFFFF;
                      char v52 = 16;
                    }
                    else
                    {
                      int v55 = a2[v6];
                      unsigned int v50 = v55 | 0xFFFFFF00;
                      unsigned int v51 = v55 ^ 0xFF;
                      char v52 = 8;
                    }
                  }
                  else
                  {
                    int v49 = a2[v6];
                    unsigned int v50 = v49 | 0xFFFFFF00;
                    unsigned int v51 = v49 ^ 0xFF;
                    char v52 = 8;
                    int v53 = 3;
                  }
                  unsigned int v72 = (1 << v52) - v53;
                  if ((v72 & 0x80000000) == 0)
                  {
                    if (v72 <= v51) {
                      goto LABEL_140;
                    }
LABEL_139:
                    if (!v50) {
                      goto LABEL_140;
                    }
                    goto LABEL_200;
                  }
                  goto LABEL_138;
                }
              }
              int v46 = a2[v44];
              if (!a2[v44]) {
                goto LABEL_94;
              }
LABEL_86:
              int v48 = (v46 - 1) << v45;
              if (v44 > 3) {
                int v48 = 0;
              }
              if (v44)
              {
                if (v44 > 3) {
                  LODWORD(v44) = 4;
                }
                switch((int)v44)
                {
                  case 2:
                    LODWORD(v44) = *(unsigned __int16 *)a2;
                    break;
                  case 3:
                    LODWORD(v44) = *(unsigned __int16 *)a2 | (a2[2] << 16);
                    break;
                  case 4:
                    LODWORD(v44) = *(_DWORD *)a2;
                    break;
                  default:
                    LODWORD(v44) = *a2;
                    break;
                }
              }
              if (v40 + (v44 | v48) == -1) {
                goto LABEL_140;
              }
LABEL_200:
              if (v6 > 3) {
                goto LABEL_201;
              }
              unsigned int v86 = ((1 << v7) + 1) >> v7;
              if (v86 > 0xFFFD)
              {
                unsigned int v85 = *(_DWORD *)((char *)a1 + v6);
                goto LABEL_206;
              }
              if (v86 <= 0xFD) {
LABEL_201:
              }
                unsigned int v85 = *((unsigned __int8 *)a1 + v6);
              else {
                unsigned int v85 = *(unsigned __int16 *)((char *)a1 + v6);
              }
LABEL_206:
              unsigned int v87 = v85 - 2;
              if (v85 >= 2)
              {
                if (v6 <= 3) {
                  uint64_t v88 = v6;
                }
                else {
                  uint64_t v88 = 4;
                }
                switch(v88)
                {
                  case 1:
                    int v89 = *(unsigned __int8 *)a1;
                    goto LABEL_215;
                  case 2:
                    int v89 = *a1;
                    goto LABEL_215;
                  case 3:
                    int v89 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
                    goto LABEL_215;
                  case 4:
                    int v89 = *(_DWORD *)a1;
LABEL_215:
                    if (v6 < 4) {
                      unsigned int v85 = (v89 | (v87 << v7)) + 2;
                    }
                    else {
                      unsigned int v85 = v89 + 2;
                    }
                    break;
                  default:
                    break;
                }
              }
              if (v85 <= 1) {
                (*(void (**)(unsigned __int16 *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
              }
              goto LABEL_271;
            }
LABEL_71:
            unsigned int v41 = ((1 << v7) + 1) >> v7;
            uint64_t v42 = 2;
            if (v41 > 0xFFFD) {
              uint64_t v42 = 4;
            }
            if (v41 > 0xFD) {
              goto LABEL_75;
            }
            goto LABEL_74;
          }
        }
        else
        {
          int v37 = 3;
        }
        char v39 = 8;
        goto LABEL_67;
      }
      int v34 = v35 + 2;
      if (v35 >= 0xFE) {
        char v33 = 16;
      }
      else {
        char v33 = 8;
      }
    }
    else
    {
      char v33 = 8;
      int v34 = 3;
    }
    unsigned int v36 = (1 << v33) - v34;
    if ((v36 & 0x80000000) == 0) {
      goto LABEL_62;
    }
    goto LABEL_61;
  }
LABEL_105:
  if (v6 > 3)
  {
    char v56 = 8;
    int v57 = 3;
    goto LABEL_111;
  }
  unsigned int v58 = ((1 << v7) + 1) >> v7;
  if (v58 <= 0xFFFD)
  {
    int v57 = v58 + 2;
    if (v58 >= 0xFE) {
      char v56 = 16;
    }
    else {
      char v56 = 8;
    }
LABEL_111:
    unsigned int v59 = (1 << v56) - v57;
    if ((v59 & 0x80000000) == 0) {
      goto LABEL_113;
    }
  }
  unsigned int v59 = 0x7FFFFFFF;
LABEL_113:
  if (v6 > 3)
  {
    int v60 = 3;
LABEL_117:
    char v62 = 8;
    goto LABEL_118;
  }
  unsigned int v61 = ((1 << v7) + 1) >> v7;
  if (v61 > 0xFFFD) {
    goto LABEL_121;
  }
  int v60 = v61 + 2;
  if (v61 <= 0xFD) {
    goto LABEL_117;
  }
  char v62 = 16;
LABEL_118:
  unsigned int v63 = (1 << v62) - v60;
  if ((v63 & 0x80000000) == 0)
  {
    if (v6 > 3) {
      goto LABEL_125;
    }
    goto LABEL_122;
  }
LABEL_121:
  unsigned int v63 = 0x7FFFFFFF;
  if (v6 > 3)
  {
LABEL_125:
    uint64_t v65 = 1;
    goto LABEL_126;
  }
LABEL_122:
  unsigned int v64 = ((1 << v7) + 1) >> v7;
  uint64_t v65 = 2;
  if (v64 > 0xFFFD) {
    uint64_t v65 = 4;
  }
  if (v64 <= 0xFD) {
    goto LABEL_125;
  }
LABEL_126:
  if (!v59) {
    goto LABEL_247;
  }
  unsigned int v66 = v59 - v63;
  if (v59 <= v63) {
    goto LABEL_230;
  }
  uint64_t v67 = v65 + v6;
  char v68 = 8 * (v65 + v6);
  if (v67 > 3) {
    goto LABEL_129;
  }
  unsigned int v70 = ((v66 + ~(-1 << v68)) >> v68) + 1;
  if (HIWORD(v70))
  {
    int v69 = *(_DWORD *)&a2[v67];
  }
  else
  {
    if (v70 <= 0xFF)
    {
      if (v70 < 2) {
        goto LABEL_230;
      }
LABEL_129:
      int v69 = a2[v67];
      goto LABEL_222;
    }
    int v69 = *(unsigned __int16 *)&a2[v67];
  }
LABEL_222:
  if (v69)
  {
    int v90 = (v69 - 1) << v68;
    if (v67 > 3) {
      int v90 = 0;
    }
    if (v67)
    {
      if (v67 > 3) {
        LODWORD(v67) = 4;
      }
      switch((int)v67)
      {
        case 2:
          LODWORD(v67) = *(unsigned __int16 *)a2;
          break;
        case 3:
          LODWORD(v67) = *(unsigned __int16 *)a2 | (a2[2] << 16);
          break;
        case 4:
          LODWORD(v67) = *(_DWORD *)a2;
          break;
        default:
          LODWORD(v67) = *a2;
          break;
      }
    }
    if (v63 + (v67 | v90) != -1) {
      goto LABEL_271;
    }
LABEL_247:
    if (v6 > 3)
    {
LABEL_248:
      unsigned int v100 = a2[v6];
      goto LABEL_253;
    }
    unsigned int v101 = ((1 << v7) + 1) >> v7;
    if (v101 > 0xFFFD)
    {
      unsigned int v100 = *(_DWORD *)&a2[v6];
    }
    else
    {
      if (v101 <= 0xFD) {
        goto LABEL_248;
      }
      unsigned int v100 = *(unsigned __int16 *)&a2[v6];
    }
LABEL_253:
    unsigned int v102 = v100 - 2;
    if (v100 >= 2)
    {
      if (v6 <= 3) {
        uint64_t v103 = v6;
      }
      else {
        uint64_t v103 = 4;
      }
      switch(v103)
      {
        case 1:
          int v104 = *a2;
          goto LABEL_262;
        case 2:
          int v104 = *(unsigned __int16 *)a2;
          goto LABEL_262;
        case 3:
          int v104 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_262;
        case 4:
          int v104 = *(_DWORD *)a2;
LABEL_262:
          if (v6 < 4) {
            v104 |= v102 << v7;
          }
          unsigned int v100 = v104 + 2;
          break;
        default:
          break;
      }
    }
    if (v100 != 1)
    {
      if (!v100)
      {
        (*(void (**)(unsigned __int16 *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
        if (v6 <= 3)
        {
          unsigned int v105 = ((1 << v7) + 1) >> v7;
          if (v105 > 0xFFFD) {
            goto LABEL_281;
          }
          if (v105 > 0xFD) {
            goto LABEL_283;
          }
        }
LABEL_270:
        *((unsigned char *)a1 + v6) = 0;
        return a1;
      }
      goto LABEL_271;
    }
    (*(void (**)(unsigned __int16 *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    if (v6 > 3) {
      goto LABEL_280;
    }
    unsigned int v108 = ((1 << v7) + 1) >> v7;
    if (v108 <= 0xFFFD)
    {
      if (v108 > 0xFD)
      {
LABEL_284:
        *(unsigned __int16 *)((char *)a1 + v6) = 1;
        return a1;
      }
LABEL_280:
      *((unsigned char *)a1 + v6) = 1;
      return a1;
    }
LABEL_282:
    *(_DWORD *)((char *)a1 + v6) = 1;
    return a1;
  }
LABEL_230:
  if (!v63) {
    goto LABEL_247;
  }
  if (v6 <= 3)
  {
    unsigned int v96 = ((1 << v7) + 1) >> v7;
    if (v96 > 0xFFFD)
    {
      unsigned int v92 = *(_DWORD *)&a2[v6];
      unsigned int v93 = ~v92;
LABEL_239:
      unsigned int v99 = 0x7FFFFFFF;
      goto LABEL_240;
    }
    int v95 = v96 + 2;
    if (v96 > 0xFD)
    {
      int v98 = *(unsigned __int16 *)&a2[v6];
      unsigned int v92 = v98 | 0xFFFF0000;
      unsigned int v93 = v98 ^ 0xFFFF;
      char v94 = 16;
    }
    else
    {
      int v97 = a2[v6];
      unsigned int v92 = v97 | 0xFFFFFF00;
      unsigned int v93 = v97 ^ 0xFF;
      char v94 = 8;
    }
  }
  else
  {
    int v91 = a2[v6];
    unsigned int v92 = v91 | 0xFFFFFF00;
    unsigned int v93 = v91 ^ 0xFF;
    char v94 = 8;
    int v95 = 3;
  }
  unsigned int v99 = (1 << v94) - v95;
  if ((v99 & 0x80000000) != 0) {
    goto LABEL_239;
  }
LABEL_240:
  if (v99 <= v93 || !v92) {
    goto LABEL_247;
  }
LABEL_271:
  if (v6 > 3) {
    goto LABEL_275;
  }
  unsigned int v106 = ((1 << v7) + 1) >> v7;
  uint64_t v107 = 2;
  if (v106 > 0xFFFD) {
    uint64_t v107 = 4;
  }
  if (v106 <= 0xFD) {
LABEL_275:
  }
    uint64_t v107 = 1;
  memcpy(a1, a2, v107 + v6);
  return a1;
}

unsigned char *sub_1B082DD28(unsigned char *a1, unsigned __int16 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  if (v6 > 3)
  {
    char v7 = 8;
    int v8 = 3;
    goto LABEL_7;
  }
  unsigned int v9 = ((1 << (8 * v6)) + 1) >> (8 * v6);
  if (v9 <= 0xFFFD)
  {
    int v8 = v9 + 2;
    if (v9 >= 0xFE) {
      char v7 = 16;
    }
    else {
      char v7 = 8;
    }
LABEL_7:
    unsigned int v10 = (1 << v7) - v8;
    if ((v10 & 0x80000000) == 0) {
      goto LABEL_9;
    }
  }
  unsigned int v10 = 0x7FFFFFFF;
LABEL_9:
  if (v6 > 3)
  {
    int v11 = 3;
LABEL_13:
    char v13 = 8;
    goto LABEL_14;
  }
  unsigned int v12 = ((1 << (8 * v6)) + 1) >> (8 * v6);
  if (v12 > 0xFFFD) {
    goto LABEL_17;
  }
  int v11 = v12 + 2;
  if (v12 <= 0xFD) {
    goto LABEL_13;
  }
  char v13 = 16;
LABEL_14:
  unsigned int v14 = (1 << v13) - v11;
  if ((v14 & 0x80000000) == 0)
  {
    if (v6 > 3) {
      goto LABEL_21;
    }
LABEL_18:
    unsigned int v15 = ((1 << (8 * v6)) + 1) >> (8 * v6);
    uint64_t v16 = 2;
    if (v15 > 0xFFFD) {
      uint64_t v16 = 4;
    }
    if (v15 > 0xFD) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
LABEL_17:
  unsigned int v14 = 0x7FFFFFFF;
  if (v6 <= 3) {
    goto LABEL_18;
  }
LABEL_21:
  uint64_t v16 = 1;
LABEL_22:
  if (!v10) {
    goto LABEL_59;
  }
  unsigned int v17 = v10 - v14;
  if (v10 > v14)
  {
    uint64_t v18 = v16 + v6;
    char v19 = 8 * (v16 + v6);
    if (v18 > 3) {
      goto LABEL_25;
    }
    unsigned int v21 = ((v17 + ~(-1 << v19)) >> v19) + 1;
    if (HIWORD(v21))
    {
      int v20 = *(_DWORD *)((char *)a2 + v18);
      if (!v20) {
        goto LABEL_41;
      }
      goto LABEL_33;
    }
    if (v21 > 0xFF)
    {
      int v20 = *(unsigned __int16 *)((char *)a2 + v18);
      if (!*(unsigned __int16 *)((char *)a2 + v18)) {
        goto LABEL_41;
      }
      goto LABEL_33;
    }
    if (v21 >= 2)
    {
LABEL_25:
      int v20 = *((unsigned __int8 *)a2 + v18);
      if (!*((unsigned char *)a2 + v18)) {
        goto LABEL_41;
      }
LABEL_33:
      int v22 = (v20 - 1) << v19;
      if (v18 > 3) {
        int v22 = 0;
      }
      if (v18)
      {
        if (v18 > 3) {
          LODWORD(v18) = 4;
        }
        switch((int)v18)
        {
          case 2:
            LODWORD(v18) = *a2;
            break;
          case 3:
            LODWORD(v18) = *a2 | (*((unsigned __int8 *)a2 + 2) << 16);
            break;
          case 4:
            LODWORD(v18) = *(_DWORD *)a2;
            break;
          default:
            LODWORD(v18) = *(unsigned __int8 *)a2;
            break;
        }
      }
      if (v14 + (v18 | v22) != -1) {
        goto LABEL_85;
      }
      goto LABEL_59;
    }
  }
LABEL_41:
  if (!v14) {
    goto LABEL_59;
  }
  if (v6 <= 3)
  {
    unsigned int v28 = ((1 << (8 * v6)) + 1) >> (8 * v6);
    if (v28 > 0xFFFD)
    {
      unsigned int v24 = *(_DWORD *)((char *)a2 + v6);
      unsigned int v25 = ~v24;
      goto LABEL_52;
    }
    int v27 = v28 + 2;
    if (v28 > 0xFD)
    {
      int v30 = *(unsigned __int16 *)((char *)a2 + v6);
      unsigned int v24 = v30 | 0xFFFF0000;
      unsigned int v25 = v30 ^ 0xFFFF;
      char v26 = 16;
    }
    else
    {
      int v29 = *((unsigned __int8 *)a2 + v6);
      unsigned int v24 = v29 | 0xFFFFFF00;
      unsigned int v25 = v29 ^ 0xFF;
      char v26 = 8;
    }
  }
  else
  {
    int v23 = *((unsigned __int8 *)a2 + v6);
    unsigned int v24 = v23 | 0xFFFFFF00;
    unsigned int v25 = v23 ^ 0xFF;
    char v26 = 8;
    int v27 = 3;
  }
  unsigned int v31 = (1 << v26) - v27;
  if ((v31 & 0x80000000) == 0)
  {
    if (v31 <= v25) {
      goto LABEL_59;
    }
    goto LABEL_53;
  }
LABEL_52:
  if (v25 >= 0x7FFFFFFF) {
    goto LABEL_59;
  }
LABEL_53:
  if (v24) {
    goto LABEL_85;
  }
LABEL_59:
  if (v6 > 3)
  {
LABEL_60:
    unsigned int v32 = *((unsigned __int8 *)a2 + v6);
    goto LABEL_65;
  }
  unsigned int v33 = ((1 << (8 * v6)) + 1) >> (8 * v6);
  if (v33 > 0xFFFD)
  {
    unsigned int v32 = *(_DWORD *)((char *)a2 + v6);
  }
  else
  {
    if (v33 <= 0xFD) {
      goto LABEL_60;
    }
    unsigned int v32 = *(unsigned __int16 *)((char *)a2 + v6);
  }
LABEL_65:
  unsigned int v34 = v32 - 2;
  if (v32 >= 2)
  {
    if (v6 <= 3) {
      uint64_t v35 = v6;
    }
    else {
      uint64_t v35 = 4;
    }
    switch(v35)
    {
      case 1:
        int v36 = *(unsigned __int8 *)a2;
        if (v6 < 4) {
          goto LABEL_77;
        }
        goto LABEL_78;
      case 2:
        int v36 = *a2;
        if (v6 >= 4) {
          goto LABEL_78;
        }
        goto LABEL_77;
      case 3:
        int v36 = *a2 | (*((unsigned __int8 *)a2 + 2) << 16);
        if (v6 >= 4) {
          goto LABEL_78;
        }
        goto LABEL_77;
      case 4:
        int v36 = *(_DWORD *)a2;
        if (v6 < 4) {
LABEL_77:
        }
          v36 |= v34 << (8 * v6);
LABEL_78:
        unsigned int v32 = v36 + 2;
        break;
      default:
        break;
    }
  }
  if (v32 == 1)
  {
    (*(void (**)(unsigned char *, unsigned __int16 *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
    if (v6 <= 3)
    {
      unsigned int v40 = ((1 << (8 * v6)) + 1) >> (8 * v6);
      if (v40 > 0xFFFD)
      {
        *(_DWORD *)&a1[v6] = 1;
        return a1;
      }
      if (v40 > 0xFD)
      {
        *(_WORD *)&a1[v6] = 1;
        return a1;
      }
    }
    a1[v6] = 1;
    return a1;
  }
  if (v32)
  {
LABEL_85:
    if (v6 > 3) {
      goto LABEL_89;
    }
    unsigned int v38 = ((1 << (8 * v6)) + 1) >> (8 * v6);
    uint64_t v39 = 2;
    if (v38 > 0xFFFD) {
      uint64_t v39 = 4;
    }
    if (v38 <= 0xFD) {
LABEL_89:
    }
      uint64_t v39 = 1;
    memcpy(a1, a2, v39 + v6);
    return a1;
  }
  (*(void (**)(unsigned char *, unsigned __int16 *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
  if (v6 <= 3)
  {
    unsigned int v37 = ((1 << (8 * v6)) + 1) >> (8 * v6);
    if (v37 > 0xFFFD)
    {
      *(_DWORD *)&a1[v6] = 0;
      return a1;
    }
    if (v37 > 0xFD)
    {
      *(_WORD *)&a1[v6] = 0;
      return a1;
    }
  }
  a1[v6] = 0;
  return a1;
}

unsigned __int16 *sub_1B082E290(unsigned __int16 *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  char v7 = 8 * v6;
  if (v6 > 3)
  {
    char v8 = 8;
    int v9 = 3;
    goto LABEL_7;
  }
  unsigned int v10 = ((1 << v7) + 1) >> v7;
  if (v10 <= 0xFFFD)
  {
    int v9 = v10 + 2;
    if (v10 >= 0xFE) {
      char v8 = 16;
    }
    else {
      char v8 = 8;
    }
LABEL_7:
    unsigned int v11 = (1 << v8) - v9;
    if ((v11 & 0x80000000) == 0) {
      goto LABEL_9;
    }
  }
  unsigned int v11 = 0x7FFFFFFF;
LABEL_9:
  if (v6 > 3)
  {
    int v12 = 3;
LABEL_13:
    char v14 = 8;
    goto LABEL_14;
  }
  unsigned int v13 = ((1 << v7) + 1) >> v7;
  if (v13 > 0xFFFD) {
    goto LABEL_17;
  }
  int v12 = v13 + 2;
  if (v13 <= 0xFD) {
    goto LABEL_13;
  }
  char v14 = 16;
LABEL_14:
  unsigned int v15 = (1 << v14) - v12;
  if ((v15 & 0x80000000) == 0)
  {
    if (v6 > 3) {
      goto LABEL_21;
    }
LABEL_18:
    unsigned int v16 = ((1 << v7) + 1) >> v7;
    uint64_t v17 = 2;
    if (v16 > 0xFFFD) {
      uint64_t v17 = 4;
    }
    if (v16 > 0xFD) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
LABEL_17:
  unsigned int v15 = 0x7FFFFFFF;
  if (v6 <= 3) {
    goto LABEL_18;
  }
LABEL_21:
  uint64_t v17 = 1;
LABEL_22:
  if (!v11) {
    goto LABEL_54;
  }
  unsigned int v18 = v11 - v15;
  if (v11 <= v15) {
    goto LABEL_41;
  }
  uint64_t v19 = v17 + v6;
  char v20 = 8 * (v17 + v6);
  if (v19 <= 3)
  {
    unsigned int v22 = ((v18 + ~(-1 << v20)) >> v20) + 1;
    if (HIWORD(v22))
    {
      int v21 = *(_DWORD *)((char *)a1 + v19);
      if (!v21) {
        goto LABEL_41;
      }
      goto LABEL_33;
    }
    if (v22 > 0xFF)
    {
      int v21 = *(unsigned __int16 *)((char *)a1 + v19);
      if (!*(unsigned __int16 *)((char *)a1 + v19)) {
        goto LABEL_41;
      }
      goto LABEL_33;
    }
    if (v22 < 2)
    {
LABEL_41:
      if (!v15) {
        goto LABEL_54;
      }
      if (v6 <= 3)
      {
        unsigned int v29 = ((1 << v7) + 1) >> v7;
        if (v29 > 0xFFFD)
        {
          unsigned int v25 = *(_DWORD *)((char *)a1 + v6);
          unsigned int v26 = ~v25;
          goto LABEL_52;
        }
        int v28 = v29 + 2;
        if (v29 > 0xFD)
        {
          int v31 = *(unsigned __int16 *)((char *)a1 + v6);
          unsigned int v25 = v31 | 0xFFFF0000;
          unsigned int v26 = v31 ^ 0xFFFF;
          char v27 = 16;
        }
        else
        {
          int v30 = *((unsigned __int8 *)a1 + v6);
          unsigned int v25 = v30 | 0xFFFFFF00;
          unsigned int v26 = v30 ^ 0xFF;
          char v27 = 8;
        }
      }
      else
      {
        int v24 = *((unsigned __int8 *)a1 + v6);
        unsigned int v25 = v24 | 0xFFFFFF00;
        unsigned int v26 = v24 ^ 0xFF;
        char v27 = 8;
        int v28 = 3;
      }
      unsigned int v32 = (1 << v27) - v28;
      if ((v32 & 0x80000000) == 0)
      {
        if (v32 <= v26) {
          goto LABEL_54;
        }
        goto LABEL_53;
      }
LABEL_52:
      if (v26 >= 0x7FFFFFFF) {
        goto LABEL_54;
      }
LABEL_53:
      if (!v25) {
        goto LABEL_54;
      }
      goto LABEL_105;
    }
  }
  int v21 = *((unsigned __int8 *)a1 + v19);
  if (!*((unsigned char *)a1 + v19)) {
    goto LABEL_41;
  }
LABEL_33:
  int v23 = (v21 - 1) << v20;
  if (v19 > 3) {
    int v23 = 0;
  }
  if (v19)
  {
    if (v19 > 3) {
      LODWORD(v19) = 4;
    }
    switch((int)v19)
    {
      case 2:
        LODWORD(v19) = *a1;
        break;
      case 3:
        LODWORD(v19) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v19) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v19) = *(unsigned __int8 *)a1;
        break;
    }
  }
  if (v15 + (v19 | v23) == -1)
  {
LABEL_54:
    if (v6 <= 3)
    {
      unsigned int v35 = ((1 << v7) + 1) >> v7;
      if (v35 > 0xFFFD)
      {
LABEL_61:
        unsigned int v36 = 0x7FFFFFFF;
LABEL_62:
        if (v6 <= 3)
        {
          unsigned int v38 = ((1 << v7) + 1) >> v7;
          if (v38 > 0xFFFD) {
            goto LABEL_70;
          }
          int v37 = v38 + 2;
          if (v38 > 0xFD)
          {
            char v39 = 16;
LABEL_67:
            unsigned int v40 = (1 << v39) - v37;
            if ((v40 & 0x80000000) == 0)
            {
              if (v6 > 3) {
                goto LABEL_74;
              }
              goto LABEL_71;
            }
LABEL_70:
            unsigned int v40 = 0x7FFFFFFF;
            if (v6 > 3)
            {
LABEL_74:
              uint64_t v42 = 1;
LABEL_75:
              if (!v36) {
                goto LABEL_140;
              }
              unsigned int v43 = v36 - v40;
              if (v36 <= v40) {
                goto LABEL_94;
              }
              uint64_t v44 = v42 + v6;
              char v45 = 8 * (v42 + v6);
              if (v44 <= 3)
              {
                unsigned int v47 = ((v43 + ~(-1 << v45)) >> v45) + 1;
                if (HIWORD(v47))
                {
                  int v46 = *(_DWORD *)&a2[v44];
                  if (!v46) {
                    goto LABEL_94;
                  }
                  goto LABEL_86;
                }
                if (v47 > 0xFF)
                {
                  int v46 = *(unsigned __int16 *)&a2[v44];
                  if (!*(_WORD *)&a2[v44]) {
                    goto LABEL_94;
                  }
                  goto LABEL_86;
                }
                if (v47 < 2)
                {
LABEL_94:
                  if (!v40) {
                    goto LABEL_140;
                  }
                  if (v6 <= 3)
                  {
                    unsigned int v54 = ((1 << v7) + 1) >> v7;
                    if (v54 > 0xFFFD)
                    {
                      unsigned int v50 = *(_DWORD *)&a2[v6];
                      unsigned int v51 = ~v50;
LABEL_138:
                      if (v51 < 0x7FFFFFFF) {
                        goto LABEL_139;
                      }
LABEL_140:
                      if (a1 == (unsigned __int16 *)a2) {
                        return a1;
                      }
                      if (v6 > 3) {
                        goto LABEL_144;
                      }
                      unsigned int v73 = ((1 << v7) + 1) >> v7;
                      if (v73 > 0xFFFD)
                      {
                        unsigned int v74 = *(_DWORD *)((char *)a1 + v6);
                        unsigned int v75 = v74 - 2;
                        if (v74 < 2) {
                          goto LABEL_157;
                        }
                        goto LABEL_149;
                      }
                      if (v73 > 0xFD)
                      {
                        unsigned int v74 = *(unsigned __int16 *)((char *)a1 + v6);
                        unsigned int v75 = v74 - 2;
                        if (v74 < 2)
                        {
LABEL_157:
                          if (v74 <= 1) {
LABEL_158:
                          }
                            (*(void (**)(unsigned __int16 *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
                          if (v6 > 3) {
                            goto LABEL_162;
                          }
LABEL_159:
                          unsigned int v78 = ((1 << v7) + 1) >> v7;
                          if (v78 > 0xFFFD)
                          {
                            unsigned int v79 = *(_DWORD *)&a2[v6];
                            unsigned int v80 = v79 - 2;
                            if (v79 < 2) {
                              goto LABEL_185;
                            }
                            goto LABEL_167;
                          }
                          if (v78 > 0xFD)
                          {
                            unsigned int v79 = *(unsigned __int16 *)&a2[v6];
                            unsigned int v80 = v79 - 2;
                            if (v79 < 2) {
                              goto LABEL_185;
                            }
                          }
                          else
                          {
LABEL_162:
                            unsigned int v79 = a2[v6];
                            unsigned int v80 = v79 - 2;
                            if (v79 < 2) {
                              goto LABEL_185;
                            }
                          }
LABEL_167:
                          if (v6 <= 3) {
                            uint64_t v81 = v6;
                          }
                          else {
                            uint64_t v81 = 4;
                          }
                          switch(v81)
                          {
                            case 1:
                              int v82 = *a2;
                              if (v6 < 4) {
                                goto LABEL_183;
                              }
                              goto LABEL_184;
                            case 2:
                              int v82 = *(unsigned __int16 *)a2;
                              if (v6 >= 4) {
                                goto LABEL_184;
                              }
                              goto LABEL_183;
                            case 3:
                              int v82 = *(unsigned __int16 *)a2 | (a2[2] << 16);
                              if (v6 >= 4) {
                                goto LABEL_184;
                              }
                              goto LABEL_183;
                            case 4:
                              int v82 = *(_DWORD *)a2;
                              if (v6 < 4) {
LABEL_183:
                              }
                                v82 |= v80 << v7;
LABEL_184:
                              unsigned int v79 = v82 + 2;
                              break;
                            default:
                              break;
                          }
LABEL_185:
                          if (v79 != 1)
                          {
                            if (!v79)
                            {
                              (*(void (**)(unsigned __int16 *, unsigned __int8 *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
                              if (v6 <= 3)
                              {
                                unsigned int v83 = ((1 << v7) + 1) >> v7;
                                if (v83 <= 0xFFFD)
                                {
                                  if (v83 <= 0xFD) {
                                    goto LABEL_270;
                                  }
LABEL_283:
                                  *(unsigned __int16 *)((char *)a1 + v6) = 0;
                                  return a1;
                                }
LABEL_281:
                                *(_DWORD *)((char *)a1 + v6) = 0;
                                return a1;
                              }
                              goto LABEL_270;
                            }
                            goto LABEL_271;
                          }
                          (*(void (**)(unsigned __int16 *, unsigned __int8 *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
                          if (v6 > 3) {
                            goto LABEL_280;
                          }
                          unsigned int v84 = ((1 << v7) + 1) >> v7;
                          if (v84 <= 0xFFFD)
                          {
                            if (v84 > 0xFD) {
                              goto LABEL_284;
                            }
                            goto LABEL_280;
                          }
                          goto LABEL_282;
                        }
                      }
                      else
                      {
LABEL_144:
                        unsigned int v74 = *((unsigned __int8 *)a1 + v6);
                        unsigned int v75 = v74 - 2;
                        if (v74 < 2) {
                          goto LABEL_157;
                        }
                      }
LABEL_149:
                      if (v6 <= 3) {
                        uint64_t v76 = v6;
                      }
                      else {
                        uint64_t v76 = 4;
                      }
                      switch(v76)
                      {
                        case 1:
                          int v77 = *(unsigned __int8 *)a1;
                          if (v6 >= 4) {
                            goto LABEL_176;
                          }
                          goto LABEL_156;
                        case 2:
                          int v77 = *a1;
                          if (v6 < 4) {
                            goto LABEL_156;
                          }
                          goto LABEL_176;
                        case 3:
                          int v77 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
                          if (v6 < 4) {
                            goto LABEL_156;
                          }
                          goto LABEL_176;
                        case 4:
                          int v77 = *(_DWORD *)a1;
                          if (v6 < 4)
                          {
LABEL_156:
                            unsigned int v74 = (v77 | (v75 << v7)) + 2;
                            goto LABEL_157;
                          }
LABEL_176:
                          if ((v77 + 2) > 1) {
                            goto LABEL_159;
                          }
                          goto LABEL_158;
                        default:
                          goto LABEL_157;
                      }
                    }
                    int v53 = v54 + 2;
                    if (v54 > 0xFD)
                    {
                      int v71 = *(unsigned __int16 *)&a2[v6];
                      unsigned int v50 = v71 | 0xFFFF0000;
                      unsigned int v51 = v71 ^ 0xFFFF;
                      char v52 = 16;
                    }
                    else
                    {
                      int v55 = a2[v6];
                      unsigned int v50 = v55 | 0xFFFFFF00;
                      unsigned int v51 = v55 ^ 0xFF;
                      char v52 = 8;
                    }
                  }
                  else
                  {
                    int v49 = a2[v6];
                    unsigned int v50 = v49 | 0xFFFFFF00;
                    unsigned int v51 = v49 ^ 0xFF;
                    char v52 = 8;
                    int v53 = 3;
                  }
                  unsigned int v72 = (1 << v52) - v53;
                  if ((v72 & 0x80000000) == 0)
                  {
                    if (v72 <= v51) {
                      goto LABEL_140;
                    }
LABEL_139:
                    if (!v50) {
                      goto LABEL_140;
                    }
                    goto LABEL_200;
                  }
                  goto LABEL_138;
                }
              }
              int v46 = a2[v44];
              if (!a2[v44]) {
                goto LABEL_94;
              }
LABEL_86:
              int v48 = (v46 - 1) << v45;
              if (v44 > 3) {
                int v48 = 0;
              }
              if (v44)
              {
                if (v44 > 3) {
                  LODWORD(v44) = 4;
                }
                switch((int)v44)
                {
                  case 2:
                    LODWORD(v44) = *(unsigned __int16 *)a2;
                    break;
                  case 3:
                    LODWORD(v44) = *(unsigned __int16 *)a2 | (a2[2] << 16);
                    break;
                  case 4:
                    LODWORD(v44) = *(_DWORD *)a2;
                    break;
                  default:
                    LODWORD(v44) = *a2;
                    break;
                }
              }
              if (v40 + (v44 | v48) == -1) {
                goto LABEL_140;
              }
LABEL_200:
              if (v6 > 3) {
                goto LABEL_201;
              }
              unsigned int v86 = ((1 << v7) + 1) >> v7;
              if (v86 > 0xFFFD)
              {
                unsigned int v85 = *(_DWORD *)((char *)a1 + v6);
                goto LABEL_206;
              }
              if (v86 <= 0xFD) {
LABEL_201:
              }
                unsigned int v85 = *((unsigned __int8 *)a1 + v6);
              else {
                unsigned int v85 = *(unsigned __int16 *)((char *)a1 + v6);
              }
LABEL_206:
              unsigned int v87 = v85 - 2;
              if (v85 >= 2)
              {
                if (v6 <= 3) {
                  uint64_t v88 = v6;
                }
                else {
                  uint64_t v88 = 4;
                }
                switch(v88)
                {
                  case 1:
                    int v89 = *(unsigned __int8 *)a1;
                    goto LABEL_215;
                  case 2:
                    int v89 = *a1;
                    goto LABEL_215;
                  case 3:
                    int v89 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
                    goto LABEL_215;
                  case 4:
                    int v89 = *(_DWORD *)a1;
LABEL_215:
                    if (v6 < 4) {
                      unsigned int v85 = (v89 | (v87 << v7)) + 2;
                    }
                    else {
                      unsigned int v85 = v89 + 2;
                    }
                    break;
                  default:
                    break;
                }
              }
              if (v85 <= 1) {
                (*(void (**)(unsigned __int16 *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
              }
              goto LABEL_271;
            }
LABEL_71:
            unsigned int v41 = ((1 << v7) + 1) >> v7;
            uint64_t v42 = 2;
            if (v41 > 0xFFFD) {
              uint64_t v42 = 4;
            }
            if (v41 > 0xFD) {
              goto LABEL_75;
            }
            goto LABEL_74;
          }
        }
        else
        {
          int v37 = 3;
        }
        char v39 = 8;
        goto LABEL_67;
      }
      int v34 = v35 + 2;
      if (v35 >= 0xFE) {
        char v33 = 16;
      }
      else {
        char v33 = 8;
      }
    }
    else
    {
      char v33 = 8;
      int v34 = 3;
    }
    unsigned int v36 = (1 << v33) - v34;
    if ((v36 & 0x80000000) == 0) {
      goto LABEL_62;
    }
    goto LABEL_61;
  }
LABEL_105:
  if (v6 > 3)
  {
    char v56 = 8;
    int v57 = 3;
    goto LABEL_111;
  }
  unsigned int v58 = ((1 << v7) + 1) >> v7;
  if (v58 <= 0xFFFD)
  {
    int v57 = v58 + 2;
    if (v58 >= 0xFE) {
      char v56 = 16;
    }
    else {
      char v56 = 8;
    }
LABEL_111:
    unsigned int v59 = (1 << v56) - v57;
    if ((v59 & 0x80000000) == 0) {
      goto LABEL_113;
    }
  }
  unsigned int v59 = 0x7FFFFFFF;
LABEL_113:
  if (v6 > 3)
  {
    int v60 = 3;
LABEL_117:
    char v62 = 8;
    goto LABEL_118;
  }
  unsigned int v61 = ((1 << v7) + 1) >> v7;
  if (v61 > 0xFFFD) {
    goto LABEL_121;
  }
  int v60 = v61 + 2;
  if (v61 <= 0xFD) {
    goto LABEL_117;
  }
  char v62 = 16;
LABEL_118:
  unsigned int v63 = (1 << v62) - v60;
  if ((v63 & 0x80000000) == 0)
  {
    if (v6 > 3) {
      goto LABEL_125;
    }
    goto LABEL_122;
  }
LABEL_121:
  unsigned int v63 = 0x7FFFFFFF;
  if (v6 > 3)
  {
LABEL_125:
    uint64_t v65 = 1;
    goto LABEL_126;
  }
LABEL_122:
  unsigned int v64 = ((1 << v7) + 1) >> v7;
  uint64_t v65 = 2;
  if (v64 > 0xFFFD) {
    uint64_t v65 = 4;
  }
  if (v64 <= 0xFD) {
    goto LABEL_125;
  }
LABEL_126:
  if (!v59) {
    goto LABEL_247;
  }
  unsigned int v66 = v59 - v63;
  if (v59 <= v63) {
    goto LABEL_230;
  }
  uint64_t v67 = v65 + v6;
  char v68 = 8 * (v65 + v6);
  if (v67 > 3) {
    goto LABEL_129;
  }
  unsigned int v70 = ((v66 + ~(-1 << v68)) >> v68) + 1;
  if (HIWORD(v70))
  {
    int v69 = *(_DWORD *)&a2[v67];
  }
  else
  {
    if (v70 <= 0xFF)
    {
      if (v70 < 2) {
        goto LABEL_230;
      }
LABEL_129:
      int v69 = a2[v67];
      goto LABEL_222;
    }
    int v69 = *(unsigned __int16 *)&a2[v67];
  }
LABEL_222:
  if (v69)
  {
    int v90 = (v69 - 1) << v68;
    if (v67 > 3) {
      int v90 = 0;
    }
    if (v67)
    {
      if (v67 > 3) {
        LODWORD(v67) = 4;
      }
      switch((int)v67)
      {
        case 2:
          LODWORD(v67) = *(unsigned __int16 *)a2;
          break;
        case 3:
          LODWORD(v67) = *(unsigned __int16 *)a2 | (a2[2] << 16);
          break;
        case 4:
          LODWORD(v67) = *(_DWORD *)a2;
          break;
        default:
          LODWORD(v67) = *a2;
          break;
      }
    }
    if (v63 + (v67 | v90) != -1) {
      goto LABEL_271;
    }
LABEL_247:
    if (v6 > 3)
    {
LABEL_248:
      unsigned int v100 = a2[v6];
      goto LABEL_253;
    }
    unsigned int v101 = ((1 << v7) + 1) >> v7;
    if (v101 > 0xFFFD)
    {
      unsigned int v100 = *(_DWORD *)&a2[v6];
    }
    else
    {
      if (v101 <= 0xFD) {
        goto LABEL_248;
      }
      unsigned int v100 = *(unsigned __int16 *)&a2[v6];
    }
LABEL_253:
    unsigned int v102 = v100 - 2;
    if (v100 >= 2)
    {
      if (v6 <= 3) {
        uint64_t v103 = v6;
      }
      else {
        uint64_t v103 = 4;
      }
      switch(v103)
      {
        case 1:
          int v104 = *a2;
          goto LABEL_262;
        case 2:
          int v104 = *(unsigned __int16 *)a2;
          goto LABEL_262;
        case 3:
          int v104 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_262;
        case 4:
          int v104 = *(_DWORD *)a2;
LABEL_262:
          if (v6 < 4) {
            v104 |= v102 << v7;
          }
          unsigned int v100 = v104 + 2;
          break;
        default:
          break;
      }
    }
    if (v100 != 1)
    {
      if (!v100)
      {
        (*(void (**)(unsigned __int16 *, unsigned __int8 *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
        if (v6 <= 3)
        {
          unsigned int v105 = ((1 << v7) + 1) >> v7;
          if (v105 > 0xFFFD) {
            goto LABEL_281;
          }
          if (v105 > 0xFD) {
            goto LABEL_283;
          }
        }
LABEL_270:
        *((unsigned char *)a1 + v6) = 0;
        return a1;
      }
      goto LABEL_271;
    }
    (*(void (**)(unsigned __int16 *, unsigned __int8 *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
    if (v6 > 3) {
      goto LABEL_280;
    }
    unsigned int v108 = ((1 << v7) + 1) >> v7;
    if (v108 <= 0xFFFD)
    {
      if (v108 > 0xFD)
      {
LABEL_284:
        *(unsigned __int16 *)((char *)a1 + v6) = 1;
        return a1;
      }
LABEL_280:
      *((unsigned char *)a1 + v6) = 1;
      return a1;
    }
LABEL_282:
    *(_DWORD *)((char *)a1 + v6) = 1;
    return a1;
  }
LABEL_230:
  if (!v63) {
    goto LABEL_247;
  }
  if (v6 <= 3)
  {
    unsigned int v96 = ((1 << v7) + 1) >> v7;
    if (v96 > 0xFFFD)
    {
      unsigned int v92 = *(_DWORD *)&a2[v6];
      unsigned int v93 = ~v92;
LABEL_239:
      unsigned int v99 = 0x7FFFFFFF;
      goto LABEL_240;
    }
    int v95 = v96 + 2;
    if (v96 > 0xFD)
    {
      int v98 = *(unsigned __int16 *)&a2[v6];
      unsigned int v92 = v98 | 0xFFFF0000;
      unsigned int v93 = v98 ^ 0xFFFF;
      char v94 = 16;
    }
    else
    {
      int v97 = a2[v6];
      unsigned int v92 = v97 | 0xFFFFFF00;
      unsigned int v93 = v97 ^ 0xFF;
      char v94 = 8;
    }
  }
  else
  {
    int v91 = a2[v6];
    unsigned int v92 = v91 | 0xFFFFFF00;
    unsigned int v93 = v91 ^ 0xFF;
    char v94 = 8;
    int v95 = 3;
  }
  unsigned int v99 = (1 << v94) - v95;
  if ((v99 & 0x80000000) != 0) {
    goto LABEL_239;
  }
LABEL_240:
  if (v99 <= v93 || !v92) {
    goto LABEL_247;
  }
LABEL_271:
  if (v6 > 3) {
    goto LABEL_275;
  }
  unsigned int v106 = ((1 << v7) + 1) >> v7;
  uint64_t v107 = 2;
  if (v106 > 0xFFFD) {
    uint64_t v107 = 4;
  }
  if (v106 <= 0xFD) {
LABEL_275:
  }
    uint64_t v107 = 1;
  memcpy(a1, a2, v107 + v6);
  return a1;
}

uint64_t sub_1B082F0CC(unsigned __int16 *a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v4 > 3)
  {
    int v5 = 3;
LABEL_5:
    char v7 = 8;
    goto LABEL_6;
  }
  unsigned int v6 = ((1 << (8 * v4)) + 1) >> (8 * v4);
  if (v6 > 0xFFFD) {
    goto LABEL_11;
  }
  int v5 = v6 + 2;
  if (v6 <= 0xFD) {
    goto LABEL_5;
  }
  char v7 = 16;
LABEL_6:
  int v8 = (1 << v7) - v5;
  unsigned int v9 = v8 - 1;
  if (!v8) {
    unsigned int v9 = 0;
  }
  if ((v8 & 0x80000000) == 0)
  {
    if (v4 > 3) {
      goto LABEL_15;
    }
LABEL_12:
    unsigned int v10 = ((1 << (8 * v4)) + 1) >> (8 * v4);
    uint64_t v11 = 2;
    if (v10 > 0xFFFD) {
      uint64_t v11 = 4;
    }
    if (v10 > 0xFD) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
LABEL_11:
  unsigned int v9 = 2147483646;
  if (v4 <= 3) {
    goto LABEL_12;
  }
LABEL_15:
  uint64_t v11 = 1;
LABEL_16:
  if (!a2) {
    return 0;
  }
  if (a2 > v9)
  {
    uint64_t v12 = v11 + v4;
    char v13 = 8 * v12;
    if (v12 > 3) {
      goto LABEL_19;
    }
    unsigned int v15 = ((a2 - v9 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      int v14 = *(_DWORD *)((char *)a1 + v12);
      if (!v14) {
        goto LABEL_35;
      }
      goto LABEL_27;
    }
    if (v15 > 0xFF)
    {
      int v14 = *(unsigned __int16 *)((char *)a1 + v12);
      if (!*(unsigned __int16 *)((char *)a1 + v12)) {
        goto LABEL_35;
      }
      goto LABEL_27;
    }
    if (v15 >= 2)
    {
LABEL_19:
      int v14 = *((unsigned __int8 *)a1 + v12);
      if (!*((unsigned char *)a1 + v12)) {
        goto LABEL_35;
      }
LABEL_27:
      int v16 = (v14 - 1) << v13;
      if (v12 > 3) {
        int v16 = 0;
      }
      if (v12)
      {
        if (v12 > 3) {
          LODWORD(v12) = 4;
        }
        switch((int)v12)
        {
          case 2:
            LODWORD(v12) = *a1;
            break;
          case 3:
            LODWORD(v12) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
            break;
          case 4:
            LODWORD(v12) = *(_DWORD *)a1;
            break;
          default:
            LODWORD(v12) = *(unsigned __int8 *)a1;
            break;
        }
      }
      return v9 + (v12 | v16) + 1;
    }
  }
LABEL_35:
  if (!v9) {
    return 0;
  }
  if (v4 > 3)
  {
    int v17 = 3;
LABEL_38:
    char v18 = 8;
    goto LABEL_39;
  }
  unsigned int v23 = ((1 << (8 * v4)) + 1) >> (8 * v4);
  if (v23 > 0xFFFD)
  {
LABEL_49:
    unsigned int v19 = 0x7FFFFFFF;
    if (v4 > 3) {
      goto LABEL_41;
    }
    goto LABEL_50;
  }
  int v17 = v23 + 2;
  if (v23 <= 0xFD) {
    goto LABEL_38;
  }
  char v18 = 16;
LABEL_39:
  unsigned int v19 = (1 << v18) - v17;
  if ((v19 & 0x80000000) != 0) {
    goto LABEL_49;
  }
  if (v4 > 3)
  {
LABEL_41:
    int v20 = 3;
LABEL_42:
    char v21 = 8;
    goto LABEL_43;
  }
LABEL_50:
  unsigned int v24 = ((1 << (8 * v4)) + 1) >> (8 * v4);
  if (v24 > 0xFFFD) {
    goto LABEL_53;
  }
  int v20 = v24 + 2;
  if (v24 <= 0xFD) {
    goto LABEL_42;
  }
  char v21 = 16;
LABEL_43:
  unsigned int v22 = (1 << v21) - v20;
  if ((v22 & 0x80000000) == 0)
  {
    if (v4 > 3) {
      goto LABEL_57;
    }
    goto LABEL_54;
  }
LABEL_53:
  unsigned int v22 = 0x7FFFFFFF;
  if (v4 > 3)
  {
LABEL_57:
    uint64_t v26 = 1;
    goto LABEL_58;
  }
LABEL_54:
  unsigned int v25 = ((1 << (8 * v4)) + 1) >> (8 * v4);
  uint64_t v26 = 2;
  if (v25 > 0xFFFD) {
    uint64_t v26 = 4;
  }
  if (v25 <= 0xFD) {
    goto LABEL_57;
  }
LABEL_58:
  if (!v19) {
    return 0;
  }
  unsigned int v27 = v19 - v22;
  if (v19 <= v22) {
    goto LABEL_79;
  }
  uint64_t v28 = v26 + v4;
  char v29 = 8 * (v26 + v4);
  if (v28 > 3) {
    goto LABEL_61;
  }
  unsigned int v31 = ((v27 + ~(-1 << v29)) >> v29) + 1;
  if (HIWORD(v31))
  {
    int v30 = *(_DWORD *)((char *)a1 + v28);
  }
  else
  {
    if (v31 <= 0xFF)
    {
      if (v31 < 2) {
        goto LABEL_79;
      }
LABEL_61:
      int v30 = *((unsigned __int8 *)a1 + v28);
      goto LABEL_72;
    }
    int v30 = *(unsigned __int16 *)((char *)a1 + v28);
  }
LABEL_72:
  if (v30)
  {
    int v33 = (v30 - 1) << v29;
    if (v28 > 3) {
      int v33 = 0;
    }
    if (v28)
    {
      if (v28 > 3) {
        LODWORD(v28) = 4;
      }
      switch((int)v28)
      {
        case 2:
          goto LABEL_125;
        case 3:
          goto LABEL_126;
        case 4:
          goto LABEL_127;
        default:
          goto LABEL_118;
      }
    }
    goto LABEL_128;
  }
LABEL_79:
  if (!v22) {
    return 0;
  }
  if (v4 > 3)
  {
    int v34 = 3;
    goto LABEL_84;
  }
  unsigned int v35 = ((1 << (8 * v4)) + 1) >> (8 * v4);
  if (v35 <= 0xFFFD)
  {
    int v34 = v35 + 2;
    if (v35 > 0xFD)
    {
      char v36 = 16;
LABEL_85:
      unsigned int v37 = (1 << v36) - v34;
      if ((v37 & 0x80000000) == 0) {
        goto LABEL_87;
      }
      goto LABEL_86;
    }
LABEL_84:
    char v36 = 8;
    goto LABEL_85;
  }
LABEL_86:
  unsigned int v37 = 0x7FFFFFFF;
LABEL_87:
  if (v4 > 3)
  {
    int v38 = 3;
LABEL_91:
    char v40 = 8;
    goto LABEL_92;
  }
  unsigned int v39 = ((1 << (8 * v4)) + 1) >> (8 * v4);
  if (v39 > 0xFFFD)
  {
LABEL_93:
    unsigned int v22 = 0x7FFFFFFF;
    goto LABEL_94;
  }
  int v38 = v39 + 2;
  if (v39 <= 0xFD) {
    goto LABEL_91;
  }
  char v40 = 16;
LABEL_92:
  unsigned int v22 = (1 << v40) - v38;
  if ((v22 & 0x80000000) != 0) {
    goto LABEL_93;
  }
LABEL_94:
  if (v4 > 3) {
    goto LABEL_98;
  }
  unsigned int v41 = ((1 << (8 * v4)) + 1) >> (8 * v4);
  uint64_t v42 = 2;
  if (v41 > 0xFFFD) {
    uint64_t v42 = 4;
  }
  if (v41 <= 0xFD) {
LABEL_98:
  }
    uint64_t v42 = 1;
  if (!v37) {
    return 0;
  }
  unsigned int v43 = v37 - v22;
  if (v37 <= v22) {
    goto LABEL_119;
  }
  uint64_t v28 = v42 + v4;
  char v44 = 8 * (v42 + v4);
  if (v28 > 3) {
    goto LABEL_102;
  }
  unsigned int v46 = ((v43 + ~(-1 << v44)) >> v44) + 1;
  if (HIWORD(v46))
  {
    int v45 = *(_DWORD *)((char *)a1 + v28);
  }
  else
  {
    if (v46 <= 0xFF)
    {
      if (v46 < 2) {
        goto LABEL_119;
      }
LABEL_102:
      int v45 = *((unsigned __int8 *)a1 + v28);
      goto LABEL_111;
    }
    int v45 = *(unsigned __int16 *)((char *)a1 + v28);
  }
LABEL_111:
  if (v45)
  {
    int v33 = (v45 - 1) << v44;
    if (v28 > 3) {
      int v33 = 0;
    }
    if (v28)
    {
      if (v28 > 3) {
        LODWORD(v28) = 4;
      }
      switch((int)v28)
      {
        case 2:
LABEL_125:
          LODWORD(v28) = *a1;
          break;
        case 3:
LABEL_126:
          LODWORD(v28) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
          break;
        case 4:
LABEL_127:
          LODWORD(v28) = *(_DWORD *)a1;
          break;
        default:
LABEL_118:
          LODWORD(v28) = *(unsigned __int8 *)a1;
          break;
      }
    }
LABEL_128:
    unsigned int v54 = v22 + (v28 | v33) + 1;
    uint64_t result = v54 - 1;
    if (v54 > 1) {
      return result;
    }
    return 0;
  }
LABEL_119:
  if (!v22) {
    return 0;
  }
  if (v4 <= 3)
  {
    unsigned int v52 = ((1 << (8 * v4)) + 1) >> (8 * v4);
    if (v52 > 0xFFFD)
    {
      unsigned int v48 = *(_DWORD *)((char *)a1 + v4);
      unsigned int v49 = ~v48;
LABEL_133:
      unsigned int v56 = 0x7FFFFFFF;
      goto LABEL_134;
    }
    int v51 = v52 + 2;
    if (v52 > 0xFD)
    {
      int v55 = *(unsigned __int16 *)((char *)a1 + v4);
      unsigned int v48 = v55 | 0xFFFF0000;
      unsigned int v49 = v55 ^ 0xFFFF;
      char v50 = 16;
    }
    else
    {
      int v53 = *((unsigned __int8 *)a1 + v4);
      unsigned int v48 = v53 | 0xFFFFFF00;
      unsigned int v49 = v53 ^ 0xFF;
      char v50 = 8;
    }
  }
  else
  {
    int v47 = *((unsigned __int8 *)a1 + v4);
    unsigned int v48 = v47 | 0xFFFFFF00;
    unsigned int v49 = v47 ^ 0xFF;
    char v50 = 8;
    int v51 = 3;
  }
  unsigned int v56 = (1 << v50) - v51;
  if ((v56 & 0x80000000) != 0) {
    goto LABEL_133;
  }
LABEL_134:
  if (v56 <= v49) {
    return 0;
  }
  unsigned int v57 = -v48;
  uint64_t result = v57 - 1;
  if (v57 <= 1) {
    return 0;
  }
  return result;
}

void sub_1B082F74C(unsigned char *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  char v7 = 8 * v6;
  if (v6 > 3)
  {
    int v8 = 3;
LABEL_3:
    char v9 = 8;
    goto LABEL_4;
  }
  unsigned int v12 = ((1 << v7) + 1) >> v7;
  if (v12 > 0xFFFD) {
    goto LABEL_12;
  }
  int v8 = v12 + 2;
  if (v12 <= 0xFD) {
    goto LABEL_3;
  }
  char v9 = 16;
LABEL_4:
  int v10 = (1 << v9) - v8;
  unsigned int v11 = v10 - 1;
  if (!v10) {
    unsigned int v11 = 0;
  }
  if ((v10 & 0x80000000) == 0)
  {
    if (v6 > 3) {
      goto LABEL_16;
    }
LABEL_13:
    unsigned int v13 = ((1 << v7) + 1) >> v7;
    uint64_t v14 = 2;
    if (v13 > 0xFFFD) {
      uint64_t v14 = 4;
    }
    if (v13 > 0xFD) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
LABEL_12:
  unsigned int v11 = 2147483646;
  if (v6 <= 3) {
    goto LABEL_13;
  }
LABEL_16:
  uint64_t v14 = 1;
LABEL_17:
  size_t v15 = v14 + v6;
  if (a3 <= v11)
  {
    int v16 = 0;
  }
  else if (v15 <= 3)
  {
    unsigned int v19 = ((a3 - v11 + ~(-1 << (8 * v15))) >> (8 * v15)) + 1;
    if (HIWORD(v19))
    {
      int v16 = 4;
    }
    else if (v19 >= 0x100)
    {
      int v16 = 2;
    }
    else
    {
      int v16 = v19 > 1;
    }
  }
  else
  {
    int v16 = 1;
  }
  if (v11 < a2)
  {
    unsigned int v17 = ~v11 + a2;
    if (v15 < 4)
    {
      int v18 = (v17 >> (8 * v15)) + 1;
      if (v15)
      {
        int v20 = v17 & ~(-1 << (8 * v15));
        bzero(a1, v15);
        if (v15 == 3)
        {
          *(_WORD *)a1 = v20;
          a1[2] = BYTE2(v20);
        }
        else if (v15 == 2)
        {
          *(_WORD *)a1 = v20;
        }
        else
        {
          *a1 = v20;
        }
      }
    }
    else
    {
      bzero(a1, v15);
      *(_DWORD *)a1 = v17;
      int v18 = 1;
    }
    switch(v16)
    {
      case 1:
        goto LABEL_143;
      case 2:
        goto LABEL_144;
      case 3:
        goto LABEL_147;
      case 4:
        goto LABEL_145;
      default:
        return;
    }
  }
  switch(v16)
  {
    case 1:
      a1[v15] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_37;
    case 2:
      *(_WORD *)&a1[v15] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_37;
    case 3:
LABEL_147:
      __break(1u);
      JUMPOUT(0x1B082FEB0);
    case 4:
      *(_DWORD *)&a1[v15] = 0;
      goto LABEL_36;
    default:
LABEL_36:
      if (!a2) {
        return;
      }
LABEL_37:
      if (v6 > 3)
      {
        int v21 = 3;
LABEL_39:
        char v22 = 8;
        goto LABEL_40;
      }
      unsigned int v27 = ((1 << v7) + 1) >> v7;
      if (v27 > 0xFFFD)
      {
LABEL_50:
        unsigned int v23 = 0x7FFFFFFF;
        if (v6 > 3) {
          goto LABEL_42;
        }
        goto LABEL_51;
      }
      int v21 = v27 + 2;
      if (v27 <= 0xFD) {
        goto LABEL_39;
      }
      char v22 = 16;
LABEL_40:
      unsigned int v23 = (1 << v22) - v21;
      if ((v23 & 0x80000000) != 0) {
        goto LABEL_50;
      }
      if (v6 > 3)
      {
LABEL_42:
        int v24 = 3;
LABEL_43:
        char v25 = 8;
        goto LABEL_44;
      }
LABEL_51:
      unsigned int v28 = ((1 << v7) + 1) >> v7;
      if (v28 > 0xFFFD) {
        goto LABEL_54;
      }
      int v24 = v28 + 2;
      if (v28 <= 0xFD) {
        goto LABEL_43;
      }
      char v25 = 16;
LABEL_44:
      unsigned int v26 = (1 << v25) - v24;
      if ((v26 & 0x80000000) == 0)
      {
        if (v6 > 3) {
          goto LABEL_58;
        }
        goto LABEL_55;
      }
LABEL_54:
      unsigned int v26 = 0x7FFFFFFF;
      if (v6 > 3)
      {
LABEL_58:
        uint64_t v30 = 1;
        goto LABEL_59;
      }
LABEL_55:
      unsigned int v29 = ((1 << v7) + 1) >> v7;
      uint64_t v30 = 2;
      if (v29 > 0xFFFD) {
        uint64_t v30 = 4;
      }
      if (v29 <= 0xFD) {
        goto LABEL_58;
      }
LABEL_59:
      unsigned int v31 = a2 + 1;
      size_t v15 = v30 + v6;
      BOOL v32 = v23 >= v26;
      unsigned int v33 = v23 - v26;
      if (v33 != 0 && v32)
      {
        if (v15 <= 3)
        {
          unsigned int v36 = ((v33 + ~(-1 << (8 * v15))) >> (8 * v15)) + 1;
          if (HIWORD(v36))
          {
            int v34 = 4;
          }
          else if (v36 >= 0x100)
          {
            int v34 = 2;
          }
          else
          {
            int v34 = v36 > 1;
          }
        }
        else
        {
          int v34 = 1;
        }
      }
      else
      {
        int v34 = 0;
      }
      if (v31 > v26)
      {
        unsigned int v35 = a2 - v26;
        if (v15 < 4)
        {
          int v18 = (v35 >> (8 * v15)) + 1;
          if (v15)
          {
            int v37 = v35 & ~(-1 << (8 * v15));
            bzero(a1, v15);
            if (v15 == 3)
            {
              *(_WORD *)a1 = v37;
              a1[2] = BYTE2(v37);
            }
            else if (v15 == 2)
            {
              *(_WORD *)a1 = v37;
            }
            else
            {
              *a1 = v37;
            }
          }
        }
        else
        {
          bzero(a1, v15);
          *(_DWORD *)a1 = v35;
          int v18 = 1;
        }
        switch(v34)
        {
          case 1:
            goto LABEL_143;
          case 2:
            goto LABEL_144;
          case 3:
            goto LABEL_147;
          case 4:
            goto LABEL_145;
          default:
            return;
        }
      }
      switch(v34)
      {
        case 1:
          a1[v15] = 0;
          if (a2 == -1) {
            return;
          }
          goto LABEL_85;
        case 2:
          *(_WORD *)&a1[v15] = 0;
          goto LABEL_84;
        case 3:
          goto LABEL_147;
        case 4:
          *(_DWORD *)&a1[v15] = 0;
          if (a2 == -1) {
            return;
          }
          goto LABEL_85;
        default:
LABEL_84:
          if (a2 == -1) {
            return;
          }
LABEL_85:
          if (v6 > 3)
          {
            int v38 = 3;
LABEL_87:
            char v39 = 8;
            goto LABEL_88;
          }
          unsigned int v41 = ((1 << v7) + 1) >> v7;
          if (v41 > 0xFFFD) {
            goto LABEL_93;
          }
          int v38 = v41 + 2;
          if (v41 <= 0xFD) {
            goto LABEL_87;
          }
          char v39 = 16;
LABEL_88:
          unsigned int v40 = (1 << v39) - v38;
          if ((v40 & 0x80000000) == 0) {
            goto LABEL_94;
          }
LABEL_93:
          unsigned int v40 = 0x7FFFFFFF;
LABEL_94:
          if (v6 > 3)
          {
            int v42 = 3;
LABEL_96:
            char v43 = 8;
            goto LABEL_97;
          }
          unsigned int v45 = ((1 << v7) + 1) >> v7;
          if (v45 > 0xFFFD) {
            goto LABEL_103;
          }
          int v42 = v45 + 2;
          if (v45 <= 0xFD) {
            goto LABEL_96;
          }
          char v43 = 16;
LABEL_97:
          unsigned int v44 = (1 << v43) - v42;
          if ((v44 & 0x80000000) == 0)
          {
            if (v6 > 3) {
              goto LABEL_107;
            }
            goto LABEL_104;
          }
LABEL_103:
          unsigned int v44 = 0x7FFFFFFF;
          if (v6 > 3)
          {
LABEL_107:
            uint64_t v47 = 1;
            goto LABEL_108;
          }
LABEL_104:
          unsigned int v46 = ((1 << v7) + 1) >> v7;
          uint64_t v47 = 2;
          if (v46 > 0xFFFD) {
            uint64_t v47 = 4;
          }
          if (v46 <= 0xFD) {
            goto LABEL_107;
          }
LABEL_108:
          size_t v15 = v47 + v6;
          BOOL v32 = v40 >= v44;
          unsigned int v48 = v40 - v44;
          if (v48 != 0 && v32)
          {
            if (v15 <= 3)
            {
              unsigned int v51 = ((v48 + ~(-1 << (8 * v15))) >> (8 * v15)) + 1;
              if (HIWORD(v51))
              {
                int v49 = 4;
              }
              else if (v51 >= 0x100)
              {
                int v49 = 2;
              }
              else
              {
                int v49 = v51 > 1;
              }
            }
            else
            {
              int v49 = 1;
            }
          }
          else
          {
            int v49 = 0;
          }
          if (v31 > v44)
          {
            unsigned int v50 = a2 - v44;
            if (v15 < 4)
            {
              int v18 = (v50 >> (8 * v15)) + 1;
              if (v15)
              {
                int v52 = v50 & ~(-1 << (8 * v15));
                bzero(a1, v15);
                if (v15 == 3)
                {
                  *(_WORD *)a1 = v52;
                  a1[2] = BYTE2(v52);
                }
                else if (v15 == 2)
                {
                  *(_WORD *)a1 = v52;
                }
                else
                {
                  *a1 = v52;
                }
              }
            }
            else
            {
              bzero(a1, v15);
              *(_DWORD *)a1 = v50;
              int v18 = 1;
            }
            switch(v49)
            {
              case 1:
LABEL_143:
                a1[v15] = v18;
                return;
              case 2:
LABEL_144:
                *(_WORD *)&a1[v15] = v18;
                return;
              case 3:
                goto LABEL_147;
              case 4:
LABEL_145:
                *(_DWORD *)&a1[v15] = v18;
                return;
              default:
                return;
            }
          }
          switch(v49)
          {
            case 1:
              a1[v15] = 0;
              goto LABEL_133;
            case 2:
              *(_WORD *)&a1[v15] = 0;
              goto LABEL_133;
            case 3:
              goto LABEL_147;
            case 4:
              *(_DWORD *)&a1[v15] = 0;
              goto LABEL_133;
            default:
LABEL_133:
              int v53 = ~a2;
              if (v6 > 3) {
                goto LABEL_134;
              }
              unsigned int v54 = ((1 << v7) + 1) >> v7;
              if (v54 > 0xFFFD)
              {
                *(_DWORD *)&a1[v6] = v53;
              }
              else if (v54 <= 0xFD)
              {
LABEL_134:
                a1[v6] = v53;
              }
              else
              {
                *(_WORD *)&a1[v6] = v53;
              }
              break;
          }
          return;
      }
  }
}

uint64_t sub_1B082FF28(unsigned __int16 *a1)
{
  uint64_t v2 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v2 > 3)
  {
    char v3 = 8;
    int v4 = 3;
    goto LABEL_7;
  }
  unsigned int v5 = ((1 << (8 * v2)) + 1) >> (8 * v2);
  if (v5 <= 0xFFFD)
  {
    int v4 = v5 + 2;
    if (v5 >= 0xFE) {
      char v3 = 16;
    }
    else {
      char v3 = 8;
    }
LABEL_7:
    unsigned int v6 = (1 << v3) - v4;
    if ((v6 & 0x80000000) == 0) {
      goto LABEL_9;
    }
  }
  unsigned int v6 = 0x7FFFFFFF;
LABEL_9:
  if (v2 > 3)
  {
    int v7 = 3;
LABEL_13:
    char v9 = 8;
    goto LABEL_14;
  }
  unsigned int v8 = ((1 << (8 * v2)) + 1) >> (8 * v2);
  if (v8 > 0xFFFD) {
    goto LABEL_17;
  }
  int v7 = v8 + 2;
  if (v8 <= 0xFD) {
    goto LABEL_13;
  }
  char v9 = 16;
LABEL_14:
  unsigned int v10 = (1 << v9) - v7;
  if ((v10 & 0x80000000) == 0)
  {
    if (v2 > 3) {
      goto LABEL_21;
    }
LABEL_18:
    unsigned int v11 = ((1 << (8 * v2)) + 1) >> (8 * v2);
    uint64_t v12 = 2;
    if (v11 > 0xFFFD) {
      uint64_t v12 = 4;
    }
    if (v11 > 0xFD) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
LABEL_17:
  unsigned int v10 = 0x7FFFFFFF;
  if (v2 <= 3) {
    goto LABEL_18;
  }
LABEL_21:
  uint64_t v12 = 1;
LABEL_22:
  if (!v6) {
    return 0;
  }
  unsigned int v13 = v6 - v10;
  if (v6 <= v10) {
    goto LABEL_41;
  }
  uint64_t v14 = v12 + v2;
  char v15 = 8 * (v12 + v2);
  if (v14 <= 3)
  {
    unsigned int v17 = ((v13 + ~(-1 << v15)) >> v15) + 1;
    if (HIWORD(v17))
    {
      int v16 = *(_DWORD *)((char *)a1 + v14);
      if (!v16) {
        goto LABEL_41;
      }
      goto LABEL_33;
    }
    if (v17 > 0xFF)
    {
      int v16 = *(unsigned __int16 *)((char *)a1 + v14);
      if (!*(unsigned __int16 *)((char *)a1 + v14)) {
        goto LABEL_41;
      }
      goto LABEL_33;
    }
    if (v17 < 2)
    {
LABEL_41:
      if (v10)
      {
        if (v2 <= 3)
        {
          unsigned int v25 = ((1 << (8 * v2)) + 1) >> (8 * v2);
          if (v25 > 0xFFFD)
          {
            unsigned int v20 = *(_DWORD *)((char *)a1 + v2);
            unsigned int v21 = ~v20;
LABEL_51:
            unsigned int v28 = 0x7FFFFFFF;
LABEL_52:
            if (v28 > v21) {
              return -v20;
            }
            else {
              return 0;
            }
          }
          int v23 = v25 + 2;
          if (v25 > 0xFD)
          {
            int v27 = *(unsigned __int16 *)((char *)a1 + v2);
            unsigned int v20 = v27 | 0xFFFF0000;
            unsigned int v21 = v27 ^ 0xFFFF;
            char v22 = 16;
          }
          else
          {
            int v26 = *((unsigned __int8 *)a1 + v2);
            unsigned int v20 = v26 | 0xFFFFFF00;
            unsigned int v21 = v26 ^ 0xFF;
            char v22 = 8;
          }
        }
        else
        {
          int v19 = *((unsigned __int8 *)a1 + v2);
          unsigned int v20 = v19 | 0xFFFFFF00;
          unsigned int v21 = v19 ^ 0xFF;
          char v22 = 8;
          int v23 = 3;
        }
        unsigned int v28 = (1 << v22) - v23;
        if ((v28 & 0x80000000) == 0) {
          goto LABEL_52;
        }
        goto LABEL_51;
      }
      return 0;
    }
  }
  int v16 = *((unsigned __int8 *)a1 + v14);
  if (!*((unsigned char *)a1 + v14)) {
    goto LABEL_41;
  }
LABEL_33:
  int v18 = (v16 - 1) << v15;
  if (v14 > 3) {
    int v18 = 0;
  }
  if (v14)
  {
    if (v14 > 3) {
      LODWORD(v14) = 4;
    }
    switch((int)v14)
    {
      case 2:
        LODWORD(v14) = *a1;
        break;
      case 3:
        LODWORD(v14) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v14) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v14) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v10 + (v14 | v18) + 1;
}

void sub_1B0830240(unsigned char *a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  char v5 = 8 * v4;
  if (v4 > 3)
  {
    int v6 = 3;
LABEL_3:
    char v7 = 8;
    goto LABEL_4;
  }
  unsigned int v9 = ((1 << v5) + 1) >> v5;
  if (v9 > 0xFFFD) {
    goto LABEL_10;
  }
  int v6 = v9 + 2;
  if (v9 <= 0xFD) {
    goto LABEL_3;
  }
  char v7 = 16;
LABEL_4:
  unsigned int v8 = (1 << v7) - v6;
  if ((v8 & 0x80000000) == 0)
  {
    if (v4 > 3) {
      goto LABEL_14;
    }
    goto LABEL_11;
  }
LABEL_10:
  unsigned int v8 = 0x7FFFFFFF;
  if (v4 > 3)
  {
LABEL_14:
    uint64_t v11 = 1;
    goto LABEL_15;
  }
LABEL_11:
  unsigned int v10 = ((1 << v5) + 1) >> v5;
  uint64_t v11 = 2;
  if (v10 > 0xFFFD) {
    uint64_t v11 = 4;
  }
  if (v10 <= 0xFD) {
    goto LABEL_14;
  }
LABEL_15:
  size_t v12 = v11 + v4;
  if (v8 >= a2)
  {
    if (v8)
    {
      if (!a2) {
        return;
      }
    }
    else
    {
      a1[v12] = 0;
      if (!a2) {
        return;
      }
    }
    if (v4 <= 3)
    {
      unsigned int v19 = ((1 << v5) + 1) >> v5;
      if (v19 > 0xFFFD) {
        goto LABEL_36;
      }
      int v16 = v19 + 2;
      if (v19 > 0xFD)
      {
        char v17 = 16;
LABEL_31:
        unsigned int v18 = (1 << v17) - v16;
        if ((v18 & 0x80000000) == 0)
        {
LABEL_37:
          if (v4 <= 3)
          {
            unsigned int v23 = ((1 << v5) + 1) >> v5;
            if (v23 > 0xFFFD) {
              goto LABEL_46;
            }
            int v20 = v23 + 2;
            if (v23 > 0xFD)
            {
              char v21 = 16;
LABEL_40:
              unsigned int v22 = (1 << v21) - v20;
              if ((v22 & 0x80000000) == 0)
              {
                if (v4 > 3) {
                  goto LABEL_50;
                }
LABEL_47:
                unsigned int v24 = ((1 << v5) + 1) >> v5;
                uint64_t v25 = 2;
                if (v24 > 0xFFFD) {
                  uint64_t v25 = 4;
                }
                if (v24 > 0xFD)
                {
LABEL_51:
                  size_t v12 = v25 + v4;
                  BOOL v26 = v18 >= v22;
                  unsigned int v27 = v18 - v22;
                  if (v27 != 0 && v26)
                  {
                    if (v12 <= 3)
                    {
                      unsigned int v30 = ((v27 + ~(-1 << (8 * v12))) >> (8 * v12)) + 1;
                      if (HIWORD(v30))
                      {
                        int v28 = 4;
                      }
                      else if (v30 >= 0x100)
                      {
                        int v28 = 2;
                      }
                      else
                      {
                        int v28 = v30 > 1;
                      }
                    }
                    else
                    {
                      int v28 = 1;
                    }
                  }
                  else
                  {
                    int v28 = 0;
                  }
                  if (v22 < a2)
                  {
                    unsigned int v29 = ~v22 + a2;
                    if (v12 < 4)
                    {
                      int v14 = (v29 >> (8 * v12)) + 1;
                      if (v12)
                      {
                        int v31 = v29 & ~(-1 << (8 * v12));
                        bzero(a1, v12);
                        if (v12 == 3)
                        {
                          *(_WORD *)a1 = v31;
                          a1[2] = BYTE2(v31);
                        }
                        else if (v12 == 2)
                        {
                          *(_WORD *)a1 = v31;
                        }
                        else
                        {
                          *a1 = v31;
                        }
                      }
                    }
                    else
                    {
                      bzero(a1, v12);
                      *(_DWORD *)a1 = v29;
                      int v14 = 1;
                    }
                    switch(v28)
                    {
                      case 1:
                        goto LABEL_70;
                      case 2:
                        *(_WORD *)&a1[v12] = v14;
                        return;
                      case 3:
                        goto LABEL_88;
                      case 4:
                        *(_DWORD *)&a1[v12] = v14;
                        return;
                      default:
                        return;
                    }
                  }
                  switch(v28)
                  {
                    case 1:
                      a1[v12] = 0;
                      break;
                    case 2:
                      *(_WORD *)&a1[v12] = 0;
                      break;
                    case 3:
LABEL_88:
                      __break(1u);
                      JUMPOUT(0x1B08306B4);
                    case 4:
                      *(_DWORD *)&a1[v12] = 0;
                      break;
                    default:
                      break;
                  }
                  int v32 = -a2;
                  if (v4 <= 3)
                  {
                    unsigned int v33 = ((1 << v5) + 1) >> v5;
                    if (v33 > 0xFFFD)
                    {
                      *(_DWORD *)&a1[v4] = v32;
                      return;
                    }
                    if (v33 > 0xFD)
                    {
                      *(_WORD *)&a1[v4] = v32;
                      return;
                    }
                  }
                  a1[v4] = v32;
                  return;
                }
LABEL_50:
                uint64_t v25 = 1;
                goto LABEL_51;
              }
LABEL_46:
              unsigned int v22 = 0x7FFFFFFF;
              if (v4 > 3) {
                goto LABEL_50;
              }
              goto LABEL_47;
            }
          }
          else
          {
            int v20 = 3;
          }
          char v21 = 8;
          goto LABEL_40;
        }
LABEL_36:
        unsigned int v18 = 0x7FFFFFFF;
        goto LABEL_37;
      }
    }
    else
    {
      int v16 = 3;
    }
    char v17 = 8;
    goto LABEL_31;
  }
  unsigned int v13 = ~v8 + a2;
  if (v12 < 4)
  {
    int v14 = (v13 >> (8 * v12)) + 1;
    if (v12)
    {
      int v15 = v13 & ~(-1 << (8 * v12));
      bzero(a1, v12);
      if (v12 != 3)
      {
        if (v12 == 2)
        {
          *(_WORD *)a1 = v15;
          if (!v8) {
            goto LABEL_70;
          }
        }
        else
        {
          *a1 = v15;
          if (!v8) {
            goto LABEL_70;
          }
        }
        return;
      }
      *(_WORD *)a1 = v15;
      a1[2] = BYTE2(v15);
    }
    if (!v8) {
LABEL_70:
    }
      a1[v12] = v14;
  }
  else
  {
    bzero(a1, v12);
    *(_DWORD *)a1 = v13;
    LOBYTE(v14) = 1;
    if (!v8) {
      goto LABEL_70;
    }
  }
}

uint64_t type metadata accessor for ShelvesPresenter.ReplaceSolution()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1B08306F4()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

void *sub_1B08307A0(void *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  if (*(void *)(v5 + 64) <= 8uLL) {
    uint64_t v6 = 8;
  }
  else {
    uint64_t v6 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  }
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || (unint64_t)(v6 + 1) > 0x18)
  {
    uint64_t v9 = *(void *)a2;
    *a1 = *(void *)a2;
    a1 = (void *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    unsigned int v10 = a2[v6];
    unsigned int v11 = v10 - 2;
    if (v10 >= 2)
    {
      if (v6 <= 3) {
        uint64_t v12 = v6;
      }
      else {
        uint64_t v12 = 4;
      }
      switch(v12)
      {
        case 1:
          int v13 = *a2;
          goto LABEL_19;
        case 2:
          int v13 = *(unsigned __int16 *)a2;
          goto LABEL_19;
        case 3:
          int v13 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_19;
        case 4:
          int v13 = *(_DWORD *)a2;
LABEL_19:
          int v14 = (v13 | (v11 << (8 * v6))) + 2;
          unsigned int v10 = v13 + 2;
          if (v6 < 4) {
            unsigned int v10 = v14;
          }
          break;
        default:
          break;
      }
    }
    if (v10 == 1)
    {
      int v15 = *(void **)a2;
      id v16 = v15;
      *a1 = v15;
      *((unsigned char *)a1 + v6) = 1;
    }
    else
    {
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
      *((unsigned char *)a1 + v6) = 0;
    }
  }
  return a1;
}

void sub_1B0830954(unsigned __int8 *a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  unint64_t v3 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  if (v3 <= 8) {
    unint64_t v3 = 8;
  }
  unsigned int v4 = a1[v3];
  unsigned int v5 = v4 - 2;
  if (v4 >= 2)
  {
    if (v3 <= 3) {
      uint64_t v6 = v3;
    }
    else {
      uint64_t v6 = 4;
    }
    switch(v6)
    {
      case 1:
        int v7 = *a1;
        goto LABEL_12;
      case 2:
        int v7 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v7 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v7 = *(_DWORD *)a1;
LABEL_12:
        int v8 = (v7 | (v5 << (8 * v3))) + 2;
        unsigned int v4 = v7 + 2;
        if (v3 < 4) {
          unsigned int v4 = v8;
        }
        break;
      default:
        break;
    }
  }
  if (v4 == 1)
  {
    uint64_t v9 = *(void **)a1;
  }
  else
  {
    unsigned int v10 = *(void (**)(unsigned __int8 *, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8);
    v10(a1, AssociatedTypeWitness);
  }
}

void *sub_1B0830AC4(void *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (*(void *)(*(void *)(AssociatedTypeWitness - 8) + 64) <= 8uLL) {
    uint64_t v5 = 8;
  }
  else {
    uint64_t v5 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  }
  unsigned int v6 = a2[v5];
  unsigned int v7 = v6 - 2;
  if (v6 >= 2)
  {
    if (v5 <= 3) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = 4;
    }
    switch(v8)
    {
      case 1:
        int v9 = *a2;
        goto LABEL_13;
      case 2:
        int v9 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v9 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v9 = *(_DWORD *)a2;
LABEL_13:
        int v10 = (v9 | (v7 << (8 * v5))) + 2;
        unsigned int v6 = v9 + 2;
        if (v5 < 4) {
          unsigned int v6 = v10;
        }
        break;
      default:
        break;
    }
  }
  if (v6 == 1)
  {
    unsigned int v11 = *(void **)a2;
    id v12 = v11;
    *a1 = v11;
    char v13 = 1;
  }
  else
  {
    (*(void (**)(void *, unsigned __int8 *, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16))(a1, a2, AssociatedTypeWitness);
    char v13 = 0;
  }
  *((unsigned char *)a1 + v5) = v13;
  return a1;
}

unsigned __int8 *sub_1B0830C38(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1 != a2)
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
    if (*(void *)(v5 + 64) <= 8uLL) {
      uint64_t v6 = 8;
    }
    else {
      uint64_t v6 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
    }
    unsigned int v7 = a1[v6];
    unsigned int v8 = v7 - 2;
    if (v7 >= 2)
    {
      if (v6 <= 3) {
        uint64_t v9 = v6;
      }
      else {
        uint64_t v9 = 4;
      }
      switch(v9)
      {
        case 1:
          int v10 = *a1;
          goto LABEL_14;
        case 2:
          int v10 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v10 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v10 = *(_DWORD *)a1;
LABEL_14:
          int v11 = (v10 | (v8 << (8 * v6))) + 2;
          unsigned int v7 = v10 + 2;
          if (v6 < 4) {
            unsigned int v7 = v11;
          }
          break;
        default:
          break;
      }
    }
    if (v7 == 1) {

    }
    else {
      (*(void (**)(unsigned __int8 *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
    }
    unsigned int v12 = a2[v6];
    unsigned int v13 = v12 - 2;
    if (v12 >= 2)
    {
      if (v6 <= 3) {
        uint64_t v14 = v6;
      }
      else {
        uint64_t v14 = 4;
      }
      switch(v14)
      {
        case 1:
          int v15 = *a2;
          goto LABEL_28;
        case 2:
          int v15 = *(unsigned __int16 *)a2;
          goto LABEL_28;
        case 3:
          int v15 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_28;
        case 4:
          int v15 = *(_DWORD *)a2;
LABEL_28:
          int v16 = (v15 | (v13 << (8 * v6))) + 2;
          unsigned int v12 = v15 + 2;
          if (v6 < 4) {
            unsigned int v12 = v16;
          }
          break;
        default:
          break;
      }
    }
    if (v12 == 1)
    {
      char v17 = *(void **)a2;
      id v18 = v17;
      *(void *)a1 = v17;
      char v19 = 1;
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
      char v19 = 0;
    }
    a1[v6] = v19;
  }
  return a1;
}

void *sub_1B0830E7C(void *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (*(void *)(*(void *)(AssociatedTypeWitness - 8) + 64) <= 8uLL) {
    uint64_t v5 = 8;
  }
  else {
    uint64_t v5 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  }
  unsigned int v6 = a2[v5];
  unsigned int v7 = v6 - 2;
  if (v6 >= 2)
  {
    if (v5 <= 3) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = 4;
    }
    switch(v8)
    {
      case 1:
        int v9 = *a2;
        goto LABEL_13;
      case 2:
        int v9 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v9 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v9 = *(_DWORD *)a2;
LABEL_13:
        int v10 = (v9 | (v7 << (8 * v5))) + 2;
        unsigned int v6 = v9 + 2;
        if (v5 < 4) {
          unsigned int v6 = v10;
        }
        break;
      default:
        break;
    }
  }
  if (v6 == 1)
  {
    *a1 = *(void *)a2;
    char v11 = 1;
  }
  else
  {
    (*(void (**)(void *, unsigned __int8 *, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(a1, a2, AssociatedTypeWitness);
    char v11 = 0;
  }
  *((unsigned char *)a1 + v5) = v11;
  return a1;
}

unsigned __int8 *sub_1B0830FE8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1 != a2)
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
    if (*(void *)(v5 + 64) <= 8uLL) {
      uint64_t v6 = 8;
    }
    else {
      uint64_t v6 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
    }
    unsigned int v7 = a1[v6];
    unsigned int v8 = v7 - 2;
    if (v7 >= 2)
    {
      if (v6 <= 3) {
        uint64_t v9 = v6;
      }
      else {
        uint64_t v9 = 4;
      }
      switch(v9)
      {
        case 1:
          int v10 = *a1;
          goto LABEL_14;
        case 2:
          int v10 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v10 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v10 = *(_DWORD *)a1;
LABEL_14:
          int v11 = (v10 | (v8 << (8 * v6))) + 2;
          unsigned int v7 = v10 + 2;
          if (v6 < 4) {
            unsigned int v7 = v11;
          }
          break;
        default:
          break;
      }
    }
    if (v7 == 1) {

    }
    else {
      (*(void (**)(unsigned __int8 *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
    }
    unsigned int v12 = a2[v6];
    unsigned int v13 = v12 - 2;
    if (v12 >= 2)
    {
      if (v6 <= 3) {
        uint64_t v14 = v6;
      }
      else {
        uint64_t v14 = 4;
      }
      switch(v14)
      {
        case 1:
          int v15 = *a2;
          goto LABEL_28;
        case 2:
          int v15 = *(unsigned __int16 *)a2;
          goto LABEL_28;
        case 3:
          int v15 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_28;
        case 4:
          int v15 = *(_DWORD *)a2;
LABEL_28:
          int v16 = (v15 | (v13 << (8 * v6))) + 2;
          unsigned int v12 = v15 + 2;
          if (v6 < 4) {
            unsigned int v12 = v16;
          }
          break;
        default:
          break;
      }
    }
    if (v12 == 1)
    {
      *(void *)a1 = *(void *)a2;
      char v17 = 1;
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
      char v17 = 0;
    }
    a1[v6] = v17;
  }
  return a1;
}

uint64_t sub_1B0831224(unsigned __int16 *a1, unsigned int a2)
{
  unint64_t v4 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  uint64_t v5 = 8;
  if (v4 > 8) {
    uint64_t v5 = v4;
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_22;
  }
  uint64_t v6 = v5 + 1;
  char v7 = 8 * (v5 + 1);
  if ((v5 + 1) <= 3)
  {
    unsigned int v10 = ((a2 + ~(-1 << v7) - 254) >> v7) + 1;
    if (HIWORD(v10))
    {
      int v8 = *(_DWORD *)((char *)a1 + v6);
      if (!v8) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v10 > 0xFF)
    {
      int v8 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v10 < 2)
    {
LABEL_22:
      unsigned int v12 = *((unsigned __int8 *)a1 + v5);
      if (v12 >= 2) {
        return (v12 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v8 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_22;
  }
LABEL_14:
  int v11 = (v8 - 1) << v7;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v6 | v11) + 255;
}

void sub_1B0831398(unsigned char *a1, unsigned int a2, unsigned int a3)
{
  unint64_t v6 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v6 <= 8) {
    unint64_t v6 = 8;
  }
  size_t v7 = v6 + 1;
  if (a3 < 0xFF)
  {
    int v8 = 0;
  }
  else if (v7 <= 3)
  {
    unsigned int v11 = ((a3 + ~(-1 << (8 * v7)) - 254) >> (8 * v7)) + 1;
    if (HIWORD(v11))
    {
      int v8 = 4;
    }
    else if (v11 >= 0x100)
    {
      int v8 = 2;
    }
    else
    {
      int v8 = v11 > 1;
    }
  }
  else
  {
    int v8 = 1;
  }
  if (a2 > 0xFE)
  {
    unsigned int v9 = a2 - 255;
    if (v7 < 4)
    {
      int v10 = (v9 >> (8 * v7)) + 1;
      if (v6 != -1)
      {
        int v12 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if (v7 == 3)
        {
          *(_WORD *)a1 = v12;
          a1[2] = BYTE2(v12);
        }
        else if (v7 == 2)
        {
          *(_WORD *)a1 = v12;
        }
        else
        {
          *a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v6 + 1);
      *(_DWORD *)a1 = v9;
      int v10 = 1;
    }
    switch(v8)
    {
      case 1:
        a1[v7] = v10;
        break;
      case 2:
        *(_WORD *)&a1[v7] = v10;
        break;
      case 3:
LABEL_34:
        __break(1u);
        JUMPOUT(0x1B0831588);
      case 4:
        *(_DWORD *)&a1[v7] = v10;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v8)
    {
      case 1:
        a1[v7] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      case 2:
        *(_WORD *)&a1[v7] = 0;
        goto LABEL_22;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v7] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      default:
LABEL_22:
        if (a2) {
LABEL_23:
        }
          a1[v6] = -(char)a2;
        break;
    }
  }
}

uint64_t sub_1B08315B0(unsigned __int8 *a1)
{
  unint64_t v2 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v2 <= 8) {
    unint64_t v2 = 8;
  }
  uint64_t result = a1[v2];
  if (result >= 2)
  {
    if (v2 <= 3) {
      uint64_t v4 = v2;
    }
    else {
      uint64_t v4 = 4;
    }
    switch(v4)
    {
      case 1:
        int v5 = *a1;
        goto LABEL_12;
      case 2:
        int v5 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v5 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v5 = *(_DWORD *)a1;
LABEL_12:
        unsigned int v6 = (v5 | ((result - 2) << (8 * v2))) + 2;
        unsigned int v7 = v5 + 2;
        if (v2 >= 4) {
          uint64_t result = v7;
        }
        else {
          uint64_t result = v6;
        }
        break;
      default:
        return result;
    }
  }
  return result;
}

void sub_1B08316A4(unsigned char *a1, unsigned int a2)
{
  unint64_t v4 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v4 <= 8) {
    size_t v5 = 8;
  }
  else {
    size_t v5 = v4;
  }
  if (a2 > 1)
  {
    unsigned int v6 = a2 - 2;
    if (v5 < 4)
    {
      unsigned int v7 = v6 >> (8 * v5);
      int v8 = v6 & ~(-1 << (8 * v5));
      a1[v5] = v7 + 2;
      bzero(a1, v5);
      if (v5 == 3)
      {
        *(_WORD *)a1 = v8;
        a1[2] = BYTE2(v8);
      }
      else if (v5 == 2)
      {
        *(_WORD *)a1 = v8;
      }
      else
      {
        *a1 = v8;
      }
    }
    else
    {
      a1[v5] = 2;
      bzero(a1, v5);
      *(_DWORD *)a1 = v6;
    }
  }
  else
  {
    a1[v5] = a2;
  }
}

uint64_t type metadata accessor for ShelvesPresenter<>.MergeProblem()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1B08317B8()
{
  uint64_t result = type metadata accessor for ShelvesPresenter.InsertionPoint();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

void *sub_1B0831838(void *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  char v7 = 8 * v6;
  if (v6 > 3)
  {
    int v8 = 3;
    goto LABEL_3;
  }
  unsigned int v11 = ((1 << v7) + 1) >> v7;
  if (v11 <= 0xFFFD)
  {
    int v8 = v11 + 2;
    if (v11 > 0xFD)
    {
      char v9 = 16;
LABEL_4:
      unsigned int v10 = (1 << v9) - v8;
      if ((v10 & 0x80000000) == 0) {
        goto LABEL_10;
      }
      goto LABEL_9;
    }
LABEL_3:
    char v9 = 8;
    goto LABEL_4;
  }
LABEL_9:
  unsigned int v10 = 0x7FFFFFFF;
LABEL_10:
  uint64_t v12 = 1;
  if (v6 > 3)
  {
    int v13 = 1;
    goto LABEL_19;
  }
  unsigned int v14 = ((1 << v7) + 1) >> v7;
  if (v14 > 0xFFFD)
  {
    uint64_t v12 = 4;
  }
  else
  {
    if (v14 < 0xFE)
    {
      uint64_t v12 = 1;
      int v13 = 1;
      goto LABEL_19;
    }
    uint64_t v12 = 2;
  }
  BOOL v22 = v14 > 0xFFFD;
  int v13 = 2;
  if (v22) {
    int v13 = 4;
  }
LABEL_19:
  unint64_t v15 = v6 + v12;
  if (v10 <= 1)
  {
    unsigned int v16 = v13 + v6;
    if (v16 <= 3)
    {
      unsigned int v18 = (~(-1 << (8 * v16)) - v10 + 2) >> (8 * v16);
      if (v18 > 0xFFFE)
      {
        uint64_t v17 = 4;
      }
      else
      {
        BOOL v19 = v18 != 0;
        BOOL v20 = v18 >= 0xFF;
        uint64_t v17 = 2;
        if (!v20) {
          uint64_t v17 = v19;
        }
      }
    }
    else
    {
      uint64_t v17 = 1;
    }
    v15 += v17;
  }
  uint64_t v21 = *(_DWORD *)(v5 + 80);
  BOOL v22 = v21 > 7 || v15 > 0x18;
  if (v22 || (*(_DWORD *)(v5 + 80) & 0x100000) != 0)
  {
    uint64_t v24 = *(void *)a2;
    *a1 = *(void *)a2;
    a1 = (void *)(v24 + ((v21 + 16) & ~v21));
    swift_retain();
    return a1;
  }
  if (v6 > 3)
  {
    int v25 = 3;
LABEL_38:
    char v26 = 8;
    goto LABEL_39;
  }
  unsigned int v28 = ((1 << v7) + 1) >> v7;
  if (v28 > 0xFFFD) {
    goto LABEL_45;
  }
  int v25 = v28 + 2;
  if (v28 <= 0xFD) {
    goto LABEL_38;
  }
  char v26 = 16;
LABEL_39:
  unsigned int v27 = (1 << v26) - v25;
  if ((v27 & 0x80000000) == 0)
  {
    if (v6 > 3) {
      goto LABEL_49;
    }
LABEL_46:
    unsigned int v29 = ((1 << v7) + 1) >> v7;
    uint64_t v30 = 2;
    if (v29 > 0xFFFD) {
      uint64_t v30 = 4;
    }
    if (v29 > 0xFD) {
      goto LABEL_50;
    }
    goto LABEL_49;
  }
LABEL_45:
  unsigned int v27 = 0x7FFFFFFF;
  if (v6 <= 3) {
    goto LABEL_46;
  }
LABEL_49:
  uint64_t v30 = 1;
LABEL_50:
  if (v27 > 1) {
    goto LABEL_67;
  }
  uint64_t v31 = v30 + v6;
  char v32 = 8 * v31;
  if (v31 > 3) {
    goto LABEL_52;
  }
  unsigned int v34 = (~(-1 << v32) - v27 + 2) >> v32;
  if (v34 > 0xFFFE)
  {
    int v33 = *(_DWORD *)&a2[v31];
    if (!v33) {
      goto LABEL_66;
    }
    goto LABEL_59;
  }
  if (v34 > 0xFE)
  {
    int v33 = *(unsigned __int16 *)&a2[v31];
    if (!*(_WORD *)&a2[v31]) {
      goto LABEL_66;
    }
    goto LABEL_59;
  }
  if (v34)
  {
LABEL_52:
    int v33 = a2[v31];
    if (!a2[v31]) {
      goto LABEL_66;
    }
LABEL_59:
    int v35 = (v33 - 1) << v32;
    if (v31 > 3) {
      int v35 = 0;
    }
    if (v31)
    {
      if (v31 > 3) {
        LODWORD(v31) = 4;
      }
      switch((int)v31)
      {
        case 2:
LABEL_106:
          LODWORD(v31) = *(unsigned __int16 *)a2;
          break;
        case 3:
LABEL_107:
          LODWORD(v31) = *(unsigned __int16 *)a2 | (a2[2] << 16);
          break;
        case 4:
LABEL_108:
          LODWORD(v31) = *(_DWORD *)a2;
          break;
        default:
LABEL_105:
          LODWORD(v31) = *a2;
          break;
      }
    }
LABEL_109:
    if (v27 + (v31 | v35) != -1) {
      goto LABEL_110;
    }
    goto LABEL_150;
  }
LABEL_66:
  if (!v27) {
    goto LABEL_150;
  }
LABEL_67:
  if (v6 > 3)
  {
    int v36 = 3;
    goto LABEL_71;
  }
  unsigned int v37 = ((1 << v7) + 1) >> v7;
  if (v37 <= 0xFFFD)
  {
    int v36 = v37 + 2;
    if (v37 > 0xFD)
    {
      char v38 = 16;
LABEL_72:
      unsigned int v39 = (1 << v38) - v36;
      if ((v39 & 0x80000000) == 0) {
        goto LABEL_74;
      }
      goto LABEL_73;
    }
LABEL_71:
    char v38 = 8;
    goto LABEL_72;
  }
LABEL_73:
  unsigned int v39 = 0x7FFFFFFF;
LABEL_74:
  if (v6 > 3)
  {
    int v40 = 3;
LABEL_78:
    char v42 = 8;
    goto LABEL_79;
  }
  unsigned int v41 = ((1 << v7) + 1) >> v7;
  if (v41 > 0xFFFD) {
    goto LABEL_82;
  }
  int v40 = v41 + 2;
  if (v41 <= 0xFD) {
    goto LABEL_78;
  }
  char v42 = 16;
LABEL_79:
  unsigned int v27 = (1 << v42) - v40;
  if ((v27 & 0x80000000) == 0)
  {
    if (v6 > 3) {
      goto LABEL_86;
    }
    goto LABEL_83;
  }
LABEL_82:
  unsigned int v27 = 0x7FFFFFFF;
  if (v6 > 3)
  {
LABEL_86:
    uint64_t v44 = 1;
    goto LABEL_87;
  }
LABEL_83:
  unsigned int v43 = ((1 << v7) + 1) >> v7;
  uint64_t v44 = 2;
  if (v43 > 0xFFFD) {
    uint64_t v44 = 4;
  }
  if (v43 <= 0xFD) {
    goto LABEL_86;
  }
LABEL_87:
  if (!v39) {
    goto LABEL_150;
  }
  unsigned int v45 = v39 - v27;
  if (v39 <= v27) {
    goto LABEL_138;
  }
  uint64_t v31 = v44 + v6;
  char v46 = 8 * (v44 + v6);
  if (v31 > 3)
  {
LABEL_90:
    int v47 = a2[v31];
    if (!a2[v31]) {
      goto LABEL_138;
    }
    goto LABEL_99;
  }
  unsigned int v48 = ((v45 + ~(-1 << v46)) >> v46) + 1;
  if (HIWORD(v48))
  {
    int v47 = *(_DWORD *)&a2[v31];
    if (!v47) {
      goto LABEL_138;
    }
LABEL_99:
    int v35 = (v47 - 1) << v46;
    if (v31 > 3) {
      int v35 = 0;
    }
    if (v31)
    {
      if (v31 > 3) {
        LODWORD(v31) = 4;
      }
      switch((int)v31)
      {
        case 2:
          goto LABEL_106;
        case 3:
          goto LABEL_107;
        case 4:
          goto LABEL_108;
        default:
          goto LABEL_105;
      }
    }
    goto LABEL_109;
  }
  if (v48 > 0xFF)
  {
    int v47 = *(unsigned __int16 *)&a2[v31];
    if (!*(_WORD *)&a2[v31]) {
      goto LABEL_138;
    }
    goto LABEL_99;
  }
  if (v48 >= 2) {
    goto LABEL_90;
  }
LABEL_138:
  if (v27)
  {
    if (v6 <= 3)
    {
      unsigned int v65 = ((1 << v7) + 1) >> v7;
      if (v65 > 0xFFFD)
      {
        unsigned int v61 = *(_DWORD *)&a2[v6];
        unsigned int v62 = ~v61;
        goto LABEL_147;
      }
      int v64 = v65 + 2;
      if (v65 > 0xFD)
      {
        int v67 = *(unsigned __int16 *)&a2[v6];
        unsigned int v61 = v67 | 0xFFFF0000;
        unsigned int v62 = v67 ^ 0xFFFF;
        char v63 = 16;
      }
      else
      {
        int v66 = a2[v6];
        unsigned int v61 = v66 | 0xFFFFFF00;
        unsigned int v62 = v66 ^ 0xFF;
        char v63 = 8;
      }
    }
    else
    {
      int v60 = a2[v6];
      unsigned int v61 = v60 | 0xFFFFFF00;
      unsigned int v62 = v60 ^ 0xFF;
      char v63 = 8;
      int v64 = 3;
    }
    unsigned int v68 = (1 << v63) - v64;
    if ((v68 & 0x80000000) == 0)
    {
LABEL_148:
      if (v68 <= v62 || !v61) {
        goto LABEL_150;
      }
LABEL_110:
      if (v6 <= 3)
      {
        unsigned int v50 = ((1 << v7) + 1) >> v7;
        if (v50 > 0xFFFD)
        {
LABEL_116:
          unsigned int v52 = 0x7FFFFFFF;
LABEL_117:
          uint64_t v53 = 1;
          if (v6 > 3)
          {
            int v54 = 1;
LABEL_127:
            size_t v56 = v6 + v53;
            if (v52 <= 1)
            {
              if ((v54 + v6) <= 3)
              {
                unsigned int v58 = (~(-1 << (8 * (v54 + v6))) - v52 + 2) >> (8 * (v54 + v6));
                if (v58 > 0xFFFE)
                {
                  uint64_t v57 = 4;
                }
                else
                {
                  BOOL v59 = v58 != 0;
                  BOOL v20 = v58 >= 0xFF;
                  uint64_t v57 = 2;
                  if (!v20) {
                    uint64_t v57 = v59;
                  }
                }
              }
              else
              {
                uint64_t v57 = 1;
              }
              v56 += v57;
            }
            memcpy(a1, a2, v56);
            return a1;
          }
          unsigned int v55 = ((1 << v7) + 1) >> v7;
          if (v55 > 0xFFFD)
          {
            uint64_t v53 = 4;
          }
          else
          {
            if (v55 < 0xFE)
            {
              uint64_t v53 = 1;
              int v54 = 1;
              goto LABEL_127;
            }
            uint64_t v53 = 2;
          }
          BOOL v22 = v55 > 0xFFFD;
          int v54 = 2;
          if (v22) {
            int v54 = 4;
          }
          goto LABEL_127;
        }
        int v49 = v50 + 2;
        if (v50 > 0xFD)
        {
          char v51 = 16;
LABEL_115:
          unsigned int v52 = (1 << v51) - v49;
          if ((v52 & 0x80000000) == 0) {
            goto LABEL_117;
          }
          goto LABEL_116;
        }
      }
      else
      {
        int v49 = 3;
      }
      char v51 = 8;
      goto LABEL_115;
    }
LABEL_147:
    unsigned int v68 = 0x7FFFFFFF;
    goto LABEL_148;
  }
  if (v6 > 3) {
    goto LABEL_153;
  }
LABEL_150:
  unsigned int v69 = ((1 << v7) + 1) >> v7;
  if (v69 > 0xFFFD)
  {
    unsigned int v70 = *(_DWORD *)&a2[v6];
    unsigned int v71 = v70 - 2;
    if (v70 < 2) {
      goto LABEL_169;
    }
    goto LABEL_158;
  }
  if (v69 > 0xFD)
  {
    unsigned int v70 = *(unsigned __int16 *)&a2[v6];
    unsigned int v71 = v70 - 2;
    if (v70 < 2) {
      goto LABEL_169;
    }
  }
  else
  {
LABEL_153:
    unsigned int v70 = a2[v6];
    unsigned int v71 = v70 - 2;
    if (v70 < 2) {
      goto LABEL_169;
    }
  }
LABEL_158:
  if (v6 <= 3) {
    uint64_t v72 = v6;
  }
  else {
    uint64_t v72 = 4;
  }
  switch(v72)
  {
    case 1:
      int v73 = *a2;
      goto LABEL_166;
    case 2:
      int v73 = *(unsigned __int16 *)a2;
      goto LABEL_166;
    case 3:
      int v73 = *(unsigned __int16 *)a2 | (a2[2] << 16);
      goto LABEL_166;
    case 4:
      int v73 = *(_DWORD *)a2;
LABEL_166:
      if (v6 < 4) {
        v73 |= v71 << v7;
      }
      unsigned int v70 = v73 + 2;
      break;
    default:
      break;
  }
LABEL_169:
  if (v70 == 1)
  {
    (*(void (**)(void *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    if (v6 <= 3)
    {
      unsigned int v79 = ((1 << v7) + 1) >> v7;
      if (v79 > 0xFFFD)
      {
        *(_DWORD *)((char *)a1 + v6) = 1;
        goto LABEL_200;
      }
      if (v79 > 0xFD)
      {
        *(_WORD *)((char *)a1 + v6) = 1;
        goto LABEL_193;
      }
    }
    *((unsigned char *)a1 + v6) = 1;
    if (v6 <= 3) {
      goto LABEL_173;
    }
    goto LABEL_185;
  }
  if (v70)
  {
    if (v6 > 3) {
      goto LABEL_183;
    }
    unsigned int v76 = ((1 << v7) + 1) >> v7;
    uint64_t v77 = 2;
    if (v76 > 0xFFFD) {
      uint64_t v77 = 4;
    }
    if (v76 <= 0xFD) {
LABEL_183:
    }
      uint64_t v77 = 1;
    memcpy(a1, a2, v77 + v6);
    if (v6 <= 3)
    {
LABEL_173:
      unsigned int v74 = ((1 << v7) + 1) >> v7;
      if (v74 > 0xFFFD) {
        goto LABEL_200;
      }
      int v75 = v74 + 2;
      if (v74 > 0xFD) {
        goto LABEL_194;
      }
LABEL_186:
      char v78 = 8;
      goto LABEL_195;
    }
LABEL_185:
    int v75 = 3;
    goto LABEL_186;
  }
  (*(void (**)(void *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  if (v6 > 3) {
    goto LABEL_172;
  }
  unsigned int v79 = ((1 << v7) + 1) >> v7;
  if (v79 > 0xFFFD)
  {
    *(_DWORD *)((char *)a1 + v6) = 0;
    goto LABEL_200;
  }
  if (v79 <= 0xFD)
  {
LABEL_172:
    *((unsigned char *)a1 + v6) = 0;
    if (v6 <= 3) {
      goto LABEL_173;
    }
    goto LABEL_185;
  }
  *(_WORD *)((char *)a1 + v6) = 0;
LABEL_193:
  int v75 = v79 + 2;
LABEL_194:
  char v78 = 16;
LABEL_195:
  unsigned int v80 = (1 << v78) - v75;
  if ((v80 & 0x80000000) == 0)
  {
    if (v6 > 3) {
      goto LABEL_204;
    }
    goto LABEL_201;
  }
LABEL_200:
  unsigned int v80 = 0x7FFFFFFF;
  if (v6 > 3)
  {
LABEL_204:
    uint64_t v82 = 1;
    goto LABEL_205;
  }
LABEL_201:
  unsigned int v81 = ((1 << v7) + 1) >> v7;
  uint64_t v82 = 2;
  if (v81 > 0xFFFD) {
    uint64_t v82 = 4;
  }
  if (v81 <= 0xFD) {
    goto LABEL_204;
  }
LABEL_205:
  if (v80 <= 1)
  {
    uint64_t v83 = v82 + v6;
    if (v83 <= 3)
    {
      unsigned int v84 = (~(-1 << (8 * v83)) - v80 + 2) >> (8 * v83);
      if (v84 > 0xFFFE)
      {
        *(_DWORD *)((char *)a1 + v83) = 0;
        return a1;
      }
      if (v84 > 0xFE)
      {
        *(_WORD *)((char *)a1 + v83) = 0;
        return a1;
      }
      if (!v84) {
        return a1;
      }
    }
    *((unsigned char *)a1 + v83) = 0;
  }
  return a1;
}

uint64_t sub_1B0832244(unsigned __int16 *a1)
{
  uint64_t result = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(*(void *)(result - 8) + 64);
  char v4 = 8 * v3;
  if (v3 > 3)
  {
    int v5 = 3;
LABEL_3:
    char v6 = 8;
    goto LABEL_4;
  }
  unsigned int v8 = ((1 << v4) + 1) >> v4;
  if (v8 > 0xFFFD) {
    goto LABEL_10;
  }
  int v5 = v8 + 2;
  if (v8 <= 0xFD) {
    goto LABEL_3;
  }
  char v6 = 16;
LABEL_4:
  unsigned int v7 = (1 << v6) - v5;
  if ((v7 & 0x80000000) == 0)
  {
    if (v3 > 3) {
      goto LABEL_14;
    }
LABEL_11:
    unsigned int v9 = ((1 << v4) + 1) >> v4;
    uint64_t v10 = 2;
    if (v9 > 0xFFFD) {
      uint64_t v10 = 4;
    }
    if (v9 > 0xFD) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
LABEL_10:
  unsigned int v7 = 0x7FFFFFFF;
  if (v3 <= 3) {
    goto LABEL_11;
  }
LABEL_14:
  uint64_t v10 = 1;
LABEL_15:
  if (v7 > 1) {
    goto LABEL_32;
  }
  uint64_t v11 = v10 + v3;
  char v12 = 8 * v11;
  if (v11 > 3) {
    goto LABEL_17;
  }
  unsigned int v14 = (~(-1 << v12) - v7 + 2) >> v12;
  if (v14 > 0xFFFE)
  {
    int v13 = *(_DWORD *)((char *)a1 + v11);
    if (!v13) {
      goto LABEL_31;
    }
    goto LABEL_24;
  }
  if (v14 > 0xFE)
  {
    int v13 = *(unsigned __int16 *)((char *)a1 + v11);
    if (!*(unsigned __int16 *)((char *)a1 + v11)) {
      goto LABEL_31;
    }
    goto LABEL_24;
  }
  if (v14)
  {
LABEL_17:
    int v13 = *((unsigned __int8 *)a1 + v11);
    if (!*((unsigned char *)a1 + v11)) {
      goto LABEL_31;
    }
LABEL_24:
    int v15 = (v13 - 1) << v12;
    if (v11 > 3) {
      int v15 = 0;
    }
    if (v11)
    {
      if (v11 > 3) {
        LODWORD(v11) = 4;
      }
      switch((int)v11)
      {
        case 2:
LABEL_71:
          LODWORD(v11) = *a1;
          break;
        case 3:
LABEL_72:
          LODWORD(v11) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
          break;
        case 4:
LABEL_73:
          LODWORD(v11) = *(_DWORD *)a1;
          break;
        default:
LABEL_70:
          LODWORD(v11) = *(unsigned __int8 *)a1;
          break;
      }
    }
LABEL_74:
    if (v7 + (v11 | v15) != -1) {
      return result;
    }
    goto LABEL_90;
  }
LABEL_31:
  if (!v7) {
    goto LABEL_90;
  }
LABEL_32:
  if (v3 > 3)
  {
    int v16 = 3;
    goto LABEL_36;
  }
  unsigned int v17 = ((1 << v4) + 1) >> v4;
  if (v17 <= 0xFFFD)
  {
    int v16 = v17 + 2;
    if (v17 > 0xFD)
    {
      char v18 = 16;
LABEL_37:
      unsigned int v19 = (1 << v18) - v16;
      if ((v19 & 0x80000000) == 0) {
        goto LABEL_39;
      }
      goto LABEL_38;
    }
LABEL_36:
    char v18 = 8;
    goto LABEL_37;
  }
LABEL_38:
  unsigned int v19 = 0x7FFFFFFF;
LABEL_39:
  if (v3 > 3)
  {
    int v20 = 3;
LABEL_43:
    char v22 = 8;
    goto LABEL_44;
  }
  unsigned int v21 = ((1 << v4) + 1) >> v4;
  if (v21 > 0xFFFD) {
    goto LABEL_47;
  }
  int v20 = v21 + 2;
  if (v21 <= 0xFD) {
    goto LABEL_43;
  }
  char v22 = 16;
LABEL_44:
  unsigned int v7 = (1 << v22) - v20;
  if ((v7 & 0x80000000) == 0)
  {
    if (v3 > 3) {
      goto LABEL_51;
    }
    goto LABEL_48;
  }
LABEL_47:
  unsigned int v7 = 0x7FFFFFFF;
  if (v3 > 3)
  {
LABEL_51:
    uint64_t v24 = 1;
    goto LABEL_52;
  }
LABEL_48:
  unsigned int v23 = ((1 << v4) + 1) >> v4;
  uint64_t v24 = 2;
  if (v23 > 0xFFFD) {
    uint64_t v24 = 4;
  }
  if (v23 <= 0xFD) {
    goto LABEL_51;
  }
LABEL_52:
  if (!v19) {
    goto LABEL_90;
  }
  unsigned int v25 = v19 - v7;
  if (v19 <= v7) {
    goto LABEL_77;
  }
  uint64_t v11 = v24 + v3;
  char v26 = 8 * (v24 + v3);
  if (v11 > 3) {
    goto LABEL_55;
  }
  unsigned int v28 = ((v25 + ~(-1 << v26)) >> v26) + 1;
  if (HIWORD(v28))
  {
    int v27 = *(_DWORD *)((char *)a1 + v11);
    if (!v27) {
      goto LABEL_77;
    }
LABEL_64:
    int v15 = (v27 - 1) << v26;
    if (v11 > 3) {
      int v15 = 0;
    }
    if (v11)
    {
      if (v11 > 3) {
        LODWORD(v11) = 4;
      }
      switch((int)v11)
      {
        case 2:
          goto LABEL_71;
        case 3:
          goto LABEL_72;
        case 4:
          goto LABEL_73;
        default:
          goto LABEL_70;
      }
    }
    goto LABEL_74;
  }
  if (v28 > 0xFF)
  {
    int v27 = *(unsigned __int16 *)((char *)a1 + v11);
    if (!*(unsigned __int16 *)((char *)a1 + v11)) {
      goto LABEL_77;
    }
    goto LABEL_64;
  }
  if (v28 >= 2)
  {
LABEL_55:
    int v27 = *((unsigned __int8 *)a1 + v11);
    if (!*((unsigned char *)a1 + v11)) {
      goto LABEL_77;
    }
    goto LABEL_64;
  }
LABEL_77:
  if (!v7) {
    goto LABEL_90;
  }
  if (v3 <= 3)
  {
    unsigned int v34 = ((1 << v4) + 1) >> v4;
    if (v34 > 0xFFFD)
    {
      unsigned int v30 = *(_DWORD *)((char *)a1 + v3);
      unsigned int v31 = ~v30;
      goto LABEL_88;
    }
    int v33 = v34 + 2;
    if (v34 > 0xFD)
    {
      int v36 = *(unsigned __int16 *)((char *)a1 + v3);
      unsigned int v30 = v36 | 0xFFFF0000;
      unsigned int v31 = v36 ^ 0xFFFF;
      char v32 = 16;
    }
    else
    {
      int v35 = *((unsigned __int8 *)a1 + v3);
      unsigned int v30 = v35 | 0xFFFFFF00;
      unsigned int v31 = v35 ^ 0xFF;
      char v32 = 8;
    }
  }
  else
  {
    int v29 = *((unsigned __int8 *)a1 + v3);
    unsigned int v30 = v29 | 0xFFFFFF00;
    unsigned int v31 = v29 ^ 0xFF;
    char v32 = 8;
    int v33 = 3;
  }
  unsigned int v37 = (1 << v32) - v33;
  if ((v37 & 0x80000000) == 0)
  {
    if (v37 <= v31) {
      goto LABEL_90;
    }
    goto LABEL_89;
  }
LABEL_88:
  if (v31 >= 0x7FFFFFFF) {
    goto LABEL_90;
  }
LABEL_89:
  if (v30) {
    return result;
  }
LABEL_90:
  if (v3 > 3) {
    goto LABEL_93;
  }
  unsigned int v38 = ((1 << v4) + 1) >> v4;
  if (v38 <= 0xFFFD)
  {
    if (v38 > 0xFD)
    {
      unsigned int v39 = *(unsigned __int16 *)((char *)a1 + v3);
      unsigned int v40 = v39 - 2;
      if (v39 < 2) {
        goto LABEL_106;
      }
      goto LABEL_98;
    }
LABEL_93:
    unsigned int v39 = *((unsigned __int8 *)a1 + v3);
    unsigned int v40 = v39 - 2;
    if (v39 < 2) {
      goto LABEL_106;
    }
LABEL_98:
    if (v3 <= 3) {
      uint64_t v41 = v3;
    }
    else {
      uint64_t v41 = 4;
    }
    switch(v41)
    {
      case 1:
        int v42 = *(unsigned __int8 *)a1;
        if (v3 >= 4) {
          goto LABEL_113;
        }
        goto LABEL_105;
      case 2:
        int v42 = *a1;
        if (v3 < 4) {
          goto LABEL_105;
        }
        goto LABEL_113;
      case 3:
        int v42 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        if (v3 < 4) {
          goto LABEL_105;
        }
        goto LABEL_113;
      case 4:
        int v42 = *(_DWORD *)a1;
        if (v3 < 4)
        {
LABEL_105:
          unsigned int v39 = (v42 | (v40 << v4)) + 2;
          goto LABEL_106;
        }
LABEL_113:
        if ((v42 + 2) > 1) {
          return result;
        }
        goto LABEL_107;
      default:
        goto LABEL_106;
    }
  }
  unsigned int v39 = *(_DWORD *)((char *)a1 + v3);
  unsigned int v40 = v39 - 2;
  if (v39 >= 2) {
    goto LABEL_98;
  }
LABEL_106:
  if (v39 <= 1)
  {
LABEL_107:
    unsigned int v43 = *(uint64_t (**)(unsigned __int16 *, uint64_t))(*(void *)(result - 8) + 8);
    return v43(a1, result);
  }
  return result;
}

char *sub_1B0832814(char *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  char v7 = 8 * v6;
  if (v6 > 3)
  {
    int v8 = 3;
LABEL_3:
    char v9 = 8;
    goto LABEL_4;
  }
  unsigned int v11 = ((1 << v7) + 1) >> v7;
  if (v11 > 0xFFFD) {
    goto LABEL_10;
  }
  int v8 = v11 + 2;
  if (v11 <= 0xFD) {
    goto LABEL_3;
  }
  char v9 = 16;
LABEL_4:
  unsigned int v10 = (1 << v9) - v8;
  if ((v10 & 0x80000000) == 0)
  {
    if (v6 > 3) {
      goto LABEL_14;
    }
LABEL_11:
    unsigned int v12 = ((1 << v7) + 1) >> v7;
    uint64_t v13 = 2;
    if (v12 > 0xFFFD) {
      uint64_t v13 = 4;
    }
    if (v12 > 0xFD) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
LABEL_10:
  unsigned int v10 = 0x7FFFFFFF;
  if (v6 <= 3) {
    goto LABEL_11;
  }
LABEL_14:
  uint64_t v13 = 1;
LABEL_15:
  if (v10 > 1) {
    goto LABEL_32;
  }
  uint64_t v14 = v13 + v6;
  char v15 = 8 * v14;
  if (v14 > 3) {
    goto LABEL_17;
  }
  unsigned int v17 = (~(-1 << v15) - v10 + 2) >> v15;
  if (v17 > 0xFFFE)
  {
    int v16 = *(_DWORD *)&a2[v14];
    if (!v16) {
      goto LABEL_31;
    }
    goto LABEL_24;
  }
  if (v17 > 0xFE)
  {
    int v16 = *(unsigned __int16 *)&a2[v14];
    if (!*(_WORD *)&a2[v14]) {
      goto LABEL_31;
    }
    goto LABEL_24;
  }
  if (v17)
  {
LABEL_17:
    int v16 = a2[v14];
    if (!a2[v14]) {
      goto LABEL_31;
    }
LABEL_24:
    int v18 = (v16 - 1) << v15;
    if (v14 > 3) {
      int v18 = 0;
    }
    if (v14)
    {
      if (v14 > 3) {
        LODWORD(v14) = 4;
      }
      switch((int)v14)
      {
        case 2:
LABEL_71:
          LODWORD(v14) = *(unsigned __int16 *)a2;
          break;
        case 3:
LABEL_72:
          LODWORD(v14) = *(unsigned __int16 *)a2 | (a2[2] << 16);
          break;
        case 4:
LABEL_73:
          LODWORD(v14) = *(_DWORD *)a2;
          break;
        default:
LABEL_70:
          LODWORD(v14) = *a2;
          break;
      }
    }
LABEL_74:
    if (v10 + (v14 | v18) != -1) {
      goto LABEL_75;
    }
    goto LABEL_116;
  }
LABEL_31:
  if (!v10) {
    goto LABEL_116;
  }
LABEL_32:
  if (v6 > 3)
  {
    int v19 = 3;
    goto LABEL_36;
  }
  unsigned int v20 = ((1 << v7) + 1) >> v7;
  if (v20 <= 0xFFFD)
  {
    int v19 = v20 + 2;
    if (v20 > 0xFD)
    {
      char v21 = 16;
LABEL_37:
      unsigned int v22 = (1 << v21) - v19;
      if ((v22 & 0x80000000) == 0) {
        goto LABEL_39;
      }
      goto LABEL_38;
    }
LABEL_36:
    char v21 = 8;
    goto LABEL_37;
  }
LABEL_38:
  unsigned int v22 = 0x7FFFFFFF;
LABEL_39:
  if (v6 > 3)
  {
    int v23 = 3;
LABEL_43:
    char v25 = 8;
    goto LABEL_44;
  }
  unsigned int v24 = ((1 << v7) + 1) >> v7;
  if (v24 > 0xFFFD) {
    goto LABEL_47;
  }
  int v23 = v24 + 2;
  if (v24 <= 0xFD) {
    goto LABEL_43;
  }
  char v25 = 16;
LABEL_44:
  unsigned int v10 = (1 << v25) - v23;
  if ((v10 & 0x80000000) == 0)
  {
    if (v6 > 3) {
      goto LABEL_51;
    }
    goto LABEL_48;
  }
LABEL_47:
  unsigned int v10 = 0x7FFFFFFF;
  if (v6 > 3)
  {
LABEL_51:
    uint64_t v27 = 1;
    goto LABEL_52;
  }
LABEL_48:
  unsigned int v26 = ((1 << v7) + 1) >> v7;
  uint64_t v27 = 2;
  if (v26 > 0xFFFD) {
    uint64_t v27 = 4;
  }
  if (v26 <= 0xFD) {
    goto LABEL_51;
  }
LABEL_52:
  if (!v22) {
    goto LABEL_116;
  }
  unsigned int v28 = v22 - v10;
  if (v22 <= v10) {
    goto LABEL_103;
  }
  uint64_t v14 = v27 + v6;
  char v29 = 8 * (v27 + v6);
  if (v14 > 3) {
    goto LABEL_55;
  }
  unsigned int v31 = ((v28 + ~(-1 << v29)) >> v29) + 1;
  if (HIWORD(v31))
  {
    int v30 = *(_DWORD *)&a2[v14];
    if (!v30) {
      goto LABEL_103;
    }
LABEL_64:
    int v18 = (v30 - 1) << v29;
    if (v14 > 3) {
      int v18 = 0;
    }
    if (v14)
    {
      if (v14 > 3) {
        LODWORD(v14) = 4;
      }
      switch((int)v14)
      {
        case 2:
          goto LABEL_71;
        case 3:
          goto LABEL_72;
        case 4:
          goto LABEL_73;
        default:
          goto LABEL_70;
      }
    }
    goto LABEL_74;
  }
  if (v31 > 0xFF)
  {
    int v30 = *(unsigned __int16 *)&a2[v14];
    if (!*(_WORD *)&a2[v14]) {
      goto LABEL_103;
    }
    goto LABEL_64;
  }
  if (v31 >= 2)
  {
LABEL_55:
    int v30 = a2[v14];
    if (!a2[v14]) {
      goto LABEL_103;
    }
    goto LABEL_64;
  }
LABEL_103:
  if (!v10) {
    goto LABEL_116;
  }
  if (v6 > 3)
  {
    int v45 = a2[v6];
    unsigned int v46 = v45 | 0xFFFFFF00;
    unsigned int v47 = v45 ^ 0xFF;
    char v48 = 8;
    int v49 = 3;
    goto LABEL_111;
  }
  unsigned int v50 = ((1 << v7) + 1) >> v7;
  if (v50 <= 0xFFFD)
  {
    int v49 = v50 + 2;
    if (v50 > 0xFD)
    {
      int v52 = *(unsigned __int16 *)&a2[v6];
      unsigned int v46 = v52 | 0xFFFF0000;
      unsigned int v47 = v52 ^ 0xFFFF;
      char v48 = 16;
    }
    else
    {
      int v51 = a2[v6];
      unsigned int v46 = v51 | 0xFFFFFF00;
      unsigned int v47 = v51 ^ 0xFF;
      char v48 = 8;
    }
LABEL_111:
    unsigned int v53 = (1 << v48) - v49;
    if ((v53 & 0x80000000) == 0)
    {
      if (v53 <= v47) {
        goto LABEL_116;
      }
LABEL_115:
      if (!v46) {
        goto LABEL_116;
      }
LABEL_75:
      if (v6 <= 3)
      {
        unsigned int v33 = ((1 << v7) + 1) >> v7;
        if (v33 > 0xFFFD)
        {
LABEL_81:
          unsigned int v35 = 0x7FFFFFFF;
LABEL_82:
          uint64_t v36 = 1;
          if (v6 > 3)
          {
            int v37 = 1;
LABEL_92:
            size_t v40 = v6 + v36;
            if (v35 <= 1)
            {
              if ((v37 + v6) <= 3)
              {
                unsigned int v42 = (~(-1 << (8 * (v37 + v6))) - v35 + 2) >> (8 * (v37 + v6));
                if (v42 > 0xFFFE)
                {
                  uint64_t v41 = 4;
                }
                else
                {
                  BOOL v43 = v42 != 0;
                  BOOL v44 = v42 >= 0xFF;
                  uint64_t v41 = 2;
                  if (!v44) {
                    uint64_t v41 = v43;
                  }
                }
              }
              else
              {
                uint64_t v41 = 1;
              }
              v40 += v41;
            }
            memcpy(a1, a2, v40);
            return a1;
          }
          unsigned int v38 = ((1 << v7) + 1) >> v7;
          if (v38 > 0xFFFD)
          {
            uint64_t v36 = 4;
          }
          else
          {
            if (v38 < 0xFE)
            {
              uint64_t v36 = 1;
              int v37 = 1;
              goto LABEL_92;
            }
            uint64_t v36 = 2;
          }
          BOOL v39 = v38 > 0xFFFD;
          int v37 = 2;
          if (v39) {
            int v37 = 4;
          }
          goto LABEL_92;
        }
        int v32 = v33 + 2;
        if (v33 > 0xFD)
        {
          char v34 = 16;
LABEL_80:
          unsigned int v35 = (1 << v34) - v32;
          if ((v35 & 0x80000000) == 0) {
            goto LABEL_82;
          }
          goto LABEL_81;
        }
      }
      else
      {
        int v32 = 3;
      }
      char v34 = 8;
      goto LABEL_80;
    }
    goto LABEL_114;
  }
  unsigned int v46 = *(_DWORD *)&a2[v6];
  unsigned int v47 = ~v46;
LABEL_114:
  if (v47 < 0x7FFFFFFF) {
    goto LABEL_115;
  }
  if (v6 > 3) {
    goto LABEL_119;
  }
LABEL_116:
  unsigned int v54 = ((1 << v7) + 1) >> v7;
  if (v54 > 0xFFFD)
  {
    unsigned int v55 = *(_DWORD *)&a2[v6];
    unsigned int v56 = v55 - 2;
    if (v55 < 2) {
      goto LABEL_137;
    }
    goto LABEL_124;
  }
  if (v54 > 0xFD)
  {
    unsigned int v55 = *(unsigned __int16 *)&a2[v6];
    unsigned int v56 = v55 - 2;
    if (v55 < 2) {
      goto LABEL_137;
    }
  }
  else
  {
LABEL_119:
    unsigned int v55 = a2[v6];
    unsigned int v56 = v55 - 2;
    if (v55 < 2) {
      goto LABEL_137;
    }
  }
LABEL_124:
  if (v6 <= 3) {
    uint64_t v57 = v6;
  }
  else {
    uint64_t v57 = 4;
  }
  switch(v57)
  {
    case 1:
      int v58 = *a2;
      if (v6 < 4) {
        goto LABEL_135;
      }
      goto LABEL_136;
    case 2:
      int v58 = *(unsigned __int16 *)a2;
      if (v6 >= 4) {
        goto LABEL_136;
      }
      goto LABEL_135;
    case 3:
      int v58 = *(unsigned __int16 *)a2 | (a2[2] << 16);
      if (v6 >= 4) {
        goto LABEL_136;
      }
      goto LABEL_135;
    case 4:
      int v58 = *(_DWORD *)a2;
      if (v6 < 4) {
LABEL_135:
      }
        v58 |= v56 << v7;
LABEL_136:
      unsigned int v55 = v58 + 2;
      break;
    default:
      break;
  }
LABEL_137:
  if (v55 == 1)
  {
    (*(void (**)(char *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    if (v6 <= 3)
    {
      unsigned int v64 = ((1 << v7) + 1) >> v7;
      if (v64 > 0xFFFD)
      {
        *(_DWORD *)&a1[v6] = 1;
        goto LABEL_168;
      }
      if (v64 > 0xFD)
      {
        *(_WORD *)&a1[v6] = 1;
        goto LABEL_161;
      }
    }
    a1[v6] = 1;
    if (v6 <= 3) {
      goto LABEL_141;
    }
    goto LABEL_153;
  }
  if (v55)
  {
    if (v6 > 3) {
      goto LABEL_151;
    }
    unsigned int v61 = ((1 << v7) + 1) >> v7;
    uint64_t v62 = 2;
    if (v61 > 0xFFFD) {
      uint64_t v62 = 4;
    }
    if (v61 <= 0xFD) {
LABEL_151:
    }
      uint64_t v62 = 1;
    memcpy(a1, a2, v62 + v6);
    if (v6 <= 3)
    {
LABEL_141:
      unsigned int v59 = ((1 << v7) + 1) >> v7;
      if (v59 > 0xFFFD) {
        goto LABEL_168;
      }
      int v60 = v59 + 2;
      if (v59 > 0xFD) {
        goto LABEL_162;
      }
LABEL_154:
      char v63 = 8;
      goto LABEL_163;
    }
LABEL_153:
    int v60 = 3;
    goto LABEL_154;
  }
  (*(void (**)(char *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  if (v6 > 3) {
    goto LABEL_140;
  }
  unsigned int v64 = ((1 << v7) + 1) >> v7;
  if (v64 > 0xFFFD)
  {
    *(_DWORD *)&a1[v6] = 0;
    goto LABEL_168;
  }
  if (v64 <= 0xFD)
  {
LABEL_140:
    a1[v6] = 0;
    if (v6 <= 3) {
      goto LABEL_141;
    }
    goto LABEL_153;
  }
  *(_WORD *)&a1[v6] = 0;
LABEL_161:
  int v60 = v64 + 2;
LABEL_162:
  char v63 = 16;
LABEL_163:
  unsigned int v65 = (1 << v63) - v60;
  if ((v65 & 0x80000000) == 0)
  {
    if (v6 > 3) {
      goto LABEL_172;
    }
    goto LABEL_169;
  }
LABEL_168:
  unsigned int v65 = 0x7FFFFFFF;
  if (v6 > 3)
  {
LABEL_172:
    uint64_t v67 = 1;
    goto LABEL_173;
  }
LABEL_169:
  unsigned int v66 = ((1 << v7) + 1) >> v7;
  uint64_t v67 = 2;
  if (v66 > 0xFFFD) {
    uint64_t v67 = 4;
  }
  if (v66 <= 0xFD) {
    goto LABEL_172;
  }
LABEL_173:
  if (v65 <= 1)
  {
    uint64_t v68 = v67 + v6;
    if (v68 <= 3)
    {
      unsigned int v69 = (~(-1 << (8 * v68)) - v65 + 2) >> (8 * v68);
      if (v69 > 0xFFFE)
      {
        *(_DWORD *)&a1[v68] = 0;
        return a1;
      }
      if (v69 > 0xFE)
      {
        *(_WORD *)&a1[v68] = 0;
        return a1;
      }
      if (!v69) {
        return a1;
      }
    }
    a1[v68] = 0;
  }
  return a1;
}

unsigned __int8 *sub_1B08330F0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  if (v6 > 3)
  {
    int v7 = 3;
LABEL_3:
    char v8 = 8;
    goto LABEL_4;
  }
  unsigned int v10 = ((1 << (8 * v6)) + 1) >> (8 * v6);
  if (v10 > 0xFFFD) {
    goto LABEL_10;
  }
  int v7 = v10 + 2;
  if (v10 <= 0xFD) {
    goto LABEL_3;
  }
  char v8 = 16;
LABEL_4:
  unsigned int v9 = (1 << v8) - v7;
  if ((v9 & 0x80000000) == 0)
  {
    if (v6 > 3) {
      goto LABEL_14;
    }
LABEL_11:
    unsigned int v11 = ((1 << (8 * v6)) + 1) >> (8 * v6);
    uint64_t v12 = 2;
    if (v11 > 0xFFFD) {
      uint64_t v12 = 4;
    }
    if (v11 > 0xFD) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
LABEL_10:
  unsigned int v9 = 0x7FFFFFFF;
  if (v6 <= 3) {
    goto LABEL_11;
  }
LABEL_14:
  uint64_t v12 = 1;
LABEL_15:
  if (v9 > 1) {
    goto LABEL_32;
  }
  uint64_t v13 = v12 + v6;
  char v14 = 8 * v13;
  if (v13 > 3) {
    goto LABEL_17;
  }
  unsigned int v16 = (~(-1 << v14) - v9 + 2) >> v14;
  if (v16 > 0xFFFE)
  {
    int v15 = *(_DWORD *)&a1[v13];
    if (!v15) {
      goto LABEL_31;
    }
    goto LABEL_24;
  }
  if (v16 > 0xFE)
  {
    int v15 = *(unsigned __int16 *)&a1[v13];
    if (!*(_WORD *)&a1[v13]) {
      goto LABEL_31;
    }
    goto LABEL_24;
  }
  if (v16)
  {
LABEL_17:
    int v15 = a1[v13];
    if (!a1[v13]) {
      goto LABEL_31;
    }
LABEL_24:
    int v17 = (v15 - 1) << v14;
    if (v13 > 3) {
      int v17 = 0;
    }
    if (v13)
    {
      if (v13 > 3) {
        LODWORD(v13) = 4;
      }
      switch((int)v13)
      {
        case 2:
LABEL_73:
          LODWORD(v13) = *(unsigned __int16 *)a1;
          break;
        case 3:
LABEL_71:
          LODWORD(v13) = *(unsigned __int16 *)a1 | (a1[2] << 16);
          break;
        case 4:
LABEL_72:
          LODWORD(v13) = *(_DWORD *)a1;
          break;
        default:
LABEL_70:
          LODWORD(v13) = *a1;
          break;
      }
    }
LABEL_74:
    if (v9 + (v13 | v17) == -1) {
      goto LABEL_117;
    }
    goto LABEL_75;
  }
LABEL_31:
  if (!v9) {
    goto LABEL_117;
  }
LABEL_32:
  if (v6 > 3)
  {
    int v18 = 3;
    goto LABEL_36;
  }
  unsigned int v19 = ((1 << (8 * v6)) + 1) >> (8 * v6);
  if (v19 <= 0xFFFD)
  {
    int v18 = v19 + 2;
    if (v19 > 0xFD)
    {
      char v20 = 16;
LABEL_37:
      unsigned int v21 = (1 << v20) - v18;
      if ((v21 & 0x80000000) == 0) {
        goto LABEL_39;
      }
      goto LABEL_38;
    }
LABEL_36:
    char v20 = 8;
    goto LABEL_37;
  }
LABEL_38:
  unsigned int v21 = 0x7FFFFFFF;
LABEL_39:
  if (v6 > 3)
  {
    int v22 = 3;
LABEL_43:
    char v24 = 8;
    goto LABEL_44;
  }
  unsigned int v23 = ((1 << (8 * v6)) + 1) >> (8 * v6);
  if (v23 > 0xFFFD) {
    goto LABEL_47;
  }
  int v22 = v23 + 2;
  if (v23 <= 0xFD) {
    goto LABEL_43;
  }
  char v24 = 16;
LABEL_44:
  unsigned int v9 = (1 << v24) - v22;
  if ((v9 & 0x80000000) == 0)
  {
    if (v6 > 3) {
      goto LABEL_51;
    }
    goto LABEL_48;
  }
LABEL_47:
  unsigned int v9 = 0x7FFFFFFF;
  if (v6 > 3)
  {
LABEL_51:
    uint64_t v26 = 1;
    goto LABEL_52;
  }
LABEL_48:
  unsigned int v25 = ((1 << (8 * v6)) + 1) >> (8 * v6);
  uint64_t v26 = 2;
  if (v25 > 0xFFFD) {
    uint64_t v26 = 4;
  }
  if (v25 <= 0xFD) {
    goto LABEL_51;
  }
LABEL_52:
  if (!v21) {
    goto LABEL_117;
  }
  unsigned int v27 = v21 - v9;
  if (v21 <= v9) {
    goto LABEL_105;
  }
  uint64_t v13 = v26 + v6;
  char v28 = 8 * (v26 + v6);
  if (v13 > 3) {
    goto LABEL_55;
  }
  unsigned int v30 = ((v27 + ~(-1 << v28)) >> v28) + 1;
  if (HIWORD(v30))
  {
    int v29 = *(_DWORD *)&a1[v13];
    if (!v29) {
      goto LABEL_105;
    }
LABEL_64:
    int v17 = (v29 - 1) << v28;
    if (v13 > 3) {
      int v17 = 0;
    }
    if (v13)
    {
      if (v13 > 3) {
        LODWORD(v13) = 4;
      }
      switch((int)v13)
      {
        case 2:
          goto LABEL_73;
        case 3:
          goto LABEL_71;
        case 4:
          goto LABEL_72;
        default:
          goto LABEL_70;
      }
    }
    goto LABEL_74;
  }
  if (v30 > 0xFF)
  {
    int v29 = *(unsigned __int16 *)&a1[v13];
    if (!*(_WORD *)&a1[v13]) {
      goto LABEL_105;
    }
    goto LABEL_64;
  }
  if (v30 >= 2)
  {
LABEL_55:
    int v29 = a1[v13];
    if (!a1[v13]) {
      goto LABEL_105;
    }
    goto LABEL_64;
  }
LABEL_105:
  if (!v9) {
    goto LABEL_117;
  }
  if (v6 <= 3)
  {
    unsigned int v48 = ((1 << (8 * v6)) + 1) >> (8 * v6);
    if (v48 > 0xFFFD)
    {
      unsigned int v43 = *(_DWORD *)&a1[v6];
      unsigned int v44 = ~v43;
LABEL_115:
      if (v44 >= 0x7FFFFFFF) {
        goto LABEL_117;
      }
LABEL_116:
      if (!v43) {
        goto LABEL_117;
      }
LABEL_75:
      if (v6 <= 3)
      {
        unsigned int v34 = ((1 << (8 * v6)) + 1) >> (8 * v6);
        if (v34 > 0xFFFD) {
          goto LABEL_84;
        }
        int v31 = v34 + 2;
        if (v34 > 0xFD)
        {
          char v32 = 16;
LABEL_78:
          unsigned int v33 = (1 << v32) - v31;
          if ((v33 & 0x80000000) == 0)
          {
            if (v6 > 3) {
              goto LABEL_88;
            }
LABEL_85:
            unsigned int v35 = ((1 << (8 * v6)) + 1) >> (8 * v6);
            uint64_t v36 = 2;
            if (v35 > 0xFFFD) {
              uint64_t v36 = 4;
            }
            if (v35 > 0xFD)
            {
LABEL_89:
              if (v33 > 1) {
                goto LABEL_217;
              }
              uint64_t v37 = v36 + v6;
              char v38 = 8 * v37;
              if (v37 <= 3)
              {
                unsigned int v40 = (~(-1 << v38) - v33 + 2) >> v38;
                if (v40 > 0xFFFE)
                {
                  int v39 = *(_DWORD *)&a2[v37];
                  if (!v39) {
                    goto LABEL_216;
                  }
                  goto LABEL_98;
                }
                if (v40 > 0xFE)
                {
                  int v39 = *(unsigned __int16 *)&a2[v37];
                  if (!*(_WORD *)&a2[v37]) {
                    goto LABEL_216;
                  }
                  goto LABEL_98;
                }
                if (!v40)
                {
LABEL_216:
                  if (!v33) {
                    goto LABEL_379;
                  }
LABEL_217:
                  if (v6 <= 3)
                  {
                    unsigned int v81 = ((1 << (8 * v6)) + 1) >> (8 * v6);
                    if (v81 > 0xFFFD)
                    {
LABEL_223:
                      unsigned int v83 = 0x7FFFFFFF;
LABEL_224:
                      if (v6 <= 3)
                      {
                        unsigned int v85 = ((1 << (8 * v6)) + 1) >> (8 * v6);
                        if (v85 > 0xFFFD) {
                          goto LABEL_232;
                        }
                        int v84 = v85 + 2;
                        if (v85 > 0xFD)
                        {
                          char v86 = 16;
LABEL_229:
                          unsigned int v33 = (1 << v86) - v84;
                          if ((v33 & 0x80000000) == 0)
                          {
                            if (v6 > 3) {
                              goto LABEL_236;
                            }
LABEL_233:
                            unsigned int v87 = ((1 << (8 * v6)) + 1) >> (8 * v6);
                            uint64_t v88 = 2;
                            if (v87 > 0xFFFD) {
                              uint64_t v88 = 4;
                            }
                            if (v87 > 0xFD)
                            {
LABEL_237:
                              if (!v83) {
                                goto LABEL_379;
                              }
                              unsigned int v89 = v83 - v33;
                              if (v83 <= v33) {
                                goto LABEL_335;
                              }
                              uint64_t v37 = v88 + v6;
                              char v90 = 8 * (v88 + v6);
                              if (v37 > 3) {
                                goto LABEL_240;
                              }
                              unsigned int v92 = ((v89 + ~(-1 << v90)) >> v90) + 1;
                              if (HIWORD(v92))
                              {
                                int v91 = *(_DWORD *)&a2[v37];
                              }
                              else
                              {
                                if (v92 <= 0xFF)
                                {
                                  if (v92 < 2) {
                                    goto LABEL_335;
                                  }
LABEL_240:
                                  int v91 = a2[v37];
                                  goto LABEL_327;
                                }
                                int v91 = *(unsigned __int16 *)&a2[v37];
                              }
LABEL_327:
                              if (v91)
                              {
                                int v41 = (v91 - 1) << v90;
                                if (v37 > 3) {
                                  int v41 = 0;
                                }
                                if (v37)
                                {
                                  if (v37 > 3) {
                                    LODWORD(v37) = 4;
                                  }
                                  switch((int)v37)
                                  {
                                    case 2:
                                      goto LABEL_341;
                                    case 3:
                                      goto LABEL_342;
                                    case 4:
                                      goto LABEL_343;
                                    default:
                                      goto LABEL_334;
                                  }
                                }
                                goto LABEL_344;
                              }
LABEL_335:
                              if (!v33) {
                                goto LABEL_379;
                              }
                              if (v6 <= 3)
                              {
                                unsigned int v122 = ((1 << (8 * v6)) + 1) >> (8 * v6);
                                if (v122 > 0xFFFD)
                                {
                                  unsigned int v118 = *(_DWORD *)&a2[v6];
                                  unsigned int v119 = ~v118;
                                  goto LABEL_376;
                                }
                                int v121 = v122 + 2;
                                if (v122 > 0xFD)
                                {
                                  int v136 = *(unsigned __int16 *)&a2[v6];
                                  unsigned int v118 = v136 | 0xFFFF0000;
                                  unsigned int v119 = v136 ^ 0xFFFF;
                                  char v120 = 16;
                                }
                                else
                                {
                                  int v123 = a2[v6];
                                  unsigned int v118 = v123 | 0xFFFFFF00;
                                  unsigned int v119 = v123 ^ 0xFF;
                                  char v120 = 8;
                                }
                              }
                              else
                              {
                                int v117 = a2[v6];
                                unsigned int v118 = v117 | 0xFFFFFF00;
                                unsigned int v119 = v117 ^ 0xFF;
                                char v120 = 8;
                                int v121 = 3;
                              }
                              unsigned int v137 = (1 << v120) - v121;
                              if ((v137 & 0x80000000) == 0)
                              {
LABEL_377:
                                if (v137 > v119 && v118) {
                                  goto LABEL_345;
                                }
LABEL_379:
                                if (v6 <= 3)
                                {
                                  unsigned int v138 = ((1 << (8 * v6)) + 1) >> (8 * v6);
                                  if (v138 > 0xFFFD)
                                  {
                                    unsigned int v139 = *(_DWORD *)&a2[v6];
                                    unsigned int v140 = v139 - 2;
                                    if (v139 < 2)
                                    {
LABEL_395:
                                      if (v139 == 1)
                                      {
LABEL_415:
                                        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
                                        if (v6 <= 3)
                                        {
                                          unsigned int v147 = ((1 << (8 * v6)) + 1) >> (8 * v6);
                                          if (v147 > 0xFFFD)
                                          {
                                            *(_DWORD *)&a1[v6] = 1;
                                            goto LABEL_430;
                                          }
                                          if (v147 > 0xFD)
                                          {
                                            *(_WORD *)&a1[v6] = 1;
                                            goto LABEL_423;
                                          }
                                        }
                                        a1[v6] = 1;
                                        if (v6 <= 3) {
                                          goto LABEL_417;
                                        }
                                      }
                                      else
                                      {
LABEL_396:
                                        if (v139)
                                        {
                                          if (v6 > 3) {
                                            goto LABEL_404;
                                          }
                                          unsigned int v143 = ((1 << (8 * v6)) + 1) >> (8 * v6);
                                          uint64_t v144 = 2;
                                          if (v143 > 0xFFFD) {
                                            uint64_t v144 = 4;
                                          }
                                          if (v143 <= 0xFD) {
LABEL_404:
                                          }
                                            uint64_t v144 = 1;
                                          memcpy(a1, a2, v144 + v6);
                                          if (v6 <= 3)
                                          {
LABEL_417:
                                            unsigned int v148 = ((1 << (8 * v6)) + 1) >> (8 * v6);
                                            if (v148 > 0xFFFD) {
                                              goto LABEL_430;
                                            }
                                            int v145 = v148 + 2;
                                            if (v148 > 0xFD) {
                                              goto LABEL_424;
                                            }
LABEL_407:
                                            char v146 = 8;
                                            goto LABEL_425;
                                          }
                                        }
                                        else
                                        {
                                          (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
                                          if (v6 <= 3)
                                          {
                                            unsigned int v147 = ((1 << (8 * v6)) + 1) >> (8 * v6);
                                            if (v147 > 0xFFFD)
                                            {
                                              *(_DWORD *)&a1[v6] = 0;
                                              goto LABEL_430;
                                            }
                                            if (v147 > 0xFD)
                                            {
                                              *(_WORD *)&a1[v6] = 0;
LABEL_423:
                                              int v145 = v147 + 2;
LABEL_424:
                                              char v146 = 16;
LABEL_425:
                                              unsigned int v149 = (1 << v146) - v145;
                                              if ((v149 & 0x80000000) == 0)
                                              {
                                                if (v6 > 3) {
                                                  goto LABEL_434;
                                                }
LABEL_431:
                                                unsigned int v150 = ((1 << (8 * v6)) + 1) >> (8 * v6);
                                                uint64_t v151 = 2;
                                                if (v150 > 0xFFFD) {
                                                  uint64_t v151 = 4;
                                                }
                                                if (v150 > 0xFD)
                                                {
LABEL_435:
                                                  if (v149 <= 1)
                                                  {
                                                    uint64_t v152 = v151 + v6;
                                                    if (v152 <= 3)
                                                    {
                                                      unsigned int v153 = (~(-1 << (8 * v152)) - v149 + 2) >> (8 * v152);
                                                      if (v153 > 0xFFFE)
                                                      {
                                                        *(_DWORD *)&a1[v152] = 0;
                                                        return a1;
                                                      }
                                                      if (v153 > 0xFE)
                                                      {
                                                        *(_WORD *)&a1[v152] = 0;
                                                        return a1;
                                                      }
                                                      if (!v153) {
                                                        return a1;
                                                      }
                                                    }
                                                    a1[v152] = 0;
                                                  }
                                                  return a1;
                                                }
LABEL_434:
                                                uint64_t v151 = 1;
                                                goto LABEL_435;
                                              }
LABEL_430:
                                              unsigned int v149 = 0x7FFFFFFF;
                                              if (v6 > 3) {
                                                goto LABEL_434;
                                              }
                                              goto LABEL_431;
                                            }
                                          }
                                          a1[v6] = 0;
                                          if (v6 <= 3) {
                                            goto LABEL_417;
                                          }
                                        }
                                      }
                                      int v145 = 3;
                                      goto LABEL_407;
                                    }
LABEL_387:
                                    if (v6 <= 3) {
                                      uint64_t v141 = v6;
                                    }
                                    else {
                                      uint64_t v141 = 4;
                                    }
                                    switch(v141)
                                    {
                                      case 1:
                                        int v142 = *a2;
                                        if (v6 >= 4) {
                                          goto LABEL_414;
                                        }
                                        goto LABEL_394;
                                      case 2:
                                        int v142 = *(unsigned __int16 *)a2;
                                        if (v6 < 4) {
                                          goto LABEL_394;
                                        }
                                        goto LABEL_414;
                                      case 3:
                                        int v142 = *(unsigned __int16 *)a2 | (a2[2] << 16);
                                        if (v6 < 4) {
                                          goto LABEL_394;
                                        }
                                        goto LABEL_414;
                                      case 4:
                                        int v142 = *(_DWORD *)a2;
                                        if (v6 < 4)
                                        {
LABEL_394:
                                          unsigned int v139 = (v142 | (v140 << (8 * v6))) + 2;
                                          goto LABEL_395;
                                        }
LABEL_414:
                                        unsigned int v139 = v142 + 2;
                                        if (v139 == 1) {
                                          goto LABEL_415;
                                        }
                                        goto LABEL_396;
                                      default:
                                        goto LABEL_395;
                                    }
                                  }
                                  if (v138 > 0xFD)
                                  {
                                    unsigned int v139 = *(unsigned __int16 *)&a2[v6];
                                    unsigned int v140 = v139 - 2;
                                    if (v139 < 2) {
                                      goto LABEL_395;
                                    }
                                    goto LABEL_387;
                                  }
                                }
                                unsigned int v139 = a2[v6];
                                unsigned int v140 = v139 - 2;
                                if (v139 < 2) {
                                  goto LABEL_395;
                                }
                                goto LABEL_387;
                              }
LABEL_376:
                              unsigned int v137 = 0x7FFFFFFF;
                              goto LABEL_377;
                            }
LABEL_236:
                            uint64_t v88 = 1;
                            goto LABEL_237;
                          }
LABEL_232:
                          unsigned int v33 = 0x7FFFFFFF;
                          if (v6 > 3) {
                            goto LABEL_236;
                          }
                          goto LABEL_233;
                        }
                      }
                      else
                      {
                        int v84 = 3;
                      }
                      char v86 = 8;
                      goto LABEL_229;
                    }
                    int v80 = v81 + 2;
                    if (v81 > 0xFD)
                    {
                      char v82 = 16;
LABEL_222:
                      unsigned int v83 = (1 << v82) - v80;
                      if ((v83 & 0x80000000) == 0) {
                        goto LABEL_224;
                      }
                      goto LABEL_223;
                    }
                  }
                  else
                  {
                    int v80 = 3;
                  }
                  char v82 = 8;
                  goto LABEL_222;
                }
              }
              int v39 = a2[v37];
              if (!a2[v37]) {
                goto LABEL_216;
              }
LABEL_98:
              int v41 = (v39 - 1) << v38;
              if (v37 > 3) {
                int v41 = 0;
              }
              if (v37)
              {
                if (v37 > 3) {
                  LODWORD(v37) = 4;
                }
                switch((int)v37)
                {
                  case 2:
LABEL_341:
                    LODWORD(v37) = *(unsigned __int16 *)a2;
                    break;
                  case 3:
LABEL_342:
                    LODWORD(v37) = *(unsigned __int16 *)a2 | (a2[2] << 16);
                    break;
                  case 4:
LABEL_343:
                    LODWORD(v37) = *(_DWORD *)a2;
                    break;
                  default:
LABEL_334:
                    LODWORD(v37) = *a2;
                    break;
                }
              }
LABEL_344:
              if (v33 + (v37 | v41) != -1) {
                goto LABEL_345;
              }
              goto LABEL_379;
            }
LABEL_88:
            uint64_t v36 = 1;
            goto LABEL_89;
          }
LABEL_84:
          unsigned int v33 = 0x7FFFFFFF;
          if (v6 > 3) {
            goto LABEL_88;
          }
          goto LABEL_85;
        }
      }
      else
      {
        int v31 = 3;
      }
      char v32 = 8;
      goto LABEL_78;
    }
    int v46 = v48 + 2;
    if (v48 > 0xFD)
    {
      int v79 = *(unsigned __int16 *)&a1[v6];
      unsigned int v43 = v79 | 0xFFFF0000;
      unsigned int v44 = v79 ^ 0xFFFF;
      char v45 = 16;
    }
    else
    {
      int v49 = a1[v6];
      unsigned int v43 = v49 | 0xFFFFFF00;
      unsigned int v44 = v49 ^ 0xFF;
      char v45 = 8;
    }
  }
  else
  {
    int v42 = a1[v6];
    unsigned int v43 = v42 | 0xFFFFFF00;
    unsigned int v44 = v42 ^ 0xFF;
    char v45 = 8;
    int v46 = 3;
  }
  unsigned int v47 = (1 << v45) - v46;
  if ((v47 & 0x80000000) != 0) {
    goto LABEL_115;
  }
  if (v47 > v44) {
    goto LABEL_116;
  }
LABEL_117:
  if (v6 > 3)
  {
    int v50 = 3;
LABEL_121:
    char v52 = 8;
    goto LABEL_122;
  }
  unsigned int v51 = ((1 << (8 * v6)) + 1) >> (8 * v6);
  if (v51 > 0xFFFD) {
    goto LABEL_125;
  }
  int v50 = v51 + 2;
  if (v51 <= 0xFD) {
    goto LABEL_121;
  }
  char v52 = 16;
LABEL_122:
  unsigned int v53 = (1 << v52) - v50;
  if ((v53 & 0x80000000) == 0)
  {
    if (v6 > 3) {
      goto LABEL_129;
    }
LABEL_126:
    unsigned int v54 = ((1 << (8 * v6)) + 1) >> (8 * v6);
    uint64_t v55 = 2;
    if (v54 > 0xFFFD) {
      uint64_t v55 = 4;
    }
    if (v54 > 0xFD) {
      goto LABEL_130;
    }
    goto LABEL_129;
  }
LABEL_125:
  unsigned int v53 = 0x7FFFFFFF;
  if (v6 <= 3) {
    goto LABEL_126;
  }
LABEL_129:
  uint64_t v55 = 1;
LABEL_130:
  if (v53 > 1) {
    goto LABEL_148;
  }
  uint64_t v56 = v55 + v6;
  char v57 = 8 * v56;
  if (v56 > 3) {
    goto LABEL_132;
  }
  unsigned int v59 = (~(-1 << v57) - v53 + 2) >> v57;
  if (v59 > 0xFFFE)
  {
    int v58 = *(_DWORD *)&a2[v56];
    if (!v58) {
      goto LABEL_147;
    }
    goto LABEL_140;
  }
  if (v59 > 0xFE)
  {
    int v58 = *(unsigned __int16 *)&a2[v56];
    if (!*(_WORD *)&a2[v56]) {
      goto LABEL_147;
    }
    goto LABEL_140;
  }
  if (v59)
  {
LABEL_132:
    int v58 = a2[v56];
    if (!a2[v56]) {
      goto LABEL_147;
    }
LABEL_140:
    int v60 = (v58 - 1) << v57;
    if (v56 > 3) {
      int v60 = 0;
    }
    if (v56)
    {
      if (v56 > 3) {
        LODWORD(v56) = 4;
      }
      switch((int)v56)
      {
        case 2:
LABEL_189:
          LODWORD(v56) = *(unsigned __int16 *)a2;
          break;
        case 3:
LABEL_187:
          LODWORD(v56) = *(unsigned __int16 *)a2 | (a2[2] << 16);
          break;
        case 4:
LABEL_188:
          LODWORD(v56) = *(_DWORD *)a2;
          break;
        default:
LABEL_186:
          LODWORD(v56) = *a2;
          break;
      }
    }
LABEL_190:
    if (v53 + (v56 | v60) == -1) {
      goto LABEL_260;
    }
    goto LABEL_191;
  }
LABEL_147:
  if (!v53) {
    goto LABEL_260;
  }
LABEL_148:
  if (v6 > 3)
  {
    int v61 = 3;
    goto LABEL_152;
  }
  unsigned int v62 = ((1 << (8 * v6)) + 1) >> (8 * v6);
  if (v62 <= 0xFFFD)
  {
    int v61 = v62 + 2;
    if (v62 > 0xFD)
    {
      char v63 = 16;
LABEL_153:
      unsigned int v64 = (1 << v63) - v61;
      if ((v64 & 0x80000000) == 0) {
        goto LABEL_155;
      }
      goto LABEL_154;
    }
LABEL_152:
    char v63 = 8;
    goto LABEL_153;
  }
LABEL_154:
  unsigned int v64 = 0x7FFFFFFF;
LABEL_155:
  if (v6 > 3)
  {
    int v65 = 3;
LABEL_159:
    char v67 = 8;
    goto LABEL_160;
  }
  unsigned int v66 = ((1 << (8 * v6)) + 1) >> (8 * v6);
  if (v66 > 0xFFFD) {
    goto LABEL_163;
  }
  int v65 = v66 + 2;
  if (v66 <= 0xFD) {
    goto LABEL_159;
  }
  char v67 = 16;
LABEL_160:
  unsigned int v53 = (1 << v67) - v65;
  if ((v53 & 0x80000000) == 0)
  {
    if (v6 > 3) {
      goto LABEL_167;
    }
    goto LABEL_164;
  }
LABEL_163:
  unsigned int v53 = 0x7FFFFFFF;
  if (v6 > 3)
  {
LABEL_167:
    uint64_t v69 = 1;
    goto LABEL_168;
  }
LABEL_164:
  unsigned int v68 = ((1 << (8 * v6)) + 1) >> (8 * v6);
  uint64_t v69 = 2;
  if (v68 > 0xFFFD) {
    uint64_t v69 = 4;
  }
  if (v68 <= 0xFD) {
    goto LABEL_167;
  }
LABEL_168:
  if (!v64) {
    goto LABEL_260;
  }
  unsigned int v70 = v64 - v53;
  if (v64 <= v53) {
    goto LABEL_248;
  }
  uint64_t v56 = v69 + v6;
  char v71 = 8 * (v69 + v6);
  if (v56 > 3) {
    goto LABEL_171;
  }
  unsigned int v73 = ((v70 + ~(-1 << v71)) >> v71) + 1;
  if (HIWORD(v73))
  {
    int v72 = *(_DWORD *)&a2[v56];
    if (!v72) {
      goto LABEL_248;
    }
LABEL_180:
    int v60 = (v72 - 1) << v71;
    if (v56 > 3) {
      int v60 = 0;
    }
    if (v56)
    {
      if (v56 > 3) {
        LODWORD(v56) = 4;
      }
      switch((int)v56)
      {
        case 2:
          goto LABEL_189;
        case 3:
          goto LABEL_187;
        case 4:
          goto LABEL_188;
        default:
          goto LABEL_186;
      }
    }
    goto LABEL_190;
  }
  if (v73 > 0xFF)
  {
    int v72 = *(unsigned __int16 *)&a2[v56];
    if (!*(_WORD *)&a2[v56]) {
      goto LABEL_248;
    }
    goto LABEL_180;
  }
  if (v73 >= 2)
  {
LABEL_171:
    int v72 = a2[v56];
    if (!a2[v56]) {
      goto LABEL_248;
    }
    goto LABEL_180;
  }
LABEL_248:
  if (!v53) {
    goto LABEL_260;
  }
  if (v6 <= 3)
  {
    unsigned int v99 = ((1 << (8 * v6)) + 1) >> (8 * v6);
    if (v99 > 0xFFFD)
    {
      unsigned int v94 = *(_DWORD *)&a2[v6];
      unsigned int v95 = ~v94;
LABEL_258:
      if (v95 >= 0x7FFFFFFF) {
        goto LABEL_260;
      }
LABEL_259:
      if (!v94) {
        goto LABEL_260;
      }
LABEL_191:
      if (v6 <= 3)
      {
        unsigned int v74 = ((1 << (8 * v6)) + 1) >> (8 * v6);
        if (v74 > 0xFFFD)
        {
          unsigned int v75 = *(_DWORD *)&a1[v6];
          unsigned int v76 = v75 - 2;
          if (v75 < 2)
          {
LABEL_208:
            if (v75 <= 1) {
LABEL_209:
            }
              (*(void (**)(unsigned __int8 *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
LABEL_345:
            if (v6 <= 3)
            {
              unsigned int v127 = ((1 << (8 * v6)) + 1) >> (8 * v6);
              if (v127 > 0xFFFD)
              {
LABEL_353:
                unsigned int v126 = 0x7FFFFFFF;
LABEL_354:
                uint64_t v128 = 1;
                if (v6 > 3)
                {
                  int v129 = 1;
                  goto LABEL_363;
                }
                unsigned int v130 = ((1 << (8 * v6)) + 1) >> (8 * v6);
                if (v130 > 0xFFFD)
                {
                  uint64_t v128 = 4;
                }
                else
                {
                  if (v130 < 0xFE)
                  {
                    uint64_t v128 = 1;
                    int v129 = 1;
LABEL_363:
                    size_t v113 = v6 + v128;
                    if (v126 <= 1)
                    {
                      if ((v129 + v6) <= 3)
                      {
                        unsigned int v133 = (~(-1 << (8 * (v129 + v6))) - v126 + 2) >> (8 * (v129 + v6));
                        if (v133 > 0xFFFE)
                        {
                          uint64_t v132 = 4;
                        }
                        else
                        {
                          BOOL v134 = v133 != 0;
                          BOOL v135 = v133 >= 0xFF;
                          uint64_t v132 = 2;
                          if (!v135) {
                            uint64_t v132 = v134;
                          }
                        }
                      }
                      else
                      {
                        uint64_t v132 = 1;
                      }
                      v113 += v132;
                    }
                    goto LABEL_372;
                  }
                  uint64_t v128 = 2;
                }
                BOOL v131 = v130 > 0xFFFD;
                int v129 = 2;
                if (v131) {
                  int v129 = 4;
                }
                goto LABEL_363;
              }
              int v124 = v127 + 2;
              if (v127 > 0xFD)
              {
                char v125 = 16;
LABEL_348:
                unsigned int v126 = (1 << v125) - v124;
                if ((v126 & 0x80000000) == 0) {
                  goto LABEL_354;
                }
                goto LABEL_353;
              }
            }
            else
            {
              int v124 = 3;
            }
            char v125 = 8;
            goto LABEL_348;
          }
LABEL_199:
          if (v6 <= 3) {
            uint64_t v77 = v6;
          }
          else {
            uint64_t v77 = 4;
          }
          switch(v77)
          {
            case 1:
              int v78 = *a1;
              if (v6 >= 4) {
                goto LABEL_213;
              }
              goto LABEL_207;
            case 2:
              int v78 = *(unsigned __int16 *)a1;
              if (v6 < 4) {
                goto LABEL_207;
              }
              goto LABEL_213;
            case 3:
              int v78 = *(unsigned __int16 *)a1 | (a1[2] << 16);
              if (v6 < 4) {
                goto LABEL_207;
              }
              goto LABEL_213;
            case 4:
              int v78 = *(_DWORD *)a1;
              if (v6 < 4)
              {
LABEL_207:
                unsigned int v75 = (v78 | (v76 << (8 * v6))) + 2;
                goto LABEL_208;
              }
LABEL_213:
              if ((v78 + 2) > 1) {
                goto LABEL_345;
              }
              goto LABEL_209;
            default:
              goto LABEL_208;
          }
        }
        if (v74 > 0xFD)
        {
          unsigned int v75 = *(unsigned __int16 *)&a1[v6];
          unsigned int v76 = v75 - 2;
          if (v75 < 2) {
            goto LABEL_208;
          }
          goto LABEL_199;
        }
      }
      unsigned int v75 = a1[v6];
      unsigned int v76 = v75 - 2;
      if (v75 < 2) {
        goto LABEL_208;
      }
      goto LABEL_199;
    }
    int v97 = v99 + 2;
    if (v99 > 0xFD)
    {
      int v116 = *(unsigned __int16 *)&a2[v6];
      unsigned int v94 = v116 | 0xFFFF0000;
      unsigned int v95 = v116 ^ 0xFFFF;
      char v96 = 16;
    }
    else
    {
      int v100 = a2[v6];
      unsigned int v94 = v100 | 0xFFFFFF00;
      unsigned int v95 = v100 ^ 0xFF;
      char v96 = 8;
    }
  }
  else
  {
    int v93 = a2[v6];
    unsigned int v94 = v93 | 0xFFFFFF00;
    unsigned int v95 = v93 ^ 0xFF;
    char v96 = 8;
    int v97 = 3;
  }
  unsigned int v98 = (1 << v96) - v97;
  if ((v98 & 0x80000000) != 0) {
    goto LABEL_258;
  }
  if (v98 > v95) {
    goto LABEL_259;
  }
LABEL_260:
  if (a1 == a2) {
    return a1;
  }
  if (v6 > 3)
  {
LABEL_262:
    unsigned int v101 = a1[v6];
    unsigned int v102 = v101 - 2;
    if (v101 >= 2) {
      goto LABEL_269;
    }
    goto LABEL_277;
  }
  unsigned int v103 = ((1 << (8 * v6)) + 1) >> (8 * v6);
  if (v103 <= 0xFFFD)
  {
    if (v103 > 0xFD)
    {
      unsigned int v101 = *(unsigned __int16 *)&a1[v6];
      unsigned int v102 = v101 - 2;
      if (v101 >= 2)
      {
LABEL_269:
        if (v6 <= 3) {
          uint64_t v104 = v6;
        }
        else {
          uint64_t v104 = 4;
        }
        switch(v104)
        {
          case 1:
            int v105 = *a1;
            if (v6 >= 4) {
              goto LABEL_296;
            }
            goto LABEL_276;
          case 2:
            int v105 = *(unsigned __int16 *)a1;
            if (v6 < 4) {
              goto LABEL_276;
            }
            goto LABEL_296;
          case 3:
            int v105 = *(unsigned __int16 *)a1 | (a1[2] << 16);
            if (v6 < 4) {
              goto LABEL_276;
            }
            goto LABEL_296;
          case 4:
            int v105 = *(_DWORD *)a1;
            if (v6 < 4)
            {
LABEL_276:
              unsigned int v101 = (v105 | (v102 << (8 * v6))) + 2;
              goto LABEL_277;
            }
LABEL_296:
            if ((v105 + 2) > 1) {
              goto LABEL_279;
            }
            goto LABEL_278;
          default:
            goto LABEL_277;
        }
      }
      goto LABEL_277;
    }
    goto LABEL_262;
  }
  unsigned int v101 = *(_DWORD *)&a1[v6];
  unsigned int v102 = v101 - 2;
  if (v101 >= 2) {
    goto LABEL_269;
  }
LABEL_277:
  if (v101 <= 1) {
LABEL_278:
  }
    (*(void (**)(unsigned __int8 *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
LABEL_279:
  if (v6 > 3) {
    goto LABEL_280;
  }
  unsigned int v108 = ((1 << (8 * v6)) + 1) >> (8 * v6);
  if (v108 > 0xFFFD)
  {
    unsigned int v106 = *(_DWORD *)&a2[v6];
    unsigned int v107 = v106 - 2;
    if (v106 >= 2) {
      goto LABEL_287;
    }
    goto LABEL_300;
  }
  if (v108 <= 0xFD)
  {
LABEL_280:
    unsigned int v106 = a2[v6];
    unsigned int v107 = v106 - 2;
    if (v106 >= 2) {
      goto LABEL_287;
    }
  }
  else
  {
    unsigned int v106 = *(unsigned __int16 *)&a2[v6];
    unsigned int v107 = v106 - 2;
    if (v106 >= 2)
    {
LABEL_287:
      if (v6 <= 3) {
        uint64_t v109 = v6;
      }
      else {
        uint64_t v109 = 4;
      }
      switch(v109)
      {
        case 1:
          int v110 = *a2;
          if (v6 >= 4) {
            goto LABEL_316;
          }
          goto LABEL_299;
        case 2:
          int v110 = *(unsigned __int16 *)a2;
          if (v6 < 4) {
            goto LABEL_299;
          }
          goto LABEL_316;
        case 3:
          int v110 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v6 < 4) {
            goto LABEL_299;
          }
          goto LABEL_316;
        case 4:
          int v110 = *(_DWORD *)a2;
          if (v6 < 4)
          {
LABEL_299:
            unsigned int v106 = (v110 | (v107 << (8 * v6))) + 2;
            break;
          }
LABEL_316:
          unsigned int v106 = v110 + 2;
          if (v106 == 1) {
            goto LABEL_317;
          }
          goto LABEL_301;
        default:
          break;
      }
    }
  }
LABEL_300:
  if (v106 == 1)
  {
LABEL_317:
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    if (v6 > 3) {
      goto LABEL_318;
    }
    unsigned int v115 = ((1 << (8 * v6)) + 1) >> (8 * v6);
    if (v115 > 0xFFFD)
    {
      *(_DWORD *)&a1[v6] = 1;
      return a1;
    }
    if (v115 <= 0xFD) {
LABEL_318:
    }
      a1[v6] = 1;
    else {
      *(_WORD *)&a1[v6] = 1;
    }
    return a1;
  }
LABEL_301:
  if (v106)
  {
    if (v6 > 3) {
      goto LABEL_308;
    }
    unsigned int v111 = ((1 << (8 * v6)) + 1) >> (8 * v6);
    uint64_t v112 = 2;
    if (v111 > 0xFFFD) {
      uint64_t v112 = 4;
    }
    if (v111 <= 0xFD) {
LABEL_308:
    }
      uint64_t v112 = 1;
    size_t v113 = v112 + v6;
LABEL_372:
    memcpy(a1, a2, v113);
    return a1;
  }
  (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  if (v6 > 3) {
    goto LABEL_303;
  }
  unsigned int v114 = ((1 << (8 * v6)) + 1) >> (8 * v6);
  if (v114 > 0xFFFD)
  {
    *(_DWORD *)&a1[v6] = 0;
    return a1;
  }
  if (v114 <= 0xFD) {
LABEL_303:
  }
    a1[v6] = 0;
  else {
    *(_WORD *)&a1[v6] = 0;
  }
  return a1;
}

char *sub_1B08346C8(char *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  char v7 = 8 * v6;
  if (v6 > 3)
  {
    int v8 = 3;
LABEL_3:
    char v9 = 8;
    goto LABEL_4;
  }
  unsigned int v11 = ((1 << v7) + 1) >> v7;
  if (v11 > 0xFFFD) {
    goto LABEL_10;
  }
  int v8 = v11 + 2;
  if (v11 <= 0xFD) {
    goto LABEL_3;
  }
  char v9 = 16;
LABEL_4:
  unsigned int v10 = (1 << v9) - v8;
  if ((v10 & 0x80000000) == 0)
  {
    if (v6 > 3) {
      goto LABEL_14;
    }
LABEL_11:
    unsigned int v12 = ((1 << v7) + 1) >> v7;
    uint64_t v13 = 2;
    if (v12 > 0xFFFD) {
      uint64_t v13 = 4;
    }
    if (v12 > 0xFD) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
LABEL_10:
  unsigned int v10 = 0x7FFFFFFF;
  if (v6 <= 3) {
    goto LABEL_11;
  }
LABEL_14:
  uint64_t v13 = 1;
LABEL_15:
  if (v10 > 1) {
    goto LABEL_32;
  }
  uint64_t v14 = v13 + v6;
  char v15 = 8 * v14;
  if (v14 > 3) {
    goto LABEL_17;
  }
  unsigned int v17 = (~(-1 << v15) - v10 + 2) >> v15;
  if (v17 > 0xFFFE)
  {
    int v16 = *(_DWORD *)&a2[v14];
    if (!v16) {
      goto LABEL_31;
    }
    goto LABEL_24;
  }
  if (v17 > 0xFE)
  {
    int v16 = *(unsigned __int16 *)&a2[v14];
    if (!*(_WORD *)&a2[v14]) {
      goto LABEL_31;
    }
    goto LABEL_24;
  }
  if (v17)
  {
LABEL_17:
    int v16 = a2[v14];
    if (!a2[v14]) {
      goto LABEL_31;
    }
LABEL_24:
    int v18 = (v16 - 1) << v15;
    if (v14 > 3) {
      int v18 = 0;
    }
    if (v14)
    {
      if (v14 > 3) {
        LODWORD(v14) = 4;
      }
      switch((int)v14)
      {
        case 2:
LABEL_71:
          LODWORD(v14) = *(unsigned __int16 *)a2;
          break;
        case 3:
LABEL_72:
          LODWORD(v14) = *(unsigned __int16 *)a2 | (a2[2] << 16);
          break;
        case 4:
LABEL_73:
          LODWORD(v14) = *(_DWORD *)a2;
          break;
        default:
LABEL_70:
          LODWORD(v14) = *a2;
          break;
      }
    }
LABEL_74:
    if (v10 + (v14 | v18) != -1) {
      goto LABEL_75;
    }
    goto LABEL_116;
  }
LABEL_31:
  if (!v10) {
    goto LABEL_116;
  }
LABEL_32:
  if (v6 > 3)
  {
    int v19 = 3;
    goto LABEL_36;
  }
  unsigned int v20 = ((1 << v7) + 1) >> v7;
  if (v20 <= 0xFFFD)
  {
    int v19 = v20 + 2;
    if (v20 > 0xFD)
    {
      char v21 = 16;
LABEL_37:
      unsigned int v22 = (1 << v21) - v19;
      if ((v22 & 0x80000000) == 0) {
        goto LABEL_39;
      }
      goto LABEL_38;
    }
LABEL_36:
    char v21 = 8;
    goto LABEL_37;
  }
LABEL_38:
  unsigned int v22 = 0x7FFFFFFF;
LABEL_39:
  if (v6 > 3)
  {
    int v23 = 3;
LABEL_43:
    char v25 = 8;
    goto LABEL_44;
  }
  unsigned int v24 = ((1 << v7) + 1) >> v7;
  if (v24 > 0xFFFD) {
    goto LABEL_47;
  }
  int v23 = v24 + 2;
  if (v24 <= 0xFD) {
    goto LABEL_43;
  }
  char v25 = 16;
LABEL_44:
  unsigned int v10 = (1 << v25) - v23;
  if ((v10 & 0x80000000) == 0)
  {
    if (v6 > 3) {
      goto LABEL_51;
    }
    goto LABEL_48;
  }
LABEL_47:
  unsigned int v10 = 0x7FFFFFFF;
  if (v6 > 3)
  {
LABEL_51:
    uint64_t v27 = 1;
    goto LABEL_52;
  }
LABEL_48:
  unsigned int v26 = ((1 << v7) + 1) >> v7;
  uint64_t v27 = 2;
  if (v26 > 0xFFFD) {
    uint64_t v27 = 4;
  }
  if (v26 <= 0xFD) {
    goto LABEL_51;
  }
LABEL_52:
  if (!v22) {
    goto LABEL_116;
  }
  unsigned int v28 = v22 - v10;
  if (v22 <= v10) {
    goto LABEL_103;
  }
  uint64_t v14 = v27 + v6;
  char v29 = 8 * (v27 + v6);
  if (v14 > 3) {
    goto LABEL_55;
  }
  unsigned int v31 = ((v28 + ~(-1 << v29)) >> v29) + 1;
  if (HIWORD(v31))
  {
    int v30 = *(_DWORD *)&a2[v14];
    if (!v30) {
      goto LABEL_103;
    }
LABEL_64:
    int v18 = (v30 - 1) << v29;
    if (v14 > 3) {
      int v18 = 0;
    }
    if (v14)
    {
      if (v14 > 3) {
        LODWORD(v14) = 4;
      }
      switch((int)v14)
      {
        case 2:
          goto LABEL_71;
        case 3:
          goto LABEL_72;
        case 4:
          goto LABEL_73;
        default:
          goto LABEL_70;
      }
    }
    goto LABEL_74;
  }
  if (v31 > 0xFF)
  {
    int v30 = *(unsigned __int16 *)&a2[v14];
    if (!*(_WORD *)&a2[v14]) {
      goto LABEL_103;
    }
    goto LABEL_64;
  }
  if (v31 >= 2)
  {
LABEL_55:
    int v30 = a2[v14];
    if (!a2[v14]) {
      goto LABEL_103;
    }
    goto LABEL_64;
  }
LABEL_103:
  if (!v10) {
    goto LABEL_116;
  }
  if (v6 > 3)
  {
    int v45 = a2[v6];
    unsigned int v46 = v45 | 0xFFFFFF00;
    unsigned int v47 = v45 ^ 0xFF;
    char v48 = 8;
    int v49 = 3;
    goto LABEL_111;
  }
  unsigned int v50 = ((1 << v7) + 1) >> v7;
  if (v50 <= 0xFFFD)
  {
    int v49 = v50 + 2;
    if (v50 > 0xFD)
    {
      int v52 = *(unsigned __int16 *)&a2[v6];
      unsigned int v46 = v52 | 0xFFFF0000;
      unsigned int v47 = v52 ^ 0xFFFF;
      char v48 = 16;
    }
    else
    {
      int v51 = a2[v6];
      unsigned int v46 = v51 | 0xFFFFFF00;
      unsigned int v47 = v51 ^ 0xFF;
      char v48 = 8;
    }
LABEL_111:
    unsigned int v53 = (1 << v48) - v49;
    if ((v53 & 0x80000000) == 0)
    {
      if (v53 <= v47) {
        goto LABEL_116;
      }
LABEL_115:
      if (!v46) {
        goto LABEL_116;
      }
LABEL_75:
      if (v6 <= 3)
      {
        unsigned int v33 = ((1 << v7) + 1) >> v7;
        if (v33 > 0xFFFD)
        {
LABEL_81:
          unsigned int v35 = 0x7FFFFFFF;
LABEL_82:
          uint64_t v36 = 1;
          if (v6 > 3)
          {
            int v37 = 1;
LABEL_92:
            size_t v40 = v6 + v36;
            if (v35 <= 1)
            {
              if ((v37 + v6) <= 3)
              {
                unsigned int v42 = (~(-1 << (8 * (v37 + v6))) - v35 + 2) >> (8 * (v37 + v6));
                if (v42 > 0xFFFE)
                {
                  uint64_t v41 = 4;
                }
                else
                {
                  BOOL v43 = v42 != 0;
                  BOOL v44 = v42 >= 0xFF;
                  uint64_t v41 = 2;
                  if (!v44) {
                    uint64_t v41 = v43;
                  }
                }
              }
              else
              {
                uint64_t v41 = 1;
              }
              v40 += v41;
            }
            memcpy(a1, a2, v40);
            return a1;
          }
          unsigned int v38 = ((1 << v7) + 1) >> v7;
          if (v38 > 0xFFFD)
          {
            uint64_t v36 = 4;
          }
          else
          {
            if (v38 < 0xFE)
            {
              uint64_t v36 = 1;
              int v37 = 1;
              goto LABEL_92;
            }
            uint64_t v36 = 2;
          }
          BOOL v39 = v38 > 0xFFFD;
          int v37 = 2;
          if (v39) {
            int v37 = 4;
          }
          goto LABEL_92;
        }
        int v32 = v33 + 2;
        if (v33 > 0xFD)
        {
          char v34 = 16;
LABEL_80:
          unsigned int v35 = (1 << v34) - v32;
          if ((v35 & 0x80000000) == 0) {
            goto LABEL_82;
          }
          goto LABEL_81;
        }
      }
      else
      {
        int v32 = 3;
      }
      char v34 = 8;
      goto LABEL_80;
    }
    goto LABEL_114;
  }
  unsigned int v46 = *(_DWORD *)&a2[v6];
  unsigned int v47 = ~v46;
LABEL_114:
  if (v47 < 0x7FFFFFFF) {
    goto LABEL_115;
  }
  if (v6 > 3) {
    goto LABEL_119;
  }
LABEL_116:
  unsigned int v54 = ((1 << v7) + 1) >> v7;
  if (v54 > 0xFFFD)
  {
    unsigned int v55 = *(_DWORD *)&a2[v6];
    unsigned int v56 = v55 - 2;
    if (v55 < 2) {
      goto LABEL_137;
    }
    goto LABEL_124;
  }
  if (v54 > 0xFD)
  {
    unsigned int v55 = *(unsigned __int16 *)&a2[v6];
    unsigned int v56 = v55 - 2;
    if (v55 < 2) {
      goto LABEL_137;
    }
  }
  else
  {
LABEL_119:
    unsigned int v55 = a2[v6];
    unsigned int v56 = v55 - 2;
    if (v55 < 2) {
      goto LABEL_137;
    }
  }
LABEL_124:
  if (v6 <= 3) {
    uint64_t v57 = v6;
  }
  else {
    uint64_t v57 = 4;
  }
  switch(v57)
  {
    case 1:
      int v58 = *a2;
      if (v6 < 4) {
        goto LABEL_135;
      }
      goto LABEL_136;
    case 2:
      int v58 = *(unsigned __int16 *)a2;
      if (v6 >= 4) {
        goto LABEL_136;
      }
      goto LABEL_135;
    case 3:
      int v58 = *(unsigned __int16 *)a2 | (a2[2] << 16);
      if (v6 >= 4) {
        goto LABEL_136;
      }
      goto LABEL_135;
    case 4:
      int v58 = *(_DWORD *)a2;
      if (v6 < 4) {
LABEL_135:
      }
        v58 |= v56 << v7;
LABEL_136:
      unsigned int v55 = v58 + 2;
      break;
    default:
      break;
  }
LABEL_137:
  if (v55 == 1)
  {
    (*(void (**)(char *, unsigned __int8 *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
    if (v6 <= 3)
    {
      unsigned int v64 = ((1 << v7) + 1) >> v7;
      if (v64 > 0xFFFD)
      {
        *(_DWORD *)&a1[v6] = 1;
        goto LABEL_168;
      }
      if (v64 > 0xFD)
      {
        *(_WORD *)&a1[v6] = 1;
        goto LABEL_161;
      }
    }
    a1[v6] = 1;
    if (v6 <= 3) {
      goto LABEL_141;
    }
    goto LABEL_153;
  }
  if (v55)
  {
    if (v6 > 3) {
      goto LABEL_151;
    }
    unsigned int v61 = ((1 << v7) + 1) >> v7;
    uint64_t v62 = 2;
    if (v61 > 0xFFFD) {
      uint64_t v62 = 4;
    }
    if (v61 <= 0xFD) {
LABEL_151:
    }
      uint64_t v62 = 1;
    memcpy(a1, a2, v62 + v6);
    if (v6 <= 3)
    {
LABEL_141:
      unsigned int v59 = ((1 << v7) + 1) >> v7;
      if (v59 > 0xFFFD) {
        goto LABEL_168;
      }
      int v60 = v59 + 2;
      if (v59 > 0xFD) {
        goto LABEL_162;
      }
LABEL_154:
      char v63 = 8;
      goto LABEL_163;
    }
LABEL_153:
    int v60 = 3;
    goto LABEL_154;
  }
  (*(void (**)(char *, unsigned __int8 *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
  if (v6 > 3) {
    goto LABEL_140;
  }
  unsigned int v64 = ((1 << v7) + 1) >> v7;
  if (v64 > 0xFFFD)
  {
    *(_DWORD *)&a1[v6] = 0;
    goto LABEL_168;
  }
  if (v64 <= 0xFD)
  {
LABEL_140:
    a1[v6] = 0;
    if (v6 <= 3) {
      goto LABEL_141;
    }
    goto LABEL_153;
  }
  *(_WORD *)&a1[v6] = 0;
LABEL_161:
  int v60 = v64 + 2;
LABEL_162:
  char v63 = 16;
LABEL_163:
  unsigned int v65 = (1 << v63) - v60;
  if ((v65 & 0x80000000) == 0)
  {
    if (v6 > 3) {
      goto LABEL_172;
    }
    goto LABEL_169;
  }
LABEL_168:
  unsigned int v65 = 0x7FFFFFFF;
  if (v6 > 3)
  {
LABEL_172:
    uint64_t v67 = 1;
    goto LABEL_173;
  }
LABEL_169:
  unsigned int v66 = ((1 << v7) + 1) >> v7;
  uint64_t v67 = 2;
  if (v66 > 0xFFFD) {
    uint64_t v67 = 4;
  }
  if (v66 <= 0xFD) {
    goto LABEL_172;
  }
LABEL_173:
  if (v65 <= 1)
  {
    uint64_t v68 = v67 + v6;
    if (v68 <= 3)
    {
      unsigned int v69 = (~(-1 << (8 * v68)) - v65 + 2) >> (8 * v68);
      if (v69 > 0xFFFE)
      {
        *(_DWORD *)&a1[v68] = 0;
        return a1;
      }
      if (v69 > 0xFE)
      {
        *(_WORD *)&a1[v68] = 0;
        return a1;
      }
      if (!v69) {
        return a1;
      }
    }
    a1[v68] = 0;
  }
  return a1;
}