uint64_t storeEnumTagSinglePayload for PECDPParameters(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)result = (a2 - 1);
    if (!a3) {
      return result;
    }
    v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    v3 = 0;
  }
  *(unsigned char *)(result + 40) = v3;
  return result;
}

ValueMetadata *type metadata accessor for PECDPParameters()
{
  return &type metadata for PECDPParameters;
}

__n128 __swift_memcpy41_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for StaticPECParameters(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for StaticPECParameters(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 40) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 41) = v3;
  return result;
}

ValueMetadata *type metadata accessor for StaticPECParameters()
{
  return &type metadata for StaticPECParameters;
}

void *initializeBufferWithCopyOfBuffer for UseCaseGroup(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *a1 = *a2;
    a1 = (void *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for HE.SecurityLevel();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *(void *)((char *)a1 + a3[5]) = *(void *)((char *)a2 + a3[5]);
    *(void *)((char *)a1 + v8) = *(void *)((char *)a2 + v8);
    uint64_t v9 = a3[8];
    *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
    *(void *)((char *)a1 + v9) = *(void *)((char *)a2 + v9);
    uint64_t v10 = a3[9];
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    swift_bridgeObjectRetain();
    v13 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
    uint64_t v14 = *((void *)v13 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v14 + 48))(v12, 2, v13))
    {
      uint64_t v15 = type metadata accessor for NetworkManagerType(0);
      memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      uint64_t v17 = type metadata accessor for URL();
      uint64_t v18 = *(void *)(v17 - 8);
      v19 = *(void (**)(char *, char *, uint64_t))(v18 + 16);
      v19(v11, v12, v17);
      uint64_t v20 = v13[12];
      __dst = &v11[v20];
      v21 = &v12[v20];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(&v12[v20], 1, v17))
      {
        uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
        memcpy(__dst, v21, *(void *)(*(void *)(v22 - 8) + 64));
      }
      else
      {
        v19(__dst, v21, v17);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(__dst, 0, 1, v17);
      }
      uint64_t v23 = v13[16];
      v24 = &v11[v23];
      v25 = &v12[v23];
      unint64_t v26 = *((void *)v25 + 1);
      if (v26 >> 60 == 15)
      {
        *(_OWORD *)v24 = *(_OWORD *)v25;
      }
      else
      {
        uint64_t v27 = *(void *)v25;
        outlined copy of Data._Representation(*(void *)v25, *((void *)v25 + 1));
        *(void *)v24 = v27;
        *((void *)v24 + 1) = v26;
      }
      v11[v13[20]] = v12[v13[20]];
      (*(void (**)(char *, void, uint64_t, int *))(v14 + 56))(v11, 0, 2, v13);
    }
    uint64_t v28 = *(int *)(type metadata accessor for NetworkConfig(0) + 20);
    v29 = &v11[v28];
    v30 = &v12[v28];
    uint64_t v31 = *((void *)v30 + 1);
    *(void *)v29 = *(void *)v30;
    *((void *)v29 + 1) = v31;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for UseCaseGroup(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for HE.SecurityLevel();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease();
  uint64_t v5 = a1 + *(int *)(a2 + 36);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 2, v6))
  {
    uint64_t v7 = type metadata accessor for URL();
    uint64_t v8 = *(void *)(v7 - 8);
    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
    v9(v5, v7);
    uint64_t v10 = v5 + *(int *)(v6 + 48);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v10, 1, v7)) {
      v9(v10, v7);
    }
    v11 = (uint64_t *)(v5 + *(int *)(v6 + 64));
    unint64_t v12 = v11[1];
    if (v12 >> 60 != 15) {
      outlined consume of Data._Representation(*v11, v12);
    }
  }
  type metadata accessor for NetworkConfig(0);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for UseCaseGroup(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for HE.SecurityLevel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  uint64_t v9 = a3[9];
  uint64_t v10 = (char *)(a1 + v9);
  v11 = (char *)(a2 + v9);
  swift_bridgeObjectRetain();
  unint64_t v12 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
  uint64_t v13 = *((void *)v12 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 2, v12))
  {
    uint64_t v14 = type metadata accessor for NetworkManagerType(0);
    memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    uint64_t v15 = type metadata accessor for URL();
    uint64_t v16 = *(void *)(v15 - 8);
    uint64_t v17 = *(void (**)(char *, char *, uint64_t))(v16 + 16);
    v17(v10, v11, v15);
    uint64_t v18 = v12[12];
    __dst = &v10[v18];
    v19 = &v11[v18];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(&v11[v18], 1, v15))
    {
      uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(__dst, v19, *(void *)(*(void *)(v20 - 8) + 64));
    }
    else
    {
      v17(__dst, v19, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(__dst, 0, 1, v15);
    }
    uint64_t v21 = v12[16];
    uint64_t v22 = &v10[v21];
    uint64_t v23 = &v11[v21];
    unint64_t v24 = *((void *)v23 + 1);
    if (v24 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
    }
    else
    {
      uint64_t v25 = *(void *)v23;
      outlined copy of Data._Representation(*(void *)v23, *((void *)v23 + 1));
      *(void *)uint64_t v22 = v25;
      *((void *)v22 + 1) = v24;
    }
    v10[v12[20]] = v11[v12[20]];
    (*(void (**)(char *, void, uint64_t, int *))(v13 + 56))(v10, 0, 2, v12);
  }
  uint64_t v26 = *(int *)(type metadata accessor for NetworkConfig(0) + 20);
  uint64_t v27 = &v10[v26];
  uint64_t v28 = &v11[v26];
  uint64_t v29 = *((void *)v28 + 1);
  *(void *)uint64_t v27 = *(void *)v28;
  *((void *)v27 + 1) = v29;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for UseCaseGroup(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for HE.SecurityLevel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[9];
  uint64_t v8 = (char *)(a1 + v7);
  uint64_t v9 = (char *)(a2 + v7);
  uint64_t v10 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
  uint64_t v11 = *((void *)v10 - 1);
  unint64_t v12 = *(uint64_t (**)(char *, uint64_t, int *))(v11 + 48);
  int v13 = v12(v8, 2, v10);
  int v14 = v12(v9, 2, v10);
  if (!v13)
  {
    if (v14)
    {
      outlined destroy of (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool)((uint64_t)v8);
      goto LABEL_7;
    }
    uint64_t v22 = type metadata accessor for URL();
    uint64_t v23 = *(void *)(v22 - 8);
    v48 = *(void (**)(char *, char *, uint64_t))(v23 + 24);
    v48(v8, v9, v22);
    uint64_t v24 = v10[12];
    uint64_t v25 = &v9[v24];
    v49 = &v8[v24];
    uint64_t v26 = *(uint64_t (**)(void))(v23 + 48);
    int v27 = v26();
    int v28 = ((uint64_t (*)(char *, uint64_t, uint64_t))v26)(v25, 1, v22);
    if (v27)
    {
      if (v28)
      {
        size_t v29 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?)
                                    - 8)
                        + 64);
        v30 = v49;
LABEL_18:
        memcpy(v30, v25, v29);
        goto LABEL_21;
      }
      (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v49, v25, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v49, 0, 1, v22);
    }
    else
    {
      if (v28)
      {
        (*(void (**)(char *, uint64_t))(v23 + 8))(v49, v22);
        size_t v29 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?)
                                    - 8)
                        + 64);
        v30 = v49;
        goto LABEL_18;
      }
      v48(v49, v25, v22);
    }
LABEL_21:
    uint64_t v36 = v10[16];
    v37 = (uint64_t *)&v8[v36];
    v38 = (uint64_t *)&v9[v36];
    unint64_t v39 = *(void *)&v9[v36 + 8];
    if (*(void *)&v8[v36 + 8] >> 60 == 15)
    {
      if (v39 >> 60 != 15)
      {
        uint64_t v40 = *v38;
        outlined copy of Data._Representation(v40, v39);
        uint64_t *v37 = v40;
        v37[1] = v39;
LABEL_28:
        v8[v10[20]] = v9[v10[20]];
        goto LABEL_29;
      }
    }
    else
    {
      if (v39 >> 60 != 15)
      {
        uint64_t v41 = *v38;
        outlined copy of Data._Representation(v41, v39);
        uint64_t v42 = *v37;
        unint64_t v43 = v37[1];
        uint64_t *v37 = v41;
        v37[1] = v39;
        outlined consume of Data._Representation(v42, v43);
        goto LABEL_28;
      }
      outlined destroy of Data((uint64_t)v37);
    }
    *(_OWORD *)v37 = *(_OWORD *)v38;
    goto LABEL_28;
  }
  if (v14)
  {
LABEL_7:
    uint64_t v21 = type metadata accessor for NetworkManagerType(0);
    memcpy(v8, v9, *(void *)(*(void *)(v21 - 8) + 64));
    goto LABEL_29;
  }
  uint64_t v15 = type metadata accessor for URL();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(void (**)(char *, char *, uint64_t))(v16 + 16);
  v17(v8, v9, v15);
  uint64_t v18 = v10[12];
  __dst = &v8[v18];
  v19 = &v9[v18];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(&v9[v18], 1, v15))
  {
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(__dst, v19, *(void *)(*(void *)(v20 - 8) + 64));
  }
  else
  {
    v17(__dst, v19, v15);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(__dst, 0, 1, v15);
  }
  uint64_t v31 = v10[16];
  v32 = &v8[v31];
  v33 = &v9[v31];
  unint64_t v34 = *((void *)v33 + 1);
  if (v34 >> 60 == 15)
  {
    *(_OWORD *)v32 = *(_OWORD *)v33;
  }
  else
  {
    uint64_t v35 = *(void *)v33;
    outlined copy of Data._Representation(*(void *)v33, *((void *)v33 + 1));
    *(void *)v32 = v35;
    *((void *)v32 + 1) = v34;
  }
  v8[v10[20]] = v9[v10[20]];
  (*(void (**)(char *, void, uint64_t, int *))(v11 + 56))(v8, 0, 2, v10);
LABEL_29:
  uint64_t v44 = *(int *)(type metadata accessor for NetworkConfig(0) + 20);
  v45 = &v8[v44];
  v46 = &v9[v44];
  *(void *)v45 = *(void *)v46;
  *((void *)v45 + 1) = *((void *)v46 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined destroy of (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t initializeWithTake for UseCaseGroup(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for HE.SecurityLevel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  uint64_t v9 = a3[9];
  uint64_t v10 = (char *)(a1 + v9);
  uint64_t v11 = (char *)(a2 + v9);
  unint64_t v12 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
  uint64_t v13 = *((void *)v12 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 2, v12))
  {
    uint64_t v14 = type metadata accessor for NetworkManagerType(0);
    memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    uint64_t v15 = type metadata accessor for URL();
    uint64_t v16 = *(void *)(v15 - 8);
    uint64_t v17 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
    v17(v10, v11, v15);
    uint64_t v18 = v12[12];
    __dst = &v10[v18];
    v19 = &v11[v18];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(&v11[v18], 1, v15))
    {
      uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(__dst, v19, *(void *)(*(void *)(v20 - 8) + 64));
    }
    else
    {
      v17(__dst, v19, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(__dst, 0, 1, v15);
    }
    *(_OWORD *)&v10[v12[16]] = *(_OWORD *)&v11[v12[16]];
    v10[v12[20]] = v11[v12[20]];
    (*(void (**)(char *, void, uint64_t, int *))(v13 + 56))(v10, 0, 2, v12);
  }
  uint64_t v21 = type metadata accessor for NetworkConfig(0);
  *(_OWORD *)&v10[*(int *)(v21 + 20)] = *(_OWORD *)&v11[*(int *)(v21 + 20)];
  return a1;
}

uint64_t assignWithTake for UseCaseGroup(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for HE.SecurityLevel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  swift_bridgeObjectRelease();
  uint64_t v9 = a3[9];
  uint64_t v10 = (char *)(a1 + v9);
  uint64_t v11 = (char *)(a2 + v9);
  unint64_t v12 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
  uint64_t v13 = *((void *)v12 - 1);
  uint64_t v14 = *(uint64_t (**)(unsigned char *, uint64_t, int *))(v13 + 48);
  int v15 = v14(v10, 2, v12);
  int v16 = v14(v11, 2, v12);
  if (!v15)
  {
    if (v16)
    {
      outlined destroy of (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool)((uint64_t)v10);
      goto LABEL_7;
    }
    uint64_t v24 = type metadata accessor for URL();
    uint64_t v25 = *(void *)(v24 - 8);
    v45 = *(void (**)(char *, char *, uint64_t))(v25 + 40);
    v45(v10, v11, v24);
    uint64_t v26 = v12[12];
    int v27 = &v11[v26];
    v46 = &v10[v26];
    int v28 = *(uint64_t (**)(void))(v25 + 48);
    int v29 = v28();
    int v30 = ((uint64_t (*)(char *, uint64_t, uint64_t))v28)(v27, 1, v24);
    if (v29)
    {
      if (v30)
      {
        size_t v31 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?)
                                    - 8)
                        + 64);
        v32 = v46;
LABEL_15:
        memcpy(v32, v27, v31);
        goto LABEL_18;
      }
      (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v46, v27, v24);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v46, 0, 1, v24);
    }
    else
    {
      if (v30)
      {
        (*(void (**)(char *, uint64_t))(v25 + 8))(v46, v24);
        size_t v31 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?)
                                    - 8)
                        + 64);
        v32 = v46;
        goto LABEL_15;
      }
      v45(v46, v27, v24);
    }
LABEL_18:
    uint64_t v33 = v12[16];
    unint64_t v34 = (uint64_t *)&v10[v33];
    uint64_t v35 = (uint64_t *)&v11[v33];
    unint64_t v36 = *(void *)&v10[v33 + 8];
    if (v36 >> 60 != 15)
    {
      unint64_t v37 = v35[1];
      if (v37 >> 60 != 15)
      {
        uint64_t v38 = *v34;
        *unint64_t v34 = *v35;
        v34[1] = v37;
        outlined consume of Data._Representation(v38, v36);
        goto LABEL_23;
      }
      outlined destroy of Data((uint64_t)v34);
    }
    *(_OWORD *)unint64_t v34 = *(_OWORD *)v35;
LABEL_23:
    v10[v12[20]] = v11[v12[20]];
    goto LABEL_24;
  }
  if (v16)
  {
LABEL_7:
    uint64_t v23 = type metadata accessor for NetworkManagerType(0);
    memcpy(v10, v11, *(void *)(*(void *)(v23 - 8) + 64));
    goto LABEL_24;
  }
  uint64_t v17 = type metadata accessor for URL();
  uint64_t v18 = *(void *)(v17 - 8);
  v19 = *(void (**)(char *, char *, uint64_t))(v18 + 32);
  v19(v10, v11, v17);
  uint64_t v20 = v12[12];
  __dst = &v10[v20];
  uint64_t v21 = &v11[v20];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(&v11[v20], 1, v17))
  {
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(__dst, v21, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    v19(__dst, v21, v17);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(__dst, 0, 1, v17);
  }
  *(_OWORD *)&v10[v12[16]] = *(_OWORD *)&v11[v12[16]];
  v10[v12[20]] = v11[v12[20]];
  (*(void (**)(char *, void, uint64_t, int *))(v13 + 56))(v10, 0, 2, v12);
LABEL_24:
  uint64_t v39 = *(int *)(type metadata accessor for NetworkConfig(0) + 20);
  uint64_t v40 = &v10[v39];
  uint64_t v41 = (uint64_t *)&v11[v39];
  uint64_t v43 = *v41;
  uint64_t v42 = v41[1];
  *(void *)uint64_t v40 = v43;
  *((void *)v40 + 1) = v42;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for UseCaseGroup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_249CF03D4);
}

uint64_t sub_249CF03D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for HE.SecurityLevel();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else if (a2 == 0x7FFFFFFF)
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 32));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
  else
  {
    uint64_t v11 = type metadata accessor for NetworkConfig(0);
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a3 + 36);
    return v12(v14, a2, v13);
  }
}

uint64_t storeEnumTagSinglePayload for UseCaseGroup(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_249CF0514);
}

uint64_t sub_249CF0514(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for HE.SecurityLevel();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + *(int *)(a4 + 32)) = (a2 - 1);
  }
  else
  {
    uint64_t v11 = type metadata accessor for NetworkConfig(0);
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a4 + 36);
    return v12(v14, a2, a2, v13);
  }
  return result;
}

uint64_t type metadata completion function for UseCaseGroup()
{
  uint64_t result = type metadata accessor for HE.SecurityLevel();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for NetworkConfig(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for UseCaseGroup.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 5 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 5) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 5;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v8 = v6 - 6;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for UseCaseGroup.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x249CF088CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UseCaseGroup.CodingKeys()
{
  return &type metadata for UseCaseGroup.CodingKeys;
}

uint64_t getEnumTagSinglePayload for StaticPECParameters.CodingKeys(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for StaticPECParameters.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x249CF09B4);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t getEnumTag for StaticPECParameters.CodingKeys()
{
  return 0;
}

void *type metadata accessor for StaticPECParameters.CodingKeys()
{
  return &unk_26FDD1F78;
}

uint64_t getEnumTagSinglePayload for PECDPParameters.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for PECDPParameters.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x249CF0B50);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

void *type metadata accessor for PECDPParameters.CodingKeys()
{
  return &unk_26FDD17B8;
}

uint64_t lazy protocol witness table accessor for type String? and conformance <A> A?(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t specialized == infix<A>(_:_:)(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2 = 0xEE0073726574656DLL;
  uint64_t v3 = 0x6172615065776C52;
  int v4 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v5 = 0x656D656863536548;
    }
    else {
      uint64_t v5 = 0x4765736143657355;
    }
    if (v4 == 1) {
      unint64_t v6 = 0xE900000000000073;
    }
    else {
      unint64_t v6 = 0xED00007370756F72;
    }
    int v7 = a2;
    if (!a2) {
      goto LABEL_15;
    }
    goto LABEL_9;
  }
  uint64_t v5 = 0x6172615065776C52;
  unint64_t v6 = 0xEE0073726574656DLL;
  int v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1) {
      uint64_t v3 = 0x656D656863536548;
    }
    else {
      uint64_t v3 = 0x4765736143657355;
    }
    if (v7 == 1) {
      unint64_t v2 = 0xE900000000000073;
    }
    else {
      unint64_t v2 = 0xED00007370756F72;
    }
  }
LABEL_15:
  if (v5 == v3 && v6 == v2) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AllowListFormat.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AllowListFormat.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AllowListFormat.CodingKeys()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AllowListFormat.CodingKeys()
{
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance AllowListFormat.CodingKeys@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized AllowListFormat.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance AllowListFormat.CodingKeys(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xEE0073726574656DLL;
  unint64_t v4 = 0xE900000000000073;
  uint64_t v5 = 0x656D656863536548;
  if (v2 != 1)
  {
    uint64_t v5 = 0x4765736143657355;
    unint64_t v4 = 0xED00007370756F72;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x6172615065776C52;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AllowListFormat.CodingKeys()
{
  uint64_t v1 = 0x656D656863536548;
  if (*v0 != 1) {
    uint64_t v1 = 0x4765736143657355;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6172615065776C52;
  }
}

unint64_t protocol witness for CodingKey.init(stringValue:) in conformance AllowListFormat.CodingKeys@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized AllowListFormat.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AllowListFormat.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AllowListFormat.CodingKeys and conformance AllowListFormat.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AllowListFormat.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AllowListFormat.CodingKeys and conformance AllowListFormat.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t AllowListFormat.heSchemes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AllowListFormat.useCaseGroups.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AllowListFormat.encode(to:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v13 = a3;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AllowListFormat.CodingKeys>);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AllowListFormat.CodingKeys and conformance AllowListFormat.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v15 = a2;
  char v14 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HE.SecurityLevel : [HE.RlweParams]]);
  lazy protocol witness table accessor for type [HE.SecurityLevel : [HE.RlweParams]] and conformance <> [A : B]();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v4)
  {
    uint64_t v15 = v13;
    char v14 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HE.Scheme]);
    lazy protocol witness table accessor for type [HE.Scheme] and conformance <A> [A](&lazy protocol witness table cache variable for type [HE.Scheme] and conformance <A> [A], &lazy protocol witness table cache variable for type HE.Scheme and conformance HE.Scheme);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v15 = a4;
    char v14 = 2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : UseCaseGroup]);
    lazy protocol witness table accessor for type [String : UseCaseGroup] and conformance <> [A : B]();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

unint64_t lazy protocol witness table accessor for type AllowListFormat.CodingKeys and conformance AllowListFormat.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AllowListFormat.CodingKeys and conformance AllowListFormat.CodingKeys;
  if (!lazy protocol witness table cache variable for type AllowListFormat.CodingKeys and conformance AllowListFormat.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AllowListFormat.CodingKeys and conformance AllowListFormat.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AllowListFormat.CodingKeys and conformance AllowListFormat.CodingKeys;
  if (!lazy protocol witness table cache variable for type AllowListFormat.CodingKeys and conformance AllowListFormat.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AllowListFormat.CodingKeys and conformance AllowListFormat.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AllowListFormat.CodingKeys and conformance AllowListFormat.CodingKeys;
  if (!lazy protocol witness table cache variable for type AllowListFormat.CodingKeys and conformance AllowListFormat.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AllowListFormat.CodingKeys and conformance AllowListFormat.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AllowListFormat.CodingKeys and conformance AllowListFormat.CodingKeys;
  if (!lazy protocol witness table cache variable for type AllowListFormat.CodingKeys and conformance AllowListFormat.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AllowListFormat.CodingKeys and conformance AllowListFormat.CodingKeys);
  }
  return result;
}

uint64_t AllowListFormat.init(from:)(void *a1)
{
  uint64_t result = specialized AllowListFormat.init(from:)(a1);
  if (v1) {
    return v3;
  }
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance AllowListFormat@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized AllowListFormat.init(from:)(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AllowListFormat(void *a1)
{
  return AllowListFormat.encode(to:)(a1, *v1, v1[1], v1[2]);
}

uint64_t static AllowListParser.parseAllowList(allowListData:)()
{
  uint64_t result = specialized static AllowListParser.parseAllowList(allowListData:)();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t static AllowListParser.encodeAllowList(allowListFormat:)()
{
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  dispatch thunk of PropertyListEncoder.outputFormat.setter();
  lazy protocol witness table accessor for type AllowListFormat and conformance AllowListFormat();
  uint64_t v0 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  swift_release();
  return v0;
}

BOOL static UseCase.CodingKeys.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void UseCase.CodingKeys.hash(into:)(uint64_t a1, char a2)
{
}

uint64_t UseCase.CodingKeys.init(intValue:)()
{
  return 2;
}

Swift::Int UseCase.CodingKeys.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

uint64_t UseCase.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t UseCase.CodingKeys.stringValue.getter(char a1)
{
  if (a1) {
    return 6514032;
  }
  else {
    return 7498096;
  }
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance UseCase.CodingKeys()
{
  if (*v0) {
    return 6514032;
  }
  else {
    return 7498096;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance UseCase.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized UseCase.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance UseCase.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type UseCase.CodingKeys and conformance UseCase.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance UseCase.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type UseCase.CodingKeys and conformance UseCase.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t UseCase.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = specialized UseCase.init(from:)(a1, (uint64_t)v5);
  if (!v2) {
    return outlined init with take of UseCase((uint64_t)v5, a2);
  }
  return result;
}

uint64_t UseCase.encode(to:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<UseCase.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type UseCase.CodingKeys and conformance UseCase.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with take of UseCase(v2, (uint64_t)&v14);
  if (v18 == 1)
  {
    uint64_t v9 = v14;
    *(void *)&long long v10 = v15;
    BYTE8(v10) = BYTE8(v15);
    *(void *)&long long v11 = v16;
    BYTE8(v11) = BYTE8(v16);
    long long v12 = v17;
    char v13 = 0;
    lazy protocol witness table accessor for type StaticPIRParameters and conformance StaticPIRParameters();
  }
  else
  {
    uint64_t v9 = v14;
    long long v10 = v15;
    long long v11 = v16;
    LOBYTE(v12) = v17;
    char v13 = 1;
    lazy protocol witness table accessor for type StaticPECParameters and conformance StaticPECParameters();
  }
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t protocol witness for Decodable.init(from:) in conformance UseCase@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = specialized UseCase.init(from:)(a1, (uint64_t)v5);
  if (!v2) {
    return outlined init with take of UseCase((uint64_t)v5, a2);
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance UseCase(void *a1)
{
  outlined init with take of UseCase(v1, (uint64_t)&v4);
  return UseCase.encode(to:)(a1);
}

uint64_t specialized static AllowListParser.parseAllowList(allowListData:)()
{
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  lazy protocol witness table accessor for type AllowListFormat and conformance AllowListFormat();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (v0)
  {
    swift_release();
    if (one-time initialization token for framework != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    __swift_project_value_buffer(v1, (uint64_t)static Logger.framework);
    id v2 = v0;
    id v3 = v0;
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      uint64_t v7 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 138543362;
      id v8 = v0;
      uint64_t v11 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v7 = v11;

      _os_log_impl(&dword_249C3F000, v4, v5, "Unable to parse list of use-cases due to '%{public}@'", v6, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x24C5B4790](v7, -1, -1);
      MEMORY[0x24C5B4790](v6, -1, -1);
    }
    else
    {
    }
    return swift_willThrow();
  }
  else
  {
    swift_release();
    return v10;
  }
}

unint64_t specialized AllowListFormat.CodingKeys.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of AllowListFormat.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return 3;
  }
  else {
    return v3;
  }
}

uint64_t specialized AllowListFormat.init(from:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AllowListFormat.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = a1[3];
  __swift_project_boxed_opaque_existential_1(a1, v7);
  lazy protocol witness table accessor for type AllowListFormat.CodingKeys and conformance AllowListFormat.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HE.SecurityLevel : [HE.RlweParams]]);
    char v10 = 0;
    lazy protocol witness table accessor for type [HE.SecurityLevel : [HE.RlweParams]] and conformance <> [A : B]();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v7 = v11;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HE.Scheme]);
    char v10 = 1;
    lazy protocol witness table accessor for type [HE.Scheme] and conformance <A> [A](&lazy protocol witness table cache variable for type [HE.Scheme] and conformance <A> [A], &lazy protocol witness table cache variable for type HE.Scheme and conformance HE.Scheme);
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : UseCaseGroup]);
    char v10 = 2;
    lazy protocol witness table accessor for type [String : UseCaseGroup] and conformance <> [A : B]();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    swift_bridgeObjectRetain();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v7;
}

unint64_t lazy protocol witness table accessor for type AllowListFormat and conformance AllowListFormat()
{
  unint64_t result = lazy protocol witness table cache variable for type AllowListFormat and conformance AllowListFormat;
  if (!lazy protocol witness table cache variable for type AllowListFormat and conformance AllowListFormat)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AllowListFormat and conformance AllowListFormat);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AllowListFormat and conformance AllowListFormat;
  if (!lazy protocol witness table cache variable for type AllowListFormat and conformance AllowListFormat)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AllowListFormat and conformance AllowListFormat);
  }
  return result;
}

uint64_t specialized UseCase.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 7498096 && a2 == 0xE300000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 6514032 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t specialized UseCase.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<UseCase.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  id v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type UseCase.CodingKeys and conformance UseCase.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  }
  uint64_t v9 = KeyedDecodingContainer.allKeys.getter();
  uint64_t v10 = v9;
  if (*(void *)(v9 + 16) != 1)
  {
    uint64_t v19 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v21 = v20;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *(void *)&long long v23 = v10;
    void *v21 = &type metadata for UseCase;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v19 - 8) + 104))(v21, *MEMORY[0x263F8DCB0], v19);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  }
  char v11 = *(unsigned char *)(v9 + 32);
  long long v12 = (void (**)(char *, uint64_t))(v6 + 8);
  if (v11)
  {
    char v30 = 1;
    lazy protocol witness table accessor for type StaticPECParameters and conformance StaticPECParameters();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    swift_bridgeObjectRelease();
    (*v12)(v8, v5);
    uint64_t v13 = 0;
    long long v14 = v24;
    uint64_t v15 = v25;
    uint64_t v16 = v26;
    uint64_t v17 = v27;
    uint64_t v18 = v28;
  }
  else
  {
    char v30 = 0;
    lazy protocol witness table accessor for type StaticPIRParameters and conformance StaticPIRParameters();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    swift_bridgeObjectRelease();
    (*v12)(v8, v5);
    long long v14 = v24;
    uint64_t v15 = v25;
    uint64_t v16 = v26;
    uint64_t v17 = v27;
    uint64_t v18 = v28;
    uint64_t v13 = v29;
  }
  long long v23 = v14;
  uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  *(_OWORD *)a2 = v23;
  *(void *)(a2 + 16) = v15;
  *(void *)(a2 + 24) = v16;
  *(void *)(a2 + 32) = v17;
  *(void *)(a2 + 40) = v18;
  *(void *)(a2 + 48) = v13;
  *(unsigned char *)(a2 + 56) = v11 ^ 1;
  return result;
}

uint64_t outlined init with take of UseCase(uint64_t a1, uint64_t a2)
{
  return a2;
}

unint64_t lazy protocol witness table accessor for type UseCase.CodingKeys and conformance UseCase.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type UseCase.CodingKeys and conformance UseCase.CodingKeys;
  if (!lazy protocol witness table cache variable for type UseCase.CodingKeys and conformance UseCase.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UseCase.CodingKeys and conformance UseCase.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type UseCase.CodingKeys and conformance UseCase.CodingKeys;
  if (!lazy protocol witness table cache variable for type UseCase.CodingKeys and conformance UseCase.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UseCase.CodingKeys and conformance UseCase.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type UseCase.CodingKeys and conformance UseCase.CodingKeys;
  if (!lazy protocol witness table cache variable for type UseCase.CodingKeys and conformance UseCase.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UseCase.CodingKeys and conformance UseCase.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type UseCase.CodingKeys and conformance UseCase.CodingKeys;
  if (!lazy protocol witness table cache variable for type UseCase.CodingKeys and conformance UseCase.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UseCase.CodingKeys and conformance UseCase.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticPECParameters and conformance StaticPECParameters()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticPECParameters and conformance StaticPECParameters;
  if (!lazy protocol witness table cache variable for type StaticPECParameters and conformance StaticPECParameters)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticPECParameters and conformance StaticPECParameters);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type StaticPECParameters and conformance StaticPECParameters;
  if (!lazy protocol witness table cache variable for type StaticPECParameters and conformance StaticPECParameters)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticPECParameters and conformance StaticPECParameters);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticPIRParameters and conformance StaticPIRParameters()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticPIRParameters and conformance StaticPIRParameters;
  if (!lazy protocol witness table cache variable for type StaticPIRParameters and conformance StaticPIRParameters)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticPIRParameters and conformance StaticPIRParameters);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type StaticPIRParameters and conformance StaticPIRParameters;
  if (!lazy protocol witness table cache variable for type StaticPIRParameters and conformance StaticPIRParameters)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticPIRParameters and conformance StaticPIRParameters);
  }
  return result;
}

ValueMetadata *type metadata accessor for AllowListFormat()
{
  return &type metadata for AllowListFormat;
}

ValueMetadata *type metadata accessor for AllowListParser()
{
  return &type metadata for AllowListParser;
}

unsigned char *storeEnumTagSinglePayload for UseCase.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x249CF2A60);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UseCase.CodingKeys()
{
  return &type metadata for UseCase.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for AllowListFormat.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x249CF2B64);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void *type metadata accessor for AllowListFormat.CodingKeys()
{
  return &unk_26FDD1678;
}

uint64_t lazy protocol witness table accessor for type [HE.RlweParams] and conformance <A> [A](unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [HE.RlweParams]);
    lazy protocol witness table accessor for type HE.SecurityLevel and conformance HE.SecurityLevel(a2, MEMORY[0x263F387D0]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [HE.Scheme] and conformance <A> [A](unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [HE.Scheme]);
    lazy protocol witness table accessor for type HE.SecurityLevel and conformance HE.SecurityLevel(a2, MEMORY[0x263F38858]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type HE.SecurityLevel and conformance HE.SecurityLevel(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t one-time initialization function for daemon(uint64_t a1)
{
  return one-time initialization function for daemon(a1, static Logger.daemon);
}

{
  return one-time initialization function for daemon(a1, static OSSignposter.daemon, &one-time initialization token for daemon, (uint64_t)static Logger.daemon);
}

uint64_t static Logger.daemon.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.daemon.getter(&one-time initialization token for daemon, MEMORY[0x263F90268], (uint64_t)static Logger.daemon, a1);
}

uint64_t one-time initialization function for framework(uint64_t a1)
{
  return one-time initialization function for daemon(a1, static Logger.framework);
}

{
  return one-time initialization function for daemon(a1, static OSSignposter.framework, &one-time initialization token for framework, (uint64_t)static Logger.framework);
}

uint64_t static Logger.framework.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.daemon.getter(&one-time initialization token for framework, MEMORY[0x263F90268], (uint64_t)static Logger.framework, a1);
}

uint64_t one-time initialization function for networking(uint64_t a1)
{
  return one-time initialization function for daemon(a1, static Logger.networking);
}

uint64_t one-time initialization function for daemon(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v3, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  return Logger.init(subsystem:category:)();
}

uint64_t static Logger.networking.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.daemon.getter(&one-time initialization token for networking, MEMORY[0x263F90268], (uint64_t)static Logger.networking, a1);
}

uint64_t static OSSignposter.daemon.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.daemon.getter(&one-time initialization token for daemon, MEMORY[0x263F90228], (uint64_t)static OSSignposter.daemon, a1);
}

uint64_t one-time initialization function for daemon(uint64_t a1, uint64_t *a2, void *a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for OSSignposter();
  __swift_allocate_value_buffer(v11, a2);
  __swift_project_value_buffer(v11, (uint64_t)a2);
  if (*a3 != -1) {
    swift_once();
  }
  uint64_t v12 = __swift_project_value_buffer(v7, a4);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v12, v7);
  return OSSignposter.init(logger:)();
}

uint64_t static OSSignposter.framework.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.daemon.getter(&one-time initialization token for framework, MEMORY[0x263F90228], (uint64_t)static OSSignposter.framework, a1);
}

uint64_t static Logger.daemon.getter@<X0>(void *a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v7 = a2(0);
  uint64_t v8 = __swift_project_value_buffer(v7, a3);
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16);
  return v9(a4, v8, v7);
}

uint64_t SecretKey.timestamp.getter()
{
  return *(void *)v0;
}

uint64_t SecretKey.key.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for SecretKey() + 20);
  uint64_t v4 = type metadata accessor for HE.SerializedSecretKey();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t type metadata accessor for SecretKey()
{
  uint64_t result = type metadata singleton initialization cache for SecretKey;
  if (!type metadata singleton initialization cache for SecretKey) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t SecretKey.init()@<X0>(void *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()();
  Date.timeIntervalSince1970.getter();
  double v7 = v6;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  if ((~*(void *)&v7 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v7 <= -1.0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v7 < 1.84467441e19)
  {
    *a1 = (unint64_t)v7;
    type metadata accessor for SecretKey();
    return HE.SerializedSecretKey.init()();
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t SecretKey.init(timestamp:key:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = a1;
  uint64_t v4 = (char *)a3 + *(int *)(type metadata accessor for SecretKey() + 20);
  uint64_t v5 = type metadata accessor for HE.SerializedSecretKey();
  double v6 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32);
  return v6(v4, a2, v5);
}

BOOL static SecretKey.Keys.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void SecretKey.Keys.hash(into:)(uint64_t a1, char a2)
{
}

CipherML::SecretKey::Keys_optional __swiftcall SecretKey.Keys.init(intValue:)(Swift::Int intValue)
{
  return (CipherML::SecretKey::Keys_optional)2;
}

Swift::Int SecretKey.Keys.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

uint64_t SecretKey.Keys.intValue.getter()
{
  return 0;
}

uint64_t SecretKey.Keys.stringValue.getter(char a1)
{
  if (a1) {
    return 7955819;
  }
  else {
    return 0x6D617473656D6974;
  }
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SecretKey.Keys()
{
  if (*v0) {
    return 7955819;
  }
  else {
    return 0x6D617473656D6974;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SecretKey.Keys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized SecretKey.Keys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SecretKey.Keys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SecretKey.Keys and conformance SecretKey.Keys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SecretKey.Keys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SecretKey.Keys and conformance SecretKey.Keys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t SecretKey.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v19 = a2;
  uint64_t v18 = type metadata accessor for HE.SerializedSecretKey();
  uint64_t v16 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SecretKey.Keys>);
  uint64_t v17 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20);
  double v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for SecretKey();
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (uint64_t *)((char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SecretKey.Keys and conformance SecretKey.Keys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    uint64_t v15 = v8;
    uint64_t v12 = v17;
    uint64_t v11 = v18;
    uint64_t v13 = v19;
    LOBYTE(v21) = 0;
    *uint64_t v10 = KeyedDecodingContainer.decode(_:forKey:)();
    char v22 = 1;
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    HE.SerializedSecretKey.init(seed:)();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v20);
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))((char *)v10 + *(int *)(v15 + 20), v5, v11);
    outlined init with take of SecretKey((uint64_t)v10, v13);
  }
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
}

uint64_t SecretKey.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SecretKey.Keys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = &v11[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SecretKey.Keys and conformance SecretKey.Keys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v12) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for SecretKey();
    uint64_t v7 = HE.SerializedSecretKey.seed.getter();
    unint64_t v9 = v8;
    uint64_t v12 = v7;
    unint64_t v13 = v8;
    v11[15] = 1;
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    outlined consume of Data._Representation(v7, v9);
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t protocol witness for Decodable.init(from:) in conformance SecretKey@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return SecretKey.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SecretKey(void *a1)
{
  return SecretKey.encode(to:)(a1);
}

uint64_t specialized SecretKey.Keys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6D617473656D6974 && a2 == 0xE900000000000070;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 7955819 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

unint64_t lazy protocol witness table accessor for type SecretKey.Keys and conformance SecretKey.Keys()
{
  unint64_t result = lazy protocol witness table cache variable for type SecretKey.Keys and conformance SecretKey.Keys;
  if (!lazy protocol witness table cache variable for type SecretKey.Keys and conformance SecretKey.Keys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SecretKey.Keys and conformance SecretKey.Keys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SecretKey.Keys and conformance SecretKey.Keys;
  if (!lazy protocol witness table cache variable for type SecretKey.Keys and conformance SecretKey.Keys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SecretKey.Keys and conformance SecretKey.Keys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SecretKey.Keys and conformance SecretKey.Keys;
  if (!lazy protocol witness table cache variable for type SecretKey.Keys and conformance SecretKey.Keys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SecretKey.Keys and conformance SecretKey.Keys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SecretKey.Keys and conformance SecretKey.Keys;
  if (!lazy protocol witness table cache variable for type SecretKey.Keys and conformance SecretKey.Keys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SecretKey.Keys and conformance SecretKey.Keys);
  }
  return result;
}

uint64_t outlined init with take of SecretKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SecretKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t *initializeBufferWithCopyOfBuffer for SecretKey(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    uint64_t v5 = *(int *)(a3 + 20);
    char v6 = (char *)a1 + v5;
    uint64_t v7 = (char *)a2 + v5;
    uint64_t v8 = type metadata accessor for HE.SerializedSecretKey();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t destroy for SecretKey(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 20);
  uint64_t v3 = type metadata accessor for HE.SerializedSecretKey();
  int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
  return v4(v2, v3);
}

void *initializeWithCopy for SecretKey(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  char v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for HE.SerializedSecretKey();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

void *assignWithCopy for SecretKey(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  char v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for HE.SerializedSecretKey();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

void *initializeWithTake for SecretKey(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  char v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for HE.SerializedSecretKey();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void *assignWithTake for SecretKey(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  char v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for HE.SerializedSecretKey();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for SecretKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_249CF4350);
}

uint64_t sub_249CF4350(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + *(int *)(a3 + 20);
  uint64_t v5 = type metadata accessor for HE.SerializedSecretKey();
  char v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48);
  return v6(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for SecretKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_249CF43D4);
}

uint64_t sub_249CF43D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + *(int *)(a4 + 20);
  uint64_t v6 = type metadata accessor for HE.SerializedSecretKey();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
  return v7(v5, a2, a2, v6);
}

uint64_t type metadata completion function for SecretKey()
{
  uint64_t result = type metadata accessor for HE.SerializedSecretKey();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for SecretKey.Keys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x249CF45B0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SecretKey.Keys()
{
  return &type metadata for SecretKey.Keys;
}

uint64_t RequestsManager.CMLUseCaseStatusBuilder.useCase.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t RequestsManager.CMLUseCaseStatusBuilder.serializedDynamicConfig.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 32);
  outlined copy of Data?(v1, *(void *)(v0 + 40));
  return v1;
}

uint64_t RequestsManager.CMLUseCaseStatusBuilder.serializedDynamicConfig.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t v5 = *(void *)(v2 + 32);
  unint64_t v6 = *(void *)(v2 + 40);
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = a2;
  return outlined consume of Data?(v5, v6);
}

uint64_t (*RequestsManager.CMLUseCaseStatusBuilder.serializedDynamicConfig.modify())()
{
  return RequestsManager.CMLUseCaseStatusBuilder.lastUsed.modify;
}

uint64_t key path setter for RequestsManager.CMLUseCaseStatusBuilder.lastUsed : RequestsManager.CMLUseCaseStatusBuilder(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x270FA5388](v4 - 8);
  unint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v6, &demangling cache variable for type metadata for Date?);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 152))(v6);
}

uint64_t RequestsManager.CMLUseCaseStatusBuilder.lastUsed.getter@<X0>(uint64_t a1@<X8>)
{
  return RequestsManager.CMLUseCaseStatusBuilder.lastUsed.getter(&OBJC_IVAR____TtCC8CipherML15RequestsManager23CMLUseCaseStatusBuilder_lastUsed, a1);
}

uint64_t RequestsManager.CMLUseCaseStatusBuilder.lastUsed.setter(uint64_t a1)
{
  return RequestsManager.CMLUseCaseStatusBuilder.lastUsed.setter(a1, &OBJC_IVAR____TtCC8CipherML15RequestsManager23CMLUseCaseStatusBuilder_lastUsed);
}

uint64_t outlined assign with take of Date?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*RequestsManager.CMLUseCaseStatusBuilder.lastUsed.modify())()
{
  return RequestsManager.CMLUseCaseStatusBuilder.lastUsed.modify;
}

uint64_t key path setter for RequestsManager.CMLUseCaseStatusBuilder.keyGenerationTime : RequestsManager.CMLUseCaseStatusBuilder(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x270FA5388](v4 - 8);
  unint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v6, &demangling cache variable for type metadata for Date?);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 176))(v6);
}

uint64_t RequestsManager.CMLUseCaseStatusBuilder.keyGenerationTime.getter@<X0>(uint64_t a1@<X8>)
{
  return RequestsManager.CMLUseCaseStatusBuilder.lastUsed.getter(&OBJC_IVAR____TtCC8CipherML15RequestsManager23CMLUseCaseStatusBuilder_keyGenerationTime, a1);
}

uint64_t RequestsManager.CMLUseCaseStatusBuilder.lastUsed.getter@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *a1;
  swift_beginAccess();
  return outlined init with copy of AMDPbHEConfig.OneOf_Config?(v4, a2, &demangling cache variable for type metadata for Date?);
}

uint64_t RequestsManager.CMLUseCaseStatusBuilder.keyGenerationTime.setter(uint64_t a1)
{
  return RequestsManager.CMLUseCaseStatusBuilder.lastUsed.setter(a1, &OBJC_IVAR____TtCC8CipherML15RequestsManager23CMLUseCaseStatusBuilder_keyGenerationTime);
}

uint64_t (*RequestsManager.CMLUseCaseStatusBuilder.keyGenerationTime.modify())()
{
  return RequestsManager.CMLUseCaseStatusBuilder.lastUsed.modify;
}

uint64_t key path setter for RequestsManager.CMLUseCaseStatusBuilder.keyExpirationTime : RequestsManager.CMLUseCaseStatusBuilder(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x270FA5388](v4 - 8);
  unint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v6, &demangling cache variable for type metadata for Date?);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 200))(v6);
}

uint64_t RequestsManager.CMLUseCaseStatusBuilder.keyExpirationTime.getter@<X0>(uint64_t a1@<X8>)
{
  return RequestsManager.CMLUseCaseStatusBuilder.lastUsed.getter(&OBJC_IVAR____TtCC8CipherML15RequestsManager23CMLUseCaseStatusBuilder_keyExpirationTime, a1);
}

uint64_t RequestsManager.CMLUseCaseStatusBuilder.keyExpirationTime.setter(uint64_t a1)
{
  return RequestsManager.CMLUseCaseStatusBuilder.lastUsed.setter(a1, &OBJC_IVAR____TtCC8CipherML15RequestsManager23CMLUseCaseStatusBuilder_keyExpirationTime);
}

uint64_t RequestsManager.CMLUseCaseStatusBuilder.lastUsed.setter(uint64_t a1, void *a2)
{
  uint64_t v4 = v2 + *a2;
  swift_beginAccess();
  outlined assign with take of Date?(a1, v4);
  return swift_endAccess();
}

uint64_t (*RequestsManager.CMLUseCaseStatusBuilder.keyExpirationTime.modify())()
{
  return RequestsManager.CMLUseCaseStatusBuilder.keyExpirationTime.modify;
}

uint64_t RequestsManager.CMLUseCaseStatusBuilder.__allocating_init(useCase:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 32) = xmmword_249E895A0;
  uint64_t v5 = v4 + OBJC_IVAR____TtCC8CipherML15RequestsManager23CMLUseCaseStatusBuilder_lastUsed;
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
  v7(v5, 1, 1, v6);
  v7(v4 + OBJC_IVAR____TtCC8CipherML15RequestsManager23CMLUseCaseStatusBuilder_keyGenerationTime, 1, 1, v6);
  v7(v4 + OBJC_IVAR____TtCC8CipherML15RequestsManager23CMLUseCaseStatusBuilder_keyExpirationTime, 1, 1, v6);
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  return v4;
}

uint64_t RequestsManager.CMLUseCaseStatusBuilder.init(useCase:)(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(v2 + 32) = xmmword_249E895A0;
  uint64_t v5 = v2 + OBJC_IVAR____TtCC8CipherML15RequestsManager23CMLUseCaseStatusBuilder_lastUsed;
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
  v7(v5, 1, 1, v6);
  v7(v2 + OBJC_IVAR____TtCC8CipherML15RequestsManager23CMLUseCaseStatusBuilder_keyGenerationTime, 1, 1, v6);
  v7(v2 + OBJC_IVAR____TtCC8CipherML15RequestsManager23CMLUseCaseStatusBuilder_keyExpirationTime, 1, 1, v6);
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return v2;
}

id RequestsManager.CMLUseCaseStatusBuilder.build(_:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v23 - v7;
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v23 - v10;
  uint64_t v12 = v1[2];
  uint64_t v13 = v1[3];
  uint64_t v14 = *(uint64_t (**)(uint64_t))(*v1 + 120);
  uint64_t v15 = swift_bridgeObjectRetain();
  uint64_t v16 = v14(v15);
  unint64_t v18 = v17;
  uint64_t v19 = (*(uint64_t (**)(void))(*v1 + 144))();
  uint64_t v20 = (*(uint64_t (**)(uint64_t))(*v1 + 168))(v19);
  (*(void (**)(uint64_t))(*v1 + 192))(v20);
  id v21 = objc_allocWithZone((Class)CMLUseCaseStatus);
  return @nonobjc CMLUseCaseStatus.init(useCase:serializedDynamicConfig:lastUsed:keyGenerationTime:keyExpirationTime:status:)(v12, v13, v16, v18, (uint64_t)v11, (uint64_t)v8, (uint64_t)v5, a1);
}

uint64_t RequestsManager.CMLUseCaseStatusBuilder.withDynamicConfig(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = *(void (**)(uint64_t, unint64_t))(*(void *)v2 + 128);
  outlined copy of Data?(a1, a2);
  v5(a1, a2);
  return swift_retain();
}

uint64_t RequestsManager.CMLUseCaseStatusBuilder.withLastUsed(_:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v5, &demangling cache variable for type metadata for Date?);
  (*(void (**)(char *))(*(void *)v1 + 152))(v5);
  return swift_retain();
}

uint64_t RequestsManager.CMLUseCaseStatusBuilder.withKeyGenerationTime(_:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v5, &demangling cache variable for type metadata for Date?);
  (*(void (**)(char *))(*(void *)v1 + 176))(v5);
  return swift_retain();
}

uint64_t RequestsManager.CMLUseCaseStatusBuilder.deinit()
{
  swift_bridgeObjectRelease();
  outlined consume of Data?(*(void *)(v0 + 32), *(void *)(v0 + 40));
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v0 + OBJC_IVAR____TtCC8CipherML15RequestsManager23CMLUseCaseStatusBuilder_lastUsed, &demangling cache variable for type metadata for Date?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v0 + OBJC_IVAR____TtCC8CipherML15RequestsManager23CMLUseCaseStatusBuilder_keyGenerationTime, &demangling cache variable for type metadata for Date?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v0 + OBJC_IVAR____TtCC8CipherML15RequestsManager23CMLUseCaseStatusBuilder_keyExpirationTime, &demangling cache variable for type metadata for Date?);
  return v0;
}

uint64_t RequestsManager.CMLUseCaseStatusBuilder.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  outlined consume of Data?(*(void *)(v0 + 32), *(void *)(v0 + 40));
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v0 + OBJC_IVAR____TtCC8CipherML15RequestsManager23CMLUseCaseStatusBuilder_lastUsed, &demangling cache variable for type metadata for Date?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v0 + OBJC_IVAR____TtCC8CipherML15RequestsManager23CMLUseCaseStatusBuilder_keyGenerationTime, &demangling cache variable for type metadata for Date?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v0 + OBJC_IVAR____TtCC8CipherML15RequestsManager23CMLUseCaseStatusBuilder_keyExpirationTime, &demangling cache variable for type metadata for Date?);
  return swift_deallocClassInstance();
}

uint64_t RequestsManager.queryStatus(for:options:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v3[5] = swift_task_alloc();
  return MEMORY[0x270FA2498](RequestsManager.queryStatus(for:options:), 0, 0);
}

uint64_t RequestsManager.queryStatus(for:options:)()
{
  uint64_t v1 = v0[3];
  if (v1)
  {
    uint64_t v6 = v0[4];
    uint64_t v7 = v0[5];
    uint64_t v8 = (void *)v0[2];
    uint64_t v9 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v7, 1, 1, v9);
    uint64_t v10 = (void *)swift_allocObject();
    v10[2] = 0;
    v10[3] = 0;
    v10[4] = v6;
    v10[5] = v8;
    v10[6] = v1;
    swift_retain();
    id v11 = v8;
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v7, (uint64_t)&async function pointer to partial apply for closure #1 in RequestsManager.queryStatus(for:options:), (uint64_t)v10);
    swift_release();
    swift_task_dealloc();
    uint64_t v12 = (uint64_t (*)(void))v0[1];
    return v12(0);
  }
  else
  {
    uint64_t v2 = (void *)swift_task_alloc();
    v0[6] = v2;
    *uint64_t v2 = v0;
    v2[1] = RequestsManager.queryStatus(for:options:);
    uint64_t v3 = v0[3];
    uint64_t v4 = v0[2];
    return RequestsManager.handleOptions(clientConfig:options:)(v4, v3);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v2 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
  else
  {
    return MEMORY[0x270FA2498](RequestsManager.queryStatus(for:options:), 0, 0);
  }
}

{
  uint64_t v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v7;

  uint64_t v1 = objc_msgSend(*(id *)(v0 + 16), sel_useCase);
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v4 = v3;

  *(void *)(v0 + 56) = v4;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v5;
  *uint64_t v5 = v0;
  v5[1] = RequestsManager.queryStatus(for:options:);
  return RequestsManager.fetchStatus(useCase:)(v2, v4);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t RequestsManager.queryStatus(for:options:)(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 72) = v1;
  swift_task_dealloc();
  if (v1)
  {
    return MEMORY[0x270FA2498](RequestsManager.queryStatus(for:options:), 0, 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    uint64_t v5 = *(uint64_t (**)(uint64_t))(v4 + 8);
    return v5(a1);
  }
}

uint64_t closure #1 in RequestsManager.queryStatus(for:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v6 + 24) = v9;
  *uint64_t v9 = v6;
  v9[1] = closure #1 in RequestsManager.queryStatus(for:options:);
  return RequestsManager.handleOptions(clientConfig:options:)(a5, a6);
}

uint64_t closure #1 in RequestsManager.queryStatus(for:options:)()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 32) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x270FA2498](closure #1 in RequestsManager.queryStatus(for:options:), 0, 0);
  }
  else
  {
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  void *v8;
  uint8_t *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t (*v13)(void);
  uint64_t v15;

  if (one-time initialization token for daemon != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)v0[4];
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.daemon);
  uint64_t v3 = v1;
  uint64_t v4 = v1;
  uint64_t v5 = Logger.logObject.getter();
  uint64_t v6 = static os_log_type_t.error.getter();
  uint64_t v7 = os_log_type_enabled(v5, v6);
  uint64_t v8 = (void *)v0[4];
  if (v7)
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 138543362;
    uint64_t v11 = v8;
    uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
    v0[2] = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v10 = v12;

    _os_log_impl(&dword_249C3F000, v5, v6, "async queryStatus caught an error: %{public}@", v9, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x24C5B4790](v10, -1, -1);
    MEMORY[0x24C5B4790](v9, -1, -1);
  }
  else
  {
  }
  uint64_t v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

uint64_t RequestsManager.handleOptions(clientConfig:options:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiConfig?);
  v3[5] = swift_task_alloc();
  type metadata accessor for NetworkConfig(0);
  v3[6] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UseCaseGroup?);
  v3[7] = swift_task_alloc();
  type metadata accessor for NetworkManagerType(0);
  v3[8] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for UserIdentifier();
  v3[9] = v4;
  v3[10] = *(void *)(v4 - 8);
  v3[11] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserIdentifier?);
  v3[12] = swift_task_alloc();
  v3[13] = swift_task_alloc();
  return MEMORY[0x270FA2498](RequestsManager.handleOptions(clientConfig:options:), 0, 0);
}

uint64_t RequestsManager.handleOptions(clientConfig:options:)()
{
  uint64_t v109 = v0;
  uint64_t v1 = *(void *)(v0 + 24);
  id v2 = objc_msgSend(*(id *)(v0 + 16), sel_useCase);
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;

  *(void *)(v0 + 112) = v3;
  *(void *)(v0 + 120) = v5;
  if ((v1 & 2) != 0)
  {
    if ((v1 & 4) != 0)
    {
      if (one-time initialization token for daemon != -1) {
        swift_once();
      }
      uint64_t v32 = type metadata accessor for Logger();
      __swift_project_value_buffer(v32, (uint64_t)static Logger.daemon);
      uint64_t v33 = Logger.logObject.getter();
      os_log_type_t v34 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v33, v34))
      {
        uint64_t v35 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v35 = 0;
        _os_log_impl(&dword_249C3F000, v33, v34, "Options contains both mark active and mark inactive", v35, 2u);
        MEMORY[0x24C5B4790](v35, -1, -1);
      }
    }
    uint64_t v36 = *(void *)(*(void *)(v0 + 32) + 40);
    *(void *)(v0 + 128) = v36;
    unint64_t v37 = RequestsManager.handleOptions(clientConfig:options:);
    goto LABEL_17;
  }
  uint64_t v6 = *(void *)(v0 + 24);
  if ((v6 & 4) != 0)
  {
    uint64_t v36 = *(void *)(*(void *)(v0 + 32) + 40);
    *(void *)(v0 + 136) = v36;
    unint64_t v37 = RequestsManager.handleOptions(clientConfig:options:);
LABEL_17:
    uint64_t v38 = v37;
    goto LABEL_18;
  }
  if ((v6 & 0x10) != 0)
  {
    uint64_t v7 = *(os_unfair_lock_s **)(*(void *)(v0 + 32) + 48);
    uint64_t v8 = v7 + 4;
    uint64_t v9 = v7 + 6;
    os_unfair_lock_lock(v7 + 6);
    closure #1 in OSAllocatedUnfairLock<A>.current.getter(v8, v108);
    *(void *)(v0 + 144) = 0;
    os_unfair_lock_unlock(v9);
    uint64_t v10 = *(void *)(v108[0] + 48);
    swift_bridgeObjectRetain();
    swift_release();
    if (*(void *)(v10 + 16))
    {
      uint64_t v11 = *(void *)(v0 + 112);
      uint64_t v12 = *(void *)(v0 + 120);
      swift_bridgeObjectRetain();
      uint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(v11, v12);
      if (v14)
      {
        uint64_t v15 = *(void *)(v0 + 104);
        uint64_t v16 = *(void *)(v0 + 72);
        uint64_t v17 = *(void *)(v0 + 80);
        uint64_t v18 = *(void *)(v0 + 32);
        uint64_t v19 = (uint64_t *)(*(void *)(v10 + 56) + 16 * v13);
        uint64_t v21 = *v19;
        uint64_t v20 = v19[1];
        *(void *)(v0 + 152) = v20;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v22 = *(void *)(v18 + 32);
        uint64_t ObjectType = swift_getObjectType();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56))(v15, 1, 1, v16);
        v104 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v22 + 16)
                                                                                   + **(int **)(v22 + 16));
        long long v24 = (void *)swift_task_alloc();
        *(void *)(v0 + 160) = v24;
        void *v24 = v0;
        v24[1] = RequestsManager.handleOptions(clientConfig:options:);
        uint64_t v25 = *(void *)(v0 + 104);
        uint64_t v26 = v21;
        uint64_t v27 = v20;
        uint64_t v28 = ObjectType;
        uint64_t v29 = v22;
        char v30 = v104;
        return v30(v26, v27, v25, v28, v29);
      }
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  if ((*(unsigned char *)(v0 + 24) & 0x80) != 0)
  {
    uint64_t v39 = *(os_unfair_lock_s **)(*(void *)(v0 + 32) + 48);
    uint64_t v40 = v39 + 4;
    uint64_t v41 = v39 + 6;
    os_unfair_lock_lock(v39 + 6);
    closure #1 in OSAllocatedUnfairLock<A>.current.getter(v40, v108);
    *(void *)(v0 + 168) = 0;
    os_unfair_lock_unlock(v41);
    uint64_t v42 = *(void *)(v108[0] + 48);
    swift_bridgeObjectRetain();
    swift_release();
    if (*(void *)(v42 + 16))
    {
      uint64_t v43 = *(void *)(v0 + 112);
      uint64_t v44 = *(void *)(v0 + 120);
      swift_bridgeObjectRetain();
      uint64_t v45 = specialized __RawDictionaryStorage.find<A>(_:)(v43, v44);
      if (v46)
      {
        uint64_t v47 = *(void *)(v0 + 32);
        v48 = (uint64_t *)(*(void *)(v42 + 56) + 16 * v45);
        uint64_t v49 = *v48;
        *(void *)(v0 + 176) = *v48;
        uint64_t v50 = v48[1];
        *(void *)(v0 + 184) = v50;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *(void *)(v0 + 192) = *(void *)(v47 + 24);
        uint64_t v51 = *(void *)(v47 + 32);
        *(void *)(v0 + 200) = v51;
        uint64_t v52 = swift_getObjectType();
        *(void *)(v0 + 208) = v52;
        v105 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v51 + 8)
                                                                                   + **(int **)(v51 + 8));
        v53 = (void *)swift_task_alloc();
        *(void *)(v0 + 216) = v53;
        void *v53 = v0;
        v53[1] = RequestsManager.handleOptions(clientConfig:options:);
        uint64_t v26 = *(void *)(v0 + 96);
        uint64_t v27 = v49;
        uint64_t v25 = v50;
        uint64_t v28 = v52;
        uint64_t v29 = v51;
        char v30 = v105;
        return v30(v26, v27, v25, v28, v29);
      }
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  if ((*(unsigned char *)(v0 + 24) & 0x20) != 0)
  {
    v54 = *(os_unfair_lock_s **)(*(void *)(v0 + 32) + 48);
    v55 = v54 + 4;
    v56 = v54 + 6;
    os_unfair_lock_lock(v54 + 6);
    closure #1 in OSAllocatedUnfairLock<A>.current.getter(v55, v108);
    os_unfair_lock_unlock(v56);
    uint64_t v57 = *(void *)(v108[0] + 40);
    if (*(void *)(v57 + 16))
    {
      uint64_t v59 = *(void *)(v0 + 112);
      uint64_t v58 = *(void *)(v0 + 120);
      swift_bridgeObjectRetain();
      uint64_t v60 = specialized __RawDictionaryStorage.find<A>(_:)(v59, v58);
      if (v61)
      {
        uint64_t v62 = *(void *)(v57 + 56) + (v60 << 6);
        uint64_t v63 = *(void *)v62;
        uint64_t v65 = *(void *)(v62 + 16);
        uint64_t v64 = *(void *)(v62 + 24);
        uint64_t v66 = *(void *)(v62 + 32);
        int v67 = *(unsigned __int8 *)(v62 + 56);
        uint64_t v106 = *(void *)(v62 + 48);
        uint64_t v107 = *(void *)(v62 + 8);
        uint64_t v103 = *(void *)(v62 + 40);
        outlined copy of UseCase(*(void *)v62, v107, v65, v64, v66, v103, v106, *(unsigned char *)(v62 + 56));
        swift_bridgeObjectRelease();
        swift_release();
        if (v67 != 1) {
          goto LABEL_45;
        }
        if (v65)
        {
          outlined consume of UseCase(v63, v107, v65, v64, v66, v103, v106, 1);
          if ((*(unsigned char *)(v0 + 25) & 1) == 0) {
            goto LABEL_46;
          }
          goto LABEL_57;
        }
        uint64_t v68 = v64;
        if (v66)
        {
          if (one-time initialization token for defaultCacheEntryMinutesToLive != -1) {
            swift_once();
          }
          uint64_t v68 = static StaticPIRParameters.defaultCacheEntryMinutesToLive;
        }
        v69 = *(void **)(v0 + 120);
        uint64_t v102 = *(void *)(v0 + 112);
        outlined consume of UseCase(v63, v107, v65, v64, v66, v103, v106, 1);
        type metadata accessor for SqliteCache();
        swift_allocObject();
        swift_bridgeObjectRetain();
        uint64_t v101 = SqliteCache.init(useCase:cacheElementCount:cacheEntryMinutesToLive:getCurrentDate:)(v102, v69, v107, v68, (void (*)(uint64_t))closure #1 in default argument 4 of RequestsManager.init(configCache:keyStorage:activeUseCaseTracker:allowList:currentTime:), 0);
        (*(void (**)(uint64_t))(*(void *)v101 + 152))(v101);
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
    swift_release();
  }
LABEL_45:
  if ((*(unsigned char *)(v0 + 25) & 1) == 0) {
    goto LABEL_46;
  }
LABEL_57:
  v85 = *(os_unfair_lock_s **)(*(void *)(v0 + 32) + 48);
  v86 = v85 + 4;
  v87 = v85 + 6;
  os_unfair_lock_lock(v85 + 6);
  closure #1 in OSAllocatedUnfairLock<A>.current.getter(v86, v108);
  os_unfair_lock_unlock(v87);
  uint64_t v88 = *(void *)(v0 + 56);
  AllowList.group(useCase:)(*(void *)(v0 + 112), *(void *)(v0 + 120), v88);
  swift_release();
  uint64_t v89 = type metadata accessor for UseCaseGroup();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v89 - 8) + 48))(v88, 1, v89) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(*(void *)(v0 + 56), &demangling cache variable for type metadata for UseCaseGroup?);
  }
  else
  {
    uint64_t v90 = *(void *)(v0 + 56);
    uint64_t v91 = *(void *)(v0 + 64);
    uint64_t v92 = *(void *)(v0 + 48);
    _s8CipherML13NetworkConfigVWOcTm_0(v90 + *(int *)(v89 + 36), v92, type metadata accessor for NetworkConfig);
    outlined destroy of UseCaseGroup(v90, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
    _s8CipherML13NetworkConfigVWOcTm_0(v92, v91, type metadata accessor for NetworkManagerType);
    outlined destroy of UseCaseGroup(v92, type metadata accessor for NetworkConfig);
    uint64_t v93 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
    int v94 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v93 - 8) + 48))(v91, 2, v93);
    uint64_t v95 = *(void *)(v0 + 64);
    if (v94)
    {
      outlined destroy of UseCaseGroup(*(void *)(v0 + 64), type metadata accessor for NetworkManagerType);
    }
    else
    {
      uint64_t v96 = v95 + *(int *)(v93 + 48);
      v97 = (uint64_t *)(v95 + *(int *)(v93 + 64));
      uint64_t v98 = *v97;
      unint64_t v99 = v97[1];
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v96, &demangling cache variable for type metadata for URL?);
      uint64_t v100 = type metadata accessor for URL();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v100 - 8) + 8))(v95, v100);
      if (v99 >> 60 != 15)
      {
        outlined copy of Data._Representation(v98, v99);
        if (one-time initialization token for shared != -1) {
          swift_once();
        }
        TokenCache.clearTokens(user:)(v98, v99);
        outlined consume of Data?(v98, v99);
        outlined consume of Data?(v98, v99);
      }
    }
  }
LABEL_46:
  *(void *)(v0 + 232) = 0;
  if ((*(unsigned char *)(v0 + 24) & 0x40) != 0)
  {
    uint64_t v71 = *(void *)(v0 + 40);
    uint64_t v72 = *(void *)(*(void *)(v0 + 32) + 16);
    *(void *)(v0 + 240) = v72;
    uint64_t v73 = type metadata accessor for AspireApiConfig(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v73 - 8) + 56))(v71, 1, 1, v73);
    uint64_t v38 = RequestsManager.handleOptions(clientConfig:options:);
    uint64_t v36 = v72;
  }
  else
  {
    swift_bridgeObjectRelease();
    if ((*(unsigned char *)(v0 + 24) & 8) == 0)
    {
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      v70 = *(uint64_t (**)(void))(v0 + 8);
      return v70();
    }
    id v74 = objc_msgSend(*(id *)(v0 + 16), sel_sourceApplicationBundleIdentifier);
    if (v74)
    {
      v75 = v74;
      uint64_t v76 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v78 = v77;
    }
    else
    {
      uint64_t v76 = 0;
      uint64_t v78 = 0;
    }
    v79 = *(void **)(v0 + 16);
    uint64_t v80 = RequestsManager.keyRotation(for:)(v76, v78);
    *(void *)(v0 + 256) = v80;
    swift_bridgeObjectRelease();
    id v81 = objc_msgSend(v79, sel_useCase);
    uint64_t v82 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v84 = v83;

    *(void *)(v0 + 264) = v82;
    *(void *)(v0 + 272) = v84;
    uint64_t v38 = RequestsManager.handleOptions(clientConfig:options:);
    uint64_t v36 = v80;
  }
LABEL_18:
  return MEMORY[0x270FA2498](v38, v36, 0);
}

{
  uint64_t v0;
  uint64_t v2;

  ActiveUseCaseTracker.markActive(useCase:active:)(*(void *)(v0 + 112), *(void *)(v0 + 120), 1);
  swift_release();
  return MEMORY[0x270FA2498](RequestsManager.handleOptions(clientConfig:options:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t ObjectType;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t (*v28)();
  os_unfair_lock_s *v29;
  os_unfair_lock_s *v30;
  os_unfair_lock_s *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  os_unfair_lock_s *v44;
  os_unfair_lock_s *v45;
  os_unfair_lock_s *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t (*v62)(void);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  os_unfair_lock_s *v77;
  os_unfair_lock_s *v78;
  os_unfair_lock_s *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t (*v94)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t (*v95)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v96;
  uint64_t v97;
  void v98[2];
  uint64_t v99;
  uint64_t v100;

  unint64_t v99 = v0;
  uint64_t v1 = *(void *)(v0 + 24);
  if ((v1 & 4) != 0)
  {
    uint64_t v27 = *(void *)(*(void *)(v0 + 32) + 40);
    *(void *)(v0 + 136) = v27;
    uint64_t v28 = RequestsManager.handleOptions(clientConfig:options:);
    goto LABEL_9;
  }
  if ((v1 & 0x10) != 0)
  {
    id v2 = *(os_unfair_lock_s **)(*(void *)(v0 + 32) + 48);
    uint64_t v3 = v2 + 4;
    uint64_t v4 = v2 + 6;
    os_unfair_lock_lock(v2 + 6);
    closure #1 in OSAllocatedUnfairLock<A>.current.getter(v3, v98);
    *(void *)(v0 + 144) = 0;
    os_unfair_lock_unlock(v4);
    uint64_t v5 = *(void *)(v98[0] + 48);
    swift_bridgeObjectRetain();
    swift_release();
    if (*(void *)(v5 + 16))
    {
      uint64_t v6 = *(void *)(v0 + 112);
      uint64_t v7 = *(void *)(v0 + 120);
      swift_bridgeObjectRetain();
      uint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v6, v7);
      if (v9)
      {
        uint64_t v10 = *(void *)(v0 + 104);
        uint64_t v11 = *(void *)(v0 + 72);
        uint64_t v12 = *(void *)(v0 + 80);
        uint64_t v13 = *(void *)(v0 + 32);
        char v14 = (uint64_t *)(*(void *)(v5 + 56) + 16 * v8);
        uint64_t v16 = *v14;
        uint64_t v15 = v14[1];
        *(void *)(v0 + 152) = v15;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v17 = *(void *)(v13 + 32);
        uint64_t ObjectType = swift_getObjectType();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(v10, 1, 1, v11);
        int v94 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 + 16)
                                                                                  + **(int **)(v17 + 16));
        uint64_t v19 = (void *)swift_task_alloc();
        *(void *)(v0 + 160) = v19;
        uint64_t *v19 = v0;
        v19[1] = RequestsManager.handleOptions(clientConfig:options:);
        uint64_t v20 = *(void *)(v0 + 104);
        uint64_t v21 = v16;
        uint64_t v22 = v15;
        uint64_t v23 = ObjectType;
        long long v24 = v17;
        uint64_t v25 = v94;
        return v25(v21, v22, v20, v23, v24);
      }
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  if ((*(unsigned char *)(v0 + 24) & 0x80) != 0)
  {
    uint64_t v29 = *(os_unfair_lock_s **)(*(void *)(v0 + 32) + 48);
    char v30 = v29 + 4;
    size_t v31 = v29 + 6;
    os_unfair_lock_lock(v29 + 6);
    closure #1 in OSAllocatedUnfairLock<A>.current.getter(v30, v98);
    *(void *)(v0 + 168) = 0;
    os_unfair_lock_unlock(v31);
    uint64_t v32 = *(void *)(v98[0] + 48);
    swift_bridgeObjectRetain();
    swift_release();
    if (*(void *)(v32 + 16))
    {
      uint64_t v33 = *(void *)(v0 + 112);
      os_log_type_t v34 = *(void *)(v0 + 120);
      swift_bridgeObjectRetain();
      uint64_t v35 = specialized __RawDictionaryStorage.find<A>(_:)(v33, v34);
      if (v36)
      {
        unint64_t v37 = *(void *)(v0 + 32);
        uint64_t v38 = (uint64_t *)(*(void *)(v32 + 56) + 16 * v35);
        uint64_t v39 = *v38;
        *(void *)(v0 + 176) = *v38;
        uint64_t v40 = v38[1];
        *(void *)(v0 + 184) = v40;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *(void *)(v0 + 192) = *(void *)(v37 + 24);
        uint64_t v41 = *(void *)(v37 + 32);
        *(void *)(v0 + 200) = v41;
        uint64_t v42 = swift_getObjectType();
        *(void *)(v0 + 208) = v42;
        uint64_t v95 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v41 + 8)
                                                                                  + **(int **)(v41 + 8));
        uint64_t v43 = (void *)swift_task_alloc();
        *(void *)(v0 + 216) = v43;
        *uint64_t v43 = v0;
        v43[1] = RequestsManager.handleOptions(clientConfig:options:);
        uint64_t v21 = *(void *)(v0 + 96);
        uint64_t v22 = v39;
        uint64_t v20 = v40;
        uint64_t v23 = v42;
        long long v24 = v41;
        uint64_t v25 = v95;
        return v25(v21, v22, v20, v23, v24);
      }
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  if ((*(unsigned char *)(v0 + 24) & 0x20) != 0)
  {
    uint64_t v44 = *(os_unfair_lock_s **)(*(void *)(v0 + 32) + 48);
    uint64_t v45 = v44 + 4;
    char v46 = v44 + 6;
    os_unfair_lock_lock(v44 + 6);
    closure #1 in OSAllocatedUnfairLock<A>.current.getter(v45, v98);
    os_unfair_lock_unlock(v46);
    uint64_t v47 = *(void *)(v98[0] + 40);
    if (*(void *)(v47 + 16))
    {
      uint64_t v49 = *(void *)(v0 + 112);
      v48 = *(void *)(v0 + 120);
      swift_bridgeObjectRetain();
      uint64_t v50 = specialized __RawDictionaryStorage.find<A>(_:)(v49, v48);
      if (v51)
      {
        uint64_t v52 = *(void *)(v47 + 56) + (v50 << 6);
        v53 = *(void *)v52;
        v55 = *(void *)(v52 + 16);
        v54 = *(void *)(v52 + 24);
        uint64_t v57 = *(void *)(v52 + 32);
        v56 = *(void *)(v52 + 40);
        uint64_t v58 = *(unsigned __int8 *)(v52 + 56);
        uint64_t v96 = *(void *)(v52 + 48);
        v97 = *(void *)(v52 + 8);
        outlined copy of UseCase(*(void *)v52, v97, v55, v54, v57, v56, v96, *(unsigned char *)(v52 + 56));
        swift_bridgeObjectRelease();
        swift_release();
        if (v58 != 1) {
          goto LABEL_36;
        }
        if (v55)
        {
          outlined consume of UseCase(v53, v97, v55, v54, v57, v56, v96, 1);
          if ((*(unsigned char *)(v0 + 25) & 1) == 0) {
            goto LABEL_37;
          }
          goto LABEL_48;
        }
        uint64_t v59 = v54;
        if (v57)
        {
          if (one-time initialization token for defaultCacheEntryMinutesToLive != -1) {
            swift_once();
          }
          uint64_t v59 = static StaticPIRParameters.defaultCacheEntryMinutesToLive;
        }
        uint64_t v60 = *(void *)(v0 + 112);
        char v61 = *(void **)(v0 + 120);
        outlined consume of UseCase(v53, v97, v55, v54, v57, v56, v96, 1);
        type metadata accessor for SqliteCache();
        swift_allocObject();
        swift_bridgeObjectRetain();
        uint64_t v93 = SqliteCache.init(useCase:cacheElementCount:cacheEntryMinutesToLive:getCurrentDate:)(v60, v61, v97, v59, (void (*)(uint64_t))closure #1 in default argument 4 of RequestsManager.init(configCache:keyStorage:activeUseCaseTracker:allowList:currentTime:), 0);
        (*(void (**)(uint64_t))(*(void *)v93 + 152))(v93);
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
    swift_release();
  }
LABEL_36:
  if ((*(unsigned char *)(v0 + 25) & 1) == 0) {
    goto LABEL_37;
  }
LABEL_48:
  uint64_t v77 = *(os_unfair_lock_s **)(*(void *)(v0 + 32) + 48);
  uint64_t v78 = v77 + 4;
  v79 = v77 + 6;
  os_unfair_lock_lock(v77 + 6);
  closure #1 in OSAllocatedUnfairLock<A>.current.getter(v78, v98);
  os_unfair_lock_unlock(v79);
  uint64_t v80 = *(void *)(v0 + 56);
  AllowList.group(useCase:)(*(void *)(v0 + 112), *(void *)(v0 + 120), v80);
  swift_release();
  id v81 = type metadata accessor for UseCaseGroup();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v81 - 8) + 48))(v80, 1, v81) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(*(void *)(v0 + 56), &demangling cache variable for type metadata for UseCaseGroup?);
  }
  else
  {
    uint64_t v82 = *(void *)(v0 + 56);
    uint64_t v83 = *(void *)(v0 + 64);
    uint64_t v84 = *(void *)(v0 + 48);
    _s8CipherML13NetworkConfigVWOcTm_0(v82 + *(int *)(v81 + 36), v84, type metadata accessor for NetworkConfig);
    outlined destroy of UseCaseGroup(v82, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
    _s8CipherML13NetworkConfigVWOcTm_0(v84, v83, type metadata accessor for NetworkManagerType);
    outlined destroy of UseCaseGroup(v84, type metadata accessor for NetworkConfig);
    v85 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
    v86 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v85 - 8) + 48))(v83, 2, v85);
    v87 = *(void *)(v0 + 64);
    if (v86)
    {
      outlined destroy of UseCaseGroup(*(void *)(v0 + 64), type metadata accessor for NetworkManagerType);
    }
    else
    {
      uint64_t v88 = v87 + *(int *)(v85 + 48);
      uint64_t v89 = (uint64_t *)(v87 + *(int *)(v85 + 64));
      uint64_t v90 = *v89;
      uint64_t v91 = v89[1];
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v88, &demangling cache variable for type metadata for URL?);
      uint64_t v92 = type metadata accessor for URL();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v92 - 8) + 8))(v87, v92);
      if (v91 >> 60 != 15)
      {
        outlined copy of Data._Representation(v90, v91);
        if (one-time initialization token for shared != -1) {
          swift_once();
        }
        TokenCache.clearTokens(user:)(v90, v91);
        outlined consume of Data?(v90, v91);
        outlined consume of Data?(v90, v91);
      }
    }
  }
LABEL_37:
  *(void *)(v0 + 232) = 0;
  if ((*(unsigned char *)(v0 + 24) & 0x40) != 0)
  {
    uint64_t v63 = *(void *)(v0 + 40);
    uint64_t v64 = *(void *)(*(void *)(v0 + 32) + 16);
    *(void *)(v0 + 240) = v64;
    uint64_t v65 = type metadata accessor for AspireApiConfig(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v65 - 8) + 56))(v63, 1, 1, v65);
    uint64_t v28 = RequestsManager.handleOptions(clientConfig:options:);
    uint64_t v27 = v64;
  }
  else
  {
    swift_bridgeObjectRelease();
    if ((*(unsigned char *)(v0 + 24) & 8) == 0)
    {
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v62 = *(uint64_t (**)(void))(v0 + 8);
      return v62();
    }
    uint64_t v66 = objc_msgSend(*(id *)(v0 + 16), sel_sourceApplicationBundleIdentifier);
    if (v66)
    {
      int v67 = v66;
      uint64_t v68 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v70 = v69;
    }
    else
    {
      uint64_t v68 = 0;
      v70 = 0;
    }
    uint64_t v71 = *(void **)(v0 + 16);
    uint64_t v72 = RequestsManager.keyRotation(for:)(v68, v70);
    *(void *)(v0 + 256) = v72;
    swift_bridgeObjectRelease();
    uint64_t v73 = objc_msgSend(v71, sel_useCase);
    id v74 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v76 = v75;

    *(void *)(v0 + 264) = v74;
    *(void *)(v0 + 272) = v76;
    uint64_t v28 = RequestsManager.handleOptions(clientConfig:options:);
    uint64_t v27 = v72;
  }
LABEL_9:
  return MEMORY[0x270FA2498](v28, v27, 0);
}

{
  uint64_t v0;
  uint64_t v2;

  ActiveUseCaseTracker.markActive(useCase:active:)(*(void *)(v0 + 112), *(void *)(v0 + 120), 0);
  swift_release();
  return MEMORY[0x270FA2498](RequestsManager.handleOptions(clientConfig:options:), 0, 0);
}

{
  uint64_t v0;
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t ObjectType;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  os_unfair_lock_s *v26;
  os_unfair_lock_s *v27;
  os_unfair_lock_s *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  os_unfair_lock_s *v41;
  os_unfair_lock_s *v42;
  os_unfair_lock_s *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t (*v59)(void);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t (*v63)();
  uint64_t v64;
  id v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  os_unfair_lock_s *v76;
  os_unfair_lock_s *v77;
  os_unfair_lock_s *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t (*v93)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t (*v94)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v95;
  uint64_t v96;
  void v97[2];
  uint64_t v98;
  uint64_t v99;

  uint64_t v98 = v0;
  if ((*(unsigned char *)(v0 + 24) & 0x10) != 0)
  {
    uint64_t v1 = *(os_unfair_lock_s **)(*(void *)(v0 + 32) + 48);
    id v2 = v1 + 4;
    uint64_t v3 = v1 + 6;
    os_unfair_lock_lock(v1 + 6);
    closure #1 in OSAllocatedUnfairLock<A>.current.getter(v2, v97);
    *(void *)(v0 + 144) = 0;
    os_unfair_lock_unlock(v3);
    uint64_t v4 = *(void *)(v97[0] + 48);
    swift_bridgeObjectRetain();
    swift_release();
    if (*(void *)(v4 + 16))
    {
      uint64_t v5 = *(void *)(v0 + 112);
      uint64_t v6 = *(void *)(v0 + 120);
      swift_bridgeObjectRetain();
      uint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
      if (v8)
      {
        uint64_t v9 = *(void *)(v0 + 104);
        uint64_t v10 = *(void *)(v0 + 72);
        uint64_t v11 = *(void *)(v0 + 80);
        uint64_t v12 = *(void *)(v0 + 32);
        uint64_t v13 = (uint64_t *)(*(void *)(v4 + 56) + 16 * v7);
        uint64_t v15 = *v13;
        char v14 = v13[1];
        *(void *)(v0 + 152) = v14;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v16 = *(void *)(v12 + 32);
        uint64_t ObjectType = swift_getObjectType();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, 1, 1, v10);
        uint64_t v93 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 + 16)
                                                                                  + **(int **)(v16 + 16));
        uint64_t v18 = (void *)swift_task_alloc();
        *(void *)(v0 + 160) = v18;
        *uint64_t v18 = v0;
        v18[1] = RequestsManager.handleOptions(clientConfig:options:);
        uint64_t v19 = *(void *)(v0 + 104);
        uint64_t v20 = v15;
        uint64_t v21 = v14;
        uint64_t v22 = ObjectType;
        uint64_t v23 = v16;
        long long v24 = v93;
        return v24(v20, v21, v19, v22, v23);
      }
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  if ((*(unsigned char *)(v0 + 24) & 0x80) != 0)
  {
    uint64_t v26 = *(os_unfair_lock_s **)(*(void *)(v0 + 32) + 48);
    uint64_t v27 = v26 + 4;
    uint64_t v28 = v26 + 6;
    os_unfair_lock_lock(v26 + 6);
    closure #1 in OSAllocatedUnfairLock<A>.current.getter(v27, v97);
    *(void *)(v0 + 168) = 0;
    os_unfair_lock_unlock(v28);
    uint64_t v29 = *(void *)(v97[0] + 48);
    swift_bridgeObjectRetain();
    swift_release();
    if (*(void *)(v29 + 16))
    {
      char v30 = *(void *)(v0 + 112);
      size_t v31 = *(void *)(v0 + 120);
      swift_bridgeObjectRetain();
      uint64_t v32 = specialized __RawDictionaryStorage.find<A>(_:)(v30, v31);
      if (v33)
      {
        os_log_type_t v34 = *(void *)(v0 + 32);
        uint64_t v35 = (uint64_t *)(*(void *)(v29 + 56) + 16 * v32);
        uint64_t v36 = *v35;
        *(void *)(v0 + 176) = *v35;
        unint64_t v37 = v35[1];
        *(void *)(v0 + 184) = v37;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *(void *)(v0 + 192) = *(void *)(v34 + 24);
        uint64_t v38 = *(void *)(v34 + 32);
        *(void *)(v0 + 200) = v38;
        uint64_t v39 = swift_getObjectType();
        *(void *)(v0 + 208) = v39;
        int v94 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v38 + 8)
                                                                                  + **(int **)(v38 + 8));
        uint64_t v40 = (void *)swift_task_alloc();
        *(void *)(v0 + 216) = v40;
        *uint64_t v40 = v0;
        v40[1] = RequestsManager.handleOptions(clientConfig:options:);
        uint64_t v20 = *(void *)(v0 + 96);
        uint64_t v21 = v36;
        uint64_t v19 = v37;
        uint64_t v22 = v39;
        uint64_t v23 = v38;
        long long v24 = v94;
        return v24(v20, v21, v19, v22, v23);
      }
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  if ((*(unsigned char *)(v0 + 24) & 0x20) != 0)
  {
    uint64_t v41 = *(os_unfair_lock_s **)(*(void *)(v0 + 32) + 48);
    uint64_t v42 = v41 + 4;
    uint64_t v43 = v41 + 6;
    os_unfair_lock_lock(v41 + 6);
    closure #1 in OSAllocatedUnfairLock<A>.current.getter(v42, v97);
    os_unfair_lock_unlock(v43);
    uint64_t v44 = *(void *)(v97[0] + 40);
    if (*(void *)(v44 + 16))
    {
      char v46 = *(void *)(v0 + 112);
      uint64_t v45 = *(void *)(v0 + 120);
      swift_bridgeObjectRetain();
      uint64_t v47 = specialized __RawDictionaryStorage.find<A>(_:)(v46, v45);
      if (v48)
      {
        uint64_t v49 = *(void *)(v44 + 56) + (v47 << 6);
        uint64_t v50 = *(void *)v49;
        uint64_t v52 = *(void *)(v49 + 16);
        uint64_t v51 = *(void *)(v49 + 24);
        v54 = *(void *)(v49 + 32);
        v53 = *(void *)(v49 + 40);
        v55 = *(unsigned __int8 *)(v49 + 56);
        uint64_t v95 = *(void *)(v49 + 48);
        uint64_t v96 = *(void *)(v49 + 8);
        outlined copy of UseCase(*(void *)v49, v96, v52, v51, v54, v53, v95, *(unsigned char *)(v49 + 56));
        swift_bridgeObjectRelease();
        swift_release();
        if (v55 != 1) {
          goto LABEL_31;
        }
        if (v52)
        {
          outlined consume of UseCase(v50, v96, v52, v51, v54, v53, v95, 1);
          if ((*(unsigned char *)(v0 + 25) & 1) == 0) {
            goto LABEL_32;
          }
          goto LABEL_46;
        }
        v56 = v51;
        if (v54)
        {
          if (one-time initialization token for defaultCacheEntryMinutesToLive != -1) {
            swift_once();
          }
          v56 = static StaticPIRParameters.defaultCacheEntryMinutesToLive;
        }
        uint64_t v57 = *(void *)(v0 + 112);
        uint64_t v58 = *(void **)(v0 + 120);
        outlined consume of UseCase(v50, v96, v52, v51, v54, v53, v95, 1);
        type metadata accessor for SqliteCache();
        swift_allocObject();
        swift_bridgeObjectRetain();
        uint64_t v92 = SqliteCache.init(useCase:cacheElementCount:cacheEntryMinutesToLive:getCurrentDate:)(v57, v58, v96, v56, (void (*)(uint64_t))closure #1 in default argument 4 of RequestsManager.init(configCache:keyStorage:activeUseCaseTracker:allowList:currentTime:), 0);
        (*(void (**)(uint64_t))(*(void *)v92 + 152))(v92);
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
    swift_release();
  }
LABEL_31:
  if ((*(unsigned char *)(v0 + 25) & 1) == 0) {
    goto LABEL_32;
  }
LABEL_46:
  uint64_t v76 = *(os_unfair_lock_s **)(*(void *)(v0 + 32) + 48);
  uint64_t v77 = v76 + 4;
  uint64_t v78 = v76 + 6;
  os_unfair_lock_lock(v76 + 6);
  closure #1 in OSAllocatedUnfairLock<A>.current.getter(v77, v97);
  os_unfair_lock_unlock(v78);
  v79 = *(void *)(v0 + 56);
  AllowList.group(useCase:)(*(void *)(v0 + 112), *(void *)(v0 + 120), v79);
  swift_release();
  uint64_t v80 = type metadata accessor for UseCaseGroup();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v80 - 8) + 48))(v79, 1, v80) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(*(void *)(v0 + 56), &demangling cache variable for type metadata for UseCaseGroup?);
  }
  else
  {
    id v81 = *(void *)(v0 + 56);
    uint64_t v82 = *(void *)(v0 + 64);
    uint64_t v83 = *(void *)(v0 + 48);
    _s8CipherML13NetworkConfigVWOcTm_0(v81 + *(int *)(v80 + 36), v83, type metadata accessor for NetworkConfig);
    outlined destroy of UseCaseGroup(v81, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
    _s8CipherML13NetworkConfigVWOcTm_0(v83, v82, type metadata accessor for NetworkManagerType);
    outlined destroy of UseCaseGroup(v83, type metadata accessor for NetworkConfig);
    uint64_t v84 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
    v85 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v84 - 8) + 48))(v82, 2, v84);
    v86 = *(void *)(v0 + 64);
    if (v85)
    {
      outlined destroy of UseCaseGroup(*(void *)(v0 + 64), type metadata accessor for NetworkManagerType);
    }
    else
    {
      v87 = v86 + *(int *)(v84 + 48);
      uint64_t v88 = (uint64_t *)(v86 + *(int *)(v84 + 64));
      uint64_t v89 = *v88;
      uint64_t v90 = v88[1];
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v87, &demangling cache variable for type metadata for URL?);
      uint64_t v91 = type metadata accessor for URL();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v91 - 8) + 8))(v86, v91);
      if (v90 >> 60 != 15)
      {
        outlined copy of Data._Representation(v89, v90);
        if (one-time initialization token for shared != -1) {
          swift_once();
        }
        TokenCache.clearTokens(user:)(v89, v90);
        outlined consume of Data?(v89, v90);
        outlined consume of Data?(v89, v90);
      }
    }
  }
LABEL_32:
  *(void *)(v0 + 232) = 0;
  if ((*(unsigned char *)(v0 + 24) & 0x40) != 0)
  {
    uint64_t v60 = *(void *)(v0 + 40);
    char v61 = *(void *)(*(void *)(v0 + 32) + 16);
    *(void *)(v0 + 240) = v61;
    uint64_t v62 = type metadata accessor for AspireApiConfig(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v62 - 8) + 56))(v60, 1, 1, v62);
    uint64_t v63 = RequestsManager.handleOptions(clientConfig:options:);
    uint64_t v64 = v61;
  }
  else
  {
    swift_bridgeObjectRelease();
    if ((*(unsigned char *)(v0 + 24) & 8) == 0)
    {
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v59 = *(uint64_t (**)(void))(v0 + 8);
      return v59();
    }
    uint64_t v65 = objc_msgSend(*(id *)(v0 + 16), sel_sourceApplicationBundleIdentifier);
    if (v65)
    {
      uint64_t v66 = v65;
      int v67 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v69 = v68;
    }
    else
    {
      int v67 = 0;
      v69 = 0;
    }
    v70 = *(void **)(v0 + 16);
    uint64_t v71 = RequestsManager.keyRotation(for:)(v67, v69);
    *(void *)(v0 + 256) = v71;
    swift_bridgeObjectRelease();
    uint64_t v72 = objc_msgSend(v70, sel_useCase);
    uint64_t v73 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v75 = v74;

    *(void *)(v0 + 264) = v73;
    *(void *)(v0 + 272) = v75;
    uint64_t v63 = RequestsManager.handleOptions(clientConfig:options:);
    uint64_t v64 = v71;
  }
  return MEMORY[0x270FA2498](v63, v64, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 104);
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v1, &demangling cache variable for type metadata for UserIdentifier?);
  return MEMORY[0x270FA2498](RequestsManager.handleOptions(clientConfig:options:), 0, 0);
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x270FA2498](RequestsManager.handleOptions(clientConfig:options:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 104);
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v1, &demangling cache variable for type metadata for UserIdentifier?);
  return MEMORY[0x270FA2498](RequestsManager.handleOptions(clientConfig:options:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v1 = v0[29];
  id v2 = v0[5];
  ConfigCache.set(name:value:)(v0[14], v0[15], v2);
  v0[31] = v1;
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v2, &demangling cache variable for type metadata for AspireApiConfig?);
  swift_bridgeObjectRelease();
  if (v1) {
    uint64_t v3 = RequestsManager.handleOptions(clientConfig:options:);
  }
  else {
    uint64_t v3 = RequestsManager.handleOptions(clientConfig:options:);
  }
  return MEMORY[0x270FA2498](v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if ((*(unsigned char *)(v0 + 24) & 8) != 0)
  {
    uint64_t v3 = objc_msgSend(*(id *)(v0 + 16), sel_sourceApplicationBundleIdentifier);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v7 = v6;
    }
    else
    {
      uint64_t v5 = 0;
      uint64_t v7 = 0;
    }
    uint64_t v8 = *(void **)(v0 + 16);
    uint64_t v9 = RequestsManager.keyRotation(for:)(v5, v7);
    *(void *)(v0 + 256) = v9;
    swift_bridgeObjectRelease();
    uint64_t v10 = objc_msgSend(v8, sel_useCase);
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v13 = v12;

    *(void *)(v0 + 264) = v11;
    *(void *)(v0 + 272) = v13;
    return MEMORY[0x270FA2498](RequestsManager.handleOptions(clientConfig:options:), v9, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
    return v1();
  }
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  id v2 = v0[33];
  uint64_t v1 = v0[34];
  uint64_t v3 = v0[32];
  uint64_t v4 = (void *)swift_allocObject();
  v0[35] = v4;
  v4[2] = v3;
  v4[3] = v2;
  v4[4] = v1;
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized Coordinator.run(key:_:)
                                                                           + async function pointer to specialized Coordinator.run(key:_:));
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v5 = (void *)swift_task_alloc();
  v0[36] = v5;
  *uint64_t v5 = v0;
  v5[1] = RequestsManager.handleOptions(clientConfig:options:);
  uint64_t v6 = v0[33];
  uint64_t v7 = v0[34];
  return v9((uint64_t)v9, v6, v7, (uint64_t)&async function pointer to partial apply for closure #1 in KeyRotation.runWithCoordinator(useCase:), (uint64_t)v4);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  id v2 = *v1;
  *(void *)(*v1 + 296) = v0;
  swift_task_dealloc();
  swift_release();
  uint64_t v3 = *(void *)(v2 + 256);
  if (v0) {
    uint64_t v4 = RequestsManager.handleOptions(clientConfig:options:);
  }
  else {
    uint64_t v4 = RequestsManager.handleOptions(clientConfig:options:);
  }
  return MEMORY[0x270FA2498](v4, v3, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_bridgeObjectRelease();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  return MEMORY[0x270FA2498](RequestsManager.handleOptions(clientConfig:options:), 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_bridgeObjectRelease();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void RequestsManager.handleOptions(clientConfig:options:)()
{
  uint64_t v74 = v0;
  uint64_t v1 = *(void *)(v0 + 144);
  if ((*(unsigned char *)(v0 + 24) & 0x80) != 0)
  {
    id v2 = *(os_unfair_lock_s **)(*(void *)(v0 + 32) + 48);
    uint64_t v3 = v2 + 4;
    uint64_t v4 = v2 + 6;
    os_unfair_lock_lock(v2 + 6);
    closure #1 in OSAllocatedUnfairLock<A>.current.getter(v3, v73);
    *(void *)(v0 + 168) = v1;
    os_unfair_lock_unlock(v4);
    if (v1) {
      return;
    }
    uint64_t v5 = *(void *)(v73[0] + 48);
    swift_bridgeObjectRetain();
    swift_release();
    if (*(void *)(v5 + 16))
    {
      uint64_t v6 = *(void *)(v0 + 112);
      uint64_t v7 = *(void *)(v0 + 120);
      swift_bridgeObjectRetain();
      uint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v6, v7);
      if (v9)
      {
        uint64_t v10 = *(void *)(v0 + 32);
        uint64_t v11 = (uint64_t *)(*(void *)(v5 + 56) + 16 * v8);
        uint64_t v12 = *v11;
        *(void *)(v0 + 176) = *v11;
        uint64_t v13 = v11[1];
        *(void *)(v0 + 184) = v13;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *(void *)(v0 + 192) = *(void *)(v10 + 24);
        uint64_t v14 = *(void *)(v10 + 32);
        *(void *)(v0 + 200) = v14;
        uint64_t ObjectType = swift_getObjectType();
        *(void *)(v0 + 208) = ObjectType;
        v70 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 + 8)
                                                                               + **(int **)(v14 + 8));
        uint64_t v16 = (void *)swift_task_alloc();
        *(void *)(v0 + 216) = v16;
        *uint64_t v16 = v0;
        v16[1] = RequestsManager.handleOptions(clientConfig:options:);
        uint64_t v17 = *(void *)(v0 + 96);
        v70(v17, v12, v13, ObjectType, v14);
        return;
      }
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    uint64_t v1 = 0;
  }
  if ((*(unsigned char *)(v0 + 24) & 0x20) != 0)
  {
    uint64_t v18 = *(os_unfair_lock_s **)(*(void *)(v0 + 32) + 48);
    uint64_t v19 = v18 + 4;
    uint64_t v20 = v18 + 6;
    os_unfair_lock_lock(v18 + 6);
    closure #1 in OSAllocatedUnfairLock<A>.current.getter(v19, v73);
    os_unfair_lock_unlock(v20);
    if (v1) {
      return;
    }
    uint64_t v21 = *(void *)(v73[0] + 40);
    if (*(void *)(v21 + 16))
    {
      uint64_t v23 = *(void *)(v0 + 112);
      uint64_t v22 = *(void *)(v0 + 120);
      swift_bridgeObjectRetain();
      uint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(v23, v22);
      if (v25)
      {
        uint64_t v26 = *(void *)(v21 + 56) + (v24 << 6);
        uint64_t v27 = *(void *)v26;
        uint64_t v29 = *(void *)(v26 + 16);
        uint64_t v28 = *(void *)(v26 + 24);
        uint64_t v31 = *(void *)(v26 + 32);
        uint64_t v30 = *(void *)(v26 + 40);
        int v32 = *(unsigned __int8 *)(v26 + 56);
        uint64_t v71 = *(void *)(v26 + 48);
        uint64_t v72 = *(void *)(v26 + 8);
        outlined copy of UseCase(*(void *)v26, v72, v29, v28, v31, v30, v71, *(unsigned char *)(v26 + 56));
        swift_bridgeObjectRelease();
        swift_release();
        if (v32 == 1)
        {
          if ((v29 & 1) == 0)
          {
            uint64_t v33 = v28;
            if (v31)
            {
              if (one-time initialization token for defaultCacheEntryMinutesToLive != -1) {
                swift_once();
              }
              uint64_t v33 = static StaticPIRParameters.defaultCacheEntryMinutesToLive;
            }
            uint64_t v34 = *(void *)(v0 + 112);
            uint64_t v35 = *(void **)(v0 + 120);
            outlined consume of UseCase(v27, v72, v29, v28, v31, v30, v71, 1);
            type metadata accessor for SqliteCache();
            swift_allocObject();
            swift_bridgeObjectRetain();
            uint64_t v36 = SqliteCache.init(useCase:cacheElementCount:cacheEntryMinutesToLive:getCurrentDate:)(v34, v35, v72, v33, (void (*)(uint64_t))closure #1 in default argument 4 of RequestsManager.init(configCache:keyStorage:activeUseCaseTracker:allowList:currentTime:), 0);
            (*(void (**)(uint64_t))(*(void *)v36 + 152))(v36);
            swift_release();
            if ((*(unsigned char *)(v0 + 25) & 1) == 0) {
              goto LABEL_37;
            }
            goto LABEL_26;
          }
          outlined consume of UseCase(v27, v72, v29, v28, v31, v30, v71, 1);
        }
        goto LABEL_24;
      }
      swift_bridgeObjectRelease();
    }
    swift_release();
LABEL_24:
    uint64_t v1 = 0;
  }
  if ((*(unsigned char *)(v0 + 25) & 1) == 0) {
    goto LABEL_37;
  }
LABEL_26:
  unint64_t v37 = *(os_unfair_lock_s **)(*(void *)(v0 + 32) + 48);
  uint64_t v38 = v37 + 4;
  uint64_t v39 = v37 + 6;
  os_unfair_lock_lock(v37 + 6);
  closure #1 in OSAllocatedUnfairLock<A>.current.getter(v38, v73);
  os_unfair_lock_unlock(v39);
  if (v1) {
    return;
  }
  uint64_t v40 = *(void *)(v0 + 56);
  AllowList.group(useCase:)(*(void *)(v0 + 112), *(void *)(v0 + 120), v40);
  swift_release();
  uint64_t v41 = type metadata accessor for UseCaseGroup();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 48))(v40, 1, v41) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(*(void *)(v0 + 56), &demangling cache variable for type metadata for UseCaseGroup?);
  }
  else
  {
    uint64_t v42 = *(void *)(v0 + 56);
    uint64_t v43 = *(void *)(v0 + 64);
    uint64_t v44 = *(void *)(v0 + 48);
    _s8CipherML13NetworkConfigVWOcTm_0(v42 + *(int *)(v41 + 36), v44, type metadata accessor for NetworkConfig);
    outlined destroy of UseCaseGroup(v42, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
    _s8CipherML13NetworkConfigVWOcTm_0(v44, v43, type metadata accessor for NetworkManagerType);
    outlined destroy of UseCaseGroup(v44, type metadata accessor for NetworkConfig);
    uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
    int v46 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 48))(v43, 2, v45);
    uint64_t v47 = *(void *)(v0 + 64);
    if (v46)
    {
      outlined destroy of UseCaseGroup(*(void *)(v0 + 64), type metadata accessor for NetworkManagerType);
    }
    else
    {
      uint64_t v48 = v47 + *(int *)(v45 + 48);
      uint64_t v49 = (uint64_t *)(v47 + *(int *)(v45 + 64));
      uint64_t v50 = *v49;
      unint64_t v51 = v49[1];
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v48, &demangling cache variable for type metadata for URL?);
      uint64_t v52 = type metadata accessor for URL();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v52 - 8) + 8))(v47, v52);
      uint64_t v1 = 0;
      if (v51 >> 60 == 15) {
        goto LABEL_37;
      }
      outlined copy of Data._Representation(v50, v51);
      if (one-time initialization token for shared != -1) {
        swift_once();
      }
      TokenCache.clearTokens(user:)(v50, v51);
      outlined consume of Data?(v50, v51);
      outlined consume of Data?(v50, v51);
    }
  }
  uint64_t v1 = 0;
LABEL_37:
  *(void *)(v0 + 232) = v1;
  if ((*(unsigned char *)(v0 + 24) & 0x40) != 0)
  {
    uint64_t v54 = *(void *)(v0 + 40);
    uint64_t v55 = *(void *)(*(void *)(v0 + 32) + 16);
    *(void *)(v0 + 240) = v55;
    uint64_t v56 = type metadata accessor for AspireApiConfig(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v56 - 8) + 56))(v54, 1, 1, v56);
    uint64_t v57 = RequestsManager.handleOptions(clientConfig:options:);
    uint64_t v58 = v55;
  }
  else
  {
    swift_bridgeObjectRelease();
    if ((*(unsigned char *)(v0 + 24) & 8) == 0)
    {
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      v53 = *(void (**)(void))(v0 + 8);
      v53();
      return;
    }
    id v59 = objc_msgSend(*(id *)(v0 + 16), sel_sourceApplicationBundleIdentifier);
    if (v59)
    {
      uint64_t v60 = v59;
      uint64_t v61 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v63 = v62;
    }
    else
    {
      uint64_t v61 = 0;
      uint64_t v63 = 0;
    }
    uint64_t v64 = *(void **)(v0 + 16);
    uint64_t v65 = RequestsManager.keyRotation(for:)(v61, v63);
    *(void *)(v0 + 256) = v65;
    swift_bridgeObjectRelease();
    id v66 = objc_msgSend(v64, sel_useCase);
    uint64_t v67 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v69 = v68;

    *(void *)(v0 + 264) = v67;
    *(void *)(v0 + 272) = v69;
    uint64_t v57 = RequestsManager.handleOptions(clientConfig:options:);
    uint64_t v58 = v65;
  }
  MEMORY[0x270FA2498](v57, v58, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  os_unfair_lock_s *v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  os_unfair_lock_s *v34;
  os_unfair_lock_s *v35;
  os_unfair_lock_s *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  void (*v50)(void);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)();
  uint64_t v55;
  id v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v69;
  uint64_t v70;
  void v71[2];
  uint64_t v72;
  uint64_t v73;

  uint64_t v72 = v0;
  uint64_t v1 = *(void *)(v0 + 96);
  id v2 = *(void *)(v0 + 72);
  uint64_t v3 = *(void *)(v0 + 80);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) != 1)
  {
    v70 = *(void *)(v0 + 200);
    uint64_t v24 = *(void *)(v0 + 104);
    char v25 = *(void *)(v0 + 88);
    _s8CipherML14UserIdentifierVWObTm_0(v1, v25, (uint64_t (*)(void))type metadata accessor for UserIdentifier);
    uint64_t v26 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    uint64_t v27 = *(int *)(v2 + 24);
    swift_bridgeObjectRelease();
    *(void *)(v25 + v27) = v26;
    _s8CipherML13NetworkConfigVWOcTm_0(v25, v24, (uint64_t (*)(void))type metadata accessor for UserIdentifier);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v3 + 56))(v24, 0, 1, v2);
    uint64_t v68 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v70 + 16) + **(int **)(v70 + 16));
    uint64_t v28 = (void *)swift_task_alloc();
    *(void *)(v0 + 224) = v28;
    *uint64_t v28 = v0;
    v28[1] = RequestsManager.handleOptions(clientConfig:options:);
    uint64_t v30 = *(void *)(v0 + 200);
    uint64_t v29 = *(void *)(v0 + 208);
    uint64_t v31 = *(void *)(v0 + 184);
    int v32 = *(void *)(v0 + 176);
    uint64_t v33 = *(void *)(v0 + 104);
    v68(v32, v31, v33, v29, v30);
    return;
  }
  swift_bridgeObjectRelease();
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v1, &demangling cache variable for type metadata for UserIdentifier?);
  uint64_t v4 = *(void *)(v0 + 168);
  if ((*(unsigned char *)(v0 + 24) & 0x20) == 0)
  {
LABEL_19:
    if ((*(unsigned char *)(v0 + 25) & 1) == 0) {
      goto LABEL_31;
    }
    goto LABEL_20;
  }
  uint64_t v5 = *(os_unfair_lock_s **)(*(void *)(v0 + 32) + 48);
  uint64_t v6 = v5 + 4;
  uint64_t v7 = v5 + 6;
  os_unfair_lock_lock(v5 + 6);
  closure #1 in OSAllocatedUnfairLock<A>.current.getter(v6, v71);
  os_unfair_lock_unlock(v7);
  if (v4) {
    return;
  }
  uint64_t v8 = *(void *)(v71[0] + 40);
  if (!*(void *)(v8 + 16)) {
    goto LABEL_17;
  }
  uint64_t v10 = *(void *)(v0 + 112);
  char v9 = *(void *)(v0 + 120);
  swift_bridgeObjectRetain();
  uint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v9);
  if ((v12 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_17:
    swift_release();
    goto LABEL_18;
  }
  uint64_t v13 = *(void *)(v8 + 56) + (v11 << 6);
  uint64_t v14 = *(void *)v13;
  uint64_t v16 = *(void *)(v13 + 16);
  uint64_t v15 = *(void *)(v13 + 24);
  uint64_t v18 = *(void *)(v13 + 32);
  uint64_t v17 = *(void *)(v13 + 40);
  uint64_t v19 = *(unsigned __int8 *)(v13 + 56);
  uint64_t v67 = *(void *)(v13 + 48);
  uint64_t v69 = *(void *)(v13 + 8);
  outlined copy of UseCase(*(void *)v13, v69, v16, v15, v18, v17, v67, *(unsigned char *)(v13 + 56));
  swift_bridgeObjectRelease();
  swift_release();
  if (v19 != 1)
  {
LABEL_18:
    uint64_t v4 = 0;
    goto LABEL_19;
  }
  if (v16)
  {
    outlined consume of UseCase(v14, v69, v16, v15, v18, v17, v67, 1);
    goto LABEL_18;
  }
  uint64_t v20 = v15;
  if (v18)
  {
    if (one-time initialization token for defaultCacheEntryMinutesToLive != -1) {
      swift_once();
    }
    uint64_t v20 = static StaticPIRParameters.defaultCacheEntryMinutesToLive;
  }
  uint64_t v21 = *(void *)(v0 + 112);
  uint64_t v22 = *(void **)(v0 + 120);
  outlined consume of UseCase(v14, v69, v16, v15, v18, v17, v67, 1);
  type metadata accessor for SqliteCache();
  swift_allocObject();
  swift_bridgeObjectRetain();
  uint64_t v23 = SqliteCache.init(useCase:cacheElementCount:cacheEntryMinutesToLive:getCurrentDate:)(v21, v22, v69, v20, (void (*)(uint64_t))closure #1 in default argument 4 of RequestsManager.init(configCache:keyStorage:activeUseCaseTracker:allowList:currentTime:), 0);
  (*(void (**)(uint64_t))(*(void *)v23 + 152))(v23);
  swift_release();
  if ((*(unsigned char *)(v0 + 25) & 1) == 0) {
    goto LABEL_31;
  }
LABEL_20:
  uint64_t v34 = *(os_unfair_lock_s **)(*(void *)(v0 + 32) + 48);
  uint64_t v35 = v34 + 4;
  uint64_t v36 = v34 + 6;
  os_unfair_lock_lock(v34 + 6);
  closure #1 in OSAllocatedUnfairLock<A>.current.getter(v35, v71);
  os_unfair_lock_unlock(v36);
  if (v4) {
    return;
  }
  unint64_t v37 = *(void *)(v0 + 56);
  AllowList.group(useCase:)(*(void *)(v0 + 112), *(void *)(v0 + 120), v37);
  swift_release();
  uint64_t v38 = type metadata accessor for UseCaseGroup();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 48))(v37, 1, v38) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(*(void *)(v0 + 56), &demangling cache variable for type metadata for UseCaseGroup?);
LABEL_30:
    uint64_t v4 = 0;
    goto LABEL_31;
  }
  uint64_t v39 = *(void *)(v0 + 56);
  uint64_t v40 = *(void *)(v0 + 64);
  uint64_t v41 = *(void *)(v0 + 48);
  _s8CipherML13NetworkConfigVWOcTm_0(v39 + *(int *)(v38 + 36), v41, type metadata accessor for NetworkConfig);
  outlined destroy of UseCaseGroup(v39, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
  _s8CipherML13NetworkConfigVWOcTm_0(v41, v40, type metadata accessor for NetworkManagerType);
  outlined destroy of UseCaseGroup(v41, type metadata accessor for NetworkConfig);
  uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
  uint64_t v43 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 48))(v40, 2, v42);
  uint64_t v44 = *(void *)(v0 + 64);
  if (v43)
  {
    outlined destroy of UseCaseGroup(*(void *)(v0 + 64), type metadata accessor for NetworkManagerType);
    goto LABEL_30;
  }
  uint64_t v45 = v44 + *(int *)(v42 + 48);
  int v46 = (uint64_t *)(v44 + *(int *)(v42 + 64));
  uint64_t v47 = *v46;
  uint64_t v48 = v46[1];
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v45, &demangling cache variable for type metadata for URL?);
  uint64_t v49 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v49 - 8) + 8))(v44, v49);
  uint64_t v4 = 0;
  if (v48 >> 60 != 15)
  {
    outlined copy of Data._Representation(v47, v48);
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    TokenCache.clearTokens(user:)(v47, v48);
    outlined consume of Data?(v47, v48);
    outlined consume of Data?(v47, v48);
    goto LABEL_30;
  }
LABEL_31:
  *(void *)(v0 + 232) = v4;
  if ((*(unsigned char *)(v0 + 24) & 0x40) != 0)
  {
    unint64_t v51 = *(void *)(v0 + 40);
    uint64_t v52 = *(void *)(*(void *)(v0 + 32) + 16);
    *(void *)(v0 + 240) = v52;
    v53 = type metadata accessor for AspireApiConfig(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v53 - 8) + 56))(v51, 1, 1, v53);
    uint64_t v54 = RequestsManager.handleOptions(clientConfig:options:);
    uint64_t v55 = v52;
  }
  else
  {
    swift_bridgeObjectRelease();
    if ((*(unsigned char *)(v0 + 24) & 8) == 0)
    {
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v50 = *(void (**)(void))(v0 + 8);
      v50();
      return;
    }
    uint64_t v56 = objc_msgSend(*(id *)(v0 + 16), sel_sourceApplicationBundleIdentifier);
    if (v56)
    {
      uint64_t v57 = v56;
      uint64_t v58 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v60 = v59;
    }
    else
    {
      uint64_t v58 = 0;
      uint64_t v60 = 0;
    }
    uint64_t v61 = *(void **)(v0 + 16);
    uint64_t v62 = RequestsManager.keyRotation(for:)(v58, v60);
    *(void *)(v0 + 256) = v62;
    swift_bridgeObjectRelease();
    uint64_t v63 = objc_msgSend(v61, sel_useCase);
    uint64_t v64 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v66 = v65;

    *(void *)(v0 + 264) = v64;
    *(void *)(v0 + 272) = v66;
    uint64_t v54 = RequestsManager.handleOptions(clientConfig:options:);
    uint64_t v55 = v62;
  }
  MEMORY[0x270FA2498](v54, v55, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  os_unfair_lock_s *v21;
  os_unfair_lock_s *v22;
  os_unfair_lock_s *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  void (*v37)(void);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)();
  uint64_t v42;
  id v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void v56[2];
  uint64_t v57;
  uint64_t v58;

  uint64_t v57 = v0;
  outlined destroy of UseCaseGroup(*(void *)(v0 + 88), (uint64_t (*)(void))type metadata accessor for UserIdentifier);
  uint64_t v1 = *(void *)(v0 + 168);
  if ((*(unsigned char *)(v0 + 24) & 0x20) != 0)
  {
    id v2 = *(os_unfair_lock_s **)(*(void *)(v0 + 32) + 48);
    uint64_t v3 = v2 + 4;
    uint64_t v4 = v2 + 6;
    os_unfair_lock_lock(v2 + 6);
    closure #1 in OSAllocatedUnfairLock<A>.current.getter(v3, v56);
    os_unfair_lock_unlock(v4);
    if (v1) {
      return;
    }
    uint64_t v5 = *(void *)(v56[0] + 40);
    if (*(void *)(v5 + 16))
    {
      uint64_t v7 = *(void *)(v0 + 112);
      uint64_t v6 = *(void *)(v0 + 120);
      swift_bridgeObjectRetain();
      uint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v6);
      if (v9)
      {
        uint64_t v10 = *(void *)(v5 + 56) + (v8 << 6);
        uint64_t v11 = *(void *)v10;
        uint64_t v13 = *(void *)(v10 + 16);
        uint64_t v12 = *(void *)(v10 + 24);
        uint64_t v15 = *(void *)(v10 + 32);
        uint64_t v14 = *(void *)(v10 + 40);
        uint64_t v16 = *(unsigned __int8 *)(v10 + 56);
        uint64_t v54 = *(void *)(v10 + 48);
        uint64_t v55 = *(void *)(v10 + 8);
        outlined copy of UseCase(*(void *)v10, v55, v13, v12, v15, v14, v54, *(unsigned char *)(v10 + 56));
        swift_bridgeObjectRelease();
        swift_release();
        if (v16 == 1)
        {
          if ((v13 & 1) == 0)
          {
            uint64_t v17 = v12;
            if (v15)
            {
              if (one-time initialization token for defaultCacheEntryMinutesToLive != -1) {
                swift_once();
              }
              uint64_t v17 = static StaticPIRParameters.defaultCacheEntryMinutesToLive;
            }
            uint64_t v18 = *(void *)(v0 + 112);
            uint64_t v19 = *(void **)(v0 + 120);
            outlined consume of UseCase(v11, v55, v13, v12, v15, v14, v54, 1);
            type metadata accessor for SqliteCache();
            swift_allocObject();
            swift_bridgeObjectRetain();
            uint64_t v20 = SqliteCache.init(useCase:cacheElementCount:cacheEntryMinutesToLive:getCurrentDate:)(v18, v19, v55, v17, (void (*)(uint64_t))closure #1 in default argument 4 of RequestsManager.init(configCache:keyStorage:activeUseCaseTracker:allowList:currentTime:), 0);
            (*(void (**)(uint64_t))(*(void *)v20 + 152))(v20);
            swift_release();
            if ((*(unsigned char *)(v0 + 25) & 1) == 0) {
              goto LABEL_27;
            }
            goto LABEL_16;
          }
          outlined consume of UseCase(v11, v55, v13, v12, v15, v14, v54, 1);
        }
        goto LABEL_14;
      }
      swift_bridgeObjectRelease();
    }
    swift_release();
LABEL_14:
    uint64_t v1 = 0;
  }
  if ((*(unsigned char *)(v0 + 25) & 1) == 0) {
    goto LABEL_27;
  }
LABEL_16:
  uint64_t v21 = *(os_unfair_lock_s **)(*(void *)(v0 + 32) + 48);
  uint64_t v22 = v21 + 4;
  uint64_t v23 = v21 + 6;
  os_unfair_lock_lock(v21 + 6);
  closure #1 in OSAllocatedUnfairLock<A>.current.getter(v22, v56);
  os_unfair_lock_unlock(v23);
  if (v1) {
    return;
  }
  uint64_t v24 = *(void *)(v0 + 56);
  AllowList.group(useCase:)(*(void *)(v0 + 112), *(void *)(v0 + 120), v24);
  swift_release();
  char v25 = type metadata accessor for UseCaseGroup();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 48))(v24, 1, v25) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(*(void *)(v0 + 56), &demangling cache variable for type metadata for UseCaseGroup?);
  }
  else
  {
    uint64_t v26 = *(void *)(v0 + 56);
    uint64_t v27 = *(void *)(v0 + 64);
    uint64_t v28 = *(void *)(v0 + 48);
    _s8CipherML13NetworkConfigVWOcTm_0(v26 + *(int *)(v25 + 36), v28, type metadata accessor for NetworkConfig);
    outlined destroy of UseCaseGroup(v26, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
    _s8CipherML13NetworkConfigVWOcTm_0(v28, v27, type metadata accessor for NetworkManagerType);
    outlined destroy of UseCaseGroup(v28, type metadata accessor for NetworkConfig);
    uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
    uint64_t v30 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 48))(v27, 2, v29);
    uint64_t v31 = *(void *)(v0 + 64);
    if (v30)
    {
      outlined destroy of UseCaseGroup(*(void *)(v0 + 64), type metadata accessor for NetworkManagerType);
    }
    else
    {
      int v32 = v31 + *(int *)(v29 + 48);
      uint64_t v33 = (uint64_t *)(v31 + *(int *)(v29 + 64));
      uint64_t v34 = *v33;
      uint64_t v35 = v33[1];
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v32, &demangling cache variable for type metadata for URL?);
      uint64_t v36 = type metadata accessor for URL();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v36 - 8) + 8))(v31, v36);
      uint64_t v1 = 0;
      if (v35 >> 60 == 15) {
        goto LABEL_27;
      }
      outlined copy of Data._Representation(v34, v35);
      if (one-time initialization token for shared != -1) {
        swift_once();
      }
      TokenCache.clearTokens(user:)(v34, v35);
      outlined consume of Data?(v34, v35);
      outlined consume of Data?(v34, v35);
    }
  }
  uint64_t v1 = 0;
LABEL_27:
  *(void *)(v0 + 232) = v1;
  if ((*(unsigned char *)(v0 + 24) & 0x40) != 0)
  {
    uint64_t v38 = *(void *)(v0 + 40);
    uint64_t v39 = *(void *)(*(void *)(v0 + 32) + 16);
    *(void *)(v0 + 240) = v39;
    uint64_t v40 = type metadata accessor for AspireApiConfig(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56))(v38, 1, 1, v40);
    uint64_t v41 = RequestsManager.handleOptions(clientConfig:options:);
    uint64_t v42 = v39;
  }
  else
  {
    swift_bridgeObjectRelease();
    if ((*(unsigned char *)(v0 + 24) & 8) == 0)
    {
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      unint64_t v37 = *(void (**)(void))(v0 + 8);
      v37();
      return;
    }
    uint64_t v43 = objc_msgSend(*(id *)(v0 + 16), sel_sourceApplicationBundleIdentifier);
    if (v43)
    {
      uint64_t v44 = v43;
      uint64_t v45 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v47 = v46;
    }
    else
    {
      uint64_t v45 = 0;
      uint64_t v47 = 0;
    }
    uint64_t v48 = *(void **)(v0 + 16);
    uint64_t v49 = RequestsManager.keyRotation(for:)(v45, v47);
    *(void *)(v0 + 256) = v49;
    swift_bridgeObjectRelease();
    uint64_t v50 = objc_msgSend(v48, sel_useCase);
    unint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v53 = v52;

    *(void *)(v0 + 264) = v51;
    *(void *)(v0 + 272) = v53;
    uint64_t v41 = RequestsManager.handleOptions(clientConfig:options:);
    uint64_t v42 = v49;
  }
  MEMORY[0x270FA2498](v41, v42, 0);
}

uint64_t RequestsManager.fetchStatus(useCase:)(uint64_t a1, uint64_t a2)
{
  v3[74] = v2;
  v3[73] = a2;
  v3[72] = a1;
  type metadata accessor for AspireApiPECConfig(0);
  v3[75] = swift_task_alloc();
  type metadata accessor for AspireApiPIRConfig(0);
  v3[76] = swift_task_alloc();
  v3[77] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UseCase?, AspireApiConfig.OneOf_Config));
  v3[78] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
  v3[79] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for AspireApiConfig.OneOf_Config(0);
  v3[80] = v4;
  v3[81] = *(void *)(v4 - 8);
  v3[82] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for AspireApiConfig(0);
  v3[83] = v5;
  v3[84] = *(void *)(v5 - 8);
  v3[85] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiConfig?);
  v3[86] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  v3[87] = swift_task_alloc();
  v3[88] = swift_task_alloc();
  v3[89] = swift_task_alloc();
  v3[90] = swift_task_alloc();
  return MEMORY[0x270FA2498](RequestsManager.fetchStatus(useCase:), 0, 0);
}

uint64_t RequestsManager.fetchStatus(useCase:)()
{
  uint64_t v43 = v0;
  uint64_t v1 = v0[74];
  uint64_t v2 = v0[73];
  uint64_t v3 = v0[72];
  type metadata accessor for RequestsManager.CMLUseCaseStatusBuilder();
  uint64_t v4 = swift_allocObject();
  v0[91] = v4;
  *(_OWORD *)(v4 + 32) = xmmword_249E895A0;
  uint64_t v5 = v4 + OBJC_IVAR____TtCC8CipherML15RequestsManager23CMLUseCaseStatusBuilder_lastUsed;
  uint64_t v6 = type metadata accessor for Date();
  v0[92] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v0[93] = v7;
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56);
  v0[94] = v8;
  v0[95] = (v7 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
  v8(v5, 1, 1, v6);
  v8(v4 + OBJC_IVAR____TtCC8CipherML15RequestsManager23CMLUseCaseStatusBuilder_keyGenerationTime, 1, 1, v6);
  v8(v4 + OBJC_IVAR____TtCC8CipherML15RequestsManager23CMLUseCaseStatusBuilder_keyExpirationTime, 1, 1, v6);
  *(void *)(v4 + 16) = v3;
  *(void *)(v4 + 24) = v2;
  uint64_t v9 = *(void *)(v1 + 48);
  v0[96] = v9;
  uint64_t v10 = (void *)(v9 + 16);
  uint64_t v11 = (os_unfair_lock_s *)(v9 + 24);
  swift_bridgeObjectRetain();
  os_unfair_lock_lock(v11);
  closure #1 in OSAllocatedUnfairLock<A>.current.getter(v10, &v42);
  v0[97] = 0;
  os_unfair_lock_unlock(v11);
  uint64_t v12 = *(void *)(v42 + 40);
  if (*(void *)(v12 + 16))
  {
    uint64_t v13 = v0[73];
    uint64_t v14 = v0[72];
    swift_bridgeObjectRetain();
    uint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(v14, v13);
    if (v16)
    {
      uint64_t v39 = v0[74];
      uint64_t v17 = *(void *)(v12 + 56) + (v15 << 6);
      uint64_t v18 = *(void *)v17;
      uint64_t v19 = *(void *)(v17 + 8);
      uint64_t v20 = *(void *)(v17 + 16);
      uint64_t v21 = *(void *)(v17 + 24);
      uint64_t v22 = *(void *)(v17 + 32);
      uint64_t v23 = *(void *)(v17 + 40);
      uint64_t v24 = *(void *)(v17 + 48);
      char v37 = *(unsigned char *)(v17 + 56);
      outlined copy of UseCase(*(void *)v17, v19, v20, v21, v22, v23, v24, v37);
      swift_bridgeObjectRelease();
      swift_release();
      outlined consume of UseCase(v18, v19, v20, v21, v22, v23, v24, v37);
      uint64_t v25 = *(void *)(v39 + 40);
      v0[98] = v25;
      swift_bridgeObjectRetain();
      return MEMORY[0x270FA2498](RequestsManager.fetchStatus(useCase:), v25, 0);
    }
    swift_bridgeObjectRelease();
  }
  swift_release();
  uint64_t v26 = v0[90];
  uint64_t v27 = v0[89];
  uint64_t v38 = v0[88];
  uint64_t v28 = *(void *)(v4 + 24);
  uint64_t v40 = *(void *)(v4 + 16);
  swift_beginAccess();
  uint64_t v29 = *(void *)(v4 + 32);
  unint64_t v30 = *(void *)(v4 + 40);
  uint64_t v31 = v4 + OBJC_IVAR____TtCC8CipherML15RequestsManager23CMLUseCaseStatusBuilder_lastUsed;
  swift_beginAccess();
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v31, v26, &demangling cache variable for type metadata for Date?);
  uint64_t v32 = v4 + OBJC_IVAR____TtCC8CipherML15RequestsManager23CMLUseCaseStatusBuilder_keyGenerationTime;
  swift_beginAccess();
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v32, v27, &demangling cache variable for type metadata for Date?);
  uint64_t v33 = v4 + OBJC_IVAR____TtCC8CipherML15RequestsManager23CMLUseCaseStatusBuilder_keyExpirationTime;
  swift_beginAccess();
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v33, v38, &demangling cache variable for type metadata for Date?);
  id v34 = objc_allocWithZone((Class)CMLUseCaseStatus);
  swift_bridgeObjectRetain();
  outlined copy of Data?(v29, v30);
  id v41 = @nonobjc CMLUseCaseStatus.init(useCase:serializedDynamicConfig:lastUsed:keyGenerationTime:keyExpirationTime:status:)(v40, v28, v29, v30, v26, v27, v38, 0);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v35 = (uint64_t (*)(id))v0[1];
  return v35(v41);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v3;

  uint64_t v1 = (void *)(*(void *)(v0 + 784) + OBJC_IVAR____TtC8CipherML20ActiveUseCaseTracker_lastUsed);
  swift_beginAccess();
  *(void *)(v0 + 792) = *v1;
  swift_bridgeObjectRetain();
  return MEMORY[0x270FA2498](RequestsManager.fetchStatus(useCase:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  if (*(void *)(*(void *)(v0 + 792) + 16)
    && (uint64_t v1 = specialized __RawDictionaryStorage.find<A>(_:)(*(void *)(v0 + 576), *(void *)(v0 + 584)), (v2 & 1) != 0))
  {
    (*(void (**)(void, uint64_t, void))(*(void *)(v0 + 744) + 16))(*(void *)(v0 + 696), *(void *)(*(void *)(v0 + 792) + 56) + *(void *)(*(void *)(v0 + 744) + 72) * v1, *(void *)(v0 + 736));
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v3 = 1;
  }
  uint64_t v4 = *(void *)(v0 + 784);
  uint64_t v5 = *(void *)(v0 + 728);
  uint64_t v6 = *(void *)(v0 + 720);
  uint64_t v7 = *(void *)(v0 + 696);
  (*(void (**)(uint64_t, uint64_t, uint64_t, void))(v0 + 752))(v7, v3, 1, *(void *)(v0 + 736));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v7, v6, &demangling cache variable for type metadata for Date?);
  uint64_t v8 = OBJC_IVAR____TtCC8CipherML15RequestsManager23CMLUseCaseStatusBuilder_lastUsed;
  *(void *)(v0 + 800) = OBJC_IVAR____TtCC8CipherML15RequestsManager23CMLUseCaseStatusBuilder_lastUsed;
  uint64_t v9 = v5 + v8;
  swift_beginAccess();
  outlined assign with take of Date?(v6, v9);
  swift_endAccess();
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v7, &demangling cache variable for type metadata for Date?);
  return MEMORY[0x270FA2498](RequestsManager.fetchStatus(useCase:), v4, 0);
}

{
  uint64_t v0;
  uint64_t v2;

  *(unsigned char *)(v0 + 880) = ActiveUseCaseTracker.isActive(useCase:)(*(Swift::String *)(v0 + 576));
  return MEMORY[0x270FA2498](RequestsManager.fetchStatus(useCase:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t (*v12)(id);
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;

  if (*(unsigned char *)(v0 + 880))
  {
    uint64_t v1 = *(void *)(*(void *)(v0 + 592) + 16);
    *(void *)(v0 + 808) = v1;
    return MEMORY[0x270FA2498](RequestsManager.fetchStatus(useCase:), v1, 0);
  }
  else
  {
    uint64_t v2 = *(void **)(v0 + 728);
    uint64_t v3 = *(void *)(v0 + 720);
    uint64_t v4 = *(void *)(v0 + 712);
    uint64_t v14 = *(void *)(v0 + 704);
    uint64_t v5 = (uint64_t)v2 + *(void *)(v0 + 800);
    uint64_t v6 = v2[3];
    uint64_t v15 = v2[2];
    swift_beginAccess();
    uint64_t v7 = v2[4];
    uint64_t v8 = v2[5];
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v5, v3, &demangling cache variable for type metadata for Date?);
    uint64_t v9 = (uint64_t)v2 + OBJC_IVAR____TtCC8CipherML15RequestsManager23CMLUseCaseStatusBuilder_keyGenerationTime;
    swift_beginAccess();
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v9, v4, &demangling cache variable for type metadata for Date?);
    uint64_t v10 = (uint64_t)v2 + OBJC_IVAR____TtCC8CipherML15RequestsManager23CMLUseCaseStatusBuilder_keyExpirationTime;
    swift_beginAccess();
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v10, v14, &demangling cache variable for type metadata for Date?);
    uint64_t v11 = objc_allocWithZone((Class)CMLUseCaseStatus);
    swift_bridgeObjectRetain();
    outlined copy of Data?(v7, v8);
    char v16 = @nonobjc CMLUseCaseStatus.init(useCase:serializedDynamicConfig:lastUsed:keyGenerationTime:keyExpirationTime:status:)(v15, v6, v7, v8, v3, v4, v14, 1);
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v12 = *(uint64_t (**)(id))(v0 + 8);
    return v12(v16);
  }
}

{
  uint64_t *v0;
  uint64_t v2;

  ConfigCache.subscript.getter(v0[72], v0[73], v0[86]);
  return MEMORY[0x270FA2498](RequestsManager.fetchStatus(useCase:), 0, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t (*v14)(id);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;

  if (*(unsigned char *)(v0 + 881) == 1)
  {
    uint64_t v1 = (void *)swift_task_alloc();
    *(void *)(v0 + 832) = v1;
    *uint64_t v1 = v0;
    v1[1] = RequestsManager.fetchStatus(useCase:);
    uint64_t v2 = *(void *)(v0 + 728);
    uint64_t v3 = *(void *)(v0 + 608);
    return specialized RequestsManager.fetchStatus<A>(status:dynamicConfig:)(v2, v3);
  }
  else
  {
    uint64_t v5 = *(void **)(v0 + 728);
    uint64_t v6 = *(void *)(v0 + 712);
    uint64_t v15 = *(void *)(v0 + 704);
    uint64_t v18 = *(void *)(v0 + 656);
    uint64_t v19 = *(void *)(v0 + 680);
    uint64_t v7 = *(void *)(v0 + 624);
    char v16 = *(void *)(v0 + 720);
    uint64_t v17 = *(void *)(v0 + 608);
    uint64_t v8 = v5[3];
    uint64_t v20 = v5[2];
    uint64_t v9 = v5[4];
    uint64_t v10 = v5[5];
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5 + *(void *)(v0 + 800), v16, &demangling cache variable for type metadata for Date?);
    uint64_t v11 = (uint64_t)v5 + OBJC_IVAR____TtCC8CipherML15RequestsManager23CMLUseCaseStatusBuilder_keyGenerationTime;
    swift_beginAccess();
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v11, v6, &demangling cache variable for type metadata for Date?);
    uint64_t v12 = (uint64_t)v5 + OBJC_IVAR____TtCC8CipherML15RequestsManager23CMLUseCaseStatusBuilder_keyExpirationTime;
    swift_beginAccess();
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v12, v15, &demangling cache variable for type metadata for Date?);
    uint64_t v13 = objc_allocWithZone((Class)CMLUseCaseStatus);
    swift_bridgeObjectRetain();
    outlined copy of Data?(v9, v10);
    uint64_t v21 = @nonobjc CMLUseCaseStatus.init(useCase:serializedDynamicConfig:lastUsed:keyGenerationTime:keyExpirationTime:status:)(v20, v8, v9, v10, v16, v6, v15, 3);
    swift_release();
    outlined destroy of UseCaseGroup(v17, type metadata accessor for AspireApiPIRConfig);
    outlined destroy of UseCaseGroup(v18, type metadata accessor for AspireApiConfig.OneOf_Config);
    outlined destroy of UseCaseGroup(v19, type metadata accessor for AspireApiConfig);
    outlined consume of UseCase?(*(void *)v7, *(void *)(v7 + 8), *(void *)(v7 + 16), *(void *)(v7 + 24), *(void *)(v7 + 32), *(void *)(v7 + 40), *(void *)(v7 + 48), *(unsigned char *)(v7 + 56));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v14 = *(uint64_t (**)(id))(v0 + 8);
    return v14(v21);
  }
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v7;
  uint64_t v8;

  uint64_t v1 = v0[85];
  uint64_t v2 = v0[82];
  uint64_t v3 = v0[78];
  uint64_t v4 = v0[76];
  swift_release();
  outlined destroy of UseCaseGroup(v4, type metadata accessor for AspireApiPIRConfig);
  outlined destroy of UseCaseGroup(v2, type metadata accessor for AspireApiConfig.OneOf_Config);
  outlined destroy of UseCaseGroup(v1, type metadata accessor for AspireApiConfig);
  outlined consume of UseCase?(*(void *)v3, *(void *)(v3 + 8), *(void *)(v3 + 16), *(void *)(v3 + 24), *(void *)(v3 + 32), *(void *)(v3 + 40), *(void *)(v3 + 48), *(unsigned char *)(v3 + 56));
  uint64_t v7 = v0[106];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(uint64_t))v0[1];
  return v5(v7);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v7;
  uint64_t v8;

  uint64_t v1 = v0[85];
  uint64_t v2 = v0[82];
  uint64_t v3 = v0[78];
  uint64_t v4 = v0[75];
  swift_release();
  outlined destroy of UseCaseGroup(v4, type metadata accessor for AspireApiPECConfig);
  outlined destroy of UseCaseGroup(v2, type metadata accessor for AspireApiConfig.OneOf_Config);
  outlined destroy of UseCaseGroup(v1, type metadata accessor for AspireApiConfig);
  outlined consume of UseCase?(*(void *)v3, *(void *)(v3 + 8), *(void *)(v3 + 16), *(void *)(v3 + 24), *(void *)(v3 + 32), *(void *)(v3 + 40), *(void *)(v3 + 48), *(unsigned char *)(v3 + 56));
  uint64_t v7 = v0[109];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(uint64_t))v0[1];
  return v5(v7);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  uint64_t v1 = v0[85];
  uint64_t v2 = v0[82];
  uint64_t v3 = v0[78];
  uint64_t v4 = v0[76];
  swift_release();
  outlined destroy of UseCaseGroup(v4, type metadata accessor for AspireApiPIRConfig);
  outlined destroy of UseCaseGroup(v2, type metadata accessor for AspireApiConfig.OneOf_Config);
  outlined destroy of UseCaseGroup(v1, type metadata accessor for AspireApiConfig);
  outlined consume of UseCase?(*(void *)v3, *(void *)(v3 + 8), *(void *)(v3 + 16), *(void *)(v3 + 24), *(void *)(v3 + 32), *(void *)(v3 + 40), *(void *)(v3 + 48), *(unsigned char *)(v3 + 56));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  uint64_t v1 = v0[85];
  uint64_t v2 = v0[82];
  uint64_t v3 = v0[78];
  uint64_t v4 = v0[76];
  swift_release();
  outlined destroy of UseCaseGroup(v4, type metadata accessor for AspireApiPIRConfig);
  outlined destroy of UseCaseGroup(v2, type metadata accessor for AspireApiConfig.OneOf_Config);
  outlined destroy of UseCaseGroup(v1, type metadata accessor for AspireApiConfig);
  outlined consume of UseCase?(*(void *)v3, *(void *)(v3 + 8), *(void *)(v3 + 16), *(void *)(v3 + 24), *(void *)(v3 + 32), *(void *)(v3 + 40), *(void *)(v3 + 48), *(unsigned char *)(v3 + 56));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  uint64_t v1 = v0[85];
  uint64_t v2 = v0[82];
  uint64_t v3 = v0[78];
  uint64_t v4 = v0[75];
  swift_release();
  outlined destroy of UseCaseGroup(v4, type metadata accessor for AspireApiPECConfig);
  outlined destroy of UseCaseGroup(v2, type metadata accessor for AspireApiConfig.OneOf_Config);
  outlined destroy of UseCaseGroup(v1, type metadata accessor for AspireApiConfig);
  outlined consume of UseCase?(*(void *)v3, *(void *)(v3 + 8), *(void *)(v3 + 16), *(void *)(v3 + 24), *(void *)(v3 + 32), *(void *)(v3 + 40), *(void *)(v3 + 48), *(unsigned char *)(v3 + 56));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

void RequestsManager.fetchStatus(useCase:)()
{
  uint64_t v108 = v0;
  uint64_t v1 = *(void *)(v0 + 688);
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(*(void *)(v0 + 672) + 48))(v1, 1, *(void *)(v0 + 664)) == 1)
  {
    uint64_t v2 = *(void **)(v0 + 728);
    uint64_t v3 = *(void *)(v0 + 720);
    uint64_t v4 = *(void *)(v0 + 712);
    uint64_t v95 = *(void *)(v0 + 704);
    uint64_t v5 = (uint64_t)v2 + *(void *)(v0 + 800);
    uint64_t v6 = v2[3];
    uint64_t v102 = v2[2];
    swift_beginAccess();
    uint64_t v7 = v2[4];
    unint64_t v8 = v2[5];
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v5, v3, &demangling cache variable for type metadata for Date?);
    uint64_t v9 = (uint64_t)v2 + OBJC_IVAR____TtCC8CipherML15RequestsManager23CMLUseCaseStatusBuilder_keyGenerationTime;
    swift_beginAccess();
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v9, v4, &demangling cache variable for type metadata for Date?);
    uint64_t v10 = (uint64_t)v2 + OBJC_IVAR____TtCC8CipherML15RequestsManager23CMLUseCaseStatusBuilder_keyExpirationTime;
    swift_beginAccess();
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v10, v95, &demangling cache variable for type metadata for Date?);
    id v11 = objc_allocWithZone((Class)CMLUseCaseStatus);
    swift_bridgeObjectRetain();
    outlined copy of Data?(v7, v8);
    id v98 = @nonobjc CMLUseCaseStatus.init(useCase:serializedDynamicConfig:lastUsed:keyGenerationTime:keyExpirationTime:status:)(v102, v6, v7, v8, v3, v4, v95, 2);
    swift_release();
LABEL_3:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v12 = *(void (**)(id))(v0 + 8);
    v12(v98);
    return;
  }
  uint64_t v13 = *(void *)(v0 + 776);
  _s8CipherML14UserIdentifierVWObTm_0(v1, *(void *)(v0 + 680), type metadata accessor for AspireApiConfig);
  lazy protocol witness table accessor for type AspireApiConfig and conformance AspireApiConfig(&lazy protocol witness table cache variable for type AspireApiConfig and conformance AspireApiConfig, (void (*)(uint64_t))type metadata accessor for AspireApiConfig);
  uint64_t v14 = Message.serializedData(partial:)();
  uint64_t v16 = *(void *)(v0 + 728);
  uint64_t v17 = *(void *)(v0 + 680);
  if (v13)
  {
    outlined destroy of UseCaseGroup(v17, type metadata accessor for AspireApiConfig);
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v18 = *(void (**)(void))(v0 + 8);
    v18();
    return;
  }
  uint64_t v19 = v14;
  uint64_t v20 = v15;
  uint64_t v21 = *(void *)(v0 + 648);
  uint64_t v22 = *(void *)(v0 + 640);
  uint64_t v23 = *(void *)(v0 + 632);
  swift_beginAccess();
  uint64_t v24 = *(void *)(v16 + 32);
  unint64_t v25 = *(void *)(v16 + 40);
  *(void *)(v16 + 32) = v19;
  *(void *)(v16 + 40) = v20;
  outlined consume of Data?(v24, v25);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v17, v23, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(v23, 1, v22) == 1)
  {
    uint64_t v26 = *(void **)(v0 + 728);
    uint64_t v27 = *(void *)(v0 + 720);
    uint64_t v28 = *(void *)(v0 + 712);
    uint64_t v92 = *(void *)(v0 + 704);
    uint64_t v103 = *(void *)(v0 + 680);
    uint64_t v29 = (uint64_t)v26 + *(void *)(v0 + 800);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(*(void *)(v0 + 632), &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
    uint64_t v30 = v26[3];
    uint64_t v99 = v26[2];
    uint64_t v31 = v26[4];
    unint64_t v32 = v26[5];
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v29, v27, &demangling cache variable for type metadata for Date?);
    uint64_t v33 = (uint64_t)v26 + OBJC_IVAR____TtCC8CipherML15RequestsManager23CMLUseCaseStatusBuilder_keyGenerationTime;
    swift_beginAccess();
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v33, v28, &demangling cache variable for type metadata for Date?);
    uint64_t v34 = (uint64_t)v26 + OBJC_IVAR____TtCC8CipherML15RequestsManager23CMLUseCaseStatusBuilder_keyExpirationTime;
    swift_beginAccess();
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v34, v92, &demangling cache variable for type metadata for Date?);
    id v35 = objc_allocWithZone((Class)CMLUseCaseStatus);
    swift_bridgeObjectRetain();
    outlined copy of Data?(v31, v32);
    id v98 = @nonobjc CMLUseCaseStatus.init(useCase:serializedDynamicConfig:lastUsed:keyGenerationTime:keyExpirationTime:status:)(v99, v30, v31, v32, v27, v28, v92, 3);
    swift_release();
    outlined destroy of UseCaseGroup(v103, type metadata accessor for AspireApiConfig);
    goto LABEL_3;
  }
  uint64_t v36 = *(void *)(v0 + 768);
  char v37 = (os_unfair_lock_s *)(v36 + 24);
  uint64_t v38 = (void *)(v36 + 16);
  _s8CipherML14UserIdentifierVWObTm_0(*(void *)(v0 + 632), *(void *)(v0 + 656), type metadata accessor for AspireApiConfig.OneOf_Config);
  os_unfair_lock_lock(v37);
  closure #1 in OSAllocatedUnfairLock<A>.current.getter(v38, &v107);
  os_unfair_lock_unlock(v37);
  uint64_t v39 = *(void *)(v107 + 40);
  if (*(void *)(v39 + 16))
  {
    uint64_t v40 = *(void *)(v0 + 584);
    uint64_t v41 = *(void *)(v0 + 576);
    swift_bridgeObjectRetain();
    uint64_t v42 = specialized __RawDictionaryStorage.find<A>(_:)(v41, v40);
    if (v43)
    {
      uint64_t v44 = *(void *)(v39 + 56) + (v42 << 6);
      int v45 = *(unsigned __int8 *)(v44 + 56);
      uint64_t v46 = *(void *)v44;
      uint64_t v47 = *(void *)(v44 + 8);
      uint64_t v48 = *(void *)(v44 + 16);
      uint64_t v49 = *(void *)(v44 + 24);
      uint64_t v50 = *(void *)(v44 + 32);
      uint64_t v51 = *(void *)(v44 + 40);
      uint64_t v52 = *(void *)(v44 + 48);
      outlined copy of UseCase(*(void *)v44, v47, v48, v49, v50, v51, v52, *(unsigned char *)(v44 + 56));
    }
    else
    {
      uint64_t v46 = 0;
      uint64_t v47 = 0;
      uint64_t v48 = 0;
      uint64_t v49 = 0;
      uint64_t v50 = 0;
      uint64_t v51 = 0;
      uint64_t v52 = 0;
      int v45 = 255;
    }
    swift_bridgeObjectRelease();
    uint64_t v53 = v48;
  }
  else
  {
    uint64_t v46 = 0;
    uint64_t v47 = 0;
    uint64_t v53 = 0;
    uint64_t v49 = 0;
    uint64_t v50 = 0;
    uint64_t v51 = 0;
    uint64_t v52 = 0;
    int v45 = 255;
  }
  swift_release();
  uint64_t v54 = *(void *)(v0 + 656);
  uint64_t v55 = *(void *)(v0 + 624);
  uint64_t v56 = v55 + *(int *)(*(void *)(v0 + 616) + 48);
  uint64_t v104 = v46;
  *(void *)uint64_t v55 = v46;
  *(void *)(v55 + 8) = v47;
  uint64_t v57 = v56;
  *(void *)(v55 + 16) = v53;
  *(void *)(v55 + 24) = v49;
  *(void *)(v55 + 32) = v50;
  *(void *)(v55 + 40) = v51;
  *(void *)(v55 + 48) = v52;
  *(unsigned char *)(v55 + 56) = v45;
  _s8CipherML13NetworkConfigVWOcTm_0(v54, v56, type metadata accessor for AspireApiConfig.OneOf_Config);
  if (v45)
  {
    if (v45 != 255 && swift_getEnumCaseMultiPayload() != 1)
    {
      uint64_t v58 = *(void *)(v0 + 608);
      *(void *)(v0 + 16) = v104;
      *(void *)(v0 + 24) = v47;
      *(unsigned char *)(v0 + 32) = v53 & 1;
      *(void *)(v0 + 40) = v49;
      *(unsigned char *)(v0 + 48) = v50 & 1;
      *(void *)(v0 + 56) = v51;
      *(void *)(v0 + 64) = v52;
      _s8CipherML14UserIdentifierVWObTm_0(v57, v58, type metadata accessor for AspireApiPIRConfig);
      id v59 = (void *)swift_task_alloc();
      *(void *)(v0 + 816) = v59;
      *id v59 = v0;
      v59[1] = RequestsManager.fetchStatus(useCase:);
      uint64_t v60 = *(void *)(v0 + 608);
      uint64_t v61 = *(void *)(v0 + 584);
      uint64_t v62 = *(void *)(v0 + 576);
      RequestsManager.validate(config:static:useCase:)(v60, v0 + 16, v62, v61);
      return;
    }
LABEL_26:
    uint64_t v68 = *(void **)(v0 + 728);
    uint64_t v90 = *(void *)(v0 + 720);
    uint64_t v69 = *(void *)(v0 + 712);
    uint64_t v70 = *(void *)(v0 + 704);
    uint64_t v93 = *(void *)(v0 + 656);
    uint64_t v96 = *(void *)(v0 + 680);
    uint64_t v71 = v68[3];
    uint64_t v100 = v68[2];
    uint64_t v105 = *(void *)(v0 + 624);
    uint64_t v72 = v68[4];
    unint64_t v73 = v68[5];
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v68 + *(void *)(v0 + 800), v90, &demangling cache variable for type metadata for Date?);
    uint64_t v74 = (uint64_t)v68 + OBJC_IVAR____TtCC8CipherML15RequestsManager23CMLUseCaseStatusBuilder_keyGenerationTime;
    swift_beginAccess();
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v74, v69, &demangling cache variable for type metadata for Date?);
    uint64_t v75 = (uint64_t)v68 + OBJC_IVAR____TtCC8CipherML15RequestsManager23CMLUseCaseStatusBuilder_keyExpirationTime;
    swift_beginAccess();
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v75, v70, &demangling cache variable for type metadata for Date?);
    id v76 = objc_allocWithZone((Class)CMLUseCaseStatus);
    swift_bridgeObjectRetain();
    outlined copy of Data?(v72, v73);
    id v98 = @nonobjc CMLUseCaseStatus.init(useCase:serializedDynamicConfig:lastUsed:keyGenerationTime:keyExpirationTime:status:)(v100, v71, v72, v73, v90, v69, v70, 3);
    swift_release();
    outlined destroy of UseCaseGroup(v93, type metadata accessor for AspireApiConfig.OneOf_Config);
    outlined destroy of UseCaseGroup(v96, type metadata accessor for AspireApiConfig);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v105, &demangling cache variable for type metadata for (UseCase?, AspireApiConfig.OneOf_Config));
    goto LABEL_3;
  }
  if (swift_getEnumCaseMultiPayload() != 1) {
    goto LABEL_26;
  }
  uint64_t v63 = *(void *)(v0 + 600);
  uint64_t v64 = v57;
  uint64_t v65 = *(void *)(v0 + 584);
  uint64_t v66 = *(void *)(v0 + 576);
  _s8CipherML14UserIdentifierVWObTm_0(v64, v63, type metadata accessor for AspireApiPECConfig);
  specialized RequestsManager.validate(config:static:useCase:)(v63, v66, v65);
  if ((v67 & 1) == 0)
  {
    uint64_t v80 = *(void **)(v0 + 728);
    uint64_t v89 = *(void *)(v0 + 720);
    uint64_t v81 = *(void *)(v0 + 712);
    uint64_t v88 = *(void *)(v0 + 704);
    uint64_t v94 = *(void *)(v0 + 656);
    uint64_t v97 = *(void *)(v0 + 680);
    uint64_t v91 = *(void *)(v0 + 600);
    uint64_t v82 = v80[3];
    uint64_t v101 = v80[2];
    uint64_t v106 = *(uint64_t **)(v0 + 624);
    uint64_t v84 = v80[4];
    unint64_t v83 = v80[5];
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v80 + *(void *)(v0 + 800), v89, &demangling cache variable for type metadata for Date?);
    uint64_t v85 = (uint64_t)v80 + OBJC_IVAR____TtCC8CipherML15RequestsManager23CMLUseCaseStatusBuilder_keyGenerationTime;
    swift_beginAccess();
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v85, v81, &demangling cache variable for type metadata for Date?);
    uint64_t v86 = (uint64_t)v80 + OBJC_IVAR____TtCC8CipherML15RequestsManager23CMLUseCaseStatusBuilder_keyExpirationTime;
    swift_beginAccess();
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v86, v88, &demangling cache variable for type metadata for Date?);
    id v87 = objc_allocWithZone((Class)CMLUseCaseStatus);
    swift_bridgeObjectRetain();
    outlined copy of Data?(v84, v83);
    id v98 = @nonobjc CMLUseCaseStatus.init(useCase:serializedDynamicConfig:lastUsed:keyGenerationTime:keyExpirationTime:status:)(v101, v82, v84, v83, v89, v81, v88, 3);
    swift_release();
    outlined destroy of UseCaseGroup(v91, type metadata accessor for AspireApiPECConfig);
    outlined destroy of UseCaseGroup(v94, type metadata accessor for AspireApiConfig.OneOf_Config);
    outlined destroy of UseCaseGroup(v97, type metadata accessor for AspireApiConfig);
    outlined consume of UseCase?(*v106, *(void *)(v55 + 8), *(void *)(v55 + 16), *(void *)(v55 + 24), *(void *)(v55 + 32), *(void *)(v55 + 40), *(void *)(v55 + 48), *(unsigned char *)(v55 + 56));
    goto LABEL_3;
  }
  uint64_t v77 = (void *)swift_task_alloc();
  *(void *)(v0 + 856) = v77;
  *uint64_t v77 = v0;
  v77[1] = RequestsManager.fetchStatus(useCase:);
  uint64_t v78 = *(void *)(v0 + 728);
  uint64_t v79 = *(void *)(v0 + 600);
  specialized RequestsManager.fetchStatus<A>(status:dynamicConfig:)(v78, v79);
}

uint64_t RequestsManager.fetchStatus(useCase:)(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 824) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = RequestsManager.fetchStatus(useCase:);
  }
  else
  {
    *(unsigned char *)(v4 + 881) = a1 & 1;
    uint64_t v5 = RequestsManager.fetchStatus(useCase:);
  }
  return MEMORY[0x270FA2498](v5, 0, 0);
}

uint64_t RequestsManager.fetchStatus(useCase:)(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 840) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = RequestsManager.fetchStatus(useCase:);
  }
  else
  {
    *(void *)(v4 + 848) = a1;
    uint64_t v5 = RequestsManager.fetchStatus(useCase:);
  }
  return MEMORY[0x270FA2498](v5, 0, 0);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v4 = *v2;
  *(void *)(*v2 + 864) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = RequestsManager.fetchStatus(useCase:);
  }
  else
  {
    *(void *)(v4 + 872) = a1;
    uint64_t v5 = RequestsManager.fetchStatus(useCase:);
  }
  return MEMORY[0x270FA2498](v5, 0, 0);
}

uint64_t specialized RequestsManager.fetchStatus<A>(status:dynamicConfig:)(uint64_t a1, uint64_t a2)
{
  v3[6] = a2;
  v3[7] = v2;
  v3[5] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserIdentifier?);
  v3[8] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecretKey?);
  v3[9] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Date();
  v3[10] = v4;
  v3[11] = *(void *)(v4 - 8);
  v3[12] = swift_task_alloc();
  v3[13] = swift_task_alloc();
  v3[14] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UseCaseGroup?);
  v3[15] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  v3[16] = swift_task_alloc();
  v3[17] = swift_task_alloc();
  v3[18] = swift_task_alloc();
  v3[19] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized RequestsManager.fetchStatus<A>(status:dynamicConfig:), 0, 0);
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v6;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserIdentifier?);
  v3[5] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecretKey?);
  v3[6] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Date();
  v3[7] = v4;
  v3[8] = *(void *)(v4 - 8);
  v3[9] = swift_task_alloc();
  v3[10] = swift_task_alloc();
  v3[11] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UseCaseGroup?);
  v3[12] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  v3[13] = swift_task_alloc();
  v3[14] = swift_task_alloc();
  v3[15] = swift_task_alloc();
  v3[16] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized RequestsManager.fetchStatus<A>(status:dynamicConfig:), 0, 0);
}

void specialized RequestsManager.fetchStatus<A>(status:dynamicConfig:)()
{
  uint64_t v54 = v0;
  uint64_t v1 = *(os_unfair_lock_s **)(v0[7] + 48);
  v0[20] = v1;
  uint64_t v2 = v1 + 4;
  uint64_t v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  closure #1 in OSAllocatedUnfairLock<A>.current.getter(v2, v53);
  v0[21] = 0;
  os_unfair_lock_unlock(v3);
  uint64_t v4 = v0[5];
  uint64_t v5 = *(void *)(v53[0] + 48);
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v6 = *(void *)(v4 + 16);
  v0[22] = v6;
  uint64_t v7 = *(void *)(v4 + 24);
  v0[23] = v7;
  if (*(void *)(v5 + 16))
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v6, v7);
    if (v9)
    {
      uint64_t v10 = v0[7];
      id v11 = (uint64_t *)(*(void *)(v5 + 56) + 16 * v8);
      uint64_t v12 = *v11;
      uint64_t v13 = v11[1];
      v0[24] = v13;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v14 = *(void *)(v10 + 32);
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v50 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 + 8) + **(int **)(v14 + 8));
      uint64_t v16 = (void *)swift_task_alloc();
      v0[25] = v16;
      *uint64_t v16 = v0;
      v16[1] = specialized RequestsManager.fetchStatus<A>(status:dynamicConfig:);
      uint64_t v17 = v0[8];
      v50(v17, v12, v13, ObjectType, v14);
      return;
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v18 = swift_bridgeObjectRelease();
  uint64_t v19 = v0[19];
  uint64_t v20 = v0[10];
  uint64_t v21 = v0[11];
  uint64_t v22 = *(void (**)(uint64_t))(*(void *)v0[5] + 168);
  v22(v18);
  uint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 48);
  int v24 = v23(v19, 1, v20);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v19, &demangling cache variable for type metadata for Date?);
  if (v24 != 1)
  {
    uint64_t v26 = (os_unfair_lock_s *)v0[20];
    uint64_t v27 = v0[21];
    uint64_t v28 = v26 + 6;
    uint64_t v29 = v26 + 4;
    os_unfair_lock_lock(v26 + 6);
    closure #1 in OSAllocatedUnfairLock<A>.current.getter(v29, v53);
    os_unfair_lock_unlock(v28);
    if (v27) {
      return;
    }
    uint64_t v30 = v0[15];
    AllowList.group(useCase:)(v0[22], v0[23], v30);
    swift_release();
    uint64_t v31 = type metadata accessor for UseCaseGroup();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 48))(v30, 1, v31) == 1)
    {
      uint64_t v32 = v0[15];
      uint64_t v33 = &demangling cache variable for type metadata for UseCaseGroup?;
    }
    else
    {
      uint64_t v34 = v0[18];
      uint64_t v35 = v0[10];
      uint64_t v36 = outlined destroy of UseCaseGroup(v0[15], (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
      v22(v36);
      if (v23(v34, 1, v35) != 1)
      {
        uint64_t v38 = v0[17];
        uint64_t v39 = v0[13];
        uint64_t v40 = v0[11];
        uint64_t v52 = v0[12];
        uint64_t v41 = v0[10];
        uint64_t v42 = v0[7];
        uint64_t v43 = v0[5];
        (*(void (**)(void, void, uint64_t))(v40 + 32))(v0[14], v0[18], v41);
        Date.addingTimeInterval(_:)();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 16))(v38, v39, v41);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v40 + 56))(v38, 0, 1, v41);
        uint64_t v44 = (*(uint64_t (**)(uint64_t))(*(void *)v43 + 200))(v38);
        (*(void (**)(uint64_t))(v42 + 56))(v44);
        lazy protocol witness table accessor for type AspireApiConfig and conformance AspireApiConfig(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
        char v45 = dispatch thunk of static Comparable.< infix(_:_:)();
        uint64_t v46 = *(void (**)(uint64_t, uint64_t))(v40 + 8);
        v46(v52, v41);
        uint64_t v48 = v0[13];
        uint64_t v47 = v0[14];
        uint64_t v49 = v0[10];
        if ((v45 & 1) == 0)
        {
          uint64_t v51 = (*(uint64_t (**)(uint64_t))(*(void *)v0[5] + 224))(5);
          v46(v48, v49);
          v46(v47, v49);
          goto LABEL_20;
        }
        v46(v0[13], v0[10]);
        v46(v47, v49);
        goto LABEL_18;
      }
      uint64_t v33 = &demangling cache variable for type metadata for Date?;
      uint64_t v32 = v0[18];
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v32, v33);
LABEL_18:
    uint64_t v25 = (*(uint64_t (**)(uint64_t))(*(void *)v0[5] + 224))(6);
    goto LABEL_19;
  }
  uint64_t v25 = (*(uint64_t (**)(uint64_t))(*(void *)v0[5] + 224))(4);
LABEL_19:
  uint64_t v51 = v25;
LABEL_20:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v37 = (void (*)(uint64_t))v0[1];
  v37(v51);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t);
  uint64_t (*v27)(uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  os_unfair_lock_s *v29;
  uint64_t v30;
  os_unfair_lock_s *v31;
  os_unfair_lock_s *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  void (*v49)(uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;

  uint64_t v56 = v0;
  uint64_t v1 = v0[8];
  uint64_t v2 = type metadata accessor for UserIdentifier();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    uint64_t v3 = &demangling cache variable for type metadata for UserIdentifier?;
    uint64_t v4 = v1;
LABEL_10:
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v4, v3);
    uint64_t v19 = 1;
    goto LABEL_12;
  }
  uint64_t v5 = v0[6];
  uint64_t v6 = *(void *)(v1 + *(int *)(v2 + 24));
  swift_bridgeObjectRetain();
  outlined destroy of UseCaseGroup(v1, (uint64_t (*)(void))type metadata accessor for UserIdentifier);
  uint64_t v7 = *(void *)(v5 + *(int *)(type metadata accessor for AspireApiPIRConfig(0) + 20))
     + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__evaluationKeyConfigHash;
  swift_beginAccess();
  uint64_t v8 = *(void *)v7;
  char v9 = *(void *)(v7 + 8);
  if (*(void *)(v6 + 16))
  {
    outlined copy of Data._Representation(*(void *)v7, *(void *)(v7 + 8));
    uint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v9);
    id v11 = v0[9];
    if (v12)
    {
      uint64_t v13 = v10;
      uint64_t v14 = *(void *)(v6 + 56);
      uint64_t v15 = type metadata accessor for SecretKey();
      uint64_t v16 = *(void *)(v15 - 8);
      _s8CipherML13NetworkConfigVWOcTm_0(v14 + *(void *)(v16 + 72) * v13, v11, (uint64_t (*)(void))type metadata accessor for SecretKey);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v16 + 56))(v11, 0, 1, v15);
    }
    else
    {
      uint64_t v15 = type metadata accessor for SecretKey();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v11, 1, 1, v15);
    }
  }
  else
  {
    uint64_t v17 = v0[9];
    uint64_t v15 = type metadata accessor for SecretKey();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v17, 1, 1, v15);
    outlined copy of Data._Representation(v8, v9);
  }
  uint64_t v18 = v0[9];
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(v8, v9);
  type metadata accessor for SecretKey();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48))(v18, 1, v15) == 1)
  {
    uint64_t v4 = v0[9];
    uint64_t v3 = &demangling cache variable for type metadata for SecretKey?;
    goto LABEL_10;
  }
  outlined destroy of UseCaseGroup(v0[9], (uint64_t (*)(void))type metadata accessor for SecretKey);
  Date.init(timeIntervalSince1970:)();
  uint64_t v19 = 0;
LABEL_12:
  uint64_t v20 = v0[16];
  uint64_t v21 = v0[5];
  (*(void (**)(uint64_t, uint64_t, uint64_t, void))(v0[11] + 56))(v20, v19, 1, v0[10]);
  (*(void (**)(uint64_t))(*(void *)v21 + 248))(v20);
  swift_release();
  uint64_t v22 = outlined destroy of AMDPbHEConfig.OneOf_Config?(v20, &demangling cache variable for type metadata for Date?);
  uint64_t v23 = v0[19];
  int v24 = v0[10];
  uint64_t v25 = v0[11];
  uint64_t v26 = *(void (**)(uint64_t))(*(void *)v0[5] + 168);
  v26(v22);
  uint64_t v27 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 48);
  LODWORD(v21) = v27(v23, 1, v24);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v23, &demangling cache variable for type metadata for Date?);
  if (v21 != 1)
  {
    uint64_t v29 = (os_unfair_lock_s *)v0[20];
    uint64_t v30 = v0[21];
    uint64_t v31 = v29 + 6;
    uint64_t v32 = v29 + 4;
    os_unfair_lock_lock(v29 + 6);
    closure #1 in OSAllocatedUnfairLock<A>.current.getter(v32, &v55);
    os_unfair_lock_unlock(v31);
    if (v30) {
      return;
    }
    uint64_t v33 = v0[15];
    AllowList.group(useCase:)(v0[22], v0[23], v33);
    swift_release();
    uint64_t v34 = type metadata accessor for UseCaseGroup();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 48))(v33, 1, v34) == 1)
    {
      uint64_t v35 = v0[15];
      uint64_t v36 = &demangling cache variable for type metadata for UseCaseGroup?;
    }
    else
    {
      char v37 = v0[18];
      uint64_t v38 = v0[10];
      uint64_t v39 = outlined destroy of UseCaseGroup(v0[15], (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
      v26(v39);
      if (v27(v37, 1, v38) != 1)
      {
        uint64_t v41 = v0[17];
        uint64_t v42 = v0[13];
        uint64_t v43 = v0[11];
        uint64_t v54 = v0[12];
        uint64_t v44 = v0[10];
        char v45 = v0[7];
        uint64_t v46 = v0[5];
        (*(void (**)(void, void, uint64_t))(v43 + 32))(v0[14], v0[18], v44);
        Date.addingTimeInterval(_:)();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 16))(v41, v42, v44);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v43 + 56))(v41, 0, 1, v44);
        uint64_t v47 = (*(uint64_t (**)(uint64_t))(*(void *)v46 + 200))(v41);
        (*(void (**)(uint64_t))(v45 + 56))(v47);
        lazy protocol witness table accessor for type AspireApiConfig and conformance AspireApiConfig(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
        uint64_t v48 = dispatch thunk of static Comparable.< infix(_:_:)();
        uint64_t v49 = *(void (**)(uint64_t, uint64_t))(v43 + 8);
        v49(v54, v44);
        uint64_t v51 = v0[13];
        uint64_t v50 = v0[14];
        uint64_t v52 = v0[10];
        if ((v48 & 1) == 0)
        {
          uint64_t v53 = (*(uint64_t (**)(uint64_t))(*(void *)v0[5] + 224))(5);
          v49(v51, v52);
          v49(v50, v52);
          goto LABEL_22;
        }
        v49(v0[13], v0[10]);
        v49(v50, v52);
        goto LABEL_20;
      }
      uint64_t v36 = &demangling cache variable for type metadata for Date?;
      uint64_t v35 = v0[18];
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v35, v36);
LABEL_20:
    uint64_t v28 = (*(uint64_t (**)(uint64_t))(*(void *)v0[5] + 224))(6);
    goto LABEL_21;
  }
  uint64_t v28 = (*(uint64_t (**)(uint64_t))(*(void *)v0[5] + 224))(4);
LABEL_21:
  uint64_t v53 = v28;
LABEL_22:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v40 = (void (*)(uint64_t))v0[1];
  v40(v53);
}

{
  void *v0;
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t ObjectType;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t);
  uint64_t (*v23)(uint64_t, uint64_t, uint64_t);
  int v24;
  uint64_t v25;
  os_unfair_lock_s *v26;
  uint64_t v27;
  os_unfair_lock_s *v28;
  os_unfair_lock_s *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  void (*v46)(uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  void v53[2];
  void *v54;
  uint64_t v55;

  uint64_t v54 = v0;
  uint64_t v1 = *(os_unfair_lock_s **)(v0[4] + 48);
  v0[17] = v1;
  uint64_t v2 = v1 + 4;
  uint64_t v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  closure #1 in OSAllocatedUnfairLock<A>.current.getter(v2, v53);
  v0[18] = 0;
  os_unfair_lock_unlock(v3);
  uint64_t v4 = v0[2];
  uint64_t v5 = *(void *)(v53[0] + 48);
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v6 = *(void *)(v4 + 16);
  v0[19] = v6;
  uint64_t v7 = *(void *)(v4 + 24);
  v0[20] = v7;
  if (*(void *)(v5 + 16))
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v6, v7);
    if (v9)
    {
      uint64_t v10 = v0[4];
      id v11 = (uint64_t *)(*(void *)(v5 + 56) + 16 * v8);
      uint64_t v12 = *v11;
      uint64_t v13 = v11[1];
      v0[21] = v13;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v14 = *(void *)(v10 + 32);
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v50 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 + 8) + **(int **)(v14 + 8));
      uint64_t v16 = (void *)swift_task_alloc();
      v0[22] = v16;
      *uint64_t v16 = v0;
      v16[1] = specialized RequestsManager.fetchStatus<A>(status:dynamicConfig:);
      uint64_t v17 = v0[5];
      v50(v17, v12, v13, ObjectType, v14);
      return;
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v18 = swift_bridgeObjectRelease();
  uint64_t v19 = v0[16];
  uint64_t v20 = v0[7];
  uint64_t v21 = v0[8];
  uint64_t v22 = *(void (**)(uint64_t))(*(void *)v0[2] + 168);
  v22(v18);
  uint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 48);
  int v24 = v23(v19, 1, v20);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v19, &demangling cache variable for type metadata for Date?);
  if (v24 != 1)
  {
    uint64_t v26 = (os_unfair_lock_s *)v0[17];
    uint64_t v27 = v0[18];
    uint64_t v28 = v26 + 6;
    uint64_t v29 = v26 + 4;
    os_unfair_lock_lock(v26 + 6);
    closure #1 in OSAllocatedUnfairLock<A>.current.getter(v29, v53);
    os_unfair_lock_unlock(v28);
    if (v27) {
      return;
    }
    uint64_t v30 = v0[12];
    AllowList.group(useCase:)(v0[19], v0[20], v30);
    swift_release();
    uint64_t v31 = type metadata accessor for UseCaseGroup();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 48))(v30, 1, v31) == 1)
    {
      uint64_t v32 = v0[12];
      uint64_t v33 = &demangling cache variable for type metadata for UseCaseGroup?;
    }
    else
    {
      uint64_t v34 = v0[15];
      uint64_t v35 = v0[7];
      uint64_t v36 = outlined destroy of UseCaseGroup(v0[12], (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
      v22(v36);
      if (v23(v34, 1, v35) != 1)
      {
        uint64_t v38 = v0[14];
        uint64_t v39 = v0[10];
        uint64_t v40 = v0[8];
        uint64_t v52 = v0[9];
        uint64_t v41 = v0[7];
        uint64_t v42 = v0[4];
        uint64_t v43 = v0[2];
        (*(void (**)(void, void, uint64_t))(v40 + 32))(v0[11], v0[15], v41);
        Date.addingTimeInterval(_:)();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 16))(v38, v39, v41);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v40 + 56))(v38, 0, 1, v41);
        uint64_t v44 = (*(uint64_t (**)(uint64_t))(*(void *)v43 + 200))(v38);
        (*(void (**)(uint64_t))(v42 + 56))(v44);
        lazy protocol witness table accessor for type AspireApiConfig and conformance AspireApiConfig(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
        char v45 = dispatch thunk of static Comparable.< infix(_:_:)();
        uint64_t v46 = *(void (**)(uint64_t, uint64_t))(v40 + 8);
        v46(v52, v41);
        uint64_t v48 = v0[10];
        uint64_t v47 = v0[11];
        uint64_t v49 = v0[7];
        if ((v45 & 1) == 0)
        {
          uint64_t v51 = (*(uint64_t (**)(uint64_t))(*(void *)v0[2] + 224))(5);
          v46(v48, v49);
          v46(v47, v49);
          goto LABEL_20;
        }
        v46(v0[10], v0[7]);
        v46(v47, v49);
        goto LABEL_18;
      }
      uint64_t v33 = &demangling cache variable for type metadata for Date?;
      uint64_t v32 = v0[15];
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v32, v33);
LABEL_18:
    uint64_t v25 = (*(uint64_t (**)(uint64_t))(*(void *)v0[2] + 224))(6);
    goto LABEL_19;
  }
  uint64_t v25 = (*(uint64_t (**)(uint64_t))(*(void *)v0[2] + 224))(4);
LABEL_19:
  uint64_t v51 = v25;
LABEL_20:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v37 = (void (*)(uint64_t))v0[1];
  v37(v51);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t);
  uint64_t (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  os_unfair_lock_s *v28;
  uint64_t v29;
  os_unfair_lock_s *v30;
  os_unfair_lock_s *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  void (*v48)(uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;

  uint64_t v55 = v0;
  uint64_t v1 = v0[5];
  uint64_t v2 = type metadata accessor for UserIdentifier();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    uint64_t v3 = &demangling cache variable for type metadata for UserIdentifier?;
    uint64_t v4 = v1;
LABEL_10:
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v4, v3);
    uint64_t v18 = 1;
    goto LABEL_12;
  }
  uint64_t v5 = v0[3];
  uint64_t v6 = *(void *)(v1 + *(int *)(v2 + 24));
  swift_bridgeObjectRetain();
  outlined destroy of UseCaseGroup(v1, (uint64_t (*)(void))type metadata accessor for UserIdentifier);
  uint64_t v7 = *(void *)(v5 + 32);
  uint64_t v8 = *(void *)(v5 + 40);
  if (*(void *)(v6 + 16))
  {
    outlined copy of Data._Representation(v7, v8);
    char v9 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v8);
    uint64_t v10 = v0[6];
    if (v11)
    {
      uint64_t v12 = v9;
      uint64_t v13 = *(void *)(v6 + 56);
      uint64_t v14 = type metadata accessor for SecretKey();
      uint64_t v15 = *(void *)(v14 - 8);
      _s8CipherML13NetworkConfigVWOcTm_0(v13 + *(void *)(v15 + 72) * v12, v10, (uint64_t (*)(void))type metadata accessor for SecretKey);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(v10, 0, 1, v14);
    }
    else
    {
      uint64_t v14 = type metadata accessor for SecretKey();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v10, 1, 1, v14);
    }
  }
  else
  {
    uint64_t v16 = v0[6];
    uint64_t v14 = type metadata accessor for SecretKey();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v16, 1, 1, v14);
    outlined copy of Data._Representation(v7, v8);
  }
  uint64_t v17 = v0[6];
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(v7, v8);
  type metadata accessor for SecretKey();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48))(v17, 1, v14) == 1)
  {
    uint64_t v4 = v0[6];
    uint64_t v3 = &demangling cache variable for type metadata for SecretKey?;
    goto LABEL_10;
  }
  outlined destroy of UseCaseGroup(v0[6], (uint64_t (*)(void))type metadata accessor for SecretKey);
  Date.init(timeIntervalSince1970:)();
  uint64_t v18 = 0;
LABEL_12:
  uint64_t v19 = v0[13];
  uint64_t v20 = v0[2];
  (*(void (**)(uint64_t, uint64_t, uint64_t, void))(v0[8] + 56))(v19, v18, 1, v0[7]);
  (*(void (**)(uint64_t))(*(void *)v20 + 248))(v19);
  swift_release();
  uint64_t v21 = outlined destroy of AMDPbHEConfig.OneOf_Config?(v19, &demangling cache variable for type metadata for Date?);
  uint64_t v22 = v0[16];
  uint64_t v23 = v0[7];
  int v24 = v0[8];
  uint64_t v25 = *(void (**)(uint64_t))(*(void *)v0[2] + 168);
  v25(v21);
  uint64_t v26 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v24 + 48);
  LODWORD(v20) = v26(v22, 1, v23);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v22, &demangling cache variable for type metadata for Date?);
  if (v20 != 1)
  {
    uint64_t v28 = (os_unfair_lock_s *)v0[17];
    uint64_t v29 = v0[18];
    uint64_t v30 = v28 + 6;
    uint64_t v31 = v28 + 4;
    os_unfair_lock_lock(v28 + 6);
    closure #1 in OSAllocatedUnfairLock<A>.current.getter(v31, &v54);
    os_unfair_lock_unlock(v30);
    if (v29) {
      return;
    }
    uint64_t v32 = v0[12];
    AllowList.group(useCase:)(v0[19], v0[20], v32);
    swift_release();
    uint64_t v33 = type metadata accessor for UseCaseGroup();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 48))(v32, 1, v33) == 1)
    {
      uint64_t v34 = v0[12];
      uint64_t v35 = &demangling cache variable for type metadata for UseCaseGroup?;
    }
    else
    {
      uint64_t v36 = v0[15];
      char v37 = v0[7];
      uint64_t v38 = outlined destroy of UseCaseGroup(v0[12], (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
      v25(v38);
      if (v26(v36, 1, v37) != 1)
      {
        uint64_t v40 = v0[14];
        uint64_t v41 = v0[10];
        uint64_t v42 = v0[8];
        uint64_t v53 = v0[9];
        uint64_t v43 = v0[7];
        uint64_t v44 = v0[4];
        char v45 = v0[2];
        (*(void (**)(void, void, uint64_t))(v42 + 32))(v0[11], v0[15], v43);
        Date.addingTimeInterval(_:)();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 16))(v40, v41, v43);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v42 + 56))(v40, 0, 1, v43);
        uint64_t v46 = (*(uint64_t (**)(uint64_t))(*(void *)v45 + 200))(v40);
        (*(void (**)(uint64_t))(v44 + 56))(v46);
        lazy protocol witness table accessor for type AspireApiConfig and conformance AspireApiConfig(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
        uint64_t v47 = dispatch thunk of static Comparable.< infix(_:_:)();
        uint64_t v48 = *(void (**)(uint64_t, uint64_t))(v42 + 8);
        v48(v53, v43);
        uint64_t v50 = v0[10];
        uint64_t v49 = v0[11];
        uint64_t v51 = v0[7];
        if ((v47 & 1) == 0)
        {
          uint64_t v52 = (*(uint64_t (**)(uint64_t))(*(void *)v0[2] + 224))(5);
          v48(v50, v51);
          v48(v49, v51);
          goto LABEL_22;
        }
        v48(v0[10], v0[7]);
        v48(v49, v51);
        goto LABEL_20;
      }
      uint64_t v35 = &demangling cache variable for type metadata for Date?;
      uint64_t v34 = v0[15];
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v34, v35);
LABEL_20:
    uint64_t v27 = (*(uint64_t (**)(uint64_t))(*(void *)v0[2] + 224))(6);
    goto LABEL_21;
  }
  uint64_t v27 = (*(uint64_t (**)(uint64_t))(*(void *)v0[2] + 224))(4);
LABEL_21:
  uint64_t v52 = v27;
LABEL_22:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v39 = (void (*)(uint64_t))v0[1];
  v39(v52);
}

uint64_t specialized RequestsManager.fetchStatus<A>(status:dynamicConfig:)()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA2498](specialized RequestsManager.fetchStatus<A>(status:dynamicConfig:), 0, 0);
}

{
  uint64_t v1;

  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA2498](specialized RequestsManager.fetchStatus<A>(status:dynamicConfig:), 0, 0);
}

uint64_t specialized Coordinator.run(key:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[18] = a5;
  v6[19] = v5;
  v6[16] = a3;
  v6[17] = a4;
  v6[14] = a1;
  v6[15] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v6[20] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized Coordinator.run(key:_:), v5, 0);
}

uint64_t specialized Coordinator.run(key:_:)()
{
  uint64_t v1 = v0[19] + 112;
  swift_beginAccess();
  uint64_t v2 = *(void *)v1;
  if (*(void *)(*(void *)v1 + 16))
  {
    uint64_t v4 = v0[15];
    uint64_t v3 = v0[16];
    swift_bridgeObjectRetain();
    uint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(v4, v3);
    if (v6)
    {
      uint64_t v7 = *(void *)(*(void *)(v2 + 56) + 8 * v5);
      v0[21] = v7;
      swift_retain();
      swift_bridgeObjectRelease();
      uint64_t v8 = (void *)swift_task_alloc();
      v0[22] = v8;
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      *uint64_t v8 = v0;
      v8[1] = specialized Coordinator.run(key:_:);
      uint64_t v10 = v0[14];
      uint64_t v11 = MEMORY[0x263F8EE60] + 8;
      uint64_t v12 = MEMORY[0x263F8E4E0];
      uint64_t v13 = v7;
      goto LABEL_6;
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v14 = v0[20];
  uint64_t v16 = v0[17];
  uint64_t v15 = v0[18];
  uint64_t v18 = v0[15];
  uint64_t v17 = v0[16];
  uint64_t v19 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v14, 1, 1, v19);
  uint64_t v20 = (void *)swift_allocObject();
  v20[2] = 0;
  v20[3] = 0;
  v20[4] = v16;
  v20[5] = v15;
  swift_retain();
  uint64_t v21 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5(v14, (uint64_t)&async function pointer to partial apply for specialized closure #1 in Coordinator.run(key:_:), (uint64_t)v20);
  v0[24] = v21;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v25 = *(void *)v1;
  *(void *)uint64_t v1 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v21, v18, v17, isUniquelyReferenced_nonNull_native);
  *(void *)uint64_t v1 = v25;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
  uint64_t v23 = (void *)swift_task_alloc();
  v0[25] = v23;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  *uint64_t v23 = v0;
  v23[1] = specialized Coordinator.run(key:_:);
  uint64_t v10 = v0[14];
  uint64_t v11 = MEMORY[0x263F8EE60] + 8;
  uint64_t v12 = MEMORY[0x263F8E4E0];
  uint64_t v13 = v21;
LABEL_6:
  return MEMORY[0x270FA1FA8](v10, v13, v11, v9, v12);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 184) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 152);
  if (v0) {
    uint64_t v4 = specialized Coordinator.run(key:_:);
  }
  else {
    uint64_t v4 = specialized Coordinator.run(key:_:);
  }
  return MEMORY[0x270FA2498](v4, v3, 0);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 208) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 152);
  if (v0) {
    uint64_t v4 = specialized Coordinator.run(key:_:);
  }
  else {
    uint64_t v4 = specialized Coordinator.run(key:_:);
  }
  return MEMORY[0x270FA2498](v4, v3, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v1 = v0[15];
  uint64_t v2 = v0[16];
  swift_beginAccess();
  swift_bridgeObjectRetain();
  specialized Dictionary._Variant.removeValue(forKey:)(v1, v2);
  swift_endAccess();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v1 = v0[15];
  uint64_t v2 = v0[16];
  swift_beginAccess();
  swift_bridgeObjectRetain();
  specialized Dictionary._Variant.removeValue(forKey:)(v1, v2);
  swift_endAccess();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t specialized closure #1 in Coordinator.run(key:_:)(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v8 = (uint64_t (*)(uint64_t))((char *)a4 + *a4);
  char v6 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v6;
  *char v6 = v4;
  v6[1] = protocol witness for NetworkManager.uploadKeys(evaluationKeys:userId:) in conformance AspireNetworkManager;
  return v8(a1);
}

id @nonobjc CMLUseCaseStatus.init(useCase:serializedDynamicConfig:lastUsed:keyGenerationTime:keyExpirationTime:status:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v22 = (void *)MEMORY[0x24C5B33F0]();
  swift_bridgeObjectRelease();
  if (a4 >> 60 == 15)
  {
    Class isa = 0;
  }
  else
  {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data?(a3, a4);
  }
  uint64_t v14 = type metadata accessor for Date();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  Class v17 = 0;
  if (v16(a5, 1, v14) != 1)
  {
    Class v17 = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(a5, v14);
  }
  if (v16(a6, 1, v14) == 1)
  {
    Class v18 = 0;
  }
  else
  {
    Class v18 = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(a6, v14);
  }
  if (v16(a7, 1, v14) == 1)
  {
    Class v19 = 0;
  }
  else
  {
    Class v19 = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(a7, v14);
  }
  id v20 = objc_msgSend(v23, sel_initWithUseCase_serializedDynamicConfig_lastUsed_keyGenerationTime_keyExpirationTime_status_, v22, isa, v17, v18, v19, a8);

  return v20;
}

uint64_t sub_249CFF894()
{
  swift_unknownObjectRelease();
  swift_release();

  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t partial apply for closure #1 in RequestsManager.queryStatus(for:options:)()
{
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = *(void *)(v0 + 48);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = protocol witness for NetworkManager.uploadKeys(evaluationKeys:userId:) in conformance AspireNetworkManager;
  uint64_t v5 = (void *)swift_task_alloc();
  v4[3] = v5;
  *uint64_t v5 = v4;
  v5[1] = closure #1 in RequestsManager.queryStatus(for:options:);
  return RequestsManager.handleOptions(clientConfig:options:)(v2, v3);
}

uint64_t sub_249CFF9C8()
{
  swift_release();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t sub_249CFFA08@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 120))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_249CFFA54(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, unint64_t))(**(void **)a2 + 128);
  outlined copy of Data?(*a1, v3);
  return v4(v2, v3);
}

uint64_t sub_249CFFAC0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 144))();
}

uint64_t sub_249CFFB08(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 168))();
}

uint64_t sub_249CFFB50(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 192))();
}

uint64_t ObjC metadata update function for RequestsManager.CMLUseCaseStatusBuilder()
{
  return type metadata accessor for RequestsManager.CMLUseCaseStatusBuilder();
}

uint64_t type metadata accessor for RequestsManager.CMLUseCaseStatusBuilder()
{
  uint64_t result = type metadata singleton initialization cache for RequestsManager.CMLUseCaseStatusBuilder;
  if (!type metadata singleton initialization cache for RequestsManager.CMLUseCaseStatusBuilder) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for RequestsManager.CMLUseCaseStatusBuilder()
{
  type metadata accessor for Date?();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for RequestsManager.CMLUseCaseStatusBuilder(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for RequestsManager.CMLUseCaseStatusBuilder);
}

uint64_t dispatch thunk of RequestsManager.CMLUseCaseStatusBuilder.serializedDynamicConfig.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of RequestsManager.CMLUseCaseStatusBuilder.serializedDynamicConfig.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of RequestsManager.CMLUseCaseStatusBuilder.serializedDynamicConfig.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of RequestsManager.CMLUseCaseStatusBuilder.lastUsed.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of RequestsManager.CMLUseCaseStatusBuilder.lastUsed.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of RequestsManager.CMLUseCaseStatusBuilder.lastUsed.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of RequestsManager.CMLUseCaseStatusBuilder.keyGenerationTime.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of RequestsManager.CMLUseCaseStatusBuilder.keyGenerationTime.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of RequestsManager.CMLUseCaseStatusBuilder.keyGenerationTime.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of RequestsManager.CMLUseCaseStatusBuilder.keyExpirationTime.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of RequestsManager.CMLUseCaseStatusBuilder.keyExpirationTime.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of RequestsManager.CMLUseCaseStatusBuilder.keyExpirationTime.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of RequestsManager.CMLUseCaseStatusBuilder.__allocating_init(useCase:)()
{
  return (*(uint64_t (**)(void))(v0 + 216))();
}

uint64_t dispatch thunk of RequestsManager.CMLUseCaseStatusBuilder.build(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t dispatch thunk of RequestsManager.CMLUseCaseStatusBuilder.withDynamicConfig(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of RequestsManager.CMLUseCaseStatusBuilder.withLastUsed(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t dispatch thunk of RequestsManager.CMLUseCaseStatusBuilder.withKeyGenerationTime(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

void type metadata accessor for Date?()
{
  if (!lazy cache variable for type metadata for Date?)
  {
    type metadata accessor for Date();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Date?);
    }
  }
}

uint64_t sub_249CFFF58()
{
  swift_unknownObjectRelease();
  swift_release();
  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t partial apply for specialized closure #1 in Coordinator.run(key:_:)(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 32);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for NetworkManager.uploadKeys(evaluationKeys:userId:) in conformance AspireNetworkManager;
  uint64_t v8 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  char v6 = (void *)swift_task_alloc();
  v5[2] = v6;
  *char v6 = v5;
  v6[1] = protocol witness for NetworkManager.uploadKeys(evaluationKeys:userId:) in conformance AspireNetworkManager;
  return v8(a1);
}

uint64_t outlined consume of UseCase?(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned __int8 a8)
{
  if (a8 != 255) {
    return outlined consume of UseCase(result, a2, a3, a4, a5, a6, a7, a8 & 1);
  }
  return result;
}

uint64_t _s8CipherML14UserIdentifierVWObTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t lazy protocol witness table accessor for type AspireApiConfig and conformance AspireApiConfig(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined destroy of UseCaseGroup(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _s8CipherML13NetworkConfigVWOcTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t AspireApiRequest.amd()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v59 = a1;
  uint64_t v65 = type metadata accessor for AspireApiPIRRequest(0);
  MEMORY[0x270FA5388](v65);
  uint64_t v66 = (uint64_t)&v57 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v63 = (char *)&v57 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v62 = (char *)&v57 - v6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v57 - v11;
  uint64_t v13 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  uint64_t v67 = *(void *)(v13 - 8);
  uint64_t v68 = v13;
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (uint64_t *)((char *)&v57 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v16);
  Class v18 = (uint64_t *)((char *)&v57 - v17);
  uint64_t v64 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
  MEMORY[0x270FA5388](v64);
  uint64_t v61 = (char *)&v57 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  uint64_t v60 = (char *)&v57 - v21;
  uint64_t v22 = type metadata accessor for AspireApiPECRequest(0);
  MEMORY[0x270FA5388](v22);
  int v24 = (char *)&v57 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
  MEMORY[0x270FA5388](v25 - 8);
  uint64_t v27 = (char *)&v57 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = *(int *)(type metadata accessor for AspireApiRequest(0) + 20);
  uint64_t v58 = v1;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + v28, (uint64_t)v27, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
  uint64_t v29 = type metadata accessor for AspireApiRequest.OneOf_Request(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v29 - 8) + 48))(v27, 1, v29) == 1)
  {
    if (one-time initialization token for networking != -1) {
      swift_once();
    }
    uint64_t v30 = type metadata accessor for Logger();
    __swift_project_value_buffer(v30, (uint64_t)static Logger.networking);
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v33 = 0;
      _os_log_impl(&dword_249C3F000, v31, v32, "query has neither PecRequest nor PirRequest", v33, 2u);
      MEMORY[0x24C5B4790](v33, -1, -1);
    }

    type metadata accessor for CipherMLError();
    _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    return swift_willThrow();
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload)
    {
      if (EnumCaseMultiPayload == 1)
      {
        outlined init with take of AspireApiPIRRequest((uint64_t)v27, (uint64_t)v24, type metadata accessor for AspireApiPECRequest);
        outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)&v24[*(int *)(v22 + 32)], (uint64_t)v12, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v67 + 48))(v12, 1, v68) == 1)
        {
          *Class v18 = 0;
          v18[1] = 0;
          v18[2] = 0xC000000000000000;
          UnknownStorage.init()();
          outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v12, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
        }
        else
        {
          outlined init with take of AspireApiPIRRequest((uint64_t)v12, (uint64_t)v18, type metadata accessor for AspireApiEvaluationKeyMetadata);
        }
        _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_3(&lazy protocol witness table cache variable for type AspireApiEvaluationKeyMetadata and conformance AspireApiEvaluationKeyMetadata, (void (*)(uint64_t))type metadata accessor for AspireApiEvaluationKeyMetadata);
        uint64_t v43 = v74;
        uint64_t v44 = Message.serializedData(partial:)();
        if (v43)
        {
          uint64_t v46 = type metadata accessor for AspireApiEvaluationKeyMetadata;
        }
        else
        {
          uint64_t v51 = v44;
          uint64_t v52 = v45;
          outlined destroy of AspireApiRequest.OneOf_Request((uint64_t)v18, type metadata accessor for AspireApiEvaluationKeyMetadata);
          uint64_t v72 = v51;
          uint64_t v73 = v52;
          uint64_t v71 = 0;
          long long v69 = 0u;
          long long v70 = 0u;
          BinaryDecodingOptions.init()();
          _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_3(&lazy protocol witness table cache variable for type AMDPbEvaluationKeyMetadata and conformance AMDPbEvaluationKeyMetadata, (void (*)(uint64_t))type metadata accessor for AMDPbEvaluationKeyMetadata);
          Class v18 = v60;
          Message.init<A>(serializedBytes:extensions:partial:options:)();
          uint64_t v55 = type metadata accessor for AMDPbHEQuery(0);
          MEMORY[0x270FA5388](v55);
          *(&v57 - 4) = v58;
          *(&v57 - 3) = (uint64_t)v24;
          *(&v57 - 2) = (uint64_t)v18;
          _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_3(&lazy protocol witness table cache variable for type AMDPbHEQuery and conformance AMDPbHEQuery, (void (*)(uint64_t))type metadata accessor for AMDPbHEQuery);
          static Message.with(_:)();
          uint64_t v46 = type metadata accessor for AMDPbEvaluationKeyMetadata;
        }
        outlined destroy of AspireApiRequest.OneOf_Request((uint64_t)v18, v46);
        uint64_t v41 = type metadata accessor for AspireApiPECRequest;
        uint64_t v42 = (uint64_t)v24;
      }
      else
      {
        if (one-time initialization token for networking != -1) {
          swift_once();
        }
        uint64_t v37 = type metadata accessor for Logger();
        __swift_project_value_buffer(v37, (uint64_t)static Logger.networking);
        uint64_t v38 = Logger.logObject.getter();
        os_log_type_t v39 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v38, v39))
        {
          uint64_t v40 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v40 = 0;
          _os_log_impl(&dword_249C3F000, v38, v39, "OPRF request not supported for AMS networking", v40, 2u);
          MEMORY[0x24C5B4790](v40, -1, -1);
        }

        type metadata accessor for CipherMLError();
        _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
        swift_allocError();
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v41 = type metadata accessor for AspireApiRequest.OneOf_Request;
        uint64_t v42 = (uint64_t)v27;
      }
    }
    else
    {
      uint64_t v36 = v66;
      outlined init with take of AspireApiPIRRequest((uint64_t)v27, v66, type metadata accessor for AspireApiPIRRequest);
      outlined init with copy of AMDPbHEConfig.OneOf_Config?(v36 + *(int *)(v65 + 32), (uint64_t)v9, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v67 + 48))(v9, 1, v68) == 1)
      {
        *uint64_t v15 = 0;
        v15[1] = 0;
        v15[2] = 0xC000000000000000;
        UnknownStorage.init()();
        outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v9, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
      }
      else
      {
        outlined init with take of AspireApiPIRRequest((uint64_t)v9, (uint64_t)v15, type metadata accessor for AspireApiEvaluationKeyMetadata);
      }
      _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_3(&lazy protocol witness table cache variable for type AspireApiEvaluationKeyMetadata and conformance AspireApiEvaluationKeyMetadata, (void (*)(uint64_t))type metadata accessor for AspireApiEvaluationKeyMetadata);
      uint64_t v47 = v74;
      uint64_t v48 = Message.serializedData(partial:)();
      if (v47)
      {
        uint64_t v50 = type metadata accessor for AspireApiEvaluationKeyMetadata;
      }
      else
      {
        uint64_t v53 = v48;
        uint64_t v54 = v49;
        outlined destroy of AspireApiRequest.OneOf_Request((uint64_t)v15, type metadata accessor for AspireApiEvaluationKeyMetadata);
        uint64_t v72 = v53;
        uint64_t v73 = v54;
        uint64_t v71 = 0;
        long long v69 = 0u;
        long long v70 = 0u;
        BinaryDecodingOptions.init()();
        _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_3(&lazy protocol witness table cache variable for type AMDPbEvaluationKeyMetadata and conformance AMDPbEvaluationKeyMetadata, (void (*)(uint64_t))type metadata accessor for AMDPbEvaluationKeyMetadata);
        uint64_t v15 = v61;
        Message.init<A>(serializedBytes:extensions:partial:options:)();
        uint64_t v56 = type metadata accessor for AMDPbHEQuery(0);
        MEMORY[0x270FA5388](v56);
        *(&v57 - 4) = v58;
        *(&v57 - 3) = v36;
        *(&v57 - 2) = (uint64_t)v15;
        _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_3(&lazy protocol witness table cache variable for type AMDPbHEQuery and conformance AMDPbHEQuery, (void (*)(uint64_t))type metadata accessor for AMDPbHEQuery);
        static Message.with(_:)();
        uint64_t v50 = type metadata accessor for AMDPbEvaluationKeyMetadata;
      }
      outlined destroy of AspireApiRequest.OneOf_Request((uint64_t)v15, v50);
      uint64_t v41 = type metadata accessor for AspireApiPIRRequest;
      uint64_t v42 = v36;
    }
    return outlined destroy of AspireApiRequest.OneOf_Request(v42, v41);
  }
}

uint64_t closure #1 in AspireApiRequest.amd()(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = &v16[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = *a2;
  uint64_t v11 = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *a1 = v12;
  a1[1] = v11;
  type metadata accessor for AMDPbPECQuery(0);
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_3(&lazy protocol witness table cache variable for type AMDPbPECQuery and conformance AMDPbPECQuery, (void (*)(uint64_t))type metadata accessor for AMDPbPECQuery);
  static Message.with(_:)();
  uint64_t v13 = type metadata accessor for AMDPbHEQuery.OneOf_Query(0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v10, 0, 1, v13);
  uint64_t v14 = type metadata accessor for AMDPbHEQuery(0);
  return outlined assign with take of AMDPbHEConfig.OneOf_Config?((uint64_t)v10, (uint64_t)a1 + *(int *)(v14 + 20), &demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
}

uint64_t closure #1 in closure #1 in AspireApiRequest.amd()(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v27 = a3;
  uint64_t v6 = type metadata accessor for AMDPbEvaluationKey(0);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v28 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *a2;
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v13;
  uint64_t v15 = a2[1];
  if (*(void *)(v15 + 16))
  {
    outlined init with copy of AMDPbHEResponse(v15 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80)), (uint64_t)v12, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
    uint64_t v16 = type metadata accessor for AMDPbPECQuery(0);
    uint64_t v17 = *(int *)(v16 + 28);
    uint64_t v26 = v3;
    uint64_t v18 = (uint64_t)a1 + v17;
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)a1 + v17, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
    outlined init with take of AspireApiPIRRequest((uint64_t)v12, v18, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
    uint64_t v19 = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v10 + 56))(v18, 0, 1, v9);
    MEMORY[0x270FA5388](v19);
    *(&v26 - 2) = v27;
    _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_3(&lazy protocol witness table cache variable for type AMDPbEvaluationKey and conformance AMDPbEvaluationKey, (void (*)(uint64_t))type metadata accessor for AMDPbEvaluationKey);
    uint64_t v20 = (uint64_t)v28;
    static Message.with(_:)();
    uint64_t v21 = (uint64_t)a1 + *(int *)(v16 + 32);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v21, &demangling cache variable for type metadata for AMDPbEvaluationKey?);
    outlined init with take of AspireApiPIRRequest(v20, v21, type metadata accessor for AMDPbEvaluationKey);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56))(v21, 0, 1, v6);
    uint64_t v22 = a2[2];
    unint64_t v23 = a2[3];
    uint64_t v24 = a1[1];
    unint64_t v25 = a1[2];
    outlined copy of Data._Representation(v22, v23);
    uint64_t result = outlined consume of Data._Representation(v24, v25);
    a1[1] = v22;
    a1[2] = v23;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t closure #2 in AspireApiRequest.amd()(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = &v17[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v13 = *a2;
  uint64_t v12 = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *a1 = v13;
  a1[1] = v12;
  type metadata accessor for AMDPbPIRQuery(0);
  uint64_t v18 = a3;
  uint64_t v19 = a4;
  _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_3(&lazy protocol witness table cache variable for type AMDPbPIRQuery and conformance AMDPbPIRQuery, (void (*)(uint64_t))type metadata accessor for AMDPbPIRQuery);
  uint64_t result = static Message.with(_:)();
  if (!v4)
  {
    uint64_t v15 = type metadata accessor for AMDPbHEQuery.OneOf_Query(0);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v11, 0, 1, v15);
    uint64_t v16 = type metadata accessor for AMDPbHEQuery(0);
    return outlined assign with take of AMDPbHEConfig.OneOf_Config?((uint64_t)v11, (uint64_t)a1 + *(int *)(v16 + 20), &demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
  }
  return result;
}

uint64_t closure #1 in closure #2 in AspireApiRequest.amd()(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v37 = a3;
  uint64_t v5 = type metadata accessor for AMDPbEvaluationKey(0);
  uint64_t v39 = *(void *)(v5 - 8);
  uint64_t v40 = v5;
  MEMORY[0x270FA5388](v5);
  uint64_t v38 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for AspirePirEncryptedIndices(0);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (uint64_t *)((char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v37 - v16;
  int v18 = *a2;
  uint64_t v42 = a1;
  *a1 = v18;
  uint64_t v19 = *(int *)(type metadata accessor for AspireApiPIRRequest(0) + 28);
  uint64_t v41 = a2;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)a2 + v19, (uint64_t)v10, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    *uint64_t v14 = MEMORY[0x263F8EE78];
    v14[1] = 0;
    UnknownStorage.init()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v10, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  }
  else
  {
    outlined init with take of AspireApiPIRRequest((uint64_t)v10, (uint64_t)v14, type metadata accessor for AspirePirEncryptedIndices);
  }
  _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_3(&lazy protocol witness table cache variable for type AspirePirEncryptedIndices and conformance AspirePirEncryptedIndices, (void (*)(uint64_t))type metadata accessor for AspirePirEncryptedIndices);
  uint64_t v20 = v48;
  uint64_t v21 = Message.serializedData(partial:)();
  if (v20) {
    return outlined destroy of AspireApiRequest.OneOf_Request((uint64_t)v14, type metadata accessor for AspirePirEncryptedIndices);
  }
  uint64_t v24 = v21;
  uint64_t v25 = v22;
  outlined destroy of AspireApiRequest.OneOf_Request((uint64_t)v14, type metadata accessor for AspirePirEncryptedIndices);
  uint64_t v46 = v24;
  uint64_t v47 = v25;
  uint64_t v45 = 0;
  long long v43 = 0u;
  long long v44 = 0u;
  BinaryDecodingOptions.init()();
  Message.init<A>(serializedBytes:extensions:partial:options:)();
  uint64_t v26 = type metadata accessor for AMDPbPIRQuery(0);
  uint64_t v27 = v42;
  uint64_t v28 = (uint64_t)v42 + *(int *)(v26 + 28);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v28, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  outlined init with take of AspireApiPIRRequest((uint64_t)v17, v28, type metadata accessor for AspirePirEncryptedIndices);
  uint64_t v29 = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(v28, 0, 1, v11);
  MEMORY[0x270FA5388](v29);
  *(&v37 - 2) = v37;
  _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_3(&lazy protocol witness table cache variable for type AMDPbEvaluationKey and conformance AMDPbEvaluationKey, (void (*)(uint64_t))type metadata accessor for AMDPbEvaluationKey);
  uint64_t v30 = (uint64_t)v38;
  uint64_t v31 = v40;
  static Message.with(_:)();
  uint64_t v32 = (uint64_t)v27 + *(int *)(v26 + 32);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v32, &demangling cache variable for type metadata for AMDPbEvaluationKey?);
  outlined init with take of AspireApiPIRRequest(v30, v32, type metadata accessor for AMDPbEvaluationKey);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v39 + 56))(v32, 0, 1, v31);
  uint64_t v33 = *((void *)v41 + 1);
  unint64_t v34 = *((void *)v41 + 2);
  uint64_t v35 = *((void *)v27 + 1);
  unint64_t v36 = *((void *)v27 + 2);
  outlined copy of Data._Representation(v33, v34);
  uint64_t result = outlined consume of Data._Representation(v35, v36);
  *((void *)v27 + 1) = v33;
  *((void *)v27 + 2) = v34;
  return result;
}

uint64_t closure #1 in closure #1 in closure #1 in AspireApiRequest.amd()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEResponse(a2, (uint64_t)v7, type metadata accessor for AMDPbEvaluationKeyMetadata);
  uint64_t v8 = a1 + *(int *)(type metadata accessor for AMDPbEvaluationKey(0) + 20);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v8, &demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
  outlined init with take of AspireApiPIRRequest((uint64_t)v7, v8, type metadata accessor for AMDPbEvaluationKeyMetadata);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

uint64_t AMDPbHEResponse.validateSuccessResponse()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for AMDPbHEResponse(0);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = &v32[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = &v32[-v8];
  if (!*v2) {
    return outlined init with copy of AMDPbHEResponse((uint64_t)v2, a1, type metadata accessor for AMDPbHEResponse);
  }
  if (one-time initialization token for networking != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Logger.networking);
  outlined init with copy of AMDPbHEResponse((uint64_t)v2, (uint64_t)v9, type metadata accessor for AMDPbHEResponse);
  outlined init with copy of AMDPbHEResponse((uint64_t)v2, (uint64_t)v6, type metadata accessor for AMDPbHEResponse);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.error.getter();
  int v13 = v12;
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v14 = swift_slowAlloc();
    os_log_t v34 = v11;
    uint64_t v15 = v14;
    uint64_t v35 = swift_slowAlloc();
    uint64_t v38 = v35;
    *(_DWORD *)uint64_t v15 = 136446466;
    char v16 = v9[8];
    uint64_t v36 = *(void *)v9;
    char v37 = v16;
    int v33 = v13;
    uint64_t v17 = String.init<A>(describing:)();
    uint64_t v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of AspireApiRequest.OneOf_Request((uint64_t)v9, type metadata accessor for AMDPbHEResponse);
    *(_WORD *)(v15 + 12) = 2082;
    uint64_t v19 = swift_bridgeObjectRetain();
    uint64_t v20 = MEMORY[0x24C5B3560](v19, MEMORY[0x263F8D310]);
    unint64_t v22 = v21;
    swift_bridgeObjectRelease();
    uint64_t v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v22, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of AspireApiRequest.OneOf_Request((uint64_t)v6, type metadata accessor for AMDPbHEResponse);
    os_log_t v23 = v34;
    _os_log_impl(&dword_249C3F000, v34, (os_log_type_t)v33, "AMDPbHEResponse has non-success status '%{public}s', with error '%{public}s'", (uint8_t *)v15, 0x16u);
    uint64_t v24 = v35;
    swift_arrayDestroy();
    MEMORY[0x24C5B4790](v24, -1, -1);
    MEMORY[0x24C5B4790](v15, -1, -1);
  }
  else
  {
    outlined destroy of AspireApiRequest.OneOf_Request((uint64_t)v9, type metadata accessor for AMDPbHEResponse);
    outlined destroy of AspireApiRequest.OneOf_Request((uint64_t)v6, type metadata accessor for AMDPbHEResponse);
  }
  uint64_t v26 = (void *)v2[3];
  if (v26[2] == 1)
  {
    uint64_t v27 = v26[4];
    uint64_t v28 = v26[5];
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v29 = swift_bridgeObjectRetain();
    uint64_t v27 = MEMORY[0x24C5B3560](v29, MEMORY[0x263F8D310]);
    uint64_t v28 = v30;
    swift_bridgeObjectRelease();
  }
  type metadata accessor for CipherMLError();
  _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
  swift_allocError();
  *uint64_t v31 = v27;
  v31[1] = v28;
  swift_storeEnumTagMultiPayload();
  return swift_willThrow();
}

uint64_t AMDPbHEResponse.validateAPICode(expected:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v7 = type metadata accessor for AMDPbHEResponse(0);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = v3 + *(int *)(v10 + 44);
  if (*(unsigned char *)(v11 + 9)) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = *(void *)v11;
  }
  if (a2)
  {
    switch(a1)
    {
      case 1:
        if (v12 == 1) {
          return outlined init with copy of AMDPbHEResponse(v3, a3, type metadata accessor for AMDPbHEResponse);
        }
        goto LABEL_7;
      case 2:
        if (v12 == 2) {
          return outlined init with copy of AMDPbHEResponse(v3, a3, type metadata accessor for AMDPbHEResponse);
        }
        goto LABEL_7;
      case 3:
        if (v12 == 3) {
          return outlined init with copy of AMDPbHEResponse(v3, a3, type metadata accessor for AMDPbHEResponse);
        }
        goto LABEL_7;
      default:
        if (v12) {
          goto LABEL_7;
        }
        return outlined init with copy of AMDPbHEResponse(v3, a3, type metadata accessor for AMDPbHEResponse);
    }
  }
  if (v12 == a1) {
    return outlined init with copy of AMDPbHEResponse(v3, a3, type metadata accessor for AMDPbHEResponse);
  }
LABEL_7:
  if (one-time initialization token for networking != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Logger.networking);
  outlined init with copy of AMDPbHEResponse(v3, (uint64_t)v9, type metadata accessor for AMDPbHEResponse);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    uint64_t v26 = v17;
    *(_DWORD *)uint64_t v16 = 136446466;
    char v18 = v9[8];
    uint64_t v24 = *(void *)v9;
    char v25 = v18;
    uint64_t v19 = String.init<A>(describing:)();
    uint64_t v24 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of AspireApiRequest.OneOf_Request((uint64_t)v9, type metadata accessor for AMDPbHEResponse);
    *(_WORD *)(v16 + 12) = 2082;
    uint64_t v24 = a1;
    char v25 = a2 & 1;
    uint64_t v21 = String.init<A>(describing:)();
    uint64_t v24 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_249C3F000, v14, v15, "AMDPbHEResponse has incorrect apiCode '%{public}s', expected '%{public}s'", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x24C5B4790](v17, -1, -1);
    MEMORY[0x24C5B4790](v16, -1, -1);
  }
  else
  {
    outlined destroy of AspireApiRequest.OneOf_Request((uint64_t)v9, type metadata accessor for AMDPbHEResponse);
  }

  type metadata accessor for CipherMLError();
  _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
  swift_allocError();
  swift_storeEnumTagMultiPayload();
  return swift_willThrow();
}

uint64_t AMDPbHEReply.aspire()()
{
  uint64_t v1 = type metadata accessor for AMDPbPIRReply(0);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)v20 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for AMDPbPECReply(0);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v0, (uint64_t)v9, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
  uint64_t v10 = type metadata accessor for AMDPbHEReply.OneOf_Reply(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v9, 1, v10) == 1)
  {
    if (one-time initialization token for networking != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.networking);
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl(&dword_249C3F000, v12, v13, "Response is neither pecReply nor pirReply", v14, 2u);
      MEMORY[0x24C5B4790](v14, -1, -1);
    }

    type metadata accessor for CipherMLError();
    _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    return swift_willThrow();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined init with take of AspireApiPIRRequest((uint64_t)v9, (uint64_t)v6, type metadata accessor for AMDPbPECReply);
      uint64_t v16 = type metadata accessor for AspireApiResponse(0);
      MEMORY[0x270FA5388](v16);
      v20[-2] = v6;
      _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_3(&lazy protocol witness table cache variable for type AspireApiResponse and conformance AspireApiResponse, (void (*)(uint64_t))type metadata accessor for AspireApiResponse);
      static Message.with(_:)();
      uint64_t v17 = type metadata accessor for AMDPbPECReply;
      uint64_t v18 = (uint64_t)v6;
    }
    else
    {
      outlined init with take of AspireApiPIRRequest((uint64_t)v9, (uint64_t)v3, type metadata accessor for AMDPbPIRReply);
      uint64_t v19 = type metadata accessor for AspireApiResponse(0);
      MEMORY[0x270FA5388](v19);
      v20[-2] = v3;
      _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_3(&lazy protocol witness table cache variable for type AspireApiResponse and conformance AspireApiResponse, (void (*)(uint64_t))type metadata accessor for AspireApiResponse);
      static Message.with(_:)();
      uint64_t v17 = type metadata accessor for AMDPbPIRReply;
      uint64_t v18 = (uint64_t)v3;
    }
    return outlined destroy of AspireApiRequest.OneOf_Request(v18, v17);
  }
}

uint64_t closure #1 in AMDPbHEReply.aspire()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for AspireApiPECResponse(0);
  uint64_t v10 = a2;
  _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_3(&lazy protocol witness table cache variable for type AspireApiPECResponse and conformance AspireApiPECResponse, (void (*)(uint64_t))type metadata accessor for AspireApiPECResponse);
  static Message.with(_:)();
  uint64_t v7 = type metadata accessor for AspireApiResponse.OneOf_Response(0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 0, 1, v7);
  return outlined assign with take of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, a1, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
}

uint64_t closure #1 in closure #1 in AMDPbHEReply.aspire()(void *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for AMDPbPECShardReply(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AspireApiPECShardResponse(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *a2;
  int64_t v13 = *(void *)(v12 + 16);
  uint64_t v14 = MEMORY[0x263F8EE78];
  if (v13)
  {
    os_log_t v23 = a1;
    uint64_t v26 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13, 0);
    uint64_t v15 = *(unsigned __int8 *)(v5 + 80);
    uint64_t v22 = v12;
    uint64_t v16 = v12 + ((v15 + 32) & ~v15);
    uint64_t v24 = *(void *)(v5 + 72);
    do
    {
      uint64_t v17 = outlined init with copy of AMDPbHEResponse(v16, (uint64_t)v7, type metadata accessor for AMDPbPECShardReply);
      MEMORY[0x270FA5388](v17);
      *(&v22 - 2) = (uint64_t)v7;
      _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_3(&lazy protocol witness table cache variable for type AspireApiPECShardResponse and conformance AspireApiPECShardResponse, (void (*)(uint64_t))type metadata accessor for AspireApiPECShardResponse);
      uint64_t v18 = v25;
      static Message.with(_:)();
      uint64_t v25 = v18;
      outlined destroy of AspireApiRequest.OneOf_Request((uint64_t)v7, type metadata accessor for AMDPbPECShardReply);
      uint64_t v14 = v26;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v14 + 16) + 1, 1);
        uint64_t v14 = v26;
      }
      unint64_t v20 = *(void *)(v14 + 16);
      unint64_t v19 = *(void *)(v14 + 24);
      if (v20 >= v19 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
        uint64_t v14 = v26;
      }
      *(void *)(v14 + 16) = v20 + 1;
      outlined init with take of AspireApiPIRRequest((uint64_t)v11, v14+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(void *)(v9 + 72) * v20, type metadata accessor for AspireApiPECShardResponse);
      v16 += v24;
      --v13;
    }
    while (v13);
    swift_bridgeObjectRelease();
    a1 = v23;
  }
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v14;
  return result;
}

uint64_t AMDPbPECShardReply.aspire()()
{
  return static Message.with(_:)();
}

uint64_t closure #2 in AMDPbHEReply.aspire()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for AspireApiPIRResponse(0);
  uint64_t v10 = a2;
  _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_3(&lazy protocol witness table cache variable for type AspireApiPIRResponse and conformance AspireApiPIRResponse, (void (*)(uint64_t))type metadata accessor for AspireApiPIRResponse);
  static Message.with(_:)();
  uint64_t v7 = type metadata accessor for AspireApiResponse.OneOf_Response(0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 0, 1, v7);
  return outlined assign with take of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, a1, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
}

uint64_t closure #1 in AMDPbPECShardReply.aspire()(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AspireSimilaritySerializedCiphertextMatrix>);
  uint64_t v7 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
  uint64_t v8 = *(void *)(v7 - 8);
  unint64_t v9 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_249E85E40;
  uint64_t v11 = (void *)(v10 + v9);
  uint64_t v12 = type metadata accessor for AMDPbPECShardReply(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)a2 + *(int *)(v12 + 28), (uint64_t)v6, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    void *v11 = 0;
    v11[1] = MEMORY[0x263F8EE78];
    UnknownStorage.init()();
    int64_t v13 = (char *)v11 + *(int *)(v7 + 32);
    uint64_t v14 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
  }
  else
  {
    outlined init with take of AspireApiPIRRequest((uint64_t)v6, (uint64_t)v11, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
  }
  swift_bridgeObjectRelease();
  *a1 = v10;
  uint64_t v15 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = v15;
  uint64_t v16 = a2[1];
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  a1[2] = v16;
  return result;
}

uint64_t partial apply for closure #2 in AspireApiRequest.amd()(void *a1)
{
  return closure #2 in AspireApiRequest.amd()(a1, *(uint64_t **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t partial apply for closure #1 in AspireApiRequest.amd()(void *a1)
{
  return closure #1 in AspireApiRequest.amd()(a1, *(uint64_t **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t partial apply for closure #2 in AMDPbHEReply.aspire()(uint64_t a1)
{
  return closure #2 in AMDPbHEReply.aspire()(a1, *(void *)(v1 + 16));
}

uint64_t partial apply for closure #1 in AMDPbHEReply.aspire()(uint64_t a1)
{
  return closure #1 in AMDPbHEReply.aspire()(a1, *(void *)(v1 + 16));
}

uint64_t partial apply for closure #1 in AMDPbPECShardReply.aspire()(uint64_t *a1)
{
  return closure #1 in AMDPbPECShardReply.aspire()(a1, *(uint64_t **)(v1 + 16));
}

uint64_t partial apply for closure #1 in closure #1 in AMDPbHEReply.aspire()(void *a1)
{
  return closure #1 in closure #1 in AMDPbHEReply.aspire()(a1, *(uint64_t **)(v1 + 16));
}

uint64_t partial apply for closure #1 in closure #2 in AMDPbHEReply.aspire()(void *a1)
{
  uint64_t v3 = **(void **)(v1 + 16);
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v3;
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in AspireApiRequest.amd()(void *a1)
{
  return closure #1 in closure #1 in AspireApiRequest.amd()(a1, *(uint64_t **)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t outlined init with copy of AMDPbHEResponse(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t partial apply for closure #1 in closure #2 in AspireApiRequest.amd()(_DWORD *a1)
{
  return closure #1 in closure #2 in AspireApiRequest.amd()(a1, *(_DWORD **)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_3(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined destroy of AspireApiRequest.OneOf_Request(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with take of AspireApiPIRRequest(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t partial apply for closure #1 in closure #1 in closure #2 in AspireApiRequest.amd()(uint64_t a1)
{
  return closure #1 in closure #1 in closure #1 in AspireApiRequest.amd()(a1, *(void *)(v1 + 16));
}

uint64_t closure #1 in AMDPbPECShardReply.aspire()partial apply(uint64_t *a1)
{
  return partial apply for closure #1 in AMDPbPECShardReply.aspire()(a1);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in AspireApiRequest.amd()(uint64_t a1)
{
  return partial apply for closure #1 in closure #1 in closure #2 in AspireApiRequest.amd()(a1);
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySay16CryptoKitPrivate3PIRO14BlindedKeywordVGSay8CipherML21AspireApiOPRFResponseVGG_10Foundation4DataVsAE_pTg504_s16fg14Private3PIRO14jk2V8l4ML21nop14V10Foundation4r3Vs5C33_pIgnnozo_AE_AHtAKsAL_pIegnrzr_TRAlpUsAE_pIgnnozo_Tf1cn_n(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t), uint64_t a4)
{
  uint64_t v71 = a3;
  uint64_t v72 = a4;
  uint64_t v6 = type metadata accessor for PIR.BlindedKeyword();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v60 = (char *)&v58 - v11;
  uint64_t v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PIR.BlindedKeyword, AspireApiOPRFResponse));
  uint64_t v12 = MEMORY[0x270FA5388](v70);
  uint64_t v66 = (char *)&v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v59 = (char *)&v58 - v15;
  MEMORY[0x270FA5388](v14);
  uint64_t v58 = (uint64_t)&v58 - v16;
  unint64_t v17 = *(void *)(a2 + 16);
  unint64_t v73 = *(void *)(a1 + 16);
  if (v17 >= v73) {
    int64_t v18 = v73;
  }
  else {
    int64_t v18 = v17;
  }
  uint64_t v76 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18, 0);
  int64_t v19 = v18;
  uint64_t v67 = v7;
  uint64_t v68 = a2;
  uint64_t v74 = v6;
  unint64_t v69 = v17;
  if (v18)
  {
    uint64_t v64 = v7 + 16;
    uint64_t v65 = v10;
    uint64_t v63 = (void (**)(void))(v7 + 32);
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v21 = 0;
    unint64_t v22 = v73;
    uint64_t v61 = a1;
    int64_t v62 = v18;
    while (v22 != v21)
    {
      uint64_t result = (*(uint64_t (**)(char *, unint64_t, uint64_t))(v7 + 16))(v65, a1+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(void *)(v7 + 72) * v21, v6);
      if (v17 == v21) {
        goto LABEL_37;
      }
      uint64_t v23 = *(void *)(type metadata accessor for AspireApiOPRFResponse(0) - 8);
      uint64_t v24 = a2
          + ((*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80))
          + *(void *)(v23 + 72) * v21;
      uint64_t v25 = (uint64_t)&v66[*(int *)(v70 + 48)];
      uint64_t v26 = (uint64_t)v66;
      (*v63)();
      outlined init with copy of AspireApiOPRFResponse(v24, v25);
      uint64_t v27 = v75;
      uint64_t v28 = v71(v26, v25);
      if (v27)
      {
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return outlined destroy of (PIR.BlindedKeyword, AspireApiOPRFResponse)(v26);
      }
      uint64_t v30 = v28;
      uint64_t v31 = v29;
      outlined destroy of (PIR.BlindedKeyword, AspireApiOPRFResponse)(v26);
      uint64_t v32 = v76;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v32 + 16) + 1, 1);
        uint64_t v32 = v76;
      }
      unint64_t v22 = v73;
      int64_t v19 = v62;
      unint64_t v34 = *(void *)(v32 + 16);
      unint64_t v33 = *(void *)(v32 + 24);
      if (v34 >= v33 >> 1)
      {
        uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, v34 + 1, 1);
        int64_t v19 = v62;
        unint64_t v22 = v73;
        uint64_t v32 = v76;
      }
      ++v21;
      *(void *)(v32 + 16) = v34 + 1;
      uint64_t v35 = v32 + 16 * v34;
      *(void *)(v35 + 32) = v30;
      *(void *)(v35 + 40) = v31;
      uint64_t v75 = 0;
      a1 = v61;
      uint64_t v7 = v67;
      a2 = v68;
      uint64_t v6 = v74;
      unint64_t v17 = v69;
      if (v19 == v21) {
        goto LABEL_16;
      }
    }
    __break(1u);
LABEL_37:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
    unint64_t v22 = v73;
LABEL_16:
    if (v22 <= v17)
    {
LABEL_34:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v76;
    }
    uint64_t v36 = v75;
    char v37 = (char *)v17;
    uint64_t v38 = (void (**)(char *, char *, uint64_t))(v7 + 32);
    if (v19 > (uint64_t)v37) {
      char v37 = (char *)v19;
    }
    uint64_t v65 = v37;
    uint64_t v66 = (char *)(v7 + 16);
    while (v22 != v19)
    {
      uint64_t v39 = v60;
      uint64_t result = (*(uint64_t (**)(char *, unint64_t, uint64_t))(v7 + 16))(v60, a1+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(void *)(v7 + 72) * v19, v74);
      if (v69 == v19)
      {
        (*(void (**)(char *, uint64_t))(v7 + 8))(v39, v74);
        goto LABEL_34;
      }
      if (v65 == (char *)v19) {
        goto LABEL_39;
      }
      uint64_t v40 = a1;
      uint64_t v41 = *(void *)(type metadata accessor for AspireApiOPRFResponse(0) - 8);
      uint64_t v42 = a2 + ((*(unsigned __int8 *)(v41 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80));
      int64_t v43 = v19;
      uint64_t v44 = v42 + *(void *)(v41 + 72) * v19;
      uint64_t v45 = v70;
      uint64_t v46 = v59;
      uint64_t v47 = (uint64_t)&v59[*(int *)(v70 + 48)];
      (*v38)(v59, v39, v74);
      outlined init with copy of AspireApiOPRFResponse(v44, v47);
      uint64_t v48 = (uint64_t)v46;
      uint64_t v49 = v58;
      outlined init with take of (PIR.BlindedKeyword, AspireApiOPRFResponse)(v48, v58);
      uint64_t v50 = v71(v49, v49 + *(int *)(v45 + 48));
      uint64_t v52 = v51;
      outlined destroy of (PIR.BlindedKeyword, AspireApiOPRFResponse)(v49);
      if (v36)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return swift_release();
      }
      uint64_t v53 = v76;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v53 + 16) + 1, 1);
        uint64_t v53 = v76;
      }
      unint64_t v55 = *(void *)(v53 + 16);
      unint64_t v54 = *(void *)(v53 + 24);
      if (v55 >= v54 >> 1)
      {
        uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v54 > 1, v55 + 1, 1);
        uint64_t v53 = v76;
      }
      *(void *)(v53 + 16) = v55 + 1;
      uint64_t v56 = v53 + 16 * v55;
      int64_t v19 = v43 + 1;
      *(void *)(v56 + 32) = v50;
      *(void *)(v56 + 40) = v52;
      unint64_t v22 = v73;
      BOOL v57 = v73 == v43 + 1;
      uint64_t v7 = v67;
      a2 = v68;
      a1 = v40;
      if (v57) {
        goto LABEL_34;
      }
    }
  }
  __break(1u);
LABEL_39:
  __break(1u);
  return result;
}

double SymmetricPirClientConfig.init(serverPublicKey:configType:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = a1;
  *(void *)(a3 + 8) = a2;
  *(void *)&double result = 16;
  *(_OWORD *)(a3 + 16) = xmmword_249E88010;
  *(_OWORD *)(a3 + 32) = xmmword_249E88020;
  return result;
}

__n128 SymmetricPIRClient.init(config:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for PIR.SymmetricPIRClient();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined retain of SymmetricPirClientConfig(a1);
  PIR.SymmetricPIRClient.init(serverPublicKey:)();
  if (v2)
  {
    outlined release of SymmetricPirClientConfig(a1);
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(a2, v8, v5);
    uint64_t v10 = a2 + *(int *)(type metadata accessor for SymmetricPIRClient() + 20);
    long long v11 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)uint64_t v10 = *(_OWORD *)a1;
    *(_OWORD *)(v10 + 16) = v11;
    __n128 result = *(__n128 *)(a1 + 32);
    *(__n128 *)(v10 + 32) = result;
  }
  return result;
}

uint64_t SymmetricPIRClient.decryptResponses(symmetricPirKeywords:encryptedResponses:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SymmetricPIRClient();
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a1 + 16);
  if (v5 == v6)
  {
    *(double *)&long long v7 = MEMORY[0x270FA5388](v4);
    v10[1] = v7;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v5 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySay8CipherML19SymmetricPirKeywordVGSay10Foundation4DataVSgGG_AOsAE_pTg503_s8f4ML19hij14V10Foundation4l7VSgAGs5C33_pIgggozo_AC_AGtAGsAH_pIegnrzr_TRAj2OsAE_pIgggozo_Tf1cn_n(a1, a2, partial apply for closure #1 in SymmetricPIRClient.decryptResponses(symmetricPirKeywords:encryptedResponses:), (uint64_t)v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    type metadata accessor for CipherMLError();
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError();
    swift_allocError();
    *uint64_t v8 = v5;
    v8[1] = v6;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
  }
  return v5;
}

uint64_t SymmetricPIRClient.blind(keywords:)(uint64_t a1)
{
  return _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation4DataVG_16CryptoKitPrivate3PIRO14BlindedKeywordVsAE_pTg5((void (*)(void *, uint64_t *))_s8CipherML18SymmetricPIRClientV5blind8keywordsSay16CryptoKitPrivate3PIRO14BlindedKeywordVGSay10Foundation4DataVG_tKFAjNKXEfU_TA_0, (uint64_t)&v2, a1);
}

uint64_t SymmetricPIRClient.validateThenHash(blindedKeywords:oprfResponses:)(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v6 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySay16CryptoKitPrivate3PIRO14BlindedKeywordVGSay8CipherML21AspireApiOPRFResponseVGG_10Foundation4DataVsAE_pTg504_s16fg14Private3PIRO14jk2V8l4ML21nop14V10Foundation4r3Vs5C33_pIgnnozo_AE_AHtAKsAL_pIegnrzr_TRAlpUsAE_pIgnnozo_Tf1cn_n(a1, a2, (uint64_t (*)(uint64_t, uint64_t))_s8CipherML18SymmetricPIRClientV16validateThenHash15blindedKeywords13oprfResponsesSayAA0C10PirKeywordVGSay16CryptoKitPrivate3PIRO07BlindedM0VG_SayAA21AspireApiOPRFResponseVGtKF10Foundation4DataVAN_AQtKXEfU_TA_0, (uint64_t)v10);
  swift_bridgeObjectRelease();
  uint64_t v7 = swift_bridgeObjectRelease();
  if (!v3)
  {
    MEMORY[0x270FA5388](v7);
    v9[2] = v2;
    uint64_t v2 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation4DataVG_8CipherML19SymmetricPirKeywordVs5NeverOTg5((void (*)(long long *__return_ptr, void *))partial apply for closure #2 in SymmetricPIRClient.validateThenHash(blindedKeywords:oprfResponses:), (uint64_t)v9, v6);
    swift_bridgeObjectRelease();
  }
  return v2;
}

uint64_t SymmetricPirKeyword.oprfKeyword.getter(uint64_t a1, unint64_t a2)
{
  return a1;
}

uint64_t SymmetricPirKeyword.aesKey.getter(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return a3;
}

uint64_t ConfigType.oprfKeywordSize.getter()
{
  return 16;
}

uint64_t ConfigType.aesKeySize.getter()
{
  return 24;
}

uint64_t ConfigType.tagSize.getter()
{
  return 16;
}

uint64_t ConfigType.nonceSize.getter()
{
  return 12;
}

uint64_t outlined release of SymmetricPirClientConfig(uint64_t a1)
{
  return a1;
}

uint64_t type metadata accessor for SymmetricPIRClient()
{
  uint64_t result = type metadata singleton initialization cache for SymmetricPIRClient;
  if (!type metadata singleton initialization cache for SymmetricPIRClient) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError()
{
  unint64_t result = lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError;
  if (!lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError)
  {
    type metadata accessor for CipherMLError();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError);
  }
  return result;
}

uint64_t static ConfigType.== infix(_:_:)()
{
  return 1;
}

void ConfigType.hash(into:)()
{
}

Swift::Int ConfigType.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t SymmetricPirClientConfig.serverPublicKey.getter()
{
  uint64_t v1 = *(void *)v0;
  outlined copy of Data._Representation(*(void *)v0, *(void *)(v0 + 8));
  return v1;
}

uint64_t SymmetricPirClientConfig.tagSize.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t SymmetricPirClientConfig.nonceSize.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t SymmetricPirClientConfig.oprfKeywordSize.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t SymmetricPirClientConfig.aesKeySize.getter()
{
  return *(void *)(v0 + 40);
}

uint64_t SymmetricPIRClient.client.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for PIR.SymmetricPIRClient();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);
  return v4(a1, v1, v3);
}

uint64_t SymmetricPIRClient.symmetricPIRConfig.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for SymmetricPIRClient() + 20);
  return outlined init with copy of SymmetricPirClientConfig(v3, a1);
}

uint64_t closure #1 in SymmetricPIRClient.blind(keywords:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t result = PIR.SymmetricPIRClient.blindKeyword(keyword:blind:)();
  if (v3) {
    *a3 = v3;
  }
  return result;
}

uint64_t closure #1 in SymmetricPIRClient.validateThenHash(blindedKeywords:oprfResponses:)()
{
  return PIR.SymmetricPIRClient.validateThenHash(blindedKeyword:evaluatedElement:proof:)();
}

__n128 closure #2 in SymmetricPIRClient.validateThenHash(blindedKeywords:oprfResponses:)@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, __n128 *a3@<X8>)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  uint64_t v6 = a2 + *(int *)(type metadata accessor for SymmetricPIRClient() + 20);
  uint64_t v7 = *(void *)(v6 + 32);
  outlined copy of Data._Representation(v4, v5);
  specialized Collection.prefix(_:)(v7, v4, v5, v13);
  uint64_t v8 = v13[0];
  uint64_t v9 = v13[1];
  uint64_t v10 = *(void *)(v6 + 40);
  outlined copy of Data._Representation(v4, v5);
  specialized BidirectionalCollection.suffix(_:)(v10, v4, v5, (uint64_t *)&v12);
  __n128 result = v12;
  a3->n128_u64[0] = v8;
  a3->n128_u64[1] = v9;
  a3[1] = result;
  return result;
}

uint64_t specialized Collection.prefix(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v5 = a3 >> 62;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v10 = (int)a2;
      uint64_t v9 = a2 >> 32;
      break;
    case 2uLL:
      uint64_t v10 = *(void *)(a2 + 16);
      uint64_t v9 = *(void *)(a2 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v10 = 0;
      uint64_t v9 = BYTE6(a3);
      break;
  }
  uint64_t v11 = specialized RandomAccessCollection<>.distance(from:to:)(v10, v9, a2, a3);
  if (a1 && (v11 & 0x8000000000000000) == 0 && v11 < a1)
  {
    switch((int)v5)
    {
      case 1:
        uint64_t v12 = a2 >> 32;
        goto LABEL_12;
      case 2:
        uint64_t v12 = *(void *)(a2 + 24);
        goto LABEL_14;
      default:
        goto LABEL_16;
    }
  }
  uint64_t v12 = specialized RandomAccessCollection<>.index(_:offsetBy:)(v10, a1, a2, a3);
  uint64_t v13 = 0;
  switch((int)v5)
  {
    case 1:
LABEL_12:
      uint64_t v13 = (int)a2;
      break;
    case 2:
LABEL_14:
      uint64_t v13 = *(void *)(a2 + 16);
      break;
    default:
      break;
  }
  if (v12 < v13)
  {
LABEL_18:
    __break(1u);
    JUMPOUT(0x249D041B4);
  }
LABEL_16:
  uint64_t v14 = Data._Representation.subscript.getter();
  uint64_t v16 = v15;
  uint64_t result = outlined consume of Data._Representation(a2, a3);
  *a4 = v14;
  a4[1] = v16;
  return result;
}

uint64_t closure #1 in SymmetricPIRClient.decryptResponses(symmetricPirKeywords:encryptedResponses:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v41 = a8;
  uint64_t v35 = a1;
  unint64_t v36 = a2;
  uint64_t v14 = type metadata accessor for AES.GCM.Nonce();
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v15 = type metadata accessor for AES.GCM.SealedBox();
  uint64_t v33 = *(void *)(v15 - 8);
  uint64_t v34 = v15;
  MEMORY[0x270FA5388](v15);
  unint64_t v17 = (char *)&v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for SymmetricKey();
  uint64_t v19 = MEMORY[0x270FA5388](v18);
  unint64_t v22 = (char *)&v31 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a6 >> 60 != 15)
  {
    uint64_t v31 = v19;
    uint64_t v32 = v20;
    *(void *)&long long v40 = a3;
    *((void *)&v40 + 1) = a4;
    outlined copy of Data?(a5, a6);
    outlined copy of Data._Representation(a3, a4);
    SymmetricKey.init<A>(data:)();
    switch(a6 >> 62)
    {
      case 1uLL:
        LODWORD(v23) = HIDWORD(a5) - a5;
        if (__OFSUB__(HIDWORD(a5), a5))
        {
          __break(1u);
LABEL_16:
          __break(1u);
          JUMPOUT(0x249D04624);
        }
        uint64_t v23 = (int)v23;
LABEL_7:
        if (v23 < a7)
        {
LABEL_12:
          type metadata accessor for CipherMLError();
          lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError();
          swift_allocError();
          swift_storeEnumTagMultiPayload();
          swift_willThrow();
          outlined consume of Data?(a5, a6);
          (*(void (**)(char *, uint64_t))(v32 + 8))(v22, v31);
        }
        else
        {
LABEL_8:
          uint64_t v28 = v35;
          unint64_t v27 = v36;
          outlined copy of Data._Representation(v35, v36);
          specialized Collection.prefix(_:)(v41, v28, v27, (uint64_t *)&v40);
          long long v39 = v40;
          lazy protocol witness table accessor for type Data and conformance Data();
          AES.GCM.Nonce.init<A>(data:)();
          if (v8)
          {
            (*(void (**)(char *, uint64_t))(v32 + 8))(v22, v31);
            outlined consume of Data?(a5, a6);
          }
          else
          {
            outlined copy of Data._Representation(a5, a6);
            specialized BidirectionalCollection.dropLast(_:)(a7, a5, a6, (uint64_t *)&v40);
            long long v39 = v40;
            outlined copy of Data._Representation(a5, a6);
            specialized BidirectionalCollection.suffix(_:)(a7, a5, a6, (uint64_t *)&v38);
            long long v37 = v38;
            AES.GCM.SealedBox.init<A, B>(nonce:ciphertext:tag:)();
            uint64_t v30 = static AES.GCM.open(_:using:)();
            outlined consume of Data?(a5, a6);
            (*(void (**)(char *, uint64_t))(v33 + 8))(v17, v34);
            (*(void (**)(char *, uint64_t))(v32 + 8))(v22, v31);
            a5 = v30;
          }
        }
        break;
      case 2uLL:
        uint64_t v25 = *(void *)(a5 + 16);
        uint64_t v24 = *(void *)(a5 + 24);
        BOOL v26 = __OFSUB__(v24, v25);
        uint64_t v23 = v24 - v25;
        if (!v26) {
          goto LABEL_7;
        }
        goto LABEL_16;
      case 3uLL:
        if (a7 > 0) {
          goto LABEL_12;
        }
        goto LABEL_8;
      default:
        uint64_t v23 = BYTE6(a6);
        goto LABEL_7;
    }
  }
  return a5;
}

uint64_t _s8CipherML18SymmetricPIRClientV5blind8keywordsSay16CryptoKitPrivate3PIRO14BlindedKeywordVGSay10Foundation4DataVG_tKFAjNKXEfU_TA_0(uint64_t a1, void *a2)
{
  uint64_t result = PIR.SymmetricPIRClient.blindKeyword(keyword:blind:)();
  if (v2) {
    *a2 = v2;
  }
  return result;
}

uint64_t _s8CipherML18SymmetricPIRClientV16validateThenHash15blindedKeywords13oprfResponsesSayAA0C10PirKeywordVGSay16CryptoKitPrivate3PIRO07BlindedM0VG_SayAA21AspireApiOPRFResponseVGtKF10Foundation4DataVAN_AQtKXEfU_TA_0()
{
  return PIR.SymmetricPIRClient.validateThenHash(blindedKeyword:evaluatedElement:proof:)();
}

uint64_t outlined init with copy of SymmetricPirClientConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  outlined copy of Data._Representation(*(void *)a1, v5);
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = v5;
  long long v6 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 32) = v6;
  return a2;
}

unint64_t lazy protocol witness table accessor for type ConfigType and conformance ConfigType()
{
  unint64_t result = lazy protocol witness table cache variable for type ConfigType and conformance ConfigType;
  if (!lazy protocol witness table cache variable for type ConfigType and conformance ConfigType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConfigType and conformance ConfigType);
  }
  return result;
}

uint64_t destroy for SymmetricPirKeyword(uint64_t *a1)
{
  outlined consume of Data._Representation(*a1, a1[1]);
  uint64_t v2 = a1[2];
  unint64_t v3 = a1[3];
  return outlined consume of Data._Representation(v2, v3);
}

uint64_t *initializeWithCopy for SymmetricPirKeyword(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  outlined copy of Data._Representation(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  uint64_t v7 = a2[2];
  unint64_t v6 = a2[3];
  outlined copy of Data._Representation(v7, v6);
  a1[2] = v7;
  a1[3] = v6;
  return a1;
}

uint64_t *assignWithCopy for SymmetricPirKeyword(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  outlined copy of Data._Representation(*a2, v5);
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  outlined consume of Data._Representation(v6, v7);
  uint64_t v9 = a2[2];
  unint64_t v8 = a2[3];
  outlined copy of Data._Representation(v9, v8);
  uint64_t v10 = a1[2];
  unint64_t v11 = a1[3];
  a1[2] = v9;
  a1[3] = v8;
  outlined consume of Data._Representation(v10, v11);
  return a1;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t *assignWithTake for SymmetricPirKeyword(uint64_t *a1, _OWORD *a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  *(_OWORD *)a1 = *a2;
  outlined consume of Data._Representation(v4, v5);
  uint64_t v6 = a1[2];
  unint64_t v7 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  outlined consume of Data._Representation(v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for SymmetricPirKeyword(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xD && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for SymmetricPirKeyword(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 13;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2)
    {
      *(void *)__n128 result = 0;
      *(void *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SymmetricPirKeyword()
{
  return &type metadata for SymmetricPirKeyword;
}

unsigned char *storeEnumTagSinglePayload for ConfigType(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *__n128 result = a2;
        return result;
      case 2:
        *(_WORD *)__n128 result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)__n128 result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *__n128 result = 0;
      break;
    case 2:
      *(_WORD *)__n128 result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x249D049F4);
    case 4:
      *(_DWORD *)__n128 result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for ConfigType()
{
  return &type metadata for ConfigType;
}

uint64_t destroy for SymmetricPirClientConfig(uint64_t a1)
{
  return outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
}

uint64_t initializeWithCopy for SymmetricPirClientConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  outlined copy of Data._Representation(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  long long v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  return a1;
}

uint64_t *assignWithCopy for SymmetricPirClientConfig(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  outlined copy of Data._Representation(*a2, v5);
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  outlined consume of Data._Representation(v6, v7);
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for SymmetricPirClientConfig(uint64_t a1, _OWORD *a2)
{
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *a2;
  outlined consume of Data._Representation(v4, v5);
  long long v6 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v6;
  return a1;
}

uint64_t getEnumTagSinglePayload for SymmetricPirClientConfig(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xD && *(unsigned char *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for SymmetricPirClientConfig(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 13;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 48) = 0;
    }
    if (a2)
    {
      *(void *)__n128 result = 0;
      *(void *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SymmetricPirClientConfig()
{
  return &type metadata for SymmetricPirClientConfig;
}

uint64_t *initializeBufferWithCopyOfBuffer for SymmetricPIRClient(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for PIR.SymmetricPIRClient();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = *(uint64_t *)((char *)a2 + v8);
    unint64_t v12 = *((void *)v10 + 1);
    outlined copy of Data._Representation(v11, v12);
    *(void *)uint64_t v9 = v11;
    *((void *)v9 + 1) = v12;
    long long v13 = *((_OWORD *)v10 + 2);
    *((_OWORD *)v9 + 1) = *((_OWORD *)v10 + 1);
    *((_OWORD *)v9 + 2) = v13;
  }
  return a1;
}

uint64_t destroy for SymmetricPIRClient(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PIR.SymmetricPIRClient();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  int v5 = (uint64_t *)(a1 + *(int *)(a2 + 20));
  uint64_t v6 = *v5;
  unint64_t v7 = v5[1];
  return outlined consume of Data._Representation(v6, v7);
}

uint64_t initializeWithCopy for SymmetricPIRClient(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for PIR.SymmetricPIRClient();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = *(void *)(a2 + v7);
  unint64_t v11 = *(void *)(a2 + v7 + 8);
  outlined copy of Data._Representation(v10, v11);
  *(void *)uint64_t v8 = v10;
  *(void *)(v8 + 8) = v11;
  long long v12 = *(_OWORD *)(v9 + 32);
  *(_OWORD *)(v8 + 16) = *(_OWORD *)(v9 + 16);
  *(_OWORD *)(v8 + 32) = v12;
  return a1;
}

uint64_t assignWithCopy for SymmetricPIRClient(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for PIR.SymmetricPIRClient();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (uint64_t *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = *(void *)(a2 + v7);
  unint64_t v11 = *(void *)(a2 + v7 + 8);
  outlined copy of Data._Representation(v10, v11);
  uint64_t v12 = *v8;
  unint64_t v13 = v8[1];
  *uint64_t v8 = v10;
  v8[1] = v11;
  outlined consume of Data._Representation(v12, v13);
  v8[2] = v9[2];
  v8[3] = v9[3];
  v8[4] = v9[4];
  v8[5] = v9[5];
  return a1;
}

uint64_t initializeWithTake for SymmetricPIRClient(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for PIR.SymmetricPIRClient();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (_OWORD *)(a1 + v7);
  uint64_t v9 = (_OWORD *)(a2 + v7);
  long long v10 = v9[1];
  *uint64_t v8 = *v9;
  v8[1] = v10;
  v8[2] = v9[2];
  return a1;
}

uint64_t assignWithTake for SymmetricPIRClient(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for PIR.SymmetricPIRClient();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (_OWORD *)(a2 + v7);
  uint64_t v10 = *(void *)(a1 + v7);
  unint64_t v11 = *(void *)(a1 + v7 + 8);
  *(_OWORD *)(a1 + v7) = *v9;
  outlined consume of Data._Representation(v10, v11);
  long long v12 = v9[2];
  *(_OWORD *)(v8 + 16) = v9[1];
  *(_OWORD *)(v8 + 32) = v12;
  return a1;
}

uint64_t getEnumTagSinglePayload for SymmetricPIRClient(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_249D05004);
}

uint64_t sub_249D05004(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for PIR.SymmetricPIRClient();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8) >> 60;
    if (((4 * v10) & 0xC) != 0) {
      return 16 - ((4 * v10) & 0xC | (v10 >> 2));
    }
    else {
      return 0;
    }
  }
}

uint64_t storeEnumTagSinglePayload for SymmetricPIRClient(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_249D050EC);
}

uint64_t sub_249D050EC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for PIR.SymmetricPIRClient();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    unint64_t v11 = (void *)(a1 + *(int *)(a4 + 20));
    void *v11 = 0;
    v11[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
  }
  return result;
}

uint64_t type metadata completion function for SymmetricPIRClient()
{
  uint64_t result = type metadata accessor for PIR.SymmetricPIRClient();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t specialized BidirectionalCollection.dropLast(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  if (a1 < 0)
  {
LABEL_14:
    __break(1u);
    JUMPOUT(0x249D053BCLL);
  }
  unint64_t v5 = a3 >> 62;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v9 = a2 >> 32;
      uint64_t v8 = (int)a2;
      break;
    case 2uLL:
      uint64_t v8 = *(void *)(a2 + 16);
      uint64_t v9 = *(void *)(a2 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v8 = 0;
      uint64_t v9 = BYTE6(a3);
      break;
  }
  uint64_t v10 = -a1;
  uint64_t v11 = specialized RandomAccessCollection<>.distance(from:to:)(v9, v8, a2, a3);
  if (v11 > 0 || v11 <= v10)
  {
    uint64_t v12 = specialized RandomAccessCollection<>.index(_:offsetBy:)(v9, v10, a2, a3);
    uint64_t v13 = 0;
    switch((int)v5)
    {
      case 1:
        uint64_t v13 = (int)a2;
        break;
      case 2:
        uint64_t v13 = *(void *)(a2 + 16);
        break;
      default:
        break;
    }
    if (v12 < v13)
    {
      __break(1u);
      goto LABEL_14;
    }
  }
  uint64_t v14 = Data._Representation.subscript.getter();
  uint64_t v16 = v15;
  uint64_t result = outlined consume of Data._Representation(a2, a3);
  *a4 = v14;
  a4[1] = v16;
  return result;
}

uint64_t outlined init with copy of AspireApiOPRFResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AspireApiOPRFResponse(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of (PIR.BlindedKeyword, AspireApiOPRFResponse)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PIR.BlindedKeyword, AspireApiOPRFResponse));
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with take of (PIR.BlindedKeyword, AspireApiOPRFResponse)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PIR.BlindedKeyword, AspireApiOPRFResponse));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t RotationTask.requestsManager.getter()
{
  return swift_weakLoadStrong();
}

uint64_t RotationTask.requestsManager.setter()
{
  return swift_release();
}

void (*RotationTask.requestsManager.modify(void *a1))(void **a1, char a2)
{
  unsigned int v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  swift_beginAccess();
  v3[3] = swift_weakLoadStrong();
  return RotationTask.requestsManager.modify;
}

void RotationTask.requestsManager.modify(void **a1, char a2)
{
  unsigned int v3 = *a1;
  swift_weakAssign();
  if (a2)
  {
    swift_release();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_release();
  }
  free(v3);
}

uint64_t RotationTask.__allocating_init(requestsManager:)()
{
  uint64_t v0 = swift_allocObject();
  swift_defaultActor_initialize();
  swift_weakInit();
  swift_beginAccess();
  swift_weakAssign();
  swift_release();
  return v0;
}

uint64_t RotationTask.init(requestsManager:)()
{
  swift_defaultActor_initialize();
  swift_weakInit();
  swift_beginAccess();
  swift_weakAssign();
  swift_release();
  return v0;
}

uint64_t RotationTask.run()()
{
  *(void *)(v1 + 40) = v0;
  return MEMORY[0x270FA2498](RotationTask.run(), v0, 0);
}

{
  void *v0;
  uint64_t Strong;
  void *v2;
  uint64_t (*v4)(void);
  uint64_t v5;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  v0[6] = Strong;
  if (Strong)
  {
    v0[7] = RequestsManager.keyRotation(for:)(0, 0);
    uint64_t v2 = (void *)swift_task_alloc();
    v0[8] = v2;
    *uint64_t v2 = v0;
    v2[1] = RotationTask.run();
    return KeyRotation.run()();
  }
  else
  {
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;
  uint64_t v7;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    unsigned int v3 = *(void *)(v2 + 40);
    uint64_t v4 = RotationTask.run();
  }
  else
  {
    unint64_t v5 = *(void *)(v2 + 40);
    swift_release();
    uint64_t v4 = RotationTask.run();
    unsigned int v3 = v5;
  }
  return MEMORY[0x270FA2498](v4, v3, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t RotationTask.deinit()
{
  swift_weakDestroy();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t RotationTask.__deallocating_deinit()
{
  swift_weakDestroy();
  swift_defaultActor_destroy();
  return MEMORY[0x270FA2418](v0);
}

uint64_t RotationTask.unownedExecutor.getter()
{
  return v0;
}

uint64_t protocol witness for Actor.unownedExecutor.getter in conformance RotationTask()
{
  return v0;
}

uint64_t protocol witness for ScheduledActivityHandler.run@Sendable () in conformance RotationTask()
{
  uint64_t v2 = *v0;
  *(void *)(v1 + 40) = *v0;
  return MEMORY[0x270FA2498](protocol witness for ScheduledActivityHandler.run@Sendable () in conformance RotationTask, v2, 0);
}

{
  void *v0;
  uint64_t Strong;
  void *v2;
  uint64_t (*v4)(void);
  uint64_t v5;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  v0[6] = Strong;
  if (Strong)
  {
    v0[7] = RequestsManager.keyRotation(for:)(0, 0);
    uint64_t v2 = (void *)swift_task_alloc();
    v0[8] = v2;
    *uint64_t v2 = v0;
    v2[1] = RotationTask.run();
    return KeyRotation.run()();
  }
  else
  {
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
}

uint64_t sub_249D05CA8@<X0>(uint64_t *a1@<X8>)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  *a1 = result;
  return result;
}

uint64_t sub_249D05CF8()
{
  return swift_weakAssign();
}

uint64_t type metadata accessor for RotationTask()
{
  return self;
}

uint64_t method lookup function for RotationTask(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for RotationTask);
}

uint64_t dispatch thunk of RotationTask.requestsManager.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of RotationTask.requestsManager.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of RotationTask.requestsManager.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of RotationTask.__allocating_init(requestsManager:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of RotationTask.run()()
{
  uint64_t v4 = (uint64_t (*)(void))(*(void *)(*(void *)v0 + 128) + **(int **)(*(void *)v0 + 128));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = protocol witness for NetworkManager.uploadKeys(evaluationKeys:userId:) in conformance AspireNetworkManager;
  return v4();
}

uint64_t specialized Data.init<A>(_:)(unint64_t a1, unint64_t a2)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  *(void *)&long long v40 = a1;
  *((void *)&v40 + 1) = a2;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContiguousBytes);
  if (swift_dynamicCast())
  {
    outlined init with take of _HasContiguousBytes(v38, (uint64_t)&v41);
    __swift_project_boxed_opaque_existential_1(&v41, v43);
    dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
    swift_bridgeObjectRelease();
    v38[0] = v40;
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v41);
    return *(void *)&v38[0];
  }
  uint64_t v39 = 0;
  memset(v38, 0, sizeof(v38));
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v38, &demangling cache variable for type metadata for ContiguousBytes?);
  unint64_t v2 = a1;
  unint64_t v3 = a2;
  if ((a2 & 0x1000000000000000) == 0)
  {
    if ((a2 & 0x2000000000000000) != 0)
    {
      uint64_t v41 = a1;
      uint64_t v42 = a2 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v6 = (char *)&v41 + (HIBYTE(a2) & 0xF);
      uint64_t v7 = &v41;
    }
    else
    {
      if ((a1 & 0x1000000000000000) != 0)
      {
        uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v4 = _StringObject.sharedUTF8.getter();
      }
      if (v4) {
        uint64_t v6 = (unsigned char *)(v4 + v5);
      }
      else {
        uint64_t v6 = 0;
      }
      uint64_t v7 = (uint64_t *)v4;
    }
    uint64_t v8 = specialized Data._Representation.init(_:)(v7, v6);
    unint64_t v10 = v9;
    if (v9 >> 60 != 15)
    {
      swift_bridgeObjectRelease();
      *(void *)&v38[0] = v8;
      *((void *)&v38[0] + 1) = v10;
      return *(void *)&v38[0];
    }
    unint64_t v2 = a1;
    unint64_t v3 = a2;
    if ((a2 & 0x1000000000000000) == 0) {
      goto LABEL_14;
    }
LABEL_70:
    Swift::Int v11 = String.UTF8View._foreignCount()();
    goto LABEL_17;
  }
LABEL_69:
  uint64_t v8 = 0;
  unint64_t v10 = 0xF000000000000000;
  if ((v3 & 0x1000000000000000) != 0) {
    goto LABEL_70;
  }
LABEL_14:
  if ((v3 & 0x2000000000000000) != 0) {
    Swift::Int v11 = HIBYTE(v3) & 0xF;
  }
  else {
    Swift::Int v11 = v2 & 0xFFFFFFFFFFFFLL;
  }
LABEL_17:
  *(void *)&v38[0] = specialized Data._Representation.init(count:)(v11);
  *((void *)&v38[0] + 1) = v12;
  MEMORY[0x270FA5388](*(void *)&v38[0]);
  unint64_t v13 = (unint64_t)specialized Data._Representation.withUnsafeMutableBytes<A>(_:)((void *(*)(uint64_t *__return_ptr, char *, char *))partial apply for specialized closure #3 in Data.init<A>(_:));
  uint64_t v16 = *((void *)&v38[0] + 1) >> 62;
  uint64_t v17 = v13;
  uint64_t v18 = v3;
  unint64_t v19 = v14;
  switch(*((void *)&v38[0] + 1) >> 62)
  {
    case 1:
      LODWORD(v20) = DWORD1(v38[0]) - LODWORD(v38[0]);
      if (__OFSUB__(DWORD1(v38[0]), v38[0])) {
        goto LABEL_73;
      }
      uint64_t v20 = (int)v20;
LABEL_23:
      if (v15 != v20)
      {
        if (v16)
        {
          if (v16 == 1) {
            uint64_t v24 = *(uint64_t *)&v38[0] >> 32;
          }
          else {
            uint64_t v24 = *(void *)(*(void *)&v38[0] + 24);
          }
        }
        else
        {
          uint64_t v24 = BYTE14(v38[0]);
        }
LABEL_61:
        if (v24 < v15)
        {
          __break(1u);
LABEL_73:
          __break(1u);
LABEL_74:
          __break(1u);
        }
        Data._Representation.replaceSubrange(_:with:count:)();
LABEL_63:
        swift_bridgeObjectRelease();
        goto LABEL_64;
      }
LABEL_29:
      if ((v3 & 0x2000000000000000) != 0) {
        unint64_t v25 = HIBYTE(v3) & 0xF;
      }
      else {
        unint64_t v25 = v13 & 0xFFFFFFFFFFFFLL;
      }
      *(void *)((char *)&v40 + 7) = 0;
      *(void *)&long long v40 = 0;
      if (4 * v25 == v14 >> 14) {
        goto LABEL_58;
      }
      LOBYTE(v26) = 0;
      uint64_t v27 = (v13 >> 59) & 1;
      if ((v3 & 0x1000000000000000) == 0) {
        LOBYTE(v27) = 1;
      }
      uint64_t v28 = 4 << v27;
      uint64_t v35 = v3 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v33 = (uint64_t)v8;
      uint64_t v34 = (v3 & 0xFFFFFFFFFFFFFFFLL) + 32;
      break;
    case 2:
      uint64_t v22 = *(void *)(*(void *)&v38[0] + 16);
      uint64_t v21 = *(void *)(*(void *)&v38[0] + 24);
      BOOL v23 = __OFSUB__(v21, v22);
      uint64_t v20 = v21 - v22;
      if (!v23) {
        goto LABEL_23;
      }
      goto LABEL_74;
    case 3:
      if (!v15) {
        goto LABEL_29;
      }
      uint64_t v24 = 0;
      goto LABEL_61;
    default:
      uint64_t v20 = BYTE14(v38[0]);
      goto LABEL_23;
  }
  do
  {
    unint64_t v29 = v19 & 0xC;
    unint64_t v2 = v19;
    if (v29 == v28) {
      unint64_t v2 = _StringGuts._slowEnsureMatchingEncoding(_:)(v19, v17, v18);
    }
    unint64_t v30 = v2 >> 16;
    if (v2 >> 16 >= v25)
    {
      __break(1u);
LABEL_67:
      __break(1u);
LABEL_68:
      __break(1u);
      goto LABEL_69;
    }
    if ((v18 & 0x1000000000000000) != 0)
    {
      unint64_t v2 = String.UTF8View._foreignSubscript(position:)();
      char v31 = v2;
      if (v29 != v28) {
        goto LABEL_47;
      }
    }
    else if ((v18 & 0x2000000000000000) != 0)
    {
      uint64_t v41 = v17;
      uint64_t v42 = v35;
      char v31 = *((unsigned char *)&v41 + v30);
      if (v29 != v28) {
        goto LABEL_47;
      }
    }
    else
    {
      unint64_t v2 = v34;
      if ((v17 & 0x1000000000000000) == 0) {
        unint64_t v2 = _StringObject.sharedUTF8.getter();
      }
      char v31 = *(unsigned char *)(v2 + v30);
      if (v29 != v28)
      {
LABEL_47:
        if ((v18 & 0x1000000000000000) == 0) {
          goto LABEL_48;
        }
        goto LABEL_51;
      }
    }
    unint64_t v2 = _StringGuts._slowEnsureMatchingEncoding(_:)(v19, v17, v18);
    unint64_t v19 = v2;
    if ((v18 & 0x1000000000000000) == 0)
    {
LABEL_48:
      unint64_t v19 = (v19 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_53;
    }
LABEL_51:
    if (v25 <= v19 >> 16) {
      goto LABEL_68;
    }
    unint64_t v2 = String.UTF8View._foreignIndex(after:)();
    unint64_t v19 = v2;
LABEL_53:
    *((unsigned char *)&v40 + v26) = v31;
    unsigned int v26 = v26 + 1;
    if ((v26 >> 8)) {
      goto LABEL_67;
    }
    BYTE14(v40) = v26;
    if (v26 == 14)
    {
      uint64_t v41 = v40;
      LODWORD(v42) = DWORD2(v40);
      WORD2(v42) = WORD6(v40);
      Data._Representation.append(contentsOf:)();
      LOBYTE(v26) = 0;
      BYTE14(v40) = 0;
    }
  }
  while (4 * v25 != v19 >> 14);
  uint64_t v8 = (unsigned char *)v33;
  if ((_BYTE)v26)
  {
    uint64_t v41 = v40;
    LODWORD(v42) = DWORD2(v40);
    WORD2(v42) = WORD6(v40);
    Data._Representation.append(contentsOf:)();
    outlined consume of Data?(v33, v10);
    goto LABEL_63;
  }
LABEL_58:
  swift_bridgeObjectRelease();
  outlined consume of Data?((uint64_t)v8, v10);
LABEL_64:
  swift_bridgeObjectRelease();
  return *(void *)&v38[0];
}

uint64_t (*default argument 3 of SqliteCache.init(useCase:cacheElementCount:cacheEntryMinutesToLive:getCurrentDate:)())()
{
  return closure #1 in default argument 4 of RequestsManager.init(configCache:keyStorage:activeUseCaseTracker:allowList:currentTime:);
}

uint64_t SqliteCache.__allocating_init(useCase:cacheElementCount:cacheEntryMinutesToLive:getCurrentDate:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v12 = swift_allocObject();
  SqliteCache.init(useCase:cacheElementCount:cacheEntryMinutesToLive:getCurrentDate:)(a1, a2, a3, a4, a5, a6);
  return v12;
}

uint64_t one-time initialization function for keyword()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Expression<Data>);
  __swift_allocate_value_buffer(v0, static SqliteCache.Column.keyword);
  __swift_project_value_buffer(v0, (uint64_t)static SqliteCache.Column.keyword);
  lazy protocol witness table accessor for type Expression<Double> and conformance Expression<A>(&lazy protocol witness table cache variable for type Expression<Data> and conformance Expression<A>, &demangling cache variable for type metadata for Expression<Data>);
  return ExpressionType.init(_:)();
}

uint64_t SqliteCache.Column.keyword.unsafeMutableAddressor()
{
  return SqliteCache.Column.keyword.unsafeMutableAddressor(&one-time initialization token for keyword, &demangling cache variable for type metadata for Expression<Data>, (uint64_t)static SqliteCache.Column.keyword);
}

uint64_t static SqliteCache.Column.keyword.getter@<X0>(uint64_t a1@<X8>)
{
  return static SqliteCache.Column.keyword.getter(&one-time initialization token for keyword, &demangling cache variable for type metadata for Expression<Data>, (uint64_t)static SqliteCache.Column.keyword, a1);
}

uint64_t one-time initialization function for value()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Expression<Data?>);
  __swift_allocate_value_buffer(v0, static SqliteCache.Column.value);
  __swift_project_value_buffer(v0, (uint64_t)static SqliteCache.Column.value);
  lazy protocol witness table accessor for type Expression<Double> and conformance Expression<A>(&lazy protocol witness table cache variable for type Expression<Data?> and conformance Expression<A>, &demangling cache variable for type metadata for Expression<Data?>);
  return ExpressionType.init(_:)();
}

uint64_t SqliteCache.Column.value.unsafeMutableAddressor()
{
  return SqliteCache.Column.keyword.unsafeMutableAddressor(&one-time initialization token for value, &demangling cache variable for type metadata for Expression<Data?>, (uint64_t)static SqliteCache.Column.value);
}

uint64_t static SqliteCache.Column.value.getter@<X0>(uint64_t a1@<X8>)
{
  return static SqliteCache.Column.keyword.getter(&one-time initialization token for value, &demangling cache variable for type metadata for Expression<Data?>, (uint64_t)static SqliteCache.Column.value, a1);
}

uint64_t one-time initialization function for accessTime()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Expression<Double>);
  __swift_allocate_value_buffer(v0, static SqliteCache.Column.accessTime);
  __swift_project_value_buffer(v0, (uint64_t)static SqliteCache.Column.accessTime);
  lazy protocol witness table accessor for type Expression<Double> and conformance Expression<A>(&lazy protocol witness table cache variable for type Expression<Double> and conformance Expression<A>, &demangling cache variable for type metadata for Expression<Double>);
  return ExpressionType.init(_:)();
}

uint64_t SqliteCache.Column.accessTime.unsafeMutableAddressor()
{
  return SqliteCache.Column.keyword.unsafeMutableAddressor(&one-time initialization token for accessTime, &demangling cache variable for type metadata for Expression<Double>, (uint64_t)static SqliteCache.Column.accessTime);
}

uint64_t static SqliteCache.Column.accessTime.getter@<X0>(uint64_t a1@<X8>)
{
  return static SqliteCache.Column.keyword.getter(&one-time initialization token for accessTime, &demangling cache variable for type metadata for Expression<Double>, (uint64_t)static SqliteCache.Column.accessTime, a1);
}

uint64_t one-time initialization function for expirationTime()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Expression<Double>);
  __swift_allocate_value_buffer(v0, static SqliteCache.Column.expirationTime);
  __swift_project_value_buffer(v0, (uint64_t)static SqliteCache.Column.expirationTime);
  lazy protocol witness table accessor for type Expression<Double> and conformance Expression<A>(&lazy protocol witness table cache variable for type Expression<Double> and conformance Expression<A>, &demangling cache variable for type metadata for Expression<Double>);
  return ExpressionType.init(_:)();
}

uint64_t SqliteCache.Column.expirationTime.unsafeMutableAddressor()
{
  return SqliteCache.Column.keyword.unsafeMutableAddressor(&one-time initialization token for expirationTime, &demangling cache variable for type metadata for Expression<Double>, (uint64_t)static SqliteCache.Column.expirationTime);
}

uint64_t SqliteCache.Column.keyword.unsafeMutableAddressor(void *a1, uint64_t *a2, uint64_t a3)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a2);
  return __swift_project_value_buffer(v5, a3);
}

uint64_t static SqliteCache.Column.expirationTime.getter@<X0>(uint64_t a1@<X8>)
{
  return static SqliteCache.Column.keyword.getter(&one-time initialization token for expirationTime, &demangling cache variable for type metadata for Expression<Double>, (uint64_t)static SqliteCache.Column.expirationTime, a1);
}

uint64_t static SqliteCache.Column.keyword.getter@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v8 = __swift_project_value_buffer(v7, a3);
  unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16);
  return v9(a4, v8, v7);
}

void *SqliteCache.tableName.unsafeMutableAddressor()
{
  return &static SqliteCache.tableName;
}

uint64_t static SqliteCache.tableName.getter()
{
  return 0x6552646568636143;
}

void *SqliteCache.latestSchemaVersion.unsafeMutableAddressor()
{
  return &static SqliteCache.latestSchemaVersion;
}

uint64_t static SqliteCache.latestSchemaVersion.getter()
{
  return 1;
}

uint64_t SqliteCache.cachedResponses.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC8CipherML11SqliteCache_cachedResponses;
  uint64_t v4 = type metadata accessor for Table();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t SqliteCache.maximumCount.getter()
{
  return *(void *)(v0 + OBJC_IVAR____TtC8CipherML11SqliteCache_maximumCount);
}

uint64_t SqliteCache.minutesToLive.getter()
{
  return *(void *)(v0 + OBJC_IVAR____TtC8CipherML11SqliteCache_minutesToLive);
}

uint64_t SqliteCache.db.getter()
{
  return swift_retain();
}

uint64_t SqliteCache.updateLastAccessAndGetValueForKeyword.getter()
{
  return swift_retain();
}

uint64_t SqliteCache.currentTime.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC8CipherML11SqliteCache_currentTime);
  swift_retain();
  return v1;
}

double SqliteCache.expirationTime.getter()
{
  return (*(double (**)(void))(v0 + OBJC_IVAR____TtC8CipherML11SqliteCache_currentTime))()
       + (double)*(uint64_t *)(v0 + OBJC_IVAR____TtC8CipherML11SqliteCache_minutesToLive) * 60.0;
}

double static SqliteCache.computeExpirationTime(currentTime:cacheEntryMinutesToLive:)(uint64_t a1, double a2)
{
  return (double)a1 * 60.0 + a2;
}

uint64_t SqliteCache.init(useCase:cacheElementCount:cacheEntryMinutesToLive:getCurrentDate:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v75 = a6;
  uint64_t v72 = a3;
  unint64_t v73 = a5;
  uint64_t v71 = a4;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Expression<Bool>?);
  MEMORY[0x270FA5388](v9 - 8);
  Swift::Int v11 = (char *)&v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v70 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  unint64_t v14 = (char *)&v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for Table();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v62 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v19 = static SqliteCache.createTable(useCase:schemaVersion:)((uint64_t)v18, a1, a2, 1uLL);
  if (v6)
  {
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    uint64_t v20 = v19;
    uint64_t v64 = v14;
    uint64_t v65 = v12;
    uint64_t v66 = v11;
    uint64_t v67 = v15;
    uint64_t v68 = v16;
    unint64_t v69 = v18;
    uint64_t v21 = v73;
    swift_bridgeObjectRelease();
    uint64_t v22 = (void *)Connection.columnNames(tableName:)(0x6552646568636143, 0xEF7365736E6F7073);
    uint64_t v63 = v20;
    LOBYTE(v20) = specialized Sequence<>.contains(_:)(0x6974617269707865, 0xEE00656D69546E6FLL, v22);
    uint64_t v23 = swift_bridgeObjectRelease();
    if (v20)
    {
      uint64_t v24 = v72;
    }
    else
    {
      unint64_t v25 = v64;
      v21(v23);
      Date.timeIntervalSinceReferenceDate.getter();
      double v27 = v26;
      (*(void (**)(char *, uint64_t))(v70 + 8))(v25, v65);
      uint64_t v24 = v72;
      double v28 = (double)v71 * 60.0 + v27;
      if (one-time initialization token for expirationTime != -1) {
        swift_once();
      }
      uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Expression<Double>);
      __swift_project_value_buffer(v29, (uint64_t)static SqliteCache.Column.expirationTime);
      uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Expression<Bool>);
      uint64_t v31 = (uint64_t)v66;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v66, 1, 1, v30);
      double v76 = v28;
      uint64_t v32 = v69;
      uint64_t v33 = Table.addColumn<A>(_:check:defaultValue:)();
      uint64_t v35 = v34;
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v31, &demangling cache variable for type metadata for Expression<Bool>?);
      v36._countAndFlagsBits = v33;
      v36._object = v35;
      Connection.execute(_:)(v36);
      if (v37)
      {
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v68 + 8))(v32, v67);
        goto LABEL_20;
      }
      swift_bridgeObjectRelease();
    }
    double v76 = 0.0;
    unint64_t v77 = 0xE000000000000000;
    _StringGuts.grow(_:)(87);
    v38._countAndFlagsBits = 0x20455441445055;
    v38._object = (void *)0xE700000000000000;
    String.append(_:)(v38);
    v39._countAndFlagsBits = 0x6552646568636143;
    v39._object = (void *)0xEF7365736E6F7073;
    String.append(_:)(v39);
    v40._countAndFlagsBits = 0x205445530ALL;
    v40._object = (void *)0xE500000000000000;
    String.append(_:)(v40);
    if (one-time initialization token for accessTime != -1) {
      swift_once();
    }
    uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Expression<Double>);
    __swift_project_value_buffer(v41, (uint64_t)static SqliteCache.Column.accessTime);
    lazy protocol witness table accessor for type Expression<Double> and conformance Expression<A>(&lazy protocol witness table cache variable for type Expression<Double> and conformance Expression<A>, &demangling cache variable for type metadata for Expression<Double>);
    Swift::String v42 = Expressible.asSQL()();
    String.append(_:)(v42);
    swift_bridgeObjectRelease();
    v43._object = (void *)0x8000000249E94EA0;
    v43._countAndFlagsBits = 0xD000000000000016;
    String.append(_:)(v43);
    if (one-time initialization token for keyword != -1) {
      swift_once();
    }
    uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Expression<Data>);
    __swift_project_value_buffer(v44, (uint64_t)static SqliteCache.Column.keyword);
    lazy protocol witness table accessor for type Expression<Double> and conformance Expression<A>(&lazy protocol witness table cache variable for type Expression<Data> and conformance Expression<A>, &demangling cache variable for type metadata for Expression<Data>);
    Swift::String v45 = Expressible.asSQL()();
    String.append(_:)(v45);
    swift_bridgeObjectRelease();
    v46._countAndFlagsBits = 0xD00000000000001FLL;
    v46._object = (void *)0x8000000249E94EC0;
    String.append(_:)(v46);
    if (one-time initialization token for expirationTime != -1) {
      swift_once();
    }
    __swift_project_value_buffer(v41, (uint64_t)static SqliteCache.Column.expirationTime);
    Swift::String v47 = Expressible.asSQL()();
    String.append(_:)(v47);
    swift_bridgeObjectRelease();
    v48._countAndFlagsBits = 0x494E525554455220;
    v48._object = (void *)0xEB0000000020474ELL;
    String.append(_:)(v48);
    uint64_t v49 = v75;
    uint64_t v51 = v67;
    uint64_t v50 = v68;
    if (one-time initialization token for value != -1) {
      swift_once();
    }
    uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Expression<Data?>);
    __swift_project_value_buffer(v52, (uint64_t)static SqliteCache.Column.value);
    lazy protocol witness table accessor for type Expression<Double> and conformance Expression<A>(&lazy protocol witness table cache variable for type Expression<Data?> and conformance Expression<A>, &demangling cache variable for type metadata for Expression<Data?>);
    Swift::String v53 = Expressible.asSQL()();
    String.append(_:)(v53);
    swift_bridgeObjectRelease();
    v54._countAndFlagsBits = 59;
    v54._object = (void *)0xE100000000000000;
    String.append(_:)(v54);
    unint64_t v55 = v63;
    uint64_t v56 = Connection.prepare(_:_:)();
    swift_bridgeObjectRelease();
    Connection.setUserVersion(_:)(1);
    if (!v57)
    {
      uint64_t v58 = v74;
      (*(void (**)(uint64_t, char *, uint64_t))(v50 + 32))(v74 + OBJC_IVAR____TtC8CipherML11SqliteCache_cachedResponses, v69, v51);
      *(void *)(v58 + OBJC_IVAR____TtC8CipherML11SqliteCache_maximumCount) = v24;
      *(void *)(v58 + OBJC_IVAR____TtC8CipherML11SqliteCache_minutesToLive) = v71;
      *(void *)(v58 + OBJC_IVAR____TtC8CipherML11SqliteCache_db) = v55;
      *(void *)(v58 + OBJC_IVAR____TtC8CipherML11SqliteCache_updateLastAccessAndGetValueForKeyword) = v56;
      uint64_t v60 = swift_allocObject();
      *(void *)(v60 + 16) = v73;
      *(void *)(v60 + 24) = v49;
      uint64_t v61 = (double (**)())(v58 + OBJC_IVAR____TtC8CipherML11SqliteCache_currentTime);
      *uint64_t v61 = partial apply for closure #1 in SqliteCache.init(useCase:cacheElementCount:cacheEntryMinutesToLive:getCurrentDate:);
      v61[1] = (double (*)())v60;
      return v58;
    }
    swift_release();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v50 + 8))(v69, v51);
  }
LABEL_20:
  uint64_t v58 = v74;
  type metadata accessor for SqliteCache();
  swift_deallocPartialClassInstance();
  return v58;
}

void *static SqliteCache.createTable(useCase:schemaVersion:)(uint64_t a1, uint64_t a2, void *a3, unint64_t a4)
{
  uint64_t v40 = a1;
  uint64_t v7 = (void *)type metadata accessor for URL.DirectoryHint();
  uint64_t v8 = *(v7 - 1);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  unint64_t v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = a4;
  if (a4 <= 1)
  {
    if (one-time initialization token for url != -1) {
      swift_once();
    }
    __swift_project_value_buffer(v11, (uint64_t)static CacheDirectory.url);
    v43._countAndFlagsBits = a2;
    v43._object = a3;
    (*(void (**)(char *, void, void *))(v8 + 104))(v10, *MEMORY[0x263F06E50], v7);
    lazy protocol witness table accessor for type String and conformance String();
    URL.appending<A>(component:directoryHint:)();
    (*(void (**)(char *, void *))(v8 + 8))(v10, v7);
    uint64_t v19 = URL.absoluteString.getter();
    uint64_t v7 = v20;
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    v43._countAndFlagsBits = v19;
    v43._object = v7;
    swift_bridgeObjectRetain();
    v21._countAndFlagsBits = 0x6574696C71732ELL;
    v21._object = (void *)0xE700000000000000;
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    type metadata accessor for Connection();
    uint64_t v22 = v44;
    uint64_t v23 = Connection.__allocating_init(_:readonly:)();
    if (!v22)
    {
      uint64_t v7 = (void *)v23;
      uint64_t v24 = v40;
      uint64_t v25 = MEMORY[0x24C5B2690](0x6552646568636143, 0xEF7365736E6F7073, 0, 0);
      MEMORY[0x270FA5388](v25);
      *(&v40 - 2) = v41;
      v42._countAndFlagsBits = Table.create(temporary:ifNotExists:withoutRowid:block:)();
      v42._object = v26;
      swift_bridgeObjectRetain();
      v27._countAndFlagsBits = 2619;
      v27._object = (void *)0xE200000000000000;
      String.append(_:)(v27);
      swift_bridgeObjectRelease();
      Swift::String v43 = v42;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Expressible>);
      uint64_t v28 = swift_allocObject();
      *(_OWORD *)(v28 + 16) = xmmword_249E85E40;
      if (one-time initialization token for accessTime != -1) {
        swift_once();
      }
      uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Expression<Double>);
      uint64_t v30 = __swift_project_value_buffer(v29, (uint64_t)static SqliteCache.Column.accessTime);
      *(void *)(v28 + 56) = v29;
      *(void *)(v28 + 64) = lazy protocol witness table accessor for type Expression<Double> and conformance Expression<A>(&lazy protocol witness table cache variable for type Expression<Double> and conformance Expression<A>, &demangling cache variable for type metadata for Expression<Double>);
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v28 + 32));
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v29 - 8) + 16))(boxed_opaque_existential_1, v30, v29);
      uint64_t v32 = Table.createIndex(_:unique:ifNotExists:)();
      uint64_t v34 = v33;
      swift_bridgeObjectRelease();
      v42._countAndFlagsBits = v32;
      v42._object = v34;
      swift_bridgeObjectRetain();
      v35._countAndFlagsBits = 2619;
      v35._object = (void *)0xE200000000000000;
      String.append(_:)(v35);
      swift_bridgeObjectRelease();
      String.append(_:)(v42);
      swift_bridgeObjectRelease();
      v36._object = (void *)0x8000000249E94EE0;
      v36._countAndFlagsBits = 0xD000000000000018;
      String.append(_:)(v36);
      Connection.execute(_:)(v43);
      if (v37)
      {
        uint64_t v38 = type metadata accessor for Table();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v38 - 8) + 8))(v24, v38);
        swift_release();
      }
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    if (one-time initialization token for daemon != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Logger.daemon);
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v18 = 134217984;
      v43._countAndFlagsBits = v41;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_249C3F000, v16, v17, "Invalid schemaVersion %ld", v18, 0xCu);
      MEMORY[0x24C5B4790](v18, -1, -1);
    }

    type metadata accessor for CipherMLError();
    _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
  }
  return v7;
}

uint64_t type metadata accessor for SqliteCache()
{
  uint64_t result = type metadata singleton initialization cache for SqliteCache;
  if (!type metadata singleton initialization cache for SqliteCache) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t Connection.columnNames(tableName:)(uint64_t a1, uint64_t a2)
{
  Connection.prepare(_:_:)();
  if (v2) {
    return (uint64_t)v3;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Binding?>);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_249E85E40;
  uint64_t v7 = MEMORY[0x263F7C008];
  *(void *)(v6 + 56) = MEMORY[0x263F8D310];
  *(void *)(v6 + 64) = v7;
  *(void *)(v6 + 32) = a1;
  *(void *)(v6 + 40) = a2;
  swift_bridgeObjectRetain();
  uint64_t v9 = Statement.run(_:)();
  swift_bridgeObjectRelease();
  v20[0] = v9;
  type metadata accessor for Statement();
  uint64_t v10 = (void (*)(uint64_t))MEMORY[0x263F7BFE8];
  _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_4(&lazy protocol witness table cache variable for type Statement and conformance Statement, MEMORY[0x263F7BFE8]);
  swift_retain();
  dispatch thunk of Sequence.makeIterator()();
  _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_4(&lazy protocol witness table cache variable for type Statement and conformance Statement, v10);
  uint64_t result = dispatch thunk of IteratorProtocol.next()();
  uint64_t v11 = v23;
  if (!v23)
  {
    uint64_t v3 = (void *)MEMORY[0x263F8EE78];
LABEL_22:
    swift_release();
    swift_release();
    swift_release();
    return (uint64_t)v3;
  }
  uint64_t v3 = (void *)MEMORY[0x263F8EE78];
  while (*(void *)(v11 + 16))
  {
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v11 + 32, (uint64_t)v20, &demangling cache variable for type metadata for Binding?);
    if (v20[3])
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding);
      if (swift_dynamicCast()) {
        goto LABEL_12;
      }
    }
    else
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v20, &demangling cache variable for type metadata for Binding?);
    }
    uint64_t v21 = 0;
    uint64_t v22 = 0;
LABEL_12:
    swift_bridgeObjectRelease();
    uint64_t v12 = v22;
    if (v22)
    {
      uint64_t v18 = v21;
      uint64_t v19 = v9;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
      }
      unint64_t v14 = v3[2];
      unint64_t v13 = v3[3];
      unint64_t v15 = v14 + 1;
      if (v14 >= v13 >> 1)
      {
        os_log_type_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v13 > 1), v14 + 1, 1, v3);
        unint64_t v15 = v14 + 1;
        uint64_t v3 = v17;
      }
      v3[2] = v15;
      uint64_t v16 = &v3[2 * v14];
      v16[4] = v18;
      v16[5] = v12;
      uint64_t result = dispatch thunk of IteratorProtocol.next()();
      uint64_t v11 = v23;
      uint64_t v9 = v19;
      if (!v23) {
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t result = dispatch thunk of IteratorProtocol.next()();
      uint64_t v11 = v23;
      if (!v23) {
        goto LABEL_22;
      }
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0;
  }
  if (a3[4] == a1 && a3[5] == a2) {
    return 1;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if (result) {
    return 1;
  }
  if (v3 == 1) {
    return 0;
  }
  uint64_t v9 = a3 + 7;
  for (uint64_t i = 1; ; ++i)
  {
    uint64_t v11 = i + 1;
    if (__OFADD__(i, 1)) {
      break;
    }
    BOOL v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      return 1;
    }
    uint64_t result = 0;
    v9 += 2;
    if (v11 == v3) {
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  __s1[2] = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a3 + 16);
  if (!v3) {
    return 0;
  }
  unint64_t v5 = a2;
  uint64_t v7 = (char *)(a2 >> 62);
  unint64_t v75 = HIDWORD(a1);
  BOOL v8 = __OFSUB__(HIDWORD(a1), a1);
  BOOL v78 = v8;
  size_t __n = BYTE6(a2);
  uint64_t v76 = (int)a1;
  size_t v77 = HIDWORD(a1) - (int)a1;
  uint64_t v74 = a1 >> 32;
  uint64_t v70 = (a1 >> 32) - (int)a1;
  swift_bridgeObjectRetain();
  uint64_t v9 = (unint64_t *)(a3 + 40);
  unint64_t v72 = HIDWORD(v5);
  unint64_t v73 = v5 >> 40;
  uint64_t v80 = v7;
  unint64_t v71 = v5;
  int v79 = (int)v7;
  while (2)
  {
    uint64_t v11 = *(v9 - 1);
    unint64_t v10 = *v9;
    unint64_t v12 = *v9 >> 62;
    v9 += 2;
    uint64_t v13 = 0;
    switch(v12)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v11), v11))
        {
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
        }
        uint64_t v13 = HIDWORD(v11) - (int)v11;
LABEL_14:
        outlined copy of Data._Representation(v11, v10);
        break;
      case 2uLL:
        uint64_t v15 = *(void *)(v11 + 16);
        uint64_t v14 = *(void *)(v11 + 24);
        uint64_t v13 = v14 - v15;
        if (!__OFSUB__(v14, v15)) {
          goto LABEL_14;
        }
        goto LABEL_121;
      case 3uLL:
        break;
      default:
        uint64_t v13 = BYTE6(v10);
        break;
    }
    size_t v16 = __n;
    switch(v80)
    {
      case 1:
        size_t v16 = v77;
        if (v78) {
          goto LABEL_122;
        }
        goto LABEL_19;
      case 2:
        uint64_t v18 = *(void *)(a1 + 16);
        uint64_t v17 = *(void *)(a1 + 24);
        BOOL v19 = __OFSUB__(v17, v18);
        size_t v16 = v17 - v18;
        if (!v19) {
          goto LABEL_19;
        }
        goto LABEL_123;
      case 3:
        if (v13) {
          goto LABEL_7;
        }
        goto LABEL_118;
      default:
LABEL_19:
        if (v13 != v16)
        {
LABEL_7:
          outlined consume of Data._Representation(v11, v10);
LABEL_8:
          if (!--v3)
          {
            swift_bridgeObjectRelease();
            return 0;
          }
          continue;
        }
        if (v13 >= 1)
        {
          switch((int)v12)
          {
            case 1:
              if ((int)v11 > v11 >> 32) {
                goto LABEL_124;
              }
              uint64_t v24 = __DataStorage._bytes.getter();
              if (v24)
              {
                uint64_t v25 = v24;
                uint64_t v26 = __DataStorage._offset.getter();
                if (__OFSUB__((int)v11, v26)) {
                  goto LABEL_126;
                }
                Swift::String v27 = (const void *)(v25 + (int)v11 - v26);
              }
              else
              {
                Swift::String v27 = 0;
              }
              __DataStorage._length.getter();
              LODWORD(v7) = v79;
              if (!v79)
              {
                LOWORD(__s1[0]) = a1;
                BYTE2(__s1[0]) = BYTE2(a1);
                BYTE3(__s1[0]) = BYTE3(a1);
                BYTE4(__s1[0]) = v75;
                BYTE5(__s1[0]) = BYTE5(a1);
                BYTE6(__s1[0]) = BYTE6(a1);
                HIBYTE(__s1[0]) = HIBYTE(a1);
                LOWORD(__s1[1]) = v5;
                BYTE2(__s1[1]) = BYTE2(v5);
                BYTE3(__s1[1]) = BYTE3(v5);
                BYTE4(__s1[1]) = v72;
                BYTE5(__s1[1]) = v73;
                if (!v27) {
                  goto LABEL_154;
                }
                int v34 = memcmp(v27, __s1, __n);
                goto LABEL_101;
              }
              if (v79 == 1)
              {
                if (v74 < v76) {
                  goto LABEL_135;
                }
                swift_retain();
                uint64_t v41 = (char *)__DataStorage._bytes.getter();
                if (v41)
                {
                  uint64_t v42 = __DataStorage._offset.getter();
                  if (__OFSUB__(v76, v42)) {
                    goto LABEL_142;
                  }
                  v41 += v76 - v42;
                }
                uint64_t v43 = __DataStorage._length.getter();
                size_t v44 = v70;
                if (v43 < v70) {
                  size_t v44 = v43;
                }
                if (!v27) {
                  goto LABEL_147;
                }
                if (!v41) {
                  goto LABEL_148;
                }
                int v34 = memcmp(v27, v41, v44);
                outlined consume of Data._Representation(a1, v5);
LABEL_101:
                outlined consume of Data._Representation(v11, v10);
LABEL_102:
                if (!v34) {
                  goto LABEL_119;
                }
                goto LABEL_8;
              }
              uint64_t v61 = *(void *)(a1 + 16);
              uint64_t v62 = *(void *)(a1 + 24);
              swift_retain();
              swift_retain();
              uint64_t v63 = (char *)__DataStorage._bytes.getter();
              if (v63)
              {
                uint64_t v64 = __DataStorage._offset.getter();
                if (__OFSUB__(v61, v64)) {
                  goto LABEL_141;
                }
                v63 += v61 - v64;
              }
              BOOL v19 = __OFSUB__(v62, v61);
              int64_t v65 = v62 - v61;
              if (v19) {
                goto LABEL_136;
              }
              uint64_t v66 = __DataStorage._length.getter();
              if (v66 >= v65) {
                size_t v67 = v65;
              }
              else {
                size_t v67 = v66;
              }
              if (!v27) {
                goto LABEL_155;
              }
              unint64_t v5 = v71;
              LODWORD(v7) = v79;
              if (!v63) {
                goto LABEL_156;
              }
              int v40 = memcmp(v27, v63, v67);
              swift_release();
              swift_release();
LABEL_114:
              outlined consume of Data._Representation(v11, v10);
              if (!v40) {
                goto LABEL_119;
              }
              break;
            case 2:
              uint64_t v28 = *(void *)(v11 + 16);
              swift_retain();
              swift_retain();
              uint64_t v29 = (char *)__DataStorage._bytes.getter();
              if (!v29) {
                goto LABEL_36;
              }
              uint64_t v30 = __DataStorage._offset.getter();
              if (__OFSUB__(v28, v30)) {
                goto LABEL_125;
              }
              v29 += v28 - v30;
LABEL_36:
              __DataStorage._length.getter();
              LODWORD(v7) = v79;
              if (!v79)
              {
                LOWORD(__s1[0]) = a1;
                BYTE2(__s1[0]) = BYTE2(a1);
                BYTE3(__s1[0]) = BYTE3(a1);
                BYTE4(__s1[0]) = v75;
                BYTE5(__s1[0]) = BYTE5(a1);
                BYTE6(__s1[0]) = BYTE6(a1);
                HIBYTE(__s1[0]) = HIBYTE(a1);
                LOWORD(__s1[1]) = v5;
                BYTE2(__s1[1]) = BYTE2(v5);
                BYTE3(__s1[1]) = BYTE3(v5);
                BYTE4(__s1[1]) = v72;
                BYTE5(__s1[1]) = v73;
                if (!v29) {
                  goto LABEL_151;
                }
                int v34 = memcmp(v29, __s1, __n);
                swift_release();
                swift_release();
                goto LABEL_101;
              }
              if (v79 == 1)
              {
                if (v74 < v76) {
                  goto LABEL_129;
                }
                swift_retain();
                uint64_t v7 = (char *)__DataStorage._bytes.getter();
                if (v7)
                {
                  uint64_t v31 = __DataStorage._offset.getter();
                  if (__OFSUB__(v76, v31)) {
                    goto LABEL_140;
                  }
                  v7 += v76 - v31;
                }
                uint64_t v32 = __DataStorage._length.getter();
                size_t v33 = v70;
                if (v32 < v70) {
                  size_t v33 = v32;
                }
                if (!v29) {
                  goto LABEL_144;
                }
                if (!v7) {
                  goto LABEL_145;
                }
                int v34 = memcmp(v29, v7, v33);
                outlined consume of Data._Representation(a1, v5);
                swift_release();
                swift_release();
                outlined consume of Data._Representation(v11, v10);
                LODWORD(v7) = v79;
                goto LABEL_102;
              }
              uint64_t v55 = *(void *)(a1 + 16);
              uint64_t v69 = *(void *)(a1 + 24);
              swift_retain();
              swift_retain();
              uint64_t v56 = (char *)__DataStorage._bytes.getter();
              if (v56)
              {
                uint64_t v57 = __DataStorage._offset.getter();
                if (__OFSUB__(v55, v57)) {
                  goto LABEL_139;
                }
                v56 += v55 - v57;
              }
              BOOL v19 = __OFSUB__(v69, v55);
              int64_t v58 = v69 - v55;
              if (v19) {
                goto LABEL_134;
              }
              uint64_t v59 = __DataStorage._length.getter();
              if (v59 >= v58) {
                size_t v60 = v58;
              }
              else {
                size_t v60 = v59;
              }
              if (!v29) {
                goto LABEL_152;
              }
              unint64_t v5 = v71;
              if (!v56) {
                goto LABEL_153;
              }
              int v39 = memcmp(v29, v56, v60);
              swift_release();
              swift_release();
              swift_release();
              swift_release();
LABEL_96:
              outlined consume of Data._Representation(v11, v10);
LABEL_97:
              LODWORD(v7) = v79;
              if (!v39) {
                goto LABEL_119;
              }
              goto LABEL_8;
            case 3:
              memset(__s1, 0, 14);
              if (!v7) {
                goto LABEL_56;
              }
              if (v7 == 1)
              {
                if (v74 < v76) {
                  goto LABEL_128;
                }
                outlined copy of Data._Representation(a1, v5);
                uint64_t v35 = __DataStorage._bytes.getter();
                if (!v35) {
                  goto LABEL_146;
                }
                uint64_t v21 = v35;
                uint64_t v36 = __DataStorage._offset.getter();
                uint64_t v23 = v76 - v36;
                if (__OFSUB__(v76, v36)) {
                  goto LABEL_133;
                }
LABEL_52:
                uint64_t v37 = __DataStorage._length.getter();
                if (v37 >= v70) {
                  size_t v38 = v70;
                }
                else {
                  size_t v38 = v37;
                }
                int v39 = memcmp(__s1, (const void *)(v21 + v23), v38);
                outlined consume of Data._Representation(a1, v5);
                goto LABEL_96;
              }
              uint64_t v51 = *(void *)(a1 + 16);
              uint64_t v52 = *(void *)(a1 + 24);
              swift_retain();
              swift_retain();
              Swift::String v47 = (char *)__DataStorage._bytes.getter();
              if (v47)
              {
                uint64_t v53 = __DataStorage._offset.getter();
                if (__OFSUB__(v51, v53)) {
                  goto LABEL_138;
                }
                v47 += v51 - v53;
              }
              BOOL v19 = __OFSUB__(v52, v51);
              int64_t v49 = v52 - v51;
              if (v19) {
                goto LABEL_131;
              }
              uint64_t v50 = __DataStorage._length.getter();
              if (!v47) {
                goto LABEL_150;
              }
LABEL_80:
              if (v50 >= v49) {
                size_t v54 = v49;
              }
              else {
                size_t v54 = v50;
              }
              int v39 = memcmp(__s1, v47, v54);
              swift_release();
              swift_release();
              outlined consume of Data._Representation(v11, v10);
              unint64_t v5 = v71;
              goto LABEL_97;
            default:
              __s1[0] = v11;
              LOWORD(__s1[1]) = v10;
              BYTE2(__s1[1]) = BYTE2(v10);
              BYTE3(__s1[1]) = BYTE3(v10);
              BYTE4(__s1[1]) = BYTE4(v10);
              BYTE5(__s1[1]) = BYTE5(v10);
              if (!v7)
              {
LABEL_56:
                __int16 __s2 = a1;
                char v83 = BYTE2(a1);
                char v84 = BYTE3(a1);
                char v85 = v75;
                char v86 = BYTE5(a1);
                char v87 = BYTE6(a1);
                char v88 = HIBYTE(a1);
                __int16 v89 = v5;
                char v90 = BYTE2(v5);
                char v91 = BYTE3(v5);
                char v92 = v72;
                char v93 = v73;
                int v40 = memcmp(__s1, &__s2, __n);
                goto LABEL_114;
              }
              if (v7 == 1)
              {
                if (v74 < v76) {
                  goto LABEL_127;
                }
                outlined copy of Data._Representation(a1, v5);
                uint64_t v20 = __DataStorage._bytes.getter();
                if (!v20)
                {
                  __DataStorage._length.getter();
                  __break(1u);
LABEL_144:
                  __break(1u);
LABEL_145:
                  __break(1u);
LABEL_146:
                  __DataStorage._length.getter();
                  __break(1u);
LABEL_147:
                  __break(1u);
LABEL_148:
                  __break(1u);
LABEL_149:
                  __break(1u);
LABEL_150:
                  __break(1u);
LABEL_151:
                  __break(1u);
LABEL_152:
                  __break(1u);
LABEL_153:
                  __break(1u);
LABEL_154:
                  __break(1u);
LABEL_155:
                  __break(1u);
LABEL_156:
                  __break(1u);
                  JUMPOUT(0x249D087F4);
                }
                uint64_t v21 = v20;
                uint64_t v22 = __DataStorage._offset.getter();
                uint64_t v23 = v76 - v22;
                if (__OFSUB__(v76, v22)) {
                  goto LABEL_132;
                }
                goto LABEL_52;
              }
              uint64_t v45 = *(void *)(a1 + 16);
              uint64_t v46 = *(void *)(a1 + 24);
              swift_retain();
              swift_retain();
              Swift::String v47 = (char *)__DataStorage._bytes.getter();
              if (v47)
              {
                uint64_t v48 = __DataStorage._offset.getter();
                if (__OFSUB__(v45, v48)) {
                  goto LABEL_137;
                }
                v47 += v45 - v48;
              }
              BOOL v19 = __OFSUB__(v46, v45);
              int64_t v49 = v46 - v45;
              if (v19) {
                goto LABEL_130;
              }
              uint64_t v50 = __DataStorage._length.getter();
              if (!v47) {
                goto LABEL_149;
              }
              goto LABEL_80;
          }
          goto LABEL_8;
        }
LABEL_118:
        outlined consume of Data._Representation(v11, v10);
LABEL_119:
        swift_bridgeObjectRelease();
        return 1;
    }
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Connection.setUserVersion(_:)(Swift::Int a1)
{
  _StringGuts.grow(_:)(24);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  Connection.run(_:_:)();
  swift_bridgeObjectRelease();
  if (!v1) {
    swift_release();
  }
}

double closure #1 in SqliteCache.init(useCase:cacheElementCount:cacheEntryMinutesToLive:getCurrentDate:)(void (*a1)(uint64_t))
{
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  a1(v4);
  Date.timeIntervalSinceReferenceDate.getter();
  double v8 = v7;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  return v8;
}

uint64_t sub_249D089EC()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

double partial apply for closure #1 in SqliteCache.init(useCase:cacheElementCount:cacheEntryMinutesToLive:getCurrentDate:)()
{
  return closure #1 in SqliteCache.init(useCase:cacheElementCount:cacheEntryMinutesToLive:getCurrentDate:)(*(void (**)(uint64_t))(v0 + 16));
}

uint64_t closure #1 in static SqliteCache.createTable(useCase:schemaVersion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = a2;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Expression<Double>?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v21 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Expression<Data>?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Expression<Bool>?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for keyword != -1) {
    swift_once();
  }
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Expression<Data>);
  __swift_project_value_buffer(v10, (uint64_t)static SqliteCache.Column.keyword);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Expression<Bool>);
  unint64_t v12 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
  v12(v9, 1, 1, v11);
  uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
  v13(v6, 1, 1, v10);
  TableBuilder.column<A>(_:primaryKey:check:defaultValue:)();
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for Expression<Data>?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v9, &demangling cache variable for type metadata for Expression<Bool>?);
  if (one-time initialization token for value != -1) {
    swift_once();
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Expression<Data?>);
  __swift_project_value_buffer(v14, (uint64_t)static SqliteCache.Column.value);
  v12(v9, 1, 1, v11);
  v13(v6, 1, 1, v10);
  TableBuilder.column<A>(_:unique:check:defaultValue:)();
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for Expression<Data>?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v9, &demangling cache variable for type metadata for Expression<Bool>?);
  if (one-time initialization token for accessTime != -1) {
    swift_once();
  }
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Expression<Double>);
  __swift_project_value_buffer(v15, (uint64_t)static SqliteCache.Column.accessTime);
  v12(v9, 1, 1, v11);
  size_t v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
  uint64_t v17 = (uint64_t)v21;
  v16(v21, 1, 1, v15);
  TableBuilder.column<A>(_:unique:check:defaultValue:)();
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v17, &demangling cache variable for type metadata for Expression<Double>?);
  uint64_t result = outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v9, &demangling cache variable for type metadata for Expression<Bool>?);
  if (v20 >= 1)
  {
    if (one-time initialization token for expirationTime != -1) {
      swift_once();
    }
    __swift_project_value_buffer(v15, (uint64_t)static SqliteCache.Column.expirationTime);
    v12(v9, 1, 1, v11);
    uint64_t v19 = (uint64_t)v21;
    v16(v21, 1, 1, v15);
    TableBuilder.column<A>(_:unique:check:defaultValue:)();
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v19, &demangling cache variable for type metadata for Expression<Double>?);
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v9, &demangling cache variable for type metadata for Expression<Bool>?);
  }
  return result;
}

Swift::Int __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SqliteCache.removeExpiredValues()()
{
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Expression<Bool>);
  uint64_t v1 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v3 = (char *)v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Table();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for Delete();
  uint64_t v8 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v10 = (char *)v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(v0 + OBJC_IVAR____TtC8CipherML11SqliteCache_db);
  v15[1] = v0 + OBJC_IVAR____TtC8CipherML11SqliteCache_cachedResponses;
  v15[2] = v11;
  if (one-time initialization token for expirationTime != -1) {
    swift_once();
  }
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Expression<Double>);
  __swift_project_value_buffer(v12, (uint64_t)static SqliteCache.Column.expirationTime);
  double v18 = (*(double (**)(void))(v0 + OBJC_IVAR____TtC8CipherML11SqliteCache_currentTime))();
  < infix<A>(_:_:)();
  QueryType.filter(_:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v17);
  QueryType.delete()();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  Swift::Int v13 = Connection.run(_:)();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v16);
  return v13;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SqliteCache.removeAllValues()()
{
  uint64_t v0 = type metadata accessor for Delete();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v4 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Table();
  QueryType.delete()();
  Connection.run(_:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t SqliteCache.removeLRUValues(count:)(uint64_t a1)
{
  uint64_t v19 = a1;
  uint64_t v2 = type metadata accessor for Table();
  uint64_t v22 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  double v18 = (char *)&v17 - v6;
  uint64_t v7 = type metadata accessor for Delete();
  uint64_t v20 = *(void *)(v7 - 8);
  uint64_t v21 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *(void *)(v1 + OBJC_IVAR____TtC8CipherML11SqliteCache_db);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Expressible>);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_249E85E40;
  if (one-time initialization token for accessTime != -1) {
    swift_once();
  }
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Expression<Double>);
  uint64_t v12 = __swift_project_value_buffer(v11, (uint64_t)static SqliteCache.Column.accessTime);
  *(void *)(v10 + 56) = v11;
  *(void *)(v10 + 64) = lazy protocol witness table accessor for type Expression<Double> and conformance Expression<A>(&lazy protocol witness table cache variable for type Expression<Double> and conformance Expression<A>, &demangling cache variable for type metadata for Expression<Double>);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v10 + 32));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(boxed_opaque_existential_1, v12, v11);
  MEMORY[0x24C5B2700](v10, v2, MEMORY[0x263F7BFE0]);
  swift_bridgeObjectRelease();
  uint64_t v14 = v18;
  QueryType.limit(_:)();
  uint64_t v15 = *(void (**)(char *, uint64_t))(v22 + 8);
  v15(v4, v2);
  QueryType.delete()();
  v15(v14, v2);
  Connection.run(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v9, v21);
}

NSObject *SqliteCache.getValue(keyword:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for String.Encoding();
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v5 = type metadata accessor for OSSignpostID();
  uint64_t v27 = *(void *)(v5 - 8);
  uint64_t v28 = v5;
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for OSSignposter();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for daemon != -1) {
    swift_once();
  }
  uint64_t v12 = __swift_project_value_buffer(v8, (uint64_t)static OSSignposter.daemon);
  Swift::Int v13 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  uint64_t v26 = v8;
  v13(v11, v12, v8);
  outlined copy of Data._Representation(a1, a2);
  outlined copy of Data._Representation(a1, a2);
  static OSSignpostID.exclusive.getter();
  uint64_t v14 = (uint8_t *)swift_slowAlloc();
  v25[0] = swift_slowAlloc();
  uint64_t v30 = v25[0];
  *(_DWORD *)uint64_t v14 = 136380675;
  static String.Encoding.utf8.getter();
  uint64_t v15 = String.init(data:encoding:)();
  if (!v16) {
    uint64_t v15 = Data.hexString.getter(a1, a2);
  }
  uint64_t v29 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v30);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(a1, a2);
  outlined consume of Data._Representation(a1, a2);
  uint64_t v17 = OSSignposter.logHandle.getter();
  os_signpost_type_t v18 = static os_signpost_type_t.begin.getter();
  os_signpost_id_t v19 = OSSignpostID.rawValue.getter();
  _os_signpost_emit_with_name_impl(&dword_249C3F000, v17, v18, v19, "LRUCache: getValue", "%{private}s", v14, 0xCu);
  uint64_t v20 = v25[2];
  closure #1 in SqliteCache.getValue(keyword:)(v25[1], (uint64_t *)&v29);
  if (v20)
  {
  }
  else
  {
    os_signpost_type_t v21 = static os_signpost_type_t.end.getter();
    os_signpost_id_t v22 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_249C3F000, v17, v21, v22, "LRUCache: getValue", "%{private}s", v14, 0xCu);

    uint64_t v17 = v29;
    uint64_t v23 = v25[0];
    swift_arrayDestroy();
    MEMORY[0x24C5B4790](v23, -1, -1);
    MEMORY[0x24C5B4790](v14, -1, -1);
  }
  (*(void (**)(char *, uint64_t))(v27 + 8))(v7, v28);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v26);
  return v17;
}

uint64_t closure #1 in SqliteCache.getValue(keyword:)@<X0>(uint64_t a1@<X2>, uint64_t *a2@<X8>)
{
  uint64_t v42 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Blob?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v40 = (uint64_t)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v41 = (char *)&v38 - v6;
  uint64_t v7 = type metadata accessor for Cursor();
  uint64_t v39 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Blob();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  Swift::Int v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  unint64_t v16 = (char *)&v38 - v15;
  uint64_t v17 = Data.datatypeValue.getter();
  double v18 = (*(double (**)(uint64_t))(a1 + OBJC_IVAR____TtC8CipherML11SqliteCache_currentTime))(v17);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Binding?>);
  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_249E85E00;
  uint64_t v20 = MEMORY[0x263F7C018];
  *(void *)(v19 + 56) = MEMORY[0x263F8D538];
  *(void *)(v19 + 64) = v20;
  *(double *)(v19 + 32) = v18;
  uint64_t v21 = MEMORY[0x263F7BFD0];
  *(void *)(v19 + 96) = v10;
  *(void *)(v19 + 104) = v21;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v19 + 72));
  (*(void (**)(uint64_t *, char *, uint64_t))(v11 + 16))(boxed_opaque_existential_1, v16, v10);
  Statement.bind(_:)();
  swift_bridgeObjectRelease();
  Swift::Bool v23 = Statement.step()();
  uint64_t v43 = v24;
  if (v24)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
    return swift_release();
  }
  else
  {
    Swift::Bool v26 = v23;
    size_t v38 = v13;
    swift_release();
    if (v26)
    {
      Statement.row.getter();
      Cursor.subscript.getter();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v9, v7);
      outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v46, (uint64_t)v44, &demangling cache variable for type metadata for Binding?);
      uint64_t v27 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
      if (v45)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding);
        uint64_t v28 = (uint64_t)v41;
        int v29 = swift_dynamicCast();
        (*v27)(v28, v29 ^ 1u, 1, v10);
      }
      else
      {
        outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v44, &demangling cache variable for type metadata for Binding?);
        uint64_t v28 = (uint64_t)v41;
        (*v27)((uint64_t)v41, 1, 1, v10);
      }
      uint64_t v30 = v38;
      uint64_t v31 = v40;
      outlined init with copy of AMDPbHEConfig.OneOf_Config?(v28, v40, &demangling cache variable for type metadata for Blob?);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v31, 1, v10) == 1)
      {
        uint64_t v32 = 0;
        unint64_t v33 = 0xF000000000000000;
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v11 + 32))(v30, v31, v10);
        uint64_t v34 = Blob.bytes.getter();
        uint64_t v32 = specialized Data.init<A>(_:)(v34);
        unint64_t v33 = v35;
        uint64_t v28 = (uint64_t)v41;
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v11 + 8))(v30, v10);
      }
      uint64_t v36 = v42;
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v28, &demangling cache variable for type metadata for Blob?);
      Statement.step()();
      if (v37)
      {
        outlined consume of Data?(v32, v33);
        outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v46, &demangling cache variable for type metadata for Binding?);
        return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v16, v10);
      }
      else
      {
        outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v46, &demangling cache variable for type metadata for Binding?);
        uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v16, v10);
        *uint64_t v36 = v32;
        v36[1] = v33;
      }
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v16, v10);
      *(_OWORD *)uint64_t v42 = xmmword_249E897E0;
    }
  }
  return result;
}

Swift::Int __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SqliteCache.removeValues(for:)(Swift::OpaquePointer a1)
{
  uint64_t v3 = type metadata accessor for Delete();
  uint64_t v19 = *(void *)(v3 - 8);
  uint64_t v20 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Expression<Bool>);
  uint64_t v6 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Table();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = v1;
  uint64_t v16 = v1 + OBJC_IVAR____TtC8CipherML11SqliteCache_cachedResponses;
  rawValue = a1._rawValue;
  if (one-time initialization token for keyword != -1) {
    swift_once();
  }
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Expression<Data>);
  __swift_project_value_buffer(v13, (uint64_t)static SqliteCache.Column.keyword);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Data]);
  lazy protocol witness table accessor for type Expression<Double> and conformance Expression<A>(&lazy protocol witness table cache variable for type [Data] and conformance [A], &demangling cache variable for type metadata for [Data]);
  Collection<>.contains(_:)();
  QueryType.filter(_:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v17);
  QueryType.delete()();
  Swift::Int v14 = Connection.run(_:)();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v5, v20);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return v14;
}

uint64_t SqliteCache.setValue(keyword:newValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ScalarQuery<Int>);
  uint64_t v38 = *(void *)(v39 - 8);
  MEMORY[0x270FA5388](v39);
  uint64_t v37 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Insert();
  uint64_t v54 = *(void *)(v10 - 8);
  uint64_t v55 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v52 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = *(void *)(v4 + OBJC_IVAR____TtC8CipherML11SqliteCache_db);
  uint64_t v12 = OBJC_IVAR____TtC8CipherML11SqliteCache_cachedResponses;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Setter>);
  uint64_t v14 = *(void *)(type metadata accessor for Setter() - 8);
  uint64_t v15 = *(void *)(v14 + 72);
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = (v16 + 32) & ~v16;
  uint64_t v47 = v13;
  uint64_t v45 = v16 | 7;
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_249E85E30;
  uint64_t v49 = v18;
  uint64_t v46 = v17;
  if (one-time initialization token for keyword != -1) {
    swift_once();
  }
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Expression<Data>);
  uint64_t v20 = __swift_project_value_buffer(v19, (uint64_t)static SqliteCache.Column.keyword);
  double v58 = *(double *)&a1;
  uint64_t v59 = a2;
  uint64_t v44 = v20;
  <- infix<A>(_:_:)();
  if (one-time initialization token for value != -1) {
    swift_once();
  }
  uint64_t v48 = v4 + v12;
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Expression<Data?>);
  uint64_t v22 = __swift_project_value_buffer(v21, (uint64_t)static SqliteCache.Column.value);
  double v50 = *(double *)&a3;
  uint64_t v51 = a4;
  double v58 = *(double *)&a3;
  uint64_t v59 = a4;
  uint64_t v43 = v22;
  <- infix<A>(_:_:)();
  uint64_t v42 = 2 * v15;
  if (one-time initialization token for accessTime != -1) {
    swift_once();
  }
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Expression<Double>);
  uint64_t v24 = __swift_project_value_buffer(v23, (uint64_t)static SqliteCache.Column.accessTime);
  uint64_t v40 = *(double (**)(void))(v4 + OBJC_IVAR____TtC8CipherML11SqliteCache_currentTime);
  double v58 = v40();
  uint64_t v41 = v24;
  <- infix<A>(_:_:)();
  if (one-time initialization token for expirationTime != -1) {
    swift_once();
  }
  __swift_project_value_buffer(v23, (uint64_t)static SqliteCache.Column.expirationTime);
  double v58 = (*(double (**)(void))(*(void *)v4 + 128))();
  <- infix<A>(_:_:)();
  uint64_t v60 = v19;
  uint64_t v61 = lazy protocol witness table accessor for type Expression<Double> and conformance Expression<A>(&lazy protocol witness table cache variable for type Expression<Data> and conformance Expression<A>, &demangling cache variable for type metadata for Expression<Data>);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v58);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16))(boxed_opaque_existential_1, v44, v19);
  uint64_t v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_249E85E00;
  double v56 = v50;
  uint64_t v57 = v51;
  uint64_t v27 = <- infix<A>(_:_:)();
  double v56 = ((double (*)(uint64_t))v40)(v27);
  <- infix<A>(_:_:)();
  uint64_t v28 = type metadata accessor for Table();
  int v29 = v52;
  MEMORY[0x24C5B2730](v49, &v58, v26, v28, MEMORY[0x263F7BFE0]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v58);
  uint64_t v30 = v62;
  Connection.run(_:)();
  if (v30) {
    return (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v29, v55);
  }
  (*(void (**)(char *, uint64_t))(v54 + 8))(v29, v55);
  uint64_t v32 = v37;
  SchemaType.count.getter();
  Connection.scalar<A>(_:)();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v32, v39);
  double v33 = v58;
  double v34 = *(double *)(v4 + OBJC_IVAR____TtC8CipherML11SqliteCache_maximumCount);
  if (*(uint64_t *)&v34 < *(uint64_t *)&v58)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 144))(result);
    uint64_t v35 = *(void *)&v33 - result;
    if (__OFSUB__(*(void *)&v33, result))
    {
      __break(1u);
    }
    else
    {
      if (*(uint64_t *)&v34 >= v35) {
        return result;
      }
      uint64_t result = v35 - *(void *)&v34;
      if (!__OFSUB__(v35, *(void *)&v34)) {
        return SqliteCache.removeLRUValues(count:)(result);
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t key path setter for SqliteCache.subscript(_:) : SqliteCache(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  unint64_t v4 = a3[1];
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  uint64_t v7 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t, unint64_t))(**(void **)a2 + 216);
  outlined copy of Data._Representation(*a3, v4);
  outlined copy of Data??(v5, v6);
  return v7(v5, v6, v3, v4);
}

NSObject *SqliteCache.subscript.getter(uint64_t a1, unint64_t a2)
{
  return SqliteCache.getValue(keyword:)(a1, a2);
}

uint64_t SqliteCache.subscript.setter(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a2 >> 60 == 11)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Data>);
    uint64_t v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_249E85E40;
    *(void *)(v9 + 32) = a3;
    *(void *)(v9 + 40) = a4;
    uint64_t v10 = *(void (**)(uint64_t))(*(void *)v4 + 176);
    outlined copy of Data._Representation(a3, a4);
    v10(v9);
    swift_bridgeObjectRelease();
    return outlined consume of Data._Representation(a3, a4);
  }
  else
  {
    outlined copy of Data?(a1, a2);
    SqliteCache.setValue(keyword:newValue:)(a3, a4, a1, a2);
    outlined consume of Data._Representation(a3, a4);
    outlined consume of Data??(a1, a2);
    return outlined consume of Data??(a1, a2);
  }
}

void (*SqliteCache.subscript.modify(void *a1, uint64_t a2, unint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t v7 = malloc(0x28uLL);
  *a1 = v7;
  v7[3] = a3;
  v7[4] = v3;
  v7[2] = a2;
  *uint64_t v7 = SqliteCache.subscript.getter(a2, a3);
  v7[1] = v8;
  return SqliteCache.subscript.modify;
}

void SqliteCache.subscript.modify(uint64_t **a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v5 = **a1;
  unint64_t v4 = (*a1)[1];
  outlined copy of Data._Representation((*a1)[2], (*a1)[3]);
  unint64_t v6 = v3[3];
  uint64_t v7 = v3[2];
  if (a2)
  {
    outlined copy of Data??(v5, v4);
    SqliteCache.subscript.setter(v5, v4, v7, v6);
    outlined consume of Data??(*v3, v3[1]);
  }
  else
  {
    SqliteCache.subscript.setter(v5, v4, v3[2], v3[3]);
  }
  free(v3);
}

uint64_t SqliteCache.deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC8CipherML11SqliteCache_cachedResponses;
  uint64_t v2 = type metadata accessor for Table();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t SqliteCache.__deallocating_deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC8CipherML11SqliteCache_cachedResponses;
  uint64_t v2 = type metadata accessor for Table();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for LRUCache.init(useCase:cacheElementCount:cacheEntryMinutesToLive:getCurrentDate:) in conformance SqliteCache()
{
  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t protocol witness for LRUCache.removeExpiredValues() in conformance SqliteCache()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t protocol witness for LRUCache.removeAllValues() in conformance SqliteCache()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t protocol witness for LRUCache.removeValues(for:) in conformance SqliteCache()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t protocol witness for LRUCache.subscript.getter in conformance SqliteCache()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t protocol witness for LRUCache.subscript.setter in conformance SqliteCache()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

void (*protocol witness for LRUCache.subscript.modify in conformance SqliteCache(void *a1))(void *a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(*(void *)v1 + 224))();
  return protocol witness for LRUCache.subscript.modify in conformance SqliteCache;
}

void protocol witness for LRUCache.subscript.modify in conformance SqliteCache(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);
  free(v1);
}

uint64_t Connection.userVersion.getter()
{
  uint64_t result = Connection.scalar(_:_:)();
  if (!v0)
  {
    if (v4)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding);
      if (swift_dynamicCast()) {
        return v2;
      }
    }
    else
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v3, &demangling cache variable for type metadata for Binding?);
    }
    type metadata accessor for CipherMLError();
    _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    return swift_willThrow();
  }
  return result;
}

uint64_t partial apply for closure #1 in static SqliteCache.createTable(useCase:schemaVersion:)(uint64_t a1)
{
  return closure #1 in static SqliteCache.createTable(useCase:schemaVersion:)(a1, *(void *)(v1 + 16));
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[CMLSimilarityScore]>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      _OWORD v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      _OWORD v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Data>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      _OWORD v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int?>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      _OWORD v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      _OWORD v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(name: String, existingConfigId: [UInt8])>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      _OWORD v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<AspireApiKeyStatus>, type metadata accessor for AspireApiKeyStatus, type metadata accessor for AspireApiKeyStatus);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<TokenCache.CachedToken>, type metadata accessor for TokenCache.CachedToken, type metadata accessor for TokenCache.CachedToken);
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  if (a3)
  {
    unint64_t v11 = *(void *)(a4 + 24);
    uint64_t v12 = v11 >> 1;
    if ((uint64_t)(v11 >> 1) < a2)
    {
      if (v12 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v11 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v12 = a2;
      }
    }
  }
  else
  {
    uint64_t v12 = a2;
  }
  uint64_t v13 = *(void *)(a4 + 16);
  if (v12 <= v13) {
    uint64_t v14 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v14 = v12;
  }
  if (!v14)
  {
    uint64_t v18 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v15 = *(void *)(a6(0) - 8);
  uint64_t v16 = *(void *)(v15 + 72);
  unint64_t v17 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  uint64_t v18 = (void *)swift_allocObject();
  size_t v19 = _swift_stdlib_malloc_size(v18);
  if (!v16 || (v19 - v17 == 0x8000000000000000 ? (BOOL v20 = v16 == -1) : (BOOL v20 = 0), v20))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v18[2] = v13;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v16);
LABEL_19:
  uint64_t v21 = *(void *)(a6(0) - 8);
  unint64_t v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  unint64_t v23 = (unint64_t)v18 + v22;
  if (a1)
  {
    if ((unint64_t)v18 < a4 || v23 >= a4 + v22 + *(void *)(v21 + 72) * v13)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v18 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v13, v23, a4, a7);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v18;
}

uint64_t _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _StringGuts._slowEnsureMatchingEncoding(_:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3 = a1;
  uint64_t v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    uint64_t v10 = String.UTF16View.index(_:offsetBy:)();
    uint64_t v11 = v10 + (v4 << 16);
    unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v13 = v12;
    }
    return v13 | 4;
  }
  else
  {
    uint64_t v5 = MEMORY[0x24C5B34E0](15, a1 >> 16);
    uint64_t v6 = v5 + (v4 << 16);
    unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v8 = v7;
    }
    return v8 | 8;
  }
}

uint64_t sub_249D0BF84@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void, void))(**(void **)a1 + 208))(*a2, a2[1]);
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t sub_249D0BFD8()
{
  return 0;
}

uint64_t ObjC metadata update function for SqliteCache()
{
  return type metadata accessor for SqliteCache();
}

uint64_t type metadata completion function for SqliteCache()
{
  uint64_t result = type metadata accessor for Table();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for SqliteCache(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for SqliteCache);
}

uint64_t dispatch thunk of SqliteCache.expirationTime.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of SqliteCache.__allocating_init(useCase:cacheElementCount:cacheEntryMinutesToLive:getCurrentDate:)()
{
  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t dispatch thunk of SqliteCache.removeExpiredValues()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of SqliteCache.removeAllValues()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of SqliteCache.removeValues(for:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of SqliteCache.subscript.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of SqliteCache.subscript.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of SqliteCache.subscript.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

ValueMetadata *type metadata accessor for SqliteCache.Column()
{
  return &type metadata for SqliteCache.Column;
}

char *specialized Data._Representation.withUnsafeMutableBytes<A>(_:)(void *(*a1)(uint64_t *__return_ptr, char *, char *))
{
  v16[2] = *MEMORY[0x263EF8340];
  uint64_t v4 = *v1;
  unint64_t v3 = v1[1];
  uint64_t v5 = v1;
  switch(v3 >> 62)
  {
    case 1uLL:
      uint64_t v9 = v3 & 0x3FFFFFFFFFFFFFFFLL;
      *(_OWORD *)unint64_t v1 = xmmword_249E85DF0;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v11 = v4 >> 32;
      if (isUniquelyReferenced_nonNull_native) {
        goto LABEL_16;
      }
      if (v11 < (int)v4) {
        goto LABEL_23;
      }
      if (__DataStorage._bytes.getter() && __OFSUB__((int)v4, __DataStorage._offset.getter())) {
        goto LABEL_24;
      }
      type metadata accessor for __DataStorage();
      swift_allocObject();
      uint64_t v13 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
      swift_release();
      uint64_t v9 = v13;
      uint64_t v11 = v4 >> 32;
LABEL_16:
      if (v11 < (int)v4)
      {
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
      }
      uint64_t result = specialized __DataStorage.withUnsafeMutableBytes<A>(in:apply:)((int)v4, v11, a1);
      unint64_t v12 = v9 | 0x4000000000000000;
      if (v2)
      {
        *uint64_t v5 = v4;
        goto LABEL_19;
      }
      *uint64_t v5 = v4;
      v5[1] = v12;
      break;
    case 2uLL:
      uint64_t v14 = *v1;
      uint64_t v15 = v3 & 0x3FFFFFFFFFFFFFFFLL;
      Data.LargeSlice.ensureUniqueReference()();
      uint64_t result = specialized __DataStorage.withUnsafeMutableBytes<A>(in:apply:)(*(void *)(v14 + 16), *(void *)(v14 + 24), a1);
      unint64_t v12 = v15 | 0x8000000000000000;
      if (v2)
      {
        *unint64_t v1 = v14;
LABEL_19:
        v5[1] = v12;
      }
      else
      {
        *unint64_t v1 = v14;
        v1[1] = v12;
      }
      break;
    case 3uLL:
      memset(v16, 0, 15);
      uint64_t result = (char *)a1(&v14, (char *)v16, (char *)v16);
      if (!v2) {
        return (char *)v14;
      }
      return result;
    default:
      v16[0] = *v1;
      LOWORD(v16[1]) = v3;
      BYTE2(v16[1]) = BYTE2(v3);
      BYTE3(v16[1]) = BYTE3(v3);
      BYTE4(v16[1]) = BYTE4(v3);
      BYTE5(v16[1]) = BYTE5(v3);
      BYTE6(v16[1]) = BYTE6(v3);
      uint64_t result = (char *)a1(&v14, (char *)v16, (char *)v16 + BYTE6(v3));
      if (!v2) {
        uint64_t result = (char *)v14;
      }
      unint64_t v8 = LODWORD(v16[1]) | ((unint64_t)BYTE4(v16[1]) << 32) | ((unint64_t)BYTE5(v16[1]) << 40) | ((unint64_t)BYTE6(v16[1]) << 48);
      *unint64_t v1 = v16[0];
      v1[1] = v8;
      return result;
  }
  return result;
}

void *_sSw17withMemoryRebound2to_q0_xm_q0_SryxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_s5NeverOs16IndexingIteratorVySS8UTF8ViewVG_SitTgm5(void *(*a1)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t result = a1(&v6, a3, a4 - a3);
    if (v4) {
      return result;
    }
    return (void *)v6;
  }
  uint64_t result = a1(&v6, 0, 0);
  if (!v4) {
    return (void *)v6;
  }
  return result;
}

char *specialized __DataStorage.withUnsafeMutableBytes<A>(in:apply:)(uint64_t a1, uint64_t a2, void *(*a3)(uint64_t *__return_ptr, char *, char *))
{
  uint64_t result = (char *)__DataStorage._bytes.getter();
  if (!result) {
    goto LABEL_12;
  }
  unint64_t v8 = result;
  uint64_t result = (char *)__DataStorage._offset.getter();
  uint64_t v9 = a1 - (void)result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_11;
  }
  BOOL v10 = __OFSUB__(a2, a1);
  uint64_t v11 = a2 - a1;
  if (v10)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  uint64_t v12 = __DataStorage._length.getter();
  if (v12 >= v11) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = v12;
  }
  uint64_t result = (char *)a3(&v14, &v8[v9], &v8[v9 + v13]);
  if (!v3) {
    return (char *)v14;
  }
  return result;
}

uint64_t specialized closure #1 in closure #3 in Data.init<A>(_:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _StringGuts.copyUTF8(into:)();
    if ((v3 & 1) == 0)
    {
      uint64_t v4 = result;
      uint64_t result = swift_bridgeObjectRelease();
      *a2 = 0;
      a2[1] = 0xE000000000000000;
      a2[2] = 15;
      a2[3] = v4;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 8 * a1 + 32;
    unint64_t v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CMLSimilarityScore]);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (name: String, existingConfigId: [UInt8]));
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 16 * a1 + 32);
    size_t v6 = 16 * v4;
    unint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 4 * a1 + 32);
    size_t v6 = 4 * v4;
    unint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 8 * a1 + 32);
    size_t v6 = 8 * v4;
    unint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Data.InlineData.init(_:)(unsigned char *__src, unsigned char *a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (__src) {
    unint64_t v2 = a2 - __src;
  }
  else {
    unint64_t v2 = 0;
  }
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF) {
    goto LABEL_11;
  }
  memset(__dst, 0, sizeof(__dst));
  char v5 = v2;
  if (__src && a2 != __src) {
    memcpy(__dst, __src, a2 - __src);
  }
  return *(void *)__dst;
}

uint64_t specialized Data.LargeSlice.init(_:)(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a2 - a1;
  }
  else {
    uint64_t v2 = 0;
  }
  type metadata accessor for __DataStorage();
  swift_allocObject();
  uint64_t result = __DataStorage.init(bytes:length:)();
  if (v2 < 0)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for Data.RangeReference();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = v2;
  }
  return result;
}

uint64_t specialized Data.InlineSlice.init(_:)(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a2 - a1;
  }
  else {
    uint64_t v2 = 0;
  }
  type metadata accessor for __DataStorage();
  swift_allocObject();
  uint64_t result = __DataStorage.init(bytes:length:)();
  if (v2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v2 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v2 & 0x80000000) == 0) {
    return v2 << 32;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t specialized Data.init<A>(_:)(uint64_t a1)
{
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
  uint64_t v10 = lazy protocol witness table accessor for type Expression<Double> and conformance Expression<A>((unint64_t *)&lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A], &demangling cache variable for type metadata for [UInt8]);
  v8[0] = a1;
  uint64_t v2 = __swift_project_boxed_opaque_existential_1(v8, v9);
  char v3 = (unsigned char *)(*v2 + 32);
  uint64_t v4 = &v3[*(void *)(*v2 + 16)];
  swift_bridgeObjectRetain();
  closure #1 in Data.init<A>(_:)(v3, v4, &v7);
  uint64_t v5 = v7;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v8);
  return v5;
}

unsigned char *specialized Data._Representation.init(_:)(unsigned char *result, unsigned char *a2)
{
  if (result)
  {
    uint64_t v2 = a2 - result;
    if (a2 == result)
    {
      return 0;
    }
    else if (v2 <= 14)
    {
      return (unsigned char *)specialized Data.InlineData.init(_:)(result, a2);
    }
    else if ((unint64_t)v2 >= 0x7FFFFFFF)
    {
      return (unsigned char *)specialized Data.LargeSlice.init(_:)((uint64_t)result, (uint64_t)a2);
    }
    else
    {
      return (unsigned char *)specialized Data.InlineSlice.init(_:)((uint64_t)result, (uint64_t)a2);
    }
  }
  return result;
}

uint64_t specialized Data._Representation.init(count:)(uint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    if (result <= 14)
    {
      if (result < 0) {
        __break(1u);
      }
      else {
        return 0;
      }
    }
    else
    {
      type metadata accessor for __DataStorage();
      swift_allocObject();
      __DataStorage.init(length:)();
      if (v1 >= 0x7FFFFFFF)
      {
        type metadata accessor for Data.RangeReference();
        uint64_t result = swift_allocObject();
        *(void *)(result + 16) = 0;
        *(void *)(result + 24) = v1;
      }
      else
      {
        return v1 << 32;
      }
    }
  }
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(a5(0) - 8);
    uint64_t v10 = a4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    unint64_t v12 = v10 + v11 * a1;
    unint64_t v13 = a3 + v11 * v5;
    if (v12 >= v13 || v12 + v11 * v5 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t lazy protocol witness table accessor for type Expression<Double> and conformance Expression<A>(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *partial apply for specialized closure #3 in Data.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *(uint64_t **)(v3 + 16);
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  v13[0] = v7;
  v13[1] = v6;
  v12[2] = v13;
  uint64_t result = _sSw17withMemoryRebound2to_q0_xm_q0_SryxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_s5NeverOs16IndexingIteratorVySS8UTF8ViewVG_SitTgm5((void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #1 in closure #3 in Data.init<A>(_:), (uint64_t)v12, a1, a2);
  *a3 = result;
  a3[1] = v9;
  a3[2] = v10;
  a3[3] = v11;
  return result;
}

uint64_t partial apply for specialized closure #1 in closure #3 in Data.init<A>(_:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return specialized closure #1 in closure #3 in Data.init<A>(_:)(a1, a2);
}

uint64_t generateEvaluationKey(secretKey:config:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v45 = a1;
  uint64_t v38 = a3;
  uint64_t v41 = type metadata accessor for HE.SerializedSecretKey();
  uint64_t v39 = *(void *)(v41 - 8);
  MEMORY[0x270FA5388](v41);
  uint64_t v40 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for HE.EvaluationKeyConfig();
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v43 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for HE.SerializedEvaluationKey();
  uint64_t v36 = *(void *)(v7 - 8);
  uint64_t v37 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v42 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for AspireHeEncryptionParameters(0);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for HE.Scheme();
  uint64_t v46 = *(void *)(v16 - 8);
  uint64_t v17 = MEMORY[0x270FA5388](v16);
  size_t v19 = (char *)&v36 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v21 = (char *)&v36 - v20;
  uint64_t v22 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  outlined init with copy of AspireHeEncryptionParameters?(a2 + *(int *)(v22 + 28), (uint64_t)v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    *(void *)uint64_t v15 = 0;
    *((void *)v15 + 1) = 0;
    *((void *)v15 + 2) = MEMORY[0x263F8EE78];
    *((void *)v15 + 3) = 0;
    v15[32] = 1;
    *((void *)v15 + 5) = 0;
    v15[48] = 1;
    *((void *)v15 + 7) = 0;
    v15[64] = 1;
    UnknownStorage.init()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v11, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  }
  else
  {
    outlined init with take of AspireHeEncryptionParameters((uint64_t)v11, (uint64_t)v15, type metadata accessor for AspireHeEncryptionParameters);
  }
  uint64_t v23 = *((void *)v15 + 7);
  int v24 = v15[64];
  outlined destroy of AspireHeEncryptionParameters((uint64_t)v15);
  if (v24 != 1 || v23 == 0)
  {
    type metadata accessor for CipherMLError();
    _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_5((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
    swift_allocError();
    *(void *)uint64_t v26 = v23;
    *(unsigned char *)(v26 + 8) = v24;
    swift_storeEnumTagMultiPayload();
    return swift_willThrow();
  }
  else
  {
    if (v23 == 1) {
      uint64_t v28 = (unsigned int *)MEMORY[0x263F38848];
    }
    else {
      uint64_t v28 = (unsigned int *)MEMORY[0x263F38850];
    }
    uint64_t v29 = a2;
    uint64_t v30 = v44;
    uint64_t v31 = v45;
    uint64_t v32 = v46;
    (*(void (**)(char *, void, uint64_t))(v46 + 104))(v21, *v28, v16);
    AspireHeEvaluationKeyConfig.cryptokit()();
    if (v30)
    {
      return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v21, v16);
    }
    else
    {
      uint64_t v33 = type metadata accessor for SecretKey();
      (*(void (**)(char *, uint64_t, uint64_t))(v39 + 16))(v40, v31 + *(int *)(v33 + 20), v41);
      (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v19, v21, v16);
      double v34 = v42;
      HE.SerializedEvaluationKey.init(config:secretKey:scheme:)();
      uint64_t v35 = type metadata accessor for AspireApiEvaluationKey(0);
      MEMORY[0x270FA5388](v35);
      *(&v36 - 4) = v31;
      *(&v36 - 3) = v29;
      *(&v36 - 2) = (uint64_t)v34;
      _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_5(&lazy protocol witness table cache variable for type AspireApiEvaluationKey and conformance AspireApiEvaluationKey, (void (*)(uint64_t))type metadata accessor for AspireApiEvaluationKey);
      static Message.with(_:)();
      (*(void (**)(char *, uint64_t))(v46 + 8))(v21, v16);
      return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v34, v37);
    }
  }
}

uint64_t outlined init with copy of AspireHeEncryptionParameters?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of AspireHeEncryptionParameters(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AspireHeEncryptionParameters(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t closure #1 in generateEvaluationKey(secretKey:config:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v24 = a1;
  uint64_t v8 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  uint64_t v21 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = a2;
  uint64_t v23 = a3;
  _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_5(&lazy protocol witness table cache variable for type AspireApiEvaluationKeyMetadata and conformance AspireApiEvaluationKeyMetadata, (void (*)(uint64_t))type metadata accessor for AspireApiEvaluationKeyMetadata);
  uint64_t result = static Message.with(_:)();
  if (!v4)
  {
    uint64_t v16 = type metadata accessor for AspireApiEvaluationKey(0);
    uint64_t v17 = v24 + *(int *)(v16 + 20);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v17, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
    outlined init with take of AspireHeEncryptionParameters((uint64_t)v14, v17, type metadata accessor for AspireApiEvaluationKeyMetadata);
    uint64_t v18 = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(v17, 0, 1, v11);
    MEMORY[0x270FA5388](v18);
    *(&v20 - 2) = a4;
    _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_5(&lazy protocol witness table cache variable for type AspireHeSerializedEvaluationKey and conformance AspireHeSerializedEvaluationKey, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedEvaluationKey);
    static Message.with(_:)();
    uint64_t v19 = v24 + *(int *)(v16 + 24);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v19, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
    outlined init with take of AspireHeEncryptionParameters((uint64_t)v10, v19, type metadata accessor for AspireHeSerializedEvaluationKey);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v21 + 56))(v19, 0, 1, v8);
  }
  return result;
}

uint64_t partial apply for closure #1 in generateEvaluationKey(secretKey:config:)(uint64_t a1)
{
  return closure #1 in generateEvaluationKey(secretKey:config:)(a1, v1[2], v1[3], v1[4]);
}

uint64_t closure #1 in closure #1 in generateEvaluationKey(secretKey:config:)(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t result = (uint64_t)specialized Message.hash()();
  if (!v2)
  {
    uint64_t v6 = result;
    uint64_t v7 = v5;
    uint64_t result = outlined consume of Data._Representation(a1[1], a1[2]);
    a1[1] = v6;
    a1[2] = v7;
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in generateEvaluationKey(secretKey:config:)(void *a1)
{
  return closure #1 in closure #1 in generateEvaluationKey(secretKey:config:)(a1, *(void **)(v1 + 16));
}

uint64_t partial apply for closure #1 in HE.SerializedEvaluationKey.proto()(uint64_t a1)
{
  return closure #1 in HE.SerializedEvaluationKey.proto()(a1);
}

uint64_t _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_5(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with take of AspireHeEncryptionParameters(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo8NSNumberCG_Sis5NeverOTg5086_s8CipherML10XPCHandlerC16similarityScores11forElements12shardIndices12clientConfigSayo48So18CMLSimilarityScoreCGGSay10Foundation4DataVG_o3So8D134CGSo09CMLClientK0CtYaKFAkA14RequestContextVyAA19StaticPECParametersVGYaKXEfU_SiAQcfu_33_5bdac5b40c7411f20a64c1277f8fd44fAQSiTf3nnnpk_nTf1cn_nTm(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_15;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t v3 = MEMORY[0x263F8EE78];
    if (!v2) {
      return v3;
    }
    uint64_t v11 = MEMORY[0x263F8EE78];
    uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
    if (v2 < 0) {
      break;
    }
    uint64_t v5 = 0;
    uint64_t v3 = v11;
    while (v2 != v5)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v6 = (id)MEMORY[0x24C5B3860](v5, a1);
      }
      else {
        id v6 = *(id *)(a1 + 8 * v5 + 32);
      }
      uint64_t v7 = v6;
      id v8 = objc_msgSend(v6, sel_integerValue);

      unint64_t v10 = *(void *)(v11 + 16);
      unint64_t v9 = *(void *)(v11 + 24);
      if (v10 >= v9 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1);
      }
      ++v5;
      *(void *)(v11 + 16) = v10 + 1;
      *(void *)(v11 + 8 * v10 + 32) = v8;
      if (v2 == v5) {
        return v3;
      }
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t XPCHandler.requestsManager.getter()
{
  return swift_retain();
}

id XPCHandler.connection.getter()
{
  return *(id *)(v0 + 24);
}

uint64_t XPCHandler.__allocating_init(requestsManager:connection:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  *(void *)(result + 24) = a2;
  return result;
}

uint64_t XPCHandler.init(requestsManager:connection:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return v2;
}

uint64_t XPCHandler.requestData(by:clientConfig:)(uint64_t a1, uint64_t a2)
{
  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  return MEMORY[0x270FA2498](XPCHandler.requestData(by:clientConfig:), 0, 0);
}

uint64_t XPCHandler.requestData(by:clientConfig:)()
{
  uint64_t v2 = (void *)v0[5];
  uint64_t v1 = v0[6];
  uint64_t v3 = v0[4];
  uint64_t v4 = swift_task_alloc();
  v0[7] = v4;
  *(void *)(v4 + 16) = v1;
  *(void *)(v4 + 24) = v3;
  swift_retain();
  id v5 = v2;
  uint64_t v6 = swift_task_alloc();
  v0[8] = v6;
  *(void *)uint64_t v6 = v0;
  *(void *)(v6 + 8) = XPCHandler.requestData(by:clientConfig:);
  int8x16_t v7 = *(int8x16_t *)(v0 + 5);
  *(void *)(v6 + 136) = &async function pointer to partial apply for closure #1 in XPCHandler.requestData(by:clientConfig:);
  *(void *)(v6 + 144) = v4;
  *(int8x16_t *)(v6 + 120) = vextq_s8(v7, v7, 8uLL);
  *(void *)(v6 + 104) = 0xD00000000000001DLL;
  *(void *)(v6 + 112) = 0x8000000249E950C0;
  *(void *)(v6 + 88) = v0 + 2;
  *(void *)(v6 + 96) = v2;
  return MEMORY[0x270FA2498](_s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A012clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlF10Foundation4DataV_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm3312clientConfig6method4bodyxSo09r82O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_10Foundation4T5V_Tg5AcjA14RequestContextVyAA0X13PIRParametersVGxs0E0_pRi_zRi0_zlyANIsgHnrzo_Tf1nnncn_nTY0_, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = XPCHandler.requestData(by:clientConfig:);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = XPCHandler.requestData(by:clientConfig:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void, void))(v0 + 8))(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in XPCHandler.requestData(by:clientConfig:)()
{
  return MEMORY[0x270FA2498](closure #1 in XPCHandler.requestData(by:clientConfig:), 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  type metadata accessor for CipherMLError();
  _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_6((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
  swift_allocError();
  swift_storeEnumTagMultiPayload();
  swift_willThrow();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t partial apply for closure #1 in XPCHandler.requestData(by:clientConfig:)()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return MEMORY[0x270FA2498](closure #1 in XPCHandler.requestData(by:clientConfig:), 0, 0);
}

uint64_t @objc closure #1 in XPCHandler.requestData(by:clientConfig:)(uint64_t a1, void *a2, void *aBlock, uint64_t a4)
{
  v4[2] = a2;
  v4[3] = a4;
  v4[4] = _Block_copy(aBlock);
  id v8 = a2;
  swift_retain();
  uint64_t v9 = (void *)swift_task_alloc();
  v4[5] = v9;
  *uint64_t v9 = v4;
  v9[1] = @objc closure #1 in XPCHandler.requestData(by:clientConfig:);
  v9[5] = v8;
  v9[6] = a4;
  void v9[4] = a1;
  return MEMORY[0x270FA2498](XPCHandler.requestData(by:clientConfig:), 0, 0);
}

uint64_t XPCHandler.requestData(byIndices:clientConfig:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return MEMORY[0x270FA2498](XPCHandler.requestData(byIndices:clientConfig:), 0, 0);
}

uint64_t XPCHandler.requestData(byIndices:clientConfig:)()
{
  uint64_t v2 = (void *)v0[3];
  uint64_t v1 = v0[4];
  uint64_t v3 = v0[2];
  uint64_t v4 = swift_task_alloc();
  v0[5] = v4;
  *(void *)(v4 + 16) = v1;
  *(void *)(v4 + 24) = v3;
  swift_retain();
  id v5 = v2;
  uint64_t v6 = (int8x16_t *)swift_task_alloc();
  v0[6] = v6;
  v6->i64[0] = (uint64_t)v0;
  v6->i64[1] = (uint64_t)XPCHandler.requestData(byIndices:clientConfig:);
  int8x16_t v7 = *(int8x16_t *)(v0 + 3);
  v6[8].i64[0] = (uint64_t)&async function pointer to partial apply for closure #1 in XPCHandler.requestData(byIndices:clientConfig:);
  v6[8].i64[1] = v4;
  v6[7] = vextq_s8(v7, v7, 8uLL);
  v6[6].i64[0] = 0xD000000000000024;
  v6[6].i64[1] = 0x8000000249E950E0;
  v6[5].i64[1] = (uint64_t)v2;
  return MEMORY[0x270FA2498](_s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A012clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFSay10Foundation4DataVG_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm3312clientConfig6method4bodyxSo09r85O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_Say10Foundation4T6VG_TG5AcjA14RequestContextVyAA0X13PIRParametersVGxs0E0_pRi_zRi0_zlyAOIsgHnrzo_Tf1nncn_nTf4nndggg_nTY0_, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t XPCHandler.requestData(byIndices:clientConfig:)(uint64_t a1)
{
  uint64_t v4 = *(void **)(*v2 + 24);
  uint64_t v5 = *v2;
  *(void *)(*v2 + 56) = v1;
  swift_task_dealloc();

  swift_release();
  if (v1)
  {
    return MEMORY[0x270FA2498](XPCHandler.requestData(byIndices:clientConfig:), 0, 0);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(uint64_t))(v5 + 8);
    return v6(a1);
  }
}

uint64_t closure #1 in XPCHandler.requestData(byIndices:clientConfig:)()
{
  return MEMORY[0x270FA2498](closure #1 in XPCHandler.constructPIRRequest(withLatitude:longitude:clientConfig:), 0, 0);
}

uint64_t @objc closure #1 in XPCHandler.requestData(byIndices:clientConfig:)(int a1, void *a2, void *aBlock, uint64_t a4)
{
  v4[2] = a2;
  v4[3] = a4;
  v4[4] = _Block_copy(aBlock);
  type metadata accessor for NSNumber(0, &lazy cache variable for type metadata for NSNumber);
  v4[5] = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v6 = a2;
  swift_retain();
  return MEMORY[0x270FA2498](@objc closure #1 in XPCHandler.requestData(byIndices:clientConfig:), 0, 0);
}

uint64_t @objc closure #1 in XPCHandler.requestData(byIndices:clientConfig:)()
{
  uint64_t v1 = v0[2].i64[1];
  uint64_t v3 = (void *)v0[1].i64[0];
  uint64_t v2 = v0[1].i64[1];
  uint64_t v4 = swift_task_alloc();
  v0[3].i64[0] = v4;
  *(void *)(v4 + 16) = v2;
  *(void *)(v4 + 24) = v1;
  id v5 = v3;
  swift_retain();
  id v6 = (int8x16_t *)swift_task_alloc();
  v0[3].i64[1] = (uint64_t)v6;
  v6->i64[0] = (uint64_t)v0;
  v6->i64[1] = (uint64_t)@objc closure #1 in XPCHandler.requestData(byIndices:clientConfig:);
  int8x16_t v7 = v0[1];
  v6[8].i64[0] = (uint64_t)&closure #1 in XPCHandler.requestData(byIndices:clientConfig:)partial apply;
  v6[8].i64[1] = v4;
  v6[7] = vextq_s8(v7, v7, 8uLL);
  v6[6].i64[0] = 0xD000000000000024;
  v6[6].i64[1] = 0x8000000249E950E0;
  v6[5].i64[1] = (uint64_t)v3;
  return MEMORY[0x270FA2498](_s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A012clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFSay10Foundation4DataVG_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm3312clientConfig6method4bodyxSo09r85O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_Say10Foundation4T6VG_TG5AcjA14RequestContextVyAA0X13PIRParametersVGxs0E0_pRi_zRi0_zlyAOIsgHnrzo_Tf1nncn_nTf4nndggg_nTY0_, 0, 0);
}

{
  uint64_t v0;
  Class isa;
  void (**v2)(void, void, void);
  uint64_t (*v3)(void);
  uint64_t v5;

  swift_release();
  swift_bridgeObjectRelease();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void (***)(void, void, void))(v0 + 32);
  ((void (**)(void, Class, void))v2)[2](v2, isa, 0);

  _Block_release(v2);
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  void (**v3)(void, void, void);
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = *(void **)(v0 + 64);

  swift_release();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v2 = (void *)_convertErrorToNSError(_:)();

  uint64_t v3 = *(void (***)(void, void, void))(v0 + 32);
  ((void (**)(void, void, void *))v3)[2](v3, 0, v2);

  _Block_release(v3);
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t @objc closure #1 in XPCHandler.requestData(byIndices:clientConfig:)(uint64_t a1)
{
  uint64_t v4 = *v2;
  id v5 = *(void **)(*v2 + 16);
  *(void *)(*v2 + 64) = v1;
  swift_task_dealloc();

  swift_release();
  if (v1)
  {
    id v6 = @objc closure #1 in XPCHandler.requestData(byIndices:clientConfig:);
  }
  else
  {
    *(void *)(v4 + 72) = a1;
    swift_task_dealloc();
    id v6 = @objc closure #1 in XPCHandler.requestData(byIndices:clientConfig:);
  }
  return MEMORY[0x270FA2498](v6, 0, 0);
}

uint64_t XPCHandler.requestData(byKeywords:shardIds:clientConfig:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  return MEMORY[0x270FA2498](XPCHandler.requestData(byKeywords:shardIds:clientConfig:), 0, 0);
}

uint64_t XPCHandler.requestData(byKeywords:shardIds:clientConfig:)()
{
  uint64_t v2 = *(void **)(v0 + 32);
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v3 = swift_task_alloc();
  *(void *)(v0 + 48) = v3;
  long long v4 = *(_OWORD *)(v0 + 16);
  *(void *)(v3 + 16) = v1;
  *(_OWORD *)(v3 + 24) = v4;
  swift_retain();
  id v5 = v2;
  id v6 = (int8x16_t *)swift_task_alloc();
  *(void *)(v0 + 56) = v6;
  v6->i64[0] = v0;
  v6->i64[1] = (uint64_t)XPCHandler.requestData(byKeywords:shardIds:clientConfig:);
  int8x16_t v7 = *(int8x16_t *)(v0 + 32);
  v6[8].i64[0] = (uint64_t)&async function pointer to partial apply for closure #1 in XPCHandler.requestData(byKeywords:shardIds:clientConfig:);
  v6[8].i64[1] = v3;
  v6[7] = vextq_s8(v7, v7, 8uLL);
  v6[6].i64[0] = 0xD00000000000002ELL;
  v6[6].i64[1] = 0x8000000249E95110;
  v6[5].i64[1] = (uint64_t)v2;
  return MEMORY[0x270FA2498](_s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A012clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFSaySo8NSObjectCG_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm3312clientConfig6method4bodyxSo09r75O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_SaySo8S6CG_TG5AcjA14RequestContextVyAA0W13PIRParametersVGxs0E0_pRi_zRi0_zlyANIsgHnrzo_Tf1nncn_nTf4nndggg_nTY0_, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t XPCHandler.requestData(byKeywords:shardIds:clientConfig:)(uint64_t a1)
{
  long long v4 = *(void **)(*v2 + 32);
  uint64_t v5 = *v2;
  *(void *)(*v2 + 64) = v1;
  swift_task_dealloc();

  swift_release();
  if (v1)
  {
    return MEMORY[0x270FA2498](XPCHandler.requestData(byKeywords:shardIds:clientConfig:), 0, 0);
  }
  else
  {
    swift_task_dealloc();
    id v6 = *(uint64_t (**)(uint64_t))(v5 + 8);
    return v6(a1);
  }
}

uint64_t closure #1 in XPCHandler.requestData(byKeywords:shardIds:clientConfig:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return MEMORY[0x270FA2498](closure #1 in XPCHandler.requestData(byKeywords:shardIds:clientConfig:), 0, 0);
}

uint64_t closure #1 in XPCHandler.requestData(byKeywords:shardIds:clientConfig:)()
{
  uint64_t v1 = (void *)swift_task_alloc();
  v0[7] = v1;
  *uint64_t v1 = v0;
  v1[1] = closure #1 in XPCHandler.requestData(byKeywords:shardIds:clientConfig:);
  uint64_t v3 = v0[5];
  uint64_t v2 = v0[6];
  uint64_t v4 = v0[3];
  return RequestsManager.requestData(keywords:context:shardIds:)(v3, v4, v2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;
  uint64_t v10;

  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v9 = MEMORY[0x263F8EE78];
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v3 = (unint64_t *)(v1 + 40);
    do
    {
      uint64_t v4 = *v3;
      if (*v3 >> 60 == 15)
      {
        objc_msgSend(objc_allocWithZone(MEMORY[0x263EFF9D0]), sel_init);
      }
      else
      {
        uint64_t v5 = *(v3 - 1);
        outlined copy of Data._Representation(v5, *v3);
        Data._bridgeToObjectiveC()();
        outlined consume of Data?(v5, v4);
      }
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v3 += 2;
      --v2;
    }
    while (v2);
    uint64_t v6 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v6 = MEMORY[0x263F8EE78];
  }
  **(void **)(v0 + 16) = v6;
  int8x16_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t closure #1 in XPCHandler.requestData(byKeywords:shardIds:clientConfig:)(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 64) = a1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = *(uint64_t (**)(void))(v3 + 8);
    return v4();
  }
  else
  {
    return MEMORY[0x270FA2498](closure #1 in XPCHandler.requestData(byKeywords:shardIds:clientConfig:), 0, 0);
  }
}

uint64_t @objc closure #1 in XPCHandler.requestData(byKeywords:shardIds:clientConfig:)(int a1, int a2, void *a3, void *aBlock, uint64_t a5)
{
  v5[2] = a3;
  v5[3] = a5;
  v5[4] = _Block_copy(aBlock);
  v5[5] = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v5[6] = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v7 = a3;
  swift_retain();
  return MEMORY[0x270FA2498](@objc closure #1 in XPCHandler.requestData(byKeywords:shardIds:clientConfig:), 0, 0);
}

uint64_t @objc closure #1 in XPCHandler.requestData(byKeywords:shardIds:clientConfig:)()
{
  uint64_t v2 = *(void **)(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v3 = swift_task_alloc();
  *(void *)(v0 + 56) = v3;
  long long v4 = *(_OWORD *)(v0 + 40);
  *(void *)(v3 + 16) = v1;
  *(_OWORD *)(v3 + 24) = v4;
  id v5 = v2;
  swift_retain();
  uint64_t v6 = (int8x16_t *)swift_task_alloc();
  *(void *)(v0 + 64) = v6;
  v6->i64[0] = v0;
  v6->i64[1] = (uint64_t)@objc closure #1 in XPCHandler.requestData(byKeywords:shardIds:clientConfig:);
  int8x16_t v7 = *(int8x16_t *)(v0 + 16);
  v6[8].i64[0] = (uint64_t)&closure #1 in XPCHandler.requestData(byKeywords:shardIds:clientConfig:)partial apply;
  v6[8].i64[1] = v3;
  v6[7] = vextq_s8(v7, v7, 8uLL);
  v6[6].i64[0] = 0xD00000000000002ELL;
  v6[6].i64[1] = 0x8000000249E95110;
  v6[5].i64[1] = (uint64_t)v2;
  return MEMORY[0x270FA2498](_s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A012clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFSaySo8NSObjectCG_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm3312clientConfig6method4bodyxSo09r75O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_SaySo8S6CG_TG5AcjA14RequestContextVyAA0W13PIRParametersVGxs0E0_pRi_zRi0_zlyANIsgHnrzo_Tf1nncn_nTf4nndggg_nTY0_, 0, 0);
}

{
  uint64_t v0;
  Class isa;
  void (**v2)(void, void, void);
  uint64_t (*v3)(void);
  uint64_t v5;

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  type metadata accessor for NSNumber(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void (***)(void, void, void))(v0 + 32);
  ((void (**)(void, Class, void))v2)[2](v2, isa, 0);

  _Block_release(v2);
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  void (**v3)(void, void, void);
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = *(void **)(v0 + 72);

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v2 = (void *)_convertErrorToNSError(_:)();

  uint64_t v3 = *(void (***)(void, void, void))(v0 + 32);
  ((void (**)(void, void, void *))v3)[2](v3, 0, v2);

  _Block_release(v3);
  long long v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t @objc closure #1 in XPCHandler.requestData(byKeywords:shardIds:clientConfig:)(uint64_t a1)
{
  uint64_t v4 = *v2;
  id v5 = *(void **)(*v2 + 16);
  *(void *)(*v2 + 72) = v1;
  swift_task_dealloc();

  swift_release();
  if (v1)
  {
    uint64_t v6 = @objc closure #1 in XPCHandler.requestData(byKeywords:shardIds:clientConfig:);
  }
  else
  {
    *(void *)(v4 + 80) = a1;
    swift_task_dealloc();
    uint64_t v6 = @objc closure #1 in XPCHandler.requestData(byKeywords:shardIds:clientConfig:);
  }
  return MEMORY[0x270FA2498](v6, 0, 0);
}

uint64_t XPCHandler.requestData(byLatitude:longitude:clientConfig:)(uint64_t a1, double a2, double a3)
{
  *(void *)(v4 + 48) = a1;
  *(void *)(v4 + 56) = v3;
  *(double *)(v4 + 32) = a2;
  *(double *)(v4 + 40) = a3;
  return MEMORY[0x270FA2498](XPCHandler.requestData(byLatitude:longitude:clientConfig:), 0, 0);
}

uint64_t XPCHandler.requestData(byLatitude:longitude:clientConfig:)()
{
  uint64_t v2 = (void *)v0[3].i64[0];
  uint64_t v1 = v0[3].i64[1];
  uint64_t v4 = v0[2].i64[0];
  uint64_t v3 = v0[2].i64[1];
  id v5 = (void *)swift_task_alloc();
  v0[4].i64[0] = (uint64_t)v5;
  v5[2] = v1;
  v5[3] = v4;
  v5[4] = v3;
  swift_retain();
  id v6 = v2;
  uint64_t v7 = swift_task_alloc();
  v0[4].i64[1] = v7;
  *(void *)uint64_t v7 = v0;
  *(void *)(v7 + 8) = XPCHandler.requestData(byLatitude:longitude:clientConfig:);
  int8x16_t v8 = v0[3];
  *(void *)(v7 + 136) = &async function pointer to partial apply for closure #1 in XPCHandler.requestData(byLatitude:longitude:clientConfig:);
  *(void *)(v7 + 144) = v5;
  *(int8x16_t *)(v7 + 120) = vextq_s8(v8, v8, 8uLL);
  *(void *)(v7 + 104) = 0xD00000000000002FLL;
  *(void *)(v7 + 112) = 0x8000000249E95140;
  *(void *)(v7 + 88) = v0 + 1;
  *(void *)(v7 + 96) = v2;
  return MEMORY[0x270FA2498](_s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A012clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlF10Foundation4DataV_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm3312clientConfig6method4bodyxSo09r82O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_10Foundation4T5V_Tg5AcjA14RequestContextVyAA0X13PIRParametersVGxs0E0_pRi_zRi0_zlyANIsgHnrzo_Tf1nnncn_nTY0_, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = XPCHandler.requestData(byLatitude:longitude:clientConfig:);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = XPCHandler.requestData(by:clientConfig:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t @objc closure #1 in XPCHandler.requestData(byLatitude:longitude:clientConfig:)(void *a1, void *aBlock, uint64_t a3, double a4, double a5)
{
  v5[2] = a1;
  v5[3] = a3;
  v5[4] = _Block_copy(aBlock);
  id v10 = a1;
  swift_retain();
  uint64_t v11 = swift_task_alloc();
  v5[5] = v11;
  *(void *)uint64_t v11 = v5;
  *(void *)(v11 + 8) = @objc closure #1 in XPCHandler.requestData(byLatitude:longitude:clientConfig:);
  *(void *)(v11 + 48) = v10;
  *(void *)(v11 + 56) = a3;
  *(double *)(v11 + 32) = a4;
  *(double *)(v11 + 40) = a5;
  return MEMORY[0x270FA2498](XPCHandler.requestData(byLatitude:longitude:clientConfig:), 0, 0);
}

uint64_t @objc closure #1 in XPCHandler.requestData(byLatitude:longitude:clientConfig:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v7 = *v3;
  int8x16_t v8 = *(void **)(*v3 + 16);
  uint64_t v9 = *v3;
  swift_task_dealloc();

  swift_release();
  if (v4)
  {
    uint64_t v10 = _convertErrorToNSError(_:)();

    Class isa = 0;
    uint64_t v12 = (void *)v10;
  }
  else
  {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data._Representation(a1, a2);
    uint64_t v10 = 0;
    uint64_t v12 = isa;
  }
  uint64_t v13 = *(void (***)(void, void, void))(v7 + 32);
  ((void (**)(void, Class, uint64_t))v13)[2](v13, isa, v10);

  _Block_release(v13);
  uint64_t v14 = *(uint64_t (**)(void))(v9 + 8);
  return v14();
}

uint64_t XPCHandler.removedCachedEntries(byKeywords:clientConfig:)(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  return MEMORY[0x270FA2498](XPCHandler.removedCachedEntries(byKeywords:clientConfig:), 0, 0);
}

uint64_t XPCHandler.removedCachedEntries(byKeywords:clientConfig:)()
{
  uint64_t v2 = (void *)v0[2].i64[0];
  uint64_t v1 = v0[2].i64[1];
  uint64_t v3 = v0[1].i64[1];
  v0[1].i64[0] = 0;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[3].i64[0] = (uint64_t)v4;
  v4[2] = v0 + 1;
  v4[3] = v1;
  v4[4] = v3;
  swift_retain();
  id v5 = v2;
  uint64_t v6 = swift_task_alloc();
  v0[3].i64[1] = v6;
  *(void *)uint64_t v6 = v0;
  *(void *)(v6 + 8) = XPCHandler.removedCachedEntries(byKeywords:clientConfig:);
  int8x16_t v7 = v0[2];
  *(void *)(v6 + 136) = &async function pointer to partial apply for closure #1 in XPCHandler.removedCachedEntries(byKeywords:clientConfig:);
  *(void *)(v6 + 144) = v4;
  *(int8x16_t *)(v6 + 120) = vextq_s8(v7, v7, 8uLL);
  *(void *)(v6 + 104) = 0xD00000000000002ELL;
  *(void *)(v6 + 112) = 0x8000000249E95170;
  *(void *)(v6 + 96) = v2;
  return MEMORY[0x270FA2498](_s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A012clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFyt_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm3312clientConfig6method4bodyxSo09R75O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_yt_Tg5AcjA14RequestContextVyAA0V13PIRParametersVGxs0E0_pRi_zRi0_zlyytIsgHnrzo_Tf1nnncn_nTY0_, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = XPCHandler.requestData(byKeywords:shardIds:clientConfig:);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = XPCHandler.removedCachedEntries(byKeywords:clientConfig:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 16));
}

uint64_t closure #1 in XPCHandler.removedCachedEntries(byKeywords:clientConfig:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[4] = a4;
  v5[5] = a5;
  v5[2] = a2;
  v5[3] = a3;
  return MEMORY[0x270FA2498](closure #1 in XPCHandler.removedCachedEntries(byKeywords:clientConfig:), 0, 0);
}

uint64_t closure #1 in XPCHandler.removedCachedEntries(byKeywords:clientConfig:)()
{
  uint64_t v1 = (void *)swift_task_alloc();
  v0[6] = v1;
  *uint64_t v1 = v0;
  v1[1] = closure #1 in XPCHandler.removedCachedEntries(byKeywords:clientConfig:);
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[2];
  return RequestsManager.removeCachedKeywords(keywords:context:)(v2, v3);
}

{
  uint64_t v0;

  **(void **)(v0 + 24) = *(void *)(v0 + 56);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in XPCHandler.removedCachedEntries(byKeywords:clientConfig:)(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
  else
  {
    *(void *)(v4 + 56) = a1;
    return MEMORY[0x270FA2498](closure #1 in XPCHandler.removedCachedEntries(byKeywords:clientConfig:), 0, 0);
  }
}

uint64_t @objc closure #1 in XPCHandler.removedCachedEntries(byKeywords:clientConfig:)(int a1, void *a2, void *aBlock, uint64_t a4)
{
  v4[2] = a2;
  v4[3] = a4;
  v4[4] = _Block_copy(aBlock);
  uint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v4[5] = v7;
  id v8 = a2;
  swift_retain();
  uint64_t v9 = (void *)swift_task_alloc();
  v4[6] = v9;
  *uint64_t v9 = v4;
  v9[1] = @objc closure #1 in XPCHandler.removedCachedEntries(byKeywords:clientConfig:);
  void v9[4] = v8;
  v9[5] = a4;
  v9[3] = v7;
  return MEMORY[0x270FA2498](XPCHandler.removedCachedEntries(byKeywords:clientConfig:), 0, 0);
}

uint64_t @objc closure #1 in XPCHandler.removedCachedEntries(byKeywords:clientConfig:)(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v6 = *v2;
  uint64_t v5 = *v2;
  uint64_t v7 = *(void **)(*v2 + 16);
  uint64_t v8 = *v2;
  swift_task_dealloc();

  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(v5 + 32);
  if (v3)
  {
    uint64_t v10 = (void *)_convertErrorToNSError(_:)();

    (*(void (**)(uint64_t))(v9 + 16))(v9);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, void))(v9 + 16))(v9, a1, 0);
  }
  _Block_release(*(const void **)(v6 + 32));
  uint64_t v11 = *(uint64_t (**)(void))(v8 + 8);
  return v11();
}

uint64_t XPCHandler.setPIRConfig(_:clientConfig:)(uint64_t a1, uint64_t a2)
{
  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  return MEMORY[0x270FA2498](XPCHandler.setPIRConfig(_:clientConfig:), 0, 0);
}

uint64_t XPCHandler.setPIRConfig(_:clientConfig:)()
{
  uint64_t v2 = (void *)v0[5];
  uint64_t v1 = v0[6];
  uint64_t v3 = v0[4];
  uint64_t v4 = swift_task_alloc();
  v0[7] = v4;
  *(void *)(v4 + 16) = v1;
  *(void *)(v4 + 24) = v3;
  swift_retain();
  id v5 = v2;
  uint64_t v6 = swift_task_alloc();
  v0[8] = v6;
  *(void *)uint64_t v6 = v0;
  *(void *)(v6 + 8) = XPCHandler.setPIRConfig(_:clientConfig:);
  int8x16_t v7 = *(int8x16_t *)(v0 + 5);
  *(void *)(v6 + 136) = &async function pointer to partial apply for closure #1 in XPCHandler.setPIRConfig(_:clientConfig:);
  *(void *)(v6 + 144) = v4;
  *(int8x16_t *)(v6 + 120) = vextq_s8(v7, v7, 8uLL);
  *(void *)(v6 + 104) = 0xD00000000000001DLL;
  *(void *)(v6 + 112) = 0x8000000249E951A0;
  *(void *)(v6 + 88) = v0 + 2;
  *(void *)(v6 + 96) = v2;
  return MEMORY[0x270FA2498](_s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A012clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlF10Foundation4DataVSg_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm3312clientConfig6method4bodyxSo09r82O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_10Foundation4T7VSg_Tg5AcjA14RequestContextVyAA0X13PIRParametersVGxs0E0_pRi_zRi0_zlyAOIsgHnrzo_Tf1nnncn_nTY0_, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = XPCHandler.setPIRConfig(_:clientConfig:);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = XPCHandler.constructPIRBatchRequest(withKeywords:shardIds:clientConfig:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

uint64_t closure #1 in XPCHandler.setPIRConfig(_:clientConfig:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  return MEMORY[0x270FA2498](closure #1 in XPCHandler.setPIRConfig(_:clientConfig:), 0, 0);
}

uint64_t closure #1 in XPCHandler.setPIRConfig(_:clientConfig:)()
{
  uint64_t v1 = (void *)swift_task_alloc();
  v0[6] = v1;
  *uint64_t v1 = v0;
  v1[1] = closure #1 in XPCHandler.setPIRConfig(_:clientConfig:);
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[3];
  return RequestsManager.setPIRConfig(config:context:)(v2, v3);
}

uint64_t closure #1 in XPCHandler.setPIRConfig(_:clientConfig:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  uint64_t v7 = *v3;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v8 = *(uint64_t (**)(void))(v7 + 8);
    return v8();
  }
  else
  {
    *(void *)(v6 + 56) = a2;
    *(void *)(v6 + 64) = a1;
    return MEMORY[0x270FA2498](closure #1 in XPCHandler.setPIRConfig(_:clientConfig:), 0, 0);
  }
}

uint64_t @objc closure #1 in XPCHandler.setPIRConfig(_:clientConfig:)(void *a1, void *a2, void *aBlock, uint64_t a4)
{
  v4[3] = a2;
  v4[4] = a4;
  v4[2] = a1;
  v4[5] = _Block_copy(aBlock);
  id v8 = a1;
  id v9 = a2;
  swift_retain();
  uint64_t v10 = (void *)swift_task_alloc();
  v4[6] = v10;
  *uint64_t v10 = v4;
  v10[1] = @objc closure #1 in XPCHandler.generateEvaluationKey(_:clientConfig:);
  v10[5] = v9;
  v10[6] = a4;
  v10[4] = v8;
  return MEMORY[0x270FA2498](XPCHandler.setPIRConfig(_:clientConfig:), 0, 0);
}

uint64_t XPCHandler.generateEvaluationKey(_:clientConfig:)(uint64_t a1, uint64_t a2)
{
  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  return MEMORY[0x270FA2498](XPCHandler.generateEvaluationKey(_:clientConfig:), 0, 0);
}

uint64_t XPCHandler.generateEvaluationKey(_:clientConfig:)()
{
  uint64_t v2 = (void *)v0[5];
  uint64_t v1 = v0[6];
  uint64_t v3 = v0[4];
  uint64_t v4 = swift_task_alloc();
  v0[7] = v4;
  *(void *)(v4 + 16) = v1;
  *(void *)(v4 + 24) = v3;
  swift_retain();
  id v5 = v2;
  uint64_t v6 = swift_task_alloc();
  v0[8] = v6;
  *(void *)uint64_t v6 = v0;
  *(void *)(v6 + 8) = XPCHandler.setPIRConfig(_:clientConfig:);
  int8x16_t v7 = *(int8x16_t *)(v0 + 5);
  *(void *)(v6 + 136) = &async function pointer to partial apply for closure #1 in XPCHandler.generateEvaluationKey(_:clientConfig:);
  *(void *)(v6 + 144) = v4;
  *(int8x16_t *)(v6 + 120) = vextq_s8(v7, v7, 8uLL);
  *(void *)(v6 + 104) = 0xD000000000000026;
  *(void *)(v6 + 112) = 0x8000000249E951C0;
  *(void *)(v6 + 88) = v0 + 2;
  *(void *)(v6 + 96) = v2;
  return MEMORY[0x270FA2498](_s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A012clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlF10Foundation4DataV_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm3312clientConfig6method4bodyxSo09r82O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_10Foundation4T5V_Tg5AcjA14RequestContextVyAA0X13PIRParametersVGxs0E0_pRi_zRi0_zlyANIsgHnrzo_Tf1nnncn_nTY0_, 0, 0);
}

uint64_t closure #1 in XPCHandler.generateEvaluationKey(_:clientConfig:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  type metadata accessor for RequestsManager.PIRContext();
  v4[6] = swift_task_alloc();
  v4[7] = type metadata accessor for AspireApiEvaluationKey(0);
  v4[8] = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #1 in XPCHandler.generateEvaluationKey(_:clientConfig:), 0, 0);
}

uint64_t closure #1 in XPCHandler.generateEvaluationKey(_:clientConfig:)()
{
  v0[9] = *(void *)(v0[4] + 16);
  uint64_t v1 = (void *)swift_task_alloc();
  v0[10] = v1;
  *uint64_t v1 = v0;
  v1[1] = closure #1 in XPCHandler.generateEvaluationKey(_:clientConfig:);
  uint64_t v2 = v0[6];
  uint64_t v3 = v0[3];
  return RequestsManager.loadContext(requestContext:allowingKeyRotation:)(v2, v3, 1);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 88) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = closure #1 in XPCHandler.generateEvaluationKey(_:clientConfig:);
  }
  else {
    uint64_t v2 = closure #1 in XPCHandler.generateEvaluationKey(_:clientConfig:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t (*v8)(void);
  uint64_t v9;

  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v2 = *(void *)(v0 + 48);
  RequestsManager.generateEvaluationKey(config:pirContext:)(*(void **)(v0 + 40), v2, *(void *)(v0 + 64));
  _s8CipherML12UseCaseGroupVWOhTm_0(v2, (uint64_t (*)(void))type metadata accessor for RequestsManager.PIRContext);
  if (!v1)
  {
    _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_6(&lazy protocol witness table cache variable for type AspireApiEvaluationKey and conformance AspireApiEvaluationKey, (void (*)(uint64_t))type metadata accessor for AspireApiEvaluationKey);
    uint64_t v4 = Message.serializedData(partial:)();
    uint64_t v6 = v5;
    int8x16_t v7 = *(uint64_t **)(v0 + 16);
    _s8CipherML12UseCaseGroupVWOhTm_0(*(void *)(v0 + 64), type metadata accessor for AspireApiEvaluationKey);
    *int8x16_t v7 = v4;
    v7[1] = v6;
  }
  swift_task_dealloc();
  swift_task_dealloc();
  id v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t @objc closure #1 in XPCHandler.generateEvaluationKey(_:clientConfig:)(void *a1, void *a2, void *aBlock, uint64_t a4)
{
  v4[3] = a2;
  v4[4] = a4;
  v4[2] = a1;
  v4[5] = _Block_copy(aBlock);
  id v8 = a1;
  id v9 = a2;
  swift_retain();
  uint64_t v10 = (void *)swift_task_alloc();
  v4[6] = v10;
  *uint64_t v10 = v4;
  v10[1] = @objc closure #1 in XPCHandler.generateEvaluationKey(_:clientConfig:);
  v10[5] = v9;
  v10[6] = a4;
  v10[4] = v8;
  return MEMORY[0x270FA2498](XPCHandler.generateEvaluationKey(_:clientConfig:), 0, 0);
}

uint64_t XPCHandler.constructPIRRequest(with:clientConfig:)(uint64_t a1, uint64_t a2)
{
  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  return MEMORY[0x270FA2498](XPCHandler.constructPIRRequest(with:clientConfig:), 0, 0);
}

uint64_t XPCHandler.constructPIRRequest(with:clientConfig:)()
{
  uint64_t v2 = (void *)v0[5];
  uint64_t v1 = v0[6];
  uint64_t v3 = v0[4];
  uint64_t v4 = swift_task_alloc();
  v0[7] = v4;
  *(void *)(v4 + 16) = v1;
  *(void *)(v4 + 24) = v3;
  swift_retain();
  id v5 = v2;
  uint64_t v6 = swift_task_alloc();
  v0[8] = v6;
  *(void *)uint64_t v6 = v0;
  *(void *)(v6 + 8) = XPCHandler.setPIRConfig(_:clientConfig:);
  int8x16_t v7 = *(int8x16_t *)(v0 + 5);
  *(void *)(v6 + 136) = &async function pointer to partial apply for closure #1 in XPCHandler.constructPIRRequest(with:clientConfig:);
  *(void *)(v6 + 144) = v4;
  *(int8x16_t *)(v6 + 120) = vextq_s8(v7, v7, 8uLL);
  *(void *)(v6 + 104) = 0xD000000000000027;
  *(void *)(v6 + 112) = 0x8000000249E951F0;
  *(void *)(v6 + 88) = v0 + 2;
  *(void *)(v6 + 96) = v2;
  return MEMORY[0x270FA2498](_s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A012clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlF10Foundation4DataVSg_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm3312clientConfig6method4bodyxSo09r82O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_10Foundation4T7VSg_Tg5AcjA14RequestContextVyAA0X13PIRParametersVGxs0E0_pRi_zRi0_zlyAOIsgHnrzo_Tf1nnncn_nTY0_, 0, 0);
}

uint64_t @objc closure #1 in XPCHandler.constructPIRRequest(with:clientConfig:)(uint64_t a1, void *a2, void *aBlock, uint64_t a4)
{
  v4[2] = a2;
  v4[3] = a4;
  v4[4] = _Block_copy(aBlock);
  id v8 = a2;
  swift_retain();
  uint64_t v9 = (void *)swift_task_alloc();
  v4[5] = v9;
  *uint64_t v9 = v4;
  v9[1] = @objc closure #1 in XPCHandler.constructPIRRequest(with:clientConfig:);
  v9[5] = v8;
  v9[6] = a4;
  void v9[4] = a1;
  return MEMORY[0x270FA2498](XPCHandler.constructPIRRequest(with:clientConfig:), 0, 0);
}

uint64_t @objc closure #1 in XPCHandler.constructPIRRequest(with:clientConfig:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v7 = *v3;
  id v8 = *(void **)(*v3 + 16);
  uint64_t v9 = *v3;
  swift_task_dealloc();

  swift_release();
  if (v4)
  {
    uint64_t v10 = _convertErrorToNSError(_:)();

    Class isa = 0;
    uint64_t v12 = (void *)v10;
  }
  else if (a2 >> 60 == 15)
  {
    uint64_t v10 = 0;
    Class isa = 0;
    uint64_t v12 = 0;
  }
  else
  {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data?(a1, a2);
    uint64_t v10 = 0;
    uint64_t v12 = isa;
  }
  uint64_t v13 = *(void (***)(void, void, void))(v7 + 32);
  ((void (**)(void, Class, uint64_t))v13)[2](v13, isa, v10);

  _Block_release(v13);
  uint64_t v14 = *(uint64_t (**)(void))(v9 + 8);
  return v14();
}

uint64_t XPCHandler.constructPIRBatchRequest(withIndices:clientConfig:)(uint64_t a1, uint64_t a2)
{
  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  return MEMORY[0x270FA2498](XPCHandler.constructPIRBatchRequest(withIndices:clientConfig:), 0, 0);
}

uint64_t XPCHandler.constructPIRBatchRequest(withIndices:clientConfig:)()
{
  uint64_t v2 = (void *)v0[5];
  uint64_t v1 = v0[6];
  uint64_t v3 = v0[4];
  uint64_t v4 = swift_task_alloc();
  v0[7] = v4;
  *(void *)(v4 + 16) = v1;
  *(void *)(v4 + 24) = v3;
  swift_retain();
  id v5 = v2;
  uint64_t v6 = swift_task_alloc();
  v0[8] = v6;
  *(void *)uint64_t v6 = v0;
  *(void *)(v6 + 8) = XPCHandler.setPIRConfig(_:clientConfig:);
  int8x16_t v7 = *(int8x16_t *)(v0 + 5);
  *(void *)(v6 + 136) = &async function pointer to partial apply for closure #1 in XPCHandler.constructPIRBatchRequest(withIndices:clientConfig:);
  *(void *)(v6 + 144) = v4;
  *(int8x16_t *)(v6 + 120) = vextq_s8(v7, v7, 8uLL);
  *(void *)(v6 + 104) = 0xD000000000000033;
  *(void *)(v6 + 112) = 0x8000000249E95220;
  *(void *)(v6 + 88) = v0 + 2;
  *(void *)(v6 + 96) = v2;
  return MEMORY[0x270FA2498](_s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A012clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlF10Foundation4DataVSg_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm3312clientConfig6method4bodyxSo09r82O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_10Foundation4T7VSg_Tg5AcjA14RequestContextVyAA0X13PIRParametersVGxs0E0_pRi_zRi0_zlyAOIsgHnrzo_Tf1nnncn_nTY0_, 0, 0);
}

uint64_t @objc closure #1 in XPCHandler.constructPIRBatchRequest(withIndices:clientConfig:)(int a1, void *a2, void *aBlock, uint64_t a4)
{
  v4[2] = a2;
  v4[3] = a4;
  v4[4] = _Block_copy(aBlock);
  type metadata accessor for NSNumber(0, &lazy cache variable for type metadata for NSNumber);
  uint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v4[5] = v7;
  id v8 = a2;
  swift_retain();
  uint64_t v9 = (void *)swift_task_alloc();
  v4[6] = v9;
  *uint64_t v9 = v4;
  v9[1] = @objc closure #1 in XPCHandler.constructPIRBatchRequest(withIndices:clientConfig:);
  v9[5] = v8;
  v9[6] = a4;
  void v9[4] = v7;
  return MEMORY[0x270FA2498](XPCHandler.constructPIRBatchRequest(withIndices:clientConfig:), 0, 0);
}

uint64_t @objc closure #1 in XPCHandler.constructPIRBatchRequest(withIndices:clientConfig:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v7 = *v3;
  id v8 = *(void **)(*v3 + 16);
  uint64_t v9 = *v3;
  swift_task_dealloc();

  swift_release();
  swift_bridgeObjectRelease();
  if (v4)
  {
    uint64_t v10 = _convertErrorToNSError(_:)();

    Class isa = 0;
    uint64_t v12 = (void *)v10;
  }
  else if (a2 >> 60 == 15)
  {
    uint64_t v10 = 0;
    Class isa = 0;
    uint64_t v12 = 0;
  }
  else
  {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data?(a1, a2);
    uint64_t v10 = 0;
    uint64_t v12 = isa;
  }
  uint64_t v13 = *(void (***)(void, void, void))(v7 + 32);
  ((void (**)(void, Class, uint64_t))v13)[2](v13, isa, v10);

  _Block_release(v13);
  uint64_t v14 = *(uint64_t (**)(void))(v9 + 8);
  return v14();
}

uint64_t XPCHandler.decryptPIRResponse(_:index:clientConfig:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[7] = a4;
  v5[8] = v4;
  v5[5] = a2;
  v5[6] = a3;
  v5[4] = a1;
  return MEMORY[0x270FA2498](XPCHandler.decryptPIRResponse(_:index:clientConfig:), 0, 0);
}

uint64_t XPCHandler.decryptPIRResponse(_:index:clientConfig:)()
{
  uint64_t v2 = *(void **)(v0 + 56);
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v3 = *(void *)(v0 + 48);
  long long v9 = *(_OWORD *)(v0 + 32);
  uint64_t v4 = swift_task_alloc();
  *(void *)(v0 + 72) = v4;
  *(void *)(v4 + 16) = v1;
  *(_OWORD *)(v4 + 24) = v9;
  *(void *)(v4 + 40) = v3;
  swift_retain();
  id v5 = v2;
  uint64_t v6 = swift_task_alloc();
  *(void *)(v0 + 80) = v6;
  *(void *)uint64_t v6 = v0;
  *(void *)(v6 + 8) = XPCHandler.decryptPIRResponse(_:index:clientConfig:);
  int8x16_t v7 = *(int8x16_t *)(v0 + 56);
  *(void *)(v6 + 136) = &async function pointer to partial apply for closure #1 in XPCHandler.decryptPIRResponse(_:index:clientConfig:);
  *(void *)(v6 + 144) = v4;
  *(int8x16_t *)(v6 + 120) = vextq_s8(v7, v7, 8uLL);
  *(void *)(v6 + 104) = 0xD000000000000029;
  *(void *)(v6 + 112) = 0x8000000249E95260;
  *(void *)(v6 + 88) = v0 + 16;
  *(void *)(v6 + 96) = v2;
  return MEMORY[0x270FA2498](_s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A012clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlF10Foundation4DataV_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm3312clientConfig6method4bodyxSo09r82O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_10Foundation4T5V_Tg5AcjA14RequestContextVyAA0X13PIRParametersVGxs0E0_pRi_zRi0_zlyANIsgHnrzo_Tf1nnncn_nTY0_, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 88) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = XPCHandler.decryptPIRResponse(_:index:clientConfig:);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = XPCHandler.requestData(by:clientConfig:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t @objc closure #1 in XPCHandler.decryptPIRResponse(_:index:clientConfig:)(void *a1, uint64_t a2, void *a3, void *aBlock, uint64_t a5)
{
  v5[2] = a3;
  v5[3] = a5;
  v5[4] = _Block_copy(aBlock);
  id v10 = a1;
  id v11 = a3;
  swift_retain();
  uint64_t v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v14 = v13;

  v5[5] = v12;
  v5[6] = v14;
  uint64_t v15 = (void *)swift_task_alloc();
  v5[7] = v15;
  *uint64_t v15 = v5;
  v15[1] = @objc closure #1 in XPCHandler.decryptPIRResponse(_:index:clientConfig:);
  v15[7] = v11;
  v15[8] = a5;
  v15[5] = v14;
  v15[6] = a2;
  v15[4] = v12;
  return MEMORY[0x270FA2498](XPCHandler.decryptPIRResponse(_:index:clientConfig:), 0, 0);
}

uint64_t @objc closure #1 in XPCHandler.decryptPIRResponse(_:index:clientConfig:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v8 = *v3;
  uint64_t v7 = *v3;
  long long v9 = *(void **)(*v3 + 16);
  uint64_t v10 = *v3;
  swift_task_dealloc();

  swift_release();
  outlined consume of Data._Representation(*(void *)(v7 + 40), *(void *)(v7 + 48));
  if (v4)
  {
    uint64_t v11 = _convertErrorToNSError(_:)();

    Class isa = 0;
    uint64_t v13 = (void *)v11;
  }
  else
  {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data._Representation(a1, a2);
    uint64_t v11 = 0;
    uint64_t v13 = isa;
  }
  uint64_t v14 = *(void (***)(void, void, void))(v8 + 32);
  ((void (**)(void, Class, uint64_t))v14)[2](v14, isa, v11);

  _Block_release(v14);
  uint64_t v15 = *(uint64_t (**)(void))(v10 + 8);
  return v15();
}

uint64_t XPCHandler.decryptPIRBatchResponse(_:indices:clientConfig:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return MEMORY[0x270FA2498](XPCHandler.decryptPIRBatchResponse(_:indices:clientConfig:), 0, 0);
}

uint64_t XPCHandler.decryptPIRBatchResponse(_:indices:clientConfig:)()
{
  uint64_t v2 = *(void **)(v0 + 40);
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v3 = *(void *)(v0 + 32);
  long long v9 = *(_OWORD *)(v0 + 16);
  uint64_t v4 = swift_task_alloc();
  *(void *)(v0 + 56) = v4;
  *(void *)(v4 + 16) = v1;
  *(_OWORD *)(v4 + 24) = v9;
  *(void *)(v4 + 40) = v3;
  swift_retain();
  id v5 = v2;
  uint64_t v6 = (int8x16_t *)swift_task_alloc();
  *(void *)(v0 + 64) = v6;
  v6->i64[0] = v0;
  v6->i64[1] = (uint64_t)XPCHandler.decryptPIRBatchResponse(_:indices:clientConfig:);
  int8x16_t v7 = *(int8x16_t *)(v0 + 40);
  v6[8].i64[0] = (uint64_t)&async function pointer to partial apply for closure #1 in XPCHandler.decryptPIRBatchResponse(_:indices:clientConfig:);
  v6[8].i64[1] = v4;
  v6[7] = vextq_s8(v7, v7, 8uLL);
  v6[6].i64[0] = 0xD000000000000030;
  v6[6].i64[1] = 0x8000000249E95290;
  v6[5].i64[1] = (uint64_t)v2;
  return MEMORY[0x270FA2498](_s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A012clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFSay10Foundation4DataVG_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm3312clientConfig6method4bodyxSo09r85O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_Say10Foundation4T6VG_TG5AcjA14RequestContextVyAA0X13PIRParametersVGxs0E0_pRi_zRi0_zlyAOIsgHnrzo_Tf1nncn_nTf4nndggg_nTY0_, 0, 0);
}

uint64_t XPCHandler.decryptPIRBatchResponse(_:indices:clientConfig:)(uint64_t a1)
{
  uint64_t v4 = *(void **)(*v2 + 40);
  uint64_t v5 = *v2;
  *(void *)(*v2 + 72) = v1;
  swift_task_dealloc();

  swift_release();
  if (v1)
  {
    return MEMORY[0x270FA2498](XPCHandler.requestData(by:clientConfig:), 0, 0);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(uint64_t))(v5 + 8);
    return v6(a1);
  }
}

uint64_t @objc closure #1 in XPCHandler.decryptPIRBatchResponse(_:indices:clientConfig:)(void *a1, void *a2, void *a3, void *aBlock, uint64_t a5)
{
  v5[2] = a3;
  v5[3] = a5;
  v5[4] = _Block_copy(aBlock);
  id v9 = a1;
  id v10 = a2;
  id v11 = a3;
  swift_retain();
  uint64_t v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v14 = v13;

  v5[5] = v12;
  v5[6] = v14;
  type metadata accessor for NSNumber(0, &lazy cache variable for type metadata for NSNumber);
  v5[7] = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return MEMORY[0x270FA2498](@objc closure #1 in XPCHandler.decryptPIRBatchResponse(_:indices:clientConfig:), 0, 0);
}

uint64_t @objc closure #1 in XPCHandler.decryptPIRBatchResponse(_:indices:clientConfig:)()
{
  uint64_t v1 = *(void *)(v0 + 56);
  long long v9 = *(_OWORD *)(v0 + 40);
  uint64_t v3 = *(void **)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v4 = swift_task_alloc();
  *(void *)(v0 + 64) = v4;
  *(void *)(v4 + 16) = v2;
  *(_OWORD *)(v4 + 24) = v9;
  *(void *)(v4 + 40) = v1;
  id v5 = v3;
  swift_retain();
  uint64_t v6 = (int8x16_t *)swift_task_alloc();
  *(void *)(v0 + 72) = v6;
  v6->i64[0] = v0;
  v6->i64[1] = (uint64_t)@objc closure #1 in XPCHandler.decryptPIRBatchResponse(_:indices:clientConfig:);
  int8x16_t v7 = *(int8x16_t *)(v0 + 16);
  v6[8].i64[0] = (uint64_t)&closure #1 in XPCHandler.decryptPIRBatchResponse(_:indices:clientConfig:)partial apply;
  v6[8].i64[1] = v4;
  v6[7] = vextq_s8(v7, v7, 8uLL);
  v6[6].i64[0] = 0xD000000000000030;
  v6[6].i64[1] = 0x8000000249E95290;
  v6[5].i64[1] = (uint64_t)v3;
  return MEMORY[0x270FA2498](_s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A012clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFSay10Foundation4DataVG_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm3312clientConfig6method4bodyxSo09r85O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_Say10Foundation4T6VG_TG5AcjA14RequestContextVyAA0X13PIRParametersVGxs0E0_pRi_zRi0_zlyAOIsgHnrzo_Tf1nncn_nTf4nndggg_nTY0_, 0, 0);
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  Class isa;
  void (**v4)(void, void, void);
  uint64_t (*v5)(void);
  uint64_t v7;

  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = *(void *)(v0 + 40);

  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(v2, v1);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void (***)(void, void, void))(v0 + 32);
  ((void (**)(void, Class, void))v4)[2](v4, isa, 0);

  _Block_release(v4);
  id v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

{
  uint64_t v0;
  void *v1;
  unint64_t v2;
  uint64_t v3;
  void *v4;
  void (**v5)(void, void, void);
  uint64_t (*v6)(void);
  uint64_t v8;

  uint64_t v1 = *(void **)(v0 + 80);
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v2 = *(void *)(v0 + 48);

  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(v3, v2);
  swift_task_dealloc();
  uint64_t v4 = (void *)_convertErrorToNSError(_:)();

  id v5 = *(void (***)(void, void, void))(v0 + 32);
  ((void (**)(void, void, void *))v5)[2](v5, 0, v4);

  _Block_release(v5);
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t @objc closure #1 in XPCHandler.decryptPIRBatchResponse(_:indices:clientConfig:)(uint64_t a1)
{
  uint64_t v4 = *v2;
  id v5 = *(void **)(*v2 + 16);
  *(void *)(*v2 + 80) = v1;
  swift_task_dealloc();

  swift_release();
  if (v1)
  {
    uint64_t v6 = @objc closure #1 in XPCHandler.decryptPIRBatchResponse(_:indices:clientConfig:);
  }
  else
  {
    *(void *)(v4 + 88) = a1;
    swift_task_dealloc();
    uint64_t v6 = @objc closure #1 in XPCHandler.decryptPIRBatchResponse(_:indices:clientConfig:);
  }
  return MEMORY[0x270FA2498](v6, 0, 0);
}

uint64_t XPCHandler.constructPIRRequest(withKeyword:withEvaluationKey:shardId:pirConfig:clientConfig:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v8 + 72) = a7;
  *(void *)(v8 + 80) = v7;
  *(void *)(v8 + 56) = a5;
  *(void *)(v8 + 64) = a6;
  *(void *)(v8 + 40) = a2;
  *(void *)(v8 + 48) = a4;
  *(unsigned char *)(v8 + 112) = a3;
  *(void *)(v8 + 32) = a1;
  return MEMORY[0x270FA2498](XPCHandler.constructPIRRequest(withKeyword:withEvaluationKey:shardId:pirConfig:clientConfig:), 0, 0);
}

uint64_t XPCHandler.constructPIRRequest(withKeyword:withEvaluationKey:shardId:pirConfig:clientConfig:)()
{
  uint64_t v2 = *(void **)(v0 + 72);
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v3 = *(void *)(v0 + 64);
  long long v12 = *(_OWORD *)(v0 + 48);
  char v4 = *(unsigned char *)(v0 + 112);
  uint64_t v6 = *(void *)(v0 + 32);
  uint64_t v5 = *(void *)(v0 + 40);
  uint64_t v7 = swift_task_alloc();
  *(void *)(v0 + 88) = v7;
  *(void *)(v7 + 16) = v1;
  *(void *)(v7 + 24) = v6;
  *(void *)(v7 + 32) = v5;
  *(unsigned char *)(v7 + 40) = v4;
  *(_OWORD *)(v7 + 48) = v12;
  *(void *)(v7 + 64) = v3;
  swift_retain();
  id v8 = v2;
  uint64_t v9 = swift_task_alloc();
  *(void *)(v0 + 96) = v9;
  *(void *)uint64_t v9 = v0;
  *(void *)(v9 + 8) = XPCHandler.constructPIRRequest(withKeyword:withEvaluationKey:shardId:pirConfig:clientConfig:);
  int8x16_t v10 = *(int8x16_t *)(v0 + 72);
  *(void *)(v9 + 136) = &async function pointer to partial apply for closure #1 in XPCHandler.constructPIRRequest(withKeyword:withEvaluationKey:shardId:pirConfig:clientConfig:);
  *(void *)(v9 + 144) = v7;
  *(int8x16_t *)(v9 + 120) = vextq_s8(v10, v10, 8uLL);
  *(void *)(v9 + 104) = 0xD000000000000052;
  *(void *)(v9 + 112) = 0x8000000249E952D0;
  *(void *)(v9 + 88) = v0 + 16;
  *(void *)(v9 + 96) = v2;
  return MEMORY[0x270FA2498](_s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A012clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlF10Foundation4DataV_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm3312clientConfig6method4bodyxSo09r82O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_10Foundation4T5V_Tg5AcjA14RequestContextVyAA0X13PIRParametersVGxs0E0_pRi_zRi0_zlyANIsgHnrzo_Tf1nnncn_nTY0_, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 104) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = XPCHandler.constructPIRRequest(withKeyword:withEvaluationKey:shardId:pirConfig:clientConfig:);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = XPCHandler.constructPIRBatchRequest(withKeywords:shardIds:clientConfig:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in XPCHandler.constructPIRRequest(withKeyword:withEvaluationKey:shardId:pirConfig:clientConfig:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 64) = a8;
  *(void *)(v8 + 72) = v11;
  *(unsigned char *)(v8 + 112) = a6;
  *(void *)(v8 + 48) = a5;
  *(void *)(v8 + 56) = a7;
  *(void *)(v8 + 32) = a3;
  *(void *)(v8 + 40) = a4;
  *(void *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = a2;
  *(void *)(v8 + 80) = type metadata accessor for AspireApiRequest(0);
  *(void *)(v8 + 88) = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #1 in XPCHandler.constructPIRRequest(withKeyword:withEvaluationKey:shardId:pirConfig:clientConfig:), 0, 0);
}

uint64_t closure #1 in XPCHandler.constructPIRRequest(withKeyword:withEvaluationKey:shardId:pirConfig:clientConfig:)()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 96) = v1;
  *uint64_t v1 = v0;
  v1[1] = closure #1 in XPCHandler.constructPIRRequest(withKeyword:withEvaluationKey:shardId:pirConfig:clientConfig:);
  uint64_t v2 = *(void *)(v0 + 88);
  uint64_t v3 = *(void *)(v0 + 64);
  uint64_t v4 = *(void *)(v0 + 72);
  uint64_t v5 = *(void *)(v0 + 48);
  uint64_t v6 = *(void *)(v0 + 56);
  char v7 = *(unsigned char *)(v0 + 112);
  uint64_t v8 = *(void *)(v0 + 40);
  uint64_t v9 = *(void *)(v0 + 24);
  return RequestsManager.constructPIRRequest(keyword:withEvaluationKey:shardId:config:context:)(v2, v8, v5, v7, v6, v3, v4, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 104) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = closure #1 in XPCHandler.constructPIRRequest(withKeyword:withEvaluationKey:shardId:pirConfig:clientConfig:);
  }
  else {
    uint64_t v2 = closure #1 in XPCHandler.constructPIRRequest(withKeyword:withEvaluationKey:shardId:pirConfig:clientConfig:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v9;

  uint64_t v1 = v0[13];
  _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_6(&lazy protocol witness table cache variable for type AspireApiRequest and conformance AspireApiRequest, (void (*)(uint64_t))type metadata accessor for AspireApiRequest);
  uint64_t v2 = Message.serializedData(partial:)();
  if (v1)
  {
    _s8CipherML12UseCaseGroupVWOhTm_0(v0[11], type metadata accessor for AspireApiRequest);
  }
  else
  {
    uint64_t v5 = v2;
    uint64_t v6 = v3;
    char v7 = (uint64_t *)v0[2];
    _s8CipherML12UseCaseGroupVWOhTm_0(v0[11], type metadata accessor for AspireApiRequest);
    *char v7 = v5;
    v7[1] = v6;
  }
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t @objc closure #1 in XPCHandler.constructPIRRequest(withKeyword:withEvaluationKey:shardId:pirConfig:clientConfig:)(void *a1, char a2, void *a3, void *a4, void *a5, void *aBlock, uint64_t a7)
{
  v7[3] = a5;
  v7[4] = a7;
  v7[2] = a4;
  v7[5] = _Block_copy(aBlock);
  id v14 = a3;
  id v15 = a1;
  id v16 = a4;
  id v17 = a5;
  swift_retain();
  uint64_t v18 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v20 = v19;

  v7[6] = v18;
  v7[7] = v20;
  if (a3)
  {
    a3 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v22 = v21;
  }
  else
  {
    uint64_t v22 = 0;
  }
  v7[8] = v22;
  uint64_t v23 = swift_task_alloc();
  v7[9] = v23;
  *(void *)uint64_t v23 = v7;
  *(void *)(v23 + 8) = @objc closure #1 in XPCHandler.constructPIRRequest(withKeyword:withEvaluationKey:shardId:pirConfig:clientConfig:);
  *(void *)(v23 + 72) = v17;
  *(void *)(v23 + 80) = a7;
  *(void *)(v23 + 56) = v22;
  *(void *)(v23 + 64) = v16;
  *(void *)(v23 + 40) = v20;
  *(void *)(v23 + 48) = a3;
  *(unsigned char *)(v23 + 112) = a2 & 1;
  *(void *)(v23 + 32) = v18;
  return MEMORY[0x270FA2498](XPCHandler.constructPIRRequest(withKeyword:withEvaluationKey:shardId:pirConfig:clientConfig:), 0, 0);
}

uint64_t @objc closure #1 in XPCHandler.constructPIRRequest(withKeyword:withEvaluationKey:shardId:pirConfig:clientConfig:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v6 = *v3;
  unint64_t v7 = *(void *)(*v3 + 56);
  uint64_t v8 = *(void *)(*v3 + 48);
  uint64_t v9 = *(void **)(*v3 + 24);
  uint64_t v10 = *(void **)(*v3 + 16);
  uint64_t v11 = *v3;
  swift_task_dealloc();

  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(v8, v7);
  if (v4)
  {
    uint64_t v12 = _convertErrorToNSError(_:)();

    Class isa = 0;
    id v14 = (void *)v12;
  }
  else if (a2 >> 60 == 15)
  {
    uint64_t v12 = 0;
    Class isa = 0;
    id v14 = 0;
  }
  else
  {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data?(a1, a2);
    uint64_t v12 = 0;
    id v14 = isa;
  }
  id v15 = *(void (***)(void, void, void))(v6 + 40);
  ((void (**)(void, Class, uint64_t))v15)[2](v15, isa, v12);

  _Block_release(v15);
  id v16 = *(uint64_t (**)(void))(v11 + 8);
  return v16();
}

uint64_t XPCHandler.constructPIRBatchRequest(withKeywords:shardIds:clientConfig:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[6] = a3;
  v4[7] = v3;
  v4[4] = a1;
  v4[5] = a2;
  return MEMORY[0x270FA2498](XPCHandler.constructPIRBatchRequest(withKeywords:shardIds:clientConfig:), 0, 0);
}

uint64_t XPCHandler.constructPIRBatchRequest(withKeywords:shardIds:clientConfig:)()
{
  uint64_t v2 = *(void **)(v0 + 48);
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v3 = swift_task_alloc();
  *(void *)(v0 + 64) = v3;
  long long v4 = *(_OWORD *)(v0 + 32);
  *(void *)(v3 + 16) = v1;
  *(_OWORD *)(v3 + 24) = v4;
  swift_retain();
  id v5 = v2;
  uint64_t v6 = swift_task_alloc();
  *(void *)(v0 + 72) = v6;
  *(void *)uint64_t v6 = v0;
  *(void *)(v6 + 8) = XPCHandler.constructPIRBatchRequest(withKeywords:shardIds:clientConfig:);
  int8x16_t v7 = *(int8x16_t *)(v0 + 48);
  *(void *)(v6 + 136) = &async function pointer to partial apply for closure #1 in XPCHandler.constructPIRBatchRequest(withKeywords:shardIds:clientConfig:);
  *(void *)(v6 + 144) = v3;
  *(int8x16_t *)(v6 + 120) = vextq_s8(v7, v7, 8uLL);
  *(void *)(v6 + 104) = 0xD00000000000003DLL;
  *(void *)(v6 + 112) = 0x8000000249E95330;
  *(void *)(v6 + 88) = v0 + 16;
  *(void *)(v6 + 96) = v2;
  return MEMORY[0x270FA2498](_s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A012clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlF10Foundation4DataVSg_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm3312clientConfig6method4bodyxSo09r82O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_10Foundation4T7VSg_Tg5AcjA14RequestContextVyAA0X13PIRParametersVGxs0E0_pRi_zRi0_zlyAOIsgHnrzo_Tf1nnncn_nTY0_, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = XPCHandler.constructPIRBatchRequest(withKeywords:shardIds:clientConfig:);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = XPCHandler.constructPIRBatchRequest(withKeywords:shardIds:clientConfig:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

uint64_t closure #1 in XPCHandler.constructPIRBatchRequest(withKeywords:shardIds:clientConfig:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return MEMORY[0x270FA2498](closure #1 in XPCHandler.constructPIRBatchRequest(withKeywords:shardIds:clientConfig:), 0, 0);
}

uint64_t closure #1 in XPCHandler.constructPIRBatchRequest(withKeywords:shardIds:clientConfig:)()
{
  uint64_t v1 = (void *)swift_task_alloc();
  v0[7] = v1;
  *uint64_t v1 = v0;
  v1[1] = closure #1 in XPCHandler.constructPIRBatchRequest(withKeywords:shardIds:clientConfig:);
  uint64_t v3 = v0[5];
  uint64_t v2 = v0[6];
  uint64_t v4 = v0[3];
  return RequestsManager.constructPIRBatchRequest(keywords:shardIds:context:)(v3, v2, v4);
}

{
  uint64_t v0;

  *(int8x16_t *)*(void *)(v0 + 16) = vextq_s8(*(int8x16_t *)(v0 + 64), *(int8x16_t *)(v0 + 64), 8uLL);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in XPCHandler.constructPIRBatchRequest(withKeywords:shardIds:clientConfig:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  uint64_t v7 = *v3;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v8 = *(uint64_t (**)(void))(v7 + 8);
    return v8();
  }
  else
  {
    *(void *)(v6 + 64) = a2;
    *(void *)(v6 + 72) = a1;
    return MEMORY[0x270FA2498](closure #1 in XPCHandler.constructPIRBatchRequest(withKeywords:shardIds:clientConfig:), 0, 0);
  }
}

uint64_t @objc closure #1 in XPCHandler.constructPIRBatchRequest(withKeywords:shardIds:clientConfig:)(int a1, int a2, void *a3, void *aBlock, uint64_t a5)
{
  v5[2] = a3;
  v5[3] = a5;
  v5[4] = _Block_copy(aBlock);
  uint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v5[5] = v8;
  uint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v5[6] = v9;
  id v10 = a3;
  swift_retain();
  uint64_t v11 = (void *)swift_task_alloc();
  v5[7] = v11;
  void *v11 = v5;
  v11[1] = @objc closure #1 in XPCHandler.constructPIRBatchRequest(withKeywords:shardIds:clientConfig:);
  v11[6] = v10;
  v11[7] = a5;
  v11[4] = v8;
  v11[5] = v9;
  return MEMORY[0x270FA2498](XPCHandler.constructPIRBatchRequest(withKeywords:shardIds:clientConfig:), 0, 0);
}

uint64_t @objc closure #1 in XPCHandler.constructPIRBatchRequest(withKeywords:shardIds:clientConfig:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v7 = *v3;
  uint64_t v8 = *(void **)(*v3 + 16);
  uint64_t v9 = *v3;
  swift_task_dealloc();

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v4)
  {
    uint64_t v10 = _convertErrorToNSError(_:)();

    Class isa = 0;
    uint64_t v12 = (void *)v10;
  }
  else if (a2 >> 60 == 15)
  {
    uint64_t v10 = 0;
    Class isa = 0;
    uint64_t v12 = 0;
  }
  else
  {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data?(a1, a2);
    uint64_t v10 = 0;
    uint64_t v12 = isa;
  }
  uint64_t v13 = *(void (***)(void, void, void))(v7 + 32);
  ((void (**)(void, Class, uint64_t))v13)[2](v13, isa, v10);

  _Block_release(v13);
  id v14 = *(uint64_t (**)(void))(v9 + 8);
  return v14();
}

uint64_t XPCHandler.decryptPIRResponse(_:keyword:shardId:clientConfig:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v8[10] = a7;
  v8[11] = v7;
  v8[8] = a5;
  v8[9] = a6;
  v8[6] = a3;
  v8[7] = a4;
  v8[4] = a1;
  v8[5] = a2;
  return MEMORY[0x270FA2498](XPCHandler.decryptPIRResponse(_:keyword:shardId:clientConfig:), 0, 0);
}

uint64_t XPCHandler.decryptPIRResponse(_:keyword:shardId:clientConfig:)()
{
  uint64_t v2 = *(void **)(v0 + 80);
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v4 = *(void *)(v0 + 64);
  uint64_t v3 = *(void *)(v0 + 72);
  long long v10 = *(_OWORD *)(v0 + 32);
  long long v11 = *(_OWORD *)(v0 + 48);
  uint64_t v5 = swift_task_alloc();
  *(void *)(v0 + 96) = v5;
  *(void *)(v5 + 16) = v1;
  *(_OWORD *)(v5 + 24) = v10;
  *(_OWORD *)(v5 + 40) = v11;
  *(void *)(v5 + 56) = v4;
  *(void *)(v5 + 64) = v3;
  swift_retain();
  id v6 = v2;
  uint64_t v7 = swift_task_alloc();
  *(void *)(v0 + 104) = v7;
  *(void *)uint64_t v7 = v0;
  *(void *)(v7 + 8) = XPCHandler.decryptPIRResponse(_:keyword:shardId:clientConfig:);
  int8x16_t v8 = *(int8x16_t *)(v0 + 80);
  *(void *)(v7 + 136) = &async function pointer to partial apply for closure #1 in XPCHandler.decryptPIRResponse(_:keyword:shardId:clientConfig:);
  *(void *)(v7 + 144) = v5;
  *(int8x16_t *)(v7 + 120) = vextq_s8(v8, v8, 8uLL);
  *(void *)(v7 + 104) = 0xD000000000000033;
  *(void *)(v7 + 112) = 0x8000000249E95370;
  *(void *)(v7 + 88) = v0 + 16;
  *(void *)(v7 + 96) = v2;
  return MEMORY[0x270FA2498](_s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A012clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlF10Foundation4DataVSg_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm3312clientConfig6method4bodyxSo09r82O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_10Foundation4T7VSg_Tg5AcjA14RequestContextVyAA0X13PIRParametersVGxs0E0_pRi_zRi0_zlyAOIsgHnrzo_Tf1nnncn_nTY0_, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 112) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = XPCHandler.decryptPIRResponse(_:keyword:shardId:clientConfig:);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = XPCHandler.requestData(by:clientConfig:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in XPCHandler.decryptPIRResponse(_:keyword:shardId:clientConfig:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[9] = a8;
  v8[10] = v10;
  v8[7] = a6;
  v8[8] = a7;
  v8[5] = a4;
  v8[6] = a5;
  void v8[3] = a2;
  v8[4] = a3;
  v8[2] = a1;
  return MEMORY[0x270FA2498](closure #1 in XPCHandler.decryptPIRResponse(_:keyword:shardId:clientConfig:), 0, 0);
}

uint64_t closure #1 in XPCHandler.decryptPIRResponse(_:keyword:shardId:clientConfig:)()
{
  uint64_t v1 = (void *)swift_task_alloc();
  v0[11] = v1;
  *uint64_t v1 = v0;
  v1[1] = closure #1 in XPCHandler.decryptPIRResponse(_:keyword:shardId:clientConfig:);
  uint64_t v2 = v0[9];
  uint64_t v3 = v0[10];
  uint64_t v4 = v0[7];
  uint64_t v5 = v0[8];
  uint64_t v7 = v0[5];
  uint64_t v6 = v0[6];
  uint64_t v8 = v0[3];
  return RequestsManager.decryptPIRResponse(encryptedResponse:keyword:context:shardId:)(v7, v6, v4, v5, v8, v2, v3);
}

{
  uint64_t v0;

  *(int8x16_t *)*(void *)(v0 + 16) = vextq_s8(*(int8x16_t *)(v0 + 96), *(int8x16_t *)(v0 + 96), 8uLL);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in XPCHandler.decryptPIRResponse(_:keyword:shardId:clientConfig:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  uint64_t v7 = *v3;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v8 = *(uint64_t (**)(void))(v7 + 8);
    return v8();
  }
  else
  {
    *(void *)(v6 + 96) = a2;
    *(void *)(v6 + 104) = a1;
    return MEMORY[0x270FA2498](closure #1 in XPCHandler.decryptPIRResponse(_:keyword:shardId:clientConfig:), 0, 0);
  }
}

uint64_t @objc closure #1 in XPCHandler.decryptPIRResponse(_:keyword:shardId:clientConfig:)(void *a1, void *a2, void *a3, void *a4, void *aBlock, uint64_t a6)
{
  v6[2] = a4;
  v6[3] = a6;
  v6[4] = _Block_copy(aBlock);
  id v12 = a3;
  id v13 = a1;
  id v14 = a2;
  id v15 = a4;
  swift_retain();
  uint64_t v16 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v18 = v17;

  v6[5] = v16;
  v6[6] = v18;
  uint64_t v19 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v21 = v20;

  v6[7] = v19;
  v6[8] = v21;
  if (a3)
  {
    a3 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v23 = v22;
  }
  else
  {
    uint64_t v23 = 0;
  }
  v6[9] = v23;
  uint64_t v24 = (void *)swift_task_alloc();
  v6[10] = v24;
  void *v24 = v6;
  v24[1] = @objc closure #1 in XPCHandler.decryptPIRResponse(_:keyword:shardId:clientConfig:);
  v24[10] = v15;
  v24[11] = a6;
  v24[8] = a3;
  v24[9] = v23;
  v24[6] = v19;
  v24[7] = v21;
  v24[4] = v16;
  v24[5] = v18;
  return MEMORY[0x270FA2498](XPCHandler.decryptPIRResponse(_:keyword:shardId:clientConfig:), 0, 0);
}

uint64_t @objc closure #1 in XPCHandler.decryptPIRResponse(_:keyword:shardId:clientConfig:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v5 = *v3;
  unint64_t v6 = *(void *)(*v3 + 64);
  uint64_t v7 = *(void *)(*v3 + 56);
  unint64_t v8 = *(void *)(*v3 + 48);
  uint64_t v9 = *(void *)(*v3 + 40);
  uint64_t v10 = *(void **)(*v3 + 16);
  uint64_t v11 = *v3;
  swift_task_dealloc();

  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(v7, v6);
  outlined consume of Data._Representation(v9, v8);
  if (v4)
  {
    uint64_t v12 = _convertErrorToNSError(_:)();

    Class isa = 0;
    id v14 = (void *)v12;
  }
  else if (a2 >> 60 == 15)
  {
    uint64_t v12 = 0;
    Class isa = 0;
    id v14 = 0;
  }
  else
  {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data?(a1, a2);
    uint64_t v12 = 0;
    id v14 = isa;
  }
  id v15 = *(void (***)(void, void, void))(v5 + 32);
  ((void (**)(void, Class, uint64_t))v15)[2](v15, isa, v12);

  _Block_release(v15);
  uint64_t v16 = *(uint64_t (**)(void))(v11 + 8);
  return v16();
}

uint64_t XPCHandler.decryptPIRBatchResponse(_:keywords:clientConfig:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return MEMORY[0x270FA2498](XPCHandler.decryptPIRBatchResponse(_:keywords:clientConfig:), 0, 0);
}

uint64_t XPCHandler.decryptPIRBatchResponse(_:keywords:clientConfig:)()
{
  uint64_t v2 = *(void **)(v0 + 40);
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v3 = *(void *)(v0 + 32);
  long long v9 = *(_OWORD *)(v0 + 16);
  uint64_t v4 = swift_task_alloc();
  *(void *)(v0 + 56) = v4;
  *(void *)(v4 + 16) = v1;
  *(_OWORD *)(v4 + 24) = v9;
  *(void *)(v4 + 40) = v3;
  swift_retain();
  id v5 = v2;
  unint64_t v6 = (int8x16_t *)swift_task_alloc();
  *(void *)(v0 + 64) = v6;
  v6->i64[0] = v0;
  v6->i64[1] = (uint64_t)XPCHandler.decryptPIRBatchResponse(_:keywords:clientConfig:);
  int8x16_t v7 = *(int8x16_t *)(v0 + 40);
  v6[8].i64[0] = (uint64_t)&async function pointer to partial apply for closure #1 in XPCHandler.decryptPIRBatchResponse(_:keywords:clientConfig:);
  v6[8].i64[1] = v4;
  v6[7] = vextq_s8(v7, v7, 8uLL);
  v6[6].i64[0] = 0xD000000000000031;
  v6[6].i64[1] = 0x8000000249E953B0;
  v6[5].i64[1] = (uint64_t)v2;
  return MEMORY[0x270FA2498](_s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A012clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFSaySo8NSObjectCG_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm3312clientConfig6method4bodyxSo09r75O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_SaySo8S6CG_TG5AcjA14RequestContextVyAA0W13PIRParametersVGxs0E0_pRi_zRi0_zlyANIsgHnrzo_Tf1nncn_nTf4nndggg_nTY0_, 0, 0);
}

uint64_t XPCHandler.decryptPIRBatchResponse(_:keywords:clientConfig:)(uint64_t a1)
{
  uint64_t v4 = *(void **)(*v2 + 40);
  uint64_t v5 = *v2;
  *(void *)(*v2 + 72) = v1;
  swift_task_dealloc();

  swift_release();
  if (v1)
  {
    return MEMORY[0x270FA2498](XPCHandler.setPIRConfig(_:clientConfig:), 0, 0);
  }
  else
  {
    swift_task_dealloc();
    unint64_t v6 = *(uint64_t (**)(uint64_t))(v5 + 8);
    return v6(a1);
  }
}

uint64_t closure #1 in XPCHandler.decryptPIRBatchResponse(_:keywords:clientConfig:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[6] = a5;
  v6[7] = a6;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  return MEMORY[0x270FA2498](closure #1 in XPCHandler.decryptPIRBatchResponse(_:keywords:clientConfig:), 0, 0);
}

uint64_t closure #1 in XPCHandler.decryptPIRBatchResponse(_:keywords:clientConfig:)()
{
  uint64_t v1 = (void *)swift_task_alloc();
  v0[8] = v1;
  *uint64_t v1 = v0;
  v1[1] = closure #1 in XPCHandler.decryptPIRBatchResponse(_:keywords:clientConfig:);
  uint64_t v2 = v0[6];
  uint64_t v3 = v0[7];
  uint64_t v4 = v0[5];
  uint64_t v5 = v0[3];
  return RequestsManager.decryptPIRBatchResponse(encryptedResponses:keywords:context:)(v4, v2, v3, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;
  uint64_t v10;

  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    long long v9 = MEMORY[0x263F8EE78];
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v3 = (unint64_t *)(v1 + 40);
    do
    {
      uint64_t v4 = *v3;
      if (*v3 >> 60 == 15)
      {
        objc_msgSend(objc_allocWithZone(MEMORY[0x263EFF9D0]), sel_init);
      }
      else
      {
        uint64_t v5 = *(v3 - 1);
        outlined copy of Data._Representation(v5, *v3);
        Data._bridgeToObjectiveC()();
        outlined consume of Data?(v5, v4);
      }
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v3 += 2;
      --v2;
    }
    while (v2);
    unint64_t v6 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v6 = MEMORY[0x263F8EE78];
  }
  **(void **)(v0 + 16) = v6;
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t closure #1 in XPCHandler.decryptPIRBatchResponse(_:keywords:clientConfig:)(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 72) = a1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = *(uint64_t (**)(void))(v3 + 8);
    return v4();
  }
  else
  {
    return MEMORY[0x270FA2498](closure #1 in XPCHandler.decryptPIRBatchResponse(_:keywords:clientConfig:), 0, 0);
  }
}

uint64_t @objc closure #1 in XPCHandler.decryptPIRBatchResponse(_:keywords:clientConfig:)(void *a1, void *a2, void *a3, void *aBlock, uint64_t a5)
{
  v5[2] = a3;
  v5[3] = a5;
  v5[4] = _Block_copy(aBlock);
  id v9 = a1;
  id v10 = a2;
  id v11 = a3;
  swift_retain();
  uint64_t v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v14 = v13;

  v5[5] = v12;
  v5[6] = v14;
  v5[7] = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return MEMORY[0x270FA2498](@objc closure #1 in XPCHandler.decryptPIRBatchResponse(_:keywords:clientConfig:), 0, 0);
}

uint64_t @objc closure #1 in XPCHandler.decryptPIRBatchResponse(_:keywords:clientConfig:)()
{
  uint64_t v1 = *(void *)(v0 + 56);
  long long v9 = *(_OWORD *)(v0 + 40);
  uint64_t v3 = *(void **)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v4 = swift_task_alloc();
  *(void *)(v0 + 64) = v4;
  *(void *)(v4 + 16) = v2;
  *(_OWORD *)(v4 + 24) = v9;
  *(void *)(v4 + 40) = v1;
  id v5 = v3;
  swift_retain();
  uint64_t v6 = (int8x16_t *)swift_task_alloc();
  *(void *)(v0 + 72) = v6;
  v6->i64[0] = v0;
  v6->i64[1] = (uint64_t)@objc closure #1 in XPCHandler.decryptPIRBatchResponse(_:keywords:clientConfig:);
  int8x16_t v7 = *(int8x16_t *)(v0 + 16);
  v6[8].i64[0] = (uint64_t)&closure #1 in XPCHandler.decryptPIRBatchResponse(_:keywords:clientConfig:)partial apply;
  v6[8].i64[1] = v4;
  v6[7] = vextq_s8(v7, v7, 8uLL);
  v6[6].i64[0] = 0xD000000000000031;
  v6[6].i64[1] = 0x8000000249E953B0;
  v6[5].i64[1] = (uint64_t)v3;
  return MEMORY[0x270FA2498](_s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A012clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFSaySo8NSObjectCG_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm3312clientConfig6method4bodyxSo09r75O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_SaySo8S6CG_TG5AcjA14RequestContextVyAA0W13PIRParametersVGxs0E0_pRi_zRi0_zlyANIsgHnrzo_Tf1nncn_nTf4nndggg_nTY0_, 0, 0);
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  Class isa;
  void (**v4)(void, void, void);
  uint64_t (*v5)(void);
  uint64_t v7;

  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = *(void *)(v0 + 40);

  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(v2, v1);
  type metadata accessor for NSNumber(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void (***)(void, void, void))(v0 + 32);
  ((void (**)(void, Class, void))v4)[2](v4, isa, 0);

  _Block_release(v4);
  id v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t @objc closure #1 in XPCHandler.decryptPIRBatchResponse(_:keywords:clientConfig:)(uint64_t a1)
{
  uint64_t v4 = *v2;
  id v5 = *(void **)(*v2 + 16);
  *(void *)(*v2 + 80) = v1;
  swift_task_dealloc();

  swift_release();
  if (v1)
  {
    uint64_t v6 = @objc closure #1 in XPCHandler.decryptPIRBatchResponse(_:keywords:clientConfig:);
  }
  else
  {
    *(void *)(v4 + 88) = a1;
    swift_task_dealloc();
    uint64_t v6 = @objc closure #1 in XPCHandler.decryptPIRBatchResponse(_:keywords:clientConfig:);
  }
  return MEMORY[0x270FA2498](v6, 0, 0);
}

uint64_t XPCHandler.constructPIRRequest(withLatitude:longitude:clientConfig:)(uint64_t a1, double a2, double a3)
{
  *(void *)(v4 + 48) = a1;
  *(void *)(v4 + 56) = v3;
  *(double *)(v4 + 32) = a2;
  *(double *)(v4 + 40) = a3;
  return MEMORY[0x270FA2498](XPCHandler.constructPIRRequest(withLatitude:longitude:clientConfig:), 0, 0);
}

uint64_t XPCHandler.constructPIRRequest(withLatitude:longitude:clientConfig:)()
{
  uint64_t v2 = (void *)v0[3].i64[0];
  uint64_t v1 = v0[3].i64[1];
  uint64_t v4 = v0[2].i64[0];
  uint64_t v3 = v0[2].i64[1];
  id v5 = (void *)swift_task_alloc();
  v0[4].i64[0] = (uint64_t)v5;
  v5[2] = v1;
  v5[3] = v4;
  v5[4] = v3;
  swift_retain();
  id v6 = v2;
  uint64_t v7 = swift_task_alloc();
  v0[4].i64[1] = v7;
  *(void *)uint64_t v7 = v0;
  *(void *)(v7 + 8) = XPCHandler.constructPIRBatchRequest(withKeywords:shardIds:clientConfig:);
  int8x16_t v8 = v0[3];
  *(void *)(v7 + 136) = &async function pointer to partial apply for closure #1 in XPCHandler.constructPIRRequest(withLatitude:longitude:clientConfig:);
  *(void *)(v7 + 144) = v5;
  *(int8x16_t *)(v7 + 120) = vextq_s8(v8, v8, 8uLL);
  *(void *)(v7 + 104) = 0xD000000000000039;
  *(void *)(v7 + 112) = 0x8000000249E953F0;
  *(void *)(v7 + 88) = v0 + 1;
  *(void *)(v7 + 96) = v2;
  return MEMORY[0x270FA2498](_s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A012clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlF10Foundation4DataV_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm3312clientConfig6method4bodyxSo09r82O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_10Foundation4T5V_Tg5AcjA14RequestContextVyAA0X13PIRParametersVGxs0E0_pRi_zRi0_zlyANIsgHnrzo_Tf1nnncn_nTY0_, 0, 0);
}

uint64_t @objc closure #1 in XPCHandler.constructPIRRequest(withLatitude:longitude:clientConfig:)(void *a1, void *aBlock, uint64_t a3, double a4, double a5)
{
  v5[2] = a1;
  v5[3] = a3;
  v5[4] = _Block_copy(aBlock);
  id v10 = a1;
  swift_retain();
  uint64_t v11 = swift_task_alloc();
  v5[5] = v11;
  *(void *)uint64_t v11 = v5;
  *(void *)(v11 + 8) = @objc closure #1 in XPCHandler.requestData(by:clientConfig:);
  *(void *)(v11 + 48) = v10;
  *(void *)(v11 + 56) = a3;
  *(double *)(v11 + 32) = a4;
  *(double *)(v11 + 40) = a5;
  return MEMORY[0x270FA2498](XPCHandler.constructPIRRequest(withLatitude:longitude:clientConfig:), 0, 0);
}

uint64_t XPCHandler.decryptPIRResponse(_:latitude:longitude:clientConfig:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  *(void *)(v6 + 64) = a3;
  *(void *)(v6 + 72) = v5;
  *(double *)(v6 + 48) = a4;
  *(double *)(v6 + 56) = a5;
  *(void *)(v6 + 32) = a1;
  *(void *)(v6 + 40) = a2;
  return MEMORY[0x270FA2498](XPCHandler.decryptPIRResponse(_:latitude:longitude:clientConfig:), 0, 0);
}

uint64_t XPCHandler.decryptPIRResponse(_:latitude:longitude:clientConfig:)()
{
  uint64_t v2 = (void *)v0[4].i64[0];
  uint64_t v1 = v0[4].i64[1];
  uint64_t v4 = v0[3].i64[0];
  uint64_t v3 = v0[3].i64[1];
  uint64_t v6 = v0[2].i64[0];
  uint64_t v5 = v0[2].i64[1];
  uint64_t v7 = (void *)swift_task_alloc();
  v0[5].i64[0] = (uint64_t)v7;
  v7[2] = v1;
  v7[3] = v6;
  v7[4] = v5;
  v7[5] = v4;
  v7[6] = v3;
  swift_retain();
  id v8 = v2;
  uint64_t v9 = swift_task_alloc();
  v0[5].i64[1] = v9;
  *(void *)uint64_t v9 = v0;
  *(void *)(v9 + 8) = XPCHandler.decryptPIRResponse(_:latitude:longitude:clientConfig:);
  int8x16_t v10 = v0[4];
  *(void *)(v9 + 136) = &async function pointer to partial apply for closure #1 in XPCHandler.decryptPIRResponse(_:latitude:longitude:clientConfig:);
  *(void *)(v9 + 144) = v7;
  *(int8x16_t *)(v9 + 120) = vextq_s8(v10, v10, 8uLL);
  *(void *)(v9 + 104) = 0xD000000000000036;
  *(void *)(v9 + 112) = 0x8000000249E95430;
  *(void *)(v9 + 88) = v0 + 1;
  *(void *)(v9 + 96) = v2;
  return MEMORY[0x270FA2498](_s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A012clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlF10Foundation4DataV_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm3312clientConfig6method4bodyxSo09r82O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_10Foundation4T5V_Tg5AcjA14RequestContextVyAA0X13PIRParametersVGxs0E0_pRi_zRi0_zlyANIsgHnrzo_Tf1nnncn_nTY0_, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 96) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = XPCHandler.decryptPIRResponse(_:latitude:longitude:clientConfig:);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = XPCHandler.requestData(by:clientConfig:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t @objc closure #1 in XPCHandler.decryptPIRResponse(_:latitude:longitude:clientConfig:)(void *a1, void *a2, void *aBlock, uint64_t a4, double a5, double a6)
{
  v6[2] = a2;
  v6[3] = a4;
  v6[4] = _Block_copy(aBlock);
  id v12 = a1;
  id v13 = a2;
  swift_retain();
  uint64_t v14 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v16 = v15;

  v6[5] = v14;
  v6[6] = v16;
  uint64_t v17 = swift_task_alloc();
  v6[7] = v17;
  *(void *)uint64_t v17 = v6;
  *(void *)(v17 + 8) = @objc closure #1 in XPCHandler.decryptPIRResponse(_:latitude:longitude:clientConfig:);
  *(void *)(v17 + 64) = v13;
  *(void *)(v17 + 72) = a4;
  *(double *)(v17 + 48) = a5;
  *(double *)(v17 + 56) = a6;
  *(void *)(v17 + 32) = v14;
  *(void *)(v17 + 40) = v16;
  return MEMORY[0x270FA2498](XPCHandler.decryptPIRResponse(_:latitude:longitude:clientConfig:), 0, 0);
}

uint64_t XPCHandler.asyncResponseData(byKeywords:clientConfig:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return MEMORY[0x270FA2498](XPCHandler.asyncResponseData(byKeywords:clientConfig:), 0, 0);
}

{
  uint64_t v2;
  uint64_t *v3;
  void *v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t);
  uint64_t v10;

  uint64_t v6 = *(void **)(*v3 + 24);
  uint64_t v7 = *v3;
  *(void *)(*v3 + 56) = v2;
  swift_task_dealloc();

  swift_release();
  if (v2)
  {
    return MEMORY[0x270FA2498](XPCHandler.requestData(byIndices:clientConfig:), 0, 0);
  }
  else
  {
    swift_task_dealloc();
    id v8 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8);
    return v8(a1, a2);
  }
}

uint64_t XPCHandler.asyncResponseData(byKeywords:clientConfig:)()
{
  uint64_t v2 = (void *)v0[3];
  uint64_t v1 = v0[4];
  uint64_t v3 = v0[2];
  uint64_t v4 = swift_task_alloc();
  v0[5] = v4;
  *(void *)(v4 + 16) = v1;
  *(void *)(v4 + 24) = v3;
  swift_retain();
  id v5 = v2;
  uint64_t v6 = (int8x16_t *)swift_task_alloc();
  v0[6] = v6;
  v6->i64[0] = (uint64_t)v0;
  v6->i64[1] = (uint64_t)XPCHandler.asyncResponseData(byKeywords:clientConfig:);
  int8x16_t v7 = *(int8x16_t *)(v0 + 3);
  v6[8].i64[0] = (uint64_t)&async function pointer to partial apply for closure #1 in XPCHandler.asyncResponseData(byKeywords:clientConfig:);
  v6[8].i64[1] = v4;
  v6[7] = vextq_s8(v7, v7, 8uLL);
  v6[6].i64[0] = 0xD00000000000002BLL;
  v6[6].i64[1] = 0x8000000249E95470;
  v6[5].i64[1] = (uint64_t)v2;
  return MEMORY[0x270FA2498](_s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A012clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFSS_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm3312clientConfig6method4bodyxSo09R75O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_SS_TG5AcjA14RequestContextVyAA0V13PIRParametersVGxs0E0_pRi_zRi0_zlySSIsgHnrzo_Tf1nncn_nTf4nndggg_nTY0_, 0, 0);
}

uint64_t closure #1 in XPCHandler.asyncResponseData(byKeywords:clientConfig:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  return MEMORY[0x270FA2498](closure #1 in XPCHandler.asyncResponseData(byKeywords:clientConfig:), 0, 0);
}

uint64_t closure #1 in XPCHandler.asyncResponseData(byKeywords:clientConfig:)()
{
  uint64_t v1 = (void *)swift_task_alloc();
  v0[6] = v1;
  *uint64_t v1 = v0;
  v1[1] = closure #1 in XPCHandler.asyncResponseData(byKeywords:clientConfig:);
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[3];
  return RequestsManager.requestDataWithAsyncResponse(keywords:context:)(v2, v3);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = *(void **)(v0 + 16);
  *uint64_t v2 = *(void *)(v0 + 64);
  v2[1] = v1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in XPCHandler.asyncResponseData(byKeywords:clientConfig:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  uint64_t v7 = *v3;
  swift_task_dealloc();
  if (v2)
  {
    id v8 = *(uint64_t (**)(void))(v7 + 8);
    return v8();
  }
  else
  {
    *(void *)(v6 + 56) = a2;
    *(void *)(v6 + 64) = a1;
    return MEMORY[0x270FA2498](closure #1 in XPCHandler.asyncResponseData(byKeywords:clientConfig:), 0, 0);
  }
}

uint64_t @objc closure #1 in XPCHandler.asyncResponseData(byKeywords:clientConfig:)(int a1, void *a2, void *aBlock, uint64_t a4)
{
  v4[2] = a2;
  v4[3] = a4;
  v4[4] = _Block_copy(aBlock);
  v4[5] = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v6 = a2;
  swift_retain();
  return MEMORY[0x270FA2498](@objc closure #1 in XPCHandler.asyncResponseData(byKeywords:clientConfig:), 0, 0);
}

uint64_t @objc closure #1 in XPCHandler.asyncResponseData(byKeywords:clientConfig:)()
{
  uint64_t v1 = v0[2].i64[1];
  uint64_t v3 = (void *)v0[1].i64[0];
  uint64_t v2 = v0[1].i64[1];
  uint64_t v4 = swift_task_alloc();
  v0[3].i64[0] = v4;
  *(void *)(v4 + 16) = v2;
  *(void *)(v4 + 24) = v1;
  id v5 = v3;
  swift_retain();
  id v6 = (int8x16_t *)swift_task_alloc();
  v0[3].i64[1] = (uint64_t)v6;
  v6->i64[0] = (uint64_t)v0;
  v6->i64[1] = (uint64_t)@objc closure #1 in XPCHandler.asyncResponseData(byKeywords:clientConfig:);
  int8x16_t v7 = v0[1];
  v6[8].i64[0] = (uint64_t)&closure #1 in XPCHandler.asyncResponseData(byKeywords:clientConfig:)partial apply;
  v6[8].i64[1] = v4;
  v6[7] = vextq_s8(v7, v7, 8uLL);
  v6[6].i64[0] = 0xD00000000000002BLL;
  v6[6].i64[1] = 0x8000000249E95470;
  v6[5].i64[1] = (uint64_t)v3;
  return MEMORY[0x270FA2498](_s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A012clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFSS_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm3312clientConfig6method4bodyxSo09R75O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_SS_TG5AcjA14RequestContextVyAA0V13PIRParametersVGxs0E0_pRi_zRi0_zlySSIsgHnrzo_Tf1nncn_nTf4nndggg_nTY0_, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void (**v4)(void, void, void);
  uint64_t (*v5)(void);
  uint64_t v7;

  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v2 = *(void *)(v0 + 80);

  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v3 = (void *)MEMORY[0x24C5B33F0](v2, v1);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void (***)(void, void, void))(v0 + 32);
  ((void (**)(void, void *, void))v4)[2](v4, v3, 0);

  _Block_release(v4);
  id v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t @objc closure #1 in XPCHandler.asyncResponseData(byKeywords:clientConfig:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  int8x16_t v7 = *(void **)(*v3 + 16);
  *(void *)(*v3 + 64) = v2;
  swift_task_dealloc();

  swift_release();
  if (v2)
  {
    uint64_t v8 = @objc closure #1 in XPCHandler.asyncResponseData(byKeywords:clientConfig:);
  }
  else
  {
    *(void *)(v6 + 72) = a2;
    *(void *)(v6 + 80) = a1;
    swift_task_dealloc();
    uint64_t v8 = @objc closure #1 in XPCHandler.asyncResponseData(byKeywords:clientConfig:);
  }
  return MEMORY[0x270FA2498](v8, 0, 0);
}

uint64_t XPCHandler.similarityScores(forElements:shardIndices:clientConfig:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  return MEMORY[0x270FA2498](XPCHandler.similarityScores(forElements:shardIndices:clientConfig:), 0, 0);
}

uint64_t XPCHandler.similarityScores(forElements:shardIndices:clientConfig:)()
{
  uint64_t v2 = (void *)v0[2].i64[0];
  uint64_t v1 = v0[2].i64[1];
  uint64_t v4 = v0[1].i64[0];
  uint64_t v3 = v0[1].i64[1];
  id v5 = (void *)swift_task_alloc();
  v0[3].i64[0] = (uint64_t)v5;
  v5[2] = v3;
  v5[3] = v1;
  v5[4] = v4;
  swift_retain();
  id v6 = v2;
  int8x16_t v7 = (int8x16_t *)swift_task_alloc();
  v0[3].i64[1] = (uint64_t)v7;
  v7->i64[0] = (uint64_t)v0;
  v7->i64[1] = (uint64_t)XPCHandler.similarityScores(forElements:shardIndices:clientConfig:);
  int8x16_t v8 = v0[2];
  v7[8].i64[0] = (uint64_t)&async function pointer to partial apply for closure #1 in XPCHandler.similarityScores(forElements:shardIndices:clientConfig:);
  v7[8].i64[1] = (uint64_t)v5;
  v7[7] = vextq_s8(v8, v8, 8uLL);
  v7[6].i64[0] = 0xD000000000000038;
  v7[6].i64[1] = 0x8000000249E954A0;
  v7[5].i64[1] = (uint64_t)v2;
  return MEMORY[0x270FA2498](_s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A012clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFSaySaySo18CMLSimilarityScoreCGG_Tg503_s8a4ML10c34C19withStaticPECConfig33_673275016ghijklm3312clientConfig6method4bodyxSo09r79O0C_SSxAA14RequestContextVyAA0E13PECParametersVGYaKXEtYaKlFxyYaKXEfU_SaySaySo18sT7CGG_TG5AcjA14RequestContextVyAA0X13PECParametersVGxs0E0_pRi_zRi0_zlyAOIsgHnrzo_Tf1nncn_nTf4nndggg_nTY0_, 0, 0);
}

uint64_t XPCHandler.similarityScores(forElements:shardIndices:clientConfig:)(uint64_t a1)
{
  uint64_t v4 = *(void **)(*v2 + 32);
  uint64_t v5 = *v2;
  *(void *)(*v2 + 64) = v1;
  swift_task_dealloc();

  swift_release();
  if (v1)
  {
    return MEMORY[0x270FA2498](XPCHandler.similarityScores(forElements:shardIndices:clientConfig:), 0, 0);
  }
  else
  {
    swift_task_dealloc();
    id v6 = *(uint64_t (**)(uint64_t))(v5 + 8);
    return v6(a1);
  }
}

uint64_t closure #1 in XPCHandler.similarityScores(forElements:shardIndices:clientConfig:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[6] = a4;
  v5[7] = a5;
  v5[4] = a2;
  v5[5] = a3;
  v5[3] = a1;
  return MEMORY[0x270FA2498](closure #1 in XPCHandler.similarityScores(forElements:shardIndices:clientConfig:), 0, 0);
}

uint64_t closure #1 in XPCHandler.similarityScores(forElements:shardIndices:clientConfig:)()
{
  uint64_t v1 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo8NSNumberCG_Sis5NeverOTg5086_s8CipherML10XPCHandlerC16similarityScores11forElements12shardIndices12clientConfigSayo48So18CMLSimilarityScoreCGGSay10Foundation4DataVG_o3So8D134CGSo09CMLClientK0CtYaKFAkA14RequestContextVyAA19StaticPECParametersVGYaKXEfU_SiAQcfu_33_5bdac5b40c7411f20a64c1277f8fd44fAQSiTf3nnnpk_nTf1cn_nTm(v0[5]);
  v0[8] = v1;
  uint64_t v2 = (void *)swift_task_alloc();
  v0[9] = v2;
  *uint64_t v2 = v0;
  v2[1] = closure #1 in XPCHandler.similarityScores(forElements:shardIndices:clientConfig:);
  uint64_t v3 = v0[7];
  uint64_t v4 = v0[4];
  return RequestsManager.similarityScores(elements:shardIndices:context:)(v3, v1, v4);
}

{
  uint64_t v0;

  **(void **)(v0 + 24) = *(void *)(v0 + 88);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in XPCHandler.similarityScores(forElements:shardIndices:clientConfig:)(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 80) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = closure #1 in XPCHandler.similarityScores(forElements:shardIndices:clientConfig:);
  }
  else
  {
    swift_bridgeObjectRelease();
    *(void *)(v4 + 88) = a1;
    uint64_t v5 = closure #1 in XPCHandler.similarityScores(forElements:shardIndices:clientConfig:);
  }
  return MEMORY[0x270FA2498](v5, 0, 0);
}

uint64_t @objc closure #1 in XPCHandler.similarityScores(forElements:shardIndices:clientConfig:)(int a1, int a2, void *a3, void *aBlock, uint64_t a5)
{
  v5[2] = a3;
  v5[3] = a5;
  v5[4] = _Block_copy(aBlock);
  v5[5] = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  type metadata accessor for NSNumber(0, &lazy cache variable for type metadata for NSNumber);
  v5[6] = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v7 = a3;
  swift_retain();
  return MEMORY[0x270FA2498](@objc closure #1 in XPCHandler.similarityScores(forElements:shardIndices:clientConfig:), 0, 0);
}

uint64_t @objc closure #1 in XPCHandler.similarityScores(forElements:shardIndices:clientConfig:)()
{
  uint64_t v2 = v0[2].i64[1];
  uint64_t v1 = v0[3].i64[0];
  uint64_t v4 = (void *)v0[1].i64[0];
  uint64_t v3 = v0[1].i64[1];
  uint64_t v5 = (void *)swift_task_alloc();
  v0[3].i64[1] = (uint64_t)v5;
  v5[2] = v1;
  v5[3] = v3;
  v5[4] = v2;
  id v6 = v4;
  swift_retain();
  id v7 = (int8x16_t *)swift_task_alloc();
  v0[4].i64[0] = (uint64_t)v7;
  v7->i64[0] = (uint64_t)v0;
  v7->i64[1] = (uint64_t)@objc closure #1 in XPCHandler.similarityScores(forElements:shardIndices:clientConfig:);
  int8x16_t v8 = v0[1];
  v7[8].i64[0] = (uint64_t)&closure #1 in XPCHandler.similarityScores(forElements:shardIndices:clientConfig:)partial apply;
  v7[8].i64[1] = (uint64_t)v5;
  v7[7] = vextq_s8(v8, v8, 8uLL);
  v7[6].i64[0] = 0xD000000000000038;
  v7[6].i64[1] = 0x8000000249E954A0;
  v7[5].i64[1] = (uint64_t)v4;
  return MEMORY[0x270FA2498](_s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A012clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFSaySaySo18CMLSimilarityScoreCGG_Tg503_s8a4ML10c34C19withStaticPECConfig33_673275016ghijklm3312clientConfig6method4bodyxSo09r79O0C_SSxAA14RequestContextVyAA0E13PECParametersVGYaKXEtYaKlFxyYaKXEfU_SaySaySo18sT7CGG_TG5AcjA14RequestContextVyAA0X13PECParametersVGxs0E0_pRi_zRi0_zlyAOIsgHnrzo_Tf1nncn_nTf4nndggg_nTY0_, 0, 0);
}

{
  uint64_t v0;
  Class isa;
  void (**v2)(void, void, void);
  uint64_t (*v3)(void);
  uint64_t v5;

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CMLSimilarityScore]);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void (***)(void, void, void))(v0 + 32);
  ((void (**)(void, Class, void))v2)[2](v2, isa, 0);

  _Block_release(v2);
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t @objc closure #1 in XPCHandler.similarityScores(forElements:shardIndices:clientConfig:)(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void **)(*v2 + 16);
  *(void *)(*v2 + 72) = v1;
  swift_task_dealloc();

  swift_release();
  if (v1)
  {
    id v6 = @objc closure #1 in XPCHandler.similarityScores(forElements:shardIndices:clientConfig:);
  }
  else
  {
    *(void *)(v4 + 80) = a1;
    swift_task_dealloc();
    id v6 = @objc closure #1 in XPCHandler.similarityScores(forElements:shardIndices:clientConfig:);
  }
  return MEMORY[0x270FA2498](v6, 0, 0);
}

uint64_t XPCHandler.setPECConfig(_:clientConfig:)(uint64_t a1, uint64_t a2)
{
  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  return MEMORY[0x270FA2498](XPCHandler.setPECConfig(_:clientConfig:), 0, 0);
}

uint64_t XPCHandler.setPECConfig(_:clientConfig:)()
{
  uint64_t v2 = (void *)v0[5];
  uint64_t v1 = v0[6];
  uint64_t v3 = v0[4];
  uint64_t v4 = swift_task_alloc();
  v0[7] = v4;
  *(void *)(v4 + 16) = v1;
  *(void *)(v4 + 24) = v3;
  swift_retain();
  id v5 = v2;
  uint64_t v6 = swift_task_alloc();
  v0[8] = v6;
  *(void *)uint64_t v6 = v0;
  *(void *)(v6 + 8) = XPCHandler.setPIRConfig(_:clientConfig:);
  int8x16_t v7 = *(int8x16_t *)(v0 + 5);
  *(void *)(v6 + 136) = &async function pointer to partial apply for closure #1 in XPCHandler.setPECConfig(_:clientConfig:);
  *(void *)(v6 + 144) = v4;
  *(int8x16_t *)(v6 + 120) = vextq_s8(v7, v7, 8uLL);
  *(void *)(v6 + 104) = 0xD00000000000001DLL;
  *(void *)(v6 + 112) = 0x8000000249E954E0;
  *(void *)(v6 + 88) = v0 + 2;
  *(void *)(v6 + 96) = v2;
  return MEMORY[0x270FA2498](_s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A012clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlF10Foundation4DataVSg_Tg503_s8a4ML10c34C19withStaticPECConfig33_673275016ghijklm3312clientConfig6method4bodyxSo09r82O0C_SSxAA14RequestContextVyAA0E13PECParametersVGYaKXEtYaKlFxyYaKXEfU_10Foundation4T7VSg_Tg5AcjA14RequestContextVyAA0X13PECParametersVGxs0E0_pRi_zRi0_zlyAOIsgHnrzo_Tf1nnncn_nTY0_, 0, 0);
}

uint64_t closure #1 in XPCHandler.setPECConfig(_:clientConfig:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  return MEMORY[0x270FA2498](closure #1 in XPCHandler.setPECConfig(_:clientConfig:), 0, 0);
}

uint64_t closure #1 in XPCHandler.setPECConfig(_:clientConfig:)()
{
  uint64_t v1 = (void *)swift_task_alloc();
  v0[6] = v1;
  *uint64_t v1 = v0;
  v1[1] = closure #1 in XPCHandler.setPECConfig(_:clientConfig:);
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[3];
  return RequestsManager.setPECConfig(config:context:)(v2, v3);
}

{
  uint64_t v0;

  *(int8x16_t *)*(void *)(v0 + 16) = vextq_s8(*(int8x16_t *)(v0 + 56), *(int8x16_t *)(v0 + 56), 8uLL);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in XPCHandler.setPECConfig(_:clientConfig:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  uint64_t v7 = *v3;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v8 = *(uint64_t (**)(void))(v7 + 8);
    return v8();
  }
  else
  {
    *(void *)(v6 + 56) = a2;
    *(void *)(v6 + 64) = a1;
    return MEMORY[0x270FA2498](closure #1 in XPCHandler.setPECConfig(_:clientConfig:), 0, 0);
  }
}

uint64_t @objc closure #1 in XPCHandler.setPECConfig(_:clientConfig:)(void *a1, void *a2, void *aBlock, uint64_t a4)
{
  v4[3] = a2;
  v4[4] = a4;
  v4[2] = a1;
  v4[5] = _Block_copy(aBlock);
  id v8 = a1;
  id v9 = a2;
  swift_retain();
  uint64_t v10 = (void *)swift_task_alloc();
  v4[6] = v10;
  *uint64_t v10 = v4;
  v10[1] = @objc closure #1 in XPCHandler.setPECConfig(_:clientConfig:);
  v10[5] = v9;
  v10[6] = a4;
  v10[4] = v8;
  return MEMORY[0x270FA2498](XPCHandler.setPECConfig(_:clientConfig:), 0, 0);
}

uint64_t @objc closure #1 in XPCHandler.setPECConfig(_:clientConfig:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v7 = *v3;
  id v8 = *(void **)(*v3 + 24);
  id v9 = *(void **)(*v3 + 16);
  uint64_t v10 = *v3;
  swift_task_dealloc();

  swift_release();
  if (v4)
  {
    uint64_t v11 = _convertErrorToNSError(_:)();

    Class isa = 0;
    id v13 = (void *)v11;
  }
  else if (a2 >> 60 == 15)
  {
    uint64_t v11 = 0;
    Class isa = 0;
    id v13 = 0;
  }
  else
  {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data?(a1, a2);
    uint64_t v11 = 0;
    id v13 = isa;
  }
  uint64_t v14 = *(void (***)(void, void, void))(v7 + 40);
  ((void (**)(void, Class, uint64_t))v14)[2](v14, isa, v11);

  _Block_release(v14);
  uint64_t v15 = *(uint64_t (**)(void))(v10 + 8);
  return v15();
}

uint64_t XPCHandler.encryptBatch(ofElements:shardIndices:clientConfig:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[6] = a3;
  v4[7] = v3;
  v4[4] = a1;
  v4[5] = a2;
  return MEMORY[0x270FA2498](XPCHandler.encryptBatch(ofElements:shardIndices:clientConfig:), 0, 0);
}

uint64_t XPCHandler.encryptBatch(ofElements:shardIndices:clientConfig:)()
{
  uint64_t v2 = (void *)v0[3].i64[0];
  uint64_t v1 = v0[3].i64[1];
  uint64_t v4 = v0[2].i64[0];
  uint64_t v3 = v0[2].i64[1];
  uint64_t v5 = (void *)swift_task_alloc();
  v0[4].i64[0] = (uint64_t)v5;
  v5[2] = v3;
  v5[3] = v1;
  v5[4] = v4;
  swift_retain();
  id v6 = v2;
  uint64_t v7 = swift_task_alloc();
  v0[4].i64[1] = v7;
  *(void *)uint64_t v7 = v0;
  *(void *)(v7 + 8) = XPCHandler.constructPIRBatchRequest(withKeywords:shardIds:clientConfig:);
  int8x16_t v8 = v0[3];
  *(void *)(v7 + 136) = &async function pointer to partial apply for closure #1 in XPCHandler.encryptBatch(ofElements:shardIndices:clientConfig:);
  *(void *)(v7 + 144) = v5;
  *(int8x16_t *)(v7 + 120) = vextq_s8(v8, v8, 8uLL);
  *(void *)(v7 + 104) = 0xD000000000000033;
  *(void *)(v7 + 112) = 0x8000000249E95500;
  *(void *)(v7 + 88) = v0 + 1;
  *(void *)(v7 + 96) = v2;
  return MEMORY[0x270FA2498](_s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A012clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlF10Foundation4DataV_Tg503_s8a4ML10c34C19withStaticPECConfig33_673275016ghijklm3312clientConfig6method4bodyxSo09r82O0C_SSxAA14RequestContextVyAA0E13PECParametersVGYaKXEtYaKlFxyYaKXEfU_10Foundation4T5V_Tg5AcjA14RequestContextVyAA0X13PECParametersVGxs0E0_pRi_zRi0_zlyANIsgHnrzo_Tf1nnncn_nTY0_, 0, 0);
}

uint64_t closure #1 in XPCHandler.encryptBatch(ofElements:shardIndices:clientConfig:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[6] = a4;
  v5[7] = a5;
  v5[4] = a2;
  v5[5] = a3;
  v5[3] = a1;
  return MEMORY[0x270FA2498](closure #1 in XPCHandler.encryptBatch(ofElements:shardIndices:clientConfig:), 0, 0);
}

uint64_t closure #1 in XPCHandler.encryptBatch(ofElements:shardIndices:clientConfig:)()
{
  uint64_t v1 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo8NSNumberCG_Sis5NeverOTg5086_s8CipherML10XPCHandlerC16similarityScores11forElements12shardIndices12clientConfigSayo48So18CMLSimilarityScoreCGGSay10Foundation4DataVG_o3So8D134CGSo09CMLClientK0CtYaKFAkA14RequestContextVyAA19StaticPECParametersVGYaKXEfU_SiAQcfu_33_5bdac5b40c7411f20a64c1277f8fd44fAQSiTf3nnnpk_nTf1cn_nTm(v0[5]);
  v0[8] = v1;
  uint64_t v2 = (void *)swift_task_alloc();
  v0[9] = v2;
  *uint64_t v2 = v0;
  v2[1] = closure #1 in XPCHandler.encryptBatch(ofElements:shardIndices:clientConfig:);
  uint64_t v3 = v0[7];
  uint64_t v4 = v0[4];
  return RequestsManager.encryptBatch(batchOfElements:shardIndices:context:)(v3, v1, v4);
}

{
  uint64_t v0;

  *(int8x16_t *)*(void *)(v0 + 24) = vextq_s8(*(int8x16_t *)(v0 + 88), *(int8x16_t *)(v0 + 88), 8uLL);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in XPCHandler.encryptBatch(ofElements:shardIndices:clientConfig:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  *(void *)(*v3 + 80) = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v7 = closure #1 in XPCHandler.encryptBatch(ofElements:shardIndices:clientConfig:);
  }
  else
  {
    swift_bridgeObjectRelease();
    *(void *)(v6 + 88) = a2;
    *(void *)(v6 + 96) = a1;
    uint64_t v7 = closure #1 in XPCHandler.encryptBatch(ofElements:shardIndices:clientConfig:);
  }
  return MEMORY[0x270FA2498](v7, 0, 0);
}

uint64_t @objc closure #1 in XPCHandler.encryptBatch(ofElements:shardIndices:clientConfig:)(int a1, int a2, void *a3, void *aBlock, uint64_t a5)
{
  v5[2] = a3;
  v5[3] = a5;
  v5[4] = _Block_copy(aBlock);
  uint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v5[5] = v8;
  type metadata accessor for NSNumber(0, &lazy cache variable for type metadata for NSNumber);
  uint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v5[6] = v9;
  id v10 = a3;
  swift_retain();
  uint64_t v11 = (void *)swift_task_alloc();
  v5[7] = v11;
  void *v11 = v5;
  v11[1] = @objc closure #1 in XPCHandler.encryptBatch(ofElements:shardIndices:clientConfig:);
  v11[6] = v10;
  v11[7] = a5;
  v11[4] = v8;
  v11[5] = v9;
  return MEMORY[0x270FA2498](XPCHandler.encryptBatch(ofElements:shardIndices:clientConfig:), 0, 0);
}

uint64_t @objc closure #1 in XPCHandler.encryptBatch(ofElements:shardIndices:clientConfig:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v7 = *v3;
  uint64_t v8 = *(void **)(*v3 + 16);
  uint64_t v9 = *v3;
  swift_task_dealloc();

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v4)
  {
    uint64_t v10 = _convertErrorToNSError(_:)();

    Class isa = 0;
    uint64_t v12 = (void *)v10;
  }
  else
  {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data._Representation(a1, a2);
    uint64_t v10 = 0;
    uint64_t v12 = isa;
  }
  uint64_t v13 = *(void (***)(void, void, void))(v7 + 32);
  ((void (**)(void, Class, uint64_t))v13)[2](v13, isa, v10);

  _Block_release(v13);
  uint64_t v14 = *(uint64_t (**)(void))(v9 + 8);
  return v14();
}

uint64_t XPCHandler.encryptDifferentiallyPrivateFakes(_:shardIndex:shardCount:pecConfig:clientConfig:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[6] = a5;
  v6[7] = v5;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  return MEMORY[0x270FA2498](XPCHandler.encryptDifferentiallyPrivateFakes(_:shardIndex:shardCount:pecConfig:clientConfig:), 0, 0);
}

uint64_t XPCHandler.encryptDifferentiallyPrivateFakes(_:shardIndex:shardCount:pecConfig:clientConfig:)()
{
  uint64_t v2 = *(void **)(v0 + 48);
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v4 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 40);
  long long v10 = *(_OWORD *)(v0 + 16);
  uint64_t v5 = swift_task_alloc();
  *(void *)(v0 + 64) = v5;
  *(void *)(v5 + 16) = v1;
  *(_OWORD *)(v5 + 24) = v10;
  *(void *)(v5 + 40) = v4;
  *(void *)(v5 + 48) = v3;
  swift_retain();
  id v6 = v2;
  uint64_t v7 = (int8x16_t *)swift_task_alloc();
  *(void *)(v0 + 72) = v7;
  v7->i64[0] = v0;
  v7->i64[1] = (uint64_t)XPCHandler.encryptDifferentiallyPrivateFakes(_:shardIndex:shardCount:pecConfig:clientConfig:);
  int8x16_t v8 = *(int8x16_t *)(v0 + 48);
  v7[8].i64[0] = (uint64_t)&async function pointer to partial apply for closure #1 in XPCHandler.encryptDifferentiallyPrivateFakes(_:shardIndex:shardCount:pecConfig:clientConfig:);
  v7[8].i64[1] = v5;
  v7[7] = vextq_s8(v8, v8, 8uLL);
  v7[6].i64[0] = 0xD000000000000052;
  v7[6].i64[1] = 0x8000000249E95540;
  v7[5].i64[1] = (uint64_t)v2;
  return MEMORY[0x270FA2498](_s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A012clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFSay10Foundation4DataVG_Tg503_s8a4ML10c34C19withStaticPECConfig33_673275016ghijklm3312clientConfig6method4bodyxSo09r85O0C_SSxAA14RequestContextVyAA0E13PECParametersVGYaKXEtYaKlFxyYaKXEfU_Say10Foundation4T6VG_TG5AcjA14RequestContextVyAA0X13PECParametersVGxs0E0_pRi_zRi0_zlyAOIsgHnrzo_Tf1nncn_nTf4nndggg_nTY0_, 0, 0);
}

uint64_t XPCHandler.encryptDifferentiallyPrivateFakes(_:shardIndex:shardCount:pecConfig:clientConfig:)(uint64_t a1)
{
  uint64_t v4 = *(void **)(*v2 + 48);
  uint64_t v5 = *v2;
  *(void *)(*v2 + 80) = v1;
  swift_task_dealloc();

  swift_release();
  if (v1)
  {
    return MEMORY[0x270FA2498](XPCHandler.requestData(byLatitude:longitude:clientConfig:), 0, 0);
  }
  else
  {
    swift_task_dealloc();
    id v6 = *(uint64_t (**)(uint64_t))(v5 + 8);
    return v6(a1);
  }
}

uint64_t closure #1 in XPCHandler.encryptDifferentiallyPrivateFakes(_:shardIndex:shardCount:pecConfig:clientConfig:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[7] = a6;
  v7[8] = a7;
  v7[5] = a4;
  v7[6] = a5;
  v7[3] = a2;
  v7[4] = a3;
  v7[2] = a1;
  return MEMORY[0x270FA2498](closure #1 in XPCHandler.encryptDifferentiallyPrivateFakes(_:shardIndex:shardCount:pecConfig:clientConfig:), 0, 0);
}

uint64_t closure #1 in XPCHandler.encryptDifferentiallyPrivateFakes(_:shardIndex:shardCount:pecConfig:clientConfig:)()
{
  uint64_t v1 = (void *)swift_task_alloc();
  v0[9] = v1;
  *uint64_t v1 = v0;
  v1[1] = closure #1 in XPCHandler.encryptDifferentiallyPrivateFakes(_:shardIndex:shardCount:pecConfig:clientConfig:);
  uint64_t v2 = v0[7];
  uint64_t v3 = v0[8];
  uint64_t v5 = v0[5];
  uint64_t v4 = v0[6];
  uint64_t v6 = v0[3];
  return RequestsManager.encryptDifferentiallyPrivateFakes(batchOfElements:shardIndex:shardCount:pecConfig:context:)(v5, v4, v2, v3, v6);
}

{
  uint64_t v0;

  **(void **)(v0 + 16) = *(void *)(v0 + 80);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in XPCHandler.encryptDifferentiallyPrivateFakes(_:shardIndex:shardCount:pecConfig:clientConfig:)(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
  else
  {
    *(void *)(v4 + 80) = a1;
    return MEMORY[0x270FA2498](closure #1 in XPCHandler.encryptDifferentiallyPrivateFakes(_:shardIndex:shardCount:pecConfig:clientConfig:), 0, 0);
  }
}

uint64_t @objc closure #1 in XPCHandler.encryptDifferentiallyPrivateFakes(_:shardIndex:shardCount:pecConfig:clientConfig:)(int a1, uint64_t a2, uint64_t a3, void *a4, void *a5, void *aBlock, uint64_t a7)
{
  v7[5] = a5;
  v7[6] = a7;
  v7[3] = a3;
  v7[4] = a4;
  v7[2] = a2;
  v7[7] = _Block_copy(aBlock);
  v7[8] = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v10 = a4;
  id v11 = a5;
  swift_retain();
  return MEMORY[0x270FA2498](@objc closure #1 in XPCHandler.encryptDifferentiallyPrivateFakes(_:shardIndex:shardCount:pecConfig:clientConfig:), 0, 0);
}

uint64_t @objc closure #1 in XPCHandler.encryptDifferentiallyPrivateFakes(_:shardIndex:shardCount:pecConfig:clientConfig:)()
{
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v3 = *(void **)(v0 + 40);
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v4 = *(void *)(v0 + 32);
  long long v10 = *(_OWORD *)(v0 + 16);
  uint64_t v5 = swift_task_alloc();
  *(void *)(v0 + 72) = v5;
  *(void *)(v5 + 16) = v2;
  *(void *)(v5 + 24) = v1;
  *(_OWORD *)(v5 + 32) = v10;
  *(void *)(v5 + 48) = v4;
  id v6 = v3;
  swift_retain();
  uint64_t v7 = (int8x16_t *)swift_task_alloc();
  *(void *)(v0 + 80) = v7;
  v7->i64[0] = v0;
  v7->i64[1] = (uint64_t)@objc closure #1 in XPCHandler.encryptDifferentiallyPrivateFakes(_:shardIndex:shardCount:pecConfig:clientConfig:);
  int8x16_t v8 = *(int8x16_t *)(v0 + 40);
  v7[8].i64[0] = (uint64_t)&closure #1 in XPCHandler.encryptDifferentiallyPrivateFakes(_:shardIndex:shardCount:pecConfig:clientConfig:)partial apply;
  v7[8].i64[1] = v5;
  v7[7] = vextq_s8(v8, v8, 8uLL);
  v7[6].i64[0] = 0xD000000000000052;
  v7[6].i64[1] = 0x8000000249E95540;
  v7[5].i64[1] = (uint64_t)v3;
  return MEMORY[0x270FA2498](_s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A012clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFSay10Foundation4DataVG_Tg503_s8a4ML10c34C19withStaticPECConfig33_673275016ghijklm3312clientConfig6method4bodyxSo09r85O0C_SSxAA14RequestContextVyAA0E13PECParametersVGYaKXEtYaKlFxyYaKXEfU_Say10Foundation4T6VG_TG5AcjA14RequestContextVyAA0X13PECParametersVGxs0E0_pRi_zRi0_zlyAOIsgHnrzo_Tf1nncn_nTf4nndggg_nTY0_, 0, 0);
}

{
  uint64_t v0;
  void *v1;
  Class isa;
  void (**v3)(void, void, void);
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = *(void **)(v0 + 40);

  swift_release();
  swift_bridgeObjectRelease();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v3 = *(void (***)(void, void, void))(v0 + 56);
  ((void (**)(void, Class, void))v3)[2](v3, isa, 0);

  _Block_release(v3);
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void (**v4)(void, void, void);
  uint64_t (*v5)(void);
  uint64_t v7;

  uint64_t v1 = *(void **)(v0 + 88);
  uint64_t v2 = *(void **)(v0 + 40);

  swift_release();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v3 = (void *)_convertErrorToNSError(_:)();

  uint64_t v4 = *(void (***)(void, void, void))(v0 + 56);
  ((void (**)(void, void, void *))v4)[2](v4, 0, v3);

  _Block_release(v4);
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t @objc closure #1 in XPCHandler.encryptDifferentiallyPrivateFakes(_:shardIndex:shardCount:pecConfig:clientConfig:)(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void **)(*v2 + 40);
  *(void *)(*v2 + 88) = v1;
  swift_task_dealloc();

  swift_release();
  if (v1)
  {
    id v6 = @objc closure #1 in XPCHandler.encryptDifferentiallyPrivateFakes(_:shardIndex:shardCount:pecConfig:clientConfig:);
  }
  else
  {
    *(void *)(v4 + 96) = a1;
    swift_task_dealloc();
    id v6 = @objc closure #1 in XPCHandler.encryptDifferentiallyPrivateFakes(_:shardIndex:shardCount:pecConfig:clientConfig:);
  }
  return MEMORY[0x270FA2498](v6, 0, 0);
}

uint64_t XPCHandler.decryptBatch(ofSimilarityScores:clientConfig:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  return MEMORY[0x270FA2498](XPCHandler.decryptBatch(ofSimilarityScores:clientConfig:), 0, 0);
}

uint64_t XPCHandler.decryptBatch(ofSimilarityScores:clientConfig:)()
{
  uint64_t v2 = (void *)v0[2].i64[0];
  uint64_t v1 = v0[2].i64[1];
  uint64_t v4 = v0[1].i64[0];
  uint64_t v3 = v0[1].i64[1];
  uint64_t v5 = (void *)swift_task_alloc();
  v0[3].i64[0] = (uint64_t)v5;
  v5[2] = v1;
  v5[3] = v4;
  v5[4] = v3;
  swift_retain();
  id v6 = v2;
  uint64_t v7 = (int8x16_t *)swift_task_alloc();
  v0[3].i64[1] = (uint64_t)v7;
  v7->i64[0] = (uint64_t)v0;
  v7->i64[1] = (uint64_t)XPCHandler.similarityScores(forElements:shardIndices:clientConfig:);
  int8x16_t v8 = v0[2];
  v7[8].i64[0] = (uint64_t)&async function pointer to partial apply for closure #1 in XPCHandler.decryptBatch(ofSimilarityScores:clientConfig:);
  v7[8].i64[1] = (uint64_t)v5;
  v7[7] = vextq_s8(v8, v8, 8uLL);
  v7[6].i64[0] = 0xD00000000000002ELL;
  v7[6].i64[1] = 0x8000000249E955A0;
  v7[5].i64[1] = (uint64_t)v2;
  return MEMORY[0x270FA2498](_s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A012clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFSaySaySo18CMLSimilarityScoreCGG_Tg503_s8a4ML10c34C19withStaticPECConfig33_673275016ghijklm3312clientConfig6method4bodyxSo09r79O0C_SSxAA14RequestContextVyAA0E13PECParametersVGYaKXEtYaKlFxyYaKXEfU_SaySaySo18sT7CGG_TG5AcjA14RequestContextVyAA0X13PECParametersVGxs0E0_pRi_zRi0_zlyAOIsgHnrzo_Tf1nncn_nTf4nndggg_nTY0_, 0, 0);
}

uint64_t closure #1 in XPCHandler.decryptBatch(ofSimilarityScores:clientConfig:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return MEMORY[0x270FA2498](closure #1 in XPCHandler.decryptBatch(ofSimilarityScores:clientConfig:), 0, 0);
}

uint64_t closure #1 in XPCHandler.decryptBatch(ofSimilarityScores:clientConfig:)()
{
  uint64_t v1 = (void *)swift_task_alloc();
  v0[7] = v1;
  *uint64_t v1 = v0;
  v1[1] = closure #1 in XPCHandler.decryptBatch(ofSimilarityScores:clientConfig:);
  uint64_t v3 = v0[5];
  uint64_t v2 = v0[6];
  uint64_t v4 = v0[3];
  return RequestsManager.decryptBatch(batchOfSimilarityScores:context:)(v3, v2, v4);
}

{
  uint64_t v0;

  **(void **)(v0 + 16) = *(void *)(v0 + 64);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in XPCHandler.decryptBatch(ofSimilarityScores:clientConfig:)(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
  else
  {
    *(void *)(v4 + 64) = a1;
    return MEMORY[0x270FA2498](closure #1 in XPCHandler.decryptBatch(ofSimilarityScores:clientConfig:), 0, 0);
  }
}

uint64_t @objc closure #1 in XPCHandler.decryptBatch(ofSimilarityScores:clientConfig:)(void *a1, void *a2, void *aBlock, uint64_t a4)
{
  v4[2] = a2;
  v4[3] = a4;
  v4[4] = _Block_copy(aBlock);
  id v7 = a1;
  id v8 = a2;
  swift_retain();
  uint64_t v9 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = v10;

  v4[5] = v9;
  v4[6] = v11;
  return MEMORY[0x270FA2498](@objc closure #1 in XPCHandler.decryptBatch(ofSimilarityScores:clientConfig:), 0, 0);
}

uint64_t @objc closure #1 in XPCHandler.decryptBatch(ofSimilarityScores:clientConfig:)()
{
  uint64_t v2 = v0[2].i64[1];
  uint64_t v1 = v0[3].i64[0];
  uint64_t v4 = (void *)v0[1].i64[0];
  uint64_t v3 = v0[1].i64[1];
  uint64_t v5 = (void *)swift_task_alloc();
  v0[3].i64[1] = (uint64_t)v5;
  v5[2] = v3;
  v5[3] = v2;
  v5[4] = v1;
  id v6 = v4;
  swift_retain();
  id v7 = (int8x16_t *)swift_task_alloc();
  v0[4].i64[0] = (uint64_t)v7;
  v7->i64[0] = (uint64_t)v0;
  v7->i64[1] = (uint64_t)@objc closure #1 in XPCHandler.decryptBatch(ofSimilarityScores:clientConfig:);
  int8x16_t v8 = v0[1];
  v7[8].i64[0] = (uint64_t)&closure #1 in XPCHandler.decryptBatch(ofSimilarityScores:clientConfig:)partial apply;
  v7[8].i64[1] = (uint64_t)v5;
  v7[7] = vextq_s8(v8, v8, 8uLL);
  v7[6].i64[0] = 0xD00000000000002ELL;
  v7[6].i64[1] = 0x8000000249E955A0;
  v7[5].i64[1] = (uint64_t)v4;
  return MEMORY[0x270FA2498](_s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A012clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFSaySaySo18CMLSimilarityScoreCGG_Tg503_s8a4ML10c34C19withStaticPECConfig33_673275016ghijklm3312clientConfig6method4bodyxSo09r79O0C_SSxAA14RequestContextVyAA0E13PECParametersVGYaKXEtYaKlFxyYaKXEfU_SaySaySo18sT7CGG_TG5AcjA14RequestContextVyAA0X13PECParametersVGxs0E0_pRi_zRi0_zlyAOIsgHnrzo_Tf1nncn_nTf4nndggg_nTY0_, 0, 0);
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  Class isa;
  void (**v4)(void, void, void);
  uint64_t (*v5)(void);
  uint64_t v7;

  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v1 = *(void *)(v0 + 48);

  swift_release();
  outlined consume of Data._Representation(v2, v1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CMLSimilarityScore]);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void (***)(void, void, void))(v0 + 32);
  ((void (**)(void, Class, void))v4)[2](v4, isa, 0);

  _Block_release(v4);
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

{
  uint64_t v0;
  void *v1;
  unint64_t v2;
  uint64_t v3;
  void *v4;
  void (**v5)(void, void, void);
  uint64_t (*v6)(void);
  uint64_t v8;

  uint64_t v1 = *(void **)(v0 + 72);
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = *(void *)(v0 + 40);

  swift_release();
  outlined consume of Data._Representation(v3, v2);
  swift_task_dealloc();
  uint64_t v4 = (void *)_convertErrorToNSError(_:)();

  uint64_t v5 = *(void (***)(void, void, void))(v0 + 32);
  ((void (**)(void, void, void *))v5)[2](v5, 0, v4);

  _Block_release(v5);
  id v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t @objc closure #1 in XPCHandler.decryptBatch(ofSimilarityScores:clientConfig:)(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void **)(*v2 + 16);
  *(void *)(*v2 + 72) = v1;
  swift_task_dealloc();

  swift_release();
  if (v1)
  {
    id v6 = @objc closure #1 in XPCHandler.decryptBatch(ofSimilarityScores:clientConfig:);
  }
  else
  {
    *(void *)(v4 + 80) = a1;
    swift_task_dealloc();
    id v6 = @objc closure #1 in XPCHandler.decryptBatch(ofSimilarityScores:clientConfig:);
  }
  return MEMORY[0x270FA2498](v6, 0, 0);
}

uint64_t XPCHandler.asyncResponseSimilarityScores(forElements:shardIndices:clientConfig:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  return MEMORY[0x270FA2498](XPCHandler.asyncResponseSimilarityScores(forElements:shardIndices:clientConfig:), 0, 0);
}

uint64_t XPCHandler.asyncResponseSimilarityScores(forElements:shardIndices:clientConfig:)()
{
  uint64_t v2 = (void *)v0[2].i64[0];
  uint64_t v1 = v0[2].i64[1];
  uint64_t v4 = v0[1].i64[0];
  uint64_t v3 = v0[1].i64[1];
  uint64_t v5 = (void *)swift_task_alloc();
  v0[3].i64[0] = (uint64_t)v5;
  v5[2] = v3;
  v5[3] = v1;
  v5[4] = v4;
  swift_retain();
  id v6 = v2;
  id v7 = (int8x16_t *)swift_task_alloc();
  v0[3].i64[1] = (uint64_t)v7;
  v7->i64[0] = (uint64_t)v0;
  v7->i64[1] = (uint64_t)XPCHandler.asyncResponseSimilarityScores(forElements:shardIndices:clientConfig:);
  int8x16_t v8 = v0[2];
  v7[8].i64[0] = (uint64_t)&async function pointer to partial apply for closure #1 in XPCHandler.asyncResponseSimilarityScores(forElements:shardIndices:clientConfig:);
  v7[8].i64[1] = (uint64_t)v5;
  v7[7] = vextq_s8(v8, v8, 8uLL);
  v7[6].i64[0] = 0xD000000000000045;
  v7[6].i64[1] = 0x8000000249E955D0;
  v7[5].i64[1] = (uint64_t)v2;
  return MEMORY[0x270FA2498](_s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A012clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFSS_Tg503_s8a4ML10c34C19withStaticPECConfig33_673275016ghijklm3312clientConfig6method4bodyxSo09R75O0C_SSxAA14RequestContextVyAA0E13PECParametersVGYaKXEtYaKlFxyYaKXEfU_SS_TG5AcjA14RequestContextVyAA0V13PECParametersVGxs0E0_pRi_zRi0_zlySSIsgHnrzo_Tf1nncn_nTf4nndggg_nTY0_, 0, 0);
}

uint64_t XPCHandler.asyncResponseSimilarityScores(forElements:shardIndices:clientConfig:)(uint64_t a1, uint64_t a2)
{
  id v6 = *(void **)(*v3 + 32);
  uint64_t v7 = *v3;
  *(void *)(*v3 + 64) = v2;
  swift_task_dealloc();

  swift_release();
  if (v2)
  {
    return MEMORY[0x270FA2498](XPCHandler.requestData(byKeywords:shardIds:clientConfig:), 0, 0);
  }
  else
  {
    swift_task_dealloc();
    int8x16_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8);
    return v8(a1, a2);
  }
}

uint64_t closure #1 in XPCHandler.asyncResponseSimilarityScores(forElements:shardIndices:clientConfig:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[6] = a4;
  v5[7] = a5;
  v5[4] = a2;
  v5[5] = a3;
  v5[3] = a1;
  return MEMORY[0x270FA2498](closure #1 in XPCHandler.asyncResponseSimilarityScores(forElements:shardIndices:clientConfig:), 0, 0);
}

uint64_t closure #1 in XPCHandler.asyncResponseSimilarityScores(forElements:shardIndices:clientConfig:)()
{
  uint64_t v1 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo8NSNumberCG_Sis5NeverOTg5086_s8CipherML10XPCHandlerC16similarityScores11forElements12shardIndices12clientConfigSayo48So18CMLSimilarityScoreCGGSay10Foundation4DataVG_o3So8D134CGSo09CMLClientK0CtYaKFAkA14RequestContextVyAA19StaticPECParametersVGYaKXEfU_SiAQcfu_33_5bdac5b40c7411f20a64c1277f8fd44fAQSiTf3nnnpk_nTf1cn_nTm(v0[5]);
  v0[8] = v1;
  uint64_t v2 = (void *)swift_task_alloc();
  v0[9] = v2;
  *uint64_t v2 = v0;
  v2[1] = closure #1 in XPCHandler.asyncResponseSimilarityScores(forElements:shardIndices:clientConfig:);
  uint64_t v3 = v0[7];
  uint64_t v4 = v0[4];
  return RequestsManager.similarityScoresWithAsyncResponse(elements:shardIndices:context:)(v3, v1, v4);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v2 = *(void **)(v0 + 24);
  *uint64_t v2 = *(void *)(v0 + 96);
  v2[1] = v1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in XPCHandler.asyncResponseSimilarityScores(forElements:shardIndices:clientConfig:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  *(void *)(*v3 + 80) = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v7 = closure #1 in XPCHandler.similarityScores(forElements:shardIndices:clientConfig:);
  }
  else
  {
    swift_bridgeObjectRelease();
    *(void *)(v6 + 88) = a2;
    *(void *)(v6 + 96) = a1;
    uint64_t v7 = closure #1 in XPCHandler.asyncResponseSimilarityScores(forElements:shardIndices:clientConfig:);
  }
  return MEMORY[0x270FA2498](v7, 0, 0);
}

uint64_t @objc closure #1 in XPCHandler.asyncResponseSimilarityScores(forElements:shardIndices:clientConfig:)(int a1, int a2, void *a3, void *aBlock, uint64_t a5)
{
  v5[2] = a3;
  v5[3] = a5;
  v5[4] = _Block_copy(aBlock);
  v5[5] = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  type metadata accessor for NSNumber(0, &lazy cache variable for type metadata for NSNumber);
  v5[6] = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v7 = a3;
  swift_retain();
  return MEMORY[0x270FA2498](@objc closure #1 in XPCHandler.asyncResponseSimilarityScores(forElements:shardIndices:clientConfig:), 0, 0);
}

uint64_t @objc closure #1 in XPCHandler.asyncResponseSimilarityScores(forElements:shardIndices:clientConfig:)()
{
  uint64_t v2 = v0[2].i64[1];
  uint64_t v1 = v0[3].i64[0];
  uint64_t v4 = (void *)v0[1].i64[0];
  uint64_t v3 = v0[1].i64[1];
  uint64_t v5 = (void *)swift_task_alloc();
  v0[3].i64[1] = (uint64_t)v5;
  v5[2] = v1;
  v5[3] = v3;
  v5[4] = v2;
  id v6 = v4;
  swift_retain();
  id v7 = (int8x16_t *)swift_task_alloc();
  v0[4].i64[0] = (uint64_t)v7;
  v7->i64[0] = (uint64_t)v0;
  v7->i64[1] = (uint64_t)@objc closure #1 in XPCHandler.asyncResponseSimilarityScores(forElements:shardIndices:clientConfig:);
  int8x16_t v8 = v0[1];
  v7[8].i64[0] = (uint64_t)&closure #1 in XPCHandler.asyncResponseSimilarityScores(forElements:shardIndices:clientConfig:)partial apply;
  v7[8].i64[1] = (uint64_t)v5;
  v7[7] = vextq_s8(v8, v8, 8uLL);
  v7[6].i64[0] = 0xD000000000000045;
  v7[6].i64[1] = 0x8000000249E955D0;
  v7[5].i64[1] = (uint64_t)v4;
  return MEMORY[0x270FA2498](_s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A012clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFSS_Tg503_s8a4ML10c34C19withStaticPECConfig33_673275016ghijklm3312clientConfig6method4bodyxSo09R75O0C_SSxAA14RequestContextVyAA0E13PECParametersVGYaKXEtYaKlFxyYaKXEfU_SS_TG5AcjA14RequestContextVyAA0V13PECParametersVGxs0E0_pRi_zRi0_zlySSIsgHnrzo_Tf1nncn_nTf4nndggg_nTY0_, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void (**v4)(void, void, void);
  uint64_t (*v5)(void);
  uint64_t v7;

  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = *(void *)(v0 + 88);

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v3 = (void *)MEMORY[0x24C5B33F0](v2, v1);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void (***)(void, void, void))(v0 + 32);
  ((void (**)(void, void *, void))v4)[2](v4, v3, 0);

  _Block_release(v4);
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t @objc closure #1 in XPCHandler.asyncResponseSimilarityScores(forElements:shardIndices:clientConfig:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  id v7 = *(void **)(*v3 + 16);
  *(void *)(*v3 + 72) = v2;
  swift_task_dealloc();

  swift_release();
  if (v2)
  {
    int8x16_t v8 = @objc closure #1 in XPCHandler.similarityScores(forElements:shardIndices:clientConfig:);
  }
  else
  {
    *(void *)(v6 + 80) = a2;
    *(void *)(v6 + 88) = a1;
    swift_task_dealloc();
    int8x16_t v8 = @objc closure #1 in XPCHandler.asyncResponseSimilarityScores(forElements:shardIndices:clientConfig:);
  }
  return MEMORY[0x270FA2498](v8, 0, 0);
}

uint64_t XPCHandler.queryStatus(for:options:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return MEMORY[0x270FA2498](XPCHandler.queryStatus(for:options:), 0, 0);
}

uint64_t XPCHandler.queryStatus(for:options:)()
{
  uint64_t v1 = (void *)v0[2];
  swift_retain();
  id v2 = v1;
  uint64_t v3 = (void *)swift_task_alloc();
  v0[5] = v3;
  *uint64_t v3 = v0;
  v3[1] = XPCHandler.queryStatus(for:options:);
  uint64_t v5 = v0[3];
  uint64_t v4 = v0[4];
  v3[15] = v0[2];
  v3[16] = v5;
  v3[13] = 0x8000000249E95620;
  v3[14] = v4;
  v3[11] = v1;
  v3[12] = 0xD000000000000019;
  return MEMORY[0x270FA2498](specialized XPCHandler.withErrorReporting<A>(clientConfig:method:body:), 0, 0);
}

uint64_t XPCHandler.queryStatus(for:options:)(uint64_t a1)
{
  uint64_t v4 = *(void **)(*v2 + 16);
  uint64_t v8 = *v2;
  swift_task_dealloc();

  uint64_t v5 = swift_release();
  uint64_t v6 = *(uint64_t (**)(uint64_t))(v8 + 8);
  if (!v1) {
    uint64_t v5 = a1;
  }
  return v6(v5);
}

uint64_t @objc closure #1 in XPCHandler.queryStatus(for:options:)(void *a1, uint64_t a2, void *aBlock, uint64_t a4)
{
  v4[3] = a2;
  v4[4] = a4;
  v4[2] = a1;
  v4[5] = _Block_copy(aBlock);
  id v6 = a1;
  swift_retain();
  return MEMORY[0x270FA2498](@objc closure #1 in XPCHandler.queryStatus(for:options:), 0, 0);
}

uint64_t @objc closure #1 in XPCHandler.queryStatus(for:options:)()
{
  uint64_t v1 = (void *)v0[2];
  id v2 = v1;
  swift_retain();
  uint64_t v3 = (void *)swift_task_alloc();
  v0[6] = v3;
  *uint64_t v3 = v0;
  v3[1] = @objc closure #1 in XPCHandler.queryStatus(for:options:);
  uint64_t v5 = v0[3];
  uint64_t v4 = v0[4];
  v3[15] = v0[2];
  v3[16] = v5;
  v3[13] = 0x8000000249E95620;
  v3[14] = v4;
  v3[11] = v1;
  v3[12] = 0xD000000000000019;
  return MEMORY[0x270FA2498](specialized XPCHandler.withErrorReporting<A>(clientConfig:method:body:), 0, 0);
}

{
  uint64_t v0;
  void *v1;
  void (**v2)(void, void, void);
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v1 = *(void **)(v0 + 64);
  id v2 = *(void (***)(void, void, void))(v0 + 40);

  swift_release();
  ((void (**)(void, void *, void))v2)[2](v2, v1, 0);
  _Block_release(v2);

  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

{
  uint64_t v0;
  void *v1;
  void (**v2)(void, void, void);
  void *v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = *(void **)(v0 + 56);
  id v2 = *(void (***)(void, void, void))(v0 + 40);

  swift_release();
  uint64_t v3 = (void *)_convertErrorToNSError(_:)();

  ((void (**)(void, void, void *))v2)[2](v2, 0, v3);
  _Block_release(v2);
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t @objc closure #1 in XPCHandler.queryStatus(for:options:)(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void **)(*v2 + 16);
  *(void *)(*v2 + 56) = v1;
  swift_task_dealloc();

  swift_release();
  if (v1)
  {
    id v6 = @objc closure #1 in XPCHandler.queryStatus(for:options:);
  }
  else
  {
    *(void *)(v4 + 64) = a1;
    id v6 = @objc closure #1 in XPCHandler.queryStatus(for:options:);
  }
  return MEMORY[0x270FA2498](v6, 0, 0);
}

uint64_t XPCHandler.listUseCaseGroups()()
{
  *(void *)(v1 + 16) = v0;
  return MEMORY[0x270FA2498](XPCHandler.listUseCaseGroups(), 0, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v4;

  swift_retain();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v1;
  *uint64_t v1 = v0;
  v1[1] = XPCHandler.listUseCaseGroups();
  id v2 = *(void *)(v0 + 16);
  v1[4] = 0x8000000249E95640;
  v1[5] = v2;
  v1[3] = 0xD000000000000013;
  return MEMORY[0x270FA2498](specialized XPCHandler.withErrorReporting<A>(clientConfig:method:body:), 0, 0);
}

uint64_t XPCHandler.listUseCaseGroups()(uint64_t a1)
{
  uint64_t v7 = *v2;
  swift_task_dealloc();
  uint64_t v4 = swift_release();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v7 + 8);
  if (!v1) {
    uint64_t v4 = a1;
  }
  return v5(v4);
}

uint64_t @objc closure #1 in XPCHandler.listUseCaseGroups()(const void *a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a2;
  *(void *)(v2 + 24) = _Block_copy(a1);
  swift_retain();
  return MEMORY[0x270FA2498](@objc closure #1 in XPCHandler.listUseCaseGroups(), 0, 0);
}

uint64_t @objc closure #1 in XPCHandler.listUseCaseGroups()()
{
  swift_retain();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v1;
  *uint64_t v1 = v0;
  v1[1] = @objc closure #1 in XPCHandler.listUseCaseGroups();
  uint64_t v2 = *(void *)(v0 + 16);
  v1[4] = 0x8000000249E95640;
  v1[5] = v2;
  v1[3] = 0xD000000000000013;
  return MEMORY[0x270FA2498](specialized XPCHandler.withErrorReporting<A>(clientConfig:method:body:), 0, 0);
}

{
  uint64_t v0;
  Class isa;
  void (**v2)(void, void, void);
  uint64_t (*v3)(void);
  uint64_t v5;

  swift_release();
  type metadata accessor for NSNumber(0, &lazy cache variable for type metadata for CMLUseCaseGroup);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void (***)(void, void, void))(v0 + 24);
  ((void (**)(void, Class, void))v2)[2](v2, isa, 0);

  _Block_release(v2);
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

{
  void *v0;
  void *v1;
  void *v2;
  void (**v3)(void, void, void);
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = (void *)v0[5];
  swift_release();
  uint64_t v2 = (void *)_convertErrorToNSError(_:)();

  uint64_t v3 = (void (**)(void, void, void))v0[3];
  ((void (**)(void, void, void *))v3)[2](v3, 0, v2);

  _Block_release(v3);
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t @objc closure #1 in XPCHandler.listUseCaseGroups()(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 40) = v1;
  swift_task_dealloc();
  swift_release();
  if (v1)
  {
    uint64_t v5 = @objc closure #1 in XPCHandler.listUseCaseGroups();
  }
  else
  {
    *(void *)(v4 + 48) = a1;
    uint64_t v5 = @objc closure #1 in XPCHandler.listUseCaseGroups();
  }
  return MEMORY[0x270FA2498](v5, 0, 0);
}

uint64_t XPCHandler.configureUseCaseGroup(withName:useCaseGroup:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  return MEMORY[0x270FA2498](XPCHandler.configureUseCaseGroup(withName:useCaseGroup:), 0, 0);
}

uint64_t XPCHandler.configureUseCaseGroup(withName:useCaseGroup:)()
{
  uint64_t v1 = *(void **)(v0 + 32);
  swift_retain();
  swift_bridgeObjectRetain();
  id v2 = v1;
  uint64_t v3 = swift_task_alloc();
  *(void *)(v0 + 48) = v3;
  *(void *)uint64_t v3 = v0;
  *(void *)(v3 + 8) = XPCHandler.configureUseCaseGroup(withName:useCaseGroup:);
  uint64_t v4 = *(void *)(v0 + 40);
  long long v5 = *(_OWORD *)(v0 + 16);
  *(void *)(v3 + 144) = *(void *)(v0 + 32);
  *(_OWORD *)(v3 + 128) = v5;
  *(void *)(v3 + 112) = 0x8000000249E95660;
  *(void *)(v3 + 120) = v4;
  *(_OWORD *)(v3 + 96) = xmmword_249E89850;
  return MEMORY[0x270FA2498](specialized XPCHandler.withErrorReporting<A>(clientConfig:method:body:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 56) = v0;
  swift_task_dealloc();
  if (v0) {
    id v2 = XPCHandler.configureUseCaseGroup(withName:useCaseGroup:);
  }
  else {
    id v2 = XPCHandler.configureUseCaseGroup(withName:useCaseGroup:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in XPCHandler.configureUseCaseGroup(withName:useCaseGroup:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[12] = a4;
  v5[13] = a5;
  v5[10] = a2;
  v5[11] = a3;
  return MEMORY[0x270FA2498](closure #1 in XPCHandler.configureUseCaseGroup(withName:useCaseGroup:), 0, 0);
}

uint64_t closure #1 in XPCHandler.configureUseCaseGroup(withName:useCaseGroup:)()
{
  uint64_t v1 = *(void **)(*(void *)(v0 + 80) + 24);
  id v2 = (void *)MEMORY[0x24C5B33F0](0xD000000000000030, 0x8000000249E95D60);
  id v3 = objc_msgSend(v1, sel_valueForEntitlement_, v2);

  if (v3)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    *(_OWORD *)(v0 + 48) = 0u;
    *(_OWORD *)(v0 + 64) = 0u;
  }
  outlined init with take of Any?(v0 + 48, v0 + 16);
  if (*(void *)(v0 + 40))
  {
    if ((swift_dynamicCast() & 1) != 0 && *(unsigned char *)(v0 + 112) == 1)
    {
      RequestsManager.configureUseCaseGroup(name:group:)(*(Swift::String *)(v0 + 88), *(CMLUseCaseGroup_optional **)(v0 + 104));
      goto LABEL_10;
    }
  }
  else
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v0 + 16, &demangling cache variable for type metadata for Any?);
  }
  type metadata accessor for CipherMLError();
  _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_6((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
  swift_allocError();
  *uint64_t v4 = 0xD000000000000030;
  v4[1] = 0x8000000249E95D60;
  swift_storeEnumTagMultiPayload();
  swift_willThrow();
LABEL_10:
  long long v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t @objc closure #1 in XPCHandler.configureUseCaseGroup(withName:useCaseGroup:)(int a1, void *a2, void *aBlock, uint64_t a4)
{
  v4[2] = a2;
  v4[3] = a4;
  v4[4] = _Block_copy(aBlock);
  v4[5] = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v4[6] = v6;
  id v7 = a2;
  swift_retain();
  return MEMORY[0x270FA2498](@objc closure #1 in XPCHandler.configureUseCaseGroup(withName:useCaseGroup:), 0, 0);
}

uint64_t @objc closure #1 in XPCHandler.configureUseCaseGroup(withName:useCaseGroup:)()
{
  id v1 = *(id *)(v0 + 16);
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 56) = v2;
  *(void *)uint64_t v2 = v0;
  *(void *)(v2 + 8) = @objc closure #1 in XPCHandler.configureUseCaseGroup(withName:useCaseGroup:);
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v5 = *(void *)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + 24);
  *(void *)(v2 + 136) = *(void *)(v0 + 48);
  *(void *)(v2 + 144) = v5;
  *(void *)(v2 + 120) = v4;
  *(void *)(v2 + 128) = v3;
  *(void *)(v2 + 112) = 0x8000000249E95660;
  *(_OWORD *)(v2 + 96) = xmmword_249E89850;
  return MEMORY[0x270FA2498](specialized XPCHandler.withErrorReporting<A>(clientConfig:method:body:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 64) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = @objc closure #1 in XPCHandler.configureUseCaseGroup(withName:useCaseGroup:);
  }
  else {
    uint64_t v2 = @objc closure #1 in XPCHandler.configureUseCaseGroup(withName:useCaseGroup:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  id v1 = *(void *)(v0 + 32);
  uint64_t v2 = *(void **)(v0 + 16);
  swift_release();
  swift_bridgeObjectRelease();

  (*(void (**)(uint64_t, void))(v1 + 16))(v1, 0);
  _Block_release(*(const void **)(v0 + 32));
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  id v1 = *(void **)(v0 + 64);
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = *(void **)(v0 + 16);
  swift_release();
  swift_bridgeObjectRelease();

  uint64_t v4 = (void *)_convertErrorToNSError(_:)();
  (*(void (**)(uint64_t, void *))(v2 + 16))(v2, v4);

  _Block_release(*(const void **)(v0 + 32));
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A0LL12clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlF10Foundation4DataV_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm33LL12clientConfig6method4bodyxSo09r82O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_10Foundation4T5V_Tg5AcjA14RequestContextVyAA0X13PIRParametersVGxs0E0_pRi_zRi0_zlyANIsgHnrzo_Tf1nnncn_n(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[17] = a8;
  v8[18] = v10;
  v8[15] = a6;
  v8[16] = a7;
  v8[13] = a3;
  v8[14] = a4;
  v8[11] = a1;
  v8[12] = a2;
  return MEMORY[0x270FA2498](_s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A012clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlF10Foundation4DataV_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm3312clientConfig6method4bodyxSo09r82O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_10Foundation4T5V_Tg5AcjA14RequestContextVyAA0X13PIRParametersVGxs0E0_pRi_zRi0_zlyANIsgHnrzo_Tf1nnncn_nTY0_, 0, 0);
}

uint64_t _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A0LL12clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlF10Foundation4DataV_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm33LL12clientConfig6method4bodyxSo09r82O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_10Foundation4T5V_Tg5AcjA14RequestContextVyAA0X13PIRParametersVGxs0E0_pRi_zRi0_zlyANIsgHnrzo_Tf1nnncn_nTY0_()
{
  uint64_t v17 = v0;
  if (one-time initialization token for framework != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[19] = __swift_project_value_buffer(v1, (uint64_t)static Logger.framework);
  swift_bridgeObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  unint64_t v5 = v0[14];
  if (v4)
  {
    uint64_t v6 = v0[13];
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    uint64_t v16 = v8;
    *(_DWORD *)uint64_t v7 = 136446210;
    swift_bridgeObjectRetain();
    v0[10] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v5, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_249C3F000, v2, v3, "%{public}s method was called", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5B4790](v8, -1, -1);
    MEMORY[0x24C5B4790](v7, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v9 = (void *)swift_task_alloc();
  v0[20] = v9;
  *uint64_t v9 = v0;
  v9[1] = _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A012clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlF10Foundation4DataV_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm3312clientConfig6method4bodyxSo09r82O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_10Foundation4T5V_Tg5AcjA14RequestContextVyAA0X13PIRParametersVGxs0E0_pRi_zRi0_zlyANIsgHnrzo_Tf1nnncn_nTQ1_;
  uint64_t v10 = v0[17];
  uint64_t v11 = v0[18];
  uint64_t v12 = v0[15];
  uint64_t v13 = v0[16];
  uint64_t v14 = v0[11];
  return specialized closure #1 in XPCHandler.withStaticPIRConfig<A>(clientConfig:method:body:)(v14, v12, v13, v10, v11);
}

uint64_t _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A0LL12clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlF10Foundation4DataV_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm33LL12clientConfig6method4bodyxSo09r82O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_10Foundation4T5V_Tg5AcjA14RequestContextVyAA0X13PIRParametersVGxs0E0_pRi_zRi0_zlyANIsgHnrzo_Tf1nnncn_nTQ1_()
{
  *(void *)(*(void *)v1 + 168) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A012clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlF10Foundation4DataV_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm3312clientConfig6method4bodyxSo09r82O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_10Foundation4T5V_Tg5AcjA14RequestContextVyAA0X13PIRParametersVGxs0E0_pRi_zRi0_zlyANIsgHnrzo_Tf1nnncn_nTY3_;
  }
  else {
    uint64_t v2 = _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A012clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlF10Foundation4DataV_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm3312clientConfig6method4bodyxSo09r82O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_10Foundation4T5V_Tg5AcjA14RequestContextVyAA0X13PIRParametersVGxs0E0_pRi_zRi0_zlyANIsgHnrzo_Tf1nnncn_nTY2_;
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

uint64_t _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A0LL12clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlF10Foundation4DataV_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm33LL12clientConfig6method4bodyxSo09r82O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_10Foundation4T5V_Tg5AcjA14RequestContextVyAA0X13PIRParametersVGxs0E0_pRi_zRi0_zlyANIsgHnrzo_Tf1nnncn_nTY3_()
{
  uint64_t v35 = v0;
  uint64_t v1 = *(void **)(v0 + 168);
  swift_bridgeObjectRetain();
  id v2 = v1;
  swift_bridgeObjectRetain();
  id v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = *(void **)(v0 + 168);
    uint64_t v8 = *(void *)(v0 + 104);
    unint64_t v7 = *(void *)(v0 + 112);
    uint64_t v9 = swift_slowAlloc();
    uint64_t v10 = (void *)swift_slowAlloc();
    uint64_t v32 = swift_slowAlloc();
    uint64_t v34 = v32;
    *(_DWORD *)uint64_t v9 = 136446466;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v7, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v9 + 12) = 2114;
    id v11 = v6;
    uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 72) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v10 = v12;

    _os_log_impl(&dword_249C3F000, v4, v5, "%{public}s threw an error: %{public}@", (uint8_t *)v9, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x24C5B4790](v10, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x24C5B4790](v32, -1, -1);
    MEMORY[0x24C5B4790](v9, -1, -1);
  }
  else
  {
    uint64_t v13 = *(void **)(v0 + 168);
    swift_bridgeObjectRelease_n();
  }
  uint64_t v14 = *(void **)(v0 + 96);
  if (v14)
  {
    id v15 = objc_msgSend(*(id *)(v0 + 96), sel_useCase);
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v18 = v17;

    id v19 = objc_msgSend(v14, sel_sourceApplicationBundleIdentifier);
    if (v19)
    {
      uint64_t v20 = v19;
      uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v14 = v22;
    }
    else
    {
      uint64_t v21 = 0;
      uint64_t v14 = 0;
    }
  }
  else
  {
    uint64_t v21 = 0;
    unint64_t v18 = 0xE400000000000000;
    uint64_t v16 = 1701736270;
  }
  uint64_t v23 = *(void **)(v0 + 168);
  uint64_t v24 = *(void *)(v0 + 112);
  uint64_t v33 = *(void **)(v0 + 128);
  uint64_t v25 = *(void *)(v0 + 104);
  uint64_t v26 = (void *)MEMORY[0x24C5B33F0](0xD00000000000001BLL, 0x8000000249E94BF0);
  uint64_t v27 = (void *)swift_allocObject();
  v27[2] = v16;
  v27[3] = v18;
  v27[4] = v21;
  v27[5] = v14;
  v27[6] = v25;
  v27[7] = v24;
  v27[8] = v23;
  *(void *)(v0 + 48) = _s8CipherML9TelemetryO19reportErrorToServer7useCase10identifier6method5errorySS_SSSgSSs0E0_ptFZSDySSSo8NSObjectCGSgycfU_TA_0;
  *(void *)(v0 + 56) = v27;
  *(void *)(v0 + 16) = MEMORY[0x263EF8330];
  *(void *)(v0 + 24) = 1107296256;
  *(void *)(v0 + 32) = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
  *(void *)(v0 + 40) = &block_descriptor_697;
  uint64_t v28 = _Block_copy((const void *)(v0 + 16));
  swift_bridgeObjectRetain();
  id v29 = v23;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v28);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  specialized static CipherMLError.makeErrorConformToSecureCoding(error:)(v23);
  swift_willThrow();

  swift_release();
  uint64_t v30 = *(uint64_t (**)(void))(v0 + 8);
  return v30();
}

uint64_t partial apply for closure #1 in XPCHandler.requestData(byIndices:clientConfig:)()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return MEMORY[0x270FA2498](closure #1 in XPCHandler.constructPIRRequest(withLatitude:longitude:clientConfig:), 0, 0);
}

uint64_t _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A0LL12clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlF10Foundation4DataV_Tg503_s8a4ML10c34C19withStaticPECConfig33_673275016ghijklm33LL12clientConfig6method4bodyxSo09r82O0C_SSxAA14RequestContextVyAA0E13PECParametersVGYaKXEtYaKlFxyYaKXEfU_10Foundation4T5V_Tg5AcjA14RequestContextVyAA0X13PECParametersVGxs0E0_pRi_zRi0_zlyANIsgHnrzo_Tf1nnncn_n(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[17] = a8;
  v8[18] = v10;
  v8[15] = a6;
  v8[16] = a7;
  v8[13] = a3;
  v8[14] = a4;
  v8[11] = a1;
  v8[12] = a2;
  return MEMORY[0x270FA2498](_s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A012clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlF10Foundation4DataV_Tg503_s8a4ML10c34C19withStaticPECConfig33_673275016ghijklm3312clientConfig6method4bodyxSo09r82O0C_SSxAA14RequestContextVyAA0E13PECParametersVGYaKXEtYaKlFxyYaKXEfU_10Foundation4T5V_Tg5AcjA14RequestContextVyAA0X13PECParametersVGxs0E0_pRi_zRi0_zlyANIsgHnrzo_Tf1nnncn_nTY0_, 0, 0);
}

uint64_t _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A0LL12clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlF10Foundation4DataV_Tg503_s8a4ML10c34C19withStaticPECConfig33_673275016ghijklm33LL12clientConfig6method4bodyxSo09r82O0C_SSxAA14RequestContextVyAA0E13PECParametersVGYaKXEtYaKlFxyYaKXEfU_10Foundation4T5V_Tg5AcjA14RequestContextVyAA0X13PECParametersVGxs0E0_pRi_zRi0_zlyANIsgHnrzo_Tf1nnncn_nTY0_()
{
  unint64_t v17 = v0;
  if (one-time initialization token for framework != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[19] = __swift_project_value_buffer(v1, (uint64_t)static Logger.framework);
  swift_bridgeObjectRetain_n();
  id v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  unint64_t v5 = v0[14];
  if (v4)
  {
    uint64_t v6 = v0[13];
    unint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    uint64_t v16 = v8;
    *(_DWORD *)unint64_t v7 = 136446210;
    swift_bridgeObjectRetain();
    v0[10] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v5, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_249C3F000, v2, v3, "%{public}s method was called", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5B4790](v8, -1, -1);
    MEMORY[0x24C5B4790](v7, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v9 = (void *)swift_task_alloc();
  v0[20] = v9;
  *uint64_t v9 = v0;
  v9[1] = _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A012clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlF10Foundation4DataV_Tg503_s8a4ML10c34C19withStaticPECConfig33_673275016ghijklm3312clientConfig6method4bodyxSo09r82O0C_SSxAA14RequestContextVyAA0E13PECParametersVGYaKXEtYaKlFxyYaKXEfU_10Foundation4T5V_Tg5AcjA14RequestContextVyAA0X13PECParametersVGxs0E0_pRi_zRi0_zlyANIsgHnrzo_Tf1nnncn_nTQ1_;
  uint64_t v10 = v0[17];
  uint64_t v11 = v0[18];
  uint64_t v12 = v0[15];
  uint64_t v13 = v0[16];
  uint64_t v14 = v0[11];
  return specialized closure #1 in XPCHandler.withStaticPECConfig<A>(clientConfig:method:body:)(v14, v12, v13, v10, v11);
}

uint64_t _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A0LL12clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlF10Foundation4DataV_Tg503_s8a4ML10c34C19withStaticPECConfig33_673275016ghijklm33LL12clientConfig6method4bodyxSo09r82O0C_SSxAA14RequestContextVyAA0E13PECParametersVGYaKXEtYaKlFxyYaKXEfU_10Foundation4T5V_Tg5AcjA14RequestContextVyAA0X13PECParametersVGxs0E0_pRi_zRi0_zlyANIsgHnrzo_Tf1nnncn_nTQ1_()
{
  *(void *)(*(void *)v1 + 168) = v0;
  swift_task_dealloc();
  if (v0) {
    id v2 = _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A012clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlF10Foundation4DataV_Tg503_s8a4ML10c34C19withStaticPECConfig33_673275016ghijklm3312clientConfig6method4bodyxSo09r82O0C_SSxAA14RequestContextVyAA0E13PECParametersVGYaKXEtYaKlFxyYaKXEfU_10Foundation4T5V_Tg5AcjA14RequestContextVyAA0X13PECParametersVGxs0E0_pRi_zRi0_zlyANIsgHnrzo_Tf1nnncn_nTY3_;
  }
  else {
    id v2 = _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A012clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlF10Foundation4DataV_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm3312clientConfig6method4bodyxSo09r82O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_10Foundation4T5V_Tg5AcjA14RequestContextVyAA0X13PIRParametersVGxs0E0_pRi_zRi0_zlyANIsgHnrzo_Tf1nnncn_nTY2_;
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

uint64_t _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A0LL12clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlF10Foundation4DataV_Tg503_s8a4ML10c34C19withStaticPECConfig33_673275016ghijklm33LL12clientConfig6method4bodyxSo09r82O0C_SSxAA14RequestContextVyAA0E13PECParametersVGYaKXEtYaKlFxyYaKXEfU_10Foundation4T5V_Tg5AcjA14RequestContextVyAA0X13PECParametersVGxs0E0_pRi_zRi0_zlyANIsgHnrzo_Tf1nnncn_nTY3_()
{
  uint64_t v35 = v0;
  uint64_t v1 = *(void **)(v0 + 168);
  swift_bridgeObjectRetain();
  id v2 = v1;
  swift_bridgeObjectRetain();
  id v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = *(void **)(v0 + 168);
    uint64_t v8 = *(void *)(v0 + 104);
    unint64_t v7 = *(void *)(v0 + 112);
    uint64_t v9 = swift_slowAlloc();
    uint64_t v10 = (void *)swift_slowAlloc();
    uint64_t v32 = swift_slowAlloc();
    uint64_t v34 = v32;
    *(_DWORD *)uint64_t v9 = 136446466;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v7, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v9 + 12) = 2114;
    id v11 = v6;
    uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 72) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v10 = v12;

    _os_log_impl(&dword_249C3F000, v4, v5, "%{public}s threw an error: %{public}@", (uint8_t *)v9, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x24C5B4790](v10, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x24C5B4790](v32, -1, -1);
    MEMORY[0x24C5B4790](v9, -1, -1);
  }
  else
  {
    uint64_t v13 = *(void **)(v0 + 168);
    swift_bridgeObjectRelease_n();
  }
  uint64_t v14 = *(void **)(v0 + 96);
  if (v14)
  {
    id v15 = objc_msgSend(*(id *)(v0 + 96), sel_useCase);
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v18 = v17;

    id v19 = objc_msgSend(v14, sel_sourceApplicationBundleIdentifier);
    if (v19)
    {
      uint64_t v20 = v19;
      uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v14 = v22;
    }
    else
    {
      uint64_t v21 = 0;
      uint64_t v14 = 0;
    }
  }
  else
  {
    uint64_t v21 = 0;
    unint64_t v18 = 0xE400000000000000;
    uint64_t v16 = 1701736270;
  }
  uint64_t v23 = *(void **)(v0 + 168);
  uint64_t v24 = *(void *)(v0 + 112);
  uint64_t v33 = *(void **)(v0 + 128);
  uint64_t v25 = *(void *)(v0 + 104);
  uint64_t v26 = (void *)MEMORY[0x24C5B33F0](0xD00000000000001BLL, 0x8000000249E94BF0);
  uint64_t v27 = (void *)swift_allocObject();
  v27[2] = v16;
  v27[3] = v18;
  v27[4] = v21;
  v27[5] = v14;
  v27[6] = v25;
  v27[7] = v24;
  v27[8] = v23;
  *(void *)(v0 + 48) = _s8CipherML9TelemetryO19reportErrorToServer7useCase10identifier6method5errorySS_SSSgSSs0E0_ptFZSDySSSo8NSObjectCGSgycfU_TA_0;
  *(void *)(v0 + 56) = v27;
  *(void *)(v0 + 16) = MEMORY[0x263EF8330];
  *(void *)(v0 + 24) = 1107296256;
  *(void *)(v0 + 32) = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
  *(void *)(v0 + 40) = &block_descriptor_585;
  uint64_t v28 = _Block_copy((const void *)(v0 + 16));
  swift_bridgeObjectRetain();
  id v29 = v23;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v28);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  specialized static CipherMLError.makeErrorConformToSecureCoding(error:)(v23);
  swift_willThrow();

  swift_release();
  uint64_t v30 = *(uint64_t (**)(void))(v0 + 8);
  return v30();
}

uint64_t _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A0LL12clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFyt_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm33LL12clientConfig6method4bodyxSo09R75O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_yt_Tg5AcjA14RequestContextVyAA0V13PIRParametersVGxs0E0_pRi_zRi0_zlyytIsgHnrzo_Tf1nnncn_n(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[17] = a8;
  v8[18] = v10;
  v8[15] = a6;
  v8[16] = a7;
  v8[13] = a3;
  v8[14] = a4;
  v8[11] = a1;
  v8[12] = a2;
  return MEMORY[0x270FA2498](_s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A012clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFyt_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm3312clientConfig6method4bodyxSo09R75O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_yt_Tg5AcjA14RequestContextVyAA0V13PIRParametersVGxs0E0_pRi_zRi0_zlyytIsgHnrzo_Tf1nnncn_nTY0_, 0, 0);
}

uint64_t _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A0LL12clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFyt_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm33LL12clientConfig6method4bodyxSo09R75O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_yt_Tg5AcjA14RequestContextVyAA0V13PIRParametersVGxs0E0_pRi_zRi0_zlyytIsgHnrzo_Tf1nnncn_nTY0_()
{
  unint64_t v17 = v0;
  if (one-time initialization token for framework != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[19] = __swift_project_value_buffer(v1, (uint64_t)static Logger.framework);
  swift_bridgeObjectRetain_n();
  id v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  unint64_t v5 = v0[14];
  if (v4)
  {
    uint64_t v6 = v0[13];
    unint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    uint64_t v16 = v8;
    *(_DWORD *)unint64_t v7 = 136446210;
    swift_bridgeObjectRetain();
    v0[10] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v5, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_249C3F000, v2, v3, "%{public}s method was called", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5B4790](v8, -1, -1);
    MEMORY[0x24C5B4790](v7, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v9 = (void *)swift_task_alloc();
  v0[20] = v9;
  *uint64_t v9 = v0;
  v9[1] = _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A012clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFyt_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm3312clientConfig6method4bodyxSo09R75O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_yt_Tg5AcjA14RequestContextVyAA0V13PIRParametersVGxs0E0_pRi_zRi0_zlyytIsgHnrzo_Tf1nnncn_nTQ1_;
  uint64_t v10 = v0[17];
  uint64_t v11 = v0[18];
  uint64_t v12 = v0[15];
  uint64_t v13 = v0[16];
  uint64_t v14 = v0[11];
  return specialized closure #1 in XPCHandler.withStaticPIRConfig<A>(clientConfig:method:body:)(v14, v12, v13, v10, v11);
}

uint64_t _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A0LL12clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFyt_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm33LL12clientConfig6method4bodyxSo09R75O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_yt_Tg5AcjA14RequestContextVyAA0V13PIRParametersVGxs0E0_pRi_zRi0_zlyytIsgHnrzo_Tf1nnncn_nTQ1_()
{
  *(void *)(*(void *)v1 + 168) = v0;
  swift_task_dealloc();
  if (v0) {
    id v2 = _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A012clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFyt_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm3312clientConfig6method4bodyxSo09R75O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_yt_Tg5AcjA14RequestContextVyAA0V13PIRParametersVGxs0E0_pRi_zRi0_zlyytIsgHnrzo_Tf1nnncn_nTY3_;
  }
  else {
    id v2 = _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A012clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlF10Foundation4DataV_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm3312clientConfig6method4bodyxSo09r82O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_10Foundation4T5V_Tg5AcjA14RequestContextVyAA0X13PIRParametersVGxs0E0_pRi_zRi0_zlyANIsgHnrzo_Tf1nnncn_nTY2_;
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

uint64_t _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A0LL12clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFyt_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm33LL12clientConfig6method4bodyxSo09R75O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_yt_Tg5AcjA14RequestContextVyAA0V13PIRParametersVGxs0E0_pRi_zRi0_zlyytIsgHnrzo_Tf1nnncn_nTY3_()
{
  uint64_t v35 = v0;
  uint64_t v1 = *(void **)(v0 + 168);
  swift_bridgeObjectRetain();
  id v2 = v1;
  swift_bridgeObjectRetain();
  id v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = *(void **)(v0 + 168);
    uint64_t v8 = *(void *)(v0 + 104);
    unint64_t v7 = *(void *)(v0 + 112);
    uint64_t v9 = swift_slowAlloc();
    uint64_t v10 = (void *)swift_slowAlloc();
    uint64_t v32 = swift_slowAlloc();
    uint64_t v34 = v32;
    *(_DWORD *)uint64_t v9 = 136446466;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v7, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v9 + 12) = 2114;
    id v11 = v6;
    uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 72) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v10 = v12;

    _os_log_impl(&dword_249C3F000, v4, v5, "%{public}s threw an error: %{public}@", (uint8_t *)v9, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x24C5B4790](v10, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x24C5B4790](v32, -1, -1);
    MEMORY[0x24C5B4790](v9, -1, -1);
  }
  else
  {
    uint64_t v13 = *(void **)(v0 + 168);
    swift_bridgeObjectRelease_n();
  }
  uint64_t v14 = *(void **)(v0 + 96);
  if (v14)
  {
    id v15 = objc_msgSend(*(id *)(v0 + 96), sel_useCase);
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v18 = v17;

    id v19 = objc_msgSend(v14, sel_sourceApplicationBundleIdentifier);
    if (v19)
    {
      uint64_t v20 = v19;
      uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v14 = v22;
    }
    else
    {
      uint64_t v21 = 0;
      uint64_t v14 = 0;
    }
  }
  else
  {
    uint64_t v21 = 0;
    unint64_t v18 = 0xE400000000000000;
    uint64_t v16 = 1701736270;
  }
  uint64_t v23 = *(void **)(v0 + 168);
  uint64_t v24 = *(void *)(v0 + 112);
  uint64_t v33 = *(void **)(v0 + 128);
  uint64_t v25 = *(void *)(v0 + 104);
  uint64_t v26 = (void *)MEMORY[0x24C5B33F0](0xD00000000000001BLL, 0x8000000249E94BF0);
  uint64_t v27 = (void *)swift_allocObject();
  v27[2] = v16;
  v27[3] = v18;
  v27[4] = v21;
  v27[5] = v14;
  v27[6] = v25;
  v27[7] = v24;
  v27[8] = v23;
  *(void *)(v0 + 48) = _s8CipherML9TelemetryO19reportErrorToServer7useCase10identifier6method5errorySS_SSSgSSs0E0_ptFZSDySSSo8NSObjectCGSgycfU_TA_0;
  *(void *)(v0 + 56) = v27;
  *(void *)(v0 + 16) = MEMORY[0x263EF8330];
  *(void *)(v0 + 24) = 1107296256;
  *(void *)(v0 + 32) = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
  *(void *)(v0 + 40) = &block_descriptor_660;
  uint64_t v28 = _Block_copy((const void *)(v0 + 16));
  swift_bridgeObjectRetain();
  id v29 = v23;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v28);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  specialized static CipherMLError.makeErrorConformToSecureCoding(error:)(v23);
  swift_willThrow();

  swift_release();
  uint64_t v30 = *(uint64_t (**)(void))(v0 + 8);
  return v30();
}

uint64_t specialized XPCHandler.withErrorReporting<A>(clientConfig:method:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[17] = a8;
  v8[18] = v10;
  v8[15] = a6;
  v8[16] = a7;
  v8[13] = a3;
  v8[14] = a4;
  v8[11] = a1;
  v8[12] = a2;
  return MEMORY[0x270FA2498](specialized XPCHandler.withErrorReporting<A>(clientConfig:method:body:), 0, 0);
}

uint64_t specialized XPCHandler.withErrorReporting<A>(clientConfig:method:body:)()
{
  uint64_t v14 = v0;
  if (one-time initialization token for framework != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  *(void *)(v0 + 152) = __swift_project_value_buffer(v1, (uint64_t)static Logger.framework);
  swift_bridgeObjectRetain_n();
  id v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  unint64_t v5 = *(void *)(v0 + 112);
  if (v4)
  {
    uint64_t v6 = *(void *)(v0 + 104);
    unint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    uint64_t v13 = v8;
    *(_DWORD *)unint64_t v7 = 136446210;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 80) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v5, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_249C3F000, v2, v3, "%{public}s method was called", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5B4790](v8, -1, -1);
    MEMORY[0x24C5B4790](v7, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v9 = swift_task_alloc();
  *(void *)(v0 + 160) = v9;
  *(void *)uint64_t v9 = v0;
  *(void *)(v9 + 8) = specialized XPCHandler.withErrorReporting<A>(clientConfig:method:body:);
  uint64_t v10 = *(void *)(v0 + 144);
  long long v11 = *(_OWORD *)(v0 + 120);
  *(void *)(v9 + 96) = *(void *)(v0 + 136);
  *(void *)(v9 + 104) = v10;
  *(_OWORD *)(v9 + 80) = v11;
  return MEMORY[0x270FA2498](closure #1 in XPCHandler.configureUseCaseGroup(withName:useCaseGroup:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 168) = v0;
  swift_task_dealloc();
  if (v0) {
    id v2 = specialized XPCHandler.withErrorReporting<A>(clientConfig:method:body:);
  }
  else {
    id v2 = specialized XPCHandler.withErrorReporting<A>(clientConfig:method:body:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void **)(v0 + 144);
  swift_release();
  swift_bridgeObjectRelease();

  id v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  id v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  id v29;
  uint64_t (*v30)(void);
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  uint64_t v35 = v0;
  uint64_t v1 = *(void **)(v0 + 168);
  swift_bridgeObjectRetain();
  id v2 = v1;
  swift_bridgeObjectRetain();
  os_log_type_t v3 = v1;
  BOOL v4 = Logger.logObject.getter();
  unint64_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = *(void **)(v0 + 168);
    uint64_t v8 = *(void *)(v0 + 104);
    unint64_t v7 = *(void *)(v0 + 112);
    uint64_t v9 = swift_slowAlloc();
    uint64_t v10 = (void *)swift_slowAlloc();
    uint64_t v32 = swift_slowAlloc();
    uint64_t v34 = v32;
    *(_DWORD *)uint64_t v9 = 136446466;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v7, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v9 + 12) = 2114;
    long long v11 = v6;
    uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 72) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v10 = v12;

    _os_log_impl(&dword_249C3F000, v4, v5, "%{public}s threw an error: %{public}@", (uint8_t *)v9, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x24C5B4790](v10, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x24C5B4790](v32, -1, -1);
    MEMORY[0x24C5B4790](v9, -1, -1);
  }
  else
  {
    uint64_t v13 = *(void **)(v0 + 168);
    swift_bridgeObjectRelease_n();
  }
  uint64_t v14 = *(void **)(v0 + 96);
  if (v14)
  {
    uint64_t v15 = objc_msgSend(*(id *)(v0 + 96), sel_useCase);
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v18 = v17;

    id v19 = objc_msgSend(v14, sel_sourceApplicationBundleIdentifier);
    if (v19)
    {
      uint64_t v20 = v19;
      uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v14 = v22;
    }
    else
    {
      uint64_t v21 = 0;
      uint64_t v14 = 0;
    }
  }
  else
  {
    uint64_t v21 = 0;
    unint64_t v18 = 0xE400000000000000;
    uint64_t v16 = 1701736270;
  }
  uint64_t v23 = *(void **)(v0 + 168);
  uint64_t v33 = *(void **)(v0 + 144);
  uint64_t v24 = *(void *)(v0 + 112);
  uint64_t v25 = *(void *)(v0 + 104);
  uint64_t v26 = (void *)MEMORY[0x24C5B33F0](0xD00000000000001BLL, 0x8000000249E94BF0);
  uint64_t v27 = (void *)swift_allocObject();
  v27[2] = v16;
  v27[3] = v18;
  v27[4] = v21;
  v27[5] = v14;
  v27[6] = v25;
  v27[7] = v24;
  v27[8] = v23;
  *(void *)(v0 + 48) = _s8CipherML9TelemetryO19reportErrorToServer7useCase10identifier6method5errorySS_SSSgSSs0E0_ptFZSDySSSo8NSObjectCGSgycfU_TA_0;
  *(void *)(v0 + 56) = v27;
  *(void *)(v0 + 16) = MEMORY[0x263EF8330];
  *(void *)(v0 + 24) = 1107296256;
  *(void *)(v0 + 32) = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
  *(void *)(v0 + 40) = &block_descriptor_1;
  uint64_t v28 = _Block_copy((const void *)(v0 + 16));
  swift_bridgeObjectRetain();
  id v29 = v23;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v28);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  specialized static CipherMLError.makeErrorConformToSecureCoding(error:)(v23);
  swift_willThrow();

  swift_release();
  swift_bridgeObjectRelease();

  uint64_t v30 = *(uint64_t (**)(void))(v0 + 8);
  return v30();
}

{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  void *v14;
  uint64_t v15;

  uint64_t v14 = v0;
  if (one-time initialization token for framework != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[17] = __swift_project_value_buffer(v1, (uint64_t)static Logger.framework);
  swift_bridgeObjectRetain_n();
  id v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  unint64_t v5 = v0[13];
  if (v4)
  {
    uint64_t v6 = v0[12];
    unint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    uint64_t v13 = v8;
    *(_DWORD *)unint64_t v7 = 136446210;
    swift_bridgeObjectRetain();
    v0[10] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v5, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_249C3F000, v2, v3, "%{public}s method was called", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5B4790](v8, -1, -1);
    MEMORY[0x24C5B4790](v7, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v9 = (void *)swift_task_alloc();
  v0[18] = v9;
  *uint64_t v9 = v0;
  v9[1] = specialized XPCHandler.withErrorReporting<A>(clientConfig:method:body:);
  long long v11 = v0[15];
  uint64_t v10 = v0[16];
  return RequestsManager.queryStatus(for:options:)(v11, v10);
}

{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  id v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  id v29;
  uint64_t (*v30)(void);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  uint64_t v34 = v0;
  uint64_t v1 = *(void **)(v0 + 152);
  swift_bridgeObjectRetain();
  id v2 = v1;
  swift_bridgeObjectRetain();
  os_log_type_t v3 = v1;
  BOOL v4 = Logger.logObject.getter();
  unint64_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = *(void **)(v0 + 152);
    uint64_t v8 = *(void *)(v0 + 96);
    unint64_t v7 = *(void *)(v0 + 104);
    uint64_t v9 = swift_slowAlloc();
    uint64_t v10 = (void *)swift_slowAlloc();
    uint64_t v32 = swift_slowAlloc();
    uint64_t v33 = v32;
    *(_DWORD *)uint64_t v9 = 136446466;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v7, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v9 + 12) = 2114;
    long long v11 = v6;
    uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 72) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v10 = v12;

    _os_log_impl(&dword_249C3F000, v4, v5, "%{public}s threw an error: %{public}@", (uint8_t *)v9, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x24C5B4790](v10, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x24C5B4790](v32, -1, -1);
    MEMORY[0x24C5B4790](v9, -1, -1);
  }
  else
  {
    uint64_t v13 = *(void **)(v0 + 152);
    swift_bridgeObjectRelease_n();
  }
  uint64_t v14 = *(void **)(v0 + 88);
  if (v14)
  {
    uint64_t v15 = objc_msgSend(*(id *)(v0 + 88), sel_useCase);
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v18 = v17;

    id v19 = objc_msgSend(v14, sel_sourceApplicationBundleIdentifier);
    if (v19)
    {
      uint64_t v20 = v19;
      uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v14 = v22;
    }
    else
    {
      uint64_t v21 = 0;
      uint64_t v14 = 0;
    }
  }
  else
  {
    uint64_t v21 = 0;
    unint64_t v18 = 0xE400000000000000;
    uint64_t v16 = 1701736270;
  }
  uint64_t v23 = *(void **)(v0 + 152);
  uint64_t v25 = *(void *)(v0 + 96);
  uint64_t v24 = *(void *)(v0 + 104);
  uint64_t v26 = (void *)MEMORY[0x24C5B33F0](0xD00000000000001BLL, 0x8000000249E94BF0);
  uint64_t v27 = (void *)swift_allocObject();
  v27[2] = v16;
  v27[3] = v18;
  v27[4] = v21;
  v27[5] = v14;
  v27[6] = v25;
  v27[7] = v24;
  v27[8] = v23;
  *(void *)(v0 + 48) = _s8CipherML9TelemetryO19reportErrorToServer7useCase10identifier6method5errorySS_SSSgSSs0E0_ptFZSDySSSo8NSObjectCGSgycfU_TA_0;
  *(void *)(v0 + 56) = v27;
  *(void *)(v0 + 16) = MEMORY[0x263EF8330];
  *(void *)(v0 + 24) = 1107296256;
  *(void *)(v0 + 32) = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
  *(void *)(v0 + 40) = &block_descriptor_548;
  uint64_t v28 = _Block_copy((const void *)(v0 + 16));
  swift_bridgeObjectRetain();
  id v29 = v23;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v28);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  specialized static CipherMLError.makeErrorConformToSecureCoding(error:)(v23);
  swift_willThrow();

  uint64_t v30 = *(uint64_t (**)(void))(v0 + 8);
  return v30();
}

{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  os_unfair_lock_s *v9;
  os_unfair_lock_s *v10;
  os_unfair_lock_s *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t);
  uint64_t v16[2];
  void *v17;
  uint64_t v18;

  unint64_t v17 = v0;
  if (one-time initialization token for framework != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.framework);
  swift_bridgeObjectRetain_n();
  id v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  unint64_t v5 = v0[4];
  if (v4)
  {
    uint64_t v6 = v0[3];
    unint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    v16[0] = v8;
    *(_DWORD *)unint64_t v7 = 136446210;
    swift_bridgeObjectRetain();
    v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v5, v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_249C3F000, v2, v3, "%{public}s method was called", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5B4790](v8, -1, -1);
    MEMORY[0x24C5B4790](v7, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v9 = *(os_unfair_lock_s **)(*(void *)(v0[5] + 16) + 48);
  uint64_t v10 = v9 + 4;
  long long v11 = v9 + 6;
  os_unfair_lock_lock(v9 + 6);
  closure #1 in OSAllocatedUnfairLock<A>.current.getter(v10, v16);
  os_unfair_lock_unlock(v11);
  uint64_t v12 = *(void *)(v16[0] + 32);
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v13 = specialized _NativeDictionary.mapValues<A>(_:)(v12);
  swift_bridgeObjectRelease();
  uint64_t v14 = (uint64_t (*)(uint64_t))v0[1];
  return v14(v13);
}

uint64_t _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A0LL12clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlF10Foundation4DataVSg_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm33LL12clientConfig6method4bodyxSo09r82O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_10Foundation4T7VSg_Tg5AcjA14RequestContextVyAA0X13PIRParametersVGxs0E0_pRi_zRi0_zlyAOIsgHnrzo_Tf1nnncn_n(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[17] = a8;
  v8[18] = v10;
  v8[15] = a6;
  v8[16] = a7;
  v8[13] = a3;
  v8[14] = a4;
  v8[11] = a1;
  v8[12] = a2;
  return MEMORY[0x270FA2498](_s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A012clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlF10Foundation4DataVSg_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm3312clientConfig6method4bodyxSo09r82O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_10Foundation4T7VSg_Tg5AcjA14RequestContextVyAA0X13PIRParametersVGxs0E0_pRi_zRi0_zlyAOIsgHnrzo_Tf1nnncn_nTY0_, 0, 0);
}

uint64_t _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A0LL12clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlF10Foundation4DataVSg_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm33LL12clientConfig6method4bodyxSo09r82O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_10Foundation4T7VSg_Tg5AcjA14RequestContextVyAA0X13PIRParametersVGxs0E0_pRi_zRi0_zlyAOIsgHnrzo_Tf1nnncn_nTY0_()
{
  unint64_t v17 = v0;
  if (one-time initialization token for framework != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[19] = __swift_project_value_buffer(v1, (uint64_t)static Logger.framework);
  swift_bridgeObjectRetain_n();
  id v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  unint64_t v5 = v0[14];
  if (v4)
  {
    uint64_t v6 = v0[13];
    unint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    uint64_t v16 = v8;
    *(_DWORD *)unint64_t v7 = 136446210;
    swift_bridgeObjectRetain();
    v0[10] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v5, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_249C3F000, v2, v3, "%{public}s method was called", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5B4790](v8, -1, -1);
    MEMORY[0x24C5B4790](v7, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v9 = (void *)swift_task_alloc();
  v0[20] = v9;
  *uint64_t v9 = v0;
  v9[1] = _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A012clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlF10Foundation4DataVSg_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm3312clientConfig6method4bodyxSo09r82O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_10Foundation4T7VSg_Tg5AcjA14RequestContextVyAA0X13PIRParametersVGxs0E0_pRi_zRi0_zlyAOIsgHnrzo_Tf1nnncn_nTQ1_;
  uint64_t v10 = v0[17];
  uint64_t v11 = v0[18];
  uint64_t v12 = v0[15];
  uint64_t v13 = v0[16];
  uint64_t v14 = v0[11];
  return specialized closure #1 in XPCHandler.withStaticPIRConfig<A>(clientConfig:method:body:)(v14, v12, v13, v10, v11);
}

uint64_t _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A0LL12clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlF10Foundation4DataVSg_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm33LL12clientConfig6method4bodyxSo09r82O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_10Foundation4T7VSg_Tg5AcjA14RequestContextVyAA0X13PIRParametersVGxs0E0_pRi_zRi0_zlyAOIsgHnrzo_Tf1nnncn_nTQ1_()
{
  *(void *)(*(void *)v1 + 168) = v0;
  swift_task_dealloc();
  if (v0) {
    id v2 = _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A012clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlF10Foundation4DataVSg_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm3312clientConfig6method4bodyxSo09r82O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_10Foundation4T7VSg_Tg5AcjA14RequestContextVyAA0X13PIRParametersVGxs0E0_pRi_zRi0_zlyAOIsgHnrzo_Tf1nnncn_nTY3_;
  }
  else {
    id v2 = _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A012clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlF10Foundation4DataV_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm3312clientConfig6method4bodyxSo09r82O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_10Foundation4T5V_Tg5AcjA14RequestContextVyAA0X13PIRParametersVGxs0E0_pRi_zRi0_zlyANIsgHnrzo_Tf1nnncn_nTY2_;
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

uint64_t _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A0LL12clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlF10Foundation4DataVSg_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm33LL12clientConfig6method4bodyxSo09r82O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_10Foundation4T7VSg_Tg5AcjA14RequestContextVyAA0X13PIRParametersVGxs0E0_pRi_zRi0_zlyAOIsgHnrzo_Tf1nnncn_nTY3_()
{
  uint64_t v35 = v0;
  uint64_t v1 = *(void **)(v0 + 168);
  swift_bridgeObjectRetain();
  id v2 = v1;
  swift_bridgeObjectRetain();
  id v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = *(void **)(v0 + 168);
    uint64_t v8 = *(void *)(v0 + 104);
    unint64_t v7 = *(void *)(v0 + 112);
    uint64_t v9 = swift_slowAlloc();
    uint64_t v10 = (void *)swift_slowAlloc();
    uint64_t v32 = swift_slowAlloc();
    uint64_t v34 = v32;
    *(_DWORD *)uint64_t v9 = 136446466;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v7, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v9 + 12) = 2114;
    id v11 = v6;
    uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 72) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v10 = v12;

    _os_log_impl(&dword_249C3F000, v4, v5, "%{public}s threw an error: %{public}@", (uint8_t *)v9, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x24C5B4790](v10, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x24C5B4790](v32, -1, -1);
    MEMORY[0x24C5B4790](v9, -1, -1);
  }
  else
  {
    uint64_t v13 = *(void **)(v0 + 168);
    swift_bridgeObjectRelease_n();
  }
  uint64_t v14 = *(void **)(v0 + 96);
  if (v14)
  {
    id v15 = objc_msgSend(*(id *)(v0 + 96), sel_useCase);
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v18 = v17;

    id v19 = objc_msgSend(v14, sel_sourceApplicationBundleIdentifier);
    if (v19)
    {
      uint64_t v20 = v19;
      uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v14 = v22;
    }
    else
    {
      uint64_t v21 = 0;
      uint64_t v14 = 0;
    }
  }
  else
  {
    uint64_t v21 = 0;
    unint64_t v18 = 0xE400000000000000;
    uint64_t v16 = 1701736270;
  }
  uint64_t v23 = *(void **)(v0 + 168);
  uint64_t v24 = *(void *)(v0 + 112);
  uint64_t v33 = *(void **)(v0 + 128);
  uint64_t v25 = *(void *)(v0 + 104);
  uint64_t v26 = (void *)MEMORY[0x24C5B33F0](0xD00000000000001BLL, 0x8000000249E94BF0);
  uint64_t v27 = (void *)swift_allocObject();
  v27[2] = v16;
  v27[3] = v18;
  v27[4] = v21;
  v27[5] = v14;
  v27[6] = v25;
  v27[7] = v24;
  v27[8] = v23;
  *(void *)(v0 + 48) = _s8CipherML9TelemetryO19reportErrorToServer7useCase10identifier6method5errorySS_SSSgSSs0E0_ptFZSDySSSo8NSObjectCGSgycfU_TA_0;
  *(void *)(v0 + 56) = v27;
  *(void *)(v0 + 16) = MEMORY[0x263EF8330];
  *(void *)(v0 + 24) = 1107296256;
  *(void *)(v0 + 32) = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
  *(void *)(v0 + 40) = &block_descriptor_647;
  uint64_t v28 = _Block_copy((const void *)(v0 + 16));
  swift_bridgeObjectRetain();
  id v29 = v23;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v28);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  specialized static CipherMLError.makeErrorConformToSecureCoding(error:)(v23);
  swift_willThrow();

  swift_release();
  uint64_t v30 = *(uint64_t (**)(void))(v0 + 8);
  return v30();
}

uint64_t _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A0LL12clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlF10Foundation4DataVSg_Tg503_s8a4ML10c34C19withStaticPECConfig33_673275016ghijklm33LL12clientConfig6method4bodyxSo09r82O0C_SSxAA14RequestContextVyAA0E13PECParametersVGYaKXEtYaKlFxyYaKXEfU_10Foundation4T7VSg_Tg5AcjA14RequestContextVyAA0X13PECParametersVGxs0E0_pRi_zRi0_zlyAOIsgHnrzo_Tf1nnncn_n(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[17] = a8;
  v8[18] = v10;
  v8[15] = a6;
  v8[16] = a7;
  v8[13] = a3;
  v8[14] = a4;
  v8[11] = a1;
  v8[12] = a2;
  return MEMORY[0x270FA2498](_s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A012clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlF10Foundation4DataVSg_Tg503_s8a4ML10c34C19withStaticPECConfig33_673275016ghijklm3312clientConfig6method4bodyxSo09r82O0C_SSxAA14RequestContextVyAA0E13PECParametersVGYaKXEtYaKlFxyYaKXEfU_10Foundation4T7VSg_Tg5AcjA14RequestContextVyAA0X13PECParametersVGxs0E0_pRi_zRi0_zlyAOIsgHnrzo_Tf1nnncn_nTY0_, 0, 0);
}

uint64_t _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A0LL12clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlF10Foundation4DataVSg_Tg503_s8a4ML10c34C19withStaticPECConfig33_673275016ghijklm33LL12clientConfig6method4bodyxSo09r82O0C_SSxAA14RequestContextVyAA0E13PECParametersVGYaKXEtYaKlFxyYaKXEfU_10Foundation4T7VSg_Tg5AcjA14RequestContextVyAA0X13PECParametersVGxs0E0_pRi_zRi0_zlyAOIsgHnrzo_Tf1nnncn_nTY0_()
{
  unint64_t v17 = v0;
  if (one-time initialization token for framework != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[19] = __swift_project_value_buffer(v1, (uint64_t)static Logger.framework);
  swift_bridgeObjectRetain_n();
  id v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  unint64_t v5 = v0[14];
  if (v4)
  {
    uint64_t v6 = v0[13];
    unint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    uint64_t v16 = v8;
    *(_DWORD *)unint64_t v7 = 136446210;
    swift_bridgeObjectRetain();
    v0[10] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v5, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_249C3F000, v2, v3, "%{public}s method was called", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5B4790](v8, -1, -1);
    MEMORY[0x24C5B4790](v7, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v9 = (void *)swift_task_alloc();
  v0[20] = v9;
  *uint64_t v9 = v0;
  v9[1] = _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A012clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlF10Foundation4DataVSg_Tg503_s8a4ML10c34C19withStaticPECConfig33_673275016ghijklm3312clientConfig6method4bodyxSo09r82O0C_SSxAA14RequestContextVyAA0E13PECParametersVGYaKXEtYaKlFxyYaKXEfU_10Foundation4T7VSg_Tg5AcjA14RequestContextVyAA0X13PECParametersVGxs0E0_pRi_zRi0_zlyAOIsgHnrzo_Tf1nnncn_nTQ1_;
  uint64_t v10 = v0[17];
  uint64_t v11 = v0[18];
  uint64_t v12 = v0[15];
  uint64_t v13 = v0[16];
  uint64_t v14 = v0[11];
  return specialized closure #1 in XPCHandler.withStaticPECConfig<A>(clientConfig:method:body:)(v14, v12, v13, v10, v11);
}

uint64_t _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A0LL12clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlF10Foundation4DataVSg_Tg503_s8a4ML10c34C19withStaticPECConfig33_673275016ghijklm33LL12clientConfig6method4bodyxSo09r82O0C_SSxAA14RequestContextVyAA0E13PECParametersVGYaKXEtYaKlFxyYaKXEfU_10Foundation4T7VSg_Tg5AcjA14RequestContextVyAA0X13PECParametersVGxs0E0_pRi_zRi0_zlyAOIsgHnrzo_Tf1nnncn_nTQ1_()
{
  *(void *)(*(void *)v1 + 168) = v0;
  swift_task_dealloc();
  if (v0) {
    id v2 = _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A012clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlF10Foundation4DataVSg_Tg503_s8a4ML10c34C19withStaticPECConfig33_673275016ghijklm3312clientConfig6method4bodyxSo09r82O0C_SSxAA14RequestContextVyAA0E13PECParametersVGYaKXEtYaKlFxyYaKXEfU_10Foundation4T7VSg_Tg5AcjA14RequestContextVyAA0X13PECParametersVGxs0E0_pRi_zRi0_zlyAOIsgHnrzo_Tf1nnncn_nTY3_;
  }
  else {
    id v2 = _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A012clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlF10Foundation4DataVSg_Tg503_s8a4ML10c34C19withStaticPECConfig33_673275016ghijklm3312clientConfig6method4bodyxSo09r82O0C_SSxAA14RequestContextVyAA0E13PECParametersVGYaKXEtYaKlFxyYaKXEfU_10Foundation4T7VSg_Tg5AcjA14RequestContextVyAA0X13PECParametersVGxs0E0_pRi_zRi0_zlyAOIsgHnrzo_Tf1nnncn_nTY2_;
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

uint64_t _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A0LL12clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlF10Foundation4DataVSg_Tg503_s8a4ML10c34C19withStaticPECConfig33_673275016ghijklm33LL12clientConfig6method4bodyxSo09r82O0C_SSxAA14RequestContextVyAA0E13PECParametersVGYaKXEtYaKlFxyYaKXEfU_10Foundation4T7VSg_Tg5AcjA14RequestContextVyAA0X13PECParametersVGxs0E0_pRi_zRi0_zlyAOIsgHnrzo_Tf1nnncn_nTY2_()
{
  uint64_t v1 = *(void **)(v0 + 128);
  swift_release();

  id v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A0LL12clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlF10Foundation4DataVSg_Tg503_s8a4ML10c34C19withStaticPECConfig33_673275016ghijklm33LL12clientConfig6method4bodyxSo09r82O0C_SSxAA14RequestContextVyAA0E13PECParametersVGYaKXEtYaKlFxyYaKXEfU_10Foundation4T7VSg_Tg5AcjA14RequestContextVyAA0X13PECParametersVGxs0E0_pRi_zRi0_zlyAOIsgHnrzo_Tf1nnncn_nTY3_()
{
  uint64_t v35 = v0;
  uint64_t v1 = *(void **)(v0 + 168);
  swift_bridgeObjectRetain();
  id v2 = v1;
  swift_bridgeObjectRetain();
  id v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = *(void **)(v0 + 168);
    uint64_t v8 = *(void *)(v0 + 104);
    unint64_t v7 = *(void *)(v0 + 112);
    uint64_t v9 = swift_slowAlloc();
    uint64_t v10 = (void *)swift_slowAlloc();
    uint64_t v32 = swift_slowAlloc();
    uint64_t v34 = v32;
    *(_DWORD *)uint64_t v9 = 136446466;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v7, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v9 + 12) = 2114;
    id v11 = v6;
    uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 72) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v10 = v12;

    _os_log_impl(&dword_249C3F000, v4, v5, "%{public}s threw an error: %{public}@", (uint8_t *)v9, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x24C5B4790](v10, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x24C5B4790](v32, -1, -1);
    MEMORY[0x24C5B4790](v9, -1, -1);
  }
  else
  {
    uint64_t v13 = *(void **)(v0 + 168);
    swift_bridgeObjectRelease_n();
  }
  uint64_t v14 = *(void **)(v0 + 96);
  if (v14)
  {
    id v15 = objc_msgSend(*(id *)(v0 + 96), sel_useCase);
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v18 = v17;

    id v19 = objc_msgSend(v14, sel_sourceApplicationBundleIdentifier);
    if (v19)
    {
      uint64_t v20 = v19;
      uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v14 = v22;
    }
    else
    {
      uint64_t v21 = 0;
      uint64_t v14 = 0;
    }
  }
  else
  {
    uint64_t v21 = 0;
    unint64_t v18 = 0xE400000000000000;
    uint64_t v16 = 1701736270;
  }
  uint64_t v23 = *(void **)(v0 + 168);
  uint64_t v24 = *(void *)(v0 + 112);
  uint64_t v33 = *(void **)(v0 + 128);
  uint64_t v25 = *(void *)(v0 + 104);
  uint64_t v26 = (void *)MEMORY[0x24C5B33F0](0xD00000000000001BLL, 0x8000000249E94BF0);
  uint64_t v27 = (void *)swift_allocObject();
  v27[2] = v16;
  v27[3] = v18;
  v27[4] = v21;
  v27[5] = v14;
  v27[6] = v25;
  v27[7] = v24;
  v27[8] = v23;
  *(void *)(v0 + 48) = _s8CipherML9TelemetryO19reportErrorToServer7useCase10identifier6method5errorySS_SSSgSSs0E0_ptFZSDySSSo8NSObjectCGSgycfU_TA_0;
  *(void *)(v0 + 56) = v27;
  *(void *)(v0 + 16) = MEMORY[0x263EF8330];
  *(void *)(v0 + 24) = 1107296256;
  *(void *)(v0 + 32) = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
  *(void *)(v0 + 40) = &block_descriptor_598;
  uint64_t v28 = _Block_copy((const void *)(v0 + 16));
  swift_bridgeObjectRetain();
  id v29 = v23;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v28);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  specialized static CipherMLError.makeErrorConformToSecureCoding(error:)(v23);
  swift_willThrow();

  swift_release();
  uint64_t v30 = *(uint64_t (**)(void))(v0 + 8);
  return v30();
}

uint64_t specialized closure #1 in XPCHandler.withStaticPIRConfig<A>(clientConfig:method:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[7] = a4;
  v5[8] = a5;
  v5[5] = a2;
  v5[6] = a3;
  v5[4] = a1;
  v5[9] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestContext<StaticPIRParameters>);
  v5[10] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UseCaseGroup?);
  v5[11] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for UseCaseGroup();
  v5[12] = v6;
  v5[13] = *(void *)(v6 - 8);
  v5[14] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized closure #1 in XPCHandler.withStaticPIRConfig<A>(clientConfig:method:body:), 0, 0);
}

{
  void *v5;
  uint64_t v6;
  uint64_t v8;

  v5[7] = a4;
  v5[8] = a5;
  v5[5] = a2;
  v5[6] = a3;
  v5[4] = a1;
  v5[9] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestContext<StaticPIRParameters>);
  v5[10] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UseCaseGroup?);
  v5[11] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for UseCaseGroup();
  v5[12] = v6;
  v5[13] = *(void *)(v6 - 8);
  v5[14] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized closure #1 in XPCHandler.withStaticPIRConfig<A>(clientConfig:method:body:), 0, 0);
}

uint64_t specialized closure #1 in XPCHandler.withStaticPIRConfig<A>(clientConfig:method:body:)()
{
  uint64_t v54 = v0;
  uint64_t v1 = *(os_unfair_lock_s **)(*(void *)(v0[5] + 16) + 48);
  id v2 = v1 + 4;
  id v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  closure #1 in OSAllocatedUnfairLock<A>.current.getter(v2, v53);
  os_unfair_lock_unlock(v3);
  uint64_t v4 = (void *)v0[6];
  uint64_t v5 = v53[0];
  v0[15] = v53[0];
  id v6 = objc_msgSend(v4, sel_useCase);
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v9 = v8;

  uint64_t v10 = *(void *)(v5 + 40);
  if (!*(void *)(v10 + 16))
  {
LABEL_10:
    if (one-time initialization token for framework != -1) {
      swift_once();
    }
    uint64_t v30 = type metadata accessor for Logger();
    __swift_project_value_buffer(v30, (uint64_t)static Logger.framework);
    swift_bridgeObjectRetain();
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v31))
    {
      uint64_t v32 = (uint8_t *)swift_slowAlloc();
      uint64_t v33 = v7;
      uint64_t v34 = swift_slowAlloc();
      v53[0] = v34;
      *(_DWORD *)uint64_t v32 = 136446210;
      swift_bridgeObjectRetain();
      v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v9, v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_249C3F000, v26, v31, "Unknown/Invalid PIR use-case '%{public}s'", v32, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C5B4790](v34, -1, -1);
      MEMORY[0x24C5B4790](v32, -1, -1);
      goto LABEL_15;
    }
LABEL_14:
    swift_bridgeObjectRelease_n();
    goto LABEL_15;
  }
  swift_bridgeObjectRetain();
  uint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v9);
  if ((v12 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  uint64_t v13 = *(void *)(v10 + 56) + (v11 << 6);
  uint64_t v15 = *(void *)v13;
  uint64_t v14 = *(void *)(v13 + 8);
  uint64_t v17 = *(void *)(v13 + 16);
  uint64_t v16 = *(void *)(v13 + 24);
  int v18 = *(unsigned __int8 *)(v13 + 56);
  uint64_t v47 = *(void *)(v13 + 32);
  uint64_t v48 = *(void *)(v13 + 40);
  uint64_t v49 = *(void *)(v13 + 48);
  outlined copy of UseCase(*(void *)v13, v14, v17, v16, v47, v48, v49, *(unsigned char *)(v13 + 56));
  swift_bridgeObjectRelease();
  if (v18 != 1) {
    goto LABEL_10;
  }
  uint64_t v46 = v15;
  uint64_t v19 = v7;
  uint64_t v21 = v0[12];
  uint64_t v20 = v0[13];
  uint64_t v22 = v0[11];
  uint64_t v23 = v19;
  AllowList.group(useCase:)(v19, v9, v22);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v22, 1, v21) == 1)
  {
    uint64_t v24 = v0[11];
    outlined consume of UseCase(v46, v14, v17, v16, v47, v48, v49, 1);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v24, &demangling cache variable for type metadata for UseCaseGroup?);
    if (one-time initialization token for framework != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    __swift_project_value_buffer(v25, (uint64_t)static Logger.framework);
    swift_bridgeObjectRetain();
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      uint64_t v29 = swift_slowAlloc();
      v53[0] = v29;
      *(_DWORD *)uint64_t v28 = 136446210;
      swift_bridgeObjectRetain();
      v0[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v9, v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_249C3F000, v26, v27, "No group found for use-case '%{public}s'", v28, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C5B4790](v29, -1, -1);
      MEMORY[0x24C5B4790](v28, -1, -1);
LABEL_15:

      type metadata accessor for CipherMLError();
      _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_6((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
      swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      swift_release();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v35 = (uint64_t (*)(void))v0[1];
      return v35();
    }
    goto LABEL_14;
  }
  uint64_t v37 = v0[14];
  uint64_t v38 = v0[11];
  uint64_t v39 = v0[12];
  uint64_t v40 = v0[9];
  uint64_t v41 = v0[10];
  double v50 = (void *)v0[6];
  uint64_t v51 = (int *)v0[7];
  swift_bridgeObjectRelease();
  outlined init with take of UseCaseGroup(v38, v37);
  outlined init with copy of NetworkConfig(v37 + *(int *)(v39 + 36), v41 + *(int *)(v40 + 32));
  *(unsigned char *)(v41 + 24) = v17 & 1;
  *(void *)(v41 + 32) = v16;
  *(unsigned char *)(v41 + 40) = v47 & 1;
  *(void *)(v41 + 48) = v48;
  *(void *)(v41 + 56) = v49;
  *(void *)(v41 + 8) = v46;
  *(void *)(v41 + 16) = v14;
  *(void *)uint64_t v41 = v50;
  uint64_t v52 = (uint64_t (*)(uint64_t, uint64_t))((char *)v51 + *v51);
  id v42 = v50;
  uint64_t v43 = (void *)swift_task_alloc();
  v0[16] = v43;
  *uint64_t v43 = v0;
  v43[1] = specialized closure #1 in XPCHandler.withStaticPIRConfig<A>(clientConfig:method:body:);
  uint64_t v44 = v0[10];
  uint64_t v45 = v0[4];
  return v52(v45, v44);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 136) = v0;
  swift_task_dealloc();
  if (v0) {
    id v2 = specialized closure #1 in XPCHandler.withStaticPIRConfig<A>(clientConfig:method:body:);
  }
  else {
    id v2 = specialized closure #1 in XPCHandler.withStaticPIRConfig<A>(clientConfig:method:body:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  void *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  os_log_type_t v30;
  uint64_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t (*v34)(void);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  id v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int *v50;
  int *v51;
  uint64_t v52[2];
  void *v53;
  uint64_t v54;

  uint64_t v53 = v0;
  uint64_t v1 = *(os_unfair_lock_s **)(*(void *)(v0[5] + 16) + 48);
  id v2 = v1 + 4;
  id v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  closure #1 in OSAllocatedUnfairLock<A>.current.getter(v2, v52);
  os_unfair_lock_unlock(v3);
  uint64_t v4 = (void *)v0[6];
  uint64_t v5 = v52[0];
  v0[15] = v52[0];
  id v6 = objc_msgSend(v4, sel_useCase);
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v9 = v8;

  uint64_t v10 = *(void *)(v5 + 40);
  if (!*(void *)(v10 + 16))
  {
LABEL_10:
    if (one-time initialization token for framework != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    __swift_project_value_buffer(v29, (uint64_t)static Logger.framework);
    swift_bridgeObjectRetain();
    uint64_t v25 = Logger.logObject.getter();
    uint64_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v30))
    {
      os_log_type_t v31 = v7;
      uint64_t v32 = (uint8_t *)swift_slowAlloc();
      uint64_t v33 = swift_slowAlloc();
      v52[0] = v33;
      *(_DWORD *)uint64_t v32 = 136446210;
      swift_bridgeObjectRetain();
      v0[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v9, v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_249C3F000, v25, v30, "Unknown/Invalid PIR use-case '%{public}s'", v32, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C5B4790](v33, -1, -1);
      MEMORY[0x24C5B4790](v32, -1, -1);
      goto LABEL_15;
    }
LABEL_14:
    swift_bridgeObjectRelease_n();
    goto LABEL_15;
  }
  swift_bridgeObjectRetain();
  uint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v9);
  if ((v12 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  uint64_t v13 = *(void *)(v10 + 56) + (v11 << 6);
  uint64_t v14 = *(void *)v13;
  uint64_t v15 = *(void *)(v13 + 8);
  uint64_t v16 = *(void *)(v13 + 16);
  uint64_t v17 = *(unsigned __int8 *)(v13 + 56);
  uint64_t v46 = *(void *)(v13 + 24);
  uint64_t v47 = *(void *)(v13 + 32);
  uint64_t v48 = *(void *)(v13 + 40);
  uint64_t v49 = *(void *)(v13 + 48);
  outlined copy of UseCase(*(void *)v13, v15, v16, v46, v47, v48, v49, *(unsigned char *)(v13 + 56));
  swift_bridgeObjectRelease();
  if (v17 != 1) {
    goto LABEL_10;
  }
  uint64_t v45 = v14;
  int v18 = v7;
  uint64_t v19 = v0[12];
  uint64_t v20 = v0[13];
  uint64_t v21 = v0[11];
  uint64_t v22 = v18;
  AllowList.group(useCase:)(v18, v9, v21);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v21, 1, v19) == 1)
  {
    uint64_t v23 = v0[11];
    outlined consume of UseCase(v45, v15, v16, v46, v47, v48, v49, 1);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v23, &demangling cache variable for type metadata for UseCaseGroup?);
    if (one-time initialization token for framework != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    __swift_project_value_buffer(v24, (uint64_t)static Logger.framework);
    swift_bridgeObjectRetain();
    uint64_t v25 = Logger.logObject.getter();
    uint64_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      os_log_type_t v27 = (uint8_t *)swift_slowAlloc();
      uint64_t v28 = swift_slowAlloc();
      v52[0] = v28;
      *(_DWORD *)os_log_type_t v27 = 136446210;
      swift_bridgeObjectRetain();
      v0[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v9, v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_249C3F000, v25, v26, "No group found for use-case '%{public}s'", v27, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C5B4790](v28, -1, -1);
      MEMORY[0x24C5B4790](v27, -1, -1);
LABEL_15:

      type metadata accessor for CipherMLError();
      _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_6((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
      swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      swift_release();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v34 = (uint64_t (*)(void))v0[1];
      return v34();
    }
    goto LABEL_14;
  }
  uint64_t v36 = v0[14];
  uint64_t v38 = v0[11];
  uint64_t v37 = v0[12];
  uint64_t v39 = v0[9];
  uint64_t v40 = v0[10];
  uint64_t v41 = (void *)v0[6];
  double v50 = (int *)v0[7];
  swift_bridgeObjectRelease();
  outlined init with take of UseCaseGroup(v38, v36);
  outlined init with copy of NetworkConfig(v36 + *(int *)(v37 + 36), v40 + *(int *)(v39 + 32));
  *(unsigned char *)(v40 + 24) = v16 & 1;
  *(void *)(v40 + 32) = v46;
  *(unsigned char *)(v40 + 40) = v47 & 1;
  *(void *)(v40 + 48) = v48;
  *(void *)(v40 + 56) = v49;
  *(void *)(v40 + 8) = v45;
  *(void *)(v40 + 16) = v15;
  *(void *)uint64_t v40 = v41;
  uint64_t v51 = (int *)((char *)v50 + *v50);
  id v42 = v41;
  uint64_t v43 = (void *)swift_task_alloc();
  v0[16] = v43;
  *uint64_t v43 = v0;
  v43[1] = specialized closure #1 in XPCHandler.withStaticPIRConfig<A>(clientConfig:method:body:);
  uint64_t v44 = v0[10];
  return ((uint64_t (*)(void *, uint64_t))v51)(v0 + 2, v44);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 136) = v0;
  swift_task_dealloc();
  if (v0) {
    id v2 = specialized closure #1 in XPCHandler.withStaticPIRConfig<A>(clientConfig:method:body:);
  }
  else {
    id v2 = specialized closure #1 in XPCHandler.withStaticPIRConfig<A>(clientConfig:method:body:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v6;

  uint64_t v1 = v0[14];
  id v2 = v0[10];
  swift_release();
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v2, &demangling cache variable for type metadata for RequestContext<StaticPIRParameters>);
  _s8CipherML12UseCaseGroupVWOhTm_0(v1, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
  id v3 = v0[2];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(uint64_t))v0[1];
  return v4(v3);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v1 = v0[14];
  id v2 = v0[10];
  swift_release();
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v2, &demangling cache variable for type metadata for RequestContext<StaticPIRParameters>);
  _s8CipherML12UseCaseGroupVWOhTm_0(v1, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

{
  void *v0;
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  void *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  os_log_type_t v30;
  uint64_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t (*v34)(void);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  id v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int *v50;
  int *v51;
  uint64_t v52[2];
  void *v53;
  uint64_t v54;

  uint64_t v53 = v0;
  uint64_t v1 = *(os_unfair_lock_s **)(*(void *)(v0[5] + 16) + 48);
  id v2 = v1 + 4;
  id v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  closure #1 in OSAllocatedUnfairLock<A>.current.getter(v2, v52);
  os_unfair_lock_unlock(v3);
  uint64_t v4 = (void *)v0[6];
  uint64_t v5 = v52[0];
  v0[15] = v52[0];
  id v6 = objc_msgSend(v4, sel_useCase);
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v9 = v8;

  uint64_t v10 = *(void *)(v5 + 40);
  if (!*(void *)(v10 + 16))
  {
LABEL_10:
    if (one-time initialization token for framework != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    __swift_project_value_buffer(v29, (uint64_t)static Logger.framework);
    swift_bridgeObjectRetain();
    uint64_t v25 = Logger.logObject.getter();
    uint64_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v30))
    {
      os_log_type_t v31 = v7;
      uint64_t v32 = (uint8_t *)swift_slowAlloc();
      uint64_t v33 = swift_slowAlloc();
      v52[0] = v33;
      *(_DWORD *)uint64_t v32 = 136446210;
      swift_bridgeObjectRetain();
      v0[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v9, v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_249C3F000, v25, v30, "Unknown/Invalid PIR use-case '%{public}s'", v32, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C5B4790](v33, -1, -1);
      MEMORY[0x24C5B4790](v32, -1, -1);
      goto LABEL_15;
    }
LABEL_14:
    swift_bridgeObjectRelease_n();
    goto LABEL_15;
  }
  swift_bridgeObjectRetain();
  uint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v9);
  if ((v12 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  uint64_t v13 = *(void *)(v10 + 56) + (v11 << 6);
  uint64_t v14 = *(void *)v13;
  uint64_t v15 = *(void *)(v13 + 8);
  uint64_t v16 = *(void *)(v13 + 16);
  uint64_t v17 = *(unsigned __int8 *)(v13 + 56);
  uint64_t v46 = *(void *)(v13 + 24);
  uint64_t v47 = *(void *)(v13 + 32);
  uint64_t v48 = *(void *)(v13 + 40);
  uint64_t v49 = *(void *)(v13 + 48);
  outlined copy of UseCase(*(void *)v13, v15, v16, v46, v47, v48, v49, *(unsigned char *)(v13 + 56));
  swift_bridgeObjectRelease();
  if (v17 != 1) {
    goto LABEL_10;
  }
  uint64_t v45 = v14;
  int v18 = v7;
  uint64_t v19 = v0[12];
  uint64_t v20 = v0[13];
  uint64_t v21 = v0[11];
  uint64_t v22 = v18;
  AllowList.group(useCase:)(v18, v9, v21);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v21, 1, v19) == 1)
  {
    uint64_t v23 = v0[11];
    outlined consume of UseCase(v45, v15, v16, v46, v47, v48, v49, 1);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v23, &demangling cache variable for type metadata for UseCaseGroup?);
    if (one-time initialization token for framework != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    __swift_project_value_buffer(v24, (uint64_t)static Logger.framework);
    swift_bridgeObjectRetain();
    uint64_t v25 = Logger.logObject.getter();
    uint64_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      os_log_type_t v27 = (uint8_t *)swift_slowAlloc();
      uint64_t v28 = swift_slowAlloc();
      v52[0] = v28;
      *(_DWORD *)os_log_type_t v27 = 136446210;
      swift_bridgeObjectRetain();
      v0[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v9, v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_249C3F000, v25, v26, "No group found for use-case '%{public}s'", v27, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C5B4790](v28, -1, -1);
      MEMORY[0x24C5B4790](v27, -1, -1);
LABEL_15:

      type metadata accessor for CipherMLError();
      _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_6((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
      swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      swift_release();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v34 = (uint64_t (*)(void))v0[1];
      return v34();
    }
    goto LABEL_14;
  }
  uint64_t v36 = v0[14];
  uint64_t v38 = v0[11];
  uint64_t v37 = v0[12];
  uint64_t v39 = v0[9];
  uint64_t v40 = v0[10];
  uint64_t v41 = (void *)v0[6];
  double v50 = (int *)v0[7];
  swift_bridgeObjectRelease();
  outlined init with take of UseCaseGroup(v38, v36);
  outlined init with copy of NetworkConfig(v36 + *(int *)(v37 + 36), v40 + *(int *)(v39 + 32));
  *(unsigned char *)(v40 + 24) = v16 & 1;
  *(void *)(v40 + 32) = v46;
  *(unsigned char *)(v40 + 40) = v47 & 1;
  *(void *)(v40 + 48) = v48;
  *(void *)(v40 + 56) = v49;
  *(void *)(v40 + 8) = v45;
  *(void *)(v40 + 16) = v15;
  *(void *)uint64_t v40 = v41;
  uint64_t v51 = (int *)((char *)v50 + *v50);
  id v42 = v41;
  uint64_t v43 = (void *)swift_task_alloc();
  v0[16] = v43;
  *uint64_t v43 = v0;
  v43[1] = specialized closure #1 in XPCHandler.withStaticPIRConfig<A>(clientConfig:method:body:);
  uint64_t v44 = v0[10];
  return ((uint64_t (*)(void *, uint64_t))v51)(v0 + 2, v44);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 136) = v0;
  swift_task_dealloc();
  if (v0) {
    id v2 = specialized closure #1 in XPCHandler.withStaticPIRConfig<A>(clientConfig:method:body:);
  }
  else {
    id v2 = specialized closure #1 in XPCHandler.withStaticPIRConfig<A>(clientConfig:method:body:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  void *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(void);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  int *v51;
  uint64_t (*v52)(uint64_t, uint64_t);
  uint64_t v53[2];
  void *v54;
  uint64_t v55;

  uint64_t v54 = v0;
  uint64_t v1 = *(os_unfair_lock_s **)(*(void *)(v0[5] + 16) + 48);
  id v2 = v1 + 4;
  id v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  closure #1 in OSAllocatedUnfairLock<A>.current.getter(v2, v53);
  os_unfair_lock_unlock(v3);
  uint64_t v4 = (void *)v0[6];
  uint64_t v5 = v53[0];
  v0[15] = v53[0];
  id v6 = objc_msgSend(v4, sel_useCase);
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v9 = v8;

  uint64_t v10 = *(void *)(v5 + 40);
  if (!*(void *)(v10 + 16))
  {
LABEL_10:
    if (one-time initialization token for framework != -1) {
      swift_once();
    }
    uint64_t v30 = type metadata accessor for Logger();
    __swift_project_value_buffer(v30, (uint64_t)static Logger.framework);
    swift_bridgeObjectRetain();
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v31))
    {
      uint64_t v32 = (uint8_t *)swift_slowAlloc();
      uint64_t v33 = v7;
      uint64_t v34 = swift_slowAlloc();
      v53[0] = v34;
      *(_DWORD *)uint64_t v32 = 136446210;
      swift_bridgeObjectRetain();
      v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v9, v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_249C3F000, v26, v31, "Unknown/Invalid PIR use-case '%{public}s'", v32, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C5B4790](v34, -1, -1);
      MEMORY[0x24C5B4790](v32, -1, -1);
      goto LABEL_15;
    }
LABEL_14:
    swift_bridgeObjectRelease_n();
    goto LABEL_15;
  }
  swift_bridgeObjectRetain();
  uint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v9);
  if ((v12 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  uint64_t v13 = *(void *)(v10 + 56) + (v11 << 6);
  uint64_t v15 = *(void *)v13;
  uint64_t v14 = *(void *)(v13 + 8);
  uint64_t v17 = *(void *)(v13 + 16);
  uint64_t v16 = *(void *)(v13 + 24);
  int v18 = *(unsigned __int8 *)(v13 + 56);
  uint64_t v47 = *(void *)(v13 + 32);
  uint64_t v48 = *(void *)(v13 + 40);
  uint64_t v49 = *(void *)(v13 + 48);
  outlined copy of UseCase(*(void *)v13, v14, v17, v16, v47, v48, v49, *(unsigned char *)(v13 + 56));
  swift_bridgeObjectRelease();
  if (v18 != 1) {
    goto LABEL_10;
  }
  uint64_t v46 = v15;
  uint64_t v19 = v7;
  uint64_t v21 = v0[12];
  uint64_t v20 = v0[13];
  uint64_t v22 = v0[11];
  uint64_t v23 = v19;
  AllowList.group(useCase:)(v19, v9, v22);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v22, 1, v21) == 1)
  {
    uint64_t v24 = v0[11];
    outlined consume of UseCase(v46, v14, v17, v16, v47, v48, v49, 1);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v24, &demangling cache variable for type metadata for UseCaseGroup?);
    if (one-time initialization token for framework != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    __swift_project_value_buffer(v25, (uint64_t)static Logger.framework);
    swift_bridgeObjectRetain();
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      uint64_t v29 = swift_slowAlloc();
      v53[0] = v29;
      *(_DWORD *)uint64_t v28 = 136446210;
      swift_bridgeObjectRetain();
      v0[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v9, v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_249C3F000, v26, v27, "No group found for use-case '%{public}s'", v28, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C5B4790](v29, -1, -1);
      MEMORY[0x24C5B4790](v28, -1, -1);
LABEL_15:

      type metadata accessor for CipherMLError();
      _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_6((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
      swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      swift_release();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v35 = (uint64_t (*)(void))v0[1];
      return v35();
    }
    goto LABEL_14;
  }
  uint64_t v37 = v0[14];
  uint64_t v38 = v0[11];
  uint64_t v39 = v0[12];
  uint64_t v40 = v0[9];
  uint64_t v41 = v0[10];
  double v50 = (void *)v0[6];
  uint64_t v51 = (int *)v0[7];
  swift_bridgeObjectRelease();
  outlined init with take of UseCaseGroup(v38, v37);
  outlined init with copy of NetworkConfig(v37 + *(int *)(v39 + 36), v41 + *(int *)(v40 + 32));
  *(unsigned char *)(v41 + 24) = v17 & 1;
  *(void *)(v41 + 32) = v16;
  *(unsigned char *)(v41 + 40) = v47 & 1;
  *(void *)(v41 + 48) = v48;
  *(void *)(v41 + 56) = v49;
  *(void *)(v41 + 8) = v46;
  *(void *)(v41 + 16) = v14;
  *(void *)uint64_t v41 = v50;
  uint64_t v52 = (uint64_t (*)(uint64_t, uint64_t))((char *)v51 + *v51);
  id v42 = v50;
  uint64_t v43 = (void *)swift_task_alloc();
  v0[16] = v43;
  *uint64_t v43 = v0;
  v43[1] = specialized closure #1 in XPCHandler.withStaticPIRConfig<A>(clientConfig:method:body:);
  uint64_t v44 = v0[10];
  uint64_t v45 = v0[4];
  return v52(v45, v44);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 136) = v0;
  swift_task_dealloc();
  if (v0) {
    id v2 = specialized closure #1 in XPCHandler.withStaticPIRConfig<A>(clientConfig:method:body:);
  }
  else {
    id v2 = specialized closure #1 in XPCHandler.withStaticPIRConfig<A>(clientConfig:method:body:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v1 = v0[14];
  id v2 = v0[10];
  swift_release();
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v2, &demangling cache variable for type metadata for RequestContext<StaticPIRParameters>);
  _s8CipherML12UseCaseGroupVWOhTm_0(v1, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

{
  void *v0;
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  void *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  os_log_type_t v30;
  uint64_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t (*v34)(void);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  id v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int *v50;
  int *v51;
  uint64_t v52[2];
  void *v53;
  uint64_t v54;

  uint64_t v53 = v0;
  uint64_t v1 = *(os_unfair_lock_s **)(*(void *)(v0[6] + 16) + 48);
  id v2 = v1 + 4;
  id v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  closure #1 in OSAllocatedUnfairLock<A>.current.getter(v2, v52);
  os_unfair_lock_unlock(v3);
  uint64_t v4 = (void *)v0[7];
  uint64_t v5 = v52[0];
  v0[16] = v52[0];
  id v6 = objc_msgSend(v4, sel_useCase);
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v9 = v8;

  uint64_t v10 = *(void *)(v5 + 40);
  if (!*(void *)(v10 + 16))
  {
LABEL_10:
    if (one-time initialization token for framework != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    __swift_project_value_buffer(v29, (uint64_t)static Logger.framework);
    swift_bridgeObjectRetain();
    uint64_t v25 = Logger.logObject.getter();
    uint64_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v30))
    {
      os_log_type_t v31 = v7;
      uint64_t v32 = (uint8_t *)swift_slowAlloc();
      uint64_t v33 = swift_slowAlloc();
      v52[0] = v33;
      *(_DWORD *)uint64_t v32 = 136446210;
      swift_bridgeObjectRetain();
      v0[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v9, v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_249C3F000, v25, v30, "Unknown/Invalid PIR use-case '%{public}s'", v32, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C5B4790](v33, -1, -1);
      MEMORY[0x24C5B4790](v32, -1, -1);
      goto LABEL_15;
    }
LABEL_14:
    swift_bridgeObjectRelease_n();
    goto LABEL_15;
  }
  swift_bridgeObjectRetain();
  uint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v9);
  if ((v12 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  uint64_t v13 = *(void *)(v10 + 56) + (v11 << 6);
  uint64_t v14 = *(void *)v13;
  uint64_t v15 = *(void *)(v13 + 8);
  uint64_t v16 = *(void *)(v13 + 16);
  uint64_t v17 = *(unsigned __int8 *)(v13 + 56);
  uint64_t v46 = *(void *)(v13 + 24);
  uint64_t v47 = *(void *)(v13 + 32);
  uint64_t v48 = *(void *)(v13 + 40);
  uint64_t v49 = *(void *)(v13 + 48);
  outlined copy of UseCase(*(void *)v13, v15, v16, v46, v47, v48, v49, *(unsigned char *)(v13 + 56));
  swift_bridgeObjectRelease();
  if (v17 != 1) {
    goto LABEL_10;
  }
  uint64_t v45 = v14;
  int v18 = v7;
  uint64_t v19 = v0[13];
  uint64_t v20 = v0[14];
  uint64_t v21 = v0[12];
  uint64_t v22 = v18;
  AllowList.group(useCase:)(v18, v9, v21);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v21, 1, v19) == 1)
  {
    uint64_t v23 = v0[12];
    outlined consume of UseCase(v45, v15, v16, v46, v47, v48, v49, 1);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v23, &demangling cache variable for type metadata for UseCaseGroup?);
    if (one-time initialization token for framework != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    __swift_project_value_buffer(v24, (uint64_t)static Logger.framework);
    swift_bridgeObjectRetain();
    uint64_t v25 = Logger.logObject.getter();
    uint64_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      os_log_type_t v27 = (uint8_t *)swift_slowAlloc();
      uint64_t v28 = swift_slowAlloc();
      v52[0] = v28;
      *(_DWORD *)os_log_type_t v27 = 136446210;
      swift_bridgeObjectRetain();
      v0[5] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v9, v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_249C3F000, v25, v26, "No group found for use-case '%{public}s'", v27, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C5B4790](v28, -1, -1);
      MEMORY[0x24C5B4790](v27, -1, -1);
LABEL_15:

      type metadata accessor for CipherMLError();
      _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_6((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
      swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      swift_release();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v34 = (uint64_t (*)(void))v0[1];
      return v34();
    }
    goto LABEL_14;
  }
  uint64_t v36 = v0[15];
  uint64_t v38 = v0[12];
  uint64_t v37 = v0[13];
  uint64_t v39 = v0[10];
  uint64_t v40 = v0[11];
  uint64_t v41 = (void *)v0[7];
  double v50 = (int *)v0[8];
  swift_bridgeObjectRelease();
  outlined init with take of UseCaseGroup(v38, v36);
  outlined init with copy of NetworkConfig(v36 + *(int *)(v37 + 36), v40 + *(int *)(v39 + 32));
  *(unsigned char *)(v40 + 24) = v16 & 1;
  *(void *)(v40 + 32) = v46;
  *(unsigned char *)(v40 + 40) = v47 & 1;
  *(void *)(v40 + 48) = v48;
  *(void *)(v40 + 56) = v49;
  *(void *)(v40 + 8) = v45;
  *(void *)(v40 + 16) = v15;
  *(void *)uint64_t v40 = v41;
  uint64_t v51 = (int *)((char *)v50 + *v50);
  id v42 = v41;
  uint64_t v43 = (void *)swift_task_alloc();
  v0[17] = v43;
  *uint64_t v43 = v0;
  v43[1] = specialized closure #1 in XPCHandler.withStaticPIRConfig<A>(clientConfig:method:body:);
  uint64_t v44 = v0[11];
  return ((uint64_t (*)(void *, uint64_t))v51)(v0 + 2, v44);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 144) = v0;
  swift_task_dealloc();
  if (v0) {
    id v2 = specialized closure #1 in XPCHandler.withStaticPIRConfig<A>(clientConfig:method:body:);
  }
  else {
    id v2 = specialized closure #1 in XPCHandler.withStaticPIRConfig<A>(clientConfig:method:body:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t v7;

  uint64_t v1 = v0[15];
  id v2 = v0[11];
  swift_release();
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v2, &demangling cache variable for type metadata for RequestContext<StaticPIRParameters>);
  _s8CipherML12UseCaseGroupVWOhTm_0(v1, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
  id v3 = v0[2];
  uint64_t v4 = v0[3];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  return v5(v3, v4);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v1 = v0[15];
  id v2 = v0[11];
  swift_release();
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v2, &demangling cache variable for type metadata for RequestContext<StaticPIRParameters>);
  _s8CipherML12UseCaseGroupVWOhTm_0(v1, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t specialized closure #1 in XPCHandler.withStaticPIRConfig<A>(clientConfig:method:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[7] = a3;
  v4[8] = a4;
  v4[5] = a1;
  v4[6] = a2;
  v4[9] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestContext<StaticPIRParameters>);
  v4[10] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UseCaseGroup?);
  v4[11] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for UseCaseGroup();
  v4[12] = v5;
  v4[13] = *(void *)(v5 - 8);
  v4[14] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized closure #1 in XPCHandler.withStaticPIRConfig<A>(clientConfig:method:body:), 0, 0);
}

{
  void *v4;
  uint64_t v5;
  uint64_t v7;

  v4[7] = a3;
  v4[8] = a4;
  v4[5] = a1;
  v4[6] = a2;
  v4[9] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestContext<StaticPIRParameters>);
  v4[10] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UseCaseGroup?);
  v4[11] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for UseCaseGroup();
  v4[12] = v5;
  v4[13] = *(void *)(v5 - 8);
  v4[14] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized closure #1 in XPCHandler.withStaticPIRConfig<A>(clientConfig:method:body:), 0, 0);
}

{
  void *v4;
  uint64_t v5;
  uint64_t v7;

  v4[8] = a3;
  v4[9] = a4;
  v4[6] = a1;
  v4[7] = a2;
  v4[10] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestContext<StaticPIRParameters>);
  v4[11] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UseCaseGroup?);
  v4[12] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for UseCaseGroup();
  v4[13] = v5;
  v4[14] = *(void *)(v5 - 8);
  v4[15] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized closure #1 in XPCHandler.withStaticPIRConfig<A>(clientConfig:method:body:), 0, 0);
}

uint64_t specialized closure #1 in XPCHandler.withStaticPECConfig<A>(clientConfig:method:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[7] = a3;
  v4[8] = a4;
  v4[5] = a1;
  v4[6] = a2;
  v4[9] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestContext<StaticPECParameters>);
  v4[10] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UseCaseGroup?);
  v4[11] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for UseCaseGroup();
  v4[12] = v5;
  v4[13] = *(void *)(v5 - 8);
  v4[14] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized closure #1 in XPCHandler.withStaticPECConfig<A>(clientConfig:method:body:), 0, 0);
}

{
  void *v4;
  uint64_t v5;
  uint64_t v7;

  v4[7] = a3;
  v4[8] = a4;
  v4[5] = a1;
  v4[6] = a2;
  v4[9] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestContext<StaticPECParameters>);
  v4[10] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UseCaseGroup?);
  v4[11] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for UseCaseGroup();
  v4[12] = v5;
  v4[13] = *(void *)(v5 - 8);
  v4[14] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized closure #1 in XPCHandler.withStaticPECConfig<A>(clientConfig:method:body:), 0, 0);
}

{
  void *v4;
  uint64_t v5;
  uint64_t v7;

  v4[8] = a3;
  v4[9] = a4;
  v4[6] = a1;
  v4[7] = a2;
  v4[10] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestContext<StaticPECParameters>);
  v4[11] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UseCaseGroup?);
  v4[12] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for UseCaseGroup();
  v4[13] = v5;
  v4[14] = *(void *)(v5 - 8);
  v4[15] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized closure #1 in XPCHandler.withStaticPECConfig<A>(clientConfig:method:body:), 0, 0);
}

uint64_t specialized closure #1 in XPCHandler.withStaticPECConfig<A>(clientConfig:method:body:)()
{
  uint64_t v54 = v0;
  uint64_t v1 = *(os_unfair_lock_s **)(*(void *)(v0[5] + 16) + 48);
  id v2 = v1 + 4;
  id v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  closure #1 in OSAllocatedUnfairLock<A>.current.getter(v2, v53);
  os_unfair_lock_unlock(v3);
  uint64_t v4 = (void *)v0[6];
  uint64_t v5 = v53[0];
  v0[15] = v53[0];
  id v6 = objc_msgSend(v4, sel_useCase);
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v9 = v8;

  uint64_t v10 = *(void *)(v5 + 40);
  if (!*(void *)(v10 + 16))
  {
LABEL_6:
    if (one-time initialization token for framework != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    __swift_project_value_buffer(v21, (uint64_t)static Logger.framework);
    swift_bridgeObjectRetain();
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = v7;
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      v53[0] = swift_slowAlloc();
      uint64_t v26 = v53[0];
      *(_DWORD *)uint64_t v25 = 136446210;
      swift_bridgeObjectRetain();
      v0[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v9, v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_249C3F000, v22, v23, "Unknown/Invalid PEC use-case '%{public}s'", v25, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C5B4790](v26, -1, -1);
      MEMORY[0x24C5B4790](v25, -1, -1);
LABEL_11:

      type metadata accessor for CipherMLError();
      _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_6((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
      swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      swift_release();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      os_log_type_t v27 = (uint64_t (*)(void))v0[1];
      return v27();
    }
LABEL_10:
    swift_bridgeObjectRelease_n();
    goto LABEL_11;
  }
  swift_bridgeObjectRetain();
  uint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v9);
  if ((v12 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
  uint64_t v50 = v7;
  uint64_t v13 = *(void *)(v10 + 56) + (v11 << 6);
  uint64_t v15 = *(void *)v13;
  uint64_t v14 = *(void *)(v13 + 8);
  uint64_t v17 = *(void *)(v13 + 16);
  uint64_t v16 = *(void *)(v13 + 24);
  uint64_t v18 = *(void *)(v13 + 32);
  uint64_t v19 = *(void *)(v13 + 40);
  char v20 = *(unsigned char *)(v13 + 56);
  uint64_t v48 = *(void *)(v13 + 48);
  outlined copy of UseCase(*(void *)v13, v14, v17, v16, v18, v19, v48, v20);
  swift_bridgeObjectRelease();
  if (v20)
  {
    outlined consume of UseCase(v15, v14, v17, v16, v18, v19, v48, 1);
    uint64_t v7 = v50;
    goto LABEL_6;
  }
  uint64_t v45 = v18;
  uint64_t v46 = v16;
  uint64_t v47 = v14;
  uint64_t v49 = v15;
  uint64_t v30 = v0[12];
  uint64_t v29 = v0[13];
  uint64_t v31 = v0[11];
  AllowList.group(useCase:)(v50, v9, v31);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v29 + 48))(v31, 1, v30) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v0[11], &demangling cache variable for type metadata for UseCaseGroup?);
    if (one-time initialization token for framework != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    __swift_project_value_buffer(v32, (uint64_t)static Logger.framework);
    swift_bridgeObjectRetain();
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v33))
    {
      uint64_t v34 = (uint8_t *)swift_slowAlloc();
      uint64_t v35 = swift_slowAlloc();
      v53[0] = v35;
      *(_DWORD *)uint64_t v34 = 136446210;
      swift_bridgeObjectRetain();
      v0[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v9, v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_249C3F000, v22, v33, "No group found for use-case '%{public}s'", v34, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C5B4790](v35, -1, -1);
      MEMORY[0x24C5B4790](v34, -1, -1);
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  uint64_t v36 = v0[14];
  uint64_t v38 = v0[11];
  uint64_t v37 = v0[12];
  uint64_t v40 = v0[9];
  uint64_t v39 = v0[10];
  uint64_t v41 = (void *)v0[6];
  uint64_t v51 = (int *)v0[7];
  swift_bridgeObjectRelease();
  outlined init with take of UseCaseGroup(v38, v36);
  outlined init with copy of NetworkConfig(v36 + *(int *)(v37 + 36), v39 + *(int *)(v40 + 32));
  *(void *)(v39 + 16) = v47;
  *(void *)(v39 + 24) = v17;
  *(void *)(v39 + 32) = v46;
  *(void *)(v39 + 40) = v45;
  *(unsigned char *)(v39 + 48) = v19 & 1;
  *(void *)uint64_t v39 = v41;
  *(void *)(v39 + 8) = v49;
  uint64_t v52 = (int *)((char *)v51 + *v51);
  id v42 = v41;
  uint64_t v43 = (void *)swift_task_alloc();
  v0[16] = v43;
  *uint64_t v43 = v0;
  v43[1] = specialized closure #1 in XPCHandler.withStaticPECConfig<A>(clientConfig:method:body:);
  uint64_t v44 = v0[10];
  return ((uint64_t (*)(void *, uint64_t))v52)(v0 + 2, v44);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 136) = v0;
  swift_task_dealloc();
  if (v0) {
    id v2 = specialized closure #1 in XPCHandler.withStaticPECConfig<A>(clientConfig:method:body:);
  }
  else {
    id v2 = specialized closure #1 in XPCHandler.withStaticPECConfig<A>(clientConfig:method:body:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  void *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t (*v27)(void);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  id v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int *v52;
  uint64_t (*v53)(uint64_t, uint64_t);
  uint64_t v54[2];
  void *v55;
  uint64_t v56;

  uint64_t v55 = v0;
  uint64_t v1 = *(os_unfair_lock_s **)(*(void *)(v0[5] + 16) + 48);
  id v2 = v1 + 4;
  id v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  closure #1 in OSAllocatedUnfairLock<A>.current.getter(v2, v54);
  os_unfair_lock_unlock(v3);
  uint64_t v4 = (void *)v0[6];
  uint64_t v5 = v54[0];
  v0[15] = v54[0];
  id v6 = objc_msgSend(v4, sel_useCase);
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v9 = v8;

  uint64_t v10 = *(void *)(v5 + 40);
  if (!*(void *)(v10 + 16))
  {
LABEL_6:
    if (one-time initialization token for framework != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    __swift_project_value_buffer(v21, (uint64_t)static Logger.framework);
    swift_bridgeObjectRetain();
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = v7;
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      uint64_t v26 = swift_slowAlloc();
      v54[0] = v26;
      *(_DWORD *)uint64_t v25 = 136446210;
      swift_bridgeObjectRetain();
      v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v9, v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_249C3F000, v22, v23, "Unknown/Invalid PEC use-case '%{public}s'", v25, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C5B4790](v26, -1, -1);
      MEMORY[0x24C5B4790](v25, -1, -1);
LABEL_11:

      type metadata accessor for CipherMLError();
      _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_6((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
      swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      swift_release();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      os_log_type_t v27 = (uint64_t (*)(void))v0[1];
      return v27();
    }
LABEL_10:
    swift_bridgeObjectRelease_n();
    goto LABEL_11;
  }
  swift_bridgeObjectRetain();
  uint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v9);
  if ((v12 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
  uint64_t v50 = v7;
  uint64_t v13 = *(void *)(v10 + 56) + (v11 << 6);
  uint64_t v14 = *(void *)v13;
  uint64_t v15 = *(void *)(v13 + 8);
  uint64_t v16 = *(void *)(v13 + 16);
  uint64_t v17 = *(void *)(v13 + 24);
  uint64_t v18 = *(void *)(v13 + 32);
  uint64_t v19 = *(void *)(v13 + 40);
  char v20 = *(unsigned char *)(v13 + 56);
  uint64_t v51 = *(void *)(v13 + 48);
  outlined copy of UseCase(*(void *)v13, v15, v16, v17, v18, v19, v51, v20);
  swift_bridgeObjectRelease();
  if (v20)
  {
    outlined consume of UseCase(v14, v15, v16, v17, v18, v19, v51, 1);
    uint64_t v7 = v50;
    goto LABEL_6;
  }
  uint64_t v47 = v18;
  uint64_t v48 = v17;
  uint64_t v49 = v16;
  uint64_t v46 = v14;
  uint64_t v30 = v0[12];
  uint64_t v29 = v0[13];
  uint64_t v31 = v0[11];
  AllowList.group(useCase:)(v50, v9, v31);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v29 + 48))(v31, 1, v30) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v0[11], &demangling cache variable for type metadata for UseCaseGroup?);
    if (one-time initialization token for framework != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    __swift_project_value_buffer(v32, (uint64_t)static Logger.framework);
    swift_bridgeObjectRetain();
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v33))
    {
      uint64_t v34 = (uint8_t *)swift_slowAlloc();
      uint64_t v35 = swift_slowAlloc();
      v54[0] = v35;
      *(_DWORD *)uint64_t v34 = 136446210;
      swift_bridgeObjectRetain();
      v0[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v9, v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_249C3F000, v22, v33, "No group found for use-case '%{public}s'", v34, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C5B4790](v35, -1, -1);
      MEMORY[0x24C5B4790](v34, -1, -1);
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  uint64_t v36 = v0[14];
  uint64_t v37 = v0[11];
  uint64_t v38 = v0[12];
  uint64_t v39 = v0[9];
  uint64_t v40 = v0[10];
  uint64_t v41 = (void *)v0[6];
  uint64_t v52 = (int *)v0[7];
  swift_bridgeObjectRelease();
  outlined init with take of UseCaseGroup(v37, v36);
  outlined init with copy of NetworkConfig(v36 + *(int *)(v38 + 36), v40 + *(int *)(v39 + 32));
  *(void *)(v40 + 16) = v15;
  *(void *)(v40 + 24) = v49;
  *(void *)(v40 + 32) = v48;
  *(void *)(v40 + 40) = v47;
  *(unsigned char *)(v40 + 48) = v19 & 1;
  *(void *)uint64_t v40 = v41;
  *(void *)(v40 + 8) = v46;
  uint64_t v53 = (uint64_t (*)(uint64_t, uint64_t))((char *)v52 + *v52);
  id v42 = v41;
  uint64_t v43 = (void *)swift_task_alloc();
  v0[16] = v43;
  *uint64_t v43 = v0;
  v43[1] = specialized closure #1 in XPCHandler.withStaticPECConfig<A>(clientConfig:method:body:);
  uint64_t v44 = v0[10];
  uint64_t v45 = v0[4];
  return v53(v45, v44);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 136) = v0;
  swift_task_dealloc();
  if (v0) {
    id v2 = specialized closure #1 in XPCHandler.withStaticPECConfig<A>(clientConfig:method:body:);
  }
  else {
    id v2 = specialized closure #1 in XPCHandler.withStaticPECConfig<A>(clientConfig:method:body:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v1 = v0[14];
  id v2 = v0[10];
  swift_release();
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v2, &demangling cache variable for type metadata for RequestContext<StaticPECParameters>);
  _s8CipherML12UseCaseGroupVWOhTm_0(v1, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v1 = v0[14];
  id v2 = v0[10];
  swift_release();
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v2, &demangling cache variable for type metadata for RequestContext<StaticPECParameters>);
  _s8CipherML12UseCaseGroupVWOhTm_0(v1, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

{
  void *v0;
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  void *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t (*v27)(void);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  id v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int *v52;
  uint64_t (*v53)(uint64_t, uint64_t);
  uint64_t v54[2];
  void *v55;
  uint64_t v56;

  uint64_t v55 = v0;
  uint64_t v1 = *(os_unfair_lock_s **)(*(void *)(v0[5] + 16) + 48);
  id v2 = v1 + 4;
  id v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  closure #1 in OSAllocatedUnfairLock<A>.current.getter(v2, v54);
  os_unfair_lock_unlock(v3);
  uint64_t v4 = (void *)v0[6];
  uint64_t v5 = v54[0];
  v0[15] = v54[0];
  id v6 = objc_msgSend(v4, sel_useCase);
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v9 = v8;

  uint64_t v10 = *(void *)(v5 + 40);
  if (!*(void *)(v10 + 16))
  {
LABEL_6:
    if (one-time initialization token for framework != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    __swift_project_value_buffer(v21, (uint64_t)static Logger.framework);
    swift_bridgeObjectRetain();
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = v7;
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      uint64_t v26 = swift_slowAlloc();
      v54[0] = v26;
      *(_DWORD *)uint64_t v25 = 136446210;
      swift_bridgeObjectRetain();
      v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v9, v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_249C3F000, v22, v23, "Unknown/Invalid PEC use-case '%{public}s'", v25, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C5B4790](v26, -1, -1);
      MEMORY[0x24C5B4790](v25, -1, -1);
LABEL_11:

      type metadata accessor for CipherMLError();
      _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_6((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
      swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      swift_release();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      os_log_type_t v27 = (uint64_t (*)(void))v0[1];
      return v27();
    }
LABEL_10:
    swift_bridgeObjectRelease_n();
    goto LABEL_11;
  }
  swift_bridgeObjectRetain();
  uint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v9);
  if ((v12 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
  uint64_t v50 = v7;
  uint64_t v13 = *(void *)(v10 + 56) + (v11 << 6);
  uint64_t v14 = *(void *)v13;
  uint64_t v15 = *(void *)(v13 + 8);
  uint64_t v16 = *(void *)(v13 + 16);
  uint64_t v17 = *(void *)(v13 + 24);
  uint64_t v18 = *(void *)(v13 + 32);
  uint64_t v19 = *(void *)(v13 + 40);
  char v20 = *(unsigned char *)(v13 + 56);
  uint64_t v51 = *(void *)(v13 + 48);
  outlined copy of UseCase(*(void *)v13, v15, v16, v17, v18, v19, v51, v20);
  swift_bridgeObjectRelease();
  if (v20)
  {
    outlined consume of UseCase(v14, v15, v16, v17, v18, v19, v51, 1);
    uint64_t v7 = v50;
    goto LABEL_6;
  }
  uint64_t v47 = v18;
  uint64_t v48 = v17;
  uint64_t v49 = v16;
  uint64_t v46 = v14;
  uint64_t v30 = v0[12];
  uint64_t v29 = v0[13];
  uint64_t v31 = v0[11];
  AllowList.group(useCase:)(v50, v9, v31);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v29 + 48))(v31, 1, v30) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v0[11], &demangling cache variable for type metadata for UseCaseGroup?);
    if (one-time initialization token for framework != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    __swift_project_value_buffer(v32, (uint64_t)static Logger.framework);
    swift_bridgeObjectRetain();
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v33))
    {
      uint64_t v34 = (uint8_t *)swift_slowAlloc();
      uint64_t v35 = swift_slowAlloc();
      v54[0] = v35;
      *(_DWORD *)uint64_t v34 = 136446210;
      swift_bridgeObjectRetain();
      v0[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v9, v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_249C3F000, v22, v33, "No group found for use-case '%{public}s'", v34, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C5B4790](v35, -1, -1);
      MEMORY[0x24C5B4790](v34, -1, -1);
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  uint64_t v36 = v0[14];
  uint64_t v37 = v0[11];
  uint64_t v38 = v0[12];
  uint64_t v39 = v0[9];
  uint64_t v40 = v0[10];
  uint64_t v41 = (void *)v0[6];
  uint64_t v52 = (int *)v0[7];
  swift_bridgeObjectRelease();
  outlined init with take of UseCaseGroup(v37, v36);
  outlined init with copy of NetworkConfig(v36 + *(int *)(v38 + 36), v40 + *(int *)(v39 + 32));
  *(void *)(v40 + 16) = v15;
  *(void *)(v40 + 24) = v49;
  *(void *)(v40 + 32) = v48;
  *(void *)(v40 + 40) = v47;
  *(unsigned char *)(v40 + 48) = v19 & 1;
  *(void *)uint64_t v40 = v41;
  *(void *)(v40 + 8) = v46;
  uint64_t v53 = (uint64_t (*)(uint64_t, uint64_t))((char *)v52 + *v52);
  id v42 = v41;
  uint64_t v43 = (void *)swift_task_alloc();
  v0[16] = v43;
  *uint64_t v43 = v0;
  v43[1] = specialized closure #1 in XPCHandler.withStaticPECConfig<A>(clientConfig:method:body:);
  uint64_t v44 = v0[10];
  uint64_t v45 = v0[4];
  return v53(v45, v44);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 136) = v0;
  swift_task_dealloc();
  if (v0) {
    id v2 = specialized closure #1 in XPCHandler.withStaticPECConfig<A>(clientConfig:method:body:);
  }
  else {
    id v2 = specialized closure #1 in XPCHandler.withStaticPECConfig<A>(clientConfig:method:body:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  void *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t (*v27)(void);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  id v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int *v51;
  int *v52;
  uint64_t v53[2];
  void *v54;
  uint64_t v55;

  uint64_t v54 = v0;
  uint64_t v1 = *(os_unfair_lock_s **)(*(void *)(v0[5] + 16) + 48);
  id v2 = v1 + 4;
  id v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  closure #1 in OSAllocatedUnfairLock<A>.current.getter(v2, v53);
  os_unfair_lock_unlock(v3);
  uint64_t v4 = (void *)v0[6];
  uint64_t v5 = v53[0];
  v0[15] = v53[0];
  id v6 = objc_msgSend(v4, sel_useCase);
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v9 = v8;

  uint64_t v10 = *(void *)(v5 + 40);
  if (!*(void *)(v10 + 16))
  {
LABEL_6:
    if (one-time initialization token for framework != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    __swift_project_value_buffer(v21, (uint64_t)static Logger.framework);
    swift_bridgeObjectRetain();
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = v7;
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      v53[0] = swift_slowAlloc();
      uint64_t v26 = v53[0];
      *(_DWORD *)uint64_t v25 = 136446210;
      swift_bridgeObjectRetain();
      v0[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v9, v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_249C3F000, v22, v23, "Unknown/Invalid PEC use-case '%{public}s'", v25, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C5B4790](v26, -1, -1);
      MEMORY[0x24C5B4790](v25, -1, -1);
LABEL_11:

      type metadata accessor for CipherMLError();
      _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_6((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
      swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      swift_release();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      os_log_type_t v27 = (uint64_t (*)(void))v0[1];
      return v27();
    }
LABEL_10:
    swift_bridgeObjectRelease_n();
    goto LABEL_11;
  }
  swift_bridgeObjectRetain();
  uint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v9);
  if ((v12 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
  uint64_t v50 = v7;
  uint64_t v13 = *(void *)(v10 + 56) + (v11 << 6);
  uint64_t v15 = *(void *)v13;
  uint64_t v14 = *(void *)(v13 + 8);
  uint64_t v17 = *(void *)(v13 + 16);
  uint64_t v16 = *(void *)(v13 + 24);
  uint64_t v18 = *(void *)(v13 + 32);
  uint64_t v19 = *(void *)(v13 + 40);
  char v20 = *(unsigned char *)(v13 + 56);
  uint64_t v48 = *(void *)(v13 + 48);
  outlined copy of UseCase(*(void *)v13, v14, v17, v16, v18, v19, v48, v20);
  swift_bridgeObjectRelease();
  if (v20)
  {
    outlined consume of UseCase(v15, v14, v17, v16, v18, v19, v48, 1);
    uint64_t v7 = v50;
    goto LABEL_6;
  }
  uint64_t v45 = v18;
  uint64_t v46 = v16;
  uint64_t v47 = v14;
  uint64_t v49 = v15;
  uint64_t v30 = v0[12];
  uint64_t v29 = v0[13];
  uint64_t v31 = v0[11];
  AllowList.group(useCase:)(v50, v9, v31);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v29 + 48))(v31, 1, v30) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v0[11], &demangling cache variable for type metadata for UseCaseGroup?);
    if (one-time initialization token for framework != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    __swift_project_value_buffer(v32, (uint64_t)static Logger.framework);
    swift_bridgeObjectRetain();
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v33))
    {
      uint64_t v34 = (uint8_t *)swift_slowAlloc();
      uint64_t v35 = swift_slowAlloc();
      v53[0] = v35;
      *(_DWORD *)uint64_t v34 = 136446210;
      swift_bridgeObjectRetain();
      v0[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v9, v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_249C3F000, v22, v33, "No group found for use-case '%{public}s'", v34, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C5B4790](v35, -1, -1);
      MEMORY[0x24C5B4790](v34, -1, -1);
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  uint64_t v36 = v0[14];
  uint64_t v38 = v0[11];
  uint64_t v37 = v0[12];
  uint64_t v40 = v0[9];
  uint64_t v39 = v0[10];
  uint64_t v41 = (void *)v0[6];
  uint64_t v51 = (int *)v0[7];
  swift_bridgeObjectRelease();
  outlined init with take of UseCaseGroup(v38, v36);
  outlined init with copy of NetworkConfig(v36 + *(int *)(v37 + 36), v39 + *(int *)(v40 + 32));
  *(void *)(v39 + 16) = v47;
  *(void *)(v39 + 24) = v17;
  *(void *)(v39 + 32) = v46;
  *(void *)(v39 + 40) = v45;
  *(unsigned char *)(v39 + 48) = v19 & 1;
  *(void *)uint64_t v39 = v41;
  *(void *)(v39 + 8) = v49;
  uint64_t v52 = (int *)((char *)v51 + *v51);
  id v42 = v41;
  uint64_t v43 = (void *)swift_task_alloc();
  v0[16] = v43;
  *uint64_t v43 = v0;
  v43[1] = specialized closure #1 in XPCHandler.withStaticPECConfig<A>(clientConfig:method:body:);
  uint64_t v44 = v0[10];
  return ((uint64_t (*)(void *, uint64_t))v52)(v0 + 2, v44);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 136) = v0;
  swift_task_dealloc();
  if (v0) {
    id v2 = specialized closure #1 in XPCHandler.withStaticPECConfig<A>(clientConfig:method:body:);
  }
  else {
    id v2 = specialized closure #1 in XPCHandler.withStaticPECConfig<A>(clientConfig:method:body:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v6;

  uint64_t v1 = v0[14];
  id v2 = v0[10];
  swift_release();
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v2, &demangling cache variable for type metadata for RequestContext<StaticPECParameters>);
  _s8CipherML12UseCaseGroupVWOhTm_0(v1, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
  id v3 = v0[2];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(uint64_t))v0[1];
  return v4(v3);
}

{
  void *v0;
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  void *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t (*v27)(void);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  id v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int *v51;
  int *v52;
  uint64_t v53[2];
  void *v54;
  uint64_t v55;

  uint64_t v54 = v0;
  uint64_t v1 = *(os_unfair_lock_s **)(*(void *)(v0[6] + 16) + 48);
  id v2 = v1 + 4;
  id v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  closure #1 in OSAllocatedUnfairLock<A>.current.getter(v2, v53);
  os_unfair_lock_unlock(v3);
  uint64_t v4 = (void *)v0[7];
  uint64_t v5 = v53[0];
  v0[16] = v53[0];
  id v6 = objc_msgSend(v4, sel_useCase);
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v9 = v8;

  uint64_t v10 = *(void *)(v5 + 40);
  if (!*(void *)(v10 + 16))
  {
LABEL_6:
    if (one-time initialization token for framework != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    __swift_project_value_buffer(v21, (uint64_t)static Logger.framework);
    swift_bridgeObjectRetain();
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = v7;
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      v53[0] = swift_slowAlloc();
      uint64_t v26 = v53[0];
      *(_DWORD *)uint64_t v25 = 136446210;
      swift_bridgeObjectRetain();
      v0[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v9, v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_249C3F000, v22, v23, "Unknown/Invalid PEC use-case '%{public}s'", v25, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C5B4790](v26, -1, -1);
      MEMORY[0x24C5B4790](v25, -1, -1);
LABEL_11:

      type metadata accessor for CipherMLError();
      _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_6((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
      swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      swift_release();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      os_log_type_t v27 = (uint64_t (*)(void))v0[1];
      return v27();
    }
LABEL_10:
    swift_bridgeObjectRelease_n();
    goto LABEL_11;
  }
  swift_bridgeObjectRetain();
  uint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v9);
  if ((v12 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
  uint64_t v50 = v7;
  uint64_t v13 = *(void *)(v10 + 56) + (v11 << 6);
  uint64_t v15 = *(void *)v13;
  uint64_t v14 = *(void *)(v13 + 8);
  uint64_t v17 = *(void *)(v13 + 16);
  uint64_t v16 = *(void *)(v13 + 24);
  uint64_t v18 = *(void *)(v13 + 32);
  uint64_t v19 = *(void *)(v13 + 40);
  char v20 = *(unsigned char *)(v13 + 56);
  uint64_t v48 = *(void *)(v13 + 48);
  outlined copy of UseCase(*(void *)v13, v14, v17, v16, v18, v19, v48, v20);
  swift_bridgeObjectRelease();
  if (v20)
  {
    outlined consume of UseCase(v15, v14, v17, v16, v18, v19, v48, 1);
    uint64_t v7 = v50;
    goto LABEL_6;
  }
  uint64_t v45 = v18;
  uint64_t v46 = v16;
  uint64_t v47 = v14;
  uint64_t v49 = v15;
  uint64_t v30 = v0[13];
  uint64_t v29 = v0[14];
  uint64_t v31 = v0[12];
  AllowList.group(useCase:)(v50, v9, v31);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v29 + 48))(v31, 1, v30) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v0[12], &demangling cache variable for type metadata for UseCaseGroup?);
    if (one-time initialization token for framework != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    __swift_project_value_buffer(v32, (uint64_t)static Logger.framework);
    swift_bridgeObjectRetain();
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v33))
    {
      uint64_t v34 = (uint8_t *)swift_slowAlloc();
      uint64_t v35 = swift_slowAlloc();
      v53[0] = v35;
      *(_DWORD *)uint64_t v34 = 136446210;
      swift_bridgeObjectRetain();
      v0[5] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v9, v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_249C3F000, v22, v33, "No group found for use-case '%{public}s'", v34, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C5B4790](v35, -1, -1);
      MEMORY[0x24C5B4790](v34, -1, -1);
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  uint64_t v36 = v0[15];
  uint64_t v38 = v0[12];
  uint64_t v37 = v0[13];
  uint64_t v40 = v0[10];
  uint64_t v39 = v0[11];
  uint64_t v41 = (void *)v0[7];
  uint64_t v51 = (int *)v0[8];
  swift_bridgeObjectRelease();
  outlined init with take of UseCaseGroup(v38, v36);
  outlined init with copy of NetworkConfig(v36 + *(int *)(v37 + 36), v39 + *(int *)(v40 + 32));
  *(void *)(v39 + 16) = v47;
  *(void *)(v39 + 24) = v17;
  *(void *)(v39 + 32) = v46;
  *(void *)(v39 + 40) = v45;
  *(unsigned char *)(v39 + 48) = v19 & 1;
  *(void *)uint64_t v39 = v41;
  *(void *)(v39 + 8) = v49;
  uint64_t v52 = (int *)((char *)v51 + *v51);
  id v42 = v41;
  uint64_t v43 = (void *)swift_task_alloc();
  v0[17] = v43;
  *uint64_t v43 = v0;
  v43[1] = specialized closure #1 in XPCHandler.withStaticPECConfig<A>(clientConfig:method:body:);
  uint64_t v44 = v0[11];
  return ((uint64_t (*)(void *, uint64_t))v52)(v0 + 2, v44);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 144) = v0;
  swift_task_dealloc();
  if (v0) {
    id v2 = specialized closure #1 in XPCHandler.withStaticPECConfig<A>(clientConfig:method:body:);
  }
  else {
    id v2 = specialized closure #1 in XPCHandler.withStaticPECConfig<A>(clientConfig:method:body:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t v7;

  uint64_t v1 = v0[15];
  id v2 = v0[11];
  swift_release();
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v2, &demangling cache variable for type metadata for RequestContext<StaticPECParameters>);
  _s8CipherML12UseCaseGroupVWOhTm_0(v1, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
  id v3 = v0[2];
  uint64_t v4 = v0[3];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  return v5(v3, v4);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v1 = v0[15];
  id v2 = v0[11];
  swift_release();
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v2, &demangling cache variable for type metadata for RequestContext<StaticPECParameters>);
  _s8CipherML12UseCaseGroupVWOhTm_0(v1, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t specialized closure #1 in XPCHandler.withStaticPECConfig<A>(clientConfig:method:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[7] = a4;
  v5[8] = a5;
  v5[5] = a2;
  v5[6] = a3;
  v5[4] = a1;
  v5[9] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestContext<StaticPECParameters>);
  v5[10] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UseCaseGroup?);
  v5[11] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for UseCaseGroup();
  v5[12] = v6;
  v5[13] = *(void *)(v6 - 8);
  v5[14] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized closure #1 in XPCHandler.withStaticPECConfig<A>(clientConfig:method:body:), 0, 0);
}

{
  void *v5;
  uint64_t v6;
  uint64_t v8;

  v5[7] = a4;
  v5[8] = a5;
  v5[5] = a2;
  v5[6] = a3;
  v5[4] = a1;
  v5[9] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestContext<StaticPECParameters>);
  v5[10] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UseCaseGroup?);
  v5[11] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for UseCaseGroup();
  v5[12] = v6;
  v5[13] = *(void *)(v6 - 8);
  v5[14] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized closure #1 in XPCHandler.withStaticPECConfig<A>(clientConfig:method:body:), 0, 0);
}

uint64_t XPCHandler.deinit()
{
  swift_release();

  return v0;
}

uint64_t XPCHandler.__deallocating_deinit()
{
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t _sIeghH_IeAgH_TR(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v4;
  *uint64_t v4 = v3;
  v4[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return v6();
}

uint64_t _sIeAgH_ytIeAgHr_TR(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v5;
  *uint64_t v5 = v4;
  v5[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return v7();
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgmq5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  outlined destroy of AMDPbHEConfig.OneOf_Config?(a1, &demangling cache variable for type metadata for TaskPriority?);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TQ0_;
  return v6(a1);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TQ0_()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A0LL12clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFSay10Foundation4DataVG_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm33LL12clientConfig6method4bodyxSo09r85O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_Say10Foundation4T6VG_TG5AcjA14RequestContextVyAA0X13PIRParametersVGxs0E0_pRi_zRi0_zlyAOIsgHnrzo_Tf1nncn_nTf4nndggg_n(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[16] = a6;
  v7[17] = a7;
  v7[14] = a4;
  v7[15] = a5;
  v7[12] = a2;
  v7[13] = a3;
  v7[11] = a1;
  return MEMORY[0x270FA2498](_s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A012clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFSay10Foundation4DataVG_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm3312clientConfig6method4bodyxSo09r85O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_Say10Foundation4T6VG_TG5AcjA14RequestContextVyAA0X13PIRParametersVGxs0E0_pRi_zRi0_zlyAOIsgHnrzo_Tf1nncn_nTf4nndggg_nTY0_, 0, 0);
}

uint64_t _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A0LL12clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFSay10Foundation4DataVG_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm33LL12clientConfig6method4bodyxSo09r85O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_Say10Foundation4T6VG_TG5AcjA14RequestContextVyAA0X13PIRParametersVGxs0E0_pRi_zRi0_zlyAOIsgHnrzo_Tf1nncn_nTf4nndggg_nTY0_()
{
  uint64_t v16 = v0;
  if (one-time initialization token for framework != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[18] = __swift_project_value_buffer(v1, (uint64_t)static Logger.framework);
  swift_bridgeObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  unint64_t v5 = v0[13];
  if (v4)
  {
    uint64_t v6 = v0[12];
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    uint64_t v15 = v8;
    *(_DWORD *)uint64_t v7 = 136446210;
    swift_bridgeObjectRetain();
    v0[10] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v5, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_249C3F000, v2, v3, "%{public}s method was called", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5B4790](v8, -1, -1);
    MEMORY[0x24C5B4790](v7, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  unint64_t v9 = (void *)swift_task_alloc();
  v0[19] = v9;
  *unint64_t v9 = v0;
  v9[1] = _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A012clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFSay10Foundation4DataVG_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm3312clientConfig6method4bodyxSo09r85O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_Say10Foundation4T6VG_TG5AcjA14RequestContextVyAA0X13PIRParametersVGxs0E0_pRi_zRi0_zlyAOIsgHnrzo_Tf1nncn_nTf4nndggg_nTQ1_;
  uint64_t v10 = v0[16];
  uint64_t v11 = v0[17];
  uint64_t v13 = v0[14];
  uint64_t v12 = v0[15];
  return specialized closure #1 in XPCHandler.withStaticPIRConfig<A>(clientConfig:method:body:)(v13, v12, v10, v11);
}

uint64_t _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A0LL12clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFSay10Foundation4DataVG_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm33LL12clientConfig6method4bodyxSo09r85O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_Say10Foundation4T6VG_TG5AcjA14RequestContextVyAA0X13PIRParametersVGxs0E0_pRi_zRi0_zlyAOIsgHnrzo_Tf1nncn_nTf4nndggg_nTQ1_(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(v4 + 160) = v1;
  swift_task_dealloc();
  if (v1)
  {
    return MEMORY[0x270FA2498](_s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A012clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFSay10Foundation4DataVG_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm3312clientConfig6method4bodyxSo09r85O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_Say10Foundation4T6VG_TG5AcjA14RequestContextVyAA0X13PIRParametersVGxs0E0_pRi_zRi0_zlyAOIsgHnrzo_Tf1nncn_nTf4nndggg_nTY2_, 0, 0);
  }
  else
  {
    unint64_t v5 = *(uint64_t (**)(uint64_t))(v4 + 8);
    return v5(a1);
  }
}

uint64_t _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A0LL12clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFSay10Foundation4DataVG_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm33LL12clientConfig6method4bodyxSo09r85O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_Say10Foundation4T6VG_TG5AcjA14RequestContextVyAA0X13PIRParametersVGxs0E0_pRi_zRi0_zlyAOIsgHnrzo_Tf1nncn_nTf4nndggg_nTY2_()
{
  uint64_t v34 = v0;
  uint64_t v1 = *(void **)(v0 + 160);
  swift_bridgeObjectRetain();
  id v2 = v1;
  swift_bridgeObjectRetain();
  id v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = *(void **)(v0 + 160);
    uint64_t v8 = *(void *)(v0 + 96);
    unint64_t v7 = *(void *)(v0 + 104);
    uint64_t v9 = swift_slowAlloc();
    uint64_t v10 = (void *)swift_slowAlloc();
    uint64_t v32 = swift_slowAlloc();
    uint64_t v33 = v32;
    *(_DWORD *)uint64_t v9 = 136446466;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v7, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v9 + 12) = 2114;
    id v11 = v6;
    uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 72) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v10 = v12;

    _os_log_impl(&dword_249C3F000, v4, v5, "%{public}s threw an error: %{public}@", (uint8_t *)v9, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x24C5B4790](v10, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x24C5B4790](v32, -1, -1);
    MEMORY[0x24C5B4790](v9, -1, -1);
  }
  else
  {
    uint64_t v13 = *(void **)(v0 + 160);
    swift_bridgeObjectRelease_n();
  }
  uint64_t v14 = *(void **)(v0 + 88);
  if (v14)
  {
    id v15 = objc_msgSend(*(id *)(v0 + 88), sel_useCase);
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v18 = v17;

    id v19 = objc_msgSend(v14, sel_sourceApplicationBundleIdentifier);
    if (v19)
    {
      char v20 = v19;
      uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v14 = v22;
    }
    else
    {
      uint64_t v21 = 0;
      uint64_t v14 = 0;
    }
  }
  else
  {
    uint64_t v21 = 0;
    unint64_t v18 = 0xE400000000000000;
    uint64_t v16 = 1701736270;
  }
  os_log_type_t v23 = *(void **)(v0 + 160);
  uint64_t v25 = *(void *)(v0 + 96);
  uint64_t v24 = *(void *)(v0 + 104);
  uint64_t v26 = (void *)MEMORY[0x24C5B33F0](0xD00000000000001BLL, 0x8000000249E94BF0);
  os_log_type_t v27 = (void *)swift_allocObject();
  v27[2] = v16;
  v27[3] = v18;
  v27[4] = v21;
  v27[5] = v14;
  v27[6] = v25;
  v27[7] = v24;
  v27[8] = v23;
  *(void *)(v0 + 48) = _s8CipherML9TelemetryO19reportErrorToServer7useCase10identifier6method5errorySS_SSSgSSs0E0_ptFZSDySSSo8NSObjectCGSgycfU_TA_0;
  *(void *)(v0 + 56) = v27;
  *(void *)(v0 + 16) = MEMORY[0x263EF8330];
  *(void *)(v0 + 24) = 1107296256;
  *(void *)(v0 + 32) = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
  *(void *)(v0 + 40) = &block_descriptor_686;
  uint64_t v28 = _Block_copy((const void *)(v0 + 16));
  swift_bridgeObjectRetain();
  id v29 = v23;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v28);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  specialized static CipherMLError.makeErrorConformToSecureCoding(error:)(v23);
  swift_willThrow();

  uint64_t v30 = *(uint64_t (**)(void))(v0 + 8);
  return v30();
}

uint64_t partial apply for closure #1 in XPCHandler.requestData(byKeywords:shardIds:clientConfig:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(v2 + 32);
  uint64_t v7 = swift_task_alloc();
  long long v8 = *(_OWORD *)(v2 + 16);
  *(void *)(v3 + 16) = v7;
  *(void *)uint64_t v7 = v3;
  *(void *)(v7 + 8) = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  *(void *)(v7 + 48) = v6;
  *(_OWORD *)(v7 + 32) = v8;
  *(void *)(v7 + 16) = a1;
  *(void *)(v7 + 24) = a2;
  return MEMORY[0x270FA2498](closure #1 in XPCHandler.requestData(byKeywords:shardIds:clientConfig:), 0, 0);
}

uint64_t _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A0LL12clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFSaySo8NSObjectCG_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm33LL12clientConfig6method4bodyxSo09r75O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_SaySo8S6CG_TG5AcjA14RequestContextVyAA0W13PIRParametersVGxs0E0_pRi_zRi0_zlyANIsgHnrzo_Tf1nncn_nTf4nndggg_n(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[16] = a6;
  v7[17] = a7;
  v7[14] = a4;
  v7[15] = a5;
  v7[12] = a2;
  v7[13] = a3;
  v7[11] = a1;
  return MEMORY[0x270FA2498](_s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A012clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFSaySo8NSObjectCG_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm3312clientConfig6method4bodyxSo09r75O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_SaySo8S6CG_TG5AcjA14RequestContextVyAA0W13PIRParametersVGxs0E0_pRi_zRi0_zlyANIsgHnrzo_Tf1nncn_nTf4nndggg_nTY0_, 0, 0);
}

uint64_t _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A0LL12clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFSaySo8NSObjectCG_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm33LL12clientConfig6method4bodyxSo09r75O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_SaySo8S6CG_TG5AcjA14RequestContextVyAA0W13PIRParametersVGxs0E0_pRi_zRi0_zlyANIsgHnrzo_Tf1nncn_nTf4nndggg_nTY0_()
{
  uint64_t v16 = v0;
  if (one-time initialization token for framework != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[18] = __swift_project_value_buffer(v1, (uint64_t)static Logger.framework);
  swift_bridgeObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  unint64_t v5 = v0[13];
  if (v4)
  {
    uint64_t v6 = v0[12];
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    uint64_t v15 = v8;
    *(_DWORD *)uint64_t v7 = 136446210;
    swift_bridgeObjectRetain();
    v0[10] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v5, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_249C3F000, v2, v3, "%{public}s method was called", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5B4790](v8, -1, -1);
    MEMORY[0x24C5B4790](v7, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v9 = (void *)swift_task_alloc();
  v0[19] = v9;
  *uint64_t v9 = v0;
  v9[1] = _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A012clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFSaySo8NSObjectCG_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm3312clientConfig6method4bodyxSo09r75O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_SaySo8S6CG_TG5AcjA14RequestContextVyAA0W13PIRParametersVGxs0E0_pRi_zRi0_zlyANIsgHnrzo_Tf1nncn_nTf4nndggg_nTQ1_;
  uint64_t v10 = v0[16];
  uint64_t v11 = v0[17];
  uint64_t v13 = v0[14];
  uint64_t v12 = v0[15];
  return specialized closure #1 in XPCHandler.withStaticPIRConfig<A>(clientConfig:method:body:)(v13, v12, v10, v11);
}

uint64_t _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A0LL12clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFSaySo8NSObjectCG_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm33LL12clientConfig6method4bodyxSo09r75O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_SaySo8S6CG_TG5AcjA14RequestContextVyAA0W13PIRParametersVGxs0E0_pRi_zRi0_zlyANIsgHnrzo_Tf1nncn_nTf4nndggg_nTQ1_(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(v4 + 160) = v1;
  swift_task_dealloc();
  if (v1)
  {
    return MEMORY[0x270FA2498](_s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A012clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFSaySo8NSObjectCG_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm3312clientConfig6method4bodyxSo09r75O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_SaySo8S6CG_TG5AcjA14RequestContextVyAA0W13PIRParametersVGxs0E0_pRi_zRi0_zlyANIsgHnrzo_Tf1nncn_nTf4nndggg_nTY2_, 0, 0);
  }
  else
  {
    unint64_t v5 = *(uint64_t (**)(uint64_t))(v4 + 8);
    return v5(a1);
  }
}

uint64_t _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A0LL12clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFSaySo8NSObjectCG_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm33LL12clientConfig6method4bodyxSo09r75O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_SaySo8S6CG_TG5AcjA14RequestContextVyAA0W13PIRParametersVGxs0E0_pRi_zRi0_zlyANIsgHnrzo_Tf1nncn_nTf4nndggg_nTY2_()
{
  uint64_t v34 = v0;
  uint64_t v1 = *(void **)(v0 + 160);
  swift_bridgeObjectRetain();
  id v2 = v1;
  swift_bridgeObjectRetain();
  id v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = *(void **)(v0 + 160);
    uint64_t v8 = *(void *)(v0 + 96);
    unint64_t v7 = *(void *)(v0 + 104);
    uint64_t v9 = swift_slowAlloc();
    uint64_t v10 = (void *)swift_slowAlloc();
    uint64_t v32 = swift_slowAlloc();
    uint64_t v33 = v32;
    *(_DWORD *)uint64_t v9 = 136446466;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v7, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v9 + 12) = 2114;
    id v11 = v6;
    uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 72) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v10 = v12;

    _os_log_impl(&dword_249C3F000, v4, v5, "%{public}s threw an error: %{public}@", (uint8_t *)v9, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x24C5B4790](v10, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x24C5B4790](v32, -1, -1);
    MEMORY[0x24C5B4790](v9, -1, -1);
  }
  else
  {
    uint64_t v13 = *(void **)(v0 + 160);
    swift_bridgeObjectRelease_n();
  }
  uint64_t v14 = *(void **)(v0 + 88);
  if (v14)
  {
    id v15 = objc_msgSend(*(id *)(v0 + 88), sel_useCase);
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v18 = v17;

    id v19 = objc_msgSend(v14, sel_sourceApplicationBundleIdentifier);
    if (v19)
    {
      char v20 = v19;
      uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v14 = v22;
    }
    else
    {
      uint64_t v21 = 0;
      uint64_t v14 = 0;
    }
  }
  else
  {
    uint64_t v21 = 0;
    unint64_t v18 = 0xE400000000000000;
    uint64_t v16 = 1701736270;
  }
  os_log_type_t v23 = *(void **)(v0 + 160);
  uint64_t v25 = *(void *)(v0 + 96);
  uint64_t v24 = *(void *)(v0 + 104);
  uint64_t v26 = (void *)MEMORY[0x24C5B33F0](0xD00000000000001BLL, 0x8000000249E94BF0);
  os_log_type_t v27 = (void *)swift_allocObject();
  v27[2] = v16;
  v27[3] = v18;
  v27[4] = v21;
  v27[5] = v14;
  v27[6] = v25;
  v27[7] = v24;
  v27[8] = v23;
  *(void *)(v0 + 48) = _s8CipherML9TelemetryO19reportErrorToServer7useCase10identifier6method5errorySS_SSSgSSs0E0_ptFZSDySSSo8NSObjectCGSgycfU_TA_0;
  *(void *)(v0 + 56) = v27;
  *(void *)(v0 + 16) = MEMORY[0x263EF8330];
  *(void *)(v0 + 24) = 1107296256;
  *(void *)(v0 + 32) = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
  *(void *)(v0 + 40) = &block_descriptor_673;
  uint64_t v28 = _Block_copy((const void *)(v0 + 16));
  swift_bridgeObjectRetain();
  id v29 = v23;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v28);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  specialized static CipherMLError.makeErrorConformToSecureCoding(error:)(v23);
  swift_willThrow();

  uint64_t v30 = *(uint64_t (**)(void))(v0 + 8);
  return v30();
}

uint64_t partial apply for closure #1 in XPCHandler.requestData(byLatitude:longitude:clientConfig:)()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return MEMORY[0x270FA2498](closure #1 in XPCHandler.requestData(by:clientConfig:), 0, 0);
}

uint64_t partial apply for closure #1 in XPCHandler.removedCachedEntries(byKeywords:clientConfig:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(v2 + 32);
  uint64_t v6 = swift_task_alloc();
  long long v7 = *(_OWORD *)(v2 + 16);
  *(void *)(v3 + 16) = v6;
  *(void *)uint64_t v6 = v3;
  *(void *)(v6 + 8) = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  *(void *)(v6 + 40) = v5;
  *(_OWORD *)(v6 + 24) = v7;
  *(void *)(v6 + 16) = a2;
  return MEMORY[0x270FA2498](closure #1 in XPCHandler.removedCachedEntries(byKeywords:clientConfig:), 0, 0);
}

uint64_t partial apply for closure #1 in XPCHandler.setPIRConfig(_:clientConfig:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = swift_task_alloc();
  long long v7 = *(_OWORD *)(v2 + 16);
  *(void *)(v3 + 16) = v6;
  *(void *)uint64_t v6 = v3;
  *(void *)(v6 + 8) = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  *(_OWORD *)(v6 + 32) = v7;
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  return MEMORY[0x270FA2498](closure #1 in XPCHandler.setPIRConfig(_:clientConfig:), 0, 0);
}

uint64_t partial apply for closure #1 in XPCHandler.generateEvaluationKey(_:clientConfig:)(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v8;
  *uint64_t v8 = v3;
  v8[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return closure #1 in XPCHandler.generateEvaluationKey(_:clientConfig:)(a1, a2, v7, v6);
}

uint64_t partial apply for closure #1 in XPCHandler.constructPIRRequest(with:clientConfig:)()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return MEMORY[0x270FA2498](closure #1 in XPCHandler.constructPIRRequest(withLatitude:longitude:clientConfig:), 0, 0);
}

uint64_t partial apply for closure #1 in XPCHandler.constructPIRBatchRequest(withIndices:clientConfig:)()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return MEMORY[0x270FA2498](closure #1 in XPCHandler.constructPIRRequest(withLatitude:longitude:clientConfig:), 0, 0);
}

uint64_t partial apply for closure #1 in XPCHandler.decryptPIRResponse(_:index:clientConfig:)()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return MEMORY[0x270FA2498](closure #1 in XPCHandler.requestData(by:clientConfig:), 0, 0);
}

uint64_t partial apply for closure #1 in XPCHandler.decryptPIRBatchResponse(_:indices:clientConfig:)()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return MEMORY[0x270FA2498](closure #1 in XPCHandler.constructPIRRequest(withLatitude:longitude:clientConfig:), 0, 0);
}

uint64_t partial apply for closure #1 in XPCHandler.constructPIRRequest(withKeyword:withEvaluationKey:shardId:pirConfig:clientConfig:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(v2 + 16);
  uint64_t v7 = *(void *)(v2 + 24);
  uint64_t v8 = *(void *)(v2 + 32);
  char v9 = *(unsigned char *)(v2 + 40);
  uint64_t v10 = *(void *)(v2 + 48);
  uint64_t v11 = *(void *)(v2 + 56);
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v12;
  void *v12 = v3;
  v12[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return closure #1 in XPCHandler.constructPIRRequest(withKeyword:withEvaluationKey:shardId:pirConfig:clientConfig:)(a1, a2, v6, v7, v8, v9, v10, v11);
}

uint64_t partial apply for closure #1 in XPCHandler.constructPIRBatchRequest(withKeywords:shardIds:clientConfig:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(v2 + 32);
  uint64_t v7 = swift_task_alloc();
  long long v8 = *(_OWORD *)(v2 + 16);
  *(void *)(v3 + 16) = v7;
  *(void *)uint64_t v7 = v3;
  *(void *)(v7 + 8) = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  *(void *)(v7 + 48) = v6;
  *(_OWORD *)(v7 + 32) = v8;
  *(void *)(v7 + 16) = a1;
  *(void *)(v7 + 24) = a2;
  return MEMORY[0x270FA2498](closure #1 in XPCHandler.constructPIRBatchRequest(withKeywords:shardIds:clientConfig:), 0, 0);
}

uint64_t partial apply for closure #1 in XPCHandler.decryptPIRResponse(_:keyword:shardId:clientConfig:)(uint64_t a1, uint64_t a2)
{
  long long v10 = *(_OWORD *)(v2 + 32);
  long long v11 = *(_OWORD *)(v2 + 16);
  long long v9 = *(_OWORD *)(v2 + 48);
  uint64_t v6 = *(void *)(v2 + 64);
  uint64_t v7 = swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *(void *)uint64_t v7 = v3;
  *(void *)(v7 + 80) = v6;
  *(_OWORD *)(v7 + 48) = v10;
  *(_OWORD *)(v7 + 64) = v9;
  *(_OWORD *)(v7 + 32) = v11;
  *(void *)(v7 + 16) = a1;
  *(void *)(v7 + 24) = a2;
  *(void *)(v7 + 8) = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return MEMORY[0x270FA2498](closure #1 in XPCHandler.decryptPIRResponse(_:keyword:shardId:clientConfig:), 0, 0);
}

uint64_t partial apply for closure #1 in XPCHandler.decryptPIRBatchResponse(_:keywords:clientConfig:)(uint64_t a1, uint64_t a2)
{
  long long v10 = *(_OWORD *)(v2 + 16);
  uint64_t v7 = *(void *)(v2 + 32);
  uint64_t v6 = *(void *)(v2 + 40);
  uint64_t v8 = swift_task_alloc();
  *(void *)(v3 + 16) = v8;
  *(void *)uint64_t v8 = v3;
  *(void *)(v8 + 48) = v7;
  *(void *)(v8 + 56) = v6;
  *(_OWORD *)(v8 + 32) = v10;
  *(void *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = a2;
  *(void *)(v8 + 8) = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return MEMORY[0x270FA2498](closure #1 in XPCHandler.decryptPIRBatchResponse(_:keywords:clientConfig:), 0, 0);
}

uint64_t partial apply for closure #1 in XPCHandler.constructPIRRequest(withLatitude:longitude:clientConfig:)()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return MEMORY[0x270FA2498](closure #1 in XPCHandler.constructPIRRequest(withLatitude:longitude:clientConfig:), 0, 0);
}

uint64_t partial apply for closure #1 in XPCHandler.decryptPIRResponse(_:latitude:longitude:clientConfig:)()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return MEMORY[0x270FA2498](closure #1 in XPCHandler.requestData(by:clientConfig:), 0, 0);
}

uint64_t partial apply for closure #1 in XPCHandler.asyncResponseData(byKeywords:clientConfig:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = swift_task_alloc();
  long long v7 = *(_OWORD *)(v2 + 16);
  *(void *)(v3 + 16) = v6;
  *(void *)uint64_t v6 = v3;
  *(void *)(v6 + 8) = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  *(_OWORD *)(v6 + 32) = v7;
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  return MEMORY[0x270FA2498](closure #1 in XPCHandler.asyncResponseData(byKeywords:clientConfig:), 0, 0);
}

uint64_t _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A0LL12clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFSS_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm33LL12clientConfig6method4bodyxSo09R75O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_SS_TG5AcjA14RequestContextVyAA0V13PIRParametersVGxs0E0_pRi_zRi0_zlySSIsgHnrzo_Tf1nncn_nTf4nndggg_n(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[16] = a6;
  v7[17] = a7;
  v7[14] = a4;
  v7[15] = a5;
  v7[12] = a2;
  v7[13] = a3;
  v7[11] = a1;
  return MEMORY[0x270FA2498](_s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A012clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFSS_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm3312clientConfig6method4bodyxSo09R75O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_SS_TG5AcjA14RequestContextVyAA0V13PIRParametersVGxs0E0_pRi_zRi0_zlySSIsgHnrzo_Tf1nncn_nTf4nndggg_nTY0_, 0, 0);
}

uint64_t _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A0LL12clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFSS_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm33LL12clientConfig6method4bodyxSo09R75O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_SS_TG5AcjA14RequestContextVyAA0V13PIRParametersVGxs0E0_pRi_zRi0_zlySSIsgHnrzo_Tf1nncn_nTf4nndggg_nTY0_()
{
  uint64_t v16 = v0;
  if (one-time initialization token for framework != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[18] = __swift_project_value_buffer(v1, (uint64_t)static Logger.framework);
  swift_bridgeObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  unint64_t v5 = v0[13];
  if (v4)
  {
    uint64_t v6 = v0[12];
    long long v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    uint64_t v15 = v8;
    *(_DWORD *)long long v7 = 136446210;
    swift_bridgeObjectRetain();
    v0[10] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v5, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_249C3F000, v2, v3, "%{public}s method was called", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5B4790](v8, -1, -1);
    MEMORY[0x24C5B4790](v7, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v9 = (void *)swift_task_alloc();
  v0[19] = v9;
  *uint64_t v9 = v0;
  v9[1] = _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A012clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFSS_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm3312clientConfig6method4bodyxSo09R75O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_SS_TG5AcjA14RequestContextVyAA0V13PIRParametersVGxs0E0_pRi_zRi0_zlySSIsgHnrzo_Tf1nncn_nTf4nndggg_nTQ1_;
  uint64_t v10 = v0[16];
  uint64_t v11 = v0[17];
  uint64_t v13 = v0[14];
  uint64_t v12 = v0[15];
  return specialized closure #1 in XPCHandler.withStaticPIRConfig<A>(clientConfig:method:body:)(v13, v12, v10, v11);
}

uint64_t _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A0LL12clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFSS_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm33LL12clientConfig6method4bodyxSo09R75O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_SS_TG5AcjA14RequestContextVyAA0V13PIRParametersVGxs0E0_pRi_zRi0_zlySSIsgHnrzo_Tf1nncn_nTf4nndggg_nTQ1_(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  *(void *)(v6 + 160) = v2;
  swift_task_dealloc();
  if (v2)
  {
    return MEMORY[0x270FA2498](_s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A012clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFSS_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm3312clientConfig6method4bodyxSo09R75O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_SS_TG5AcjA14RequestContextVyAA0V13PIRParametersVGxs0E0_pRi_zRi0_zlySSIsgHnrzo_Tf1nncn_nTf4nndggg_nTY2_, 0, 0);
  }
  else
  {
    long long v7 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
    return v7(a1, a2);
  }
}

uint64_t _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A0LL12clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFSS_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm33LL12clientConfig6method4bodyxSo09R75O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_SS_TG5AcjA14RequestContextVyAA0V13PIRParametersVGxs0E0_pRi_zRi0_zlySSIsgHnrzo_Tf1nncn_nTf4nndggg_nTY2_()
{
  uint64_t v34 = v0;
  uint64_t v1 = *(void **)(v0 + 160);
  swift_bridgeObjectRetain();
  id v2 = v1;
  swift_bridgeObjectRetain();
  id v3 = v1;
  BOOL v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = *(void **)(v0 + 160);
    uint64_t v8 = *(void *)(v0 + 96);
    unint64_t v7 = *(void *)(v0 + 104);
    uint64_t v9 = swift_slowAlloc();
    uint64_t v10 = (void *)swift_slowAlloc();
    uint64_t v32 = swift_slowAlloc();
    uint64_t v33 = v32;
    *(_DWORD *)uint64_t v9 = 136446466;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v7, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v9 + 12) = 2114;
    id v11 = v6;
    uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 72) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v10 = v12;

    _os_log_impl(&dword_249C3F000, v4, v5, "%{public}s threw an error: %{public}@", (uint8_t *)v9, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x24C5B4790](v10, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x24C5B4790](v32, -1, -1);
    MEMORY[0x24C5B4790](v9, -1, -1);
  }
  else
  {
    uint64_t v13 = *(void **)(v0 + 160);
    swift_bridgeObjectRelease_n();
  }
  uint64_t v14 = *(void **)(v0 + 88);
  if (v14)
  {
    id v15 = objc_msgSend(*(id *)(v0 + 88), sel_useCase);
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v18 = v17;

    id v19 = objc_msgSend(v14, sel_sourceApplicationBundleIdentifier);
    if (v19)
    {
      char v20 = v19;
      uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v14 = v22;
    }
    else
    {
      uint64_t v21 = 0;
      uint64_t v14 = 0;
    }
  }
  else
  {
    uint64_t v21 = 0;
    unint64_t v18 = 0xE400000000000000;
    uint64_t v16 = 1701736270;
  }
  os_log_type_t v23 = *(void **)(v0 + 160);
  uint64_t v25 = *(void *)(v0 + 96);
  uint64_t v24 = *(void *)(v0 + 104);
  uint64_t v26 = (void *)MEMORY[0x24C5B33F0](0xD00000000000001BLL, 0x8000000249E94BF0);
  os_log_type_t v27 = (void *)swift_allocObject();
  v27[2] = v16;
  v27[3] = v18;
  v27[4] = v21;
  v27[5] = v14;
  v27[6] = v25;
  v27[7] = v24;
  v27[8] = v23;
  *(void *)(v0 + 48) = _s8CipherML9TelemetryO19reportErrorToServer7useCase10identifier6method5errorySS_SSSgSSs0E0_ptFZSDySSSo8NSObjectCGSgycfU_TA_0;
  *(void *)(v0 + 56) = v27;
  *(void *)(v0 + 16) = MEMORY[0x263EF8330];
  *(void *)(v0 + 24) = 1107296256;
  *(void *)(v0 + 32) = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
  *(void *)(v0 + 40) = &block_descriptor_624;
  uint64_t v28 = _Block_copy((const void *)(v0 + 16));
  swift_bridgeObjectRetain();
  id v29 = v23;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v28);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  specialized static CipherMLError.makeErrorConformToSecureCoding(error:)(v23);
  swift_willThrow();

  uint64_t v30 = *(uint64_t (**)(void))(v0 + 8);
  return v30();
}

uint64_t partial apply for closure #1 in XPCHandler.similarityScores(forElements:shardIndices:clientConfig:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(v2 + 32);
  uint64_t v7 = swift_task_alloc();
  long long v8 = *(_OWORD *)(v2 + 16);
  *(void *)(v3 + 16) = v7;
  *(void *)uint64_t v7 = v3;
  *(void *)(v7 + 8) = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  *(void *)(v7 + 56) = v6;
  *(_OWORD *)(v7 + 40) = v8;
  *(void *)(v7 + 24) = a1;
  *(void *)(v7 + 32) = a2;
  return MEMORY[0x270FA2498](closure #1 in XPCHandler.similarityScores(forElements:shardIndices:clientConfig:), 0, 0);
}

uint64_t _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A0LL12clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFSaySaySo18CMLSimilarityScoreCGG_Tg503_s8a4ML10c34C19withStaticPECConfig33_673275016ghijklm33LL12clientConfig6method4bodyxSo09r79O0C_SSxAA14RequestContextVyAA0E13PECParametersVGYaKXEtYaKlFxyYaKXEfU_SaySaySo18sT7CGG_TG5AcjA14RequestContextVyAA0X13PECParametersVGxs0E0_pRi_zRi0_zlyAOIsgHnrzo_Tf1nncn_nTf4nndggg_n(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[16] = a6;
  v7[17] = a7;
  v7[14] = a4;
  v7[15] = a5;
  v7[12] = a2;
  v7[13] = a3;
  v7[11] = a1;
  return MEMORY[0x270FA2498](_s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A012clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFSaySaySo18CMLSimilarityScoreCGG_Tg503_s8a4ML10c34C19withStaticPECConfig33_673275016ghijklm3312clientConfig6method4bodyxSo09r79O0C_SSxAA14RequestContextVyAA0E13PECParametersVGYaKXEtYaKlFxyYaKXEfU_SaySaySo18sT7CGG_TG5AcjA14RequestContextVyAA0X13PECParametersVGxs0E0_pRi_zRi0_zlyAOIsgHnrzo_Tf1nncn_nTf4nndggg_nTY0_, 0, 0);
}

uint64_t _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A0LL12clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFSaySaySo18CMLSimilarityScoreCGG_Tg503_s8a4ML10c34C19withStaticPECConfig33_673275016ghijklm33LL12clientConfig6method4bodyxSo09r79O0C_SSxAA14RequestContextVyAA0E13PECParametersVGYaKXEtYaKlFxyYaKXEfU_SaySaySo18sT7CGG_TG5AcjA14RequestContextVyAA0X13PECParametersVGxs0E0_pRi_zRi0_zlyAOIsgHnrzo_Tf1nncn_nTf4nndggg_nTY0_()
{
  uint64_t v16 = v0;
  if (one-time initialization token for framework != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[18] = __swift_project_value_buffer(v1, (uint64_t)static Logger.framework);
  swift_bridgeObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  unint64_t v5 = v0[13];
  if (v4)
  {
    uint64_t v6 = v0[12];
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    uint64_t v15 = v8;
    *(_DWORD *)uint64_t v7 = 136446210;
    swift_bridgeObjectRetain();
    v0[10] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v5, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_249C3F000, v2, v3, "%{public}s method was called", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5B4790](v8, -1, -1);
    MEMORY[0x24C5B4790](v7, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v9 = (void *)swift_task_alloc();
  v0[19] = v9;
  *uint64_t v9 = v0;
  v9[1] = _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A012clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFSaySaySo18CMLSimilarityScoreCGG_Tg503_s8a4ML10c34C19withStaticPECConfig33_673275016ghijklm3312clientConfig6method4bodyxSo09r79O0C_SSxAA14RequestContextVyAA0E13PECParametersVGYaKXEtYaKlFxyYaKXEfU_SaySaySo18sT7CGG_TG5AcjA14RequestContextVyAA0X13PECParametersVGxs0E0_pRi_zRi0_zlyAOIsgHnrzo_Tf1nncn_nTf4nndggg_nTQ1_;
  uint64_t v10 = v0[16];
  uint64_t v11 = v0[17];
  uint64_t v13 = v0[14];
  uint64_t v12 = v0[15];
  return specialized closure #1 in XPCHandler.withStaticPECConfig<A>(clientConfig:method:body:)(v13, v12, v10, v11);
}

uint64_t _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A0LL12clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFSaySaySo18CMLSimilarityScoreCGG_Tg503_s8a4ML10c34C19withStaticPECConfig33_673275016ghijklm33LL12clientConfig6method4bodyxSo09r79O0C_SSxAA14RequestContextVyAA0E13PECParametersVGYaKXEtYaKlFxyYaKXEfU_SaySaySo18sT7CGG_TG5AcjA14RequestContextVyAA0X13PECParametersVGxs0E0_pRi_zRi0_zlyAOIsgHnrzo_Tf1nncn_nTf4nndggg_nTQ1_(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(v4 + 160) = v1;
  swift_task_dealloc();
  if (v1)
  {
    return MEMORY[0x270FA2498](_s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A012clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFSaySaySo18CMLSimilarityScoreCGG_Tg503_s8a4ML10c34C19withStaticPECConfig33_673275016ghijklm3312clientConfig6method4bodyxSo09r79O0C_SSxAA14RequestContextVyAA0E13PECParametersVGYaKXEtYaKlFxyYaKXEfU_SaySaySo18sT7CGG_TG5AcjA14RequestContextVyAA0X13PECParametersVGxs0E0_pRi_zRi0_zlyAOIsgHnrzo_Tf1nncn_nTf4nndggg_nTY2_, 0, 0);
  }
  else
  {
    unint64_t v5 = *(uint64_t (**)(uint64_t))(v4 + 8);
    return v5(a1);
  }
}

uint64_t _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A0LL12clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFSaySaySo18CMLSimilarityScoreCGG_Tg503_s8a4ML10c34C19withStaticPECConfig33_673275016ghijklm33LL12clientConfig6method4bodyxSo09r79O0C_SSxAA14RequestContextVyAA0E13PECParametersVGYaKXEtYaKlFxyYaKXEfU_SaySaySo18sT7CGG_TG5AcjA14RequestContextVyAA0X13PECParametersVGxs0E0_pRi_zRi0_zlyAOIsgHnrzo_Tf1nncn_nTf4nndggg_nTY2_()
{
  uint64_t v34 = v0;
  uint64_t v1 = *(void **)(v0 + 160);
  swift_bridgeObjectRetain();
  id v2 = v1;
  swift_bridgeObjectRetain();
  id v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = *(void **)(v0 + 160);
    uint64_t v8 = *(void *)(v0 + 96);
    unint64_t v7 = *(void *)(v0 + 104);
    uint64_t v9 = swift_slowAlloc();
    uint64_t v10 = (void *)swift_slowAlloc();
    uint64_t v32 = swift_slowAlloc();
    uint64_t v33 = v32;
    *(_DWORD *)uint64_t v9 = 136446466;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v7, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v9 + 12) = 2114;
    id v11 = v6;
    uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 72) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v10 = v12;

    _os_log_impl(&dword_249C3F000, v4, v5, "%{public}s threw an error: %{public}@", (uint8_t *)v9, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x24C5B4790](v10, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x24C5B4790](v32, -1, -1);
    MEMORY[0x24C5B4790](v9, -1, -1);
  }
  else
  {
    uint64_t v13 = *(void **)(v0 + 160);
    swift_bridgeObjectRelease_n();
  }
  uint64_t v14 = *(void **)(v0 + 88);
  if (v14)
  {
    id v15 = objc_msgSend(*(id *)(v0 + 88), sel_useCase);
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v18 = v17;

    id v19 = objc_msgSend(v14, sel_sourceApplicationBundleIdentifier);
    if (v19)
    {
      char v20 = v19;
      uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v14 = v22;
    }
    else
    {
      uint64_t v21 = 0;
      uint64_t v14 = 0;
    }
  }
  else
  {
    uint64_t v21 = 0;
    unint64_t v18 = 0xE400000000000000;
    uint64_t v16 = 1701736270;
  }
  os_log_type_t v23 = *(void **)(v0 + 160);
  uint64_t v25 = *(void *)(v0 + 96);
  uint64_t v24 = *(void *)(v0 + 104);
  uint64_t v26 = (void *)MEMORY[0x24C5B33F0](0xD00000000000001BLL, 0x8000000249E94BF0);
  os_log_type_t v27 = (void *)swift_allocObject();
  v27[2] = v16;
  v27[3] = v18;
  v27[4] = v21;
  v27[5] = v14;
  v27[6] = v25;
  v27[7] = v24;
  v27[8] = v23;
  *(void *)(v0 + 48) = _s8CipherML9TelemetryO19reportErrorToServer7useCase10identifier6method5errorySS_SSSgSSs0E0_ptFZSDySSSo8NSObjectCGSgycfU_TA_0;
  *(void *)(v0 + 56) = v27;
  *(void *)(v0 + 16) = MEMORY[0x263EF8330];
  *(void *)(v0 + 24) = 1107296256;
  *(void *)(v0 + 32) = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
  *(void *)(v0 + 40) = &block_descriptor_611;
  uint64_t v28 = _Block_copy((const void *)(v0 + 16));
  swift_bridgeObjectRetain();
  id v29 = v23;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v28);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  specialized static CipherMLError.makeErrorConformToSecureCoding(error:)(v23);
  swift_willThrow();

  uint64_t v30 = *(uint64_t (**)(void))(v0 + 8);
  return v30();
}

uint64_t partial apply for closure #1 in XPCHandler.setPECConfig(_:clientConfig:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = swift_task_alloc();
  long long v7 = *(_OWORD *)(v2 + 16);
  *(void *)(v3 + 16) = v6;
  *(void *)uint64_t v6 = v3;
  *(void *)(v6 + 8) = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  *(_OWORD *)(v6 + 32) = v7;
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  return MEMORY[0x270FA2498](closure #1 in XPCHandler.setPECConfig(_:clientConfig:), 0, 0);
}

uint64_t partial apply for closure #1 in XPCHandler.encryptBatch(ofElements:shardIndices:clientConfig:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(v2 + 32);
  uint64_t v7 = swift_task_alloc();
  long long v8 = *(_OWORD *)(v2 + 16);
  *(void *)(v3 + 16) = v7;
  *(void *)uint64_t v7 = v3;
  *(void *)(v7 + 8) = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  *(void *)(v7 + 56) = v6;
  *(_OWORD *)(v7 + 40) = v8;
  *(void *)(v7 + 24) = a1;
  *(void *)(v7 + 32) = a2;
  return MEMORY[0x270FA2498](closure #1 in XPCHandler.encryptBatch(ofElements:shardIndices:clientConfig:), 0, 0);
}

uint64_t partial apply for closure #1 in XPCHandler.encryptDifferentiallyPrivateFakes(_:shardIndex:shardCount:pecConfig:clientConfig:)(uint64_t a1, uint64_t a2)
{
  long long v10 = *(_OWORD *)(v2 + 32);
  uint64_t v6 = *(void *)(v2 + 48);
  uint64_t v7 = swift_task_alloc();
  long long v8 = *(_OWORD *)(v2 + 16);
  *(void *)(v3 + 16) = v7;
  *(void *)uint64_t v7 = v3;
  *(void *)(v7 + 8) = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  *(void *)(v7 + 64) = v6;
  *(_OWORD *)(v7 + 32) = v8;
  *(_OWORD *)(v7 + 48) = v10;
  *(void *)(v7 + 16) = a1;
  *(void *)(v7 + 24) = a2;
  return MEMORY[0x270FA2498](closure #1 in XPCHandler.encryptDifferentiallyPrivateFakes(_:shardIndex:shardCount:pecConfig:clientConfig:), 0, 0);
}

uint64_t _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A0LL12clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFSay10Foundation4DataVG_Tg503_s8a4ML10c34C19withStaticPECConfig33_673275016ghijklm33LL12clientConfig6method4bodyxSo09r85O0C_SSxAA14RequestContextVyAA0E13PECParametersVGYaKXEtYaKlFxyYaKXEfU_Say10Foundation4T6VG_TG5AcjA14RequestContextVyAA0X13PECParametersVGxs0E0_pRi_zRi0_zlyAOIsgHnrzo_Tf1nncn_nTf4nndggg_n(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[16] = a6;
  v7[17] = a7;
  v7[14] = a4;
  v7[15] = a5;
  v7[12] = a2;
  v7[13] = a3;
  v7[11] = a1;
  return MEMORY[0x270FA2498](_s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A012clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFSay10Foundation4DataVG_Tg503_s8a4ML10c34C19withStaticPECConfig33_673275016ghijklm3312clientConfig6method4bodyxSo09r85O0C_SSxAA14RequestContextVyAA0E13PECParametersVGYaKXEtYaKlFxyYaKXEfU_Say10Foundation4T6VG_TG5AcjA14RequestContextVyAA0X13PECParametersVGxs0E0_pRi_zRi0_zlyAOIsgHnrzo_Tf1nncn_nTf4nndggg_nTY0_, 0, 0);
}

uint64_t _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A0LL12clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFSay10Foundation4DataVG_Tg503_s8a4ML10c34C19withStaticPECConfig33_673275016ghijklm33LL12clientConfig6method4bodyxSo09r85O0C_SSxAA14RequestContextVyAA0E13PECParametersVGYaKXEtYaKlFxyYaKXEfU_Say10Foundation4T6VG_TG5AcjA14RequestContextVyAA0X13PECParametersVGxs0E0_pRi_zRi0_zlyAOIsgHnrzo_Tf1nncn_nTf4nndggg_nTY0_()
{
  uint64_t v16 = v0;
  if (one-time initialization token for framework != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[18] = __swift_project_value_buffer(v1, (uint64_t)static Logger.framework);
  swift_bridgeObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  unint64_t v5 = v0[13];
  if (v4)
  {
    uint64_t v6 = v0[12];
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    uint64_t v15 = v8;
    *(_DWORD *)uint64_t v7 = 136446210;
    swift_bridgeObjectRetain();
    v0[10] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v5, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_249C3F000, v2, v3, "%{public}s method was called", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5B4790](v8, -1, -1);
    MEMORY[0x24C5B4790](v7, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v9 = (void *)swift_task_alloc();
  v0[19] = v9;
  *uint64_t v9 = v0;
  v9[1] = _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A012clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFSay10Foundation4DataVG_Tg503_s8a4ML10c34C19withStaticPECConfig33_673275016ghijklm3312clientConfig6method4bodyxSo09r85O0C_SSxAA14RequestContextVyAA0E13PECParametersVGYaKXEtYaKlFxyYaKXEfU_Say10Foundation4T6VG_TG5AcjA14RequestContextVyAA0X13PECParametersVGxs0E0_pRi_zRi0_zlyAOIsgHnrzo_Tf1nncn_nTf4nndggg_nTQ1_;
  uint64_t v10 = v0[16];
  uint64_t v11 = v0[17];
  uint64_t v13 = v0[14];
  uint64_t v12 = v0[15];
  return specialized closure #1 in XPCHandler.withStaticPECConfig<A>(clientConfig:method:body:)(v13, v12, v10, v11);
}

uint64_t _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A0LL12clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFSay10Foundation4DataVG_Tg503_s8a4ML10c34C19withStaticPECConfig33_673275016ghijklm33LL12clientConfig6method4bodyxSo09r85O0C_SSxAA14RequestContextVyAA0E13PECParametersVGYaKXEtYaKlFxyYaKXEfU_Say10Foundation4T6VG_TG5AcjA14RequestContextVyAA0X13PECParametersVGxs0E0_pRi_zRi0_zlyAOIsgHnrzo_Tf1nncn_nTf4nndggg_nTQ1_(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(v4 + 160) = v1;
  swift_task_dealloc();
  if (v1)
  {
    return MEMORY[0x270FA2498](_s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A012clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFSay10Foundation4DataVG_Tg503_s8a4ML10c34C19withStaticPECConfig33_673275016ghijklm3312clientConfig6method4bodyxSo09r85O0C_SSxAA14RequestContextVyAA0E13PECParametersVGYaKXEtYaKlFxyYaKXEfU_Say10Foundation4T6VG_TG5AcjA14RequestContextVyAA0X13PECParametersVGxs0E0_pRi_zRi0_zlyAOIsgHnrzo_Tf1nncn_nTf4nndggg_nTY2_, 0, 0);
  }
  else
  {
    unint64_t v5 = *(uint64_t (**)(uint64_t))(v4 + 8);
    return v5(a1);
  }
}

uint64_t _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A0LL12clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFSay10Foundation4DataVG_Tg503_s8a4ML10c34C19withStaticPECConfig33_673275016ghijklm33LL12clientConfig6method4bodyxSo09r85O0C_SSxAA14RequestContextVyAA0E13PECParametersVGYaKXEtYaKlFxyYaKXEfU_Say10Foundation4T6VG_TG5AcjA14RequestContextVyAA0X13PECParametersVGxs0E0_pRi_zRi0_zlyAOIsgHnrzo_Tf1nncn_nTf4nndggg_nTY2_()
{
  uint64_t v34 = v0;
  uint64_t v1 = *(void **)(v0 + 160);
  swift_bridgeObjectRetain();
  id v2 = v1;
  swift_bridgeObjectRetain();
  id v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = *(void **)(v0 + 160);
    uint64_t v8 = *(void *)(v0 + 96);
    unint64_t v7 = *(void *)(v0 + 104);
    uint64_t v9 = swift_slowAlloc();
    uint64_t v10 = (void *)swift_slowAlloc();
    uint64_t v32 = swift_slowAlloc();
    uint64_t v33 = v32;
    *(_DWORD *)uint64_t v9 = 136446466;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v7, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v9 + 12) = 2114;
    id v11 = v6;
    uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 72) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v10 = v12;

    _os_log_impl(&dword_249C3F000, v4, v5, "%{public}s threw an error: %{public}@", (uint8_t *)v9, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x24C5B4790](v10, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x24C5B4790](v32, -1, -1);
    MEMORY[0x24C5B4790](v9, -1, -1);
  }
  else
  {
    uint64_t v13 = *(void **)(v0 + 160);
    swift_bridgeObjectRelease_n();
  }
  uint64_t v14 = *(void **)(v0 + 88);
  if (v14)
  {
    id v15 = objc_msgSend(*(id *)(v0 + 88), sel_useCase);
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v18 = v17;

    id v19 = objc_msgSend(v14, sel_sourceApplicationBundleIdentifier);
    if (v19)
    {
      char v20 = v19;
      uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v14 = v22;
    }
    else
    {
      uint64_t v21 = 0;
      uint64_t v14 = 0;
    }
  }
  else
  {
    uint64_t v21 = 0;
    unint64_t v18 = 0xE400000000000000;
    uint64_t v16 = 1701736270;
  }
  os_log_type_t v23 = *(void **)(v0 + 160);
  uint64_t v25 = *(void *)(v0 + 96);
  uint64_t v24 = *(void *)(v0 + 104);
  uint64_t v26 = (void *)MEMORY[0x24C5B33F0](0xD00000000000001BLL, 0x8000000249E94BF0);
  os_log_type_t v27 = (void *)swift_allocObject();
  v27[2] = v16;
  v27[3] = v18;
  v27[4] = v21;
  v27[5] = v14;
  v27[6] = v25;
  v27[7] = v24;
  v27[8] = v23;
  *(void *)(v0 + 48) = _s8CipherML9TelemetryO19reportErrorToServer7useCase10identifier6method5errorySS_SSSgSSs0E0_ptFZSDySSSo8NSObjectCGSgycfU_TA_0;
  *(void *)(v0 + 56) = v27;
  *(void *)(v0 + 16) = MEMORY[0x263EF8330];
  *(void *)(v0 + 24) = 1107296256;
  *(void *)(v0 + 32) = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
  *(void *)(v0 + 40) = &block_descriptor_572;
  uint64_t v28 = _Block_copy((const void *)(v0 + 16));
  swift_bridgeObjectRetain();
  id v29 = v23;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v28);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  specialized static CipherMLError.makeErrorConformToSecureCoding(error:)(v23);
  swift_willThrow();

  uint64_t v30 = *(uint64_t (**)(void))(v0 + 8);
  return v30();
}

uint64_t partial apply for closure #1 in XPCHandler.decryptBatch(ofSimilarityScores:clientConfig:)(uint64_t a1, uint64_t a2)
{
  long long v9 = *(_OWORD *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 32);
  uint64_t v7 = swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *(void *)uint64_t v7 = v3;
  *(void *)(v7 + 48) = v6;
  *(_OWORD *)(v7 + 32) = v9;
  *(void *)(v7 + 16) = a1;
  *(void *)(v7 + 24) = a2;
  *(void *)(v7 + 8) = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return MEMORY[0x270FA2498](closure #1 in XPCHandler.decryptBatch(ofSimilarityScores:clientConfig:), 0, 0);
}

uint64_t partial apply for closure #1 in XPCHandler.asyncResponseSimilarityScores(forElements:shardIndices:clientConfig:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(v2 + 32);
  uint64_t v7 = swift_task_alloc();
  long long v8 = *(_OWORD *)(v2 + 16);
  *(void *)(v3 + 16) = v7;
  *(void *)uint64_t v7 = v3;
  *(void *)(v7 + 8) = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  *(void *)(v7 + 56) = v6;
  *(_OWORD *)(v7 + 40) = v8;
  *(void *)(v7 + 24) = a1;
  *(void *)(v7 + 32) = a2;
  return MEMORY[0x270FA2498](closure #1 in XPCHandler.asyncResponseSimilarityScores(forElements:shardIndices:clientConfig:), 0, 0);
}

uint64_t _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A0LL12clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFSS_Tg503_s8a4ML10c34C19withStaticPECConfig33_673275016ghijklm33LL12clientConfig6method4bodyxSo09R75O0C_SSxAA14RequestContextVyAA0E13PECParametersVGYaKXEtYaKlFxyYaKXEfU_SS_TG5AcjA14RequestContextVyAA0V13PECParametersVGxs0E0_pRi_zRi0_zlySSIsgHnrzo_Tf1nncn_nTf4nndggg_n(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[16] = a6;
  v7[17] = a7;
  v7[14] = a4;
  v7[15] = a5;
  v7[12] = a2;
  v7[13] = a3;
  v7[11] = a1;
  return MEMORY[0x270FA2498](_s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A012clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFSS_Tg503_s8a4ML10c34C19withStaticPECConfig33_673275016ghijklm3312clientConfig6method4bodyxSo09R75O0C_SSxAA14RequestContextVyAA0E13PECParametersVGYaKXEtYaKlFxyYaKXEfU_SS_TG5AcjA14RequestContextVyAA0V13PECParametersVGxs0E0_pRi_zRi0_zlySSIsgHnrzo_Tf1nncn_nTf4nndggg_nTY0_, 0, 0);
}

uint64_t _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A0LL12clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFSS_Tg503_s8a4ML10c34C19withStaticPECConfig33_673275016ghijklm33LL12clientConfig6method4bodyxSo09R75O0C_SSxAA14RequestContextVyAA0E13PECParametersVGYaKXEtYaKlFxyYaKXEfU_SS_TG5AcjA14RequestContextVyAA0V13PECParametersVGxs0E0_pRi_zRi0_zlySSIsgHnrzo_Tf1nncn_nTf4nndggg_nTY0_()
{
  uint64_t v16 = v0;
  if (one-time initialization token for framework != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[18] = __swift_project_value_buffer(v1, (uint64_t)static Logger.framework);
  swift_bridgeObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  unint64_t v5 = v0[13];
  if (v4)
  {
    uint64_t v6 = v0[12];
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    uint64_t v15 = v8;
    *(_DWORD *)uint64_t v7 = 136446210;
    swift_bridgeObjectRetain();
    v0[10] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v5, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_249C3F000, v2, v3, "%{public}s method was called", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5B4790](v8, -1, -1);
    MEMORY[0x24C5B4790](v7, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  long long v9 = (void *)swift_task_alloc();
  v0[19] = v9;
  *long long v9 = v0;
  v9[1] = _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A012clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFSS_Tg503_s8a4ML10c34C19withStaticPECConfig33_673275016ghijklm3312clientConfig6method4bodyxSo09R75O0C_SSxAA14RequestContextVyAA0E13PECParametersVGYaKXEtYaKlFxyYaKXEfU_SS_TG5AcjA14RequestContextVyAA0V13PECParametersVGxs0E0_pRi_zRi0_zlySSIsgHnrzo_Tf1nncn_nTf4nndggg_nTQ1_;
  uint64_t v10 = v0[16];
  uint64_t v11 = v0[17];
  uint64_t v13 = v0[14];
  uint64_t v12 = v0[15];
  return specialized closure #1 in XPCHandler.withStaticPECConfig<A>(clientConfig:method:body:)(v13, v12, v10, v11);
}

uint64_t _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A0LL12clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFSS_Tg503_s8a4ML10c34C19withStaticPECConfig33_673275016ghijklm33LL12clientConfig6method4bodyxSo09R75O0C_SSxAA14RequestContextVyAA0E13PECParametersVGYaKXEtYaKlFxyYaKXEfU_SS_TG5AcjA14RequestContextVyAA0V13PECParametersVGxs0E0_pRi_zRi0_zlySSIsgHnrzo_Tf1nncn_nTf4nndggg_nTQ1_(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  *(void *)(v6 + 160) = v2;
  swift_task_dealloc();
  if (v2)
  {
    return MEMORY[0x270FA2498](_s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A012clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFSS_Tg503_s8a4ML10c34C19withStaticPECConfig33_673275016ghijklm3312clientConfig6method4bodyxSo09R75O0C_SSxAA14RequestContextVyAA0E13PECParametersVGYaKXEtYaKlFxyYaKXEfU_SS_TG5AcjA14RequestContextVyAA0V13PECParametersVGxs0E0_pRi_zRi0_zlySSIsgHnrzo_Tf1nncn_nTf4nndggg_nTY2_, 0, 0);
  }
  else
  {
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
    return v7(a1, a2);
  }
}

uint64_t _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A0LL12clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFSS_Tg503_s8a4ML10c34C19withStaticPECConfig33_673275016ghijklm33LL12clientConfig6method4bodyxSo09R75O0C_SSxAA14RequestContextVyAA0E13PECParametersVGYaKXEtYaKlFxyYaKXEfU_SS_TG5AcjA14RequestContextVyAA0V13PECParametersVGxs0E0_pRi_zRi0_zlySSIsgHnrzo_Tf1nncn_nTf4nndggg_nTY2_()
{
  uint64_t v34 = v0;
  uint64_t v1 = *(void **)(v0 + 160);
  swift_bridgeObjectRetain();
  id v2 = v1;
  swift_bridgeObjectRetain();
  id v3 = v1;
  BOOL v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = *(void **)(v0 + 160);
    uint64_t v8 = *(void *)(v0 + 96);
    unint64_t v7 = *(void *)(v0 + 104);
    uint64_t v9 = swift_slowAlloc();
    uint64_t v10 = (void *)swift_slowAlloc();
    uint64_t v32 = swift_slowAlloc();
    uint64_t v33 = v32;
    *(_DWORD *)uint64_t v9 = 136446466;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v7, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v9 + 12) = 2114;
    id v11 = v6;
    uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 72) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v10 = v12;

    _os_log_impl(&dword_249C3F000, v4, v5, "%{public}s threw an error: %{public}@", (uint8_t *)v9, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x24C5B4790](v10, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x24C5B4790](v32, -1, -1);
    MEMORY[0x24C5B4790](v9, -1, -1);
  }
  else
  {
    uint64_t v13 = *(void **)(v0 + 160);
    swift_bridgeObjectRelease_n();
  }
  uint64_t v14 = *(void **)(v0 + 88);
  if (v14)
  {
    id v15 = objc_msgSend(*(id *)(v0 + 88), sel_useCase);
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v18 = v17;

    id v19 = objc_msgSend(v14, sel_sourceApplicationBundleIdentifier);
    if (v19)
    {
      char v20 = v19;
      uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v14 = v22;
    }
    else
    {
      uint64_t v21 = 0;
      uint64_t v14 = 0;
    }
  }
  else
  {
    uint64_t v21 = 0;
    unint64_t v18 = 0xE400000000000000;
    uint64_t v16 = 1701736270;
  }
  os_log_type_t v23 = *(void **)(v0 + 160);
  uint64_t v25 = *(void *)(v0 + 96);
  uint64_t v24 = *(void *)(v0 + 104);
  uint64_t v26 = (void *)MEMORY[0x24C5B33F0](0xD00000000000001BLL, 0x8000000249E94BF0);
  os_log_type_t v27 = (void *)swift_allocObject();
  v27[2] = v16;
  v27[3] = v18;
  v27[4] = v21;
  v27[5] = v14;
  v27[6] = v25;
  v27[7] = v24;
  v27[8] = v23;
  *(void *)(v0 + 48) = _s8CipherML9TelemetryO19reportErrorToServer7useCase10identifier6method5errorySS_SSSgSSs0E0_ptFZSDySSSo8NSObjectCGSgycfU_TA_0;
  *(void *)(v0 + 56) = v27;
  *(void *)(v0 + 16) = MEMORY[0x263EF8330];
  *(void *)(v0 + 24) = 1107296256;
  *(void *)(v0 + 32) = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
  *(void *)(v0 + 40) = &block_descriptor_557;
  uint64_t v28 = _Block_copy((const void *)(v0 + 16));
  swift_bridgeObjectRetain();
  id v29 = v23;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v28);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  specialized static CipherMLError.makeErrorConformToSecureCoding(error:)(v23);
  swift_willThrow();

  uint64_t v30 = *(uint64_t (**)(void))(v0 + 8);
  return v30();
}

uint64_t specialized XPCHandler.withErrorReporting<A>(clientConfig:method:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[15] = a5;
  v6[16] = a6;
  v6[13] = a3;
  v6[14] = a4;
  v6[11] = a1;
  v6[12] = a2;
  return MEMORY[0x270FA2498](specialized XPCHandler.withErrorReporting<A>(clientConfig:method:body:), 0, 0);
}

uint64_t specialized XPCHandler.withErrorReporting<A>(clientConfig:method:body:)(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(v4 + 152) = v1;
  swift_task_dealloc();
  if (v1)
  {
    return MEMORY[0x270FA2498](specialized XPCHandler.withErrorReporting<A>(clientConfig:method:body:), 0, 0);
  }
  else
  {
    os_log_type_t v5 = *(uint64_t (**)(uint64_t))(v4 + 8);
    return v5(a1);
  }
}

uint64_t specialized XPCHandler.withErrorReporting<A>(clientConfig:method:body:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  return MEMORY[0x270FA2498](specialized XPCHandler.withErrorReporting<A>(clientConfig:method:body:), 0, 0);
}

uint64_t type metadata accessor for XPCHandler()
{
  return self;
}

uint64_t method lookup function for XPCHandler(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for XPCHandler);
}

uint64_t dispatch thunk of XPCHandler.__allocating_init(requestsManager:connection:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of XPCHandler.requestData(by:clientConfig:)(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(*(void *)v2 + 104) + **(int **)(*(void *)v2 + 104));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = dispatch thunk of XPCHandler.requestData(by:clientConfig:);
  return v8(a1, a2);
}

uint64_t dispatch thunk of XPCHandler.requestData(byIndices:clientConfig:)(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(*(void *)v2 + 112) + **(int **)(*(void *)v2 + 112));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = dispatch thunk of XPCHandler.requestData(byIndices:clientConfig:);
  return v8(a1, a2);
}

uint64_t dispatch thunk of XPCHandler.requestData(byKeywords:shardIds:clientConfig:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)v3 + 120)
                                                          + **(int **)(*(void *)v3 + 120));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  *uint64_t v8 = v4;
  v8[1] = dispatch thunk of XPCHandler.requestData(byIndices:clientConfig:);
  return v10(a1, a2, a3);
}

uint64_t dispatch thunk of XPCHandler.requestData(byLatitude:longitude:clientConfig:)(uint64_t a1, double a2, double a3)
{
  uint64_t v12 = (uint64_t (*)(uint64_t, __n128, __n128))(*(void *)(*(void *)v3 + 128)
                                                        + **(int **)(*(void *)v3 + 128));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  *uint64_t v8 = v4;
  v8[1] = dispatch thunk of XPCHandler.requestData(byLatitude:longitude:clientConfig:);
  v9.n128_f64[0] = a2;
  v10.n128_f64[0] = a3;
  return v12(a1, v9, v10);
}

uint64_t dispatch thunk of XPCHandler.requestData(byLatitude:longitude:clientConfig:)(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *v2;
  swift_task_dealloc();
  os_log_type_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8);
  return v5(a1, a2);
}

uint64_t dispatch thunk of XPCHandler.removedCachedEntries(byKeywords:clientConfig:)(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(*(void *)v2 + 136) + **(int **)(*(void *)v2 + 136));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = dispatch thunk of XPCHandler.requestData(byIndices:clientConfig:);
  return v8(a1, a2);
}

uint64_t dispatch thunk of XPCHandler.setPIRConfig(_:clientConfig:)(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(*(void *)v2 + 144) + **(int **)(*(void *)v2 + 144));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = dispatch thunk of XPCHandler.requestData(by:clientConfig:);
  return v8(a1, a2);
}

uint64_t dispatch thunk of XPCHandler.generateEvaluationKey(_:clientConfig:)(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(*(void *)v2 + 152) + **(int **)(*(void *)v2 + 152));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = dispatch thunk of XPCHandler.requestData(by:clientConfig:);
  return v8(a1, a2);
}

uint64_t dispatch thunk of XPCHandler.constructPIRRequest(with:clientConfig:)(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(*(void *)v2 + 160) + **(int **)(*(void *)v2 + 160));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = dispatch thunk of XPCHandler.requestData(by:clientConfig:);
  return v8(a1, a2);
}

uint64_t dispatch thunk of XPCHandler.constructPIRBatchRequest(withIndices:clientConfig:)(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(*(void *)v2 + 168) + **(int **)(*(void *)v2 + 168));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = dispatch thunk of XPCHandler.requestData(by:clientConfig:);
  return v8(a1, a2);
}

uint64_t dispatch thunk of XPCHandler.decryptPIRResponse(_:index:clientConfig:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)v4 + 176)
                                                                   + **(int **)(*(void *)v4 + 176));
  __n128 v10 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v10;
  *__n128 v10 = v5;
  v10[1] = dispatch thunk of XPCHandler.requestData(by:clientConfig:);
  return v12(a1, a2, a3, a4);
}

uint64_t dispatch thunk of XPCHandler.decryptPIRBatchResponse(_:indices:clientConfig:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)v4 + 184)
                                                                   + **(int **)(*(void *)v4 + 184));
  __n128 v10 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v10;
  *__n128 v10 = v5;
  v10[1] = dispatch thunk of XPCHandler.requestData(byIndices:clientConfig:);
  return v12(a1, a2, a3, a4);
}

uint64_t dispatch thunk of XPCHandler.constructPIRRequest(withKeyword:withEvaluationKey:shardId:pirConfig:clientConfig:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unint64_t v18 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)v7 + 192)
                                                                                              + **(int **)(*(void *)v7 + 192));
  uint64_t v16 = (void *)swift_task_alloc();
  *(void *)(v8 + 16) = v16;
  *uint64_t v16 = v8;
  v16[1] = dispatch thunk of XPCHandler.requestData(by:clientConfig:);
  return v18(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t dispatch thunk of XPCHandler.constructPIRBatchRequest(withKeywords:shardIds:clientConfig:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)v3 + 200)
                                                          + **(int **)(*(void *)v3 + 200));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  *uint64_t v8 = v4;
  v8[1] = dispatch thunk of XPCHandler.requestData(by:clientConfig:);
  return v10(a1, a2, a3);
}

uint64_t dispatch thunk of XPCHandler.decryptPIRResponse(_:keyword:shardId:clientConfig:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unint64_t v18 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)v7 + 208)
                                                                                              + **(int **)(*(void *)v7 + 208));
  uint64_t v16 = (void *)swift_task_alloc();
  *(void *)(v8 + 16) = v16;
  *uint64_t v16 = v8;
  v16[1] = dispatch thunk of XPCHandler.requestData(by:clientConfig:);
  return v18(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t dispatch thunk of XPCHandler.decryptPIRBatchResponse(_:keywords:clientConfig:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)v4 + 216)
                                                                   + **(int **)(*(void *)v4 + 216));
  __n128 v10 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v10;
  *__n128 v10 = v5;
  v10[1] = dispatch thunk of XPCHandler.requestData(byIndices:clientConfig:);
  return v12(a1, a2, a3, a4);
}

uint64_t dispatch thunk of XPCHandler.constructPIRRequest(withLatitude:longitude:clientConfig:)(uint64_t a1, double a2, double a3)
{
  uint64_t v12 = (uint64_t (*)(uint64_t, __n128, __n128))(*(void *)(*(void *)v3 + 224)
                                                        + **(int **)(*(void *)v3 + 224));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  *uint64_t v8 = v4;
  v8[1] = dispatch thunk of XPCHandler.requestData(by:clientConfig:);
  v9.n128_f64[0] = a2;
  v10.n128_f64[0] = a3;
  return v12(a1, v9, v10);
}

uint64_t dispatch thunk of XPCHandler.decryptPIRResponse(_:latitude:longitude:clientConfig:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  uint64_t v16 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, __n128, __n128))(*(void *)(*(void *)v5 + 232)
                                                                          + **(int **)(*(void *)v5 + 232));
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v12;
  void *v12 = v6;
  v12[1] = dispatch thunk of XPCHandler.requestData(by:clientConfig:);
  v13.n128_f64[0] = a4;
  v14.n128_f64[0] = a5;
  return v16(a1, a2, a3, v13, v14);
}

uint64_t dispatch thunk of XPCHandler.asyncResponseData(byKeywords:clientConfig:)(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(*(void *)v2 + 240) + **(int **)(*(void *)v2 + 240));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = dispatch thunk of XPCHandler.requestData(by:clientConfig:);
  return v8(a1, a2);
}

uint64_t dispatch thunk of XPCHandler.similarityScores(forElements:shardIndices:clientConfig:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)v3 + 248)
                                                          + **(int **)(*(void *)v3 + 248));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  *uint64_t v8 = v4;
  v8[1] = dispatch thunk of XPCHandler.requestData(byIndices:clientConfig:);
  return v10(a1, a2, a3);
}

uint64_t dispatch thunk of XPCHandler.setPECConfig(_:clientConfig:)(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(*(void *)v2 + 256) + **(int **)(*(void *)v2 + 256));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = dispatch thunk of XPCHandler.requestData(by:clientConfig:);
  return v8(a1, a2);
}

uint64_t dispatch thunk of XPCHandler.encryptBatch(ofElements:shardIndices:clientConfig:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)v3 + 264)
                                                          + **(int **)(*(void *)v3 + 264));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  *uint64_t v8 = v4;
  v8[1] = dispatch thunk of XPCHandler.requestData(by:clientConfig:);
  return v10(a1, a2, a3);
}

uint64_t dispatch thunk of XPCHandler.encryptDifferentiallyPrivateFakes(_:shardIndex:shardCount:pecConfig:clientConfig:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)v5 + 272)
                                                                            + **(int **)(*(void *)v5 + 272));
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v12;
  void *v12 = v6;
  v12[1] = dispatch thunk of XPCHandler.requestData(byIndices:clientConfig:);
  return v14(a1, a2, a3, a4, a5);
}

uint64_t dispatch thunk of XPCHandler.decryptBatch(ofSimilarityScores:clientConfig:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)v3 + 280)
                                                          + **(int **)(*(void *)v3 + 280));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  *uint64_t v8 = v4;
  v8[1] = dispatch thunk of XPCHandler.requestData(byIndices:clientConfig:);
  return v10(a1, a2, a3);
}

uint64_t dispatch thunk of XPCHandler.asyncResponseSimilarityScores(forElements:shardIndices:clientConfig:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)v3 + 288)
                                                          + **(int **)(*(void *)v3 + 288));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  *uint64_t v8 = v4;
  v8[1] = dispatch thunk of XPCHandler.requestData(by:clientConfig:);
  return v10(a1, a2, a3);
}

uint64_t dispatch thunk of XPCHandler.queryStatus(for:options:)(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(*(void *)v2 + 296) + **(int **)(*(void *)v2 + 296));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = dispatch thunk of XPCHandler.queryStatus(for:options:);
  return v8(a1, a2);
}

uint64_t dispatch thunk of XPCHandler.queryStatus(for:options:)(uint64_t a1)
{
  uint64_t v5 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(a1);
}

uint64_t dispatch thunk of XPCHandler.listUseCaseGroups()()
{
  uint64_t v4 = (uint64_t (*)(void))(*(void *)(*(void *)v0 + 304) + **(int **)(*(void *)v0 + 304));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = dispatch thunk of XPCHandler.requestData(byIndices:clientConfig:);
  return v4();
}

uint64_t dispatch thunk of XPCHandler.configureUseCaseGroup(withName:useCaseGroup:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)v3 + 312)
                                                          + **(int **)(*(void *)v3 + 312));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  *uint64_t v8 = v4;
  v8[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return v10(a1, a2, a3);
}

uint64_t partial apply for @objc closure #1 in XPCHandler.configureUseCaseGroup(withName:useCaseGroup:)()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v5 = (void *)v0[4];
  uint64_t v4 = v0[5];
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  uint64_t v7 = (uint64_t (*)(int, void *, void *, uint64_t))((char *)&async function pointer to @objc closure #1 in XPCHandler.configureUseCaseGroup(withName:useCaseGroup:)
                                                            + async function pointer to @objc closure #1 in XPCHandler.configureUseCaseGroup(withName:useCaseGroup:));
  return v7(v2, v3, v5, v4);
}

uint64_t _sIeghH_IeAgH_TRTA()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = (int *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, int *))((char *)&_sIeghH_IeAgH_TRTu + _sIeghH_IeAgH_TRTu);
  return v6(v2, v3, v4);
}

uint64_t _sIeAgH_ytIeAgHr_TRTA(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&_sIeAgH_ytIeAgHr_TRTu + _sIeAgH_ytIeAgHr_TRTu);
  return v8(a1, v4, v5, v6);
}

uint64_t sub_249D2D038()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TA(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5Tu
                                              + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5Tu);
  return v6(a1, v4);
}

uint64_t sub_249D2D128()
{
  _Block_release(*(const void **)(v0 + 16));
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for @objc closure #1 in XPCHandler.listUseCaseGroups()()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  uint64_t v5 = (uint64_t (*)(const void *, uint64_t))((char *)&async function pointer to @objc closure #1 in XPCHandler.listUseCaseGroups()
                                                     + async function pointer to @objc closure #1 in XPCHandler.listUseCaseGroups());
  return v5(v2, v3);
}

uint64_t sub_249D2D21C()
{
  _Block_release(*(const void **)(v0 + 32));
  swift_release();
  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t partial apply for @objc closure #1 in XPCHandler.queryStatus(for:options:)()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = v0[3];
  uint64_t v5 = (void *)v0[4];
  uint64_t v4 = v0[5];
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = protocol witness for NetworkManager.uploadKeys(evaluationKeys:userId:) in conformance AspireNetworkManager;
  uint64_t v7 = (uint64_t (*)(void *, uint64_t, void *, uint64_t))((char *)&async function pointer to @objc closure #1 in XPCHandler.queryStatus(for:options:)
                                                                + async function pointer to @objc closure #1 in XPCHandler.queryStatus(for:options:));
  return v7(v2, v3, v5, v4);
}

uint64_t partial apply for @objc closure #1 in XPCHandler.asyncResponseSimilarityScores(forElements:shardIndices:clientConfig:)()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)v0[5];
  uint64_t v6 = v0[6];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v7;
  *uint64_t v7 = v1;
  v7[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  uint64_t v8 = (uint64_t (*)(int, int, void *, void *, uint64_t))((char *)&async function pointer to @objc closure #1 in XPCHandler.asyncResponseSimilarityScores(forElements:shardIndices:clientConfig:)
                                                                 + async function pointer to @objc closure #1 in XPCHandler.asyncResponseSimilarityScores(forElements:shardIndices:clientConfig:));
  return v8(v2, v3, v4, v5, v6);
}

uint64_t partial apply for @objc closure #1 in XPCHandler.decryptBatch(ofSimilarityScores:clientConfig:)()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v5 = (void *)v0[4];
  uint64_t v4 = v0[5];
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  uint64_t v7 = (uint64_t (*)(void *, void *, void *, uint64_t))((char *)&async function pointer to @objc closure #1 in XPCHandler.decryptBatch(ofSimilarityScores:clientConfig:)
                                                               + async function pointer to @objc closure #1 in XPCHandler.decryptBatch(ofSimilarityScores:clientConfig:));
  return v7(v2, v3, v5, v4);
}

uint64_t sub_249D2D4CC()
{
  _Block_release(*(const void **)(v0 + 56));
  swift_release();
  return MEMORY[0x270FA0238](v0, 72, 7);
}

uint64_t partial apply for @objc closure #1 in XPCHandler.encryptDifferentiallyPrivateFakes(_:shardIndex:shardCount:pecConfig:clientConfig:)()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)v0[5];
  uint64_t v6 = (void *)v0[6];
  uint64_t v7 = (void *)v0[7];
  uint64_t v8 = v0[8];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v9;
  *uint64_t v9 = v1;
  v9[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  uint64_t v10 = (uint64_t (*)(int, uint64_t, uint64_t, void *, void *, void *, uint64_t))((char *)&async function pointer to @objc closure #1 in XPCHandler.encryptDifferentiallyPrivateFakes(_:shardIndex:shardCount:pecConfig:clientConfig:)
                                                                                       + async function pointer to @objc closure #1 in XPCHandler.encryptDifferentiallyPrivateFakes(_:shardIndex:shardCount:pecConfig:clientConfig:));
  return v10(v2, v3, v4, v5, v6, v7, v8);
}

uint64_t partial apply for @objc closure #1 in XPCHandler.encryptBatch(ofElements:shardIndices:clientConfig:)()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)v0[5];
  uint64_t v6 = v0[6];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v7;
  *uint64_t v7 = v1;
  v7[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  uint64_t v8 = (uint64_t (*)(int, int, void *, void *, uint64_t))((char *)&async function pointer to @objc closure #1 in XPCHandler.encryptBatch(ofElements:shardIndices:clientConfig:)
                                                                 + async function pointer to @objc closure #1 in XPCHandler.encryptBatch(ofElements:shardIndices:clientConfig:));
  return v8(v2, v3, v4, v5, v6);
}

uint64_t partial apply for @objc closure #1 in XPCHandler.setPECConfig(_:clientConfig:)()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v5 = (void *)v0[4];
  uint64_t v4 = v0[5];
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  uint64_t v7 = (uint64_t (*)(void *, void *, void *, uint64_t))((char *)&async function pointer to @objc closure #1 in XPCHandler.setPECConfig(_:clientConfig:)
                                                               + async function pointer to @objc closure #1 in XPCHandler.setPECConfig(_:clientConfig:));
  return v7(v2, v3, v5, v4);
}

uint64_t partial apply for @objc closure #1 in XPCHandler.similarityScores(forElements:shardIndices:clientConfig:)()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)v0[5];
  uint64_t v6 = v0[6];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v7;
  *uint64_t v7 = v1;
  v7[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  uint64_t v8 = (uint64_t (*)(int, int, void *, void *, uint64_t))((char *)&async function pointer to @objc closure #1 in XPCHandler.similarityScores(forElements:shardIndices:clientConfig:)
                                                                 + async function pointer to @objc closure #1 in XPCHandler.similarityScores(forElements:shardIndices:clientConfig:));
  return v8(v2, v3, v4, v5, v6);
}

uint64_t partial apply for @objc closure #1 in XPCHandler.asyncResponseData(byKeywords:clientConfig:)()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v5 = (void *)v0[4];
  uint64_t v4 = v0[5];
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  uint64_t v7 = (uint64_t (*)(int, void *, void *, uint64_t))((char *)&async function pointer to @objc closure #1 in XPCHandler.asyncResponseData(byKeywords:clientConfig:)
                                                            + async function pointer to @objc closure #1 in XPCHandler.asyncResponseData(byKeywords:clientConfig:));
  return v7(v2, v3, v5, v4);
}

uint64_t sub_249D2D948()
{
  _Block_release(*(const void **)(v0 + 48));
  swift_release();
  return MEMORY[0x270FA0238](v0, 64, 7);
}

uint64_t partial apply for @objc closure #1 in XPCHandler.decryptPIRResponse(_:latitude:longitude:clientConfig:)()
{
  uint64_t v2 = (void *)*((void *)v0 + 2);
  double v3 = v0[3];
  double v4 = v0[4];
  uint64_t v5 = (void *)*((void *)v0 + 5);
  uint64_t v6 = (void *)*((void *)v0 + 6);
  uint64_t v7 = *((void *)v0 + 7);
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v8;
  *uint64_t v8 = v1;
  v8[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  uint64_t v9 = (uint64_t (*)(void *, void *, void *, uint64_t, double, double))((char *)&async function pointer to @objc closure #1 in XPCHandler.decryptPIRResponse(_:latitude:longitude:clientConfig:)
                                                                               + async function pointer to @objc closure #1 in XPCHandler.decryptPIRResponse(_:latitude:longitude:clientConfig:));
  return v9(v2, v5, v6, v7, v3, v4);
}

uint64_t partial apply for @objc closure #1 in XPCHandler.constructPIRRequest(withLatitude:longitude:clientConfig:)()
{
  double v2 = v0[2];
  double v3 = v0[3];
  double v4 = (void *)*((void *)v0 + 4);
  uint64_t v5 = (void *)*((void *)v0 + 5);
  uint64_t v6 = *((void *)v0 + 6);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v7;
  *uint64_t v7 = v1;
  v7[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  uint64_t v8 = (uint64_t (*)(void *, void *, uint64_t, double, double))((char *)&async function pointer to @objc closure #1 in XPCHandler.constructPIRRequest(withLatitude:longitude:clientConfig:)
                                                                       + async function pointer to @objc closure #1 in XPCHandler.constructPIRRequest(withLatitude:longitude:clientConfig:));
  return v8(v4, v5, v6, v2, v3);
}

uint64_t partial apply for @objc closure #1 in XPCHandler.decryptPIRBatchResponse(_:keywords:clientConfig:)()
{
  double v2 = (void *)v0[2];
  double v3 = (void *)v0[3];
  double v4 = (void *)v0[4];
  uint64_t v5 = (void *)v0[5];
  uint64_t v6 = v0[6];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v7;
  *uint64_t v7 = v1;
  v7[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  uint64_t v8 = (uint64_t (*)(void *, void *, void *, void *, uint64_t))((char *)&async function pointer to @objc closure #1 in XPCHandler.decryptPIRBatchResponse(_:keywords:clientConfig:)
                                                                       + async function pointer to @objc closure #1 in XPCHandler.decryptPIRBatchResponse(_:keywords:clientConfig:));
  return v8(v2, v3, v4, v5, v6);
}

uint64_t sub_249D2DC20()
{
  _Block_release(*(const void **)(v0 + 48));
  swift_release();
  return MEMORY[0x270FA0238](v0, 64, 7);
}

uint64_t partial apply for @objc closure #1 in XPCHandler.decryptPIRResponse(_:keyword:shardId:clientConfig:)()
{
  double v2 = (void *)v0[2];
  double v3 = (void *)v0[3];
  double v4 = (void *)v0[4];
  uint64_t v5 = (void *)v0[5];
  uint64_t v7 = (void *)v0[6];
  uint64_t v6 = v0[7];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v8;
  *uint64_t v8 = v1;
  v8[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  uint64_t v9 = (uint64_t (*)(void *, void *, void *, void *, void *, uint64_t))((char *)&async function pointer to @objc closure #1 in XPCHandler.decryptPIRResponse(_:keyword:shardId:clientConfig:)
                                                                               + async function pointer to @objc closure #1 in XPCHandler.decryptPIRResponse(_:keyword:shardId:clientConfig:));
  return v9(v2, v3, v4, v5, v7, v6);
}

uint64_t partial apply for @objc closure #1 in XPCHandler.constructPIRBatchRequest(withKeywords:shardIds:clientConfig:)()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  double v4 = (void *)v0[4];
  uint64_t v5 = (void *)v0[5];
  uint64_t v6 = v0[6];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v7;
  *uint64_t v7 = v1;
  v7[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  uint64_t v8 = (uint64_t (*)(int, int, void *, void *, uint64_t))((char *)&async function pointer to @objc closure #1 in XPCHandler.constructPIRBatchRequest(withKeywords:shardIds:clientConfig:)
                                                                 + async function pointer to @objc closure #1 in XPCHandler.constructPIRBatchRequest(withKeywords:shardIds:clientConfig:));
  return v8(v2, v3, v4, v5, v6);
}

uint64_t sub_249D2DE30()
{
  _Block_release(*(const void **)(v0 + 56));
  swift_release();
  return MEMORY[0x270FA0238](v0, 72, 7);
}

uint64_t partial apply for @objc closure #1 in XPCHandler.constructPIRRequest(withKeyword:withEvaluationKey:shardId:pirConfig:clientConfig:)()
{
  uint64_t v2 = *(void **)(v0 + 16);
  char v3 = *(unsigned char *)(v0 + 24);
  double v4 = *(void **)(v0 + 32);
  uint64_t v5 = *(void **)(v0 + 40);
  uint64_t v6 = *(void **)(v0 + 48);
  uint64_t v7 = *(void **)(v0 + 56);
  uint64_t v8 = *(void *)(v0 + 64);
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v9;
  *uint64_t v9 = v1;
  v9[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  uint64_t v10 = (uint64_t (*)(void *, char, void *, void *, void *, void *, uint64_t))((char *)&async function pointer to @objc closure #1 in XPCHandler.constructPIRRequest(withKeyword:withEvaluationKey:shardId:pirConfig:clientConfig:)
                                                                                      + async function pointer to @objc closure #1 in XPCHandler.constructPIRRequest(withKeyword:withEvaluationKey:shardId:pirConfig:clientConfig:));
  return v10(v2, v3, v4, v5, v6, v7, v8);
}

uint64_t partial apply for @objc closure #1 in XPCHandler.decryptPIRBatchResponse(_:indices:clientConfig:)()
{
  uint64_t v2 = (void *)v0[2];
  char v3 = (void *)v0[3];
  double v4 = (void *)v0[4];
  uint64_t v5 = (void *)v0[5];
  uint64_t v6 = v0[6];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v7;
  *uint64_t v7 = v1;
  v7[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  uint64_t v8 = (uint64_t (*)(void *, void *, void *, void *, uint64_t))((char *)&async function pointer to @objc closure #1 in XPCHandler.decryptPIRBatchResponse(_:indices:clientConfig:)
                                                                       + async function pointer to @objc closure #1 in XPCHandler.decryptPIRBatchResponse(_:indices:clientConfig:));
  return v8(v2, v3, v4, v5, v6);
}

uint64_t sub_249D2E04C()
{
  _Block_release(*(const void **)(v0 + 40));
  swift_release();
  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t partial apply for @objc closure #1 in XPCHandler.decryptPIRResponse(_:index:clientConfig:)()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = v0[3];
  double v4 = (void *)v0[4];
  uint64_t v5 = (void *)v0[5];
  uint64_t v6 = v0[6];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v7;
  *uint64_t v7 = v1;
  v7[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  uint64_t v8 = (uint64_t (*)(void *, uint64_t, void *, void *, uint64_t))((char *)&async function pointer to @objc closure #1 in XPCHandler.decryptPIRResponse(_:index:clientConfig:)
                                                                        + async function pointer to @objc closure #1 in XPCHandler.decryptPIRResponse(_:index:clientConfig:));
  return v8(v2, v3, v4, v5, v6);
}

uint64_t partial apply for @objc closure #1 in XPCHandler.constructPIRBatchRequest(withIndices:clientConfig:)()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v5 = (void *)v0[4];
  uint64_t v4 = v0[5];
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  uint64_t v7 = (uint64_t (*)(int, void *, void *, uint64_t))((char *)&async function pointer to @objc closure #1 in XPCHandler.constructPIRBatchRequest(withIndices:clientConfig:)
                                                            + async function pointer to @objc closure #1 in XPCHandler.constructPIRBatchRequest(withIndices:clientConfig:));
  return v7(v2, v3, v5, v4);
}

uint64_t partial apply for @objc closure #1 in XPCHandler.constructPIRRequest(with:clientConfig:)()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v5 = (void *)v0[4];
  uint64_t v4 = v0[5];
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  uint64_t v7 = (uint64_t (*)(uint64_t, void *, void *, uint64_t))((char *)&async function pointer to @objc closure #1 in XPCHandler.constructPIRRequest(with:clientConfig:)
                                                                + async function pointer to @objc closure #1 in XPCHandler.constructPIRRequest(with:clientConfig:));
  return v7(v2, v3, v5, v4);
}

uint64_t partial apply for @objc closure #1 in XPCHandler.generateEvaluationKey(_:clientConfig:)()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v5 = (void *)v0[4];
  uint64_t v4 = v0[5];
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  uint64_t v7 = (uint64_t (*)(void *, void *, void *, uint64_t))((char *)&async function pointer to @objc closure #1 in XPCHandler.generateEvaluationKey(_:clientConfig:)
                                                               + async function pointer to @objc closure #1 in XPCHandler.generateEvaluationKey(_:clientConfig:));
  return v7(v2, v3, v5, v4);
}

uint64_t partial apply for @objc closure #1 in XPCHandler.setPIRConfig(_:clientConfig:)()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v5 = (void *)v0[4];
  uint64_t v4 = v0[5];
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  uint64_t v7 = (uint64_t (*)(void *, void *, void *, uint64_t))((char *)&async function pointer to @objc closure #1 in XPCHandler.setPIRConfig(_:clientConfig:)
                                                               + async function pointer to @objc closure #1 in XPCHandler.setPIRConfig(_:clientConfig:));
  return v7(v2, v3, v5, v4);
}

uint64_t partial apply for @objc closure #1 in XPCHandler.removedCachedEntries(byKeywords:clientConfig:)()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v5 = (void *)v0[4];
  uint64_t v4 = v0[5];
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  uint64_t v7 = (uint64_t (*)(int, void *, void *, uint64_t))((char *)&async function pointer to @objc closure #1 in XPCHandler.removedCachedEntries(byKeywords:clientConfig:)
                                                            + async function pointer to @objc closure #1 in XPCHandler.removedCachedEntries(byKeywords:clientConfig:));
  return v7(v2, v3, v5, v4);
}

uint64_t objectdestroy_289Tm()
{
  _Block_release(*(const void **)(v0 + 40));
  swift_release();
  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t partial apply for @objc closure #1 in XPCHandler.requestData(byLatitude:longitude:clientConfig:)()
{
  double v2 = v0[2];
  double v3 = v0[3];
  uint64_t v4 = (void *)*((void *)v0 + 4);
  uint64_t v5 = (void *)*((void *)v0 + 5);
  uint64_t v6 = *((void *)v0 + 6);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v7;
  *uint64_t v7 = v1;
  v7[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  uint64_t v8 = (uint64_t (*)(void *, void *, uint64_t, double, double))((char *)&async function pointer to @objc closure #1 in XPCHandler.requestData(byLatitude:longitude:clientConfig:)
                                                                       + async function pointer to @objc closure #1 in XPCHandler.requestData(byLatitude:longitude:clientConfig:));
  return v8(v4, v5, v6, v2, v3);
}

uint64_t objectdestroy_159Tm()
{
  _Block_release(*(const void **)(v0 + 40));
  swift_release();
  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t partial apply for @objc closure #1 in XPCHandler.requestData(byKeywords:shardIds:clientConfig:)()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)v0[5];
  uint64_t v6 = v0[6];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v7;
  *uint64_t v7 = v1;
  v7[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  uint64_t v8 = (uint64_t (*)(int, int, void *, void *, uint64_t))((char *)&async function pointer to @objc closure #1 in XPCHandler.requestData(byKeywords:shardIds:clientConfig:)
                                                                 + async function pointer to @objc closure #1 in XPCHandler.requestData(byKeywords:shardIds:clientConfig:));
  return v8(v2, v3, v4, v5, v6);
}

uint64_t closure #1 in XPCHandler.requestData(byKeywords:shardIds:clientConfig:)partial apply(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(v2 + 32);
  uint64_t v7 = swift_task_alloc();
  long long v8 = *(_OWORD *)(v2 + 16);
  *(void *)(v3 + 16) = v7;
  *(void *)uint64_t v7 = v3;
  *(void *)(v7 + 8) = protocol witness for NetworkManager.uploadKeys(evaluationKeys:userId:) in conformance AspireNetworkManager;
  *(void *)(v7 + 48) = v6;
  *(_OWORD *)(v7 + 32) = v8;
  *(void *)(v7 + 16) = a1;
  *(void *)(v7 + 24) = a2;
  return MEMORY[0x270FA2498](closure #1 in XPCHandler.requestData(byKeywords:shardIds:clientConfig:), 0, 0);
}

uint64_t objectdestroyTm()
{
  _Block_release(*(const void **)(v0 + 32));
  swift_release();
  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t partial apply for @objc closure #1 in XPCHandler.requestData(byIndices:clientConfig:)()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v5 = (void *)v0[4];
  uint64_t v4 = v0[5];
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  uint64_t v7 = (uint64_t (*)(int, void *, void *, uint64_t))((char *)&async function pointer to @objc closure #1 in XPCHandler.requestData(byIndices:clientConfig:)
                                                            + async function pointer to @objc closure #1 in XPCHandler.requestData(byIndices:clientConfig:));
  return v7(v2, v3, v5, v4);
}

uint64_t objectdestroy_413Tm()
{
  _Block_release(*(const void **)(v0 + 32));
  swift_release();
  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t partial apply for @objc closure #1 in XPCHandler.requestData(by:clientConfig:)()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v5 = (void *)v0[4];
  uint64_t v4 = v0[5];
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  uint64_t v7 = (uint64_t (*)(uint64_t, void *, void *, uint64_t))((char *)&async function pointer to @objc closure #1 in XPCHandler.requestData(by:clientConfig:)
                                                                + async function pointer to @objc closure #1 in XPCHandler.requestData(by:clientConfig:));
  return v7(v2, v3, v5, v4);
}

uint64_t objectdestroy_113Tm()
{
  swift_unknownObjectRelease();
  swift_release();
  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

uint64_t outlined init with take of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of UseCaseGroup(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UseCaseGroup();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of NetworkConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NetworkConfig(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_6(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s8CipherML12UseCaseGroupVWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t objectdestroy_537Tm()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 72, 7);
}

uint64_t specialized FixedWidthInteger.divCeil(_:)(uint64_t result, uint64_t a2)
{
  if (!result)
  {
    __break(1u);
    goto LABEL_12;
  }
  BOOL v2 = __OFSUB__(result, 1);
  if (result >= 1)
  {
    BOOL v2 = __OFSUB__(a2, 1);
    if (a2 >= 1) {
      return (a2 - 1) / (unint64_t)result + 1;
    }
  }
  if ((a2 & result) < 0 == v2)
  {
    if (result != -1 || a2 != 0x8000000000000000) {
      return a2 / result;
    }
    goto LABEL_13;
  }
  uint64_t v3 = (a2 + 1) / result;
  uint64_t result = v3 + 1;
  if (__OFADD__(v3, 1))
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
  }
  return result;
}

uint64_t specialized BidirectionalCollection.suffix(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v5 = a3 >> 62;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v9 = a2 >> 32;
      uint64_t v8 = (int)a2;
      break;
    case 2uLL:
      uint64_t v8 = *(void *)(a2 + 16);
      uint64_t v9 = *(void *)(a2 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v8 = 0;
      uint64_t v9 = BYTE6(a3);
      break;
  }
  uint64_t v10 = -a1;
  uint64_t v11 = specialized RandomAccessCollection<>.distance(from:to:)(v9, v8, a2, a3);
  if (v11 <= 0 && v11 > v10)
  {
    uint64_t v12 = v5;
    switch((int)v5)
    {
      case 1:
        uint64_t v12 = (int)a2;
        goto LABEL_12;
      case 2:
        uint64_t v12 = *(void *)(a2 + 16);
        goto LABEL_14;
      case 3:
        goto LABEL_16;
      default:
        goto LABEL_11;
    }
  }
  uint64_t v12 = specialized RandomAccessCollection<>.index(_:offsetBy:)(v9, v10, a2, a3);
  uint64_t v13 = 0;
  switch((int)v5)
  {
    case 1:
LABEL_12:
      uint64_t v13 = a2 >> 32;
      break;
    case 2:
LABEL_14:
      uint64_t v13 = *(void *)(a2 + 24);
      break;
    case 3:
      break;
    default:
LABEL_11:
      uint64_t v13 = BYTE6(a3);
      break;
  }
  if (v13 < v12)
  {
LABEL_18:
    __break(1u);
    JUMPOUT(0x249D2EFF0);
  }
LABEL_16:
  uint64_t v14 = Data._Representation.subscript.getter();
  uint64_t v16 = v15;
  uint64_t result = outlined consume of Data._Representation(a2, a3);
  *a4 = v14;
  a4[1] = v16;
  return result;
}

uint64_t FakeQueriesList.list.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FakeQueriesList.list.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*FakeQueriesList.list.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t FakeQueriesList.maxTrials.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t FakeQueriesList.maxTrials.setter(uint64_t result)
{
  *(void *)(v1 + 8) = result;
  return result;
}

uint64_t (*FakeQueriesList.maxTrials.modify())()
{
  return Repeated.subscript.readspecialized ;
}

__n128 FakeQueriesList.dpParameters.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 48);
  __n128 result = *(__n128 *)(v1 + 16);
  long long v4 = *(_OWORD *)(v1 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = v2;
  return result;
}

uint64_t FakeQueriesList.shardCount.getter()
{
  return *(void *)(v0 + 56);
}

uint64_t FakeQueriesList.filePath.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for FakeQueriesList() + 32);
  uint64_t v4 = type metadata accessor for URL();
  unint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t type metadata accessor for FakeQueriesList()
{
  uint64_t result = type metadata singleton initialization cache for FakeQueriesList;
  if (!type metadata singleton initialization cache for FakeQueriesList) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t FakeQueriesList.perQueryFakeCount.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for FakeQueriesList() + 36));
}

uint64_t FakeQueriesList.perQueryFakeCount.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for FakeQueriesList();
  *(void *)(v1 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t (*FakeQueriesList.perQueryFakeCount.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t FakeQueriesList.remainingFakeQueries.getter()
{
  return *(void *)(*(void *)v0 + 16);
}

void FakeQueriesList.init(dpParameters:shardCount:useCase:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v57 = a2;
  uint64_t v56 = a1;
  uint64_t v63 = type metadata accessor for FakeQueriesList();
  MEMORY[0x270FA5388](v63);
  uint64_t v52 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = type metadata accessor for URL.DirectoryHint();
  uint64_t v53 = *(void *)(v55 - 8);
  MEMORY[0x270FA5388](v55);
  uint64_t v10 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v54 = (char *)&v51 - v16;
  if (one-time initialization token for fakeQueriesDirectory != -1) {
    swift_once();
  }
  uint64_t v17 = __swift_project_value_buffer(v11, (uint64_t)static CacheDirectory.fakeQueriesDirectory);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v17, v11);
  uint64_t v61 = 0x7473696C702ELL;
  unint64_t v62 = 0xE600000000000000;
  uint64_t v59 = a3;
  unint64_t v60 = a4;
  swift_bridgeObjectRetain();
  uint64_t v59 = String.init<A>(_:)();
  unint64_t v60 = v18;
  String.append<A>(contentsOf:)();
  swift_bridgeObjectRelease();
  uint64_t v61 = v59;
  unint64_t v62 = v60;
  uint64_t v19 = v53;
  uint64_t v20 = v55;
  (*(void (**)(char *, void, uint64_t))(v53 + 104))(v10, *MEMORY[0x263F06E50], v55);
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v21 = v54;
  URL.appending<A>(component:directoryHint:)();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v10, v20);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  uint64_t v22 = v63;
  uint64_t v23 = a5 + *(int *)(v63 + 32);
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v23, v21, v11);
  uint64_t v24 = (_OWORD *)v56;
  uint64_t v25 = *(void *)(v56 + 32);
  *(void *)(a5 + 8) = v25;
  long long v26 = v24[1];
  *(_OWORD *)(a5 + 16) = *v24;
  *(_OWORD *)(a5 + 32) = v26;
  uint64_t v27 = v57;
  uint64_t v28 = v58;
  *(void *)(a5 + 48) = v25;
  *(void *)(a5 + 56) = v27;
  *(void *)(a5 + *(int *)(v22 + 36)) = 0;
  *(void *)a5 = MEMORY[0x263F8EE78];
  id v29 = (void *)v23;
  uint64_t v30 = Data.init(contentsOf:options:)();
  if (v28)
  {
    uint64_t v32 = 0;
    if (one-time initialization token for framework != -1) {
      swift_once();
    }
    uint64_t v36 = type metadata accessor for Logger();
    __swift_project_value_buffer(v36, (uint64_t)static Logger.framework);
    id v37 = v28;
    id v38 = v28;
    uint64_t v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v39, v40))
    {
      uint64_t v41 = swift_slowAlloc();
      uint64_t v57 = 0;
      id v42 = (uint8_t *)v41;
      uint64_t v43 = swift_slowAlloc();
      double v58 = v29;
      uint64_t v44 = (void *)v43;
      *(_DWORD *)id v42 = 138543362;
      id v45 = v28;
      uint64_t v46 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v61 = v46;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v44 = v46;

      _os_log_impl(&dword_249C3F000, v39, v40, "Unable to parse list of fake queries from file due to '%{public}@'", v42, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x24C5B4790](v44, -1, -1);
      uint64_t v47 = v42;
      uint64_t v32 = v57;
      MEMORY[0x24C5B4790](v47, -1, -1);
    }
    else
    {
    }
    FakeQueriesList.generateList()();
    if (v32)
    {
      outlined destroy of FakeQueriesList(a5);
    }
    else
    {
      type metadata accessor for PropertyListEncoder();
      swift_allocObject();
      PropertyListEncoder.init()();
      dispatch thunk of PropertyListEncoder.outputFormat.setter();
      lazy protocol witness table accessor for type FakeQueriesList and conformance FakeQueriesList(&lazy protocol witness table cache variable for type FakeQueriesList and conformance FakeQueriesList, (void (*)(uint64_t))type metadata accessor for FakeQueriesList);
      uint64_t v48 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
      unint64_t v50 = v49;
      Data.write(to:options:)();
      outlined consume of Data._Representation(v48, v50);
      swift_release();
    }
  }
  else
  {
    uint64_t v33 = v30;
    unint64_t v34 = v31;
    type metadata accessor for PropertyListDecoder();
    swift_allocObject();
    PropertyListDecoder.init()();
    lazy protocol witness table accessor for type FakeQueriesList and conformance FakeQueriesList(&lazy protocol witness table cache variable for type FakeQueriesList and conformance FakeQueriesList, (void (*)(uint64_t))type metadata accessor for FakeQueriesList);
    uint64_t v35 = (uint64_t)v52;
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
    outlined destroy of FakeQueriesList(a5);
    swift_release();
    outlined consume of Data._Representation(v33, v34);
    outlined init with take of FakeQueriesList(v35, a5);
  }
}

void FakeQueriesList.generateList()()
{
  if (*((uint64_t *)v0 + 1) >= 1
    && (double v2 = v0[2], v2 > 0.0)
    && ((double v3 = v0[3], v3 > 0.0) ? (v4 = v3 < 1.0) : (v4 = 0), v4 && (v5 = (1.0 - v3) / v3, v5 > 0.0)))
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v7 = *(void *)v0;
    if (isUniquelyReferenced_nonNull_native)
    {
      specialized Array.replaceSubrange<A>(_:with:)(0, *(void *)(v7 + 16));
    }
    else
    {
      *(void *)uint64_t v0 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(void *)(v7 + 24) >> 1);
      swift_bridgeObjectRelease();
    }
    uint64_t v8 = *((void *)v0 + 7);
    if (v8 < 0)
    {
LABEL_53:
      __break(1u);
      goto LABEL_54;
    }
    if (v8)
    {
      uint64_t v9 = 0;
      while (v9 != v8)
      {
        if (v2 >= 1.0)
        {
          long double v13 = specialized GammaDistribution.sampleLarge<A>(with:using:)(v2, v2, v5);
        }
        else
        {
          long double v11 = (double)specialized RandomNumberGenerator.next<A>(upperBound:)(0x20000000000001uLL) * 1.11022302e-16
              + 0.0;
          double v12 = specialized GammaDistribution.sampleLarge<A>(with:using:)(v2 + 1.0, v2, v5);
          long double v13 = v12 * pow(v11, 1.0 / v2);
        }
        if (v13 <= 125.0)
        {
          double v14 = (double)specialized RandomNumberGenerator.next<A>(upperBound:)(0x20000000000001uLL) * 1.11022302e-16
              + 0.0;
          double v15 = exp(-v13);
          if (v15 < v14)
          {
            uint64_t v16 = 0;
            double v17 = v15;
            while (1)
            {
              uint64_t v10 = v16 + 1;
              if (__OFADD__(v16, 1)) {
                break;
              }
              double v17 = v13 * v17 / (double)v10;
              double v15 = v15 + v17;
              ++v16;
              if (v15 >= v14) {
                goto LABEL_29;
              }
            }
            __break(1u);
            break;
          }
          uint64_t v10 = 0;
        }
        else
        {
          specialized PoissonDistribution.sampleLarge<A>(using:)(v13);
LABEL_29:
          if (v10 < 0)
          {
            __break(1u);
            goto LABEL_31;
          }
        }
        specialized Array.append<A>(contentsOf:)(v10, v9++, 0);
        if (v9 == v8) {
          goto LABEL_31;
        }
      }
      __break(1u);
      goto LABEL_53;
    }
LABEL_31:
    uint64_t v18 = *((void *)v0 + 4);
    if (v18 < 1)
    {
LABEL_54:
      __break(1u);
      goto LABEL_55;
    }
    uint64_t v19 = *(void *)(*(void *)v0 + 16);
    uint64_t v20 = specialized FixedWidthInteger.divCeil(_:)(*((void *)v0 + 4), v19);
    uint64_t v21 = v20 * v18;
    if ((unsigned __int128)(v20 * (__int128)v18) >> 64 != (v20 * v18) >> 63)
    {
LABEL_55:
      __break(1u);
      goto LABEL_56;
    }
    uint64_t v22 = v21 - v19;
    if (__OFSUB__(v21, v19))
    {
LABEL_56:
      __break(1u);
      goto LABEL_57;
    }
    if (v22 < 0)
    {
LABEL_57:
      __break(1u);
      goto LABEL_58;
    }
    specialized Array.append<A>(contentsOf:)(v22, 0, 1);
    uint64_t v23 = *(void *)v0;
    unint64_t v24 = *(void *)(*(void *)v0 + 16);
    int64_t v25 = v24 / v18;
    uint64_t v26 = type metadata accessor for FakeQueriesList();
    *(void *)((char *)v0 + *(int *)(v26 + 36)) = v25;
    if (*((void *)v0 + 5) >= v25)
    {
      if (v24)
      {
        swift_bridgeObjectRetain();
        uint64_t v27 = (unsigned char *)(v23 + 40);
        uint64_t v28 = (void *)MEMORY[0x263F8EE78];
        do
        {
          if ((*v27 & 1) == 0)
          {
            uint64_t v29 = *((void *)v27 - 1);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v28[2] + 1, 1, v28);
            }
            unint64_t v31 = v28[2];
            unint64_t v30 = v28[3];
            if (v31 >= v30 >> 1) {
              uint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v30 > 1), v31 + 1, 1, v28);
            }
            v28[2] = v31 + 1;
            v28[v31 + 4] = v29;
          }
          v27 += 16;
          --v24;
        }
        while (v24);
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v28 = (void *)MEMORY[0x263F8EE78];
      }
      uint64_t v32 = v28[2];
      uint64_t v26 = swift_bridgeObjectRelease();
      if (v32) {
        goto LABEL_50;
      }
    }
    uint64_t v33 = *((void *)v0 + 1);
    BOOL v34 = __OFSUB__(v33, 1);
    uint64_t v35 = v33 - 1;
    if (v34)
    {
LABEL_58:
      __break(1u);
      return;
    }
    *((void *)v0 + 1) = v35;
    FakeQueriesList.generateList()(v26);
    if (!v1) {
LABEL_50:
    }
      specialized MutableCollection<>.shuffle<A>(using:)();
  }
  else
  {
    type metadata accessor for CipherMLError();
    lazy protocol witness table accessor for type FakeQueriesList and conformance FakeQueriesList((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
  }
}

void specialized MutableCollection<>.shuffle<A>(using:)()
{
  uint64_t v1 = *(void **)v0;
  unint64_t v2 = *(void *)(*(void *)v0 + 16);
  if (v2 < 2) {
    return;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_19:
  }
    uint64_t v1 = specialized _ArrayBuffer._consumeAndCreateNew()(v1);
  unint64_t v3 = 0;
  BOOL v4 = v1 + 4;
  while (1)
  {
    unint64_t __buf = 0;
    arc4random_buf(&__buf, 8uLL);
    uint64_t v11 = (__buf * (unsigned __int128)v2) >> 64;
    if (v2 > __buf * v2)
    {
      unint64_t v12 = -(uint64_t)v2 % v2;
      if (v12 > __buf * v2)
      {
        do
        {
          unint64_t __buf = 0;
          arc4random_buf(&__buf, 8uLL);
        }
        while (v12 > __buf * v2);
        uint64_t v11 = (__buf * (unsigned __int128)v2) >> 64;
      }
    }
    BOOL v13 = __OFADD__(v3, v11);
    unint64_t v14 = v3 + v11;
    if (v13)
    {
      __break(1u);
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }
    if (v3 != v14) {
      break;
    }
LABEL_5:
    ++v3;
    if ((uint64_t)v2-- <= 2) {
      goto LABEL_15;
    }
  }
  unint64_t v15 = v1[2];
  if (v3 >= v15) {
    goto LABEL_18;
  }
  if (v14 < v15)
  {
    double v5 = &v4[2 * v3];
    char v6 = *((unsigned char *)v5 + 8);
    uint64_t v7 = *v5;
    uint64_t v8 = &v4[2 * v14];
    char v9 = *((unsigned char *)v8 + 8);
    *double v5 = *v8;
    *((unsigned char *)v5 + 8) = v9;
    *uint64_t v8 = v7;
    *((unsigned char *)v8 + 8) = v6;
    goto LABEL_5;
  }
  __break(1u);
LABEL_15:
  *(void *)uint64_t v0 = v1;
}

void FakeQueriesList.returnFakeQueries()()
{
  uint64_t v2 = v1;
  unint64_t v3 = v0;
  uint64_t v4 = *v0;
  int64_t v5 = *(void *)(*v0 + 16);
  uint64_t v6 = *(int *)(type metadata accessor for FakeQueriesList() + 36);
  unint64_t v7 = *(uint64_t *)((char *)v0 + v6);
  if (v5 < (uint64_t)v7)
  {
    FakeQueriesList.generateList()();
    if (v1) {
      return;
    }
    unint64_t v7 = *(uint64_t *)((char *)v3 + v6);
    uint64_t v4 = *v3;
  }
  if ((v7 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_27;
  }
  unint64_t v8 = *(void *)(v4 + 16);
  unint64_t v9 = v8 - v7;
  if (v8 < v7) {
    unint64_t v9 = 0;
  }
  if (v9 == v8) {
    goto LABEL_21;
  }
  if (v9 >= v8)
  {
LABEL_27:
    __break(1u);
    return;
  }
  uint64_t v20 = v2;
  swift_bridgeObjectRetain();
  if (v7 >= v8) {
    unint64_t v10 = v8;
  }
  else {
    unint64_t v10 = v7;
  }
  uint64_t v11 = (unsigned char *)(v4 - 16 * v10 + 16 * v8 + 40);
  unint64_t v12 = (void *)MEMORY[0x263F8EE78];
  do
  {
    if ((*v11 & 1) == 0)
    {
      uint64_t v13 = *((void *)v11 - 1);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
      }
      unint64_t v15 = v12[2];
      unint64_t v14 = v12[3];
      if (v15 >= v14 >> 1) {
        unint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v14 > 1), v15 + 1, 1, v12);
      }
      v12[2] = v15 + 1;
      v12[v15 + 4] = v13;
    }
    v11 += 16;
    --v10;
  }
  while (v10);
  swift_unknownObjectRelease();
  uint64_t v2 = v20;
LABEL_21:
  specialized RangeReplaceableCollection<>.removeLast(_:)(v7);
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  dispatch thunk of PropertyListEncoder.outputFormat.setter();
  lazy protocol witness table accessor for type FakeQueriesList and conformance FakeQueriesList(&lazy protocol witness table cache variable for type FakeQueriesList and conformance FakeQueriesList, (void (*)(uint64_t))type metadata accessor for FakeQueriesList);
  uint64_t v16 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  if (v2)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v18 = v16;
    unint64_t v19 = v17;
    Data.write(to:options:)();
    outlined consume of Data._Representation(v18, v19);
  }
  swift_release();
}

unint64_t specialized RangeReplaceableCollection<>.removeLast(_:)(unint64_t result)
{
  if (result)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      unint64_t v2 = *(void *)(*(void *)v1 + 16);
      BOOL v3 = v2 >= result;
      uint64_t result = v2 - result;
      if (v3) {
        return (unint64_t)specialized Array.replaceSubrange<A>(_:with:)(result, v2);
      }
    }
    __break(1u);
  }
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance FakeQueriesList.CodingKeys()
{
  unint64_t result = 1953720684;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x6C6169725478616DLL;
      break;
    case 2:
      unint64_t result = 0x656D617261507064;
      break;
    case 3:
      unint64_t result = 0x756F436472616873;
      break;
    case 4:
      unint64_t result = 0x68746150656C6966;
      break;
    case 5:
      unint64_t result = 0xD000000000000011;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance FakeQueriesList.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized FakeQueriesList.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FakeQueriesList.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type FakeQueriesList.CodingKeys and conformance FakeQueriesList.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FakeQueriesList.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type FakeQueriesList.CodingKeys and conformance FakeQueriesList.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t FakeQueriesList.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<FakeQueriesList.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  unint64_t v8 = (char *)v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type FakeQueriesList.CodingKeys and conformance FakeQueriesList.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  *(void *)&v12[0] = *(void *)v3;
  char v14 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int?]);
  lazy protocol witness table accessor for type [Int?] and conformance <A> [A]();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v12[0]) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    uint64_t v9 = *(void *)(v3 + 48);
    long long v10 = *(_OWORD *)(v3 + 32);
    v12[0] = *(_OWORD *)(v3 + 16);
    v12[1] = v10;
    uint64_t v13 = v9;
    char v14 = 2;
    lazy protocol witness table accessor for type PECDPParameters and conformance PECDPParameters();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v12[0]) = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    type metadata accessor for FakeQueriesList();
    LOBYTE(v12[0]) = 4;
    type metadata accessor for URL();
    lazy protocol witness table accessor for type FakeQueriesList and conformance FakeQueriesList(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v12[0]) = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t FakeQueriesList.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v23 = a2;
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v24 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<FakeQueriesList.CodingKeys>);
  uint64_t v25 = *(void *)(v6 - 8);
  uint64_t v26 = v6;
  MEMORY[0x270FA5388](v6);
  unint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for FakeQueriesList();
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1[3];
  uint64_t v27 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v12);
  lazy protocol witness table accessor for type FakeQueriesList.CodingKeys and conformance FakeQueriesList.CodingKeys();
  uint64_t v13 = v28;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v13) {
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v27);
  }
  uint64_t v28 = v5;
  char v14 = v11;
  uint64_t v15 = v25;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int?]);
  char v32 = 0;
  lazy protocol witness table accessor for type [Int?] and conformance <A> [A]();
  uint64_t v16 = v26;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v17 = (uint64_t)v14;
  *(void *)char v14 = v29;
  LOBYTE(v29) = 1;
  *((void *)v14 + 1) = KeyedDecodingContainer.decode(_:forKey:)();
  char v32 = 2;
  lazy protocol witness table accessor for type PECDPParameters and conformance PECDPParameters();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v18 = v31;
  long long v19 = v30;
  *((_OWORD *)v14 + 1) = v29;
  *((_OWORD *)v14 + 2) = v19;
  *((void *)v14 + 6) = v18;
  LOBYTE(v29) = 3;
  *((void *)v14 + 7) = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v29) = 4;
  lazy protocol witness table accessor for type FakeQueriesList and conformance FakeQueriesList(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
  uint64_t v20 = v28;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v24 + 32))(v17 + *(int *)(v9 + 32), v20, v3);
  LOBYTE(v29) = 5;
  uint64_t v21 = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v8, v16);
  *(void *)(v17 + *(int *)(v9 + 36)) = v21;
  outlined init with copy of FakeQueriesList(v17, v23);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v27);
  return outlined destroy of FakeQueriesList(v17);
}

uint64_t protocol witness for Decodable.init(from:) in conformance FakeQueriesList@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return FakeQueriesList.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance FakeQueriesList(void *a1)
{
  return FakeQueriesList.encode(to:)(a1);
}

void specialized PoissonDistribution.sampleLarge<A>(using:)(long double a1)
{
  uint64_t v2 = 1;
  double v3 = 1.0;
  while (1)
  {
    do
    {
      unint64_t __buf = 0;
      arc4random_buf(&__buf, 8uLL);
    }
    while (0x20000000000001 * __buf < 0x1FFFFFFFFFF801);
    unint64_t v5 = (__buf * (unsigned __int128)0x20000000000001uLL) >> 64;
    if (v5 != 0x20000000000000) {
      break;
    }
    if (v3 < 1.0) {
      goto LABEL_11;
    }
    if (v3 <= 1.0) {
      goto LABEL_15;
    }
LABEL_4:
    if (__OFADD__(v2++, 1))
    {
      __break(1u);
      goto LABEL_18;
    }
  }
  double v3 = v3 * ((double)v5 * 1.11022302e-16 + 0.0);
  if (v3 < 1.0)
  {
LABEL_11:
    while (a1 > 0.0)
    {
      if (a1 <= 100.0)
      {
        double v3 = v3 * exp(a1);
        a1 = 0.0;
        break;
      }
      double v3 = v3 * 3.72007598e-44;
      a1 = a1 + -100.0;
      if (v3 >= 1.0) {
        break;
      }
    }
  }
  if (v3 > 1.0) {
    goto LABEL_4;
  }
LABEL_15:
  if (!__OFSUB__(v2, 1)) {
    return;
  }
LABEL_18:
  __break(1u);
}

double specialized GammaDistribution.sampleLarge<A>(with:using:)(double a1, double a2, double a3)
{
  double v16 = a1 + -0.333333333;
  double v3 = 1.0 / sqrt((a1 + -0.333333333) * 9.0);
  double v4 = -2.0;
  while (1)
  {
    do
    {
      unint64_t __buf = 0;
      arc4random_buf(&__buf, 8uLL);
    }
    while (0x20000000000001 * __buf < 0x1FFFFFFFFFF801);
    unint64_t v5 = (__buf * (unsigned __int128)0x20000000000001uLL) >> 64;
    do
    {
      unint64_t __buf = 0;
      arc4random_buf(&__buf, 8uLL);
    }
    while (0x20000000000001 * __buf < 0x1FFFFFFFFFF801);
    double v6 = (double)((__buf * (unsigned __int128)0x20000000000001uLL) >> 64) * 1.11022302e-16 + 0.0;
    double v7 = log((double)v5 * 1.11022302e-16 + 0.0) * v4;
    double v8 = sqrt(v7) * cos(v6 * 6.28318531) + 0.0;
    double v9 = v3 * v8 + 1.0;
    if (v9 > 0.0)
    {
      do
      {
        unint64_t __buf = 0;
        arc4random_buf(&__buf, 8uLL);
      }
      while (0x20000000000001 * __buf < 0x1FFFFFFFFFF801);
      double v10 = v9 * (v9 * v9);
      double v11 = (double)((__buf * (unsigned __int128)0x20000000000001uLL) >> 64) * 1.11022302e-16 + 0.0;
      double v12 = v8 * v8;
      if (v11 < v8 * v8 * (v8 * v8 * -0.0331) + 1.0) {
        break;
      }
      double v13 = log(v11);
      double v4 = -2.0;
      if (v13 < v12 * 0.5 + v16 * (1.0 - v10 + log(v10))) {
        break;
      }
    }
  }
  return v16 * v10 * a3;
}

uint64_t outlined destroy of FakeQueriesList(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for FakeQueriesList();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with take of FakeQueriesList(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FakeQueriesList();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type FakeQueriesList.CodingKeys and conformance FakeQueriesList.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type FakeQueriesList.CodingKeys and conformance FakeQueriesList.CodingKeys;
  if (!lazy protocol witness table cache variable for type FakeQueriesList.CodingKeys and conformance FakeQueriesList.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FakeQueriesList.CodingKeys and conformance FakeQueriesList.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FakeQueriesList.CodingKeys and conformance FakeQueriesList.CodingKeys;
  if (!lazy protocol witness table cache variable for type FakeQueriesList.CodingKeys and conformance FakeQueriesList.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FakeQueriesList.CodingKeys and conformance FakeQueriesList.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FakeQueriesList.CodingKeys and conformance FakeQueriesList.CodingKeys;
  if (!lazy protocol witness table cache variable for type FakeQueriesList.CodingKeys and conformance FakeQueriesList.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FakeQueriesList.CodingKeys and conformance FakeQueriesList.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FakeQueriesList.CodingKeys and conformance FakeQueriesList.CodingKeys;
  if (!lazy protocol witness table cache variable for type FakeQueriesList.CodingKeys and conformance FakeQueriesList.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FakeQueriesList.CodingKeys and conformance FakeQueriesList.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [Int?] and conformance <A> [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [Int?] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [Int?] and conformance <A> [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Int?]);
    lazy protocol witness table accessor for type Int? and conformance <A> A?(&lazy protocol witness table cache variable for type Int? and conformance <A> A?);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [Int?] and conformance <A> [A]);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type [Int?] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [Int?] and conformance <A> [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Int?]);
    lazy protocol witness table accessor for type Int? and conformance <A> A?(&lazy protocol witness table cache variable for type Int? and conformance <A> A?);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [Int?] and conformance <A> [A]);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type Int? and conformance <A> A?(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Int?);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with copy of FakeQueriesList(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FakeQueriesList();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t initializeBufferWithCopyOfBuffer for FakeQueriesList(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    *(void *)(a1 + 8) = a2[1];
    long long v8 = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
    *(_OWORD *)(a1 + 32) = v8;
    uint64_t v9 = a2[7];
    uint64_t v10 = *(int *)(a3 + 32);
    uint64_t v11 = a1 + v10;
    uint64_t v12 = (uint64_t)a2 + v10;
    *(void *)(a1 + 48) = a2[6];
    *(void *)(a1 + 56) = v9;
    uint64_t v13 = type metadata accessor for URL();
    char v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16);
    swift_bridgeObjectRetain();
    v14(v11, v12, v13);
    *(void *)(v7 + *(int *)(a3 + 36)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 36));
  }
  return v7;
}

uint64_t destroy for FakeQueriesList(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 32);
  uint64_t v5 = type metadata accessor for URL();
  double v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

uint64_t initializeWithCopy for FakeQueriesList(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  long long v7 = *(_OWORD *)(a2 + 16);
  long long v8 = *(_OWORD *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v9;
  uint64_t v10 = *(int *)(a3 + 32);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  *(_OWORD *)(a1 + 16) = v7;
  *(_OWORD *)(a1 + 32) = v8;
  uint64_t v13 = type metadata accessor for URL();
  char v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16);
  swift_bridgeObjectRetain();
  v14(v11, v12, v13);
  *(void *)(a1 + *(int *)(a3 + 36)) = *(void *)(a2 + *(int *)(a3 + 36));
  return a1;
}

void *assignWithCopy for FakeQueriesList(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  uint64_t v6 = *(int *)(a3 + 32);
  long long v7 = (char *)a1 + v6;
  long long v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  *(void *)((char *)a1 + *(int *)(a3 + 36)) = *(void *)((char *)a2 + *(int *)(a3 + 36));
  return a1;
}

uint64_t initializeWithTake for FakeQueriesList(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v7;
  uint64_t v8 = *(int *)(a3 + 32);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  *(void *)(a1 + *(int *)(a3 + 36)) = *(void *)(a2 + *(int *)(a3 + 36));
  return a1;
}

uint64_t assignWithTake for FakeQueriesList(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  long long v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  uint64_t v7 = *(int *)(a3 + 32);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  *(void *)(a1 + *(int *)(a3 + 36)) = *(void *)(a2 + *(int *)(a3 + 36));
  return a1;
}

uint64_t getEnumTagSinglePayload for FakeQueriesList(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_249D31540);
}

uint64_t sub_249D31540(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for URL();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 32);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for FakeQueriesList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_249D31604);
}

void *sub_249D31604(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for URL();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 32);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for FakeQueriesList()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for FakeQueriesList.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x249D3182CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

void *type metadata accessor for FakeQueriesList.CodingKeys()
{
  return &unk_26FDD1728;
}

unint64_t specialized RandomNumberGenerator.next<A>(upperBound:)(unint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    unint64_t __buf = 0;
    arc4random_buf(&__buf, 8uLL);
    uint64_t result = (__buf * (unsigned __int128)v1) >> 64;
    if (__buf * v1 < v1)
    {
      unint64_t v2 = -(uint64_t)v1 % v1;
      if (v2 > __buf * v1)
      {
        do
        {
          unint64_t __buf = 0;
          arc4random_buf(&__buf, 8uLL);
        }
        while (v2 > __buf * v1);
        return (__buf * (unsigned __int128)v1) >> 64;
      }
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t specialized RandomAccessCollection<>.index(_:offsetBy:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  BOOL v4 = __OFADD__(a1, a2);
  uint64_t result = a1 + a2;
  if (v4)
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  switch(a4 >> 62)
  {
    case 1uLL:
      uint64_t v7 = (int)a3;
      uint64_t v6 = a3 >> 32;
      break;
    case 2uLL:
      uint64_t v7 = *(void *)(a3 + 16);
      uint64_t v6 = *(void *)(a3 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v7 = 0;
      uint64_t v6 = BYTE6(a4);
      break;
  }
  if (v6 < result || result < v7)
  {
LABEL_10:
    __break(1u);
    JUMPOUT(0x249D31ADCLL);
  }
  return result;
}

uint64_t specialized RandomAccessCollection<>.distance(from:to:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  switch(a4 >> 62)
  {
    case 1uLL:
      uint64_t v5 = (int)a3;
      uint64_t v4 = a3 >> 32;
      break;
    case 2uLL:
      uint64_t v5 = *(void *)(a3 + 16);
      uint64_t v4 = *(void *)(a3 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v5 = 0;
      uint64_t v4 = BYTE6(a4);
      break;
  }
  if (v4 < a1 || v5 > a1)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  switch(a4 >> 62)
  {
    case 1uLL:
      uint64_t v7 = (int)a3;
      uint64_t v6 = a3 >> 32;
      break;
    case 2uLL:
      uint64_t v7 = *(void *)(a3 + 16);
      uint64_t v6 = *(void *)(a3 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v7 = 0;
      uint64_t v6 = BYTE6(a4);
      break;
  }
  if (v6 < a2 || v7 > a2) {
    goto LABEL_16;
  }
  BOOL v8 = __OFSUB__(a2, a1);
  uint64_t result = a2 - a1;
  if (v8)
  {
LABEL_17:
    __break(1u);
    JUMPOUT(0x249D31BB8);
  }
  return result;
}

char *specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v4 = *v2;
  int64_t v5 = *((void *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  uint64_t result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (result && v9 <= *((void *)v4 + 3) >> 1)
  {
    if (!v8) {
      goto LABEL_21;
    }
  }
  else
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    uint64_t result = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v11, 1, v4);
    uint64_t v4 = result;
    if (!v8) {
      goto LABEL_21;
    }
  }
  uint64_t v12 = *((void *)v4 + 2);
  BOOL v13 = __OFSUB__(v12, a2);
  uint64_t v14 = v12 - a2;
  if (v13) {
    goto LABEL_27;
  }
  if ((v14 & 0x8000000000000000) == 0)
  {
    uint64_t result = &v4[16 * a1 + 32];
    uint64_t v15 = &v4[16 * a2 + 32];
    size_t v16 = 16 * v14;
    if (16 * a1 != 16 * a2 || result >= &v15[v16]) {
      uint64_t result = (char *)memmove(result, v15, v16);
    }
    uint64_t v17 = *((void *)v4 + 2);
    BOOL v13 = __OFADD__(v17, v8);
    uint64_t v18 = v17 + v8;
    if (!v13)
    {
      *((void *)v4 + 2) = v18;
LABEL_21:
      *unint64_t v2 = v4;
      return result;
    }
    goto LABEL_28;
  }
LABEL_29:
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized FakeQueriesList.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1953720684 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6C6169725478616DLL && a2 == 0xE900000000000073 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656D617261507064 && a2 == 0xEC00000073726574 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x756F436472616873 && a2 == 0xEA0000000000746ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x68746150656C6966 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x8000000249E95DA0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

uint64_t lazy protocol witness table accessor for type FakeQueriesList and conformance FakeQueriesList(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t dispatch thunk of LRUCache.init(useCase:cacheElementCount:cacheEntryMinutesToLive:getCurrentDate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 8))();
}

uint64_t dispatch thunk of LRUCache.removeExpiredValues()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of LRUCache.removeAllValues()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of LRUCache.removeValues(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of LRUCache.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

uint64_t dispatch thunk of LRUCache.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 48))();
}

uint64_t dispatch thunk of LRUCache.subscript.modify(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 56))();
}

void AuthenticationError.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

BOOL static AuthenticationError.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

Swift::Int AuthenticationError.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

unint64_t AuthenticationError.errorDescription.getter(char a1)
{
  unint64_t result = 0xD00000000000002ELL;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD00000000000002CLL;
      break;
    case 2:
      unint64_t result = 0xD000000000000037;
      break;
    case 3:
      unint64_t result = 0xD000000000000015;
      break;
    case 4:
    case 6:
      unint64_t result = 0xD000000000000026;
      break;
    case 5:
      unint64_t result = 0xD000000000000019;
      break;
    case 7:
      unint64_t result = 0xD000000000000022;
      break;
    case 8:
      unint64_t result = 0xD00000000000002DLL;
      break;
    case 9:
      unint64_t result = 0xD00000000000001BLL;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t protocol witness for LocalizedError.errorDescription.getter in conformance AuthenticationError()
{
  return AuthenticationError.errorDescription.getter(*v0);
}

uint64_t getEnumTagSinglePayload for AuthenticationError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF7) {
    goto LABEL_17;
  }
  if (a2 + 9 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 9) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 9;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xA;
  int v8 = v6 - 10;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for AuthenticationError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v6 = ((a2 - 247) >> 8) + 1;
    *unint64_t result = a2 + 9;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x249D3244CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 9;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AuthenticationError()
{
  return &type metadata for AuthenticationError;
}

uint64_t InMemoryLRUCache.__allocating_init(countLimit:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  InMemoryLRUCache.init(countLimit:)(a1);
  return v2;
}

uint64_t InMemoryLRUCache.LinkedListNode.key.getter@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v1 + 80) - 8) + 16))(a1, v1 + *(void *)(*(void *)v1 + 104));
}

uint64_t InMemoryLRUCache.LinkedListNode.value.getter@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v1 + 88) - 8) + 16))(a1, v1 + *(void *)(*(void *)v1 + 112));
}

uint64_t InMemoryLRUCache.LinkedListNode.next.getter()
{
  return swift_retain();
}

uint64_t InMemoryLRUCache.LinkedListNode.next.setter(uint64_t a1)
{
  int v3 = (void *)(v1 + *(void *)(*(void *)v1 + 120));
  swift_beginAccess();
  *int v3 = a1;
  return swift_release();
}

uint64_t (*InMemoryLRUCache.LinkedListNode.next.modify())()
{
  return RequestsManager.CMLUseCaseStatusBuilder.keyExpirationTime.modify;
}

uint64_t InMemoryLRUCache.LinkedListNode.prev.getter()
{
  return swift_weakLoadStrong();
}

uint64_t InMemoryLRUCache.LinkedListNode.prev.setter()
{
  return swift_release();
}

void (*InMemoryLRUCache.LinkedListNode.prev.modify(void *a1))(void **a1, char a2)
{
  int v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[4] = v1;
  v3[5] = *(void *)(*(void *)v1 + 128);
  swift_beginAccess();
  v3[3] = swift_weakLoadStrong();
  return InMemoryLRUCache.LinkedListNode.prev.modify;
}

void InMemoryLRUCache.LinkedListNode.prev.modify(void **a1, char a2)
{
  int v3 = *a1;
  swift_weakAssign();
  if (a2)
  {
    swift_release();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_release();
  }
  free(v3);
}

uint64_t InMemoryLRUCache.LinkedListNode.__allocating_init(key:value:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  InMemoryLRUCache.LinkedListNode.init(key:value:)(a1, a2);
  return v4;
}

uint64_t *InMemoryLRUCache.LinkedListNode.init(key:value:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  *(uint64_t *)((char *)v2 + *(void *)(*v2 + 120)) = 0;
  swift_weakInit();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v5 + 80) - 8) + 32))((uint64_t)v2 + *(void *)(*v2 + 104), a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v5 + 88) - 8) + 32))((uint64_t)v2 + *(void *)(*v2 + 112), a2);
  return v2;
}

uint64_t *InMemoryLRUCache.LinkedListNode.deinit()
{
  uint64_t v1 = *v0;
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*v0 + 80) - 8) + 8))((uint64_t)v0 + *(void *)(*v0 + 104));
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 88) - 8) + 8))((uint64_t)v0 + *(void *)(*v0 + 112));
  swift_weakDestroy();
  uint64_t v2 = *(void *)(*v0 + 120);
  uint64_t v3 = *(uint64_t *)((char *)v0 + v2);
  *(uint64_t *)((char *)v0 + v2) = 0;
  if (v3)
  {
    do
    {
      if (!swift_isUniquelyReferenced_native()) {
        break;
      }
      uint64_t v4 = *(void *)(v3 + *(void *)(*(void *)v3 + 120));
      swift_retain();
      swift_release();
      uint64_t v3 = v4;
    }
    while (v4);
  }
  swift_release();
  return v0;
}

uint64_t InMemoryLRUCache.LinkedListNode.__deallocating_deinit()
{
  InMemoryLRUCache.LinkedListNode.deinit();
  return swift_deallocClassInstance();
}

uint64_t InMemoryLRUCache.hashTable.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t InMemoryLRUCache.hashTable.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 16) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*InMemoryLRUCache.hashTable.modify())()
{
  return RequestsManager.CMLUseCaseStatusBuilder.lastUsed.modify;
}

uint64_t InMemoryLRUCache.head.getter()
{
  return swift_retain();
}

uint64_t InMemoryLRUCache.head.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 24) = a1;
  return swift_release();
}

uint64_t (*InMemoryLRUCache.head.modify())()
{
  return RequestsManager.CMLUseCaseStatusBuilder.lastUsed.modify;
}

uint64_t InMemoryLRUCache.tail.getter()
{
  return swift_retain();
}

uint64_t InMemoryLRUCache.tail.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 32) = a1;
  return swift_release();
}

uint64_t (*InMemoryLRUCache.tail.modify())()
{
  return RequestsManager.CMLUseCaseStatusBuilder.lastUsed.modify;
}

uint64_t InMemoryLRUCache.countLimit.getter()
{
  return *(void *)(v0 + 40);
}

uint64_t InMemoryLRUCache.count.getter()
{
  uint64_t v1 = (uint64_t (**)(void))(*v0 + 136);
  uint64_t v2 = (*v1)();
  uint64_t v3 = (uint64_t)*(v1 - 7);
  uint64_t v4 = (uint64_t)*(v1 - 5);
  uint64_t v5 = type metadata accessor for InMemoryLRUCache.LinkedListNode();
  uint64_t v6 = MEMORY[0x24C5B3350](v2, v3, v5, v4);
  swift_bridgeObjectRelease();
  return v6;
}

void *InMemoryLRUCache.init(countLimit:)(uint64_t a1)
{
  v1[4] = 0;
  v1[3] = 0;
  type metadata accessor for InMemoryLRUCache.LinkedListNode();
  v1[2] = Dictionary.init(minimumCapacity:)();
  swift_beginAccess();
  v1[3] = 0;
  swift_release();
  v1[5] = a1;
  return v1;
}

uint64_t type metadata accessor for InMemoryLRUCache.LinkedListNode()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t InMemoryLRUCache.pushFront(node:)(uint64_t a1)
{
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)v1 + 160);
  uint64_t v4 = v3();
  (*(void (**)(uint64_t))(*(void *)a1 + 144))(v4);
  uint64_t v5 = (*(uint64_t (**)(void))(*(void *)a1 + 168))(0);
  uint64_t v6 = ((uint64_t (*)(uint64_t))v3)(v5);
  if (v6)
  {
    BOOL v7 = *(void (**)(uint64_t))(*(void *)v6 + 168);
    uint64_t v8 = swift_retain();
    v7(v8);
    swift_release();
  }
  else
  {
    int64_t v9 = *(void (**)(uint64_t))(*(void *)v1 + 192);
    uint64_t v10 = swift_retain();
    v9(v10);
  }
  BOOL v13 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 168);
  uint64_t v11 = swift_retain();
  return v13(v11);
}

uint64_t InMemoryLRUCache.removeNode(node:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 160))(a1);
  uint64_t v5 = (*(uint64_t (**)(void))(*(void *)a1 + 136))();
  if (v4)
  {
    uint64_t v6 = *(void (**)(uint64_t))(*(void *)v4 + 144);
    swift_retain();
    swift_retain();
    v6(v5);
    swift_release();
  }
  if (v5)
  {
    BOOL v7 = *(void (**)(uint64_t))(*(void *)v5 + 168);
    swift_retain();
    swift_retain();
    v7(v4);
    swift_release();
  }
  if (v4)
  {
    if (v5)
    {
LABEL_7:
      swift_release();
      return swift_release();
    }
  }
  else
  {
    int64_t v9 = *(void (**)(uint64_t))(*(void *)v2 + 168);
    uint64_t v10 = swift_retain();
    v9(v10);
    if (v5) {
      goto LABEL_7;
    }
  }
  uint64_t v11 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 192);
  return v11(v4);
}

uint64_t key path setter for InMemoryLRUCache.subscript(_:) : <A, B>InMemoryLRUCache<A, B>AB(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 + a3 - 24);
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v18 - v10;
  double v13 = MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v18 - v14;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))((char *)&v18 - v14, a3, v7, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
  return (*(uint64_t (**)(char *, char *))(**(void **)a2 + 248))(v11, v15);
}

uint64_t InMemoryLRUCache.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = (uint64_t (**)(void))(*v2 + 136);
  uint64_t v6 = (*v5)();
  uint64_t v8 = (uint64_t)*(v5 - 7);
  uint64_t v7 = (uint64_t)*(v5 - 6);
  uint64_t v9 = (uint64_t)*(v5 - 5);
  uint64_t v10 = type metadata accessor for InMemoryLRUCache.LinkedListNode();
  MEMORY[0x24C5B3370](&v15, a1, v6, v8, v10, v9);
  swift_bridgeObjectRelease();
  uint64_t v11 = v15;
  if (v15)
  {
    InMemoryLRUCache.removeNode(node:)(v15);
    InMemoryLRUCache.pushFront(node:)(v11);
    uint64_t v12 = *(void *)(v7 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(a2, v11 + *(void *)(*(void *)v11 + 112), v7);
    swift_release();
    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v12 = *(void *)(v7 - 8);
    uint64_t v13 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(a2, v13, 1, v7);
}

uint64_t InMemoryLRUCache.subscript.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v82 = a2;
  uint64_t v79 = *v2;
  uint64_t v5 = *(void *)(v79 + 80);
  uint64_t v81 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](a1);
  BOOL v78 = (char *)&v70 - v6;
  uint64_t v8 = *(void *)(v7 + 88);
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v70 - v11;
  uint64_t v13 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (void (*)(char *, uint64_t, uint64_t))((char *)&v70 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  double v18 = MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v70 - v19;
  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16);
  uint64_t v80 = a1;
  v21(v12, a1, v9, v18);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, v8) == 1)
  {
    uint64_t v22 = v10;
    uint64_t v24 = v81;
    uint64_t v23 = v82;
    uint64_t v25 = v5;
    uint64_t v75 = *(void *)(v22 + 8);
    uint64_t v26 = ((uint64_t (*)(char *, uint64_t))v75)(v12, v9);
    uint64_t v27 = (*(uint64_t (**)(uint64_t))(*v3 + 136))(v26);
    uint64_t v28 = *(void *)(v79 + 96);
    uint64_t v29 = type metadata accessor for InMemoryLRUCache.LinkedListNode();
    uint64_t v30 = v23;
    MEMORY[0x24C5B3370](v83, v23, v27, v25, v29, v28);
    swift_bridgeObjectRelease();
    uint64_t v31 = v83[0];
    if (v83[0])
    {
      char v32 = *(void (**)(char *, uint64_t, uint64_t))(v24 + 16);
      uint64_t v76 = v9;
      v32(v78, v30, v25);
      uint64_t v84 = 0;
      uint64_t v33 = (void (*)(uint64_t *, void))(*(uint64_t (**)(uint64_t *))(*v3 + 152))(v83);
      type metadata accessor for Dictionary();
      Dictionary.subscript.setter();
      v33(v83, 0);
      InMemoryLRUCache.removeNode(node:)(v31);
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v82, v25);
      uint64_t v34 = v80;
      uint64_t v35 = v76;
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v30, v25);
      uint64_t v34 = v80;
      uint64_t v35 = v9;
    }
    return ((uint64_t (*)(uint64_t, uint64_t))v75)(v34, v35);
  }
  else
  {
    unint64_t v72 = v16;
    uint64_t v75 = v10;
    uint64_t v76 = v9;
    uint64_t v36 = (*(uint64_t (**)(char *, char *, uint64_t))(v13 + 32))(v20, v12, v8);
    uint64_t v37 = (*(uint64_t (**)(uint64_t))(*v3 + 136))(v36);
    uint64_t v38 = *(void *)(v79 + 96);
    uint64_t v39 = type metadata accessor for InMemoryLRUCache.LinkedListNode();
    uint64_t v40 = v82;
    uint64_t v79 = v38;
    MEMORY[0x24C5B3370](v83, v82, v37, v5, v39, v38);
    swift_bridgeObjectRelease();
    uint64_t v77 = v5;
    unint64_t v73 = v20;
    uint64_t v74 = v8;
    if (v83[0])
    {
      uint64_t v71 = v83[0];
      InMemoryLRUCache.removeNode(node:)(v83[0]);
      uint64_t v41 = v81;
      id v42 = *(void (**)(char *, uint64_t, uint64_t))(v81 + 16);
      uint64_t v43 = (uint64_t)v78;
      v42(v78, v82, v77);
      uint64_t v44 = (uint64_t)v72;
      (*(void (**)(void, char *, uint64_t))(v13 + 16))(v72, v20, v8);
      uint64_t v45 = v41;
      uint64_t v46 = swift_allocObject();
      InMemoryLRUCache.LinkedListNode.init(key:value:)(v43, v44);
      v42((char *)v43, v82, v77);
      uint64_t v84 = v46;
      uint64_t v47 = *(uint64_t (**)(uint64_t *))(*v3 + 152);
      swift_retain();
      uint64_t v48 = v47(v83);
      uint64_t v49 = v82;
      uint64_t v50 = v77;
      uint64_t v51 = (void (*)(uint64_t *, void))v48;
      type metadata accessor for Dictionary();
      uint64_t v52 = v49;
      Dictionary.subscript.setter();
      v51(v83, 0);
      uint64_t v53 = v73;
      InMemoryLRUCache.pushFront(node:)(v46);
      uint64_t v54 = v74;
      swift_release();
      swift_release();
    }
    else
    {
      uint64_t v56 = v40;
      uint64_t v57 = v8;
      double v58 = *(void (**)(char *, uint64_t, uint64_t))(v81 + 16);
      uint64_t v59 = (uint64_t)v78;
      v58(v78, v56, v5);
      uint64_t v71 = v13;
      unint64_t v60 = *(void (**)(void, char *, uint64_t))(v13 + 16);
      uint64_t v61 = (uint64_t)v72;
      v60(v72, v20, v57);
      uint64_t v62 = swift_allocObject();
      InMemoryLRUCache.LinkedListNode.init(key:value:)(v59, v61);
      unint64_t v72 = v58;
      v58((char *)v59, v56, v5);
      uint64_t v84 = v62;
      uint64_t v63 = *(uint64_t (**)(uint64_t *))(*v3 + 152);
      swift_retain();
      uint64_t v64 = (void (*)(uint64_t *, void))v63(v83);
      type metadata accessor for Dictionary();
      Dictionary.subscript.setter();
      v64(v83, 0);
      uint64_t v65 = InMemoryLRUCache.pushFront(node:)(v62);
      if (v3[5] < (*(uint64_t (**)(uint64_t))(*v3 + 208))(v65)
        && (uint64_t v66 = (*(uint64_t (**)(void))(*v3 + 184))()) != 0)
      {
        uint64_t v67 = v66;
        uint64_t v68 = v77;
        v72(v78, v66 + *(void *)(*(void *)v66 + 104), v77);
        uint64_t v84 = 0;
        uint64_t v69 = (void (*)(uint64_t *, void))v63(v83);
        Dictionary.subscript.setter();
        v69(v83, 0);
        uint64_t v52 = v82;
        uint64_t v50 = v68;
        InMemoryLRUCache.removeNode(node:)(v67);
        swift_release();
        swift_release();
        uint64_t v45 = v81;
        uint64_t v53 = v73;
        uint64_t v54 = v74;
        uint64_t v13 = v71;
      }
      else
      {
        swift_release();
        uint64_t v45 = v81;
        uint64_t v52 = v82;
        uint64_t v53 = v73;
        uint64_t v54 = v74;
        uint64_t v13 = v71;
        uint64_t v50 = v77;
      }
    }
    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v52, v50);
    (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v80, v76);
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v53, v54);
  }
}

void (*InMemoryLRUCache.subscript.modify(void *a1, uint64_t a2))(uint64_t a1, char a2)
{
  uint64_t v5 = malloc(0x48uLL);
  *a1 = v5;
  *uint64_t v5 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = type metadata accessor for Optional();
  v5[1] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v5[2] = v8;
  size_t v9 = *(void *)(v8 + 64);
  v5[3] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v5[4] = v10;
  uint64_t v11 = *(void *)(v6 + 80);
  v5[5] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = v12;
  v5[6] = v12;
  size_t v14 = *(void *)(v12 + 64);
  v5[7] = malloc(v14);
  v5[8] = malloc(v14);
  (*(void (**)(void))(v13 + 16))();
  InMemoryLRUCache.subscript.getter(a2, (uint64_t)v10);
  return InMemoryLRUCache.subscript.modify;
}

void InMemoryLRUCache.subscript.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 56);
  uint64_t v4 = *(void **)(*(void *)a1 + 64);
  if (a2)
  {
    uint64_t v5 = v2[5];
    uint64_t v6 = v2[6];
    uint64_t v8 = (void *)v2[3];
    uint64_t v7 = (void *)v2[4];
    uint64_t v9 = v2[1];
    uint64_t v10 = v2[2];
    (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v8, v7, v9);
    (*(void (**)(void *, void *, uint64_t))(v6 + 32))(v3, v4, v5);
    InMemoryLRUCache.subscript.setter((uint64_t)v8, (uint64_t)v3);
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
  }
  else
  {
    uint64_t v8 = (void *)v2[3];
    uint64_t v7 = (void *)v2[4];
    InMemoryLRUCache.subscript.setter((uint64_t)v7, (uint64_t)v4);
  }
  free(v4);
  free(v3);
  free(v7);
  free(v8);
  free(v2);
}

uint64_t InMemoryLRUCache.deinit()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v0;
}

uint64_t InMemoryLRUCache.__deallocating_deinit()
{
  InMemoryLRUCache.deinit();
  return swift_deallocClassInstance();
}

uint64_t static InMemoryLRUCache.LinkedListNode<>.== infix(_:_:)()
{
  if (dispatch thunk of static Equatable.== infix(_:_:)()) {
    return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
  }
  else {
    return 0;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <> InMemoryLRUCache<A, B>.LinkedListNode()
{
  return static InMemoryLRUCache.LinkedListNode<>.== infix(_:_:)();
}

uint64_t sub_249D34224@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 136))();
  *a2 = result;
  return result;
}

uint64_t sub_249D34270(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 144);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_249D342C4()
{
  return 24;
}

__n128 sub_249D342D0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_249D342E4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 160))();
  *a2 = result;
  return result;
}

uint64_t sub_249D34330(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 168);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_249D34384()
{
  return 24;
}

__n128 sub_249D34390(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_249D343A4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 136))();
  *a2 = result;
  return result;
}

uint64_t sub_249D343F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 144);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_249D34444()
{
  return 24;
}

__n128 sub_249D34450(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_249D34464@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 160))();
  *a2 = result;
  return result;
}

uint64_t sub_249D344B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 168);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_249D34504()
{
  return 24;
}

__n128 sub_249D34510(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_249D34524@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 184))();
  *a2 = result;
  return result;
}

uint64_t sub_249D34570(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 192);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_249D345C4()
{
  return 24;
}

__n128 sub_249D345D0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_249D345E4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(**(void **)a1 + 240))(a2);
}

uint64_t sub_249D34630()
{
  return 24;
}

__n128 sub_249D3463C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t type metadata instantiation function for InMemoryLRUCache()
{
  return MEMORY[0x270FA01A0]();
}

uint64_t type metadata completion function for InMemoryLRUCache()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for InMemoryLRUCache()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t method lookup function for InMemoryLRUCache(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for InMemoryLRUCache);
}

uint64_t dispatch thunk of InMemoryLRUCache.hashTable.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of InMemoryLRUCache.hashTable.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of InMemoryLRUCache.hashTable.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of InMemoryLRUCache.head.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of InMemoryLRUCache.head.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of InMemoryLRUCache.head.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of InMemoryLRUCache.tail.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of InMemoryLRUCache.tail.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of InMemoryLRUCache.tail.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of InMemoryLRUCache.count.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of InMemoryLRUCache.__allocating_init(countLimit:)()
{
  return (*(uint64_t (**)(void))(v0 + 216))();
}

uint64_t dispatch thunk of InMemoryLRUCache.subscript.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t dispatch thunk of InMemoryLRUCache.subscript.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

uint64_t dispatch thunk of InMemoryLRUCache.subscript.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 256))();
}

uint64_t type metadata completion function for InMemoryLRUCache.LinkedListNode()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_initClassMetadata2();
      if (!result) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t method lookup function for InMemoryLRUCache.LinkedListNode(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for InMemoryLRUCache.LinkedListNode);
}

uint64_t dispatch thunk of InMemoryLRUCache.LinkedListNode.next.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of InMemoryLRUCache.LinkedListNode.next.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of InMemoryLRUCache.LinkedListNode.next.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of InMemoryLRUCache.LinkedListNode.prev.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of InMemoryLRUCache.LinkedListNode.prev.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of InMemoryLRUCache.LinkedListNode.prev.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of InMemoryLRUCache.LinkedListNode.__allocating_init(key:value:)()
{
  return (*(uint64_t (**)(void))(v0 + 184))();
}

uint64_t __swift_instantiateGenericMetadata()
{
  return swift_getGenericMetadata();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> RequestsManager.loadDynamicAllowList()()
{
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for dynamicAllowListFile != -1) {
    swift_once();
  }
  uint64_t v6 = __swift_project_value_buffer(v2, (uint64_t)static CacheDirectory.dynamicAllowListFile);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v6, v2);
  specialized AllowList.__allocating_init(file:)(v5);
  if (!v1)
  {
    uint64_t v7 = *(os_unfair_lock_s **)(v0 + 48);
    uint64_t v8 = (uint64_t)&v7[4];
    uint64_t v9 = v7 + 6;
    os_unfair_lock_lock(v7 + 6);
    partial apply for closure #1 in RequestsManager.loadDynamicAllowList()(v8);
    os_unfair_lock_unlock(v9);
    swift_release();
  }
}

void RequestsManager.listUseCaseGroups()()
{
  uint64_t v2 = *(os_unfair_lock_s **)(v0 + 48);
  uint64_t v3 = v2 + 4;
  uint64_t v4 = v2 + 6;
  os_unfair_lock_lock(v2 + 6);
  closure #1 in OSAllocatedUnfairLock<A>.current.getter(v3, &v6);
  os_unfair_lock_unlock(v4);
  if (v1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v5 = *(void *)(v6 + 32);
    swift_bridgeObjectRetain();
    swift_release();
    specialized _NativeDictionary.mapValues<A>(_:)(v5);
    swift_bridgeObjectRelease();
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> RequestsManager.configureUseCaseGroup(name:group:)(Swift::String name, CMLUseCaseGroup_optional *group)
{
  object = name._object;
  uint64_t countAndFlagsBits = name._countAndFlagsBits;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UseCaseGroup?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (group)
  {
    UseCaseGroup.init(useCaseGroup:)(group, (uint64_t)v8);
    if (v2) {
      return;
    }
    uint64_t v9 = type metadata accessor for UseCaseGroup();
    uint64_t v10 = (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 0, 1, v9);
  }
  else
  {
    uint64_t v11 = type metadata accessor for UseCaseGroup();
    uint64_t v10 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v8, 1, 1, v11);
  }
  MEMORY[0x270FA5388](v10);
  *(&v15 - 4) = countAndFlagsBits;
  *(&v15 - 3) = (uint64_t)object;
  uint64_t v13 = (uint64_t *)&v12[4];
  size_t v14 = v12 + 6;
  *(&v15 - 2) = (uint64_t)v8;
  os_unfair_lock_lock(v12 + 6);
  partial apply for closure #2 in RequestsManager.configureUseCaseGroup(name:group:)(v13);
  os_unfair_lock_unlock(v14);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v8, &demangling cache variable for type metadata for UseCaseGroup?);
}

id UseCaseGroup.useCaseGroup.getter()
{
  uint64_t v1 = (int *)type metadata accessor for UseCaseGroup();
  specialized _NativeDictionary.mapValues<A>(_:)(*(void *)(v0 + v1[8]));
  uint64_t v2 = *(void *)(v0 + v1[5]);
  uint64_t v3 = *(void *)(v0 + v1[6]);
  uint64_t v4 = *(unsigned __int8 *)(v0 + v1[7]);
  id v5 = NetworkConfig.networkConfig.getter();
  id v6 = objc_allocWithZone((Class)CMLUseCaseGroup);
  type metadata accessor for CMLUseCaseConfig();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_release();
  id v8 = objc_msgSend(v6, sel_initWithKeyExpirationMinutes_keyRotationBeforeExpirationMinutes_keyRotationIgnoreMissingEvaluationKey_useCases_networkConfig_, v2, v3, v4, isa, v5);

  return v8;
}

uint64_t UseCaseGroup.init(useCaseGroup:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for NetworkConfig(0);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *MEMORY[0x263F387F0];
  uint64_t v9 = type metadata accessor for HE.SecurityLevel();
  uint64_t v10 = *(void *)(v9 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 104))(a2, v8, v9);
  id v11 = objc_msgSend(a1, sel_keyExpirationMinutes);
  uint64_t v12 = (int *)type metadata accessor for UseCaseGroup();
  *(void *)(a2 + v12[5]) = v11;
  *(void *)(a2 + v12[6]) = objc_msgSend(a1, sel_keyRotationBeforeExpirationMinutes);
  *(unsigned char *)(a2 + v12[7]) = objc_msgSend(a1, sel_keyRotationIgnoreMissingEvaluationKey);
  id v13 = objc_msgSend(a1, sel_useCases);
  type metadata accessor for CMLUseCaseConfig();
  uint64_t v14 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v15 = specialized _NativeDictionary.mapValues<A>(_:)(v14);
  if (v2)
  {
    swift_bridgeObjectRelease();

    return (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(a2, v9);
  }
  else
  {
    uint64_t v16 = v15;
    swift_bridgeObjectRelease();
    *(void *)(a2 + v12[8]) = v16;
    NetworkConfig.init(networkConfig:)(objc_msgSend(a1, sel_networkConfig), (uint64_t)v7);

    return outlined init with take of NetworkConfig((uint64_t)v7, a2 + v12[9], type metadata accessor for NetworkConfig);
  }
}

uint64_t closure #2 in RequestsManager.configureUseCaseGroup(name:group:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v27[0] = a2;
  uint64_t v7 = type metadata accessor for UseCaseGroup();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UseCaseGroup?);
  MEMORY[0x270FA5388](v11 - 8);
  id v13 = (char *)v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)v27 - v15;
  uint64_t v28 = a1;
  uint64_t v17 = *(void *)(*a1 + 32);
  uint64_t v30 = v17;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a4, (uint64_t)v27 - v15, &demangling cache variable for type metadata for UseCaseGroup?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v16, 1, v7) == 1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v16, &demangling cache variable for type metadata for UseCaseGroup?);
    specialized Dictionary._Variant.removeValue(forKey:)(v27[0], a3, (uint64_t)v13);
    swift_bridgeObjectRelease();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v13, &demangling cache variable for type metadata for UseCaseGroup?);
    uint64_t v18 = v30;
  }
  else
  {
    outlined init with take of NetworkConfig((uint64_t)v16, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v29 = v17;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v10, v27[0], a3, isUniquelyReferenced_nonNull_native);
    uint64_t v18 = v29;
    uint64_t v30 = v29;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v20 = v28;
  uint64_t v21 = *(void *)(*v28 + 16);
  uint64_t v22 = *(void *)(*v28 + 24);
  type metadata accessor for AllowList();
  swift_allocObject();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v23 = v27[1];
  uint64_t result = AllowList.init(rlweParams:heSchemes:groups:)(v21, v22, v18);
  if (!v23)
  {
    uint64_t v25 = result;
    if (one-time initialization token for dynamicAllowListFile != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for URL();
    __swift_project_value_buffer(v26, (uint64_t)static CacheDirectory.dynamicAllowListFile);
    AllowList.saveAllowList(path:)();
    uint64_t result = swift_release();
    *uint64_t v20 = v25;
  }
  return result;
}

uint64_t closure #1 in RequestsManager.loadDynamicAllowList()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)a1 + 32);
  uint64_t v5 = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v12 = v4;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v5, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, (uint64_t)&v12);
  if (v2)
  {
    uint64_t result = swift_bridgeObjectRelease();
    __break(1u);
  }
  else
  {
    uint64_t v7 = v12;
    swift_bridgeObjectRelease();
    uint64_t v8 = *(void *)(*(void *)a1 + 16);
    uint64_t v9 = *(void *)(*(void *)a1 + 24);
    swift_allocObject();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v10 = AllowList.init(rlweParams:heSchemes:groups:)(v8, v9, v7);
    uint64_t result = swift_release();
    *(void *)a1 = v10;
  }
  return result;
}

id NetworkConfig.networkConfig.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v28 - v6;
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v28 - v9;
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for NetworkManagerType(0);
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s8CipherML18NetworkManagerTypeOWOcTm_0(v1, (uint64_t)v17, type metadata accessor for NetworkManagerType);
  uint64_t v18 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
  int v19 = (*(uint64_t (**)(char *, uint64_t, int *))(*((void *)v18 - 1) + 48))(v17, 2, v18);
  if (v19)
  {
    if (v19 == 1) {
      return objc_msgSend(objc_allocWithZone((Class)CMLNetworkManager), sel_initWithType_, 0);
    }
    else {
      return objc_msgSend(objc_allocWithZone((Class)CMLNetworkManager), sel_initWithType_, 2);
    }
  }
  else
  {
    uint64_t v21 = (uint64_t)&v17[v18[12]];
    uint64_t v22 = (uint64_t *)&v17[v18[16]];
    uint64_t v23 = *v22;
    unint64_t v28 = v22[1];
    uint64_t v29 = v23;
    char v24 = v17[v18[20]];
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v17, v11);
    outlined init with take of URL?(v21, (uint64_t)v10);
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v7, v14, v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v7, 0, 1, v11);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v10, (uint64_t)v4, &demangling cache variable for type metadata for URL?);
    id v25 = objc_allocWithZone((Class)CMLNetworkManager);
    id v26 = @nonobjc CMLNetworkManager.init(type:endpoint:issuer:authenticationToken:privacyProxyFailOpen:)(1, (uint64_t)v7, (uint64_t)v4, v29, v28, (v24 & 1) == 0);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v10, &demangling cache variable for type metadata for URL?);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
  return v26;
}

void NetworkConfig.init(networkConfig:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v45 = a2;
  uint64_t v4 = type metadata accessor for NetworkManagerType(0);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v41 - v11;
  uint64_t v13 = type metadata accessor for URL();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v18 = MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v41 - v19;
  id v21 = objc_msgSend(a1, sel_type, v18);
  if (v21 == (id)2)
  {

    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
    uint64_t v23 = v45;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v45, 2, 2, v24);
    goto LABEL_6;
  }
  if (v21 == (id)1)
  {
    uint64_t v44 = v2;
    id v26 = objc_msgSend(a1, sel_endpoint);
    if (v26)
    {
      uint64_t v27 = v26;
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v43 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
      v43(v12, v16, v13);
      id v42 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
      v42(v12, 0, 1, v13);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) != 1)
      {
        v43(v20, v12, v13);
        (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v6, v20, v13);
        id v28 = objc_msgSend(a1, sel_issuer);
        if (v28)
        {
          uint64_t v29 = v28;
          static URL._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v30 = 0;
        }
        else
        {
          uint64_t v30 = 1;
        }
        v42(v9, v30, 1, v13);
        uint64_t v31 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
        outlined init with take of URL?((uint64_t)v9, (uint64_t)&v6[v31[12]]);
        id v32 = objc_msgSend(a1, sel_authenticationToken);
        if (v32)
        {
          uint64_t v33 = v32;
          uint64_t v34 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v36 = v35;

          uint64_t v37 = v34;
        }
        else
        {
          uint64_t v37 = 0;
          unint64_t v36 = 0xF000000000000000;
        }
        uint64_t v38 = &v6[v31[16]];
        uint64_t v39 = v31[20];
        *(void *)uint64_t v38 = v37;
        *((void *)v38 + 1) = v36;
        unsigned __int8 v40 = objc_msgSend(a1, sel_privacyProxyFailOpen);

        (*(void (**)(char *, uint64_t))(v14 + 8))(v20, v13);
        v6[v39] = v40 ^ 1;
        (*(void (**)(char *, void, uint64_t, int *))(*((void *)v31 - 1) + 56))(v6, 0, 2, v31);
        uint64_t v23 = v45;
        outlined init with take of NetworkConfig((uint64_t)v6, v45, type metadata accessor for NetworkManagerType);
        goto LABEL_6;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v12, 1, 1, v13);
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v12, &demangling cache variable for type metadata for URL?);
  }
  else if (!v21)
  {

    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
    uint64_t v23 = v45;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v45, 1, 2, v22);
LABEL_6:
    id v25 = (void *)(v23 + *(int *)(type metadata accessor for NetworkConfig(0) + 20));
    void *v25 = 0;
    v25[1] = 0;
    return;
  }
  type metadata accessor for CipherMLError();
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError();
  swift_allocError();
  swift_storeEnumTagMultiPayload();
  swift_willThrow();
}

id UseCase.useCaseConfig.getter()
{
  outlined init with take of UseCase(v0, (uint64_t)&v9);
  outlined init with take of UseCase(v0, (uint64_t)v10);
  if (v16)
  {
    uint64_t v1 = v10[0];
    uint64_t v2 = v14;
    uint64_t v3 = v15;
    if (v11) {
      uint64_t v4 = 0;
    }
    else {
      uint64_t v4 = v10[1];
    }
    if (v13 == 1)
    {
      if (one-time initialization token for defaultCacheEntryMinutesToLive != -1) {
        swift_once();
      }
      uint64_t v5 = static StaticPIRParameters.defaultCacheEntryMinutesToLive;
      if (v3) {
        goto LABEL_9;
      }
    }
    else
    {
      uint64_t v5 = v12;
      if (v15)
      {
LABEL_9:
        swift_bridgeObjectRetain();
        uint64_t v6 = (void *)MEMORY[0x24C5B33F0](v2, v3);
        outlined release of UseCase(v0);
LABEL_13:
        id v7 = objc_msgSend(objc_allocWithZone((Class)CMLUseCaseConfig), sel_initWithType_maxShards_cacheElementCount_cacheEntryMinutesToLive_shardingDependsOn_, 0, v1, v4, v5, v6);

        return v7;
      }
    }
    uint64_t v6 = 0;
    goto LABEL_13;
  }
  return objc_msgSend(objc_allocWithZone((Class)CMLUseCaseConfig), sel_initWithType_maxShards_cacheElementCount_, 1, 0, 0);
}

void UseCase.init(useCaseConfig:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  specialized UseCase.init(useCaseConfig:)(a1, (uint64_t)v4);
  if (!v2) {
    outlined init with take of UseCase((uint64_t)v4, a2);
  }
}

id @nonobjc CMLNetworkManager.init(type:endpoint:issuer:authenticationToken:privacyProxyFailOpen:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, char a6)
{
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v12 = *(void *)(v11 - 8);
  char v13 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  uint64_t v15 = 0;
  if (v13(a2, 1, v11) != 1)
  {
    URL._bridgeToObjectiveC()(v14);
    uint64_t v15 = v16;
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a2, v11);
  }
  if (v13(a3, 1, v11) == 1)
  {
    double v18 = 0;
  }
  else
  {
    URL._bridgeToObjectiveC()(v17);
    double v18 = v19;
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a3, v11);
  }
  if (a5 >> 60 == 15)
  {
    Class isa = 0;
  }
  else
  {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data?(a4, a5);
  }
  id v21 = objc_msgSend(v24, sel_initWithType_endpoint_issuer_authenticationToken_privacyProxyFailOpen_, a1, v15, v18, isa, a6 & 1);

  return v21;
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B)@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (uint64_t)a1
     + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: UseCaseGroup))
              + 48);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, UseCaseGroup));
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  _s8CipherML18NetworkManagerTypeOWOcTm_0(v4, (uint64_t)a2 + *(int *)(v5 + 48), (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
  *a2 = v7;
  a2[1] = v6;
  return swift_bridgeObjectRetain();
}

uint64_t specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for UseCaseGroup();
  uint64_t v57 = *(void *)(v10 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v10 - 8);
  uint64_t v49 = (uint64_t)v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v48 = (uint64_t)v47 - v14;
  MEMORY[0x270FA5388](v13);
  char v16 = (char *)v47 - v15;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (String, UseCaseGroup)?);
  MEMORY[0x270FA5388](v17 - 8);
  uint64_t v19 = (void *)((char *)v47 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v20 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v21 = ~v20;
  uint64_t v22 = *(void *)(a1 + 64);
  uint64_t v23 = -v20;
  uint64_t v50 = a1;
  uint64_t v51 = a1 + 64;
  if (v23 < 64) {
    uint64_t v24 = ~(-1 << v23);
  }
  else {
    uint64_t v24 = -1;
  }
  uint64_t v52 = v21;
  uint64_t v53 = 0;
  uint64_t v54 = v24 & v22;
  uint64_t v55 = a2;
  uint64_t v56 = a3;
  v47[1] = a1;
  swift_bridgeObjectRetain();
  v47[0] = a3;
  swift_retain();
  specialized LazyMapSequence.Iterator.next()((uint64_t)v19);
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, UseCaseGroup));
  for (int i = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v25 - 8) + 48))(v19, 1, v25);
        ;
        int i = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v25 - 8) + 48))(v19, 1, v25))
  {
    if (i == 1)
    {
      swift_release();
      swift_bridgeObjectRelease();
      outlined consume of [String : String].Iterator._Variant();
      return swift_release();
    }
    uint64_t v31 = *v19;
    uint64_t v30 = v19[1];
    outlined init with take of NetworkConfig((uint64_t)v19 + *(int *)(v25 + 48), (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
    id v32 = *(void **)a5;
    unint64_t v34 = specialized __RawDictionaryStorage.find<A>(_:)(v31, v30);
    uint64_t v35 = v32[2];
    BOOL v36 = (v33 & 1) == 0;
    uint64_t v37 = v35 + v36;
    if (__OFADD__(v35, v36)) {
      break;
    }
    char v38 = v33;
    if (v32[3] >= v37)
    {
      if (a4)
      {
        uint64_t v41 = *(void **)a5;
        if (v33) {
          goto LABEL_5;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        uint64_t v41 = *(void **)a5;
        if (v38) {
          goto LABEL_5;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v37, a4 & 1);
      uint64_t v39 = specialized __RawDictionaryStorage.find<A>(_:)(v31, v30);
      if ((v38 & 1) != (v40 & 1)) {
        goto LABEL_22;
      }
      unint64_t v34 = v39;
      uint64_t v41 = *(void **)a5;
      if (v38)
      {
LABEL_5:
        unint64_t v27 = *(void *)(v57 + 72) * v34;
        uint64_t v28 = v49;
        _s8CipherML18NetworkManagerTypeOWOcTm_0(v41[7] + v27, v49, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
        uint64_t v29 = v48;
        _s8CipherML18NetworkManagerTypeOWOcTm_0(v28, v48, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
        outlined destroy of UseCaseGroup(v28);
        outlined destroy of UseCaseGroup((uint64_t)v16);
        swift_bridgeObjectRelease();
        outlined assign with take of UseCaseGroup(v29, *(void *)(*(void *)a5 + 56) + v27);
        goto LABEL_6;
      }
    }
    v41[(v34 >> 6) + 8] |= 1 << v34;
    id v42 = (uint64_t *)(v41[6] + 16 * v34);
    *id v42 = v31;
    v42[1] = v30;
    outlined init with take of NetworkConfig((uint64_t)v16, v41[7] + *(void *)(v57 + 72) * v34, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
    uint64_t v43 = v41[2];
    BOOL v44 = __OFADD__(v43, 1);
    uint64_t v45 = v43 + 1;
    if (v44) {
      goto LABEL_21;
    }
    v41[2] = v45;
LABEL_6:
    specialized LazyMapSequence.Iterator.next()((uint64_t)v19);
    uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, UseCaseGroup));
    a4 = 1;
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.mapValues<A>(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UseCaseGroup();
  uint64_t v39 = *(void *)(v2 - 8);
  char v40 = (int *)v2;
  MEMORY[0x270FA5388](v2);
  uint64_t v37 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, CMLUseCaseGroup>);
  uint64_t result = static _DictionaryStorage.copy(original:)();
  int64_t v5 = 0;
  uint64_t v41 = a1;
  uint64_t v8 = *(void *)(a1 + 64);
  uint64_t v7 = a1 + 64;
  uint64_t v6 = v8;
  uint64_t v9 = 1 << *(unsigned char *)(v7 - 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  unint64_t v11 = v10 & v6;
  uint64_t v34 = v7;
  int64_t v35 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v36 = result + 64;
  uint64_t v38 = result;
  uint64_t v12 = (uint64_t)v37;
  if (!v11) {
    goto LABEL_5;
  }
LABEL_4:
  uint64_t v42 = (v11 - 1) & v11;
  int64_t v43 = v5;
  for (unint64_t i = __clz(__rbit64(v11)) | (v5 << 6); ; unint64_t i = __clz(__rbit64(v16)) + (v15 << 6))
  {
    uint64_t v46 = 16 * i;
    uint64_t v18 = *(void *)(v41 + 56);
    uint64_t v19 = (uint64_t *)(*(void *)(v41 + 48) + 16 * i);
    uint64_t v20 = v19[1];
    uint64_t v47 = *v19;
    uint64_t v45 = v20;
    _s8CipherML18NetworkManagerTypeOWOcTm_0(v18 + *(void *)(v39 + 72) * i, v12, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
    uint64_t v21 = v40;
    uint64_t v22 = *(void *)(v12 + v40[8]);
    swift_bridgeObjectRetain();
    specialized _NativeDictionary.mapValues<A>(_:)(v22);
    uint64_t v23 = *(void *)(v12 + v21[5]);
    uint64_t v44 = *(void *)(v12 + v21[6]);
    uint64_t v24 = *(unsigned __int8 *)(v12 + v21[7]);
    id v25 = NetworkConfig.networkConfig.getter();
    id v26 = objc_allocWithZone((Class)CMLUseCaseGroup);
    type metadata accessor for CMLUseCaseConfig();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_release();
    id v28 = objc_msgSend(v26, sel_initWithKeyExpirationMinutes_keyRotationBeforeExpirationMinutes_keyRotationIgnoreMissingEvaluationKey_useCases_networkConfig_, v23, v44, v24, isa, v25);

    outlined destroy of UseCaseGroup(v12);
    *(void *)(v36 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    uint64_t result = v38;
    uint64_t v29 = (void *)(*(void *)(v38 + 48) + v46);
    uint64_t v30 = v45;
    void *v29 = v47;
    v29[1] = v30;
    *(void *)(*(void *)(result + 56) + 8 * i) = v28;
    uint64_t v31 = *(void *)(result + 16);
    BOOL v14 = __OFADD__(v31, 1);
    uint64_t v32 = v31 + 1;
    if (v14)
    {
      __break(1u);
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    *(void *)(result + 16) = v32;
    unint64_t v11 = v42;
    int64_t v5 = v43;
    if (v42) {
      goto LABEL_4;
    }
LABEL_5:
    BOOL v14 = __OFADD__(v5, 1);
    int64_t v15 = v5 + 1;
    if (v14) {
      goto LABEL_25;
    }
    if (v15 >= v35) {
      return result;
    }
    unint64_t v16 = *(void *)(v34 + 8 * v15);
    if (!v16) {
      break;
    }
LABEL_15:
    uint64_t v42 = (v16 - 1) & v16;
    int64_t v43 = v15;
  }
  int64_t v17 = v15 + 1;
  if (v15 + 1 >= v35) {
    return result;
  }
  unint64_t v16 = *(void *)(v34 + 8 * v17);
  if (v16) {
    goto LABEL_14;
  }
  int64_t v17 = v15 + 2;
  if (v15 + 2 >= v35) {
    return result;
  }
  unint64_t v16 = *(void *)(v34 + 8 * v17);
  if (v16) {
    goto LABEL_14;
  }
  int64_t v17 = v15 + 3;
  if (v15 + 3 >= v35) {
    return result;
  }
  unint64_t v16 = *(void *)(v34 + 8 * v17);
  if (v16)
  {
LABEL_14:
    int64_t v15 = v17;
    goto LABEL_15;
  }
  while (1)
  {
    int64_t v15 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v15 >= v35) {
      return result;
    }
    unint64_t v16 = *(void *)(v34 + 8 * v15);
    ++v17;
    if (v16) {
      goto LABEL_15;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

{
  id v1;
  uint64_t result;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t i;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  char v29;
  void *v30;
  unint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  int64_t v45;
  uint64_t v46;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, UseCase>);
  uint64_t result = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = 0;
  int64_t v43 = a1;
  uint64_t v44 = (void *)result;
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v6 = a1 + 64;
  int64_t v5 = v7;
  uint64_t v8 = 1 << *(unsigned char *)(v6 - 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  uint64_t v10 = v9 & v5;
  uint64_t v39 = v6;
  char v40 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v42 = result + 64;
  if ((v9 & v5) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v11 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (unint64_t i = v11 | (v4 << 6); ; unint64_t i = __clz(__rbit64(v14)) + (v4 << 6))
  {
    unint64_t v16 = (uint64_t *)(*(void *)(v43 + 48) + 16 * i);
    int64_t v17 = *v16;
    uint64_t v18 = v16[1];
    uint64_t v1 = *(id *)(*(void *)(v43 + 56) + 8 * i);
    swift_bridgeObjectRetain();
    uint64_t v19 = objc_msgSend(v1, sel_type);
    uint64_t v45 = v4;
    uint64_t v46 = v18;
    if (v19 == (id)1)
    {

      uint64_t v21 = 0;
      uint64_t v20 = 0;
      unint64_t v27 = 0;
      uint64_t v22 = 0;
      id v28 = 0;
      uint64_t v29 = 0;
      id v25 = 1;
      goto LABEL_29;
    }
    if (v19)
    {
      type metadata accessor for CipherMLError();
      lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError();
      swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      swift_release();

      goto LABEL_37;
    }
    uint64_t v20 = objc_msgSend(v1, sel_cacheElementCount);
    uint64_t v21 = objc_msgSend(v1, sel_maxShards);
    uint64_t v22 = objc_msgSend(v1, sel_cacheEntryMinutesToLive);
    uint64_t v23 = objc_msgSend(v1, sel_shardingDependsOn);
    if (v23)
    {
      uint64_t v24 = v23;
      id v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v41 = v26;
    }
    else
    {
      id v25 = 0;
      uint64_t v41 = 0;
    }
    if (one-time initialization token for maximumCacheEntryMinutesToLive != -1) {
      swift_once();
    }
    if (static StaticPIRParameters.maximumCacheEntryMinutesToLive < (uint64_t)v22) {
      break;
    }
    unint64_t v27 = v20 == 0;

    uint64_t v29 = 1;
    id v28 = v41;
LABEL_29:
    *(void *)(v42 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    uint64_t result = (uint64_t)v44;
    uint64_t v30 = (void *)(v44[6] + 16 * i);
    char *v30 = v17;
    v30[1] = v46;
    uint64_t v31 = v44[7] + (i << 6);
    *(void *)uint64_t v31 = v21;
    *(void *)(v31 + 8) = v20;
    *(void *)(v31 + 16) = v27;
    *(void *)(v31 + 24) = v22;
    *(void *)(v31 + 32) = 0;
    *(void *)(v31 + 40) = v25;
    *(void *)(v31 + 48) = v28;
    *(unsigned char *)(v31 + 56) = v29;
    uint64_t v32 = v44[2];
    uint64_t v33 = __OFADD__(v32, 1);
    uint64_t v34 = v32 + 1;
    if (v33)
    {
      __break(1u);
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
    v44[2] = v34;
    uint64_t v4 = v45;
    if (v10) {
      goto LABEL_4;
    }
LABEL_5:
    uint64_t v13 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      goto LABEL_40;
    }
    if (v13 >= v40) {
      return result;
    }
    BOOL v14 = *(void *)(v39 + 8 * v13);
    ++v4;
    if (!v14)
    {
      uint64_t v4 = v13 + 1;
      if (v13 + 1 >= v40) {
        return result;
      }
      BOOL v14 = *(void *)(v39 + 8 * v4);
      if (!v14)
      {
        uint64_t v4 = v13 + 2;
        if (v13 + 2 >= v40) {
          return result;
        }
        BOOL v14 = *(void *)(v39 + 8 * v4);
        if (!v14)
        {
          int64_t v15 = v13 + 3;
          if (v15 >= v40) {
            return result;
          }
          BOOL v14 = *(void *)(v39 + 8 * v15);
          if (v14)
          {
            uint64_t v4 = v15;
            goto LABEL_18;
          }
          while (1)
          {
            uint64_t v4 = v15 + 1;
            if (__OFADD__(v15, 1)) {
              break;
            }
            if (v4 >= v40) {
              return result;
            }
            BOOL v14 = *(void *)(v39 + 8 * v4);
            ++v15;
            if (v14) {
              goto LABEL_18;
            }
          }
LABEL_41:
          __break(1u);
          goto LABEL_42;
        }
      }
    }
LABEL_18:
    uint64_t v10 = (v14 - 1) & v14;
  }
  if (one-time initialization token for framework == -1) {
    goto LABEL_34;
  }
LABEL_42:
  swift_once();
LABEL_34:
  int64_t v35 = type metadata accessor for Logger();
  __swift_project_value_buffer(v35, (uint64_t)static Logger.framework);
  uint64_t v36 = Logger.logObject.getter();
  uint64_t v37 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v36, v37))
  {
    uint64_t v38 = swift_slowAlloc();
    *(_DWORD *)uint64_t v38 = 134349312;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v38 + 12) = 2048;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_249C3F000, v36, v37, "Invalid cacheEntryMinutesToLive '%{public}ld'. Must be <= %ld", (uint8_t *)v38, 0x16u);
    MEMORY[0x24C5B4790](v38, -1, -1);
  }

  type metadata accessor for CipherMLError();
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError();
  swift_allocError();
  swift_storeEnumTagMultiPayload();
  swift_willThrow();
  swift_release();

  swift_bridgeObjectRelease();
LABEL_37:

  swift_bridgeObjectRelease();
  return (uint64_t)v44;
}

void *specialized _NativeDictionary.mapValues<A>(_:)(uint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, CMLUseCaseConfig>);
  uint64_t result = (void *)static _DictionaryStorage.copy(original:)();
  uint64_t v3 = result;
  int64_t v4 = 0;
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v45 = a1;
  uint64_t v46 = a1 + 64;
  uint64_t v6 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & v5;
  int64_t v47 = (unint64_t)(v6 + 63) >> 6;
  uint64_t v9 = (char *)(result + 8);
  int64_t v43 = (char *)(result + 8);
  uint64_t v44 = result;
  if ((v7 & v5) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v10 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (unint64_t i = v10 | (v4 << 6); ; unint64_t i = __clz(__rbit64(v13)) + (v4 << 6))
  {
    int64_t v15 = (uint64_t *)(*(void *)(a1 + 48) + 16 * i);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    unint64_t v18 = *(void *)(a1 + 56) + (i << 6);
    if (*(unsigned char *)(v18 + 56))
    {
      uint64_t v51 = v16;
      unint64_t v53 = v8;
      int64_t v54 = v4;
      uint64_t v19 = *(void *)v18;
      uint64_t v20 = *(void *)(v18 + 8);
      uint64_t v21 = v17;
      uint64_t v22 = *(void *)(v18 + 16);
      uint64_t v23 = *(void *)(v18 + 24);
      uint64_t v25 = *(void *)(v18 + 32);
      uint64_t v24 = *(void *)(v18 + 40);
      uint64_t v26 = *(void *)(v18 + 48);
      if (v22) {
        uint64_t v27 = 0;
      }
      else {
        uint64_t v27 = *(void *)(v18 + 8);
      }
      uint64_t v50 = v27;
      uint64_t v52 = v21;
      swift_bridgeObjectRetain();
      outlined copy of UseCase(v19, v20, v22, v23, v25, v24, v26, 1);
      uint64_t v28 = v23;
      if (v25)
      {
        if (one-time initialization token for defaultCacheEntryMinutesToLive != -1) {
          swift_once();
        }
        uint64_t v28 = static StaticPIRParameters.defaultCacheEntryMinutesToLive;
      }
      uint64_t v48 = v24;
      uint64_t v49 = v28;
      uint64_t v29 = v23;
      uint64_t v30 = v22;
      uint64_t v31 = v20;
      uint64_t v32 = v19;
      if (v26)
      {
        swift_bridgeObjectRetain();
        uint64_t v33 = MEMORY[0x24C5B33F0](v24, v26);
        uint64_t v34 = v24;
        int64_t v35 = (void *)v33;
        outlined consume of UseCase(v19, v31, v30, v29, v25, v34, v26, 1);
      }
      else
      {
        int64_t v35 = 0;
      }
      id v38 = objc_msgSend(objc_allocWithZone((Class)CMLUseCaseConfig), sel_initWithType_maxShards_cacheElementCount_cacheEntryMinutesToLive_shardingDependsOn_, 0, v19, v50, v49, v35);

      uint64_t result = (void *)outlined consume of UseCase(v32, v31, v30, v29, v25, v48, v26, 1);
      uint64_t v3 = v44;
      a1 = v45;
      uint64_t v9 = v43;
      int64_t v4 = v54;
      uint64_t v17 = v52;
      unint64_t v8 = v53;
      uint64_t v37 = v51;
    }
    else
    {
      id v36 = objc_allocWithZone((Class)CMLUseCaseConfig);
      swift_bridgeObjectRetain();
      uint64_t result = objc_msgSend(v36, sel_initWithType_maxShards_cacheElementCount_, 1, 0, 0);
      uint64_t v37 = v16;
      id v38 = result;
    }
    *(void *)&v9[(i >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << i;
    uint64_t v39 = (void *)(v3[6] + 16 * i);
    *uint64_t v39 = v37;
    v39[1] = v17;
    *(void *)(v3[7] + 8 * i) = v38;
    uint64_t v40 = v3[2];
    BOOL v41 = __OFADD__(v40, 1);
    uint64_t v42 = v40 + 1;
    if (v41)
    {
      __break(1u);
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
    v3[2] = v42;
    if (v8) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v12 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      goto LABEL_37;
    }
    if (v12 >= v47) {
      return v3;
    }
    unint64_t v13 = *(void *)(v46 + 8 * v12);
    ++v4;
    if (!v13)
    {
      int64_t v4 = v12 + 1;
      if (v12 + 1 >= v47) {
        return v3;
      }
      unint64_t v13 = *(void *)(v46 + 8 * v4);
      if (!v13)
      {
        int64_t v4 = v12 + 2;
        if (v12 + 2 >= v47) {
          return v3;
        }
        unint64_t v13 = *(void *)(v46 + 8 * v4);
        if (!v13) {
          break;
        }
      }
    }
LABEL_18:
    unint64_t v8 = (v13 - 1) & v13;
  }
  int64_t v14 = v12 + 3;
  if (v14 >= v47) {
    return v3;
  }
  unint64_t v13 = *(void *)(v46 + 8 * v14);
  if (v13)
  {
    int64_t v4 = v14;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v4 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v4 >= v47) {
      return v3;
    }
    unint64_t v13 = *(void *)(v46 + 8 * v4);
    ++v14;
    if (v13) {
      goto LABEL_18;
    }
  }
LABEL_38:
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in RequestsManager.loadDynamicAllowList()(uint64_t a1)
{
  return closure #1 in RequestsManager.loadDynamicAllowList()(a1, v1);
}

uint64_t partial apply for closure #2 in RequestsManager.configureUseCaseGroup(name:group:)(uint64_t *a1)
{
  return closure #2 in RequestsManager.configureUseCaseGroup(name:group:)(a1, v1[2], v1[3], v1[4]);
}

unint64_t type metadata accessor for CMLUseCaseConfig()
{
  unint64_t result = lazy cache variable for type metadata for CMLUseCaseConfig;
  if (!lazy cache variable for type metadata for CMLUseCaseConfig)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CMLUseCaseConfig);
  }
  return result;
}

uint64_t outlined init with take of URL?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined release of UseCase(uint64_t a1)
{
  return a1;
}

void specialized UseCase.init(useCaseConfig:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v5 = objc_msgSend(a1, sel_type);
  if (v5 == (id)1)
  {

    id v7 = 0;
    id v6 = 0;
    BOOL v14 = 0;
    id v8 = 0;
    uint64_t v13 = 0;
    char v15 = 0;
    uint64_t v11 = 1;
  }
  else
  {
    if (v5)
    {
      type metadata accessor for CipherMLError();
      lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError();
      swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();

      return;
    }
    id v6 = objc_msgSend(a1, sel_cacheElementCount);
    id v7 = objc_msgSend(a1, sel_maxShards);
    id v8 = objc_msgSend(a1, sel_cacheEntryMinutesToLive);
    id v9 = objc_msgSend(a1, sel_shardingDependsOn);
    if (v9)
    {
      unint64_t v10 = v9;
      uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v13 = v12;
    }
    else
    {
      uint64_t v11 = 0;
      uint64_t v13 = 0;
    }
    specialized static StaticPIRParameters.validateCacheParams(cacheElementCount:cacheEntryMinutesToLive:)((uint64_t)v6, v6 == 0, (uint64_t)v8, 0);

    if (v2)
    {
      swift_bridgeObjectRelease();
      return;
    }
    BOOL v14 = v6 == 0;
    char v15 = 1;
  }
  *(void *)a2 = v7;
  *(void *)(a2 + 8) = v6;
  *(void *)(a2 + 16) = v14;
  *(void *)(a2 + 24) = v8;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = v11;
  *(void *)(a2 + 48) = v13;
  *(unsigned char *)(a2 + 56) = v15;
}

uint64_t outlined init with take of NetworkConfig(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t _s8CipherML18NetworkManagerTypeOWOcTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of UseCaseGroup(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UseCaseGroup();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined assign with take of UseCaseGroup(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UseCaseGroup();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x270FA5388](v8 - 8);
  unint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  BOOL v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(a1, 1, v11) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(a1, &demangling cache variable for type metadata for Date?);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, a3, (uint64_t)v10);
    swift_bridgeObjectRelease();
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v10, &demangling cache variable for type metadata for Date?);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v14, a1, v11);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v18 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v14, a2, a3, isUniquelyReferenced_nonNull_native);
    *uint64_t v4 = v18;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecretKey?);
  MEMORY[0x270FA5388](v8 - 8);
  unint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for SecretKey();
  double v12 = MEMORY[0x270FA5388](v11);
  BOOL v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, double))(v15 + 48))(a1, 1, v12) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(a1, &demangling cache variable for type metadata for SecretKey?);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, a3, (uint64_t)v10);
    outlined consume of Data._Representation(a2, a3);
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v10, &demangling cache variable for type metadata for SecretKey?);
  }
  else
  {
    _s8CipherML9SecretKeyVWObTm_0(a1, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for SecretKey);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v19 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v14, a2, a3, isUniquelyReferenced_nonNull_native);
    *uint64_t v4 = v19;
    swift_bridgeObjectRelease();
    return outlined consume of Data._Representation(a2, a3);
  }
}

void *ActiveUseCaseTracker.activeInterval.unsafeMutableAddressor()
{
  return &static ActiveUseCaseTracker.activeInterval;
}

double static ActiveUseCaseTracker.activeInterval.getter()
{
  return 3888000.0;
}

uint64_t ActiveUseCaseTracker.persistenceFile.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of URL?(v1 + OBJC_IVAR____TtC8CipherML20ActiveUseCaseTracker_persistenceFile, a1);
}

uint64_t key path setter for ActiveUseCaseTracker.lastUsed : ActiveUseCaseTracker(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)(*a2 + OBJC_IVAR____TtC8CipherML20ActiveUseCaseTracker_lastUsed);
  swift_beginAccess();
  *uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t ActiveUseCaseTracker.lastUsed.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ActiveUseCaseTracker.lastUsed.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC8CipherML20ActiveUseCaseTracker_lastUsed);
  swift_beginAccess();
  *uint64_t v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*ActiveUseCaseTracker.lastUsed.modify())()
{
  return RequestsManager.CMLUseCaseStatusBuilder.keyExpirationTime.modify;
}

uint64_t ActiveUseCaseTracker.currentDate.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC8CipherML20ActiveUseCaseTracker_currentDate);
  swift_retain();
  return v1;
}

uint64_t ActiveUseCaseTracker.activeUseCases.getter()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = &v15[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  double v6 = MEMORY[0x270FA5388](v5);
  uint64_t v8 = &v15[-v7];
  (*(void (**)(double))(v0 + OBJC_IVAR____TtC8CipherML20ActiveUseCaseTracker_currentDate))(v6);
  Date.addingTimeInterval(_:)();
  uint64_t v9 = *(void (**)(unsigned char *, uint64_t))(v2 + 8);
  v9(v4, v1);
  unint64_t v10 = (uint64_t *)(v0 + OBJC_IVAR____TtC8CipherML20ActiveUseCaseTracker_lastUsed);
  swift_beginAccess();
  uint64_t v11 = *v10;
  uint64_t v16 = v8;
  swift_bridgeObjectRetain();
  uint64_t v12 = specialized _NativeDictionary.filter(_:)((uint64_t)partial apply for closure #1 in ActiveUseCaseTracker.activeUseCases.getter, (uint64_t)v15, v11);
  swift_bridgeObjectRelease();
  uint64_t v13 = specialized Set.init<A>(_:)(v12);
  v9(v8, v1);
  return v13;
}

uint64_t closure #1 in ActiveUseCaseTracker.activeUseCases.getter(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: Date));
  MEMORY[0x270FA5388](v4 - 8);
  double v6 = (uint64_t *)((char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  *double v6 = v7;
  v6[1] = v8;
  unint64_t v10 = (char *)v6 + *(int *)(v9 + 56);
  uint64_t v11 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(v10, a2, v11);
  swift_bridgeObjectRetain();
  char v12 = static Date.> infix(_:_:)();
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for (key: String, value: Date));
  return v12 & 1;
}

uint64_t ActiveUseCaseTracker.__allocating_init(persistenceFile:lastUsed:currentDate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = swift_allocObject();
  swift_defaultActor_initialize();
  outlined init with take of URL?(a1, v8 + OBJC_IVAR____TtC8CipherML20ActiveUseCaseTracker_persistenceFile);
  *(void *)(v8 + OBJC_IVAR____TtC8CipherML20ActiveUseCaseTracker_lastUsed) = a2;
  uint64_t v9 = (void *)(v8 + OBJC_IVAR____TtC8CipherML20ActiveUseCaseTracker_currentDate);
  *uint64_t v9 = a3;
  v9[1] = a4;
  return v8;
}

uint64_t ActiveUseCaseTracker.init(persistenceFile:lastUsed:currentDate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_defaultActor_initialize();
  outlined init with take of URL?(a1, v4 + OBJC_IVAR____TtC8CipherML20ActiveUseCaseTracker_persistenceFile);
  *(void *)(v4 + OBJC_IVAR____TtC8CipherML20ActiveUseCaseTracker_lastUsed) = a2;
  uint64_t v9 = (void *)(v4 + OBJC_IVAR____TtC8CipherML20ActiveUseCaseTracker_currentDate);
  *uint64_t v9 = a3;
  v9[1] = a4;
  return v4;
}

uint64_t ActiveUseCaseTracker.markActive(useCase:active:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v8 - 8);
  id v38 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v10 - 8);
  char v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for URL();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  uint64_t v16 = MEMORY[0x270FA5388](v13);
  uint64_t v37 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  id v36 = (char *)&v34 - v17;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x270FA5388](v18 - 8);
  uint64_t v20 = (char *)&v34 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3)
  {
    uint64_t v21 = *(void (**)(uint64_t))(v4 + OBJC_IVAR____TtC8CipherML20ActiveUseCaseTracker_currentDate);
    uint64_t v22 = swift_bridgeObjectRetain();
    v21(v22);
    uint64_t v23 = type metadata accessor for Date();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v20, 0, 1, v23);
    swift_beginAccess();
  }
  else
  {
    uint64_t v24 = type metadata accessor for Date();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v20, 1, 1, v24);
    swift_beginAccess();
    swift_bridgeObjectRetain();
  }
  specialized Dictionary.subscript.setter((uint64_t)v20, a1, a2);
  swift_endAccess();
  outlined init with copy of URL?(v4 + OBJC_IVAR____TtC8CipherML20ActiveUseCaseTracker_persistenceFile, (uint64_t)v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v12, &demangling cache variable for type metadata for URL?);
    return 0;
  }
  else
  {
    int64_t v35 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
    uint64_t v26 = v36;
    v35(v36, v12, v13);
    uint64_t v34 = os_transaction_create();
    uint64_t v27 = (uint64_t)v38;
    static TaskPriority.background.getter();
    uint64_t v28 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v27, 0, 1, v28);
    uint64_t v29 = v37;
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v37, v26, v13);
    uint64_t active = lazy protocol witness table accessor for type ActiveUseCaseTracker and conformance ActiveUseCaseTracker(&lazy protocol witness table cache variable for type ActiveUseCaseTracker and conformance ActiveUseCaseTracker, (void (*)(uint64_t))type metadata accessor for ActiveUseCaseTracker);
    unint64_t v31 = (*(unsigned __int8 *)(v14 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
    uint64_t v32 = (char *)swift_allocObject();
    *((void *)v32 + 2) = v4;
    *((void *)v32 + 3) = active;
    *((void *)v32 + 4) = v34;
    *((void *)v32 + 5) = v4;
    v35(&v32[v31], v29, v13);
    swift_retain_n();
    uint64_t v25 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v27, (uint64_t)&async function pointer to partial apply for closure #1 in ActiveUseCaseTracker.markActive(useCase:active:), (uint64_t)v32);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v26, v13);
  }
  return v25;
}

uint64_t closure #1 in ActiveUseCaseTracker.markActive(useCase:active:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a1;
  return MEMORY[0x270FA2498](closure #1 in ActiveUseCaseTracker.markActive(useCase:active:), a5, 0);
}

uint64_t closure #1 in ActiveUseCaseTracker.markActive(useCase:active:)()
{
  closure #1 in closure #1 in ActiveUseCaseTracker.markActive(useCase:active:)(v0[3], v0[4]);
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

void closure #1 in closure #1 in ActiveUseCaseTracker.markActive(useCase:active:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  dispatch thunk of PropertyListEncoder.outputFormat.setter();
  uint64_t v9 = (uint64_t *)(a1 + OBJC_IVAR____TtC8CipherML20ActiveUseCaseTracker_lastUsed);
  swift_beginAccess();
  uint64_t v33 = *v9;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Date]);
  lazy protocol witness table accessor for type [String : Date] and conformance <> [A : B]();
  uint64_t v10 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  if (v2)
  {
    swift_release();
    swift_bridgeObjectRelease();
    if (one-time initialization token for daemon != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Logger.daemon);
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a2, v5);
    id v15 = v2;
    id v16 = v2;
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = swift_slowAlloc();
      uint64_t v31 = 0;
      uint64_t v20 = v19;
      uint64_t v29 = (void *)swift_slowAlloc();
      uint64_t v30 = swift_slowAlloc();
      uint64_t v33 = v30;
      *(_DWORD *)uint64_t v20 = 136446466;
      lazy protocol witness table accessor for type ActiveUseCaseTracker and conformance ActiveUseCaseTracker((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
      uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v32 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v33);
      os_log_t v28 = v17;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      *(_WORD *)(v20 + 12) = 2114;
      id v23 = v2;
      uint64_t v24 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v32 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v25 = v29;
      void *v29 = v24;

      os_log_t v26 = v28;
      _os_log_impl(&dword_249C3F000, v28, v18, "ActiveUseCaseTracker failed to save lastUsed field to '%{public}s': %{public}@", (uint8_t *)v20, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x24C5B4790](v25, -1, -1);
      uint64_t v27 = v30;
      swift_arrayDestroy();
      MEMORY[0x24C5B4790](v27, -1, -1);
      MEMORY[0x24C5B4790](v20, -1, -1);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    }
  }
  else
  {
    uint64_t v12 = v10;
    unint64_t v13 = v11;
    swift_bridgeObjectRelease();
    Data.write(to:options:)();
    outlined consume of Data._Representation(v12, v13);
    swift_release();
  }
}

Swift::Bool __swiftcall ActiveUseCaseTracker.isActive(useCase:)(Swift::String useCase)
{
  uint64_t v2 = v1;
  object = useCase._object;
  uint64_t countAndFlagsBits = useCase._countAndFlagsBits;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  unint64_t v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v27 - v13;
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v27 - v16;
  os_log_type_t v18 = (uint64_t *)(v2 + OBJC_IVAR____TtC8CipherML20ActiveUseCaseTracker_lastUsed);
  swift_beginAccess();
  uint64_t v19 = *v18;
  if (*(void *)(v19 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(countAndFlagsBits, (uint64_t)object);
    if (v21)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v7, *(void *)(v19 + 56) + *(void *)(v9 + 72) * v20, v8);
      uint64_t v22 = 0;
    }
    else
    {
      uint64_t v22 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, v22, 1, v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) != 1)
    {
      uint64_t v24 = (*(uint64_t (**)(char *, char *, uint64_t))(v9 + 32))(v17, v7, v8);
      (*(void (**)(uint64_t))(v2 + OBJC_IVAR____TtC8CipherML20ActiveUseCaseTracker_currentDate))(v24);
      Date.addingTimeInterval(_:)();
      uint64_t v25 = *(void (**)(char *, uint64_t))(v9 + 8);
      v25(v11, v8);
      char v23 = static Date.> infix(_:_:)();
      v25(v14, v8);
      v25(v17, v8);
      return v23 & 1;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, 1, 1, v8);
  }
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v7, &demangling cache variable for type metadata for Date?);
  char v23 = 0;
  return v23 & 1;
}

uint64_t ActiveUseCaseTracker.deinit()
{
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v0 + OBJC_IVAR____TtC8CipherML20ActiveUseCaseTracker_persistenceFile, &demangling cache variable for type metadata for URL?);
  swift_bridgeObjectRelease();
  swift_release();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t ActiveUseCaseTracker.__deallocating_deinit()
{
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v0 + OBJC_IVAR____TtC8CipherML20ActiveUseCaseTracker_persistenceFile, &demangling cache variable for type metadata for URL?);
  swift_bridgeObjectRelease();
  swift_release();
  swift_defaultActor_destroy();
  return MEMORY[0x270FA2418](v0);
}

uint64_t ActiveUseCaseTracker.unownedExecutor.getter()
{
  return v0;
}

double specialized Dictionary._Variant.removeValue(forKey:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v13 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v11 = v13;
    }
    swift_bridgeObjectRelease();
    outlined init with take of Any((_OWORD *)(*(void *)(v11 + 56) + 32 * v8), a3);
    specialized _NativeDictionary._delete(at:)(v8, v11);
    *uint64_t v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v21 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v11 = v21;
    }
    swift_bridgeObjectRelease();
    uint64_t v12 = *(void *)(v11 + 56);
    uint64_t v13 = type metadata accessor for Date();
    uint64_t v20 = *(void *)(v13 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v20 + 32))(a3, v12 + *(void *)(v20 + 72) * v8, v13);
    specialized _NativeDictionary._delete(at:)(v8, v11, MEMORY[0x263F07490]);
    *uint64_t v4 = v11;
    swift_bridgeObjectRelease();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
    uint64_t v15 = a3;
    uint64_t v16 = 0;
    uint64_t v17 = v13;
  }
  else
  {
    uint64_t v18 = type metadata accessor for Date();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
    uint64_t v17 = v18;
    uint64_t v15 = a3;
    uint64_t v16 = 1;
  }
  return v14(v15, v16, 1, v17);
}

{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v8;
  char v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t vars8;

  uint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v21 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v11 = v21;
    }
    swift_bridgeObjectRelease();
    uint64_t v12 = *(void *)(v11 + 56);
    uint64_t v13 = type metadata accessor for UseCaseGroup();
    uint64_t v20 = *(void *)(v13 - 8);
    _s8CipherML9SecretKeyVWObTm_0(v12 + *(void *)(v20 + 72) * v8, a3, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
    specialized _NativeDictionary._delete(at:)(v8, v11, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
    *uint64_t v4 = v11;
    swift_bridgeObjectRelease();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
    uint64_t v15 = a3;
    uint64_t v16 = 0;
    uint64_t v17 = v13;
  }
  else
  {
    uint64_t v18 = type metadata accessor for UseCaseGroup();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
    uint64_t v17 = v18;
    uint64_t v15 = a3;
    uint64_t v16 = 1;
  }
  return v14(v15, v16, 1, v17);
}

{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v8;
  char v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t vars8;

  uint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v21 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v11 = v21;
    }
    outlined consume of Data._Representation(*(void *)(*(void *)(v11 + 48) + 16 * v8), *(void *)(*(void *)(v11 + 48) + 16 * v8 + 8));
    uint64_t v12 = *(void *)(v11 + 56);
    uint64_t v13 = type metadata accessor for SecretKey();
    uint64_t v20 = *(void *)(v13 - 8);
    _s8CipherML9SecretKeyVWObTm_0(v12 + *(void *)(v20 + 72) * v8, a3, (uint64_t (*)(void))type metadata accessor for SecretKey);
    specialized _NativeDictionary._delete(at:)(v8, v11);
    *uint64_t v4 = v11;
    swift_bridgeObjectRelease();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
    uint64_t v15 = a3;
    uint64_t v16 = 0;
    uint64_t v17 = v13;
  }
  else
  {
    uint64_t v18 = type metadata accessor for SecretKey();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
    uint64_t v17 = v18;
    uint64_t v15 = a3;
    uint64_t v16 = 1;
  }
  return v14(v15, v16, 1, v17);
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *v3;
  uint64_t v12 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()();
    uint64_t v9 = v12;
  }
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(*(void *)(v9 + 56) + 8 * v6);
  specialized _NativeDictionary._delete(at:)(v6, v9);
  *uint64_t v3 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

unint64_t specialized _NativeDictionary._delete(at:)(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v10 = Hasher._finalize()();
        double result = swift_bridgeObjectRelease();
        unint64_t v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(a2 + 48);
          uint64_t v13 = (_OWORD *)(v12 + 16 * v3);
          uint64_t v14 = (_OWORD *)(v12 + 16 * v6);
          if (v3 != v6 || v13 >= v14 + 1) {
            _OWORD *v13 = *v14;
          }
          uint64_t v15 = *(void *)(a2 + 56);
          uint64_t v16 = (_OWORD *)(v15 + 32 * v3);
          uint64_t v17 = (_OWORD *)(v15 + 32 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v16 >= v17 + 2))
          {
            long long v9 = v17[1];
            *uint64_t v16 = *v17;
            v16[1] = v9;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v19 = *v18;
    uint64_t v20 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    uint64_t v19 = (-1 << result) - 1;
  }
  *uint64_t v18 = v20 & v19;
  uint64_t v21 = *(void *)(a2 + 16);
  BOOL v22 = __OFSUB__(v21, 1);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::Int v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        long long v9 = Hasher._finalize()();
        double result = swift_bridgeObjectRelease();
        Swift::Int v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          unint64_t v11 = *(void *)(a2 + 48);
          uint64_t v12 = (_OWORD *)(v11 + 16 * v3);
          uint64_t v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            char *v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          uint64_t v15 = (void *)(v14 + 8 * v3);
          uint64_t v16 = (void *)(v14 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            *uint64_t v15 = *v16;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v18 = *v17;
    uint64_t v19 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v19 = *v17;
    uint64_t v18 = (-1 << result) - 1;
  }
  *uint64_t v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  uint64_t v21 = __OFSUB__(v20, 1);
  BOOL v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        long long v9 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v6);
        Swift::Int v10 = *v9;
        unint64_t v11 = v9[1];
        Hasher.init(_seed:)();
        outlined copy of Data._Representation(v10, v11);
        Data.hash(into:)();
        uint64_t v12 = Hasher._finalize()();
        double result = outlined consume of Data._Representation(v10, v11);
        uint64_t v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8) {
            goto LABEL_5;
          }
        }
        else if (v13 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          uint64_t v14 = *(void *)(a2 + 48);
          uint64_t v15 = (_OWORD *)(v14 + 16 * v3);
          uint64_t v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || v15 >= v16 + 1) {
            *uint64_t v15 = *v16;
          }
          uint64_t v17 = *(void *)(a2 + 56);
          uint64_t v18 = (void *)(v17 + 8 * v3);
          uint64_t v19 = (void *)(v17 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v18 >= v19 + 1))
          {
            *uint64_t v18 = *v19;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v21 = *v20;
    BOOL v22 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    BOOL v22 = *v20;
    uint64_t v21 = (-1 << result) - 1;
  }
  *uint64_t v20 = v22 & v21;
  uint64_t v23 = *(void *)(a2 + 16);
  uint64_t v24 = __OFSUB__(v23, 1);
  uint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  int64_t v20;
  unint64_t v21;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      while (1)
      {
        long long v9 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v6);
        Swift::Int v10 = *v9;
        unint64_t v11 = v9[1];
        Hasher.init(_seed:)();
        outlined copy of Data._Representation(v10, v11);
        Data.hash(into:)();
        uint64_t v12 = Hasher._finalize()();
        double result = outlined consume of Data._Representation(v10, v11);
        uint64_t v13 = v12 & v7;
        if (v3 >= (uint64_t)v8) {
          break;
        }
        if (v13 < v8) {
          goto LABEL_11;
        }
LABEL_12:
        uint64_t v14 = *(void *)(a2 + 48);
        uint64_t v15 = (_OWORD *)(v14 + 16 * v3);
        uint64_t v16 = (_OWORD *)(v14 + 16 * v6);
        if (v3 != v6 || v15 >= v16 + 1) {
          *uint64_t v15 = *v16;
        }
        uint64_t v17 = *(void *)(a2 + 56);
        uint64_t v18 = *(void *)(*(void *)(type metadata accessor for SecretKey() - 8) + 72);
        uint64_t v19 = v18 * v3;
        double result = v17 + v18 * v3;
        uint64_t v20 = v18 * v6;
        uint64_t v21 = v17 + v18 * v6 + v18;
        if (v19 < v20 || result >= v21)
        {
          double result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          int64_t v3 = v6;
          if (v19 == v20) {
            goto LABEL_6;
          }
          double result = swift_arrayInitWithTakeBackToFront();
        }
        int64_t v3 = v6;
LABEL_6:
        unint64_t v6 = (v6 + 1) & v7;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          goto LABEL_21;
        }
      }
      if (v13 < v8) {
        goto LABEL_6;
      }
LABEL_11:
      if (v3 < (uint64_t)v13) {
        goto LABEL_6;
      }
      goto LABEL_12;
    }
LABEL_21:
    uint64_t v23 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v24 = *v23;
    uint64_t v25 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v23 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v25 = *v23;
    uint64_t v24 = (-1 << result) - 1;
  }
  *uint64_t v23 = v25 & v24;
  os_log_t v26 = *(void *)(a2 + 16);
  uint64_t v27 = __OFSUB__(v26, 1);
  os_log_t v28 = v26 - 1;
  if (v27)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v28;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t specialized _NativeDictionary._delete(at:)(unint64_t result, uint64_t a2, uint64_t (*a3)(void))
{
  int64_t v4 = result;
  uint64_t v5 = a2 + 64;
  uint64_t v6 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v7 = (result + 1) & ~v6;
  if (((1 << v7) & *(void *)(a2 + 64 + 8 * (v7 >> 6))) != 0)
  {
    uint64_t v9 = ~v6;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v5 + 8 * (v7 >> 6)) & (1 << v7)) != 0)
    {
      unint64_t v10 = (result + 1) & v9;
      while (1)
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v11 = Hasher._finalize()();
        double result = swift_bridgeObjectRelease();
        unint64_t v12 = v11 & v9;
        if (v4 >= (uint64_t)v10) {
          break;
        }
        if (v12 < v10) {
          goto LABEL_11;
        }
LABEL_12:
        uint64_t v13 = *(void *)(a2 + 48);
        uint64_t v14 = (_OWORD *)(v13 + 16 * v4);
        uint64_t v15 = (_OWORD *)(v13 + 16 * v7);
        if (v4 != v7 || v14 >= v15 + 1) {
          *uint64_t v14 = *v15;
        }
        uint64_t v16 = *(void *)(a2 + 56);
        uint64_t v17 = *(void *)(*(void *)(a3(0) - 8) + 72);
        int64_t v18 = v17 * v4;
        double result = v16 + v17 * v4;
        int64_t v19 = v17 * v7;
        unint64_t v20 = v16 + v17 * v7 + v17;
        if (v18 < v19 || result >= v20)
        {
          double result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          int64_t v4 = v7;
          if (v18 == v19) {
            goto LABEL_6;
          }
          double result = swift_arrayInitWithTakeBackToFront();
        }
        int64_t v4 = v7;
LABEL_6:
        unint64_t v7 = (v7 + 1) & v9;
        if (((*(void *)(v5 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
          goto LABEL_21;
        }
      }
      if (v12 < v10) {
        goto LABEL_6;
      }
LABEL_11:
      if (v4 < (uint64_t)v12) {
        goto LABEL_6;
      }
      goto LABEL_12;
    }
LABEL_21:
    BOOL v22 = (uint64_t *)(v5 + 8 * ((unint64_t)v4 >> 6));
    uint64_t v23 = *v22;
    uint64_t v24 = (-1 << v4) - 1;
  }
  else
  {
    BOOL v22 = (uint64_t *)(v5 + 8 * (result >> 6));
    uint64_t v24 = *v22;
    uint64_t v23 = (-1 << result) - 1;
  }
  *BOOL v22 = v24 & v23;
  uint64_t v25 = *(void *)(a2 + 16);
  BOOL v26 = __OFSUB__(v25, 1);
  uint64_t v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t specialized _NativeDictionary.filter(_:)(uint64_t isStackAllocationSafe, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (uint64_t (*)(void *, char *))isStackAllocationSafe;
  v14[1] = *MEMORY[0x263EF8340];
  char v7 = *(unsigned char *)(a3 + 32);
  unint64_t v8 = (unint64_t)((1 << v7) + 63) >> 6;
  size_t v9 = 8 * v8;
  if ((v7 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x270FA5388](isStackAllocationSafe);
    bzero((char *)v14 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v9);
    specialized closure #1 in _NativeDictionary.filter(_:)((void *)((char *)v14 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0)), v8, a3, v6);
    if (v3) {
      swift_willThrow();
    }
    else {
      return v10;
    }
  }
  else
  {
    Swift::Int v11 = (void *)swift_slowAlloc();
    bzero(v11, v9);
    specialized closure #1 in _NativeDictionary.filter(_:)((unint64_t *)v11, v8, a3, v6);
    a2 = v12;
    MEMORY[0x24C5B4790](v11, -1, -1);
  }
  return a2;
}

void specialized closure #1 in _NativeDictionary.filter(_:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void *, char *))
{
  uint64_t v37 = a4;
  uint64_t v30 = a2;
  uint64_t v31 = a1;
  uint64_t v40 = type metadata accessor for Date();
  v7.n128_f64[0] = MEMORY[0x270FA5388](v40);
  size_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = 0;
  int64_t v11 = 0;
  id v38 = (void *)a3;
  uint64_t v12 = *(void *)(a3 + 64);
  uint64_t v33 = a3 + 64;
  uint64_t v13 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & v12;
  int64_t v34 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v35 = v6 + 16;
  uint64_t v36 = v6;
  uint64_t v16 = (void (**)(char *, uint64_t))(v6 + 8);
LABEL_4:
  uint64_t v32 = v10;
  while (v15)
  {
    unint64_t v17 = __clz(__rbit64(v15));
    v15 &= v15 - 1;
    unint64_t v18 = v17 | (v11 << 6);
    uint64_t v19 = v40;
LABEL_18:
    uint64_t v23 = v38[7];
    uint64_t v24 = (void *)(v38[6] + 16 * v18);
    uint64_t v25 = v24[1];
    v39[0] = *v24;
    v39[1] = v25;
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v36 + 16))(v9, v23 + *(void *)(v36 + 72) * v18, v19, v7);
    swift_bridgeObjectRetain();
    char v26 = v37(v39, v9);
    if (v4) {
      goto LABEL_28;
    }
    char v27 = v26;
    (*v16)(v9, v19);
    swift_bridgeObjectRelease();
    if (v27)
    {
      uint64_t v28 = v32;
      *(unint64_t *)((char *)v31 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      BOOL v20 = __OFADD__(v28, 1);
      uint64_t v10 = v28 + 1;
      if (!v20) {
        goto LABEL_4;
      }
      __break(1u);
LABEL_28:
      (*v16)(v9, v19);
      swift_bridgeObjectRelease();
      return;
    }
  }
  BOOL v20 = __OFADD__(v11++, 1);
  uint64_t v19 = v40;
  if (v20)
  {
    __break(1u);
    goto LABEL_31;
  }
  if (v11 >= v34) {
    goto LABEL_29;
  }
  unint64_t v21 = *(void *)(v33 + 8 * v11);
  if (v21)
  {
LABEL_17:
    unint64_t v15 = (v21 - 1) & v21;
    unint64_t v18 = __clz(__rbit64(v21)) + (v11 << 6);
    goto LABEL_18;
  }
  int64_t v22 = v11 + 1;
  if (v11 + 1 >= v34) {
    goto LABEL_29;
  }
  unint64_t v21 = *(void *)(v33 + 8 * v22);
  if (v21) {
    goto LABEL_16;
  }
  int64_t v22 = v11 + 2;
  if (v11 + 2 >= v34) {
    goto LABEL_29;
  }
  unint64_t v21 = *(void *)(v33 + 8 * v22);
  if (v21) {
    goto LABEL_16;
  }
  int64_t v22 = v11 + 3;
  if (v11 + 3 >= v34)
  {
LABEL_29:
    specialized _NativeDictionary.extractDictionary(using:count:)(v31, v30, v32, v38);
    return;
  }
  unint64_t v21 = *(void *)(v33 + 8 * v22);
  if (v21)
  {
LABEL_16:
    int64_t v11 = v22;
    goto LABEL_17;
  }
  while (1)
  {
    int64_t v11 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v11 >= v34) {
      goto LABEL_29;
    }
    unint64_t v21 = *(void *)(v33 + 8 * v11);
    ++v22;
    if (v21) {
      goto LABEL_17;
    }
  }
LABEL_31:
  __break(1u);
}

uint64_t specialized ActiveUseCaseTracker.__allocating_init(persistenceFile:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v3 = MEMORY[0x270FA5388](v2 - 8);
  uint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  __n128 v7 = (char *)&v20 - v6;
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v20 - v11;
  unint64_t v13 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  outlined init with copy of URL?(a1, (uint64_t)v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v7, &demangling cache variable for type metadata for URL?);
  }
  else
  {
    unint64_t v22 = v13;
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v12, v7, v8);
    uint64_t v14 = Data.init(contentsOf:options:)();
    unint64_t v16 = v15;
    uint64_t v21 = a1;
    type metadata accessor for PropertyListDecoder();
    swift_allocObject();
    PropertyListDecoder.init()();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Date]);
    lazy protocol witness table accessor for type [String : Date] and conformance <> [A : B]();
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
    outlined consume of Data._Representation(v14, v16);
    swift_release();
    unint64_t v13 = v23;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    swift_bridgeObjectRelease();
    a1 = v21;
  }
  outlined init with copy of URL?(a1, (uint64_t)v5);
  type metadata accessor for ActiveUseCaseTracker();
  uint64_t v17 = swift_allocObject();
  swift_defaultActor_initialize();
  outlined init with take of URL?((uint64_t)v5, v17 + OBJC_IVAR____TtC8CipherML20ActiveUseCaseTracker_persistenceFile);
  *(void *)(v17 + OBJC_IVAR____TtC8CipherML20ActiveUseCaseTracker_lastUsed) = v13;
  unint64_t v18 = (void *)(v17 + OBJC_IVAR____TtC8CipherML20ActiveUseCaseTracker_currentDate);
  *unint64_t v18 = closure #1 in default argument 4 of RequestsManager.init(configCache:keyStorage:activeUseCaseTracker:allowList:currentTime:);
  v18[1] = 0;
  outlined destroy of AMDPbHEConfig.OneOf_Config?(a1, &demangling cache variable for type metadata for URL?);
  return v17;
}

uint64_t outlined init with copy of URL?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in ActiveUseCaseTracker.activeUseCases.getter(uint64_t *a1, uint64_t a2)
{
  return closure #1 in ActiveUseCaseTracker.activeUseCases.getter(a1, a2) & 1;
}

uint64_t type metadata accessor for ActiveUseCaseTracker()
{
  uint64_t result = type metadata singleton initialization cache for ActiveUseCaseTracker;
  if (!type metadata singleton initialization cache for ActiveUseCaseTracker) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_249D3A960()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return MEMORY[0x270FA0238](v0, v5, v6);
}

uint64_t partial apply for closure #1 in ActiveUseCaseTracker.markActive(useCase:active:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for URL() - 8);
  uint64_t v5 = *(void *)(v1 + 40);
  uint64_t v6 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  __n128 v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *__n128 v7 = v2;
  v7[3] = v5;
  v7[4] = v6;
  v7[1] = protocol witness for NetworkManager.uploadKeys(evaluationKeys:userId:) in conformance AspireNetworkManager;
  v7[2] = a1;
  return MEMORY[0x270FA2498](closure #1 in ActiveUseCaseTracker.markActive(useCase:active:), v5, 0);
}

uint64_t sub_249D3AB30@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (void *)(*a1 + OBJC_IVAR____TtC8CipherML20ActiveUseCaseTracker_lastUsed);
  swift_beginAccess();
  *a2 = *v3;
  return swift_bridgeObjectRetain();
}

uint64_t ObjC metadata update function for ActiveUseCaseTracker()
{
  return type metadata accessor for ActiveUseCaseTracker();
}

void type metadata completion function for ActiveUseCaseTracker()
{
  type metadata accessor for URL?();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for ActiveUseCaseTracker(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for ActiveUseCaseTracker);
}

uint64_t dispatch thunk of ActiveUseCaseTracker.lastUsed.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of ActiveUseCaseTracker.lastUsed.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of ActiveUseCaseTracker.lastUsed.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of ActiveUseCaseTracker.activeUseCases.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of ActiveUseCaseTracker.__allocating_init(persistenceFile:lastUsed:currentDate:)()
{
  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t dispatch thunk of ActiveUseCaseTracker.markActive(useCase:active:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of ActiveUseCaseTracker.isActive(useCase:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t _s8CipherML9SecretKeyVWObTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t lazy protocol witness table accessor for type ActiveUseCaseTracker and conformance ActiveUseCaseTracker(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t OSAllocatedUnfairLock<A>.current.getter(os_unfair_lock_s *a1)
{
  uint64_t v1 = a1 + 4;
  uint64_t v2 = a1 + 6;
  os_unfair_lock_lock(a1 + 6);
  closure #1 in OSAllocatedUnfairLock<A>.current.getter(v1, &v4);
  os_unfair_lock_unlock(v2);
  return v4;
}

uint8_t *AllowList.__allocating_init()()
{
  return specialized AllowList.__allocating_init()();
}

uint64_t *AllowList.empty.unsafeMutableAddressor()
{
  if (one-time initialization token for empty != -1) {
    swift_once();
  }
  return &static AllowList.empty;
}

uint64_t AllowList.group(useCase:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v6 = *(void *)(v3 + 48);
  if (*(void *)(v6 + 16))
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
    if (v10)
    {
      uint64_t v11 = (uint64_t *)(*(void *)(v6 + 56) + 16 * v9);
      uint64_t v13 = *v11;
      uint64_t v12 = v11[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v14 = *(void *)(v4 + 32);
      if (*(void *)(v14 + 16) && (uint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(v13, v12), (v16 & 1) != 0))
      {
        uint64_t v17 = v15;
        uint64_t v18 = *(void *)(v14 + 56);
        uint64_t v19 = type metadata accessor for UseCaseGroup();
        uint64_t v20 = *(void *)(v19 - 8);
        outlined init with copy of UseCaseGroup(v18 + *(void *)(v20 + 72) * v17, a3, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v20 + 56))(a3, 0, 1, v19);
      }
      else
      {
        uint64_t v24 = type metadata accessor for UseCaseGroup();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(a3, 1, 1, v24);
      }
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v21 = type metadata accessor for UseCaseGroup();
  unint64_t v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56);
  return v22(a3, 1, 1, v21);
}

uint64_t AllowList.isAllowListed(group:encryptionParameters:)(uint64_t a1, uint64_t a2)
{
  uint64_t v75 = a1;
  uint64_t v74 = type metadata accessor for AspireHeEncryptionParameters(0);
  MEMORY[0x270FA5388](v74);
  uint64_t v76 = (uint64_t)v60 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for HE.RlweParams();
  uint64_t v77 = *(void *)(v6 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  BOOL v78 = (char *)v60 - v10;
  uint64_t v11 = type metadata accessor for HE.Scheme();
  uint64_t v12 = MEMORY[0x270FA5388](v11);
  MEMORY[0x270FA5388](v12);
  char v16 = (char *)v60 - v13;
  uint64_t v17 = *(void *)(a2 + 56);
  uint64_t v18 = a2;
  int v19 = *(unsigned __int8 *)(a2 + 64);
  if (v19 != 1 || !v17)
  {
    type metadata accessor for CipherMLError();
    _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_7((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
    swift_allocError();
    *(void *)uint64_t v23 = v17;
    *(unsigned char *)(v23 + 8) = v19;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    return 1;
  }
  uint64_t v72 = v2;
  uint64_t v65 = v15;
  uint64_t v20 = (unsigned int *)MEMORY[0x263F38848];
  if (v17 != 1) {
    uint64_t v20 = (unsigned int *)MEMORY[0x263F38850];
  }
  uint64_t v21 = v14;
  (*(void (**)(char *, void, uint64_t))(v14 + 104))((char *)v60 - v13, *v20, v11);
  uint64_t v22 = (uint64_t)v78;
  AspireHeEncryptionParameters.rlweParams()((uint64_t)v78);
  if (v3)
  {
    (*(void (**)(char *, uint64_t))(v21 + 8))(v16, v11);
    return 1;
  }
  uint64_t v69 = v16;
  uint64_t v63 = v21;
  uint64_t v64 = v18;
  uint64_t v25 = *(void *)(v72 + 16);
  if (*(void *)(v25 + 16) && (unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(v75), (v27 & 1) != 0))
  {
    unint64_t v28 = *(void *)(*(void *)(v25 + 56) + 8 * v26);
    swift_bridgeObjectRetain();
  }
  else
  {
    unint64_t v28 = MEMORY[0x263F8EE78];
  }
  uint64_t v73 = v6;
  uint64_t v29 = *(void *)(v28 + 16);
  uint64_t v70 = v11;
  uint64_t v75 = v29;
  if (v29)
  {
    uint64_t v30 = v77;
    unint64_t v31 = (*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80);
    uint64_t v32 = v73;
    uint64_t v67 = *(void (**)(char *, unint64_t, uint64_t))(v77 + 16);
    uint64_t v68 = (void (*)(char *, uint64_t))(v77 + 16);
    v67(v9, v28 + v31, v73);
    uint64_t v33 = _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_7(&lazy protocol witness table cache variable for type HE.RlweParams and conformance HE.RlweParams, MEMORY[0x263F387D0]);
    unint64_t v62 = v28;
    swift_bridgeObjectRetain();
    uint64_t v66 = (void (*)(uint64_t, unint64_t, uint64_t))v33;
    char v34 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v35 = v30 + 8;
    uint64_t v71 = *(void (**)(char *, uint64_t))(v30 + 8);
    v71(v9, v32);
    if (v34)
    {
LABEL_15:
      swift_bridgeObjectRelease_n();
      uint64_t v36 = *(void *)(v72 + 24);
      uint64_t v11 = v70;
      uint64_t v22 = (uint64_t)v78;
      uint64_t v75 = *(void *)(v36 + 16);
      if (!v75) {
        goto LABEL_32;
      }
      uint64_t v37 = v63;
      uint64_t v38 = v70;
      unint64_t v62 = (*(unsigned __int8 *)(v37 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80);
      uint64_t v39 = v65;
      uint64_t v66 = *(void (**)(uint64_t, unint64_t, uint64_t))(v63 + 16);
      uint64_t v67 = (void (*)(char *, unint64_t, uint64_t))(v63 + 16);
      v66((uint64_t)v65, v36 + v62, v70);
      _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_7(&lazy protocol witness table cache variable for type HE.Scheme and conformance HE.Scheme, MEMORY[0x263F38858]);
      swift_bridgeObjectRetain();
      uint64_t v40 = v36;
      char v41 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v42 = *(void (**)(char *, uint64_t))(v37 + 8);
      uint64_t v72 = v37 + 8;
      uint64_t v68 = v42;
      v42(v39, v38);
      if (v41)
      {
LABEL_37:
        swift_bridgeObjectRelease();
        v71(v78, v73);
        v68(v69, v70);
        return 1;
      }
      uint64_t v61 = v40;
      if (v75 != 1)
      {
        v60[1] = v35;
        uint64_t v35 = *(void *)(v63 + 72);
        uint64_t v11 = v61 + v35 + v62;
        uint64_t v48 = 1;
        uint64_t v49 = v70;
        while (1)
        {
          v66((uint64_t)v39, v11, v49);
          uint64_t v50 = v48 + 1;
          if (__OFADD__(v48, 1)) {
            break;
          }
          char v51 = dispatch thunk of static Equatable.== infix(_:_:)();
          v68(v39, v49);
          if (v51) {
            goto LABEL_37;
          }
          ++v48;
          v11 += v35;
          if (v50 == v75) {
            goto LABEL_30;
          }
        }
LABEL_39:
        __break(1u);
        goto LABEL_40;
      }
LABEL_30:
      swift_bridgeObjectRelease();
    }
    else
    {
      if (v75 != 1)
      {
        uint64_t v43 = *(void *)(v77 + 72);
        uint64_t v11 = v62 + v43 + v31;
        uint64_t v44 = 1;
        uint64_t v45 = v73;
        while (1)
        {
          v67(v9, v11, v45);
          uint64_t v46 = v44 + 1;
          if (__OFADD__(v44, 1)) {
            break;
          }
          char v47 = dispatch thunk of static Equatable.== infix(_:_:)();
          v71(v9, v45);
          if (v47) {
            goto LABEL_15;
          }
          ++v44;
          v11 += v43;
          if (v46 == v75) {
            goto LABEL_24;
          }
        }
        __break(1u);
        goto LABEL_39;
      }
LABEL_24:
      swift_bridgeObjectRelease_n();
    }
    uint64_t v11 = v70;
    uint64_t v22 = (uint64_t)v78;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
LABEL_32:
  uint64_t v35 = v22;
  if (one-time initialization token for framework != -1) {
LABEL_40:
  }
    swift_once();
  uint64_t v52 = type metadata accessor for Logger();
  __swift_project_value_buffer(v52, (uint64_t)static Logger.framework);
  uint64_t v53 = v76;
  outlined init with copy of UseCaseGroup(v64, v76, type metadata accessor for AspireHeEncryptionParameters);
  int64_t v54 = Logger.logObject.getter();
  os_log_type_t v55 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v54, v55))
  {
    uint64_t v56 = (uint8_t *)swift_slowAlloc();
    uint64_t v57 = swift_slowAlloc();
    uint64_t v80 = v57;
    *(_DWORD *)uint64_t v56 = 136315138;
    _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_7((unint64_t *)&lazy protocol witness table cache variable for type AspireHeEncryptionParameters and conformance AspireHeEncryptionParameters, (void (*)(uint64_t))type metadata accessor for AspireHeEncryptionParameters);
    Swift::String v58 = Message.textFormatString()();
    uint64_t v79 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v58._countAndFlagsBits, (unint64_t)v58._object, &v80);
    uint64_t v11 = v70;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _s8CipherML28AspireHeEncryptionParametersVWOhTm_0(v53, type metadata accessor for AspireHeEncryptionParameters);
    _os_log_impl(&dword_249C3F000, v54, v55, "unsupportedAspireHeEncryptionParams %s", v56, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5B4790](v57, -1, -1);
    MEMORY[0x24C5B4790](v56, -1, -1);
  }
  else
  {
    _s8CipherML28AspireHeEncryptionParametersVWOhTm_0(v53, type metadata accessor for AspireHeEncryptionParameters);
  }

  type metadata accessor for CipherMLError();
  _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_7((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
  swift_allocError();
  outlined init with copy of UseCaseGroup(v64, v59, type metadata accessor for AspireHeEncryptionParameters);
  swift_storeEnumTagMultiPayload();
  swift_willThrow();
  (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v35, v73);
  (*(void (**)(char *, uint64_t))(v63 + 8))(v69, v11);
  return 1;
}

uint64_t AllowList.subscript.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(v3 + 40);
  if (*(void *)(v5 + 16))
  {
    uint64_t v7 = result;
    swift_bridgeObjectRetain();
    uint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v7, a2);
    if (v9)
    {
      uint64_t v10 = *(void *)(v5 + 56) + (v8 << 6);
      uint64_t v11 = *(void *)v10;
      uint64_t v12 = *(void *)(v10 + 8);
      uint64_t v13 = *(void *)(v10 + 16);
      uint64_t v14 = *(void *)(v10 + 24);
      uint64_t v15 = *(void *)(v10 + 32);
      uint64_t v16 = *(void *)(v10 + 40);
      uint64_t v17 = *(void *)(v10 + 48);
      char v18 = *(unsigned char *)(v10 + 56);
      outlined copy of UseCase(*(void *)v10, v12, v13, v14, v15, v16, v17, v18);
    }
    else
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      char v18 = -1;
    }
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    char v18 = -1;
  }
  *(void *)a3 = v11;
  *(void *)(a3 + 8) = v12;
  *(void *)(a3 + 16) = v13;
  *(void *)(a3 + 24) = v14;
  *(void *)(a3 + 32) = v15;
  *(void *)(a3 + 40) = v16;
  *(void *)(a3 + 48) = v17;
  *(unsigned char *)(a3 + 56) = v18;
  return result;
}

uint64_t AllowList.__allocating_init(rlweParams:heSchemes:groups:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  AllowList.init(rlweParams:heSchemes:groups:)(a1, a2, a3);
  return v6;
}

uint64_t AllowList.saveAllowList(path:)()
{
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyListEncoder.init()();
  dispatch thunk of PropertyListEncoder.outputFormat.setter();
  lazy protocol witness table accessor for type AllowListFormat and conformance AllowListFormat();
  uint64_t v1 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  unint64_t v3 = v2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_release();
  if (!v0)
  {
    Data.write(to:options:)();
    return outlined consume of Data._Representation(v1, v3);
  }
  return result;
}

void (*AllowList.__allocating_init(file:)(char *a1))(char *, uint64_t)
{
  return specialized AllowList.__allocating_init(file:)(a1);
}

uint64_t one-time initialization function for empty()
{
  uint64_t v0 = MEMORY[0x263F8EE78];
  unint64_t v1 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  unint64_t v2 = specialized Dictionary.init(dictionaryLiteral:)(v0);
  type metadata accessor for AllowList();
  uint64_t v3 = swift_allocObject();
  uint64_t result = AllowList.init(rlweParams:heSchemes:groups:)(v1, v0, v2);
  static AllowList.empty = v3;
  return result;
}

uint64_t static AllowList.empty.getter()
{
  if (one-time initialization token for empty != -1) {
    swift_once();
  }
  return swift_retain();
}

uint64_t AllowList.rlweParams.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AllowList.heSchemes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AllowList.groups.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AllowList.useCases.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AllowList.useCaseToGroupMap.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AllowList.groupToUseCasesMap.getter()
{
  return swift_bridgeObjectRetain();
}

void *AllowList.keys.getter()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  unint64_t v1 = specialized _copyCollectionToContiguousArray<A>(_:)(v0);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t AllowList.init(rlweParams:heSchemes:groups:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v124 = *v3;
  uint64_t v128 = type metadata accessor for UseCaseGroup();
  uint64_t v127 = *(void *)(v128 - 8);
  MEMORY[0x270FA5388](v128);
  uint64_t v135 = (uint64_t)&v121 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: UseCaseGroup)?);
  uint64_t v9 = MEMORY[0x270FA5388](v8 - 8);
  v132 = (uint64_t *)((char *)&v121 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v9);
  v131 = (uint64_t *)((char *)&v121 - v11);
  v3[2] = a1;
  v3[3] = a2;
  v126 = v3;
  v3[4] = a3;
  uint64_t v12 = *(void *)(a3 + 64);
  uint64_t v123 = a3 + 64;
  uint64_t v13 = 1 << *(unsigned char *)(a3 + 32);
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  else {
    uint64_t v14 = -1;
  }
  unint64_t v15 = v14 & v12;
  int64_t v125 = (unint64_t)(v13 + 63) >> 6;
  int64_t v122 = v125 - 1;
  uint64_t v133 = a3;
  swift_bridgeObjectRetain();
  int64_t v16 = 0;
  uint64_t v17 = (void *)MEMORY[0x263F8EE80];
  v134 = (void *)MEMORY[0x263F8EE80];
  v151 = (void *)MEMORY[0x263F8EE80];
  if (!v15) {
    goto LABEL_8;
  }
  while (2)
  {
    uint64_t v129 = (v15 - 1) & v15;
    int64_t v130 = v16;
    unint64_t v18 = __clz(__rbit64(v15)) | (v16 << 6);
LABEL_6:
    uint64_t v19 = (uint64_t)v132;
    uint64_t v20 = *(void *)(v133 + 56);
    uint64_t v21 = (void *)(*(void *)(v133 + 48) + 16 * v18);
    uint64_t v22 = v21[1];
    void *v132 = *v21;
    *(void *)(v19 + 8) = v22;
    uint64_t v23 = v20 + *(void *)(v127 + 72) * v18;
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: UseCaseGroup));
    outlined init with copy of UseCaseGroup(v23, v19 + *(int *)(v24 + 48), (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v19, 0, 1, v24);
    swift_bridgeObjectRetain();
LABEL_26:
    unint64_t v31 = v131;
    outlined init with take of (key: String, value: UseCaseGroup)?(v19, (uint64_t)v131);
    uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: UseCaseGroup));
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v32 - 8) + 48))(v31, 1, v32) == 1)
    {
      swift_release();
      uint64_t result = (uint64_t)v126;
      v126[5] = v151;
      *(void *)(result + 48) = v17;
      *(void *)(result + 56) = v134;
      return result;
    }
    uint64_t v33 = v31[1];
    uint64_t v139 = *v31;
    uint64_t v34 = (uint64_t)v31 + *(int *)(v32 + 48);
    uint64_t v35 = v135;
    outlined init with take of UseCaseGroup(v34, v135, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
    uint64_t v36 = *(void *)(v35 + *(int *)(v128 + 32));
    uint64_t v37 = *(void *)(v36 + 64);
    uint64_t v136 = v36 + 64;
    uint64_t v38 = 1 << *(unsigned char *)(v36 + 32);
    if (v38 < 64) {
      uint64_t v39 = ~(-1 << v38);
    }
    else {
      uint64_t v39 = -1;
    }
    unint64_t v40 = v39 & v37;
    int64_t v137 = (unint64_t)(v38 + 63) >> 6;
    uint64_t v140 = v36;
    swift_bridgeObjectRetain();
    int64_t v41 = 0;
    uint64_t v42 = (void *)MEMORY[0x263F8EE78];
    uint64_t v138 = v33;
    while (1)
    {
      v152 = v17;
      v150 = v42;
      if (v40)
      {
        uint64_t v142 = (v40 - 1) & v40;
        int64_t v143 = v41;
        unint64_t v43 = __clz(__rbit64(v40)) | (v41 << 6);
        goto LABEL_47;
      }
      int64_t v44 = v41 + 1;
      if (__OFADD__(v41, 1)) {
        goto LABEL_84;
      }
      if (v44 >= v137) {
        break;
      }
      unint64_t v45 = *(void *)(v136 + 8 * v44);
      int64_t v46 = v41 + 1;
      if (!v45)
      {
        int64_t v46 = v41 + 2;
        if (v41 + 2 >= v137) {
          break;
        }
        unint64_t v45 = *(void *)(v136 + 8 * v46);
        if (!v45)
        {
          int64_t v46 = v41 + 3;
          if (v41 + 3 >= v137) {
            break;
          }
          unint64_t v45 = *(void *)(v136 + 8 * v46);
          if (!v45)
          {
            uint64_t v47 = v41 + 4;
            if (v41 + 4 >= v137) {
              break;
            }
            unint64_t v45 = *(void *)(v136 + 8 * v47);
            if (!v45)
            {
              while (1)
              {
                int64_t v46 = v47 + 1;
                if (__OFADD__(v47, 1)) {
                  goto LABEL_85;
                }
                if (v46 >= v137) {
                  goto LABEL_7;
                }
                unint64_t v45 = *(void *)(v136 + 8 * v46);
                ++v47;
                if (v45) {
                  goto LABEL_46;
                }
              }
            }
            int64_t v46 = v41 + 4;
          }
        }
      }
LABEL_46:
      uint64_t v142 = (v45 - 1) & v45;
      int64_t v143 = v46;
      unint64_t v43 = __clz(__rbit64(v45)) + (v46 << 6);
LABEL_47:
      uint64_t v48 = *(void *)(v140 + 56);
      uint64_t v49 = (uint64_t *)(*(void *)(v140 + 48) + 16 * v43);
      uint64_t v50 = v49[1];
      uint64_t v149 = *v49;
      uint64_t v51 = v48 + (v43 << 6);
      uint64_t v53 = *(void *)v51;
      uint64_t v52 = *(void *)(v51 + 8);
      uint64_t v55 = *(void *)(v51 + 16);
      uint64_t v54 = *(void *)(v51 + 24);
      uint64_t v57 = *(void *)(v51 + 32);
      uint64_t v56 = *(void *)(v51 + 40);
      uint64_t v58 = *(void *)(v51 + 48);
      char v59 = *(unsigned char *)(v51 + 56);
      uint64_t v60 = v152[2];
      swift_bridgeObjectRetain();
      uint64_t v147 = v56;
      uint64_t v148 = v58;
      uint64_t v145 = v52;
      uint64_t v146 = v54;
      uint64_t v144 = v53;
      if (v60)
      {
        swift_bridgeObjectRetain();
        uint64_t v141 = v55;
        uint64_t v61 = v58;
        char v62 = v59;
        outlined copy of UseCase(v53, v52, v55, v54, v57, v56, v61, v59);
        uint64_t v63 = v149;
        uint64_t v64 = specialized __RawDictionaryStorage.find<A>(_:)(v149, v50);
        if (v65)
        {
          v114 = (uint64_t *)(v152[7] + 16 * v64);
          uint64_t v116 = *v114;
          uint64_t v115 = v114[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          outlined consume of UseCase(v144, v145, v141, v146, v57, v147, v148, v62);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          type metadata accessor for CipherMLError();
          _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_7((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
          swift_allocError();
          uint64_t *v117 = v63;
          v117[1] = v50;
          v117[2] = v116;
          v117[3] = v115;
          uint64_t v118 = v138;
          v117[4] = v139;
          v117[5] = v118;
          swift_storeEnumTagMultiPayload();
          swift_willThrow();
          swift_release();
          _s8CipherML28AspireHeEncryptionParametersVWOhTm_0(v135, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
          swift_bridgeObjectRelease();
          swift_release();
          v119 = v126;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_deallocPartialClassInstance();
          return (uint64_t)v119;
        }
        swift_bridgeObjectRelease();
        uint64_t v66 = v57;
        uint64_t v67 = v50;
        uint64_t v68 = v141;
      }
      else
      {
        char v69 = v59;
        uint64_t v63 = v149;
        uint64_t v70 = v58;
        char v62 = v69;
        outlined copy of UseCase(v53, v52, v55, v54, v57, v56, v70, v69);
        uint64_t v66 = v57;
        uint64_t v68 = v55;
        uint64_t v67 = v50;
      }
      swift_bridgeObjectRetain();
      uint64_t v71 = v151;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v153 = v71;
      uint64_t v73 = v67;
      unint64_t v75 = specialized __RawDictionaryStorage.find<A>(_:)(v63, v67);
      uint64_t v76 = v71[2];
      BOOL v77 = (v74 & 1) == 0;
      uint64_t v78 = v76 + v77;
      if (__OFADD__(v76, v77))
      {
        __break(1u);
LABEL_81:
        __break(1u);
LABEL_82:
        __break(1u);
LABEL_83:
        __break(1u);
LABEL_84:
        __break(1u);
LABEL_85:
        __break(1u);
        goto LABEL_86;
      }
      char v79 = v74;
      if (v71[3] >= v78)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          specialized _NativeDictionary.copy()();
        }
        uint64_t v80 = v73;
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v78, isUniquelyReferenced_nonNull_native);
        uint64_t v80 = v73;
        uint64_t v81 = specialized __RawDictionaryStorage.find<A>(_:)(v63, v73);
        if ((v79 & 1) != (v82 & 1)) {
          goto LABEL_88;
        }
        unint64_t v75 = v81;
      }
      uint64_t v84 = v144;
      uint64_t v83 = v145;
      char v85 = v153;
      v151 = v153;
      if (v79)
      {
        unint64_t v86 = v153[7] + (v75 << 6);
        outlined consume of UseCase(*(void *)v86, *(void *)(v86 + 8), *(void *)(v86 + 16), *(void *)(v86 + 24), *(void *)(v86 + 32), *(void *)(v86 + 40), *(void *)(v86 + 48), *(unsigned char *)(v86 + 56));
        *(void *)unint64_t v86 = v84;
        *(void *)(v86 + 8) = v83;
        uint64_t v87 = v146;
        *(void *)(v86 + 16) = v68;
        *(void *)(v86 + 24) = v87;
        uint64_t v88 = v147;
        *(void *)(v86 + 32) = v66;
        *(void *)(v86 + 40) = v88;
        *(void *)(v86 + 48) = v148;
        *(unsigned char *)(v86 + 56) = v62;
      }
      else
      {
        v153[(v75 >> 6) + 8] |= 1 << v75;
        __int16 v89 = (uint64_t *)(v85[6] + 16 * v75);
        *__int16 v89 = v63;
        v89[1] = v80;
        unint64_t v90 = v85[7] + (v75 << 6);
        *(void *)unint64_t v90 = v84;
        *(void *)(v90 + 8) = v83;
        uint64_t v91 = v146;
        *(void *)(v90 + 16) = v68;
        *(void *)(v90 + 24) = v91;
        uint64_t v92 = v147;
        *(void *)(v90 + 32) = v66;
        *(void *)(v90 + 40) = v92;
        *(void *)(v90 + 48) = v148;
        *(unsigned char *)(v90 + 56) = v62;
        uint64_t v93 = v85[2];
        BOOL v94 = __OFADD__(v93, 1);
        uint64_t v95 = v93 + 1;
        if (v94) {
          goto LABEL_82;
        }
        v85[2] = v95;
        swift_bridgeObjectRetain();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      uint64_t v33 = v138;
      swift_bridgeObjectRetain();
      uint64_t v96 = v152;
      char v97 = swift_isUniquelyReferenced_nonNull_native();
      v153 = v96;
      unint64_t v99 = specialized __RawDictionaryStorage.find<A>(_:)(v63, v80);
      uint64_t v100 = v96[2];
      BOOL v101 = (v98 & 1) == 0;
      uint64_t v102 = v100 + v101;
      if (__OFADD__(v100, v101)) {
        goto LABEL_81;
      }
      char v103 = v98;
      if (v96[3] >= v102)
      {
        if (v97)
        {
          uint64_t v17 = v153;
          if (v98) {
            goto LABEL_70;
          }
        }
        else
        {
          specialized _NativeDictionary.copy()();
          uint64_t v17 = v153;
          if (v103) {
            goto LABEL_70;
          }
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v102, v97);
        uint64_t v104 = specialized __RawDictionaryStorage.find<A>(_:)(v63, v80);
        if ((v103 & 1) != (v105 & 1)) {
          goto LABEL_88;
        }
        unint64_t v99 = v104;
        uint64_t v17 = v153;
        if (v103)
        {
LABEL_70:
          uint64_t v110 = (void *)(v17[7] + 16 * v99);
          swift_bridgeObjectRelease();
          *uint64_t v110 = v139;
          v110[1] = v33;
          goto LABEL_71;
        }
      }
      v17[(v99 >> 6) + 8] |= 1 << v99;
      uint64_t v106 = (uint64_t *)(v17[6] + 16 * v99);
      *uint64_t v106 = v63;
      v106[1] = v80;
      uint64_t v107 = (void *)(v17[7] + 16 * v99);
      *uint64_t v107 = v139;
      v107[1] = v33;
      uint64_t v108 = v17[2];
      BOOL v94 = __OFADD__(v108, 1);
      uint64_t v109 = v108 + 1;
      if (v94) {
        goto LABEL_83;
      }
      v17[2] = v109;
      swift_bridgeObjectRetain();
LABEL_71:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v42 = v150;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v42 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v42[2] + 1, 1, v42);
      }
      unint64_t v112 = v42[2];
      unint64_t v111 = v42[3];
      if (v112 >= v111 >> 1) {
        uint64_t v42 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v111 > 1), v112 + 1, 1, v42);
      }
      v42[2] = v112 + 1;
      v113 = &v42[2 * v112];
      v113[4] = v63;
      v113[5] = v80;
      unint64_t v40 = v142;
      int64_t v41 = v143;
    }
LABEL_7:
    swift_release();
    uint64_t v25 = v134;
    char v26 = swift_isUniquelyReferenced_nonNull_native();
    v153 = v25;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v42, v139, v33, v26);
    v134 = v153;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _s8CipherML28AspireHeEncryptionParametersVWOhTm_0(v135, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
    int64_t v16 = v130;
    unint64_t v15 = v129;
    if (v129) {
      continue;
    }
    break;
  }
LABEL_8:
  int64_t v27 = v16 + 1;
  if (__OFADD__(v16, 1))
  {
LABEL_86:
    __break(1u);
  }
  else
  {
    uint64_t v19 = (uint64_t)v132;
    if (v27 >= v125) {
      goto LABEL_25;
    }
    unint64_t v28 = *(void *)(v123 + 8 * v27);
    if (v28) {
      goto LABEL_11;
    }
    int64_t v29 = v16 + 2;
    ++v16;
    if (v27 + 1 >= v125) {
      goto LABEL_25;
    }
    unint64_t v28 = *(void *)(v123 + 8 * v29);
    if (v28) {
      goto LABEL_14;
    }
    int64_t v16 = v27 + 1;
    if (v27 + 2 >= v125)
    {
LABEL_25:
      int64_t v130 = v16;
      uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: UseCaseGroup));
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v19, 1, 1, v30);
      uint64_t v129 = 0;
      goto LABEL_26;
    }
    unint64_t v28 = *(void *)(v123 + 8 * (v27 + 2));
    if (v28)
    {
      v27 += 2;
LABEL_11:
      uint64_t v129 = (v28 - 1) & v28;
      unint64_t v18 = __clz(__rbit64(v28)) + (v27 << 6);
      int64_t v130 = v27;
      goto LABEL_6;
    }
    int64_t v29 = v27 + 3;
    int64_t v16 = v27 + 2;
    if (v27 + 3 >= v125) {
      goto LABEL_25;
    }
    unint64_t v28 = *(void *)(v123 + 8 * v29);
    if (v28)
    {
LABEL_14:
      int64_t v27 = v29;
      goto LABEL_11;
    }
    while (1)
    {
      int64_t v27 = v29 + 1;
      if (__OFADD__(v29, 1)) {
        break;
      }
      if (v27 >= v125)
      {
        int64_t v16 = v122;
        goto LABEL_25;
      }
      unint64_t v28 = *(void *)(v123 + 8 * v27);
      ++v29;
      if (v28) {
        goto LABEL_11;
      }
    }
  }
  __break(1u);
LABEL_88:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t AllowList.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t AllowList.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t closure #1 in OSAllocatedUnfairLock<A>.current.getter@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = *a1;
  return swift_retain();
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6 = v5;
  uint64_t v12 = *v5;
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v18 = v13;
  uint64_t v19 = *(void *)(v12 + 24);
  if (v19 >= v17 && (a5 & 1) != 0) {
    goto LABEL_7;
  }
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
LABEL_7:
    uint64_t v20 = (void *)*v6;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = (void *)(v20[7] + 16 * v14);
      uint64_t result = swift_bridgeObjectRelease();
      void *v21 = a1;
      v21[1] = a2;
      return result;
    }
    goto LABEL_11;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a5 & 1);
  uint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  uint64_t v20 = (void *)*v6;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  v20[(v14 >> 6) + 8] |= 1 << v14;
  uint64_t v25 = (uint64_t *)(v20[6] + 16 * v14);
  uint64_t *v25 = a3;
  v25[1] = a4;
  char v26 = (void *)(v20[7] + 16 * v14);
  *char v26 = a1;
  v26[1] = a2;
  uint64_t v27 = v20[2];
  BOOL v28 = __OFADD__(v27, 1);
  uint64_t v29 = v27 + 1;
  if (v28)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  void v20[2] = v29;
  return swift_bridgeObjectRetain();
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
LABEL_7:
    char v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v19 + 8 * v12) = a1;
      return result;
    }
    goto LABEL_11;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
  uint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v21;
  char v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  uint64_t v23 = (uint64_t *)(v18[6] + 16 * v12);
  *uint64_t v23 = a2;
  v23[1] = a3;
  *(void *)(v18[7] + 8 * v12) = a1;
  uint64_t v24 = v18[2];
  BOOL v25 = __OFADD__(v24, 1);
  uint64_t v26 = v24 + 1;
  if (v25)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v18[2] = v26;
  return swift_bridgeObjectRetain();
}

{
  void *v4;
  void **v5;
  void *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  char v27;
  uint64_t vars8;

  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    uint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v27 & 1))
    {
      unint64_t v12 = v26;
      char v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  char v18 = *v5;
  if (v16)
  {
LABEL_8:
    uint64_t v19 = v18[7];
    uint64_t v20 = type metadata accessor for Date();
    uint64_t v21 = *(void *)(v20 - 8);
    char v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 40);
    uint64_t v23 = v20;
    uint64_t v24 = v19 + *(void *)(v21 + 72) * v12;
    return v22(v24, a1, v23);
  }
LABEL_13:
  specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
  return swift_bridgeObjectRetain();
}

{
  void *v4;
  void *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  char v22;
  uint64_t *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t vars8;

  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
LABEL_7:
    char v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];
      uint64_t result = swift_release();
      *(void *)(v19 + 8 * v12) = a1;
      return result;
    }
    goto LABEL_11;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
  uint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v21;
  char v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  uint64_t v23 = (uint64_t *)(v18[6] + 16 * v12);
  *uint64_t v23 = a2;
  v23[1] = a3;
  *(void *)(v18[7] + 8 * v12) = a1;
  uint64_t v24 = v18[2];
  BOOL v25 = __OFADD__(v24, 1);
  uint64_t v26 = v24 + 1;
  if (v25)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v18[2] = v26;
  return swift_bridgeObjectRetain();
}

{
  void *v4;
  void **v5;
  void *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  char v23;
  uint64_t vars8;

  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 >= v15 && (a4 & 1) != 0)
  {
LABEL_7:
    char v18 = *v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];
      uint64_t v20 = type metadata accessor for UseCaseGroup();
      return outlined assign with take of SecretKey(a1, v19 + *(void *)(*(void *)(v20 - 8) + 72) * v12, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
    }
    goto LABEL_11;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
  char v22 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v16 & 1) != (v23 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v22;
  char v18 = *v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
  return swift_bridgeObjectRetain();
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
LABEL_7:
    char v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v19 + 8 * v12) = a1;
      return result;
    }
    goto LABEL_11;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
  uint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v21;
  char v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  uint64_t v23 = (uint64_t *)(v18[6] + 16 * v12);
  *uint64_t v23 = a2;
  v23[1] = a3;
  *(void *)(v18[7] + 8 * v12) = a1;
  uint64_t v24 = v18[2];
  BOOL v25 = __OFADD__(v24, 1);
  uint64_t v26 = v24 + 1;
  if (v25)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v18[2] = v26;
  return outlined copy of Data._Representation(a2, a3);
}

{
  void *v4;
  void **v5;
  void *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  char v23;
  uint64_t vars8;

  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 >= v15 && (a4 & 1) != 0)
  {
LABEL_7:
    char v18 = *v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];
      uint64_t v20 = type metadata accessor for SecretKey();
      return outlined assign with take of SecretKey(a1, v19 + *(void *)(*(void *)(v20 - 8) + 72) * v12, (uint64_t (*)(void))type metadata accessor for SecretKey);
    }
    goto LABEL_11;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
  char v22 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v16 & 1) != (v23 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v22;
  char v18 = *v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
  return outlined copy of Data._Representation(a2, a3);
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = (void *)(a5[6] + 16 * a1);
  *uint64_t v8 = a2;
  v8[1] = a3;
  uint64_t v9 = a5[7];
  uint64_t v10 = type metadata accessor for Date();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v9 + *(void *)(*(void *)(v10 - 8) + 72) * a1, a4, v10);
  uint64_t v12 = a5[2];
  BOOL v13 = __OFADD__(v12, 1);
  uint64_t v14 = v12 + 1;
  if (v13) {
    __break(1u);
  }
  else {
    a5[2] = v14;
  }
  return result;
}

{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = (void *)(a5[6] + 16 * a1);
  *uint64_t v8 = a2;
  v8[1] = a3;
  uint64_t v9 = a5[7];
  uint64_t v10 = type metadata accessor for UseCaseGroup();
  uint64_t result = outlined init with take of UseCaseGroup(a4, v9 + *(void *)(*(void *)(v10 - 8) + 72) * a1, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
  uint64_t v12 = a5[2];
  BOOL v13 = __OFADD__(v12, 1);
  uint64_t v14 = v12 + 1;
  if (v13) {
    __break(1u);
  }
  else {
    a5[2] = v14;
  }
  return result;
}

{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = (void *)(a5[6] + 16 * a1);
  *uint64_t v8 = a2;
  v8[1] = a3;
  uint64_t v9 = a5[7];
  uint64_t v10 = type metadata accessor for SecretKey();
  uint64_t result = outlined init with take of UseCaseGroup(a4, v9 + *(void *)(*(void *)(v10 - 8) + 72) * a1, (uint64_t (*)(void))type metadata accessor for SecretKey);
  uint64_t v12 = a5[2];
  BOOL v13 = __OFADD__(v12, 1);
  uint64_t v14 = v12 + 1;
  if (v13) {
    __break(1u);
  }
  else {
    a5[2] = v14;
  }
  return result;
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v3 = (void *)swift_allocObject();
  int64_t v4 = _swift_stdlib_malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 17;
  }
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  uint64_t v6 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of [String : String].Iterator._Variant();
  if (v6 != v1)
  {
    __break(1u);
    return (void *)MEMORY[0x263F8EE78];
  }
  return v3;
}

{
  uint64_t v1;
  void *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v3 = (void *)swift_allocObject();
  int64_t v4 = _swift_stdlib_malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 17;
  }
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  uint64_t v6 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of [String : String].Iterator._Variant();
  if (v6 != v1)
  {
    __break(1u);
    return (void *)MEMORY[0x263F8EE78];
  }
  return v3;
}

uint64_t *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (uint64_t *)MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Data>);
  uint64_t v3 = (uint64_t *)swift_allocObject();
  int64_t v4 = _swift_stdlib_malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 17;
  }
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  uint64_t v6 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of [String : String].Iterator._Variant();
  if (v6 != v1)
  {
    __break(1u);
    return (uint64_t *)MEMORY[0x263F8EE78];
  }
  return v3;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 56;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  char v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    void *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  void *v20;
  uint64_t v21;

  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  char v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    void *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  char v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = (uint64_t *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = *v20;
    unint64_t v22 = v20[1];
    uint64_t *v11 = *v20;
    v11[1] = v22;
    if (v13 == v10)
    {
      outlined copy of Data._Representation(v21, v22);
      goto LABEL_38;
    }
    v11 += 2;
    uint64_t result = outlined copy of Data._Representation(v21, v22);
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

void (*specialized AllowList.__allocating_init(file:)(char *a1))(char *, uint64_t)
{
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = Data.init(contentsOf:options:)();
  if (v1)
  {
    if (one-time initialization token for framework != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    __swift_project_value_buffer(v18, (uint64_t)static Logger.framework);
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v6, a1, v3);
    int64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = swift_slowAlloc();
      unint64_t v31 = a1;
      unint64_t v22 = (uint8_t *)v21;
      uint64_t v23 = swift_slowAlloc();
      uint64_t v30 = v1;
      uint64_t v32 = v3;
      uint64_t v24 = v23;
      uint64_t v34 = v23;
      *(_DWORD *)unint64_t v22 = 136446210;
      _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_7((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
      uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v33 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      int64_t v17 = *(void (**)(char *, uint64_t))(v4 + 8);
      v17(v6, v32);
      _os_log_impl(&dword_249C3F000, v19, v20, "Unable to load allow list from '%{public}s'", v22, 0xCu);
      swift_arrayDestroy();
      uint64_t v27 = v24;
      uint64_t v3 = v32;
      MEMORY[0x24C5B4790](v27, -1, -1);
      BOOL v28 = v22;
      a1 = v31;
      MEMORY[0x24C5B4790](v28, -1, -1);
    }
    else
    {
      int64_t v17 = *(void (**)(char *, uint64_t))(v4 + 8);
      v17(v6, v3);
    }

    swift_willThrow();
    v17(a1, v3);
  }
  else
  {
    uint64_t v9 = v7;
    unint64_t v10 = v8;
    unint64_t v31 = (char *)v4;
    uint64_t v32 = v3;
    uint64_t v11 = specialized static AllowListParser.parseAllowList(allowListData:)();
    uint64_t v13 = v12;
    uint64_t v15 = v14;
    uint64_t v16 = v11;
    type metadata accessor for AllowList();
    int64_t v17 = (void (*)(char *, uint64_t))swift_allocObject();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v30 = v16;
    AllowList.init(rlweParams:heSchemes:groups:)(v16, v13, v15);
    outlined consume of Data._Representation(v9, v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*((void (**)(char *, uint64_t))v31 + 1))(a1, v32);
  }
  return v17;
}

uint8_t *specialized AllowList.__allocating_init()()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v0 - 8);
  unint64_t v2 = (uint8_t *)&v25 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v3);
  unint64_t v26 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v25 - v8;
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v25 - v10;
  type metadata accessor for CMLXPCServer();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v13 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
  uint64_t v14 = (void *)MEMORY[0x24C5B33F0](0x696C2D776F6C6C61, 0xEA00000000007473);
  uint64_t v15 = (void *)MEMORY[0x24C5B33F0](0x7473696C70, 0xE500000000000000);
  id v16 = objc_msgSend(v13, sel_URLForResource_withExtension_, v14, v15);

  if (v16)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    int64_t v17 = *(void (**)(uint8_t *, char *, uint64_t))(v4 + 32);
    v17(v2, v9, v3);
    (*(void (**)(uint8_t *, void, uint64_t, uint64_t))(v4 + 56))(v2, 0, 1, v3);
    if ((*(unsigned int (**)(uint8_t *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) != 1)
    {
      v17((uint8_t *)v11, (char *)v2, v3);
      uint64_t v18 = v26;
      (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v26, v11, v3);
      uint64_t v19 = v27;
      os_log_type_t v20 = specialized AllowList.__allocating_init(file:)(v18);
      if (!v19) {
        unint64_t v2 = (uint8_t *)v20;
      }
      (*(void (**)(char *, uint64_t))(v4 + 8))(v11, v3);
      return v2;
    }
  }
  else
  {
    (*(void (**)(uint8_t *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v2, 1, 1, v3);
  }
  outlined destroy of URL?((uint64_t)v2);
  if (one-time initialization token for framework != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for Logger();
  __swift_project_value_buffer(v21, (uint64_t)static Logger.framework);
  unint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v22, v23))
  {
    unint64_t v2 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v2 = 0;
    _os_log_impl(&dword_249C3F000, v22, v23, "Can't get url for default allow list", v2, 2u);
    MEMORY[0x24C5B4790](v2, -1, -1);
  }

  type metadata accessor for CipherMLError();
  _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_7((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
  swift_allocError();
  swift_storeEnumTagMultiPayload();
  swift_willThrow();
  return v2;
}

uint64_t outlined init with copy of UseCaseGroup(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with take of (key: String, value: UseCaseGroup)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: UseCaseGroup)?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t _s8CipherML28AspireHeEncryptionParametersVWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t type metadata accessor for AllowList()
{
  return self;
}

uint64_t method lookup function for AllowList(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for AllowList);
}

uint64_t dispatch thunk of AllowList.__allocating_init(rlweParams:heSchemes:groups:)()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t outlined init with take of UseCaseGroup(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined assign with take of SecretKey(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_7(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined destroy of URL?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t TokenFetcherTask.allowListLock.getter()
{
  return swift_retain();
}

uint64_t TokenFetcherTask.currentDate.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_retain();
  return v1;
}

uint64_t (*default argument 1 of TokenFetcherTask.init(allowListLock:getCurrentDate:)())()
{
  return closure #1 in default argument 4 of RequestsManager.init(configCache:keyStorage:activeUseCaseTracker:allowList:currentTime:);
}

void *TokenFetcherTask.__allocating_init(allowListLock:getCurrentDate:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (void *)swift_allocObject();
  result[2] = a1;
  result[3] = a2;
  result[4] = a3;
  return result;
}

void *TokenFetcherTask.init(allowListLock:getCurrentDate:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[2] = a1;
  v3[3] = a2;
  v3[4] = a3;
  return v3;
}

void static TokenFetcherTask.submitBackgroundTask()()
{
}

uint64_t TokenFetcherTask.run()()
{
  v1[15] = v0;
  type metadata accessor for TokenFetcher.TokenFetchContext(0);
  v1[16] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireNetworkManager?);
  v1[17] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TokenFetcher?);
  v1[18] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for TokenFetcher(0);
  v1[19] = v2;
  v1[20] = *(void *)(v2 - 8);
  v1[21] = swift_task_alloc();
  v1[22] = type metadata accessor for NetworkManagerConfig(0);
  v1[23] = swift_task_alloc();
  type metadata accessor for NetworkManagerType(0);
  v1[24] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for UseCaseGroup();
  v1[25] = v3;
  v1[26] = *(void *)(v3 - 8);
  v1[27] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: UseCaseGroup)?);
  v1[28] = swift_task_alloc();
  v1[29] = swift_task_alloc();
  return MEMORY[0x270FA2498](TokenFetcherTask.run(), 0, 0);
}

{
  uint64_t v0;
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  int64_t v22;
  uint64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t (*v72)(void);
  void *v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;

  uint64_t v81 = v0;
  uint64_t v1 = *(os_unfair_lock_s **)(*(void *)(v0 + 120) + 16);
  uint64_t v2 = v1 + 4;
  uint64_t v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  uint64_t v4 = 0;
  closure #1 in OSAllocatedUnfairLock<A>.current.getter(v2, &v80);
  char v79 = v0 + 16;
  uint64_t v78 = v0 + 56;
  unint64_t v75 = (uint64_t *)(v0 + 96);
  os_unfair_lock_unlock(v3);
  uint64_t v5 = v80;
  *(void *)(v0 + 240) = v80;
  uint64_t v6 = *(void *)(v5 + 32);
  *(void *)(v0 + 248) = v6;
  LOBYTE(v5) = *(unsigned char *)(v6 + 32);
  *(unsigned char *)(v0 + 360) = v5;
  uint64_t v7 = 1 << v5;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  uint64_t v9 = v8 & *(void *)(v6 + 64);
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v76 = 0;
  for (*(void *)(v0 + 352) = 0; ; *(void *)(v0 + 352) = v76)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          if (v9)
          {
            uint64_t v12 = __clz(__rbit64(v9));
            v9 &= v9 - 1;
            id v13 = v12 | (v4 << 6);
            uint64_t v14 = *(void *)(v0 + 248);
LABEL_8:
            uint64_t v15 = *(void **)(v0 + 224);
            id v16 = *(void *)(v0 + 208);
            int64_t v17 = (void *)(*(void *)(v14 + 48) + 16 * v13);
            uint64_t v18 = v17[1];
            *uint64_t v15 = *v17;
            v15[1] = v18;
            uint64_t v19 = *(void *)(v14 + 56) + *(void *)(v16 + 72) * v13;
            os_log_type_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: UseCaseGroup));
            _s8CipherML12UseCaseGroupVWOcTm_0(v19, (uint64_t)v15 + *(int *)(v20 + 48), (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
            (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v15, 0, 1, v20);
            swift_bridgeObjectRetain();
            goto LABEL_28;
          }
          uint64_t v21 = v4 + 1;
          if (__OFADD__(v4, 1)) {
            goto LABEL_55;
          }
          unint64_t v22 = (unint64_t)((1 << *(unsigned char *)(v0 + 360)) + 63) >> 6;
          if (v21 < v22)
          {
            uint64_t v14 = *(void *)(v0 + 248);
            os_log_type_t v23 = v14 + 64;
            uint64_t v24 = *(void *)(v14 + 64 + 8 * v21);
            if (v24) {
              goto LABEL_12;
            }
            if (v4 + 2 >= v22) {
              goto LABEL_26;
            }
            uint64_t v24 = *(void *)(v23 + 8 * (v4 + 2));
            if (v24)
            {
              uint64_t v21 = v4 + 2;
LABEL_12:
              uint64_t v9 = (v24 - 1) & v24;
              id v13 = __clz(__rbit64(v24)) + (v21 << 6);
              uint64_t v4 = v21;
              goto LABEL_8;
            }
            if (v4 + 3 < v22)
            {
              uint64_t v24 = *(void *)(v23 + 8 * (v4 + 3));
              if (v24)
              {
                uint64_t v21 = v4 + 3;
                goto LABEL_12;
              }
              uint64_t v21 = v4 + 4;
              if (v4 + 4 >= v22)
              {
                v4 += 3;
                goto LABEL_27;
              }
              uint64_t v24 = *(void *)(v23 + 8 * v21);
              if (v24) {
                goto LABEL_12;
              }
              uint64_t v21 = v22 - 1;
              uint64_t v25 = v22 - 5;
              while (v25 != v4)
              {
                uint64_t v24 = *(void *)(v14 + 104 + 8 * v4++);
                if (v24)
                {
                  uint64_t v21 = v4 + 4;
                  goto LABEL_12;
                }
              }
LABEL_26:
              uint64_t v4 = v21;
              goto LABEL_27;
            }
            v4 += 2;
          }
LABEL_27:
          unint64_t v26 = *(void *)(v0 + 224);
          uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: UseCaseGroup));
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v26, 1, 1, v27);
          uint64_t v9 = 0;
LABEL_28:
          *(void *)(v0 + 256) = v4;
          *(void *)(v0 + 264) = v9;
          BOOL v28 = *(void *)(v0 + 232);
          outlined init with take of (key: String, value: UseCaseGroup)?(*(void *)(v0 + 224), v28);
          uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: UseCaseGroup));
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 48))(v28, 1, v29) == 1)
          {
            swift_release();
            if (v76) {
              swift_willThrow();
            }
            swift_release();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            uint64_t v72 = *(uint64_t (**)(void))(v0 + 8);
            return v72();
          }
          uint64_t v30 = *(void **)(v0 + 232);
          unint64_t v31 = *(void *)(v0 + 216);
          uint64_t v33 = *(void *)(v0 + 192);
          uint64_t v32 = *(void *)(v0 + 200);
          *(void *)(v0 + 272) = *v30;
          *(void *)(v0 + 280) = v30[1];
          _s8CipherML12UseCaseGroupVWObTm_0((uint64_t)v30 + *(int *)(v29 + 48), v31, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
          uint64_t v34 = v31 + *(int *)(v32 + 36);
          _s8CipherML12UseCaseGroupVWOcTm_0(v34, v33, type metadata accessor for NetworkManagerType);
          uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
          if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 48))(v33, 2, v35)) {
            break;
          }
          uint64_t v36 = *(void *)(v0 + 192);
          _s8CipherML12UseCaseGroupVWOhTm_1(*(void *)(v0 + 216), (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
          swift_bridgeObjectRelease();
          uint64_t result = _s8CipherML12UseCaseGroupVWOhTm_1(v36, type metadata accessor for NetworkManagerType);
        }
        uint64_t v37 = *(void *)(v0 + 192);
        uint64_t v38 = v37 + *(int *)(v35 + 48);
        uint64_t v39 = (uint64_t *)(v37 + *(int *)(v35 + 64));
        unint64_t v40 = *v39;
        *(void *)(v0 + 288) = *v39;
        int64_t v41 = v39[1];
        *(void *)(v0 + 296) = v41;
        outlined destroy of AMDPbHEConfig.OneOf_Config?(v38, &demangling cache variable for type metadata for URL?);
        uint64_t v42 = type metadata accessor for URL();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v42 - 8) + 8))(v37, v42);
        if (v41 >> 60 != 15) {
          break;
        }
        uint64_t v11 = *(void *)(v0 + 216);
        swift_bridgeObjectRelease();
        uint64_t result = _s8CipherML12UseCaseGroupVWOhTm_1(v11, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
      }
      unint64_t v43 = *(void *)(v0 + 176);
      int64_t v44 = *(void *)(v0 + 184);
      _s8CipherML12UseCaseGroupVWOcTm_0(v34, v44, type metadata accessor for NetworkConfig);
      unint64_t v45 = (void *)(v44 + *(int *)(v43 + 20));
      char *v45 = 0;
      v45[1] = 0;
      if (one-time initialization token for shared != -1) {
        swift_once();
      }
      (*(void (**)(void))(*(void *)static NetworkManagerHelper.shared + 96))(*(void *)(v0 + 184));
      outlined init with copy of AMDPbHEConfig.OneOf_Config?(v79, v78, &demangling cache variable for type metadata for NetworkManager?);
      int64_t v46 = *(void *)(v0 + 136);
      if (!*(void *)(v0 + 80))
      {
        outlined destroy of AMDPbHEConfig.OneOf_Config?(v78, &demangling cache variable for type metadata for NetworkManager?);
        char v65 = type metadata accessor for AspireNetworkManager();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v65 - 8) + 56))(v46, 1, 1, v65);
        goto LABEL_43;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NetworkManager);
      uint64_t v47 = type metadata accessor for AspireNetworkManager();
      uint64_t v48 = swift_dynamicCast();
      uint64_t v49 = *(void *)(v47 - 8);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v49 + 56))(v46, v48 ^ 1u, 1, v47);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v49 + 48))(v46, 1, v47) != 1) {
        break;
      }
LABEL_43:
      uint64_t v66 = *(void *)(v0 + 152);
      uint64_t v67 = *(void *)(v0 + 160);
      uint64_t v68 = *(void *)(v0 + 144);
      outlined destroy of AMDPbHEConfig.OneOf_Config?(*(void *)(v0 + 136), &demangling cache variable for type metadata for AspireNetworkManager?);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v67 + 56))(v68, 1, 1, v66);
LABEL_44:
      char v69 = *(void *)(v0 + 216);
      uint64_t v70 = *(void *)(v0 + 184);
      uint64_t v71 = *(void *)(v0 + 144);
      swift_bridgeObjectRelease();
      outlined consume of Data?(v40, v41);
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v79, &demangling cache variable for type metadata for NetworkManager?);
      _s8CipherML12UseCaseGroupVWOhTm_1(v70, type metadata accessor for NetworkManagerConfig);
      _s8CipherML12UseCaseGroupVWOhTm_1(v69, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
      uint64_t result = outlined destroy of AMDPbHEConfig.OneOf_Config?(v71, &demangling cache variable for type metadata for TokenFetcher?);
    }
    uint64_t v50 = *(void *)(v0 + 160);
    BOOL v77 = *(void *)(v0 + 152);
    uint64_t v51 = *(void *)(v0 + 136);
    uint64_t v52 = *(void *)(v0 + 144);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v51 + *(int *)(v47 + 32), v52, &demangling cache variable for type metadata for TokenFetcher?);
    _s8CipherML12UseCaseGroupVWOhTm_1(v51, (uint64_t (*)(void))type metadata accessor for AspireNetworkManager);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v50 + 48))(v52, 1, v77) == 1) {
      goto LABEL_44;
    }
    _s8CipherML12UseCaseGroupVWObTm_0(*(void *)(v0 + 144), *(void *)(v0 + 168), type metadata accessor for TokenFetcher);
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    uint64_t v53 = static TokenCache.shared;
    uint64_t v54 = (uint64_t *)(*(void *)(v0 + 168) + *(int *)(*(void *)(v0 + 152) + 20));
    uint64_t v55 = *v54;
    uint64_t v56 = v54[1];
    uint64_t v57 = *(void *)(static TokenCache.shared + OBJC_IVAR____TtC8CipherML10TokenCache_tokensForUserLock);
    uint64_t v58 = (void *)swift_task_alloc();
    v58[2] = v53;
    v58[3] = v55;
    v58[4] = v56;
    os_unfair_lock_lock((os_unfair_lock_t)(v57 + 24));
    partial apply for closure #1 in TokenCache.count(user:)((uint64_t *)(v57 + 16), v75);
    os_unfair_lock_unlock((os_unfair_lock_t)(v57 + 24));
    char v59 = *v75;
    uint64_t result = swift_task_dealloc();
    if (v59 < 5) {
      break;
    }
    uint64_t v60 = *(void *)(v0 + 288);
    uint64_t v61 = *(void *)(v0 + 296);
    char v62 = *(void *)(v0 + 216);
    uint64_t v63 = *(void *)(v0 + 184);
    uint64_t v64 = *(void *)(v0 + 168);
    swift_bridgeObjectRelease();
    outlined consume of Data?(v60, v61);
    _s8CipherML12UseCaseGroupVWOhTm_1(v64, type metadata accessor for TokenFetcher);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v79, &demangling cache variable for type metadata for NetworkManager?);
    _s8CipherML12UseCaseGroupVWOhTm_1(v63, type metadata accessor for NetworkManagerConfig);
    uint64_t result = _s8CipherML12UseCaseGroupVWOhTm_1(v62, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
    uint64_t v4 = *(void *)(v0 + 256);
    uint64_t v9 = *(void *)(v0 + 264);
    uint64_t v76 = *(void *)(v0 + 352);
  }
  *(void *)(v0 + 304) = 10 - v59;
  if (__OFSUB__(10, v59))
  {
LABEL_55:
    __break(1u);
    return result;
  }
  uint64_t v73 = (void *)swift_task_alloc();
  *(void *)(v0 + 312) = v73;
  *uint64_t v73 = v0;
  v73[1] = TokenFetcherTask.run();
  char v74 = *(void *)(v0 + 128);
  return TokenFetcher.fetchContext()(v74);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 320) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = TokenFetcherTask.run();
  }
  else {
    uint64_t v2 = TokenFetcherTask.run();
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v7;

  uint64_t v1 = v0[38];
  uint64_t v2 = v0[21];
  uint64_t v3 = v0[16];
  uint64_t v4 = (void *)swift_task_alloc();
  v0[41] = v4;
  v4[2] = v1;
  v4[3] = v2;
  v4[4] = v3;
  uint64_t v5 = (void *)swift_task_alloc();
  v0[42] = v5;
  *uint64_t v5 = v0;
  v5[1] = TokenFetcherTask.run();
  return MEMORY[0x270FA2368]();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 344) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = TokenFetcherTask.run();
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = TokenFetcherTask.run();
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  int64_t v32;
  uint64_t v33;
  unint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t (*v82)(void);
  void *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  id v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;

  char v98 = v0;
  uint64_t v95 = v0 + 56;
  uint64_t v96 = v0 + 16;
  uint64_t v1 = *(void **)(v0 + 320);
  if (one-time initialization token for networking != -1) {
    swift_once();
  }
  unint64_t v90 = (uint64_t *)(v0 + 96);
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.networking);
  uint64_t v3 = v1;
  uint64_t v4 = v1;
  swift_bridgeObjectRetain();
  uint64_t v5 = Logger.logObject.getter();
  uint64_t v6 = static os_log_type_t.error.getter();
  uint64_t v7 = os_log_type_enabled(v5, v6);
  uint64_t v8 = *(void **)(v0 + 352);
  uint64_t v9 = *(void *)(v0 + 280);
  if (v7)
  {
    uint64_t v10 = *(void *)(v0 + 272);
    uint64_t v88 = *(void *)(v0 + 288);
    uint64_t v91 = *(void *)(v0 + 184);
    uint64_t v93 = *(void *)(v0 + 216);
    __int16 v89 = *(void *)(v0 + 168);
    unint64_t v86 = *(void *)(v0 + 296);
    uint64_t v87 = *(id *)(v0 + 352);
    uint64_t v11 = swift_slowAlloc();
    uint64_t v12 = (void *)swift_slowAlloc();
    char v85 = swift_slowAlloc();
    char v97 = v85;
    *(_DWORD *)uint64_t v11 = 136446466;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 104) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v9, &v97);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v11 + 12) = 2114;
    id v13 = v1;
    uint64_t v14 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 112) = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    char *v12 = v14;

    _os_log_impl(&dword_249C3F000, v5, v6, "Failed to fetch more tokens for group '%{public}s': %{public}@", (uint8_t *)v11, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x24C5B4790](v12, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x24C5B4790](v85, -1, -1);
    MEMORY[0x24C5B4790](v11, -1, -1);
    outlined consume of Data?(v88, v86);

    _s8CipherML12UseCaseGroupVWOhTm_1(v89, type metadata accessor for TokenFetcher);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v96, &demangling cache variable for type metadata for NetworkManager?);
    _s8CipherML12UseCaseGroupVWOhTm_1(v91, type metadata accessor for NetworkManagerConfig);
    uint64_t result = _s8CipherML12UseCaseGroupVWOhTm_1(v93, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
  }
  else
  {
    id v16 = *(void *)(v0 + 216);
    int64_t v17 = *(void *)(v0 + 184);
    uint64_t v18 = *(void *)(v0 + 168);
    outlined consume of Data?(*(void *)(v0 + 288), *(void *)(v0 + 296));

    swift_bridgeObjectRelease_n();
    _s8CipherML12UseCaseGroupVWOhTm_1(v18, type metadata accessor for TokenFetcher);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v96, &demangling cache variable for type metadata for NetworkManager?);
    _s8CipherML12UseCaseGroupVWOhTm_1(v17, type metadata accessor for NetworkManagerConfig);
    uint64_t result = _s8CipherML12UseCaseGroupVWOhTm_1(v16, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
  }
  while (2)
  {
    os_log_type_t v20 = *(void *)(v0 + 256);
    uint64_t v19 = *(void *)(v0 + 264);
    uint64_t v92 = v1;
    *(void *)(v0 + 352) = v1;
    if (v19)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v22 = __clz(__rbit64(v19));
          v19 &= v19 - 1;
          os_log_type_t v23 = v22 | (v20 << 6);
          uint64_t v24 = *(void *)(v0 + 248);
LABEL_10:
          uint64_t v25 = *(void **)(v0 + 224);
          unint64_t v26 = *(void *)(v0 + 208);
          uint64_t v27 = (void *)(*(void *)(v24 + 48) + 16 * v23);
          BOOL v28 = v27[1];
          uint64_t *v25 = *v27;
          v25[1] = v28;
          uint64_t v29 = *(void *)(v24 + 56) + *(void *)(v26 + 72) * v23;
          uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: UseCaseGroup));
          _s8CipherML12UseCaseGroupVWOcTm_0(v29, (uint64_t)v25 + *(int *)(v30 + 48), (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
          (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v25, 0, 1, v30);
          swift_bridgeObjectRetain();
LABEL_30:
          *(void *)(v0 + 256) = v20;
          *(void *)(v0 + 264) = v19;
          uint64_t v38 = *(void *)(v0 + 232);
          outlined init with take of (key: String, value: UseCaseGroup)?(*(void *)(v0 + 224), v38);
          uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: UseCaseGroup));
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 48))(v38, 1, v39) == 1)
          {
            swift_release();
            if (v92) {
              swift_willThrow();
            }
            swift_release();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            char v82 = *(uint64_t (**)(void))(v0 + 8);
            return v82();
          }
          unint64_t v40 = *(void **)(v0 + 232);
          int64_t v41 = *(void *)(v0 + 216);
          unint64_t v43 = *(void *)(v0 + 192);
          uint64_t v42 = *(void *)(v0 + 200);
          *(void *)(v0 + 272) = *v40;
          *(void *)(v0 + 280) = v40[1];
          _s8CipherML12UseCaseGroupVWObTm_0((uint64_t)v40 + *(int *)(v39 + 48), v41, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
          int64_t v44 = v41 + *(int *)(v42 + 36);
          _s8CipherML12UseCaseGroupVWOcTm_0(v44, v43, type metadata accessor for NetworkManagerType);
          unint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
          if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 48))(v43, 2, v45)) {
            break;
          }
          uint64_t v21 = *(void *)(v0 + 192);
          _s8CipherML12UseCaseGroupVWOhTm_1(*(void *)(v0 + 216), (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
          swift_bridgeObjectRelease();
          uint64_t result = _s8CipherML12UseCaseGroupVWOhTm_1(v21, type metadata accessor for NetworkManagerType);
          if (!v19) {
            goto LABEL_11;
          }
        }
        int64_t v46 = *(void *)(v0 + 192);
        uint64_t v47 = v46 + *(int *)(v45 + 48);
        uint64_t v48 = (uint64_t *)(v46 + *(int *)(v45 + 64));
        uint64_t v49 = *v48;
        *(void *)(v0 + 288) = *v48;
        uint64_t v50 = v48[1];
        *(void *)(v0 + 296) = v50;
        outlined destroy of AMDPbHEConfig.OneOf_Config?(v47, &demangling cache variable for type metadata for URL?);
        uint64_t v51 = type metadata accessor for URL();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v51 - 8) + 8))(v46, v51);
        if (v50 >> 60 != 15) {
          break;
        }
        uint64_t v52 = *(void *)(v0 + 216);
        swift_bridgeObjectRelease();
        uint64_t result = _s8CipherML12UseCaseGroupVWOhTm_1(v52, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
LABEL_43:
        if (!v19) {
          goto LABEL_11;
        }
      }
      uint64_t v53 = *(void *)(v0 + 176);
      uint64_t v54 = *(void *)(v0 + 184);
      _s8CipherML12UseCaseGroupVWOcTm_0(v44, v54, type metadata accessor for NetworkConfig);
      uint64_t v55 = (void *)(v54 + *(int *)(v53 + 20));
      void *v55 = 0;
      v55[1] = 0;
      if (one-time initialization token for shared != -1) {
        swift_once();
      }
      (*(void (**)(void))(*(void *)static NetworkManagerHelper.shared + 96))(*(void *)(v0 + 184));
      outlined init with copy of AMDPbHEConfig.OneOf_Config?(v96, v95, &demangling cache variable for type metadata for NetworkManager?);
      uint64_t v56 = *(void *)(v0 + 136);
      if (*(void *)(v0 + 80))
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NetworkManager);
        uint64_t v57 = type metadata accessor for AspireNetworkManager();
        uint64_t v58 = swift_dynamicCast();
        char v59 = *(void *)(v57 - 8);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v59 + 56))(v56, v58 ^ 1u, 1, v57);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v59 + 48))(v56, 1, v57) != 1)
        {
          uint64_t v60 = *(void *)(v0 + 160);
          BOOL v94 = *(void *)(v0 + 152);
          uint64_t v61 = *(void *)(v0 + 136);
          char v62 = *(void *)(v0 + 144);
          outlined init with copy of AMDPbHEConfig.OneOf_Config?(v61 + *(int *)(v57 + 32), v62, &demangling cache variable for type metadata for TokenFetcher?);
          _s8CipherML12UseCaseGroupVWOhTm_1(v61, (uint64_t (*)(void))type metadata accessor for AspireNetworkManager);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v60 + 48))(v62, 1, v94) != 1)
          {
            _s8CipherML12UseCaseGroupVWObTm_0(*(void *)(v0 + 144), *(void *)(v0 + 168), type metadata accessor for TokenFetcher);
            if (one-time initialization token for shared != -1) {
              swift_once();
            }
            uint64_t v70 = static TokenCache.shared;
            uint64_t v71 = (uint64_t *)(*(void *)(v0 + 168) + *(int *)(*(void *)(v0 + 152) + 20));
            uint64_t v72 = *v71;
            uint64_t v73 = v71[1];
            char v74 = *(void *)(static TokenCache.shared + OBJC_IVAR____TtC8CipherML10TokenCache_tokensForUserLock);
            unint64_t v75 = (void *)swift_task_alloc();
            v75[2] = v70;
            v75[3] = v72;
            v75[4] = v73;
            os_unfair_lock_lock((os_unfair_lock_t)(v74 + 24));
            partial apply for closure #1 in TokenCache.count(user:)((uint64_t *)(v74 + 16), v90);
            os_unfair_lock_unlock((os_unfair_lock_t)(v74 + 24));
            uint64_t v76 = *v90;
            uint64_t result = swift_task_dealloc();
            if (v76 >= 5)
            {
              BOOL v77 = *(void *)(v0 + 288);
              uint64_t v78 = *(void *)(v0 + 296);
              char v79 = *(void *)(v0 + 216);
              uint64_t v80 = *(void *)(v0 + 184);
              uint64_t v81 = *(void *)(v0 + 168);
              swift_bridgeObjectRelease();
              outlined consume of Data?(v77, v78);
              _s8CipherML12UseCaseGroupVWOhTm_1(v81, type metadata accessor for TokenFetcher);
              outlined destroy of AMDPbHEConfig.OneOf_Config?(v96, &demangling cache variable for type metadata for NetworkManager?);
              _s8CipherML12UseCaseGroupVWOhTm_1(v80, type metadata accessor for NetworkManagerConfig);
              uint64_t result = _s8CipherML12UseCaseGroupVWOhTm_1(v79, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
              uint64_t v1 = *(void **)(v0 + 352);
              continue;
            }
            *(void *)(v0 + 304) = 10 - v76;
            if (!__OFSUB__(10, v76))
            {
              uint64_t v83 = (void *)swift_task_alloc();
              *(void *)(v0 + 312) = v83;
              *uint64_t v83 = v0;
              v83[1] = TokenFetcherTask.run();
              uint64_t v84 = *(void *)(v0 + 128);
              return TokenFetcher.fetchContext()(v84);
            }
            goto LABEL_60;
          }
          goto LABEL_42;
        }
      }
      else
      {
        outlined destroy of AMDPbHEConfig.OneOf_Config?(v95, &demangling cache variable for type metadata for NetworkManager?);
        uint64_t v63 = type metadata accessor for AspireNetworkManager();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v63 - 8) + 56))(v56, 1, 1, v63);
      }
      uint64_t v64 = *(void *)(v0 + 152);
      char v65 = *(void *)(v0 + 160);
      uint64_t v66 = *(void *)(v0 + 144);
      outlined destroy of AMDPbHEConfig.OneOf_Config?(*(void *)(v0 + 136), &demangling cache variable for type metadata for AspireNetworkManager?);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v65 + 56))(v66, 1, 1, v64);
LABEL_42:
      uint64_t v67 = *(void *)(v0 + 216);
      uint64_t v68 = *(void *)(v0 + 184);
      char v69 = *(void *)(v0 + 144);
      swift_bridgeObjectRelease();
      outlined consume of Data?(v49, v50);
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v96, &demangling cache variable for type metadata for NetworkManager?);
      _s8CipherML12UseCaseGroupVWOhTm_1(v68, type metadata accessor for NetworkManagerConfig);
      _s8CipherML12UseCaseGroupVWOhTm_1(v67, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
      uint64_t result = outlined destroy of AMDPbHEConfig.OneOf_Config?(v69, &demangling cache variable for type metadata for TokenFetcher?);
      goto LABEL_43;
    }
    break;
  }
LABEL_11:
  unint64_t v31 = v20 + 1;
  if (!__OFADD__(v20, 1))
  {
    uint64_t v32 = (unint64_t)((1 << *(unsigned char *)(v0 + 360)) + 63) >> 6;
    if (v31 < v32)
    {
      uint64_t v24 = *(void *)(v0 + 248);
      uint64_t v33 = v24 + 64;
      uint64_t v34 = *(void *)(v24 + 64 + 8 * v31);
      if (v34) {
        goto LABEL_14;
      }
      if (v20 + 2 >= v32)
      {
LABEL_28:
        os_log_type_t v20 = v31;
      }
      else
      {
        uint64_t v34 = *(void *)(v33 + 8 * (v20 + 2));
        if (v34)
        {
          unint64_t v31 = v20 + 2;
          goto LABEL_14;
        }
        if (v20 + 3 >= v32)
        {
          v20 += 2;
        }
        else
        {
          uint64_t v34 = *(void *)(v33 + 8 * (v20 + 3));
          if (v34)
          {
            unint64_t v31 = v20 + 3;
            goto LABEL_14;
          }
          unint64_t v31 = v20 + 4;
          if (v20 + 4 < v32)
          {
            uint64_t v34 = *(void *)(v33 + 8 * v31);
            if (!v34)
            {
              unint64_t v31 = v32 - 1;
              uint64_t v35 = v32 - 5;
              do
              {
                if (v35 == v20) {
                  goto LABEL_28;
                }
                uint64_t v34 = *(void *)(v24 + 104 + 8 * v20++);
              }
              while (!v34);
              unint64_t v31 = v20 + 4;
            }
LABEL_14:
            uint64_t v19 = (v34 - 1) & v34;
            os_log_type_t v23 = __clz(__rbit64(v34)) + (v31 << 6);
            os_log_type_t v20 = v31;
            goto LABEL_10;
          }
          v20 += 3;
        }
      }
    }
    uint64_t v36 = *(void *)(v0 + 224);
    uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: UseCaseGroup));
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v36, 1, 1, v37);
    uint64_t v19 = 0;
    goto LABEL_30;
  }
LABEL_60:
  __break(1u);
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  id v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  BOOL v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  void *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  int64_t v39;
  uint64_t v40;
  unint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t (*v77)(void);
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;

  char v105 = v0;
  uint64_t v1 = v0 + 16;
  uint64_t v102 = v0 + 56;
  uint64_t v2 = (uint64_t *)(v0 + 96);
  TokenCache.save()();
  uint64_t v4 = v3;
  _s8CipherML12UseCaseGroupVWOhTm_1(*(void *)(v0 + 128), type metadata accessor for TokenFetcher.TokenFetchContext);
  char v103 = v0 + 16;
  if (!v3) {
    goto LABEL_55;
  }
  char v97 = (uint64_t *)(v0 + 96);
  if (one-time initialization token for networking != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.networking);
  uint64_t v6 = v3;
  uint64_t v7 = v3;
  swift_bridgeObjectRetain();
  uint64_t v8 = Logger.logObject.getter();
  uint64_t v9 = static os_log_type_t.error.getter();
  uint64_t v10 = os_log_type_enabled(v8, v9);
  uint64_t v11 = *(void **)(v0 + 352);
  uint64_t v12 = *(void *)(v0 + 280);
  if (v10)
  {
    id v13 = *(void *)(v0 + 272);
    BOOL v94 = *(void *)(v0 + 296);
    uint64_t v95 = *(void *)(v0 + 288);
    char v98 = *(void *)(v0 + 184);
    uint64_t v100 = *(void *)(v0 + 216);
    uint64_t v96 = *(void *)(v0 + 168);
    uint64_t v14 = swift_slowAlloc();
    uint64_t v15 = (void *)swift_slowAlloc();
    uint64_t v93 = swift_slowAlloc();
    uint64_t v104 = v93;
    *(_DWORD *)uint64_t v14 = 136446466;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 104) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v12, &v104);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v14 + 12) = 2114;
    id v16 = v4;
    int64_t v17 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 112) = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v15 = v17;

    _os_log_impl(&dword_249C3F000, v8, v9, "Failed to fetch more tokens for group '%{public}s': %{public}@", (uint8_t *)v14, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x24C5B4790](v15, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x24C5B4790](v93, -1, -1);
    uint64_t v18 = v14;
    uint64_t v1 = v0 + 16;
    MEMORY[0x24C5B4790](v18, -1, -1);
    outlined consume of Data?(v95, v94);

    _s8CipherML12UseCaseGroupVWOhTm_1(v96, type metadata accessor for TokenFetcher);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v103, &demangling cache variable for type metadata for NetworkManager?);
    _s8CipherML12UseCaseGroupVWOhTm_1(v98, type metadata accessor for NetworkManagerConfig);
    uint64_t v19 = v100;
  }
  else
  {
    os_log_type_t v20 = *(void *)(v0 + 216);
    uint64_t v21 = *(void *)(v0 + 184);
    unint64_t v22 = *(void *)(v0 + 168);
    outlined consume of Data?(*(void *)(v0 + 288), *(void *)(v0 + 296));

    swift_bridgeObjectRelease_n();
    _s8CipherML12UseCaseGroupVWOhTm_1(v22, type metadata accessor for TokenFetcher);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v0 + 16, &demangling cache variable for type metadata for NetworkManager?);
    _s8CipherML12UseCaseGroupVWOhTm_1(v21, type metadata accessor for NetworkManagerConfig);
    uint64_t v19 = v20;
  }
  uint64_t result = _s8CipherML12UseCaseGroupVWOhTm_1(v19, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
  uint64_t v24 = v4;
  while (2)
  {
    unint64_t v26 = *(void *)(v0 + 256);
    uint64_t v25 = *(void *)(v0 + 264);
    BOOL v101 = v24;
    *(void *)(v0 + 352) = v24;
    if (v25)
    {
      while (1)
      {
        while (1)
        {
          BOOL v28 = __clz(__rbit64(v25));
          v25 &= v25 - 1;
          uint64_t v29 = v28 | (v26 << 6);
          uint64_t v30 = *(void *)(v0 + 248);
LABEL_12:
          unint64_t v31 = *(void **)(v0 + 224);
          uint64_t v32 = *(void *)(v0 + 208);
          uint64_t v33 = (void *)(*(void *)(v30 + 48) + 16 * v29);
          uint64_t v34 = v33[1];
          *unint64_t v31 = *v33;
          v31[1] = v34;
          uint64_t v35 = *(void *)(v30 + 56) + *(void *)(v32 + 72) * v29;
          uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: UseCaseGroup));
          _s8CipherML12UseCaseGroupVWOcTm_0(v35, (uint64_t)v31 + *(int *)(v36 + 48), (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
          (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v31, 0, 1, v36);
          swift_bridgeObjectRetain();
LABEL_34:
          *(void *)(v0 + 256) = v26;
          *(void *)(v0 + 264) = v25;
          unint64_t v45 = *(void *)(v0 + 232);
          outlined init with take of (key: String, value: UseCaseGroup)?(*(void *)(v0 + 224), v45);
          int64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: UseCaseGroup));
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v46 - 8) + 48))(v45, 1, v46) == 1)
          {
            swift_release();
            if (v101) {
              swift_willThrow();
            }
            swift_release();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            BOOL v77 = *(uint64_t (**)(void))(v0 + 8);
            return v77();
          }
          uint64_t v47 = *(void **)(v0 + 232);
          uint64_t v48 = *(void *)(v0 + 216);
          uint64_t v50 = *(void *)(v0 + 192);
          uint64_t v49 = *(void *)(v0 + 200);
          *(void *)(v0 + 272) = *v47;
          *(void *)(v0 + 280) = v47[1];
          _s8CipherML12UseCaseGroupVWObTm_0((uint64_t)v47 + *(int *)(v46 + 48), v48, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
          uint64_t v51 = v48 + *(int *)(v49 + 36);
          _s8CipherML12UseCaseGroupVWOcTm_0(v51, v50, type metadata accessor for NetworkManagerType);
          uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
          if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v52 - 8) + 48))(v50, 2, v52)) {
            break;
          }
          uint64_t v27 = *(void *)(v0 + 192);
          _s8CipherML12UseCaseGroupVWOhTm_1(*(void *)(v0 + 216), (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
          swift_bridgeObjectRelease();
          uint64_t result = _s8CipherML12UseCaseGroupVWOhTm_1(v27, type metadata accessor for NetworkManagerType);
          if (!v25) {
            goto LABEL_15;
          }
        }
        uint64_t v53 = *(void *)(v0 + 192);
        uint64_t v54 = v53 + *(int *)(v52 + 48);
        uint64_t v55 = (uint64_t *)(v53 + *(int *)(v52 + 64));
        uint64_t v56 = *v55;
        *(void *)(v0 + 288) = *v55;
        uint64_t v57 = v55[1];
        *(void *)(v0 + 296) = v57;
        outlined destroy of AMDPbHEConfig.OneOf_Config?(v54, &demangling cache variable for type metadata for URL?);
        uint64_t v58 = type metadata accessor for URL();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v58 - 8) + 8))(v53, v58);
        if (v57 >> 60 != 15) {
          break;
        }
        uint64_t v37 = *(void *)(v0 + 216);
        swift_bridgeObjectRelease();
        uint64_t result = _s8CipherML12UseCaseGroupVWOhTm_1(v37, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
LABEL_14:
        if (!v25) {
          goto LABEL_15;
        }
      }
      char v59 = *(void *)(v0 + 176);
      uint64_t v60 = *(void *)(v0 + 184);
      _s8CipherML12UseCaseGroupVWOcTm_0(v51, v60, type metadata accessor for NetworkConfig);
      uint64_t v61 = (void *)(v60 + *(int *)(v59 + 20));
      *uint64_t v61 = 0;
      v61[1] = 0;
      if (one-time initialization token for shared != -1) {
        swift_once();
      }
      (*(void (**)(void))(*(void *)static NetworkManagerHelper.shared + 96))(*(void *)(v0 + 184));
      outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1, v102, &demangling cache variable for type metadata for NetworkManager?);
      char v62 = *(void *)(v0 + 136);
      if (*(void *)(v0 + 80))
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NetworkManager);
        uint64_t v63 = type metadata accessor for AspireNetworkManager();
        uint64_t v1 = v0 + 16;
        uint64_t v64 = swift_dynamicCast();
        char v65 = *(void *)(v63 - 8);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v65 + 56))(v62, v64 ^ 1u, 1, v63);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v65 + 48))(v62, 1, v63) != 1)
        {
          uint64_t v66 = *(void *)(v0 + 160);
          unint64_t v99 = *(void *)(v0 + 152);
          uint64_t v67 = *(void *)(v0 + 136);
          uint64_t v68 = *(void *)(v0 + 144);
          outlined init with copy of AMDPbHEConfig.OneOf_Config?(v67 + *(int *)(v63 + 32), v68, &demangling cache variable for type metadata for TokenFetcher?);
          _s8CipherML12UseCaseGroupVWOhTm_1(v67, (uint64_t (*)(void))type metadata accessor for AspireNetworkManager);
          char v69 = v68;
          uint64_t v1 = v0 + 16;
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v66 + 48))(v69, 1, v99) != 1)
          {
            _s8CipherML12UseCaseGroupVWObTm_0(*(void *)(v0 + 144), *(void *)(v0 + 168), type metadata accessor for TokenFetcher);
            if (one-time initialization token for shared != -1) {
              swift_once();
            }
            uint64_t v78 = static TokenCache.shared;
            char v79 = (uint64_t *)(*(void *)(v0 + 168) + *(int *)(*(void *)(v0 + 152) + 20));
            uint64_t v80 = *v79;
            uint64_t v81 = v79[1];
            char v82 = *(void *)(static TokenCache.shared + OBJC_IVAR____TtC8CipherML10TokenCache_tokensForUserLock);
            uint64_t v83 = (void *)swift_task_alloc();
            v83[2] = v78;
            v83[3] = v80;
            uint64_t v83[4] = v81;
            os_unfair_lock_lock((os_unfair_lock_t)(v82 + 24));
            uint64_t v2 = v97;
            partial apply for closure #1 in TokenCache.count(user:)((uint64_t *)(v82 + 16), v97);
            os_unfair_lock_unlock((os_unfair_lock_t)(v82 + 24));
            uint64_t v84 = *v97;
            uint64_t result = swift_task_dealloc();
            if (v84 >= 5)
            {
LABEL_55:
              char v97 = v2;
              char v85 = *(void *)(v0 + 288);
              unint64_t v86 = *(void *)(v0 + 296);
              uint64_t v87 = *(void *)(v0 + 216);
              uint64_t v88 = *(void *)(v0 + 184);
              __int16 v89 = *(void *)(v0 + 168);
              swift_bridgeObjectRelease();
              outlined consume of Data?(v85, v86);
              unint64_t v90 = v89;
              uint64_t v1 = v0 + 16;
              _s8CipherML12UseCaseGroupVWOhTm_1(v90, type metadata accessor for TokenFetcher);
              outlined destroy of AMDPbHEConfig.OneOf_Config?(v103, &demangling cache variable for type metadata for NetworkManager?);
              _s8CipherML12UseCaseGroupVWOhTm_1(v88, type metadata accessor for NetworkManagerConfig);
              uint64_t result = _s8CipherML12UseCaseGroupVWOhTm_1(v87, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
              uint64_t v24 = *(void **)(v0 + 352);
              continue;
            }
            *(void *)(v0 + 304) = 10 - v84;
            if (!__OFSUB__(10, v84))
            {
              uint64_t v91 = (void *)swift_task_alloc();
              *(void *)(v0 + 312) = v91;
              *uint64_t v91 = v0;
              v91[1] = TokenFetcherTask.run();
              uint64_t v92 = *(void *)(v0 + 128);
              return TokenFetcher.fetchContext()(v92);
            }
            goto LABEL_61;
          }
          goto LABEL_45;
        }
      }
      else
      {
        outlined destroy of AMDPbHEConfig.OneOf_Config?(v102, &demangling cache variable for type metadata for NetworkManager?);
        uint64_t v70 = type metadata accessor for AspireNetworkManager();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v70 - 8) + 56))(v62, 1, 1, v70);
      }
      uint64_t v71 = *(void *)(v0 + 152);
      uint64_t v72 = *(void *)(v0 + 160);
      uint64_t v73 = *(void *)(v0 + 144);
      outlined destroy of AMDPbHEConfig.OneOf_Config?(*(void *)(v0 + 136), &demangling cache variable for type metadata for AspireNetworkManager?);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v72 + 56))(v73, 1, 1, v71);
LABEL_45:
      char v74 = *(void *)(v0 + 216);
      unint64_t v75 = *(void *)(v0 + 184);
      uint64_t v76 = *(void *)(v0 + 144);
      swift_bridgeObjectRelease();
      outlined consume of Data?(v56, v57);
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v1, &demangling cache variable for type metadata for NetworkManager?);
      _s8CipherML12UseCaseGroupVWOhTm_1(v75, type metadata accessor for NetworkManagerConfig);
      _s8CipherML12UseCaseGroupVWOhTm_1(v74, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
      uint64_t result = outlined destroy of AMDPbHEConfig.OneOf_Config?(v76, &demangling cache variable for type metadata for TokenFetcher?);
      goto LABEL_14;
    }
    break;
  }
LABEL_15:
  uint64_t v38 = v26 + 1;
  if (!__OFADD__(v26, 1))
  {
    uint64_t v39 = (unint64_t)((1 << *(unsigned char *)(v0 + 360)) + 63) >> 6;
    if (v38 < v39)
    {
      uint64_t v30 = *(void *)(v0 + 248);
      unint64_t v40 = v30 + 64;
      int64_t v41 = *(void *)(v30 + 64 + 8 * v38);
      if (v41) {
        goto LABEL_18;
      }
      if (v26 + 2 >= v39)
      {
LABEL_32:
        unint64_t v26 = v38;
      }
      else
      {
        int64_t v41 = *(void *)(v40 + 8 * (v26 + 2));
        if (v41)
        {
          uint64_t v38 = v26 + 2;
          goto LABEL_18;
        }
        if (v26 + 3 >= v39)
        {
          v26 += 2;
        }
        else
        {
          int64_t v41 = *(void *)(v40 + 8 * (v26 + 3));
          if (v41)
          {
            uint64_t v38 = v26 + 3;
            goto LABEL_18;
          }
          uint64_t v38 = v26 + 4;
          if (v26 + 4 < v39)
          {
            int64_t v41 = *(void *)(v40 + 8 * v38);
            if (!v41)
            {
              uint64_t v38 = v39 - 1;
              uint64_t v42 = v39 - 5;
              do
              {
                if (v42 == v26) {
                  goto LABEL_32;
                }
                int64_t v41 = *(void *)(v30 + 104 + 8 * v26++);
              }
              while (!v41);
              uint64_t v38 = v26 + 4;
            }
LABEL_18:
            uint64_t v25 = (v41 - 1) & v41;
            uint64_t v29 = __clz(__rbit64(v41)) + (v38 << 6);
            unint64_t v26 = v38;
            goto LABEL_12;
          }
          v26 += 3;
        }
      }
    }
    unint64_t v43 = *(void *)(v0 + 224);
    int64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: UseCaseGroup));
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56))(v43, 1, 1, v44);
    uint64_t v25 = 0;
    goto LABEL_34;
  }
LABEL_61:
  __break(1u);
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  id v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  BOOL v8;
  void *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  int64_t v33;
  uint64_t v34;
  unint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t (*v83)(void);
  void *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  id v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;

  unint64_t v99 = v0;
  uint64_t v96 = v0 + 56;
  char v97 = v0 + 16;
  uint64_t v1 = *(void *)(v0 + 128);
  swift_task_dealloc();
  _s8CipherML12UseCaseGroupVWOhTm_1(v1, type metadata accessor for TokenFetcher.TokenFetchContext);
  uint64_t v2 = *(void **)(v0 + 344);
  if (one-time initialization token for networking != -1) {
    swift_once();
  }
  uint64_t v91 = (uint64_t *)(v0 + 96);
  uint64_t v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Logger.networking);
  uint64_t v4 = v2;
  uint64_t v5 = v2;
  swift_bridgeObjectRetain();
  uint64_t v6 = Logger.logObject.getter();
  uint64_t v7 = static os_log_type_t.error.getter();
  uint64_t v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = *(void **)(v0 + 352);
  uint64_t v10 = *(void *)(v0 + 280);
  if (v8)
  {
    uint64_t v11 = *(void *)(v0 + 272);
    __int16 v89 = *(void *)(v0 + 288);
    uint64_t v92 = *(void *)(v0 + 184);
    BOOL v94 = *(void *)(v0 + 216);
    unint64_t v90 = *(void *)(v0 + 168);
    uint64_t v87 = *(void *)(v0 + 296);
    uint64_t v88 = *(id *)(v0 + 352);
    uint64_t v12 = swift_slowAlloc();
    id v13 = (void *)swift_slowAlloc();
    unint64_t v86 = swift_slowAlloc();
    char v98 = v86;
    *(_DWORD *)uint64_t v12 = 136446466;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 104) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v10, &v98);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v12 + 12) = 2114;
    uint64_t v14 = v2;
    uint64_t v15 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 112) = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _OWORD *v13 = v15;

    _os_log_impl(&dword_249C3F000, v6, v7, "Failed to fetch more tokens for group '%{public}s': %{public}@", (uint8_t *)v12, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x24C5B4790](v13, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x24C5B4790](v86, -1, -1);
    MEMORY[0x24C5B4790](v12, -1, -1);
    outlined consume of Data?(v89, v87);

    _s8CipherML12UseCaseGroupVWOhTm_1(v90, type metadata accessor for TokenFetcher);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v97, &demangling cache variable for type metadata for NetworkManager?);
    _s8CipherML12UseCaseGroupVWOhTm_1(v92, type metadata accessor for NetworkManagerConfig);
    uint64_t result = _s8CipherML12UseCaseGroupVWOhTm_1(v94, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
  }
  else
  {
    int64_t v17 = *(void *)(v0 + 216);
    uint64_t v18 = *(void *)(v0 + 184);
    uint64_t v19 = *(void *)(v0 + 168);
    outlined consume of Data?(*(void *)(v0 + 288), *(void *)(v0 + 296));

    swift_bridgeObjectRelease_n();
    _s8CipherML12UseCaseGroupVWOhTm_1(v19, type metadata accessor for TokenFetcher);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v97, &demangling cache variable for type metadata for NetworkManager?);
    _s8CipherML12UseCaseGroupVWOhTm_1(v18, type metadata accessor for NetworkManagerConfig);
    uint64_t result = _s8CipherML12UseCaseGroupVWOhTm_1(v17, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
  }
  while (2)
  {
    uint64_t v21 = *(void *)(v0 + 256);
    os_log_type_t v20 = *(void *)(v0 + 264);
    uint64_t v93 = v2;
    *(void *)(v0 + 352) = v2;
    if (v20)
    {
      while (1)
      {
        while (1)
        {
          os_log_type_t v23 = __clz(__rbit64(v20));
          v20 &= v20 - 1;
          uint64_t v24 = v23 | (v21 << 6);
          uint64_t v25 = *(void *)(v0 + 248);
LABEL_10:
          unint64_t v26 = *(void **)(v0 + 224);
          uint64_t v27 = *(void *)(v0 + 208);
          BOOL v28 = (void *)(*(void *)(v25 + 48) + 16 * v24);
          uint64_t v29 = v28[1];
          *unint64_t v26 = *v28;
          v26[1] = v29;
          uint64_t v30 = *(void *)(v25 + 56) + *(void *)(v27 + 72) * v24;
          unint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: UseCaseGroup));
          _s8CipherML12UseCaseGroupVWOcTm_0(v30, (uint64_t)v26 + *(int *)(v31 + 48), (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
          (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v26, 0, 1, v31);
          swift_bridgeObjectRetain();
LABEL_30:
          *(void *)(v0 + 256) = v21;
          *(void *)(v0 + 264) = v20;
          uint64_t v39 = *(void *)(v0 + 232);
          outlined init with take of (key: String, value: UseCaseGroup)?(*(void *)(v0 + 224), v39);
          unint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: UseCaseGroup));
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 48))(v39, 1, v40) == 1)
          {
            swift_release();
            if (v93) {
              swift_willThrow();
            }
            swift_release();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            uint64_t v83 = *(uint64_t (**)(void))(v0 + 8);
            return v83();
          }
          int64_t v41 = *(void **)(v0 + 232);
          uint64_t v42 = *(void *)(v0 + 216);
          int64_t v44 = *(void *)(v0 + 192);
          unint64_t v43 = *(void *)(v0 + 200);
          *(void *)(v0 + 272) = *v41;
          *(void *)(v0 + 280) = v41[1];
          _s8CipherML12UseCaseGroupVWObTm_0((uint64_t)v41 + *(int *)(v40 + 48), v42, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
          unint64_t v45 = v42 + *(int *)(v43 + 36);
          _s8CipherML12UseCaseGroupVWOcTm_0(v45, v44, type metadata accessor for NetworkManagerType);
          int64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
          if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v46 - 8) + 48))(v44, 2, v46)) {
            break;
          }
          unint64_t v22 = *(void *)(v0 + 192);
          _s8CipherML12UseCaseGroupVWOhTm_1(*(void *)(v0 + 216), (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
          swift_bridgeObjectRelease();
          uint64_t result = _s8CipherML12UseCaseGroupVWOhTm_1(v22, type metadata accessor for NetworkManagerType);
          if (!v20) {
            goto LABEL_11;
          }
        }
        uint64_t v47 = *(void *)(v0 + 192);
        uint64_t v48 = v47 + *(int *)(v46 + 48);
        uint64_t v49 = (uint64_t *)(v47 + *(int *)(v46 + 64));
        uint64_t v50 = *v49;
        *(void *)(v0 + 288) = *v49;
        uint64_t v51 = v49[1];
        *(void *)(v0 + 296) = v51;
        outlined destroy of AMDPbHEConfig.OneOf_Config?(v48, &demangling cache variable for type metadata for URL?);
        uint64_t v52 = type metadata accessor for URL();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v52 - 8) + 8))(v47, v52);
        if (v51 >> 60 != 15) {
          break;
        }
        uint64_t v53 = *(void *)(v0 + 216);
        swift_bridgeObjectRelease();
        uint64_t result = _s8CipherML12UseCaseGroupVWOhTm_1(v53, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
LABEL_43:
        if (!v20) {
          goto LABEL_11;
        }
      }
      uint64_t v54 = *(void *)(v0 + 176);
      uint64_t v55 = *(void *)(v0 + 184);
      _s8CipherML12UseCaseGroupVWOcTm_0(v45, v55, type metadata accessor for NetworkConfig);
      uint64_t v56 = (void *)(v55 + *(int *)(v54 + 20));
      uint8_t *v56 = 0;
      v56[1] = 0;
      if (one-time initialization token for shared != -1) {
        swift_once();
      }
      (*(void (**)(void))(*(void *)static NetworkManagerHelper.shared + 96))(*(void *)(v0 + 184));
      outlined init with copy of AMDPbHEConfig.OneOf_Config?(v97, v96, &demangling cache variable for type metadata for NetworkManager?);
      uint64_t v57 = *(void *)(v0 + 136);
      if (*(void *)(v0 + 80))
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NetworkManager);
        uint64_t v58 = type metadata accessor for AspireNetworkManager();
        char v59 = swift_dynamicCast();
        uint64_t v60 = *(void *)(v58 - 8);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v60 + 56))(v57, v59 ^ 1u, 1, v58);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v60 + 48))(v57, 1, v58) != 1)
        {
          uint64_t v61 = *(void *)(v0 + 160);
          uint64_t v95 = *(void *)(v0 + 152);
          char v62 = *(void *)(v0 + 136);
          uint64_t v63 = *(void *)(v0 + 144);
          outlined init with copy of AMDPbHEConfig.OneOf_Config?(v62 + *(int *)(v58 + 32), v63, &demangling cache variable for type metadata for TokenFetcher?);
          _s8CipherML12UseCaseGroupVWOhTm_1(v62, (uint64_t (*)(void))type metadata accessor for AspireNetworkManager);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v61 + 48))(v63, 1, v95) != 1)
          {
            _s8CipherML12UseCaseGroupVWObTm_0(*(void *)(v0 + 144), *(void *)(v0 + 168), type metadata accessor for TokenFetcher);
            if (one-time initialization token for shared != -1) {
              swift_once();
            }
            uint64_t v71 = static TokenCache.shared;
            uint64_t v72 = (uint64_t *)(*(void *)(v0 + 168) + *(int *)(*(void *)(v0 + 152) + 20));
            uint64_t v73 = *v72;
            char v74 = v72[1];
            unint64_t v75 = *(void *)(static TokenCache.shared + OBJC_IVAR____TtC8CipherML10TokenCache_tokensForUserLock);
            uint64_t v76 = (void *)swift_task_alloc();
            v76[2] = v71;
            v76[3] = v73;
            v76[4] = v74;
            os_unfair_lock_lock((os_unfair_lock_t)(v75 + 24));
            partial apply for closure #1 in TokenCache.count(user:)((uint64_t *)(v75 + 16), v91);
            os_unfair_lock_unlock((os_unfair_lock_t)(v75 + 24));
            BOOL v77 = *v91;
            uint64_t result = swift_task_dealloc();
            if (v77 >= 5)
            {
              uint64_t v78 = *(void *)(v0 + 288);
              char v79 = *(void *)(v0 + 296);
              uint64_t v80 = *(void *)(v0 + 216);
              uint64_t v81 = *(void *)(v0 + 184);
              char v82 = *(void *)(v0 + 168);
              swift_bridgeObjectRelease();
              outlined consume of Data?(v78, v79);
              _s8CipherML12UseCaseGroupVWOhTm_1(v82, type metadata accessor for TokenFetcher);
              outlined destroy of AMDPbHEConfig.OneOf_Config?(v97, &demangling cache variable for type metadata for NetworkManager?);
              _s8CipherML12UseCaseGroupVWOhTm_1(v81, type metadata accessor for NetworkManagerConfig);
              uint64_t result = _s8CipherML12UseCaseGroupVWOhTm_1(v80, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
              uint64_t v2 = *(void **)(v0 + 352);
              continue;
            }
            *(void *)(v0 + 304) = 10 - v77;
            if (!__OFSUB__(10, v77))
            {
              uint64_t v84 = (void *)swift_task_alloc();
              *(void *)(v0 + 312) = v84;
              *uint64_t v84 = v0;
              v84[1] = TokenFetcherTask.run();
              char v85 = *(void *)(v0 + 128);
              return TokenFetcher.fetchContext()(v85);
            }
            goto LABEL_60;
          }
          goto LABEL_42;
        }
      }
      else
      {
        outlined destroy of AMDPbHEConfig.OneOf_Config?(v96, &demangling cache variable for type metadata for NetworkManager?);
        uint64_t v64 = type metadata accessor for AspireNetworkManager();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v64 - 8) + 56))(v57, 1, 1, v64);
      }
      char v65 = *(void *)(v0 + 152);
      uint64_t v66 = *(void *)(v0 + 160);
      uint64_t v67 = *(void *)(v0 + 144);
      outlined destroy of AMDPbHEConfig.OneOf_Config?(*(void *)(v0 + 136), &demangling cache variable for type metadata for AspireNetworkManager?);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v66 + 56))(v67, 1, 1, v65);
LABEL_42:
      uint64_t v68 = *(void *)(v0 + 216);
      char v69 = *(void *)(v0 + 184);
      uint64_t v70 = *(void *)(v0 + 144);
      swift_bridgeObjectRelease();
      outlined consume of Data?(v50, v51);
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v97, &demangling cache variable for type metadata for NetworkManager?);
      _s8CipherML12UseCaseGroupVWOhTm_1(v69, type metadata accessor for NetworkManagerConfig);
      _s8CipherML12UseCaseGroupVWOhTm_1(v68, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
      uint64_t result = outlined destroy of AMDPbHEConfig.OneOf_Config?(v70, &demangling cache variable for type metadata for TokenFetcher?);
      goto LABEL_43;
    }
    break;
  }
LABEL_11:
  uint64_t v32 = v21 + 1;
  if (!__OFADD__(v21, 1))
  {
    uint64_t v33 = (unint64_t)((1 << *(unsigned char *)(v0 + 360)) + 63) >> 6;
    if (v32 < v33)
    {
      uint64_t v25 = *(void *)(v0 + 248);
      uint64_t v34 = v25 + 64;
      uint64_t v35 = *(void *)(v25 + 64 + 8 * v32);
      if (v35) {
        goto LABEL_14;
      }
      if (v21 + 2 >= v33)
      {
LABEL_28:
        uint64_t v21 = v32;
      }
      else
      {
        uint64_t v35 = *(void *)(v34 + 8 * (v21 + 2));
        if (v35)
        {
          uint64_t v32 = v21 + 2;
          goto LABEL_14;
        }
        if (v21 + 3 >= v33)
        {
          v21 += 2;
        }
        else
        {
          uint64_t v35 = *(void *)(v34 + 8 * (v21 + 3));
          if (v35)
          {
            uint64_t v32 = v21 + 3;
            goto LABEL_14;
          }
          uint64_t v32 = v21 + 4;
          if (v21 + 4 < v33)
          {
            uint64_t v35 = *(void *)(v34 + 8 * v32);
            if (!v35)
            {
              uint64_t v32 = v33 - 1;
              uint64_t v36 = v33 - 5;
              do
              {
                if (v36 == v21) {
                  goto LABEL_28;
                }
                uint64_t v35 = *(void *)(v25 + 104 + 8 * v21++);
              }
              while (!v35);
              uint64_t v32 = v21 + 4;
            }
LABEL_14:
            os_log_type_t v20 = (v35 - 1) & v35;
            uint64_t v24 = __clz(__rbit64(v35)) + (v32 << 6);
            uint64_t v21 = v32;
            goto LABEL_10;
          }
          v21 += 3;
        }
      }
    }
    uint64_t v37 = *(void *)(v0 + 224);
    uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: UseCaseGroup));
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v37, 1, 1, v38);
    os_log_type_t v20 = 0;
    goto LABEL_30;
  }
LABEL_60:
  __break(1u);
  return result;
}

uint64_t TokenFetcherTask.deinit()
{
  swift_release();
  swift_release();
  return v0;
}

uint64_t TokenFetcherTask.__deallocating_deinit()
{
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for ScheduledActivityHandler.run@Sendable () in conformance TokenFetcherTask()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = protocol witness for NetworkManager.uploadKeys(evaluationKeys:userId:) in conformance AspireNetworkManager;
  return TokenFetcherTask.run()();
}

void specialized static TokenFetcherTask.submitBackgroundTask()()
{
  v11[1] = *(id *)MEMORY[0x263EF8340];
  id v0 = objc_msgSend(self, sel_sharedScheduler);
  uint64_t v1 = (void *)MEMORY[0x24C5B33F0](0xD000000000000023, 0x8000000249E96110);
  id v2 = objc_msgSend(v0, sel_taskRequestForIdentifier_, v1);

  if (!v2)
  {
    id v3 = objc_allocWithZone(MEMORY[0x263F298E0]);
    uint64_t v4 = (void *)MEMORY[0x24C5B33F0](0xD000000000000023, 0x8000000249E96110);
    id v5 = objc_msgSend(v3, sel_initWithIdentifier_, v4);

    objc_msgSend(v5, sel_setRequiresNetworkConnectivity_, 1);
    objc_msgSend(v5, sel_setRequiresUserInactivity_, 1);
    objc_msgSend(v5, sel_setScheduleAfter_, 5.0);
    objc_msgSend(v5, sel_setRandomInitialDelay_, 60.0);
    objc_msgSend(v5, sel_scheduleAfter);
    double v7 = v6;
    objc_msgSend(v5, sel_randomInitialDelay);
    objc_msgSend(v5, sel_setTrySchedulingBefore_, v7 + v8);
    v11[0] = 0;
    if (objc_msgSend(v0, sel_submitTaskRequest_error_, v5, v11))
    {
      id v9 = v11[0];

      return;
    }
    id v10 = v11[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
}

uint64_t _s8CipherML12UseCaseGroupVWOcTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t _s8CipherML12UseCaseGroupVWObTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t partial apply for closure #1 in TokenCache.count(user:)@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return closure #1 in TokenCache.count(user:)(a1, *(void *)(v2 + 24), *(void *)(v2 + 32), a2);
}

uint64_t partial apply for closure #1 in TokenFetcher.fetchTokenTasks(context:count:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v8 = v2[4];
  id v9 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v9;
  *id v9 = v3;
  v9[1] = protocol witness for NetworkManager.uploadKeys(evaluationKeys:userId:) in conformance AspireNetworkManager;
  return closure #1 in TokenFetcher.fetchTokenTasks(context:count:)(a1, a2, v6, v7, v8);
}

uint64_t _s8CipherML12UseCaseGroupVWOhTm_1(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t type metadata accessor for TokenFetcherTask()
{
  return self;
}

uint64_t method lookup function for TokenFetcherTask(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for TokenFetcherTask);
}

uint64_t dispatch thunk of TokenFetcherTask.__allocating_init(allowListLock:getCurrentDate:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

int *TokenFetcher.init(issuer:userToken:urlSession:privacyProxyFailClosed:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v12 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32))(a6, a1, v12);
  uint64_t result = (int *)type metadata accessor for TokenFetcher(0);
  uint64_t v14 = (void *)(a6 + result[5]);
  *uint64_t v14 = a2;
  v14[1] = a3;
  *(void *)(a6 + result[6]) = a4;
  *(unsigned char *)(a6 + result[7]) = a5;
  return result;
}

uint64_t type metadata accessor for TokenFetcher(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for TokenFetcher);
}

uint64_t TokenFetcher.addTokenAuthorization(to:)(uint64_t a1)
{
  *(void *)(v2 + 112) = a1;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 120) = v3;
  *uint64_t v3 = v2;
  v3[1] = TokenFetcher.addTokenAuthorization(to:);
  v3[2] = v1;
  return MEMORY[0x270FA2498](TokenFetcher.getToken(), 0, 0);
}

uint64_t TokenFetcher.addTokenAuthorization(to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  uint64_t v7 = *v3;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v8 = *(uint64_t (**)(void))(v7 + 8);
    return v8();
  }
  else
  {
    *(void *)(v6 + 128) = a2;
    *(void *)(v6 + 136) = a1;
    return MEMORY[0x270FA2498](TokenFetcher.addTokenAuthorization(to:), 0, 0);
  }
}

uint64_t TokenFetcher.addTokenAuthorization(to:)()
{
  unint64_t countAndFlagsBits = v0[8]._countAndFlagsBits;
  uint64_t object = (uint64_t)v0[8]._object;
  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease();
  v0[1] = Data.base64EncodedString(options:)(0);
  v0[2]._unint64_t countAndFlagsBits = 43;
  v0[2]._uint64_t object = (void *)0xE100000000000000;
  v0[3]._unint64_t countAndFlagsBits = 45;
  v0[3]._uint64_t object = (void *)0xE100000000000000;
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v3 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  uint64_t v5 = v4;
  swift_bridgeObjectRelease();
  v0[4]._unint64_t countAndFlagsBits = v3;
  v0[4]._uint64_t object = v5;
  v0[5]._unint64_t countAndFlagsBits = 47;
  v0[5]._uint64_t object = (void *)0xE100000000000000;
  v0[6]._unint64_t countAndFlagsBits = 95;
  v0[6]._uint64_t object = (void *)0xE100000000000000;
  uint64_t v6 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  uint64_t v8 = v7;
  swift_bridgeObjectRelease();
  v9._unint64_t countAndFlagsBits = v6;
  v9._uint64_t object = v8;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10.value._unint64_t countAndFlagsBits = 0xD000000000000013;
  v10.value._uint64_t object = (void *)0x8000000249E943E0;
  v11._unint64_t countAndFlagsBits = 0x7A69726F68747541;
  v11._uint64_t object = (void *)0xED00006E6F697461;
  URLRequest.setValue(_:forHTTPHeaderField:)(v10, v11);
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(object, countAndFlagsBits);
  uint64_t v12 = (uint64_t (*)(void))v0->_object;
  return v12();
}

uint64_t TokenFetcher.backgroundTokenFetch()()
{
  *(void *)(v1 + 16) = v0;
  return MEMORY[0x270FA2498](TokenFetcher.backgroundTokenFetch(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t result;
  BOOL v10;
  uint64_t v11;
  void *v12;
  uint64_t (*v13)(void);
  uint64_t v14;
  void *v15;
  uint64_t v16;

  uint64_t v15 = v0;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v1 = v0[2];
  uint64_t v2 = static TokenCache.shared;
  uint64_t v3 = (uint64_t *)(v1 + *(int *)(type metadata accessor for TokenFetcher(0) + 20));
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  uint64_t v6 = *(void *)(v2 + OBJC_IVAR____TtC8CipherML10TokenCache_tokensForUserLock);
  uint64_t v7 = (void *)swift_task_alloc();
  v7[2] = v2;
  v7[3] = v4;
  v7[4] = v5;
  os_unfair_lock_lock((os_unfair_lock_t)(v6 + 24));
  partial apply for closure #1 in TokenCache.count(user:)((uint64_t *)(v6 + 16), &v14);
  os_unfair_lock_unlock((os_unfair_lock_t)(v6 + 24));
  uint64_t v8 = v14;
  uint64_t result = swift_task_dealloc();
  if (v8 >= 5)
  {
    id v13 = (uint64_t (*)(void))v0[1];
    return v13();
  }
  else
  {
    Swift::String_optional v10 = __OFSUB__(10, v8);
    Swift::String v11 = 10 - v8;
    if (v10)
    {
      __break(1u);
    }
    else
    {
      uint64_t v12 = (void *)swift_task_alloc();
      v0[3] = v12;
      char *v12 = v0;
      v12[1] = TokenFetcher.backgroundTokenFetch();
      return TokenFetcher.fetchTokensInBackground(count:)(v11);
    }
  }
  return result;
}

{
  uint64_t *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

void *TokenFetcher.extraTokensToFetch.unsafeMutableAddressor()
{
  return &static TokenFetcher.extraTokensToFetch;
}

uint64_t static TokenFetcher.extraTokensToFetch.getter()
{
  return 3;
}

void *TokenFetcher.tokenCountLowWaterMark.unsafeMutableAddressor()
{
  return &static TokenFetcher.tokenCountLowWaterMark;
}

uint64_t static TokenFetcher.tokenCountLowWaterMark.getter()
{
  return 5;
}

void *TokenFetcher.tokenCountLimit.unsafeMutableAddressor()
{
  return &static TokenFetcher.tokenCountLimit;
}

uint64_t static TokenFetcher.tokenCountLimit.getter()
{
  return 10;
}

uint64_t TokenFetcher.issuer.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);
  return v4(a1, v1, v3);
}

uint64_t TokenFetcher.userToken.getter()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for TokenFetcher(0) + 20);
  uint64_t v2 = *(void *)v1;
  outlined copy of Data._Representation(*(void *)v1, *(void *)(v1 + 8));
  return v2;
}

id TokenFetcher.urlSession.getter()
{
  uint64_t v1 = *(void **)(v0 + *(int *)(type metadata accessor for TokenFetcher(0) + 24));
  return v1;
}

uint64_t TokenFetcher.privacyProxyFailClosed.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for TokenFetcher(0) + 28));
}

uint64_t TokenFetcher.tokenIssuerDirectoryURL.getter()
{
  uint64_t v0 = type metadata accessor for URL.DirectoryHint();
  uint64_t v1 = *(void *)(v0 - 8);
  double v2 = MEMORY[0x270FA5388](v0);
  uint64_t v4 = (char *)v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6[0] = 0xD00000000000002ALL;
  v6[1] = 0x8000000249E96140;
  (*(void (**)(char *, void, uint64_t, double))(v1 + 104))(v4, *MEMORY[0x263F06E50], v0, v2);
  lazy protocol witness table accessor for type String and conformance String();
  URL.appending<A>(path:directoryHint:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  return swift_bridgeObjectRelease();
}

uint64_t TokenFetcher.getToken()()
{
  *(void *)(v1 + 16) = v0;
  return MEMORY[0x270FA2498](TokenFetcher.getToken(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  void *v8;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, unint64_t);
  uint64_t v16;
  void *v17;
  uint64_t v18;

  int64_t v17 = v0;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v1 = v0[2];
  double v2 = static TokenCache.shared;
  uint64_t v3 = (uint64_t *)(v1 + *(int *)(type metadata accessor for TokenFetcher(0) + 20));
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  uint64_t v6 = TokenCache.removeToken(user:)(*v3, v5);
  if (v7 >> 60 == 15)
  {
    uint64_t v8 = (void *)swift_task_alloc();
    v0[3] = v8;
    *uint64_t v8 = v0;
    v8[1] = TokenFetcher.getToken();
    return TokenFetcher.fetchToken()();
  }
  else
  {
    Swift::String_optional v10 = v6;
    Swift::String v11 = v7;
    uint64_t v12 = *(void *)(v2 + OBJC_IVAR____TtC8CipherML10TokenCache_tokensForUserLock);
    id v13 = (void *)swift_task_alloc();
    void v13[2] = v2;
    v13[3] = v4;
    v13[4] = v5;
    os_unfair_lock_lock((os_unfair_lock_t)(v12 + 24));
    closure #1 in TokenCache.count(user:)partial apply((uint64_t *)(v12 + 16), &v16);
    os_unfair_lock_unlock((os_unfair_lock_t)(v12 + 24));
    uint64_t v14 = v16;
    swift_task_dealloc();
    if (v14 < 5) {
      TokenFetcher.submitBackgroundTask()();
    }
    uint64_t v15 = (uint64_t (*)(uint64_t, unint64_t))v0[1];
    return v15(v10, v11);
  }
}

uint64_t TokenFetcher.getToken()(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *v3;
  uint64_t v6 = swift_task_dealloc();
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 8);
  if (!v2)
  {
    uint64_t v6 = a1;
    uint64_t v7 = a2;
  }
  return v8(v6, v7);
}

Swift::Void __swiftcall TokenFetcher.submitBackgroundTask()()
{
}

uint64_t TokenFetcher.fetchToken()()
{
  v1[89] = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v1[95] = swift_task_alloc();
  uint64_t v2 = *(void *)(type metadata accessor for TokenFetcher(0) - 8);
  v1[101] = v2;
  v1[102] = *(void *)(v2 + 64);
  v1[103] = swift_task_alloc();
  v1[104] = swift_task_alloc();
  uint64_t v3 = *(void *)(type metadata accessor for TokenFetcher.TokenFetchContext(0) - 8);
  v1[105] = v3;
  v1[106] = *(void *)(v3 + 64);
  v1[107] = swift_task_alloc();
  v1[108] = swift_task_alloc();
  uint64_t v4 = swift_task_alloc();
  v1[109] = v4;
  uint64_t v5 = (void *)swift_task_alloc();
  v1[110] = v5;
  *uint64_t v5 = v1;
  v5[1] = TokenFetcher.fetchToken();
  return TokenFetcher.fetchContext()(v4);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 888) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = TokenFetcher.fetchToken();
  }
  else {
    uint64_t v2 = TokenFetcher.fetchToken();
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  uint64_t v1 = v0[109];
  uint64_t v18 = v1;
  uint64_t v2 = v0[108];
  uint64_t v3 = v0[105];
  uint64_t v4 = v0[104];
  os_log_type_t v20 = v0[103];
  uint64_t v21 = v0[107];
  uint64_t v5 = v0[102];
  uint64_t v6 = v0[101];
  uint64_t v19 = v0[89];
  id v16 = v0[95];
  outlined init with copy of TokenFetcher(v19, v4, type metadata accessor for TokenFetcher);
  outlined init with copy of TokenFetcher(v1, v2, type metadata accessor for TokenFetcher.TokenFetchContext);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (v7 + 16) & ~v7;
  Swift::String v9 = *(unsigned __int8 *)(v3 + 80);
  int64_t v17 = v5 + v9;
  uint64_t v10 = swift_allocObject();
  v0[112] = v10;
  outlined init with take of TokenFetcher(v4, v10 + v8, type metadata accessor for TokenFetcher);
  outlined init with take of TokenFetcher(v2, v10 + ((v5 + v9 + v8) & ~v9), type metadata accessor for TokenFetcher.TokenFetchContext);
  swift_retain();
  swift_asyncLet_begin();
  TokenFetcher.submitBackgroundTask()();
  static TaskPriority.background.getter();
  uint64_t v11 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v16, 0, 1, v11);
  outlined init with copy of TokenFetcher(v19, v20, type metadata accessor for TokenFetcher);
  outlined init with copy of TokenFetcher(v18, v21, type metadata accessor for TokenFetcher.TokenFetchContext);
  uint64_t v12 = (v7 + 32) & ~v7;
  id v13 = (v17 + v12) & ~v9;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = 0;
  *(void *)(v14 + 24) = 0;
  outlined init with take of TokenFetcher(v20, v14 + v12, type metadata accessor for TokenFetcher);
  outlined init with take of TokenFetcher(v21, v14 + v13, type metadata accessor for TokenFetcher.TokenFetchContext);
  _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5(v16, (uint64_t)&async function pointer to partial apply for closure #1 in TokenFetcher.fetchToken(), v14);
  swift_release();
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v16, &demangling cache variable for type metadata for TaskPriority?);
  return MEMORY[0x270FA23E8](v0 + 2, v0 + 87, TokenFetcher.fetchToken(), v0 + 82);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t (*v3)();
  void *v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;

  v1[113] = v0;
  if (v0)
  {
    uint64_t v2 = v1 + 90;
    uint64_t v3 = TokenFetcher.fetchToken();
    uint64_t v4 = v1 + 2;
    uint64_t v5 = v1 + 87;
  }
  else
  {
    uint64_t v6 = v1[87];
    v1[114] = v6;
    uint64_t v7 = v1[88];
    v1[115] = v7;
    outlined copy of Data._Representation(v6, v7);
    uint64_t v3 = TokenFetcher.fetchToken();
    uint64_t v4 = v1 + 2;
    uint64_t v5 = v1 + 87;
    uint64_t v2 = v1 + 96;
  }
  return MEMORY[0x270FA23D8](v4, v5, v3, v2);
}

{
  return MEMORY[0x270FA2498](TokenFetcher.fetchToken(), 0, 0);
}

{
  void *v0;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  outlined destroy of TokenFetcher.TokenFetchContext(v0[109], type metadata accessor for TokenFetcher.TokenFetchContext);
  swift_release_n();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  uint64_t v2 = v0[115];
  uint64_t v3 = v0[114];
  return v1(v3, v2);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  return MEMORY[0x270FA2498](TokenFetcher.fetchToken(), 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  outlined destroy of TokenFetcher.TokenFetchContext(*(void *)(v0 + 872), type metadata accessor for TokenFetcher.TokenFetchContext);
  swift_release_n();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t TokenFetcher.fetchTokensInBackground(count:)(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  type metadata accessor for TokenFetcher.TokenFetchContext(0);
  uint64_t v3 = swift_task_alloc();
  v2[4] = v3;
  uint64_t v4 = (void *)swift_task_alloc();
  v2[5] = v4;
  *uint64_t v4 = v2;
  v4[1] = TokenFetcher.fetchTokensInBackground(count:);
  return TokenFetcher.fetchContext()(v3);
}

uint64_t TokenFetcher.fetchTokensInBackground(count:)()
{
  *(void *)(*(void *)v1 + 48) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = RequestsManager.removeCachedKeywords(keywords:context:);
  }
  else {
    uint64_t v2 = TokenFetcher.fetchTokensInBackground(count:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  long long v3;
  void *v4;
  uint64_t v6;

  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 56) = v2;
  uint64_t v3 = *(_OWORD *)(v0 + 24);
  *(void *)(v2 + 16) = v1;
  *(_OWORD *)(v2 + 24) = v3;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v4;
  *uint64_t v4 = v0;
  v4[1] = TokenFetcher.fetchTokensInBackground(count:);
  return MEMORY[0x270FA2368]();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = TokenFetcher.fetchTokensInBackground(count:);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = TokenFetcher.fetchTokensInBackground(count:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 32);
  TokenCache.save()();
  outlined destroy of TokenFetcher.TokenFetchContext(v1, type metadata accessor for TokenFetcher.TokenFetchContext);
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void *)(v0 + 32);
  swift_task_dealloc();
  outlined destroy of TokenFetcher.TokenFetchContext(v1, type metadata accessor for TokenFetcher.TokenFetchContext);
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t TokenFetcher.fetchContext()(uint64_t a1)
{
  v2[4] = a1;
  v2[5] = v1;
  uint64_t v3 = type metadata accessor for URL.DirectoryHint();
  v2[6] = v3;
  v2[7] = *(void *)(v3 - 8);
  v2[8] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v2[9] = swift_task_alloc();
  v2[10] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for URL();
  v2[11] = v4;
  v2[12] = *(void *)(v4 - 8);
  v2[13] = swift_task_alloc();
  type metadata accessor for TokenIssuerDirectory();
  uint64_t v5 = swift_task_alloc();
  v2[14] = v5;
  uint64_t v6 = (void *)swift_task_alloc();
  v2[15] = v6;
  *uint64_t v6 = v2;
  v6[1] = TokenFetcher.fetchContext();
  return TokenFetcher.fetchTokenDirectory()(v5);
}

uint64_t TokenFetcher.fetchContext()()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 128) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x270FA2498](TokenFetcher.fetchContext(), 0, 0);
  }
  else
  {
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v2 + 136) = v3;
    *uint64_t v3 = v2;
    v3[1] = TokenFetcher.fetchContext();
    return TokenFetcher.fetchTokenKey()();
  }
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned char *v9;
  unsigned char *v10;
  uint64_t (*v11)(void);
  void (*v13)(uint64_t, uint64_t, uint64_t);
  Swift::String_optional v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t Context;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  if (!specialized TokenIssuerDirectory.isValid(tokenKey:currentTime:)(v0[18], v0[19], v0[14]))
  {
    uint64_t v7 = v0[18];
    uint64_t v6 = v0[19];
    uint64_t v8 = v0[14];
    lazy protocol witness table accessor for type AuthenticationError and conformance AuthenticationError();
    swift_allocError();
    *uint64_t v10 = 8;
    goto LABEL_5;
  }
  uint64_t v1 = v0[12];
  uint64_t v2 = v0[9];
  unint64_t v26 = v0[11];
  uint64_t v27 = v0[10];
  uint64_t v3 = v0[7];
  uint64_t v4 = v0[8];
  uint64_t v5 = v0[6];
  URL.absoluteString.getter();
  v0[2] = 0xD00000000000002ALL;
  v0[3] = 0x8000000249E96140;
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v4, *MEMORY[0x263F06E50], v5);
  lazy protocol witness table accessor for type String and conformance String();
  URL.appending<A>(path:directoryHint:)();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v4, v5);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v1 + 56))(v2, 0, 1, v26);
  URL.init(string:relativeTo:)();
  swift_bridgeObjectRelease();
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v2, &demangling cache variable for type metadata for URL?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v27, 1, v26) == 1)
  {
    uint64_t v7 = v0[18];
    uint64_t v6 = v0[19];
    uint64_t v8 = v0[14];
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v0[10], &demangling cache variable for type metadata for URL?);
    lazy protocol witness table accessor for type AuthenticationError and conformance AuthenticationError();
    swift_allocError();
    *Swift::String v9 = 1;
LABEL_5:
    swift_willThrow();
    outlined consume of Data._Representation(v7, v6);
LABEL_6:
    outlined destroy of TokenFetcher.TokenFetchContext(v8, (uint64_t (*)(void))type metadata accessor for TokenIssuerDirectory);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v11 = (uint64_t (*)(void))v0[1];
    goto LABEL_7;
  }
  id v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0[12] + 32);
  v13(v0[13], v0[10], v0[11]);
  uint64_t v14 = URL.host(percentEncoded:)(1);
  uint64_t v15 = v0[18];
  id v16 = v0[19];
  int64_t v17 = v0[13];
  uint64_t v8 = v0[14];
  if (!v14.value._object)
  {
    os_log_type_t v23 = v0[11];
    unint64_t v22 = v0[12];
    lazy protocol witness table accessor for type AuthenticationError and conformance AuthenticationError();
    swift_allocError();
    void *v24 = 2;
    swift_willThrow();
    outlined consume of Data._Representation(v15, v16);
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v17, v23);
    goto LABEL_6;
  }
  uint64_t v18 = v0[11];
  uint64_t v25 = v0[19];
  uint64_t v19 = v0[4];
  outlined destroy of TokenFetcher.TokenFetchContext(v8, (uint64_t (*)(void))type metadata accessor for TokenIssuerDirectory);
  v13(v19, v17, v18);
  Context = type metadata accessor for TokenFetcher.TokenFetchContext(0);
  *(Swift::String_optional *)(v19 + *(int *)(Context + 20)) = v14;
  uint64_t v21 = (uint64_t *)(v19 + *(int *)(Context + 24));
  void *v21 = v15;
  v21[1] = v25;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = (uint64_t (*)(void))v0[1];
LABEL_7:
  return v11();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  outlined destroy of TokenFetcher.TokenFetchContext(*(void *)(v0 + 112), (uint64_t (*)(void))type metadata accessor for TokenIssuerDirectory);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t TokenFetcher.fetchContext()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  v4[18] = a1;
  v4[19] = a2;
  v4[20] = v2;
  swift_task_dealloc();
  if (v2) {
    uint64_t v5 = TokenFetcher.fetchContext();
  }
  else {
    uint64_t v5 = TokenFetcher.fetchContext();
  }
  return MEMORY[0x270FA2498](v5, 0, 0);
}

uint64_t closure #1 in TokenFetcher.fetchTokenTasks(context:count:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[11] = a4;
  v5[12] = a5;
  v5[9] = a2;
  v5[10] = a3;
  uint64_t v6 = *(void *)(type metadata accessor for TokenFetcher.TokenFetchContext(0) - 8);
  v5[13] = v6;
  v5[14] = *(void *)(v6 + 64);
  v5[15] = swift_task_alloc();
  uint64_t v7 = *(void *)(type metadata accessor for TokenFetcher(0) - 8);
  v5[16] = v7;
  v5[17] = *(void *)(v7 + 64);
  v5[18] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v5[19] = swift_task_alloc();
  v5[20] = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #1 in TokenFetcher.fetchTokenTasks(context:count:), 0, 0);
}

void closure #1 in TokenFetcher.fetchTokenTasks(context:count:)()
{
  uint64_t v1 = *(void *)(v0 + 80);
  if (v1 < 0)
  {
    __break(1u);
  }
  else
  {
    if (v1)
    {
      uint64_t v28 = *(void *)(v0 + 128);
      uint64_t v27 = *(void *)(v0 + 104);
      uint64_t v2 = type metadata accessor for TaskPriority();
      uint64_t v3 = 0;
      uint64_t v4 = *(void *)(v2 - 8);
      unint64_t v26 = *(void (**)(void))(v4 + 56);
      uint64_t v25 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
      uint64_t v24 = (void (**)(uint64_t, uint64_t))(v4 + 8);
      do
      {
        uint64_t v31 = v3;
        uint64_t v29 = *(void *)(v0 + 160);
        uint64_t v30 = *(void *)(v0 + 152);
        uint64_t v7 = *(void *)(v0 + 136);
        uint64_t v8 = *(void *)(v0 + 144);
        uint64_t v9 = *(void *)(v0 + 120);
        uint64_t v10 = *(void *)(v0 + 88);
        uint64_t v11 = *(void *)(v0 + 96);
        v26();
        outlined init with copy of TokenFetcher(v10, v8, type metadata accessor for TokenFetcher);
        outlined init with copy of TokenFetcher(v11, v9, type metadata accessor for TokenFetcher.TokenFetchContext);
        unint64_t v12 = (*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80);
        unint64_t v13 = (v7 + *(unsigned __int8 *)(v27 + 80) + v12) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80);
        uint64_t v14 = swift_allocObject();
        *(void *)(v14 + 16) = 0;
        uint64_t v15 = (void *)(v14 + 16);
        *(void *)(v14 + 24) = 0;
        outlined init with take of TokenFetcher(v8, v14 + v12, type metadata accessor for TokenFetcher);
        outlined init with take of TokenFetcher(v9, v14 + v13, type metadata accessor for TokenFetcher.TokenFetchContext);
        outlined init with copy of TaskPriority?(v29, v30);
        int v16 = (*v25)(v30, 1, v2);
        uint64_t v17 = *(void *)(v0 + 152);
        if (v16 == 1)
        {
          outlined destroy of AMDPbHEConfig.OneOf_Config?(*(void *)(v0 + 152), &demangling cache variable for type metadata for TaskPriority?);
          if (!*v15) {
            goto LABEL_9;
          }
        }
        else
        {
          TaskPriority.rawValue.getter();
          (*v24)(v17, v2);
          if (!*v15)
          {
LABEL_9:
            uint64_t v18 = 0;
            uint64_t v20 = 0;
            goto LABEL_10;
          }
        }
        swift_getObjectType();
        swift_unknownObjectRetain();
        uint64_t v18 = dispatch thunk of Actor.unownedExecutor.getter();
        uint64_t v20 = v19;
        swift_unknownObjectRelease();
LABEL_10:
        uint64_t v21 = **(void **)(v0 + 72);
        uint64_t v22 = v20 | v18;
        if (v20 | v18)
        {
          uint64_t v22 = v0 + 16;
          *(void *)(v0 + 16) = 0;
          *(void *)(v0 + 24) = 0;
          *(void *)(v0 + 32) = v18;
          *(void *)(v0 + 40) = v20;
        }
        uint64_t v3 = v31 + 1;
        uint64_t v5 = *(void *)(v0 + 160);
        uint64_t v6 = *(void *)(v0 + 80);
        *(void *)(v0 + 48) = 1;
        *(void *)(v0 + 56) = v22;
        *(void *)(v0 + 64) = v21;
        swift_task_create();
        swift_release();
        outlined destroy of AMDPbHEConfig.OneOf_Config?(v5, &demangling cache variable for type metadata for TaskPriority?);
      }
      while (v31 + 1 != v6);
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    os_log_type_t v23 = *(void (**)(void))(v0 + 8);
    v23();
  }
}

uint64_t closure #1 in closure #1 in TokenFetcher.fetchTokenTasks(context:count:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a3;
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v4 + 24) = v6;
  *uint64_t v6 = v4;
  v6[1] = closure #1 in closure #1 in TokenFetcher.fetchTokenTasks(context:count:);
  return TokenFetcher.fetchTokenInner(context:)(a4);
}

uint64_t closure #1 in closure #1 in TokenFetcher.fetchTokenTasks(context:count:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  v4[4] = a1;
  v4[5] = a2;
  v4[6] = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v5 = (uint64_t (*)(void))v4[1];
    return v5();
  }
  else
  {
    return MEMORY[0x270FA2498](closure #1 in closure #1 in TokenFetcher.fetchTokenTasks(context:count:), 0, 0);
  }
}

void closure #1 in closure #1 in TokenFetcher.fetchTokenTasks(context:count:)()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v2 = v0[5];
  uint64_t v1 = v0[6];
  uint64_t v3 = v0[4];
  uint64_t v4 = v0[2];
  uint64_t v5 = static TokenCache.shared;
  uint64_t v6 = (uint64_t *)(v4 + *(int *)(type metadata accessor for TokenFetcher(0) + 20));
  uint64_t v7 = *v6;
  uint64_t v8 = v6[1];
  uint64_t v9 = *(void *)(v5 + OBJC_IVAR____TtC8CipherML10TokenCache_tokensForUserLock);
  uint64_t v10 = (void *)swift_task_alloc();
  void v10[2] = v5;
  v10[3] = v7;
  v10[4] = v8;
  v10[5] = v3;
  v10[6] = v2;
  os_unfair_lock_lock((os_unfair_lock_t)(v9 + 24));
  partial apply for closure #1 in TokenCache.addToken(user:token:)((uint64_t *)(v9 + 16));
  if (v1)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v9 + 24));
  }
  else
  {
    uint64_t v12 = v0[4];
    unint64_t v11 = v0[5];
    os_unfair_lock_unlock((os_unfair_lock_t)(v9 + 24));
    outlined consume of Data._Representation(v12, v11);
    swift_task_dealloc();
    unint64_t v13 = (void (*)(void))v0[1];
    v13();
  }
}

uint64_t TokenFetcher.fetchTokenInner(context:)(uint64_t a1)
{
  v2[3] = a1;
  v2[4] = v1;
  uint64_t v3 = type metadata accessor for URLRequest();
  v2[5] = v3;
  v2[6] = *(void *)(v3 - 8);
  v2[7] = swift_task_alloc();
  v2[8] = type metadata accessor for TokenFetcher.TokenFetchContext(0);
  v2[9] = swift_task_alloc();
  return MEMORY[0x270FA2498](TokenFetcher.fetchTokenInner(context:), 0, 0);
}

uint64_t TokenFetcher.fetchTokenInner(context:)()
{
  uint64_t v39 = v0;
  if (one-time initialization token for networking != -1) {
    swift_once();
  }
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[9];
  uint64_t v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Logger.networking);
  outlined init with copy of TokenFetcher(v1, v2, type metadata accessor for TokenFetcher.TokenFetchContext);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = v0[9];
  if (v6)
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    v38.value._unint64_t countAndFlagsBits = v9;
    *(_DWORD *)uint64_t v8 = 136446210;
    uint64_t v10 = URL.absoluteString.getter();
    v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v38.value._countAndFlagsBits);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of TokenFetcher.TokenFetchContext(v7, type metadata accessor for TokenFetcher.TokenFetchContext);
    _os_log_impl(&dword_249C3F000, v4, v5, "Fetching token from '%{public}s'", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5B4790](v9, -1, -1);
    MEMORY[0x24C5B4790](v8, -1, -1);
  }
  else
  {
    outlined destroy of TokenFetcher.TokenFetchContext(v0[9], type metadata accessor for TokenFetcher.TokenFetchContext);
  }

  uint64_t v12 = v0[8];
  uint64_t v13 = v0[3];
  uint64_t v14 = specialized static PrivateAccessToken.newBlindRSATokenChallenge(for:)(*(void *)(v13 + *(int *)(v12 + 20)), *(void *)(v13 + *(int *)(v12 + 20) + 8));
  v0[10] = v14;
  v0[11] = v15;
  int v16 = specialized static PrivateAccessToken.TokenRequest.request(challenge:publicKey:)(v14, v15, *(void *)(v13 + *(int *)(v12 + 24)), *(void *)(v13 + *(int *)(v12 + 24) + 8));
  v0[12] = v17;
  v0[13] = v18;
  v0[14] = v19;
  int v20 = v16;
  uint64_t v21 = v17;
  unint64_t v22 = v18;
  uint64_t v23 = v0[4];
  id v24 = objc_allocWithZone(MEMORY[0x263F089E0]);
  URL._bridgeToObjectiveC()(v25);
  uint64_t v27 = v26;
  id v28 = objc_msgSend(v24, sel_initWithURL_, v26);

  objc_msgSend(v28, sel__setPrivacyProxyFailClosed_, *(unsigned __int8 *)(v23 + *(int *)(type metadata accessor for TokenFetcher(0) + 28)));
  static URLRequest._unconditionallyBridgeFromObjectiveC(_:)();

  URLRequest.httpMethod.setter();
  PrivateAccessToken.TokenRequest.requestData.getter(v20 & 0xFFFFFF, v21, v22);
  URLRequest.httpBody.setter();
  v29.value._unint64_t countAndFlagsBits = 0xD000000000000022;
  v29.value._uint64_t object = (void *)0x8000000249E96220;
  v30._unint64_t countAndFlagsBits = 0x747065636341;
  v30._uint64_t object = (void *)0xE600000000000000;
  URLRequest.setValue(_:forHTTPHeaderField:)(v29, v30);
  v31.value._uint64_t object = (void *)0x8000000249E96250;
  v31.value._unint64_t countAndFlagsBits = 0xD000000000000021;
  v32._unint64_t countAndFlagsBits = 0x2D746E65746E6F43;
  v32._uint64_t object = (void *)0xEC00000065707954;
  URLRequest.setValue(_:forHTTPHeaderField:)(v31, v32);
  v38.value._unint64_t countAndFlagsBits = 0x20726572616542;
  v38.value._uint64_t object = (void *)0xE700000000000000;
  Swift::String v33 = Data.base64EncodedString(options:)(0);
  String.append(_:)(v33);
  swift_bridgeObjectRelease();
  v34._unint64_t countAndFlagsBits = 0x7A69726F68747541;
  v34._uint64_t object = (void *)0xED00006E6F697461;
  URLRequest.setValue(_:forHTTPHeaderField:)(v38, v34);
  swift_bridgeObjectRelease();
  uint64_t v35 = (void *)swift_task_alloc();
  v0[15] = v35;
  *uint64_t v35 = v0;
  v35[1] = TokenFetcher.fetchTokenInner(context:);
  uint64_t v36 = v0[7];
  return MEMORY[0x270EF1EB0](v36, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned char *v26;
  uint64_t (*v27)(void);
  uint64_t (*v29)(uint64_t, uint64_t);
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;

  self;
  uint64_t v1 = swift_dynamicCastObjCClass();
  if (!v1) {
    goto LABEL_11;
  }
  uint64_t v2 = (void *)v1;
  uint64_t v3 = *(id *)(v0 + 144);
  if (objc_msgSend(v2, sel_statusCode) != (id)200) {
    goto LABEL_10;
  }
  uint64_t v4 = (void *)MEMORY[0x24C5B33F0](0x2D746E65746E6F43, 0xEC00000065707954);
  os_log_type_t v5 = objc_msgSend(v2, sel_valueForHTTPHeaderField_, v4);

  if (!v5) {
    goto LABEL_10;
  }
  BOOL v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;

  if (v6 == 0xD000000000000022 && v8 == 0x8000000249E96220)
  {
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  uint64_t v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v9 & 1) == 0)
  {
LABEL_10:

LABEL_11:
    int v20 = *(void *)(v0 + 136);
    uint64_t v21 = *(void *)(v0 + 128);
    unint64_t v22 = *(void *)(v0 + 104);
    uint64_t v23 = *(void *)(v0 + 96);
    id v24 = *(void *)(v0 + 80);
    uint64_t v25 = *(void *)(v0 + 48);
    Swift::String v32 = *(void *)(v0 + 56);
    Swift::String v34 = *(void **)(v0 + 144);
    Swift::String v30 = *(void *)(v0 + 88);
    Swift::String_optional v31 = *(void *)(v0 + 40);
    lazy protocol witness table accessor for type AuthenticationError and conformance AuthenticationError();
    swift_allocError();
    *unint64_t v26 = 3;
    swift_willThrow();
    outlined consume of Data._Representation(v21, v20);
    swift_release();
    outlined consume of Data._Representation(v23, v22);
    outlined consume of Data._Representation(v24, v30);

    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v32, v31);
    goto LABEL_12;
  }
LABEL_8:
  uint64_t v10 = *(void *)(v0 + 152);
  unint64_t v11 = (*(uint64_t (**)(void, void))(**(void **)(v0 + 112) + 96))(*(void *)(v0 + 128), *(void *)(v0 + 136));
  uint64_t v14 = *(void *)(v0 + 136);
  uint64_t v13 = *(void **)(v0 + 144);
  unint64_t v15 = *(void *)(v0 + 128);
  int v16 = *(void *)(v0 + 104);
  uint64_t v17 = *(void *)(v0 + 88);
  unint64_t v18 = *(void *)(v0 + 96);
  uint64_t v19 = *(void *)(v0 + 80);
  if (v10)
  {
    (*(void (**)(void, void))(*(void *)(v0 + 48) + 8))(*(void *)(v0 + 56), *(void *)(v0 + 40));

    outlined consume of Data._Representation(v15, v14);
    swift_release();
    outlined consume of Data._Representation(v18, v16);
    outlined consume of Data._Representation(v19, v17);
LABEL_12:
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v27 = *(uint64_t (**)(void))(v0 + 8);
    return v27();
  }
  Swift::String v33 = v11;
  uint64_t v35 = v12;
  (*(void (**)(void, void))(*(void *)(v0 + 48) + 8))(*(void *)(v0 + 56), *(void *)(v0 + 40));

  outlined consume of Data._Representation(v15, v14);
  swift_release();
  outlined consume of Data._Representation(v18, v16);
  outlined consume of Data._Representation(v19, v17);
  swift_task_dealloc();
  swift_task_dealloc();
  Swift::String_optional v29 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
  return v29(v33, v35);
}

{
  void *v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;

  uint64_t v1 = v0[13];
  uint64_t v3 = v0[11];
  uint64_t v2 = v0[12];
  uint64_t v4 = v0[10];
  BOOL v6 = v0[6];
  os_log_type_t v5 = v0[7];
  uint64_t v7 = v0[5];
  swift_release();
  outlined consume of Data._Representation(v2, v1);
  outlined consume of Data._Representation(v4, v3);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t TokenFetcher.fetchTokenInner(context:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  os_log_type_t v5 = (void *)*v4;
  v5[16] = a1;
  v5[17] = a2;
  v5[18] = a3;
  v5[19] = v3;
  swift_task_dealloc();
  if (v3) {
    BOOL v6 = TokenFetcher.fetchTokenInner(context:);
  }
  else {
    BOOL v6 = TokenFetcher.fetchTokenInner(context:);
  }
  return MEMORY[0x270FA2498](v6, 0, 0);
}

uint64_t TokenFetcher.fetchTokenDirectory()(uint64_t a1)
{
  v2[4] = a1;
  v2[5] = v1;
  uint64_t v3 = type metadata accessor for URLRequest();
  v2[6] = v3;
  v2[7] = *(void *)(v3 - 8);
  v2[8] = swift_task_alloc();
  return MEMORY[0x270FA2498](TokenFetcher.fetchTokenDirectory(), 0, 0);
}

uint64_t TokenFetcher.fetchTokenDirectory()()
{
  TokenFetcher.tokenDirectoryRequest()(*(void *)(v0 + 64));
  type metadata accessor for TokenFetcher(0);
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v1;
  *uint64_t v1 = v0;
  v1[1] = TokenFetcher.fetchTokenDirectory();
  uint64_t v2 = *(void *)(v0 + 64);
  return MEMORY[0x270EF1EB0](v2, 0);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  id v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  void *v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned char *v21;
  void *v22;
  uint64_t v23;
  id v24;
  NSObject *v25;
  os_log_type_t v26;
  BOOL v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint8_t *v33;
  unsigned char *v34;
  unsigned char *v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t (*v39)(void);
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned char *v46;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;

  self;
  uint64_t v1 = swift_dynamicCastObjCClass();
  uint64_t v2 = (void *)v0[12];
  if (v1)
  {
    uint64_t v3 = (void *)v1;
    uint64_t v4 = v2;
    if (objc_msgSend(v3, sel_statusCode) == (id)200)
    {
      uint64_t v5 = (void *)v0[13];
      type metadata accessor for JSONDecoder();
      swift_allocObject();
      JSONDecoder.init()();
      type metadata accessor for TokenIssuerDirectory();
      lazy protocol witness table accessor for type TokenIssuerDirectory and conformance TokenIssuerDirectory(&lazy protocol witness table cache variable for type TokenIssuerDirectory and conformance TokenIssuerDirectory, (void (*)(uint64_t))type metadata accessor for TokenIssuerDirectory);
      dispatch thunk of JSONDecoder.decode<A>(_:from:)();
      if (!v5)
      {
        uint64_t v36 = v0[11];
        uint64_t v37 = (void *)v0[12];
        Swift::String_optional v38 = v0[10];
        (*(void (**)(void, void))(v0[7] + 8))(v0[8], v0[6]);
        swift_release();

        outlined consume of Data._Representation(v38, v36);
        swift_task_dealloc();
        uint64_t v39 = (uint64_t (*)(void))v0[1];
        goto LABEL_19;
      }
      BOOL v6 = v5;
      swift_release();
      if (one-time initialization token for networking != -1) {
        swift_once();
      }
      uint64_t v7 = type metadata accessor for Logger();
      __swift_project_value_buffer(v7, (uint64_t)static Logger.networking);
      uint64_t v8 = v5;
      uint64_t v9 = v5;
      uint64_t v10 = Logger.logObject.getter();
      unint64_t v11 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v10, v11))
      {
        uint64_t v12 = (uint8_t *)swift_slowAlloc();
        uint64_t v13 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v12 = 138543362;
        uint64_t v14 = v6;
        unint64_t v15 = _swift_stdlib_bridgeErrorToNSError();
        v0[3] = v15;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _OWORD *v13 = v15;

        _os_log_impl(&dword_249C3F000, v10, v11, "Failed to parse Token Issuer Directory: %{public}@", v12, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        MEMORY[0x24C5B4790](v13, -1, -1);
        MEMORY[0x24C5B4790](v12, -1, -1);
      }
      else
      {
      }
      uint64_t v40 = v0[11];
      int64_t v41 = (void *)v0[12];
      uint64_t v42 = v0[10];
      int64_t v44 = v0[7];
      unint64_t v43 = v0[8];
      unint64_t v45 = v0[6];
      lazy protocol witness table accessor for type AuthenticationError and conformance AuthenticationError();
      swift_allocError();
      char *v46 = 6;
      swift_willThrow();
      outlined consume of Data._Representation(v42, v40);

      (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v43, v45);
    }
    else
    {
      if (one-time initialization token for networking != -1) {
        swift_once();
      }
      unint64_t v22 = (void *)v0[12];
      uint64_t v23 = type metadata accessor for Logger();
      __swift_project_value_buffer(v23, (uint64_t)static Logger.networking);
      id v24 = v22;
      uint64_t v25 = Logger.logObject.getter();
      unint64_t v26 = static os_log_type_t.error.getter();
      uint64_t v27 = os_log_type_enabled(v25, v26);
      id v28 = v0[11];
      Swift::String_optional v29 = (void *)v0[12];
      uint64_t v49 = v0[10];
      Swift::String_optional v31 = v0[7];
      Swift::String v30 = v0[8];
      Swift::String v32 = v0[6];
      if (v27)
      {
        uint64_t v48 = v0[11];
        Swift::String v33 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)Swift::String v33 = 134349056;
        v0[2] = objc_msgSend(v3, sel_statusCode);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        _os_log_impl(&dword_249C3F000, v25, v26, "Failed to fetch Token Issuer Directory. HTTP Status: %{public}ld", v33, 0xCu);
        MEMORY[0x24C5B4790](v33, -1, -1);

        lazy protocol witness table accessor for type AuthenticationError and conformance AuthenticationError();
        swift_allocError();
        *Swift::String v34 = 4;
        swift_willThrow();
        outlined consume of Data._Representation(v49, v48);
      }
      else
      {

        lazy protocol witness table accessor for type AuthenticationError and conformance AuthenticationError();
        swift_allocError();
        *uint64_t v35 = 4;
        swift_willThrow();
        outlined consume of Data._Representation(v49, v28);
      }

      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v32);
    }
  }
  else
  {
    uint64_t v17 = v0[10];
    int v16 = v0[11];
    uint64_t v19 = v0[7];
    unint64_t v18 = v0[8];
    int v20 = v0[6];
    lazy protocol witness table accessor for type AuthenticationError and conformance AuthenticationError();
    swift_allocError();
    void *v21 = 4;
    swift_willThrow();
    outlined consume of Data._Representation(v17, v16);

    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
  }
  swift_task_dealloc();
  uint64_t v39 = (uint64_t (*)(void))v0[1];
LABEL_19:
  return v39();
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  (*(void (**)(void, void))(v0[7] + 8))(v0[8], v0[6]);
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t TokenFetcher.fetchTokenDirectory()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (void *)*v4;
  v5[10] = a1;
  v5[11] = a2;
  v5[12] = a3;
  v5[13] = v3;
  swift_task_dealloc();
  if (v3) {
    BOOL v6 = TokenFetcher.fetchTokenDirectory();
  }
  else {
    BOOL v6 = TokenFetcher.fetchTokenDirectory();
  }
  return MEMORY[0x270FA2498](v6, 0, 0);
}

uint64_t TokenFetcher.fetchTokenKey()()
{
  v1[4] = v0;
  uint64_t v2 = type metadata accessor for URL.DirectoryHint();
  v1[5] = v2;
  v1[6] = *(void *)(v2 - 8);
  v1[7] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for URL();
  v1[8] = v3;
  v1[9] = *(void *)(v3 - 8);
  v1[10] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for URLRequest();
  v1[11] = v4;
  v1[12] = *(void *)(v4 - 8);
  v1[13] = swift_task_alloc();
  return MEMORY[0x270FA2498](TokenFetcher.fetchTokenKey(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  NSURL *v9;
  void *v10;
  void *v11;
  id v12;
  Swift::String v13;
  Swift::String_optional v14;
  Swift::String v15;
  void *v16;
  uint64_t v17;
  uint64_t v19;

  uint64_t v2 = v0[9];
  uint64_t v1 = v0[10];
  uint64_t v4 = v0[7];
  uint64_t v3 = v0[8];
  uint64_t v5 = v0[5];
  uint64_t v6 = v0[6];
  v0[2] = 0xD000000000000018;
  uint64_t v7 = v0[4];
  v0[3] = 0x8000000249E96170;
  (*(void (**)(uint64_t, void, uint64_t))(v6 + 104))(v4, *MEMORY[0x263F06E50], v5);
  lazy protocol witness table accessor for type String and conformance String();
  URL.appending<A>(path:directoryHint:)();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  swift_bridgeObjectRelease();
  uint64_t v8 = objc_allocWithZone(MEMORY[0x263F089E0]);
  URL._bridgeToObjectiveC()(v9);
  unint64_t v11 = v10;
  uint64_t v12 = objc_msgSend(v8, sel_initWithURL_, v10);

  objc_msgSend(v12, sel__setPrivacyProxyFailClosed_, *(unsigned __int8 *)(v7 + *(int *)(type metadata accessor for TokenFetcher(0) + 28)));
  static URLRequest._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v13 = Data.base64EncodedString(options:)(0);
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14.value._unint64_t countAndFlagsBits = 0x20726572616542;
  v14.value._uint64_t object = (void *)0xE700000000000000;
  v15._unint64_t countAndFlagsBits = 0x7A69726F68747541;
  v15._uint64_t object = (void *)0xED00006E6F697461;
  URLRequest.setValue(_:forHTTPHeaderField:)(v14, v15);
  swift_bridgeObjectRelease();
  int v16 = (void *)swift_task_alloc();
  v0[14] = v16;
  *int v16 = v0;
  v16[1] = TokenFetcher.fetchTokenKey();
  uint64_t v17 = v0[13];
  return MEMORY[0x270EF1EB0](v17, 0);
}

{
  void *v0;
  void *v1;
  void *v2;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  unint64_t v7;
  void *v8;
  uint64_t v9;
  unsigned char *v10;
  uint64_t (*v11)(void);
  uint64_t v12;

  self;
  uint64_t v1 = (void *)swift_dynamicCastObjCClass();
  if (v1 && objc_msgSend(v1, sel_statusCode) == (id)200)
  {
    uint64_t v2 = (void *)v0[17];
    (*(void (**)(void, void))(v0[12] + 8))(v0[13], v0[11]);

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
    uint64_t v4 = v0[15];
    uint64_t v5 = v0[16];
    return v3(v4, v5);
  }
  else
  {
    uint64_t v7 = v0[16];
    uint64_t v8 = (void *)v0[17];
    uint64_t v9 = v0[15];
    lazy protocol witness table accessor for type AuthenticationError and conformance AuthenticationError();
    swift_allocError();
    *uint64_t v10 = 5;
    swift_willThrow();
    outlined consume of Data._Representation(v9, v7);

    (*(void (**)(void, void))(v0[12] + 8))(v0[13], v0[11]);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v11 = (uint64_t (*)(void))v0[1];
    return v11();
  }
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  (*(void (**)(void, void))(v0[12] + 8))(v0[13], v0[11]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t TokenFetcher.fetchTokenKey()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (void *)*v4;
  v5[15] = a1;
  v5[16] = a2;
  v5[17] = a3;
  v5[18] = v3;
  swift_task_dealloc();
  if (v3) {
    uint64_t v6 = TokenFetcher.fetchTokenKey();
  }
  else {
    uint64_t v6 = TokenFetcher.fetchTokenKey();
  }
  return MEMORY[0x270FA2498](v6, 0, 0);
}

uint64_t implicit closure #1 in TokenFetcher.fetchToken()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + 16) = a1;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v3 + 24) = v5;
  *uint64_t v5 = v3;
  v5[1] = implicit closure #1 in TokenFetcher.fetchToken();
  return TokenFetcher.fetchTokenInner(context:)(a3);
}

uint64_t implicit closure #1 in TokenFetcher.fetchToken()(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  uint64_t v7 = *v3;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v8 = *(uint64_t (**)(void))(v7 + 8);
    return v8();
  }
  else
  {
    *(void *)(v6 + 32) = a2;
    *(void *)(v6 + 40) = a1;
    return MEMORY[0x270FA2498](implicit closure #1 in TokenFetcher.fetchToken(), 0, 0);
  }
}

uint64_t implicit closure #1 in TokenFetcher.fetchToken()()
{
  *(int8x16_t *)*(void *)(v0 + 16) = vextq_s8(*(int8x16_t *)(v0 + 32), *(int8x16_t *)(v0 + 32), 8uLL);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in TokenFetcher.fetchToken()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 24) = a4;
  *(void *)(v5 + 32) = a5;
  return MEMORY[0x270FA2498](closure #1 in TokenFetcher.fetchToken(), 0, 0);
}

uint64_t closure #1 in TokenFetcher.fetchToken()()
{
  long long v4 = *(_OWORD *)(v0 + 24);
  *(void *)(v0 + 40) = os_transaction_create();
  uint64_t v1 = swift_task_alloc();
  *(void *)(v0 + 48) = v1;
  *(void *)(v1 + 16) = 3;
  *(_OWORD *)(v1 + 24) = v4;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v2;
  *uint64_t v2 = v0;
  v2[1] = closure #1 in TokenFetcher.fetchToken();
  return MEMORY[0x270FA2368]();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = closure #1 in TokenFetcher.fetchToken();
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = closure #1 in TokenFetcher.fetchToken();
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t (*v11)(void);
  uint64_t v13;

  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  TokenCache.save()();
  swift_unknownObjectRelease();
  if (v1)
  {
    if (one-time initialization token for networking != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.networking);
    uint64_t v3 = v1;
    long long v4 = v1;
    uint64_t v5 = Logger.logObject.getter();
    uint64_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v8 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 138543362;
      uint64_t v9 = v1;
      uint64_t v10 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 16) = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v8 = v10;

      _os_log_impl(&dword_249C3F000, v5, v6, "Failed to fetch extra tokens: %{public}@", v7, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x24C5B4790](v8, -1, -1);
      MEMORY[0x24C5B4790](v7, -1, -1);
    }
    else
    {
    }
  }
  unint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
  return v11();
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t (*v11)(void);
  uint64_t v13;

  swift_task_dealloc();
  uint64_t v1 = (void *)v0[8];
  swift_unknownObjectRelease();
  if (one-time initialization token for networking != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.networking);
  uint64_t v3 = v1;
  long long v4 = v1;
  uint64_t v5 = Logger.logObject.getter();
  uint64_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 138543362;
    uint64_t v9 = v1;
    uint64_t v10 = _swift_stdlib_bridgeErrorToNSError();
    v0[2] = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v8 = v10;

    _os_log_impl(&dword_249C3F000, v5, v6, "Failed to fetch extra tokens: %{public}@", v7, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x24C5B4790](v8, -1, -1);
    MEMORY[0x24C5B4790](v7, -1, -1);
  }
  else
  {
  }
  unint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of TaskPriority?(a1, (uint64_t)v8);
  uint64_t v9 = type metadata accessor for TaskPriority();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v8, &demangling cache variable for type metadata for TaskPriority?);
    if (*(void *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v11 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v13 = v12;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    if (*(void *)(a3 + 16)) {
      goto LABEL_3;
    }
  }
  uint64_t v11 = 0;
  uint64_t v13 = 0;
LABEL_6:
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a2;
  *(void *)(v14 + 24) = a3;
  if (v13 | v11)
  {
    v16[0] = 0;
    v16[1] = 0;
    v16[2] = v11;
    void v16[3] = v13;
  }
  return swift_task_create();
}

uint64_t TokenFetcher.tokenDirectoryURL()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for URL.DirectoryHint();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(v1 + *(int *)(type metadata accessor for TokenFetcher(0) + 28)) == 1)
  {
    v16[1] = a1;
    if (!(unint64_t)URL.host(percentEncoded:)(1).value._object)
    {
LABEL_5:
      lazy protocol witness table accessor for type AuthenticationError and conformance AuthenticationError();
      swift_allocError();
      *uint64_t v14 = 0;
      return swift_willThrow();
    }
    URL.init(string:)();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
    {
      swift_bridgeObjectRelease();
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v9, &demangling cache variable for type metadata for URL?);
      goto LABEL_5;
    }
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v9, v10);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<URLQueryItem>);
    type metadata accessor for URLQueryItem();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_249E85E40;
    URLQueryItem.init(name:value:)();
    swift_bridgeObjectRelease();
    URL.appending(queryItems:)();
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  else
  {
    v16[2] = 0xD00000000000002ALL;
    void v16[3] = 0x8000000249E96140;
    (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, *MEMORY[0x263F06E50], v3);
    lazy protocol witness table accessor for type String and conformance String();
    URL.appending<A>(path:directoryHint:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    return swift_bridgeObjectRelease();
  }
}

uint64_t TokenFetcher.tokenDirectoryRequest()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x270FA5388](v5);
  uint64_t v10 = (char *)&v26 - v9;
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v26 - v11;
  uint64_t result = TokenFetcher.tokenDirectoryURL()((uint64_t)&v26 - v11);
  if (!v1)
  {
    if (one-time initialization token for networking != -1) {
      swift_once();
    }
    uint64_t v32 = a1;
    uint64_t v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Logger.networking);
    Swift::String_optional v31 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
    v31(v10, v12, v3);
    unint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.debug.getter();
    int v17 = v16;
    if (os_log_type_enabled(v15, v16))
    {
      os_log_t v29 = v15;
      uint64_t v18 = swift_slowAlloc();
      int v27 = v17;
      uint64_t v19 = (uint8_t *)v18;
      uint64_t v28 = swift_slowAlloc();
      uint64_t v34 = v28;
      unint64_t v26 = v19;
      *(_DWORD *)uint64_t v19 = 136446210;
      Swift::String v30 = (void (*)(char *, uint64_t))(v19 + 4);
      lazy protocol witness table accessor for type TokenIssuerDirectory and conformance TokenIssuerDirectory((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
      uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v33 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      Swift::String v30 = *(void (**)(char *, uint64_t))(v4 + 8);
      v30(v10, v3);
      unint64_t v15 = v29;
      unint64_t v22 = v26;
      _os_log_impl(&dword_249C3F000, v29, (os_log_type_t)v27, "Fetching token issuer directory from %{public}s", v26, 0xCu);
      uint64_t v23 = v28;
      swift_arrayDestroy();
      MEMORY[0x24C5B4790](v23, -1, -1);
      MEMORY[0x24C5B4790](v22, -1, -1);
    }
    else
    {
      Swift::String v30 = *(void (**)(char *, uint64_t))(v4 + 8);
      v30(v10, v3);
    }

    v31(v7, v12, v3);
    URLRequest.init(url:cachePolicy:timeoutInterval:)();
    v24.value._uint64_t object = (void *)0x8000000249E96190;
    v24.value._unint64_t countAndFlagsBits = 0xD00000000000002ALL;
    v25._unint64_t countAndFlagsBits = 0x747065636341;
    v25._uint64_t object = (void *)0xE600000000000000;
    URLRequest.setValue(_:forHTTPHeaderField:)(v24, v25);
    return ((uint64_t (*)(char *, uint64_t))v30)(v12, v3);
  }
  return result;
}

uint64_t type metadata accessor for TokenFetcher.TokenFetchContext(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for TokenFetcher.TokenFetchContext);
}

uint64_t outlined init with copy of TokenFetcher(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_249D48934()
{
  uint64_t v1 = (int *)(type metadata accessor for TokenFetcher(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*(void *)v1 + 64);
  uint64_t v5 = (int *)(type metadata accessor for TokenFetcher.TokenFetchContext(0) - 8);
  uint64_t v6 = *(unsigned __int8 *)(*(void *)v5 + 80);
  uint64_t v7 = (v3 + v4 + v6) & ~v6;
  uint64_t v8 = v7 + *(void *)(*(void *)v5 + 64);
  uint64_t v9 = v2 | v6 | 7;
  uint64_t v10 = v0 + v3;
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8);
  v12(v10, v11);
  outlined consume of Data._Representation(*(void *)(v10 + v1[7]), *(void *)(v10 + v1[7] + 8));

  v12(v0 + v7, v11);
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(*(void *)(v0 + v7 + v5[8]), *(void *)(v0 + v7 + v5[8] + 8));
  return MEMORY[0x270FA0238](v0, v8, v9);
}

uint64_t outlined init with take of TokenFetcher(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t partial apply for implicit closure #1 in TokenFetcher.fetchToken()(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for TokenFetcher(0) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v4 + 64);
  uint64_t v7 = *(unsigned __int8 *)(*(void *)(type metadata accessor for TokenFetcher.TokenFetchContext(0) - 8) + 80);
  unint64_t v8 = v5 + v6 + v7;
  uint64_t v9 = v1 + v5;
  uint64_t v10 = v1 + (v8 & ~v7);
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  void *v11 = v2;
  v11[1] = protocol witness for NetworkManager.uploadKeys(evaluationKeys:userId:) in conformance AspireNetworkManager;
  return implicit closure #1 in TokenFetcher.fetchToken()(a1, v9, v10);
}

uint64_t partial apply for closure #1 in TokenFetcher.fetchToken()()
{
  uint64_t v2 = *(void *)(type metadata accessor for TokenFetcher(0) - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v2 + 64);
  uint64_t v5 = *(unsigned __int8 *)(*(void *)(type metadata accessor for TokenFetcher.TokenFetchContext(0) - 8) + 80);
  unint64_t v6 = v3 + v4 + v5;
  uint64_t v7 = v0 + v3;
  uint64_t v8 = v0 + (v6 & ~v5);
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v9;
  *uint64_t v9 = v1;
  v9[1] = protocol witness for NetworkManager.uploadKeys(evaluationKeys:userId:) in conformance AspireNetworkManager;
  v9[3] = v7;
  void v9[4] = v8;
  return MEMORY[0x270FA2498](closure #1 in TokenFetcher.fetchToken(), 0, 0);
}

void *initializeBufferWithCopyOfBuffer for TokenFetcher(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    a1 = (void *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for URL();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = (void *)((char *)a1 + v8);
    uint64_t v10 = (void *)((char *)a2 + v8);
    uint64_t v11 = *v10;
    unint64_t v12 = v10[1];
    outlined copy of Data._Representation(*v10, v12);
    *uint64_t v9 = v11;
    v9[1] = v12;
    uint64_t v13 = a3[6];
    uint64_t v14 = a3[7];
    unint64_t v15 = *(void **)((char *)a2 + v13);
    *(void *)((char *)a1 + v13) = v15;
    *((unsigned char *)a1 + v14) = *((unsigned char *)a2 + v14);
    id v16 = v15;
  }
  return a1;
}

void destroy for TokenFetcher(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  outlined consume of Data._Representation(*(void *)(a1 + *(int *)(a2 + 20)), *(void *)(a1 + *(int *)(a2 + 20) + 8));
  int v5 = *(void **)(a1 + *(int *)(a2 + 24));
}

uint64_t initializeWithCopy for TokenFetcher(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (uint64_t *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v10 = *v9;
  unint64_t v11 = v9[1];
  outlined copy of Data._Representation(*v9, v11);
  *uint64_t v8 = v10;
  v8[1] = v11;
  uint64_t v12 = a3[6];
  uint64_t v13 = a3[7];
  uint64_t v14 = *(void **)(a2 + v12);
  *(void *)(a1 + v12) = v14;
  *(unsigned char *)(a1 + v13) = *(unsigned char *)(a2 + v13);
  id v15 = v14;
  return a1;
}

uint64_t assignWithCopy for TokenFetcher(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (uint64_t *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v10 = *v9;
  unint64_t v11 = v9[1];
  outlined copy of Data._Representation(*v9, v11);
  uint64_t v12 = *v8;
  unint64_t v13 = v8[1];
  *uint64_t v8 = v10;
  v8[1] = v11;
  outlined consume of Data._Representation(v12, v13);
  uint64_t v14 = a3[6];
  id v15 = *(void **)(a2 + v14);
  id v16 = *(void **)(a1 + v14);
  *(void *)(a1 + v14) = v15;
  id v17 = v15;

  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  return a1;
}

uint64_t initializeWithTake for TokenFetcher(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  return a1;
}

uint64_t assignWithTake for TokenFetcher(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = *(void *)(a1 + v7);
  unint64_t v9 = *(void *)(a1 + v7 + 8);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  outlined consume of Data._Representation(v8, v9);
  uint64_t v10 = a3[6];
  unint64_t v11 = *(void **)(a1 + v10);
  *(void *)(a1 + v10) = *(void *)(a2 + v10);

  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  return a1;
}

uint64_t getEnumTagSinglePayload for TokenFetcher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_249D49218);
}

uint64_t sub_249D49218(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 24));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for TokenFetcher(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_249D492EC);
}

uint64_t sub_249D492EC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for URL();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata completion function for TokenFetcher()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for TokenFetcher.TokenFetchContext(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for URL();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = *(int *)(a3 + 24);
    unint64_t v10 = (uint64_t *)((char *)a1 + v8);
    unint64_t v11 = (uint64_t *)((char *)a2 + v8);
    uint64_t v12 = v11[1];
    *unint64_t v10 = *v11;
    v10[1] = v12;
    unint64_t v13 = (uint64_t *)((char *)a1 + v9);
    uint64_t v14 = (char *)a2 + v9;
    uint64_t v15 = *(uint64_t *)((char *)a2 + v9);
    unint64_t v16 = *((void *)v14 + 1);
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v15, v16);
    uint64_t *v13 = v15;
    v13[1] = v16;
  }
  return a1;
}

uint64_t destroy for TokenFetcher.TokenFetchContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease();
  int v5 = (uint64_t *)(a1 + *(int *)(a2 + 24));
  uint64_t v6 = *v5;
  unint64_t v7 = v5[1];
  return outlined consume of Data._Representation(v6, v7);
}

uint64_t initializeWithCopy for TokenFetcher.TokenFetchContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (void *)(a1 + v7);
  unint64_t v10 = (void *)(a2 + v7);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  uint64_t v12 = (uint64_t *)(a1 + v8);
  uint64_t v13 = *(void *)(a2 + v8);
  unint64_t v14 = *(void *)(a2 + v8 + 8);
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(v13, v14);
  uint64_t *v12 = v13;
  v12[1] = v14;
  return a1;
}

uint64_t assignWithCopy for TokenFetcher.TokenFetchContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (uint64_t *)(a1 + v10);
  uint64_t v12 = (uint64_t *)(a2 + v10);
  uint64_t v13 = *v12;
  unint64_t v14 = v12[1];
  outlined copy of Data._Representation(*v12, v14);
  uint64_t v15 = *v11;
  unint64_t v16 = v11[1];
  uint64_t *v11 = v13;
  v11[1] = v14;
  outlined consume of Data._Representation(v15, v16);
  return a1;
}

uint64_t initializeWithTake for TokenFetcher.TokenFetchContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  return a1;
}

uint64_t assignWithTake for TokenFetcher.TokenFetchContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v13 = *(void *)(a1 + v12);
  unint64_t v14 = *(void *)(a1 + v12 + 8);
  *(_OWORD *)(a1 + v12) = *(_OWORD *)(a2 + v12);
  outlined consume of Data._Representation(v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for TokenFetcher.TokenFetchContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_249D49874);
}

uint64_t sub_249D49874(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for TokenFetcher.TokenFetchContext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_249D4994C);
}

uint64_t sub_249D4994C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for URL();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata completion function for TokenFetcher.TokenFetchContext()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type TokenIssuerDirectory and conformance TokenIssuerDirectory(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with copy of TaskPriority?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_249D49B5C()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t closure #1 in TokenFetcher.fetchTokenTasks(context:count:)partial apply(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v8 = v2[4];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v9;
  *uint64_t v9 = v3;
  v9[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return closure #1 in TokenFetcher.fetchTokenTasks(context:count:)(a1, a2, v6, v7, v8);
}

uint64_t objectdestroy_11Tm()
{
  unint64_t v1 = (int *)(type metadata accessor for TokenFetcher(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = *(void *)(*(void *)v1 + 64);
  int v5 = (int *)(type metadata accessor for TokenFetcher.TokenFetchContext(0) - 8);
  uint64_t v6 = *(unsigned __int8 *)(*(void *)v5 + 80);
  uint64_t v7 = (v3 + v4 + v6) & ~v6;
  uint64_t v8 = v7 + *(void *)(*(void *)v5 + 64);
  uint64_t v9 = v2 | v6 | 7;
  swift_unknownObjectRelease();
  uint64_t v10 = v0 + v3;
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8);
  v12(v10, v11);
  outlined consume of Data._Representation(*(void *)(v10 + v1[7]), *(void *)(v10 + v1[7] + 8));

  v12(v0 + v7, v11);
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(*(void *)(v0 + v7 + v5[8]), *(void *)(v0 + v7 + v5[8] + 8));
  return MEMORY[0x270FA0238](v0, v8, v9);
}

uint64_t partial apply for closure #1 in closure #1 in TokenFetcher.fetchTokenTasks(context:count:)()
{
  uint64_t v2 = *(void *)(type metadata accessor for TokenFetcher(0) - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v2 + 64);
  uint64_t v5 = *(unsigned __int8 *)(*(void *)(type metadata accessor for TokenFetcher.TokenFetchContext(0) - 8) + 80);
  unint64_t v6 = v3 + v4 + v5;
  uint64_t v7 = *(void *)(v0 + 16);
  uint64_t v8 = *(void *)(v0 + 24);
  uint64_t v9 = v0 + v3;
  uint64_t v10 = v0 + (v6 & ~v5);
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v11;
  void *v11 = v1;
  v11[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return closure #1 in closure #1 in TokenFetcher.fetchTokenTasks(context:count:)(v7, v8, v9, v10);
}

uint64_t partial apply for closure #1 in TokenCache.addToken(user:token:)(uint64_t *a1)
{
  return closure #1 in TokenCache.addToken(user:token:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48));
}

uint64_t outlined destroy of TokenFetcher.TokenFetchContext(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t closure #1 in TokenCache.count(user:)partial apply@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return partial apply for closure #1 in TokenCache.count(user:)(a1, a2);
}

uint64_t *TokenCache.shared.unsafeMutableAddressor()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  return &static TokenCache.shared;
}

uint64_t TokenCache.clearTokens(user:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = *(os_unfair_lock_s **)(v3 + OBJC_IVAR____TtC8CipherML10TokenCache_tokensForUserLock);
  uint64_t v16 = a1;
  uint64_t v17 = a2;
  uint64_t v10 = (uint64_t *)&v9[4];
  uint64_t v11 = v9 + 6;
  os_unfair_lock_lock(v9 + 6);
  partial apply for closure #1 in TokenCache.clearTokens(user:)(v10);
  os_unfair_lock_unlock(v11);
  static TaskPriority.background.getter();
  uint64_t v12 = type metadata accessor for TaskPriority();
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v8, 0, 1, v12);
  uint64_t v13 = (void *)swift_allocObject();
  void v13[2] = 0;
  v13[3] = 0;
  v13[4] = v3;
  swift_retain();
  _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5((uint64_t)v8, (uint64_t)&async function pointer to partial apply for closure #1 in TokenCache.saveAsync(), (uint64_t)v13);
  return swift_release();
}

uint64_t TokenCache.removeToken(user:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TokenCache.CachedToken?);
  uint64_t v6 = MEMORY[0x270FA5388](v5 - 8);
  uint64_t v8 = &v18[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = &v18[-v9];
  uint64_t v11 = *(os_unfair_lock_s **)(v2 + OBJC_IVAR____TtC8CipherML10TokenCache_tokensForUserLock);
  uint64_t v19 = v2;
  uint64_t v20 = a1;
  uint64_t v21 = a2;
  uint64_t v12 = (uint64_t *)&v11[4];
  uint64_t v13 = v11 + 6;
  os_unfair_lock_lock(v11 + 6);
  partial apply for closure #1 in TokenCache.removeToken(user:)(v12, (uint64_t)v10);
  os_unfair_lock_unlock(v13);
  outlined init with take of TokenCache.CachedToken?((uint64_t)v10, (uint64_t)v8);
  uint64_t v14 = type metadata accessor for TokenCache.CachedToken(0);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48))(v8, 1, v14) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v8, &demangling cache variable for type metadata for TokenCache.CachedToken?);
    return 0;
  }
  else
  {
    uint64_t v16 = &v8[*(int *)(v14 + 20)];
    uint64_t v15 = *(void *)v16;
    outlined copy of Data._Representation(*(void *)v16, *((void *)v16 + 1));
    outlined destroy of TokenCache.CachedToken((uint64_t)v8);
  }
  return v15;
}

uint64_t TokenCache.count(user:)()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC8CipherML10TokenCache_tokensForUserLock);
  uint64_t v2 = (uint64_t *)&v1[4];
  uint64_t v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  _s8CipherML10TokenCacheC5count4userSi10Foundation4DataV_tFSiSDyAHSayAC06CachedC0VGGzYbXEfU_TA_0(v2, &v5);
  os_unfair_lock_unlock(v3);
  return v5;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> TokenCache.save()()
{
  uint64_t v2 = v0;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of URL?(v2 + OBJC_IVAR____TtC8CipherML10TokenCache_persistanceFile, (uint64_t)v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for URL?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v5, v6);
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    PropertyListEncoder.init()();
    dispatch thunk of PropertyListEncoder.outputFormat.setter();
    uint64_t v10 = *(os_unfair_lock_s **)(v2 + OBJC_IVAR____TtC8CipherML10TokenCache_tokensForUserLock);
    uint64_t v11 = v10 + 4;
    uint64_t v12 = v10 + 6;
    os_unfair_lock_lock(v10 + 6);
    closure #1 in TokenCache.save()(v11, &v17);
    os_unfair_lock_unlock(v12);
    if (v1)
    {
      __break(1u);
    }
    else
    {
      lazy protocol witness table accessor for type TokenCache.TokenCacheFormat and conformance TokenCache.TokenCacheFormat();
      uint64_t v13 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
      unint64_t v15 = v14;
      swift_bridgeObjectRelease();
      Data.write(to:options:)();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      outlined consume of Data._Representation(v13, v15);
      swift_release();
    }
  }
}

void TokenCache.addToken(user:token:)()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC8CipherML10TokenCache_tokensForUserLock);
  uint64_t v2 = (uint64_t *)&v1[4];
  uint64_t v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  partial apply for closure #1 in TokenCache.addToken(user:token:)(v2);
  os_unfair_lock_unlock(v3);
}

uint64_t TokenCache.CachedToken.tokenIssuance.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);
  return v4(a1, v1, v3);
}

uint64_t TokenCache.CachedToken.token.getter()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for TokenCache.CachedToken(0) + 20);
  uint64_t v2 = *(void *)v1;
  outlined copy of Data._Representation(*(void *)v1, *(void *)(v1 + 8));
  return v2;
}

uint64_t static TokenCache.CachedToken.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((static Date.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  uint64_t v4 = *(int *)(type metadata accessor for TokenCache.CachedToken(0) + 20);
  uint64_t v5 = *(void *)(a1 + v4);
  unint64_t v6 = *(void *)(a1 + v4 + 8);
  uint64_t v7 = (uint64_t *)(a2 + v4);
  uint64_t v8 = *v7;
  unint64_t v9 = v7[1];
  return specialized static Data.== infix(_:_:)(v5, v6, v8, v9);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TokenCache.CachedToken.CodingKeys()
{
  if (*v0) {
    return 0x6E656B6F74;
  }
  else {
    return 0x7373496E656B6F74;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TokenCache.CachedToken.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized TokenCache.CachedToken.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TokenCache.CachedToken.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TokenCache.CachedToken.CodingKeys and conformance TokenCache.CachedToken.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TokenCache.CachedToken.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TokenCache.CachedToken.CodingKeys and conformance TokenCache.CachedToken.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t TokenCache.CachedToken.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TokenCache.CachedToken.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TokenCache.CachedToken.CodingKeys and conformance TokenCache.CachedToken.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v11) = 0;
  type metadata accessor for Date();
  lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    long long v11 = *(_OWORD *)(v3 + *(int *)(type metadata accessor for TokenCache.CachedToken(0) + 20));
    v10[15] = 1;
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t TokenCache.CachedToken.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v23 = a2;
  uint64_t v27 = type metadata accessor for Date();
  uint64_t v24 = *(void *)(v27 - 8);
  MEMORY[0x270FA5388](v27);
  uint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TokenCache.CachedToken.CodingKeys>);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v25 = v6;
  uint64_t v26 = v7;
  MEMORY[0x270FA5388](v6);
  unint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for TokenCache.CachedToken(0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TokenCache.CachedToken.CodingKeys and conformance TokenCache.CachedToken.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  }
  uint64_t v22 = v10;
  uint64_t v13 = v12;
  uint64_t v14 = v24;
  LOBYTE(v28) = 0;
  lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
  uint64_t v15 = v27;
  uint64_t v16 = v25;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v17 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
  uint64_t v21 = (uint64_t)v13;
  v17(v13, v5, v15);
  char v29 = 1;
  lazy protocol witness table accessor for type Data and conformance Data();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v26 + 8))(v9, v16);
  uint64_t v18 = v21;
  *(_OWORD *)(v21 + *(int *)(v22 + 20)) = v28;
  outlined init with copy of TokenCache.CachedToken(v18, v23);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  return outlined destroy of TokenCache.CachedToken(v18);
}

uint64_t TokenCache.CachedToken.init(tokenIssuance:token:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(a4, a1, v8);
  uint64_t result = type metadata accessor for TokenCache.CachedToken(0);
  uint64_t v10 = (void *)(a4 + *(int *)(result + 20));
  *uint64_t v10 = a2;
  v10[1] = a3;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance TokenCache.CachedToken@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return TokenCache.CachedToken.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TokenCache.CachedToken(void *a1)
{
  return TokenCache.CachedToken.encode(to:)(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance TokenCache.CachedToken(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((static Date.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = *(void *)(a1 + v6);
  unint64_t v8 = *(void *)(a1 + v6 + 8);
  unint64_t v9 = (uint64_t *)(a2 + v6);
  uint64_t v10 = *v9;
  unint64_t v11 = v9[1];
  return specialized static Data.== infix(_:_:)(v7, v8, v10, v11);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TokenCache.TokenCacheFormat.CodingKeys()
{
  return 0x6F46736E656B6F74;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TokenCache.TokenCacheFormat.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x6F46736E656B6F74 && a2 == 0xED00007265735572)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TokenCache.TokenCacheFormat.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TokenCache.TokenCacheFormat.CodingKeys and conformance TokenCache.TokenCacheFormat.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TokenCache.TokenCacheFormat.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TokenCache.TokenCacheFormat.CodingKeys and conformance TokenCache.TokenCacheFormat.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t TokenCache.TokenCacheFormat.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TokenCache.TokenCacheFormat.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  char v7 = (char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TokenCache.TokenCacheFormat.CodingKeys and conformance TokenCache.TokenCacheFormat.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v9[1] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Data : [TokenCache.CachedToken]]);
  lazy protocol witness table accessor for type [Data : [TokenCache.CachedToken]] and conformance <> [A : B]();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

void *TokenCache.TokenCacheFormat.init(from:)(void *a1)
{
  return specialized TokenCache.TokenCacheFormat.init(from:)(a1);
}

void *protocol witness for Decodable.init(from:) in conformance TokenCache.TokenCacheFormat@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = specialized TokenCache.TokenCacheFormat.init(from:)(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TokenCache.TokenCacheFormat(void *a1)
{
  return TokenCache.TokenCacheFormat.encode(to:)(a1, *v1);
}

void *TokenCache.tokenExpiry.unsafeMutableAddressor()
{
  return &static TokenCache.tokenExpiry;
}

double static TokenCache.tokenExpiry.getter()
{
  return 86400.0;
}

uint64_t (*default argument 1 of TokenCache.init(file:currentDate:)())()
{
  return closure #1 in default argument 1 of TokenCache.init(file:currentDate:);
}

uint64_t static TokenCache.shared.getter()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  return swift_retain();
}

uint64_t TokenCache.persistanceFile.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of URL?(v1 + OBJC_IVAR____TtC8CipherML10TokenCache_persistanceFile, a1);
}

uint64_t TokenCache.tokensForUserLock.getter()
{
  return swift_retain();
}

uint64_t TokenCache.currentDate.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC8CipherML10TokenCache_currentDate);
  swift_retain();
  return v1;
}

uint64_t closure #1 in default argument 1 of TokenCache.init(file:currentDate:)()
{
  return MEMORY[0x270EF0BB8]();
}

uint64_t (*default argument 2 of TokenCache.init(tokensForUsers:file:currentDate:)())()
{
  return closure #1 in default argument 1 of TokenCache.init(file:currentDate:);
}

uint64_t TokenCache.__allocating_init(tokensForUsers:file:currentDate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = swift_allocObject();
  outlined init with copy of URL?(a2, v8 + OBJC_IVAR____TtC8CipherML10TokenCache_persistanceFile);
  unint64_t v9 = (void *)(v8 + OBJC_IVAR____TtC8CipherML10TokenCache_currentDate);
  *unint64_t v9 = a3;
  v9[1] = a4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<[Data : [TokenCache.CachedToken]], os_unfair_lock_s>);
  uint64_t v10 = swift_allocObject();
  *(_DWORD *)(v10 + 24) = 0;
  *(void *)(v10 + 16) = a1;
  outlined destroy of AMDPbHEConfig.OneOf_Config?(a2, &demangling cache variable for type metadata for URL?);
  *(void *)(v8 + OBJC_IVAR____TtC8CipherML10TokenCache_tokensForUserLock) = v10;
  return v8;
}

uint64_t TokenCache.init(tokensForUsers:file:currentDate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  outlined init with copy of URL?(a2, v4 + OBJC_IVAR____TtC8CipherML10TokenCache_persistanceFile);
  unint64_t v9 = (void *)(v4 + OBJC_IVAR____TtC8CipherML10TokenCache_currentDate);
  *unint64_t v9 = a3;
  v9[1] = a4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<[Data : [TokenCache.CachedToken]], os_unfair_lock_s>);
  uint64_t v10 = swift_allocObject();
  *(_DWORD *)(v10 + 24) = 0;
  *(void *)(v10 + 16) = a1;
  outlined destroy of AMDPbHEConfig.OneOf_Config?(a2, &demangling cache variable for type metadata for URL?);
  *(void *)(v4 + OBJC_IVAR____TtC8CipherML10TokenCache_tokensForUserLock) = v10;
  return v4;
}

uint64_t closure #1 in TokenCache.save()@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = *a1;
  return swift_bridgeObjectRetain();
}

uint64_t TokenCache.saveAsync()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  static TaskPriority.background.getter();
  uint64_t v4 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 0, 1, v4);
  uint64_t v5 = (void *)swift_allocObject();
  v5[2] = 0;
  v5[3] = 0;
  v5[4] = v0;
  swift_retain();
  return _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5((uint64_t)v3, (uint64_t)&closure #1 in TokenCache.saveAsync()partial apply, (uint64_t)v5);
}

uint64_t closure #1 in TokenCache.saveAsync()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  return MEMORY[0x270FA2498](closure #1 in TokenCache.saveAsync(), 0, 0);
}

uint64_t closure #1 in TokenCache.saveAsync()()
{
  os_transaction_create();
  TokenCache.save()();
  swift_unknownObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(void *)(a3 + 16)) {
      return swift_task_create();
    }
    goto LABEL_3;
  }
  outlined destroy of AMDPbHEConfig.OneOf_Config?(a1, &demangling cache variable for type metadata for TaskPriority?);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

uint64_t closure #1 in TokenCache.removeToken(user:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = TokenCache.validTokens(tokensForUser:user:)(*a1, a3, a4);
  unint64_t v13 = specialized Collection.randomElement()(0, *(void *)(v24 + 16));
  if (v14)
  {
    swift_bridgeObjectRelease();
    uint64_t v21 = type metadata accessor for TokenCache.CachedToken(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(a5, 1, 1, v21);
  }
  else
  {
    specialized Array.remove(at:)(v13, a5);
    uint64_t v15 = v24;
    outlined copy of Data._Representation(a3, a4);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v23 = *a1;
    *a1 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v15, a3, a4, isUniquelyReferenced_nonNull_native);
    *a1 = v23;
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(a3, a4);
    static TaskPriority.background.getter();
    uint64_t v17 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v12, 0, 1, v17);
    uint64_t v18 = (void *)swift_allocObject();
    v18[2] = 0;
    v18[3] = 0;
    v18[4] = a2;
    swift_retain();
    _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5((uint64_t)v12, (uint64_t)&closure #1 in TokenCache.saveAsync()partial apply, (uint64_t)v18);
    swift_release();
    uint64_t v19 = type metadata accessor for TokenCache.CachedToken(0);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(a5, 0, 1, v19);
  }
}

uint64_t TokenCache.validTokens(tokensForUser:user:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v4;
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = &v20[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (!*(void *)(a1 + 16)) {
    return MEMORY[0x263F8EE78];
  }
  outlined copy of Data._Representation(a2, a3);
  uint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v14 & 1) == 0)
  {
    outlined consume of Data._Representation(a2, a3);
    return MEMORY[0x263F8EE78];
  }
  uint64_t v15 = *(void *)(*(void *)(a1 + 56) + 8 * v13);
  swift_bridgeObjectRetain();
  uint64_t v16 = outlined consume of Data._Representation(a2, a3);
  uint64_t v17 = (*(uint64_t (**)(uint64_t))((char *)v4 + OBJC_IVAR____TtC8CipherML10TokenCache_currentDate))(v16);
  MEMORY[0x270FA5388](v17);
  *(void *)&v20[-16] = v12;
  *(void *)&v20[-8] = v8;
  uint64_t v18 = specialized _ArrayProtocol.filter(_:)((uint64_t (*)(char *))closure #1 in TokenCache.validTokens(tokensForUser:user:)partial apply, (uint64_t)&v20[-32], v15);
  (*(void (**)(unsigned char *, uint64_t))(v10 + 8))(v12, v9);
  return v18;
}

int64_t specialized Collection.randomElement()(int64_t a1, int64_t a2)
{
  if (a1 == a2) {
    return 0;
  }
  int64_t result = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_11;
  }
  if (result < 0)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (!result)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  unint64_t v5 = specialized RandomNumberGenerator.next<A>(upperBound:)(result);
  BOOL v6 = __OFADD__(a1, v5);
  int64_t result = a1 + v5;
  if (v6)
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    return result;
  }
  if (result < a1 || result > a2) {
    goto LABEL_14;
  }
  return result;
}

uint64_t specialized Array.remove(at:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew()(v5);
  }
  unint64_t v6 = *(void *)(v5 + 16);
  if (v6 <= a1)
  {
    __break(1u);
    goto LABEL_15;
  }
  unint64_t v7 = v6 - 1;
  uint64_t v8 = *(void *)(type metadata accessor for TokenCache.CachedToken(0) - 8);
  uint64_t v9 = *(void *)(v8 + 72);
  unint64_t v10 = v5 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80)) + v9 * a1;
  uint64_t result = outlined init with take of TokenCache.CachedToken(v10, a2);
  if ((uint64_t)(v7 - a1) < 0)
  {
LABEL_15:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (v9 > 0 || v10 >= v10 + v9 + v9 * (v7 - a1))
  {
    uint64_t result = swift_arrayInitWithTakeFrontToBack();
  }
  else if (v9)
  {
    uint64_t result = swift_arrayInitWithTakeBackToFront();
  }
  *(void *)(v5 + 16) = v7;
  *uint64_t v2 = v5;
  return result;
}

uint64_t closure #1 in TokenCache.clearTokens(user:)(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  outlined copy of Data._Representation(a2, a3);
  swift_bridgeObjectRetain();
  unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  char v8 = v7;
  swift_bridgeObjectRelease();
  if ((v8 & 1) == 0) {
    return outlined consume of Data._Representation(a2, a3);
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v10 = *a1;
  uint64_t v12 = *a1;
  *a1 = 0x8000000000000000;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    uint64_t v10 = v12;
  }
  outlined consume of Data._Representation(*(void *)(*(void *)(v10 + 48) + 16 * v6), *(void *)(*(void *)(v10 + 48) + 16 * v6 + 8));
  specialized _NativeDictionary._delete(at:)(v6, v10);
  *a1 = v10;
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(a2, a3);
  return swift_bridgeObjectRelease();
}

uint64_t partial apply for closure #1 in TokenCache.clearTokens(user:)(uint64_t *a1)
{
  return closure #1 in TokenCache.clearTokens(user:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t partial apply for closure #1 in TokenCache.saveAsync()()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  v3[2] = v2;
  return MEMORY[0x270FA2498](closure #1 in TokenCache.saveAsync(), 0, 0);
}

uint64_t partial apply for closure #1 in TokenCache.removeToken(user:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in TokenCache.removeToken(user:)(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), a2);
}

uint64_t outlined init with take of TokenCache.CachedToken?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TokenCache.CachedToken?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for TokenCache.CachedToken(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for TokenCache.CachedToken);
}

uint64_t outlined destroy of TokenCache.CachedToken(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for TokenCache.CachedToken(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t closure #1 in TokenCache.addToken(user:token:)(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v12 = type metadata accessor for TokenCache.CachedToken(0);
  uint64_t v13 = v12 - 8;
  uint64_t v22 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = TokenCache.validTokens(tokensForUser:user:)(*a1, a3, a4);
  (*(void (**)(void))(a2 + OBJC_IVAR____TtC8CipherML10TokenCache_currentDate))();
  uint64_t v17 = (uint64_t *)&v15[*(int *)(v13 + 28)];
  *uint64_t v17 = a5;
  v17[1] = a6;
  outlined copy of Data._Representation(a5, a6);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v16 + 16) + 1, 1, v16);
  }
  unint64_t v19 = *(void *)(v16 + 16);
  unint64_t v18 = *(void *)(v16 + 24);
  if (v19 >= v18 >> 1) {
    uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1, v16);
  }
  *(void *)(v16 + 16) = v19 + 1;
  outlined init with take of TokenCache.CachedToken((uint64_t)v15, v16+ ((*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80))+ *(void *)(v22 + 72) * v19);
  outlined copy of Data._Representation(a3, a4);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v23 = *a1;
  *a1 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v16, a3, a4, isUniquelyReferenced_nonNull_native);
  *a1 = v23;
  swift_bridgeObjectRelease();
  return outlined consume of Data._Representation(a3, a4);
}

uint64_t closure #1 in TokenCache.validTokens(tokensForUser:user:)()
{
  uint64_t v0 = type metadata accessor for Date();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.addingTimeInterval(_:)();
  char v4 = static Date.> infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v4 & 1;
}

uint64_t closure #1 in TokenCache.count(user:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, void *a4@<X8>)
{
  uint64_t v5 = *(void *)(TokenCache.validTokens(tokensForUser:user:)(*a1, a2, a3) + 16);
  uint64_t result = swift_bridgeObjectRelease();
  *a4 = v5;
  return result;
}

uint64_t _s8CipherML10TokenCacheC5count4userSi10Foundation4DataV_tFSiSDyAHSayAC06CachedC0VGGzYbXEfU_TA_0@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *(void *)(TokenCache.validTokens(tokensForUser:user:)(*a1, *(void *)(v2 + 24), *(void *)(v2 + 32)) + 16);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

unint64_t lazy protocol witness table accessor for type TokenCache.TokenCacheFormat and conformance TokenCache.TokenCacheFormat()
{
  unint64_t result = lazy protocol witness table cache variable for type TokenCache.TokenCacheFormat and conformance TokenCache.TokenCacheFormat;
  if (!lazy protocol witness table cache variable for type TokenCache.TokenCacheFormat and conformance TokenCache.TokenCacheFormat)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenCache.TokenCacheFormat and conformance TokenCache.TokenCacheFormat);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TokenCache.TokenCacheFormat and conformance TokenCache.TokenCacheFormat;
  if (!lazy protocol witness table cache variable for type TokenCache.TokenCacheFormat and conformance TokenCache.TokenCacheFormat)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenCache.TokenCacheFormat and conformance TokenCache.TokenCacheFormat);
  }
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> TokenCache.pruneCache()()
{
  uint64_t v2 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC8CipherML10TokenCache_tokensForUserLock);
  uint64_t v3 = (uint64_t *)&v2[4];
  uint64_t v4 = v2 + 6;
  os_unfair_lock_lock(v2 + 6);
  partial apply for closure #1 in TokenCache.pruneCache()(v3);
  os_unfair_lock_unlock(v4);
  if (v1) {
    __break(1u);
  }
  else {
    TokenCache.save()();
  }
}

uint64_t closure #1 in TokenCache.pruneCache()(uint64_t *a1, uint64_t **a2)
{
  uint64_t v53 = *a2;
  uint64_t v52 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v52 - 8);
  MEMORY[0x270FA5388](v52);
  uint64_t v51 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = swift_bridgeObjectRetain();
  char v8 = specialized _copyCollectionToContiguousArray<A>(_:)(v7);
  swift_bridgeObjectRelease();
  if (!v8[2]) {
    return swift_release();
  }
  uint64_t v9 = v8[2];
  uint64_t v54 = v2;
  uint64_t v50 = (uint64_t (**)(uint64_t))((char *)a2 + OBJC_IVAR____TtC8CipherML10TokenCache_currentDate);
  uint64_t v48 = v8;
  uint64_t v49 = (void (**)(char *, uint64_t))(v5 + 8);
  uint64_t v10 = (unint64_t *)(v8 + 5);
  uint64_t v11 = v9;
  while (1)
  {
    uint64_t v14 = *(v10 - 1);
    unint64_t v13 = *v10;
    uint64_t v15 = *a1;
    uint64_t v16 = *(void *)(*a1 + 16);
    outlined copy of Data._Representation(v14, *v10);
    if (v16)
    {
      outlined copy of Data._Representation(v14, v13);
      uint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v14, v13);
      if (v18)
      {
        uint64_t v19 = *(void *)(*(void *)(v15 + 56) + 8 * v17);
        swift_bridgeObjectRetain();
        uint64_t v20 = outlined consume of Data._Representation(v14, v13);
        uint64_t v21 = (uint64_t *)v51;
        uint64_t v22 = (*v50)(v20);
        MEMORY[0x270FA5388](v22);
        uint64_t v23 = v53;
        uint64_t v24 = v54;
        *(&v48 - 2) = v21;
        *(&v48 - 1) = v23;
        uint64_t v25 = specialized _ArrayProtocol.filter(_:)((uint64_t (*)(char *))partial apply for closure #1 in TokenCache.validTokens(tokensForUser:user:), (uint64_t)(&v48 - 4), v19);
        uint64_t v54 = v24;
        (*v49)((char *)v21, v52);
        if (!*(void *)(v25 + 16)) {
          goto LABEL_9;
        }
        goto LABEL_15;
      }
      outlined consume of Data._Representation(v14, v13);
    }
    uint64_t v25 = MEMORY[0x263F8EE78];
    if (!*(void *)(MEMORY[0x263F8EE78] + 16))
    {
LABEL_9:
      swift_bridgeObjectRelease();
      outlined copy of Data._Representation(v14, v13);
      swift_bridgeObjectRetain();
      unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(v14, v13);
      char v28 = v27;
      swift_bridgeObjectRelease();
      if (v28)
      {
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v30 = *a1;
        uint64_t v56 = (void *)*a1;
        *a1 = 0x8000000000000000;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          specialized _NativeDictionary.copy()();
          uint64_t v30 = (uint64_t)v56;
        }
        outlined consume of Data._Representation(*(void *)(*(void *)(v30 + 48) + 16 * v26), *(void *)(*(void *)(v30 + 48) + 16 * v26 + 8));
        specialized _NativeDictionary._delete(at:)(v26, v30);
        *a1 = v30;
        swift_bridgeObjectRelease();
        outlined consume of Data._Representation(v14, v13);
        swift_bridgeObjectRelease();
      }
      else
      {
        outlined consume of Data._Representation(v14, v13);
      }
      outlined consume of Data._Representation(v14, v13);
      goto LABEL_5;
    }
LABEL_15:
    uint64_t v55 = v11;
    outlined copy of Data._Representation(v14, v13);
    char v31 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v56 = (void *)*a1;
    uint64_t v32 = v56;
    uint64_t v33 = a1;
    *a1 = 0x8000000000000000;
    unint64_t v35 = specialized __RawDictionaryStorage.find<A>(_:)(v14, v13);
    uint64_t v36 = v32[2];
    BOOL v37 = (v34 & 1) == 0;
    uint64_t v38 = v36 + v37;
    if (__OFADD__(v36, v37)) {
      break;
    }
    char v39 = v34;
    if (v32[3] >= v38)
    {
      if (v31)
      {
        uint64_t v42 = v56;
        if ((v34 & 1) == 0) {
          goto LABEL_22;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        uint64_t v42 = v56;
        if ((v39 & 1) == 0) {
          goto LABEL_22;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v38, v31);
      uint64_t v40 = specialized __RawDictionaryStorage.find<A>(_:)(v14, v13);
      if ((v39 & 1) != (v41 & 1)) {
        goto LABEL_31;
      }
      unint64_t v35 = v40;
      uint64_t v42 = v56;
      if ((v39 & 1) == 0)
      {
LABEL_22:
        v42[(v35 >> 6) + 8] |= 1 << v35;
        unint64_t v43 = (uint64_t *)(v42[6] + 16 * v35);
        *unint64_t v43 = v14;
        v43[1] = v13;
        *(void *)(v42[7] + 8 * v35) = v25;
        uint64_t v44 = v42[2];
        BOOL v45 = __OFADD__(v44, 1);
        uint64_t v46 = v44 + 1;
        if (v45) {
          goto LABEL_30;
        }
        v42[2] = v46;
        outlined copy of Data._Representation(v14, v13);
        goto LABEL_4;
      }
    }
    uint64_t v12 = v42[7];
    swift_bridgeObjectRelease();
    *(void *)(v12 + 8 * v35) = v25;
LABEL_4:
    a1 = v33;
    uint64_t *v33 = (uint64_t)v42;
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(v14, v13);
    outlined consume of Data._Representation(v14, v13);
    uint64_t v11 = v55;
LABEL_5:
    v10 += 2;
    if (!--v11) {
      return swift_release();
    }
  }
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t TokenCache.deinit()
{
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v0 + OBJC_IVAR____TtC8CipherML10TokenCache_persistanceFile, &demangling cache variable for type metadata for URL?);
  swift_release();
  swift_release();
  return v0;
}

uint64_t TokenCache.__deallocating_deinit()
{
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v0 + OBJC_IVAR____TtC8CipherML10TokenCache_persistanceFile, &demangling cache variable for type metadata for URL?);
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

unint64_t lazy protocol witness table accessor for type TokenCache.CachedToken.CodingKeys and conformance TokenCache.CachedToken.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type TokenCache.CachedToken.CodingKeys and conformance TokenCache.CachedToken.CodingKeys;
  if (!lazy protocol witness table cache variable for type TokenCache.CachedToken.CodingKeys and conformance TokenCache.CachedToken.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenCache.CachedToken.CodingKeys and conformance TokenCache.CachedToken.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TokenCache.CachedToken.CodingKeys and conformance TokenCache.CachedToken.CodingKeys;
  if (!lazy protocol witness table cache variable for type TokenCache.CachedToken.CodingKeys and conformance TokenCache.CachedToken.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenCache.CachedToken.CodingKeys and conformance TokenCache.CachedToken.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TokenCache.CachedToken.CodingKeys and conformance TokenCache.CachedToken.CodingKeys;
  if (!lazy protocol witness table cache variable for type TokenCache.CachedToken.CodingKeys and conformance TokenCache.CachedToken.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenCache.CachedToken.CodingKeys and conformance TokenCache.CachedToken.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TokenCache.CachedToken.CodingKeys and conformance TokenCache.CachedToken.CodingKeys;
  if (!lazy protocol witness table cache variable for type TokenCache.CachedToken.CodingKeys and conformance TokenCache.CachedToken.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenCache.CachedToken.CodingKeys and conformance TokenCache.CachedToken.CodingKeys);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type Date and conformance Date(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with copy of TokenCache.CachedToken(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TokenCache.CachedToken(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type TokenCache.TokenCacheFormat.CodingKeys and conformance TokenCache.TokenCacheFormat.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type TokenCache.TokenCacheFormat.CodingKeys and conformance TokenCache.TokenCacheFormat.CodingKeys;
  if (!lazy protocol witness table cache variable for type TokenCache.TokenCacheFormat.CodingKeys and conformance TokenCache.TokenCacheFormat.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenCache.TokenCacheFormat.CodingKeys and conformance TokenCache.TokenCacheFormat.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TokenCache.TokenCacheFormat.CodingKeys and conformance TokenCache.TokenCacheFormat.CodingKeys;
  if (!lazy protocol witness table cache variable for type TokenCache.TokenCacheFormat.CodingKeys and conformance TokenCache.TokenCacheFormat.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenCache.TokenCacheFormat.CodingKeys and conformance TokenCache.TokenCacheFormat.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TokenCache.TokenCacheFormat.CodingKeys and conformance TokenCache.TokenCacheFormat.CodingKeys;
  if (!lazy protocol witness table cache variable for type TokenCache.TokenCacheFormat.CodingKeys and conformance TokenCache.TokenCacheFormat.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenCache.TokenCacheFormat.CodingKeys and conformance TokenCache.TokenCacheFormat.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TokenCache.TokenCacheFormat.CodingKeys and conformance TokenCache.TokenCacheFormat.CodingKeys;
  if (!lazy protocol witness table cache variable for type TokenCache.TokenCacheFormat.CodingKeys and conformance TokenCache.TokenCacheFormat.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenCache.TokenCacheFormat.CodingKeys and conformance TokenCache.TokenCacheFormat.CodingKeys);
  }
  return result;
}

uint64_t specialized TokenCache.__allocating_init(file:currentDate:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v20 = a2;
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = Data.init(contentsOf:options:)();
  unint64_t v12 = v11;
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  lazy protocol witness table accessor for type TokenCache.TokenCacheFormat and conformance TokenCache.TokenCacheFormat();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  swift_release();
  uint64_t v14 = v21;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, a1, v5);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v9, 0, 1, v5);
  type metadata accessor for TokenCache(0);
  uint64_t v15 = v6;
  uint64_t v16 = swift_allocObject();
  outlined init with copy of URL?((uint64_t)v9, v16 + OBJC_IVAR____TtC8CipherML10TokenCache_persistanceFile);
  uint64_t v17 = (void *)(v16 + OBJC_IVAR____TtC8CipherML10TokenCache_currentDate);
  *uint64_t v17 = v20;
  v17[1] = a3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<[Data : [TokenCache.CachedToken]], os_unfair_lock_s>);
  uint64_t v18 = swift_allocObject();
  *(_DWORD *)(v18 + 24) = 0;
  *(void *)(v18 + 16) = v14;
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v9, &demangling cache variable for type metadata for URL?);
  outlined consume of Data._Representation(v10, v12);
  *(void *)(v16 + OBJC_IVAR____TtC8CipherML10TokenCache_tokensForUserLock) = v18;
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(a1, v5);
  return v16;
}

uint64_t specialized TokenCache.CachedToken.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7373496E656B6F74 && a2 == 0xED000065636E6175;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E656B6F74 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

void *specialized TokenCache.TokenCacheFormat.init(from:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TokenCache.TokenCacheFormat.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  char v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TokenCache.TokenCacheFormat.CodingKeys and conformance TokenCache.TokenCacheFormat.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Data : [TokenCache.CachedToken]]);
    lazy protocol witness table accessor for type [Data : [TokenCache.CachedToken]] and conformance <> [A : B]();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v7 = (void *)v9[1];
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  }
  return v7;
}

uint64_t partial apply for closure #1 in TokenCache.pruneCache()(uint64_t *a1)
{
  return closure #1 in TokenCache.pruneCache()(a1, v1);
}

uint64_t ObjC metadata update function for TokenCache()
{
  return type metadata accessor for TokenCache(0);
}

uint64_t type metadata accessor for TokenCache(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for TokenCache);
}

void type metadata completion function for TokenCache()
{
  type metadata accessor for URL?();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for TokenCache(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for TokenCache);
}

uint64_t dispatch thunk of TokenCache.__allocating_init(tokensForUsers:file:currentDate:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t *initializeBufferWithCopyOfBuffer for TokenCache.CachedToken(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (uint64_t *)((char *)a1 + v8);
    uint64_t v10 = (uint64_t *)((char *)a2 + v8);
    uint64_t v11 = *v10;
    unint64_t v12 = v10[1];
    outlined copy of Data._Representation(*v10, v12);
    *uint64_t v9 = v11;
    v9[1] = v12;
  }
  return a1;
}

uint64_t destroy for TokenCache.CachedToken(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  int v5 = (uint64_t *)(a1 + *(int *)(a2 + 20));
  uint64_t v6 = *v5;
  unint64_t v7 = v5[1];
  return outlined consume of Data._Representation(v6, v7);
}

uint64_t initializeWithCopy for TokenCache.CachedToken(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (uint64_t *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v10 = *v9;
  unint64_t v11 = v9[1];
  outlined copy of Data._Representation(*v9, v11);
  *uint64_t v8 = v10;
  v8[1] = v11;
  return a1;
}

uint64_t assignWithCopy for TokenCache.CachedToken(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (uint64_t *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v10 = *v9;
  unint64_t v11 = v9[1];
  outlined copy of Data._Representation(*v9, v11);
  uint64_t v12 = *v8;
  unint64_t v13 = v8[1];
  *uint64_t v8 = v10;
  v8[1] = v11;
  outlined consume of Data._Representation(v12, v13);
  return a1;
}

uint64_t initializeWithTake for TokenCache.CachedToken(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for TokenCache.CachedToken(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void *)(a1 + v7);
  unint64_t v9 = *(void *)(a1 + v7 + 8);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  outlined consume of Data._Representation(v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for TokenCache.CachedToken(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_249D4DAE4);
}

uint64_t sub_249D4DAE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8) >> 60;
    if (((4 * v10) & 0xC) != 0) {
      return 16 - ((4 * v10) & 0xC | (v10 >> 2));
    }
    else {
      return 0;
    }
  }
}

uint64_t storeEnumTagSinglePayload for TokenCache.CachedToken(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_249D4DBCC);
}

uint64_t sub_249D4DBCC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for Date();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    unint64_t v11 = (void *)(a1 + *(int *)(a4 + 20));
    void *v11 = 0;
    v11[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
  }
  return result;
}

uint64_t type metadata completion function for TokenCache.CachedToken()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for TokenCache.TokenCacheFormat()
{
  return &type metadata for TokenCache.TokenCacheFormat;
}

unsigned char *storeEnumTagSinglePayload for TokenCache.TokenCacheFormat.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x249D4DDD8);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for TokenCache.TokenCacheFormat.CodingKeys()
{
  return &unk_26FDD1230;
}

unsigned char *storeEnumTagSinglePayload for TokenCache.CachedToken.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x249D4DEDCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void *type metadata accessor for TokenCache.CachedToken.CodingKeys()
{
  return &unk_26FDD11A0;
}

uint64_t partial apply for closure #1 in TokenCache.validTokens(tokensForUser:user:)()
{
  return closure #1 in TokenCache.validTokens(tokensForUser:user:)() & 1;
}

uint64_t lazy protocol witness table accessor for type [TokenCache.CachedToken] and conformance <A> [A](unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [TokenCache.CachedToken]);
    lazy protocol witness table accessor for type Date and conformance Date(a2, (void (*)(uint64_t))type metadata accessor for TokenCache.CachedToken);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with take of TokenCache.CachedToken(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TokenCache.CachedToken(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t objectdestroyTm_0()
{
  swift_unknownObjectRelease();
  swift_release();
  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t closure #1 in TokenCache.saveAsync()partial apply()
{
  uint64_t v2 = *(void *)(v0 + 32);
  int v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *int v3 = v1;
  v3[1] = protocol witness for NetworkManager.uploadKeys(evaluationKeys:userId:) in conformance AspireNetworkManager;
  v3[2] = v2;
  return MEMORY[0x270FA2498](closure #1 in TokenCache.saveAsync(), 0, 0);
}

uint64_t closure #1 in TokenCache.validTokens(tokensForUser:user:)partial apply()
{
  return partial apply for closure #1 in TokenCache.validTokens(tokensForUser:user:)() & 1;
}

uint64_t UserIdentifier.created.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);
  return v4(a1, v1, v3);
}

uint64_t UserIdentifier.uuid.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for UserIdentifier() + 20);
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t type metadata accessor for UserIdentifier()
{
  uint64_t result = type metadata singleton initialization cache for UserIdentifier;
  if (!type metadata singleton initialization cache for UserIdentifier) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t UserIdentifier.secretKeys.getter()
{
  type metadata accessor for UserIdentifier();
  return swift_bridgeObjectRetain();
}

uint64_t UserIdentifier.secretKeys.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for UserIdentifier() + 24);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + v3) = a1;
  return result;
}

uint64_t (*UserIdentifier.secretKeys.modify())()
{
  return Repeated.subscript.readspecialized ;
}

unint64_t UserIdentifier.init()@<X0>(uint64_t a1@<X8>)
{
  Date.init()();
  uint64_t v2 = type metadata accessor for UserIdentifier();
  UUID.init()();
  unint64_t result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *(void *)(a1 + *(int *)(v2 + 24)) = result;
  return result;
}

uint64_t UserIdentifier.init(date:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a2, a1, v4);
  uint64_t v6 = type metadata accessor for UserIdentifier();
  UUID.init()();
  unint64_t v7 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  *(void *)(a2 + *(int *)(v6 + 24)) = v7;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance UserIdentifier.CodingKeys()
{
  uint64_t v1 = 1684632949;
  if (*v0 != 1) {
    uint64_t v1 = 0x654B746572636573;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x64657461657263;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance UserIdentifier.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized UserIdentifier.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance UserIdentifier.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type UserIdentifier.CodingKeys and conformance UserIdentifier.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance UserIdentifier.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type UserIdentifier.CodingKeys and conformance UserIdentifier.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t UserIdentifier.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<UserIdentifier.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type UserIdentifier.CodingKeys and conformance UserIdentifier.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v14 = 0;
  type metadata accessor for Date();
  _s10Foundation4DateVACSEAAWlTm_0(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v9 = type metadata accessor for UserIdentifier();
    char v13 = 1;
    type metadata accessor for UUID();
    _s10Foundation4DateVACSEAAWlTm_0(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v12 = *(void *)(v3 + *(int *)(v9 + 24));
    v11[15] = 2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Data : SecretKey]);
    lazy protocol witness table accessor for type [Data : SecretKey] and conformance <> [A : B]();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t lazy protocol witness table accessor for type UserIdentifier.CodingKeys and conformance UserIdentifier.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type UserIdentifier.CodingKeys and conformance UserIdentifier.CodingKeys;
  if (!lazy protocol witness table cache variable for type UserIdentifier.CodingKeys and conformance UserIdentifier.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UserIdentifier.CodingKeys and conformance UserIdentifier.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type UserIdentifier.CodingKeys and conformance UserIdentifier.CodingKeys;
  if (!lazy protocol witness table cache variable for type UserIdentifier.CodingKeys and conformance UserIdentifier.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UserIdentifier.CodingKeys and conformance UserIdentifier.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type UserIdentifier.CodingKeys and conformance UserIdentifier.CodingKeys;
  if (!lazy protocol witness table cache variable for type UserIdentifier.CodingKeys and conformance UserIdentifier.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UserIdentifier.CodingKeys and conformance UserIdentifier.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type UserIdentifier.CodingKeys and conformance UserIdentifier.CodingKeys;
  if (!lazy protocol witness table cache variable for type UserIdentifier.CodingKeys and conformance UserIdentifier.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UserIdentifier.CodingKeys and conformance UserIdentifier.CodingKeys);
  }
  return result;
}

uint64_t UserIdentifier.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v24 = a2;
  uint64_t v28 = type metadata accessor for UUID();
  uint64_t v25 = *(void *)(v28 - 8);
  MEMORY[0x270FA5388](v28);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v26 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  char v29 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<UserIdentifier.CodingKeys>);
  uint64_t v27 = *(void *)(v30 - 8);
  MEMORY[0x270FA5388](v30);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UserIdentifier();
  MEMORY[0x270FA5388](v9);
  unint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type UserIdentifier.CodingKeys and conformance UserIdentifier.CodingKeys();
  char v31 = v8;
  uint64_t v12 = v32;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v12) {
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  }
  uint64_t v23 = v9;
  uint64_t v32 = a1;
  uint64_t v13 = (uint64_t)v11;
  uint64_t v15 = v27;
  uint64_t v14 = v28;
  char v36 = 0;
  _s10Foundation4DateVACSEAAWlTm_0(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
  uint64_t v16 = v29;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v17 = *(void (**)(uint64_t, char *))(v26 + 32);
  char v29 = (char *)v5;
  v17(v13, v16);
  char v35 = 1;
  _s10Foundation4DateVACSEAAWlTm_0(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
  uint64_t v18 = v4;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v19 = v23;
  (*(void (**)(uint64_t, char *, uint64_t))(v25 + 32))(v13 + *(int *)(v23 + 20), v18, v14);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Data : SecretKey]);
  char v34 = 2;
  lazy protocol witness table accessor for type [Data : SecretKey] and conformance <> [A : B]();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v20 = (uint64_t)v32;
  (*(void (**)(char *, uint64_t))(v15 + 8))(v31, v30);
  *(void *)(v13 + *(int *)(v19 + 24)) = v33;
  outlined init with copy of UserIdentifier(v13, v24);
  __swift_destroy_boxed_opaque_existential_1Tm(v20);
  return outlined destroy of UserIdentifier(v13);
}

uint64_t _s10Foundation4DateVACSEAAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with copy of UserIdentifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UserIdentifier();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of UserIdentifier(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UserIdentifier();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t protocol witness for Decodable.init(from:) in conformance UserIdentifier@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return UserIdentifier.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance UserIdentifier(void *a1)
{
  return UserIdentifier.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for UserIdentifier(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 24));
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for UserIdentifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for UserIdentifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for UserIdentifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for UserIdentifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t assignWithTake for UserIdentifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for UserIdentifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_249D4F7A0);
}

uint64_t sub_249D4F7A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  unint64_t v14 = *(void *)(a1 + *(int *)(a3 + 24));
  if (v14 >= 0xFFFFFFFF) {
    LODWORD(v14) = -1;
  }
  return (v14 + 1);
}

uint64_t storeEnumTagSinglePayload for UserIdentifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_249D4F8C8);
}

uint64_t sub_249D4F8C8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t result = type metadata accessor for UUID();
    uint64_t v14 = *(void *)(result - 8);
    if (*(_DWORD *)(v14 + 84) != a3)
    {
      *(void *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
      return result;
    }
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata completion function for UserIdentifier()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for UUID();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for UserIdentifier.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x249D4FB78);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void *type metadata accessor for UserIdentifier.CodingKeys()
{
  return &unk_26FDD2F68;
}

uint64_t specialized UserIdentifier.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x64657461657263 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1684632949 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x654B746572636573 && a2 == 0xEA00000000007379)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t RequestsManager.similarityScores(elements:shardIndices:context:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[8] = a2;
  v3[9] = a3;
  v3[7] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  v3[10] = swift_task_alloc();
  type metadata accessor for AspireApiRequest(0);
  v3[11] = swift_task_alloc();
  v3[12] = type metadata accessor for RequestsManager.PECContext();
  uint64_t v5 = swift_task_alloc();
  v3[13] = v5;
  char v6 = (void *)swift_task_alloc();
  v3[14] = v6;
  *char v6 = v3;
  v6[1] = RequestsManager.similarityScores(elements:shardIndices:context:);
  return RequestsManager.loadContext(requestContext:allowingKeyRotation:)(v5, a3, 1);
}

uint64_t RequestsManager.similarityScores(elements:shardIndices:context:)()
{
  *(void *)(*(void *)v1 + 120) = v0;
  swift_task_dealloc();
  if (v0) {
    BOOL v2 = RequestsManager.similarityScores(elements:shardIndices:context:);
  }
  else {
    BOOL v2 = RequestsManager.similarityScores(elements:shardIndices:context:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void);
  void *v14;
  uint64_t v15;
  uint64_t v16;

  uint64_t v1 = v0[15];
  BOOL v2 = v0[13];
  int v3 = v0[7];
  uint64_t v4 = *(int *)(v0[12] + 24);
  uint64_t v5 = type metadata accessor for SimilarityClient();
  char v6 = specialized RequestsManager.convertToFloats(_:embeddingDimension:)(v3, *(unsigned int *)(v2 + *(int *)(v5 + 20) + v4 + 8));
  if (v1)
  {
    outlined destroy of RequestsManager.PECContext(v0[13], (uint64_t (*)(void))type metadata accessor for RequestsManager.PECContext);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v12 = (uint64_t (*)(void))v0[1];
    return v12();
  }
  else
  {
    uint64_t v7 = v6;
    uint64_t v9 = v0[10];
    uint64_t v8 = v0[11];
    uint64_t v10 = v0[8];
    uint64_t v11 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v9, 1, 1, v11);
    RequestsManager.PECContext.preparePECRequest(elements:shardIndices:keyConfig:)(v7, v10, v9, v8);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v0[10], &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
    swift_bridgeObjectRelease();
    specialized RequestContext.networkManager()((uint64_t)(v0 + 2));
    uint64_t v14 = (void *)swift_task_alloc();
    v0[16] = v14;
    *uint64_t v14 = v0;
    v14[1] = RequestsManager.similarityScores(elements:shardIndices:context:);
    uint64_t v15 = v0[11];
    return RequestsManager.PECContext.requestData(request:networkManager:)(v15, (uint64_t)(v0 + 2));
  }
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v5;

  uint64_t v1 = v0[13];
  outlined destroy of RequestsManager.PECContext(v0[11], type metadata accessor for AspireApiRequest);
  outlined destroy of RequestsManager.PECContext(v1, (uint64_t (*)(void))type metadata accessor for RequestsManager.PECContext);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  BOOL v2 = (uint64_t (*)(uint64_t))v0[1];
  int v3 = v0[18];
  return v2(v3);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = v0[13];
  outlined destroy of RequestsManager.PECContext(v0[11], type metadata accessor for AspireApiRequest);
  outlined destroy of RequestsManager.PECContext(v1, (uint64_t (*)(void))type metadata accessor for RequestsManager.PECContext);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  BOOL v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t RequestsManager.similarityScores(elements:shardIndices:context:)(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2 + 16;
  *(void *)(*v2 + 136) = v1;
  swift_task_dealloc();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1Tm(v5);
    char v6 = RequestsManager.similarityScores(elements:shardIndices:context:);
  }
  else
  {
    *(void *)(v4 + 144) = a1;
    __swift_destroy_boxed_opaque_existential_1Tm(v5);
    char v6 = RequestsManager.similarityScores(elements:shardIndices:context:);
  }
  return MEMORY[0x270FA2498](v6, 0, 0);
}

uint64_t type metadata accessor for RequestsManager.PECContext()
{
  uint64_t result = type metadata singleton initialization cache for RequestsManager.PECContext;
  if (!type metadata singleton initialization cache for RequestsManager.PECContext) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t RequestsManager.setPECConfig(config:context:)(uint64_t a1, uint64_t a2)
{
  v3[10] = a2;
  v3[11] = v2;
  v3[9] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  v3[12] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for AspireHeEncryptionParameters(0);
  v3[13] = v4;
  v3[14] = *(void *)(v4 - 8);
  v3[15] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  v3[16] = swift_task_alloc();
  v3[17] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  v3[18] = v5;
  v3[19] = *(void *)(v5 - 8);
  v3[20] = swift_task_alloc();
  v3[21] = swift_task_alloc();
  v3[22] = type metadata accessor for AspireApiKeyStatus(0);
  v3[23] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiConfig?);
  unsigned char v3[24] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
  v3[25] = swift_task_alloc();
  v3[26] = type metadata accessor for AspireApiPECConfig(0);
  v3[27] = swift_task_alloc();
  v3[28] = swift_task_alloc();
  type metadata accessor for BinaryDecodingOptions();
  v3[29] = swift_task_alloc();
  v3[30] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for AspireApiConfig(0);
  v3[31] = v6;
  v3[32] = *(void *)(v6 - 8);
  v3[33] = swift_task_alloc();
  return MEMORY[0x270FA2498](RequestsManager.setPECConfig(config:context:), 0, 0);
}

{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v4 = (void *)*v3;
  v4[41] = a1;
  v4[42] = a2;
  v4[43] = v2;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v2) {
    uint64_t v5 = RequestsManager.setPECConfig(config:context:);
  }
  else {
    uint64_t v5 = RequestsManager.setPECConfig(config:context:);
  }
  return MEMORY[0x270FA2498](v5, 0, 0);
}

uint64_t RequestsManager.setPECConfig(config:context:)()
{
  uint64_t v1 = *(void **)(v0 + 72);
  id v2 = objc_msgSend(**(id **)(v0 + 80), sel_useCase);
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;

  *(void *)(v0 + 272) = v3;
  *(void *)(v0 + 280) = v5;
  id v6 = objc_msgSend(v1, sel_serializedPECConfig);
  uint64_t v7 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;

  *(void *)(v0 + 16) = v7;
  *(void *)(v0 + 24) = v9;
  BinaryDecodingOptions.init()();
  _s8CipherML15AspireApiConfigVAC21InternalSwiftProtobuf7MessageAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiConfig and conformance AspireApiConfig, (void (*)(uint64_t))type metadata accessor for AspireApiConfig);
  Message.init<A>(serializedBytes:extensions:partial:options:)();
  *(void *)(v0 + 288) = 0;
  uint64_t v10 = *(void *)(v0 + 200);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(*(void *)(v0 + 264), v10, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
  uint64_t v11 = type metadata accessor for AspireApiConfig.OneOf_Config(0);
  int v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v10, 1, v11);
  uint64_t v13 = *(void *)(v0 + 200);
  if (v12 == 1)
  {
    swift_bridgeObjectRelease();
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v13, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
LABEL_8:
    if (one-time initialization token for framework != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)static Logger.framework);
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v23 = 0;
      _os_log_impl(&dword_249C3F000, v21, v22, "CMLPECConfig is missing pecConfig.", v23, 2u);
      MEMORY[0x24C5B4790](v23, -1, -1);
    }
    uint64_t v24 = *(void *)(v0 + 264);

    type metadata accessor for CipherMLError();
    _s8CipherML15AspireApiConfigVAC21InternalSwiftProtobuf7MessageAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    outlined destroy of RequestsManager.PECContext(v24, type metadata accessor for AspireApiConfig);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v25 = *(uint64_t (**)(void))(v0 + 8);
    return v25();
  }
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    swift_bridgeObjectRelease();
    outlined destroy of RequestsManager.PECContext(v13, type metadata accessor for AspireApiConfig.OneOf_Config);
    goto LABEL_8;
  }
  uint64_t v15 = *(void *)(v0 + 256);
  uint64_t v14 = *(void *)(v0 + 264);
  uint64_t v16 = *(void *)(v0 + 248);
  uint64_t v17 = *(void *)(v0 + 192);
  uint64_t v18 = *(void *)(v0 + 88);
  outlined init with take of AspireApiPECConfig(v13, *(void *)(v0 + 224), type metadata accessor for AspireApiPECConfig);
  uint64_t v19 = *(void *)(v18 + 16);
  *(void *)(v0 + 296) = v19;
  outlined init with copy of AspireApiConfig(v14, v17, type metadata accessor for AspireApiConfig);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(v17, 0, 1, v16);
  return MEMORY[0x270FA2498](RequestsManager.setPECConfig(config:context:), v19, 0);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  uint64_t v1 = v0[36];
  ConfigCache.set(name:value:)(v0[34], v0[35], v0[24]);
  v0[38] = v1;
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v0[24], &demangling cache variable for type metadata for AspireApiConfig?);
  if (v1)
  {
    swift_bridgeObjectRelease();
    id v2 = RequestsManager.setPECConfig(config:context:);
  }
  else
  {
    id v2 = RequestsManager.setPECConfig(config:context:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t);
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(void);
  char *v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id *v40;
  id v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  BOOL v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _OWORD v74[2];
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;

  uint64_t v76 = v0;
  uint64_t v1 = *(void *)(v0 + 304);
  id v2 = objc_msgSend(*(id *)(v0 + 72), sel_serializedKeyStatus);
  uint64_t v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;

  *(void *)(v0 + 32) = v3;
  *(void *)(v0 + 40) = v5;
  unint64_t v75 = 0;
  memset(v74, 0, sizeof(v74));
  BinaryDecodingOptions.init()();
  _s8CipherML15AspireApiConfigVAC21InternalSwiftProtobuf7MessageAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiKeyStatus and conformance AspireApiKeyStatus, (void (*)(uint64_t))type metadata accessor for AspireApiKeyStatus);
  Message.init<A>(serializedBytes:extensions:partial:options:)();
  if (v1)
  {
    id v6 = *(void *)(v0 + 264);
    uint64_t v7 = *(void *)(v0 + 224);
    swift_bridgeObjectRelease();
    uint64_t v19 = v7;
LABEL_6:
    outlined destroy of RequestsManager.PECContext(v19, type metadata accessor for AspireApiPECConfig);
    outlined destroy of RequestsManager.PECContext(v6, type metadata accessor for AspireApiConfig);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v20 = *(uint64_t (**)(void))(v0 + 8);
    return v20();
  }
  uint64_t v8 = *(void *)(v0 + 224);
  uint64_t v10 = *(void *)(v0 + 144);
  uint64_t v9 = *(void *)(v0 + 152);
  uint64_t v11 = *(void *)(v0 + 136);
  int v12 = *(void *)(v8 + 32);
  uint64_t v13 = *(void *)(v8 + 40);
  uint64_t v71 = *(void *)(v0 + 184) + *(int *)(*(void *)(v0 + 176) + 24);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v71, v11, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  uint64_t v15 = v14(v11, 1, v10);
  uint64_t v16 = *(void *)(v0 + 168);
  if (v15 == 1)
  {
    uint64_t v17 = *(void *)(v0 + 144);
    uint64_t v18 = *(void *)(v0 + 112);
    uint64_t v68 = *(void *)(v0 + 104);
    uint64_t v70 = *(void *)(v0 + 136);
    *(void *)uint64_t v16 = MEMORY[0x263F8EE78];
    *(unsigned char *)(v16 + 8) = 0;
    outlined copy of Data._Representation(v12, v13);
    UnknownStorage.init()();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56))(v16 + *(int *)(v17 + 28), 1, 1, v68);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v70, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  }
  else
  {
    outlined init with take of AspireApiPECConfig(*(void *)(v0 + 136), v16, type metadata accessor for AspireHeEvaluationKeyConfig);
    outlined copy of Data._Representation(v12, v13);
  }
  os_log_type_t v22 = specialized Message.hash()();
  uint64_t v24 = v23;
  outlined destroy of RequestsManager.PECContext(*(void *)(v0 + 168), type metadata accessor for AspireHeEvaluationKeyConfig);
  uint64_t v25 = specialized static Data.== infix(_:_:)(v12, v13, (uint64_t)v22, v24);
  outlined consume of Data._Representation((uint64_t)v22, v24);
  outlined consume of Data._Representation(v12, v13);
  if ((v25 & 1) == 0)
  {
    uint64_t v32 = *(void *)(v0 + 144);
    uint64_t v33 = *(void *)(v0 + 128);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v71, v33, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
    char v34 = v14(v33, 1, v32);
    char v35 = *(void *)(v0 + 160);
    if (v34 == 1)
    {
      char v36 = *(void *)(v0 + 144);
      BOOL v37 = *(void *)(v0 + 128);
      char v39 = *(void *)(v0 + 104);
      uint64_t v38 = *(void *)(v0 + 112);
      *(void *)char v35 = MEMORY[0x263F8EE78];
      *(unsigned char *)(v35 + 8) = 0;
      UnknownStorage.init()();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v38 + 56))(v35 + *(int *)(v36 + 28), 1, 1, v39);
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v37, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
    }
    else
    {
      outlined init with take of AspireApiPECConfig(*(void *)(v0 + 128), *(void *)(v0 + 160), type metadata accessor for AspireHeEvaluationKeyConfig);
    }
    uint64_t v46 = specialized Message.hash()();
    uint64_t v48 = v47;
    outlined destroy of RequestsManager.PECContext(*(void *)(v0 + 160), type metadata accessor for AspireHeEvaluationKeyConfig);
    uint64_t v73 = Data.hexString.getter((uint64_t)v46, v48);
    uint64_t v50 = v49;
    outlined consume of Data._Representation((uint64_t)v46, v48);
    if (one-time initialization token for framework != -1) {
      swift_once();
    }
    uint64_t v52 = *(void *)(v0 + 216);
    uint64_t v51 = *(void *)(v0 + 224);
    uint64_t v53 = type metadata accessor for Logger();
    __swift_project_value_buffer(v53, (uint64_t)static Logger.framework);
    outlined init with copy of AspireApiConfig(v51, v52, type metadata accessor for AspireApiPECConfig);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v54 = Logger.logObject.getter();
    uint64_t v55 = static os_log_type_t.error.getter();
    uint64_t v56 = os_log_type_enabled(v54, v55);
    uint64_t v57 = *(void *)(v0 + 280);
    if (v56)
    {
      char v69 = *(void *)(v0 + 272);
      uint64_t v58 = *(void *)(v0 + 216);
      char v59 = swift_slowAlloc();
      uint64_t v72 = swift_slowAlloc();
      *(void *)&v74[0] = v72;
      *(_DWORD *)char v59 = 136446722;
      uint64_t v60 = Data.hexString.getter(*(void *)(v58 + 32), *(void *)(v58 + 40));
      *(void *)(v0 + 48) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v60, v61, (uint64_t *)v74);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of RequestsManager.PECContext(v58, type metadata accessor for AspireApiPECConfig);
      *(_WORD *)(v59 + 12) = 2082;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 56) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v69, v57, (uint64_t *)v74);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v59 + 22) = 2082;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v73, v50, (uint64_t *)v74);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_249C3F000, v54, v55, "Invalid PEC config hash '%{public}s' for useCase '%{public}s', expected: '%{public}s'", (uint8_t *)v59, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x24C5B4790](v72, -1, -1);
      MEMORY[0x24C5B4790](v59, -1, -1);
    }
    else
    {
      outlined destroy of RequestsManager.PECContext(*(void *)(v0 + 216), type metadata accessor for AspireApiPECConfig);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }

    id v6 = *(void *)(v0 + 264);
    char v62 = *(void *)(v0 + 224);
    uint64_t v63 = *(void *)(v0 + 184);
    type metadata accessor for CipherMLError();
    _s8CipherML15AspireApiConfigVAC21InternalSwiftProtobuf7MessageAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    outlined destroy of RequestsManager.PECContext(v63, type metadata accessor for AspireApiKeyStatus);
    uint64_t v19 = v62;
    goto LABEL_6;
  }
  uint64_t v26 = *(void *)(v0 + 104);
  uint64_t v27 = *(void *)(v0 + 112);
  uint64_t v28 = *(void *)(v0 + 96);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(*(void *)(v0 + 224) + *(int *)(*(void *)(v0 + 208) + 40), v28, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  char v29 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v27 + 48))(v28, 1, v26);
  uint64_t v30 = *(void *)(v0 + 120);
  if (v29 == 1)
  {
    char v31 = *(void *)(v0 + 96);
    *(void *)uint64_t v30 = 0;
    *(void *)(v30 + 8) = 0;
    *(void *)(v30 + 16) = MEMORY[0x263F8EE78];
    *(void *)(v30 + 24) = 0;
    *(unsigned char *)(v30 + 32) = 1;
    *(void *)(v30 + 40) = 0;
    *(unsigned char *)(v30 + 48) = 1;
    *(void *)(v30 + 56) = 0;
    *(unsigned char *)(v30 + 64) = 1;
    UnknownStorage.init()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v31, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  }
  else
  {
    outlined init with take of AspireApiPECConfig(*(void *)(v0 + 96), v30, type metadata accessor for AspireHeEncryptionParameters);
  }
  RequestsManager.validateConfig(useCase:keyStatus:encryptionParams:)(*(void *)(v0 + 272), *(void *)(v0 + 280), *(void *)(v0 + 184), *(void *)(v0 + 120));
  uint64_t v40 = *(id **)(v0 + 80);
  outlined destroy of RequestsManager.PECContext(*(void *)(v0 + 120), type metadata accessor for AspireHeEncryptionParameters);
  char v41 = objc_msgSend(*v40, sel_sourceApplicationBundleIdentifier);
  if (v41)
  {
    uint64_t v42 = v41;
    unint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    BOOL v45 = v44;
  }
  else
  {
    unint64_t v43 = 0;
    BOOL v45 = 0;
  }
  *(void *)(v0 + 312) = v45;
  uint64_t v64 = (void *)swift_task_alloc();
  *(void *)(v0 + 320) = v64;
  *uint64_t v64 = v0;
  v64[1] = RequestsManager.setPECConfig(config:context:);
  uint64_t v66 = *(void *)(v0 + 272);
  char v65 = *(void *)(v0 + 280);
  uint64_t v67 = *(void *)(v0 + 184);
  return RequestsManager.rotateKeysOffline(useCase:keyStatus:networkDelegation:)(v66, v65, v67, v43, v45);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, unint64_t);
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  uint64_t v1 = v0[33];
  id v2 = v0[28];
  uint64_t v3 = v0[10];
  outlined destroy of RequestsManager.PECContext(v0[23], type metadata accessor for AspireApiKeyStatus);
  outlined destroy of RequestsManager.PECContext(v2, type metadata accessor for AspireApiPECConfig);
  outlined destroy of RequestsManager.PECContext(v1, type metadata accessor for AspireApiConfig);
  if (*(unsigned char *)(v3 + 48))
  {
    id v6 = v0[41];
    uint64_t v7 = v0[42];
  }
  else
  {
    outlined consume of Data?(v0[41], v0[42]);
    id v6 = 0;
    uint64_t v7 = 0xF000000000000000;
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(uint64_t, unint64_t))v0[1];
  return v4(v6, v7);
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = v0[33];
  outlined destroy of RequestsManager.PECContext(v0[28], type metadata accessor for AspireApiPECConfig);
  outlined destroy of RequestsManager.PECContext(v1, type metadata accessor for AspireApiConfig);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v1 = v0[33];
  id v2 = v0[28];
  outlined destroy of RequestsManager.PECContext(v0[23], type metadata accessor for AspireApiKeyStatus);
  outlined destroy of RequestsManager.PECContext(v2, type metadata accessor for AspireApiPECConfig);
  outlined destroy of RequestsManager.PECContext(v1, type metadata accessor for AspireApiConfig);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t RequestsManager.encryptBatch(batchOfElements:shardIndices:context:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[6] = a3;
  v4[7] = v3;
  v4[4] = a1;
  v4[5] = a2;
  v4[8] = type metadata accessor for RequestsManager.PECContext();
  v4[9] = swift_task_alloc();
  return MEMORY[0x270FA2498](RequestsManager.encryptBatch(batchOfElements:shardIndices:context:), 0, 0);
}

{
  uint64_t v3;
  void *v4;
  uint64_t v6;

  v4[6] = a3;
  v4[7] = v3;
  v4[4] = a1;
  v4[5] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  v4[8] = swift_task_alloc();
  v4[9] = type metadata accessor for AspireApiRequest(0);
  v4[10] = swift_task_alloc();
  type metadata accessor for RequestsManager.PECContext();
  v4[11] = swift_task_alloc();
  return MEMORY[0x270FA2498](RequestsManager.encryptBatch(batchOfElements:shardIndices:context:), 0, 0);
}

uint64_t RequestsManager.encryptBatch(batchOfElements:shardIndices:context:)()
{
  uint64_t v17 = v0;
  uint64_t v1 = v0[6];
  id v2 = objc_msgSend(*(id *)v1, sel_useCase);
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v5 = v4;

  if (*(unsigned char *)(v1 + 48))
  {
    swift_bridgeObjectRelease();
    uint64_t v6 = (void *)swift_task_alloc();
    v0[10] = v6;
    *uint64_t v6 = v0;
    v6[1] = RequestsManager.encryptBatch(batchOfElements:shardIndices:context:);
    uint64_t v7 = v0[9];
    uint64_t v8 = v0[6];
    return RequestsManager.loadContext(requestContext:allowingKeyRotation:)(v7, v8, 1);
  }
  else
  {
    if (one-time initialization token for framework != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Logger.framework);
    swift_bridgeObjectRetain();
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      v16[0] = v14;
      *(_DWORD *)uint64_t v13 = 136315394;
      v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000033, 0x8000000249E96300, v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v13 + 12) = 2082;
      swift_bridgeObjectRetain();
      v0[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v3, v5, v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_249C3F000, v11, v12, "%s should not be called for differentially private use case '%{public}s'. Call 'encryptDifferentiallyPrivateFakes' instead.", (uint8_t *)v13, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x24C5B4790](v14, -1, -1);
      MEMORY[0x24C5B4790](v13, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    type metadata accessor for CipherMLError();
    _s8CipherML15AspireApiConfigVAC21InternalSwiftProtobuf7MessageAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    swift_task_dealloc();
    uint64_t v15 = (uint64_t (*)(void))v0[1];
    return v15();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 88) = v0;
  swift_task_dealloc();
  if (v0) {
    id v2 = RequestsManager.encryptBatch(batchOfElements:shardIndices:context:);
  }
  else {
    id v2 = RequestsManager.encryptBatch(batchOfElements:shardIndices:context:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  uint64_t v1 = v0[11];
  id v2 = v0[9];
  uint64_t v3 = v0[4];
  unint64_t v4 = *(int *)(v0[8] + 24);
  unint64_t v5 = type metadata accessor for SimilarityClient();
  uint64_t v6 = specialized RequestsManager.convertToFloats(_:embeddingDimension:)(v3, *(unsigned int *)(v2 + *(int *)(v5 + 20) + v4 + 8));
  v0[12] = v6;
  if (v1)
  {
    outlined destroy of RequestsManager.PECContext(v0[9], (uint64_t (*)(void))type metadata accessor for RequestsManager.PECContext);
    swift_task_dealloc();
    uint64_t v7 = (uint64_t (*)(void))v0[1];
    return v7();
  }
  else
  {
    uint64_t v9 = v6;
    uint64_t v10 = (void *)swift_task_alloc();
    v0[13] = v10;
    *uint64_t v10 = v0;
    v10[1] = RequestsManager.encryptBatch(batchOfElements:shardIndices:context:);
    uint64_t v11 = v0[6];
    os_log_type_t v12 = v0[5];
    return RequestsManager.encryptBatch(batchOfElements:shardIndices:context:)(v9, v12, v11);
  }
}

{
  void *v0;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  outlined destroy of RequestsManager.PECContext(v0[9], (uint64_t (*)(void))type metadata accessor for RequestsManager.PECContext);
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  uint64_t v3 = v0[15];
  id v2 = v0[16];
  return v1(v2, v3);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  outlined destroy of RequestsManager.PECContext(*(void *)(v0 + 72), (uint64_t (*)(void))type metadata accessor for RequestsManager.PECContext);
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  void *v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(void);
  uint64_t v16[2];
  void *v17;
  uint64_t v18;

  uint64_t v17 = v0;
  uint64_t v1 = v0[6];
  id v2 = objc_msgSend(*(id *)v1, sel_useCase);
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v5 = v4;

  if (*(unsigned char *)(v1 + 48))
  {
    swift_bridgeObjectRelease();
    uint64_t v6 = (void *)swift_task_alloc();
    v0[12] = v6;
    *uint64_t v6 = v0;
    v6[1] = RequestsManager.encryptBatch(batchOfElements:shardIndices:context:);
    uint64_t v7 = v0[11];
    uint64_t v8 = v0[6];
    return RequestsManager.loadContext(requestContext:allowingKeyRotation:)(v7, v8, 1);
  }
  else
  {
    if (one-time initialization token for framework != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Logger.framework);
    swift_bridgeObjectRetain();
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      v16[0] = v14;
      *(_DWORD *)uint64_t v13 = 136315394;
      v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000033, 0x8000000249E96300, v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v13 + 12) = 2082;
      swift_bridgeObjectRetain();
      v0[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v3, v5, v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_249C3F000, v11, v12, "%s should not be called for differentially private use case '%{public}s'. Call 'encryptDifferentiallyPrivateFakes' instead.", (uint8_t *)v13, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x24C5B4790](v14, -1, -1);
      MEMORY[0x24C5B4790](v13, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    type metadata accessor for CipherMLError();
    _s8CipherML15AspireApiConfigVAC21InternalSwiftProtobuf7MessageAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v15 = (uint64_t (*)(void))v0[1];
    return v15();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 104) = v0;
  swift_task_dealloc();
  if (v0) {
    id v2 = RequestsManager.encryptBatch(batchOfElements:shardIndices:context:);
  }
  else {
    id v2 = RequestsManager.encryptBatch(batchOfElements:shardIndices:context:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void);
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t);
  uint64_t v16;

  uint64_t v1 = v0[13];
  id v2 = v0[10];
  uint64_t v3 = v0[8];
  unint64_t v5 = v0[4];
  unint64_t v4 = v0[5];
  uint64_t v6 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v3, 1, 1, v6);
  RequestsManager.PECContext.preparePECRequest(elements:shardIndices:keyConfig:)(v5, v4, v3, v2);
  if (v1)
  {
    uint64_t v7 = v0[11];
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v0[8], &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
    outlined destroy of RequestsManager.PECContext(v7, (uint64_t (*)(void))type metadata accessor for RequestsManager.PECContext);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v11 = (uint64_t (*)(void))v0[1];
    return v11();
  }
  else
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v0[8], &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
    _s8CipherML15AspireApiConfigVAC21InternalSwiftProtobuf7MessageAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiRequest and conformance AspireApiRequest, (void (*)(uint64_t))type metadata accessor for AspireApiRequest);
    uint64_t v8 = Message.serializedData(partial:)();
    uint64_t v10 = v0[11];
    uint64_t v13 = v8;
    uint64_t v14 = v9;
    outlined destroy of RequestsManager.PECContext(v0[10], type metadata accessor for AspireApiRequest);
    outlined destroy of RequestsManager.PECContext(v10, (uint64_t (*)(void))type metadata accessor for RequestsManager.PECContext);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
    return v15(v13, v14);
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t RequestsManager.encryptBatch(batchOfElements:shardIndices:context:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  *(void *)(*v3 + 112) = v2;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v2)
  {
    uint64_t v7 = RequestsManager.encryptBatch(batchOfElements:shardIndices:context:);
  }
  else
  {
    *(void *)(v6 + 120) = a2;
    *(void *)(v6 + 128) = a1;
    uint64_t v7 = RequestsManager.encryptBatch(batchOfElements:shardIndices:context:);
  }
  return MEMORY[0x270FA2498](v7, 0, 0);
}

uint64_t RequestsManager.encryptDifferentiallyPrivateFakes(batchOfElements:shardIndex:shardCount:pecConfig:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[16] = a4;
  v5[17] = a5;
  v5[14] = a2;
  v5[15] = a3;
  v5[13] = a1;
  type metadata accessor for FakeQueriesList();
  v5[18] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  v5[19] = swift_task_alloc();
  type metadata accessor for BinaryDecodingOptions();
  v5[20] = swift_task_alloc();
  v5[21] = type metadata accessor for AspireApiKeyStatus(0);
  v5[22] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  v5[23] = v7;
  v5[24] = *(void *)(v7 - 8);
  v5[25] = swift_task_alloc();
  v5[26] = type metadata accessor for RequestsManager.PECContext();
  uint64_t v8 = swift_task_alloc();
  v5[27] = v8;
  uint64_t v9 = (void *)swift_task_alloc();
  v5[28] = v9;
  *uint64_t v9 = v5;
  v9[1] = RequestsManager.encryptDifferentiallyPrivateFakes(batchOfElements:shardIndex:shardCount:pecConfig:context:);
  return RequestsManager.loadContext(requestContext:allowingKeyRotation:)(v8, a5, 1);
}

uint64_t RequestsManager.encryptDifferentiallyPrivateFakes(batchOfElements:shardIndex:shardCount:pecConfig:context:)()
{
  *(void *)(*(void *)v1 + 232) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = RequestsManager.encryptDifferentiallyPrivateFakes(batchOfElements:shardIndex:shardCount:pecConfig:context:);
  }
  else {
    uint64_t v2 = RequestsManager.encryptDifferentiallyPrivateFakes(batchOfElements:shardIndex:shardCount:pecConfig:context:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  long long v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t (*v27)(void);
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  void *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t (*v57)(void *);
  uint64_t v58;
  _OWORD v59[2];
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  uint64_t v61 = v0;
  uint64_t v1 = *(void *)(v0 + 136);
  uint64_t v2 = objc_msgSend(*(id *)v1, sel_useCase);
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v5 = v4;

  if (*(unsigned char *)(v1 + 48))
  {
    if (one-time initialization token for framework != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.framework);
    swift_bridgeObjectRetain();
    uint64_t v7 = Logger.logObject.getter();
    uint64_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v10 = v3;
      uint64_t v11 = swift_slowAlloc();
      *(void *)&v59[0] = v11;
      *(_DWORD *)uint64_t v9 = 136446210;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 72) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v5, (uint64_t *)v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_249C3F000, v7, v8, "Missing differential privacy parameters for the use case '%{public}s.'", v9, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C5B4790](v11, -1, -1);
      MEMORY[0x24C5B4790](v9, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    os_log_type_t v22 = *(void *)(v0 + 216);
    type metadata accessor for CipherMLError();
    _s8CipherML15AspireApiConfigVAC21InternalSwiftProtobuf7MessageAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
    swift_allocError();
LABEL_17:
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    outlined destroy of RequestsManager.PECContext(v22, (uint64_t (*)(void))type metadata accessor for RequestsManager.PECContext);
    goto LABEL_18;
  }
  os_log_type_t v12 = *(void *)(v0 + 104);
  uint64_t v13 = *(void *)(v0 + 136);
  uint64_t v14 = *(void *)(v13 + 40);
  uint64_t v15 = *(_OWORD *)(v13 + 24);
  *(_OWORD *)(v0 + 16) = *(_OWORD *)(v13 + 8);
  *(_OWORD *)(v0 + 32) = v15;
  *(void *)(v0 + 48) = v14;
  uint64_t v16 = *(void *)(v12 + 16);
  if (v16 != 1)
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for framework != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)static Logger.framework);
    swift_bridgeObjectRetain();
    uint64_t v24 = Logger.logObject.getter();
    uint64_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v26 = 134349056;
      *(void *)(v0 + 80) = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_249C3F000, v24, v25, "encryptDifferentiallyPrivateFakes requires batchOfElements.count == 1,\nfound '%{public}ld.'\nIn the future, we may support a batch of > 1 embedding vector.", v26, 0xCu);
      MEMORY[0x24C5B4790](v26, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease();
    }

    os_log_type_t v22 = *(void *)(v0 + 216);
    type metadata accessor for CipherMLError();
    _s8CipherML15AspireApiConfigVAC21InternalSwiftProtobuf7MessageAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
    swift_allocError();
    goto LABEL_17;
  }
  uint64_t v17 = *(void *)(v0 + 232);
  uint64_t v18 = *(void *)(v0 + 216);
  uint64_t v19 = *(int *)(*(void *)(v0 + 208) + 24);
  uint64_t v20 = v18 + *(int *)(type metadata accessor for SimilarityClient() + 20) + v19;
  uint64_t v21 = specialized RequestsManager.convertToFloats(_:embeddingDimension:)(v12, *(unsigned int *)(v20 + 8));
  if (v17)
  {
    outlined destroy of RequestsManager.PECContext(*(void *)(v0 + 216), (uint64_t (*)(void))type metadata accessor for RequestsManager.PECContext);
    swift_bridgeObjectRelease();
LABEL_18:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v27 = *(uint64_t (**)(void))(v0 + 8);
    return v27();
  }
  uint64_t v58 = v21;
  char v29 = objc_msgSend(*(id *)(v0 + 128), sel_serializedKeyStatus);
  uint64_t v30 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v32 = v31;

  *(void *)(v0 + 56) = v30;
  *(void *)(v0 + 64) = v32;
  uint64_t v60 = 0;
  memset(v59, 0, sizeof(v59));
  BinaryDecodingOptions.init()();
  _s8CipherML15AspireApiConfigVAC21InternalSwiftProtobuf7MessageAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiKeyStatus and conformance AspireApiKeyStatus, (void (*)(uint64_t))type metadata accessor for AspireApiKeyStatus);
  Message.init<A>(serializedBytes:extensions:partial:options:)();
  uint64_t v33 = *(void *)(v0 + 184);
  char v34 = *(void *)(v0 + 192);
  char v35 = *(void *)(v0 + 152);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(*(void *)(v0 + 176) + *(int *)(*(void *)(v0 + 168) + 24), v35, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  char v36 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v34 + 48))(v35, 1, v33);
  BOOL v37 = *(void *)(v0 + 200);
  if (v36 == 1)
  {
    uint64_t v38 = *(void *)(v0 + 184);
    char v39 = *(void *)(v0 + 152);
    *(void *)BOOL v37 = MEMORY[0x263F8EE78];
    *(unsigned char *)(v37 + 8) = 0;
    UnknownStorage.init()();
    uint64_t v40 = v37 + *(int *)(v38 + 28);
    char v41 = type metadata accessor for AspireHeEncryptionParameters(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56))(v40, 1, 1, v41);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v39, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  }
  else
  {
    outlined init with take of AspireApiPECConfig(*(void *)(v0 + 152), *(void *)(v0 + 200), type metadata accessor for AspireHeEvaluationKeyConfig);
  }
  uint64_t v42 = *(void *)(v0 + 144);
  unint64_t v43 = *(void *)(v0 + 120);
  outlined destroy of RequestsManager.PECContext(*(void *)(v0 + 176), type metadata accessor for AspireApiKeyStatus);
  swift_bridgeObjectRetain();
  FakeQueriesList.init(dpParameters:shardCount:useCase:)(v0 + 16, v43, v3, v5, v42);
  FakeQueriesList.returnFakeQueries()();
  BOOL v45 = v44;
  uint64_t v46 = *(void *)(v0 + 216);
  uint64_t v47 = *(void *)(v0 + 200);
  uint64_t v48 = *(void *)(v0 + 112);
  outlined destroy of RequestsManager.PECContext(*(void *)(v0 + 144), (uint64_t (*)(void))type metadata accessor for FakeQueriesList);
  swift_bridgeObjectRelease();
  *(void *)(v0 + 88) = v45;
  uint64_t v49 = *(void *)(v45 + 16) + 1;
  uint64_t v50 = specialized Array.init(repeating:count:)(*(unsigned int *)(v20 + 8), 0);
  uint64_t v51 = specialized RandomNumberGenerator.next<A>(upperBound:)(v49);
  uint64_t v52 = (void *)swift_task_alloc();
  v52[2] = v51;
  v52[3] = v46;
  v52[4] = v58;
  v52[5] = v48;
  v52[6] = v47;
  v52[7] = v50;
  v52[8] = v0 + 88;
  uint64_t v53 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_10Foundation4DataVsAE_pTg5(partial apply for closure #1 in RequestsManager.encryptDifferentiallyPrivateFakes(batchOfElements:shardIndex:shardCount:pecConfig:context:), (uint64_t)v52, 0, v49);
  uint64_t v54 = *(void *)(v0 + 216);
  uint64_t v55 = *(void *)(v0 + 200);
  uint64_t v56 = v53;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of RequestsManager.PECContext(v55, type metadata accessor for AspireHeEvaluationKeyConfig);
  outlined destroy of RequestsManager.PECContext(v54, (uint64_t (*)(void))type metadata accessor for RequestsManager.PECContext);
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v57 = *(uint64_t (**)(void *))(v0 + 8);
  return v57(v56);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t RequestsManager.decryptBatch(batchOfSimilarityScores:context:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[4] = a1;
  v3[5] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  v3[6] = swift_task_alloc();
  type metadata accessor for AspireApiPECResponse(0);
  v3[7] = swift_task_alloc();
  type metadata accessor for BinaryDecodingOptions();
  v3[8] = swift_task_alloc();
  v3[9] = type metadata accessor for AspireApiResponse(0);
  v3[10] = swift_task_alloc();
  v3[11] = type metadata accessor for RequestsManager.PECContext();
  uint64_t v5 = swift_task_alloc();
  v3[12] = v5;
  uint64_t v6 = (void *)swift_task_alloc();
  v3[13] = v6;
  *uint64_t v6 = v3;
  v6[1] = RequestsManager.decryptBatch(batchOfSimilarityScores:context:);
  return RequestsManager.loadContext(requestContext:allowingKeyRotation:)(v5, a3, 0);
}

uint64_t RequestsManager.decryptBatch(batchOfSimilarityScores:context:)()
{
  *(void *)(*(void *)v1 + 112) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = RequestsManager.decryptBatch(batchOfSimilarityScores:context:);
  }
  else {
    uint64_t v2 = RequestsManager.decryptBatch(batchOfSimilarityScores:context:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(void);
  uint64_t v17;
  uint64_t (*v18)(uint64_t);
  uint64_t v19;

  uint64_t v1 = v0[4];
  v0[2] = v1;
  uint64_t v2 = v0[14];
  uint64_t v3 = v0[5];
  v0[3] = v3;
  outlined copy of Data._Representation(v1, v3);
  BinaryDecodingOptions.init()();
  _s8CipherML15AspireApiConfigVAC21InternalSwiftProtobuf7MessageAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiResponse and conformance AspireApiResponse, (void (*)(uint64_t))type metadata accessor for AspireApiResponse);
  Message.init<A>(serializedBytes:extensions:partial:options:)();
  if (v2)
  {
    uint64_t v4 = v0[12];
LABEL_9:
    outlined destroy of RequestsManager.PECContext(v4, (uint64_t (*)(void))type metadata accessor for RequestsManager.PECContext);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v15 = (uint64_t (*)(void))v0[1];
    return v15();
  }
  uint64_t v5 = v0[6];
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v0[10], v5, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  uint64_t v6 = type metadata accessor for AspireApiResponse.OneOf_Response(0);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6);
  uint64_t v8 = v0[6];
  if (v7 == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v0[6], &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
LABEL_8:
    uint64_t v13 = v0[12];
    uint64_t v14 = v0[10];
    type metadata accessor for CipherMLError();
    _s8CipherML15AspireApiConfigVAC21InternalSwiftProtobuf7MessageAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    outlined destroy of RequestsManager.PECContext(v14, type metadata accessor for AspireApiResponse);
    uint64_t v4 = v13;
    goto LABEL_9;
  }
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined destroy of RequestsManager.PECContext(v8, type metadata accessor for AspireApiResponse.OneOf_Response);
    goto LABEL_8;
  }
  uint64_t v9 = (uint64_t *)v0[7];
  outlined init with take of AspireApiPECConfig(v8, (uint64_t)v9, type metadata accessor for AspireApiPECResponse);
  uint64_t v10 = SimilarityClient.decryptSimilarityScores(_:)(v9);
  uint64_t v11 = v0[12];
  os_log_type_t v12 = v0[10];
  uint64_t v17 = v10;
  outlined destroy of RequestsManager.PECContext(v0[7], type metadata accessor for AspireApiPECResponse);
  outlined destroy of RequestsManager.PECContext(v12, type metadata accessor for AspireApiResponse);
  outlined destroy of RequestsManager.PECContext(v11, (uint64_t (*)(void))type metadata accessor for RequestsManager.PECContext);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v18 = (uint64_t (*)(uint64_t))v0[1];
  return v18(v17);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t RequestsManager.similarityScoresWithAsyncResponse(elements:shardIndices:context:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[5] = a2;
  v3[6] = a3;
  v3[4] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v3[7] = swift_task_alloc();
  uint64_t v5 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestContext<StaticPECParameters>)
                 - 8);
  v3[8] = v5;
  v3[9] = *(void *)(v5 + 64);
  v3[10] = swift_task_alloc();
  v3[11] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for UUID();
  v3[12] = v6;
  v3[13] = *(void *)(v6 - 8);
  v3[14] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  v3[15] = swift_task_alloc();
  uint64_t v7 = *(void *)(type metadata accessor for AspireApiRequest(0) - 8);
  v3[16] = v7;
  v3[17] = *(void *)(v7 + 64);
  v3[18] = swift_task_alloc();
  v3[19] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for RequestsManager.PECContext();
  v3[20] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v3[21] = v9;
  v3[22] = *(void *)(v9 + 64);
  v3[23] = swift_task_alloc();
  uint64_t v10 = swift_task_alloc();
  unsigned char v3[24] = v10;
  uint64_t v11 = (void *)swift_task_alloc();
  v3[25] = v11;
  void *v11 = v3;
  v11[1] = RequestsManager.similarityScoresWithAsyncResponse(elements:shardIndices:context:);
  return RequestsManager.loadContext(requestContext:allowingKeyRotation:)(v10, a3, 1);
}

uint64_t RequestsManager.similarityScoresWithAsyncResponse(elements:shardIndices:context:)()
{
  *(void *)(*(void *)v1 + 208) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = RequestsManager.similarityScoresWithAsyncResponse(elements:shardIndices:context:);
  }
  else {
    uint64_t v2 = RequestsManager.similarityScoresWithAsyncResponse(elements:shardIndices:context:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  BOOL v25;
  id *v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  void *v46;
  uint64_t (*v47)(uint64_t, unint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  os_log_type_t type;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57[2];
  void *v58;
  uint64_t v59;

  uint64_t v58 = v0;
  uint64_t v1 = v0[4];
  uint64_t v2 = v0[26];
  uint64_t v3 = v0[24];
  uint64_t v4 = *(int *)(v0[20] + 24);
  uint64_t v5 = type metadata accessor for SimilarityClient();
  uint64_t v6 = specialized RequestsManager.convertToFloats(_:embeddingDimension:)(v1, *(unsigned int *)(v3 + *(int *)(v5 + 20) + v4 + 8));
  if (v2)
  {
    outlined destroy of RequestsManager.PECContext(v0[24], (uint64_t (*)(void))type metadata accessor for RequestsManager.PECContext);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    os_log_type_t v12 = (uint64_t (*)(void))v0[1];
    return v12();
  }
  else
  {
    uint64_t v7 = v6;
    uint64_t v8 = v0[19];
    uint64_t v9 = v0[15];
    uint64_t v10 = v0[5];
    uint64_t v11 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v9, 1, 1, v11);
    RequestsManager.PECContext.preparePECRequest(elements:shardIndices:keyConfig:)(v7, v10, v9, v8);
    uint64_t v14 = v0[14];
    uint64_t v15 = v0[12];
    uint64_t v16 = v0[13];
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v0[15], &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
    swift_bridgeObjectRelease();
    UUID.init()();
    uint64_t v17 = UUID.uuidString.getter();
    uint64_t v19 = v18;
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v14, v15);
    if (one-time initialization token for framework != -1) {
      swift_once();
    }
    uint64_t v56 = v17;
    uint64_t v20 = v0[11];
    uint64_t v21 = v0[6];
    os_log_type_t v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)static Logger.framework);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v21, v20, &demangling cache variable for type metadata for RequestContext<StaticPECParameters>);
    swift_bridgeObjectRetain_n();
    uint64_t v23 = Logger.logObject.getter();
    uint64_t v24 = static os_log_type_t.default.getter();
    uint64_t v25 = os_log_type_enabled(v23, v24);
    uint64_t v26 = (id *)v0[11];
    uint64_t v55 = v19;
    if (v25)
    {
      uint64_t v27 = swift_slowAlloc();
      uint64_t v54 = swift_slowAlloc();
      v57[0] = v54;
      *(_DWORD *)uint64_t v27 = 136446466;
      type = v24;
      uint64_t v28 = objc_msgSend(*v26, sel_useCase);
      char v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      char v31 = v30;

      v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v31, v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v26, &demangling cache variable for type metadata for RequestContext<StaticPECParameters>);
      *(_WORD *)(v27 + 12) = 2082;
      swift_bridgeObjectRetain();
      v0[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v56, v19, v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_249C3F000, v23, type, "Async response is requested for '%{public}s', uuid: %{public}s", (uint8_t *)v27, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x24C5B4790](v54, -1, -1);
      MEMORY[0x24C5B4790](v27, -1, -1);
    }
    else
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v26, &demangling cache variable for type metadata for RequestContext<StaticPECParameters>);
      swift_bridgeObjectRelease_n();
    }

    uint64_t v33 = v0[23];
    uint64_t v32 = v0[24];
    char v34 = v0[18];
    char v35 = v0[19];
    char v36 = v0[16];
    uint64_t v49 = v0[22];
    uint64_t v50 = v0[17];
    BOOL v37 = v0[10];
    uint64_t v38 = v0[8];
    uint64_t v48 = v0[21];
    char v39 = v0[6];
    uint64_t v40 = v0[7];
    uint64_t v51 = v35;
    uint64_t v52 = v40;
    char v41 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56))(v40, 1, 1, v41);
    outlined init with copy of AspireApiConfig(v32, v33, (uint64_t (*)(void))type metadata accessor for RequestsManager.PECContext);
    outlined init with copy of AspireApiConfig(v35, v34, type metadata accessor for AspireApiRequest);
    uint64_t v42 = v37;
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v39, v37, &demangling cache variable for type metadata for RequestContext<StaticPECParameters>);
    unint64_t v43 = (*(unsigned __int8 *)(v48 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80);
    uint64_t v44 = (v49 + *(unsigned __int8 *)(v36 + 80) + v43) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80);
    BOOL v45 = (v50 + *(unsigned __int8 *)(v38 + 80) + v44) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80);
    uint64_t v46 = (void *)swift_allocObject();
    v46[2] = 0;
    v46[3] = 0;
    v46[4] = v56;
    v46[5] = v55;
    outlined init with take of AspireApiPECConfig(v33, (uint64_t)v46 + v43, (uint64_t (*)(void))type metadata accessor for RequestsManager.PECContext);
    outlined init with take of AspireApiPECConfig(v34, (uint64_t)v46 + v44, type metadata accessor for AspireApiRequest);
    outlined init with take of RequestContext<StaticPECParameters>(v42, (uint64_t)v46 + v45);
    swift_bridgeObjectRetain();
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v52, (uint64_t)&async function pointer to partial apply for closure #1 in RequestsManager.similarityScoresWithAsyncResponse(elements:shardIndices:context:), (uint64_t)v46);
    swift_release();
    outlined destroy of RequestsManager.PECContext(v51, type metadata accessor for AspireApiRequest);
    outlined destroy of RequestsManager.PECContext(v32, (uint64_t (*)(void))type metadata accessor for RequestsManager.PECContext);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v47 = (uint64_t (*)(uint64_t, unint64_t))v0[1];
    return v47(v56, v55);
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t RequestsManager.PECContext.useCase.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t RequestsManager.PECContext.userId.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for RequestsManager.PECContext();
  return outlined init with copy of AspireApiConfig(v1 + *(int *)(v3 + 20), a1, (uint64_t (*)(void))type metadata accessor for UserIdentifier);
}

uint64_t RequestsManager.PECContext.client.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for RequestsManager.PECContext();
  return outlined init with copy of AspireApiConfig(v1 + *(int *)(v3 + 24), a1, (uint64_t (*)(void))type metadata accessor for SimilarityClient);
}

uint64_t RequestsManager.PECContext.preparePECRequest(elements:shardIndices:keyConfig:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v50 = a2;
  uint64_t v49 = a3;
  uint64_t v47 = a4;
  uint64_t v6 = type metadata accessor for RequestsManager.PECContext();
  uint64_t v7 = v6 - 8;
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (uint64_t *)((char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = type metadata accessor for AspireApiEvaluationKey(0);
  uint64_t v43 = *(void *)(v10 - 8);
  uint64_t v44 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v42 = (uint64_t)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v46 = (uint64_t)&v42 - v13;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v16 = (char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  uint64_t v48 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v45 = (uint64_t)&v42 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for AspireApiPECRequest(0);
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v42 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = *(int *)(v7 + 32);
  uint64_t v52 = v4;
  uint64_t v23 = v4 + v22;
  unint64_t v24 = *(unsigned int *)(v23 + *(int *)(type metadata accessor for SimilarityClient() + 20) + 8);
  unint64_t v25 = *(void *)(a1 + 16);
  unint64_t v26 = v25;
  if (v24) {
    unint64_t v26 = v25 % v24;
  }
  if (v26)
  {
    if (one-time initialization token for framework != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    __swift_project_value_buffer(v27, (uint64_t)static Logger.framework);
    outlined init with copy of AspireApiConfig(v52, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for RequestsManager.PECContext);
    swift_bridgeObjectRetain();
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = swift_slowAlloc();
      uint64_t v52 = swift_slowAlloc();
      uint64_t v53 = v25;
      uint64_t v54 = v52;
      *(_DWORD *)uint64_t v30 = 134349570;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v30 + 12) = 2050;
      uint64_t v53 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v30 + 22) = 2082;
      uint64_t v31 = *v9;
      unint64_t v32 = v9[1];
      swift_bridgeObjectRetain();
      uint64_t v53 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of RequestsManager.PECContext((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for RequestsManager.PECContext);
      _os_log_impl(&dword_249C3F000, v28, v29, "Invalid PEC elements.count '%{public}ld' for embedding dimension '%{public}ld', useCase '%{public}s'.", (uint8_t *)v30, 0x20u);
      uint64_t v33 = v52;
      swift_arrayDestroy();
      MEMORY[0x24C5B4790](v33, -1, -1);
      MEMORY[0x24C5B4790](v30, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease();
      outlined destroy of RequestsManager.PECContext((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for RequestsManager.PECContext);
    }

    type metadata accessor for CipherMLError();
    _s8CipherML15AspireApiConfigVAC21InternalSwiftProtobuf7MessageAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    return swift_willThrow();
  }
  else
  {
    uint64_t v34 = (uint64_t)v21;
    uint64_t v35 = v51;
    uint64_t result = SimilarityClient.encryptValues(_:shardIndices:)(a1, v50, (uint64_t)v21);
    if (!v35)
    {
      outlined init with copy of AMDPbHEConfig.OneOf_Config?(v49, (uint64_t)v16, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v16, 1, v17) == 1)
      {
        outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v16, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
      }
      else
      {
        uint64_t v37 = v45;
        outlined init with take of AspireApiPECConfig((uint64_t)v16, v45, type metadata accessor for AspireHeEvaluationKeyConfig);
        uint64_t v38 = v46;
        generateEvaluationKey(secretKey:config:)(v23, v37, v46);
        uint64_t v39 = v42;
        outlined init with copy of AspireApiConfig(v38, v42, type metadata accessor for AspireApiEvaluationKey);
        uint64_t v40 = v34 + *(int *)(v19 + 36);
        outlined destroy of AMDPbHEConfig.OneOf_Config?(v40, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
        outlined init with take of AspireApiPECConfig(v39, v40, type metadata accessor for AspireApiEvaluationKey);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v44);
        outlined destroy of RequestsManager.PECContext(v38, type metadata accessor for AspireApiEvaluationKey);
        outlined destroy of RequestsManager.PECContext(v37, type metadata accessor for AspireHeEvaluationKeyConfig);
      }
      uint64_t v41 = type metadata accessor for AspireApiRequest(0);
      MEMORY[0x270FA5388](v41);
      *(&v42 - 2) = v52;
      *(&v42 - 1) = v34;
      _s8CipherML15AspireApiConfigVAC21InternalSwiftProtobuf7MessageAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiRequest and conformance AspireApiRequest, (void (*)(uint64_t))type metadata accessor for AspireApiRequest);
      static Message.with(_:)();
      return outlined destroy of RequestsManager.PECContext(v34, type metadata accessor for AspireApiPECRequest);
    }
  }
  return result;
}

uint64_t closure #1 in RequestsManager.PECContext.preparePECRequest(elements:shardIndices:keyConfig:)(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v5 = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *a1 = v6;
  a1[1] = v5;
  uint64_t v7 = (uint64_t)a1 + *(int *)(type metadata accessor for AspireApiRequest(0) + 20);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v7, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
  outlined init with copy of AspireApiConfig(a3, v7, type metadata accessor for AspireApiPECRequest);
  uint64_t v8 = type metadata accessor for AspireApiRequest.OneOf_Request(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 0, 1, v8);
}

uint64_t RequestsManager.PECContext.requestData(request:networkManager:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  v3[5] = swift_task_alloc();
  type metadata accessor for AspireApiPECResponse(0);
  v3[6] = swift_task_alloc();
  type metadata accessor for AspireApiResponses(0);
  v3[7] = swift_task_alloc();
  return MEMORY[0x270FA2498](RequestsManager.PECContext.requestData(request:networkManager:), 0, 0);
}

uint64_t RequestsManager.PECContext.requestData(request:networkManager:)()
{
  uint64_t v1 = (void *)v0[3];
  uint64_t v2 = v0[4];
  uint64_t v3 = v0[2];
  uint64_t v4 = v1[3];
  uint64_t v5 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v4);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AspireApiRequest>);
  uint64_t v6 = *(void *)(type metadata accessor for AspireApiRequest(0) - 8);
  unint64_t v7 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = swift_allocObject();
  v0[8] = v8;
  *(_OWORD *)(v8 + 16) = xmmword_249E85E40;
  outlined init with copy of AspireApiConfig(v3, v8 + v7, type metadata accessor for AspireApiRequest);
  uint64_t v9 = type metadata accessor for RequestsManager.PECContext();
  v0[9] = v9;
  uint64_t v10 = v2 + *(int *)(v9 + 20);
  uint64_t v11 = *(int *)(type metadata accessor for UserIdentifier() + 20);
  uint64_t v16 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 + 32) + **(int **)(v5 + 32));
  uint64_t v12 = v10 + v11;
  uint64_t v13 = (void *)swift_task_alloc();
  v0[10] = v13;
  void *v13 = v0;
  v13[1] = RequestsManager.PECContext.requestData(request:networkManager:);
  uint64_t v14 = v0[7];
  return v16(v14, v8, v12, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 88) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = RequestsManager.PECContext.requestData(request:networkManager:);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = RequestsManager.PECContext.requestData(request:networkManager:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  uint64_t v15;

  uint64_t v1 = **(void **)(v0 + 56);
  uint64_t v2 = *(void *)(v0 + 40);
  if (!*(void *)(v1 + 16))
  {
    uint64_t v12 = type metadata accessor for AspireApiResponse.OneOf_Response(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v2, 1, 1, v12);
    goto LABEL_9;
  }
  uint64_t v3 = *(void *)(type metadata accessor for AspireApiResponse(0) - 8);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)), v2, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  uint64_t v4 = type metadata accessor for AspireApiResponse.OneOf_Response(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(v2, 1, v4) == 1)
  {
LABEL_9:
    outlined destroy of AMDPbHEConfig.OneOf_Config?(*(void *)(v0 + 40), &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
LABEL_10:
    uint64_t v13 = *(void *)(v0 + 56);
    type metadata accessor for CipherMLError();
    _s8CipherML15AspireApiConfigVAC21InternalSwiftProtobuf7MessageAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    outlined destroy of RequestsManager.PECContext(v13, type metadata accessor for AspireApiResponses);
    goto LABEL_11;
  }
  uint64_t v5 = *(void *)(v0 + 40);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined destroy of RequestsManager.PECContext(v5, type metadata accessor for AspireApiResponse.OneOf_Response);
    goto LABEL_10;
  }
  uint64_t v6 = *(void *)(v0 + 88);
  uint64_t v8 = *(uint64_t **)(v0 + 48);
  unint64_t v7 = *(void *)(v0 + 56);
  outlined init with take of AspireApiPECConfig(v5, (uint64_t)v8, type metadata accessor for AspireApiPECResponse);
  uint64_t v9 = SimilarityClient.decryptSimilarityScores(_:)(v8);
  outlined destroy of RequestsManager.PECContext((uint64_t)v8, type metadata accessor for AspireApiPECResponse);
  outlined destroy of RequestsManager.PECContext(v7, type metadata accessor for AspireApiResponses);
  if (!v6)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v10(v9);
  }
LABEL_11:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v14 = *(uint64_t (**)(void))(v0 + 8);
  return v14();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t RequestsManager.PECContext.init(useCase:userId:client:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  *a5 = a1;
  a5[1] = a2;
  uint64_t v8 = type metadata accessor for RequestsManager.PECContext();
  outlined init with take of AspireApiPECConfig(a3, (uint64_t)a5 + *(int *)(v8 + 20), (uint64_t (*)(void))type metadata accessor for UserIdentifier);
  return outlined init with take of AspireApiPECConfig(a4, (uint64_t)a5 + *(int *)(v8 + 24), (uint64_t (*)(void))type metadata accessor for SimilarityClient);
}

uint64_t RequestsManager.convertToFloats(_:embeddingDimension:)(uint64_t a1, uint64_t a2)
{
  return specialized RequestsManager.convertToFloats(_:embeddingDimension:)(a1, a2);
}

uint64_t specialized Array.init(repeating:count:)(unint64_t a1, int32x2_t a2)
{
  if ((a1 & 0x8000000000000000) != 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (!a1) {
    return MEMORY[0x263F8EE78];
  }
  uint64_t result = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(void *)(result + 16) = a1;
  uint64_t v4 = (__int32 *)(result + 32);
  if (a1 < 8)
  {
    unint64_t v5 = 0;
    __int32 v6 = a2.i32[0];
LABEL_9:
    unint64_t v10 = a1 - v5;
    do
    {
      *v4++ = v6;
      --v10;
    }
    while (v10);
    return result;
  }
  unint64_t v5 = a1 & 0xFFFFFFFFFFFFFFF8;
  v4 += a1 & 0xFFFFFFFFFFFFFFF8;
  __int32 v6 = a2.i32[0];
  int32x4_t v7 = vdupq_lane_s32(a2, 0);
  uint64_t v8 = (int32x4_t *)(result + 48);
  unint64_t v9 = a1 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    v8[-1] = v7;
    *uint64_t v8 = v7;
    v8 += 2;
    v9 -= 8;
  }
  while (v9);
  if (v5 != a1) {
    goto LABEL_9;
  }
  return result;
}

uint64_t closure #1 in RequestsManager.convertToFloats(_:embeddingDimension:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a3 + 16);
  if (v4)
  {
    if ((unint64_t)(a4 - 0x2000000000000000) >> 62 != 3) {
      goto LABEL_45;
    }
    uint64_t v7 = result;
    uint64_t v8 = 4 * a4;
    swift_bridgeObjectRetain();
    unint64_t v9 = (unint64_t *)(a3 + 40);
    uint64_t v29 = v8;
    do
    {
      uint64_t v10 = *(v9 - 1);
      unint64_t v11 = *v9;
      unint64_t v12 = *v9 >> 62;
      v9 += 2;
      switch(v12)
      {
        case 1uLL:
          if (v10 >> 32 < (int)v10) {
            goto LABEL_41;
          }
          uint64_t v30 = a2;
          swift_retain();
          outlined copy of Data._Representation(v10, v11);
          uint64_t v14 = __DataStorage._bytes.getter();
          if (!v14) {
            goto LABEL_11;
          }
          uint64_t v15 = __DataStorage._offset.getter();
          if (__OFSUB__((int)v10, v15)) {
            goto LABEL_44;
          }
          v14 += (int)v10 - v15;
LABEL_11:
          uint64_t v16 = __DataStorage._length.getter();
          if (v16 >= (v10 >> 32) - (int)v10) {
            uint64_t v17 = (v10 >> 32) - (int)v10;
          }
          else {
            uint64_t v17 = v16;
          }
          uint64_t v18 = v14 + v17;
          if (!v14) {
            uint64_t v18 = 0;
          }
          uint64_t v33 = (void *)v14;
          uint64_t v34 = (char *)v18;
          lazy protocol witness table accessor for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer();
          a2 = v30;
          uint64_t v19 = DataProtocol.copyBytes(to:)();
          outlined consume of Data._Representation(v10, v11);
          break;
        case 2uLL:
          uint64_t v31 = a2;
          uint64_t v20 = *(void *)(v10 + 16);
          uint64_t v28 = *(void *)(v10 + 24);
          outlined copy of Data._Representation(v10, v11);
          swift_retain();
          swift_retain();
          uint64_t v21 = __DataStorage._bytes.getter();
          if (!v21) {
            goto LABEL_20;
          }
          uint64_t v22 = __DataStorage._offset.getter();
          if (__OFSUB__(v20, v22)) {
            goto LABEL_43;
          }
          v21 += v20 - v22;
LABEL_20:
          BOOL v23 = __OFSUB__(v28, v20);
          uint64_t v24 = v28 - v20;
          if (v23) {
            goto LABEL_42;
          }
          uint64_t v25 = __DataStorage._length.getter();
          if (v25 >= v24) {
            uint64_t v26 = v24;
          }
          else {
            uint64_t v26 = v25;
          }
          uint64_t v27 = (char *)(v21 + v26);
          if (!v21) {
            uint64_t v27 = 0;
          }
          uint64_t v33 = (void *)v21;
          uint64_t v34 = v27;
          lazy protocol witness table accessor for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer();
          a2 = v31;
          uint64_t v19 = DataProtocol.copyBytes(to:)();
          swift_release();
          swift_release();
          break;
        case 3uLL:
          memset(v32, 0, 14);
          uint64_t v13 = (char *)v32;
          uint64_t v33 = v32;
          goto LABEL_30;
        default:
          v32[0] = v10;
          LOWORD(v32[1]) = v11;
          BYTE2(v32[1]) = BYTE2(v11);
          BYTE3(v32[1]) = BYTE3(v11);
          BYTE4(v32[1]) = BYTE4(v11);
          BYTE5(v32[1]) = BYTE5(v11);
          uint64_t v13 = (char *)v32 + BYTE6(v11);
          uint64_t v33 = v32;
LABEL_30:
          uint64_t v34 = v13;
          lazy protocol witness table accessor for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer();
          if (DataProtocol.copyBytes(to:)() == v8) {
            goto LABEL_31;
          }
          goto LABEL_36;
      }
      uint64_t v8 = v29;
      if (v19 != v29)
      {
LABEL_36:
        swift_bridgeObjectRelease();
        type metadata accessor for CipherMLError();
        _s8CipherML15AspireApiConfigVAC21InternalSwiftProtobuf7MessageAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
        swift_allocError();
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        return outlined consume of Data._Representation(v10, v11);
      }
LABEL_31:
      outlined consume of Data._Representation(v10, v11);
      if (v7)
      {
        if (a2 - v7 < v8)
        {
          __break(1u);
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
        }
        v7 += v8;
      }
      else
      {
        if (v8 > 0) {
          goto LABEL_40;
        }
        a2 = 0;
        uint64_t v7 = 0;
      }
      --v4;
    }
    while (v4);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t closure #1 in RequestsManager.similarityScoresWithAsyncResponse(elements:shardIndices:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[21] = a7;
  v8[22] = a8;
  v8[19] = a5;
  v8[20] = a6;
  v8[18] = a4;
  return MEMORY[0x270FA2498](closure #1 in RequestsManager.similarityScoresWithAsyncResponse(elements:shardIndices:context:), 0, 0);
}

uint64_t closure #1 in RequestsManager.similarityScoresWithAsyncResponse(elements:shardIndices:context:)()
{
  uint64_t v15 = v0;
  v14[1] = *MEMORY[0x263EF8340];
  uint64_t v1 = (uint64_t)(v0 + 2);
  if (one-time initialization token for framework != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  v0[23] = __swift_project_value_buffer(v2, (uint64_t)static Logger.framework);
  swift_bridgeObjectRetain_n();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  BOOL v5 = os_log_type_enabled(v3, v4);
  unint64_t v6 = v0[19];
  if (v5)
  {
    uint64_t v7 = v0[18];
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    v14[0] = v9;
    *(_DWORD *)uint64_t v8 = 136446210;
    swift_bridgeObjectRetain();
    v0[17] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v6, v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_249C3F000, v3, v4, "Async response request '%{public}s' has started", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5B4790](v9, -1, -1);
    uint64_t v10 = v8;
    uint64_t v1 = (uint64_t)(v0 + 2);
    MEMORY[0x24C5B4790](v10, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  specialized RequestContext.networkManager()(v1);
  unint64_t v11 = (void *)swift_task_alloc();
  v0[24] = v11;
  void *v11 = v0;
  v11[1] = closure #1 in RequestsManager.similarityScoresWithAsyncResponse(elements:shardIndices:context:);
  uint64_t v12 = v0[21];
  return RequestsManager.PECContext.requestData(request:networkManager:)(v12, v1);
}

{
  void *v0;
  NSObject *v1;
  os_log_type_t v2;
  unint64_t v3;
  uint64_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  Class isa;
  void *v11;
  id v12;
  void *v13;
  id v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  BOOL v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t (*v25)(void);
  uint64_t v27[2];
  void *v28;
  uint64_t v29;

  uint64_t v28 = v0;
  v27[1] = *MEMORY[0x263EF8340];
  swift_bridgeObjectRetain_n();
  uint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    os_log_type_t v4 = v0[18];
    uint64_t v3 = v0[19];
    BOOL v5 = (uint8_t *)swift_slowAlloc();
    unint64_t v6 = swift_slowAlloc();
    v27[0] = v6;
    *(_DWORD *)BOOL v5 = 136446210;
    swift_bridgeObjectRetain();
    v0[16] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_249C3F000, v1, v2, "Async response request '%{public}s' has finished", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5B4790](v6, -1, -1);
    MEMORY[0x24C5B4790](v5, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v8 = v0[18];
  uint64_t v7 = v0[19];
  uint64_t v9 = self;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CMLSimilarityScore]);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  unint64_t v11 = (void *)MEMORY[0x24C5B33F0](v8, v7);
  v0[12] = 0;
  uint64_t v12 = objc_msgSend(v9, sel_sendReplyForBatchPEC_requestError_uuid_error_, isa, 0, v11, v0 + 12);

  uint64_t v13 = (void *)v0[12];
  if (v13)
  {
    uint64_t v14 = v13;

    swift_willThrow();
    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v15 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  uint64_t v16 = Logger.logObject.getter();
  uint64_t v17 = static os_log_type_t.default.getter();
  uint64_t v18 = os_log_type_enabled(v16, v17);
  uint64_t v19 = v0[19];
  if (v18)
  {
    uint64_t v20 = v0[18];
    uint64_t v21 = swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    v27[0] = v22;
    *(_DWORD *)uint64_t v21 = 136446466;
    swift_bridgeObjectRetain();
    v0[13] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v19, v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v21 + 12) = 2082;
    v0[14] = v15;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable : Any]?);
    BOOL v23 = String.init<A>(describing:)();
    v0[15] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_249C3F000, v16, v17, "Notified AMD for '%{public}s', response: %{public}s", (uint8_t *)v21, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x24C5B4790](v22, -1, -1);
    MEMORY[0x24C5B4790](v21, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }

  uint64_t v25 = (uint64_t (*)(void))v0[1];
  return v25();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  id v10;
  id v11;
  NSObject *v12;
  os_log_type_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t (*v22)(void);
  void *v24;
  uint64_t v25;
  uint64_t v26[2];
  uint64_t v27;
  uint64_t v28;

  uint64_t v27 = v0;
  v26[1] = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void **)(v0 + 208);
  uint64_t v3 = *(void *)(v0 + 144);
  uint64_t v2 = *(void *)(v0 + 152);
  os_log_type_t v4 = self;
  BOOL v5 = (void *)_convertErrorToNSError(_:)();
  unint64_t v6 = (void *)MEMORY[0x24C5B33F0](v3, v2);
  *(void *)(v0 + 56) = 0;
  uint64_t v7 = objc_msgSend(v4, sel_sendReplyForBatchPEC_requestError_uuid_error_, 0, v5, v6, v0 + 56);

  if (*(void *)(v0 + 56))
  {
    uint64_t v8 = *(id *)(v0 + 56);

    swift_willThrow();
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v9 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }
  swift_bridgeObjectRetain();
  uint64_t v10 = v1;
  swift_bridgeObjectRetain();
  unint64_t v11 = v1;
  swift_bridgeObjectRetain();
  uint64_t v12 = Logger.logObject.getter();
  uint64_t v13 = static os_log_type_t.error.getter();
  uint64_t v14 = os_log_type_enabled(v12, v13);
  uint64_t v15 = *(void *)(v0 + 152);
  if (v14)
  {
    uint64_t v16 = *(void *)(v0 + 144);
    uint64_t v17 = swift_slowAlloc();
    uint64_t v24 = (void *)swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    v26[0] = v25;
    *(_DWORD *)uint64_t v17 = 136446722;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v15, v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v17 + 12) = 2080;
    *(void *)(v0 + 72) = v9;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable : Any]?);
    uint64_t v18 = String.init<A>(describing:)();
    *(void *)(v0 + 80) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v17 + 22) = 2114;
    uint64_t v20 = v1;
    uint64_t v21 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 88) = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v24 = v21;

    _os_log_impl(&dword_249C3F000, v12, v13, "Async response request '%{public}s' has failed, notified AMD: %s, error: %{public}@", (uint8_t *)v17, 0x20u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x24C5B4790](v24, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x24C5B4790](v25, -1, -1);
    MEMORY[0x24C5B4790](v17, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  uint64_t v22 = *(uint64_t (**)(void))(v0 + 8);
  return v22();
}

uint64_t closure #1 in RequestsManager.similarityScoresWithAsyncResponse(elements:shardIndices:context:)(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2 + 16;
  *(void *)(v3 + 200) = a1;
  *(void *)(v3 + 208) = v1;
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_1Tm(v4);
  if (v1) {
    BOOL v5 = closure #1 in RequestsManager.similarityScoresWithAsyncResponse(elements:shardIndices:context:);
  }
  else {
    BOOL v5 = closure #1 in RequestsManager.similarityScoresWithAsyncResponse(elements:shardIndices:context:);
  }
  return MEMORY[0x270FA2498](v5, 0, 0);
}

uint64_t closure #1 in RequestsManager.encryptDifferentiallyPrivateFakes(batchOfElements:shardIndex:shardCount:pecConfig:context:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X7>, uint64_t a9@<X8>, void *a10)
{
  uint64_t v45 = a5;
  uint64_t v46 = a8;
  uint64_t v44 = a7;
  uint64_t v47 = a4;
  uint64_t v49 = a3;
  v43[0] = a9;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v15 = (char *)v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)v43 - v17;
  uint64_t v19 = type metadata accessor for AspireApiRequests(0);
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (void *)((char *)v43 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v22 = *a1;
  uint64_t *v21 = MEMORY[0x263F8EE78];
  v43[1] = v23;
  UnknownStorage.init()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AspireApiRequest>);
  uint64_t v24 = *(void *)(type metadata accessor for AspireApiRequest(0) - 8);
  unint64_t v25 = (*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
  uint64_t v26 = swift_allocObject();
  long long v48 = xmmword_249E85E40;
  *(_OWORD *)(v26 + 16) = xmmword_249E85E40;
  uint64_t v27 = v26 + v25;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  if (v22 == a2)
  {
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = v48;
    *(void *)(inited + 32) = v45;
    outlined init with copy of AspireApiConfig(a6, (uint64_t)v18, type metadata accessor for AspireHeEvaluationKeyConfig);
    uint64_t v29 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v18, 0, 1, v29);
    uint64_t v30 = v50;
    RequestsManager.PECContext.preparePECRequest(elements:shardIndices:keyConfig:)(v47, inited, (uint64_t)v18, v27);
    uint64_t v31 = v30;
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v18, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
    swift_setDeallocating();
    if (!v30) {
      goto LABEL_11;
    }
    goto LABEL_9;
  }
  uint64_t v47 = v27;
  uint64_t v31 = v50;
  uint64_t v32 = swift_initStackObject();
  *(_OWORD *)(v32 + 16) = v48;
  uint64_t v33 = v46;
  uint64_t v34 = (void *)*v46;
  if (!*(void *)(*v46 + 16))
  {
    __break(1u);
LABEL_13:
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v34);
    uint64_t v34 = (void *)result;
    uint64_t v36 = *(void *)(result + 16);
    if (v36) {
      goto LABEL_7;
    }
    goto LABEL_14;
  }
  uint64_t v18 = (char *)v32;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0) {
    goto LABEL_13;
  }
  uint64_t v36 = v34[2];
  if (v36)
  {
LABEL_7:
    uint64_t v37 = v36 - 1;
    uint64_t v38 = v34[v37 + 4];
    v34[2] = v37;
    void *v33 = v34;
    *((void *)v18 + 4) = v38;
    outlined init with copy of AspireApiConfig(a6, (uint64_t)v15, type metadata accessor for AspireHeEvaluationKeyConfig);
    uint64_t v39 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v15, 0, 1, v39);
    RequestsManager.PECContext.preparePECRequest(elements:shardIndices:keyConfig:)(v44, (uint64_t)v18, (uint64_t)v15, v47);
    if (!v31)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v15, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
      swift_setDeallocating();
LABEL_11:
      swift_bridgeObjectRelease();
      uint64_t *v21 = v26;
      _s8CipherML15AspireApiConfigVAC21InternalSwiftProtobuf7MessageAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiRequests and conformance AspireApiRequests, (void (*)(uint64_t))type metadata accessor for AspireApiRequests);
      uint64_t v40 = Message.serializedData(partial:)();
      uint64_t v41 = v43[0];
      *(void *)v43[0] = v40;
      *(void *)(v41 + 8) = v42;
      return outlined destroy of RequestsManager.PECContext((uint64_t)v21, type metadata accessor for AspireApiRequests);
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v15, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
    swift_setDeallocating();
LABEL_9:
    *(void *)(v26 + 16) = 0;
    swift_release();
    uint64_t result = outlined destroy of RequestsManager.PECContext((uint64_t)v21, type metadata accessor for AspireApiRequests);
    *a10 = v31;
    return result;
  }
LABEL_14:
  __break(1u);
  return result;
}

uint64_t specialized RequestsManager.convertToFloats(_:embeddingDimension:)(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *(void *)(a1 + 16);
  if ((unsigned __int128)(a2 * (__int128)v7) >> 64 == (a2 * v7) >> 63)
  {
    uint64_t v2 = v4;
    uint64_t v3 = a2;
    uint64_t v5 = specialized Array.init(repeating:count:)(a2 * v7, 0);
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if (result) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v5);
  uint64_t v5 = result;
LABEL_3:
  unint64_t v9 = *(void *)(v5 + 16);
  if (v9 >> 61)
  {
    __break(1u);
  }
  else
  {
    closure #1 in RequestsManager.convertToFloats(_:embeddingDimension:)(v5 + 32, v5 + 32 + 4 * v9, a1, v3);
    if (v2) {
      swift_bridgeObjectRelease();
    }
    return v5;
  }
  return result;
}

uint64_t partial apply for closure #1 in RequestsManager.encryptDifferentiallyPrivateFakes(batchOfElements:shardIndex:shardCount:pecConfig:context:)@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  return closure #1 in RequestsManager.encryptDifferentiallyPrivateFakes(batchOfElements:shardIndex:shardCount:pecConfig:context:)(a1, *(void *)(v3 + 16), *(void *)(v3 + 24), *(void *)(v3 + 32), *(void *)(v3 + 40), *(void *)(v3 + 48), *(void *)(v3 + 56), *(void **)(v3 + 64), a3, a2);
}

uint64_t sub_249D5BB40()
{
  uint64_t v1 = (int *)(type metadata accessor for RequestsManager.PECContext() - 8);
  uint64_t v76 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v2 = (v76 + 48) & ~v76;
  uint64_t v3 = *(void *)(*(void *)v1 + 64);
  uint64_t v77 = type metadata accessor for AspireApiRequest(0);
  uint64_t v75 = *(unsigned __int8 *)(*(void *)(v77 - 8) + 80);
  uint64_t v4 = (v2 + v3 + v75) & ~v75;
  uint64_t v5 = *(void *)(*(void *)(v77 - 8) + 64);
  uint64_t v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestContext<StaticPECParameters>);
  uint64_t v74 = *(unsigned __int8 *)(*(void *)(v72 - 8) + 80);
  uint64_t v6 = v5 + v74;
  uint64_t v73 = *(void *)(*(void *)(v72 - 8) + 64);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = v0 + v2;
  swift_bridgeObjectRelease();
  uint64_t v8 = v7 + v1[7];
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  uint64_t v10 = v8 + *(int *)(type metadata accessor for UserIdentifier() + 20);
  uint64_t v11 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  swift_bridgeObjectRelease();
  uint64_t v12 = v7 + v1[8];
  uint64_t v13 = v12 + *(int *)(type metadata accessor for SecretKey() + 20);
  uint64_t v14 = type metadata accessor for HE.SerializedSecretKey();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(v13, v14);
  uint64_t v15 = (int *)type metadata accessor for SimilarityClient();
  uint64_t v16 = v12 + v15[5];
  outlined consume of Data._Representation(*(void *)(v16 + 32), *(void *)(v16 + 40));
  swift_bridgeObjectRelease();
  uint64_t v17 = (int *)type metadata accessor for AspireApiPECConfig(0);
  uint64_t v18 = v16 + v17[9];
  uint64_t v19 = type metadata accessor for UnknownStorage();
  uint64_t v78 = *(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8);
  v78(v18, v19);
  uint64_t v20 = v16 + v17[10];
  uint64_t v21 = type metadata accessor for AspireHeEncryptionParameters(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 48))(v20, 1, v21))
  {
    swift_bridgeObjectRelease();
    v78(v20 + *(int *)(v21 + 40), v19);
  }
  uint64_t v22 = v4 + v6;
  uint64_t v23 = v16 + v17[11];
  uint64_t v24 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 48))(v23, 1, v24))
  {
    uint64_t v25 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 48))(v23, 1, v25)
      && swift_getEnumCaseMultiPayload() <= 2)
    {
      v78(v23, v19);
    }
    v78(v23 + *(int *)(v24 + 20), v19);
  }
  uint64_t v26 = v22 & ~v74;
  outlined consume of Data._Representation(*(void *)(v12 + v15[6]), *(void *)(v12 + v15[6] + 8));
  uint64_t v27 = v12 + v15[7];
  uint64_t v28 = type metadata accessor for PEC.SimilarityClient();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v28 - 8) + 8))(v27, v28);
  uint64_t v29 = v0 + v4;
  swift_bridgeObjectRelease();
  uint64_t v30 = v77;
  uint64_t v31 = v29 + *(int *)(v77 + 20);
  uint64_t v32 = type metadata accessor for AspireApiRequest.OneOf_Request(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 48))(v31, 1, v32))
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      outlined consume of Data._Representation(*(void *)v31, *(void *)(v31 + 8));
      outlined consume of Data._Representation(*(void *)(v31 + 16), *(void *)(v31 + 24));
      uint64_t v53 = (int *)(type metadata accessor for AspireApiOPRFRequest(0) + 24);
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of Data._Representation(*(void *)(v31 + 16), *(void *)(v31 + 24));
        uint64_t v54 = (int *)type metadata accessor for AspireApiPECRequest(0);
        v78(v31 + v54[7], v19);
        uint64_t v55 = v31 + v54[8];
        uint64_t v56 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
        uint64_t v57 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v56 - 8) + 48);
        uint64_t v71 = *v57;
        if (!(*v57)(v55, 1, v56))
        {
          outlined consume of Data._Representation(*(void *)(v55 + 8), *(void *)(v55 + 16));
          v78(v55 + *(int *)(v56 + 24), v19);
        }
        uint64_t v49 = v31 + v54[9];
        uint64_t v58 = type metadata accessor for AspireApiEvaluationKey(0);
        uint64_t v30 = v77;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v58 - 8) + 48))(v49, 1, v58)) {
          goto LABEL_9;
        }
        v78(v49, v19);
        uint64_t v59 = v49 + *(int *)(v58 + 20);
        if (!v71(v59, 1, v56))
        {
          outlined consume of Data._Representation(*(void *)(v59 + 8), *(void *)(v59 + 16));
          v78(v59 + *(int *)(v56 + 24), v19);
        }
        uint64_t v52 = *(int *)(v58 + 24);
      }
      else
      {
        if (EnumCaseMultiPayload) {
          goto LABEL_9;
        }
        outlined consume of Data._Representation(*(void *)(v31 + 8), *(void *)(v31 + 16));
        uint64_t v43 = (int *)type metadata accessor for AspireApiPIRRequest(0);
        v78(v31 + v43[6], v19);
        uint64_t v44 = v31 + v43[7];
        uint64_t v45 = type metadata accessor for AspirePirEncryptedIndices(0);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 48))(v44, 1, v45))
        {
          swift_bridgeObjectRelease();
          v78(v44 + *(int *)(v45 + 24), v19);
        }
        uint64_t v46 = v31 + v43[8];
        uint64_t v47 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
        long long v48 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 48);
        uint64_t v70 = *v48;
        if (!(*v48)(v46, 1, v47))
        {
          outlined consume of Data._Representation(*(void *)(v46 + 8), *(void *)(v46 + 16));
          v78(v46 + *(int *)(v47 + 24), v19);
        }
        swift_bridgeObjectRelease();
        uint64_t v49 = v31 + v43[10];
        uint64_t v50 = type metadata accessor for AspireApiEvaluationKey(0);
        uint64_t v30 = v77;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v50 - 8) + 48))(v49, 1, v50)) {
          goto LABEL_9;
        }
        v78(v49, v19);
        uint64_t v51 = v49 + *(int *)(v50 + 20);
        if (!v70(v51, 1, v47))
        {
          outlined consume of Data._Representation(*(void *)(v51 + 8), *(void *)(v51 + 16));
          v78(v51 + *(int *)(v47 + 24), v19);
        }
        uint64_t v52 = *(int *)(v50 + 24);
      }
      uint64_t v60 = v49 + v52;
      uint64_t v61 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
      uint64_t v30 = v77;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v61 - 8) + 48))(v60, 1, v61)) {
        goto LABEL_9;
      }
      v78(v60, v19);
      uint64_t v62 = v60 + *(int *)(v61 + 20);
      uint64_t v63 = type metadata accessor for AspireHeSerializedGaloisKey(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v63 - 8) + 48))(v62, 1, v63))
      {
        swift_bridgeObjectRelease();
        v78(v62 + *(int *)(v63 + 20), v19);
      }
      uint64_t v64 = v60 + *(int *)(v61 + 24);
      uint64_t v65 = type metadata accessor for AspireHeSerializedRelinKey(0);
      uint64_t v30 = v77;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v65 - 8) + 48))(v64, 1, v65)) {
        goto LABEL_9;
      }
      v78(v64, v19);
      uint64_t v66 = v64 + *(int *)(v65 + 20);
      uint64_t v67 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v67 - 8) + 48))(v66, 1, v67)) {
        goto LABEL_9;
      }
      v78(v66, v19);
      uint64_t v31 = v66 + *(int *)(v67 + 20);
      uint64_t v68 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v68 - 8) + 48))(v31, 1, v68)) {
        goto LABEL_9;
      }
      swift_bridgeObjectRelease();
      uint64_t v53 = (int *)(v68 + 20);
    }
    v78(v31 + *v53, v19);
  }
LABEL_9:
  v78(v29 + *(int *)(v30 + 24), v19);
  uint64_t v33 = v26;

  uint64_t v34 = v0 + v26 + *(int *)(v72 + 32);
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 48))(v34, 2, v35))
  {
    uint64_t v36 = type metadata accessor for URL();
    uint64_t v37 = *(void *)(v36 - 8);
    uint64_t v38 = *(void (**)(uint64_t, uint64_t))(v37 + 8);
    v38(v34, v36);
    uint64_t v39 = v34 + *(int *)(v35 + 48);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v39, 1, v36)) {
      v38(v39, v36);
    }
    uint64_t v40 = (uint64_t *)(v34 + *(int *)(v35 + 64));
    unint64_t v41 = v40[1];
    if (v41 >> 60 != 15) {
      outlined consume of Data._Representation(*v40, v41);
    }
  }
  type metadata accessor for NetworkConfig(0);
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, v33 + v73, v76 | v75 | v74 | 7);
}

uint64_t outlined init with take of RequestContext<StaticPECParameters>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestContext<StaticPECParameters>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in RequestsManager.similarityScoresWithAsyncResponse(elements:shardIndices:context:)()
{
  uint64_t v2 = *(void *)(type metadata accessor for RequestsManager.PECContext() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v2 + 64);
  uint64_t v5 = *(void *)(type metadata accessor for AspireApiRequest(0) - 8);
  unint64_t v6 = (v3 + v4 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(unsigned __int8 *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestContext<StaticPECParameters>)
                                      - 8)
                          + 80);
  unint64_t v9 = v6 + v7 + v8;
  uint64_t v10 = *(void *)(v0 + 32);
  uint64_t v11 = *(void *)(v0 + 40);
  uint64_t v12 = v0 + v3;
  uint64_t v13 = v0 + v6;
  uint64_t v14 = v0 + (v9 & ~v8);
  uint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v15;
  *uint64_t v15 = v1;
  v15[1] = protocol witness for NetworkManager.uploadKeys(evaluationKeys:userId:) in conformance AspireNetworkManager;
  v15[21] = v13;
  v15[22] = v14;
  v15[19] = v11;
  v15[20] = v12;
  v15[18] = v10;
  return MEMORY[0x270FA2498](closure #1 in RequestsManager.similarityScoresWithAsyncResponse(elements:shardIndices:context:), 0, 0);
}

uint64_t partial apply for closure #1 in RequestsManager.PECContext.preparePECRequest(elements:shardIndices:keyConfig:)(void *a1)
{
  return closure #1 in RequestsManager.PECContext.preparePECRequest(elements:shardIndices:keyConfig:)(a1, *(uint64_t **)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t *initializeBufferWithCopyOfBuffer for RequestsManager.PECContext(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  char v69 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v42 = *a2;
    uint64_t *v69 = *a2;
    char v69 = (uint64_t *)(v42 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    uint64_t v7 = *(int *)(a3 + 20);
    uint64_t v8 = (char *)a1 + v7;
    unint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for Date();
    uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    v11(v8, v9, v10);
    uint64_t v12 = type metadata accessor for UserIdentifier();
    uint64_t v13 = *(int *)(v12 + 20);
    uint64_t v14 = &v8[v13];
    uint64_t v15 = &v9[v13];
    uint64_t v16 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
    *(void *)&v8[*(int *)(v12 + 24)] = *(void *)&v9[*(int *)(v12 + 24)];
    uint64_t v17 = *(int *)(a3 + 24);
    uint64_t v18 = (char *)v69 + v17;
    uint64_t v19 = (char *)a2 + v17;
    *(uint64_t *)((char *)v69 + v17) = *(uint64_t *)((char *)a2 + v17);
    uint64_t v20 = *(int *)(type metadata accessor for SecretKey() + 20);
    uint64_t v21 = &v18[v20];
    uint64_t v22 = &v19[v20];
    uint64_t v23 = type metadata accessor for HE.SerializedSecretKey();
    uint64_t v24 = *(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 16);
    swift_bridgeObjectRetain();
    v24(v21, v22, v23);
    uint64_t v67 = v19;
    uint64_t v68 = (int *)type metadata accessor for SimilarityClient();
    uint64_t v25 = v68[5];
    uint64_t v66 = v18;
    uint64_t v26 = &v18[v25];
    uint64_t v27 = &v19[v25];
    *(void *)uint64_t v26 = *(void *)&v19[v25];
    *((_DWORD *)v26 + 2) = *(_DWORD *)&v19[v25 + 8];
    v26[24] = v19[v25 + 24];
    *((void *)v26 + 2) = *(void *)&v19[v25 + 16];
    uint64_t v28 = *(void *)&v19[v25 + 32];
    unint64_t v29 = *(void *)&v19[v25 + 40];
    outlined copy of Data._Representation(v28, v29);
    *((void *)v26 + 4) = v28;
    *((void *)v26 + 5) = v29;
    *((void *)v26 + 6) = *((void *)v27 + 6);
    uint64_t v30 = (int *)type metadata accessor for AspireApiPECConfig(0);
    uint64_t v31 = v30[9];
    uint64_t v32 = &v26[v31];
    uint64_t v33 = &v27[v31];
    uint64_t v34 = type metadata accessor for UnknownStorage();
    uint64_t v35 = *(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 16);
    swift_bridgeObjectRetain();
    v35(v32, v33, v34);
    uint64_t v36 = v30[10];
    uint64_t v37 = &v26[v36];
    uint64_t v38 = &v27[v36];
    uint64_t v39 = type metadata accessor for AspireHeEncryptionParameters(0);
    uint64_t v40 = *(void *)(v39 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39))
    {
      uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      memcpy(v37, v38, *(void *)(*(void *)(v41 - 8) + 64));
    }
    else
    {
      *(_OWORD *)uint64_t v37 = *(_OWORD *)v38;
      uint64_t v43 = *((void *)v38 + 3);
      *((void *)v37 + 2) = *((void *)v38 + 2);
      *((void *)v37 + 3) = v43;
      v37[32] = v38[32];
      *((void *)v37 + 5) = *((void *)v38 + 5);
      v37[48] = v38[48];
      *((void *)v37 + 7) = *((void *)v38 + 7);
      v37[64] = v38[64];
      uint64_t v44 = *(int *)(v39 + 40);
      uint64_t v65 = &v37[v44];
      uint64_t v45 = &v38[v44];
      swift_bridgeObjectRetain();
      v35(v65, v45, v34);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
    }
    uint64_t v46 = v30[11];
    uint64_t v47 = &v26[v46];
    long long v48 = &v27[v46];
    uint64_t v49 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
    uint64_t v50 = *(void *)(v49 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48))(v48, 1, v49))
    {
      uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
      memcpy(v47, v48, *(void *)(*(void *)(v51 - 8) + 64));
    }
    else
    {
      uint64_t v52 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
      uint64_t v53 = *(void *)(v52 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48))(v48, 1, v52))
      {
        uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
        memcpy(v47, v48, *(void *)(*(void *)(v54 - 8) + 64));
      }
      else
      {
        swift_getEnumCaseMultiPayload();
        v35(v47, v48, v34);
        swift_storeEnumTagMultiPayload();
        (*(void (**)(char *, void, uint64_t, uint64_t))(v53 + 56))(v47, 0, 1, v52);
      }
      v35(&v47[*(int *)(v49 + 20)], &v48[*(int *)(v49 + 20)], v34);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v50 + 56))(v47, 0, 1, v49);
    }
    uint64_t v55 = v68[6];
    uint64_t v56 = (uint64_t *)&v66[v55];
    uint64_t v57 = (uint64_t *)&v67[v55];
    uint64_t v58 = *v57;
    unint64_t v59 = v57[1];
    outlined copy of Data._Representation(*v57, v59);
    uint64_t *v56 = v58;
    v56[1] = v59;
    uint64_t v60 = v68[7];
    uint64_t v61 = &v66[v60];
    uint64_t v62 = &v67[v60];
    uint64_t v63 = type metadata accessor for PEC.SimilarityClient();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v63 - 8) + 16))(v61, v62, v63);
  }
  return v69;
}

uint64_t destroy for RequestsManager.PECContext(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = v4 + *(int *)(type metadata accessor for UserIdentifier() + 20);
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();
  uint64_t v8 = a1 + *(int *)(a2 + 24);
  uint64_t v9 = v8 + *(int *)(type metadata accessor for SecretKey() + 20);
  uint64_t v10 = type metadata accessor for HE.SerializedSecretKey();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  uint64_t v11 = (int *)type metadata accessor for SimilarityClient();
  uint64_t v12 = v8 + v11[5];
  outlined consume of Data._Representation(*(void *)(v12 + 32), *(void *)(v12 + 40));
  swift_bridgeObjectRelease();
  uint64_t v13 = (int *)type metadata accessor for AspireApiPECConfig(0);
  uint64_t v14 = v12 + v13[9];
  uint64_t v15 = type metadata accessor for UnknownStorage();
  uint64_t v16 = *(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8);
  v16(v14, v15);
  uint64_t v17 = v12 + v13[10];
  uint64_t v18 = type metadata accessor for AspireHeEncryptionParameters(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 48))(v17, 1, v18))
  {
    swift_bridgeObjectRelease();
    v16(v17 + *(int *)(v18 + 40), v15);
  }
  uint64_t v19 = v12 + v13[11];
  uint64_t v20 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 48))(v19, 1, v20))
  {
    uint64_t v21 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 48))(v19, 1, v21)
      && swift_getEnumCaseMultiPayload() <= 2)
    {
      v16(v19, v15);
    }
    v16(v19 + *(int *)(v20 + 20), v15);
  }
  outlined consume of Data._Representation(*(void *)(v8 + v11[6]), *(void *)(v8 + v11[6] + 8));
  uint64_t v22 = v8 + v11[7];
  uint64_t v23 = type metadata accessor for PEC.SimilarityClient();
  uint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v23 - 8) + 8);
  return v24(v22, v23);
}

void *initializeWithCopy for RequestsManager.PECContext(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  uint64_t v12 = type metadata accessor for UserIdentifier();
  uint64_t v13 = *(int *)(v12 + 20);
  uint64_t v14 = &v8[v13];
  uint64_t v15 = &v9[v13];
  uint64_t v16 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
  *(void *)&v8[*(int *)(v12 + 24)] = *(void *)&v9[*(int *)(v12 + 24)];
  uint64_t v17 = *(int *)(a3 + 24);
  uint64_t v67 = a1;
  uint64_t v18 = (char *)a1 + v17;
  uint64_t v19 = (char *)a2 + v17;
  *(void *)((char *)a1 + v17) = *(void *)((char *)a2 + v17);
  uint64_t v20 = *(int *)(type metadata accessor for SecretKey() + 20);
  uint64_t v21 = &v18[v20];
  uint64_t v22 = &v19[v20];
  uint64_t v23 = type metadata accessor for HE.SerializedSecretKey();
  uint64_t v24 = *(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 16);
  swift_bridgeObjectRetain();
  v24(v21, v22, v23);
  uint64_t v65 = (int *)type metadata accessor for SimilarityClient();
  uint64_t v66 = v18;
  uint64_t v25 = v65[5];
  uint64_t v26 = &v18[v25];
  uint64_t v27 = &v19[v25];
  *(void *)uint64_t v26 = *(void *)&v19[v25];
  *((_DWORD *)v26 + 2) = *(_DWORD *)&v19[v25 + 8];
  v26[24] = v19[v25 + 24];
  *((void *)v26 + 2) = *(void *)&v19[v25 + 16];
  uint64_t v28 = *(void *)&v19[v25 + 32];
  unint64_t v29 = *(void *)&v19[v25 + 40];
  outlined copy of Data._Representation(v28, v29);
  *((void *)v26 + 4) = v28;
  *((void *)v26 + 5) = v29;
  *((void *)v26 + 6) = *((void *)v27 + 6);
  uint64_t v30 = (int *)type metadata accessor for AspireApiPECConfig(0);
  uint64_t v31 = v30[9];
  uint64_t v32 = &v26[v31];
  uint64_t v33 = &v27[v31];
  uint64_t v34 = type metadata accessor for UnknownStorage();
  uint64_t v35 = *(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 16);
  swift_bridgeObjectRetain();
  v35(v32, v33, v34);
  uint64_t v36 = v30[10];
  uint64_t v37 = &v26[v36];
  uint64_t v38 = &v27[v36];
  uint64_t v39 = type metadata accessor for AspireHeEncryptionParameters(0);
  uint64_t v40 = *(void *)(v39 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39))
  {
    uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    memcpy(v37, v38, *(void *)(*(void *)(v41 - 8) + 64));
  }
  else
  {
    *(_OWORD *)uint64_t v37 = *(_OWORD *)v38;
    uint64_t v42 = *((void *)v38 + 3);
    *((void *)v37 + 2) = *((void *)v38 + 2);
    *((void *)v37 + 3) = v42;
    v37[32] = v38[32];
    *((void *)v37 + 5) = *((void *)v38 + 5);
    v37[48] = v38[48];
    *((void *)v37 + 7) = *((void *)v38 + 7);
    v37[64] = v38[64];
    uint64_t v43 = *(int *)(v39 + 40);
    uint64_t v64 = &v37[v43];
    uint64_t v44 = &v38[v43];
    swift_bridgeObjectRetain();
    v35(v64, v44, v34);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
  }
  uint64_t v45 = v30[11];
  uint64_t v46 = &v26[v45];
  uint64_t v47 = &v27[v45];
  uint64_t v48 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  uint64_t v49 = *(void *)(v48 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v47, 1, v48))
  {
    uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    memcpy(v46, v47, *(void *)(*(void *)(v50 - 8) + 64));
  }
  else
  {
    uint64_t v51 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
    uint64_t v52 = *(void *)(v51 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v47, 1, v51))
    {
      uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
      memcpy(v46, v47, *(void *)(*(void *)(v53 - 8) + 64));
    }
    else
    {
      swift_getEnumCaseMultiPayload();
      v35(v46, v47, v34);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(char *, void, uint64_t, uint64_t))(v52 + 56))(v46, 0, 1, v51);
    }
    v35(&v46[*(int *)(v48 + 20)], &v47[*(int *)(v48 + 20)], v34);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v49 + 56))(v46, 0, 1, v48);
  }
  uint64_t v54 = v65[6];
  uint64_t v55 = (uint64_t *)&v66[v54];
  uint64_t v56 = (uint64_t *)&v19[v54];
  uint64_t v57 = *v56;
  unint64_t v58 = v56[1];
  outlined copy of Data._Representation(*v56, v58);
  uint64_t *v55 = v57;
  v55[1] = v58;
  uint64_t v59 = v65[7];
  uint64_t v60 = &v66[v59];
  uint64_t v61 = &v19[v59];
  uint64_t v62 = type metadata accessor for PEC.SimilarityClient();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v62 - 8) + 16))(v60, v61, v62);
  return v67;
}

void *assignWithCopy for RequestsManager.PECContext(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = type metadata accessor for UserIdentifier();
  uint64_t v11 = *(int *)(v10 + 20);
  uint64_t v12 = &v7[v11];
  uint64_t v13 = &v8[v11];
  uint64_t v14 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 24))(v12, v13, v14);
  *(void *)&v7[*(int *)(v10 + 24)] = *(void *)&v8[*(int *)(v10 + 24)];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v15 = *(int *)(a3 + 24);
  BOOL v94 = a1;
  uint64_t v16 = (void *)((char *)a1 + v15);
  uint64_t v88 = a2;
  uint64_t v17 = (void *)((char *)a2 + v15);
  *uint64_t v16 = *v17;
  uint64_t v18 = *(int *)(type metadata accessor for SecretKey() + 20);
  uint64_t v19 = (char *)v16 + v18;
  uint64_t v20 = (char *)v17 + v18;
  uint64_t v21 = type metadata accessor for HE.SerializedSecretKey();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 24))(v19, v20, v21);
  uint64_t v91 = (int *)type metadata accessor for SimilarityClient();
  uint64_t v92 = v17;
  uint64_t v22 = v91[5];
  uint64_t v93 = v16;
  uint64_t v23 = (char *)v16 + v22;
  uint64_t v24 = (char *)v17 + v22;
  *(void *)uint64_t v23 = *(void *)((char *)v17 + v22);
  *((_DWORD *)v23 + 2) = *(_DWORD *)((char *)v17 + v22 + 8);
  uint64_t v25 = *(void *)((char *)v17 + v22 + 16);
  v23[24] = v24[24];
  *((void *)v23 + 2) = v25;
  uint64_t v26 = *((void *)v24 + 4);
  unint64_t v27 = *((void *)v24 + 5);
  outlined copy of Data._Representation(v26, v27);
  uint64_t v28 = *((void *)v23 + 4);
  unint64_t v29 = *((void *)v23 + 5);
  *((void *)v23 + 4) = v26;
  *((void *)v23 + 5) = v27;
  outlined consume of Data._Representation(v28, v29);
  *((void *)v23 + 6) = *((void *)v24 + 6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v30 = (int *)type metadata accessor for AspireApiPECConfig(0);
  uint64_t v31 = v30[9];
  uint64_t v32 = &v23[v31];
  uint64_t v33 = &v24[v31];
  uint64_t v95 = type metadata accessor for UnknownStorage();
  uint64_t v90 = *(void *)(v95 - 8);
  __int16 v89 = *(void (**)(char *, char *))(v90 + 24);
  v89(v32, v33);
  uint64_t v34 = v30[10];
  uint64_t v35 = (uint64_t)&v23[v34];
  uint64_t v36 = &v24[v34];
  uint64_t v37 = type metadata accessor for AspireHeEncryptionParameters(0);
  uint64_t v38 = *(void *)(v37 - 8);
  uint64_t v39 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v38 + 48);
  int v40 = v39(v35, 1, v37);
  int v41 = v39((uint64_t)v36, 1, v37);
  if (v40)
  {
    if (!v41)
    {
      *(void *)uint64_t v35 = *(void *)v36;
      *(void *)(v35 + 8) = *((void *)v36 + 1);
      *(void *)(v35 + 16) = *((void *)v36 + 2);
      uint64_t v42 = *((void *)v36 + 3);
      *(unsigned char *)(v35 + 32) = v36[32];
      *(void *)(v35 + 24) = v42;
      uint64_t v43 = *((void *)v36 + 5);
      *(unsigned char *)(v35 + 48) = v36[48];
      *(void *)(v35 + 40) = v43;
      uint64_t v44 = *((void *)v36 + 7);
      *(unsigned char *)(v35 + 64) = v36[64];
      *(void *)(v35 + 56) = v44;
      uint64_t v45 = *(int *)(v37 + 40);
      uint64_t v46 = v35 + v45;
      uint64_t v47 = &v36[v45];
      uint64_t v48 = *(void (**)(uint64_t, char *, uint64_t))(v90 + 16);
      swift_bridgeObjectRetain();
      uint64_t v49 = v46;
      uint64_t v50 = v95;
      v48(v49, v47, v95);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v41)
  {
    outlined destroy of RequestsManager.PECContext(v35, type metadata accessor for AspireHeEncryptionParameters);
LABEL_6:
    uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    memcpy((void *)v35, v36, *(void *)(*(void *)(v51 - 8) + 64));
    uint64_t v50 = v95;
    goto LABEL_7;
  }
  *(void *)uint64_t v35 = *(void *)v36;
  *(void *)(v35 + 8) = *((void *)v36 + 1);
  *(void *)(v35 + 16) = *((void *)v36 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v65 = *((void *)v36 + 3);
  *(unsigned char *)(v35 + 32) = v36[32];
  *(void *)(v35 + 24) = v65;
  uint64_t v66 = *((void *)v36 + 5);
  *(unsigned char *)(v35 + 48) = v36[48];
  *(void *)(v35 + 40) = v66;
  uint64_t v67 = *((void *)v36 + 7);
  *(unsigned char *)(v35 + 64) = v36[64];
  *(void *)(v35 + 56) = v67;
  uint64_t v50 = v95;
  ((void (*)(uint64_t, char *, uint64_t))v89)(v35 + *(int *)(v37 + 40), &v36[*(int *)(v37 + 40)], v95);
LABEL_7:
  uint64_t v52 = v30[11];
  uint64_t v53 = &v23[v52];
  uint64_t v54 = &v24[v52];
  uint64_t v55 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  uint64_t v56 = *(void *)(v55 - 8);
  uint64_t v57 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v56 + 48);
  int v58 = v57(v53, 1, v55);
  int v59 = v57(v54, 1, v55);
  if (!v58)
  {
    uint64_t v60 = v94;
    if (v59)
    {
      outlined destroy of RequestsManager.PECContext((uint64_t)v53, type metadata accessor for AspireSimilarityPlaintextPacking);
      goto LABEL_13;
    }
    uint64_t v68 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
    uint64_t v69 = *(void *)(v68 - 8);
    uint64_t v70 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v69 + 48);
    int v71 = v70(v53, 1, v68);
    int v72 = v70(v54, 1, v68);
    if (v71)
    {
      if (!v72)
      {
        swift_getEnumCaseMultiPayload();
        uint64_t v73 = v95;
        (*(void (**)(char *, char *, uint64_t))(v90 + 16))(v53, v54, v95);
        swift_storeEnumTagMultiPayload();
        (*(void (**)(char *, void, uint64_t, uint64_t))(v69 + 56))(v53, 0, 1, v68);
LABEL_23:
        ((void (*)(char *, char *, uint64_t))v89)(&v53[*(int *)(v55 + 20)], &v54[*(int *)(v55 + 20)], v73);
        goto LABEL_24;
      }
    }
    else
    {
      if (!v72)
      {
        uint64_t v73 = v95;
        if (v94 != v88)
        {
          outlined destroy of RequestsManager.PECContext((uint64_t)v53, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
          swift_getEnumCaseMultiPayload();
          (*(void (**)(char *, char *, uint64_t))(v90 + 16))(v53, v54, v95);
          swift_storeEnumTagMultiPayload();
        }
        goto LABEL_23;
      }
      outlined destroy of RequestsManager.PECContext((uint64_t)v53, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
    }
    uint64_t v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
    memcpy(v53, v54, *(void *)(*(void *)(v75 - 8) + 64));
    uint64_t v73 = v95;
    goto LABEL_23;
  }
  uint64_t v60 = v94;
  if (v59)
  {
LABEL_13:
    uint64_t v64 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    memcpy(v53, v54, *(void *)(*(void *)(v64 - 8) + 64));
    goto LABEL_24;
  }
  uint64_t v61 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
  uint64_t v62 = *(void *)(v61 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48))(v54, 1, v61))
  {
    uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
    memcpy(v53, v54, *(void *)(*(void *)(v63 - 8) + 64));
    (*(void (**)(char *, char *, uint64_t))(v90 + 16))(&v53[*(int *)(v55 + 20)], &v54[*(int *)(v55 + 20)], v50);
  }
  else
  {
    swift_getEnumCaseMultiPayload();
    uint64_t v74 = *(void (**)(char *, char *, uint64_t))(v90 + 16);
    v74(v53, v54, v50);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, void, uint64_t, uint64_t))(v62 + 56))(v53, 0, 1, v61);
    v74(&v53[*(int *)(v55 + 20)], &v54[*(int *)(v55 + 20)], v50);
  }
  (*(void (**)(char *, void, uint64_t, uint64_t))(v56 + 56))(v53, 0, 1, v55);
LABEL_24:
  uint64_t v76 = v91[6];
  uint64_t v77 = (void *)((char *)v93 + v76);
  uint64_t v78 = (void *)((char *)v92 + v76);
  uint64_t v79 = *v78;
  unint64_t v80 = v78[1];
  outlined copy of Data._Representation(*v78, v80);
  uint64_t v81 = *v77;
  unint64_t v82 = v77[1];
  *uint64_t v77 = v79;
  v77[1] = v80;
  outlined consume of Data._Representation(v81, v82);
  uint64_t v83 = v91[7];
  uint64_t v84 = (char *)v93 + v83;
  char v85 = (char *)v92 + v83;
  uint64_t v86 = type metadata accessor for PEC.SimilarityClient();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v86 - 8) + 24))(v84, v85, v86);
  return v60;
}

_OWORD *initializeWithTake for RequestsManager.PECContext(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = type metadata accessor for UserIdentifier();
  uint64_t v11 = *(int *)(v10 + 20);
  uint64_t v12 = &v7[v11];
  uint64_t v13 = &v8[v11];
  uint64_t v14 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
  *(void *)&v7[*(int *)(v10 + 24)] = *(void *)&v8[*(int *)(v10 + 24)];
  uint64_t v15 = *(int *)(a3 + 24);
  uint64_t v55 = a1;
  uint64_t v16 = (void *)((char *)a1 + v15);
  uint64_t v17 = (char *)a2 + v15;
  *uint64_t v16 = *(void *)((char *)a2 + v15);
  uint64_t v18 = *(int *)(type metadata accessor for SecretKey() + 20);
  uint64_t v19 = (char *)v16 + v18;
  uint64_t v20 = &v17[v18];
  uint64_t v21 = type metadata accessor for HE.SerializedSecretKey();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 32))(v19, v20, v21);
  uint64_t v53 = v16;
  uint64_t v54 = (int *)type metadata accessor for SimilarityClient();
  uint64_t v22 = v54[5];
  uint64_t v23 = (char *)v16 + v22;
  uint64_t v52 = v17;
  uint64_t v24 = &v17[v22];
  *(void *)uint64_t v23 = *(void *)&v17[v22];
  *((_DWORD *)v23 + 2) = *(_DWORD *)&v17[v22 + 8];
  v23[24] = v17[v22 + 24];
  *((void *)v23 + 2) = *(void *)&v17[v22 + 16];
  *((_OWORD *)v23 + 2) = *(_OWORD *)&v17[v22 + 32];
  *((void *)v23 + 6) = *(void *)&v17[v22 + 48];
  uint64_t v25 = (int *)type metadata accessor for AspireApiPECConfig(0);
  uint64_t v26 = v25[9];
  unint64_t v27 = &v23[v26];
  uint64_t v28 = &v24[v26];
  uint64_t v29 = type metadata accessor for UnknownStorage();
  uint64_t v30 = *(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 32);
  v30(v27, v28, v29);
  uint64_t v31 = v25[10];
  uint64_t v32 = &v23[v31];
  uint64_t v33 = &v24[v31];
  uint64_t v34 = type metadata accessor for AspireHeEncryptionParameters(0);
  uint64_t v35 = *(void *)(v34 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
  {
    uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    memcpy(v32, v33, *(void *)(*(void *)(v36 - 8) + 64));
  }
  else
  {
    *(_OWORD *)uint64_t v32 = *(_OWORD *)v33;
    uint64_t v37 = *((void *)v33 + 3);
    *((void *)v32 + 2) = *((void *)v33 + 2);
    *((void *)v32 + 3) = v37;
    v32[32] = v33[32];
    *((void *)v32 + 5) = *((void *)v33 + 5);
    v32[48] = v33[48];
    *((void *)v32 + 7) = *((void *)v33 + 7);
    v32[64] = v33[64];
    v30(&v32[*(int *)(v34 + 40)], &v33[*(int *)(v34 + 40)], v29);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
  }
  uint64_t v38 = v25[11];
  uint64_t v39 = &v23[v38];
  int v40 = &v24[v38];
  uint64_t v41 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  uint64_t v42 = *(void *)(v41 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41))
  {
    uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    memcpy(v39, v40, *(void *)(*(void *)(v43 - 8) + 64));
  }
  else
  {
    uint64_t v44 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
    uint64_t v45 = *(void *)(v44 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v40, 1, v44))
    {
      uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
      memcpy(v39, v40, *(void *)(*(void *)(v46 - 8) + 64));
    }
    else
    {
      swift_getEnumCaseMultiPayload();
      v30(v39, v40, v29);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(char *, void, uint64_t, uint64_t))(v45 + 56))(v39, 0, 1, v44);
    }
    v30(&v39[*(int *)(v41 + 20)], &v40[*(int *)(v41 + 20)], v29);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
  }
  *(_OWORD *)((char *)v53 + v54[6]) = *(_OWORD *)&v52[v54[6]];
  uint64_t v47 = v54[7];
  uint64_t v48 = (char *)v53 + v47;
  uint64_t v49 = &v52[v47];
  uint64_t v50 = type metadata accessor for PEC.SimilarityClient();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v50 - 8) + 32))(v48, v49, v50);
  return v55;
}

void *assignWithTake for RequestsManager.PECContext(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2;
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)v4 + v7;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = type metadata accessor for UserIdentifier();
  uint64_t v12 = *(int *)(v11 + 20);
  uint64_t v13 = &v8[v12];
  uint64_t v14 = &v9[v12];
  uint64_t v15 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 40))(v13, v14, v15);
  *(void *)&v8[*(int *)(v11 + 24)] = *(void *)&v9[*(int *)(v11 + 24)];
  swift_bridgeObjectRelease();
  uint64_t v16 = *(int *)(a3 + 24);
  uint64_t v77 = a1;
  uint64_t v17 = (void *)((char *)a1 + v16);
  int v71 = v4;
  uint64_t v18 = (char *)v4 + v16;
  *uint64_t v17 = *(void *)((char *)v4 + v16);
  uint64_t v19 = *(int *)(type metadata accessor for SecretKey() + 20);
  uint64_t v20 = (char *)v17 + v19;
  uint64_t v21 = &v18[v19];
  uint64_t v22 = type metadata accessor for HE.SerializedSecretKey();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 40))(v20, v21, v22);
  uint64_t v74 = (int *)type metadata accessor for SimilarityClient();
  uint64_t v75 = v17;
  uint64_t v23 = v74[5];
  uint64_t v24 = (char *)v17 + v23;
  uint64_t v76 = v18;
  uint64_t v25 = &v18[v23];
  *(void *)uint64_t v24 = *(void *)&v18[v23];
  *((_DWORD *)v24 + 2) = *(_DWORD *)&v18[v23 + 8];
  v24[24] = v18[v23 + 24];
  *((void *)v24 + 2) = *(void *)&v18[v23 + 16];
  uint64_t v26 = *(void *)((char *)v17 + v23 + 32);
  unint64_t v27 = *(void *)((char *)v17 + v23 + 40);
  *((_OWORD *)v24 + 2) = *(_OWORD *)&v18[v23 + 32];
  outlined consume of Data._Representation(v26, v27);
  *((void *)v24 + 6) = *((void *)v25 + 6);
  swift_bridgeObjectRelease();
  uint64_t v28 = (int *)type metadata accessor for AspireApiPECConfig(0);
  uint64_t v29 = v28[9];
  uint64_t v30 = &v24[v29];
  uint64_t v31 = &v25[v29];
  uint64_t v78 = type metadata accessor for UnknownStorage();
  uint64_t v73 = *(void *)(v78 - 8);
  int v72 = *(void (**)(char *, char *))(v73 + 40);
  v72(v30, v31);
  uint64_t v32 = v28[10];
  uint64_t v33 = (uint64_t)&v24[v32];
  uint64_t v34 = &v25[v32];
  uint64_t v35 = type metadata accessor for AspireHeEncryptionParameters(0);
  uint64_t v36 = *(void *)(v35 - 8);
  uint64_t v37 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v36 + 48);
  LODWORD(v4) = v37(v33, 1, v35);
  int v38 = v37((uint64_t)v34, 1, v35);
  if (v4)
  {
    if (!v38)
    {
      *(_OWORD *)uint64_t v33 = *(_OWORD *)v34;
      uint64_t v39 = *((void *)v34 + 3);
      *(void *)(v33 + 16) = *((void *)v34 + 2);
      *(void *)(v33 + 24) = v39;
      *(unsigned char *)(v33 + 32) = v34[32];
      *(unsigned char *)(v33 + 48) = v34[48];
      *(void *)(v33 + 40) = *((void *)v34 + 5);
      *(void *)(v33 + 56) = *((void *)v34 + 7);
      *(unsigned char *)(v33 + 64) = v34[64];
      uint64_t v40 = v78;
      (*(void (**)(uint64_t, char *, uint64_t))(v73 + 32))(v33 + *(int *)(v35 + 40), &v34[*(int *)(v35 + 40)], v78);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v38)
  {
    outlined destroy of RequestsManager.PECContext(v33, type metadata accessor for AspireHeEncryptionParameters);
LABEL_6:
    uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    memcpy((void *)v33, v34, *(void *)(*(void *)(v41 - 8) + 64));
    uint64_t v40 = v78;
    goto LABEL_7;
  }
  *(_OWORD *)uint64_t v33 = *(_OWORD *)v34;
  *(void *)(v33 + 16) = *((void *)v34 + 2);
  swift_bridgeObjectRelease();
  *(void *)(v33 + 24) = *((void *)v34 + 3);
  *(unsigned char *)(v33 + 32) = v34[32];
  *(void *)(v33 + 40) = *((void *)v34 + 5);
  *(unsigned char *)(v33 + 48) = v34[48];
  *(void *)(v33 + 56) = *((void *)v34 + 7);
  *(unsigned char *)(v33 + 64) = v34[64];
  uint64_t v40 = v78;
  ((void (*)(uint64_t, char *, uint64_t))v72)(v33 + *(int *)(v35 + 40), &v34[*(int *)(v35 + 40)], v78);
LABEL_7:
  uint64_t v42 = v28[11];
  uint64_t v43 = &v24[v42];
  uint64_t v44 = &v25[v42];
  uint64_t v45 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  uint64_t v46 = *(void *)(v45 - 8);
  uint64_t v47 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v46 + 48);
  int v48 = v47(v43, 1, v45);
  int v49 = v47(v44, 1, v45);
  if (!v48)
  {
    uint64_t v50 = v77;
    if (v49)
    {
      outlined destroy of RequestsManager.PECContext((uint64_t)v43, type metadata accessor for AspireSimilarityPlaintextPacking);
      goto LABEL_13;
    }
    uint64_t v55 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
    uint64_t v56 = *(void *)(v55 - 8);
    uint64_t v57 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v56 + 48);
    int v58 = v57(v43, 1, v55);
    int v59 = v57(v44, 1, v55);
    if (v58)
    {
      if (!v59)
      {
        swift_getEnumCaseMultiPayload();
        uint64_t v60 = v78;
        (*(void (**)(char *, char *, uint64_t))(v73 + 32))(v43, v44, v78);
        swift_storeEnumTagMultiPayload();
        (*(void (**)(char *, void, uint64_t, uint64_t))(v56 + 56))(v43, 0, 1, v55);
LABEL_23:
        ((void (*)(char *, char *, uint64_t))v72)(&v43[*(int *)(v45 + 20)], &v44[*(int *)(v45 + 20)], v60);
        goto LABEL_24;
      }
    }
    else
    {
      if (!v59)
      {
        uint64_t v60 = v78;
        if (v77 != v71)
        {
          outlined destroy of RequestsManager.PECContext((uint64_t)v43, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
          swift_getEnumCaseMultiPayload();
          (*(void (**)(char *, char *, uint64_t))(v73 + 32))(v43, v44, v78);
          swift_storeEnumTagMultiPayload();
        }
        goto LABEL_23;
      }
      outlined destroy of RequestsManager.PECContext((uint64_t)v43, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
    }
    uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
    memcpy(v43, v44, *(void *)(*(void *)(v62 - 8) + 64));
    uint64_t v60 = v78;
    goto LABEL_23;
  }
  uint64_t v50 = v77;
  if (v49)
  {
LABEL_13:
    uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    memcpy(v43, v44, *(void *)(*(void *)(v54 - 8) + 64));
    goto LABEL_24;
  }
  uint64_t v51 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
  uint64_t v52 = *(void *)(v51 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v44, 1, v51))
  {
    uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
    memcpy(v43, v44, *(void *)(*(void *)(v53 - 8) + 64));
    (*(void (**)(char *, char *, uint64_t))(v73 + 32))(&v43[*(int *)(v45 + 20)], &v44[*(int *)(v45 + 20)], v40);
  }
  else
  {
    swift_getEnumCaseMultiPayload();
    uint64_t v61 = *(void (**)(char *, char *, uint64_t))(v73 + 32);
    v61(v43, v44, v40);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, void, uint64_t, uint64_t))(v52 + 56))(v43, 0, 1, v51);
    v61(&v43[*(int *)(v45 + 20)], &v44[*(int *)(v45 + 20)], v40);
  }
  (*(void (**)(char *, void, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
LABEL_24:
  uint64_t v63 = v74[6];
  uint64_t v64 = *(void *)((char *)v75 + v63);
  unint64_t v65 = *(void *)((char *)v75 + v63 + 8);
  *(_OWORD *)((char *)v75 + v63) = *(_OWORD *)&v76[v63];
  outlined consume of Data._Representation(v64, v65);
  uint64_t v66 = v74[7];
  uint64_t v67 = (char *)v75 + v66;
  uint64_t v68 = &v76[v66];
  uint64_t v69 = type metadata accessor for PEC.SimilarityClient();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v69 - 8) + 40))(v67, v68, v69);
  return v50;
}

uint64_t getEnumTagSinglePayload for RequestsManager.PECContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_249D5F0A8);
}

uint64_t sub_249D5F0A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UserIdentifier();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 20);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = type metadata accessor for SimilarityClient();
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 24);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t storeEnumTagSinglePayload for RequestsManager.PECContext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_249D5F1E8);
}

uint64_t sub_249D5F1E8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UserIdentifier();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 20);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = type metadata accessor for SimilarityClient();
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 24);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

uint64_t type metadata completion function for RequestsManager.PECContext()
{
  uint64_t result = type metadata accessor for UserIdentifier();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for SimilarityClient();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t _s8CipherML15AspireApiConfigVAC21InternalSwiftProtobuf7MessageAAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer()
{
  unint64_t result = lazy protocol witness table cache variable for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer;
  if (!lazy protocol witness table cache variable for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer);
  }
  return result;
}

uint64_t outlined init with take of AspireApiPECConfig(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with copy of AspireApiConfig(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of RequestsManager.PECContext(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t Coordinator.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  Coordinator.init()();
  return v0;
}

uint64_t _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(void *)(a3 + 16)) {
      return swift_task_create();
    }
    goto LABEL_3;
  }
  outlined destroy of TaskPriority?(a1);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

uint64_t key path setter for Coordinator.inProcessTasks : <A, B>Coordinator<A, B>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  swift_beginAccess();
  *(void *)(v3 + 112) = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t Coordinator.inProcessTasks.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Coordinator.inProcessTasks.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 112) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*Coordinator.inProcessTasks.modify())()
{
  return RequestsManager.CMLUseCaseStatusBuilder.keyExpirationTime.modify;
}

uint64_t Coordinator.run(key:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[13] = a4;
  v5[14] = v4;
  v5[11] = a2;
  v5[12] = a3;
  v5[10] = a1;
  uint64_t v6 = *v4;
  v5[15] = *v4;
  uint64_t v7 = *(void *)(v6 + 80);
  v5[16] = v7;
  v5[17] = *(void *)(v7 - 8);
  v5[18] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v5[19] = swift_task_alloc();
  return MEMORY[0x270FA2498](Coordinator.run(key:_:), v4, 0);
}

uint64_t Coordinator.run(key:_:)()
{
  uint64_t v1 = v0[15];
  uint64_t v2 = v0[16];
  uint64_t v3 = v0[11];
  unint64_t v4 = (uint64_t *)(v0[14] + 112);
  swift_beginAccess();
  uint64_t v5 = *v4;
  uint64_t v6 = *(void *)(v1 + 88);
  swift_bridgeObjectRetain();
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  uint64_t v7 = type metadata accessor for Task();
  uint64_t v8 = *(void *)(v1 + 96);
  MEMORY[0x24C5B3370](v3, v5, v2, v7, v8);
  swift_bridgeObjectRelease();
  uint64_t v9 = v0[8];
  v0[20] = v9;
  if (v9)
  {
    uint64_t v10 = (void *)swift_task_alloc();
    v0[21] = v10;
    *uint64_t v10 = v0;
    v10[1] = Coordinator.run(key:_:);
    uint64_t v11 = v0[10];
    uint64_t v12 = MEMORY[0x263F8E4E0];
    uint64_t v13 = v9;
  }
  else
  {
    uint64_t v14 = v0[19];
    uint64_t v25 = v0[18];
    uint64_t v16 = v0[16];
    uint64_t v15 = v0[17];
    uint64_t v17 = v0[13];
    uint64_t v23 = v0[12];
    uint64_t v24 = v0[11];
    uint64_t v18 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v14, 1, 1, v18);
    uint64_t v19 = (void *)swift_allocObject();
    v19[2] = 0;
    v19[3] = 0;
    v19[4] = v16;
    v19[5] = v6;
    v19[6] = v8;
    v19[7] = v23;
    v19[8] = v17;
    swift_retain();
    uint64_t v20 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC(v14, (uint64_t)&async function pointer to partial apply for closure #1 in Coordinator.run(key:_:), (uint64_t)v19);
    v0[23] = v20;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v25, v24, v16);
    v0[9] = v20;
    swift_beginAccess();
    type metadata accessor for Dictionary();
    swift_retain();
    Dictionary.subscript.setter();
    swift_endAccess();
    uint64_t v21 = (void *)swift_task_alloc();
    v0[24] = v21;
    void *v21 = v0;
    v21[1] = Coordinator.run(key:_:);
    uint64_t v11 = v0[10];
    uint64_t v12 = MEMORY[0x263F8E4E0];
    uint64_t v13 = v20;
  }
  return MEMORY[0x270FA1FA8](v11, v13, v6, v26, v12);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 176) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 112);
  if (v0) {
    unint64_t v4 = Coordinator.run(key:_:);
  }
  else {
    unint64_t v4 = Coordinator.run(key:_:);
  }
  return MEMORY[0x270FA2498](v4, v3, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 200) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 112);
  if (v0) {
    unint64_t v4 = Coordinator.run(key:_:);
  }
  else {
    unint64_t v4 = Coordinator.run(key:_:);
  }
  return MEMORY[0x270FA2498](v4, v3, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  $defer #1 <A, B>() in Coordinator.run(key:_:)(*(void *)(v0 + 112));
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  $defer #1 <A, B>() in Coordinator.run(key:_:)(*(void *)(v0 + 112));
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t $defer #1 <A, B>() in Coordinator.run(key:_:)(uint64_t a1)
{
  double v1 = MEMORY[0x270FA5388](a1);
  (*(void (**)(unsigned char *, double))(v3 + 16))(&v5[-v2], v1);
  uint64_t v6 = 0;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  type metadata accessor for Task();
  type metadata accessor for Dictionary();
  Dictionary.subscript.setter();
  return swift_endAccess();
}

uint64_t Coordinator.deinit()
{
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t Coordinator.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();
  return MEMORY[0x270FA2418](v0);
}

uint64_t Coordinator.init()()
{
  swift_defaultActor_initialize();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  type metadata accessor for Task();
  swift_getTupleTypeMetadata2();
  static Array._allocateUninitialized(_:)();
  *(void *)(v0 + 112) = Dictionary.init(dictionaryLiteral:)();
  return v0;
}

uint64_t sub_249D6039C()
{
  swift_unknownObjectRelease();
  swift_release();
  return MEMORY[0x270FA0238](v0, 72, 7);
}

uint64_t partial apply for closure #1 in Coordinator.run(key:_:)(uint64_t a1)
{
  unint64_t v4 = *(int **)(v1 + 56);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  uint64_t v8 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  uint64_t v6 = (void *)swift_task_alloc();
  v5[2] = v6;
  *uint64_t v6 = v5;
  v6[1] = protocol witness for NetworkManager.uploadKeys(evaluationKeys:userId:) in conformance AspireNetworkManager;
  return v8(a1);
}

uint64_t Coordinator.unownedExecutor.getter()
{
  return v0;
}

uint64_t protocol witness for Actor.unownedExecutor.getter in conformance Coordinator<A, B>()
{
  return Coordinator.unownedExecutor.getter();
}

uint64_t sub_249D60528@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  *a2 = *(void *)(v3 + 112);
  return swift_bridgeObjectRetain();
}

uint64_t sub_249D60578()
{
  return 24;
}

__n128 sub_249D60584(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t type metadata completion function for Coordinator()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for Coordinator()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t method lookup function for Coordinator(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for Coordinator);
}

uint64_t dispatch thunk of Coordinator.inProcessTasks.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of Coordinator.inProcessTasks.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of Coordinator.inProcessTasks.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of Coordinator.run(key:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)v4 + 144)
                                                                   + **(int **)(*(void *)v4 + 144));
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v10;
  *uint64_t v10 = v5;
  v10[1] = protocol witness for NetworkManager.uploadKeys(evaluationKeys:userId:) in conformance AspireNetworkManager;
  return v12(a1, a2, a3, a4);
}

uint64_t dispatch thunk of Coordinator.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t outlined destroy of TaskPriority?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t static DaemonContainerPathLookup.path(for:)(uint64_t a1, uint64_t a2)
{
  return specialized static DaemonContainerPathLookup.path(for:)(a1, a2);
}

void specialized static DaemonContainerPathLookup.performSandboxExtension(for:)()
{
  if (container_copy_sandbox_token())
  {
    if (sandbox_extension_consume() == -1)
    {
      if (one-time initialization token for daemon != -1) {
        swift_once();
      }
      uint64_t v0 = type metadata accessor for Logger();
      __swift_project_value_buffer(v0, (uint64_t)static Logger.daemon);
      uint64_t v1 = Logger.logObject.getter();
      os_log_type_t v2 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v1, v2))
      {
        uint64_t v3 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v3 = 0;
        _os_log_impl(&dword_249C3F000, v1, v2, "token/process not valid for extension", v3, 2u);
        MEMORY[0x24C5B4790](v3, -1, -1);
      }
    }
    JUMPOUT(0x24C5B4790);
  }
  if (one-time initialization token for daemon != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.daemon);
  oslog = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl(&dword_249C3F000, oslog, v5, "token not sent by container", v6, 2u);
    MEMORY[0x24C5B4790](v6, -1, -1);
  }
}

uint64_t specialized static DaemonContainerPathLookup.path(for:)(uint64_t a1, uint64_t a2)
{
  if (!container_query_create())
  {
    lazy protocol witness table accessor for type DaemonContainerPathError and conformance DaemonContainerPathError();
    swift_allocError();
    *(_OWORD *)uint64_t v12 = xmmword_249E8A430;
    *(unsigned char *)(v12 + 16) = 2;
    return swift_willThrow();
  }
  if (a2)
  {
    uint64_t v3 = String.utf8CString.getter();
    xpc_string_create((const char *)(v3 + 32));
    swift_release();
    container_query_set_group_identifiers();
    swift_unknownObjectRelease();
  }
  id v4 = objc_msgSend(self, sel_currentPersona);
  if (!v4) {
    goto LABEL_13;
  }
  os_log_type_t v5 = v4;
  if (!objc_msgSend(v4, sel_isDataSeparatedPersona)
    || (id v6 = objc_msgSend(v5, sel_userPersonaUniqueString)) == 0)
  {

    goto LABEL_13;
  }
  uint64_t v7 = v6;
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v10 = v9;

  uint64_t v11 = HIBYTE(v10) & 0xF;
  if ((v10 & 0x2000000000000000) == 0) {
    uint64_t v11 = v8 & 0xFFFFFFFFFFFFLL;
  }
  if (!v11)
  {
    swift_bridgeObjectRelease();
LABEL_13:
    String.init(cString:)();
  }
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  container_query_set_persona_unique_string();
  swift_release();
  container_query_set_class();
  container_query_operation_set_flags();
  if (container_query_get_single_result())
  {
    path = (const char *)container_get_path();
    if (!path)
    {
      if (container_query_get_last_error() && (uint64_t v21 = container_error_copy_unlocalized_description()) != 0)
      {
        uint64_t v22 = v21;
        uint64_t v23 = String.init(cString:)();
        unint64_t v25 = v24;
        MEMORY[0x24C5B4790](v22, -1, -1);
      }
      else
      {
        uint64_t v23 = 0;
        unint64_t v25 = 0xE000000000000000;
      }
      lazy protocol witness table accessor for type DaemonContainerPathError and conformance DaemonContainerPathError();
      swift_allocError();
      *(void *)uint64_t v28 = v23;
      *(void *)(v28 + 8) = v25;
      *(unsigned char *)(v28 + 16) = 0;
      goto LABEL_30;
    }
    if ((uint64_t)strlen(path) >= 1)
    {
      specialized static DaemonContainerPathLookup.performSandboxExtension(for:)();
      uint64_t v15 = String.init(cString:)();
      container_query_free();
      return v15;
    }
    lazy protocol witness table accessor for type DaemonContainerPathError and conformance DaemonContainerPathError();
    swift_allocError();
    *(void *)uint64_t v26 = 0;
    *(void *)(v26 + 8) = 0;
    char v27 = 2;
  }
  else
  {
    if (container_query_get_last_error() && (uint64_t v16 = container_error_copy_unlocalized_description()) != 0)
    {
      uint64_t v17 = v16;
      uint64_t v18 = String.init(cString:)();
      unint64_t v20 = v19;
      MEMORY[0x24C5B4790](v17, -1, -1);
    }
    else
    {
      uint64_t v18 = 0;
      unint64_t v20 = 0xE000000000000000;
    }
    lazy protocol witness table accessor for type DaemonContainerPathError and conformance DaemonContainerPathError();
    swift_allocError();
    *(void *)uint64_t v26 = v18;
    *(void *)(v26 + 8) = v20;
    char v27 = 1;
  }
  *(unsigned char *)(v26 + 16) = v27;
LABEL_30:
  swift_willThrow();
  return container_query_free();
}

uint64_t outlined copy of DaemonContainerPathError(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 1u) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for DaemonContainerPathError(uint64_t a1)
{
  return outlined consume of DaemonContainerPathError(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t outlined consume of DaemonContainerPathError(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 1u) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for DaemonContainerPathError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  outlined copy of DaemonContainerPathError(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for DaemonContainerPathError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  outlined copy of DaemonContainerPathError(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  unsigned __int8 v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of DaemonContainerPathError(v6, v7, v8);
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for DaemonContainerPathError(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  unsigned __int8 v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of DaemonContainerPathError(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for DaemonContainerPathError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DaemonContainerPathError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 254;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for DaemonContainerPathError(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 1u) {
    return *(unsigned __int8 *)(a1 + 16);
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t destructiveInjectEnumTag for DaemonContainerPathError(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)__n128 result = a2 - 2;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for DaemonContainerPathError()
{
  return &type metadata for DaemonContainerPathError;
}

ValueMetadata *type metadata accessor for DaemonContainerPathLookup()
{
  return &type metadata for DaemonContainerPathLookup;
}

unint64_t lazy protocol witness table accessor for type DaemonContainerPathError and conformance DaemonContainerPathError()
{
  unint64_t result = lazy protocol witness table cache variable for type DaemonContainerPathError and conformance DaemonContainerPathError;
  if (!lazy protocol witness table cache variable for type DaemonContainerPathError and conformance DaemonContainerPathError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DaemonContainerPathError and conformance DaemonContainerPathError);
  }
  return result;
}

uint64_t AspireApiPECConfig.cryptokit()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v35 = a1;
  uint64_t v3 = type metadata accessor for PEC.SimilarityMetric();
  uint64_t v32 = *(void *)(v3 - 8);
  uint64_t v33 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v34 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v40 = (uint64_t)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  uint64_t v38 = *(void *)(v7 - 8);
  uint64_t v39 = v7;
  MEMORY[0x270FA5388](v7);
  unint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for PEC.PlaintextPacking();
  uint64_t v30 = *(void *)(v10 - 8);
  uint64_t v31 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v41 = (uint64_t)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for AspireHeEncryptionParameters(0);
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for HE.EncryptionParams();
  uint64_t v36 = *(void *)(v19 - 8);
  uint64_t v37 = v19;
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v29 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for AspireApiPECConfig(0);
  uint64_t v23 = *(int *)(v22 + 40);
  uint64_t v42 = v2;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v2 + v23, (uint64_t)v14, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
  {
    *(void *)uint64_t v18 = 0;
    *((void *)v18 + 1) = 0;
    *((void *)v18 + 2) = MEMORY[0x263F8EE78];
    *((void *)v18 + 3) = 0;
    v18[32] = 1;
    *((void *)v18 + 5) = 0;
    v18[48] = 1;
    *((void *)v18 + 7) = 0;
    v18[64] = 1;
    UnknownStorage.init()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v14, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  }
  else
  {
    outlined init with take of AspireSimilarityPlaintextPacking((uint64_t)v14, (uint64_t)v18, type metadata accessor for AspireHeEncryptionParameters);
  }
  uint64_t v24 = v43;
  AspireHeEncryptionParameters.cryptokit()((uint64_t)v21);
  uint64_t result = _s8CipherML28AspireHeEncryptionParametersVWOhTm_1((uint64_t)v18, type metadata accessor for AspireHeEncryptionParameters);
  if (!v24)
  {
    if ((*(void *)v42 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      uint64_t v26 = v40;
      outlined init with copy of AMDPbHEConfig.OneOf_Config?(v42 + *(int *)(v22 + 44), v40, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v38 + 48))(v26, 1, v39) == 1)
      {
        uint64_t v27 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v9, 1, 1, v27);
        UnknownStorage.init()();
        outlined destroy of AMDPbHEConfig.OneOf_Config?(v26, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
      }
      else
      {
        outlined init with take of AspireSimilarityPlaintextPacking(v26, (uint64_t)v9, type metadata accessor for AspireSimilarityPlaintextPacking);
      }
      uint64_t v28 = v41;
      AspireSimilarityPlaintextPacking.cryptokit()(v41);
      _s8CipherML28AspireHeEncryptionParametersVWOhTm_1((uint64_t)v9, type metadata accessor for AspireSimilarityPlaintextPacking);
      if (*(unsigned char *)(v42 + 24))
      {
        (*(void (**)(char *, void, uint64_t))(v32 + 104))(v34, *MEMORY[0x263F38898], v33);
        swift_bridgeObjectRetain();
        return PEC.SimilarityClientConfig.init(encryptionParams:scalingFactor:plaintextPacking:embeddingDimension:galoisElements:similarityMetric:extraPlaintextModuli:)();
      }
      else
      {
        type metadata accessor for CipherMLError();
        _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_8((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
        swift_allocError();
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v28, v31);
        return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v21, v37);
      }
    }
  }
  return result;
}

uint64_t PEC.SerializedCiphertextCoeffMatrix.proto()()
{
  return static Message.with(_:)();
}

uint64_t AspireSimilaritySerializedCiphertextMatrix.cryptokit(encryptionParams:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v90 = a1;
  uint64_t v93 = a2;
  uint64_t v3 = type metadata accessor for AspireHeSerializedFullCiphertext(0);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v100 = (uint64_t *)((char *)&v77 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = type metadata accessor for AspireHeSerializedSeededCiphertext(0);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v108 = (uint64_t *)((char *)&v77 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v106 = (uint64_t)&v77 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for AspireHeSerializedCiphertext(0);
  uint64_t v104 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9 - 8);
  unint64_t v99 = (char *)&v77 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v109 = type metadata accessor for HE.SerializedCiphertext();
  uint64_t v107 = *(void *)(v109 - 8);
  MEMORY[0x270FA5388](v109);
  uint64_t v12 = (uint64_t *)((char *)&v77 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v91 = (uint64_t)&v77 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  uint64_t v87 = *(void *)(v88 - 8);
  MEMORY[0x270FA5388](v88);
  uint64_t v92 = (uint64_t)&v77 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for PEC.PlaintextPacking();
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v18 = (char *)&v77 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for HE.EncryptionParams();
  uint64_t v89 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v77 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for PEC.PlaintextMatrixDims();
  uint64_t v94 = *(void *)(v22 - 8);
  MEMORY[0x270FA5388](v22);
  uint64_t v24 = (char *)&v77 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v25);
  uint64_t v27 = (char *)&v77 - v26;
  uint64_t v28 = v105;
  uint64_t result = PEC.PlaintextMatrixDims.init(rowCount:colCount:)();
  if (!v28)
  {
    uint64_t v30 = v22;
    uint64_t v84 = v24;
    uint64_t v81 = v18;
    char v85 = v21;
    uint64_t v83 = v19;
    uint64_t v86 = v27;
    uint64_t v31 = *(void *)(v2 + 8);
    int64_t v32 = *(void *)(v31 + 16);
    uint64_t v82 = 0;
    if (v32)
    {
      uint64_t v78 = v2;
      uint64_t v80 = v22;
      uint64_t v111 = MEMORY[0x263F8EE78];
      swift_bridgeObjectRetain();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v32, 0);
      uint64_t v33 = 0;
      unint64_t v34 = (*(unsigned __int8 *)(v104 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v104 + 80);
      uint64_t v79 = v31;
      uint64_t v105 = v31 + v34;
      uint64_t v104 = *(void *)(v104 + 72);
      unsigned int v96 = *MEMORY[0x263F38838];
      uint64_t v35 = v108;
      uint64_t v102 = (void (**)(uint64_t *, uint64_t, uint64_t))(v107 + 104);
      unsigned int v95 = *MEMORY[0x263F38830];
      uint64_t v101 = v107 + 32;
      uint64_t v37 = (uint64_t)v99;
      uint64_t v36 = v100;
      int64_t v103 = v32;
      while (1)
      {
        outlined init with copy of AspireHeSerializedCiphertext(v105 + v104 * v33, v37, type metadata accessor for AspireHeSerializedCiphertext);
        uint64_t v38 = v106;
        outlined init with copy of AMDPbHEConfig.OneOf_Config?(v37, v106, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
        uint64_t v39 = type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(0);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 48))(v38, 1, v39) == 1) {
          break;
        }
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          outlined init with take of AspireSimilarityPlaintextPacking(v38, (uint64_t)v36, type metadata accessor for AspireHeSerializedFullCiphertext);
          uint64_t v40 = *v36;
          unint64_t v41 = v36[1];
          uint64_t v42 = v36[2];
          int64_t v43 = *(void *)(v42 + 16);
          if (v43)
          {
            unint64_t v97 = v36[1];
            uint64_t v98 = v40;
            outlined copy of Data._Representation(v40, v41);
            uint64_t v110 = MEMORY[0x263F8EE78];
            swift_bridgeObjectRetain();
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v43, 0);
            uint64_t v44 = 0;
            uint64_t v45 = v110;
            unint64_t v46 = *(void *)(v110 + 16);
            do
            {
              uint64_t v47 = *(unsigned int *)(v42 + 4 * v44 + 32);
              uint64_t v110 = v45;
              unint64_t v48 = *(void *)(v45 + 24);
              if (v46 >= v48 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v48 > 1, v46 + 1, 1);
                uint64_t v45 = v110;
              }
              ++v44;
              *(void *)(v45 + 16) = v46 + 1;
              *(void *)(v45 + 8 * v46++ + 32) = v47;
            }
            while (v43 != v44);
            swift_bridgeObjectRelease();
            uint64_t v37 = (uint64_t)v99;
            uint64_t v36 = v100;
            unint64_t v41 = v97;
            uint64_t v40 = v98;
          }
          else
          {
            outlined copy of Data._Representation(*v36, v36[1]);
            uint64_t v45 = MEMORY[0x263F8EE78];
          }
          unint64_t v52 = v36[3];
          _s8CipherML28AspireHeEncryptionParametersVWOhTm_1((uint64_t)v36, type metadata accessor for AspireHeSerializedFullCiphertext);
          uint64_t *v12 = v40;
          v12[1] = v41;
          uint64_t v53 = v95;
        }
        else
        {
          outlined init with take of AspireSimilarityPlaintextPacking(v38, (uint64_t)v35, type metadata accessor for AspireHeSerializedSeededCiphertext);
          uint64_t v49 = (uint64_t)v35;
          uint64_t v50 = *v35;
          unint64_t v51 = v35[1];
          uint64_t v45 = *(void *)(v49 + 16);
          unint64_t v52 = *(void *)(v49 + 24);
          outlined copy of Data._Representation(v50, v51);
          outlined copy of Data._Representation(v45, v52);
          _s8CipherML28AspireHeEncryptionParametersVWOhTm_1(v49, type metadata accessor for AspireHeSerializedSeededCiphertext);
          uint64_t *v12 = v50;
          v12[1] = v51;
          uint64_t v53 = v96;
        }
        _OWORD v12[2] = v45;
        v12[3] = v52;
        uint64_t v54 = v109;
        (*v102)(v12, v53, v109);
        _s8CipherML28AspireHeEncryptionParametersVWOhTm_1(v37, type metadata accessor for AspireHeSerializedCiphertext);
        uint64_t v55 = v111;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v55 + 16) + 1, 1);
          uint64_t v54 = v109;
          uint64_t v55 = v111;
        }
        uint64_t v35 = v108;
        unint64_t v57 = *(void *)(v55 + 16);
        unint64_t v56 = *(void *)(v55 + 24);
        if (v57 >= v56 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v56 > 1, v57 + 1, 1);
          uint64_t v54 = v109;
          uint64_t v55 = v111;
        }
        ++v33;
        *(void *)(v55 + 16) = v57 + 1;
        (*(void (**)(unint64_t, uint64_t *, uint64_t))(v107 + 32))(v55+ ((*(unsigned __int8 *)(v107 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v107 + 80))+ *(void *)(v107 + 72) * v57, v12, v54);
        uint64_t v111 = v55;
        if (v33 == v103)
        {
          swift_bridgeObjectRelease();
          uint64_t v58 = v80;
          uint64_t v59 = v94;
          uint64_t v60 = v78;
          uint64_t v61 = v86;
          uint64_t v63 = v89;
          uint64_t v62 = v90;
          uint64_t v64 = v83;
          unint64_t v65 = v85;
          uint64_t v66 = v88;
          uint64_t v67 = v84;
          uint64_t v68 = v87;
          goto LABEL_23;
        }
      }
      type metadata accessor for CipherMLError();
      _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_8((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
      swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      _s8CipherML28AspireHeEncryptionParametersVWOhTm_1(v37, type metadata accessor for AspireHeSerializedCiphertext);
      swift_bridgeObjectRelease();
      swift_release();
      return (*(uint64_t (**)(char *, uint64_t))(v94 + 8))(v86, v80);
    }
    else
    {
      uint64_t v61 = v86;
      uint64_t v63 = v89;
      uint64_t v62 = v90;
      uint64_t v64 = v83;
      unint64_t v65 = v85;
      uint64_t v66 = v88;
      uint64_t v60 = v2;
      uint64_t v67 = v84;
      uint64_t v68 = v87;
      uint64_t v58 = v30;
      uint64_t v59 = v94;
LABEL_23:
      (*(void (**)(char *, uint64_t, uint64_t))(v63 + 16))(v65, v62, v64);
      (*(void (**)(char *, char *, uint64_t))(v59 + 16))(v67, v61, v58);
      uint64_t v69 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
      uint64_t v70 = v91;
      outlined init with copy of AMDPbHEConfig.OneOf_Config?(v60 + *(int *)(v69 + 32), v91, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v68 + 48))(v70, 1, v66) == 1)
      {
        uint64_t v71 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
        uint64_t v72 = v70;
        uint64_t v73 = v92;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v71 - 8) + 56))(v92, 1, 1, v71);
        UnknownStorage.init()();
        outlined destroy of AMDPbHEConfig.OneOf_Config?(v72, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
      }
      else
      {
        uint64_t v74 = v70;
        uint64_t v73 = v92;
        outlined init with take of AspireSimilarityPlaintextPacking(v74, v92, type metadata accessor for AspireSimilarityPlaintextPacking);
      }
      uint64_t v75 = v82;
      AspireSimilarityPlaintextPacking.cryptokit()((uint64_t)v81);
      if (v75)
      {
        swift_bridgeObjectRelease();
        _s8CipherML28AspireHeEncryptionParametersVWOhTm_1(v73, type metadata accessor for AspireSimilarityPlaintextPacking);
        uint64_t v76 = *(void (**)(char *, uint64_t))(v94 + 8);
        v76(v84, v58);
        (*(void (**)(char *, uint64_t))(v63 + 8))(v85, v83);
        return ((uint64_t (*)(char *, uint64_t))v76)(v86, v58);
      }
      else
      {
        _s8CipherML28AspireHeEncryptionParametersVWOhTm_1(v73, type metadata accessor for AspireSimilarityPlaintextPacking);
        PEC.SerializedCiphertextCoeffMatrix.init(encryptionParams:dimensions:packing:ciphertexts:)();
        return (*(uint64_t (**)(char *, uint64_t))(v94 + 8))(v86, v58);
      }
    }
  }
  return result;
}

uint64_t Message.equalsIgnoringUnknown(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v7 = *(void *)(a2 - 8);
  double v9 = MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v16[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16);
  v12(v11, a1, a2, v9);
  dispatch thunk of Message.unknownFields.getter();
  dispatch thunk of Message.unknownFields.setter();
  void v16[3] = a2;
  void v16[4] = a3;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v16);
  ((void (*)(uint64_t *, char *, uint64_t))v12)(boxed_opaque_existential_1, v11, a2);
  LOBYTE(a1) = dispatch thunk of Message.isEqualTo(message:)();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v11, a2);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v16);
  return a1 & 1;
}

uint64_t AspireHeHeScheme.cryptokit()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *v1;
  int v3 = *((unsigned __int8 *)v1 + 8);
  if (v3 != 1 || v2 == 0)
  {
    type metadata accessor for CipherMLError();
    _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_8((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
    swift_allocError();
    *(void *)uint64_t v5 = v2;
    *(unsigned char *)(v5 + 8) = v3;
    swift_storeEnumTagMultiPayload();
    return swift_willThrow();
  }
  else
  {
    if (v2 == 1) {
      uint64_t v8 = (unsigned int *)MEMORY[0x263F38848];
    }
    else {
      uint64_t v8 = (unsigned int *)MEMORY[0x263F38850];
    }
    uint64_t v9 = *v8;
    uint64_t v10 = type metadata accessor for HE.Scheme();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 104))(a1, v9, v10);
  }
}

uint64_t AspireHeEvaluationKeyConfig.cryptokit()()
{
  uint64_t v2 = v0;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for AspireHeEncryptionParameters(0);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for HE.EncryptionParams();
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v2 + *(int *)(v13 + 28), (uint64_t)v5, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *(void *)uint64_t v9 = 0;
    *((void *)v9 + 1) = 0;
    *((void *)v9 + 2) = MEMORY[0x263F8EE78];
    *((void *)v9 + 3) = 0;
    v9[32] = 1;
    *((void *)v9 + 5) = 0;
    v9[48] = 1;
    *((void *)v9 + 7) = 0;
    v9[64] = 1;
    UnknownStorage.init()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  }
  else
  {
    outlined init with take of AspireSimilarityPlaintextPacking((uint64_t)v5, (uint64_t)v9, type metadata accessor for AspireHeEncryptionParameters);
  }
  AspireHeEncryptionParameters.cryptokit()((uint64_t)v12);
  uint64_t result = _s8CipherML28AspireHeEncryptionParametersVWOhTm_1((uint64_t)v9, type metadata accessor for AspireHeEncryptionParameters);
  if (!v1)
  {
    swift_bridgeObjectRetain();
    return HE.EvaluationKeyConfig.init(encryptionParams:galoisElements:hasRelinKey:)();
  }
  return result;
}

uint64_t HE.SerializedEvaluationKey.proto()()
{
  return static Message.with(_:)();
}

uint64_t AspireHeEncryptionParameters.rlweParams()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = static HE.RlweParams.allCases.getter();
  uint64_t v10 = v1;
  uint64_t result = specialized _ArrayProtocol.filter(_:)((uint64_t (*)(char *))partial apply for closure #1 in AspireHeEncryptionParameters.rlweParams(), (uint64_t)&v9, v4);
  if (!v2)
  {
    uint64_t v6 = result;
    if (*(void *)(result + 16))
    {
      uint64_t v7 = type metadata accessor for HE.RlweParams();
      (*(void (**)(uint64_t, unint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a1, v6+ ((*(unsigned __int8 *)(*(void *)(v7 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v7 - 8) + 80)), v7);
      return swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      type metadata accessor for CipherMLError();
      _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_8((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
      swift_allocError();
      outlined init with copy of AspireHeSerializedCiphertext(v1, v8, type metadata accessor for AspireHeEncryptionParameters);
      swift_storeEnumTagMultiPayload();
      return swift_willThrow();
    }
  }
  return result;
}

uint64_t specialized _ArrayProtocol.filter(_:)(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v28 = type metadata accessor for HE.RlweParams();
  uint64_t v7 = *(void *)(v28 - 8);
  uint64_t v8 = ((uint64_t (*)(void))MEMORY[0x270FA5388])();
  uint64_t v27 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)v20 - v11;
  uint64_t v13 = MEMORY[0x263F8EE78];
  uint64_t v29 = MEMORY[0x263F8EE78];
  uint64_t v26 = *(void *)(a3 + 16);
  if (v26)
  {
    unint64_t v14 = 0;
    uint64_t v21 = a3;
    uint64_t v22 = (void (**)(char *, uint64_t))(v7 + 8);
    uint64_t v24 = (void (**)(char *, char *, uint64_t))(v7 + 32);
    uint64_t v25 = v7 + 16;
    v20[0] = a1;
    v20[1] = a2;
    while (v14 < *(void *)(a3 + 16))
    {
      unint64_t v15 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
      uint64_t v13 = *(void *)(v7 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v12, a3 + v15 + v13 * v14, v28);
      char v16 = a1(v12);
      if (v3)
      {
        (*v22)(v12, v28);
        swift_bridgeObjectRelease();
        swift_release();
        return v13;
      }
      if (v16)
      {
        uint64_t v23 = *v24;
        v23(v27, v12, v28);
        uint64_t v17 = v29;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v17 + 16) + 1, 1);
          uint64_t v17 = v29;
        }
        unint64_t v19 = *(void *)(v17 + 16);
        unint64_t v18 = *(void *)(v17 + 24);
        if (v19 >= v18 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
          uint64_t v17 = v29;
        }
        *(void *)(v17 + 16) = v19 + 1;
        uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v23)(v17 + v15 + v19 * v13, v27, v28);
        uint64_t v29 = v17;
        a3 = v21;
        a1 = (uint64_t (*)(char *))v20[0];
      }
      else
      {
        uint64_t result = ((uint64_t (*)(char *, uint64_t))*v22)(v12, v28);
      }
      if (v26 == ++v14)
      {
        uint64_t v13 = v29;
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return v13;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  unint64_t v19;
  void v20[2];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  uint64_t v7 = type metadata accessor for TokenCache.CachedToken(0);
  uint64_t v24 = *(void *)(v7 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v7 - 8);
  uint64_t v23 = (uint64_t)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)v20 - v11;
  uint64_t v13 = MEMORY[0x263F8EE78];
  uint64_t v25 = MEMORY[0x263F8EE78];
  uint64_t v22 = *(void *)(a3 + 16);
  if (v22)
  {
    unint64_t v14 = 0;
    unint64_t v15 = MEMORY[0x263F8EE78];
    v20[1] = a2;
    uint64_t v21 = a3;
    v20[0] = a1;
    while (v14 < *(void *)(a3 + 16))
    {
      char v16 = (*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
      uint64_t v13 = *(void *)(v24 + 72);
      outlined init with copy of AspireHeSerializedCiphertext(a3 + v16 + v13 * v14, (uint64_t)v12, type metadata accessor for TokenCache.CachedToken);
      uint64_t v17 = a1(v12);
      if (v3)
      {
        _s8CipherML28AspireHeEncryptionParametersVWOhTm_1((uint64_t)v12, type metadata accessor for TokenCache.CachedToken);
        swift_release();
        swift_bridgeObjectRelease();
        return v13;
      }
      if (v17)
      {
        outlined init with take of AspireSimilarityPlaintextPacking((uint64_t)v12, v23, type metadata accessor for TokenCache.CachedToken);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v15 + 16) + 1, 1);
        }
        unint64_t v15 = v25;
        unint64_t v19 = *(void *)(v25 + 16);
        unint64_t v18 = *(void *)(v25 + 24);
        if (v19 >= v18 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
          unint64_t v15 = v25;
        }
        *(void *)(v15 + 16) = v19 + 1;
        uint64_t result = outlined init with take of AspireSimilarityPlaintextPacking(v23, v15 + v16 + v19 * v13, type metadata accessor for TokenCache.CachedToken);
        a3 = v21;
        a1 = (uint64_t (*)(char *))v20[0];
      }
      else
      {
        uint64_t result = _s8CipherML28AspireHeEncryptionParametersVWOhTm_1((uint64_t)v12, type metadata accessor for TokenCache.CachedToken);
      }
      if (v22 == ++v14)
      {
        uint64_t v13 = v25;
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return v13;
  }
  return result;
}

uint64_t specialized _ArrayProtocol.filter(_:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a3;
  uint64_t v17 = *(void *)(a3 + 16);
  if (v17)
  {
    uint64_t v5 = (uint64_t (*)(void *))result;
    unint64_t v6 = 0;
    uint64_t v7 = (uint64_t *)(a3 + 40);
    uint64_t v8 = MEMORY[0x263F8EE78];
    unint64_t v15 = (uint64_t (*)(void *))result;
    while (v6 < *(void *)(v4 + 16))
    {
      uint64_t v10 = *(v7 - 1);
      uint64_t v9 = *v7;
      v18[0] = v10;
      v18[1] = v9;
      swift_bridgeObjectRetain();
      char v11 = v5(v18);
      if (v3)
      {
        swift_release();
        swift_bridgeObjectRelease();
        goto LABEL_16;
      }
      if (v11)
      {
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v19 = v8;
        if ((result & 1) == 0)
        {
          uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v8 + 16) + 1, 1);
          uint64_t v8 = v19;
        }
        unint64_t v13 = *(void *)(v8 + 16);
        unint64_t v12 = *(void *)(v8 + 24);
        if (v13 >= v12 >> 1)
        {
          uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
          uint64_t v8 = v19;
        }
        *(void *)(v8 + 16) = v13 + 1;
        uint64_t v14 = v8 + 16 * v13;
        *(void *)(v14 + 32) = v10;
        *(void *)(v14 + 40) = v9;
        uint64_t v4 = a3;
        uint64_t v5 = v15;
      }
      else
      {
        uint64_t result = swift_bridgeObjectRelease();
      }
      ++v6;
      v7 += 2;
      if (v17 == v6) {
        goto LABEL_16;
      }
    }
    __break(1u);
  }
  else
  {
    uint64_t v8 = MEMORY[0x263F8EE78];
LABEL_16:
    swift_bridgeObjectRelease();
    return v8;
  }
  return result;
}

uint64_t HE.Scheme.proto()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for HE.Scheme();
  uint64_t v4 = *(void *)(v3 - 8);
  double v5 = MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void (**)(char *, uint64_t, uint64_t, double))(v4 + 16);
  v8(v7, v1, v3, v5);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v7, v3);
  if (result == *MEMORY[0x263F38848])
  {
    uint64_t v10 = 1;
LABEL_5:
    *(void *)a1 = v10;
    *(unsigned char *)(a1 + 8) = 1;
    return result;
  }
  if (result == *MEMORY[0x263F38850])
  {
    uint64_t v10 = 2;
    goto LABEL_5;
  }
  type metadata accessor for CipherMLError();
  _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_8((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
  swift_allocError();
  ((void (*)(uint64_t, uint64_t, uint64_t))v8)(v11, v1, v3);
  swift_storeEnumTagMultiPayload();
  swift_willThrow();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t HE.SecurityLevel.proto()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for HE.SecurityLevel();
  uint64_t v4 = *(void *)(v3 - 8);
  double v5 = MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void (**)(char *, uint64_t, uint64_t, double))(v4 + 16);
  v8(v7, v1, v3, v5);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v7, v3);
  uint64_t v10 = 0;
  if (result == *MEMORY[0x263F387F8]) {
    goto LABEL_4;
  }
  if (result == *MEMORY[0x263F387F0])
  {
    uint64_t v10 = 1;
LABEL_4:
    *(void *)a1 = v10;
    *(unsigned char *)(a1 + 8) = 1;
    return result;
  }
  type metadata accessor for CipherMLError();
  _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_8((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
  swift_allocError();
  ((void (*)(uint64_t, uint64_t, uint64_t))v8)(v11, v1, v3);
  swift_storeEnumTagMultiPayload();
  swift_willThrow();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t HE.RlweParams.protoSecurityLevel()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for HE.RlweParams();
  uint64_t v4 = *(void *)(v3 - 8);
  double v5 = MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v4 + 16))(v7, v1, v3, v5);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v7, v3);
  if (result == *MEMORY[0x263F387C0] || result == *MEMORY[0x263F387C8])
  {
    *(void *)a1 = 0;
    *(unsigned char *)(a1 + 8) = 1;
  }
  else if (result == *MEMORY[0x263F38770] {
         || result == *MEMORY[0x263F38790]
  }
         || result == *MEMORY[0x263F38780]
         || result == *MEMORY[0x263F38768]
         || result == *MEMORY[0x263F38760]
         || result == *MEMORY[0x263F38758]
         || result == *MEMORY[0x263F38750]
         || result == *MEMORY[0x263F387B0]
         || result == *MEMORY[0x263F387B8]
         || result == *MEMORY[0x263F387A8]
         || result == *MEMORY[0x263F38788]
         || result == *MEMORY[0x263F38798]
         || (uint64_t v14 = v4, result == *MEMORY[0x263F387A0])
         || result == *MEMORY[0x263F38778])
  {
    *(void *)a1 = 1;
    *(unsigned char *)(a1 + 8) = 1;
  }
  else
  {
    if (one-time initialization token for daemon != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Logger.daemon);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl(&dword_249C3F000, v10, v11, "Unknown encryption parameters", v12, 2u);
      MEMORY[0x24C5B4790](v12, -1, -1);
    }

    *(void *)a1 = 0;
    *(unsigned char *)(a1 + 8) = 1;
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v7, v3);
  }
  return result;
}

uint64_t HE.EncryptionParams.protoSecurityLevel()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for HE.RlweParams();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  double v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  HE.EncryptionParams.rlweParams.getter();
  HE.RlweParams.protoSecurityLevel()(a1);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t HE.EncryptionParams.proto()()
{
  return static Message.with(_:)();
}

uint64_t closure #1 in HE.EncryptionParams.proto()(uint64_t a1)
{
  uint64_t v32 = type metadata accessor for HE.Scheme();
  uint64_t v29 = *(void *)(v32 - 8);
  MEMORY[0x270FA5388](v32);
  uint64_t v28 = (char *)&v27 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  double v5 = (char *)&v27 - v4;
  uint64_t v6 = type metadata accessor for HE.RlweParams();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v27 - v11;
  HE.EncryptionParams.rlweParams.getter();
  uint64_t v13 = HE.RlweParams.polynomialDegree.getter();
  uint64_t v14 = *(void (**)(char *, uint64_t))(v7 + 8);
  v14(v12, v6);
  if (v13 < 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    *(void *)a1 = v13;
    HE.EncryptionParams.rlweParams.getter();
    uint64_t v15 = HE.RlweParams.plaintextModulus.getter();
    v14(v9, v6);
    *(void *)(a1 + 8) = v15;
    HE.EncryptionParams.rlweParams.getter();
    uint64_t v16 = HE.RlweParams.coefficientModuli.getter();
    v14(v9, v6);
    swift_bridgeObjectRelease();
    *(void *)(a1 + 16) = v16;
    *(void *)(a1 + 24) = 0;
    *(unsigned char *)(a1 + 32) = 1;
    HE.EncryptionParams.rlweParams.getter();
    HE.RlweParams.protoSecurityLevel()((uint64_t)&v30);
    v14(v9, v6);
    char v17 = v31;
    *(void *)(a1 + 40) = v30;
    *(unsigned char *)(a1 + 48) = v17;
    HE.EncryptionParams.scheme.getter();
    uint64_t v19 = v28;
    uint64_t v18 = v29;
    uint64_t v20 = *(void (**)(char *, char *, uint64_t))(v29 + 16);
    uint64_t v21 = v32;
    v20(v28, v5, v32);
    int v22 = (*(uint64_t (**)(char *, uint64_t))(v18 + 88))(v19, v21);
    if (v22 == *MEMORY[0x263F38848])
    {
      uint64_t v23 = 1;
LABEL_6:
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v5, v21);
      *(void *)(a1 + 56) = v23;
      *(unsigned char *)(a1 + 64) = 1;
      return result;
    }
    if (v22 == *MEMORY[0x263F38850])
    {
      uint64_t v23 = 2;
      goto LABEL_6;
    }
    type metadata accessor for CipherMLError();
    _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_8((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
    swift_allocError();
    v20(v25, v5, v21);
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    uint64_t v26 = *(void (**)(char *, uint64_t))(v18 + 8);
    v26(v19, v21);
    return ((uint64_t (*)(char *, uint64_t))v26)(v5, v21);
  }
  return result;
}

uint64_t AspireHeEncryptionParameters.cryptokit()@<X0>(uint64_t a1@<X8>)
{
  v22[1] = a1;
  uint64_t v24 = type metadata accessor for HE.RlweParams();
  uint64_t v23 = *(void *)(v24 - 8);
  uint64_t v2 = MEMORY[0x270FA5388](v24);
  uint64_t v4 = (char *)v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)v22 - v5;
  uint64_t v7 = type metadata accessor for HE.Scheme();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)v22 - v12;
  uint64_t v14 = *(void *)(v1 + 56);
  int v15 = *(unsigned __int8 *)(v1 + 64);
  if (v15 == 1 && v14)
  {
    uint64_t v16 = (unsigned int *)MEMORY[0x263F38848];
    if (v14 != 1) {
      uint64_t v16 = (unsigned int *)MEMORY[0x263F38850];
    }
    (*(void (**)(char *, void, uint64_t))(v8 + 104))((char *)v22 - v12, *v16, v7);
    uint64_t v17 = v22[2];
    AspireHeEncryptionParameters.rlweParams()((uint64_t)v6);
    uint64_t v18 = v24;
    uint64_t v19 = v23;
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v4, v6, v24);
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v13, v7);
      HE.EncryptionParams.init(rlweParams:scheme:)();
      (*(void (**)(char *, uint64_t))(v19 + 8))(v6, v18);
    }
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v13, v7);
  }
  else
  {
    type metadata accessor for CipherMLError();
    _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_8((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
    swift_allocError();
    *(void *)uint64_t v21 = v14;
    *(unsigned char *)(v21 + 8) = v15;
    swift_storeEnumTagMultiPayload();
    return swift_willThrow();
  }
}

uint64_t closure #1 in AspireHeEncryptionParameters.rlweParams()(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for HE.SecurityLevel();
  uint64_t v61 = *(void *)(v4 - 8);
  uint64_t v62 = v4;
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v63 = (char *)&v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v64 = (char *)&v60 - v7;
  uint64_t v8 = type metadata accessor for AspireHeEncryptionParameters(0);
  uint64_t v9 = MEMORY[0x270FA5388](v8 - 8);
  uint64_t v67 = (uint64_t)&v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v66 = (void (*)(char *, uint64_t))((char *)&v60 - v12);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v60 - v13;
  uint64_t v15 = type metadata accessor for HE.RlweParams();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  uint64_t v69 = (char *)&v60 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  unint64_t v65 = (char *)&v60 - v20;
  MEMORY[0x270FA5388](v19);
  int v22 = (char *)&v60 - v21;
  uint64_t v23 = HE.RlweParams.polynomialDegree.getter();
  uint64_t v24 = *a2;
  uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  uint64_t v68 = a1;
  uint64_t v70 = v15;
  uint64_t v26 = v15;
  uint64_t v27 = (uint64_t)v14;
  uint64_t v28 = v25;
  v25(v22, a1, v26);
  outlined init with copy of AspireHeSerializedCiphertext((uint64_t)a2, v27, type metadata accessor for AspireHeEncryptionParameters);
  LODWORD(v71) = 0;
  if (v23 < 0)
  {
    uint64_t v30 = v16;
    uint64_t v32 = v65;
    uint64_t v31 = (uint64_t)v66;
  }
  else
  {
    BOOL v29 = v23 == v24;
    uint64_t v30 = v16;
    uint64_t v32 = v65;
    uint64_t v31 = (uint64_t)v66;
    if (v29)
    {
      uint64_t v33 = (void *)HE.RlweParams.coefficientModuli.getter();
      LODWORD(v71) = specialized static Array<A>.== infix(_:_:)(v33, *(void **)(v27 + 16));
      swift_bridgeObjectRelease();
    }
  }
  uint64_t v34 = v27;
  uint64_t v35 = *(void (**)(char *, uint64_t))(v30 + 8);
  uint64_t v36 = v22;
  uint64_t v37 = v70;
  v35(v36, v70);
  _s8CipherML28AspireHeEncryptionParametersVWOhTm_1(v34, type metadata accessor for AspireHeEncryptionParameters);
  uint64_t v38 = v32;
  uint64_t v39 = v32;
  uint64_t v40 = v68;
  v28(v38, v68, v37);
  outlined init with copy of AspireHeSerializedCiphertext((uint64_t)a2, v31, type metadata accessor for AspireHeEncryptionParameters);
  if (v71)
  {
    uint64_t v71 = HE.RlweParams.plaintextModulus.getter();
    uint64_t v66 = v35;
    v35(v39, v37);
    unint64_t v41 = v28;
    uint64_t v42 = v37;
    uint64_t v43 = *(void *)(v31 + 8);
    _s8CipherML28AspireHeEncryptionParametersVWOhTm_1(v31, type metadata accessor for AspireHeEncryptionParameters);
    uint64_t v44 = v69;
    v41(v69, v40, v42);
    uint64_t v45 = v67;
    outlined init with copy of AspireHeSerializedCiphertext((uint64_t)a2, v67, type metadata accessor for AspireHeEncryptionParameters);
    if (v71 == v43)
    {
      unint64_t v46 = v64;
      HE.RlweParams.securityLevel.getter();
      uint64_t v47 = v61;
      uint64_t v48 = v62;
      uint64_t v49 = *(void (**)(char *, char *, uint64_t))(v61 + 16);
      uint64_t v50 = v63;
      v49(v63, v46, v62);
      int v51 = (*(uint64_t (**)(char *, uint64_t))(v47 + 88))(v50, v48);
      if (v51 == *MEMORY[0x263F387F8])
      {
        uint64_t v52 = 0;
        uint64_t v35 = v66;
      }
      else
      {
        uint64_t v35 = v66;
        if (v51 != *MEMORY[0x263F387F0])
        {
          type metadata accessor for CipherMLError();
          _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_8((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
          swift_allocError();
          v49(v58, v64, v48);
          swift_storeEnumTagMultiPayload();
          swift_willThrow();
          uint64_t v59 = *(void (**)(char *, uint64_t))(v47 + 8);
          char v53 = v47 + 8;
          v59(v63, v48);
          v59(v64, v48);
          _s8CipherML28AspireHeEncryptionParametersVWOhTm_1(v45, type metadata accessor for AspireHeEncryptionParameters);
          v66(v69, v70);
          return v53 & 1;
        }
        uint64_t v52 = 1;
      }
      int v54 = *(unsigned __int8 *)(v45 + 48);
      uint64_t v55 = *(void *)(v45 + 40);
      (*(void (**)(char *, uint64_t))(v47 + 8))(v64, v48);
      uint64_t v56 = v55 != 0;
      if (!v54) {
        uint64_t v56 = v55;
      }
      char v53 = v52 == v56;
      uint64_t v44 = v69;
      uint64_t v37 = v70;
    }
    else
    {
      char v53 = 0;
      uint64_t v37 = v70;
      uint64_t v35 = v66;
    }
  }
  else
  {
    _s8CipherML28AspireHeEncryptionParametersVWOhTm_1(v31, type metadata accessor for AspireHeEncryptionParameters);
    v35(v39, v37);
    uint64_t v44 = v69;
    v28(v69, v40, v37);
    uint64_t v45 = v67;
    outlined init with copy of AspireHeSerializedCiphertext((uint64_t)a2, v67, type metadata accessor for AspireHeEncryptionParameters);
    char v53 = 0;
  }
  _s8CipherML28AspireHeEncryptionParametersVWOhTm_1(v45, type metadata accessor for AspireHeEncryptionParameters);
  v35(v44, v37);
  return v53 & 1;
}

uint64_t HE.SerializedCiphertext.proto()()
{
  return static Message.with(_:)();
}

uint64_t closure #1 in HE.SerializedCiphertext.proto()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for HE.SerializedCiphertext();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (uint64_t *)((char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v8 + 16))(v10, a2, v7);
  int v11 = (*(uint64_t (**)(uint64_t *, uint64_t))(v8 + 88))(v10, v7);
  if (v11 == *MEMORY[0x263F38838])
  {
    uint64_t v25 = a1;
    (*(void (**)(uint64_t *, uint64_t))(v8 + 96))(v10, v7);
    uint64_t v12 = *v10;
    unint64_t v13 = v10[1];
    uint64_t v15 = v10[2];
    unint64_t v14 = v10[3];
    uint64_t v16 = type metadata accessor for AspireHeSerializedSeededCiphertext(0);
    MEMORY[0x270FA5388](v16);
    *(&v24 - 4) = v12;
    *(&v24 - 3) = v13;
    *(&v24 - 2) = v15;
    *(&v24 - 1) = v14;
    _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_8(&lazy protocol witness table cache variable for type AspireHeSerializedSeededCiphertext and conformance AspireHeSerializedSeededCiphertext, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedSeededCiphertext);
    static Message.with(_:)();
    outlined consume of Data._Representation(v12, v13);
    outlined consume of Data._Representation(v15, v14);
    uint64_t v17 = type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(0);
LABEL_5:
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v6, 0, 1, v17);
    return outlined assign with take of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, v25, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  }
  if (v11 == *MEMORY[0x263F38830])
  {
    uint64_t v25 = a1;
    (*(void (**)(uint64_t *, uint64_t))(v8 + 96))(v10, v7);
    uint64_t v18 = *v10;
    unint64_t v19 = v10[1];
    uint64_t v21 = v10[2];
    uint64_t v20 = v10[3];
    uint64_t v22 = type metadata accessor for AspireHeSerializedFullCiphertext(0);
    MEMORY[0x270FA5388](v22);
    *(&v24 - 4) = v18;
    *(&v24 - 3) = v19;
    *(&v24 - 2) = v21;
    *(&v24 - 1) = v20;
    _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_8(&lazy protocol witness table cache variable for type AspireHeSerializedFullCiphertext and conformance AspireHeSerializedFullCiphertext, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedFullCiphertext);
    static Message.with(_:)();
    outlined consume of Data._Representation(v18, v19);
    swift_bridgeObjectRelease();
    uint64_t v17 = type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(0);
    goto LABEL_5;
  }
  type metadata accessor for CipherMLError();
  _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_8((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
  swift_allocError();
  swift_storeEnumTagMultiPayload();
  swift_willThrow();
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t closure #1 in closure #1 in HE.SerializedCiphertext.proto()(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v10 = *a1;
  unint64_t v11 = a1[1];
  outlined copy of Data._Representation(a2, a3);
  outlined consume of Data._Representation(v10, v11);
  *a1 = a2;
  a1[1] = a3;
  uint64_t v12 = a1[2];
  unint64_t v13 = a1[3];
  outlined copy of Data._Representation(a4, a5);
  uint64_t result = outlined consume of Data._Representation(v12, v13);
  a1[2] = a4;
  a1[3] = a5;
  return result;
}

uint64_t closure #2 in closure #1 in HE.SerializedCiphertext.proto()(uint64_t *a1, uint64_t a2, unint64_t a3, int64_t *a4, uint64_t a5)
{
  uint64_t v10 = *a1;
  unint64_t v11 = a1[1];
  outlined copy of Data._Representation(a2, a3);
  outlined consume of Data._Representation(v10, v11);
  *a1 = a2;
  a1[1] = a3;
  int64_t v12 = a4[2];
  uint64_t v13 = MEMORY[0x263F8EE78];
  if (!v12)
  {
LABEL_7:
    uint64_t result = swift_bridgeObjectRelease();
    a1[2] = v13;
    a1[3] = a5;
    return result;
  }
  uint64_t v24 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12, 0);
  unint64_t v14 = a4[4];
  if ((v14 & 0x8000000000000000) == 0 && !HIDWORD(v14))
  {
    uint64_t v13 = v24;
    unint64_t v16 = *(void *)(v24 + 16);
    unint64_t v15 = *(void *)(v24 + 24);
    int64_t v17 = v16 + 1;
    if (v16 >= v15 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v17, 1);
      uint64_t v13 = v24;
    }
    *(void *)(v13 + 16) = v17;
    *(_DWORD *)(v13 + 4 * v16 + 32) = v14;
    int64_t v18 = v12 - 1;
    if (!v18) {
      goto LABEL_7;
    }
    unint64_t v20 = v16 + 9;
    uint64_t v21 = (unint64_t *)(a4 + 5);
    while (1)
    {
      unint64_t v22 = *v21;
      if ((*v21 & 0x8000000000000000) != 0 || HIDWORD(v22)) {
        break;
      }
      unint64_t v23 = *(void *)(v13 + 24);
      if (v20 - 8 >= v23 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v23 > 1, v20 - 7, 1);
      }
      *(void *)(v13 + 16) = v20 - 7;
      *(_DWORD *)(v13 + 4 * v20++) = v22;
      ++v21;
      if (!--v18) {
        goto LABEL_7;
      }
    }
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t AspireHeSerializedCiphertext.cryptokit()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = v1;
  uint64_t v5 = type metadata accessor for AspireHeSerializedFullCiphertext(0);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (uint64_t *)((char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = type metadata accessor for AspireHeSerializedSeededCiphertext(0);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (uint64_t *)((char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v3, (uint64_t)v13, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  uint64_t v14 = type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48))(v13, 1, v14) == 1)
  {
    type metadata accessor for CipherMLError();
    _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_8((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    return swift_willThrow();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined init with take of AspireSimilarityPlaintextPacking((uint64_t)v13, (uint64_t)v7, type metadata accessor for AspireHeSerializedFullCiphertext);
      uint64_t v16 = *v7;
      unint64_t v17 = v7[1];
      uint64_t v18 = v7[2];
      int64_t v19 = *(void *)(v18 + 16);
      if (v19)
      {
        uint64_t v35 = *v7;
        uint64_t v36 = v2;
        unint64_t v34 = v17;
        outlined copy of Data._Representation(v16, v17);
        uint64_t v37 = MEMORY[0x263F8EE78];
        swift_bridgeObjectRetain();
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19, 0);
        uint64_t v20 = 0;
        uint64_t v21 = v37;
        unint64_t v22 = *(void *)(v37 + 16);
        do
        {
          uint64_t v23 = *(unsigned int *)(v18 + 4 * v20 + 32);
          uint64_t v37 = v21;
          unint64_t v24 = *(void *)(v21 + 24);
          if (v22 >= v24 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v22 + 1, 1);
            uint64_t v21 = v37;
          }
          ++v20;
          *(void *)(v21 + 16) = v22 + 1;
          *(void *)(v21 + 8 * v22++ + 32) = v23;
        }
        while (v19 != v20);
        swift_bridgeObjectRelease();
        uint64_t v16 = v35;
        unint64_t v17 = v34;
      }
      else
      {
        outlined copy of Data._Representation(*v7, v7[1]);
        uint64_t v21 = MEMORY[0x263F8EE78];
      }
      uint64_t v30 = v7[3];
      _s8CipherML28AspireHeEncryptionParametersVWOhTm_1((uint64_t)v7, type metadata accessor for AspireHeSerializedFullCiphertext);
      *a1 = v16;
      a1[1] = v17;
      a1[2] = v21;
      a1[3] = v30;
      BOOL v29 = (unsigned int *)MEMORY[0x263F38830];
    }
    else
    {
      outlined init with take of AspireSimilarityPlaintextPacking((uint64_t)v13, (uint64_t)v10, type metadata accessor for AspireHeSerializedSeededCiphertext);
      uint64_t v25 = *v10;
      unint64_t v26 = v10[1];
      uint64_t v27 = v10[2];
      unint64_t v28 = v10[3];
      outlined copy of Data._Representation(*v10, v26);
      outlined copy of Data._Representation(v27, v28);
      _s8CipherML28AspireHeEncryptionParametersVWOhTm_1((uint64_t)v10, type metadata accessor for AspireHeSerializedSeededCiphertext);
      *a1 = v25;
      a1[1] = v26;
      a1[2] = v27;
      a1[3] = v28;
      BOOL v29 = (unsigned int *)MEMORY[0x263F38838];
    }
    uint64_t v31 = *v29;
    uint64_t v32 = type metadata accessor for HE.SerializedCiphertext();
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v32 - 8) + 104))(a1, v31, v32);
  }
}

uint64_t Array<A>.proto()()
{
  return static Message.with(_:)();
}

uint64_t closure #1 in Array<A>.proto()(void *a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for HE.SerializedCiphertext();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for AspireHeSerializedCiphertext(0);
  uint64_t v26 = *(void *)(v9 - 8);
  uint64_t v27 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v12 = *(void *)(a2 + 16);
  uint64_t v13 = MEMORY[0x263F8EE78];
  if (v12)
  {
    uint64_t v21 = a1;
    uint64_t v28 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12, 0);
    unint64_t v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16);
    uint64_t v25 = v6 + 16;
    uint64_t v14 = a2 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    uint64_t v22 = *(void *)(v6 + 72);
    uint64_t v23 = v5;
    unint64_t v15 = (void (**)(char *, uint64_t))(v6 + 8);
    while (1)
    {
      uint64_t v16 = v24(v8, v14, v5);
      MEMORY[0x270FA5388](v16);
      *(&v20 - 2) = (uint64_t)v8;
      _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_8(&lazy protocol witness table cache variable for type AspireHeSerializedCiphertext and conformance AspireHeSerializedCiphertext, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedCiphertext);
      static Message.with(_:)();
      if (v2) {
        break;
      }
      (*v15)(v8, v5);
      uint64_t v13 = v28;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v13 + 16) + 1, 1);
        uint64_t v13 = v28;
      }
      unint64_t v18 = *(void *)(v13 + 16);
      unint64_t v17 = *(void *)(v13 + 24);
      if (v18 >= v17 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
        uint64_t v13 = v28;
      }
      *(void *)(v13 + 16) = v18 + 1;
      outlined init with take of AspireSimilarityPlaintextPacking((uint64_t)v11, v13+ ((*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80))+ *(void *)(v26 + 72) * v18, type metadata accessor for AspireHeSerializedCiphertext);
      uint64_t v5 = v23;
      v14 += v22;
      if (!--v12)
      {
        a1 = v21;
        goto LABEL_11;
      }
    }
    (*v15)(v8, v5);
    return swift_release();
  }
  else
  {
LABEL_11:
    uint64_t result = swift_bridgeObjectRelease();
    *a1 = v13;
  }
  return result;
}

uint64_t AspireHeSerializedCiphertextVec.cryptokit()()
{
  uint64_t v2 = type metadata accessor for AspireHeSerializedCiphertext(0);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v5 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for HE.SerializedCiphertext();
  uint64_t v6 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v8 = (void *)((char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = *v0;
  int64_t v10 = *(void *)(*v0 + 16);
  uint64_t v11 = MEMORY[0x263F8EE78];
  if (v10)
  {
    uint64_t v19 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10, 0);
    uint64_t v12 = v9 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v17 = *(void *)(v3 + 72);
    v16[0] = v9;
    v16[1] = v6 + 32;
    while (1)
    {
      outlined init with copy of AspireHeSerializedCiphertext(v12, (uint64_t)v5, type metadata accessor for AspireHeSerializedCiphertext);
      AspireHeSerializedCiphertext.cryptokit()(v8);
      _s8CipherML28AspireHeEncryptionParametersVWOhTm_1((uint64_t)v5, type metadata accessor for AspireHeSerializedCiphertext);
      uint64_t v11 = v19;
      if (v1) {
        break;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v11 + 16) + 1, 1);
        uint64_t v11 = v19;
      }
      unint64_t v14 = *(void *)(v11 + 16);
      unint64_t v13 = *(void *)(v11 + 24);
      if (v14 >= v13 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
        uint64_t v11 = v19;
      }
      *(void *)(v11 + 16) = v14 + 1;
      (*(void (**)(unint64_t, uint64_t *, uint64_t))(v6 + 32))(v11+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(void *)(v6 + 72) * v14, v8, v18);
      uint64_t v19 = v11;
      v12 += v17;
      if (!--v10)
      {
        swift_bridgeObjectRelease();
        return v11;
      }
    }
    swift_bridgeObjectRelease();
    swift_release();
  }
  return v11;
}

uint64_t HE.SerializedGaloisKey.proto()()
{
  return static Message.with(_:)();
}

uint64_t closure #1 in HE.SerializedGaloisKey.proto()(void *a1)
{
  uint64_t v2 = v1;
  unint64_t v46 = a1;
  uint64_t v3 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
  uint64_t v42 = *(void *)(v3 - 8);
  uint64_t v43 = v3;
  uint64_t v4 = MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v39 - v7;
  uint64_t v9 = HE.SerializedGaloisKey.galoisKey.getter();
  int64_t v10 = 0;
  uint64_t v11 = *(void *)(v9 + 64);
  uint64_t v40 = v9 + 64;
  uint64_t v44 = v9;
  uint64_t v12 = 1 << *(unsigned char *)(v9 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & v11;
  int64_t v41 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      uint64_t v16 = (v14 - 1) & v14;
      unint64_t v17 = v15 | (v10 << 6);
    }
    else
    {
      BOOL v18 = __OFADD__(v10++, 1);
      if (v18) {
        goto LABEL_36;
      }
      if (v10 >= v41) {
        return swift_release();
      }
      unint64_t v19 = *(void *)(v40 + 8 * v10);
      if (!v19)
      {
        int64_t v20 = v10 + 1;
        if (v10 + 1 >= v41) {
          return swift_release();
        }
        unint64_t v19 = *(void *)(v40 + 8 * v20);
        if (!v19)
        {
          int64_t v20 = v10 + 2;
          if (v10 + 2 >= v41) {
            return swift_release();
          }
          unint64_t v19 = *(void *)(v40 + 8 * v20);
          if (!v19)
          {
            int64_t v20 = v10 + 3;
            if (v10 + 3 >= v41) {
              return swift_release();
            }
            unint64_t v19 = *(void *)(v40 + 8 * v20);
            if (!v19)
            {
              while (1)
              {
                int64_t v10 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_37;
                }
                if (v10 >= v41) {
                  return swift_release();
                }
                unint64_t v19 = *(void *)(v40 + 8 * v10);
                ++v20;
                if (v19) {
                  goto LABEL_18;
                }
              }
            }
          }
        }
        int64_t v10 = v20;
      }
LABEL_18:
      uint64_t v16 = (v19 - 1) & v19;
      unint64_t v17 = __clz(__rbit64(v19)) + (v10 << 6);
    }
    uint64_t v21 = *(unsigned int *)(*(void *)(v44 + 48) + 4 * v17);
    uint64_t v22 = *(void *)(*(void *)(v44 + 56) + 8 * v17);
    MEMORY[0x270FA5388](v9);
    *(&v39 - 2) = v22;
    _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_8(&lazy protocol witness table cache variable for type AspireHeSerializedKeySwitchKey and conformance AspireHeSerializedKeySwitchKey, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedKeySwitchKey);
    swift_bridgeObjectRetain();
    static Message.with(_:)();
    swift_bridgeObjectRelease();
    if (v2) {
      return swift_release();
    }
    unint64_t v45 = v16;
    uint64_t v23 = v6;
    outlined init with take of AspireSimilarityPlaintextPacking((uint64_t)v8, (uint64_t)v6, type metadata accessor for AspireHeSerializedKeySwitchKey);
    unint64_t v24 = v46;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v47 = (void *)*v24;
    uint64_t v26 = v47;
    void *v24 = 0x8000000000000000;
    unint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(v21);
    uint64_t v29 = v26[2];
    BOOL v30 = (v27 & 1) == 0;
    uint64_t v31 = v29 + v30;
    if (__OFADD__(v29, v30)) {
      break;
    }
    char v32 = v27;
    if (v26[3] >= v31)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        specialized _NativeDictionary.copy()();
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v31, isUniquelyReferenced_nonNull_native);
      unint64_t v33 = specialized __RawDictionaryStorage.find<A>(_:)(v21);
      if ((v32 & 1) != (v34 & 1)) {
        goto LABEL_38;
      }
      unint64_t v28 = v33;
    }
    uint64_t v6 = v23;
    uint64_t v35 = v47;
    uint64_t v2 = 0;
    if (v32)
    {
      outlined assign with take of AspireHeSerializedKeySwitchKey((uint64_t)v6, v47[7] + *(void *)(v42 + 72) * v28);
    }
    else
    {
      v47[(v28 >> 6) + 8] |= 1 << v28;
      *(void *)(v35[6] + 8 * v28) = v21;
      outlined init with take of AspireSimilarityPlaintextPacking((uint64_t)v6, v35[7] + *(void *)(v42 + 72) * v28, type metadata accessor for AspireHeSerializedKeySwitchKey);
      uint64_t v36 = v35[2];
      BOOL v18 = __OFADD__(v36, 1);
      uint64_t v37 = v36 + 1;
      if (v18) {
        goto LABEL_35;
      }
      v35[2] = v37;
    }
    void *v46 = v35;
    uint64_t v9 = swift_bridgeObjectRelease();
    unint64_t v14 = v45;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t closure #1 in closure #1 in HE.SerializedGaloisKey.proto()(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = a2;
  _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_8(&lazy protocol witness table cache variable for type AspireHeSerializedCiphertextVec and conformance AspireHeSerializedCiphertextVec, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedCiphertextVec);
  uint64_t result = static Message.with(_:)();
  if (!v2)
  {
    uint64_t v10 = a1 + *(int *)(type metadata accessor for AspireHeSerializedKeySwitchKey(0) + 20);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v10, &demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
    outlined init with take of AspireSimilarityPlaintextPacking((uint64_t)v8, v10, type metadata accessor for AspireHeSerializedCiphertextVec);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56))(v10, 0, 1, v5);
  }
  return result;
}

uint64_t HE.SerializedRelinKey.proto()()
{
  return static Message.with(_:)();
}

uint64_t closure #1 in HE.SerializedRelinKey.proto()(uint64_t a1)
{
  uint64_t v20 = a1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
  uint64_t v18 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = HE.SerializedRelinKey.relinKey.getter();
  _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_8(&lazy protocol witness table cache variable for type AspireHeSerializedCiphertextVec and conformance AspireHeSerializedCiphertextVec, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedCiphertextVec);
  static Message.with(_:)();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v1)
  {
    uint64_t v13 = v9;
    uint64_t v14 = v20 + *(int *)(type metadata accessor for AspireHeSerializedRelinKey(0) + 20);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v14, (uint64_t)v4, &demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
    uint64_t v15 = v18;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v4, 1, v5) == 1)
    {
      UnknownStorage.init()();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(&v7[*(int *)(v5 + 20)], 1, 1, v8);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v4, &demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
    }
    else
    {
      outlined init with take of AspireSimilarityPlaintextPacking((uint64_t)v4, (uint64_t)v7, type metadata accessor for AspireHeSerializedKeySwitchKey);
    }
    uint64_t v16 = (uint64_t)&v7[*(int *)(v5 + 20)];
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v16, &demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
    outlined init with take of AspireSimilarityPlaintextPacking((uint64_t)v11, v16, type metadata accessor for AspireHeSerializedCiphertextVec);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(v16, 0, 1, v8);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v14, &demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
    outlined init with take of AspireSimilarityPlaintextPacking((uint64_t)v7, v14, type metadata accessor for AspireHeSerializedKeySwitchKey);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(v14, 0, 1, v5);
  }
  return result;
}

uint64_t closure #1 in HE.SerializedEvaluationKey.proto()(uint64_t a1)
{
  uint64_t v32 = a1;
  uint64_t v34 = type metadata accessor for AspireHeSerializedRelinKey(0);
  uint64_t v30 = *(void *)(v34 - 8);
  MEMORY[0x270FA5388](v34);
  unint64_t v33 = (char *)&v30 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HE.SerializedRelinKey?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for HE.SerializedRelinKey();
  uint64_t v36 = *(void *)(v5 - 8);
  uint64_t v37 = v5;
  MEMORY[0x270FA5388](v5);
  uint64_t v35 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for AspireHeSerializedGaloisKey(0);
  uint64_t v31 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HE.SerializedGaloisKey?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for HE.SerializedGaloisKey();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  HE.SerializedEvaluationKey.galoisKey.getter();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v12, &demangling cache variable for type metadata for HE.SerializedGaloisKey?);
  }
  else
  {
    uint64_t v17 = (*(uint64_t (**)(char *, char *, uint64_t))(v14 + 32))(v16, v12, v13);
    MEMORY[0x270FA5388](v17);
    *(&v30 - 2) = (uint64_t)v16;
    _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_8(&lazy protocol witness table cache variable for type AspireHeSerializedGaloisKey and conformance AspireHeSerializedGaloisKey, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedGaloisKey);
    uint64_t v18 = v38;
    static Message.with(_:)();
    if (v18) {
      return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    }
    uint64_t v38 = 0;
    uint64_t v20 = v32 + *(int *)(type metadata accessor for AspireHeSerializedEvaluationKey(0) + 20);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v20, &demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
    outlined init with take of AspireSimilarityPlaintextPacking((uint64_t)v9, v20, type metadata accessor for AspireHeSerializedGaloisKey);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v31 + 56))(v20, 0, 1, v7);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  }
  HE.SerializedEvaluationKey.relinKey.getter();
  uint64_t v22 = v36;
  uint64_t v21 = v37;
  int v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v36 + 48))(v4, 1, v37);
  unint64_t v24 = v35;
  if (v23 == 1) {
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v4, &demangling cache variable for type metadata for HE.SerializedRelinKey?);
  }
  uint64_t v25 = (*(uint64_t (**)(char *, char *, uint64_t))(v22 + 32))(v35, v4, v21);
  MEMORY[0x270FA5388](v25);
  *(&v30 - 2) = (uint64_t)v24;
  _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_8(&lazy protocol witness table cache variable for type AspireHeSerializedRelinKey and conformance AspireHeSerializedRelinKey, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedRelinKey);
  uint64_t v27 = (uint64_t)v33;
  uint64_t v26 = v34;
  uint64_t v28 = v38;
  static Message.with(_:)();
  if (!v28)
  {
    uint64_t v29 = v32 + *(int *)(type metadata accessor for AspireHeSerializedEvaluationKey(0) + 24);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v29, &demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
    outlined init with take of AspireSimilarityPlaintextPacking(v27, v29, type metadata accessor for AspireHeSerializedRelinKey);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v30 + 56))(v29, 0, 1, v26);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v24, v21);
}

uint64_t PIR.PirParams.proto()()
{
  return static Message.with(_:)();
}

uint64_t closure #1 in PIR.PirParams.proto()(uint64_t a1, uint64_t a2)
{
  uint64_t v55 = a1;
  uint64_t v4 = type metadata accessor for PIR.PirAlgorithm();
  uint64_t v53 = *(void *)(v4 - 8);
  uint64_t v54 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v48 - v8;
  uint64_t v10 = type metadata accessor for HE.EncryptionParams();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for AspireHeEncryptionParameters(0);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = a2;
  PIR.PirParams.encryptionParams.getter();
  uint64_t v56 = v13;
  _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_8((unint64_t *)&lazy protocol witness table cache variable for type AspireHeEncryptionParameters and conformance AspireHeEncryptionParameters, (void (*)(uint64_t))type metadata accessor for AspireHeEncryptionParameters);
  static Message.with(_:)();
  if (v2) {
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  uint64_t v50 = v6;
  int v51 = v9;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  uint64_t v18 = v55;
  AspirePirPirParameters.encryptionParameters.setter((uint64_t)v16);
  uint64_t v19 = PIR.PirParams.entriesCount.getter();
  if (v19 < 0) {
    goto LABEL_34;
  }
  uint64_t v20 = v19;
  uint64_t v21 = *(int *)(type metadata accessor for AspirePirPirParameters(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirParameters._StorageClass(0);
    swift_allocObject();
    uint64_t v22 = swift_retain();
    *(void *)(v18 + v21) = AspirePirPirParameters._StorageClass.init(copying:)(v22);
    swift_release();
  }
  int v23 = (uint64_t *)(*(void *)(v18 + v21)
                  + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__numEntries);
  swift_beginAccess();
  *int v23 = v20;
  uint64_t v24 = PIR.PirParams.entrySize.getter();
  if (v24 < 0) {
    goto LABEL_34;
  }
  uint64_t v25 = v24;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirParameters._StorageClass(0);
    swift_allocObject();
    uint64_t v26 = swift_retain();
    *(void *)(v18 + v21) = AspirePirPirParameters._StorageClass.init(copying:)(v26);
    swift_release();
  }
  uint64_t v52 = 0;
  uint64_t v27 = (uint64_t *)(*(void *)(v18 + v21)
                  + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__entrySize);
  swift_beginAccess();
  *uint64_t v27 = v25;
  uint64_t v28 = PIR.PirParams.dimensions.getter();
  int64_t v29 = *(void *)(v28 + 16);
  if (!v29)
  {
    swift_bridgeObjectRelease();
    uint64_t v32 = MEMORY[0x263F8EE78];
    goto LABEL_15;
  }
  uint64_t v57 = MEMORY[0x263F8EE78];
  uint64_t v49 = v28;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29, 0);
  uint64_t v30 = v49;
  int64_t v31 = *(void *)(v49 + 32);
  if (v31 < 0)
  {
LABEL_34:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_35;
  }
  uint64_t v32 = v57;
  int64_t v34 = *(void *)(v57 + 16);
  unint64_t v33 = *(void *)(v57 + 24);
  int64_t v35 = v34 + 1;
  if (v34 >= v33 >> 1) {
    goto LABEL_33;
  }
  while (1)
  {
    *(void *)(v32 + 16) = v35;
    unint64_t v33 = v32 + 8 * v34;
    *(void *)(v33 + 32) = v31;
    int64_t v31 = v29 - 1;
    if (v29 == 1) {
      break;
    }
    int64_t v29 = v34 + 5;
    int64_t v34 = v30 + 40;
    while (v31)
    {
      uint64_t v45 = *(void *)v34;
      if ((*(void *)v34 & 0x8000000000000000) != 0) {
        goto LABEL_34;
      }
      uint64_t v57 = v32;
      unint64_t v33 = *(void *)(v32 + 24);
      int64_t v35 = v29 - 3;
      if (v29 - 4 >= v33 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, v29 - 3, 1);
        unint64_t v33 = (unint64_t)&v59;
        uint64_t v32 = v57;
      }
      *(void *)(v32 + 16) = v35;
      *(void *)(v32 + 8 * v29++) = v45;
      v34 += 8;
      if (!--v31) {
        goto LABEL_13;
      }
    }
    __break(1u);
LABEL_33:
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, v35, 1);
    uint64_t v30 = v49;
    uint64_t v32 = v57;
  }
LABEL_13:
  swift_bridgeObjectRelease();
LABEL_15:
  uint64_t v36 = v54;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v39 = v50;
  uint64_t v38 = v51;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    type metadata accessor for AspirePirPirParameters._StorageClass(0);
    swift_allocObject();
    uint64_t v40 = swift_retain();
    *(void *)(v18 + v21) = AspirePirPirParameters._StorageClass.init(copying:)(v40);
    swift_release();
  }
  int64_t v41 = (void *)(*(void *)(v18 + v21)
                 + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__dimensions);
  swift_beginAccess();
  *int64_t v41 = v32;
  swift_bridgeObjectRelease();
  PIR.PirParams.algorithm.getter();
  uint64_t v42 = v53;
  (*(void (**)(char *, char *, uint64_t))(v53 + 16))(v39, v38, v36);
  int v43 = (*(uint64_t (**)(char *, uint64_t))(v42 + 88))(v39, v36);
  uint64_t v44 = 0;
  if (v43 == *MEMORY[0x263F388B8]) {
    goto LABEL_29;
  }
  if (v43 != *MEMORY[0x263F388B0])
  {
    if (v43 == *MEMORY[0x263F388A8])
    {
      uint64_t v44 = 2;
      goto LABEL_29;
    }
LABEL_35:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  uint64_t v44 = 1;
LABEL_29:
  (*(void (**)(char *, uint64_t))(v42 + 8))(v38, v36);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirParameters._StorageClass(0);
    swift_allocObject();
    uint64_t v46 = swift_retain();
    *(void *)(v18 + v21) = AspirePirPirParameters._StorageClass.init(copying:)(v46);
    swift_release();
  }
  uint64_t v47 = *(void *)(v18 + v21)
      + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__algorithm;
  uint64_t result = swift_beginAccess();
  *(void *)uint64_t v47 = v44;
  *(unsigned char *)(v47 + 8) = 1;
  return result;
}

uint64_t PIR.PirAlgorithm.proto()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for PIR.PirAlgorithm();
  uint64_t v4 = *(void *)(v3 - 8);
  double v5 = MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v4 + 16))(v7, v1, v3, v5);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v7, v3);
  uint64_t v9 = 0;
  if (result == *MEMORY[0x263F388B8]) {
    goto LABEL_6;
  }
  if (result == *MEMORY[0x263F388B0])
  {
    uint64_t v9 = 1;
LABEL_6:
    *(void *)a1 = v9;
    *(unsigned char *)(a1 + 8) = 1;
    return result;
  }
  if (result == *MEMORY[0x263F388A8])
  {
    uint64_t v9 = 2;
    goto LABEL_6;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t AspirePirPirAlgorithm.cryptokit()@<X0>(uint64_t a1@<X8>)
{
  if (*(unsigned char *)(v1 + 8) == 1)
  {
    if (*(void *)v1)
    {
      if (*(void *)v1 == 1) {
        uint64_t v3 = (unsigned int *)MEMORY[0x263F388B0];
      }
      else {
        uint64_t v3 = (unsigned int *)MEMORY[0x263F388A8];
      }
    }
    else
    {
      uint64_t v3 = (unsigned int *)MEMORY[0x263F388B8];
    }
    uint64_t v4 = *v3;
    uint64_t v5 = type metadata accessor for PIR.PirAlgorithm();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 104);
    return v6(a1, v4, v5);
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t AspireSimilarityPlaintextPacking.cryptokit()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)v19 - v12;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
    type metadata accessor for CipherMLError();
    _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_8((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    return swift_willThrow();
  }
  else
  {
    outlined init with take of AspireSimilarityPlaintextPacking((uint64_t)v6, (uint64_t)v13, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
    outlined init with take of AspireSimilarityPlaintextPacking((uint64_t)v13, (uint64_t)v11, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload)
    {
      if (EnumCaseMultiPayload == 1) {
        uint64_t v16 = (unsigned int *)MEMORY[0x263F38890];
      }
      else {
        uint64_t v16 = (unsigned int *)MEMORY[0x263F38880];
      }
    }
    else
    {
      uint64_t v16 = (unsigned int *)MEMORY[0x263F38888];
    }
    uint64_t v17 = *v16;
    uint64_t v18 = type metadata accessor for PEC.PlaintextPacking();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 104))(a1, v17, v18);
    return _s8CipherML28AspireHeEncryptionParametersVWOhTm_1((uint64_t)v11, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
  }
}

uint64_t PEC.PlaintextPacking.proto()()
{
  uint64_t v1 = type metadata accessor for PEC.PlaintextPacking();
  uint64_t v2 = *(void *)(v1 - 8);
  double v3 = MEMORY[0x270FA5388](v1);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v2 + 16))(v5, v0, v1, v3);
  int v6 = (*(uint64_t (**)(char *, uint64_t))(v2 + 88))(v5, v1);
  if (v6 == *MEMORY[0x263F38880] || v6 == *MEMORY[0x263F38888] || v6 == *MEMORY[0x263F38890])
  {
    type metadata accessor for AspireSimilarityPlaintextPacking(0);
    _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_8(&lazy protocol witness table cache variable for type AspireSimilarityPlaintextPacking and conformance AspireSimilarityPlaintextPacking, (void (*)(uint64_t))type metadata accessor for AspireSimilarityPlaintextPacking);
    return static Message.with(_:)();
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in PEC.PlaintextPacking.proto()(uint64_t a1)
{
  return closure #1 in PEC.PlaintextPacking.proto()(a1);
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  UnknownStorage.init()();
  uint64_t v5 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 0, 1, v5);
  return outlined assign with take of AMDPbHEConfig.OneOf_Config?((uint64_t)v4, a1, &demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
}

uint64_t closure #2 in PEC.PlaintextPacking.proto()(uint64_t a1)
{
  return closure #1 in PEC.PlaintextPacking.proto()(a1);
}

uint64_t closure #3 in PEC.PlaintextPacking.proto()(uint64_t a1)
{
  return closure #1 in PEC.PlaintextPacking.proto()(a1);
}

uint64_t AspireSimilaritySimilarityMetric.cryptokit()@<X0>(uint64_t a1@<X8>)
{
  if (*(unsigned char *)(v1 + 8) == 1)
  {
    uint64_t v3 = *MEMORY[0x263F38898];
    uint64_t v4 = type metadata accessor for PEC.SimilarityMetric();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 104))(a1, v3, v4);
  }
  else
  {
    type metadata accessor for CipherMLError();
    _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_8((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    return swift_willThrow();
  }
}

uint64_t closure #1 in PEC.SerializedCiphertextCoeffMatrix.proto()(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for HE.SerializedCiphertext();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v55 = v5;
  uint64_t v56 = v6;
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for AspireHeSerializedCiphertext(0);
  uint64_t v53 = *(void *)(v9 - 8);
  uint64_t v54 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PEC.PlaintextPacking();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v46 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v48 = (char *)&v41 - v16;
  uint64_t v17 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v47 = (char *)&v41 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = a2;
  unint64_t v20 = PEC.SerializedCiphertextCoeffMatrix.rowCount.getter();
  if ((v20 & 0x8000000000000000) != 0
    || HIDWORD(v20)
    || (*(_DWORD *)a1 = v20,
        unint64_t v21 = PEC.SerializedCiphertextCoeffMatrix.colCount.getter(),
        (v21 & 0x8000000000000000) != 0)
    || (uint64_t v49 = v13, HIDWORD(v21)))
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_21:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  *(_DWORD *)(a1 + 4) = v21;
  uint64_t v22 = PEC.SerializedCiphertextCoeffMatrix.ciphertexts.getter();
  int64_t v23 = *(void *)(v22 + 16);
  if (!v23)
  {
    swift_bridgeObjectRelease();
    uint64_t v31 = MEMORY[0x263F8EE78];
LABEL_16:
    swift_bridgeObjectRelease();
    *(void *)(a1 + 8) = v31;
    int64_t v35 = v48;
    PEC.SerializedCiphertextCoeffMatrix.packing.getter();
    uint64_t v36 = v49;
    uint64_t v37 = v46;
    (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v46, v35, v12);
    int v38 = (*(uint64_t (**)(char *, uint64_t))(v36 + 88))(v37, v12);
    if (v38 == *MEMORY[0x263F38880] || v38 == *MEMORY[0x263F38888] || v38 == *MEMORY[0x263F38890])
    {
      _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_8(&lazy protocol witness table cache variable for type AspireSimilarityPlaintextPacking and conformance AspireSimilarityPlaintextPacking, (void (*)(uint64_t))type metadata accessor for AspireSimilarityPlaintextPacking);
      uint64_t v39 = (uint64_t)v47;
      static Message.with(_:)();
      (*(void (**)(char *, uint64_t))(v36 + 8))(v35, v12);
      uint64_t v40 = a1 + *(int *)(type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0) + 32);
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v40, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
      outlined init with take of AspireSimilarityPlaintextPacking(v39, v40, type metadata accessor for AspireSimilarityPlaintextPacking);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v18 + 56))(v40, 0, 1, v17);
    }
    goto LABEL_21;
  }
  uint64_t v41 = v12;
  uint64_t v42 = v18;
  uint64_t v43 = v17;
  uint64_t v44 = a1;
  uint64_t v57 = MEMORY[0x263F8EE78];
  uint64_t v24 = v22;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v23, 0);
  uint64_t v25 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v56 + 16);
  uint64_t v26 = *(unsigned __int8 *)(v56 + 80);
  uint64_t v45 = v24;
  uint64_t v27 = v24 + ((v26 + 32) & ~v26);
  uint64_t v51 = *(void *)(v56 + 72);
  uint64_t v52 = v25;
  v56 += 16;
  uint64_t v28 = (void (**)(char *, uint64_t))(v56 - 8);
  while (1)
  {
    uint64_t v29 = v55;
    uint64_t v30 = v52(v8, v27, v55);
    MEMORY[0x270FA5388](v30);
    _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_8(&lazy protocol witness table cache variable for type AspireHeSerializedCiphertext and conformance AspireHeSerializedCiphertext, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedCiphertext);
    static Message.with(_:)();
    if (v2) {
      break;
    }
    (*v28)(v8, v29);
    uint64_t v31 = v57;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v31 + 16) + 1, 1);
      uint64_t v31 = v57;
    }
    unint64_t v33 = *(void *)(v31 + 16);
    unint64_t v32 = *(void *)(v31 + 24);
    if (v33 >= v32 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v32 > 1, v33 + 1, 1);
      uint64_t v31 = v57;
    }
    *(void *)(v31 + 16) = v33 + 1;
    outlined init with take of AspireSimilarityPlaintextPacking((uint64_t)v11, v31+ ((*(unsigned __int8 *)(v53 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80))+ *(void *)(v53 + 72) * v33, type metadata accessor for AspireHeSerializedCiphertext);
    v27 += v51;
    if (!--v23)
    {
      swift_bridgeObjectRelease();
      uint64_t v17 = v43;
      a1 = v44;
      uint64_t v12 = v41;
      uint64_t v18 = v42;
      goto LABEL_16;
    }
  }
  (*v28)(v8, v29);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3)
{
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<HE.RlweParams>, MEMORY[0x263F387D0]);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<AspireSimilaritySerializedCiphertextMatrix>, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
  *uint64_t v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<[CMLSimilarityScore]>, &demangling cache variable for type metadata for [CMLSimilarityScore]);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<PEC.SerializedCiphertextCoeffMatrix>, MEMORY[0x263F388A0]);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<HE.SerializedCiphertext>, MEMORY[0x263F38840]);
  *uint64_t v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<[UInt8]>, &demangling cache variable for type metadata for [UInt8]);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<AspireApiRequest>, type metadata accessor for AspireApiRequest);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<AspireHeSerializedCiphertext>, type metadata accessor for AspireHeSerializedCiphertext);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<[HE.SerializedCiphertext]>, &demangling cache variable for type metadata for [HE.SerializedCiphertext]);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<AMDPbHEQuery>, type metadata accessor for AMDPbHEQuery);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<AspireApiOPRFResponse>, type metadata accessor for AspireApiOPRFResponse);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<PIR.BlindedKeyword>, MEMORY[0x263F388C0]);
  *uint64_t v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<AspireApiPECShardResponse>, type metadata accessor for AspireApiPECShardResponse);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<TokenCache.CachedToken>, type metadata accessor for TokenCache.CachedToken);
  *uint64_t v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<UInt64>);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<AspireApiResponse>, type metadata accessor for AspireApiResponse);
  *uint64_t v3 = result;
  return result;
}

uint64_t partial apply for closure #1 in AspireHeEncryptionParameters.rlweParams()(uint64_t a1)
{
  return closure #1 in AspireHeEncryptionParameters.rlweParams()(a1, *(uint64_t **)(v1 + 16)) & 1;
}

uint64_t partial apply for closure #1 in HE.EncryptionParams.proto()(uint64_t a1)
{
  return closure #1 in HE.EncryptionParams.proto()(a1);
}

uint64_t partial apply for closure #1 in HE.SerializedCiphertext.proto()(uint64_t a1)
{
  return closure #1 in HE.SerializedCiphertext.proto()(a1, *(void *)(v1 + 16));
}

uint64_t partial apply for closure #1 in Array<A>.proto()(void *a1)
{
  return closure #1 in Array<A>.proto()(a1, *(void *)(v1 + 16));
}

uint64_t partial apply for closure #1 in HE.SerializedGaloisKey.proto()(void *a1)
{
  return closure #1 in HE.SerializedGaloisKey.proto()(a1);
}

uint64_t partial apply for closure #1 in HE.SerializedRelinKey.proto()(uint64_t a1)
{
  return closure #1 in HE.SerializedRelinKey.proto()(a1);
}

uint64_t partial apply for closure #1 in PIR.PirParams.proto()(uint64_t a1)
{
  return closure #1 in PIR.PirParams.proto()(a1, *(void *)(v1 + 16));
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt32>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 29;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 2);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[4 * v8]) {
      memmove(v13, v14, 4 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[4 * v8] || v13 >= &v14[4 * v8])
  {
    memcpy(v13, v14, 4 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Data>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SymmetricPirKeyword>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Data?>);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    void v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 16 * v8) {
      memmove(v10 + 4, a4 + 4, 16 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 16 * v8 || v13 >= v14 + 16 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (v12)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    unint64_t v13 = (void *)swift_allocObject();
    int64_t v14 = _swift_stdlib_malloc_size(v13);
    uint64_t v15 = v14 - 32;
    if (v14 < 32) {
      uint64_t v15 = v14 - 25;
    }
    void v13[2] = v11;
    v13[3] = 2 * (v15 >> 3);
  }
  else
  {
    unint64_t v13 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v16 = (unint64_t)(v13 + 4);
  unint64_t v17 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v13 != a4 || v16 >= v17 + 8 * v11) {
      memmove(v13 + 4, a4 + 4, 8 * v11);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v17 >= v16 + 8 * v11 || v16 >= v17 + 8 * v11)
  {
    __swift_instantiateConcreteTypeFromMangledName(a6);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  if (a3)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v8 = a2;
      }
    }
  }
  else
  {
    int64_t v8 = a2;
  }
  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    uint64_t v11 = (char *)swift_allocObject();
    int64_t v12 = _swift_stdlib_malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 25;
    }
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    uint64_t v11 = (char *)MEMORY[0x263F8EE78];
  }
  int64_t v14 = v11 + 32;
  uint64_t v15 = a4 + 32;
  if (a1)
  {
    if (v11 != a4 || v14 >= &v15[8 * v9]) {
      memmove(v14, v15, 8 * v9);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[8 * v9] || v14 >= &v15[8 * v9])
  {
    memcpy(v14, v15, 8 * v9);
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t (*a6)(void))
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    unint64_t v16 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v13 = *(void *)(a6(0) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  unint64_t v16 = (void *)swift_allocObject();
  size_t v17 = _swift_stdlib_malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_34;
  }
  void v16[2] = v11;
  void v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  uint64_t v19 = *(void *)(a6(0) - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  unint64_t v21 = (char *)v16 + v20;
  uint64_t v22 = (char *)a4 + v20;
  if (a1)
  {
    if (v16 < a4 || v21 >= &v22[*(void *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v23 = *(void *)(v19 + 72) * v11;
  uint64_t v24 = &v21[v23];
  unint64_t v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in HE.SerializedGaloisKey.proto()(uint64_t a1)
{
  return closure #1 in closure #1 in HE.SerializedGaloisKey.proto()(a1, *(void *)(v1 + 16));
}

uint64_t outlined assign with take of AspireHeSerializedKeySwitchKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of AspireHeSerializedCiphertext(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t _s8CipherML28AspireHeEncryptionParametersVWOhTm_1(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with take of AspireSimilarityPlaintextPacking(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t partial apply for closure #2 in closure #1 in HE.SerializedCiphertext.proto()(uint64_t *a1)
{
  return closure #2 in closure #1 in HE.SerializedCiphertext.proto()(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(int64_t **)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t partial apply for closure #1 in closure #1 in HE.SerializedCiphertext.proto()(uint64_t *a1)
{
  return closure #1 in closure #1 in HE.SerializedCiphertext.proto()(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t closure #1 in HE.EncryptionParams.proto()partial apply(uint64_t a1)
{
  return partial apply for closure #1 in HE.EncryptionParams.proto()(a1);
}

uint64_t closure #1 in Array<A>.proto()partial apply(void *a1)
{
  return partial apply for closure #1 in Array<A>.proto()(a1);
}

uint64_t closure #1 in HE.SerializedCiphertext.proto()partial apply(uint64_t a1)
{
  return partial apply for closure #1 in HE.SerializedCiphertext.proto()(a1);
}

uint64_t closure #1 in HE.SerializedRelinKey.proto()partial apply(uint64_t a1)
{
  return partial apply for closure #1 in HE.SerializedRelinKey.proto()(a1);
}

uint64_t closure #1 in HE.SerializedGaloisKey.proto()partial apply(void *a1)
{
  return partial apply for closure #1 in HE.SerializedGaloisKey.proto()(a1);
}

uint64_t IndexPIRClient.secretKey.getter@<X0>(uint64_t a1@<X8>)
{
  return _s8CipherML9SecretKeyVWOcTm_0(v1, a1, (uint64_t (*)(void))type metadata accessor for SecretKey);
}

uint64_t IndexPIRClient.config.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for IndexPIRClient();
  return _s8CipherML9SecretKeyVWOcTm_0(v1 + *(int *)(v3 + 20), a1, type metadata accessor for AspireApiPIRConfig);
}

uint64_t type metadata accessor for IndexPIRClient()
{
  uint64_t result = type metadata singleton initialization cache for IndexPIRClient;
  if (!type metadata singleton initialization cache for IndexPIRClient) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t IndexPIRClient.configID.getter()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for IndexPIRClient() + 24);
  uint64_t v2 = *(void *)v1;
  outlined copy of Data._Representation(*(void *)v1, *(void *)(v1 + 8));
  return v2;
}

uint64_t IndexPIRClient.shardIndex.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for IndexPIRClient() + 28));
}

uint64_t IndexPIRClient.client.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for IndexPIRClient() + 32);
  uint64_t v4 = type metadata accessor for PIR.IndexPirClient();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t IndexPIRClient.init(secretKey:config:configID:shardIndex:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unint64_t v88 = a4;
  uint64_t v89 = a3;
  uint64_t v90 = a1;
  uint64_t v75 = a6;
  uint64_t v8 = type metadata accessor for HE.SerializedSecretKey();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v79 = v8;
  uint64_t v80 = v9;
  MEMORY[0x270FA5388](v8);
  uint64_t v77 = (char *)&v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = type metadata accessor for PIR.IndexPirClient();
  uint64_t v73 = *(void *)(v74 - 8);
  MEMORY[0x270FA5388](v74);
  uint64_t v78 = (char *)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PIR.PirAlgorithm();
  uint64_t v86 = *(void *)(v12 - 8);
  uint64_t v87 = v12;
  MEMORY[0x270FA5388](v12);
  uint64_t v81 = (char *)&v65 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v84 = (uint64_t)&v65 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for AspireHeEncryptionParameters(0);
  uint64_t v82 = *(void *)(v16 - 8);
  uint64_t v83 = v16;
  MEMORY[0x270FA5388](v16);
  char v85 = (uint64_t *)((char *)&v65 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v18 = type metadata accessor for HE.EncryptionParams();
  MEMORY[0x270FA5388](v18 - 8);
  unint64_t v20 = (char *)&v65 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for PIR.PirParams();
  uint64_t v76 = *(void *)(v21 - 8);
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = (char *)&v65 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v24);
  uint64_t v26 = (char *)&v65 - v25;
  uint64_t v27 = type metadata accessor for AspireApiPIRShardConfig(0);
  MEMORY[0x270FA5388](v27);
  uint64_t v29 = (uint64_t *)((char *)&v65 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v30 = v92;
  AspireApiPIRConfig.shardConfig(at:)(a5, 0, 1, v29);
  uint64_t v92 = v30;
  if (v30)
  {
    outlined consume of Data._Representation(v89, v88);
    outlined destroy of AspireApiPIRConfig(a2, type metadata accessor for AspireApiPIRConfig);
    return outlined destroy of AspireApiPIRConfig(v90, (uint64_t (*)(void))type metadata accessor for SecretKey);
  }
  uint64_t v68 = v27;
  uint64_t v71 = v20;
  uint64_t v66 = v23;
  uint64_t v69 = v26;
  uint64_t v67 = v21;
  uint64_t v72 = v29;
  uint64_t v65 = a5;
  uint64_t v32 = *(int *)(type metadata accessor for AspireApiPIRConfig(0) + 20);
  uint64_t v70 = a2;
  uint64_t v33 = *(void *)(a2 + v32)
      + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__encryptionParameters;
  swift_beginAccess();
  uint64_t v34 = v84;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v33, v84, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v82 + 48))(v34, 1, v83) == 1)
  {
    int64_t v35 = v85;
    void *v85 = 0;
    v35[1] = 0;
    v35[2] = MEMORY[0x263F8EE78];
    v35[3] = 0;
    *((unsigned char *)v35 + 32) = 1;
    v35[5] = 0;
    *((unsigned char *)v35 + 48) = 1;
    v35[7] = 0;
    *((unsigned char *)v35 + 64) = 1;
    UnknownStorage.init()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v34, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  }
  else
  {
    int64_t v35 = v85;
    _s8CipherML9SecretKeyVWObTm_1(v34, (uint64_t)v85, type metadata accessor for AspireHeEncryptionParameters);
  }
  uint64_t v37 = v86;
  uint64_t v36 = v87;
  uint64_t v38 = v92;
  AspireHeEncryptionParameters.cryptokit()((uint64_t)v71);
  if (v38)
  {
    outlined consume of Data._Representation(v89, v88);
    outlined destroy of AspireApiPIRConfig(v70, type metadata accessor for AspireApiPIRConfig);
    outlined destroy of AspireApiPIRConfig(v90, (uint64_t (*)(void))type metadata accessor for SecretKey);
    outlined destroy of AspireApiPIRConfig((uint64_t)v35, type metadata accessor for AspireHeEncryptionParameters);
    return outlined destroy of AspireApiPIRConfig((uint64_t)v72, type metadata accessor for AspireApiPIRShardConfig);
  }
  outlined destroy of AspireApiPIRConfig((uint64_t)v35, type metadata accessor for AspireHeEncryptionParameters);
  uint64_t v39 = *(void *)(v70 + v32);
  uint64_t v40 = v39
      + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__algorithm;
  swift_beginAccess();
  if (*(unsigned char *)(v40 + 8) != 1) {
    goto LABEL_29;
  }
  (*(void (**)(char *, void, uint64_t))(v37 + 104))(v81, **((unsigned int **)&unk_26527EA90 + *(void *)v40), v36);
  if ((*v72 & 0x8000000000000000) != 0) {
    goto LABEL_25;
  }
  uint64_t v92 = 0;
  uint64_t v41 = v90;
  if ((v72[1] & 0x8000000000000000) != 0)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  uint64_t v87 = v72[1];
  uint64_t v42 = v72[2];
  int64_t v43 = *(void *)(v42 + 16);
  if (v43)
  {
    uint64_t v91 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v43, 0);
    uint64_t v44 = 0;
    uint64_t v45 = v91;
    while (1)
    {
      uint64_t v46 = *(void *)(v42 + 8 * v44 + 32);
      if (v46 < 0) {
        break;
      }
      uint64_t v91 = v45;
      unint64_t v48 = *(void *)(v45 + 16);
      unint64_t v47 = *(void *)(v45 + 24);
      if (v48 >= v47 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v47 > 1, v48 + 1, 1);
        uint64_t v45 = v91;
      }
      ++v44;
      *(void *)(v45 + 16) = v48 + 1;
      *(void *)(v45 + 8 * v48 + 32) = v46;
      if (v43 == v44)
      {
        swift_bridgeObjectRelease();
        uint64_t v41 = v90;
        goto LABEL_18;
      }
    }
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
LABEL_18:
  uint64_t v49 = (void *)(v39
                 + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__batchSize);
  swift_beginAccess();
  uint64_t v50 = v79;
  uint64_t v51 = v80;
  if ((*v49 & 0x8000000000000000) != 0)
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  uint64_t v52 = v72;
  uint64_t v53 = (char *)v72 + *(int *)(v68 + 40);
  uint64_t v54 = v89;
  uint64_t v55 = v69;
  if ((v53[8] & 1) == 0 && (*(void *)v53 & 0x8000000000000000) != 0) {
    goto LABEL_28;
  }
  uint64_t v56 = v92;
  PIR.PirParams.init(encryptionParams:algorithm:entriesCount:entrySize:dimensions:batchSize:internalBatchSize:compressResponse:)();
  if (v56)
  {
    outlined consume of Data._Representation(v54, v88);
    outlined destroy of AspireApiPIRConfig(v70, type metadata accessor for AspireApiPIRConfig);
    outlined destroy of AspireApiPIRConfig(v41, (uint64_t (*)(void))type metadata accessor for SecretKey);
    return outlined destroy of AspireApiPIRConfig((uint64_t)v52, type metadata accessor for AspireApiPIRShardConfig);
  }
  else
  {
    uint64_t v57 = v76;
    (*(void (**)(char *, char *, uint64_t))(v76 + 16))(v66, v55, v67);
    uint64_t v58 = type metadata accessor for SecretKey();
    (*(void (**)(char *, uint64_t, uint64_t))(v51 + 16))(v77, v41 + *(int *)(v58 + 20), v50);
    uint64_t v59 = v78;
    PIR.IndexPirClient.init(pirParams:secretKey:)();
    unint64_t v60 = v88;
    (*(void (**)(char *, uint64_t))(v57 + 8))(v55, v67);
    outlined destroy of AspireApiPIRConfig((uint64_t)v72, type metadata accessor for AspireApiPIRShardConfig);
    uint64_t v61 = v75;
    _s8CipherML9SecretKeyVWObTm_1(v41, v75, (uint64_t (*)(void))type metadata accessor for SecretKey);
    uint64_t v62 = v54;
    uint64_t v63 = (int *)type metadata accessor for IndexPIRClient();
    _s8CipherML9SecretKeyVWObTm_1(v70, v61 + v63[5], type metadata accessor for AspireApiPIRConfig);
    uint64_t v64 = (uint64_t *)(v61 + v63[6]);
    *uint64_t v64 = v62;
    v64[1] = v60;
    *(void *)(v61 + v63[7]) = v65;
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v73 + 32))(v61 + v63[8], v59, v74);
  }
}

uint64_t IndexPIRClient.constructPIRRequest(with:)(uint64_t a1)
{
  uint64_t v4 = type metadata accessor for AspirePirEncryptedIndices(0);
  MEMORY[0x270FA5388](v4);
  unint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for IndexPIRClient();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  uint64_t result = swift_allocObject();
  *(_OWORD *)(result + 16) = xmmword_249E85E40;
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    *(void *)(result + 32) = a1;
    uint64_t v8 = PIR.IndexPirClient.query(indices:)();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v2)
    {
      MEMORY[0x270FA5388](result);
      *(&v10 - 2) = v8;
      lazy protocol witness table accessor for type AspirePirEncryptedIndices and conformance AspirePirEncryptedIndices(&lazy protocol witness table cache variable for type AspirePirEncryptedIndices and conformance AspirePirEncryptedIndices, (void (*)(uint64_t))type metadata accessor for AspirePirEncryptedIndices);
      static Message.with(_:)();
      swift_bridgeObjectRelease();
      uint64_t v9 = type metadata accessor for AspireApiPIRRequest(0);
      MEMORY[0x270FA5388](v9);
      *(&v10 - 2) = v1;
      *(&v10 - 1) = (uint64_t)v6;
      lazy protocol witness table accessor for type AspirePirEncryptedIndices and conformance AspirePirEncryptedIndices(&lazy protocol witness table cache variable for type AspireApiPIRRequest and conformance AspireApiPIRRequest, (void (*)(uint64_t))type metadata accessor for AspireApiPIRRequest);
      static Message.with(_:)();
      return outlined destroy of AspireApiPIRConfig((uint64_t)v6, type metadata accessor for AspirePirEncryptedIndices);
    }
  }
  return result;
}

uint64_t closure #1 in IndexPIRClient.constructPIRRequest(with:)(void *a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for HE.SerializedCiphertext();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for AspireHeSerializedCiphertext(0);
  uint64_t v26 = *(void *)(v9 - 8);
  uint64_t v27 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v12 = *(void *)(a2 + 16);
  uint64_t v13 = MEMORY[0x263F8EE78];
  if (v12)
  {
    uint64_t v21 = a1;
    uint64_t v28 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12, 0);
    uint64_t v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16);
    uint64_t v25 = v6 + 16;
    uint64_t v14 = a2 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    uint64_t v22 = *(void *)(v6 + 72);
    uint64_t v23 = v5;
    uint64_t v15 = (void (**)(char *, uint64_t))(v6 + 8);
    while (1)
    {
      uint64_t v16 = v24(v8, v14, v5);
      MEMORY[0x270FA5388](v16);
      *(&v20 - 2) = (uint64_t)v8;
      lazy protocol witness table accessor for type AspirePirEncryptedIndices and conformance AspirePirEncryptedIndices(&lazy protocol witness table cache variable for type AspireHeSerializedCiphertext and conformance AspireHeSerializedCiphertext, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedCiphertext);
      static Message.with(_:)();
      if (v2) {
        break;
      }
      (*v15)(v8, v5);
      uint64_t v13 = v28;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v13 + 16) + 1, 1);
        uint64_t v13 = v28;
      }
      unint64_t v18 = *(void *)(v13 + 16);
      unint64_t v17 = *(void *)(v13 + 24);
      if (v18 >= v17 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
        uint64_t v13 = v28;
      }
      *(void *)(v13 + 16) = v18 + 1;
      _s8CipherML9SecretKeyVWObTm_1((uint64_t)v11, v13+ ((*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80))+ *(void *)(v26 + 72) * v18, type metadata accessor for AspireHeSerializedCiphertext);
      uint64_t v5 = v23;
      v14 += v22;
      if (!--v12)
      {
        a1 = v21;
        goto LABEL_11;
      }
    }
    (*v15)(v8, v5);
    return swift_release();
  }
  else
  {
LABEL_11:
    uint64_t result = swift_bridgeObjectRelease();
    *a1 = v13;
    a1[1] = 1;
  }
  return result;
}

uint64_t closure #2 in IndexPIRClient.constructPIRRequest(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  uint64_t v26 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for AspirePirEncryptedIndices(0);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  int64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for IndexPIRClient();
  unint64_t v14 = *(void *)(a2 + *(int *)(v13 + 28));
  if ((v14 & 0x8000000000000000) != 0 || (uint64_t v25 = v13, HIDWORD(v14)))
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    *(_DWORD *)a1 = v14;
    _s8CipherML9SecretKeyVWOcTm_0(a3, (uint64_t)v12, type metadata accessor for AspirePirEncryptedIndices);
    uint64_t v15 = type metadata accessor for AspireApiPIRRequest(0);
    uint64_t v16 = a1 + *(int *)(v15 + 28);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v16, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
    _s8CipherML9SecretKeyVWObTm_1((uint64_t)v12, v16, type metadata accessor for AspirePirEncryptedIndices);
    uint64_t v17 = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v10 + 56))(v16, 0, 1, v9);
    MEMORY[0x270FA5388](v17);
    lazy protocol witness table accessor for type AspirePirEncryptedIndices and conformance AspirePirEncryptedIndices(&lazy protocol witness table cache variable for type AspireApiEvaluationKeyMetadata and conformance AspireApiEvaluationKeyMetadata, (void (*)(uint64_t))type metadata accessor for AspireApiEvaluationKeyMetadata);
    static Message.with(_:)();
    uint64_t v18 = a1 + *(int *)(v15 + 32);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v18, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
    _s8CipherML9SecretKeyVWObTm_1((uint64_t)v8, v18, type metadata accessor for AspireApiEvaluationKeyMetadata);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v26 + 56))(v18, 0, 1, v6);
    uint64_t v19 = (uint64_t *)(a2 + *(int *)(v25 + 24));
    uint64_t v20 = *v19;
    unint64_t v21 = v19[1];
    uint64_t v22 = *(void *)(a1 + 8);
    unint64_t v23 = *(void *)(a1 + 16);
    outlined copy of Data._Representation(*v19, v21);
    uint64_t result = outlined consume of Data._Representation(v22, v23);
    *(void *)(a1 + 8) = v20;
    *(void *)(a1 + 16) = v21;
  }
  return result;
}

uint64_t closure #1 in closure #2 in IndexPIRClient.constructPIRRequest(with:)(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = (char *)a2 + *(int *)(type metadata accessor for IndexPIRClient() + 20);
  uint64_t v4 = (uint64_t *)(*(void *)&v3[*(int *)(type metadata accessor for AspireApiPIRConfig(0) + 20)]
                 + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__evaluationKeyConfigHash);
  swift_beginAccess();
  uint64_t v6 = *v4;
  unint64_t v5 = v4[1];
  uint64_t v7 = a1[1];
  unint64_t v8 = a1[2];
  outlined copy of Data._Representation(v6, v5);
  uint64_t result = outlined consume of Data._Representation(v7, v8);
  a1[1] = v6;
  a1[2] = v5;
  return result;
}

uint64_t IndexPIRClient.decryptPIRResponse(_:index:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v58 = a2;
  uint64_t v3 = type metadata accessor for AspireHeSerializedFullCiphertext(0);
  MEMORY[0x270FA5388](v3 - 8);
  unint64_t v5 = (void *)((char *)v57 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = type metadata accessor for AspireHeSerializedSeededCiphertext(0);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v70 = (void *)((char *)v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for AspireHeSerializedCiphertext(0);
  uint64_t v60 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v80 = type metadata accessor for HE.SerializedCiphertext();
  uint64_t v14 = *(void *)(v80 - 8);
  MEMORY[0x270FA5388](v80);
  uint64_t v16 = (void *)((char *)v57 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v17 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17 - 8);
  uint64_t v65 = (void *)((char *)v57 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v20 = *a1;
  int64_t v21 = *(void *)(v20 + 16);
  if (v21)
  {
    uint64_t v83 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    int64_t v59 = v21;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21, 0);
    uint64_t v22 = 0;
    unint64_t v23 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
    v57[0] = v20;
    uint64_t v63 = v20 + v23;
    uint64_t v62 = *(void *)(v18 + 72);
    unsigned int v69 = *MEMORY[0x263F38838];
    uint64_t v75 = (void (**)(uint64_t *, uint64_t, uint64_t))(v14 + 104);
    unsigned int v68 = *MEMORY[0x263F38830];
    uint64_t v76 = v14;
    uint64_t v73 = v10;
    uint64_t v74 = v14 + 32;
    uint64_t v66 = v13;
    uint64_t v67 = v5;
    while (1)
    {
      uint64_t v64 = v22;
      uint64_t v24 = v65;
      _s8CipherML9SecretKeyVWOcTm_0(v63 + v62 * v22, (uint64_t)v65, type metadata accessor for AspireHeSerializedCiphertextVec);
      uint64_t v25 = *v24;
      int64_t v26 = *(void *)(v25 + 16);
      if (v26) {
        break;
      }
      uint64_t v46 = MEMORY[0x263F8EE78];
LABEL_23:
      outlined destroy of AspireApiPIRConfig((uint64_t)v65, type metadata accessor for AspireHeSerializedCiphertextVec);
      uint64_t v50 = v83;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v50 + 16) + 1, 1);
        uint64_t v50 = v83;
      }
      int64_t v51 = v59;
      uint64_t v52 = v64;
      unint64_t v54 = *(void *)(v50 + 16);
      unint64_t v53 = *(void *)(v50 + 24);
      if (v54 >= v53 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v53 > 1, v54 + 1, 1);
        uint64_t v52 = v64;
        int64_t v51 = v59;
        uint64_t v50 = v83;
      }
      uint64_t v22 = v52 + 1;
      *(void *)(v50 + 16) = v54 + 1;
      *(void *)(v50 + 8 * v54 + 32) = v46;
      if (v22 == v51)
      {
        swift_bridgeObjectRelease();
        goto LABEL_31;
      }
    }
    uint64_t v82 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v26, 0);
    uint64_t v27 = 0;
    uint64_t v28 = *(unsigned __int8 *)(v60 + 80);
    uint64_t v61 = v25;
    uint64_t v79 = v25 + ((v28 + 32) & ~v28);
    uint64_t v29 = *(void *)(v60 + 72);
    int64_t v77 = v26;
    uint64_t v78 = v29;
    while (1)
    {
      _s8CipherML9SecretKeyVWOcTm_0(v79 + v78 * v27, (uint64_t)v13, type metadata accessor for AspireHeSerializedCiphertext);
      outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v13, (uint64_t)v10, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
      uint64_t v30 = type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(0);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v30 - 8) + 48))(v10, 1, v30) == 1) {
        break;
      }
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        _s8CipherML9SecretKeyVWObTm_1((uint64_t)v10, (uint64_t)v5, type metadata accessor for AspireHeSerializedFullCiphertext);
        uint64_t v31 = *v5;
        unint64_t v32 = v5[1];
        uint64_t v33 = v5[2];
        int64_t v34 = *(void *)(v33 + 16);
        if (v34)
        {
          unint64_t v71 = v5[1];
          uint64_t v72 = v31;
          outlined copy of Data._Representation(v31, v32);
          uint64_t v81 = MEMORY[0x263F8EE78];
          swift_bridgeObjectRetain();
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v34, 0);
          uint64_t v35 = 0;
          uint64_t v36 = v81;
          unint64_t v37 = *(void *)(v81 + 16);
          do
          {
            uint64_t v38 = *(unsigned int *)(v33 + 4 * v35 + 32);
            uint64_t v81 = v36;
            unint64_t v39 = *(void *)(v36 + 24);
            if (v37 >= v39 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v39 > 1, v37 + 1, 1);
              uint64_t v36 = v81;
            }
            ++v35;
            *(void *)(v36 + 16) = v37 + 1;
            *(void *)(v36 + 8 * v37++ + 32) = v38;
          }
          while (v34 != v35);
          swift_bridgeObjectRelease();
          uint64_t v13 = v66;
          unint64_t v5 = v67;
          unint64_t v32 = v71;
          uint64_t v31 = v72;
        }
        else
        {
          outlined copy of Data._Representation(*v5, v5[1]);
          uint64_t v36 = MEMORY[0x263F8EE78];
        }
        unint64_t v44 = v5[3];
        outlined destroy of AspireApiPIRConfig((uint64_t)v5, type metadata accessor for AspireHeSerializedFullCiphertext);
        *uint64_t v16 = v31;
        v16[1] = v32;
        uint64_t v45 = v68;
      }
      else
      {
        uint64_t v40 = (uint64_t)v10;
        uint64_t v41 = v70;
        _s8CipherML9SecretKeyVWObTm_1(v40, (uint64_t)v70, type metadata accessor for AspireHeSerializedSeededCiphertext);
        uint64_t v42 = *v41;
        unint64_t v43 = v41[1];
        uint64_t v36 = v41[2];
        unint64_t v44 = v41[3];
        outlined copy of Data._Representation(*v41, v43);
        outlined copy of Data._Representation(v36, v44);
        outlined destroy of AspireApiPIRConfig((uint64_t)v41, type metadata accessor for AspireHeSerializedSeededCiphertext);
        *uint64_t v16 = v42;
        v16[1] = v43;
        uint64_t v45 = v69;
      }
      void v16[2] = v36;
      void v16[3] = v44;
      (*v75)(v16, v45, v80);
      outlined destroy of AspireApiPIRConfig((uint64_t)v13, type metadata accessor for AspireHeSerializedCiphertext);
      uint64_t v46 = v82;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v46 + 16) + 1, 1);
        uint64_t v46 = v82;
      }
      uint64_t v10 = v73;
      uint64_t v47 = v76;
      unint64_t v49 = *(void *)(v46 + 16);
      unint64_t v48 = *(void *)(v46 + 24);
      if (v49 >= v48 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v48 > 1, v49 + 1, 1);
        uint64_t v47 = v76;
        uint64_t v46 = v82;
      }
      ++v27;
      *(void *)(v46 + 16) = v49 + 1;
      (*(void (**)(unint64_t, uint64_t *, uint64_t))(v47 + 32))(v46+ ((*(unsigned __int8 *)(v47 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v47 + 80))+ *(void *)(v47 + 72) * v49, v16, v80);
      uint64_t v82 = v46;
      if (v27 == v77)
      {
        swift_bridgeObjectRelease();
        goto LABEL_23;
      }
    }
    type metadata accessor for CipherMLError();
    lazy protocol witness table accessor for type AspirePirEncryptedIndices and conformance AspirePirEncryptedIndices((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    outlined destroy of AspireApiPIRConfig((uint64_t)v13, type metadata accessor for AspireHeSerializedCiphertext);
    swift_bridgeObjectRelease();
    swift_release();
    outlined destroy of AspireApiPIRConfig((uint64_t)v65, type metadata accessor for AspireHeSerializedCiphertextVec);
    uint64_t v55 = v83;
    swift_bridgeObjectRelease();
    swift_release();
    return v55;
  }
  uint64_t v50 = MEMORY[0x263F8EE78];
LABEL_31:
  uint64_t result = type metadata accessor for IndexPIRClient();
  if (*(void *)(v50 + 16))
  {
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRelease();
    if ((v58 & 0x8000000000000000) == 0)
    {
      uint64_t v55 = PIR.IndexPirClient.decrypt(reply:index:)();
      swift_bridgeObjectRelease();
      return v55;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in IndexPIRClient.constructPIRRequest(with:)(void *a1)
{
  return closure #1 in IndexPIRClient.constructPIRRequest(with:)(a1, *(void *)(v1 + 16));
}

uint64_t partial apply for closure #2 in IndexPIRClient.constructPIRRequest(with:)(uint64_t a1)
{
  return closure #2 in IndexPIRClient.constructPIRRequest(with:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t outlined destroy of AspireApiPIRConfig(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t *initializeBufferWithCopyOfBuffer for IndexPIRClient(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v25 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v25 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    uint64_t v7 = *(int *)(type metadata accessor for SecretKey() + 20);
    uint64_t v8 = (char *)v4 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for HE.SerializedSecretKey();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    uint64_t v11 = a3[5];
    uint64_t v12 = (char *)v4 + v11;
    uint64_t v13 = (char *)a2 + v11;
    uint64_t v14 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
    uint64_t v15 = type metadata accessor for AspireApiPIRConfig(0);
    *(void *)&v12[*(int *)(v15 + 20)] = *(void *)&v13[*(int *)(v15 + 20)];
    uint64_t v16 = a3[6];
    uint64_t v17 = (uint64_t *)((char *)v4 + v16);
    uint64_t v18 = (uint64_t *)((char *)a2 + v16);
    uint64_t v19 = *v18;
    unint64_t v20 = v18[1];
    swift_retain();
    outlined copy of Data._Representation(v19, v20);
    *uint64_t v17 = v19;
    v17[1] = v20;
    uint64_t v21 = a3[8];
    *(uint64_t *)((char *)v4 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    uint64_t v22 = (char *)v4 + v21;
    unint64_t v23 = (char *)a2 + v21;
    uint64_t v24 = type metadata accessor for PIR.IndexPirClient();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 16))(v22, v23, v24);
  }
  return v4;
}

uint64_t destroy for IndexPIRClient(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + *(int *)(type metadata accessor for SecretKey() + 20);
  uint64_t v5 = type metadata accessor for HE.SerializedSecretKey();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = a1 + a2[5];
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  type metadata accessor for AspireApiPIRConfig(0);
  swift_release();
  outlined consume of Data._Representation(*(void *)(a1 + a2[6]), *(void *)(a1 + a2[6] + 8));
  uint64_t v8 = a1 + a2[8];
  uint64_t v9 = type metadata accessor for PIR.IndexPirClient();
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8);
  return v10(v8, v9);
}

void *initializeWithCopy for IndexPIRClient(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(type metadata accessor for SecretKey() + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for HE.SerializedSecretKey();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  uint64_t v10 = a3[5];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
  uint64_t v14 = type metadata accessor for AspireApiPIRConfig(0);
  *(void *)&v11[*(int *)(v14 + 20)] = *(void *)&v12[*(int *)(v14 + 20)];
  uint64_t v15 = a3[6];
  uint64_t v16 = (void *)((char *)a1 + v15);
  uint64_t v17 = (void *)((char *)a2 + v15);
  uint64_t v18 = *v17;
  unint64_t v19 = v17[1];
  swift_retain();
  outlined copy of Data._Representation(v18, v19);
  *uint64_t v16 = v18;
  v16[1] = v19;
  uint64_t v20 = a3[8];
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  uint64_t v21 = (char *)a1 + v20;
  uint64_t v22 = (char *)a2 + v20;
  uint64_t v23 = type metadata accessor for PIR.IndexPirClient();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 16))(v21, v22, v23);
  return a1;
}

void *assignWithCopy for IndexPIRClient(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(type metadata accessor for SecretKey() + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for HE.SerializedSecretKey();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = a3[5];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24))(v11, v12, v13);
  uint64_t v14 = type metadata accessor for AspireApiPIRConfig(0);
  *(void *)&v11[*(int *)(v14 + 20)] = *(void *)&v12[*(int *)(v14 + 20)];
  swift_retain();
  swift_release();
  uint64_t v15 = a3[6];
  uint64_t v16 = (void *)((char *)a1 + v15);
  uint64_t v17 = (void *)((char *)a2 + v15);
  uint64_t v18 = *v17;
  unint64_t v19 = v17[1];
  outlined copy of Data._Representation(*v17, v19);
  uint64_t v20 = *v16;
  unint64_t v21 = v16[1];
  *uint64_t v16 = v18;
  v16[1] = v19;
  outlined consume of Data._Representation(v20, v21);
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  uint64_t v22 = a3[8];
  uint64_t v23 = (char *)a1 + v22;
  uint64_t v24 = (char *)a2 + v22;
  uint64_t v25 = type metadata accessor for PIR.IndexPirClient();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 24))(v23, v24, v25);
  return a1;
}

void *initializeWithTake for IndexPIRClient(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(type metadata accessor for SecretKey() + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for HE.SerializedSecretKey();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[5];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
  uint64_t v14 = type metadata accessor for AspireApiPIRConfig(0);
  *(void *)&v11[*(int *)(v14 + 20)] = *(void *)&v12[*(int *)(v14 + 20)];
  uint64_t v15 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  *(void *)((char *)a1 + v15) = *(void *)((char *)a2 + v15);
  uint64_t v16 = a3[8];
  uint64_t v17 = (char *)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  uint64_t v19 = type metadata accessor for PIR.IndexPirClient();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 32))(v17, v18, v19);
  return a1;
}

void *assignWithTake for IndexPIRClient(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(type metadata accessor for SecretKey() + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for HE.SerializedSecretKey();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = a3[5];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 40))(v11, v12, v13);
  uint64_t v14 = type metadata accessor for AspireApiPIRConfig(0);
  *(void *)&v11[*(int *)(v14 + 20)] = *(void *)&v12[*(int *)(v14 + 20)];
  swift_release();
  uint64_t v15 = a3[6];
  uint64_t v16 = *(void *)((char *)a1 + v15);
  unint64_t v17 = *(void *)((char *)a1 + v15 + 8);
  *(_OWORD *)((char *)a1 + v15) = *(_OWORD *)((char *)a2 + v15);
  outlined consume of Data._Representation(v16, v17);
  uint64_t v18 = a3[8];
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  uint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = (char *)a2 + v18;
  uint64_t v21 = type metadata accessor for PIR.IndexPirClient();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 40))(v19, v20, v21);
  return a1;
}

uint64_t getEnumTagSinglePayload for IndexPIRClient(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_249D6BE8C);
}

uint64_t sub_249D6BE8C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SecretKey();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = type metadata accessor for AspireApiPIRConfig(0);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + a3[5];
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  if (a2 == 12)
  {
    uint64_t v14 = *(void *)(a1 + a3[6] + 8) >> 60;
    if (((4 * v14) & 0xC) != 0) {
      return 16 - ((4 * v14) & 0xC | (v14 >> 2));
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v15 = type metadata accessor for PIR.IndexPirClient();
    uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48);
    uint64_t v17 = v15;
    uint64_t v18 = a1 + a3[8];
    return v16(v18, a2, v17);
  }
}

uint64_t storeEnumTagSinglePayload for IndexPIRClient(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_249D6C030);
}

uint64_t sub_249D6C030(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = type metadata accessor for SecretKey();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_5:
    return v11(v12, a2, a2, v10);
  }
  uint64_t result = type metadata accessor for AspireApiPIRConfig(0);
  uint64_t v14 = *(void *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v12 = a1 + a4[5];
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_5;
  }
  if (a3 == 12)
  {
    uint64_t v15 = (void *)(a1 + a4[6]);
    *uint64_t v15 = 0;
    v15[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
  }
  else
  {
    uint64_t v16 = type metadata accessor for PIR.IndexPirClient();
    uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56);
    uint64_t v18 = v16;
    uint64_t v19 = a1 + a4[8];
    return v17(v19, a2, a2, v18);
  }
  return result;
}

uint64_t type metadata completion function for IndexPIRClient()
{
  uint64_t result = type metadata accessor for SecretKey();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for AspireApiPIRConfig(319);
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for PIR.IndexPirClient();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t _s8CipherML9SecretKeyVWOcTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t partial apply for closure #1 in closure #2 in IndexPIRClient.constructPIRRequest(with:)(void *a1)
{
  return closure #1 in closure #2 in IndexPIRClient.constructPIRRequest(with:)(a1, *(void **)(v1 + 16));
}

uint64_t lazy protocol witness table accessor for type AspirePirEncryptedIndices and conformance AspirePirEncryptedIndices(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s8CipherML9SecretKeyVWObTm_1(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t CMLClientConfig.networkDelegation.getter()
{
  id v1 = objc_msgSend(v0, sel_sourceApplicationBundleIdentifier);
  if (!v1) {
    return 0;
  }
  unint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t static NetworkDelegationConfig.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return a4 == 0;
  }
  if (!a4) {
    return 0;
  }
  if (a1 == a3 && a2 == a4) {
    return 1;
  }
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

void NetworkDelegationConfig.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance NetworkDelegationConfig.CodingKeys()
{
  if (*v0) {
    return 0xD000000000000021;
  }
  else {
    return 0x6167656C65446F6ELL;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance NetworkDelegationConfig.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized NetworkDelegationConfig.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NetworkDelegationConfig.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type NetworkDelegationConfig.CodingKeys and conformance NetworkDelegationConfig.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NetworkDelegationConfig.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type NetworkDelegationConfig.CodingKeys and conformance NetworkDelegationConfig.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NetworkDelegationConfig.NoDelegationCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type NetworkDelegationConfig.NoDelegationCodingKeys and conformance NetworkDelegationConfig.NoDelegationCodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NetworkDelegationConfig.NoDelegationCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type NetworkDelegationConfig.NoDelegationCodingKeys and conformance NetworkDelegationConfig.NoDelegationCodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance NetworkDelegationConfig.SourceApplicationBundleIdentifierCodingKeys()
{
  return 12383;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance NetworkDelegationConfig.SourceApplicationBundleIdentifierCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NetworkDelegationConfig.SourceApplicationBundleIdentifierCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type NetworkDelegationConfig.SourceApplicationBundleIdentifierCodingKeys and conformance NetworkDelegationConfig.SourceApplicationBundleIdentifierCodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NetworkDelegationConfig.SourceApplicationBundleIdentifierCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type NetworkDelegationConfig.SourceApplicationBundleIdentifierCodingKeys and conformance NetworkDelegationConfig.SourceApplicationBundleIdentifierCodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t NetworkDelegationConfig.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v20 = a3;
  uint64_t v18 = a2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NetworkDelegationConfig.SourceApplicationBundleIdentifierCodingKeys>);
  uint64_t v19 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NetworkDelegationConfig.NoDelegationCodingKeys>);
  uint64_t v16 = *(void *)(v7 - 8);
  uint64_t v17 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NetworkDelegationConfig.CodingKeys>);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NetworkDelegationConfig.CodingKeys and conformance NetworkDelegationConfig.CodingKeys();
  uint64_t v14 = v20;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (v14)
  {
    char v22 = 1;
    lazy protocol witness table accessor for type NetworkDelegationConfig.SourceApplicationBundleIdentifierCodingKeys and conformance NetworkDelegationConfig.SourceApplicationBundleIdentifierCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    KeyedEncodingContainer.encode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v6, v4);
  }
  else
  {
    char v21 = 0;
    lazy protocol witness table accessor for type NetworkDelegationConfig.NoDelegationCodingKeys and conformance NetworkDelegationConfig.NoDelegationCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v9, v17);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

unint64_t lazy protocol witness table accessor for type NetworkDelegationConfig.CodingKeys and conformance NetworkDelegationConfig.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type NetworkDelegationConfig.CodingKeys and conformance NetworkDelegationConfig.CodingKeys;
  if (!lazy protocol witness table cache variable for type NetworkDelegationConfig.CodingKeys and conformance NetworkDelegationConfig.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkDelegationConfig.CodingKeys and conformance NetworkDelegationConfig.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NetworkDelegationConfig.CodingKeys and conformance NetworkDelegationConfig.CodingKeys;
  if (!lazy protocol witness table cache variable for type NetworkDelegationConfig.CodingKeys and conformance NetworkDelegationConfig.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkDelegationConfig.CodingKeys and conformance NetworkDelegationConfig.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NetworkDelegationConfig.CodingKeys and conformance NetworkDelegationConfig.CodingKeys;
  if (!lazy protocol witness table cache variable for type NetworkDelegationConfig.CodingKeys and conformance NetworkDelegationConfig.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkDelegationConfig.CodingKeys and conformance NetworkDelegationConfig.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NetworkDelegationConfig.CodingKeys and conformance NetworkDelegationConfig.CodingKeys;
  if (!lazy protocol witness table cache variable for type NetworkDelegationConfig.CodingKeys and conformance NetworkDelegationConfig.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkDelegationConfig.CodingKeys and conformance NetworkDelegationConfig.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NetworkDelegationConfig.SourceApplicationBundleIdentifierCodingKeys and conformance NetworkDelegationConfig.SourceApplicationBundleIdentifierCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type NetworkDelegationConfig.SourceApplicationBundleIdentifierCodingKeys and conformance NetworkDelegationConfig.SourceApplicationBundleIdentifierCodingKeys;
  if (!lazy protocol witness table cache variable for type NetworkDelegationConfig.SourceApplicationBundleIdentifierCodingKeys and conformance NetworkDelegationConfig.SourceApplicationBundleIdentifierCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkDelegationConfig.SourceApplicationBundleIdentifierCodingKeys and conformance NetworkDelegationConfig.SourceApplicationBundleIdentifierCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NetworkDelegationConfig.SourceApplicationBundleIdentifierCodingKeys and conformance NetworkDelegationConfig.SourceApplicationBundleIdentifierCodingKeys;
  if (!lazy protocol witness table cache variable for type NetworkDelegationConfig.SourceApplicationBundleIdentifierCodingKeys and conformance NetworkDelegationConfig.SourceApplicationBundleIdentifierCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkDelegationConfig.SourceApplicationBundleIdentifierCodingKeys and conformance NetworkDelegationConfig.SourceApplicationBundleIdentifierCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NetworkDelegationConfig.SourceApplicationBundleIdentifierCodingKeys and conformance NetworkDelegationConfig.SourceApplicationBundleIdentifierCodingKeys;
  if (!lazy protocol witness table cache variable for type NetworkDelegationConfig.SourceApplicationBundleIdentifierCodingKeys and conformance NetworkDelegationConfig.SourceApplicationBundleIdentifierCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkDelegationConfig.SourceApplicationBundleIdentifierCodingKeys and conformance NetworkDelegationConfig.SourceApplicationBundleIdentifierCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NetworkDelegationConfig.SourceApplicationBundleIdentifierCodingKeys and conformance NetworkDelegationConfig.SourceApplicationBundleIdentifierCodingKeys;
  if (!lazy protocol witness table cache variable for type NetworkDelegationConfig.SourceApplicationBundleIdentifierCodingKeys and conformance NetworkDelegationConfig.SourceApplicationBundleIdentifierCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkDelegationConfig.SourceApplicationBundleIdentifierCodingKeys and conformance NetworkDelegationConfig.SourceApplicationBundleIdentifierCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NetworkDelegationConfig.NoDelegationCodingKeys and conformance NetworkDelegationConfig.NoDelegationCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type NetworkDelegationConfig.NoDelegationCodingKeys and conformance NetworkDelegationConfig.NoDelegationCodingKeys;
  if (!lazy protocol witness table cache variable for type NetworkDelegationConfig.NoDelegationCodingKeys and conformance NetworkDelegationConfig.NoDelegationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkDelegationConfig.NoDelegationCodingKeys and conformance NetworkDelegationConfig.NoDelegationCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NetworkDelegationConfig.NoDelegationCodingKeys and conformance NetworkDelegationConfig.NoDelegationCodingKeys;
  if (!lazy protocol witness table cache variable for type NetworkDelegationConfig.NoDelegationCodingKeys and conformance NetworkDelegationConfig.NoDelegationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkDelegationConfig.NoDelegationCodingKeys and conformance NetworkDelegationConfig.NoDelegationCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NetworkDelegationConfig.NoDelegationCodingKeys and conformance NetworkDelegationConfig.NoDelegationCodingKeys;
  if (!lazy protocol witness table cache variable for type NetworkDelegationConfig.NoDelegationCodingKeys and conformance NetworkDelegationConfig.NoDelegationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkDelegationConfig.NoDelegationCodingKeys and conformance NetworkDelegationConfig.NoDelegationCodingKeys);
  }
  return result;
}

Swift::Int NetworkDelegationConfig.hashValue.getter(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

uint64_t NetworkDelegationConfig.init(from:)(void *a1)
{
  return specialized NetworkDelegationConfig.init(from:)(a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance NetworkDelegationConfig@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized NetworkDelegationConfig.init(from:)(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NetworkDelegationConfig(void *a1)
{
  return NetworkDelegationConfig.encode(to:)(a1, *v1, v1[1]);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NetworkDelegationConfig(void *a1, void *a2)
{
  uint64_t v3 = a1[1];
  uint64_t v4 = a2[1];
  if (!v3) {
    return v4 == 0;
  }
  if (!v4) {
    return 0;
  }
  if (*a1 == *a2 && v3 == v4) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NetworkDelegationConfig()
{
  uint64_t v1 = *(void *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v1)
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance NetworkDelegationConfig()
{
  if (*(void *)(v0 + 8))
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NetworkDelegationConfig()
{
  uint64_t v1 = *(void *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v1)
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

uint64_t specialized NetworkDelegationConfig.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6167656C65446F6ELL && a2 == 0xEC0000006E6F6974;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000021 && a2 == 0x8000000249E94CF0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t specialized NetworkDelegationConfig.init(from:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NetworkDelegationConfig.SourceApplicationBundleIdentifierCodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v24 = v2;
  uint64_t v25 = v3;
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NetworkDelegationConfig.NoDelegationCodingKeys>);
  uint64_t v27 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NetworkDelegationConfig.CodingKeys>);
  uint64_t v26 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (uint64_t)__swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NetworkDelegationConfig.CodingKeys and conformance NetworkDelegationConfig.CodingKeys();
  uint64_t v13 = (uint64_t)v28;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v13) {
    goto LABEL_9;
  }
  uint64_t v14 = v27;
  uint64_t v23 = v6;
  uint64_t v28 = a1;
  uint64_t v15 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v15 + 16) != 1)
  {
    uint64_t v19 = type metadata accessor for DecodingError();
    swift_allocError();
    char v21 = v20;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    void *v21 = &type metadata for NetworkDelegationConfig;
    uint64_t v12 = (uint64_t)v11;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v19 - 8) + 104))(v21, *MEMORY[0x263F8DCB0], v19);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v26 + 8))(v11, v9);
    a1 = v28;
LABEL_9:
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
    return v12;
  }
  if (*(unsigned char *)(v15 + 32))
  {
    char v30 = 1;
    lazy protocol witness table accessor for type NetworkDelegationConfig.SourceApplicationBundleIdentifierCodingKeys and conformance NetworkDelegationConfig.SourceApplicationBundleIdentifierCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v16 = v24;
    uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v17 = v5;
    uint64_t v18 = v26;
    (*(void (**)(char *, uint64_t))(v25 + 8))(v17, v16);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v11, v9);
  }
  else
  {
    char v29 = 0;
    lazy protocol witness table accessor for type NetworkDelegationConfig.NoDelegationCodingKeys and conformance NetworkDelegationConfig.NoDelegationCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v8, v23);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v26 + 8))(v11, v9);
    uint64_t v12 = 0;
  }
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v28);
  return v12;
}

void *initializeBufferWithCopyOfBuffer for NetworkDelegationConfig(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for NetworkDelegationConfig()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for NetworkDelegationConfig(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void *assignWithTake for NetworkDelegationConfig(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for NetworkDelegationConfig(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for NetworkDelegationConfig(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)__n128 result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

uint64_t getEnumTag for NetworkDelegationConfig(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *destructiveInjectEnumTag for NetworkDelegationConfig(void *result, int a2)
{
  if (a2 < 0)
  {
    *__n128 result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for NetworkDelegationConfig()
{
  return &type metadata for NetworkDelegationConfig;
}

unsigned char *storeEnumTagSinglePayload for NetworkDelegationConfig.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x249D6D644);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

void *type metadata accessor for NetworkDelegationConfig.CodingKeys()
{
  return &unk_26FDD23D0;
}

void *type metadata accessor for NetworkDelegationConfig.NoDelegationCodingKeys()
{
  return &unk_26FDD23B0;
}

unsigned char *storeEnumTagSinglePayload for NetworkDelegationConfig.SourceApplicationBundleIdentifierCodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *__n128 result = a2;
        return result;
      case 2:
        *(_WORD *)__n128 result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)__n128 result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *__n128 result = 0;
      break;
    case 2:
      *(_WORD *)__n128 result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x249D6D728);
    case 4:
      *(_DWORD *)__n128 result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for NetworkDelegationConfig.SourceApplicationBundleIdentifierCodingKeys()
{
  return &unk_26FDD2460;
}

void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> NegativeBinomialDistribution.init(successCount:successProbability:)(CipherML::NegativeBinomialDistribution *__return_ptr retstr, Swift::Double successCount, Swift::Double successProbability)
{
  if (successCount > 0.0
    && (successProbability > 0.0 ? (BOOL v3 = successProbability < 1.0) : (BOOL v3 = 0),
        v3 && (double v4 = (1.0 - successProbability) / successProbability, v4 > 0.0)))
  {
    retstr->successCount = successCount;
    retstr->successProbability = successProbability;
    retstr->gamma.shape = successCount;
    retstr->gamma.scale = v4;
    retstr->gamma.cap.value = 0.0;
    retstr->gamma.cap.is_nil = 1;
  }
  else
  {
    type metadata accessor for CipherMLError();
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError();
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
  }
}

uint64_t NegativeBinomialDistribution.sample<A>(using:)(uint64_t a1)
{
  GammaDistribution.sample<A>(using:)(*(double *)(v1 + 16), *(double *)(v1 + 24), a1, *(void *)(v1 + 32), *(unsigned char *)(v1 + 40));
  return PoissonDistribution.sample<A>(using:)(v3, a1, 0, 1);
}

Swift::Int __swiftcall DiscreteDistribution.sample()()
{
  return (*(uint64_t (**)(uint64_t, void, void))(v1 + 8))(v0, MEMORY[0x263F8E298], MEMORY[0x263F8E2A0]);
}

Swift::Double __swiftcall ContinuousDistribution.sample()()
{
  (*(void (**)(uint64_t, void, void))(v1 + 8))(v0, MEMORY[0x263F8E298], MEMORY[0x263F8E2A0]);
  return result;
}

CipherML::PoissonDistribution __swiftcall PoissonDistribution.init(mean:cap:)(Swift::Double mean, Swift::Int_optional cap)
{
  cap.is_nil &= 1u;
  result.cap = cap;
  result.mean = mean;
  return result;
}

uint64_t PoissonDistribution.sample<A>(using:)(double a1, uint64_t a2, uint64_t a3, char a4)
{
  int v5 = a4 & 1;
  if (a1 <= 125.0) {
    uint64_t result = PoissonDistribution.sampleSmall<A>(using:)(a1);
  }
  else {
    uint64_t result = PoissonDistribution.sampleLarge<A>(using:)(a1);
  }
  if (result >= a3) {
    uint64_t v7 = a3;
  }
  else {
    uint64_t v7 = result;
  }
  if (!v5) {
    return v7;
  }
  return result;
}

uint64_t PoissonDistribution.sampleSmall<A>(using:)(double a1)
{
  lazy protocol witness table accessor for type Double and conformance Double();
  lazy protocol witness table accessor for type UInt64 and conformance UInt64();
  static BinaryFloatingPoint<>.random<A>(in:using:)();
  double v2 = exp(-a1);
  if (v2 >= v6) {
    return 0;
  }
  uint64_t v3 = 0;
  double v4 = v2;
  while (1)
  {
    uint64_t result = v3 + 1;
    if (__OFADD__(v3, 1)) {
      break;
    }
    double v4 = v4 * a1 / (double)result;
    double v2 = v2 + v4;
    ++v3;
    if (v2 >= v6) {
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t PoissonDistribution.sampleLarge<A>(using:)(long double a1)
{
  lazy protocol witness table accessor for type Double and conformance Double();
  uint64_t v2 = 1;
  lazy protocol witness table accessor for type UInt64 and conformance UInt64();
  double v3 = 1.0;
  while (1)
  {
    static BinaryFloatingPoint<>.random<A>(in:using:)();
    double v3 = v3 * v6;
    if (v3 < 1.0)
    {
      while (a1 > 0.0)
      {
        if (a1 <= 100.0)
        {
          double v3 = v3 * exp(a1);
          a1 = 0.0;
          if (v3 <= 1.0) {
            goto LABEL_12;
          }
          goto LABEL_9;
        }
        double v3 = v3 * 3.72007598e-44;
        a1 = a1 + -100.0;
        if (v3 >= 1.0) {
          break;
        }
      }
    }
    if (v3 <= 1.0) {
      break;
    }
LABEL_9:
    if (__OFADD__(v2++, 1))
    {
      __break(1u);
      break;
    }
  }
LABEL_12:
  uint64_t result = v2 - 1;
  if (__OFSUB__(v2, 1)) {
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for DiscreteDistribution.sample<A>(using:) in conformance PoissonDistribution(uint64_t a1)
{
  return PoissonDistribution.sample<A>(using:)(*(double *)v1, a1, *(void *)(v1 + 8), *(unsigned char *)(v1 + 16));
}

double NegativeBinomialDistribution.successCount.getter()
{
  return *(double *)v0;
}

double NegativeBinomialDistribution.successProbability.getter()
{
  return *(double *)(v0 + 8);
}

uint64_t NegativeBinomialDistribution.gamma.getter()
{
  return *(void *)(v0 + 32);
}

double NegativeBinomialDistribution.mean.getter()
{
  return *v0 * (1.0 - v0[1]) / v0[1];
}

double NegativeBinomialDistribution.variance.getter()
{
  return *v0 * (1.0 - v0[1]) / v0[1] / v0[1];
}

CipherML::GammaDistribution __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> GammaDistribution.init(shape:scale:cap:)(Swift::Double shape, Swift::Double scale, Swift::Double_optional cap)
{
  if (shape <= 0.0 || scale <= 0.0)
  {
    type metadata accessor for CipherMLError();
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError();
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    cap.is_nil = swift_willThrow();
  }
  result.cap.value = cap.value;
  result.cap.is_nil = cap.is_nil;
  result.scale = scale;
  result.shape = shape;
  return result;
}

void GammaDistribution.sample<A>(using:)(double a1, double a2, uint64_t a3, uint64_t a4, char a5)
{
  double v9 = GammaDistribution.sampleUncapped<A>(using:)(a1, a2);
  if ((a5 & 1) == 0 && v9 > *(double *)&a4)
  {
    while (GammaDistribution.sampleUncapped<A>(using:)(a1, a2) > *(double *)&a4)
      ;
  }
}

double NormalDistribution.standardDeviation.getter(double a1, double a2)
{
  return a2;
}

double NormalDistribution.variance.getter(double a1, double a2)
{
  return a2 * a2;
}

long double NormalDistribution.sample<A>(using:)(double a1, double a2)
{
  lazy protocol witness table accessor for type Double and conformance Double();
  lazy protocol witness table accessor for type UInt64 and conformance UInt64();
  static BinaryFloatingPoint<>.random<A>(in:using:)();
  static BinaryFloatingPoint<>.random<A>(in:using:)();
  double v4 = sqrt(log(v6) * -2.0);
  return v4 * cos(v6 * 6.28318531) * a2 + a1;
}

long double protocol witness for ContinuousDistribution.sample<A>(using:) in conformance NormalDistribution()
{
  return NormalDistribution.sample<A>(using:)(*v0, v0[1]);
}

double GammaDistribution.scale.getter(double a1, double a2)
{
  return a2;
}

double GammaDistribution.sampleUncapped<A>(using:)(double a1, double a2)
{
  if (a1 >= 1.0)
  {
    return GammaDistribution.sampleLarge<A>(with:using:)(a1, a1, a2);
  }
  else
  {
    lazy protocol witness table accessor for type Double and conformance Double();
    lazy protocol witness table accessor for type UInt64 and conformance UInt64();
    static BinaryFloatingPoint<>.random<A>(in:using:)();
    double v4 = GammaDistribution.sampleLarge<A>(with:using:)(a1 + 1.0, a1, a2);
    return v4 * pow(v6, 1.0 / a1);
  }
}

unint64_t lazy protocol witness table accessor for type Double and conformance Double()
{
  unint64_t result = lazy protocol witness table cache variable for type Double and conformance Double;
  if (!lazy protocol witness table cache variable for type Double and conformance Double)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Double and conformance Double);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UInt64 and conformance UInt64()
{
  unint64_t result = lazy protocol witness table cache variable for type UInt64 and conformance UInt64;
  if (!lazy protocol witness table cache variable for type UInt64 and conformance UInt64)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UInt64 and conformance UInt64);
  }
  return result;
}

double GammaDistribution.sampleLarge<A>(with:using:)(double a1, double a2, double a3)
{
  double v3 = a1 + -0.333333333;
  double v4 = 1.0 / sqrt((a1 + -0.333333333) * 9.0);
  do
  {
    do
    {
      double v5 = NormalDistribution.sample<A>(using:)(0.0, 1.0);
      double v6 = v4 * v5 + 1.0;
    }
    while (v6 <= 0.0);
    double v7 = v6 * (v6 * v6);
    lazy protocol witness table accessor for type Double and conformance Double();
    lazy protocol witness table accessor for type UInt64 and conformance UInt64();
    static BinaryFloatingPoint<>.random<A>(in:using:)();
    double v8 = v5 * v5;
    if (v12 < v5 * v5 * (v5 * v5 * -0.0331) + 1.0) {
      break;
    }
    double v9 = log(v12);
  }
  while (v9 >= v8 * 0.5 + v3 * (1.0 - v7 + log(v7)));
  return v3 * v7 * a3;
}

void protocol witness for ContinuousDistribution.sample<A>(using:) in conformance GammaDistribution(uint64_t a1)
{
  GammaDistribution.sample<A>(using:)(*(double *)v1, *(double *)(v1 + 8), a1, *(void *)(v1 + 16), *(unsigned char *)(v1 + 24));
}

uint64_t dispatch thunk of DiscreteDistribution.sample<A>(using:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t dispatch thunk of ContinuousDistribution.sample<A>(using:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t getEnumTagSinglePayload for PoissonDistribution(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for PoissonDistribution(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)unint64_t result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 17) = v3;
  return result;
}

ValueMetadata *type metadata accessor for PoissonDistribution()
{
  return &type metadata for PoissonDistribution;
}

ValueMetadata *type metadata accessor for NegativeBinomialDistribution()
{
  return &type metadata for NegativeBinomialDistribution;
}

uint64_t getEnumTagSinglePayload for NormalDistribution(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for NormalDistribution(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)unint64_t result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for NormalDistribution()
{
  return &type metadata for NormalDistribution;
}

__n128 __swift_memcpy25_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for GammaDistribution(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for GammaDistribution(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 25) = v3;
  return result;
}

ValueMetadata *type metadata accessor for GammaDistribution()
{
  return &type metadata for GammaDistribution;
}

uint64_t KeywordPIRClient.init(secretKey:config:configID:shardIndex:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12 = type metadata accessor for AspireApiPIRConfig(0);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for SecretKey();
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v17 = (char *)v19 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s8CipherML9SecretKeyVWOcTm_0(a1, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for SecretKey);
  _s8CipherML9SecretKeyVWOcTm_0(a2, (uint64_t)v14, type metadata accessor for AspireApiPIRConfig);
  KeywordPIRClient.init(secretKey:config:configID:shardLabel:)((uint64_t)v17, (uint64_t)v14, a3, a4, a5, 0, 1, a6);
  _s8CipherML18AspireApiPIRConfigVWOhTm_0(a2, type metadata accessor for AspireApiPIRConfig);
  return _s8CipherML18AspireApiPIRConfigVWOhTm_0(a1, (uint64_t (*)(void))type metadata accessor for SecretKey);
}

uint64_t KeywordPIRClient.init(secretKey:config:configID:shardId:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v14 = type metadata accessor for AspireApiPIRConfig(0);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for SecretKey();
  MEMORY[0x270FA5388](v17 - 8);
  uint64_t v19 = (char *)&v21 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s8CipherML9SecretKeyVWOcTm_0(a1, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for SecretKey);
  _s8CipherML9SecretKeyVWOcTm_0(a2, (uint64_t)v16, type metadata accessor for AspireApiPIRConfig);
  KeywordPIRClient.init(secretKey:config:configID:shardLabel:)((uint64_t)v19, (uint64_t)v16, a3, a4, a5, a6, 0, a7);
  _s8CipherML18AspireApiPIRConfigVWOhTm_0(a2, type metadata accessor for AspireApiPIRConfig);
  return _s8CipherML18AspireApiPIRConfigVWOhTm_0(a1, (uint64_t (*)(void))type metadata accessor for SecretKey);
}

uint64_t KeywordPIRClient.constructPIRRequest(with:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v35 = a1;
  uint64_t v42 = type metadata accessor for HE.SerializedCiphertext();
  uint64_t v38 = *(char **)(v42 - 8);
  MEMORY[0x270FA5388](v42);
  char v3 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for AspireHeSerializedCiphertext(0);
  uint64_t v41 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  double v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for AspirePirEncryptedIndices(0);
  MEMORY[0x270FA5388](v7);
  double v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for KeywordPIRClient();
  uint64_t v10 = v40;
  uint64_t result = PIR.KeywordPirClient.query(keyword:)();
  if (!v10)
  {
    uint64_t v12 = result;
    uint64_t v33 = v1;
    uint64_t v34 = v7;
    uint64_t v39 = v4;
    uint64_t v40 = v6;
    uint64_t v13 = v38;
    unint64_t v32 = v9;
    int64_t v14 = *(void *)(result + 16);
    if (v14)
    {
      uint64_t v43 = MEMORY[0x263F8EE78];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14, 0);
      uint64_t v15 = v13 + 16;
      uint64_t v16 = (char *)*((void *)v13 + 2);
      uint64_t v17 = v13[80];
      uint64_t v31 = v12;
      uint64_t v18 = v12 + ((v17 + 32) & ~v17);
      uint64_t v36 = *((void *)v13 + 9);
      unint64_t v37 = (void (**)(char *, uint64_t))(v13 + 8);
      uint64_t v38 = v16;
      do
      {
        uint64_t v19 = v42;
        uint64_t v20 = v15;
        uint64_t v21 = ((uint64_t (*)(char *, uint64_t, uint64_t))v38)(v3, v18, v42);
        MEMORY[0x270FA5388](v21);
        *(&v31 - 2) = (uint64_t)v3;
        lazy protocol witness table accessor for type AspireHeSerializedCiphertext and conformance AspireHeSerializedCiphertext(&lazy protocol witness table cache variable for type AspireHeSerializedCiphertext and conformance AspireHeSerializedCiphertext, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedCiphertext);
        static Message.with(_:)();
        (*v37)(v3, v19);
        uint64_t v22 = v43;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v22 + 16) + 1, 1);
          uint64_t v22 = v43;
        }
        uint64_t v24 = (uint64_t)v40;
        uint64_t v23 = v41;
        unint64_t v26 = *(void *)(v22 + 16);
        unint64_t v25 = *(void *)(v22 + 24);
        if (v26 >= v25 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1);
          uint64_t v24 = (uint64_t)v40;
          uint64_t v23 = v41;
          uint64_t v22 = v43;
        }
        *(void *)(v22 + 16) = v26 + 1;
        outlined init with take of AspireHeSerializedCiphertext(v24, v22+ ((*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80))+ *(void *)(v23 + 72) * v26, type metadata accessor for AspireHeSerializedCiphertext);
        v18 += v36;
        --v14;
        uint64_t v15 = v20;
      }
      while (v14);
      uint64_t v27 = swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v27 = swift_bridgeObjectRelease();
      uint64_t v22 = MEMORY[0x263F8EE78];
    }
    uint64_t v28 = (uint64_t)v32;
    uint64_t v29 = v33;
    MEMORY[0x270FA5388](v27);
    *(&v31 - 2) = v22;
    *(&v31 - 1) = v29;
    lazy protocol witness table accessor for type AspireHeSerializedCiphertext and conformance AspireHeSerializedCiphertext(&lazy protocol witness table cache variable for type AspirePirEncryptedIndices and conformance AspirePirEncryptedIndices, (void (*)(uint64_t))type metadata accessor for AspirePirEncryptedIndices);
    static Message.with(_:)();
    swift_bridgeObjectRelease();
    uint64_t v30 = type metadata accessor for AspireApiPIRRequest(0);
    MEMORY[0x270FA5388](v30);
    *(&v31 - 2) = v29;
    *(&v31 - 1) = v28;
    lazy protocol witness table accessor for type AspireHeSerializedCiphertext and conformance AspireHeSerializedCiphertext(&lazy protocol witness table cache variable for type AspireApiPIRRequest and conformance AspireApiPIRRequest, (void (*)(uint64_t))type metadata accessor for AspireApiPIRRequest);
    static Message.with(_:)();
    return _s8CipherML18AspireApiPIRConfigVWOhTm_0(v28, type metadata accessor for AspirePirEncryptedIndices);
  }
  return result;
}

uint64_t KeywordPIRClient.decryptPIRResponse(_:keyword:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  v58[4] = a3;
  v58[3] = a2;
  uint64_t v4 = type metadata accessor for AspireHeSerializedFullCiphertext(0);
  MEMORY[0x270FA5388](v4 - 8);
  double v6 = (void *)((char *)v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = type metadata accessor for AspireHeSerializedSeededCiphertext(0);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v70 = (void *)((char *)v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for AspireHeSerializedCiphertext(0);
  uint64_t v61 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12 - 8);
  int64_t v14 = (char *)v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v80 = type metadata accessor for HE.SerializedCiphertext();
  uint64_t v15 = *(void *)(v80 - 8);
  MEMORY[0x270FA5388](v80);
  uint64_t v17 = (void *)((char *)v58 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v18 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18 - 8);
  uint64_t v65 = (uint64_t)v58 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = *a1;
  int64_t v22 = *(void *)(*a1 + 16);
  if (v22)
  {
    int64_t v77 = v11;
    uint64_t v83 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    int64_t v60 = v22;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22, 0);
    uint64_t v23 = 0;
    unint64_t v24 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
    v58[1] = v21;
    uint64_t v64 = v21 + v24;
    uint64_t v63 = *(void *)(v19 + 72);
    unsigned int v68 = *MEMORY[0x263F38838];
    uint64_t v74 = (void (**)(uint64_t *, uint64_t, uint64_t))(v15 + 104);
    unsigned int v67 = *MEMORY[0x263F38830];
    uint64_t v75 = v15;
    uint64_t v73 = v15 + 32;
    uint64_t v25 = v65;
    uint64_t v66 = v6;
    unsigned int v69 = v14;
    while (1)
    {
      _s8CipherML9SecretKeyVWOcTm_0(v64 + v63 * v23, v25, type metadata accessor for AspireHeSerializedCiphertextVec);
      uint64_t v26 = *(void *)v25;
      int64_t v27 = *(void *)(*(void *)v25 + 16);
      if (v27) {
        break;
      }
      uint64_t v47 = MEMORY[0x263F8EE78];
LABEL_23:
      _s8CipherML18AspireApiPIRConfigVWOhTm_0(v25, type metadata accessor for AspireHeSerializedCiphertextVec);
      uint64_t v50 = v83;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v50 + 16) + 1, 1);
        uint64_t v50 = v83;
      }
      int64_t v51 = v60;
      unint64_t v53 = *(void *)(v50 + 16);
      unint64_t v52 = *(void *)(v50 + 24);
      if (v53 >= v52 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v52 > 1, v53 + 1, 1);
        int64_t v51 = v60;
        uint64_t v50 = v83;
      }
      ++v23;
      *(void *)(v50 + 16) = v53 + 1;
      *(void *)(v50 + 8 * v53 + 32) = v47;
      if (v23 == v51)
      {
        swift_bridgeObjectRelease();
        goto LABEL_30;
      }
    }
    uint64_t v59 = v23;
    uint64_t v82 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v27, 0);
    uint64_t v28 = 0;
    uint64_t v29 = *(unsigned __int8 *)(v61 + 80);
    uint64_t v62 = v26;
    uint64_t v79 = v26 + ((v29 + 32) & ~v29);
    uint64_t v78 = *(void *)(v61 + 72);
    int64_t v76 = v27;
    while (1)
    {
      _s8CipherML9SecretKeyVWOcTm_0(v79 + v78 * v28, (uint64_t)v14, type metadata accessor for AspireHeSerializedCiphertext);
      uint64_t v30 = (uint64_t)v77;
      outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v14, (uint64_t)v77, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
      uint64_t v31 = type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(0);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 48))(v30, 1, v31) == 1) {
        break;
      }
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        outlined init with take of AspireHeSerializedCiphertext(v30, (uint64_t)v6, type metadata accessor for AspireHeSerializedFullCiphertext);
        uint64_t v32 = *v6;
        unint64_t v33 = v6[1];
        uint64_t v34 = v6[2];
        int64_t v35 = *(void *)(v34 + 16);
        if (v35)
        {
          unint64_t v71 = v6[1];
          uint64_t v72 = v32;
          outlined copy of Data._Representation(v32, v33);
          uint64_t v81 = MEMORY[0x263F8EE78];
          swift_bridgeObjectRetain();
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v35, 0);
          uint64_t v36 = 0;
          uint64_t v37 = v81;
          unint64_t v38 = *(void *)(v81 + 16);
          do
          {
            uint64_t v39 = *(unsigned int *)(v34 + 4 * v36 + 32);
            uint64_t v81 = v37;
            unint64_t v40 = *(void *)(v37 + 24);
            if (v38 >= v40 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v40 > 1, v38 + 1, 1);
              uint64_t v37 = v81;
            }
            ++v36;
            *(void *)(v37 + 16) = v38 + 1;
            *(void *)(v37 + 8 * v38++ + 32) = v39;
          }
          while (v35 != v36);
          swift_bridgeObjectRelease();
          double v6 = v66;
          unint64_t v33 = v71;
          uint64_t v32 = v72;
        }
        else
        {
          outlined copy of Data._Representation(*v6, v6[1]);
          uint64_t v37 = MEMORY[0x263F8EE78];
        }
        unint64_t v45 = v6[3];
        _s8CipherML18AspireApiPIRConfigVWOhTm_0((uint64_t)v6, type metadata accessor for AspireHeSerializedFullCiphertext);
        *uint64_t v17 = v32;
        v17[1] = v33;
        uint64_t v46 = v67;
        int64_t v14 = v69;
      }
      else
      {
        uint64_t v41 = v30;
        uint64_t v42 = v70;
        outlined init with take of AspireHeSerializedCiphertext(v41, (uint64_t)v70, type metadata accessor for AspireHeSerializedSeededCiphertext);
        uint64_t v43 = *v42;
        unint64_t v44 = v42[1];
        uint64_t v37 = v42[2];
        unint64_t v45 = v42[3];
        outlined copy of Data._Representation(*v42, v44);
        outlined copy of Data._Representation(v37, v45);
        _s8CipherML18AspireApiPIRConfigVWOhTm_0((uint64_t)v42, type metadata accessor for AspireHeSerializedSeededCiphertext);
        *uint64_t v17 = v43;
        v17[1] = v44;
        uint64_t v46 = v68;
      }
      v17[2] = v37;
      v17[3] = v45;
      (*v74)(v17, v46, v80);
      _s8CipherML18AspireApiPIRConfigVWOhTm_0((uint64_t)v14, type metadata accessor for AspireHeSerializedCiphertext);
      uint64_t v47 = v82;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v47 + 16) + 1, 1);
        uint64_t v47 = v82;
      }
      unint64_t v49 = *(void *)(v47 + 16);
      unint64_t v48 = *(void *)(v47 + 24);
      if (v49 >= v48 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v48 > 1, v49 + 1, 1);
        uint64_t v47 = v82;
      }
      ++v28;
      *(void *)(v47 + 16) = v49 + 1;
      (*(void (**)(unint64_t, uint64_t *, uint64_t))(v75 + 32))(v47+ ((*(unsigned __int8 *)(v75 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v75 + 80))+ *(void *)(v75 + 72) * v49, v17, v80);
      uint64_t v82 = v47;
      if (v28 == v76)
      {
        swift_bridgeObjectRelease();
        uint64_t v25 = v65;
        uint64_t v23 = v59;
        goto LABEL_23;
      }
    }
    type metadata accessor for CipherMLError();
    lazy protocol witness table accessor for type AspireHeSerializedCiphertext and conformance AspireHeSerializedCiphertext((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    _s8CipherML18AspireApiPIRConfigVWOhTm_0((uint64_t)v14, type metadata accessor for AspireHeSerializedCiphertext);
    swift_bridgeObjectRelease();
    swift_release();
    _s8CipherML18AspireApiPIRConfigVWOhTm_0(v65, type metadata accessor for AspireHeSerializedCiphertextVec);
    uint64_t v54 = v83;
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
LABEL_30:
    uint64_t v54 = v58[2] + *(int *)(type metadata accessor for KeywordPIRClient() + 28);
    uint64_t v55 = v58[5];
    uint64_t v56 = PIR.KeywordPirClient.decrypt(replies:keyword:)();
    if (!v55) {
      uint64_t v54 = v56;
    }
    swift_bridgeObjectRelease();
  }
  return v54;
}

uint64_t KeywordPIRClient.secretKey.getter@<X0>(uint64_t a1@<X8>)
{
  return _s8CipherML9SecretKeyVWOcTm_0(v1, a1, (uint64_t (*)(void))type metadata accessor for SecretKey);
}

uint64_t KeywordPIRClient.config.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for KeywordPIRClient();
  return _s8CipherML9SecretKeyVWOcTm_0(v1 + *(int *)(v3 + 20), a1, type metadata accessor for AspireApiPIRConfig);
}

uint64_t KeywordPIRClient.configID.getter()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for KeywordPIRClient() + 24);
  uint64_t v2 = *(void *)v1;
  outlined copy of Data._Representation(*(void *)v1, *(void *)(v1 + 8));
  return v2;
}

uint64_t KeywordPIRClient.client.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for KeywordPIRClient() + 28);
  uint64_t v4 = type metadata accessor for PIR.KeywordPirClient();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t KeywordPIRClient.shardLabel.getter()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for KeywordPIRClient() + 32);
  uint64_t v2 = *(void *)v1;
  outlined copy of ShardLabel(*(void *)v1, *(void *)(v1 + 8), *(unsigned char *)(v1 + 16));
  return v2;
}

uint64_t KeywordPIRClient.init(secretKey:config:configID:shardLabel:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X8>)
{
  uint64_t v114 = a1;
  uint64_t v112 = a3;
  unint64_t v113 = a4;
  uint64_t v117 = a2;
  uint64_t v94 = a8;
  int v10 = a7 & 1;
  uint64_t v97 = type metadata accessor for HE.SerializedSecretKey();
  uint64_t v102 = *(void *)(v97 - 8);
  MEMORY[0x270FA5388](v97);
  unsigned int v95 = (char *)&v85 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v101 = (uint64_t)&v85 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v99 = type metadata accessor for AspirePirKeywordPirParameters(0);
  uint64_t v98 = *(void *)(v99 - 8);
  MEMORY[0x270FA5388](v99);
  uint64_t v100 = (uint64_t *)((char *)&v85 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v93 = type metadata accessor for PIR.KeywordPirClient();
  uint64_t v92 = *(void *)(v93 - 8);
  MEMORY[0x270FA5388](v93);
  unsigned int v96 = (char *)&v85 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for PIR.PirAlgorithm();
  uint64_t v109 = *(void *)(v16 - 8);
  uint64_t v110 = v16;
  MEMORY[0x270FA5388](v16);
  uint64_t v104 = (char *)&v85 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  MEMORY[0x270FA5388](v18 - 8);
  uint64_t v107 = (uint64_t)&v85 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v106 = type metadata accessor for AspireHeEncryptionParameters(0);
  uint64_t v105 = *(void *)(v106 - 8);
  MEMORY[0x270FA5388](v106);
  uint64_t v108 = (uint64_t *)((char *)&v85 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v21 = type metadata accessor for HE.EncryptionParams();
  MEMORY[0x270FA5388](v21 - 8);
  uint64_t v111 = (uint64_t)&v85 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for PIR.PirParams();
  uint64_t v103 = *(void *)(v23 - 8);
  uint64_t v24 = MEMORY[0x270FA5388](v23);
  uint64_t v26 = (char *)&v85 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v24);
  uint64_t v28 = (char *)&v85 - v27;
  uint64_t v29 = type metadata accessor for AspireApiPIRShardConfig(0);
  MEMORY[0x270FA5388](v29);
  uint64_t v31 = (uint64_t *)((char *)&v85 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v32 = v115;
  AspireApiPIRConfig.shardConfig(at:)(a5, a6, v10, v31);
  if (v32)
  {
    outlined consume of ShardLabel(a5, a6, v10);
    outlined consume of Data._Representation(v112, v113);
    _s8CipherML18AspireApiPIRConfigVWOhTm_0(v117, type metadata accessor for AspireApiPIRConfig);
    return _s8CipherML18AspireApiPIRConfigVWOhTm_0(v114, (uint64_t (*)(void))type metadata accessor for SecretKey);
  }
  uint64_t v87 = v29;
  uint64_t v86 = v26;
  unint64_t v88 = v28;
  uint64_t v85 = v23;
  uint64_t v91 = v31;
  uint64_t v115 = 0;
  int v90 = v10;
  uint64_t v89 = a5;
  uint64_t v34 = a6;
  uint64_t v35 = *(int *)(type metadata accessor for AspireApiPIRConfig(0) + 20);
  uint64_t v36 = v117;
  uint64_t v37 = *(void *)(v117 + v35)
      + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__encryptionParameters;
  swift_beginAccess();
  uint64_t v38 = v107;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v37, v107, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v105 + 48))(v38, 1, v106) == 1)
  {
    uint64_t v39 = v108;
    *uint64_t v108 = 0;
    v39[1] = 0;
    void v39[2] = MEMORY[0x263F8EE78];
    v39[3] = 0;
    *((unsigned char *)v39 + 32) = 1;
    v39[5] = 0;
    *((unsigned char *)v39 + 48) = 1;
    v39[7] = 0;
    *((unsigned char *)v39 + 64) = 1;
    UnknownStorage.init()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v38, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  }
  else
  {
    uint64_t v39 = v108;
    outlined init with take of AspireHeSerializedCiphertext(v38, (uint64_t)v108, type metadata accessor for AspireHeEncryptionParameters);
  }
  char v40 = v90;
  uint64_t v41 = v91;
  uint64_t v42 = v110;
  uint64_t v43 = v109;
  uint64_t v44 = v115;
  AspireHeEncryptionParameters.cryptokit()(v111);
  if (v44)
  {
    outlined consume of ShardLabel(v89, v34, v40);
    outlined consume of Data._Representation(v112, v113);
    _s8CipherML18AspireApiPIRConfigVWOhTm_0(v36, type metadata accessor for AspireApiPIRConfig);
    _s8CipherML18AspireApiPIRConfigVWOhTm_0(v114, (uint64_t (*)(void))type metadata accessor for SecretKey);
    _s8CipherML18AspireApiPIRConfigVWOhTm_0((uint64_t)v39, type metadata accessor for AspireHeEncryptionParameters);
    return _s8CipherML18AspireApiPIRConfigVWOhTm_0((uint64_t)v41, type metadata accessor for AspireApiPIRShardConfig);
  }
  uint64_t v109 = v34;
  uint64_t v115 = 0;
  _s8CipherML18AspireApiPIRConfigVWOhTm_0((uint64_t)v39, type metadata accessor for AspireHeEncryptionParameters);
  uint64_t v110 = *(void *)(v36 + v35);
  uint64_t v45 = v110
      + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__algorithm;
  swift_beginAccess();
  if (*(unsigned char *)(v45 + 8) != 1) {
    goto LABEL_36;
  }
  (*(void (**)(char *, void, uint64_t))(v43 + 104))(v104, **((unsigned int **)&unk_26527EAA8 + *(void *)v45), v42);
  if ((*v41 & 0x8000000000000000) != 0) {
    goto LABEL_31;
  }
  uint64_t v46 = v89;
  if ((v41[1] & 0x8000000000000000) != 0)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  uint64_t v47 = v41[2];
  int64_t v48 = *(void *)(v47 + 16);
  if (v48)
  {
    uint64_t v116 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v48, 0);
    uint64_t v49 = 0;
    uint64_t v50 = v116;
    while (1)
    {
      uint64_t v51 = *(void *)(v47 + 8 * v49 + 32);
      if (v51 < 0) {
        break;
      }
      uint64_t v116 = v50;
      unint64_t v53 = *(void *)(v50 + 16);
      unint64_t v52 = *(void *)(v50 + 24);
      if (v53 >= v52 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v52 > 1, v53 + 1, 1);
        uint64_t v50 = v116;
      }
      ++v49;
      *(void *)(v50 + 16) = v53 + 1;
      *(void *)(v50 + 8 * v53 + 32) = v51;
      if (v48 == v49)
      {
        swift_bridgeObjectRelease();
        uint64_t v46 = v89;
        char v40 = v90;
        goto LABEL_18;
      }
    }
    __break(1u);
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
LABEL_18:
  uint64_t v54 = (void *)(v110
                 + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__batchSize);
  swift_beginAccess();
  uint64_t v55 = v102;
  uint64_t v56 = (uint64_t)v91;
  if ((*v54 & 0x8000000000000000) != 0)
  {
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  uint64_t v57 = (char *)v91 + *(int *)(v87 + 40);
  uint64_t v58 = v103;
  uint64_t v59 = v88;
  if ((v57[8] & 1) == 0 && (*(void *)v57 & 0x8000000000000000) != 0) {
    goto LABEL_34;
  }
  uint64_t v60 = v115;
  PIR.PirParams.init(encryptionParams:algorithm:entriesCount:entrySize:dimensions:batchSize:internalBatchSize:compressResponse:)();
  if (v60)
  {
    outlined consume of ShardLabel(v46, v109, v40);
    outlined consume of Data._Representation(v112, v113);
    _s8CipherML18AspireApiPIRConfigVWOhTm_0(v117, type metadata accessor for AspireApiPIRConfig);
    _s8CipherML18AspireApiPIRConfigVWOhTm_0(v114, (uint64_t (*)(void))type metadata accessor for SecretKey);
    return _s8CipherML18AspireApiPIRConfigVWOhTm_0(v56, type metadata accessor for AspireApiPIRShardConfig);
  }
  uint64_t v115 = 0;
  (*(void (**)(char *, char *, uint64_t))(v58 + 16))(v86, v59, v85);
  uint64_t v61 = v110
      + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__keywordPirParams;
  swift_beginAccess();
  uint64_t v62 = v101;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v61, v101, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  uint64_t v63 = v99;
  int v64 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v98 + 48))(v62, 1, v99);
  uint64_t v65 = v109;
  uint64_t v66 = v117;
  unsigned int v67 = v100;
  if (v64 == 1)
  {
    *uint64_t v100 = 0;
    *((unsigned char *)v67 + 8) = 0;
    UnknownStorage.init()();
    uint64_t v68 = v63;
    unsigned int v69 = (char *)v67 + *(int *)(v63 + 28);
    uint64_t v70 = type metadata accessor for AspirePirSymmetricPirClientConfig(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v70 - 8) + 56))(v69, 1, 1, v70);
    uint64_t v71 = *(int *)(v68 + 32);
    uint64_t v58 = v103;
    uint64_t v72 = (char *)v67 + v71;
    uint64_t v73 = type metadata accessor for AspirePirPIRShardingFunction(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v73 - 8) + 56))(v72, 1, 1, v73);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v62, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  }
  else
  {
    outlined init with take of AspireHeSerializedCiphertext(v62, (uint64_t)v100, type metadata accessor for AspirePirKeywordPirParameters);
  }
  uint64_t v74 = *v67;
  _s8CipherML18AspireApiPIRConfigVWOhTm_0((uint64_t)v67, type metadata accessor for AspirePirKeywordPirParameters);
  if (v74 < 0) {
    goto LABEL_35;
  }
  uint64_t v75 = type metadata accessor for SecretKey();
  uint64_t v76 = v114;
  (*(void (**)(char *, uint64_t, uint64_t))(v55 + 16))(v95, v114 + *(int *)(v75 + 20), v97);
  int64_t v77 = v96;
  uint64_t v78 = v115;
  PIR.KeywordPirClient.init(pirParams:hashFunctionCount:secretKey:)();
  if (v78)
  {
    outlined consume of ShardLabel(v46, v65, v90);
    outlined consume of Data._Representation(v112, v113);
    _s8CipherML18AspireApiPIRConfigVWOhTm_0(v66, type metadata accessor for AspireApiPIRConfig);
    _s8CipherML18AspireApiPIRConfigVWOhTm_0(v76, (uint64_t (*)(void))type metadata accessor for SecretKey);
    (*(void (**)(char *, uint64_t))(v58 + 8))(v88, v85);
    return _s8CipherML18AspireApiPIRConfigVWOhTm_0((uint64_t)v91, type metadata accessor for AspireApiPIRShardConfig);
  }
  else
  {
    uint64_t v115 = 0;
    BOOL v79 = v90 != 0;
    (*(void (**)(char *, uint64_t))(v58 + 8))(v88, v85);
    _s8CipherML18AspireApiPIRConfigVWOhTm_0((uint64_t)v91, type metadata accessor for AspireApiPIRShardConfig);
    uint64_t v80 = v94;
    outlined init with take of AspireHeSerializedCiphertext(v76, v94, (uint64_t (*)(void))type metadata accessor for SecretKey);
    uint64_t v81 = (int *)type metadata accessor for KeywordPIRClient();
    uint64_t v82 = v80 + v81[8];
    *(void *)uint64_t v82 = v46;
    *(void *)(v82 + 8) = v65;
    *(unsigned char *)(v82 + 16) = v79;
    outlined init with take of AspireHeSerializedCiphertext(v66, v80 + v81[5], type metadata accessor for AspireApiPIRConfig);
    uint64_t v83 = (void *)(v80 + v81[6]);
    unint64_t v84 = v113;
    *uint64_t v83 = v112;
    v83[1] = v84;
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v92 + 32))(v80 + v81[7], v77, v93);
  }
}

uint64_t type metadata accessor for KeywordPIRClient()
{
  uint64_t result = type metadata singleton initialization cache for KeywordPIRClient;
  if (!type metadata singleton initialization cache for KeywordPIRClient) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t closure #2 in KeywordPIRClient.constructPIRRequest(with:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for AspirePirKeywordPirParameters(0);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *a1 = a2;
  uint64_t v13 = a3 + *(int *)(type metadata accessor for KeywordPIRClient() + 20);
  uint64_t v14 = *(void *)(v13 + *(int *)(type metadata accessor for AspireApiPIRConfig(0) + 20))
      + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__keywordPirParams;
  swift_beginAccess();
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v14, (uint64_t)v8, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    *(void *)uint64_t v12 = 0;
    v12[8] = 0;
    UnknownStorage.init()();
    uint64_t v15 = &v12[*(int *)(v9 + 28)];
    uint64_t v16 = type metadata accessor for AspirePirSymmetricPirClientConfig(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v15, 1, 1, v16);
    uint64_t v17 = &v12[*(int *)(v9 + 32)];
    uint64_t v18 = type metadata accessor for AspirePirPIRShardingFunction(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v17, 1, 1, v18);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v8, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  }
  else
  {
    outlined init with take of AspireHeSerializedCiphertext((uint64_t)v8, (uint64_t)v12, type metadata accessor for AspirePirKeywordPirParameters);
  }
  uint64_t v19 = *(void *)v12;
  uint64_t result = _s8CipherML18AspireApiPIRConfigVWOhTm_0((uint64_t)v12, type metadata accessor for AspirePirKeywordPirParameters);
  a1[1] = v19;
  return result;
}

uint64_t closure #3 in KeywordPIRClient.constructPIRRequest(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v32 = a3;
  uint64_t v5 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = type metadata accessor for AspirePirEncryptedIndices(0);
  uint64_t v9 = *(void *)(v33 - 8);
  MEMORY[0x270FA5388](v33);
  uint64_t v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for KeywordPIRClient();
  uint64_t v13 = (unint64_t *)(a2 + *(int *)(v12 + 32));
  unint64_t v14 = *v13;
  char v15 = *((unsigned char *)v13 + 16);
  uint64_t v36 = v5;
  uint64_t v34 = v12;
  uint64_t v35 = v8;
  if ((v15 & 1) == 0)
  {
    unint64_t v16 = v13[1];
    uint64_t v17 = v6;
    uint64_t v18 = a2;
    uint64_t v19 = (unint64_t *)(a1 + *(int *)(type metadata accessor for AspireApiPIRRequest(0) + 36));
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    unint64_t *v19 = v14;
    v19[1] = v16;
    a2 = v18;
    uint64_t v6 = v17;
    goto LABEL_6;
  }
  if ((v14 & 0x8000000000000000) == 0 && !HIDWORD(v14))
  {
    *(_DWORD *)a1 = v14;
LABEL_6:
    _s8CipherML9SecretKeyVWOcTm_0(v32, (uint64_t)v11, type metadata accessor for AspirePirEncryptedIndices);
    uint64_t v20 = type metadata accessor for AspireApiPIRRequest(0);
    uint64_t v21 = a1 + *(int *)(v20 + 28);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v21, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
    outlined init with take of AspireHeSerializedCiphertext((uint64_t)v11, v21, type metadata accessor for AspirePirEncryptedIndices);
    uint64_t v22 = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56))(v21, 0, 1, v33);
    MEMORY[0x270FA5388](v22);
    lazy protocol witness table accessor for type AspireHeSerializedCiphertext and conformance AspireHeSerializedCiphertext(&lazy protocol witness table cache variable for type AspireApiEvaluationKeyMetadata and conformance AspireApiEvaluationKeyMetadata, (void (*)(uint64_t))type metadata accessor for AspireApiEvaluationKeyMetadata);
    uint64_t v23 = (uint64_t)v35;
    uint64_t v24 = v36;
    static Message.with(_:)();
    uint64_t v25 = a1 + *(int *)(v20 + 32);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v25, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
    outlined init with take of AspireHeSerializedCiphertext(v23, v25, type metadata accessor for AspireApiEvaluationKeyMetadata);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56))(v25, 0, 1, v24);
    uint64_t v26 = (uint64_t *)(a2 + *(int *)(v34 + 24));
    uint64_t v27 = *v26;
    unint64_t v28 = v26[1];
    uint64_t v29 = *(void *)(a1 + 8);
    unint64_t v30 = *(void *)(a1 + 16);
    outlined copy of Data._Representation(*v26, v28);
    uint64_t result = outlined consume of Data._Representation(v29, v30);
    *(void *)(a1 + 8) = v27;
    *(void *)(a1 + 16) = v28;
    return result;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t closure #1 in closure #3 in KeywordPIRClient.constructPIRRequest(with:)(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = (char *)a2 + *(int *)(type metadata accessor for KeywordPIRClient() + 20);
  uint64_t v4 = (uint64_t *)(*(void *)&v3[*(int *)(type metadata accessor for AspireApiPIRConfig(0) + 20)]
                 + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__evaluationKeyConfigHash);
  swift_beginAccess();
  uint64_t v6 = *v4;
  unint64_t v5 = v4[1];
  uint64_t v7 = a1[1];
  unint64_t v8 = a1[2];
  outlined copy of Data._Representation(v6, v5);
  uint64_t result = outlined consume of Data._Representation(v7, v8);
  a1[1] = v6;
  a1[2] = v5;
  return result;
}

uint64_t partial apply for closure #2 in KeywordPIRClient.constructPIRRequest(with:)(void *a1)
{
  return closure #2 in KeywordPIRClient.constructPIRRequest(with:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t partial apply for closure #3 in KeywordPIRClient.constructPIRRequest(with:)(uint64_t a1)
{
  return closure #3 in KeywordPIRClient.constructPIRRequest(with:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t _s8CipherML18AspireApiPIRConfigVWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t destroy for ShardLabel(uint64_t a1)
{
  return outlined consume of ShardLabel(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for ShardLabel(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of ShardLabel(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for ShardLabel(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of ShardLabel(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  char v8 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of ShardLabel(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for ShardLabel(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  char v6 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of ShardLabel(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for ShardLabel(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ShardLabel(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for ShardLabel(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t destructiveInjectEnumTag for ShardLabel(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ShardLabel()
{
  return &type metadata for ShardLabel;
}

uint64_t *initializeBufferWithCopyOfBuffer for KeywordPIRClient(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v30 = *a2;
    *int v4 = *a2;
    int v4 = (uint64_t *)(v30 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    uint64_t v7 = *(int *)(type metadata accessor for SecretKey() + 20);
    char v8 = (char *)v4 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for HE.SerializedSecretKey();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    uint64_t v11 = a3[5];
    uint64_t v12 = (char *)v4 + v11;
    uint64_t v13 = (char *)a2 + v11;
    uint64_t v14 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
    uint64_t v15 = type metadata accessor for AspireApiPIRConfig(0);
    *(void *)&v12[*(int *)(v15 + 20)] = *(void *)&v13[*(int *)(v15 + 20)];
    uint64_t v16 = a3[6];
    uint64_t v17 = (uint64_t *)((char *)v4 + v16);
    uint64_t v18 = (uint64_t *)((char *)a2 + v16);
    uint64_t v19 = *v18;
    unint64_t v20 = v18[1];
    swift_retain();
    outlined copy of Data._Representation(v19, v20);
    *uint64_t v17 = v19;
    v17[1] = v20;
    uint64_t v21 = a3[7];
    uint64_t v22 = (char *)v4 + v21;
    uint64_t v23 = (char *)a2 + v21;
    uint64_t v24 = type metadata accessor for PIR.KeywordPirClient();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 16))(v22, v23, v24);
    uint64_t v25 = a3[8];
    uint64_t v26 = (char *)v4 + v25;
    uint64_t v27 = (char *)a2 + v25;
    uint64_t v28 = *(void *)v27;
    uint64_t v29 = *((void *)v27 + 1);
    LOBYTE(v22) = v27[16];
    outlined copy of ShardLabel(*(void *)v27, v29, (char)v22);
    *(void *)uint64_t v26 = v28;
    *((void *)v26 + 1) = v29;
    v26[16] = (char)v22;
  }
  return v4;
}

uint64_t destroy for KeywordPIRClient(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + *(int *)(type metadata accessor for SecretKey() + 20);
  uint64_t v5 = type metadata accessor for HE.SerializedSecretKey();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = a1 + a2[5];
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  type metadata accessor for AspireApiPIRConfig(0);
  swift_release();
  outlined consume of Data._Representation(*(void *)(a1 + a2[6]), *(void *)(a1 + a2[6] + 8));
  uint64_t v8 = a1 + a2[7];
  uint64_t v9 = type metadata accessor for PIR.KeywordPirClient();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  uint64_t v10 = a1 + a2[8];
  uint64_t v11 = *(void *)v10;
  uint64_t v12 = *(void *)(v10 + 8);
  char v13 = *(unsigned char *)(v10 + 16);
  return outlined consume of ShardLabel(v11, v12, v13);
}

void *initializeWithCopy for KeywordPIRClient(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(type metadata accessor for SecretKey() + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for HE.SerializedSecretKey();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  uint64_t v10 = a3[5];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
  uint64_t v14 = type metadata accessor for AspireApiPIRConfig(0);
  *(void *)&v11[*(int *)(v14 + 20)] = *(void *)&v12[*(int *)(v14 + 20)];
  uint64_t v15 = a3[6];
  uint64_t v16 = (void *)((char *)a1 + v15);
  uint64_t v17 = (void *)((char *)a2 + v15);
  uint64_t v18 = *v17;
  unint64_t v19 = v17[1];
  swift_retain();
  outlined copy of Data._Representation(v18, v19);
  *uint64_t v16 = v18;
  v16[1] = v19;
  uint64_t v20 = a3[7];
  uint64_t v21 = (char *)a1 + v20;
  uint64_t v22 = (char *)a2 + v20;
  uint64_t v23 = type metadata accessor for PIR.KeywordPirClient();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 16))(v21, v22, v23);
  uint64_t v24 = a3[8];
  uint64_t v25 = (char *)a1 + v24;
  uint64_t v26 = (char *)a2 + v24;
  uint64_t v27 = *(void *)v26;
  uint64_t v28 = *((void *)v26 + 1);
  LOBYTE(v21) = v26[16];
  outlined copy of ShardLabel(*(void *)v26, v28, (char)v21);
  *(void *)uint64_t v25 = v27;
  *((void *)v25 + 1) = v28;
  v25[16] = (char)v21;
  return a1;
}

void *assignWithCopy for KeywordPIRClient(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(type metadata accessor for SecretKey() + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for HE.SerializedSecretKey();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = a3[5];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24))(v11, v12, v13);
  uint64_t v14 = type metadata accessor for AspireApiPIRConfig(0);
  *(void *)&v11[*(int *)(v14 + 20)] = *(void *)&v12[*(int *)(v14 + 20)];
  swift_retain();
  swift_release();
  uint64_t v15 = a3[6];
  uint64_t v16 = (void *)((char *)a1 + v15);
  uint64_t v17 = (void *)((char *)a2 + v15);
  uint64_t v18 = *v17;
  unint64_t v19 = v17[1];
  outlined copy of Data._Representation(*v17, v19);
  uint64_t v20 = *v16;
  unint64_t v21 = v16[1];
  *uint64_t v16 = v18;
  v16[1] = v19;
  outlined consume of Data._Representation(v20, v21);
  uint64_t v22 = a3[7];
  uint64_t v23 = (char *)a1 + v22;
  uint64_t v24 = (char *)a2 + v22;
  uint64_t v25 = type metadata accessor for PIR.KeywordPirClient();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 24))(v23, v24, v25);
  uint64_t v26 = a3[8];
  uint64_t v27 = (char *)a1 + v26;
  uint64_t v28 = (char *)a2 + v26;
  uint64_t v29 = *(void *)v28;
  uint64_t v30 = *((void *)v28 + 1);
  LOBYTE(v23) = v28[16];
  outlined copy of ShardLabel(*(void *)v28, v30, (char)v23);
  uint64_t v31 = *(void *)v27;
  uint64_t v32 = *((void *)v27 + 1);
  char v33 = v27[16];
  *(void *)uint64_t v27 = v29;
  *((void *)v27 + 1) = v30;
  v27[16] = (char)v23;
  outlined consume of ShardLabel(v31, v32, v33);
  return a1;
}

void *initializeWithTake for KeywordPIRClient(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(type metadata accessor for SecretKey() + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for HE.SerializedSecretKey();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[5];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
  uint64_t v14 = type metadata accessor for AspireApiPIRConfig(0);
  *(void *)&v11[*(int *)(v14 + 20)] = *(void *)&v12[*(int *)(v14 + 20)];
  uint64_t v15 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  uint64_t v16 = (char *)a1 + v15;
  uint64_t v17 = (char *)a2 + v15;
  uint64_t v18 = type metadata accessor for PIR.KeywordPirClient();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v16, v17, v18);
  uint64_t v19 = a3[8];
  uint64_t v20 = (char *)a1 + v19;
  unint64_t v21 = (char *)a2 + v19;
  *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
  unsigned char v20[16] = v21[16];
  return a1;
}

void *assignWithTake for KeywordPIRClient(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(type metadata accessor for SecretKey() + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for HE.SerializedSecretKey();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = a3[5];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 40))(v11, v12, v13);
  uint64_t v14 = type metadata accessor for AspireApiPIRConfig(0);
  *(void *)&v11[*(int *)(v14 + 20)] = *(void *)&v12[*(int *)(v14 + 20)];
  swift_release();
  uint64_t v15 = a3[6];
  uint64_t v16 = *(void *)((char *)a1 + v15);
  unint64_t v17 = *(void *)((char *)a1 + v15 + 8);
  *(_OWORD *)((char *)a1 + v15) = *(_OWORD *)((char *)a2 + v15);
  outlined consume of Data._Representation(v16, v17);
  uint64_t v18 = a3[7];
  uint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = (char *)a2 + v18;
  uint64_t v21 = type metadata accessor for PIR.KeywordPirClient();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 40))(v19, v20, v21);
  uint64_t v22 = a3[8];
  uint64_t v23 = (char *)a1 + v22;
  uint64_t v24 = (char *)a2 + v22;
  char v25 = v24[16];
  uint64_t v26 = *(void *)v23;
  uint64_t v27 = *((void *)v23 + 1);
  char v28 = v23[16];
  *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
  v23[16] = v25;
  outlined consume of ShardLabel(v26, v27, v28);
  return a1;
}

uint64_t getEnumTagSinglePayload for KeywordPIRClient(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_249D719E8);
}

uint64_t sub_249D719E8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SecretKey();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
  }
  else
  {
    uint64_t v11 = type metadata accessor for AspireApiPIRConfig(0);
    if (*(_DWORD *)(*(void *)(v11 - 8) + 84) == a2)
    {
      uint64_t v8 = v11;
      uint64_t v12 = *(void *)(v11 - 8);
      uint64_t v13 = a3[5];
    }
    else
    {
      uint64_t v14 = type metadata accessor for PIR.KeywordPirClient();
      if (*(_DWORD *)(*(void *)(v14 - 8) + 84) != a2)
      {
        unsigned int v16 = *(unsigned __int8 *)(a1 + a3[8] + 16);
        if (v16 > 1) {
          return (v16 ^ 0xFF) + 1;
        }
        else {
          return 0;
        }
      }
      uint64_t v8 = v14;
      uint64_t v12 = *(void *)(v14 - 8);
      uint64_t v13 = a3[7];
    }
    uint64_t v10 = a1 + v13;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for KeywordPIRClient(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_249D71B5C);
}

uint64_t sub_249D71B5C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = type metadata accessor for SecretKey();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t v13 = type metadata accessor for AspireApiPIRConfig(0);
    if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
    {
      uint64_t v10 = v13;
      uint64_t v14 = *(void *)(v13 - 8);
      uint64_t v15 = a4[5];
    }
    else
    {
      uint64_t result = type metadata accessor for PIR.KeywordPirClient();
      if (*(_DWORD *)(*(void *)(result - 8) + 84) != a3)
      {
        *(unsigned char *)(a1 + a4[8] + 16) = -(char)a2;
        return result;
      }
      uint64_t v10 = result;
      uint64_t v14 = *(void *)(result - 8);
      uint64_t v15 = a4[7];
    }
    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata completion function for KeywordPIRClient()
{
  uint64_t result = type metadata accessor for SecretKey();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for AspireApiPIRConfig(319);
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for PIR.KeywordPirClient();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #3 in KeywordPIRClient.constructPIRRequest(with:)(void *a1)
{
  return closure #1 in closure #3 in KeywordPIRClient.constructPIRRequest(with:)(a1, *(void **)(v1 + 16));
}

uint64_t lazy protocol witness table accessor for type AspireHeSerializedCiphertext and conformance AspireHeSerializedCiphertext(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with take of AspireHeSerializedCiphertext(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t KVSKeyStorage.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  swift_defaultActor_initialize();
  id v1 = objc_allocWithZone(MEMORY[0x263F08C40]);
  unint64_t v2 = (void *)MEMORY[0x24C5B33F0](0xD000000000000013, 0x8000000249E94420);
  id v3 = objc_msgSend(v1, sel_initWithStoreIdentifier_type_, v2, 1);

  *(void *)(v0 + 112) = v3;
  return v0;
}

id KVSKeyStorage.ukvs.getter()
{
  return *(id *)(v0 + 112);
}

uint64_t KVSKeyStorage.init()()
{
  swift_defaultActor_initialize();
  id v1 = objc_allocWithZone(MEMORY[0x263F08C40]);
  unint64_t v2 = (void *)MEMORY[0x24C5B33F0](0xD000000000000013, 0x8000000249E94420);
  id v3 = objc_msgSend(v1, sel_initWithStoreIdentifier_type_, v2, 1);

  *(void *)(v0 + 112) = v3;
  return v0;
}

uint64_t KVSKeyStorage.get(group:)@<X0>(uint64_t a1@<X8>)
{
  id v3 = *(void **)(v1 + 112);
  uint64_t v4 = (void *)MEMORY[0x24C5B33F0]();
  id v5 = objc_msgSend(v3, sel_dataForKey_, v4);

  if (v5)
  {
    uint64_t v6 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v8 = v7;

    type metadata accessor for PropertyListDecoder();
    swift_allocObject();
    PropertyListDecoder.init()();
    uint64_t v9 = type metadata accessor for UserIdentifier();
    lazy protocol witness table accessor for type UserIdentifier and conformance UserIdentifier(&lazy protocol witness table cache variable for type UserIdentifier and conformance UserIdentifier, 255, (void (*)(uint64_t))type metadata accessor for UserIdentifier);
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(a1, 0, 1, v9);
    swift_release();
    return outlined consume of Data._Representation(v6, v8);
  }
  else
  {
    uint64_t v11 = type metadata accessor for UserIdentifier();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(a1, 1, 1, v11);
  }
}

void KVSKeyStorage.set(group:userId:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserIdentifier?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UserIdentifier();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of UserIdentifier?(a3, (uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    outlined destroy of UserIdentifier?((uint64_t)v10);
    uint64_t v15 = *(void **)(v4 + 112);
    unsigned int v16 = (void *)MEMORY[0x24C5B33F0](a1, a2);
    objc_msgSend(v15, sel_removeObjectForKey_, v16);
  }
  else
  {
    outlined init with take of UserIdentifier((uint64_t)v10, (uint64_t)v14);
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    PropertyListEncoder.init()();
    dispatch thunk of PropertyListEncoder.outputFormat.setter();
    lazy protocol witness table accessor for type UserIdentifier and conformance UserIdentifier(&lazy protocol witness table cache variable for type UserIdentifier and conformance UserIdentifier, 255, (void (*)(uint64_t))type metadata accessor for UserIdentifier);
    uint64_t v17 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    unint64_t v19 = v18;
    uint64_t v20 = *(void **)(v4 + 112);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    uint64_t v22 = (void *)MEMORY[0x24C5B33F0](a1, a2);
    objc_msgSend(v20, sel_setData_forKey_, isa, v22);
    outlined consume of Data._Representation(v17, v19);
    swift_release();

    outlined destroy of UserIdentifier((uint64_t)v14);
  }
}

uint64_t KVSKeyStorage.synchronize()()
{
  *(void *)(v1 + 16) = v0;
  return MEMORY[0x270FA2498](KVSKeyStorage.synchronize(), v0, 0);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  unint64_t v2 = *v1;
  *(void *)(*v1 + 32) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 16);
  if (v0) {
    uint64_t v4 = KVSKeyStorage.synchronize();
  }
  else {
    uint64_t v4 = XPCHandler.configureUseCaseGroup(withName:useCaseGroup:);
  }
  return MEMORY[0x270FA2498](v4, v3, 0);
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t KVSKeyStorage.synchronize()(uint64_t a1, uint64_t a2)
{
  lazy protocol witness table accessor for type UserIdentifier and conformance UserIdentifier(&lazy protocol witness table cache variable for type KVSKeyStorage and conformance KVSKeyStorage, a2, (void (*)(uint64_t))type metadata accessor for KVSKeyStorage);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 24) = v3;
  *uint64_t v3 = v2;
  v3[1] = KVSKeyStorage.synchronize();
  return MEMORY[0x270FA2360]();
}

void closure #1 in KVSKeyStorage.synchronize()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  double v7 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = *(void **)(a2 + 112);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4, v7);
  unint64_t v9 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v10 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v10 + v9, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = partial apply for closure #1 in closure #1 in KVSKeyStorage.synchronize();
  aBlock[5] = v10;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ();
  aBlock[3] = &block_descriptor_2;
  uint64_t v11 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(v8, sel_synchronizeWithCompletionHandler_, v11);
  _Block_release(v11);
}

uint64_t closure #1 in closure #1 in KVSKeyStorage.synchronize()(void *a1)
{
  if (one-time initialization token for daemon != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.daemon);
  id v3 = a1;
  id v4 = a1;
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    double v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = (void *)swift_slowAlloc();
    *(_DWORD *)double v7 = 138543362;
    if (a1)
    {
      id v9 = a1;
      uint64_t v10 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
    }
    else
    {
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v10 = 0;
    }
    *uint64_t v8 = v10;

    _os_log_impl(&dword_249C3F000, v5, v6, "KVSKeyStorage failed to synchronize: %{public}@", v7, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x24C5B4790](v8, -1, -1);
    MEMORY[0x24C5B4790](v7, -1, -1);

    if (!a1) {
      goto LABEL_10;
    }
LABEL_7:
    id v11 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
    return CheckedContinuation.resume(throwing:)();
  }

  if (a1) {
    goto LABEL_7;
  }
LABEL_10:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  return CheckedContinuation.resume(returning:)();
}

void thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ()(uint64_t a1, void *a2)
{
  id v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3(a2);
  swift_release();
}

uint64_t KVSKeyStorage.deinit()
{
  swift_defaultActor_destroy();
  return v0;
}

uint64_t KVSKeyStorage.__deallocating_deinit()
{
  swift_defaultActor_destroy();
  return MEMORY[0x270FA2418](v0);
}

uint64_t KVSKeyStorage.unownedExecutor.getter()
{
  return v0;
}

uint64_t protocol witness for KeyStorage.get(group:) in conformance KVSKeyStorage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  return MEMORY[0x270FA2498](protocol witness for KeyStorage.get(group:) in conformance KVSKeyStorage, v3, 0);
}

uint64_t protocol witness for KeyStorage.get(group:) in conformance KVSKeyStorage()
{
  KVSKeyStorage.get(group:)(*(void *)(v0 + 16));
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t protocol witness for KeyStorage.set(group:userId:) in conformance KVSKeyStorage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  return MEMORY[0x270FA2498](protocol witness for KeyStorage.set(group:userId:) in conformance KVSKeyStorage, v3, 0);
}

uint64_t protocol witness for KeyStorage.set(group:userId:) in conformance KVSKeyStorage()
{
  KVSKeyStorage.set(group:userId:)(v0[2], v0[3], v0[4]);
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t protocol witness for KeyStorage.synchronize() in conformance KVSKeyStorage()
{
  *(void *)(v1 + 16) = v0;
  return MEMORY[0x270FA2498](KVSKeyStorage.synchronize(), v0, 0);
}

uint64_t outlined init with copy of UserIdentifier?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserIdentifier?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of UserIdentifier?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserIdentifier?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with take of UserIdentifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UserIdentifier();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t lazy protocol witness table accessor for type UserIdentifier and conformance UserIdentifier(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for KVSKeyStorage()
{
  return self;
}

void partial apply for closure #1 in KVSKeyStorage.synchronize()(uint64_t a1)
{
  closure #1 in KVSKeyStorage.synchronize()(a1, v1);
}

uint64_t method lookup function for KVSKeyStorage(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for KVSKeyStorage);
}

uint64_t dispatch thunk of KVSKeyStorage.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of KVSKeyStorage.get(group:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of KVSKeyStorage.set(group:userId:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of KVSKeyStorage.synchronize()()
{
  uint64_t v4 = (uint64_t (*)(void))(*(void *)(*(void *)v0 + 120) + **(int **)(*(void *)v0 + 120));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = protocol witness for NetworkManager.uploadKeys(evaluationKeys:userId:) in conformance AspireNetworkManager;
  return v4();
}

uint64_t sub_249D732AC()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return MEMORY[0x270FA0238](v0, v5, v6);
}

uint64_t partial apply for closure #1 in closure #1 in KVSKeyStorage.synchronize()(void *a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  return closure #1 in closure #1 in KVSKeyStorage.synchronize()(a1);
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

uint64_t AMSNetworking.__allocating_init(networkDelegationConfig:secondaryIdentifier:baseURL:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v10 = swift_allocObject();
  AMSNetworking.init(networkDelegationConfig:secondaryIdentifier:baseURL:)(a1, a2, a3, a4, a5);
  return v10;
}

uint64_t AMSNetworking.baseURL.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC8CipherML13AMSNetworking_baseURL;
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

id AMSNetworking.bag.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC8CipherML13AMSNetworking_bag);
}

id AMSNetworking.encoder.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC8CipherML13AMSNetworking_encoder);
}

id AMSNetworking.urlSession.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC8CipherML13AMSNetworking_urlSession);
}

uint64_t AMSNetworking.networkDelegationConfig.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC8CipherML13AMSNetworking_networkDelegationConfig);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AMSNetworking.init(networkDelegationConfig:secondaryIdentifier:baseURL:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v10 = v5 + OBJC_IVAR____TtC8CipherML13AMSNetworking_baseURL;
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v12 = *(void *)(v11 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v10, a5, v11);
  uint64_t v13 = self;
  objc_msgSend(v13, sel_setPreferEphemeralURLSessions_, 1);
  objc_msgSend(v13, sel_setSuppressEngagement_, 1);
  uint64_t v14 = (void *)MEMORY[0x24C5B33F0](0x6761676E45534D41, 0xED0000746E656D65);
  uint64_t v15 = (void *)MEMORY[0x24C5B33F0](49, 0xE100000000000000);
  id v16 = objc_msgSend(self, sel_bagForProfile_profileVersion_, v14, v15);

  *(void *)(v5 + OBJC_IVAR____TtC8CipherML13AMSNetworking_bag) = v16;
  id v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F27ED8]), sel_initWithBag_, v16);
  *(void *)(v5 + OBJC_IVAR____TtC8CipherML13AMSNetworking_encoder) = v17;
  objc_msgSend(v17, sel_setRequestEncoding_, 1);
  id v18 = objc_msgSend(self, sel_ephemeralSessionConfiguration);
  id v19 = objc_msgSend(self, sel_currentProcess);
  objc_msgSend(v18, sel_ams_configureWithProcessInfo_bag_, v19, v16);

  if (a2)
  {
    swift_bridgeObjectRetain();
    uint64_t v20 = (void *)MEMORY[0x24C5B33F0](a1, a2);
    swift_bridgeObjectRelease();
    objc_msgSend(v18, sel_set_sourceApplicationBundleIdentifier_, v20);
  }
  specialized static NetworkManagerHelper.configureSecondaryIdentifier(configuration:secondaryIdentifier:)(v18, a3, a4);
  swift_bridgeObjectRelease();
  id v21 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F27EF0]), sel_initWithConfiguration_, v18);

  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a5, v11);
  *(void *)(v5 + OBJC_IVAR____TtC8CipherML13AMSNetworking_urlSession) = v21;
  uint64_t v22 = (void *)(v5 + OBJC_IVAR____TtC8CipherML13AMSNetworking_networkDelegationConfig);
  *uint64_t v22 = a1;
  v22[1] = a2;
  return v5;
}

uint64_t AMSNetworking.constructURL(path:userId:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v15[1] = a3;
  uint64_t v5 = type metadata accessor for URL.DirectoryHint();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  double v11 = MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  void v15[2] = a1;
  void v15[3] = a2;
  (*(void (**)(char *, void, uint64_t, double))(v6 + 104))(v8, *MEMORY[0x263F06E50], v5, v11);
  lazy protocol witness table accessor for type String and conformance String();
  URL.appending<A>(path:directoryHint:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<URLQueryItem>);
  type metadata accessor for URLQueryItem();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_249E85E40;
  UUID.uuidString.getter();
  URLQueryItem.init(name:value:)();
  swift_bridgeObjectRelease();
  URL.appending(queryItems:)();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
}

uint64_t default argument 0 of Date.ISO8601Format(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v27 = a1;
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v30 = (char *)&v25 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = type metadata accessor for TimeZone();
  uint64_t v3 = *(void *)(v29 - 8);
  MEMORY[0x270FA5388](v29);
  uint64_t v26 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = type metadata accessor for Date.ISO8601FormatStyle.TimeZoneSeparator();
  uint64_t v5 = *(void *)(v28 - 8);
  MEMORY[0x270FA5388](v28);
  uint64_t v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Date.ISO8601FormatStyle.TimeSeparator();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  double v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Date.ISO8601FormatStyle.DateTimeSeparator();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for Date.ISO8601FormatStyle.DateSeparator();
  double v17 = MEMORY[0x270FA5388](v16);
  (*(void (**)(char *, void, double))(v19 + 104))((char *)&v25 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x263F072A0], v17);
  uint64_t v20 = v12;
  uint64_t v21 = v29;
  (*(void (**)(char *, void, uint64_t))(v13 + 104))(v15, *MEMORY[0x263F07288], v20);
  uint64_t v22 = v7;
  uint64_t v23 = v30;
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, *MEMORY[0x263F072B8], v8);
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v22, *MEMORY[0x263F072C8], v28);
  TimeZone.init(secondsFromGMT:)();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48))(v23, 1, v21);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v26, v23, v21);
    return Date.ISO8601FormatStyle.init(dateSeparator:dateTimeSeparator:timeSeparator:timeZoneSeparator:includingFractionalSeconds:timeZone:)();
  }
  return result;
}

uint64_t AMSNetworking.fetchConfigs(useCases:userId:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[36] = a3;
  v4[37] = v3;
  v4[34] = a1;
  v4[35] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  v4[38] = swift_task_alloc();
  v4[39] = type metadata accessor for AMDPbHEConfigsReply(0);
  v4[40] = swift_task_alloc();
  v4[41] = swift_task_alloc();
  v4[42] = swift_task_alloc();
  type metadata accessor for BinaryDecodingOptions();
  v4[43] = swift_task_alloc();
  v4[44] = swift_task_alloc();
  v4[45] = type metadata accessor for AMDPbHEResponse(0);
  v4[46] = swift_task_alloc();
  v4[47] = swift_task_alloc();
  v4[48] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for UUID();
  v4[49] = v5;
  v4[50] = *(void *)(v5 - 8);
  v4[51] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for URL();
  v4[52] = v6;
  v4[53] = *(void *)(v6 - 8);
  v4[54] = swift_task_alloc();
  return MEMORY[0x270FA2498](AMSNetworking.fetchConfigs(useCases:userId:), 0, 0);
}

uint64_t AMSNetworking.fetchConfigs(useCases:userId:)()
{
  uint64_t v36 = v0;
  uint64_t v1 = v0[54];
  uint64_t v2 = v0[37];
  uint64_t v3 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS4name_Says5UInt8VG16existingConfigIdtG_SSs5NeverOTg5062_s8CipherML20AspireNetworkManagerV12fetchConfigs8useCases6userh9AA0C17Apig25ResponseVSaySS4name_Says5E112VG08existingmK0tG_10Foundation4UUIDVtYaKFS2SAI_AlMt_tcfu_32a168a102879cc1a6a91172b0770f0c91SSAI_AlMtSSTf3nnnpk_nTf1cn_n(v0[35]);
  v0[55] = v3;
  v0[56] = 0;
  AMSNetworking.constructURL(path:userId:)(0xD000000000000015, 0x8000000249E96430, v1);
  uint64_t v4 = *(void **)(v2 + OBJC_IVAR____TtC8CipherML13AMSNetworking_encoder);
  URL._bridgeToObjectiveC()((NSURL *)OBJC_IVAR____TtC8CipherML13AMSNetworking_encoder);
  uint64_t v6 = v5;
  specialized AMSNetworking.requestHeaders()();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t))(*(void *)v2 + 152))(v3);
  Class v8 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v9 = objc_msgSend(v4, sel_requestWithMethod_URL_headers_parameters_, 2, v6, isa, v8);
  v0[57] = v9;

  v0[14] = closure #1 in AMSNetworking.fetchConfigs(useCases:userId:);
  v0[15] = 0;
  v0[10] = MEMORY[0x263EF8330];
  v0[11] = 1107296256;
  v0[12] = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
  v0[13] = &block_descriptor_3;
  uint64_t v10 = _Block_copy(v0 + 10);
  objc_msgSend(v9, sel_addErrorBlock_, v10);
  _Block_release(v10);
  if (one-time initialization token for networking != -1) {
    swift_once();
  }
  uint64_t v11 = v0[50];
  uint64_t v12 = v0[51];
  uint64_t v13 = v0[49];
  uint64_t v14 = v0[36];
  uint64_t v15 = type metadata accessor for Logger();
  v0[58] = __swift_project_value_buffer(v15, (uint64_t)static Logger.networking);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v12, v14, v13);
  swift_bridgeObjectRetain_n();
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  BOOL v18 = os_log_type_enabled(v16, v17);
  uint64_t v20 = v0[50];
  uint64_t v19 = v0[51];
  uint64_t v21 = v0[49];
  if (v18)
  {
    uint64_t v22 = swift_slowAlloc();
    uint64_t v34 = swift_slowAlloc();
    v35[0] = v34;
    *(_DWORD *)uint64_t v22 = 136446467;
    uint64_t v23 = swift_bridgeObjectRetain();
    uint64_t v24 = MEMORY[0x24C5B3560](v23, MEMORY[0x263F8D310]);
    uint64_t v33 = v21;
    id v25 = v9;
    unint64_t v27 = v26;
    swift_bridgeObjectRelease();
    v0[32] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v27, v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    id v9 = v25;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v22 + 12) = 2081;
    uint64_t v28 = UUID.uuidString.getter();
    v0[33] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v33);
    _os_log_impl(&dword_249C3F000, v16, v17, "Request to fetchConfigs has started for useCases '%{public}s', userId: '%{private}s'", (uint8_t *)v22, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x24C5B4790](v34, -1, -1);
    MEMORY[0x24C5B4790](v22, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
  }

  id v30 = objc_msgSend(*(id *)(v0[37] + OBJC_IVAR____TtC8CipherML13AMSNetworking_urlSession), sel_dataTaskPromiseWithRequestPromise_, v9);
  v0[59] = v30;
  v0[2] = v0;
  v0[7] = v0 + 26;
  v0[3] = AMSNetworking.fetchConfigs(useCases:userId:);
  uint64_t v31 = swift_continuation_init();
  v0[16] = MEMORY[0x263EF8330];
  v0[17] = 0x40000000;
  v0[18] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned AMSURLResult?, @unowned NSError?) -> () with result type AMSURLResult;
  v0[19] = &block_descriptor_1;
  v0[20] = v31;
  objc_msgSend(v30, sel_resultWithCompletion_, v0 + 16);
  return MEMORY[0x270FA23F0](v0 + 2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 480) = v1;
  if (v1)
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = AMSNetworking.fetchConfigs(useCases:userId:);
  }
  else
  {
    uint64_t v2 = AMSNetworking.fetchConfigs(useCases:userId:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  NSObject *v8;
  NSObject *v9;
  uint64_t v10;
  uint8_t *v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  NSObject *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  id v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint8_t *v35;
  uint64_t (*v36)(void);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  void *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  NSObject *v50;
  os_log_type_t v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  uint8_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  NSObject *v84;
  void *v85;
  NSObject *log;
  long long v87;
  long long v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;

  int v90 = v0;
  uint64_t v1 = (void *)v0[26];
  uint64_t v2 = (void *)v0[56];
  uint64_t v3 = specialized AMSURLResult.validateSuccessResponse()();
  uint64_t v4 = (void *)v0[59];
  if (!v2)
  {
    uint64_t v7 = v3;

    Class v8 = v7;
    id v9 = Logger.logObject.getter();
    uint64_t v10 = static os_log_type_t.default.getter();
    uint64_t v85 = v0 + 26;
    if (os_log_type_enabled(v9, (os_log_type_t)v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 134349056;
      uint64_t v12 = [v8 data];
      uint64_t v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v15 = v14;

      switch(v15 >> 62)
      {
        case 1uLL:
          outlined consume of Data._Representation(v13, v15);
          os_log_type_t v17 = v8;

          LODWORD(v16) = HIDWORD(v13) - v13;
          if (__OFSUB__(HIDWORD(v13), v13))
          {
            __break(1u);
LABEL_38:
            __break(1u);
            JUMPOUT(0x249D7546CLL);
          }
          uint64_t v16 = (int)v16;
LABEL_10:
          Class v8 = v17;
LABEL_12:
          v0[31] = v16;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          _os_log_impl(&dword_249C3F000, v9, (os_log_type_t)v10, "Request to fetchConfigs has finished, response length: %{public}ld", v11, 0xCu);
          MEMORY[0x24C5B4790](v11, -1, -1);
          break;
        case 2uLL:
          BOOL v18 = *(void *)(v13 + 16);
          uint64_t v19 = *(void *)(v13 + 24);
          outlined consume of Data._Representation(v13, v15);
          os_log_type_t v17 = v8;

          uint64_t v16 = v19 - v18;
          if (!__OFSUB__(v19, v18)) {
            goto LABEL_10;
          }
          goto LABEL_38;
        case 3uLL:
          outlined consume of Data._Representation(v13, v15);

          uint64_t v16 = 0;
          goto LABEL_12;
        default:
          outlined consume of Data._Representation(v13, v15);

          uint64_t v16 = BYTE6(v15);
          goto LABEL_12;
      }
    }
    else
    {

      id v9 = v8;
    }

    uint64_t v20 = [v8 data];
    uint64_t v21 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v22 = v8;
    uint64_t v23 = v0;
    id v25 = v24;

    v0[23] = v21;
    v0[24] = v25;
    uint64_t v89 = 0;
    uint64_t v87 = 0u;
    unint64_t v88 = 0u;
    BinaryDecodingOptions.init()();
    lazy protocol witness table accessor for type AMDPbHEResponse and conformance AMDPbHEResponse(&lazy protocol witness table cache variable for type AMDPbHEResponse and conformance AMDPbHEResponse, (void (*)(uint64_t))type metadata accessor for AMDPbHEResponse);
    Message.init<A>(serializedBytes:extensions:partial:options:)();
    unint64_t v84 = v22;
    AMDPbHEResponse.validateSuccessResponse()(v0[47]);
    unint64_t v26 = v0[48];
    outlined destroy of AMDPbHEResponse(v0[46], type metadata accessor for AMDPbHEResponse);
    AMDPbHEResponse.validateAPICode(expected:)(1, 1, v26);
    uint64_t v38 = v0[48];
    uint64_t v39 = v0[45];
    char v40 = v0[38];
    outlined destroy of AMDPbHEResponse(v0[47], type metadata accessor for AMDPbHEResponse);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v38 + *(int *)(v39 + 28), v40, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
    uint64_t v41 = type metadata accessor for AMDPbHEResponse.OneOf_Response(0);
    uint64_t v42 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 48))(v40, 1, v41);
    uint64_t v43 = v0[38];
    if (v42 == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v0[38], &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
      uint64_t v44 = v0 + 26;
    }
    else
    {
      uint64_t v44 = v0 + 26;
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        outlined init with take of AMDPbHEConfigsReply(v43, v0[42], type metadata accessor for AMDPbHEConfigsReply);
LABEL_27:
        uint64_t v47 = v0[42];
        int64_t v48 = v0[40];
        outlined init with copy of AMDPbHEConfigsReply(v47, v0[41], type metadata accessor for AMDPbHEConfigsReply);
        uint64_t v49 = v0;
        outlined init with copy of AMDPbHEConfigsReply(v47, v48, type metadata accessor for AMDPbHEConfigsReply);
        uint64_t v50 = Logger.logObject.getter();
        uint64_t v51 = static os_log_type_t.default.getter();
        unint64_t v52 = os_log_type_enabled(v50, v51);
        unint64_t v53 = v0[40];
        uint64_t v54 = v0[41];
        if (v52)
        {
          uint64_t v55 = swift_slowAlloc();
          *(_DWORD *)uint64_t v55 = 134349312;
          uint64_t v56 = *(void *)(*(void *)v54 + 16);
          outlined destroy of AMDPbHEResponse(v54, type metadata accessor for AMDPbHEConfigsReply);
          v44[3] = v56;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v55 + 12) = 2050;
          uint64_t v57 = *(void *)(*(void *)(v53 + 8) + 16);
          outlined destroy of AMDPbHEResponse(v53, type metadata accessor for AMDPbHEConfigsReply);
          v44[4] = v57;
          uint64_t v49 = v23;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl(&dword_249C3F000, v50, v51, "Request to fetchConfigs has finished with AMD: %{public}ld configs and %{public}ld keyInfos", (uint8_t *)v55, 0x16u);
          MEMORY[0x24C5B4790](v55, -1, -1);
        }
        else
        {
          outlined destroy of AMDPbHEResponse(v0[40], type metadata accessor for AMDPbHEConfigsReply);
          outlined destroy of AMDPbHEResponse(v54, type metadata accessor for AMDPbHEConfigsReply);
        }
        uint64_t v58 = v49[55];
        uint64_t v59 = v49[42];

        uint64_t v60 = swift_task_alloc();
        *(void *)(v60 + 16) = v59;
        swift_bridgeObjectRetain();
        uint64_t v61 = specialized _ArrayProtocol.filter(_:)((uint64_t)partial apply for closure #2 in AMSNetworking.fetchConfigs(useCases:userId:), v60, v58);
        swift_task_dealloc();
        if (*(void *)(v61 + 16))
        {
          swift_bridgeObjectRetain();
          uint64_t v62 = Logger.logObject.getter();
          uint64_t v63 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v62, v63))
          {
            int v64 = (uint8_t *)swift_slowAlloc();
            uint64_t v65 = swift_slowAlloc();
            *(void *)&uint64_t v87 = v65;
            *(_DWORD *)int v64 = 136446210;
            uint64_t v66 = swift_bridgeObjectRetain();
            unsigned int v67 = MEMORY[0x24C5B3560](v66, MEMORY[0x263F8D310]);
            unsigned int v69 = v68;
            swift_bridgeObjectRelease();
            v85[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v67, v69, (uint64_t *)&v87);
            uint64_t v70 = v23;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease_n();
            _os_log_impl(&dword_249C3F000, v62, v63, "No configuration found for useCases: %{public}s", v64, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x24C5B4790](v65, -1, -1);
            MEMORY[0x24C5B4790](v64, -1, -1);
          }
          else
          {
            uint64_t v70 = v49;
            swift_bridgeObjectRelease_n();
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          uint64_t v70 = v49;
        }
        lazy protocol witness table accessor for type AMDPbHEResponse and conformance AMDPbHEResponse(&lazy protocol witness table cache variable for type AMDPbHEConfigsReply and conformance AMDPbHEConfigsReply, (void (*)(uint64_t))type metadata accessor for AMDPbHEConfigsReply);
        uint64_t v71 = Message.serializedData(partial:)();
        uint64_t v73 = v72;
        type metadata accessor for AspireApiConfigResponse(0);
        v70[21] = v71;
        v70[22] = v73;
        uint64_t v89 = 0;
        uint64_t v87 = 0u;
        unint64_t v88 = 0u;
        BinaryDecodingOptions.init()();
        lazy protocol witness table accessor for type AMDPbHEResponse and conformance AMDPbHEResponse(&lazy protocol witness table cache variable for type AspireApiConfigResponse and conformance AspireApiConfigResponse, (void (*)(uint64_t))type metadata accessor for AspireApiConfigResponse);
        Message.init<A>(serializedBytes:extensions:partial:options:)();
        uint64_t v74 = (void *)v70[57];
        uint64_t v75 = v70[54];
        uint64_t v76 = (void *)v70[55];
        uint64_t v78 = v70[52];
        int64_t v77 = v70[53];
        BOOL v79 = v70[48];
        uint64_t v83 = v70[42];
        uint64_t v80 = (uint64_t *)v70[34];
        swift_bridgeObjectRetain();
        uint64_t v81 = swift_bridgeObjectRetain();
        uint64_t v82 = specialized _NativeDictionary.filter(_:)(v81, v76);
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();

        outlined destroy of AMDPbHEResponse(v79, type metadata accessor for AMDPbHEResponse);
        (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v75, v78);
        outlined destroy of AMDPbHEResponse(v83, type metadata accessor for AMDPbHEConfigsReply);
        swift_bridgeObjectRelease();
        *uint64_t v80 = v82;
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        uint64_t v36 = (uint64_t (*)(void))v70[1];
        goto LABEL_18;
      }
      outlined destroy of AMDPbHEResponse(v43, type metadata accessor for AMDPbHEResponse.OneOf_Response);
    }
    uint64_t v45 = (unint64_t *)v0[42];
    uint64_t v46 = MEMORY[0x263F8EE78];
    char *v45 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    v45[1] = v46;
    UnknownStorage.init()();
    goto LABEL_27;
  }
  uint64_t v5 = v2;
  uint64_t v6 = (void *)v0[57];
  (*(void (**)(void, void))(v0[53] + 8))(v0[54], v0[52]);

  swift_bridgeObjectRelease();
  unint64_t v27 = v2;
  uint64_t v28 = v2;
  unint64_t v29 = Logger.logObject.getter();
  id v30 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v29, v30))
  {
    log = v29;
    uint64_t v31 = (uint8_t *)swift_slowAlloc();
    uint64_t v32 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v31 = 138543362;
    uint64_t v33 = v5;
    uint64_t v34 = _swift_stdlib_bridgeErrorToNSError();
    v0[25] = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    char *v32 = v34;

    _os_log_impl(&dword_249C3F000, log, v30, "Request to fetchConfigs has failed: %{public}@", v31, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x24C5B4790](v32, -1, -1);
    uint64_t v35 = v31;
    unint64_t v29 = log;
    MEMORY[0x24C5B4790](v35, -1, -1);
  }
  else
  {
  }
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v36 = (uint64_t (*)(void))v0[1];
LABEL_18:
  return v36();
}

{
  void *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  NSObject *v11;
  uint8_t *v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint8_t *v16;
  uint64_t (*v17)(void);
  uint64_t v19;

  uint64_t v1 = (void *)v0[59];
  uint64_t v2 = (void *)v0[57];
  uint64_t v4 = v0[53];
  uint64_t v3 = v0[54];
  uint64_t v5 = v0[52];
  swift_willThrow();

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  uint64_t v6 = (void *)v0[60];
  uint64_t v7 = v6;
  Class v8 = v6;
  id v9 = Logger.logObject.getter();
  uint64_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = v9;
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 138543362;
    uint64_t v14 = v6;
    uint64_t v15 = _swift_stdlib_bridgeErrorToNSError();
    v0[25] = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    char *v13 = v15;

    _os_log_impl(&dword_249C3F000, v11, v10, "Request to fetchConfigs has failed: %{public}@", v12, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x24C5B4790](v13, -1, -1);
    uint64_t v16 = v12;
    id v9 = v11;
    MEMORY[0x24C5B4790](v16, -1, -1);
  }
  else
  {
  }
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v17 = (uint64_t (*)(void))v0[1];
  return v17();
}

void closure #1 in AMSNetworking.fetchConfigs(useCases:userId:)(void *a1)
{
}

void thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ()(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

void *AMSURLResult.validateSuccessResponse()()
{
  uint64_t v1 = specialized AMSURLResult.validateSuccessResponse()();
  uint64_t v2 = v1;
  if (!v0) {
    id v3 = v1;
  }
  return v2;
}

uint64_t closure #2 in AMSNetworking.fetchConfigs(useCases:userId:)(uint64_t *a1, uint64_t a2)
{
  if (*(void *)(*(void *)a2 + 16))
  {
    uint64_t v3 = *a1;
    uint64_t v2 = a1[1];
    swift_bridgeObjectRetain();
    specialized __RawDictionaryStorage.find<A>(_:)(v3, v2);
    LOBYTE(v3) = v4;
    swift_bridgeObjectRelease();
    char v5 = v3 ^ 1;
  }
  else
  {
    char v5 = 1;
  }
  return v5 & 1;
}

unint64_t AMSNetworking.fetchConfigParameters(useCases:)(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, String)>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_249E85E40;
    *(void *)(inited + 32) = 0x736769666E6F63;
    *(void *)(inited + 40) = 0xE700000000000000;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    *(void *)(inited + 48) = BidirectionalCollection<>.joined(separator:)();
    *(void *)(inited + 56) = v2;
    return specialized Dictionary.init(dictionaryLiteral:)(inited);
  }
  else
  {
    uint64_t v4 = MEMORY[0x263F8EE78];
    return specialized Dictionary.init(dictionaryLiteral:)(v4);
  }
}

uint64_t AMSNetworking.uploadKeys(evaluationKeys:userId:)(uint64_t a1, uint64_t a2)
{
  v3[44] = a2;
  v3[45] = v2;
  v3[43] = a1;
  type metadata accessor for BinaryDecodingOptions();
  v3[46] = swift_task_alloc();
  v3[47] = type metadata accessor for AMDPbHEResponse(0);
  v3[48] = swift_task_alloc();
  v3[49] = swift_task_alloc();
  v3[50] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for UUID();
  v3[51] = v4;
  v3[52] = *(void *)(v4 - 8);
  v3[53] = swift_task_alloc();
  v3[54] = type metadata accessor for AspireApiEvaluationKeys(0);
  v3[55] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for URL();
  v3[56] = v5;
  v3[57] = *(void *)(v5 - 8);
  v3[58] = swift_task_alloc();
  return MEMORY[0x270FA2498](AMSNetworking.uploadKeys(evaluationKeys:userId:), 0, 0);
}

uint64_t AMSNetworking.uploadKeys(evaluationKeys:userId:)()
{
  uint64_t v44 = v0;
  lazy protocol witness table accessor for type AMDPbHEResponse and conformance AMDPbHEResponse(&lazy protocol witness table cache variable for type AspireApiEvaluationKeys and conformance AspireApiEvaluationKeys, (void (*)(uint64_t))type metadata accessor for AspireApiEvaluationKeys);
  uint64_t v1 = Message.serializedData(partial:)();
  v0[59] = 0;
  v0[60] = v1;
  v0[61] = v2;
  uint64_t v3 = v1;
  unint64_t v4 = v2;
  uint64_t v5 = v0[45];
  AMSNetworking.constructURL(path:userId:)(0xD000000000000017, 0x8000000249E96480, v0[58]);
  uint64_t v6 = *(void **)(v5 + OBJC_IVAR____TtC8CipherML13AMSNetworking_encoder);
  URL._bridgeToObjectiveC()((NSURL *)OBJC_IVAR____TtC8CipherML13AMSNetworking_encoder);
  Class v8 = v7;
  specialized AMSNetworking.requestHeaders()();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  Class v10 = Data._bridgeToObjectiveC()().super.isa;
  id v11 = objc_msgSend(v6, sel_requestWithMethod_URL_headers_parameters_, 4, v8, isa, v10);
  v0[62] = v11;

  v0[22] = closure #1 in AMSNetworking.uploadKeys(evaluationKeys:userId:);
  v0[23] = 0;
  v0[18] = MEMORY[0x263EF8330];
  v0[19] = 1107296256;
  v0[20] = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
  v0[21] = &block_descriptor_5;
  uint64_t v12 = _Block_copy(v0 + 18);
  id v42 = v11;
  objc_msgSend(v11, sel_addErrorBlock_, v12);
  _Block_release(v12);
  if (one-time initialization token for networking != -1) {
    swift_once();
  }
  uint64_t v13 = v0[55];
  uint64_t v15 = v0[52];
  uint64_t v14 = v0[53];
  uint64_t v16 = v0[51];
  uint64_t v18 = v0[43];
  uint64_t v17 = v0[44];
  uint64_t v19 = type metadata accessor for Logger();
  v0[63] = __swift_project_value_buffer(v19, (uint64_t)static Logger.networking);
  outlined init with copy of AMDPbHEConfigsReply(v18, v13, type metadata accessor for AspireApiEvaluationKeys);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v14, v17, v16);
  outlined copy of Data._Representation(v3, v4);
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.default.getter();
  BOOL v22 = os_log_type_enabled(v20, v21);
  uint64_t v23 = v0[55];
  if (v22)
  {
    os_log_type_t v40 = v21;
    uint64_t v24 = swift_slowAlloc();
    uint64_t v41 = swift_slowAlloc();
    uint64_t v43 = v41;
    *(_DWORD *)uint64_t v24 = 134349571;
    uint64_t v25 = *(void *)(*(void *)v23 + 16);
    outlined destroy of AMDPbHEResponse(v23, type metadata accessor for AspireApiEvaluationKeys);
    v0[40] = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v24 + 12) = 2050;
    uint64_t v26 = 0;
    switch(v4 >> 62)
    {
      case 1uLL:
        LODWORD(v26) = HIDWORD(v3) - v3;
        if (__OFSUB__(HIDWORD(v3), v3))
        {
          __break(1u);
LABEL_15:
          __break(1u);
          JUMPOUT(0x249D76264);
        }
        uint64_t v26 = (int)v26;
LABEL_10:
        uint64_t v34 = v0[52];
        uint64_t v33 = v0[53];
        uint64_t v35 = v0[51];
        v0[41] = v26;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        outlined consume of Data._Representation(v3, v4);
        *(_WORD *)(v24 + 22) = 2081;
        uint64_t v36 = UUID.uuidString.getter();
        v0[42] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, &v43);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v33, v35);
        _os_log_impl(&dword_249C3F000, v20, v40, "Request to uploadKeys has started for %{public}ld key(s) with %{public}ld bytes for userId: '%{private}s'", (uint8_t *)v24, 0x20u);
        swift_arrayDestroy();
        MEMORY[0x24C5B4790](v41, -1, -1);
        MEMORY[0x24C5B4790](v24, -1, -1);
        break;
      case 2uLL:
        uint64_t v31 = *(void *)(v3 + 16);
        uint64_t v30 = *(void *)(v3 + 24);
        BOOL v32 = __OFSUB__(v30, v31);
        uint64_t v26 = v30 - v31;
        if (!v32) {
          goto LABEL_10;
        }
        goto LABEL_15;
      case 3uLL:
        goto LABEL_10;
      default:
        uint64_t v26 = BYTE6(v4);
        goto LABEL_10;
    }
  }
  else
  {
    uint64_t v28 = v0[52];
    uint64_t v27 = v0[53];
    uint64_t v29 = v0[51];
    outlined destroy of AMDPbHEResponse(v0[55], type metadata accessor for AspireApiEvaluationKeys);
    outlined consume of Data._Representation(v3, v4);
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v27, v29);
  }

  v0[10] = v0;
  v0[15] = v0 + 38;
  v0[11] = AMSNetworking.uploadKeys(evaluationKeys:userId:);
  uint64_t v38 = swift_continuation_init();
  v0[24] = MEMORY[0x263EF8330];
  v0[25] = 0x40000000;
  v0[26] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned AMSURLResult?, @unowned NSError?) -> () with result type AMSURLResult;
  v0[27] = &block_descriptor_6;
  v0[28] = v38;
  objc_msgSend(v42, sel_resultWithCompletion_, v0 + 24);
  return MEMORY[0x270FA23F0](v0 + 10);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  uint64_t v1 = *(void *)(*(void *)v0 + 112);
  *(void *)(*(void *)v0 + 512) = v1;
  if (v1) {
    unint64_t v2 = AMSNetworking.uploadKeys(evaluationKeys:userId:);
  }
  else {
    unint64_t v2 = AMSNetworking.uploadKeys(evaluationKeys:userId:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  unint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  NSObject *v12;
  uint8_t *v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint8_t *v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t (*v24)(void);
  uint64_t v26;

  uint64_t v1 = (void *)v0[59];
  unint64_t v2 = (void *)v0[38];
  v0[65] = v2;
  static Task<>.checkCancellation()();
  v0[66] = v1;
  if (v1)
  {
    uint64_t v3 = v1;
    unint64_t v4 = v0[61];
    uint64_t v5 = (void *)v0[62];
    uint64_t v6 = v0[60];
    (*(void (**)(void, void))(v0[57] + 8))(v0[58], v0[56]);
    outlined consume of Data._Representation(v6, v4);

    if (one-time initialization token for networking != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.networking);
    Class v8 = v3;
    id v9 = v3;
    Class v10 = Logger.logObject.getter();
    id v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = v10;
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 138543362;
      uint64_t v15 = v3;
      uint64_t v16 = _swift_stdlib_bridgeErrorToNSError();
      v0[36] = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v14 = v16;

      _os_log_impl(&dword_249C3F000, v12, v11, "Request to uploadKeys has failed: %{public}@", v13, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x24C5B4790](v14, -1, -1);
      uint64_t v17 = v13;
      Class v10 = v12;
      MEMORY[0x24C5B4790](v17, -1, -1);
    }
    else
    {
    }
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v24 = (uint64_t (*)(void))v0[1];
    return v24();
  }
  else
  {
    uint64_t v18 = Logger.logObject.getter();
    uint64_t v19 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl(&dword_249C3F000, v18, v19, "Starting actual upload", v20, 2u);
      MEMORY[0x24C5B4790](v20, -1, -1);
    }
    os_log_type_t v21 = v0[45];

    BOOL v22 = objc_msgSend(*(id *)(v21 + OBJC_IVAR____TtC8CipherML13AMSNetworking_urlSession), sel_dataTaskPromiseWithRequest_, v2);
    v0[67] = v22;
    v0[2] = v0;
    v0[7] = v0 + 37;
    v0[3] = AMSNetworking.uploadKeys(evaluationKeys:userId:);
    uint64_t v23 = swift_continuation_init();
    v0[29] = MEMORY[0x263EF8330];
    v0[30] = 0x40000000;
    v0[31] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned AMSURLResult?, @unowned NSError?) -> () with result type AMSURLResult;
    v0[32] = &block_descriptor_7;
    v0[33] = v23;
    objc_msgSend(v22, sel_resultWithCompletion_, v0 + 29);
    return MEMORY[0x270FA23F0](v0 + 2);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 544) = v1;
  if (v1) {
    unint64_t v2 = AMSNetworking.uploadKeys(evaluationKeys:userId:);
  }
  else {
    unint64_t v2 = AMSNetworking.uploadKeys(evaluationKeys:userId:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  unint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  NSObject *v11;
  NSObject *v12;
  os_log_type_t v13;
  SEL *v14;
  uint8_t *v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (**v29)(uint64_t, uint64_t);
  void *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  id v37;
  NSObject *v38;
  os_log_type_t v39;
  NSObject *v40;
  uint8_t *v41;
  void *v42;
  id v43;
  uint64_t v44;
  uint8_t *v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(void);
  uint64_t v50;

  uint64_t v1 = *(void **)(v0 + 528);
  unint64_t v2 = *(void **)(v0 + 296);
  uint64_t v3 = specialized AMSURLResult.validateSuccessResponse()();
  unint64_t v4 = *(void **)(v0 + 536);
  if (v1)
  {
    uint64_t v5 = v1;
    uint64_t v6 = *(void **)(v0 + 520);
    uint64_t v7 = *(void *)(v0 + 488);
    Class v8 = *(void **)(v0 + 496);
    id v9 = *(void *)(v0 + 480);
    (*(void (**)(void, void))(*(void *)(v0 + 456) + 8))(*(void *)(v0 + 464), *(void *)(v0 + 448));
    outlined consume of Data._Representation(v9, v7);

    if (one-time initialization token for networking != -1) {
      swift_once();
    }
    uint64_t v35 = type metadata accessor for Logger();
    __swift_project_value_buffer(v35, (uint64_t)static Logger.networking);
    uint64_t v36 = v5;
    unint64_t v37 = v5;
    uint64_t v38 = Logger.logObject.getter();
    uint64_t v39 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v38, v39))
    {
      os_log_type_t v40 = v38;
      uint64_t v41 = (uint8_t *)swift_slowAlloc();
      id v42 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v41 = 138543362;
      uint64_t v43 = v5;
      uint64_t v44 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 288) = v44;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v42 = v44;

      _os_log_impl(&dword_249C3F000, v40, v39, "Request to uploadKeys has failed: %{public}@", v41, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x24C5B4790](v42, -1, -1);
      uint64_t v45 = v41;
      uint64_t v38 = v40;
      MEMORY[0x24C5B4790](v45, -1, -1);
    }
    else
    {
    }
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v49 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    Class v10 = v3;

    id v11 = v10;
    uint64_t v12 = Logger.logObject.getter();
    uint64_t v13 = static os_log_type_t.info.getter();
    uint64_t v14 = (SEL *)&unk_26527F000;
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 134349056;
      uint64_t v16 = [v11 data];
      uint64_t v17 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v19 = v18;

      switch(v19 >> 62)
      {
        case 1uLL:
          outlined consume of Data._Representation(v17, v19);

          LODWORD(v20) = HIDWORD(v17) - v17;
          if (__OFSUB__(HIDWORD(v17), v17))
          {
            __break(1u);
LABEL_24:
            __break(1u);
            JUMPOUT(0x249D76FC8);
          }
          uint64_t v20 = (int)v20;
          break;
        case 2uLL:
          BOOL v22 = *(void *)(v17 + 16);
          os_log_type_t v21 = *(void *)(v17 + 24);
          outlined consume of Data._Representation(v17, v19);

          uint64_t v20 = v21 - v22;
          if (__OFSUB__(v21, v22)) {
            goto LABEL_24;
          }
          uint64_t v14 = (SEL *)&unk_26527F000;
          break;
        case 3uLL:
          outlined consume of Data._Representation(v17, v19);

          uint64_t v20 = 0;
          break;
        default:
          outlined consume of Data._Representation(v17, v19);

          uint64_t v20 = BYTE6(v19);
          break;
      }
      *(void *)(v0 + 312) = v20;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl(&dword_249C3F000, v12, v13, "Request to uploadKeys has finished, response length: %{public}ld", v15, 0xCu);
      MEMORY[0x24C5B4790](v15, -1, -1);
    }
    else
    {

      uint64_t v12 = v11;
    }

    uint64_t v23 = [v11 v14[465]];
    uint64_t v24 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v26 = v25;

    *(void *)(v0 + 272) = v24;
    *(void *)(v0 + 280) = v26;
    BinaryDecodingOptions.init()();
    lazy protocol witness table accessor for type AMDPbHEResponse and conformance AMDPbHEResponse(&lazy protocol witness table cache variable for type AMDPbHEResponse and conformance AMDPbHEResponse, (void (*)(uint64_t))type metadata accessor for AMDPbHEResponse);
    Message.init<A>(serializedBytes:extensions:partial:options:)();
    AMDPbHEResponse.validateSuccessResponse()(*(void *)(v0 + 392));
    uint64_t v27 = *(void *)(v0 + 456);
    uint64_t v28 = *(void *)(v0 + 400);
    outlined destroy of AMDPbHEResponse(*(void *)(v0 + 384), type metadata accessor for AMDPbHEResponse);
    AMDPbHEResponse.validateAPICode(expected:)(0, 1, v28);
    uint64_t v29 = (void (**)(uint64_t, uint64_t))(v27 + 8);
    uint64_t v30 = *(void **)(v0 + 520);
    uint64_t v31 = *(void *)(v0 + 488);
    BOOL v32 = *(void *)(v0 + 480);
    uint64_t v33 = *(void *)(v0 + 464);
    uint64_t v34 = *(void *)(v0 + 448);
    uint64_t v47 = *(void *)(v0 + 392);
    int64_t v48 = *(void *)(v0 + 400);

    outlined consume of Data._Representation(v32, v31);
    outlined destroy of AMDPbHEResponse(v47, type metadata accessor for AMDPbHEResponse);
    outlined destroy of AMDPbHEResponse(v48, type metadata accessor for AMDPbHEResponse);
    (*v29)(v33, v34);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v49 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v49();
}

{
  void *v0;
  unint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  NSObject *v13;
  uint8_t *v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint8_t *v18;
  uint64_t (*v19)(void);
  uint64_t v21;

  uint64_t v1 = v0[61];
  unint64_t v2 = (void *)v0[62];
  uint64_t v3 = v0[60];
  uint64_t v5 = v0[57];
  unint64_t v4 = v0[58];
  uint64_t v6 = v0[56];
  swift_willThrow();

  outlined consume of Data._Representation(v3, v1);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  uint64_t v7 = (void *)v0[64];
  if (one-time initialization token for networking != -1) {
    swift_once();
  }
  Class v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.networking);
  id v9 = v7;
  Class v10 = v7;
  id v11 = Logger.logObject.getter();
  uint64_t v12 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = v11;
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 138543362;
    uint64_t v16 = v7;
    uint64_t v17 = _swift_stdlib_bridgeErrorToNSError();
    v0[36] = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v15 = v17;

    _os_log_impl(&dword_249C3F000, v13, v12, "Request to uploadKeys has failed: %{public}@", v14, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x24C5B4790](v15, -1, -1);
    uint64_t v18 = v14;
    id v11 = v13;
    MEMORY[0x24C5B4790](v18, -1, -1);
  }
  else
  {
  }
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v19 = (uint64_t (*)(void))v0[1];
  return v19();
}

{
  void *v0;
  void *v1;
  void *v2;
  unint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  id v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  NSObject *v15;
  uint8_t *v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t (*v21)(void);
  uint64_t v23;

  uint64_t v1 = (void *)v0[67];
  unint64_t v2 = (void *)v0[65];
  uint64_t v3 = v0[61];
  unint64_t v4 = (void *)v0[62];
  uint64_t v5 = v0[60];
  uint64_t v7 = v0[57];
  uint64_t v6 = v0[58];
  Class v8 = v0[56];
  swift_willThrow();

  outlined consume of Data._Representation(v5, v3);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);

  id v9 = (void *)v0[68];
  if (one-time initialization token for networking != -1) {
    swift_once();
  }
  Class v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Logger.networking);
  id v11 = v9;
  uint64_t v12 = v9;
  uint64_t v13 = Logger.logObject.getter();
  uint64_t v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = v13;
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    uint64_t v17 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 138543362;
    uint64_t v18 = v9;
    uint64_t v19 = _swift_stdlib_bridgeErrorToNSError();
    v0[36] = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v17 = v19;

    _os_log_impl(&dword_249C3F000, v15, v14, "Request to uploadKeys has failed: %{public}@", v16, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x24C5B4790](v17, -1, -1);
    uint64_t v20 = v16;
    uint64_t v13 = v15;
    MEMORY[0x24C5B4790](v20, -1, -1);
  }
  else
  {
  }
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v21 = (uint64_t (*)(void))v0[1];
  return v21();
}

void closure #1 in AMSNetworking.uploadKeys(evaluationKeys:userId:)(void *a1)
{
}

uint64_t @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned AMSURLResult?, @unowned NSError?) -> () with result type AMSURLResult(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v5 = swift_allocError();
    *uint64_t v6 = a3;
    id v7 = a3;
    return MEMORY[0x270FA2410](v3, v5);
  }
  else
  {
    if (a2)
    {
      **(void **)(*(void *)(v3 + 64) + 40) = a2;
      id v8 = a2;
      a1 = v3;
    }
    else
    {
      __break(1u);
    }
    return MEMORY[0x270FA2408](a1);
  }
}

uint64_t AMSNetworking.queries(requests:userId:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[30] = a3;
  v4[31] = v3;
  v4[28] = a1;
  v4[29] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  v4[32] = swift_task_alloc();
  v4[33] = type metadata accessor for AMDPbHEReplies(0);
  v4[34] = swift_task_alloc();
  type metadata accessor for BinaryDecodingOptions();
  v4[35] = swift_task_alloc();
  v4[36] = type metadata accessor for AMDPbHEResponse(0);
  v4[37] = swift_task_alloc();
  v4[38] = swift_task_alloc();
  v4[39] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for UUID();
  v4[40] = v5;
  v4[41] = *(void *)(v5 - 8);
  v4[42] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for URL();
  v4[43] = v6;
  v4[44] = *(void *)(v6 - 8);
  v4[45] = swift_task_alloc();
  v4[46] = *(void *)(type metadata accessor for AspireApiRequest(0) - 8);
  v4[47] = swift_task_alloc();
  v4[48] = *(void *)(type metadata accessor for AMDPbHEQuery(0) - 8);
  v4[49] = swift_task_alloc();
  v4[50] = type metadata accessor for AMDPbHEQueries(0);
  v4[51] = swift_task_alloc();
  return MEMORY[0x270FA2498](AMSNetworking.queries(requests:userId:), 0, 0);
}

uint64_t AMSNetworking.queries(requests:userId:)()
{
  uint64_t v65 = v0;
  uint64_t v1 = v0[29];
  specialized AMSNetworking.requestHeaders()();
  int64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = v0[48];
    uint64_t v4 = v0[46];
    uint64_t v5 = (uint64_t *)(v0[29] + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)));
    uint64_t v6 = *v5;
    uint64_t v7 = v5[1];
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v6, v7, 0x65736163657375, 0xE700000000000000, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    uint64_t v64 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    uint64_t v9 = *(void *)(v4 + 72);
    do
    {
      uint64_t v10 = v0[49];
      outlined init with copy of AMDPbHEConfigsReply((uint64_t)v5, v0[47], type metadata accessor for AspireApiRequest);
      AspireApiRequest.amd()(v10);
      outlined destroy of AMDPbHEResponse(v0[47], type metadata accessor for AspireApiRequest);
      uint64_t v11 = v64;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v64 + 16) + 1, 1);
        uint64_t v11 = v64;
      }
      unint64_t v13 = *(void *)(v11 + 16);
      unint64_t v12 = *(void *)(v11 + 24);
      if (v13 >= v12 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
        uint64_t v11 = v64;
      }
      uint64_t v14 = v0[49];
      *(void *)(v11 + 16) = v13 + 1;
      outlined init with take of AMDPbHEConfigsReply(v14, v11+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(void *)(v3 + 72) * v13, type metadata accessor for AMDPbHEQuery);
      uint64_t v5 = (uint64_t *)((char *)v5 + v9);
      --v2;
    }
    while (v2);
    *(void *)(swift_task_alloc() + 16) = v11;
    lazy protocol witness table accessor for type AMDPbHEResponse and conformance AMDPbHEResponse(&lazy protocol witness table cache variable for type AMDPbHEQueries and conformance AMDPbHEQueries, (void (*)(uint64_t))type metadata accessor for AMDPbHEQueries);
    static Message.with(_:)();
    swift_release();
    swift_task_dealloc();
    uint64_t v20 = Message.serializedData(partial:)();
    v0[52] = 0;
    v0[53] = v20;
    v0[54] = v21;
    uint64_t v33 = v20;
    unint64_t v34 = v21;
    uint64_t v35 = v0[31];
    AMSNetworking.constructURL(path:userId:)(0xD000000000000010, 0x8000000249E964D0, v0[45]);
    uint64_t v36 = *(void **)(v35 + OBJC_IVAR____TtC8CipherML13AMSNetworking_encoder);
    URL._bridgeToObjectiveC()((NSURL *)OBJC_IVAR____TtC8CipherML13AMSNetworking_encoder);
    uint64_t v38 = v37;
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    Class v40 = Data._bridgeToObjectiveC()().super.isa;
    id v41 = objc_msgSend(v36, sel_requestWithMethod_URL_headers_parameters_, 4, v38, isa, v40);
    v0[55] = v41;

    v0[14] = closure #3 in AMSNetworking.queries(requests:userId:);
    v0[15] = 0;
    v0[10] = MEMORY[0x263EF8330];
    v0[11] = 1107296256;
    v0[12] = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
    v0[13] = &block_descriptor_11;
    id v42 = _Block_copy(v0 + 10);
    id v63 = v41;
    objc_msgSend(v41, sel_addErrorBlock_, v42);
    _Block_release(v42);
    if (one-time initialization token for networking != -1) {
      swift_once();
    }
    uint64_t v44 = v0[41];
    uint64_t v43 = v0[42];
    uint64_t v45 = v0[40];
    uint64_t v46 = v0[30];
    uint64_t v47 = type metadata accessor for Logger();
    v0[56] = __swift_project_value_buffer(v47, (uint64_t)static Logger.networking);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 16))(v43, v46, v45);
    outlined copy of Data._Representation(v33, v34);
    outlined copy of Data._Representation(v33, v34);
    int64_t v48 = Logger.logObject.getter();
    os_log_type_t v49 = static os_log_type_t.default.getter();
    BOOL v50 = os_log_type_enabled(v48, v49);
    uint64_t v52 = v0[41];
    uint64_t v51 = v0[42];
    uint64_t v53 = v0[40];
    if (v50)
    {
      uint64_t v54 = swift_slowAlloc();
      uint64_t v62 = swift_slowAlloc();
      uint64_t v64 = v62;
      *(_DWORD *)uint64_t v54 = 136380931;
      uint64_t v55 = UUID.uuidString.getter();
      v0[26] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v55, v56, &v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v51, v53);
      *(_WORD *)(v54 + 12) = 2050;
      switch(v34 >> 62)
      {
        case 1uLL:
          outlined consume of Data._Representation(v33, v34);
          LODWORD(v57) = HIDWORD(v33) - v33;
          if (__OFSUB__(HIDWORD(v33), v33))
          {
            __break(1u);
            JUMPOUT(0x249D783C4);
          }
          uint64_t v57 = (int)v57;
          break;
        case 2uLL:
          uint64_t v58 = *(void *)(v33 + 16);
          uint64_t v59 = *(void *)(v33 + 24);
          outlined consume of Data._Representation(v33, v34);
          uint64_t v57 = v59 - v58;
          if (__OFSUB__(v59, v58))
          {
            __break(1u);
            goto LABEL_32;
          }
          break;
        case 3uLL:
LABEL_32:
          outlined consume of Data._Representation(v33, v34);
          uint64_t v57 = 0;
          break;
        default:
          outlined consume of Data._Representation(v33, v34);
          uint64_t v57 = BYTE6(v34);
          break;
      }
      v0[27] = v57;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      outlined consume of Data._Representation(v33, v34);
      _os_log_impl(&dword_249C3F000, v48, v49, "Request to queries-batch has started for userId: '%{private}s', length: %{public}ld", (uint8_t *)v54, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x24C5B4790](v62, -1, -1);
      MEMORY[0x24C5B4790](v54, -1, -1);
    }
    else
    {
      outlined consume of Data._Representation(v33, v34);
      (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v51, v53);
      outlined consume of Data._Representation(v33, v34);
    }

    id v60 = objc_msgSend(*(id *)(v0[31] + OBJC_IVAR____TtC8CipherML13AMSNetworking_urlSession), sel_dataTaskPromiseWithRequestPromise_, v63);
    v0[57] = v60;
    v0[2] = v0;
    v0[7] = v0 + 24;
    v0[3] = AMSNetworking.queries(requests:userId:);
    uint64_t v61 = swift_continuation_init();
    v0[16] = MEMORY[0x263EF8330];
    v0[17] = 0x40000000;
    v0[18] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned AMSURLResult?, @unowned NSError?) -> () with result type AMSURLResult;
    v0[19] = &block_descriptor_12;
    v0[20] = v61;
    objc_msgSend(v60, sel_resultWithCompletion_, v0 + 16);
    return MEMORY[0x270FA23F0](v0 + 2);
  }
  else
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for networking != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Logger.networking);
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl(&dword_249C3F000, v16, v17, "Request to queries-batch has empty request", v18, 2u);
      MEMORY[0x24C5B4790](v18, -1, -1);
    }

    type metadata accessor for CipherMLError();
    lazy protocol witness table accessor for type AMDPbHEResponse and conformance AMDPbHEResponse((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
    uint64_t v19 = (void *)swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    if (one-time initialization token for networking != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)static Logger.networking);
    id v23 = v19;
    id v24 = v19;
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      uint64_t v28 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v27 = 138543362;
      id v29 = v19;
      uint64_t v30 = _swift_stdlib_bridgeErrorToNSError();
      v0[23] = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v28 = v30;

      _os_log_impl(&dword_249C3F000, v25, v26, "Request to queries-batch has failed: %{public}@", v27, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x24C5B4790](v28, -1, -1);
      MEMORY[0x24C5B4790](v27, -1, -1);
    }
    else
    {
    }
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v31 = (uint64_t (*)(void))v0[1];
    return v31();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 464) = v1;
  if (v1) {
    int64_t v2 = AMSNetworking.queries(requests:userId:);
  }
  else {
    int64_t v2 = AMSNetworking.queries(requests:userId:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  NSObject *v16;
  NSObject *v17;
  uint64_t v18;
  SEL *v19;
  void *v20;
  uint8_t *v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  id v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  void *v42;
  id v43;
  uint64_t v44;
  uint8_t *v45;
  uint64_t (*v46)(void);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  void *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  uint8_t *v63;
  void *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  NSObject *log;
  os_log_t loga;
  id v80;
  void *v81;
  uint64_t v82;

  uint64_t v1 = v0;
  uint64_t v4 = (void *)v0[24];
  uint64_t v3 = v0 + 24;
  int64_t v2 = v4;
  uint64_t v5 = (void *)v3[28];
  uint64_t v6 = specialized AMSURLResult.validateSuccessResponse()();
  uint64_t v81 = v3;
  uint64_t v7 = (void *)v3[33];
  if (v5)
  {
    uint64_t v80 = v5;
    uint64_t v9 = v1[54];
    uint64_t v8 = (void *)v1[55];
    uint64_t v10 = v1[53];
    uint64_t v11 = v1[51];
    unint64_t v12 = v1[44];
    unint64_t v13 = v1[45];
    uint64_t v14 = v1[43];

    outlined consume of Data._Representation(v10, v9);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v13, v14);
    outlined destroy of AMDPbHEResponse(v11, type metadata accessor for AMDPbHEQueries);

    goto LABEL_14;
  }
  uint64_t v15 = v6;

  uint64_t v16 = v15;
  os_log_type_t v17 = Logger.logObject.getter();
  uint64_t v18 = static os_log_type_t.default.getter();
  uint64_t v19 = (SEL *)&unk_26527F000;
  if (os_log_type_enabled(v17, (os_log_type_t)v18))
  {
    uint64_t v20 = v1;
    unint64_t v21 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)unint64_t v21 = 134349056;
    uint64_t v22 = [v16 data];
    id v23 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v25 = v24;

    uint64_t v1 = v20;
    switch(v25 >> 62)
    {
      case 1uLL:
        outlined consume of Data._Representation(v23, v25);

        LODWORD(v26) = HIDWORD(v23) - v23;
        if (__OFSUB__(HIDWORD(v23), v23))
        {
          __break(1u);
LABEL_35:
          __break(1u);
          JUMPOUT(0x249D79090);
        }
        os_log_type_t v26 = (int)v26;
        uint64_t v19 = (SEL *)&unk_26527F000;
        break;
      case 2uLL:
        uint64_t v28 = *(void *)(v23 + 16);
        uint64_t v27 = *(void *)(v23 + 24);
        outlined consume of Data._Representation(v23, v25);

        os_log_type_t v26 = v27 - v28;
        if (__OFSUB__(v27, v28)) {
          goto LABEL_35;
        }
        uint64_t v1 = v20;
        uint64_t v19 = (SEL *)&unk_26527F000;
        break;
      case 3uLL:
        outlined consume of Data._Representation(v23, v25);

        os_log_type_t v26 = 0;
        break;
      default:
        outlined consume of Data._Representation(v23, v25);

        os_log_type_t v26 = BYTE6(v25);
        break;
    }
    v1[25] = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl(&dword_249C3F000, v17, (os_log_type_t)v18, "Request to queries-batch has finished response, length: %{public}ld", v21, 0xCu);
    MEMORY[0x24C5B4790](v21, -1, -1);
  }
  else
  {

    os_log_type_t v17 = v16;
  }

  id v29 = [v16 v19[465]];
  uint64_t v30 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v31 = v1;
  uint64_t v33 = v32;

  v31[21] = v30;
  v31[22] = v33;
  unint64_t v34 = v31;
  BinaryDecodingOptions.init()();
  lazy protocol witness table accessor for type AMDPbHEResponse and conformance AMDPbHEResponse(&lazy protocol witness table cache variable for type AMDPbHEResponse and conformance AMDPbHEResponse, (void (*)(uint64_t))type metadata accessor for AMDPbHEResponse);
  Message.init<A>(serializedBytes:extensions:partial:options:)();
  AMDPbHEResponse.validateSuccessResponse()(v31[38]);
  uint64_t v35 = v31[39];
  outlined destroy of AMDPbHEResponse(v31[37], type metadata accessor for AMDPbHEResponse);
  AMDPbHEResponse.validateAPICode(expected:)(3, 1, v35);
  int64_t v48 = v31[39];
  os_log_type_t v49 = v31[36];
  BOOL v50 = v31[32];
  outlined destroy of AMDPbHEResponse(v31[38], type metadata accessor for AMDPbHEResponse);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v48 + *(int *)(v49 + 28), v50, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  uint64_t v51 = type metadata accessor for AMDPbHEResponse.OneOf_Response(0);
  uint64_t v52 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 48))(v50, 1, v51);
  uint64_t v53 = v31[32];
  if (v52 == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v31[32], &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
LABEL_28:
    *(void *)v31[34] = MEMORY[0x263F8EE78];
    UnknownStorage.init()();
    goto LABEL_29;
  }
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined destroy of AMDPbHEResponse(v53, type metadata accessor for AMDPbHEResponse.OneOf_Response);
    goto LABEL_28;
  }
  outlined init with take of AMDPbHEConfigsReply(v53, v31[34], type metadata accessor for AMDPbHEReplies);
LABEL_29:
  uint64_t v54 = v31[34];
  lazy protocol witness table accessor for type AMDPbHEResponse and conformance AMDPbHEResponse(&lazy protocol witness table cache variable for type AMDPbHEReplies and conformance AMDPbHEReplies, (void (*)(uint64_t))type metadata accessor for AMDPbHEReplies);
  uint64_t v55 = Message.isInitialized.getter();
  outlined destroy of AMDPbHEResponse(v54, type metadata accessor for AMDPbHEReplies);
  if (v55)
  {
    unint64_t v56 = v31[39];
    type metadata accessor for AspireApiResponses(0);
    *(void *)(swift_task_alloc() + 16) = v56;
    lazy protocol witness table accessor for type AMDPbHEResponse and conformance AMDPbHEResponse(&lazy protocol witness table cache variable for type AspireApiResponses and conformance AspireApiResponses, (void (*)(uint64_t))type metadata accessor for AspireApiResponses);
    static Message.with(_:)();
    uint64_t v58 = v34[54];
    uint64_t v57 = (void *)v34[55];
    uint64_t v59 = v34[53];
    id v60 = v34[51];
    uint64_t v73 = v34[44];
    uint64_t v72 = v34[45];
    uint64_t v74 = v34[43];
    uint64_t v75 = v34;
    uint64_t v76 = v34[39];

    outlined consume of Data._Representation(v59, v58);
    swift_task_dealloc();
    (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v72, v74);
    outlined destroy of AMDPbHEResponse(v60, type metadata accessor for AMDPbHEQueries);
    outlined destroy of AMDPbHEResponse(v76, type metadata accessor for AMDPbHEResponse);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v46 = (uint64_t (*)(void))v75[1];
    goto LABEL_20;
  }
  uint64_t v61 = Logger.logObject.getter();
  uint64_t v62 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v61, v62))
  {
    id v63 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v63 = 0;
    _os_log_impl(&dword_249C3F000, v61, v62, "Response heReplies is not initialized", v63, 2u);
    MEMORY[0x24C5B4790](v63, -1, -1);
  }
  uint64_t v64 = (void *)v31[55];
  uint64_t v65 = v31[53];
  uint64_t v66 = v31[54];
  unsigned int v67 = v31[44];
  uint64_t v68 = v31[45];
  unsigned int v69 = v31[43];
  int64_t v77 = v31[51];
  loga = (os_log_t)v31[39];

  type metadata accessor for CipherMLError();
  lazy protocol witness table accessor for type AMDPbHEResponse and conformance AMDPbHEResponse((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
  uint64_t v70 = swift_allocError();
  swift_storeEnumTagMultiPayload();
  uint64_t v80 = (id)v70;
  swift_willThrow();

  uint64_t v71 = v66;
  uint64_t v1 = v31;
  outlined consume of Data._Representation(v65, v71);
  (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v68, v69);
  outlined destroy of AMDPbHEResponse(v77, type metadata accessor for AMDPbHEQueries);
  outlined destroy of AMDPbHEResponse((uint64_t)loga, type metadata accessor for AMDPbHEResponse);
LABEL_14:
  if (one-time initialization token for networking != -1) {
    swift_once();
  }
  uint64_t v36 = type metadata accessor for Logger();
  __swift_project_value_buffer(v36, (uint64_t)static Logger.networking);
  unint64_t v37 = v80;
  uint64_t v38 = v80;
  uint64_t v39 = Logger.logObject.getter();
  Class v40 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v39, v40))
  {
    log = v39;
    id v41 = (uint8_t *)swift_slowAlloc();
    id v42 = (void *)swift_slowAlloc();
    *(_DWORD *)id v41 = 138543362;
    uint64_t v43 = v80;
    uint64_t v44 = _swift_stdlib_bridgeErrorToNSError();
    *(v81 - 1) = v44;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v42 = v44;

    _os_log_impl(&dword_249C3F000, log, v40, "Request to queries-batch has failed: %{public}@", v41, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x24C5B4790](v42, -1, -1);
    uint64_t v45 = v41;
    uint64_t v39 = log;
    MEMORY[0x24C5B4790](v45, -1, -1);
  }
  else
  {
  }
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v46 = (uint64_t (*)(void))v1[1];
LABEL_20:
  return v46();
}

{
  void *v0;
  void *v1;
  unint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  id v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  NSObject *v15;
  uint8_t *v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t (*v21)(void);
  uint64_t v23;

  uint64_t v1 = (void *)v0[57];
  int64_t v2 = v0[54];
  uint64_t v3 = (void *)v0[55];
  uint64_t v4 = v0[53];
  uint64_t v5 = v0[51];
  uint64_t v7 = v0[44];
  uint64_t v6 = v0[45];
  uint64_t v8 = v0[43];
  swift_willThrow();

  outlined consume of Data._Representation(v4, v2);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  outlined destroy of AMDPbHEResponse(v5, type metadata accessor for AMDPbHEQueries);

  uint64_t v9 = (void *)v0[58];
  if (one-time initialization token for networking != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Logger.networking);
  uint64_t v11 = v9;
  unint64_t v12 = v9;
  unint64_t v13 = Logger.logObject.getter();
  uint64_t v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = v13;
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    os_log_type_t v17 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 138543362;
    uint64_t v18 = v9;
    uint64_t v19 = _swift_stdlib_bridgeErrorToNSError();
    v0[23] = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *os_log_type_t v17 = v19;

    _os_log_impl(&dword_249C3F000, v15, v14, "Request to queries-batch has failed: %{public}@", v16, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x24C5B4790](v17, -1, -1);
    uint64_t v20 = v16;
    unint64_t v13 = v15;
    MEMORY[0x24C5B4790](v20, -1, -1);
  }
  else
  {
  }
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v21 = (uint64_t (*)(void))v0[1];
  return v21();
}

void closure #3 in AMSNetworking.queries(requests:userId:)(void *a1)
{
}

void closure #1 in AMSNetworking.fetchConfigs(useCases:userId:)(void *a1, const char *a2)
{
  if (one-time initialization token for networking != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.networking);
  id v5 = a1;
  id v6 = a1;
  oslog = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 138543362;
    id v10 = a1;
    uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v9 = v12;

    _os_log_impl(&dword_249C3F000, oslog, v7, a2, v8, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x24C5B4790](v9, -1, -1);
    MEMORY[0x24C5B4790](v8, -1, -1);
  }
  else
  {
  }
}

uint64_t closure #4 in AMSNetworking.queries(requests:userId:)(void *a1, uint64_t a2)
{
  uint64_t v47 = a1;
  uint64_t v3 = type metadata accessor for AMDPbPIRReply(0);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v49 = (uint64_t)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for AMDPbPECReply(0);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v48 = (uint64_t)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for AMDPbHEReply(0);
  uint64_t v50 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for AspireApiResponse(0);
  uint64_t v51 = *(void *)(v13 - 8);
  uint64_t v52 = v13;
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v18 = (char *)&v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for AMDPbHEReplies(0);
  MEMORY[0x270FA5388](v19);
  unint64_t v21 = (uint64_t *)((char *)&v46 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v22 = type metadata accessor for AMDPbHEResponse(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a2 + *(int *)(v22 + 28), (uint64_t)v18, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  uint64_t v23 = type metadata accessor for AMDPbHEResponse.OneOf_Response(0);
  int v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v23 - 8) + 48))(v18, 1, v23);
  uint64_t v25 = MEMORY[0x263F8EE78];
  if (v24 == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v18, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined init with take of AMDPbHEConfigsReply((uint64_t)v18, (uint64_t)v21, type metadata accessor for AMDPbHEReplies);
      goto LABEL_7;
    }
    outlined destroy of AMDPbHEResponse((uint64_t)v18, type metadata accessor for AMDPbHEResponse.OneOf_Response);
  }
  uint64_t *v21 = v25;
  UnknownStorage.init()();
LABEL_7:
  uint64_t v26 = *v21;
  swift_bridgeObjectRetain();
  outlined destroy of AMDPbHEResponse((uint64_t)v21, type metadata accessor for AMDPbHEReplies);
  int64_t v27 = *(void *)(v26 + 16);
  if (v27)
  {
    uint64_t v54 = v25;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v27, 0);
    uint64_t v28 = *(unsigned __int8 *)(v50 + 80);
    uint64_t v46 = v26;
    uint64_t v29 = v26 + ((v28 + 32) & ~v28);
    uint64_t v50 = *(void *)(v50 + 72);
    while (1)
    {
      outlined init with copy of AMDPbHEConfigsReply(v29, (uint64_t)v12, type metadata accessor for AMDPbHEReply);
      outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v12, (uint64_t)v9, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
      uint64_t v30 = type metadata accessor for AMDPbHEReply.OneOf_Reply(0);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v30 - 8) + 48))(v9, 1, v30) == 1) {
        break;
      }
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v31 = v48;
        uint64_t v32 = outlined init with take of AMDPbHEConfigsReply((uint64_t)v9, v48, type metadata accessor for AMDPbPECReply);
        MEMORY[0x270FA5388](v32);
        *(&v46 - 2) = v31;
        lazy protocol witness table accessor for type AMDPbHEResponse and conformance AMDPbHEResponse(&lazy protocol witness table cache variable for type AspireApiResponse and conformance AspireApiResponse, (void (*)(uint64_t))type metadata accessor for AspireApiResponse);
        uint64_t v33 = v53;
        static Message.with(_:)();
        uint64_t v53 = v33;
        unint64_t v34 = type metadata accessor for AMDPbPECReply;
      }
      else
      {
        uint64_t v31 = v49;
        uint64_t v35 = outlined init with take of AMDPbHEConfigsReply((uint64_t)v9, v49, type metadata accessor for AMDPbPIRReply);
        MEMORY[0x270FA5388](v35);
        *(&v46 - 2) = v31;
        lazy protocol witness table accessor for type AMDPbHEResponse and conformance AMDPbHEResponse(&lazy protocol witness table cache variable for type AspireApiResponse and conformance AspireApiResponse, (void (*)(uint64_t))type metadata accessor for AspireApiResponse);
        uint64_t v36 = v53;
        static Message.with(_:)();
        uint64_t v53 = v36;
        unint64_t v34 = type metadata accessor for AMDPbPIRReply;
      }
      outlined destroy of AMDPbHEResponse(v31, v34);
      outlined destroy of AMDPbHEResponse((uint64_t)v12, type metadata accessor for AMDPbHEReply);
      uint64_t v37 = v54;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v37 + 16) + 1, 1);
        uint64_t v37 = v54;
      }
      unint64_t v39 = *(void *)(v37 + 16);
      unint64_t v38 = *(void *)(v37 + 24);
      if (v39 >= v38 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v38 > 1, v39 + 1, 1);
        uint64_t v37 = v54;
      }
      *(void *)(v37 + 16) = v39 + 1;
      outlined init with take of AMDPbHEConfigsReply((uint64_t)v15, v37+ ((*(unsigned __int8 *)(v51 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80))+ *(void *)(v51 + 72) * v39, type metadata accessor for AspireApiResponse);
      v29 += v50;
      if (!--v27)
      {
        swift_bridgeObjectRelease();
        goto LABEL_25;
      }
    }
    if (one-time initialization token for networking != -1) {
      swift_once();
    }
    uint64_t v40 = type metadata accessor for Logger();
    __swift_project_value_buffer(v40, (uint64_t)static Logger.networking);
    id v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v41, v42))
    {
      uint64_t v43 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v43 = 0;
      _os_log_impl(&dword_249C3F000, v41, v42, "Response is neither pecReply nor pirReply", v43, 2u);
      MEMORY[0x24C5B4790](v43, -1, -1);
    }

    type metadata accessor for CipherMLError();
    lazy protocol witness table accessor for type AMDPbHEResponse and conformance AMDPbHEResponse((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    outlined destroy of AMDPbHEResponse((uint64_t)v12, type metadata accessor for AMDPbHEReply);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v37 = MEMORY[0x263F8EE78];
LABEL_25:
    uint64_t v45 = v47;
    uint64_t result = swift_bridgeObjectRelease();
    void *v45 = v37;
  }
  return result;
}

Swift::Void __swiftcall AMSNetworking.cancel()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for networking != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.networking);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_249C3F000, v3, v4, "Cancelling all tasks", v5, 2u);
    MEMORY[0x24C5B4790](v5, -1, -1);
  }

  id v6 = objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC8CipherML13AMSNetworking_urlSession), sel_session);
  v8[4] = closure #1 in AspireNetworkManager.cancel();
  v8[5] = 0;
  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 1107296256;
  v8[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed [NSURLSessionTask]) -> ();
  void v8[3] = &block_descriptor_16;
  uint64_t v7 = _Block_copy(v8);
  objc_msgSend(v6, sel_getAllTasksWithCompletionHandler_, v7);
  _Block_release(v7);
}

uint64_t AMSNetworking.deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC8CipherML13AMSNetworking_baseURL;
  uint64_t v2 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t AMSNetworking.__deallocating_deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC8CipherML13AMSNetworking_baseURL;
  uint64_t v2 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for NetworkManager.networkDelegationConfig.getter in conformance AMSNetworking()
{
  uint64_t v1 = *(void *)(*v0 + OBJC_IVAR____TtC8CipherML13AMSNetworking_networkDelegationConfig);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AMSNetworking(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(**(void **)v3 + 144)
                                                          + **(int **)(**(void **)v3 + 144));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  *uint64_t v8 = v4;
  v8[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return v10(a1, a2, a3);
}

uint64_t protocol witness for NetworkManager.uploadKeys(evaluationKeys:userId:) in conformance AMSNetworking(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(**(void **)v2 + 160)
                                                + **(int **)(**(void **)v2 + 160));
  id v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *id v6 = v3;
  v6[1] = protocol witness for NetworkManager.uploadKeys(evaluationKeys:userId:) in conformance AspireNetworkManager;
  return v8(a1, a2);
}

uint64_t protocol witness for NetworkManager.queries(requests:userId:) in conformance AMSNetworking(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(**(void **)v3 + 168)
                                                          + **(int **)(**(void **)v3 + 168));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  *uint64_t v8 = v4;
  v8[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return v10(a1, a2, a3);
}

uint64_t protocol witness for NetworkManager.cancel() in conformance AMSNetworking()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 176))();
}

unint64_t specialized AMSNetworking.requestHeaders()()
{
  uint64_t v0 = type metadata accessor for Date.ISO8601FormatStyle();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = &v13[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = &v13[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, String)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_249E85E00;
  strcpy((char *)(inited + 32), "Content-Type");
  *(unsigned char *)(inited + 45) = 0;
  *(_WORD *)(inited + 46) = -5120;
  *(void *)(inited + 48) = 0xD000000000000016;
  *(void *)(inited + 56) = 0x8000000249E96550;
  *(void *)(inited + 64) = 0xD000000000000015;
  *(void *)(inited + 72) = 0x8000000249E96570;
  Date.init()();
  default argument 0 of Date.ISO8601Format(_:)((uint64_t)v3);
  uint64_t v9 = Date.ISO8601Format(_:)();
  uint64_t v11 = v10;
  (*(void (**)(unsigned char *, uint64_t))(v1 + 8))(v3, v0);
  (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
  *(void *)(inited + 80) = v9;
  *(void *)(inited + 88) = v11;
  return specialized Dictionary.init(dictionaryLiteral:)(inited);
}

uint64_t block_copy_helper_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_3()
{
  return swift_release();
}

void *specialized AMSURLResult.validateSuccessResponse()()
{
  if (objc_msgSend(v0, sel_responseStatusCode) != (id)200)
  {
    if (one-time initialization token for networking != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    __swift_project_value_buffer(v1, (uint64_t)static Logger.networking);
    id v2 = v0;
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      uint64_t v6 = swift_slowAlloc();
      uint64_t v10 = v6;
      *(_DWORD *)uint64_t v5 = 136446210;
      objc_msgSend(v2, sel_responseStatusCode);
      uint64_t v7 = dispatch thunk of CustomStringConvertible.description.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      swift_arrayDestroy();
      MEMORY[0x24C5B4790](v6, -1, -1);
      MEMORY[0x24C5B4790](v5, -1, -1);
    }
    else
    {
    }
    type metadata accessor for CipherMLError();
    lazy protocol witness table accessor for type AMDPbHEResponse and conformance AMDPbHEResponse((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
  }
  return v0;
}

uint64_t partial apply for closure #2 in AMSNetworking.fetchConfigs(useCases:userId:)(uint64_t *a1)
{
  return closure #2 in AMSNetworking.fetchConfigs(useCases:userId:)(a1, *(void *)(v1 + 16)) & 1;
}

void specialized closure #1 in _NativeDictionary.filter(_:)(unint64_t *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v33 = a2;
  unint64_t v34 = a1;
  uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: AspireApiConfig));
  MEMORY[0x270FA5388](v41);
  uint64_t v7 = (uint64_t *)((char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = type metadata accessor for AspireApiConfig(0);
  uint64_t v40 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v11 = 0;
  os_log_type_t v42 = (void *)a3;
  uint64_t v43 = a4;
  uint64_t v12 = *(void *)(a3 + 64);
  uint64_t v36 = 0;
  uint64_t v37 = a3 + 64;
  uint64_t v13 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & v12;
  int64_t v38 = (unint64_t)(v13 + 63) >> 6;
  unint64_t v39 = v10;
  uint64_t v35 = a4 + 7;
  while (1)
  {
    while (1)
    {
      if (v15)
      {
        unint64_t v16 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        int64_t v44 = v11;
        unint64_t v17 = v16 | (v11 << 6);
      }
      else
      {
        int64_t v18 = v11 + 1;
        if (__OFADD__(v11, 1)) {
          goto LABEL_42;
        }
        if (v18 >= v38) {
          goto LABEL_40;
        }
        unint64_t v19 = *(void *)(v37 + 8 * v18);
        int64_t v20 = v11 + 1;
        if (!v19)
        {
          int64_t v20 = v11 + 2;
          if (v11 + 2 >= v38) {
            goto LABEL_40;
          }
          unint64_t v19 = *(void *)(v37 + 8 * v20);
          if (!v19)
          {
            int64_t v20 = v11 + 3;
            if (v11 + 3 >= v38) {
              goto LABEL_40;
            }
            unint64_t v19 = *(void *)(v37 + 8 * v20);
            if (!v19)
            {
              uint64_t v21 = v11 + 4;
              if (v11 + 4 >= v38) {
                goto LABEL_40;
              }
              unint64_t v19 = *(void *)(v37 + 8 * v21);
              if (!v19)
              {
                while (1)
                {
                  int64_t v20 = v21 + 1;
                  if (__OFADD__(v21, 1)) {
                    goto LABEL_43;
                  }
                  if (v20 >= v38) {
                    goto LABEL_40;
                  }
                  unint64_t v19 = *(void *)(v37 + 8 * v20);
                  ++v21;
                  if (v19) {
                    goto LABEL_20;
                  }
                }
              }
              int64_t v20 = v11 + 4;
            }
          }
        }
LABEL_20:
        unint64_t v15 = (v19 - 1) & v19;
        int64_t v44 = v20;
        unint64_t v17 = __clz(__rbit64(v19)) + (v20 << 6);
      }
      uint64_t v22 = (uint64_t *)(v42[6] + 16 * v17);
      uint64_t v24 = *v22;
      uint64_t v23 = v22[1];
      outlined init with copy of AMDPbHEConfigsReply(v42[7] + *(void *)(v40 + 72) * v17, (uint64_t)v10, type metadata accessor for AspireApiConfig);
      *uint64_t v7 = v24;
      v7[1] = v23;
      uint64_t v25 = (uint64_t)v7;
      outlined init with copy of AMDPbHEConfigsReply((uint64_t)v10, (uint64_t)v7 + *(int *)(v41 + 48), type metadata accessor for AspireApiConfig);
      uint64_t v26 = v43[2];
      if (v26) {
        break;
      }
LABEL_4:
      swift_bridgeObjectRetain_n();
      uint64_t v7 = (void *)v25;
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v25, &demangling cache variable for type metadata for (key: String, value: AspireApiConfig));
      uint64_t v10 = v39;
      outlined destroy of AMDPbHEResponse((uint64_t)v39, type metadata accessor for AspireApiConfig);
      swift_bridgeObjectRelease();
      int64_t v11 = v44;
    }
    BOOL v27 = v43[4] == v24 && v43[5] == v23;
    if (!v27 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
      break;
    }
LABEL_37:
    swift_bridgeObjectRetain_n();
    uint64_t v7 = (void *)v25;
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v25, &demangling cache variable for type metadata for (key: String, value: AspireApiConfig));
    uint64_t v10 = v39;
    outlined destroy of AMDPbHEResponse((uint64_t)v39, type metadata accessor for AspireApiConfig);
    swift_bridgeObjectRelease();
    *(unint64_t *)((char *)v34 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    BOOL v32 = __OFADD__(v36++, 1);
    int64_t v11 = v44;
    if (v32)
    {
      __break(1u);
LABEL_40:
      specialized _NativeDictionary.extractDictionary(using:count:)(v34, v33, v36, v42);
      return;
    }
  }
  if (v26 == 1) {
    goto LABEL_4;
  }
  uint64_t v28 = v35;
  uint64_t v29 = 1;
  while (1)
  {
    uint64_t v30 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    BOOL v31 = *(v28 - 1) == v24 && *v28 == v23;
    if (v31 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      goto LABEL_37;
    }
    v28 += 2;
    ++v29;
    if (v30 == v26) {
      goto LABEL_4;
    }
  }
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
}

uint64_t specialized _NativeDictionary.filter(_:)(uint64_t a1, void *a2)
{
  v15[1] = *MEMORY[0x263EF8340];
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  unint64_t v7 = (unint64_t)((1 << v5) + 63) >> 6;
  size_t v8 = 8 * v7;
  uint64_t isStackAllocationSafe = swift_bridgeObjectRetain_n();
  if (v6 <= 0xD || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x270FA5388](isStackAllocationSafe);
    bzero((char *)v15 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    swift_bridgeObjectRetain();
    specialized closure #1 in _NativeDictionary.filter(_:)((void *)((char *)v15 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0)), v7, a1, a2);
    uint64_t v11 = v10;
    swift_bridgeObjectRelease();
    if (v2) {
      swift_willThrow();
    }
    swift_bridgeObjectRelease_n();
  }
  else
  {
    uint64_t v12 = (void *)swift_slowAlloc();
    bzero(v12, v8);
    swift_bridgeObjectRetain();
    specialized closure #1 in _NativeDictionary.filter(_:)((unint64_t *)v12, v7, a1, a2);
    uint64_t v11 = v13;
    swift_bridgeObjectRelease();
    MEMORY[0x24C5B4790](v12, -1, -1);
    swift_bridgeObjectRelease_n();
  }
  return v11;
}

unint64_t lazy protocol witness table accessor for type [String] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [String] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A]);
  }
  return result;
}

uint64_t partial apply for closure #4 in AMSNetworking.queries(requests:userId:)(void *a1)
{
  return closure #4 in AMSNetworking.queries(requests:userId:)(a1, *(void *)(v1 + 16));
}

uint64_t ObjC metadata update function for AMSNetworking()
{
  return type metadata accessor for AMSNetworking();
}

uint64_t type metadata accessor for AMSNetworking()
{
  uint64_t result = type metadata singleton initialization cache for AMSNetworking;
  if (!type metadata singleton initialization cache for AMSNetworking) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for AMSNetworking()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for AMSNetworking(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for AMSNetworking);
}

uint64_t dispatch thunk of AMSNetworking.__allocating_init(networkDelegationConfig:secondaryIdentifier:baseURL:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of AMSNetworking.fetchConfigs(useCases:userId:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)v3 + 144)
                                                          + **(int **)(*(void *)v3 + 144));
  size_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  *size_t v8 = v4;
  v8[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return v10(a1, a2, a3);
}

uint64_t dispatch thunk of AMSNetworking.fetchConfigParameters(useCases:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of AMSNetworking.uploadKeys(evaluationKeys:userId:)(uint64_t a1, uint64_t a2)
{
  size_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(*(void *)v2 + 160) + **(int **)(*(void *)v2 + 160));
  unsigned int v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *unsigned int v6 = v3;
  v6[1] = protocol witness for NetworkManager.uploadKeys(evaluationKeys:userId:) in conformance AspireNetworkManager;
  return v8(a1, a2);
}

uint64_t dispatch thunk of AMSNetworking.queries(requests:userId:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)v3 + 168)
                                                          + **(int **)(*(void *)v3 + 168));
  size_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  *size_t v8 = v4;
  v8[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return v10(a1, a2, a3);
}

uint64_t dispatch thunk of AMSNetworking.cancel()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t lazy protocol witness table accessor for type AMDPbHEResponse and conformance AMDPbHEResponse(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with take of AMDPbHEConfigsReply(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with copy of AMDPbHEConfigsReply(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of AMDPbHEResponse(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void *Logger.subsystem.unsafeMutableAddressor()
{
  return &static Logger.subsystem;
}

unint64_t protocol witness for static ScheduledActivityHandler.identifier.getter in conformance RotationTask()
{
  return 0xD00000000000001FLL;
}

unint64_t static RotationTask.identifier.getter()
{
  return 0xD00000000000001FLL;
}

void *CMLXPCServer.dynamicUseCaseEntitlement.unsafeMutableAddressor()
{
  return &static CMLXPCServer.dynamicUseCaseEntitlement;
}

const char *AllowList.allowListFileName.unsafeMutableAddressor()
{
  return "allow-list";
}

void *TokenFetcherTask.identifier.unsafeMutableAddressor()
{
  return &static TokenFetcherTask.identifier;
}

unint64_t protocol witness for static ScheduledActivityHandler.identifier.getter in conformance TokenFetcherTask()
{
  return 0xD000000000000023;
}

unint64_t static TokenFetcherTask.identifier.getter()
{
  return 0xD000000000000023;
}

void *KVSKeyStorage.storeName.unsafeMutableAddressor()
{
  return &static KVSKeyStorage.storeName;
}

void *ActiveUseCaseTracker.fileName.unsafeMutableAddressor()
{
  return &static ActiveUseCaseTracker.fileName;
}

unint64_t static ActiveUseCaseTracker.fileName.getter()
{
  return 0xD000000000000015;
}

uint64_t static AllowList.allowListFileName.getter()
{
  return 0x696C2D776F6C6C61;
}

void *CMLXPCServer.serviceName.unsafeMutableAddressor()
{
  return &static CMLXPCServer.serviceName;
}

unint64_t static CMLXPCServer.serviceName.getter()
{
  return 0xD000000000000013;
}

void *CMLXPCServer.requiredXPCEntitlement.unsafeMutableAddressor()
{
  return &static CMLXPCServer.requiredXPCEntitlement;
}

unint64_t static CMLXPCServer.requiredXPCEntitlement.getter()
{
  return 0xD000000000000021;
}

unint64_t static CMLXPCServer.dynamicUseCaseEntitlement.getter()
{
  return 0xD000000000000030;
}

void *CacheCleaner.identifier.unsafeMutableAddressor()
{
  return &static CacheCleaner.identifier;
}

unint64_t static CacheCleaner.identifier.getter()
{
  return 0xD00000000000001FLL;
}

void *CacheDirectory.cacheDirectoryName.unsafeMutableAddressor()
{
  return &static CacheDirectory.cacheDirectoryName;
}

unint64_t static CacheDirectory.cacheDirectoryName.getter()
{
  return 0xD000000000000013;
}

void *ConfigCache.cacheFileName.unsafeMutableAddressor()
{
  return &static ConfigCache.cacheFileName;
}

unint64_t static ConfigCache.cacheFileName.getter()
{
  return 0xD000000000000013;
}

unint64_t static KVSKeyStorage.storeName.getter()
{
  return 0xD000000000000013;
}

unint64_t static Logger.subsystem.getter()
{
  return 0xD000000000000012;
}

void *RotationTask.identifier.unsafeMutableAddressor()
{
  return &static RotationTask.identifier;
}

unint64_t protocol witness for static ScheduledActivityHandler.identifier.getter in conformance CacheCleaner()
{
  return 0xD00000000000001FLL;
}

uint64_t CacheDirectory.configCacheFile.unsafeMutableAddressor()
{
  return CacheDirectory.configCacheFile.unsafeMutableAddressor(&one-time initialization token for configCacheFile, (uint64_t)static CacheDirectory.configCacheFile);
}

uint64_t CacheDirectory.activeUseCaseTrackerFile.unsafeMutableAddressor()
{
  return CacheDirectory.configCacheFile.unsafeMutableAddressor(&one-time initialization token for activeUseCaseTrackerFile, (uint64_t)static CacheDirectory.activeUseCaseTrackerFile);
}

uint64_t CacheDirectory.url.unsafeMutableAddressor()
{
  return CacheDirectory.configCacheFile.unsafeMutableAddressor(&one-time initialization token for url, (uint64_t)static CacheDirectory.url);
}

uint64_t CacheDirectory.fakeQueriesDirectory.unsafeMutableAddressor()
{
  return CacheDirectory.configCacheFile.unsafeMutableAddressor(&one-time initialization token for fakeQueriesDirectory, (uint64_t)static CacheDirectory.fakeQueriesDirectory);
}

uint64_t CacheDirectory.dynamicAllowListFile.unsafeMutableAddressor()
{
  return CacheDirectory.configCacheFile.unsafeMutableAddressor(&one-time initialization token for dynamicAllowListFile, (uint64_t)static CacheDirectory.dynamicAllowListFile);
}

uint64_t CacheDirectory.tokenCacheFile.unsafeMutableAddressor()
{
  return CacheDirectory.configCacheFile.unsafeMutableAddressor(&one-time initialization token for tokenCacheFile, (uint64_t)static CacheDirectory.tokenCacheFile);
}

uint64_t CacheDirectory.configCacheFile.unsafeMutableAddressor(void *a1, uint64_t a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for URL();
  return __swift_project_value_buffer(v3, a2);
}

uint64_t getTempDirectory()@<X0>(uint64_t a1@<X8>)
{
  v30[1] = *(id *)MEMORY[0x263EF8340];
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = objc_msgSend(self, sel_defaultManager);
  id v7 = objc_msgSend(v6, sel_temporaryDirectory);
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  URL._bridgeToObjectiveC()(v8);
  uint64_t v10 = v9;
  v30[0] = 0;
  id v11 = objc_msgSend(v6, sel_URLForDirectory_inDomain_appropriateForURL_create_error_, 99, 1, v9, 1, v30);

  id v12 = v30[0];
  if (v11)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)();
    id v13 = v12;

    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  else
  {
    id v15 = v30[0];
    unint64_t v16 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    if (one-time initialization token for daemon != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Logger.daemon);
    id v18 = v16;
    id v19 = v16;
    int64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v29 = v2;
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      BOOL v27 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v22 = 138543362;
      os_log_t v28 = v20;
      id v23 = v16;
      uint64_t v24 = (void *)_swift_stdlib_bridgeErrorToNSError();
      v30[0] = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v25 = v27;
      *BOOL v27 = v24;
      uint64_t v2 = v29;

      os_log_t v26 = v28;
      _os_log_impl(&dword_249C3F000, v28, v21, "Failed to create unique temp directory, falling back to base temp directory: %{public}@", v22, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x24C5B4790](v25, -1, -1);
      MEMORY[0x24C5B4790](v22, -1, -1);
    }
    else
    {
    }
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v3 + 32))(a1, v5, v2);
  }
}

void createDirectory(_:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  v49[1] = *(id *)MEMORY[0x263EF8340];
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  size_t v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v44 - v9;
  id v11 = objc_msgSend(self, sel_defaultManager);
  URL._bridgeToObjectiveC()(v12);
  uint64_t v14 = v13;
  v49[0] = 0;
  unsigned int v15 = objc_msgSend(v11, sel_createDirectoryAtURL_withIntermediateDirectories_attributes_error_, v13, 1, 0, v49);

  if (v15)
  {
    uint64_t v46 = a1;
    uint64_t v47 = a2;
    uint64_t v16 = one-time initialization token for daemon;
    id v17 = v49[0];
    if (v16 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    __swift_project_value_buffer(v18, (uint64_t)static Logger.daemon);
    id v19 = *(void (**)(char *, void *, uint64_t))(v5 + 16);
    v19(v10, v46, v4);
    int64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      id v23 = (void *)swift_slowAlloc();
      uint64_t v45 = v19;
      uint64_t v24 = v23;
      v49[0] = v23;
      *(_DWORD *)uint64_t v22 = 136446210;
      int64_t v44 = v22 + 4;
      lazy protocol witness table accessor for type URL and conformance URL();
      uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v48 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, (uint64_t *)v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
      _os_log_impl(&dword_249C3F000, v20, v21, "Successful access of directory at %{public}s", v22, 0xCu);
      swift_arrayDestroy();
      BOOL v27 = v24;
      id v19 = v45;
      MEMORY[0x24C5B4790](v27, -1, -1);
      MEMORY[0x24C5B4790](v22, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
    }

    v19((char *)v47, v46, v4);
  }
  else
  {
    id v28 = v49[0];
    uint64_t v29 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    if (one-time initialization token for daemon != -1) {
      swift_once();
    }
    uint64_t v30 = type metadata accessor for Logger();
    __swift_project_value_buffer(v30, (uint64_t)static Logger.daemon);
    (*(void (**)(char *, void *, uint64_t))(v5 + 16))(v8, a1, v4);
    id v31 = v29;
    id v32 = v29;
    uint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = swift_slowAlloc();
      uint64_t v47 = a2;
      uint64_t v36 = v35;
      uint64_t v45 = (void (*)(char *, void *, uint64_t))swift_slowAlloc();
      uint64_t v46 = (void *)swift_slowAlloc();
      v49[0] = v46;
      *(_DWORD *)uint64_t v36 = 136446466;
      lazy protocol witness table accessor for type URL and conformance URL();
      uint64_t v37 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v48 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v38, (uint64_t *)v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      *(_WORD *)(v36 + 12) = 2114;
      id v39 = v29;
      uint64_t v40 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v48 = v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v41 = v45;
      *(void *)uint64_t v45 = v40;

      _os_log_impl(&dword_249C3F000, v33, v34, "Failed to create directory at %{public}s, falling back to temp directory: %{public}@", (uint8_t *)v36, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x24C5B4790](v41, -1, -1);
      os_log_type_t v42 = v46;
      swift_arrayDestroy();
      MEMORY[0x24C5B4790](v42, -1, -1);
      uint64_t v43 = v36;
      a2 = v47;
      MEMORY[0x24C5B4790](v43, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    }
    getTempDirectory()(a2);
  }
}

uint64_t one-time initialization function for url()
{
  uint64_t v0 = type metadata accessor for URL();
  __swift_allocate_value_buffer(v0, static CacheDirectory.url);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)static CacheDirectory.url);
  return closure #1 in variable initialization expression of static CacheDirectory.url(v1);
}

uint64_t closure #1 in variable initialization expression of static CacheDirectory.url@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  specialized static DaemonContainerPathLookup.path(for:)(0, 0);
  URL.init(fileURLWithPath:)();
  swift_bridgeObjectRelease();
  createDirectory(_:)(v5, a1);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t static CacheDirectory.url.getter@<X0>(uint64_t a1@<X8>)
{
  return static CacheDirectory.url.getter(&one-time initialization token for url, (uint64_t)static CacheDirectory.url, a1);
}

uint64_t one-time initialization function for configCacheFile(uint64_t a1)
{
  return one-time initialization function for configCacheFile(a1, static CacheDirectory.configCacheFile, 0xD000000000000013, 0x8000000249E96600);
}

uint64_t static CacheDirectory.configCacheFile.getter@<X0>(uint64_t a1@<X8>)
{
  return static CacheDirectory.url.getter(&one-time initialization token for configCacheFile, (uint64_t)static CacheDirectory.configCacheFile, a1);
}

uint64_t one-time initialization function for activeUseCaseTrackerFile(uint64_t a1)
{
  return one-time initialization function for configCacheFile(a1, static CacheDirectory.activeUseCaseTrackerFile, 0xD000000000000015, 0x8000000249E96590);
}

uint64_t static CacheDirectory.activeUseCaseTrackerFile.getter@<X0>(uint64_t a1@<X8>)
{
  return static CacheDirectory.url.getter(&one-time initialization token for activeUseCaseTrackerFile, (uint64_t)static CacheDirectory.activeUseCaseTrackerFile, a1);
}

uint64_t one-time initialization function for dynamicAllowListFile(uint64_t a1)
{
  return one-time initialization function for configCacheFile(a1, static CacheDirectory.dynamicAllowListFile, 0xD000000000000016, 0x8000000249E96680);
}

uint64_t static CacheDirectory.dynamicAllowListFile.getter@<X0>(uint64_t a1@<X8>)
{
  return static CacheDirectory.url.getter(&one-time initialization token for dynamicAllowListFile, (uint64_t)static CacheDirectory.dynamicAllowListFile, a1);
}

uint64_t one-time initialization function for tokenCacheFile(uint64_t a1)
{
  return one-time initialization function for configCacheFile(a1, static CacheDirectory.tokenCacheFile, 0xD000000000000011, 0x8000000249E96640);
}

uint64_t one-time initialization function for configCacheFile(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for URL.DirectoryHint();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for URL();
  __swift_allocate_value_buffer(v11, a2);
  __swift_project_value_buffer(v11, (uint64_t)a2);
  if (one-time initialization token for url != -1) {
    swift_once();
  }
  __swift_project_value_buffer(v11, (uint64_t)static CacheDirectory.url);
  v13[0] = a3;
  v13[1] = a4;
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, *MEMORY[0x263F06E50], v7);
  lazy protocol witness table accessor for type String and conformance String();
  URL.appending<A>(component:directoryHint:)();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return swift_bridgeObjectRelease();
}

uint64_t static CacheDirectory.tokenCacheFile.getter@<X0>(uint64_t a1@<X8>)
{
  return static CacheDirectory.url.getter(&one-time initialization token for tokenCacheFile, (uint64_t)static CacheDirectory.tokenCacheFile, a1);
}

uint64_t one-time initialization function for fakeQueriesDirectory()
{
  uint64_t v0 = type metadata accessor for URL.DirectoryHint();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_allocate_value_buffer(v8, static CacheDirectory.fakeQueriesDirectory);
  uint64_t v9 = __swift_project_value_buffer(v4, (uint64_t)static CacheDirectory.fakeQueriesDirectory);
  if (one-time initialization token for url != -1) {
    swift_once();
  }
  __swift_project_value_buffer(v4, (uint64_t)static CacheDirectory.url);
  v11[0] = 0xD000000000000014;
  v11[1] = 0x8000000249E96660;
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, *MEMORY[0x263F06E50], v0);
  lazy protocol witness table accessor for type String and conformance String();
  URL.appending<A>(component:directoryHint:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  swift_bridgeObjectRelease();
  createDirectory(_:)(v7, v9);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t static CacheDirectory.fakeQueriesDirectory.getter@<X0>(uint64_t a1@<X8>)
{
  return static CacheDirectory.url.getter(&one-time initialization token for fakeQueriesDirectory, (uint64_t)static CacheDirectory.fakeQueriesDirectory, a1);
}

uint64_t static CacheDirectory.url.getter@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = __swift_project_value_buffer(v5, a2);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v7(a3, v6, v5);
}

ValueMetadata *type metadata accessor for CacheDirectory()
{
  return &type metadata for CacheDirectory;
}

unint64_t lazy protocol witness table accessor for type URL and conformance URL()
{
  unint64_t result = lazy protocol witness table cache variable for type URL and conformance URL;
  if (!lazy protocol witness table cache variable for type URL and conformance URL)
  {
    type metadata accessor for URL();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL);
  }
  return result;
}

void *closure #1 in static Sharding.sha256Shard(keyword:shardCount:)@<X0>(void *result@<X0>, void *a2@<X8>)
{
  if (result) {
    *a2 = *result;
  }
  else {
    __break(1u);
  }
  return result;
}

unint64_t specialized static Sharding.sha256Shard(keyword:shardCount:)(uint64_t a1, unint64_t a2, unint64_t a3)
{
  v21[3] = *MEMORY[0x263EF8340];
  uint64_t v6 = type metadata accessor for SHA256();
  uint64_t v20 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for SHA256Digest();
  uint64_t v19 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  lazy protocol witness table accessor for type SHA256 and conformance SHA256();
  dispatch thunk of HashFunction.init()();
  switch(a2 >> 62)
  {
    case 1uLL:
      uint64_t v18 = v9;
      if (a1 >> 32 < (int)a1) {
        goto LABEL_13;
      }
      uint64_t v17 = 0;
      outlined copy of Data._Representation(a1, a2);
      specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)a1, a1 >> 32);
      outlined consume of Data._Representation(a1, a2);
      uint64_t v9 = v18;
      break;
    case 2uLL:
      uint64_t v17 = 0;
      uint64_t v18 = v9;
      uint64_t v13 = *(void *)(a1 + 16);
      uint64_t v12 = *(void *)(a1 + 24);
      outlined copy of Data._Representation(a1, a2);
      swift_retain();
      swift_retain();
      uint64_t v14 = v13;
      uint64_t v9 = v18;
      specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v14, v12);
      swift_release();
      swift_release();
      goto LABEL_6;
    case 3uLL:
      memset(v21, 0, 14);
      goto LABEL_5;
    default:
      v21[0] = a1;
      LOWORD(v21[1]) = a2;
      BYTE2(v21[1]) = BYTE2(a2);
      BYTE3(v21[1]) = BYTE3(a2);
      BYTE4(v21[1]) = BYTE4(a2);
      BYTE5(v21[1]) = BYTE5(a2);
LABEL_5:
      dispatch thunk of HashFunction.update(bufferPointer:)();
LABEL_6:
      outlined consume of Data._Representation(a1, a2);
      break;
  }
  dispatch thunk of HashFunction.finalize()();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v8, v6);
  SHA256Digest.withUnsafeBytes<A>(_:)();
  if ((a3 & 0x8000000000000000) != 0)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x249D7CFD0);
  }
  if (!a3)
  {
    __break(1u);
LABEL_13:
    __break(1u);
  }
  unint64_t v15 = v21[0];
  (*(void (**)(char *, uint64_t))(v19 + 8))(v11, v9);
  return v15 % a3;
}

ValueMetadata *type metadata accessor for Sharding()
{
  return &type metadata for Sharding;
}

unint64_t lazy protocol witness table accessor for type SHA256 and conformance SHA256()
{
  unint64_t result = lazy protocol witness table cache variable for type SHA256 and conformance SHA256;
  if (!lazy protocol witness table cache variable for type SHA256 and conformance SHA256)
  {
    type metadata accessor for SHA256();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SHA256 and conformance SHA256);
  }
  return result;
}

uint64_t AMDPbHEResponse.apiCode.getter()
{
  uint64_t v1 = (unsigned char *)(v0 + *(int *)(type metadata accessor for AMDPbHEResponse(0) + 36));
  if (v1[9]) {
    return 0;
  }
  else {
    return *(void *)v1;
  }
}

uint64_t type metadata accessor for AMDPbHEResponse(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AMDPbHEResponse);
}

uint64_t AMDPbHEResponse.configs.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for AMDPbHEResponse(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + *(int *)(v6 + 28), (uint64_t)v5, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  uint64_t v7 = type metadata accessor for AMDPbHEResponse.OneOf_Response(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 2) {
      return _s8CipherML19AMDPbHEConfigsReplyVWObTm_0((uint64_t)v5, (uint64_t)a1, type metadata accessor for AMDPbHEConfigsReply);
    }
    outlined destroy of AMDPbHEResponse.OneOf_Response((uint64_t)v5, type metadata accessor for AMDPbHEResponse.OneOf_Response);
  }
  unint64_t v9 = MEMORY[0x263F8EE78];
  *a1 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  a1[1] = v9;
  type metadata accessor for AMDPbHEConfigsReply(0);
  return UnknownStorage.init()();
}

uint64_t type metadata accessor for AMDPbHEResponse.OneOf_Response(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AMDPbHEResponse.OneOf_Response);
}

uint64_t AMDPbHEResponse.heReplies.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for AMDPbHEResponse(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + *(int *)(v6 + 28), (uint64_t)v5, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  uint64_t v7 = type metadata accessor for AMDPbHEResponse.OneOf_Response(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1) {
      return _s8CipherML19AMDPbHEConfigsReplyVWObTm_0((uint64_t)v5, (uint64_t)a1, type metadata accessor for AMDPbHEReplies);
    }
    outlined destroy of AMDPbHEResponse.OneOf_Response((uint64_t)v5, type metadata accessor for AMDPbHEResponse.OneOf_Response);
  }
  *a1 = MEMORY[0x263F8EE78];
  type metadata accessor for AMDPbHEReplies(0);
  return UnknownStorage.init()();
}

uint64_t _s8CipherML19AMDPbHEConfigsReplyVWObTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t AMDPbHE_APICode.init()()
{
  return 0;
}

uint64_t AMDPbHE_APICode.init(rawValue:)(uint64_t a1)
{
  return AMDPbHE_APICode.init(rawValue:)(a1, (uint64_t (*)(void))specialized AMDPbHE_APICode.init(rawValue:));
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance AMDPbHE_APICode@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Enum.init(rawValue:) in conformance AMDPbHE_APICode((uint64_t (*)(void))specialized AMDPbHE_APICode.init(rawValue:), a1);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance AMDPbHE_APICode@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for RawRepresentable.init(rawValue:) in conformance AMDPbHE_APICode(a1, (uint64_t (*)(void))specialized AMDPbHE_APICode.init(rawValue:), a2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AMDPbHE_APICode(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type AMDPbHE_APICode and conformance AMDPbHE_APICode();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

void one-time initialization function for allCases()
{
  static AMDPbHE_APICode.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static AMDPbHEResponse.PbStatus.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static AspirePirPirAlgorithm.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static AspirePirKeyCompressionStrategy.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static AspirePirSymmetricPirConfigType.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static AspireHeSecurityLevel.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static AspireHeErrorStdDev.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static AspireHeHeScheme.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static AspireSimilaritySimilarityMetric.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

uint64_t *AMDPbHE_APICode.allCases.unsafeMutableAddressor()
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  return &static AMDPbHE_APICode.allCases;
}

uint64_t static AMDPbHE_APICode.allCases.getter()
{
  return static AMDPbHE_APICode.allCases.getter(&one-time initialization token for allCases);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance AMDPbHE_APICode@<X0>(void *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance AMDPbHE_APICode(&one-time initialization token for allCases, &static AMDPbHE_APICode.allCases, a1);
}

uint64_t AMDPbHEResponse.apiCode.setter(uint64_t a1, char a2)
{
  char v4 = a2 & 1;
  uint64_t result = type metadata accessor for AMDPbHEResponse(0);
  uint64_t v6 = v2 + *(int *)(result + 36);
  *(void *)uint64_t v6 = a1;
  *(unsigned char *)(v6 + 8) = v4;
  *(unsigned char *)(v6 + 9) = 0;
  return result;
}

uint64_t (*AMDPbHEResponse.apiCode.modify(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for AMDPbHEResponse(0) + 36);
  *(_DWORD *)(a1 + 12) = v3;
  char v4 = (uint64_t *)(v1 + v3);
  uint64_t v5 = *v4;
  char v6 = *((unsigned char *)v4 + 8);
  int v7 = *((unsigned __int8 *)v4 + 9);
  if (v7) {
    uint64_t v5 = 0;
  }
  *(void *)a1 = v5;
  *(unsigned char *)(a1 + 8) = (v7 | v6) & 1;
  return AMDPbHEResponse.apiCode.modify;
}

uint64_t AMDPbHEResponse.apiCode.modify(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16) + *(int *)(result + 12);
  unsigned __int8 v2 = *(unsigned char *)(result + 8);
  *(void *)uint64_t v1 = *(void *)result;
  *(_WORD *)(v1 + 8) = v2;
  return result;
}

BOOL AMDPbHEResponse.hasApiCode.getter()
{
  return (*(unsigned char *)(v0 + *(int *)(type metadata accessor for AMDPbHEResponse(0) + 36) + 9) & 1) == 0;
}

Swift::Void __swiftcall AMDPbHEResponse.clearApiCode()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for AMDPbHEResponse(0) + 36);
  *(void *)uint64_t v1 = 0;
  *(_WORD *)(v1 + 8) = 256;
}

uint64_t AMDPbHEResponse.status.getter()
{
  return *(void *)v0;
}

uint64_t AMDPbHEResponse.status.setter(uint64_t result, char a2)
{
  *(void *)uint64_t v2 = result;
  *(unsigned char *)(v2 + 8) = a2 & 1;
  return result;
}

uint64_t (*AMDPbHEResponse.status.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbHEResponse.statuses.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AMDPbHEResponse.statuses.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 16) = a1;
  return result;
}

uint64_t (*AMDPbHEResponse.statuses.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbHEResponse.errorMessage.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AMDPbHEResponse.errorMessage.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 24) = a1;
  return result;
}

uint64_t (*AMDPbHEResponse.errorMessage.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbHEResponse.response.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for AMDPbHEResponse(0);
  return outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + *(int *)(v3 + 28), a1, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
}

uint64_t AMDPbHEResponse.response.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AMDPbHEResponse(0) + 28);
  return outlined assign with take of AMDPbHEResponse.OneOf_Response?(a1, v3);
}

uint64_t (*AMDPbHEResponse.response.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbHEResponse.heReply.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for AMDPbHEResponse(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + *(int *)(v6 + 28), (uint64_t)v5, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  uint64_t v7 = type metadata accessor for AMDPbHEResponse.OneOf_Response(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
LABEL_5:
    uint64_t v8 = type metadata accessor for AMDPbHEReply.OneOf_Reply(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(a1, 1, 1, v8);
    type metadata accessor for AMDPbHEReply(0);
    return UnknownStorage.init()();
  }
  if (swift_getEnumCaseMultiPayload())
  {
    outlined destroy of AMDPbHEResponse.OneOf_Response((uint64_t)v5, type metadata accessor for AMDPbHEResponse.OneOf_Response);
    goto LABEL_5;
  }
  return _s8CipherML19AMDPbHEConfigsReplyVWObTm_0((uint64_t)v5, a1, type metadata accessor for AMDPbHEReply);
}

uint64_t key path getter for AMDPbHEResponse.heReply : AMDPbHEResponse@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for AMDPbHEResponse(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v7 + 28), (uint64_t)v6, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  uint64_t v8 = type metadata accessor for AMDPbHEResponse.OneOf_Response(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v6, 1, v8) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
LABEL_5:
    uint64_t v9 = type metadata accessor for AMDPbHEReply.OneOf_Reply(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(a2, 1, 1, v9);
    type metadata accessor for AMDPbHEReply(0);
    return UnknownStorage.init()();
  }
  if (swift_getEnumCaseMultiPayload())
  {
    outlined destroy of AMDPbHEResponse.OneOf_Response((uint64_t)v6, type metadata accessor for AMDPbHEResponse.OneOf_Response);
    goto LABEL_5;
  }
  return _s8CipherML19AMDPbHEConfigsReplyVWObTm_0((uint64_t)v6, a2, type metadata accessor for AMDPbHEReply);
}

uint64_t AMDPbHEResponse.heReply.setter(uint64_t a1)
{
  return AMDPbHEResponse.heReply.setter(a1, type metadata accessor for AMDPbHEReply);
}

void (*AMDPbHEResponse.heReply.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  size_t v6 = *(void *)(*(void *)(type metadata accessor for AMDPbHEReply(0) - 8) + 64);
  v3[2] = malloc(v6);
  uint64_t v7 = malloc(v6);
  v3[3] = v7;
  uint64_t v8 = *(int *)(type metadata accessor for AMDPbHEResponse(0) + 28);
  *((_DWORD *)v3 + 12) = v8;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + v8, (uint64_t)v5, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  uint64_t v9 = type metadata accessor for AMDPbHEResponse.OneOf_Response(0);
  v3[4] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v3[5] = v10;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v5, 1, v9) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  }
  else
  {
    if (!swift_getEnumCaseMultiPayload())
    {
      _s8CipherML19AMDPbHEConfigsReplyVWObTm_0((uint64_t)v5, (uint64_t)v7, type metadata accessor for AMDPbHEReply);
      return AMDPbHEResponse.heReply.modify;
    }
    outlined destroy of AMDPbHEResponse.OneOf_Response((uint64_t)v5, type metadata accessor for AMDPbHEResponse.OneOf_Response);
  }
  uint64_t v11 = type metadata accessor for AMDPbHEReply.OneOf_Reply(0);
  (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v7, 1, 1, v11);
  UnknownStorage.init()();
  return AMDPbHEResponse.heReply.modify;
}

void AMDPbHEResponse.heReply.modify(uint64_t a1, char a2)
{
}

uint64_t key path getter for AMDPbHEResponse.heReplies : AMDPbHEResponse@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  MEMORY[0x270FA5388](v4 - 8);
  size_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for AMDPbHEResponse(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v7 + 28), (uint64_t)v6, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  uint64_t v8 = type metadata accessor for AMDPbHEResponse.OneOf_Response(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v6, 1, v8) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1) {
      return _s8CipherML19AMDPbHEConfigsReplyVWObTm_0((uint64_t)v6, (uint64_t)a2, type metadata accessor for AMDPbHEReplies);
    }
    outlined destroy of AMDPbHEResponse.OneOf_Response((uint64_t)v6, type metadata accessor for AMDPbHEResponse.OneOf_Response);
  }
  *a2 = MEMORY[0x263F8EE78];
  type metadata accessor for AMDPbHEReplies(0);
  return UnknownStorage.init()();
}

uint64_t AMDPbHEResponse.heReplies.setter(uint64_t a1)
{
  return AMDPbHEResponse.heReply.setter(a1, type metadata accessor for AMDPbHEReplies);
}

void (*AMDPbHEResponse.heReplies.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  size_t v6 = *(void *)(*(void *)(type metadata accessor for AMDPbHEReplies(0) - 8) + 64);
  v3[2] = malloc(v6);
  uint64_t v7 = malloc(v6);
  v3[3] = v7;
  uint64_t v8 = *(int *)(type metadata accessor for AMDPbHEResponse(0) + 28);
  *((_DWORD *)v3 + 12) = v8;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + v8, (uint64_t)v5, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  uint64_t v9 = type metadata accessor for AMDPbHEResponse.OneOf_Response(0);
  v3[4] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v3[5] = v10;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v5, 1, v9) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
LABEL_6:
    *uint64_t v7 = MEMORY[0x263F8EE78];
    UnknownStorage.init()();
    return AMDPbHEResponse.heReplies.modify;
  }
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined destroy of AMDPbHEResponse.OneOf_Response((uint64_t)v5, type metadata accessor for AMDPbHEResponse.OneOf_Response);
    goto LABEL_6;
  }
  _s8CipherML19AMDPbHEConfigsReplyVWObTm_0((uint64_t)v5, (uint64_t)v7, type metadata accessor for AMDPbHEReplies);
  return AMDPbHEResponse.heReplies.modify;
}

void AMDPbHEResponse.heReplies.modify(uint64_t a1, char a2)
{
}

uint64_t key path setter for AMDPbHEResponse.heReply : AMDPbHEResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  uint64_t v11 = a5(0);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v17 - v12;
  outlined init with copy of AMDPbHEReply(a1, (uint64_t)&v17 - v12, a6);
  uint64_t v14 = a2 + *(int *)(type metadata accessor for AMDPbHEResponse(0) + 28);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v14, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  _s8CipherML19AMDPbHEConfigsReplyVWObTm_0((uint64_t)v13, v14, a7);
  uint64_t v15 = type metadata accessor for AMDPbHEResponse.OneOf_Response(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 0, 1, v15);
}

uint64_t AMDPbHEResponse.configs.setter(uint64_t a1)
{
  return AMDPbHEResponse.heReply.setter(a1, type metadata accessor for AMDPbHEConfigsReply);
}

uint64_t AMDPbHEResponse.heReply.setter(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v5 = v2 + *(int *)(type metadata accessor for AMDPbHEResponse(0) + 28);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v5, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  _s8CipherML19AMDPbHEConfigsReplyVWObTm_0(a1, v5, a2);
  uint64_t v6 = type metadata accessor for AMDPbHEResponse.OneOf_Response(0);
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
  return v7(v5, 0, 1, v6);
}

void (*AMDPbHEResponse.configs.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  size_t v6 = *(void *)(*(void *)(type metadata accessor for AMDPbHEConfigsReply(0) - 8) + 64);
  v3[2] = malloc(v6);
  uint64_t v7 = malloc(v6);
  v3[3] = v7;
  uint64_t v8 = *(int *)(type metadata accessor for AMDPbHEResponse(0) + 28);
  *((_DWORD *)v3 + 12) = v8;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + v8, (uint64_t)v5, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  uint64_t v9 = type metadata accessor for AMDPbHEResponse.OneOf_Response(0);
  v3[4] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v3[5] = v10;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v5, 1, v9) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
LABEL_6:
    uint64_t v11 = MEMORY[0x263F8EE78];
    *uint64_t v7 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    v7[1] = v11;
    UnknownStorage.init()();
    return AMDPbHEResponse.configs.modify;
  }
  if (swift_getEnumCaseMultiPayload() != 2)
  {
    outlined destroy of AMDPbHEResponse.OneOf_Response((uint64_t)v5, type metadata accessor for AMDPbHEResponse.OneOf_Response);
    goto LABEL_6;
  }
  _s8CipherML19AMDPbHEConfigsReplyVWObTm_0((uint64_t)v5, (uint64_t)v7, type metadata accessor for AMDPbHEConfigsReply);
  return AMDPbHEResponse.configs.modify;
}

void AMDPbHEResponse.configs.modify(uint64_t a1, char a2)
{
}

void AMDPbHEResponse.heReply.modify(uint64_t a1, char a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  uint64_t v7 = *(void **)a1;
  uint64_t v8 = *(void *)(*(void *)a1 + 32);
  uint64_t v9 = *(void *)(*(void *)a1 + 40);
  uint64_t v10 = *(int *)(*(void *)a1 + 48);
  uint64_t v11 = *(void **)(*(void *)a1 + 16);
  uint64_t v12 = *(void **)(*(void *)a1 + 24);
  uint64_t v13 = *(void **)(*(void *)a1 + 8);
  uint64_t v14 = **(void **)a1 + v10;
  if (a2)
  {
    outlined init with copy of AMDPbHEReply(*(void *)(*(void *)a1 + 24), (uint64_t)v11, a5);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v14, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
    _s8CipherML19AMDPbHEConfigsReplyVWObTm_0((uint64_t)v11, v14, a3);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56))(v14, 0, 1, v8);
    outlined destroy of AMDPbHEResponse.OneOf_Response((uint64_t)v12, a6);
  }
  else
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(**(void **)a1 + v10, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
    _s8CipherML19AMDPbHEConfigsReplyVWObTm_0((uint64_t)v12, v14, a3);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56))(v14, 0, 1, v8);
  }
  free(v12);
  free(v11);
  free(v13);
  free(v7);
}

uint64_t AMDPbHEResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AMDPbHEResponse(0) + 32);
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t AMDPbHEResponse.unknownFields.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AMDPbHEResponse(0) + 32);
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);
  return v5(v3, a1, v4);
}

uint64_t (*AMDPbHEResponse.unknownFields.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbHEResponse.PbStatus.init()()
{
  return 0;
}

uint64_t AMDPbHEResponse.PbStatus.init(rawValue:)(uint64_t a1)
{
  return AMDPbHE_APICode.init(rawValue:)(a1, (uint64_t (*)(void))specialized AMDPbHEResponse.PbStatus.init(rawValue:));
}

uint64_t AMDPbHE_APICode.init(rawValue:)(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

void protocol witness for Enum.init() in conformance AMDPbHEResponse.PbStatus(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance AMDPbHEResponse.PbStatus@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Enum.init(rawValue:) in conformance AMDPbHE_APICode((uint64_t (*)(void))specialized AMDPbHEResponse.PbStatus.init(rawValue:), a1);
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance AMDPbHE_APICode@<X0>(uint64_t (*a1)(void)@<X3>, uint64_t a2@<X8>)
{
  uint64_t result = a1();
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4;
  *(unsigned char *)(a2 + 9) = v5 & 1;
  return result;
}

uint64_t protocol witness for Enum.rawValue.getter in conformance AMDPbHEResponse.PbStatus()
{
  return *(void *)v0;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance AMDPbHEResponse.PbStatus@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for RawRepresentable.init(rawValue:) in conformance AMDPbHE_APICode(a1, (uint64_t (*)(void))specialized AMDPbHEResponse.PbStatus.init(rawValue:), a2);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance AMDPbHE_APICode@<X0>(void *a1@<X0>, uint64_t (*a2)(void)@<X3>, uint64_t a3@<X8>)
{
  uint64_t result = a2(*a1);
  *(void *)a3 = result;
  *(unsigned char *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 9) = v6 & 1;
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AMDPbHE_APICode()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AMDPbHEResponse.PbStatus(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type AMDPbHEResponse.PbStatus and conformance AMDPbHEResponse.PbStatus();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AMDPbHE_APICode()
{
  return Hasher._finalize()();
}

uint64_t AMDPbHEResponse.init()@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 16) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 24) = v2;
  uint64_t v3 = type metadata accessor for AMDPbHEResponse(0);
  uint64_t v4 = a1 + *(int *)(v3 + 28);
  uint64_t v5 = type metadata accessor for AMDPbHEResponse.OneOf_Response(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t result = UnknownStorage.init()();
  uint64_t v7 = a1 + *(int *)(v3 + 36);
  *(void *)uint64_t v7 = 0;
  *(_WORD *)(v7 + 8) = 256;
  return result;
}

uint64_t *AMDPbHEResponse.PbStatus.allCases.unsafeMutableAddressor()
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  return &static AMDPbHEResponse.PbStatus.allCases;
}

uint64_t static AMDPbHEResponse.PbStatus.allCases.getter()
{
  return static AMDPbHE_APICode.allCases.getter(&one-time initialization token for allCases);
}

uint64_t static AMDPbHE_APICode.allCases.getter(void *a1)
{
  if (*a1 != -1) {
    swift_once();
  }
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance AMDPbHEResponse.PbStatus@<X0>(void *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance AMDPbHE_APICode(&one-time initialization token for allCases, &static AMDPbHEResponse.PbStatus.allCases, a1);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance AMDPbHE_APICode@<X0>(void *a1@<X2>, void *a2@<X3>, void *a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  *a3 = *a2;
  return swift_bridgeObjectRetain();
}

uint64_t AMDPbHE_APICode._protobuf_nameMap.unsafeMutableAddressor()
{
  return AMDPbFetchHEConfigs._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbHE_APICode._protobuf_nameMap);
}

uint64_t static AMDPbHE_APICode._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbHE_APICode._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbHE_APICode@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbHE_APICode._protobuf_nameMap, a1);
}

void *AMDPbHEResponse.protoMessageName.unsafeMutableAddressor()
{
  return &static AMDPbHEResponse.protoMessageName;
}

unint64_t static AMDPbHEResponse.protoMessageName.getter()
{
  return 0xD000000000000017;
}

uint64_t AMDPbHEResponse._protobuf_nameMap.unsafeMutableAddressor()
{
  return AMDPbFetchHEConfigs._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbHEResponse._protobuf_nameMap);
}

uint64_t static AMDPbHEResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbHEResponse._protobuf_nameMap, a1);
}

uint64_t AMDPbHEResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          closure #1 in AMDPbHEResponse.decodeMessage<A>(decoder:)();
          break;
        case 2:
          lazy protocol witness table accessor for type AMDPbHEResponse.PbStatus and conformance AMDPbHEResponse.PbStatus();
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          break;
        case 3:
          closure #3 in AMDPbHEResponse.decodeMessage<A>(decoder:)(v5, a1, a2, a3);
          break;
        case 4:
          closure #4 in AMDPbHEResponse.decodeMessage<A>(decoder:)(v5, a1, a2, a3);
          break;
        case 5:
          closure #5 in AMDPbHEResponse.decodeMessage<A>(decoder:)(v5, a1, a2, a3);
          break;
        case 6:
          lazy protocol witness table accessor for type AMDPbHEResponse.PbStatus and conformance AMDPbHEResponse.PbStatus();
          dispatch thunk of Decoder.decodeRepeatedEnumField<A>(value:)();
          break;
        case 7:
          dispatch thunk of Decoder.decodeRepeatedStringField(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #1 in AMDPbHEResponse.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
}

uint64_t closure #3 in AMDPbHEResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v44 = a2;
  uint64_t v45 = a3;
  uint64_t v46 = a4;
  uint64_t v47 = a1;
  uint64_t v4 = type metadata accessor for AMDPbHEReply(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v38 = (uint64_t)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v41 = (char *)&v35 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for AMDPbHEResponse.OneOf_Response(0);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v35 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEReply?);
  MEMORY[0x270FA5388](v19 - 8);
  uint64_t v39 = (uint64_t)&v35 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v22 = MEMORY[0x270FA5388](v21);
  uint64_t v24 = (char *)&v35 - v23;
  uint64_t v40 = v5;
  uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(v5 + 56);
  uint64_t v42 = v4;
  v25((char *)&v35 - v23, 1, 1, v4, v22);
  uint64_t v36 = v47 + *(int *)(type metadata accessor for AMDPbHEResponse(0) + 28);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v36, (uint64_t)v11, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  uint64_t v37 = v13;
  LODWORD(v47) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v47 == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v11, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
    uint64_t v26 = v12;
LABEL_5:
    uint64_t v29 = v42;
    uint64_t v28 = v43;
    goto LABEL_6;
  }
  uint64_t v27 = (uint64_t)v41;
  _s8CipherML19AMDPbHEConfigsReplyVWObTm_0((uint64_t)v11, (uint64_t)v18, type metadata accessor for AMDPbHEResponse.OneOf_Response);
  _s8CipherML19AMDPbHEConfigsReplyVWObTm_0((uint64_t)v18, (uint64_t)v15, type metadata accessor for AMDPbHEResponse.OneOf_Response);
  uint64_t v26 = v12;
  if (swift_getEnumCaseMultiPayload())
  {
    outlined destroy of AMDPbHEResponse.OneOf_Response((uint64_t)v15, type metadata accessor for AMDPbHEResponse.OneOf_Response);
    goto LABEL_5;
  }
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AMDPbHEReply?);
  _s8CipherML19AMDPbHEConfigsReplyVWObTm_0((uint64_t)v15, v27, type metadata accessor for AMDPbHEReply);
  _s8CipherML19AMDPbHEConfigsReplyVWObTm_0(v27, (uint64_t)v24, type metadata accessor for AMDPbHEReply);
  uint64_t v29 = v42;
  ((void (*)(char *, void, uint64_t, uint64_t))v25)(v24, 0, 1, v42);
  uint64_t v28 = v43;
LABEL_6:
  lazy protocol witness table accessor for type AMDPbHEResponse and conformance AMDPbHEResponse(&lazy protocol witness table cache variable for type AMDPbHEReply and conformance AMDPbHEReply, (void (*)(uint64_t))type metadata accessor for AMDPbHEReply);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AMDPbHEReply?);
  }
  uint64_t v31 = v39;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, v39, &demangling cache variable for type metadata for AMDPbHEReply?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v40 + 48))(v31, 1, v29) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AMDPbHEReply?);
    return outlined destroy of AMDPbHEConfig.OneOf_Config?(v31, &demangling cache variable for type metadata for AMDPbHEReply?);
  }
  else
  {
    uint64_t v32 = v31;
    uint64_t v33 = v38;
    _s8CipherML19AMDPbHEConfigsReplyVWObTm_0(v32, v38, type metadata accessor for AMDPbHEReply);
    if (v47 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AMDPbHEReply?);
    uint64_t v34 = v36;
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v36, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
    _s8CipherML19AMDPbHEConfigsReplyVWObTm_0(v33, v34, type metadata accessor for AMDPbHEReply);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v26);
  }
}

uint64_t closure #4 in AMDPbHEResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v44 = a2;
  uint64_t v45 = a3;
  uint64_t v46 = a4;
  uint64_t v47 = a1;
  uint64_t v4 = type metadata accessor for AMDPbHEReplies(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v38 = (uint64_t)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v41 = (char *)&v35 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for AMDPbHEResponse.OneOf_Response(0);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v35 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEReplies?);
  MEMORY[0x270FA5388](v19 - 8);
  uint64_t v39 = (uint64_t)&v35 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v22 = MEMORY[0x270FA5388](v21);
  uint64_t v24 = (char *)&v35 - v23;
  uint64_t v40 = v5;
  uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(v5 + 56);
  uint64_t v42 = v4;
  v25((char *)&v35 - v23, 1, 1, v4, v22);
  uint64_t v36 = v47 + *(int *)(type metadata accessor for AMDPbHEResponse(0) + 28);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v36, (uint64_t)v11, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  uint64_t v37 = v13;
  LODWORD(v47) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v47 == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v11, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
    uint64_t v26 = v12;
  }
  else
  {
    uint64_t v27 = (uint64_t)v41;
    _s8CipherML19AMDPbHEConfigsReplyVWObTm_0((uint64_t)v11, (uint64_t)v18, type metadata accessor for AMDPbHEResponse.OneOf_Response);
    _s8CipherML19AMDPbHEConfigsReplyVWObTm_0((uint64_t)v18, (uint64_t)v15, type metadata accessor for AMDPbHEResponse.OneOf_Response);
    uint64_t v26 = v12;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AMDPbHEReplies?);
      _s8CipherML19AMDPbHEConfigsReplyVWObTm_0((uint64_t)v15, v27, type metadata accessor for AMDPbHEReplies);
      _s8CipherML19AMDPbHEConfigsReplyVWObTm_0(v27, (uint64_t)v24, type metadata accessor for AMDPbHEReplies);
      uint64_t v28 = v42;
      ((void (*)(char *, void, uint64_t, uint64_t))v25)(v24, 0, 1, v42);
      uint64_t v29 = v43;
      goto LABEL_7;
    }
    outlined destroy of AMDPbHEResponse.OneOf_Response((uint64_t)v15, type metadata accessor for AMDPbHEResponse.OneOf_Response);
  }
  uint64_t v28 = v42;
  uint64_t v29 = v43;
LABEL_7:
  lazy protocol witness table accessor for type AMDPbHEResponse and conformance AMDPbHEResponse(&lazy protocol witness table cache variable for type AMDPbHEReplies and conformance AMDPbHEReplies, (void (*)(uint64_t))type metadata accessor for AMDPbHEReplies);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v29) {
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AMDPbHEReplies?);
  }
  uint64_t v31 = v39;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, v39, &demangling cache variable for type metadata for AMDPbHEReplies?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v40 + 48))(v31, 1, v28) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AMDPbHEReplies?);
    return outlined destroy of AMDPbHEConfig.OneOf_Config?(v31, &demangling cache variable for type metadata for AMDPbHEReplies?);
  }
  else
  {
    uint64_t v32 = v31;
    uint64_t v33 = v38;
    _s8CipherML19AMDPbHEConfigsReplyVWObTm_0(v32, v38, type metadata accessor for AMDPbHEReplies);
    if (v47 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AMDPbHEReplies?);
    uint64_t v34 = v36;
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v36, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
    _s8CipherML19AMDPbHEConfigsReplyVWObTm_0(v33, v34, type metadata accessor for AMDPbHEReplies);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v26);
  }
}

uint64_t closure #5 in AMDPbHEResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v44 = a2;
  uint64_t v45 = a3;
  uint64_t v46 = a4;
  uint64_t v47 = a1;
  uint64_t v4 = type metadata accessor for AMDPbHEConfigsReply(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v38 = (uint64_t)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v41 = (char *)&v35 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for AMDPbHEResponse.OneOf_Response(0);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v35 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEConfigsReply?);
  MEMORY[0x270FA5388](v19 - 8);
  uint64_t v39 = (uint64_t)&v35 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v22 = MEMORY[0x270FA5388](v21);
  uint64_t v24 = (char *)&v35 - v23;
  uint64_t v40 = v5;
  uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(v5 + 56);
  uint64_t v42 = v4;
  v25((char *)&v35 - v23, 1, 1, v4, v22);
  uint64_t v36 = v47 + *(int *)(type metadata accessor for AMDPbHEResponse(0) + 28);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v36, (uint64_t)v11, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  uint64_t v37 = v13;
  LODWORD(v47) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v47 == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v11, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
    uint64_t v26 = v12;
  }
  else
  {
    uint64_t v27 = (uint64_t)v41;
    _s8CipherML19AMDPbHEConfigsReplyVWObTm_0((uint64_t)v11, (uint64_t)v18, type metadata accessor for AMDPbHEResponse.OneOf_Response);
    _s8CipherML19AMDPbHEConfigsReplyVWObTm_0((uint64_t)v18, (uint64_t)v15, type metadata accessor for AMDPbHEResponse.OneOf_Response);
    uint64_t v26 = v12;
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AMDPbHEConfigsReply?);
      _s8CipherML19AMDPbHEConfigsReplyVWObTm_0((uint64_t)v15, v27, type metadata accessor for AMDPbHEConfigsReply);
      _s8CipherML19AMDPbHEConfigsReplyVWObTm_0(v27, (uint64_t)v24, type metadata accessor for AMDPbHEConfigsReply);
      uint64_t v28 = v42;
      ((void (*)(char *, void, uint64_t, uint64_t))v25)(v24, 0, 1, v42);
      uint64_t v29 = v43;
      goto LABEL_7;
    }
    outlined destroy of AMDPbHEResponse.OneOf_Response((uint64_t)v15, type metadata accessor for AMDPbHEResponse.OneOf_Response);
  }
  uint64_t v28 = v42;
  uint64_t v29 = v43;
LABEL_7:
  lazy protocol witness table accessor for type AMDPbHEResponse and conformance AMDPbHEResponse(&lazy protocol witness table cache variable for type AMDPbHEConfigsReply and conformance AMDPbHEConfigsReply, (void (*)(uint64_t))type metadata accessor for AMDPbHEConfigsReply);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v29) {
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AMDPbHEConfigsReply?);
  }
  uint64_t v31 = v39;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, v39, &demangling cache variable for type metadata for AMDPbHEConfigsReply?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v40 + 48))(v31, 1, v28) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AMDPbHEConfigsReply?);
    return outlined destroy of AMDPbHEConfig.OneOf_Config?(v31, &demangling cache variable for type metadata for AMDPbHEConfigsReply?);
  }
  else
  {
    uint64_t v32 = v31;
    uint64_t v33 = v38;
    _s8CipherML19AMDPbHEConfigsReplyVWObTm_0(v32, v38, type metadata accessor for AMDPbHEConfigsReply);
    if (v47 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AMDPbHEConfigsReply?);
    uint64_t v34 = v36;
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v36, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
    _s8CipherML19AMDPbHEConfigsReplyVWObTm_0(v33, v34, type metadata accessor for AMDPbHEConfigsReply);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v26);
  }
}

uint64_t AMDPbHEResponse.traverse<A>(visitor:)()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = closure #1 in AMDPbHEResponse.traverse<A>(visitor:)(v0);
  if (!v1)
  {
    if (*(void *)v0)
    {
      char v6 = *(unsigned char *)(v0 + 8);
      uint64_t v10 = *(void *)v0;
      char v11 = v6;
      lazy protocol witness table accessor for type AMDPbHEResponse.PbStatus and conformance AMDPbHEResponse.PbStatus();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    uint64_t v7 = type metadata accessor for AMDPbHEResponse(0);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v0 + *(int *)(v7 + 28), (uint64_t)v4, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
    uint64_t v8 = type metadata accessor for AMDPbHEResponse.OneOf_Response(0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) != 1)
    {
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload)
      {
        if (EnumCaseMultiPayload == 1) {
          closure #3 in AMDPbHEResponse.traverse<A>(visitor:)(v0);
        }
        else {
          closure #4 in AMDPbHEResponse.traverse<A>(visitor:)(v0);
        }
      }
      else
      {
        closure #2 in AMDPbHEResponse.traverse<A>(visitor:)(v0);
      }
      outlined destroy of AMDPbHEResponse.OneOf_Response((uint64_t)v4, type metadata accessor for AMDPbHEResponse.OneOf_Response);
    }
    if (*(void *)(*(void *)(v0 + 16) + 16))
    {
      lazy protocol witness table accessor for type AMDPbHEResponse.PbStatus and conformance AMDPbHEResponse.PbStatus();
      dispatch thunk of Visitor.visitPackedEnumField<A>(value:fieldNumber:)();
    }
    if (*(void *)(*(void *)(v0 + 24) + 16)) {
      dispatch thunk of Visitor.visitRepeatedStringField(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in AMDPbHEResponse.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = type metadata accessor for AMDPbHEResponse(0);
  if ((*(unsigned char *)(a1 + *(int *)(result + 36) + 9) & 1) == 0)
  {
    lazy protocol witness table accessor for type AMDPbHE_APICode and conformance AMDPbHE_APICode();
    return dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #2 in AMDPbHEResponse.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for AMDPbHEReply(0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AMDPbHEResponse(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v8 + 28), (uint64_t)v4, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  uint64_t v9 = type metadata accessor for AMDPbHEResponse.OneOf_Response(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v4, 1, v9) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v4, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
    __break(1u);
  }
  else if (!swift_getEnumCaseMultiPayload())
  {
    _s8CipherML19AMDPbHEConfigsReplyVWObTm_0((uint64_t)v4, (uint64_t)v7, type metadata accessor for AMDPbHEReply);
    lazy protocol witness table accessor for type AMDPbHEResponse and conformance AMDPbHEResponse(&lazy protocol witness table cache variable for type AMDPbHEReply and conformance AMDPbHEReply, (void (*)(uint64_t))type metadata accessor for AMDPbHEReply);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of AMDPbHEResponse.OneOf_Response((uint64_t)v7, type metadata accessor for AMDPbHEReply);
  }
  uint64_t result = outlined destroy of AMDPbHEResponse.OneOf_Response((uint64_t)v4, type metadata accessor for AMDPbHEResponse.OneOf_Response);
  __break(1u);
  return result;
}

uint64_t closure #3 in AMDPbHEResponse.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for AMDPbHEReplies(0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AMDPbHEResponse(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v8 + 28), (uint64_t)v4, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  uint64_t v9 = type metadata accessor for AMDPbHEResponse.OneOf_Response(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v4, 1, v9) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v4, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 1)
  {
    _s8CipherML19AMDPbHEConfigsReplyVWObTm_0((uint64_t)v4, (uint64_t)v7, type metadata accessor for AMDPbHEReplies);
    lazy protocol witness table accessor for type AMDPbHEResponse and conformance AMDPbHEResponse(&lazy protocol witness table cache variable for type AMDPbHEReplies and conformance AMDPbHEReplies, (void (*)(uint64_t))type metadata accessor for AMDPbHEReplies);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of AMDPbHEResponse.OneOf_Response((uint64_t)v7, type metadata accessor for AMDPbHEReplies);
  }
  uint64_t result = outlined destroy of AMDPbHEResponse.OneOf_Response((uint64_t)v4, type metadata accessor for AMDPbHEResponse.OneOf_Response);
  __break(1u);
  return result;
}

uint64_t closure #4 in AMDPbHEResponse.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for AMDPbHEConfigsReply(0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AMDPbHEResponse(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v8 + 28), (uint64_t)v4, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  uint64_t v9 = type metadata accessor for AMDPbHEResponse.OneOf_Response(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v4, 1, v9) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v4, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 2)
  {
    _s8CipherML19AMDPbHEConfigsReplyVWObTm_0((uint64_t)v4, (uint64_t)v7, type metadata accessor for AMDPbHEConfigsReply);
    lazy protocol witness table accessor for type AMDPbHEResponse and conformance AMDPbHEResponse(&lazy protocol witness table cache variable for type AMDPbHEConfigsReply and conformance AMDPbHEConfigsReply, (void (*)(uint64_t))type metadata accessor for AMDPbHEConfigsReply);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of AMDPbHEResponse.OneOf_Response((uint64_t)v7, type metadata accessor for AMDPbHEConfigsReply);
  }
  uint64_t result = outlined destroy of AMDPbHEResponse.OneOf_Response((uint64_t)v4, type metadata accessor for AMDPbHEResponse.OneOf_Response);
  __break(1u);
  return result;
}

Swift::Int AMDPbHEResponse.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Message.init() in conformance AMDPbHEResponse@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 1;
  uint64_t v4 = MEMORY[0x263F8EE78];
  *(void *)(a2 + 16) = MEMORY[0x263F8EE78];
  *(void *)(a2 + 24) = v4;
  uint64_t v5 = a2 + *(int *)(a1 + 28);
  uint64_t v6 = type metadata accessor for AMDPbHEResponse.OneOf_Response(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  uint64_t result = UnknownStorage.init()();
  uint64_t v8 = a2 + *(int *)(a1 + 36);
  *(void *)uint64_t v8 = 0;
  *(_WORD *)(v8 + 8) = 256;
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AMDPbHEResponse()
{
  return 0xD000000000000017;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AMDPbHEResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AMDPbHEResponse.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AMDPbHEResponse()
{
  return AMDPbHEResponse.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AMDPbHEResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AMDPbHEResponse and conformance AMDPbHEResponse(&lazy protocol witness table cache variable for type AMDPbHEResponse and conformance AMDPbHEResponse, (void (*)(uint64_t))type metadata accessor for AMDPbHEResponse);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbHEResponse@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbHEResponse._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AMDPbHEResponse(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type AMDPbHEResponse and conformance AMDPbHEResponse(&lazy protocol witness table cache variable for type AMDPbHEResponse and conformance AMDPbHEResponse, (void (*)(uint64_t))type metadata accessor for AMDPbHEResponse);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AMDPbHEResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AMDPbHEResponse and conformance AMDPbHEResponse(&lazy protocol witness table cache variable for type AMDPbHEResponse and conformance AMDPbHEResponse, (void (*)(uint64_t))type metadata accessor for AMDPbHEResponse);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

uint64_t AMDPbHEResponse.PbStatus._protobuf_nameMap.unsafeMutableAddressor()
{
  return AMDPbFetchHEConfigs._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbHEResponse.PbStatus._protobuf_nameMap);
}

uint64_t static AMDPbHEResponse.PbStatus._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbHEResponse.PbStatus._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbHEResponse.PbStatus@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbHEResponse.PbStatus._protobuf_nameMap, a1);
}

uint64_t specialized static AMDPbHEResponse.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v47 = *(void *)(v4 - 8);
  uint64_t v48 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v46 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v45 = (char *)&v44 - v7;
  uint64_t v8 = type metadata accessor for AMDPbHEResponse.OneOf_Response(0);
  uint64_t v49 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AMDPbHEResponse.OneOf_Response?, AMDPbHEResponse.OneOf_Response?));
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v44 - v18;
  MEMORY[0x270FA5388](v20);
  double v22 = (char *)&v44 - v21;
  uint64_t v23 = (int *)type metadata accessor for AMDPbHEResponse(0);
  uint64_t v24 = v23[9];
  uint64_t v25 = (uint64_t *)((char *)a1 + v24);
  char v26 = *((unsigned char *)a1 + v24 + 9);
  uint64_t v27 = (uint64_t *)((char *)a2 + v24);
  if (v26)
  {
    if ((*((unsigned char *)v27 + 9) & 1) == 0) {
      goto LABEL_39;
    }
  }
  else
  {
    if (*((unsigned char *)v27 + 9)) {
      goto LABEL_39;
    }
    uint64_t v28 = *v25;
    uint64_t v29 = *v27;
    if (v27[1])
    {
      switch(v29)
      {
        case 1:
          if (v28 != 1) {
            goto LABEL_39;
          }
          goto LABEL_16;
        case 2:
          if (v28 != 2) {
            goto LABEL_39;
          }
          goto LABEL_16;
        case 3:
          if (v28 == 3) {
            goto LABEL_16;
          }
          goto LABEL_39;
        default:
          if (!v28) {
            goto LABEL_16;
          }
          goto LABEL_39;
      }
    }
    if (v28 != v29) {
      goto LABEL_39;
    }
  }
LABEL_16:
  uint64_t v30 = *a1;
  uint64_t v31 = *a2;
  if (*((unsigned char *)a2 + 8) == 1)
  {
    switch(v31)
    {
      case 1:
        if (v30 != 1) {
          goto LABEL_39;
        }
        goto LABEL_21;
      case 2:
        if (v30 != 2) {
          goto LABEL_39;
        }
        goto LABEL_21;
      case 3:
        if (v30 != 3) {
          goto LABEL_39;
        }
        goto LABEL_21;
      case 4:
        if (v30 != 4) {
          goto LABEL_39;
        }
        goto LABEL_21;
      case 5:
        if (v30 != 5) {
          goto LABEL_39;
        }
        goto LABEL_21;
      default:
        if (!v30) {
          goto LABEL_21;
        }
        goto LABEL_39;
    }
  }
  if (v30 != v31) {
    goto LABEL_39;
  }
LABEL_21:
  if ((specialized static Array<A>.== infix(_:_:)(a1[2], a2[2]) & 1) != 0
    && (specialized static Array<A>.== infix(_:_:)((void *)a1[3], (void *)a2[3]) & 1) != 0)
  {
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)a1 + v23[7], (uint64_t)v22, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)a2 + v23[7], (uint64_t)v19, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
    uint64_t v32 = (uint64_t)&v13[*(int *)(v11 + 48)];
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v22, (uint64_t)v13, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
    uint64_t v44 = v32;
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v19, v32, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
    uint64_t v49 = *(void *)(v49 + 48);
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v49)(v13, 1, v8) == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v19, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v22, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v49)(v44, 1, v8) == 1)
      {
        outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v13, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
LABEL_42:
        uint64_t v36 = (uint64_t)a1 + v23[8];
        uint64_t v38 = v47;
        uint64_t v37 = v48;
        uint64_t v39 = *(void (**)(char *, uint64_t, uint64_t))(v47 + 16);
        uint64_t v40 = v45;
        v39(v45, v36, v48);
        uint64_t v41 = (uint64_t)a2 + v23[8];
        uint64_t v42 = v46;
        v39(v46, v41, v37);
        lazy protocol witness table accessor for type AMDPbHEResponse and conformance AMDPbHEResponse(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
        char v33 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v43 = *(void (**)(char *, uint64_t))(v38 + 8);
        v43(v42, v37);
        v43(v40, v37);
        return v33 & 1;
      }
      goto LABEL_38;
    }
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v13, (uint64_t)v16, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v49)(v44, 1, v8) == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v19, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v22, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
      outlined destroy of AMDPbHEResponse.OneOf_Response((uint64_t)v16, type metadata accessor for AMDPbHEResponse.OneOf_Response);
LABEL_38:
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v13, &demangling cache variable for type metadata for (AMDPbHEResponse.OneOf_Response?, AMDPbHEResponse.OneOf_Response?));
      goto LABEL_39;
    }
    _s8CipherML19AMDPbHEConfigsReplyVWObTm_0(v44, (uint64_t)v10, type metadata accessor for AMDPbHEResponse.OneOf_Response);
    char v35 = specialized static AMDPbHEResponse.OneOf_Response.== infix(_:_:)((uint64_t)v16, (uint64_t)v10);
    outlined destroy of AMDPbHEResponse.OneOf_Response((uint64_t)v10, type metadata accessor for AMDPbHEResponse.OneOf_Response);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v19, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v22, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
    outlined destroy of AMDPbHEResponse.OneOf_Response((uint64_t)v16, type metadata accessor for AMDPbHEResponse.OneOf_Response);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v13, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
    if (v35) {
      goto LABEL_42;
    }
  }
LABEL_39:
  char v33 = 0;
  return v33 & 1;
}

uint64_t specialized static AMDPbHEResponse.OneOf_Response.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v34 = type metadata accessor for AMDPbHEConfigsReply(0);
  MEMORY[0x270FA5388](v34);
  uint64_t v36 = (uint64_t *)((char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v35 = type metadata accessor for AMDPbHEReplies(0);
  MEMORY[0x270FA5388](v35);
  uint64_t v37 = (uint64_t *)((char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = type metadata accessor for AMDPbHEReply(0);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for AMDPbHEResponse.OneOf_Response(0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (uint64_t *)((char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (uint64_t *)((char *)&v34 - v13);
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v34 - v16;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AMDPbHEResponse.OneOf_Response, AMDPbHEResponse.OneOf_Response));
  MEMORY[0x270FA5388](v18 - 8);
  uint64_t v20 = (char *)&v34 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = (uint64_t)&v20[*(int *)(v21 + 56)];
  outlined init with copy of AMDPbHEReply(a1, (uint64_t)v20, type metadata accessor for AMDPbHEResponse.OneOf_Response);
  outlined init with copy of AMDPbHEReply(a2, v22, type metadata accessor for AMDPbHEResponse.OneOf_Response);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    outlined init with copy of AMDPbHEReply((uint64_t)v20, (uint64_t)v17, type metadata accessor for AMDPbHEResponse.OneOf_Response);
    if (!swift_getEnumCaseMultiPayload())
    {
      _s8CipherML19AMDPbHEConfigsReplyVWObTm_0(v22, (uint64_t)v8, type metadata accessor for AMDPbHEReply);
      char v30 = static AMDPbHEReply.== infix(_:_:)(v17, v8);
      outlined destroy of AMDPbHEResponse.OneOf_Response((uint64_t)v8, type metadata accessor for AMDPbHEReply);
      outlined destroy of AMDPbHEResponse.OneOf_Response((uint64_t)v17, type metadata accessor for AMDPbHEReply);
      outlined destroy of AMDPbHEResponse.OneOf_Response((uint64_t)v20, type metadata accessor for AMDPbHEResponse.OneOf_Response);
      return v30 & 1;
    }
    uint64_t v27 = type metadata accessor for AMDPbHEReply;
    uint64_t v28 = (uint64_t)v17;
    goto LABEL_17;
  }
  if (EnumCaseMultiPayload != 1)
  {
    outlined init with copy of AMDPbHEReply((uint64_t)v20, (uint64_t)v11, type metadata accessor for AMDPbHEResponse.OneOf_Response);
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      uint64_t v29 = v36;
      _s8CipherML19AMDPbHEConfigsReplyVWObTm_0(v22, (uint64_t)v36, type metadata accessor for AMDPbHEConfigsReply);
      if ((specialized static Dictionary<>.== infix(_:_:)(*v11, *v29) & 1) != 0
        && (specialized static Array<A>.== infix(_:_:)(v11[1], v29[1]) & 1) != 0)
      {
        type metadata accessor for UnknownStorage();
        lazy protocol witness table accessor for type AMDPbHEResponse and conformance AMDPbHEResponse(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
        if (dispatch thunk of static Equatable.== infix(_:_:)())
        {
          uint64_t v25 = type metadata accessor for AMDPbHEConfigsReply;
          outlined destroy of AMDPbHEResponse.OneOf_Response((uint64_t)v29, type metadata accessor for AMDPbHEConfigsReply);
          uint64_t v26 = (uint64_t)v11;
          goto LABEL_14;
        }
      }
      uint64_t v31 = type metadata accessor for AMDPbHEConfigsReply;
      outlined destroy of AMDPbHEResponse.OneOf_Response((uint64_t)v29, type metadata accessor for AMDPbHEConfigsReply);
      uint64_t v32 = (uint64_t)v11;
      goto LABEL_20;
    }
    uint64_t v27 = type metadata accessor for AMDPbHEConfigsReply;
    uint64_t v28 = (uint64_t)v11;
LABEL_17:
    outlined destroy of AMDPbHEResponse.OneOf_Response(v28, v27);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v20, &demangling cache variable for type metadata for (AMDPbHEResponse.OneOf_Response, AMDPbHEResponse.OneOf_Response));
LABEL_21:
    char v30 = 0;
    return v30 & 1;
  }
  outlined init with copy of AMDPbHEReply((uint64_t)v20, (uint64_t)v14, type metadata accessor for AMDPbHEResponse.OneOf_Response);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    uint64_t v27 = type metadata accessor for AMDPbHEReplies;
    uint64_t v28 = (uint64_t)v14;
    goto LABEL_17;
  }
  uint64_t v24 = v37;
  _s8CipherML19AMDPbHEConfigsReplyVWObTm_0(v22, (uint64_t)v37, type metadata accessor for AMDPbHEReplies);
  if ((specialized static Array<A>.== infix(_:_:)(*v14, *v24) & 1) == 0
    || (type metadata accessor for UnknownStorage(),
        lazy protocol witness table accessor for type AMDPbHEResponse and conformance AMDPbHEResponse(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]), (dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0))
  {
    uint64_t v31 = type metadata accessor for AMDPbHEReplies;
    outlined destroy of AMDPbHEResponse.OneOf_Response((uint64_t)v24, type metadata accessor for AMDPbHEReplies);
    uint64_t v32 = (uint64_t)v14;
LABEL_20:
    outlined destroy of AMDPbHEResponse.OneOf_Response(v32, v31);
    outlined destroy of AMDPbHEResponse.OneOf_Response((uint64_t)v20, type metadata accessor for AMDPbHEResponse.OneOf_Response);
    goto LABEL_21;
  }
  uint64_t v25 = type metadata accessor for AMDPbHEReplies;
  outlined destroy of AMDPbHEResponse.OneOf_Response((uint64_t)v24, type metadata accessor for AMDPbHEReplies);
  uint64_t v26 = (uint64_t)v14;
LABEL_14:
  outlined destroy of AMDPbHEResponse.OneOf_Response(v26, v25);
  outlined destroy of AMDPbHEResponse.OneOf_Response((uint64_t)v20, type metadata accessor for AMDPbHEResponse.OneOf_Response);
  char v30 = 1;
  return v30 & 1;
}

uint64_t outlined assign with take of AMDPbHEResponse.OneOf_Response?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of AMDPbHEResponse.OneOf_Response(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with copy of AMDPbHEReply(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t lazy protocol witness table accessor for type AMDPbHEResponse.PbStatus and conformance AMDPbHEResponse.PbStatus()
{
  unint64_t result = lazy protocol witness table cache variable for type AMDPbHEResponse.PbStatus and conformance AMDPbHEResponse.PbStatus;
  if (!lazy protocol witness table cache variable for type AMDPbHEResponse.PbStatus and conformance AMDPbHEResponse.PbStatus)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AMDPbHEResponse.PbStatus and conformance AMDPbHEResponse.PbStatus);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AMDPbHEResponse.PbStatus and conformance AMDPbHEResponse.PbStatus;
  if (!lazy protocol witness table cache variable for type AMDPbHEResponse.PbStatus and conformance AMDPbHEResponse.PbStatus)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AMDPbHEResponse.PbStatus and conformance AMDPbHEResponse.PbStatus);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AMDPbHEResponse.PbStatus and conformance AMDPbHEResponse.PbStatus;
  if (!lazy protocol witness table cache variable for type AMDPbHEResponse.PbStatus and conformance AMDPbHEResponse.PbStatus)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AMDPbHEResponse.PbStatus and conformance AMDPbHEResponse.PbStatus);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AMDPbHEResponse.PbStatus and conformance AMDPbHEResponse.PbStatus;
  if (!lazy protocol witness table cache variable for type AMDPbHEResponse.PbStatus and conformance AMDPbHEResponse.PbStatus)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AMDPbHEResponse.PbStatus and conformance AMDPbHEResponse.PbStatus);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AMDPbHE_APICode and conformance AMDPbHE_APICode()
{
  unint64_t result = lazy protocol witness table cache variable for type AMDPbHE_APICode and conformance AMDPbHE_APICode;
  if (!lazy protocol witness table cache variable for type AMDPbHE_APICode and conformance AMDPbHE_APICode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AMDPbHE_APICode and conformance AMDPbHE_APICode);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AMDPbHE_APICode and conformance AMDPbHE_APICode;
  if (!lazy protocol witness table cache variable for type AMDPbHE_APICode and conformance AMDPbHE_APICode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AMDPbHE_APICode and conformance AMDPbHE_APICode);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AMDPbHE_APICode and conformance AMDPbHE_APICode;
  if (!lazy protocol witness table cache variable for type AMDPbHE_APICode and conformance AMDPbHE_APICode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AMDPbHE_APICode and conformance AMDPbHE_APICode);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AMDPbHE_APICode and conformance AMDPbHE_APICode;
  if (!lazy protocol witness table cache variable for type AMDPbHE_APICode and conformance AMDPbHE_APICode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AMDPbHE_APICode and conformance AMDPbHE_APICode);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in AMDPbHE_APICode()
{
  return lazy protocol witness table accessor for type [AMDPbHE_APICode] and conformance [A](&lazy protocol witness table cache variable for type [AMDPbHE_APICode] and conformance [A], &demangling cache variable for type metadata for [AMDPbHE_APICode]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in AMDPbHEResponse.PbStatus()
{
  return lazy protocol witness table accessor for type [AMDPbHE_APICode] and conformance [A](&lazy protocol witness table cache variable for type [AMDPbHEResponse.PbStatus] and conformance [A], &demangling cache variable for type metadata for [AMDPbHEResponse.PbStatus]);
}

uint64_t lazy protocol witness table accessor for type [AMDPbHE_APICode] and conformance [A](unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AMDPbHEResponse()
{
  return lazy protocol witness table accessor for type AMDPbHEResponse and conformance AMDPbHEResponse(&lazy protocol witness table cache variable for type AMDPbHEResponse and conformance AMDPbHEResponse, (void (*)(uint64_t))type metadata accessor for AMDPbHEResponse);
}

uint64_t base witness table accessor for Message in AMDPbHEResponse()
{
  return lazy protocol witness table accessor for type AMDPbHEResponse and conformance AMDPbHEResponse(&lazy protocol witness table cache variable for type AMDPbHEResponse and conformance AMDPbHEResponse, (void (*)(uint64_t))type metadata accessor for AMDPbHEResponse);
}

uint64_t base witness table accessor for Hashable in AMDPbHEResponse()
{
  return lazy protocol witness table accessor for type AMDPbHEResponse and conformance AMDPbHEResponse(&lazy protocol witness table cache variable for type AMDPbHEResponse and conformance AMDPbHEResponse, (void (*)(uint64_t))type metadata accessor for AMDPbHEResponse);
}

uint64_t base witness table accessor for Equatable in AMDPbHEResponse()
{
  return lazy protocol witness table accessor for type AMDPbHEResponse and conformance AMDPbHEResponse(&lazy protocol witness table cache variable for type AMDPbHEResponse and conformance AMDPbHEResponse, (void (*)(uint64_t))type metadata accessor for AMDPbHEResponse);
}

uint64_t sub_249D82760@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = type metadata accessor for AMDPbHEResponse(0);
  uint64_t v5 = (uint64_t *)(a1 + *(int *)(result + 36));
  uint64_t v6 = *v5;
  char v7 = *((unsigned char *)v5 + 8);
  int v8 = *((unsigned __int8 *)v5 + 9);
  if (v8) {
    uint64_t v6 = 0;
  }
  *(void *)a2 = v6;
  *(unsigned char *)(a2 + 8) = (v8 | v7) & 1;
  return result;
}

uint64_t sub_249D827B8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  char v4 = *((unsigned char *)a1 + 8);
  uint64_t result = type metadata accessor for AMDPbHEResponse(0);
  uint64_t v6 = a2 + *(int *)(result + 36);
  *(void *)uint64_t v6 = v3;
  *(unsigned char *)(v6 + 8) = v4;
  *(unsigned char *)(v6 + 9) = 0;
  return result;
}

uint64_t sub_249D82808(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AMDPbHEResponse.heReply : AMDPbHEResponse(a1, a2, a3, a4, type metadata accessor for AMDPbHEReply, type metadata accessor for AMDPbHEReply, type metadata accessor for AMDPbHEReply);
}

uint64_t sub_249D82864(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AMDPbHEResponse.heReply : AMDPbHEResponse(a1, a2, a3, a4, type metadata accessor for AMDPbHEReplies, type metadata accessor for AMDPbHEReplies, type metadata accessor for AMDPbHEReplies);
}

uint64_t sub_249D828BC@<X0>(unint64_t *a1@<X8>)
{
  return AMDPbHEResponse.configs.getter(a1);
}

uint64_t sub_249D828E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AMDPbHEResponse.heReply : AMDPbHEResponse(a1, a2, a3, a4, type metadata accessor for AMDPbHEConfigsReply, type metadata accessor for AMDPbHEConfigsReply, type metadata accessor for AMDPbHEConfigsReply);
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)uint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for AMDPbHE_APICode()
{
  return &type metadata for AMDPbHE_APICode;
}

void *initializeBufferWithCopyOfBuffer for AMDPbHEResponse(uint64_t a1, uint64_t *a2, int *a3)
{
  char v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *char v4 = *a2;
    char v4 = (void *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    uint64_t v7 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v7;
    uint64_t v8 = a3[7];
    uint64_t v9 = (void *)(a1 + v8);
    uint64_t v10 = (uint64_t *)((char *)a2 + v8);
    uint64_t v11 = type metadata accessor for AMDPbHEResponse.OneOf_Response(0);
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v12 + 48);
    uint64_t v14 = v11;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v14))
    {
      uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
      memcpy(v9, v10, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      uint64_t v52 = v12;
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2)
      {
        uint64_t v21 = v10[1];
        *uint64_t v9 = *v10;
        v9[1] = v21;
        uint64_t v22 = *(int *)(type metadata accessor for AMDPbHEConfigsReply(0) + 24);
        uint64_t v47 = (char *)v10 + v22;
        uint64_t v50 = (char *)v9 + v22;
        uint64_t v23 = v14;
        uint64_t v24 = type metadata accessor for UnknownStorage();
        uint64_t v25 = *(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v26 = v24;
        uint64_t v14 = v23;
        v25(v50, v47, v26);
      }
      else if (EnumCaseMultiPayload == 1)
      {
        *uint64_t v9 = *v10;
        uint64_t v18 = *(int *)(type metadata accessor for AMDPbHEReplies(0) + 20);
        uint64_t v49 = (char *)v10 + v18;
        uint64_t v51 = (char *)v9 + v18;
        uint64_t v19 = type metadata accessor for UnknownStorage();
        uint64_t v20 = *(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16);
        swift_bridgeObjectRetain();
        v20(v51, v49, v19);
      }
      else
      {
        uint64_t v27 = type metadata accessor for AMDPbHEReply.OneOf_Reply(0);
        uint64_t v28 = *(void *)(v27 - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v28 + 48))(v10, 1, v27))
        {
          uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
          memcpy(v9, v10, *(void *)(*(void *)(v29 - 8) + 64));
        }
        else
        {
          int v30 = swift_getEnumCaseMultiPayload();
          *uint64_t v9 = *v10;
          if (v30 == 1) {
            uint64_t v31 = *(int *)(type metadata accessor for AMDPbPECReply(0) + 20);
          }
          else {
            uint64_t v31 = *(int *)(type metadata accessor for AMDPbPIRReply(0) + 20);
          }
          uint64_t v46 = (char *)v10 + v31;
          uint64_t v48 = (char *)v9 + v31;
          uint64_t v32 = type metadata accessor for UnknownStorage();
          uint64_t v45 = *(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 16);
          swift_bridgeObjectRetain();
          v45(v48, v46, v32);
          swift_storeEnumTagMultiPayload();
          (*(void (**)(void *, void, uint64_t, uint64_t))(v28 + 56))(v9, 0, 1, v27);
        }
        uint64_t v33 = *(int *)(type metadata accessor for AMDPbHEReply(0) + 20);
        uint64_t v34 = (char *)v9 + v33;
        uint64_t v35 = (char *)v10 + v33;
        uint64_t v36 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v36 - 8) + 16))(v34, v35, v36);
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(void *, void, uint64_t, uint64_t))(v52 + 56))(v9, 0, 1, v14);
    }
    uint64_t v37 = a3[8];
    uint64_t v38 = (char *)v4 + v37;
    uint64_t v39 = (uint64_t)a2 + v37;
    uint64_t v40 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v40 - 8) + 16))(v38, v39, v40);
    uint64_t v41 = a3[9];
    uint64_t v42 = (char *)v4 + v41;
    uint64_t v43 = (uint64_t)a2 + v41;
    *(void *)uint64_t v42 = *(void *)v43;
    *((_WORD *)v42 + 4) = *(_WORD *)(v43 + 8);
  }
  return v4;
}

uint64_t destroy for AMDPbHEResponse(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for AMDPbHEResponse.OneOf_Response(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5))
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v10 = *(int *)(type metadata accessor for AMDPbHEConfigsReply(0) + 24);
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        swift_bridgeObjectRelease();
        uint64_t v11 = type metadata accessor for AMDPbHEReplies(0);
      }
      else
      {
        if (EnumCaseMultiPayload) {
          goto LABEL_15;
        }
        uint64_t v7 = type metadata accessor for AMDPbHEReply.OneOf_Reply(0);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v4, 1, v7))
        {
          int v8 = swift_getEnumCaseMultiPayload();
          swift_bridgeObjectRelease();
          if (v8 == 1) {
            uint64_t v9 = type metadata accessor for AMDPbPECReply(0);
          }
          else {
            uint64_t v9 = type metadata accessor for AMDPbPIRReply(0);
          }
          uint64_t v12 = v4 + *(int *)(v9 + 20);
          uint64_t v13 = type metadata accessor for UnknownStorage();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v12, v13);
        }
        uint64_t v11 = type metadata accessor for AMDPbHEReply(0);
      }
      uint64_t v10 = *(int *)(v11 + 20);
    }
    uint64_t v14 = v4 + v10;
    uint64_t v15 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v14, v15);
  }
LABEL_15:
  uint64_t v16 = a1 + *(int *)(a2 + 32);
  uint64_t v17 = type metadata accessor for UnknownStorage();
  uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8);
  return v18(v16, v17);
}

uint64_t initializeWithCopy for AMDPbHEResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = (void *)(a1 + v6);
  int v8 = (void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for AMDPbHEResponse.OneOf_Response(0);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (!v11(v8, 1, v9))
  {
    uint64_t v48 = v10;
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v19 = v8[1];
      *uint64_t v7 = *v8;
      v7[1] = v19;
      uint64_t v20 = *(int *)(type metadata accessor for AMDPbHEConfigsReply(0) + 24);
      uint64_t v44 = (char *)v8 + v20;
      uint64_t v47 = (char *)v7 + v20;
      uint64_t v21 = type metadata accessor for UnknownStorage();
      uint64_t v22 = *(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v22(v47, v44, v21);
    }
    else
    {
      if (EnumCaseMultiPayload != 1)
      {
        uint64_t v24 = type metadata accessor for AMDPbHEReply.OneOf_Reply(0);
        uint64_t v25 = *(void *)(v24 - 8);
        uint64_t v23 = v7;
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v25 + 48))(v8, 1, v24))
        {
          uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
          memcpy(v7, v8, *(void *)(*(void *)(v26 - 8) + 64));
          uint64_t v13 = a3;
        }
        else
        {
          int v27 = swift_getEnumCaseMultiPayload();
          *uint64_t v7 = *v8;
          if (v27 == 1) {
            uint64_t v28 = *(int *)(type metadata accessor for AMDPbPECReply(0) + 20);
          }
          else {
            uint64_t v28 = *(int *)(type metadata accessor for AMDPbPIRReply(0) + 20);
          }
          uint64_t v43 = (char *)v8 + v28;
          uint64_t v45 = (char *)v7 + v28;
          uint64_t v29 = type metadata accessor for UnknownStorage();
          uint64_t v42 = *(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 16);
          swift_bridgeObjectRetain();
          v42(v45, v43, v29);
          swift_storeEnumTagMultiPayload();
          (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v7, 0, 1, v24);
          uint64_t v13 = a3;
        }
        uint64_t v30 = *(int *)(type metadata accessor for AMDPbHEReply(0) + 20);
        uint64_t v31 = (char *)v23 + v30;
        uint64_t v32 = (char *)v8 + v30;
        uint64_t v33 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v33 - 8) + 16))(v31, v32, v33);
        uint64_t v10 = v48;
        goto LABEL_15;
      }
      *uint64_t v7 = *v8;
      uint64_t v15 = *(int *)(type metadata accessor for AMDPbHEReplies(0) + 20);
      uint64_t v46 = (char *)v7 + v15;
      uint64_t v16 = (char *)v8 + v15;
      uint64_t v17 = type metadata accessor for UnknownStorage();
      uint64_t v18 = *(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16);
      swift_bridgeObjectRetain();
      v18(v46, v16, v17);
    }
    uint64_t v23 = v7;
    uint64_t v13 = a3;
LABEL_15:
    swift_storeEnumTagMultiPayload();
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v23, 0, 1, v9);
    goto LABEL_16;
  }
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
  uint64_t v13 = a3;
LABEL_16:
  uint64_t v34 = *(int *)(v13 + 32);
  uint64_t v35 = a1 + v34;
  uint64_t v36 = a2 + v34;
  uint64_t v37 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 16))(v35, v36, v37);
  uint64_t v38 = *(int *)(v13 + 36);
  uint64_t v39 = a1 + v38;
  uint64_t v40 = a2 + v38;
  *(void *)uint64_t v39 = *(void *)v40;
  *(_WORD *)(v39 + 8) = *(_WORD *)(v40 + 8);
  return a1;
}

uint64_t assignWithCopy for AMDPbHEResponse(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v6;
  *(void *)(a1 + 16) = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[7];
  int v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)((char *)a2 + v7);
  uint64_t v10 = type metadata accessor for AMDPbHEResponse.OneOf_Response(0);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2)
      {
        *int v8 = *v9;
        v8[1] = v9[1];
        uint64_t v24 = *(int *)(type metadata accessor for AMDPbHEConfigsReply(0) + 24);
        uint64_t v61 = (char *)v9 + v24;
        uint64_t v65 = (char *)v8 + v24;
        uint64_t v25 = type metadata accessor for UnknownStorage();
        uint64_t v58 = *(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v58(v65, v61, v25);
      }
      else if (EnumCaseMultiPayload == 1)
      {
        *int v8 = *v9;
        uint64_t v16 = *(int *)(type metadata accessor for AMDPbHEReplies(0) + 20);
        uint64_t v64 = (char *)v9 + v16;
        unsigned int v69 = (char *)v8 + v16;
        uint64_t v17 = type metadata accessor for UnknownStorage();
        id v60 = *(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16);
        swift_bridgeObjectRetain();
        v60(v69, v64, v17);
      }
      else
      {
        uint64_t v26 = type metadata accessor for AMDPbHEReply.OneOf_Reply(0);
        uint64_t v27 = *(void *)(v26 - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v27 + 48))(v9, 1, v26))
        {
          uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
          memcpy(v8, v9, *(void *)(*(void *)(v28 - 8) + 64));
        }
        else
        {
          int v35 = swift_getEnumCaseMultiPayload();
          *int v8 = *v9;
          if (v35 == 1) {
            uint64_t v36 = *(int *)(type metadata accessor for AMDPbPECReply(0) + 20);
          }
          else {
            uint64_t v36 = *(int *)(type metadata accessor for AMDPbPIRReply(0) + 20);
          }
          uint64_t v62 = (char *)v9 + v36;
          unsigned int v67 = (char *)v8 + v36;
          uint64_t v59 = type metadata accessor for UnknownStorage();
          uint64_t v57 = *(void (**)(char *, char *, uint64_t))(*(void *)(v59 - 8) + 16);
          swift_bridgeObjectRetain();
          v57(v67, v62, v59);
          swift_storeEnumTagMultiPayload();
          (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(v8, 0, 1, v26);
        }
        uint64_t v37 = *(int *)(type metadata accessor for AMDPbHEReply(0) + 20);
        uint64_t v38 = (char *)v8 + v37;
        uint64_t v39 = (char *)v9 + v37;
        uint64_t v40 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v40 - 8) + 16))(v38, v39, v40);
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_25;
    }
LABEL_8:
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
    memcpy(v8, v9, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_25;
  }
  if (v14)
  {
    outlined destroy of AMDPbHEResponse.OneOf_Response((uint64_t)v8, type metadata accessor for AMDPbHEResponse.OneOf_Response);
    goto LABEL_8;
  }
  if ((uint64_t *)a1 != a2)
  {
    outlined destroy of AMDPbHEResponse.OneOf_Response((uint64_t)v8, type metadata accessor for AMDPbHEResponse.OneOf_Response);
    int v19 = swift_getEnumCaseMultiPayload();
    if (v19 == 2)
    {
      *int v8 = *v9;
      v8[1] = v9[1];
      uint64_t v29 = *(int *)(type metadata accessor for AMDPbHEConfigsReply(0) + 24);
      uint64_t v66 = (char *)v9 + v29;
      uint64_t v71 = (char *)v8 + v29;
      uint64_t v30 = type metadata accessor for UnknownStorage();
      uint64_t v31 = *(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v31(v71, v66, v30);
      swift_storeEnumTagMultiPayload();
    }
    else if (v19 == 1)
    {
      *int v8 = *v9;
      uint64_t v20 = *(int *)(type metadata accessor for AMDPbHEReplies(0) + 20);
      uint64_t v21 = (char *)v8 + v20;
      uint64_t v70 = (char *)v9 + v20;
      uint64_t v22 = type metadata accessor for UnknownStorage();
      uint64_t v23 = *(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 16);
      swift_bridgeObjectRetain();
      v23(v21, v70, v22);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      uint64_t v32 = type metadata accessor for AMDPbHEReply.OneOf_Reply(0);
      uint64_t v33 = *(void *)(v32 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v33 + 48))(v9, 1, v32))
      {
        uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
        memcpy(v8, v9, *(void *)(*(void *)(v34 - 8) + 64));
      }
      else
      {
        int v50 = swift_getEnumCaseMultiPayload();
        *int v8 = *v9;
        if (v50 == 1) {
          uint64_t v51 = *(int *)(type metadata accessor for AMDPbPECReply(0) + 20);
        }
        else {
          uint64_t v51 = *(int *)(type metadata accessor for AMDPbPIRReply(0) + 20);
        }
        uint64_t v68 = (char *)v9 + v51;
        uint64_t v72 = (char *)v8 + v51;
        uint64_t v52 = type metadata accessor for UnknownStorage();
        id v63 = *(void (**)(char *, char *, uint64_t))(*(void *)(v52 - 8) + 16);
        swift_bridgeObjectRetain();
        v63(v72, v68, v52);
        swift_storeEnumTagMultiPayload();
        (*(void (**)(void *, void, uint64_t, uint64_t))(v33 + 56))(v8, 0, 1, v32);
      }
      uint64_t v53 = *(int *)(type metadata accessor for AMDPbHEReply(0) + 20);
      uint64_t v54 = (char *)v8 + v53;
      uint64_t v55 = (char *)v9 + v53;
      uint64_t v56 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v56 - 8) + 16))(v54, v55, v56);
      swift_storeEnumTagMultiPayload();
    }
  }
LABEL_25:
  uint64_t v41 = a3[8];
  uint64_t v42 = a1 + v41;
  uint64_t v43 = (uint64_t)a2 + v41;
  uint64_t v44 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 24))(v42, v43, v44);
  uint64_t v45 = a3[9];
  uint64_t v46 = a1 + v45;
  uint64_t v47 = (uint64_t)a2 + v45;
  __int16 v48 = *(_WORD *)(v47 + 8);
  *(void *)uint64_t v46 = *(void *)v47;
  *(_WORD *)(v46 + 8) = v48;
  return a1;
}

uint64_t initializeWithTake for AMDPbHEResponse(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v6 = a3[7];
  uint64_t v7 = (_OWORD *)(a1 + v6);
  int v8 = (_OWORD *)(a2 + v6);
  uint64_t v9 = type metadata accessor for AMDPbHEResponse.OneOf_Response(0);
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *uint64_t v7 = *v8;
      uint64_t v14 = *(int *)(type metadata accessor for AMDPbHEConfigsReply(0) + 24);
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        *(void *)uint64_t v7 = *(void *)v8;
        uint64_t v13 = type metadata accessor for AMDPbHEReplies(0);
      }
      else
      {
        uint64_t v15 = type metadata accessor for AMDPbHEReply.OneOf_Reply(0);
        uint64_t v16 = *(void *)(v15 - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v16 + 48))(v8, 1, v15))
        {
          uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
          memcpy(v7, v8, *(void *)(*(void *)(v17 - 8) + 64));
        }
        else
        {
          int v18 = swift_getEnumCaseMultiPayload();
          *(void *)uint64_t v7 = *(void *)v8;
          if (v18 == 1) {
            uint64_t v19 = *(int *)(type metadata accessor for AMDPbPECReply(0) + 20);
          }
          else {
            uint64_t v19 = *(int *)(type metadata accessor for AMDPbPIRReply(0) + 20);
          }
          uint64_t v32 = (char *)v8 + v19;
          uint64_t v33 = (char *)v7 + v19;
          uint64_t v20 = type metadata accessor for UnknownStorage();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 32))(v33, v32, v20);
          swift_storeEnumTagMultiPayload();
          (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v16 + 56))(v7, 0, 1, v15);
        }
        uint64_t v13 = type metadata accessor for AMDPbHEReply(0);
      }
      uint64_t v14 = *(int *)(v13 + 20);
    }
    uint64_t v21 = (char *)v7 + v14;
    uint64_t v22 = (char *)v8 + v14;
    uint64_t v23 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 32))(v21, v22, v23);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v24 = a3[8];
  uint64_t v25 = a1 + v24;
  uint64_t v26 = a2 + v24;
  uint64_t v27 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 32))(v25, v26, v27);
  uint64_t v28 = a3[9];
  uint64_t v29 = a1 + v28;
  uint64_t v30 = a2 + v28;
  *(void *)uint64_t v29 = *(void *)v30;
  *(_WORD *)(v29 + 8) = *(_WORD *)(v30 + 8);
  return a1;
}

uint64_t assignWithTake for AMDPbHEResponse(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[7];
  uint64_t v7 = (_OWORD *)(a1 + v6);
  int v8 = (_OWORD *)(a2 + v6);
  uint64_t v9 = type metadata accessor for AMDPbHEResponse.OneOf_Response(0);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2)
      {
        *uint64_t v7 = *v8;
        uint64_t v22 = *(int *)(type metadata accessor for AMDPbHEConfigsReply(0) + 24);
      }
      else
      {
        if (EnumCaseMultiPayload == 1)
        {
          *(void *)uint64_t v7 = *(void *)v8;
          uint64_t v15 = type metadata accessor for AMDPbHEReplies(0);
        }
        else
        {
          uint64_t v23 = type metadata accessor for AMDPbHEReply.OneOf_Reply(0);
          uint64_t v24 = *(void *)(v23 - 8);
          if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v24 + 48))(v8, 1, v23))
          {
            uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
            memcpy(v7, v8, *(void *)(*(void *)(v25 - 8) + 64));
          }
          else
          {
            int v33 = swift_getEnumCaseMultiPayload();
            *(void *)uint64_t v7 = *(void *)v8;
            if (v33 == 1) {
              uint64_t v34 = *(int *)(type metadata accessor for AMDPbPECReply(0) + 20);
            }
            else {
              uint64_t v34 = *(int *)(type metadata accessor for AMDPbPIRReply(0) + 20);
            }
            uint64_t v56 = (char *)v8 + v34;
            uint64_t v57 = (char *)v7 + v34;
            uint64_t v35 = type metadata accessor for UnknownStorage();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 32))(v57, v56, v35);
            swift_storeEnumTagMultiPayload();
            (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v24 + 56))(v7, 0, 1, v23);
          }
          uint64_t v15 = type metadata accessor for AMDPbHEReply(0);
        }
        uint64_t v22 = *(int *)(v15 + 20);
      }
      uint64_t v36 = (char *)v7 + v22;
      uint64_t v37 = (char *)v8 + v22;
      uint64_t v38 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v38 - 8) + 32))(v36, v37, v38);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_26;
    }
LABEL_8:
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
    memcpy(v7, v8, *(void *)(*(void *)(v16 - 8) + 64));
    goto LABEL_26;
  }
  if (v13)
  {
    outlined destroy of AMDPbHEResponse.OneOf_Response((uint64_t)v7, type metadata accessor for AMDPbHEResponse.OneOf_Response);
    goto LABEL_8;
  }
  if (a1 != a2)
  {
    outlined destroy of AMDPbHEResponse.OneOf_Response((uint64_t)v7, type metadata accessor for AMDPbHEResponse.OneOf_Response);
    int v17 = swift_getEnumCaseMultiPayload();
    if (v17 == 2)
    {
      *uint64_t v7 = *v8;
      uint64_t v26 = *(int *)(type metadata accessor for AMDPbHEConfigsReply(0) + 24);
      uint64_t v27 = (char *)v7 + v26;
      uint64_t v28 = (char *)v8 + v26;
      uint64_t v29 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 32))(v27, v28, v29);
      swift_storeEnumTagMultiPayload();
    }
    else if (v17 == 1)
    {
      *(void *)uint64_t v7 = *(void *)v8;
      uint64_t v18 = *(int *)(type metadata accessor for AMDPbHEReplies(0) + 20);
      uint64_t v19 = (char *)v7 + v18;
      uint64_t v20 = (char *)v8 + v18;
      uint64_t v21 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 32))(v19, v20, v21);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      uint64_t v30 = type metadata accessor for AMDPbHEReply.OneOf_Reply(0);
      uint64_t v31 = *(void *)(v30 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v31 + 48))(v8, 1, v30))
      {
        uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
        memcpy(v7, v8, *(void *)(*(void *)(v32 - 8) + 64));
      }
      else
      {
        int v47 = swift_getEnumCaseMultiPayload();
        *(void *)uint64_t v7 = *(void *)v8;
        if (v47 == 1) {
          uint64_t v48 = *(int *)(type metadata accessor for AMDPbPECReply(0) + 20);
        }
        else {
          uint64_t v48 = *(int *)(type metadata accessor for AMDPbPIRReply(0) + 20);
        }
        uint64_t v49 = (char *)v7 + v48;
        int v50 = (char *)v8 + v48;
        uint64_t v51 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v51 - 8) + 32))(v49, v50, v51);
        swift_storeEnumTagMultiPayload();
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v31 + 56))(v7, 0, 1, v30);
      }
      uint64_t v52 = *(int *)(type metadata accessor for AMDPbHEReply(0) + 20);
      uint64_t v53 = (char *)v7 + v52;
      uint64_t v54 = (char *)v8 + v52;
      uint64_t v55 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v55 - 8) + 32))(v53, v54, v55);
      swift_storeEnumTagMultiPayload();
    }
  }
LABEL_26:
  uint64_t v39 = a3[8];
  uint64_t v40 = a1 + v39;
  uint64_t v41 = a2 + v39;
  uint64_t v42 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 40))(v40, v41, v42);
  uint64_t v43 = a3[9];
  uint64_t v44 = a1 + v43;
  uint64_t v45 = a2 + v43;
  *(void *)uint64_t v44 = *(void *)v45;
  *(_WORD *)(v44 + 8) = *(_WORD *)(v45 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for AMDPbHEResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_249D84944);
}

uint64_t sub_249D84944(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 28);
      int v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = type metadata accessor for UnknownStorage();
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 32);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t storeEnumTagSinglePayload for AMDPbHEResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_249D84A88);
}

uint64_t sub_249D84A88(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 16) = (a2 - 1);
  }
  else
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 28);
      int v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = type metadata accessor for UnknownStorage();
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 32);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void type metadata completion function for AMDPbHEResponse()
{
  type metadata accessor for AMDPbHEResponse.OneOf_Response?();
  if (v0 <= 0x3F)
  {
    type metadata accessor for UnknownStorage();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void type metadata accessor for AMDPbHEResponse.OneOf_Response?()
{
  if (!lazy cache variable for type metadata for AMDPbHEResponse.OneOf_Response?)
  {
    type metadata accessor for AMDPbHEResponse.OneOf_Response(255);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for AMDPbHEResponse.OneOf_Response(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v13 = a2[1];
      *a1 = *a2;
      a1[1] = v13;
      uint64_t v14 = *(int *)(type metadata accessor for AMDPbHEConfigsReply(0) + 24);
      uint64_t v15 = (char *)a1 + v14;
      uint64_t v16 = (char *)a2 + v14;
      uint64_t v17 = type metadata accessor for UnknownStorage();
      uint64_t v18 = *(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v18(v15, v16, v17);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      uint64_t v7 = *(int *)(type metadata accessor for AMDPbHEReplies(0) + 20);
      uint64_t v8 = (char *)a1 + v7;
      uint64_t v9 = (char *)a2 + v7;
      uint64_t v10 = type metadata accessor for UnknownStorage();
      uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
      swift_bridgeObjectRetain();
      v11(v8, v9, v10);
    }
    else
    {
      uint64_t v19 = type metadata accessor for AMDPbHEReply.OneOf_Reply(0);
      uint64_t v20 = *(void *)(v19 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v20 + 48))(a2, 1, v19))
      {
        uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
        memcpy(a1, a2, *(void *)(*(void *)(v21 - 8) + 64));
      }
      else
      {
        int v22 = swift_getEnumCaseMultiPayload();
        *a1 = *a2;
        if (v22 == 1) {
          uint64_t v23 = *(int *)(type metadata accessor for AMDPbPECReply(0) + 20);
        }
        else {
          uint64_t v23 = *(int *)(type metadata accessor for AMDPbPIRReply(0) + 20);
        }
        uint64_t v32 = (char *)a1 + v23;
        uint64_t v24 = (char *)a2 + v23;
        uint64_t v25 = type metadata accessor for UnknownStorage();
        uint64_t v26 = *(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 16);
        swift_bridgeObjectRetain();
        v26(v32, v24, v25);
        swift_storeEnumTagMultiPayload();
        (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v20 + 56))(a1, 0, 1, v19);
      }
      uint64_t v27 = *(int *)(type metadata accessor for AMDPbHEReply(0) + 20);
      uint64_t v28 = (char *)a1 + v27;
      uint64_t v29 = (char *)a2 + v27;
      uint64_t v30 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 16))(v28, v29, v30);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for AMDPbHEResponse.OneOf_Response(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v6 = *(int *)(type metadata accessor for AMDPbHEConfigsReply(0) + 24);
  }
  else
  {
    if (result == 1)
    {
      swift_bridgeObjectRelease();
      uint64_t v7 = type metadata accessor for AMDPbHEReplies(0);
    }
    else
    {
      if (result) {
        return result;
      }
      uint64_t v3 = type metadata accessor for AMDPbHEReply.OneOf_Reply(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 48))(a1, 1, v3))
      {
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        swift_bridgeObjectRelease();
        if (EnumCaseMultiPayload == 1) {
          uint64_t v5 = type metadata accessor for AMDPbPECReply(0);
        }
        else {
          uint64_t v5 = type metadata accessor for AMDPbPIRReply(0);
        }
        uint64_t v8 = a1 + *(int *)(v5 + 20);
        uint64_t v9 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
      }
      uint64_t v7 = type metadata accessor for AMDPbHEReply(0);
    }
    uint64_t v6 = *(int *)(v7 + 20);
  }
  uint64_t v10 = a1 + v6;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8);
  return v12(v10, v11);
}

void *initializeWithCopy for AMDPbHEResponse.OneOf_Response(void *a1, void *a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v10 = a2[1];
    *a1 = *a2;
    a1[1] = v10;
    uint64_t v11 = *(int *)(type metadata accessor for AMDPbHEConfigsReply(0) + 24);
    uint64_t v12 = (char *)a1 + v11;
    uint64_t v13 = (char *)a2 + v11;
    uint64_t v14 = type metadata accessor for UnknownStorage();
    uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v15(v12, v13, v14);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    *a1 = *a2;
    uint64_t v5 = *(int *)(type metadata accessor for AMDPbHEReplies(0) + 20);
    uint64_t v6 = (char *)a1 + v5;
    uint64_t v7 = (char *)a2 + v5;
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16);
    swift_bridgeObjectRetain();
    v9(v6, v7, v8);
  }
  else
  {
    uint64_t v16 = type metadata accessor for AMDPbHEReply.OneOf_Reply(0);
    uint64_t v17 = *(void *)(v16 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v17 + 48))(a2, 1, v16))
    {
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
      memcpy(a1, a2, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      int v19 = swift_getEnumCaseMultiPayload();
      *a1 = *a2;
      if (v19 == 1) {
        uint64_t v20 = *(int *)(type metadata accessor for AMDPbPECReply(0) + 20);
      }
      else {
        uint64_t v20 = *(int *)(type metadata accessor for AMDPbPIRReply(0) + 20);
      }
      uint64_t v29 = (char *)a1 + v20;
      uint64_t v21 = (char *)a2 + v20;
      uint64_t v22 = type metadata accessor for UnknownStorage();
      uint64_t v23 = *(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 16);
      swift_bridgeObjectRetain();
      v23(v29, v21, v22);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(a1, 0, 1, v16);
    }
    uint64_t v24 = *(int *)(type metadata accessor for AMDPbHEReply(0) + 20);
    uint64_t v25 = (char *)a1 + v24;
    uint64_t v26 = (char *)a2 + v24;
    uint64_t v27 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 16))(v25, v26, v27);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *assignWithCopy for AMDPbHEResponse.OneOf_Response(void *a1, void *a2)
{
  if (a1 != a2)
  {
    outlined destroy of AMDPbHEResponse.OneOf_Response((uint64_t)a1, type metadata accessor for AMDPbHEResponse.OneOf_Response);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      uint64_t v10 = *(int *)(type metadata accessor for AMDPbHEConfigsReply(0) + 24);
      uint64_t v11 = (char *)a1 + v10;
      uint64_t v12 = (char *)a2 + v10;
      uint64_t v13 = type metadata accessor for UnknownStorage();
      uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v14(v11, v12, v13);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      uint64_t v5 = *(int *)(type metadata accessor for AMDPbHEReplies(0) + 20);
      uint64_t v6 = (char *)a1 + v5;
      uint64_t v7 = (char *)a2 + v5;
      uint64_t v8 = type metadata accessor for UnknownStorage();
      uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16);
      swift_bridgeObjectRetain();
      v9(v6, v7, v8);
    }
    else
    {
      uint64_t v15 = type metadata accessor for AMDPbHEReply.OneOf_Reply(0);
      uint64_t v16 = *(void *)(v15 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v16 + 48))(a2, 1, v15))
      {
        uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
        memcpy(a1, a2, *(void *)(*(void *)(v17 - 8) + 64));
      }
      else
      {
        int v18 = swift_getEnumCaseMultiPayload();
        *a1 = *a2;
        if (v18 == 1) {
          uint64_t v19 = *(int *)(type metadata accessor for AMDPbPECReply(0) + 20);
        }
        else {
          uint64_t v19 = *(int *)(type metadata accessor for AMDPbPIRReply(0) + 20);
        }
        uint64_t v28 = (char *)a1 + v19;
        uint64_t v20 = (char *)a2 + v19;
        uint64_t v21 = type metadata accessor for UnknownStorage();
        uint64_t v22 = *(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16);
        swift_bridgeObjectRetain();
        v22(v28, v20, v21);
        swift_storeEnumTagMultiPayload();
        (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(a1, 0, 1, v15);
      }
      uint64_t v23 = *(int *)(type metadata accessor for AMDPbHEReply(0) + 20);
      uint64_t v24 = (char *)a1 + v23;
      uint64_t v25 = (char *)a2 + v23;
      uint64_t v26 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 16))(v24, v25, v26);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_OWORD *initializeWithTake for AMDPbHEResponse.OneOf_Response(_OWORD *a1, _OWORD *a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *a1 = *a2;
    uint64_t v9 = *(int *)(type metadata accessor for AMDPbHEConfigsReply(0) + 24);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v10, v11, v12);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    *(void *)a1 = *(void *)a2;
    uint64_t v5 = *(int *)(type metadata accessor for AMDPbHEReplies(0) + 20);
    uint64_t v6 = (char *)a1 + v5;
    uint64_t v7 = (char *)a2 + v5;
    uint64_t v8 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  }
  else
  {
    uint64_t v13 = type metadata accessor for AMDPbHEReply.OneOf_Reply(0);
    uint64_t v14 = *(void *)(v13 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v14 + 48))(a2, 1, v13))
    {
      uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
      memcpy(a1, a2, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      int v16 = swift_getEnumCaseMultiPayload();
      *(void *)a1 = *(void *)a2;
      if (v16 == 1) {
        uint64_t v17 = *(int *)(type metadata accessor for AMDPbPECReply(0) + 20);
      }
      else {
        uint64_t v17 = *(int *)(type metadata accessor for AMDPbPIRReply(0) + 20);
      }
      int v18 = (char *)a1 + v17;
      uint64_t v19 = (char *)a2 + v17;
      uint64_t v20 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 32))(v18, v19, v20);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v14 + 56))(a1, 0, 1, v13);
    }
    uint64_t v21 = *(int *)(type metadata accessor for AMDPbHEReply(0) + 20);
    uint64_t v22 = (char *)a1 + v21;
    uint64_t v23 = (char *)a2 + v21;
    uint64_t v24 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 32))(v22, v23, v24);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_OWORD *assignWithTake for AMDPbHEResponse.OneOf_Response(_OWORD *a1, _OWORD *a2)
{
  if (a1 != a2)
  {
    outlined destroy of AMDPbHEResponse.OneOf_Response((uint64_t)a1, type metadata accessor for AMDPbHEResponse.OneOf_Response);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      uint64_t v9 = *(int *)(type metadata accessor for AMDPbHEConfigsReply(0) + 24);
      uint64_t v10 = (char *)a1 + v9;
      uint64_t v11 = (char *)a2 + v9;
      uint64_t v12 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v10, v11, v12);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *(void *)a1 = *(void *)a2;
      uint64_t v5 = *(int *)(type metadata accessor for AMDPbHEReplies(0) + 20);
      uint64_t v6 = (char *)a1 + v5;
      uint64_t v7 = (char *)a2 + v5;
      uint64_t v8 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
    }
    else
    {
      uint64_t v13 = type metadata accessor for AMDPbHEReply.OneOf_Reply(0);
      uint64_t v14 = *(void *)(v13 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v14 + 48))(a2, 1, v13))
      {
        uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
        memcpy(a1, a2, *(void *)(*(void *)(v15 - 8) + 64));
      }
      else
      {
        int v16 = swift_getEnumCaseMultiPayload();
        *(void *)a1 = *(void *)a2;
        if (v16 == 1) {
          uint64_t v17 = *(int *)(type metadata accessor for AMDPbPECReply(0) + 20);
        }
        else {
          uint64_t v17 = *(int *)(type metadata accessor for AMDPbPIRReply(0) + 20);
        }
        int v18 = (char *)a1 + v17;
        uint64_t v19 = (char *)a2 + v17;
        uint64_t v20 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 32))(v18, v19, v20);
        swift_storeEnumTagMultiPayload();
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v14 + 56))(a1, 0, 1, v13);
      }
      uint64_t v21 = *(int *)(type metadata accessor for AMDPbHEReply(0) + 20);
      uint64_t v22 = (char *)a1 + v21;
      uint64_t v23 = (char *)a2 + v21;
      uint64_t v24 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 32))(v22, v23, v24);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata completion function for AMDPbHEResponse.OneOf_Response()
{
  uint64_t result = type metadata accessor for AMDPbHEReply(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for AMDPbHEReplies(319);
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for AMDPbHEConfigsReply(319);
      if (v3 <= 0x3F)
      {
        swift_initEnumMetadataMultiPayload();
        return 0;
      }
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AMDPbHEResponse.PbStatus(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for AMDPbHEResponse.PbStatus(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)uint64_t result = 0;
    *(unsigned char *)(result + 8) = 0;
    *(_DWORD *)uint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 9) = v3;
  return result;
}

uint64_t getEnumTag for AMDPbHEResponse.PbStatus(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t destructiveInjectEnumTag for AMDPbHEResponse.PbStatus(uint64_t result, int a2)
{
  if (a2)
  {
    *(void *)uint64_t result = (a2 - 1);
    *(unsigned char *)(result + 8) = 1;
  }
  else
  {
    *(unsigned char *)(result + 8) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for AMDPbHEResponse.PbStatus()
{
  return &type metadata for AMDPbHEResponse.PbStatus;
}

uint64_t AspireApiPECRequest.evaluationKeyMetadata.setter(uint64_t a1)
{
  return AspireApiPECRequest.evaluationKeyMetadata.setter(a1, type metadata accessor for AspireApiPECRequest);
}

uint64_t type metadata accessor for AspireApiPECRequest(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireApiPECRequest);
}

uint64_t type metadata accessor for AspireApiEvaluationKeyMetadata(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireApiEvaluationKeyMetadata);
}

uint64_t AspireApiKeyStatus.keyConfig.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for AspireApiKeyStatus(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + *(int *)(v6 + 24), (uint64_t)v5, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  uint64_t v7 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v5, a1, type metadata accessor for AspireHeEvaluationKeyConfig);
  }
  *(void *)a1 = MEMORY[0x263F8EE78];
  *(unsigned char *)(a1 + 8) = 0;
  UnknownStorage.init()();
  uint64_t v8 = a1 + *(int *)(v7 + 28);
  uint64_t v9 = type metadata accessor for AspireHeEncryptionParameters(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
}

uint64_t type metadata accessor for AspireApiKeyStatus(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireApiKeyStatus);
}

uint64_t outlined init with take of AspireApiEvaluationKeyMetadata(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t AspireApiPIRConfig.keywordPirParams.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for AspireApiPIRConfig(0) + 20))
     + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__keywordPirParams;
  swift_beginAccess();
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v6, (uint64_t)v5, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  uint64_t v7 = type metadata accessor for AspirePirKeywordPirParameters(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v5, a1, type metadata accessor for AspirePirKeywordPirParameters);
  }
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 0;
  UnknownStorage.init()();
  uint64_t v8 = a1 + *(int *)(v7 + 28);
  uint64_t v9 = type metadata accessor for AspirePirSymmetricPirClientConfig(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  uint64_t v10 = a1 + *(int *)(v7 + 32);
  uint64_t v11 = type metadata accessor for AspirePirPIRShardingFunction(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
}

uint64_t type metadata accessor for AspireApiPIRConfig(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireApiPIRConfig);
}

uint64_t AspireApiPIRConfig.encryptionParameters.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for AspireApiPIRConfig(0) + 20))
     + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__encryptionParameters;
  swift_beginAccess();
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v6, (uint64_t)v5, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  uint64_t v7 = type metadata accessor for AspireHeEncryptionParameters(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v5, a1, type metadata accessor for AspireHeEncryptionParameters);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 1;
  *(void *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 48) = 1;
  *(void *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 64) = 1;
  UnknownStorage.init()();
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
}

uint64_t AspireApiPECConfig.encryptionParameters.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for AspireApiPECConfig(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + *(int *)(v6 + 40), (uint64_t)v5, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  uint64_t v7 = type metadata accessor for AspireHeEncryptionParameters(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v5, a1, type metadata accessor for AspireHeEncryptionParameters);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 1;
  *(void *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 48) = 1;
  *(void *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 64) = 1;
  UnknownStorage.init()();
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
}

uint64_t type metadata accessor for AspireApiPECConfig(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireApiPECConfig);
}

uint64_t AspireApiPIRConfig.pirShardConfigs.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiPIRShardConfigs?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for AspireApiPIRConfig(0) + 20))
     + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__pirShardConfigs;
  swift_beginAccess();
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v6, (uint64_t)v5, &demangling cache variable for type metadata for AspireApiPIRShardConfigs?);
  uint64_t v7 = type metadata accessor for AspireApiPIRShardConfigs(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v5, a1, type metadata accessor for AspireApiPIRShardConfigs);
  }
  uint64_t v8 = type metadata accessor for AspireApiPIRShardConfigs.OneOf_ShardConfigs(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(a1, 1, 1, v8);
  UnknownStorage.init()();
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireApiPIRShardConfigs?);
}

uint64_t AspireApiPIRConfig.shardConfigs.getter()
{
  return swift_bridgeObjectRetain();
}

BOOL AspireApiPIRShardConfig.hasShardID.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for AspireApiPIRShardConfig(0) + 32) + 8) != 0;
}

uint64_t AspireApiPIRShardConfig.shardID.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for AspireApiPIRShardConfig(0) + 32));
  if (v1[1]) {
    uint64_t v2 = *v1;
  }
  else {
    uint64_t v2 = 0;
  }
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t AspireApiPIRFixedShardConfig.shardConfig.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiPIRShardConfig?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for AspireApiPIRFixedShardConfig(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + *(int *)(v6 + 24), (uint64_t)v5, &demangling cache variable for type metadata for AspireApiPIRShardConfig?);
  uint64_t v7 = (int *)type metadata accessor for AspireApiPIRShardConfig(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v5, (uint64_t)a1, type metadata accessor for AspireApiPIRShardConfig);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = MEMORY[0x263F8EE78];
  UnknownStorage.init()();
  uint64_t v8 = (void *)((char *)a1 + v7[8]);
  *uint64_t v8 = 0;
  v8[1] = 0;
  *((unsigned char *)a1 + v7[9]) = 2;
  uint64_t v9 = (char *)a1 + v7[10];
  *(void *)uint64_t v9 = 0;
  v9[8] = 1;
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireApiPIRShardConfig?);
}

uint64_t AspireApiPIRConfig.evaluationKeyConfigHash.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for AspireApiPIRConfig(0) + 20))
     + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__evaluationKeyConfigHash;
  swift_beginAccess();
  uint64_t v2 = *(void *)v1;
  outlined copy of Data._Representation(*(void *)v1, *(void *)(v1 + 8));
  return v2;
}

uint64_t AspireApiRequest.pirRequest.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for AspireApiRequest(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + *(int *)(v6 + 20), (uint64_t)v5, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
  uint64_t v7 = type metadata accessor for AspireApiRequest.OneOf_Request(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
LABEL_5:
    *(_DWORD *)a1 = 0;
    *(_OWORD *)(a1 + 8) = xmmword_249E85DF0;
    uint64_t v8 = (int *)type metadata accessor for AspireApiPIRRequest(0);
    UnknownStorage.init()();
    uint64_t v9 = a1 + v8[7];
    uint64_t v10 = type metadata accessor for AspirePirEncryptedIndices(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
    uint64_t v11 = a1 + v8[8];
    uint64_t v12 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
    uint64_t v13 = (void *)(a1 + v8[9]);
    void *v13 = 0;
    v13[1] = 0;
    uint64_t v14 = a1 + v8[10];
    uint64_t v15 = type metadata accessor for AspireApiEvaluationKey(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 1, 1, v15);
  }
  if (swift_getEnumCaseMultiPayload())
  {
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v5, type metadata accessor for AspireApiRequest.OneOf_Request);
    goto LABEL_5;
  }
  return outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v5, a1, type metadata accessor for AspireApiPIRRequest);
}

uint64_t AspireApiPIRRequest.evaluationKey.setter(uint64_t a1)
{
  return AspireApiPIRRequest.evaluationKey.setter(a1, type metadata accessor for AspireApiPIRRequest, &demangling cache variable for type metadata for AspireApiEvaluationKey?, type metadata accessor for AspireApiEvaluationKey, type metadata accessor for AspireApiEvaluationKey);
}

uint64_t AspireApiRequest.pirRequest.setter(uint64_t a1)
{
  return AspireApiRequest.pirRequest.setter(a1, type metadata accessor for AspireApiPIRRequest);
}

uint64_t AspireApiPECConfig.evaluationKeyConfigHash.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  outlined copy of Data._Representation(v1, *(void *)(v0 + 40));
  return v1;
}

uint64_t AspireApiPECRequest.evaluationKeyMetadata.getter@<X0>(void *a1@<X8>)
{
  return AspireApiPECRequest.evaluationKeyMetadata.getter((uint64_t (*)(void, double))type metadata accessor for AspireApiPECRequest, a1);
}

uint64_t AspireApiPIRRequest.evaluationKeyMetadata.getter@<X0>(void *a1@<X8>)
{
  return AspireApiPECRequest.evaluationKeyMetadata.getter((uint64_t (*)(void, double))type metadata accessor for AspireApiPIRRequest, a1);
}

uint64_t AspireApiPECRequest.evaluationKeyMetadata.getter@<X0>(uint64_t (*a1)(void, double)@<X0>, void *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  double v6 = MEMORY[0x270FA5388](v5 - 8);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a1(0, v6);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v2 + *(int *)(v9 + 32), (uint64_t)v8, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  uint64_t v10 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v8, 1, v10) != 1) {
    return outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v8, (uint64_t)a2, type metadata accessor for AspireApiEvaluationKeyMetadata);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0xC000000000000000;
  UnknownStorage.init()();
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v8, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
}

uint64_t AspireApiPIRRequest.query.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for AspireApiPIRRequest(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + *(int *)(v6 + 28), (uint64_t)v5, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  uint64_t v7 = type metadata accessor for AspirePirEncryptedIndices(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v5, (uint64_t)a1, type metadata accessor for AspirePirEncryptedIndices);
  }
  *a1 = MEMORY[0x263F8EE78];
  a1[1] = 0;
  UnknownStorage.init()();
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
}

uint64_t AspireApiEvaluationKey.metadata.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AspireApiEvaluationKey(0) + 20);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v3, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  outlined init with take of AspireApiEvaluationKeyMetadata(a1, v3, type metadata accessor for AspireApiEvaluationKeyMetadata);
  uint64_t v4 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(v3, 0, 1, v4);
}

uint64_t AspireApiEvaluationKey.evaluationKey.setter(uint64_t a1)
{
  return AspireApiEvaluationKey.evaluationKey.setter(a1, type metadata accessor for AspireApiEvaluationKey, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?, type metadata accessor for AspireHeSerializedEvaluationKey, type metadata accessor for AspireHeSerializedEvaluationKey);
}

uint64_t AspireApiPECRequest.evaluationKey.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AspireApiPECRequest(0) + 36);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v3, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
  outlined init with take of AspireApiEvaluationKeyMetadata(a1, v3, type metadata accessor for AspireApiEvaluationKey);
  uint64_t v4 = type metadata accessor for AspireApiEvaluationKey(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(v3, 0, 1, v4);
}

uint64_t AspireApiRequests.init()@<X0>(void *a1@<X8>)
{
  return AspireApiRequests.init()((void (*)(void))type metadata accessor for AspireApiRequests, a1);
}

uint64_t AspireApiPECConfig.plaintextPacking.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for AspireApiPECConfig(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + *(int *)(v6 + 44), (uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  uint64_t v7 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v5, a1, type metadata accessor for AspireSimilarityPlaintextPacking);
  }
  uint64_t v8 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(a1, 1, 1, v8);
  UnknownStorage.init()();
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
}

uint64_t AspireApiPIRConfig.algorithm.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + *(int *)(type metadata accessor for AspireApiPIRConfig(0) + 20))
     + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__algorithm;
  uint64_t result = swift_beginAccess();
  char v5 = *(unsigned char *)(v3 + 8);
  *(void *)a1 = *(void *)v3;
  *(unsigned char *)(a1 + 8) = v5;
  return result;
}

uint64_t AspireApiPIRConfig.batchSize.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for AspireApiPIRConfig(0) + 20))
     + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__batchSize;
  swift_beginAccess();
  return *(void *)v1;
}

BOOL AspireApiPIRShardConfig.hasVectorizedPirInternalBatchingSize.getter()
{
  return (*(unsigned char *)(v0 + *(int *)(type metadata accessor for AspireApiPIRShardConfig(0) + 40) + 8) & 1) == 0;
}

uint64_t AspireApiPIRShardConfig.vectorizedPirInternalBatchingSize.getter()
{
  uint64_t v1 = (unsigned char *)(v0 + *(int *)(type metadata accessor for AspireApiPIRShardConfig(0) + 40));
  if (v1[8]) {
    return 0;
  }
  else {
    return *(void *)v1;
  }
}

BOOL AspireApiPIRShardConfig.hasCompressVectorizedPirResponse.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for AspireApiPIRShardConfig(0) + 36)) != 2;
}

uint64_t AspireApiPIRShardConfig.compressVectorizedPirResponse.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for AspireApiPIRShardConfig(0) + 36)) & 1;
}

uint64_t AspireApiPIRRequest.query.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AspireApiPIRRequest(0) + 28);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v3, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  outlined init with take of AspireApiEvaluationKeyMetadata(a1, v3, type metadata accessor for AspirePirEncryptedIndices);
  uint64_t v4 = type metadata accessor for AspirePirEncryptedIndices(0);
  char v5 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(v3, 0, 1, v4);
}

uint64_t AspireApiPIRRequest.evaluationKeyMetadata.setter(uint64_t a1)
{
  return AspireApiPECRequest.evaluationKeyMetadata.setter(a1, type metadata accessor for AspireApiPIRRequest);
}

uint64_t AspireApiPECRequest.evaluationKeyMetadata.setter(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = v2 + *(int *)(a2(0) + 32);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v4, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  outlined init with take of AspireApiEvaluationKeyMetadata(a1, v4, type metadata accessor for AspireApiEvaluationKeyMetadata);
  uint64_t v5 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  uint64_t v6 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
  return v6(v4, 0, 1, v5);
}

uint64_t AspireApiPIRRequest.shardID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for AspireApiPIRRequest(0) + 36));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*AspireApiEmpty.unknownFields.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t (*AspireApiEvaluationKeyMetadata.timestamp.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t (*AspireApiEvaluationKeyMetadata.identifier.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireApiEvaluationKeyMetadata.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AspireApiEvaluationKeyMetadata.unknownFields.getter(type metadata accessor for AspireApiEvaluationKeyMetadata, a1);
}

uint64_t AspireApiEvaluationKeyMetadata.unknownFields.setter(uint64_t a1)
{
  return AspireApiEvaluationKeyMetadata.unknownFields.setter(a1, type metadata accessor for AspireApiEvaluationKeyMetadata);
}

uint64_t (*AspireApiEvaluationKeyMetadata.unknownFields.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireApiEvaluationKeyMetadata.init()@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0xC000000000000000;
  type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  return UnknownStorage.init()();
}

uint64_t AspireApiKeyStatus.timestamp.getter()
{
  return *(void *)v0;
}

uint64_t AspireApiKeyStatus.timestamp.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*AspireApiKeyStatus.timestamp.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t key path getter for AspireApiKeyStatus.keyConfig : AspireApiKeyStatus@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for AspireApiKeyStatus(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v7 + 24), (uint64_t)v6, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  uint64_t v8 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v6, 1, v8) != 1) {
    return outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v6, a2, type metadata accessor for AspireHeEvaluationKeyConfig);
  }
  *(void *)a2 = MEMORY[0x263F8EE78];
  *(unsigned char *)(a2 + 8) = 0;
  UnknownStorage.init()();
  uint64_t v9 = a2 + *(int *)(v8 + 28);
  uint64_t v10 = type metadata accessor for AspireHeEncryptionParameters(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
}

uint64_t key path setter for AspireApiKeyStatus.keyConfig : AspireApiKeyStatus(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AspireHeEvaluationKeyConfig(a1, (uint64_t)v7, type metadata accessor for AspireHeEvaluationKeyConfig);
  uint64_t v8 = a2 + *(int *)(type metadata accessor for AspireApiKeyStatus(0) + 24);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v8, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v7, v8, type metadata accessor for AspireHeEvaluationKeyConfig);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

uint64_t AspireApiKeyStatus.keyConfig.setter(uint64_t a1)
{
  return AspireApiEvaluationKey.evaluationKey.setter(a1, type metadata accessor for AspireApiKeyStatus, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?, type metadata accessor for AspireHeEvaluationKeyConfig, type metadata accessor for AspireHeEvaluationKeyConfig);
}

void (*AspireApiKeyStatus.keyConfig.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for AspireApiKeyStatus(0) + 24);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    *(void *)uint64_t v10 = MEMORY[0x263F8EE78];
    v10[8] = 0;
    UnknownStorage.init()();
    uint64_t v12 = &v10[*(int *)(v6 + 28)];
    uint64_t v13 = type metadata accessor for AspireHeEncryptionParameters(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  }
  else
  {
    outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v5, (uint64_t)v10, type metadata accessor for AspireHeEvaluationKeyConfig);
  }
  return AspireApiKeyStatus.keyConfig.modify;
}

void AspireApiKeyStatus.keyConfig.modify(uint64_t a1, char a2)
{
}

BOOL AspireApiKeyStatus.hasKeyConfig.getter()
{
  return AspireApiKeyStatus.hasKeyConfig.getter(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?, (uint64_t (*)(void, double))type metadata accessor for AspireApiKeyStatus, type metadata accessor for AspireHeEvaluationKeyConfig);
}

Swift::Void __swiftcall AspireApiKeyStatus.clearKeyConfig()()
{
}

uint64_t AspireApiKeyStatus.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AspireApiKeyStatus.unknownFields.getter(type metadata accessor for AspireApiKeyStatus, a1);
}

uint64_t AspireApiKeyStatus.unknownFields.setter(uint64_t a1)
{
  return AspireApiKeyStatus.unknownFields.setter(a1, type metadata accessor for AspireApiKeyStatus);
}

uint64_t (*AspireApiKeyStatus.unknownFields.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireApiKeyStatus.init()@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  uint64_t v2 = type metadata accessor for AspireApiKeyStatus(0);
  UnknownStorage.init()();
  uint64_t v3 = (char *)a1 + *(int *)(v2 + 24);
  uint64_t v4 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  uint64_t v5 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(v3, 1, 1, v4);
}

uint64_t (*AspireApiEvaluationKeys.keys.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireApiEvaluationKeys.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AspireApiKeyStatus.unknownFields.getter(type metadata accessor for AspireApiEvaluationKeys, a1);
}

uint64_t AspireApiKeyStatus.unknownFields.getter@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1(0) + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t AspireApiEvaluationKeys.unknownFields.setter(uint64_t a1)
{
  return AspireApiKeyStatus.unknownFields.setter(a1, type metadata accessor for AspireApiEvaluationKeys);
}

uint64_t AspireApiKeyStatus.unknownFields.setter(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = v2 + *(int *)(a2(0) + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t (*AspireApiEvaluationKeys.unknownFields.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireApiEvaluationKeys.init()@<X0>(void *a1@<X8>)
{
  return AspireApiRequests.init()((void (*)(void))type metadata accessor for AspireApiEvaluationKeys, a1);
}

uint64_t AspireApiRequests.init()@<X0>(void (*a1)(void)@<X0>, void *a2@<X8>)
{
  *a2 = MEMORY[0x263F8EE78];
  a1(0);
  return UnknownStorage.init()();
}

uint64_t AspireApiEvaluationKey.metadata.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for AspireApiEvaluationKey(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + *(int *)(v6 + 20), (uint64_t)v5, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  uint64_t v7 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v5, (uint64_t)a1, type metadata accessor for AspireApiEvaluationKeyMetadata);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0xC000000000000000;
  UnknownStorage.init()();
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
}

uint64_t key path getter for AspireApiEvaluationKey.metadata : AspireApiEvaluationKey@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for AspireApiEvaluationKey(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v7 + 20), (uint64_t)v6, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  uint64_t v8 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v6, 1, v8) != 1) {
    return outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v6, (uint64_t)a2, type metadata accessor for AspireApiEvaluationKeyMetadata);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0xC000000000000000;
  UnknownStorage.init()();
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
}

uint64_t key path setter for AspireApiEvaluationKey.metadata : AspireApiEvaluationKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AspireHeEvaluationKeyConfig(a1, (uint64_t)v7, type metadata accessor for AspireApiEvaluationKeyMetadata);
  uint64_t v8 = a2 + *(int *)(type metadata accessor for AspireApiEvaluationKey(0) + 20);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v8, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v7, v8, type metadata accessor for AspireApiEvaluationKeyMetadata);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

void (*AspireApiEvaluationKey.metadata.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for AspireApiEvaluationKey(0) + 20);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    *uint64_t v10 = 0;
    v10[1] = 0;
    void v10[2] = 0xC000000000000000;
    UnknownStorage.init()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  }
  else
  {
    outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v5, (uint64_t)v10, type metadata accessor for AspireApiEvaluationKeyMetadata);
  }
  return AspireApiEvaluationKey.metadata.modify;
}

void AspireApiEvaluationKey.metadata.modify(uint64_t a1, char a2)
{
}

BOOL AspireApiEvaluationKey.hasMetadata.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for AspireApiEvaluationKey(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v0 + *(int *)(v4 + 20), (uint64_t)v3, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  uint64_t v5 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  BOOL v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v3, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  return v6;
}

Swift::Void __swiftcall AspireApiEvaluationKey.clearMetadata()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for AspireApiEvaluationKey(0) + 20);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v1, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  uint64_t v2 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);
  v3(v1, 1, 1, v2);
}

uint64_t AspireApiEvaluationKey.evaluationKey.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for AspireApiEvaluationKey(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + *(int *)(v6 + 24), (uint64_t)v5, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  uint64_t v7 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v5, a1, type metadata accessor for AspireHeSerializedEvaluationKey);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + *(int *)(v7 + 20);
  uint64_t v9 = type metadata accessor for AspireHeSerializedGaloisKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  uint64_t v10 = a1 + *(int *)(v7 + 24);
  uint64_t v11 = type metadata accessor for AspireHeSerializedRelinKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
}

uint64_t key path getter for AspireApiEvaluationKey.evaluationKey : AspireApiEvaluationKey@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for AspireApiEvaluationKey(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v7 + 24), (uint64_t)v6, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  uint64_t v8 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v6, 1, v8) != 1) {
    return outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v6, a2, type metadata accessor for AspireHeSerializedEvaluationKey);
  }
  UnknownStorage.init()();
  uint64_t v9 = a2 + *(int *)(v8 + 20);
  uint64_t v10 = type metadata accessor for AspireHeSerializedGaloisKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  uint64_t v11 = a2 + *(int *)(v8 + 24);
  uint64_t v12 = type metadata accessor for AspireHeSerializedRelinKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
}

uint64_t key path setter for AspireApiEvaluationKey.evaluationKey : AspireApiEvaluationKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AspireHeEvaluationKeyConfig(a1, (uint64_t)v7, type metadata accessor for AspireHeSerializedEvaluationKey);
  uint64_t v8 = a2 + *(int *)(type metadata accessor for AspireApiEvaluationKey(0) + 24);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v8, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v7, v8, type metadata accessor for AspireHeSerializedEvaluationKey);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

void (*AspireApiEvaluationKey.evaluationKey.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for AspireApiEvaluationKey(0) + 24);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[*(int *)(v6 + 20)];
    uint64_t v13 = type metadata accessor for AspireHeSerializedGaloisKey(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
    uint64_t v14 = &v10[*(int *)(v6 + 24)];
    uint64_t v15 = type metadata accessor for AspireHeSerializedRelinKey(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 1, 1, v15);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  }
  else
  {
    outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v5, (uint64_t)v10, type metadata accessor for AspireHeSerializedEvaluationKey);
  }
  return AspireApiEvaluationKey.evaluationKey.modify;
}

void AspireApiEvaluationKey.evaluationKey.modify(uint64_t a1, char a2)
{
}

BOOL AspireApiEvaluationKey.hasEvaluationKey.getter()
{
  return AspireApiKeyStatus.hasKeyConfig.getter(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?, (uint64_t (*)(void, double))type metadata accessor for AspireApiEvaluationKey, type metadata accessor for AspireHeSerializedEvaluationKey);
}

BOOL AspireApiKeyStatus.hasKeyConfig.getter(uint64_t *a1, uint64_t (*a2)(void, double), uint64_t (*a3)(void))
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(a1);
  double v8 = MEMORY[0x270FA5388](v7 - 8);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = a2(0, v8);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v3 + *(int *)(v11 + 24), (uint64_t)v10, a1);
  uint64_t v12 = a3(0);
  BOOL v13 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48))(v10, 1, v12) != 1;
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v10, a1);
  return v13;
}

Swift::Void __swiftcall AspireApiEvaluationKey.clearEvaluationKey()()
{
}

uint64_t AspireApiKeyStatus.clearKeyConfig()(uint64_t (*a1)(void), uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t v6 = v3 + *(int *)(a1(0) + 24);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v6, a2);
  uint64_t v7 = a3(0);
  double v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
  return v8(v6, 1, 1, v7);
}

uint64_t (*AspireApiEvaluationKey.unknownFields.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireApiEvaluationKey.init()@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t v2 = type metadata accessor for AspireApiEvaluationKey(0);
  uint64_t v3 = a1 + *(int *)(v2 + 20);
  uint64_t v4 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  uint64_t v5 = a1 + *(int *)(v2 + 24);
  uint64_t v6 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
  return v7(v5, 1, 1, v6);
}

uint64_t (*AspireApiConfigRequest.usecases.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t (*AspireApiConfigRequest.existingConfigIds.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireApiConfigRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AspireApiEvaluationKeyMetadata.unknownFields.getter(type metadata accessor for AspireApiConfigRequest, a1);
}

uint64_t AspireApiEvaluationKeyMetadata.unknownFields.getter@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1(0) + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t AspireApiConfigRequest.unknownFields.setter(uint64_t a1)
{
  return AspireApiEvaluationKeyMetadata.unknownFields.setter(a1, type metadata accessor for AspireApiConfigRequest);
}

uint64_t AspireApiEvaluationKeyMetadata.unknownFields.setter(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = v2 + *(int *)(a2(0) + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t (*AspireApiConfigRequest.unknownFields.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireApiConfigRequest.init()@<X0>(void *a1@<X8>)
{
  uint64_t v2 = MEMORY[0x263F8EE78];
  *a1 = MEMORY[0x263F8EE78];
  a1[1] = v2;
  type metadata accessor for AspireApiConfigRequest(0);
  return UnknownStorage.init()();
}

uint64_t AspireApiConfig.config.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1, a1, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
}

uint64_t AspireApiConfig.config.setter(uint64_t a1)
{
  return outlined assign with take of AMDPbHEConfig.OneOf_Config?(a1, v1, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
}

uint64_t (*AspireApiConfig.config.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireApiConfig.pirConfig.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
  uint64_t v7 = type metadata accessor for AspireApiConfig.OneOf_Config(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() != 1) {
      return outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v6, a1, type metadata accessor for AspireApiPIRConfig);
    }
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v6, type metadata accessor for AspireApiConfig.OneOf_Config);
  }
  UnknownStorage.init()();
  uint64_t v8 = *(int *)(type metadata accessor for AspireApiPIRConfig(0) + 20);
  if (one-time initialization token for defaultInstance != -1) {
    swift_once();
  }
  *(void *)(a1 + v8) = static AspireApiPIRConfig._StorageClass.defaultInstance;
  return swift_retain();
}

uint64_t AspireApiConfig.pirConfig.setter(uint64_t a1)
{
  return AspireApiConfig.pirConfig.setter(a1, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?, type metadata accessor for AspireApiPIRConfig, type metadata accessor for AspireApiConfig.OneOf_Config);
}

uint64_t AspireApiPIRConfig.init()@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t v2 = *(int *)(type metadata accessor for AspireApiPIRConfig(0) + 20);
  if (one-time initialization token for defaultInstance != -1) {
    swift_once();
  }
  *(void *)(a1 + v2) = static AspireApiPIRConfig._StorageClass.defaultInstance;
  return swift_retain();
}

void (*AspireApiConfig.pirConfig.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v2 = v1;
  uint64_t v4 = malloc(0x30uLL);
  *a1 = v4;
  *uint64_t v4 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
  uint64_t v6 = malloc(*(void *)(*(void *)(v5 - 8) + 64));
  v4[1] = v6;
  uint64_t v7 = type metadata accessor for AspireApiPIRConfig(0);
  size_t v8 = *(void *)(*(void *)(v7 - 8) + 64);
  v4[2] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v4[3] = v9;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
  uint64_t v10 = type metadata accessor for AspireApiConfig.OneOf_Config(0);
  v4[4] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v4[5] = v11;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48))(v6, 1, v10) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v6, (uint64_t)v9, type metadata accessor for AspireApiPIRConfig);
      return AspireApiConfig.pirConfig.modify;
    }
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v6, type metadata accessor for AspireApiConfig.OneOf_Config);
  }
  UnknownStorage.init()();
  uint64_t v12 = *(int *)(v7 + 20);
  if (one-time initialization token for defaultInstance != -1) {
    swift_once();
  }
  *(void *)&v9[v12] = static AspireApiPIRConfig._StorageClass.defaultInstance;
  swift_retain();
  return AspireApiConfig.pirConfig.modify;
}

void AspireApiConfig.pirConfig.modify(uint64_t **a1, char a2)
{
}

uint64_t AspireApiConfig.pecConfig.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
  uint64_t v7 = type metadata accessor for AspireApiConfig.OneOf_Config(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1) {
      return outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v6, a1, type metadata accessor for AspireApiPECConfig);
    }
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v6, type metadata accessor for AspireApiConfig.OneOf_Config);
  }
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 1;
  *(_OWORD *)(a1 + 32) = xmmword_249E85DF0;
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  uint64_t v9 = type metadata accessor for AspireApiPECConfig(0);
  UnknownStorage.init()();
  uint64_t v10 = a1 + *(int *)(v9 + 40);
  uint64_t v11 = type metadata accessor for AspireHeEncryptionParameters(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  uint64_t v12 = a1 + *(int *)(v9 + 44);
  uint64_t v13 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
}

uint64_t key path setter for AspireApiConfig.pirConfig : AspireApiConfig(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  uint64_t v11 = a5(0);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v16 - v12;
  outlined init with copy of AspireHeEvaluationKeyConfig(a1, (uint64_t)&v16 - v12, a6);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(a2, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
  outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v13, a2, a7);
  uint64_t v14 = type metadata accessor for AspireApiConfig.OneOf_Config(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(a2, 0, 1, v14);
}

uint64_t AspireApiConfig.pecConfig.setter(uint64_t a1)
{
  return AspireApiConfig.pirConfig.setter(a1, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?, type metadata accessor for AspireApiPECConfig, type metadata accessor for AspireApiConfig.OneOf_Config);
}

uint64_t AspireApiPECConfig.init()@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 1;
  *(_OWORD *)(a1 + 32) = xmmword_249E85DF0;
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  uint64_t v2 = type metadata accessor for AspireApiPECConfig(0);
  UnknownStorage.init()();
  uint64_t v3 = a1 + *(int *)(v2 + 40);
  uint64_t v4 = type metadata accessor for AspireHeEncryptionParameters(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  uint64_t v5 = a1 + *(int *)(v2 + 44);
  uint64_t v6 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
  return v7(v5, 1, 1, v6);
}

void (*AspireApiConfig.pecConfig.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v2 = v1;
  uint64_t v4 = malloc(0x30uLL);
  *a1 = v4;
  *uint64_t v4 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
  uint64_t v6 = malloc(*(void *)(*(void *)(v5 - 8) + 64));
  v4[1] = v6;
  uint64_t v7 = type metadata accessor for AspireApiPECConfig(0);
  size_t v8 = *(void *)(*(void *)(v7 - 8) + 64);
  v4[2] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v4[3] = v9;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
  uint64_t v10 = type metadata accessor for AspireApiConfig.OneOf_Config(0);
  v4[4] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v4[5] = v11;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48))(v6, 1, v10) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
LABEL_6:
    *(void *)uint64_t v9 = 0;
    void v9[2] = 0;
    *((void *)v9 + 2) = 0;
    *((unsigned char *)v9 + 24) = 1;
    *((_OWORD *)v9 + 2) = xmmword_249E85DF0;
    *((void *)v9 + 6) = MEMORY[0x263F8EE78];
    UnknownStorage.init()();
    uint64_t v12 = (char *)v9 + *(int *)(v7 + 40);
    uint64_t v13 = type metadata accessor for AspireHeEncryptionParameters(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
    uint64_t v14 = (char *)v9 + *(int *)(v7 + 44);
    uint64_t v15 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 1, 1, v15);
    return AspireApiConfig.pecConfig.modify;
  }
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v6, type metadata accessor for AspireApiConfig.OneOf_Config);
    goto LABEL_6;
  }
  outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v6, (uint64_t)v9, type metadata accessor for AspireApiPECConfig);
  return AspireApiConfig.pecConfig.modify;
}

void AspireApiConfig.pecConfig.modify(uint64_t **a1, char a2)
{
}

void AspireApiConfig.pirConfig.modify(uint64_t **a1, char a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  uint64_t v7 = *a1;
  uint64_t v8 = (*a1)[4];
  uint64_t v9 = (*a1)[5];
  uint64_t v10 = (void *)(*a1)[2];
  uint64_t v11 = (void *)(*a1)[3];
  uint64_t v13 = **a1;
  uint64_t v12 = (void *)(*a1)[1];
  if (a2)
  {
    outlined init with copy of AspireHeEvaluationKeyConfig((*a1)[3], (uint64_t)v10, a5);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v13, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
    outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v10, v13, a3);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56))(v13, 0, 1, v8);
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v11, a6);
  }
  else
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(**a1, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
    outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v11, v13, a3);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56))(v13, 0, 1, v8);
  }
  free(v11);
  free(v10);
  free(v12);
  free(v7);
}

uint64_t AspireApiConfig.configID.getter()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for AspireApiConfig(0) + 20);
  uint64_t v2 = *(void *)v1;
  outlined copy of Data._Representation(*(void *)v1, *(void *)(v1 + 8));
  return v2;
}

uint64_t AspireApiConfig.configID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2 + *(int *)(type metadata accessor for AspireApiConfig(0) + 20);
  uint64_t result = outlined consume of Data._Representation(*(void *)v5, *(void *)(v5 + 8));
  *(void *)uint64_t v5 = a1;
  *(void *)(v5 + 8) = a2;
  return result;
}

uint64_t (*AspireApiConfig.configID.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireApiConfig.reuseExistingConfig.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for AspireApiConfig(0) + 24));
}

uint64_t AspireApiConfig.reuseExistingConfig.setter(char a1)
{
  uint64_t result = type metadata accessor for AspireApiConfig(0);
  *(unsigned char *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*AspireApiConfig.reuseExistingConfig.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireApiConfig.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AspireApiConfig.unknownFields.getter(type metadata accessor for AspireApiConfig, a1);
}

uint64_t AspireApiConfig.unknownFields.setter(uint64_t a1)
{
  return AspireApiConfig.unknownFields.setter(a1, type metadata accessor for AspireApiConfig);
}

uint64_t (*AspireApiConfig.unknownFields.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireApiConfig.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for AspireApiConfig.OneOf_Config(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(a1, 1, 1, v2);
  uint64_t v3 = type metadata accessor for AspireApiConfig(0);
  *(_OWORD *)(a1 + *(int *)(v3 + 20)) = xmmword_249E85DF0;
  *(unsigned char *)(a1 + *(int *)(v3 + 24)) = 0;
  return UnknownStorage.init()();
}

uint64_t (*AspireApiConfigResponse.configs.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t (*AspireApiConfigResponse.keyInfo.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireApiConfigResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AspireApiEvaluationKeyMetadata.unknownFields.getter(type metadata accessor for AspireApiConfigResponse, a1);
}

uint64_t AspireApiConfigResponse.unknownFields.setter(uint64_t a1)
{
  return AspireApiEvaluationKeyMetadata.unknownFields.setter(a1, type metadata accessor for AspireApiConfigResponse);
}

uint64_t (*AspireApiConfigResponse.unknownFields.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireApiConfigResponse.init()@<X0>(unint64_t *a1@<X8>)
{
  unint64_t v2 = MEMORY[0x263F8EE78];
  *a1 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  a1[1] = v2;
  type metadata accessor for AspireApiConfigResponse(0);
  return UnknownStorage.init()();
}

uint64_t AspireApiRequests.requests.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AspireApiRequests.requests.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*AspireApiRequests.requests.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireApiRequests.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AspireApiKeyStatus.unknownFields.getter(type metadata accessor for AspireApiRequests, a1);
}

uint64_t AspireApiRequests.unknownFields.setter(uint64_t a1)
{
  return AspireApiKeyStatus.unknownFields.setter(a1, type metadata accessor for AspireApiRequests);
}

uint64_t (*AspireApiRequests.unknownFields.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t (*AspireApiResponses.responses.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireApiResponses.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AspireApiKeyStatus.unknownFields.getter(type metadata accessor for AspireApiResponses, a1);
}

uint64_t AspireApiResponses.unknownFields.setter(uint64_t a1)
{
  return AspireApiKeyStatus.unknownFields.setter(a1, type metadata accessor for AspireApiResponses);
}

uint64_t (*AspireApiResponses.unknownFields.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireApiResponses.init()@<X0>(void *a1@<X8>)
{
  return AspireApiRequests.init()((void (*)(void))type metadata accessor for AspireApiResponses, a1);
}

uint64_t AspireApiRequest.usecase.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AspireApiRequest.usecase.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *unint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*AspireApiRequest.usecase.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireApiRequest.request.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for AspireApiRequest(0);
  return outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + *(int *)(v3 + 20), a1, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
}

uint64_t AspireApiRequest.request.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for AspireApiRequest(0);
  return outlined assign with take of AMDPbHEConfig.OneOf_Config?(a1, v1 + *(int *)(v3 + 20), &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
}

uint64_t (*AspireApiRequest.request.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireApiPIRRequest.init()@<X0>(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(_OWORD *)(a1 + 8) = xmmword_249E85DF0;
  unint64_t v2 = (int *)type metadata accessor for AspireApiPIRRequest(0);
  UnknownStorage.init()();
  uint64_t v3 = a1 + v2[7];
  uint64_t v4 = type metadata accessor for AspirePirEncryptedIndices(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  uint64_t v5 = a1 + v2[8];
  uint64_t v6 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  uint64_t v7 = (void *)(a1 + v2[9]);
  *uint64_t v7 = 0;
  v7[1] = 0;
  uint64_t v8 = a1 + v2[10];
  uint64_t v9 = type metadata accessor for AspireApiEvaluationKey(0);
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56);
  return v10(v8, 1, 1, v9);
}

void (*AspireApiRequest.pirRequest.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for AspireApiPIRRequest(0);
  size_t v7 = *(void *)(*((void *)v6 - 1) + 64);
  v3[2] = malloc(v7);
  uint64_t v8 = (char *)malloc(v7);
  v3[3] = v8;
  uint64_t v9 = *(int *)(type metadata accessor for AspireApiRequest(0) + 20);
  *((_DWORD *)v3 + 12) = v9;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + v9, (uint64_t)v5, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
  uint64_t v10 = type metadata accessor for AspireApiRequest.OneOf_Request(0);
  v3[4] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v3[5] = v11;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48))(v5, 1, v10) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
  }
  else
  {
    if (!swift_getEnumCaseMultiPayload())
    {
      outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v5, (uint64_t)v8, type metadata accessor for AspireApiPIRRequest);
      return AspireApiRequest.pirRequest.modify;
    }
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v5, type metadata accessor for AspireApiRequest.OneOf_Request);
  }
  *(_DWORD *)uint64_t v8 = 0;
  *(_OWORD *)(v8 + 8) = xmmword_249E85DF0;
  UnknownStorage.init()();
  uint64_t v12 = &v8[v6[7]];
  uint64_t v13 = type metadata accessor for AspirePirEncryptedIndices(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
  uint64_t v14 = &v8[v6[8]];
  uint64_t v15 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 1, 1, v15);
  uint64_t v16 = &v8[v6[9]];
  *(void *)uint64_t v16 = 0;
  *((void *)v16 + 1) = 0;
  uint64_t v17 = &v8[v6[10]];
  uint64_t v18 = type metadata accessor for AspireApiEvaluationKey(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v17, 1, 1, v18);
  return AspireApiRequest.pirRequest.modify;
}

void AspireApiRequest.pirRequest.modify(uint64_t a1, char a2)
{
}

uint64_t AspireApiRequest.pecRequest.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for AspireApiRequest(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + *(int *)(v6 + 20), (uint64_t)v5, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
  uint64_t v7 = type metadata accessor for AspireApiRequest.OneOf_Request(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1) {
      return outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v5, a1, type metadata accessor for AspireApiPECRequest);
    }
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v5, type metadata accessor for AspireApiRequest.OneOf_Request);
  }
  uint64_t v9 = MEMORY[0x263F8EE78];
  *(void *)a1 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 8) = v9;
  *(_OWORD *)(a1 + 16) = xmmword_249E85DF0;
  uint64_t v10 = type metadata accessor for AspireApiPECRequest(0);
  UnknownStorage.init()();
  uint64_t v11 = a1 + *(int *)(v10 + 32);
  uint64_t v12 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  uint64_t v13 = a1 + *(int *)(v10 + 36);
  uint64_t v14 = type metadata accessor for AspireApiEvaluationKey(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
}

uint64_t AspireApiRequest.pecRequest.setter(uint64_t a1)
{
  return AspireApiRequest.pirRequest.setter(a1, type metadata accessor for AspireApiPECRequest);
}

uint64_t AspireApiPECRequest.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)a1 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = xmmword_249E85DF0;
  uint64_t v3 = type metadata accessor for AspireApiPECRequest(0);
  UnknownStorage.init()();
  uint64_t v4 = a1 + *(int *)(v3 + 32);
  uint64_t v5 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v6 = a1 + *(int *)(v3 + 36);
  uint64_t v7 = type metadata accessor for AspireApiEvaluationKey(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
  return v8(v6, 1, 1, v7);
}

void (*AspireApiRequest.pecRequest.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for AspireApiPECRequest(0);
  size_t v7 = *(void *)(*(void *)(v6 - 8) + 64);
  v3[2] = malloc(v7);
  uint64_t v8 = malloc(v7);
  v3[3] = v8;
  uint64_t v9 = *(int *)(type metadata accessor for AspireApiRequest(0) + 20);
  *((_DWORD *)v3 + 12) = v9;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + v9, (uint64_t)v5, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
  uint64_t v10 = type metadata accessor for AspireApiRequest.OneOf_Request(0);
  v3[4] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v3[5] = v11;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48))(v5, 1, v10) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
LABEL_6:
    uint64_t v12 = MEMORY[0x263F8EE78];
    *uint64_t v8 = MEMORY[0x263F8EE78];
    v8[1] = v12;
    *((_OWORD *)v8 + 1) = xmmword_249E85DF0;
    UnknownStorage.init()();
    uint64_t v13 = (char *)v8 + *(int *)(v6 + 32);
    uint64_t v14 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
    uint64_t v15 = (char *)v8 + *(int *)(v6 + 36);
    uint64_t v16 = type metadata accessor for AspireApiEvaluationKey(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v15, 1, 1, v16);
    return AspireApiRequest.pecRequest.modify;
  }
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v5, type metadata accessor for AspireApiRequest.OneOf_Request);
    goto LABEL_6;
  }
  outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v5, (uint64_t)v8, type metadata accessor for AspireApiPECRequest);
  return AspireApiRequest.pecRequest.modify;
}

void AspireApiRequest.pecRequest.modify(uint64_t a1, char a2)
{
}

uint64_t AspireApiRequest.oprfRequest.getter@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for AspireApiRequest(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + *(int *)(v6 + 20), (uint64_t)v5, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
  uint64_t v7 = type metadata accessor for AspireApiRequest.OneOf_Request(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 2) {
      return outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v5, (uint64_t)a1, type metadata accessor for AspireApiOPRFRequest);
    }
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v5, type metadata accessor for AspireApiRequest.OneOf_Request);
  }
  *a1 = xmmword_249E85DF0;
  a1[1] = xmmword_249E85DF0;
  type metadata accessor for AspireApiOPRFRequest(0);
  return UnknownStorage.init()();
}

uint64_t key path setter for AspireApiRequest.pirRequest : AspireApiRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  uint64_t v11 = a5(0);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v17 - v12;
  outlined init with copy of AspireHeEvaluationKeyConfig(a1, (uint64_t)&v17 - v12, a6);
  uint64_t v14 = a2 + *(int *)(type metadata accessor for AspireApiRequest(0) + 20);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v14, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
  outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v13, v14, a7);
  uint64_t v15 = type metadata accessor for AspireApiRequest.OneOf_Request(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 0, 1, v15);
}

uint64_t AspireApiRequest.oprfRequest.setter(uint64_t a1)
{
  return AspireApiRequest.pirRequest.setter(a1, type metadata accessor for AspireApiOPRFRequest);
}

uint64_t AspireApiRequest.pirRequest.setter(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v5 = v2 + *(int *)(type metadata accessor for AspireApiRequest(0) + 20);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v5, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
  outlined init with take of AspireApiEvaluationKeyMetadata(a1, v5, a2);
  uint64_t v6 = type metadata accessor for AspireApiRequest.OneOf_Request(0);
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
  return v7(v5, 0, 1, v6);
}

uint64_t AspireApiOPRFRequest.init()@<X0>(_OWORD *a1@<X8>)
{
  return AspireApiOPRFRequest.init()((void (*)(void))type metadata accessor for AspireApiOPRFRequest, a1);
}

void (*AspireApiRequest.oprfRequest.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  size_t v6 = *(void *)(*(void *)(type metadata accessor for AspireApiOPRFRequest(0) - 8) + 64);
  v3[2] = malloc(v6);
  uint64_t v7 = malloc(v6);
  v3[3] = v7;
  uint64_t v8 = *(int *)(type metadata accessor for AspireApiRequest(0) + 20);
  *((_DWORD *)v3 + 12) = v8;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + v8, (uint64_t)v5, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
  uint64_t v9 = type metadata accessor for AspireApiRequest.OneOf_Request(0);
  v3[4] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v3[5] = v10;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v5, 1, v9) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
LABEL_6:
    *uint64_t v7 = xmmword_249E85DF0;
    v7[1] = xmmword_249E85DF0;
    UnknownStorage.init()();
    return AspireApiRequest.oprfRequest.modify;
  }
  if (swift_getEnumCaseMultiPayload() != 2)
  {
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v5, type metadata accessor for AspireApiRequest.OneOf_Request);
    goto LABEL_6;
  }
  outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v5, (uint64_t)v7, type metadata accessor for AspireApiOPRFRequest);
  return AspireApiRequest.oprfRequest.modify;
}

void AspireApiRequest.oprfRequest.modify(uint64_t a1, char a2)
{
}

void AspireApiRequest.pirRequest.modify(uint64_t a1, char a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  uint64_t v7 = *(void **)a1;
  uint64_t v8 = *(void *)(*(void *)a1 + 32);
  uint64_t v9 = *(void *)(*(void *)a1 + 40);
  uint64_t v10 = *(int *)(*(void *)a1 + 48);
  uint64_t v11 = *(void **)(*(void *)a1 + 16);
  uint64_t v12 = *(void **)(*(void *)a1 + 24);
  uint64_t v13 = *(void **)(*(void *)a1 + 8);
  uint64_t v14 = **(void **)a1 + v10;
  if (a2)
  {
    outlined init with copy of AspireHeEvaluationKeyConfig(*(void *)(*(void *)a1 + 24), (uint64_t)v11, a5);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v14, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
    outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v11, v14, a3);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56))(v14, 0, 1, v8);
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v12, a6);
  }
  else
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(**(void **)a1 + v10, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
    outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v12, v14, a3);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56))(v14, 0, 1, v8);
  }
  free(v12);
  free(v11);
  free(v13);
  free(v7);
}

uint64_t AspireApiRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AspireApiEvaluationKeyMetadata.unknownFields.getter(type metadata accessor for AspireApiRequest, a1);
}

uint64_t AspireApiRequest.unknownFields.setter(uint64_t a1)
{
  return AspireApiEvaluationKeyMetadata.unknownFields.setter(a1, type metadata accessor for AspireApiRequest);
}

uint64_t (*AspireApiRequest.unknownFields.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t static AspireApiOPRFRequest.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static AspireApiOPRFResponse.== infix(_:_:)(a1, a2, type metadata accessor for AspireApiOPRFRequest) & 1;
}

uint64_t AspireApiRequest.init()@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  uint64_t v1 = (char *)a1 + *(int *)(type metadata accessor for AspireApiRequest(0) + 20);
  uint64_t v2 = type metadata accessor for AspireApiRequest.OneOf_Request(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  return UnknownStorage.init()();
}

uint64_t AspireApiResponse.response.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1, a1, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
}

uint64_t AspireApiResponse.response.setter(uint64_t a1)
{
  return outlined assign with take of AMDPbHEConfig.OneOf_Config?(a1, v1, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
}

uint64_t (*AspireApiResponse.response.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireApiResponse.pirResponse.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  MEMORY[0x270FA5388](v4 - 8);
  size_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  uint64_t v7 = type metadata accessor for AspireApiResponse.OneOf_Response(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
LABEL_5:
    *a1 = MEMORY[0x263F8EE78];
    type metadata accessor for AspireApiPIRResponse(0);
    return UnknownStorage.init()();
  }
  if (swift_getEnumCaseMultiPayload())
  {
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v6, type metadata accessor for AspireApiResponse.OneOf_Response);
    goto LABEL_5;
  }
  return outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v6, (uint64_t)a1, type metadata accessor for AspireApiPIRResponse);
}

uint64_t key path getter for AspireApiResponse.pirResponse : AspireApiResponse@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  MEMORY[0x270FA5388](v4 - 8);
  size_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v6, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  uint64_t v7 = type metadata accessor for AspireApiResponse.OneOf_Response(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
LABEL_5:
    *a2 = MEMORY[0x263F8EE78];
    type metadata accessor for AspireApiPIRResponse(0);
    return UnknownStorage.init()();
  }
  if (swift_getEnumCaseMultiPayload())
  {
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v6, type metadata accessor for AspireApiResponse.OneOf_Response);
    goto LABEL_5;
  }
  return outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v6, (uint64_t)a2, type metadata accessor for AspireApiPIRResponse);
}

uint64_t key path setter for AspireApiResponse.pirResponse : AspireApiResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AspireApiPIRResponse(0);
  MEMORY[0x270FA5388](v4 - 8);
  size_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AspireHeEvaluationKeyConfig(a1, (uint64_t)v6, type metadata accessor for AspireApiPIRResponse);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(a2, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v6, a2, type metadata accessor for AspireApiPIRResponse);
  uint64_t v7 = type metadata accessor for AspireApiResponse.OneOf_Response(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(a2, 0, 1, v7);
}

uint64_t AspireApiResponse.pirResponse.setter(uint64_t a1)
{
  return AspireApiConfig.pirConfig.setter(a1, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?, type metadata accessor for AspireApiPIRResponse, type metadata accessor for AspireApiResponse.OneOf_Response);
}

uint64_t AspireApiPIRResponse.init()@<X0>(void *a1@<X8>)
{
  return AspireApiRequests.init()((void (*)(void))type metadata accessor for AspireApiPIRResponse, a1);
}

void (*AspireApiResponse.pirResponse.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v2 = v1;
  uint64_t v4 = malloc(0x30uLL);
  *a1 = v4;
  *uint64_t v4 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  size_t v6 = malloc(*(void *)(*(void *)(v5 - 8) + 64));
  v4[1] = v6;
  size_t v7 = *(void *)(*(void *)(type metadata accessor for AspireApiPIRResponse(0) - 8) + 64);
  v4[2] = malloc(v7);
  uint64_t v8 = malloc(v7);
  v4[3] = v8;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  uint64_t v9 = type metadata accessor for AspireApiResponse.OneOf_Response(0);
  v4[4] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v4[5] = v10;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v6, 1, v9) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  }
  else
  {
    if (!swift_getEnumCaseMultiPayload())
    {
      outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v6, (uint64_t)v8, type metadata accessor for AspireApiPIRResponse);
      return AspireApiResponse.pirResponse.modify;
    }
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v6, type metadata accessor for AspireApiResponse.OneOf_Response);
  }
  *uint64_t v8 = MEMORY[0x263F8EE78];
  UnknownStorage.init()();
  return AspireApiResponse.pirResponse.modify;
}

void AspireApiResponse.pirResponse.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (*a1)[4];
  uint64_t v4 = (*a1)[5];
  uint64_t v5 = (void *)(*a1)[2];
  size_t v6 = (void *)(*a1)[3];
  uint64_t v8 = **a1;
  size_t v7 = (void *)(*a1)[1];
  if (a2)
  {
    outlined init with copy of AspireHeEvaluationKeyConfig((*a1)[3], (uint64_t)v5, type metadata accessor for AspireApiPIRResponse);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v8, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
    outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v5, v8, type metadata accessor for AspireApiPIRResponse);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v8, 0, 1, v3);
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v6, type metadata accessor for AspireApiPIRResponse);
  }
  else
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(**a1, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
    outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v6, v8, type metadata accessor for AspireApiPIRResponse);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v8, 0, 1, v3);
  }
  free(v6);
  free(v5);
  free(v7);
  free(v2);
}

uint64_t AspireApiResponse.pecResponse.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  MEMORY[0x270FA5388](v4 - 8);
  size_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  uint64_t v7 = type metadata accessor for AspireApiResponse.OneOf_Response(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1) {
      return outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v6, (uint64_t)a1, type metadata accessor for AspireApiPECResponse);
    }
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v6, type metadata accessor for AspireApiResponse.OneOf_Response);
  }
  *a1 = MEMORY[0x263F8EE78];
  type metadata accessor for AspireApiPECResponse(0);
  return UnknownStorage.init()();
}

uint64_t key path getter for AspireApiResponse.pecResponse : AspireApiResponse@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  MEMORY[0x270FA5388](v4 - 8);
  size_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v6, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  uint64_t v7 = type metadata accessor for AspireApiResponse.OneOf_Response(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1) {
      return outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v6, (uint64_t)a2, type metadata accessor for AspireApiPECResponse);
    }
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v6, type metadata accessor for AspireApiResponse.OneOf_Response);
  }
  *a2 = MEMORY[0x263F8EE78];
  type metadata accessor for AspireApiPECResponse(0);
  return UnknownStorage.init()();
}

uint64_t key path setter for AspireApiResponse.pecResponse : AspireApiResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AspireApiPECResponse(0);
  MEMORY[0x270FA5388](v4 - 8);
  size_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AspireHeEvaluationKeyConfig(a1, (uint64_t)v6, type metadata accessor for AspireApiPECResponse);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(a2, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v6, a2, type metadata accessor for AspireApiPECResponse);
  uint64_t v7 = type metadata accessor for AspireApiResponse.OneOf_Response(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(a2, 0, 1, v7);
}

uint64_t AspireApiResponse.pecResponse.setter(uint64_t a1)
{
  return AspireApiConfig.pirConfig.setter(a1, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?, type metadata accessor for AspireApiPECResponse, type metadata accessor for AspireApiResponse.OneOf_Response);
}

uint64_t AspireApiPECResponse.init()@<X0>(void *a1@<X8>)
{
  return AspireApiRequests.init()((void (*)(void))type metadata accessor for AspireApiPECResponse, a1);
}

void (*AspireApiResponse.pecResponse.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v2 = v1;
  uint64_t v4 = malloc(0x30uLL);
  *a1 = v4;
  *uint64_t v4 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  size_t v6 = malloc(*(void *)(*(void *)(v5 - 8) + 64));
  v4[1] = v6;
  size_t v7 = *(void *)(*(void *)(type metadata accessor for AspireApiPECResponse(0) - 8) + 64);
  v4[2] = malloc(v7);
  uint64_t v8 = malloc(v7);
  v4[3] = v8;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  uint64_t v9 = type metadata accessor for AspireApiResponse.OneOf_Response(0);
  v4[4] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v4[5] = v10;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v6, 1, v9) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
LABEL_6:
    *uint64_t v8 = MEMORY[0x263F8EE78];
    UnknownStorage.init()();
    return AspireApiResponse.pecResponse.modify;
  }
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v6, type metadata accessor for AspireApiResponse.OneOf_Response);
    goto LABEL_6;
  }
  outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v6, (uint64_t)v8, type metadata accessor for AspireApiPECResponse);
  return AspireApiResponse.pecResponse.modify;
}

void AspireApiResponse.pecResponse.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (*a1)[4];
  uint64_t v4 = (*a1)[5];
  uint64_t v5 = (void *)(*a1)[2];
  size_t v6 = (void *)(*a1)[3];
  uint64_t v8 = **a1;
  size_t v7 = (void *)(*a1)[1];
  if (a2)
  {
    outlined init with copy of AspireHeEvaluationKeyConfig((*a1)[3], (uint64_t)v5, type metadata accessor for AspireApiPECResponse);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v8, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
    outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v5, v8, type metadata accessor for AspireApiPECResponse);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v8, 0, 1, v3);
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v6, type metadata accessor for AspireApiPECResponse);
  }
  else
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(**a1, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
    outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v6, v8, type metadata accessor for AspireApiPECResponse);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v8, 0, 1, v3);
  }
  free(v6);
  free(v5);
  free(v7);
  free(v2);
}

uint64_t AspireApiResponse.oprfResponse.getter@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  MEMORY[0x270FA5388](v4 - 8);
  size_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  uint64_t v7 = type metadata accessor for AspireApiResponse.OneOf_Response(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 2) {
      return outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v6, (uint64_t)a1, type metadata accessor for AspireApiOPRFResponse);
    }
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v6, type metadata accessor for AspireApiResponse.OneOf_Response);
  }
  *a1 = xmmword_249E85DF0;
  a1[1] = xmmword_249E85DF0;
  type metadata accessor for AspireApiOPRFResponse(0);
  return UnknownStorage.init()();
}

uint64_t key path setter for AspireApiResponse.oprfResponse : AspireApiResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AspireApiOPRFResponse(0);
  MEMORY[0x270FA5388](v4 - 8);
  size_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AspireHeEvaluationKeyConfig(a1, (uint64_t)v6, type metadata accessor for AspireApiOPRFResponse);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(a2, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v6, a2, type metadata accessor for AspireApiOPRFResponse);
  uint64_t v7 = type metadata accessor for AspireApiResponse.OneOf_Response(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(a2, 0, 1, v7);
}

uint64_t AspireApiResponse.oprfResponse.setter(uint64_t a1)
{
  return AspireApiConfig.pirConfig.setter(a1, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?, type metadata accessor for AspireApiOPRFResponse, type metadata accessor for AspireApiResponse.OneOf_Response);
}

uint64_t AspireApiConfig.pirConfig.setter(uint64_t a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t (*a4)(void))
{
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v4, a2);
  outlined init with take of AspireApiEvaluationKeyMetadata(a1, v4, a3);
  uint64_t v8 = a4(0);
  swift_storeEnumTagMultiPayload();
  uint64_t v9 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56);
  return v9(v4, 0, 1, v8);
}

uint64_t AspireApiOPRFResponse.init()@<X0>(_OWORD *a1@<X8>)
{
  return AspireApiOPRFRequest.init()((void (*)(void))type metadata accessor for AspireApiOPRFResponse, a1);
}

uint64_t AspireApiOPRFRequest.init()@<X0>(void (*a1)(void)@<X0>, _OWORD *a2@<X8>)
{
  *a2 = xmmword_249E85DF0;
  a2[1] = xmmword_249E85DF0;
  a1(0);
  return UnknownStorage.init()();
}

void (*AspireApiResponse.oprfResponse.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v2 = v1;
  uint64_t v4 = malloc(0x30uLL);
  *a1 = v4;
  *uint64_t v4 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  size_t v6 = malloc(*(void *)(*(void *)(v5 - 8) + 64));
  v4[1] = v6;
  size_t v7 = *(void *)(*(void *)(type metadata accessor for AspireApiOPRFResponse(0) - 8) + 64);
  v4[2] = malloc(v7);
  uint64_t v8 = malloc(v7);
  v4[3] = v8;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  uint64_t v9 = type metadata accessor for AspireApiResponse.OneOf_Response(0);
  v4[4] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v4[5] = v10;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v6, 1, v9) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
LABEL_6:
    *uint64_t v8 = xmmword_249E85DF0;
    v8[1] = xmmword_249E85DF0;
    UnknownStorage.init()();
    return AspireApiResponse.oprfResponse.modify;
  }
  if (swift_getEnumCaseMultiPayload() != 2)
  {
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v6, type metadata accessor for AspireApiResponse.OneOf_Response);
    goto LABEL_6;
  }
  outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v6, (uint64_t)v8, type metadata accessor for AspireApiOPRFResponse);
  return AspireApiResponse.oprfResponse.modify;
}

void AspireApiResponse.oprfResponse.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (*a1)[4];
  uint64_t v4 = (*a1)[5];
  uint64_t v5 = (void *)(*a1)[2];
  size_t v6 = (void *)(*a1)[3];
  uint64_t v8 = **a1;
  size_t v7 = (void *)(*a1)[1];
  if (a2)
  {
    outlined init with copy of AspireHeEvaluationKeyConfig((*a1)[3], (uint64_t)v5, type metadata accessor for AspireApiOPRFResponse);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v8, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
    outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v5, v8, type metadata accessor for AspireApiOPRFResponse);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v8, 0, 1, v3);
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v6, type metadata accessor for AspireApiOPRFResponse);
  }
  else
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(**a1, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
    outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v6, v8, type metadata accessor for AspireApiOPRFResponse);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v8, 0, 1, v3);
  }
  free(v6);
  free(v5);
  free(v7);
  free(v2);
}

uint64_t AspireApiResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AspireApiKeyStatus.unknownFields.getter(type metadata accessor for AspireApiResponse, a1);
}

uint64_t AspireApiResponse.unknownFields.setter(uint64_t a1)
{
  return AspireApiKeyStatus.unknownFields.setter(a1, type metadata accessor for AspireApiResponse);
}

uint64_t (*AspireApiResponse.unknownFields.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t static AspireApiPIRResponse.== infix(_:_:)(char *a1, char *a2)
{
  return specialized static AspireApiEvaluationKeys.== infix(_:_:)(a1, a2, (uint64_t (*)(void, void, double))specialized static Array<A>.== infix(_:_:), type metadata accessor for AspireApiPIRResponse) & 1;
}

uint64_t static AspireApiPECResponse.== infix(_:_:)(char *a1, char *a2)
{
  return specialized static AspireApiEvaluationKeys.== infix(_:_:)(a1, a2, (uint64_t (*)(void, void, double))specialized static Array<A>.== infix(_:_:), type metadata accessor for AspireApiPECResponse) & 1;
}

uint64_t static AspireApiOPRFResponse.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static AspireApiOPRFResponse.== infix(_:_:)(a1, a2, type metadata accessor for AspireApiOPRFResponse) & 1;
}

uint64_t AspireApiResponse.init()@<X0>(uint64_t a1@<X8>)
{
  return AspireApiResponse.init()(type metadata accessor for AspireApiResponse.OneOf_Response, (void (*)(void))type metadata accessor for AspireApiResponse, a1);
}

uint64_t (*AspireApiPIRShardConfig.numEntries.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireApiPIRShardConfig.entrySize.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t AspireApiPIRShardConfig.entrySize.setter(uint64_t result)
{
  *(void *)(v1 + 8) = result;
  return result;
}

uint64_t (*AspireApiPIRShardConfig.entrySize.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireApiPIRShardConfig.dimensions.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AspireApiPIRShardConfig.dimensions.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 16) = a1;
  return result;
}

uint64_t (*AspireApiPIRShardConfig.dimensions.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t key path getter for AspireApiPIRShardConfig.shardID : AspireApiPIRShardConfig@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (uint64_t *)(a1 + *(int *)(type metadata accessor for AspireApiPIRShardConfig(0) + 32));
  unint64_t v4 = v3[1];
  if (v4)
  {
    uint64_t v5 = *v3;
    unint64_t v6 = v4;
  }
  else
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0xE000000000000000;
  }
  *a2 = v5;
  a2[1] = v6;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for AspireApiPIRShardConfig.shardID : AspireApiPIRShardConfig(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  unint64_t v4 = (void *)(a2 + *(int *)(type metadata accessor for AspireApiPIRShardConfig(0) + 32));
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *unint64_t v4 = v3;
  v4[1] = v2;
  return result;
}

uint64_t AspireApiPIRShardConfig.shardID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for AspireApiPIRShardConfig(0) + 32));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*AspireApiPIRShardConfig.shardID.modify(uint64_t a1))()
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for AspireApiPIRShardConfig(0) + 32);
  *(_DWORD *)(a1 + 24) = v3;
  unint64_t v4 = (uint64_t *)(v1 + v3);
  unint64_t v5 = v4[1];
  if (v5)
  {
    uint64_t v6 = *v4;
    unint64_t v7 = v5;
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0xE000000000000000;
  }
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return AspireApiPIRShardConfig.shardID.modify;
}

Swift::Void __swiftcall AspireApiPIRShardConfig.clearShardID()()
{
  uint64_t v1 = (void *)(v0 + *(int *)(type metadata accessor for AspireApiPIRShardConfig(0) + 32));
  swift_bridgeObjectRelease();
  *uint64_t v1 = 0;
  v1[1] = 0;
}

uint64_t AspireApiPIRShardConfig.compressVectorizedPirResponse.setter(char a1)
{
  uint64_t result = type metadata accessor for AspireApiPIRShardConfig(0);
  *(unsigned char *)(v1 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t (*AspireApiPIRShardConfig.compressVectorizedPirResponse.modify(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for AspireApiPIRShardConfig(0) + 36);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return AspireApiPIRShardConfig.compressVectorizedPirResponse.modify;
}

uint64_t AspireApiPIRShardConfig.compressVectorizedPirResponse.modify(uint64_t result)
{
  *(unsigned char *)(*(void *)result + *(int *)(result + 8)) = *(unsigned char *)(result + 12);
  return result;
}

Swift::Void __swiftcall AspireApiPIRShardConfig.clearCompressVectorizedPirResponse()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for AspireApiPIRShardConfig(0) + 36)) = 2;
}

uint64_t AspireApiPIRShardConfig.vectorizedPirInternalBatchingSize.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for AspireApiPIRShardConfig(0);
  uint64_t v4 = v1 + *(int *)(result + 40);
  *(void *)uint64_t v4 = a1;
  *(unsigned char *)(v4 + 8) = 0;
  return result;
}

uint64_t (*AspireApiPIRShardConfig.vectorizedPirInternalBatchingSize.modify(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for AspireApiPIRShardConfig(0) + 40);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  if (*((unsigned char *)v4 + 8)) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *v4;
  }
  *(void *)a1 = v5;
  return AspireApiPIRShardConfig.vectorizedPirInternalBatchingSize.modify;
}

uint64_t AspireApiPIRShardConfig.vectorizedPirInternalBatchingSize.modify(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 8) + *(int *)(result + 16);
  *(void *)uint64_t v1 = *(void *)result;
  *(unsigned char *)(v1 + 8) = 0;
  return result;
}

Swift::Void __swiftcall AspireApiPIRShardConfig.clearVectorizedPirInternalBatchingSize()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for AspireApiPIRShardConfig(0) + 40);
  *(void *)uint64_t v1 = 0;
  *(unsigned char *)(v1 + 8) = 1;
}

uint64_t AspireApiPIRShardConfig.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AspireApiConfig.unknownFields.getter(type metadata accessor for AspireApiPIRShardConfig, a1);
}

uint64_t AspireApiConfig.unknownFields.getter@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1(0) + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t AspireApiPIRShardConfig.unknownFields.setter(uint64_t a1)
{
  return AspireApiConfig.unknownFields.setter(a1, type metadata accessor for AspireApiPIRShardConfig);
}

uint64_t AspireApiConfig.unknownFields.setter(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = v2 + *(int *)(a2(0) + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t (*AspireApiPIRShardConfig.unknownFields.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireApiPIRShardConfig.init()@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = MEMORY[0x263F8EE78];
  uint64_t v2 = (int *)type metadata accessor for AspireApiPIRShardConfig(0);
  uint64_t result = UnknownStorage.init()();
  uint64_t v4 = (void *)((char *)a1 + v2[8]);
  *uint64_t v4 = 0;
  v4[1] = 0;
  *((unsigned char *)a1 + v2[9]) = 2;
  uint64_t v5 = (char *)a1 + v2[10];
  *(void *)uint64_t v5 = 0;
  v5[8] = 1;
  return result;
}

uint64_t AspireApiPIRConfig.encryptionParameters.setter(uint64_t a1)
{
  return AspireApiPIRConfig.encryptionParameters.setter(a1, &demangling cache variable for type metadata for AspireHeEncryptionParameters?, type metadata accessor for AspireHeEncryptionParameters, type metadata accessor for AspireHeEncryptionParameters, &OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__encryptionParameters);
}

void (*AspireApiPIRConfig.encryptionParameters.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for AspireHeEncryptionParameters(0);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for AspireApiPIRConfig(0) + 20))
      + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__encryptionParameters;
  swift_beginAccess();
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v10, (uint64_t)v5, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *uint64_t v9 = 0;
    v9[1] = 0;
    void v9[2] = MEMORY[0x263F8EE78];
    v9[3] = 0;
    *((unsigned char *)v9 + 32) = 1;
    v9[5] = 0;
    *((unsigned char *)v9 + 48) = 1;
    v9[7] = 0;
    *((unsigned char *)v9 + 64) = 1;
    UnknownStorage.init()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  }
  else
  {
    outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v5, (uint64_t)v9, type metadata accessor for AspireHeEncryptionParameters);
  }
  return AspireApiPIRConfig.encryptionParameters.modify;
}

void AspireApiPIRConfig.encryptionParameters.modify(uint64_t a1, char a2)
{
}

BOOL AspireApiPIRConfig.hasEncryptionParameters.getter()
{
  return AspireApiPIRConfig.hasEncryptionParameters.getter(&demangling cache variable for type metadata for AspireHeEncryptionParameters?, &OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__encryptionParameters, type metadata accessor for AspireHeEncryptionParameters);
}

Swift::Void __swiftcall AspireApiPIRConfig.clearEncryptionParameters()()
{
}

uint64_t key path getter for AspireApiPIRConfig.shardConfigs : AspireApiPIRConfig@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (void *)(*(void *)(a1 + *(int *)(type metadata accessor for AspireApiPIRConfig(0) + 20))
                + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__shardConfigs);
  swift_beginAccess();
  *a2 = *v3;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for AspireApiPIRConfig.shardConfigs : AspireApiPIRConfig(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(int *)(type metadata accessor for AspireApiPIRConfig(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspireApiPIRConfig._StorageClass(0);
    swift_allocObject();
    uint64_t v5 = swift_retain();
    *(void *)(a2 + v4) = AspireApiPIRConfig._StorageClass.init(copying:)(v5);
    swift_release();
  }
  uint64_t v6 = (void *)(*(void *)(a2 + v4)
                + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__shardConfigs);
  swift_beginAccess();
  *uint64_t v6 = v3;
  return swift_bridgeObjectRelease();
}

uint64_t AspireApiPIRConfig.shardConfigs.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for AspireApiPIRConfig(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspireApiPIRConfig._StorageClass(0);
    swift_allocObject();
    uint64_t v4 = swift_retain();
    *(void *)(v1 + v3) = AspireApiPIRConfig._StorageClass.init(copying:)(v4);
    swift_release();
  }
  uint64_t v5 = (void *)(*(void *)(v1 + v3)
                + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__shardConfigs);
  swift_beginAccess();
  *uint64_t v5 = a1;
  return swift_bridgeObjectRelease();
}

void (*AspireApiPIRConfig.shardConfigs.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for AspireApiPIRConfig(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = (void *)(*(void *)(v1 + v4)
                + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__shardConfigs);
  swift_beginAccess();
  v3[9] = *v5;
  swift_bridgeObjectRetain();
  return AspireApiPIRConfig.shardConfigs.modify;
}

void AspireApiPIRConfig.shardConfigs.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 72);
  if (a2)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v4 = *(int *)(v2 + 88);
      uint64_t v5 = *(void *)(v2 + 80);
      type metadata accessor for AspireApiPIRConfig._StorageClass(0);
      swift_allocObject();
      uint64_t v6 = swift_retain();
      *(void *)(v5 + v4) = AspireApiPIRConfig._StorageClass.init(copying:)(v6);
      swift_release();
    }
    uint64_t v7 = (void *)(*(void *)(*(void *)(v2 + 80) + *(int *)(v2 + 88))
                  + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__shardConfigs);
    swift_beginAccess();
    *uint64_t v7 = v3;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v8 = *(int *)(v2 + 88);
      uint64_t v9 = *(void *)(v2 + 80);
      type metadata accessor for AspireApiPIRConfig._StorageClass(0);
      swift_allocObject();
      uint64_t v10 = swift_retain();
      *(void *)(v9 + v8) = AspireApiPIRConfig._StorageClass.init(copying:)(v10);
      swift_release();
    }
    uint64_t v11 = (void *)(*(void *)(*(void *)(v2 + 80) + *(int *)(v2 + 88))
                   + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__shardConfigs);
    swift_beginAccess();
    void *v11 = v3;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

uint64_t key path getter for AspireApiPIRConfig.keywordPirParams : AspireApiPIRConfig@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(a1 + *(int *)(type metadata accessor for AspireApiPIRConfig(0) + 20))
     + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__keywordPirParams;
  swift_beginAccess();
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v7, (uint64_t)v6, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  uint64_t v8 = type metadata accessor for AspirePirKeywordPirParameters(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v6, 1, v8) != 1) {
    return outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v6, a2, type metadata accessor for AspirePirKeywordPirParameters);
  }
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 0;
  UnknownStorage.init()();
  uint64_t v9 = a2 + *(int *)(v8 + 28);
  uint64_t v10 = type metadata accessor for AspirePirSymmetricPirClientConfig(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  uint64_t v11 = a2 + *(int *)(v8 + 32);
  uint64_t v12 = type metadata accessor for AspirePirPIRShardingFunction(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
}

uint64_t key path setter for AspireApiPIRConfig.encryptionParameters : AspireApiPIRConfig(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t (*a6)(void), uint64_t (*a7)(char *))
{
  uint64_t v10 = a5(0);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v14 - v11;
  outlined init with copy of AspireHeEvaluationKeyConfig(a1, (uint64_t)&v14 - v11, a6);
  return a7(v12);
}

uint64_t AspireApiPIRConfig.keywordPirParams.setter(uint64_t a1)
{
  return AspireApiPIRConfig.encryptionParameters.setter(a1, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?, type metadata accessor for AspirePirKeywordPirParameters, type metadata accessor for AspirePirKeywordPirParameters, &OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__keywordPirParams);
}

void (*AspireApiPIRConfig.keywordPirParams.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for AspirePirKeywordPirParameters(0);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for AspireApiPIRConfig(0) + 20))
      + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__keywordPirParams;
  swift_beginAccess();
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v10, (uint64_t)v5, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *(void *)uint64_t v9 = 0;
    v9[8] = 0;
    UnknownStorage.init()();
    uint64_t v11 = &v9[*(int *)(v6 + 28)];
    uint64_t v12 = type metadata accessor for AspirePirSymmetricPirClientConfig(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
    uint64_t v13 = &v9[*(int *)(v6 + 32)];
    uint64_t v14 = type metadata accessor for AspirePirPIRShardingFunction(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  }
  else
  {
    outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v5, (uint64_t)v9, type metadata accessor for AspirePirKeywordPirParameters);
  }
  return AspireApiPIRConfig.keywordPirParams.modify;
}

void AspireApiPIRConfig.keywordPirParams.modify(uint64_t a1, char a2)
{
}

void AspireApiPIRConfig.encryptionParameters.modify(uint64_t a1, char a2, void (*a3)(void *), uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t v6 = *(void **)a1;
  uint64_t v7 = *(void **)(*(void *)a1 + 40);
  size_t v8 = *(void **)(*(void *)a1 + 48);
  uint64_t v9 = *(void **)(*(void *)a1 + 32);
  if (a2)
  {
    outlined init with copy of AspireHeEvaluationKeyConfig(*(void *)(*(void *)a1 + 48), (uint64_t)v7, a4);
    a3(v7);
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v8, a5);
  }
  else
  {
    a3(*(void **)(*(void *)a1 + 48));
  }
  free(v8);
  free(v7);
  free(v9);
  free(v6);
}

BOOL AspireApiPIRConfig.hasKeywordPirParams.getter()
{
  return AspireApiPIRConfig.hasEncryptionParameters.getter(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?, &OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__keywordPirParams, type metadata accessor for AspirePirKeywordPirParameters);
}

BOOL AspireApiPIRConfig.hasEncryptionParameters.getter(uint64_t *a1, void *a2, uint64_t (*a3)(void))
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(v3 + *(int *)(type metadata accessor for AspireApiPIRConfig(0) + 20)) + *a2;
  swift_beginAccess();
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v10, (uint64_t)v9, a1);
  uint64_t v11 = a3(0);
  BOOL v12 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v9, 1, v11) != 1;
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v9, a1);
  return v12;
}

Swift::Void __swiftcall AspireApiPIRConfig.clearKeywordPirParams()()
{
}

uint64_t AspireApiPIRConfig.clearEncryptionParameters()(uint64_t *a1, uint64_t (*a2)(void), void *a3)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(int *)(type metadata accessor for AspireApiPIRConfig(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspireApiPIRConfig._StorageClass(0);
    swift_allocObject();
    uint64_t v11 = swift_retain();
    *(void *)(v3 + v10) = AspireApiPIRConfig._StorageClass.init(copying:)(v11);
    swift_release();
  }
  uint64_t v12 = *(void *)(v3 + v10);
  uint64_t v13 = a2(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v9, 1, 1, v13);
  uint64_t v14 = v12 + *a3;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of AMDPbHEConfig.OneOf_Config?((uint64_t)v9, v14, a1);
  swift_endAccess();
  return swift_release();
}

uint64_t key path getter for AspireApiPIRConfig.algorithm : AspireApiPIRConfig@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + *(int *)(type metadata accessor for AspireApiPIRConfig(0) + 20))
     + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__algorithm;
  uint64_t result = swift_beginAccess();
  char v5 = *(unsigned char *)(v3 + 8);
  *(void *)a2 = *(void *)v3;
  *(unsigned char *)(a2 + 8) = v5;
  return result;
}

uint64_t key path setter for AspireApiPIRConfig.algorithm : AspireApiPIRConfig(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  char v4 = *((unsigned char *)a1 + 8);
  uint64_t v5 = *(int *)(type metadata accessor for AspireApiPIRConfig(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspireApiPIRConfig._StorageClass(0);
    swift_allocObject();
    uint64_t v6 = swift_retain();
    *(void *)(a2 + v5) = AspireApiPIRConfig._StorageClass.init(copying:)(v6);
    swift_release();
  }
  uint64_t v7 = *(void *)(a2 + v5)
     + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__algorithm;
  uint64_t result = swift_beginAccess();
  *(void *)uint64_t v7 = v3;
  *(unsigned char *)(v7 + 8) = v4;
  return result;
}

uint64_t AspireApiPIRConfig.algorithm.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char v3 = *((unsigned char *)a1 + 8);
  uint64_t v4 = *(int *)(type metadata accessor for AspireApiPIRConfig(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspireApiPIRConfig._StorageClass(0);
    swift_allocObject();
    uint64_t v5 = swift_retain();
    *(void *)(v1 + v4) = AspireApiPIRConfig._StorageClass.init(copying:)(v5);
    swift_release();
  }
  uint64_t v6 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__algorithm;
  uint64_t result = swift_beginAccess();
  *(void *)uint64_t v6 = v2;
  *(unsigned char *)(v6 + 8) = v3;
  return result;
}

void (*AspireApiPIRConfig.algorithm.modify(void *a1))(uint64_t *a1, char a2)
{
  char v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[11] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for AspireApiPIRConfig(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__algorithm;
  swift_beginAccess();
  char v6 = *(unsigned char *)(v5 + 8);
  v3[9] = *(void *)v5;
  *((unsigned char *)v3 + 80) = v6;
  return AspireApiPIRConfig.algorithm.modify;
}

void AspireApiPIRConfig.algorithm.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 72);
  char v5 = *(unsigned char *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 84);
    uint64_t v8 = *(void *)(v3 + 88);
    type metadata accessor for AspireApiPIRConfig._StorageClass(0);
    swift_allocObject();
    uint64_t v9 = swift_retain();
    *(void *)(v8 + v7) = AspireApiPIRConfig._StorageClass.init(copying:)(v9);
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 88) + *(int *)(v3 + 84))
      + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__algorithm;
  swift_beginAccess();
  *(void *)uint64_t v10 = v4;
  *(unsigned char *)(v10 + 8) = v5;
  free((void *)v3);
}

uint64_t key path setter for AspireApiPIRConfig.batchSize : AspireApiPIRConfig(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(int *)(type metadata accessor for AspireApiPIRConfig(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspireApiPIRConfig._StorageClass(0);
    swift_allocObject();
    uint64_t v5 = swift_retain();
    *(void *)(a2 + v4) = AspireApiPIRConfig._StorageClass.init(copying:)(v5);
    swift_release();
  }
  char v6 = (void *)(*(void *)(a2 + v4)
                + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__batchSize);
  uint64_t result = swift_beginAccess();
  *char v6 = v3;
  return result;
}

uint64_t AspireApiPIRConfig.batchSize.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for AspireApiPIRConfig(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspireApiPIRConfig._StorageClass(0);
    swift_allocObject();
    uint64_t v4 = swift_retain();
    *(void *)(v1 + v3) = AspireApiPIRConfig._StorageClass.init(copying:)(v4);
    swift_release();
  }
  uint64_t v5 = (void *)(*(void *)(v1 + v3)
                + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__batchSize);
  uint64_t result = swift_beginAccess();
  *uint64_t v5 = a1;
  return result;
}

void (*AspireApiPIRConfig.batchSize.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for AspireApiPIRConfig(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = (void *)(*(void *)(v1 + v4)
                + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__batchSize);
  swift_beginAccess();
  v3[9] = *v5;
  return AspireApiPIRConfig.batchSize.modify;
}

void AspireApiPIRConfig.batchSize.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 72);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 88);
    uint64_t v7 = *(void *)(v3 + 80);
    type metadata accessor for AspireApiPIRConfig._StorageClass(0);
    swift_allocObject();
    uint64_t v8 = swift_retain();
    *(void *)(v7 + v6) = AspireApiPIRConfig._StorageClass.init(copying:)(v8);
    swift_release();
  }
LABEL_4:
  uint64_t v9 = (void *)(*(void *)(*(void *)(v3 + 80) + *(int *)(v3 + 88))
                + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__batchSize);
  swift_beginAccess();
  *uint64_t v9 = v4;
  free((void *)v3);
}

uint64_t key path getter for AspireApiPIRConfig.evaluationKeyConfigHash : AspireApiPIRConfig@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = (uint64_t *)(*(void *)(a1 + *(int *)(type metadata accessor for AspireApiPIRConfig(0) + 20))
                 + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__evaluationKeyConfigHash);
  swift_beginAccess();
  uint64_t v4 = *v3;
  unint64_t v5 = v3[1];
  *a2 = *v3;
  a2[1] = v5;
  return outlined copy of Data._Representation(v4, v5);
}

uint64_t key path setter for AspireApiPIRConfig.evaluationKeyConfigHash : AspireApiPIRConfig(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  uint64_t v5 = *(int *)(type metadata accessor for AspireApiPIRConfig(0) + 20);
  outlined copy of Data._Representation(v3, v4);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspireApiPIRConfig._StorageClass(0);
    swift_allocObject();
    uint64_t v6 = swift_retain();
    *(void *)(a2 + v5) = AspireApiPIRConfig._StorageClass.init(copying:)(v6);
    swift_release();
  }
  uint64_t v7 = (uint64_t *)(*(void *)(a2 + v5)
                 + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__evaluationKeyConfigHash);
  swift_beginAccess();
  uint64_t v8 = *v7;
  unint64_t v9 = v7[1];
  *uint64_t v7 = v3;
  v7[1] = v4;
  return outlined consume of Data._Representation(v8, v9);
}

uint64_t AspireApiPIRConfig.evaluationKeyConfigHash.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(int *)(type metadata accessor for AspireApiPIRConfig(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspireApiPIRConfig._StorageClass(0);
    swift_allocObject();
    uint64_t v6 = swift_retain();
    *(void *)(v2 + v5) = AspireApiPIRConfig._StorageClass.init(copying:)(v6);
    swift_release();
  }
  uint64_t v7 = (uint64_t *)(*(void *)(v2 + v5)
                 + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__evaluationKeyConfigHash);
  swift_beginAccess();
  uint64_t v8 = *v7;
  unint64_t v9 = v7[1];
  *uint64_t v7 = a1;
  v7[1] = a2;
  return outlined consume of Data._Representation(v8, v9);
}

void (*AspireApiPIRConfig.evaluationKeyConfigHash.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for AspireApiPIRConfig(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  uint64_t v5 = (uint64_t *)(*(void *)(v1 + v4)
                 + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__evaluationKeyConfigHash);
  swift_beginAccess();
  uint64_t v6 = *v5;
  unint64_t v7 = v5[1];
  v3[9] = *v5;
  v3[10] = v7;
  outlined copy of Data._Representation(v6, v7);
  return AspireApiPIRConfig.evaluationKeyConfigHash.modify;
}

void AspireApiPIRConfig.evaluationKeyConfigHash.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 72);
  unint64_t v4 = *(void *)(*a1 + 80);
  if (a2)
  {
    outlined copy of Data._Representation(*(void *)(*a1 + 72), v4);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v5 = *(int *)(v2 + 96);
      uint64_t v6 = *(void *)(v2 + 88);
      type metadata accessor for AspireApiPIRConfig._StorageClass(0);
      swift_allocObject();
      uint64_t v7 = swift_retain();
      *(void *)(v6 + v5) = AspireApiPIRConfig._StorageClass.init(copying:)(v7);
      swift_release();
    }
    uint64_t v8 = (uint64_t *)(*(void *)(*(void *)(v2 + 88) + *(int *)(v2 + 96))
                   + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__evaluationKeyConfigHash);
    swift_beginAccess();
    uint64_t v9 = *v8;
    unint64_t v10 = v8[1];
    *uint64_t v8 = v3;
    v8[1] = v4;
    outlined consume of Data._Representation(v9, v10);
    uint64_t v11 = *(void *)(v2 + 72);
    unint64_t v12 = *(void *)(v2 + 80);
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v13 = *(int *)(v2 + 96);
      uint64_t v14 = *(void *)(v2 + 88);
      type metadata accessor for AspireApiPIRConfig._StorageClass(0);
      swift_allocObject();
      uint64_t v15 = swift_retain();
      *(void *)(v14 + v13) = AspireApiPIRConfig._StorageClass.init(copying:)(v15);
      swift_release();
    }
    uint64_t v16 = (uint64_t *)(*(void *)(*(void *)(v2 + 88) + *(int *)(v2 + 96))
                    + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__evaluationKeyConfigHash);
    swift_beginAccess();
    uint64_t v11 = *v16;
    unint64_t v12 = v16[1];
    *uint64_t v16 = v3;
    v16[1] = v4;
  }
  outlined consume of Data._Representation(v11, v12);
  free((void *)v2);
}

uint64_t AspireApiPIRConfig.batchPirParams.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirBatchPirParameters?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for AspireApiPIRConfig(0) + 20))
     + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__batchPirParams;
  swift_beginAccess();
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v6, (uint64_t)v5, &demangling cache variable for type metadata for AspirePirBatchPirParameters?);
  uint64_t v7 = type metadata accessor for AspirePirBatchPirParameters(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v5, (uint64_t)a1, type metadata accessor for AspirePirBatchPirParameters);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = MEMORY[0x263F8EE78];
  a1[3] = 0;
  UnknownStorage.init()();
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspirePirBatchPirParameters?);
}

uint64_t key path getter for AspireApiPIRConfig.batchPirParams : AspireApiPIRConfig@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirBatchPirParameters?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(a1 + *(int *)(type metadata accessor for AspireApiPIRConfig(0) + 20))
     + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__batchPirParams;
  swift_beginAccess();
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v7, (uint64_t)v6, &demangling cache variable for type metadata for AspirePirBatchPirParameters?);
  uint64_t v8 = type metadata accessor for AspirePirBatchPirParameters(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v6, 1, v8) != 1) {
    return outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v6, (uint64_t)a2, type metadata accessor for AspirePirBatchPirParameters);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = MEMORY[0x263F8EE78];
  a2[3] = 0;
  UnknownStorage.init()();
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspirePirBatchPirParameters?);
}

uint64_t AspireApiPIRConfig.batchPirParams.setter(uint64_t a1)
{
  return AspireApiPIRConfig.encryptionParameters.setter(a1, &demangling cache variable for type metadata for AspirePirBatchPirParameters?, type metadata accessor for AspirePirBatchPirParameters, type metadata accessor for AspirePirBatchPirParameters, &OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__batchPirParams);
}

void (*AspireApiPIRConfig.batchPirParams.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirBatchPirParameters?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for AspirePirBatchPirParameters(0);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for AspireApiPIRConfig(0) + 20))
      + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__batchPirParams;
  swift_beginAccess();
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v10, (uint64_t)v5, &demangling cache variable for type metadata for AspirePirBatchPirParameters?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *uint64_t v9 = 0;
    v9[1] = 0;
    void v9[2] = MEMORY[0x263F8EE78];
    v9[3] = 0;
    UnknownStorage.init()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspirePirBatchPirParameters?);
  }
  else
  {
    outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v5, (uint64_t)v9, type metadata accessor for AspirePirBatchPirParameters);
  }
  return AspireApiPIRConfig.batchPirParams.modify;
}

void AspireApiPIRConfig.batchPirParams.modify(uint64_t a1, char a2)
{
}

BOOL AspireApiPIRConfig.hasBatchPirParams.getter()
{
  return AspireApiPIRConfig.hasEncryptionParameters.getter(&demangling cache variable for type metadata for AspirePirBatchPirParameters?, &OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__batchPirParams, type metadata accessor for AspirePirBatchPirParameters);
}

Swift::Void __swiftcall AspireApiPIRConfig.clearBatchPirParams()()
{
}

uint64_t key path getter for AspireApiPIRConfig.pirShardConfigs : AspireApiPIRConfig@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiPIRShardConfigs?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(a1 + *(int *)(type metadata accessor for AspireApiPIRConfig(0) + 20))
     + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__pirShardConfigs;
  swift_beginAccess();
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v7, (uint64_t)v6, &demangling cache variable for type metadata for AspireApiPIRShardConfigs?);
  uint64_t v8 = type metadata accessor for AspireApiPIRShardConfigs(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v6, 1, v8) != 1) {
    return outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v6, a2, type metadata accessor for AspireApiPIRShardConfigs);
  }
  uint64_t v9 = type metadata accessor for AspireApiPIRShardConfigs.OneOf_ShardConfigs(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(a2, 1, 1, v9);
  UnknownStorage.init()();
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspireApiPIRShardConfigs?);
}

uint64_t AspireApiPIRConfig.pirShardConfigs.setter(uint64_t a1)
{
  return AspireApiPIRConfig.encryptionParameters.setter(a1, &demangling cache variable for type metadata for AspireApiPIRShardConfigs?, type metadata accessor for AspireApiPIRShardConfigs, type metadata accessor for AspireApiPIRShardConfigs, &OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__pirShardConfigs);
}

uint64_t AspireApiPIRConfig.encryptionParameters.setter(uint64_t a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t (*a4)(void), void *a5)
{
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(a2);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v23 - v15;
  uint64_t v17 = *(int *)(type metadata accessor for AspireApiPIRConfig(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspireApiPIRConfig._StorageClass(0);
    swift_allocObject();
    uint64_t v23 = v13;
    uint64_t v18 = swift_retain();
    uint64_t v13 = v23;
    *(void *)(v5 + v17) = AspireApiPIRConfig._StorageClass.init(copying:)(v18);
    swift_release();
  }
  uint64_t v19 = *(void *)(v5 + v17);
  outlined init with take of AspireApiEvaluationKeyMetadata(a1, (uint64_t)v16, a3);
  uint64_t v20 = a4(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v16, 0, 1, v20);
  outlined init with take of SymmetricPirClientConfig?((uint64_t)v16, (uint64_t)v13, a2);
  uint64_t v21 = v19 + *a5;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of AMDPbHEConfig.OneOf_Config?((uint64_t)v13, v21, a2);
  swift_endAccess();
  return swift_release();
}

uint64_t AspireApiPIRShardConfigs.init()@<X0>(uint64_t a1@<X8>)
{
  return AspireApiResponse.init()(type metadata accessor for AspireApiPIRShardConfigs.OneOf_ShardConfigs, (void (*)(void))type metadata accessor for AspireApiPIRShardConfigs, a1);
}

uint64_t AspireApiResponse.init()@<X0>(uint64_t (*a1)(void)@<X0>, void (*a2)(void)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(a3, 1, 1, v5);
  a2(0);
  return UnknownStorage.init()();
}

uint64_t type metadata accessor for AspireApiPIRShardConfigs(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireApiPIRShardConfigs);
}

uint64_t type metadata accessor for AspireApiPIRShardConfigs.OneOf_ShardConfigs(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireApiPIRShardConfigs.OneOf_ShardConfigs);
}

uint64_t type metadata accessor for AspireApiPIRShardConfig(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireApiPIRShardConfig);
}

uint64_t type metadata accessor for AspireApiPIRFixedShardConfig(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireApiPIRFixedShardConfig);
}

uint64_t type metadata accessor for AspireApiRequest(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireApiRequest);
}

uint64_t type metadata accessor for AspireApiRequest.OneOf_Request(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireApiRequest.OneOf_Request);
}

uint64_t type metadata accessor for AspireApiPIRRequest(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireApiPIRRequest);
}

uint64_t type metadata accessor for AspireApiEvaluationKey(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireApiEvaluationKey);
}

uint64_t type metadata accessor for AspireApiRequests(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireApiRequests);
}

uint64_t _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t type metadata accessor for AspireApiEvaluationKeys(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireApiEvaluationKeys);
}

uint64_t outlined init with copy of AspireHeEvaluationKeyConfig(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for AspireApiConfigRequest(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireApiConfigRequest);
}

uint64_t type metadata accessor for AspireApiConfig.OneOf_Config(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireApiConfig.OneOf_Config);
}

void (*AspireApiPIRConfig.pirShardConfigs.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiPIRShardConfigs?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for AspireApiPIRShardConfigs(0);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for AspireApiPIRConfig(0) + 20))
      + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__pirShardConfigs;
  swift_beginAccess();
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v10, (uint64_t)v5, &demangling cache variable for type metadata for AspireApiPIRShardConfigs?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    uint64_t v11 = type metadata accessor for AspireApiPIRShardConfigs.OneOf_ShardConfigs(0);
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v9, 1, 1, v11);
    UnknownStorage.init()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireApiPIRShardConfigs?);
  }
  else
  {
    outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v5, (uint64_t)v9, type metadata accessor for AspireApiPIRShardConfigs);
  }
  return AspireApiPIRConfig.pirShardConfigs.modify;
}

void AspireApiPIRConfig.pirShardConfigs.modify(uint64_t a1, char a2)
{
}

BOOL AspireApiPIRConfig.hasPirShardConfigs.getter()
{
  return AspireApiPIRConfig.hasEncryptionParameters.getter(&demangling cache variable for type metadata for AspireApiPIRShardConfigs?, &OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__pirShardConfigs, type metadata accessor for AspireApiPIRShardConfigs);
}

Swift::Void __swiftcall AspireApiPIRConfig.clearPirShardConfigs()()
{
}

uint64_t (*AspireApiPIRConfig.unknownFields.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireApiPIRShardConfigs.shardConfigs.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1, a1, &demangling cache variable for type metadata for AspireApiPIRShardConfigs.OneOf_ShardConfigs?);
}

uint64_t AspireApiPIRShardConfigs.shardConfigs.setter(uint64_t a1)
{
  return outlined assign with take of AMDPbHEConfig.OneOf_Config?(a1, v1, &demangling cache variable for type metadata for AspireApiPIRShardConfigs.OneOf_ShardConfigs?);
}

uint64_t (*AspireApiPIRShardConfigs.shardConfigs.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireApiPIRShardConfigs.repeatedShardConfig.getter@<X0>(_DWORD *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiPIRShardConfigs.OneOf_ShardConfigs?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AspireApiPIRShardConfigs.OneOf_ShardConfigs?);
  uint64_t v7 = type metadata accessor for AspireApiPIRShardConfigs.OneOf_ShardConfigs(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7) != 1) {
    return outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v6, (uint64_t)a1, type metadata accessor for AspireApiPIRFixedShardConfig);
  }
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspireApiPIRShardConfigs.OneOf_ShardConfigs?);
  *a1 = 0;
  uint64_t v8 = type metadata accessor for AspireApiPIRFixedShardConfig(0);
  UnknownStorage.init()();
  uint64_t v9 = (char *)a1 + *(int *)(v8 + 24);
  uint64_t v10 = type metadata accessor for AspireApiPIRShardConfig(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
}

uint64_t key path getter for AspireApiPIRShardConfigs.repeatedShardConfig : AspireApiPIRShardConfigs@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiPIRShardConfigs.OneOf_ShardConfigs?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v6, &demangling cache variable for type metadata for AspireApiPIRShardConfigs.OneOf_ShardConfigs?);
  uint64_t v7 = type metadata accessor for AspireApiPIRShardConfigs.OneOf_ShardConfigs(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7) != 1) {
    return outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v6, (uint64_t)a2, type metadata accessor for AspireApiPIRFixedShardConfig);
  }
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspireApiPIRShardConfigs.OneOf_ShardConfigs?);
  *a2 = 0;
  uint64_t v8 = type metadata accessor for AspireApiPIRFixedShardConfig(0);
  UnknownStorage.init()();
  uint64_t v9 = (char *)a2 + *(int *)(v8 + 24);
  uint64_t v10 = type metadata accessor for AspireApiPIRShardConfig(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
}

uint64_t key path setter for AspireApiPIRShardConfigs.repeatedShardConfig : AspireApiPIRShardConfigs(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AspireApiPIRFixedShardConfig(0);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AspireHeEvaluationKeyConfig(a1, (uint64_t)v6, type metadata accessor for AspireApiPIRFixedShardConfig);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(a2, &demangling cache variable for type metadata for AspireApiPIRShardConfigs.OneOf_ShardConfigs?);
  outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v6, a2, type metadata accessor for AspireApiPIRFixedShardConfig);
  uint64_t v7 = type metadata accessor for AspireApiPIRShardConfigs.OneOf_ShardConfigs(0);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(a2, 0, 1, v7);
}

uint64_t AspireApiPIRShardConfigs.repeatedShardConfig.setter(uint64_t a1)
{
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v1, &demangling cache variable for type metadata for AspireApiPIRShardConfigs.OneOf_ShardConfigs?);
  outlined init with take of AspireApiEvaluationKeyMetadata(a1, v1, type metadata accessor for AspireApiPIRFixedShardConfig);
  uint64_t v3 = type metadata accessor for AspireApiPIRShardConfigs.OneOf_ShardConfigs(0);
  uint64_t v4 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);
  return v4(v1, 0, 1, v3);
}

uint64_t AspireApiPIRFixedShardConfig.init()@<X0>(_DWORD *a1@<X8>)
{
  *a1 = 0;
  uint64_t v2 = type metadata accessor for AspireApiPIRFixedShardConfig(0);
  UnknownStorage.init()();
  uint64_t v3 = (char *)a1 + *(int *)(v2 + 24);
  uint64_t v4 = type metadata accessor for AspireApiPIRShardConfig(0);
  uint64_t v5 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(v3, 1, 1, v4);
}

void (*AspireApiPIRShardConfigs.repeatedShardConfig.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v2 = v1;
  uint64_t v4 = malloc(0x30uLL);
  *a1 = v4;
  *uint64_t v4 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiPIRShardConfigs.OneOf_ShardConfigs?);
  uint64_t v6 = malloc(*(void *)(*(void *)(v5 - 8) + 64));
  v4[1] = v6;
  uint64_t v7 = type metadata accessor for AspireApiPIRFixedShardConfig(0);
  size_t v8 = *(void *)(*(void *)(v7 - 8) + 64);
  v4[2] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v4[3] = v9;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AspireApiPIRShardConfigs.OneOf_ShardConfigs?);
  uint64_t v10 = type metadata accessor for AspireApiPIRShardConfigs.OneOf_ShardConfigs(0);
  v4[4] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v4[5] = v11;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48))(v6, 1, v10) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspireApiPIRShardConfigs.OneOf_ShardConfigs?);
    *uint64_t v9 = 0;
    UnknownStorage.init()();
    uint64_t v12 = (char *)v9 + *(int *)(v7 + 24);
    uint64_t v13 = type metadata accessor for AspireApiPIRShardConfig(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
  }
  else
  {
    outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v6, (uint64_t)v9, type metadata accessor for AspireApiPIRFixedShardConfig);
  }
  return AspireApiPIRShardConfigs.repeatedShardConfig.modify;
}

void AspireApiPIRShardConfigs.repeatedShardConfig.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (*a1)[4];
  uint64_t v4 = (*a1)[5];
  uint64_t v5 = (void *)(*a1)[2];
  uint64_t v6 = (void *)(*a1)[3];
  uint64_t v8 = **a1;
  uint64_t v7 = (void *)(*a1)[1];
  if (a2)
  {
    outlined init with copy of AspireHeEvaluationKeyConfig((*a1)[3], (uint64_t)v5, type metadata accessor for AspireApiPIRFixedShardConfig);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v8, &demangling cache variable for type metadata for AspireApiPIRShardConfigs.OneOf_ShardConfigs?);
    outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v5, v8, type metadata accessor for AspireApiPIRFixedShardConfig);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v8, 0, 1, v3);
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v6, type metadata accessor for AspireApiPIRFixedShardConfig);
  }
  else
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(**a1, &demangling cache variable for type metadata for AspireApiPIRShardConfigs.OneOf_ShardConfigs?);
    outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v6, v8, type metadata accessor for AspireApiPIRFixedShardConfig);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v8, 0, 1, v3);
  }
  free(v6);
  free(v5);
  free(v7);
  free(v2);
}

uint64_t AspireApiPIRShardConfigs.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AspireApiKeyStatus.unknownFields.getter(type metadata accessor for AspireApiPIRShardConfigs, a1);
}

uint64_t AspireApiPIRShardConfigs.unknownFields.setter(uint64_t a1)
{
  return AspireApiKeyStatus.unknownFields.setter(a1, type metadata accessor for AspireApiPIRShardConfigs);
}

uint64_t (*AspireApiPIRShardConfigs.unknownFields.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t static AspireApiPIRShardConfigs.OneOf_ShardConfigs.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AspireApiPIRFixedShardConfig(0);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireApiPIRShardConfigs.OneOf_ShardConfigs, AspireApiPIRShardConfigs.OneOf_ShardConfigs));
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = &v9[*(int *)(v10 + 56)];
  outlined init with copy of AspireHeEvaluationKeyConfig(a1, (uint64_t)v9, type metadata accessor for AspireApiPIRShardConfigs.OneOf_ShardConfigs);
  outlined init with copy of AspireHeEvaluationKeyConfig(a2, (uint64_t)v11, type metadata accessor for AspireApiPIRShardConfigs.OneOf_ShardConfigs);
  outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v9, (uint64_t)v6, type metadata accessor for AspireApiPIRFixedShardConfig);
  LOBYTE(a2) = specialized static AspireApiPIRFixedShardConfig.== infix(_:_:)(v6, v11);
  _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v11, type metadata accessor for AspireApiPIRFixedShardConfig);
  _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v6, type metadata accessor for AspireApiPIRFixedShardConfig);
  return a2 & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AspireApiPIRShardConfigs.OneOf_ShardConfigs(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AspireApiPIRFixedShardConfig(0);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireApiPIRShardConfigs.OneOf_ShardConfigs, AspireApiPIRShardConfigs.OneOf_ShardConfigs));
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = &v9[*(int *)(v10 + 56)];
  outlined init with copy of AspireHeEvaluationKeyConfig(a1, (uint64_t)v9, type metadata accessor for AspireApiPIRShardConfigs.OneOf_ShardConfigs);
  outlined init with copy of AspireHeEvaluationKeyConfig(a2, (uint64_t)v11, type metadata accessor for AspireApiPIRShardConfigs.OneOf_ShardConfigs);
  outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v9, (uint64_t)v6, type metadata accessor for AspireApiPIRFixedShardConfig);
  LOBYTE(a2) = specialized static AspireApiPIRFixedShardConfig.== infix(_:_:)(v6, v11);
  _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v11, type metadata accessor for AspireApiPIRFixedShardConfig);
  _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v6, type metadata accessor for AspireApiPIRFixedShardConfig);
  return a2 & 1;
}

uint64_t key path setter for AspireApiPIRFixedShardConfig.shardConfig : AspireApiPIRFixedShardConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AspireApiPIRShardConfig(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AspireHeEvaluationKeyConfig(a1, (uint64_t)v7, type metadata accessor for AspireApiPIRShardConfig);
  uint64_t v8 = a2 + *(int *)(type metadata accessor for AspireApiPIRFixedShardConfig(0) + 24);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v8, &demangling cache variable for type metadata for AspireApiPIRShardConfig?);
  outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v7, v8, type metadata accessor for AspireApiPIRShardConfig);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

uint64_t AspireApiPIRFixedShardConfig.shardConfig.setter(uint64_t a1)
{
  return AspireApiEvaluationKey.evaluationKey.setter(a1, type metadata accessor for AspireApiPIRFixedShardConfig, &demangling cache variable for type metadata for AspireApiPIRShardConfig?, type metadata accessor for AspireApiPIRShardConfig, type metadata accessor for AspireApiPIRShardConfig);
}

uint64_t AspireApiEvaluationKey.evaluationKey.setter(uint64_t a1, uint64_t (*a2)(void), uint64_t *a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t v10 = v5 + *(int *)(a2(0) + 24);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v10, a3);
  outlined init with take of AspireApiEvaluationKeyMetadata(a1, v10, a4);
  uint64_t v11 = a5(0);
  uint64_t v12 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
  return v12(v10, 0, 1, v11);
}

void (*AspireApiPIRFixedShardConfig.shardConfig.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiPIRShardConfig?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for AspireApiPIRShardConfig(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for AspireApiPIRFixedShardConfig(0) + 24);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for AspireApiPIRShardConfig?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    *uint64_t v10 = 0;
    v10[1] = 0;
    void v10[2] = MEMORY[0x263F8EE78];
    UnknownStorage.init()();
    uint64_t v12 = (void *)((char *)v10 + v6[8]);
    void *v12 = 0;
    v12[1] = 0;
    *((unsigned char *)v10 + v6[9]) = 2;
    uint64_t v13 = (char *)v10 + v6[10];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireApiPIRShardConfig?);
  }
  else
  {
    outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v5, (uint64_t)v10, type metadata accessor for AspireApiPIRShardConfig);
  }
  return AspireApiPIRFixedShardConfig.shardConfig.modify;
}

void AspireApiPIRFixedShardConfig.shardConfig.modify(uint64_t a1, char a2)
{
}

BOOL AspireApiPIRFixedShardConfig.hasShardConfig.getter()
{
  return AspireApiKeyStatus.hasKeyConfig.getter(&demangling cache variable for type metadata for AspireApiPIRShardConfig?, (uint64_t (*)(void, double))type metadata accessor for AspireApiPIRFixedShardConfig, type metadata accessor for AspireApiPIRShardConfig);
}

Swift::Void __swiftcall AspireApiPIRFixedShardConfig.clearShardConfig()()
{
}

uint64_t AspireApiPIRFixedShardConfig.shardCount.getter()
{
  return *v0;
}

uint64_t AspireApiPIRFixedShardConfig.shardCount.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*AspireApiPIRFixedShardConfig.shardCount.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireApiPIRFixedShardConfig.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AspireApiKeyStatus.unknownFields.getter(type metadata accessor for AspireApiPIRFixedShardConfig, a1);
}

uint64_t AspireApiPIRFixedShardConfig.unknownFields.setter(uint64_t a1)
{
  return AspireApiKeyStatus.unknownFields.setter(a1, type metadata accessor for AspireApiPIRFixedShardConfig);
}

uint64_t (*AspireApiPIRFixedShardConfig.unknownFields.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireApiPIRRequest.shardIndex.getter()
{
  return *v0;
}

uint64_t AspireApiPIRRequest.shardIndex.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*AspireApiPIRRequest.shardIndex.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t key path getter for AspireApiPIRRequest.query : AspireApiPIRRequest@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for AspireApiPIRRequest(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v7 + 28), (uint64_t)v6, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  uint64_t v8 = type metadata accessor for AspirePirEncryptedIndices(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v6, 1, v8) != 1) {
    return outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v6, (uint64_t)a2, type metadata accessor for AspirePirEncryptedIndices);
  }
  *a2 = MEMORY[0x263F8EE78];
  a2[1] = 0;
  UnknownStorage.init()();
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
}

uint64_t key path setter for AspireApiPIRRequest.query : AspireApiPIRRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AspirePirEncryptedIndices(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AspireHeEvaluationKeyConfig(a1, (uint64_t)v7, type metadata accessor for AspirePirEncryptedIndices);
  uint64_t v8 = a2 + *(int *)(type metadata accessor for AspireApiPIRRequest(0) + 28);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v8, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v7, v8, type metadata accessor for AspirePirEncryptedIndices);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

void (*AspireApiPIRRequest.query.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for AspirePirEncryptedIndices(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for AspireApiPIRRequest(0) + 28);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    *uint64_t v10 = MEMORY[0x263F8EE78];
    v10[1] = 0;
    UnknownStorage.init()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  }
  else
  {
    outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v5, (uint64_t)v10, type metadata accessor for AspirePirEncryptedIndices);
  }
  return AspireApiPIRRequest.query.modify;
}

void AspireApiPIRRequest.query.modify(uint64_t a1, char a2)
{
}

BOOL AspireApiPIRRequest.hasQuery.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for AspireApiPIRRequest(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v0 + *(int *)(v4 + 28), (uint64_t)v3, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  uint64_t v5 = type metadata accessor for AspirePirEncryptedIndices(0);
  BOOL v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v3, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  return v6;
}

Swift::Void __swiftcall AspireApiPIRRequest.clearQuery()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for AspireApiPIRRequest(0) + 28);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v1, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  uint64_t v2 = type metadata accessor for AspirePirEncryptedIndices(0);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);
  v3(v1, 1, 1, v2);
}

void (*AspireApiPIRRequest.evaluationKeyMetadata.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for AspireApiPIRRequest(0) + 32);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    *uint64_t v10 = 0;
    v10[1] = 0;
    void v10[2] = 0xC000000000000000;
    UnknownStorage.init()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  }
  else
  {
    outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v5, (uint64_t)v10, type metadata accessor for AspireApiEvaluationKeyMetadata);
  }
  return AspireApiEvaluationKey.metadata.modify;
}

BOOL AspireApiPIRRequest.hasEvaluationKeyMetadata.getter()
{
  return AspireApiPIRRequest.hasEvaluationKeyMetadata.getter((uint64_t (*)(void, double))type metadata accessor for AspireApiPIRRequest);
}

Swift::Void __swiftcall AspireApiPIRRequest.clearEvaluationKeyMetadata()()
{
}

uint64_t AspireApiPIRRequest.configID.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  outlined copy of Data._Representation(v1, *(void *)(v0 + 16));
  return v1;
}

uint64_t AspireApiEvaluationKeyMetadata.identifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = outlined consume of Data._Representation(*(void *)(v2 + 8), *(void *)(v2 + 16));
  *(void *)(v2 + 8) = a1;
  *(void *)(v2 + 16) = a2;
  return result;
}

uint64_t (*AspireApiPIRRequest.configID.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireApiPIRRequest.shardID.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for AspireApiPIRRequest(0) + 36));
  if (v1[1]) {
    uint64_t v2 = *v1;
  }
  else {
    uint64_t v2 = 0;
  }
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t key path getter for AspireApiPIRRequest.shardID : AspireApiPIRRequest@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (uint64_t *)(a1 + *(int *)(type metadata accessor for AspireApiPIRRequest(0) + 36));
  unint64_t v4 = v3[1];
  if (v4)
  {
    uint64_t v5 = *v3;
    unint64_t v6 = v4;
  }
  else
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0xE000000000000000;
  }
  *a2 = v5;
  a2[1] = v6;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for AspireApiPIRRequest.shardID : AspireApiPIRRequest(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  unint64_t v4 = (void *)(a2 + *(int *)(type metadata accessor for AspireApiPIRRequest(0) + 36));
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *unint64_t v4 = v3;
  v4[1] = v2;
  return result;
}

uint64_t (*AspireApiPIRRequest.shardID.modify(uint64_t a1))()
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for AspireApiPIRRequest(0) + 36);
  *(_DWORD *)(a1 + 24) = v3;
  unint64_t v4 = (uint64_t *)(v1 + v3);
  unint64_t v5 = v4[1];
  if (v5)
  {
    uint64_t v6 = *v4;
    unint64_t v7 = v5;
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0xE000000000000000;
  }
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return AspireApiPIRShardConfig.shardID.modify;
}

uint64_t AspireApiPIRShardConfig.shardID.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = (void *)(a1[2] + *((int *)a1 + 6));
  uint64_t v4 = *a1;
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *uint64_t v3 = v4;
    v3[1] = v2;
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v3 = v4;
    v3[1] = v2;
  }
  return result;
}

BOOL AspireApiPIRRequest.hasShardID.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for AspireApiPIRRequest(0) + 36) + 8) != 0;
}

Swift::Void __swiftcall AspireApiPIRRequest.clearShardID()()
{
  uint64_t v1 = (void *)(v0 + *(int *)(type metadata accessor for AspireApiPIRRequest(0) + 36));
  swift_bridgeObjectRelease();
  *uint64_t v1 = 0;
  v1[1] = 0;
}

uint64_t AspireApiPIRRequest.evaluationKey.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKey?);
  MEMORY[0x270FA5388](v3 - 8);
  unint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for AspireApiPIRRequest(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + *(int *)(v6 + 40), (uint64_t)v5, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
  uint64_t v7 = type metadata accessor for AspireApiEvaluationKey(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v5, a1, type metadata accessor for AspireApiEvaluationKey);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + *(int *)(v7 + 20);
  uint64_t v9 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  uint64_t v10 = a1 + *(int *)(v7 + 24);
  uint64_t v11 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
}

uint64_t key path getter for AspireApiPIRRequest.evaluationKey : AspireApiPIRRequest@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKey?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for AspireApiPIRRequest(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v7 + 40), (uint64_t)v6, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
  uint64_t v8 = type metadata accessor for AspireApiEvaluationKey(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v6, 1, v8) != 1) {
    return outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v6, a2, type metadata accessor for AspireApiEvaluationKey);
  }
  UnknownStorage.init()();
  uint64_t v9 = a2 + *(int *)(v8 + 20);
  uint64_t v10 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  uint64_t v11 = a2 + *(int *)(v8 + 24);
  uint64_t v12 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
}

uint64_t key path setter for AspireApiPIRRequest.evaluationKey : AspireApiPIRRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AspireApiEvaluationKey(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AspireHeEvaluationKeyConfig(a1, (uint64_t)v7, type metadata accessor for AspireApiEvaluationKey);
  uint64_t v8 = a2 + *(int *)(type metadata accessor for AspireApiPIRRequest(0) + 40);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v8, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
  outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v7, v8, type metadata accessor for AspireApiEvaluationKey);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

void (*AspireApiPIRRequest.evaluationKey.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKey?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for AspireApiEvaluationKey(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for AspireApiPIRRequest(0) + 40);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[*(int *)(v6 + 20)];
    uint64_t v13 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
    uint64_t v14 = &v10[*(int *)(v6 + 24)];
    uint64_t v15 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 1, 1, v15);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
  }
  else
  {
    outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v5, (uint64_t)v10, type metadata accessor for AspireApiEvaluationKey);
  }
  return AspireApiPIRRequest.evaluationKey.modify;
}

void AspireApiPIRRequest.evaluationKey.modify(uint64_t a1, char a2)
{
}

BOOL AspireApiPIRRequest.hasEvaluationKey.getter()
{
  return AspireApiPIRRequest.hasEvaluationKey.getter(&demangling cache variable for type metadata for AspireApiEvaluationKey?, (uint64_t (*)(void, double))type metadata accessor for AspireApiPIRRequest, type metadata accessor for AspireApiEvaluationKey);
}

Swift::Void __swiftcall AspireApiPIRRequest.clearEvaluationKey()()
{
}

uint64_t AspireApiPIRRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AspireApiEvaluationKeyMetadata.unknownFields.getter(type metadata accessor for AspireApiPIRRequest, a1);
}

uint64_t AspireApiPIRRequest.unknownFields.setter(uint64_t a1)
{
  return AspireApiEvaluationKeyMetadata.unknownFields.setter(a1, type metadata accessor for AspireApiPIRRequest);
}

uint64_t (*AspireApiPIRRequest.unknownFields.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t (*AspireApiPIRResponse.replies.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireApiPIRResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AspireApiKeyStatus.unknownFields.getter(type metadata accessor for AspireApiPIRResponse, a1);
}

uint64_t AspireApiPIRResponse.unknownFields.setter(uint64_t a1)
{
  return AspireApiKeyStatus.unknownFields.setter(a1, type metadata accessor for AspireApiPIRResponse);
}

uint64_t (*AspireApiPIRResponse.unknownFields.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t key path setter for AspireApiPECConfig.encryptionParameters : AspireApiPECConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AspireHeEncryptionParameters(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AspireHeEvaluationKeyConfig(a1, (uint64_t)v7, type metadata accessor for AspireHeEncryptionParameters);
  uint64_t v8 = a2 + *(int *)(type metadata accessor for AspireApiPECConfig(0) + 40);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v8, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v7, v8, type metadata accessor for AspireHeEncryptionParameters);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

uint64_t AspireApiPECConfig.encryptionParameters.setter(uint64_t a1)
{
  return AspireApiPIRRequest.evaluationKey.setter(a1, type metadata accessor for AspireApiPECConfig, &demangling cache variable for type metadata for AspireHeEncryptionParameters?, type metadata accessor for AspireHeEncryptionParameters, type metadata accessor for AspireHeEncryptionParameters);
}

uint64_t AspireApiPIRRequest.evaluationKey.setter(uint64_t a1, uint64_t (*a2)(void), uint64_t *a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t v10 = v5 + *(int *)(a2(0) + 40);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v10, a3);
  outlined init with take of AspireApiEvaluationKeyMetadata(a1, v10, a4);
  uint64_t v11 = a5(0);
  uint64_t v12 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
  return v12(v10, 0, 1, v11);
}

void (*AspireApiPECConfig.encryptionParameters.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for AspireHeEncryptionParameters(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for AspireApiPECConfig(0) + 40);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    *uint64_t v10 = 0;
    v10[1] = 0;
    void v10[2] = MEMORY[0x263F8EE78];
    v10[3] = 0;
    *((unsigned char *)v10 + 32) = 1;
    v10[5] = 0;
    *((unsigned char *)v10 + 48) = 1;
    v10[7] = 0;
    *((unsigned char *)v10 + 64) = 1;
    UnknownStorage.init()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  }
  else
  {
    outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v5, (uint64_t)v10, type metadata accessor for AspireHeEncryptionParameters);
  }
  return AspireApiPECConfig.encryptionParameters.modify;
}

void AspireApiPECConfig.encryptionParameters.modify(uint64_t a1, char a2)
{
}

BOOL AspireApiPECConfig.hasEncryptionParameters.getter()
{
  return AspireApiPIRRequest.hasEvaluationKey.getter(&demangling cache variable for type metadata for AspireHeEncryptionParameters?, (uint64_t (*)(void, double))type metadata accessor for AspireApiPECConfig, type metadata accessor for AspireHeEncryptionParameters);
}

BOOL AspireApiPIRRequest.hasEvaluationKey.getter(uint64_t *a1, uint64_t (*a2)(void, double), uint64_t (*a3)(void))
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(a1);
  double v8 = MEMORY[0x270FA5388](v7 - 8);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = a2(0, v8);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v3 + *(int *)(v11 + 40), (uint64_t)v10, a1);
  uint64_t v12 = a3(0);
  BOOL v13 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48))(v10, 1, v12) != 1;
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v10, a1);
  return v13;
}

Swift::Void __swiftcall AspireApiPECConfig.clearEncryptionParameters()()
{
}

uint64_t AspireApiPIRRequest.clearEvaluationKey()(uint64_t (*a1)(void), uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t v6 = v3 + *(int *)(a1(0) + 40);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v6, a2);
  uint64_t v7 = a3(0);
  double v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
  return v8(v6, 1, 1, v7);
}

uint64_t (*AspireApiPECConfig.scalingFactor.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t key path getter for AspireApiPECConfig.plaintextPacking : AspireApiPECConfig@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for AspireApiPECConfig(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v7 + 44), (uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  uint64_t v8 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v6, 1, v8) != 1) {
    return outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v6, a2, type metadata accessor for AspireSimilarityPlaintextPacking);
  }
  uint64_t v9 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(a2, 1, 1, v9);
  UnknownStorage.init()();
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
}

uint64_t key path setter for AspireApiPECConfig.plaintextPacking : AspireApiPECConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AspireHeEvaluationKeyConfig(a1, (uint64_t)v7, type metadata accessor for AspireSimilarityPlaintextPacking);
  uint64_t v8 = a2 + *(int *)(type metadata accessor for AspireApiPECConfig(0) + 44);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v8, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v7, v8, type metadata accessor for AspireSimilarityPlaintextPacking);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

uint64_t AspireApiPECConfig.plaintextPacking.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AspireApiPECConfig(0) + 44);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v3, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  outlined init with take of AspireApiEvaluationKeyMetadata(a1, v3, type metadata accessor for AspireSimilarityPlaintextPacking);
  uint64_t v4 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(v3, 0, 1, v4);
}

void (*AspireApiPECConfig.plaintextPacking.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for AspireApiPECConfig(0) + 44);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + v11, (uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    uint64_t v12 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v10, 1, 1, v12);
    UnknownStorage.init()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  }
  else
  {
    outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v5, (uint64_t)v10, type metadata accessor for AspireSimilarityPlaintextPacking);
  }
  return AspireApiPECConfig.plaintextPacking.modify;
}

void AspireApiPECConfig.plaintextPacking.modify(uint64_t a1, char a2)
{
}

BOOL AspireApiPECConfig.hasPlaintextPacking.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for AspireApiPECConfig(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v0 + *(int *)(v4 + 44), (uint64_t)v3, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  uint64_t v5 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  BOOL v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v3, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  return v6;
}

Swift::Void __swiftcall AspireApiPECConfig.clearPlaintextPacking()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for AspireApiPECConfig(0) + 44);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v1, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  uint64_t v2 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);
  v3(v1, 1, 1, v2);
}

uint64_t AspireApiPECConfig.embeddingDimension.getter()
{
  return *(unsigned int *)(v0 + 8);
}

uint64_t AspireApiPECConfig.embeddingDimension.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*AspireApiPECConfig.embeddingDimension.modify())()
{
  return Repeated.subscript.readspecialized ;
}

void AspireApiPECConfig.similarityMetric.getter(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 24);
  *(void *)a1 = *(void *)(v1 + 16);
  *(unsigned char *)(a1 + 8) = v2;
}

uint64_t AspireApiPECConfig.similarityMetric.setter(uint64_t result)
{
  char v2 = *(unsigned char *)(result + 8);
  *(void *)(v1 + 16) = *(void *)result;
  *(unsigned char *)(v1 + 24) = v2;
  return result;
}

uint64_t (*AspireApiPECConfig.similarityMetric.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireApiPECConfig.evaluationKeyConfigHash.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = outlined consume of Data._Representation(*(void *)(v2 + 32), *(void *)(v2 + 40));
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = a2;
  return result;
}

uint64_t (*AspireApiPECConfig.evaluationKeyConfigHash.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireApiPECConfig.extraPlaintextModuli.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AspireApiPECConfig.extraPlaintextModuli.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 48) = a1;
  return result;
}

uint64_t (*AspireApiPECConfig.extraPlaintextModuli.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireApiPECConfig.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AspireApiPECConfig(0) + 36);
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t AspireApiPECConfig.unknownFields.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AspireApiPECConfig(0) + 36);
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);
  return v5(v3, a1, v4);
}

uint64_t (*AspireApiPECConfig.unknownFields.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t (*AspireApiPECRequest.shardIndices.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireApiPECRequest.query.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AspireApiPECRequest.query.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 8) = a1;
  return result;
}

uint64_t (*AspireApiPECRequest.query.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t key path getter for AspireApiPIRRequest.evaluationKeyMetadata : AspireApiPIRRequest@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void, double)@<X3>, void *a3@<X8>)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  double v7 = MEMORY[0x270FA5388](v6 - 8);
  size_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = a2(0, v7);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v10 + 32), (uint64_t)v9, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  uint64_t v11 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v9, 1, v11) != 1) {
    return outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v9, (uint64_t)a3, type metadata accessor for AspireApiEvaluationKeyMetadata);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0xC000000000000000;
  UnknownStorage.init()();
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v9, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
}

uint64_t key path setter for AspireApiPIRRequest.evaluationKeyMetadata : AspireApiPIRRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v8 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AspireHeEvaluationKeyConfig(a1, (uint64_t)v11, type metadata accessor for AspireApiEvaluationKeyMetadata);
  uint64_t v12 = a2 + *(int *)(a5(0) + 32);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v12, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v11, v12, type metadata accessor for AspireApiEvaluationKeyMetadata);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56))(v12, 0, 1, v8);
}

void (*AspireApiPECRequest.evaluationKeyMetadata.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for AspireApiPECRequest(0) + 32);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    *uint64_t v10 = 0;
    v10[1] = 0;
    void v10[2] = 0xC000000000000000;
    UnknownStorage.init()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  }
  else
  {
    outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v5, (uint64_t)v10, type metadata accessor for AspireApiEvaluationKeyMetadata);
  }
  return AspireApiEvaluationKey.metadata.modify;
}

BOOL AspireApiPECRequest.hasEvaluationKeyMetadata.getter()
{
  return AspireApiPIRRequest.hasEvaluationKeyMetadata.getter((uint64_t (*)(void, double))type metadata accessor for AspireApiPECRequest);
}

BOOL AspireApiPIRRequest.hasEvaluationKeyMetadata.getter(uint64_t (*a1)(void, double))
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  double v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = a1(0, v4);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + *(int *)(v7 + 32), (uint64_t)v6, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  uint64_t v8 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  BOOL v9 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v6, 1, v8) != 1;
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  return v9;
}

Swift::Void __swiftcall AspireApiPECRequest.clearEvaluationKeyMetadata()()
{
}

uint64_t AspireApiPIRRequest.clearEvaluationKeyMetadata()(uint64_t (*a1)(void))
{
  uint64_t v2 = v1 + *(int *)(a1(0) + 32);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v2, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  uint64_t v3 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  double v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);
  return v4(v2, 1, 1, v3);
}

uint64_t AspireApiPECRequest.configID.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  outlined copy of Data._Representation(v1, *(void *)(v0 + 24));
  return v1;
}

uint64_t (*AspireApiPECRequest.configID.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireApiPECRequest.evaluationKey.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKey?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for AspireApiPECRequest(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + *(int *)(v6 + 36), (uint64_t)v5, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
  uint64_t v7 = type metadata accessor for AspireApiEvaluationKey(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v5, a1, type metadata accessor for AspireApiEvaluationKey);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + *(int *)(v7 + 20);
  uint64_t v9 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  uint64_t v10 = a1 + *(int *)(v7 + 24);
  uint64_t v11 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
}

uint64_t key path getter for AspireApiPECRequest.evaluationKey : AspireApiPECRequest@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKey?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for AspireApiPECRequest(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v7 + 36), (uint64_t)v6, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
  uint64_t v8 = type metadata accessor for AspireApiEvaluationKey(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v6, 1, v8) != 1) {
    return outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v6, a2, type metadata accessor for AspireApiEvaluationKey);
  }
  UnknownStorage.init()();
  uint64_t v9 = a2 + *(int *)(v8 + 20);
  uint64_t v10 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  uint64_t v11 = a2 + *(int *)(v8 + 24);
  uint64_t v12 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
}

uint64_t key path setter for AspireApiPECRequest.evaluationKey : AspireApiPECRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AspireApiEvaluationKey(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AspireHeEvaluationKeyConfig(a1, (uint64_t)v7, type metadata accessor for AspireApiEvaluationKey);
  uint64_t v8 = a2 + *(int *)(type metadata accessor for AspireApiPECRequest(0) + 36);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v8, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
  outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v7, v8, type metadata accessor for AspireApiEvaluationKey);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

void (*AspireApiPECRequest.evaluationKey.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKey?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for AspireApiEvaluationKey(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for AspireApiPECRequest(0) + 36);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[*(int *)(v6 + 20)];
    uint64_t v13 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
    uint64_t v14 = &v10[*(int *)(v6 + 24)];
    uint64_t v15 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 1, 1, v15);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
  }
  else
  {
    outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v5, (uint64_t)v10, type metadata accessor for AspireApiEvaluationKey);
  }
  return AspireApiPIRRequest.evaluationKey.modify;
}

void AspireApiKeyStatus.keyConfig.modify(uint64_t a1, char a2, uint64_t *a3, uint64_t (*a4)(void), uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  uint64_t v8 = *(void **)a1;
  uint64_t v9 = *(int *)(*(void *)a1 + 48);
  uint64_t v10 = *(void **)(*(void *)a1 + 32);
  uint64_t v11 = *(void **)(*(void *)a1 + 40);
  uint64_t v12 = *(void *)(*(void *)a1 + 16);
  uint64_t v13 = *(void *)(*(void *)a1 + 24);
  uint64_t v14 = *(void **)(*(void *)a1 + 8);
  uint64_t v15 = **(void **)a1 + v9;
  if (a2)
  {
    outlined init with copy of AspireHeEvaluationKeyConfig(*(void *)(*(void *)a1 + 40), (uint64_t)v10, a5);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v15, a3);
    outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v10, v15, a4);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(v15, 0, 1, v12);
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v11, a6);
  }
  else
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(**(void **)a1 + v9, a3);
    outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v11, v15, a4);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(v15, 0, 1, v12);
  }
  free(v11);
  free(v10);
  free(v14);
  free(v8);
}

BOOL AspireApiPECRequest.hasEvaluationKey.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKey?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for AspireApiPECRequest(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v0 + *(int *)(v4 + 36), (uint64_t)v3, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
  uint64_t v5 = type metadata accessor for AspireApiEvaluationKey(0);
  BOOL v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v3, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
  return v6;
}

Swift::Void __swiftcall AspireApiPECRequest.clearEvaluationKey()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for AspireApiPECRequest(0) + 36);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v1, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
  uint64_t v2 = type metadata accessor for AspireApiEvaluationKey(0);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);
  v3(v1, 1, 1, v2);
}

uint64_t AspireApiPECRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AspireApiConfig.unknownFields.getter(type metadata accessor for AspireApiPECRequest, a1);
}

uint64_t AspireApiPECRequest.unknownFields.setter(uint64_t a1)
{
  return AspireApiConfig.unknownFields.setter(a1, type metadata accessor for AspireApiPECRequest);
}

uint64_t (*AspireApiPECRequest.unknownFields.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t (*AspireApiPECShardResponse.reply.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t (*AspireApiPECShardResponse.entryIds.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t (*AspireApiPECShardResponse.entryMetadatas.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireApiPECShardResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AspireApiConfig.unknownFields.getter(type metadata accessor for AspireApiPECShardResponse, a1);
}

uint64_t AspireApiPECShardResponse.unknownFields.setter(uint64_t a1)
{
  return AspireApiConfig.unknownFields.setter(a1, type metadata accessor for AspireApiPECShardResponse);
}

uint64_t (*AspireApiPECShardResponse.unknownFields.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireApiPECShardResponse.init()@<X0>(void *a1@<X8>)
{
  uint64_t v2 = MEMORY[0x263F8EE78];
  *a1 = MEMORY[0x263F8EE78];
  a1[1] = v2;
  a1[2] = v2;
  type metadata accessor for AspireApiPECShardResponse(0);
  return UnknownStorage.init()();
}

uint64_t (*AspireApiPECResponse.shardResponses.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireApiPECResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AspireApiKeyStatus.unknownFields.getter(type metadata accessor for AspireApiPECResponse, a1);
}

uint64_t AspireApiPECResponse.unknownFields.setter(uint64_t a1)
{
  return AspireApiKeyStatus.unknownFields.setter(a1, type metadata accessor for AspireApiPECResponse);
}

uint64_t (*AspireApiPECResponse.unknownFields.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireApiOPRFRequest.queryElement.getter()
{
  uint64_t v1 = *(void *)v0;
  outlined copy of Data._Representation(*(void *)v0, *(void *)(v0 + 8));
  return v1;
}

uint64_t AspireApiOPRFRequest.queryElement.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = outlined consume of Data._Representation(*(void *)v2, *(void *)(v2 + 8));
  *(void *)uint64_t v2 = a1;
  *(void *)(v2 + 8) = a2;
  return result;
}

uint64_t (*AspireApiOPRFRequest.queryElement.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t (*AspireApiOPRFRequest.configID.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireApiOPRFRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AspireApiEvaluationKeyMetadata.unknownFields.getter(type metadata accessor for AspireApiOPRFRequest, a1);
}

uint64_t AspireApiOPRFRequest.unknownFields.setter(uint64_t a1)
{
  return AspireApiEvaluationKeyMetadata.unknownFields.setter(a1, type metadata accessor for AspireApiOPRFRequest);
}

uint64_t (*AspireApiOPRFRequest.unknownFields.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t (*AspireApiOPRFResponse.evaluatedElement.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireApiPECRequest.configID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = outlined consume of Data._Representation(*(void *)(v2 + 16), *(void *)(v2 + 24));
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*AspireApiOPRFResponse.proof.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireApiOPRFResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AspireApiEvaluationKeyMetadata.unknownFields.getter(type metadata accessor for AspireApiOPRFResponse, a1);
}

uint64_t AspireApiOPRFResponse.unknownFields.setter(uint64_t a1)
{
  return AspireApiEvaluationKeyMetadata.unknownFields.setter(a1, type metadata accessor for AspireApiOPRFResponse);
}

uint64_t (*AspireApiOPRFResponse.unknownFields.modify())()
{
  return Repeated.subscript.readspecialized ;
}

unint64_t static AspireApiEmpty.protoMessageName.getter()
{
  return 0xD000000000000010;
}

uint64_t static AspireApiEmpty._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireApiEmpty._protobuf_nameMap, a1);
}

uint64_t AspireApiEmpty.decodeMessage<A>(decoder:)()
{
  do
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  while (!v0 && (v2 & 1) == 0);
  return result;
}

uint64_t AspireApiEmpty.traverse<A>(visitor:)()
{
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t static AspireApiEmpty.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v9 = MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v15 - v10;
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16);
  v12((char *)&v15 - v10, a1, v4, v9);
  ((void (*)(char *, uint64_t, uint64_t))v12)(v7, a2, v4);
  _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
  LOBYTE(a2) = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v13 = *(void (**)(char *, uint64_t))(v5 + 8);
  v13(v7, v4);
  v13(v11, v4);
  return a2 & 1;
}

Swift::Int AspireApiEmpty.hashValue.getter()
{
  return AspireApiEmpty.hashValue.getter((void (*)(void))type metadata accessor for AspireApiEmpty, &lazy protocol witness table cache variable for type AspireApiEmpty and conformance AspireApiEmpty, (void (*)(uint64_t))type metadata accessor for AspireApiEmpty);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspireApiEmpty()
{
  return 0xD000000000000010;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspireApiEmpty()
{
  return AspireApiEmpty.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspireApiEmpty()
{
  return AspireApiEmpty.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspireApiEmpty(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiEmpty and conformance AspireApiEmpty, (void (*)(uint64_t))type metadata accessor for AspireApiEmpty);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspireApiEmpty@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireApiEmpty._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspireApiEmpty(uint64_t a1)
{
  uint64_t v2 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiEmpty and conformance AspireApiEmpty, (void (*)(uint64_t))type metadata accessor for AspireApiEmpty);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspireApiEmpty(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiEmpty and conformance AspireApiEmpty, (void (*)(uint64_t))type metadata accessor for AspireApiEmpty);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AspireApiEmpty(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v9 = MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v15 - v10;
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16);
  v12((char *)&v15 - v10, a1, v4, v9);
  ((void (*)(char *, uint64_t, uint64_t))v12)(v7, a2, v4);
  _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
  LOBYTE(a2) = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v13 = *(void (**)(char *, uint64_t))(v5 + 8);
  v13(v7, v4);
  v13(v11, v4);
  return a2 & 1;
}

unint64_t static AspireApiEvaluationKeyMetadata.protoMessageName.getter()
{
  return 0xD000000000000020;
}

uint64_t static AspireApiEvaluationKeyMetadata._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireApiEvaluationKeyMetadata._protobuf_nameMap, a1);
}

uint64_t AspireApiEvaluationKeyMetadata.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        dispatch thunk of Decoder.decodeSingularBytesField(value:)();
      }
      else if (result == 1)
      {
        dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t AspireApiEvaluationKeyMetadata.traverse<A>(visitor:)()
{
  if (!*v0 || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v1))
  {
    uint64_t v3 = v0[1];
    unint64_t v4 = v0[2];
    switch(v4 >> 62)
    {
      case 1uLL:
        if ((int)v3 != v3 >> 32) {
          goto LABEL_9;
        }
        goto LABEL_10;
      case 2uLL:
        if (*(void *)(v3 + 16) != *(void *)(v3 + 24)) {
          goto LABEL_9;
        }
        goto LABEL_10;
      case 3uLL:
        goto LABEL_10;
      default:
        if ((v4 & 0xFF000000000000) == 0) {
          goto LABEL_10;
        }
LABEL_9:
        uint64_t result = dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
        if (!v1)
        {
LABEL_10:
          type metadata accessor for AspireApiEvaluationKeyMetadata(0);
          uint64_t result = UnknownStorage.traverse<A>(visitor:)();
        }
        break;
    }
  }
  return result;
}

Swift::Int AspireApiEvaluationKeyMetadata.hashValue.getter()
{
  return AspireApiEmpty.hashValue.getter((void (*)(void))type metadata accessor for AspireApiEvaluationKeyMetadata, &lazy protocol witness table cache variable for type AspireApiEvaluationKeyMetadata and conformance AspireApiEvaluationKeyMetadata, (void (*)(uint64_t))type metadata accessor for AspireApiEvaluationKeyMetadata);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspireApiEvaluationKeyMetadata()
{
  return 0xD000000000000020;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspireApiEvaluationKeyMetadata()
{
  return AspireApiEvaluationKeyMetadata.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspireApiEvaluationKeyMetadata()
{
  return AspireApiEvaluationKeyMetadata.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspireApiEvaluationKeyMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiEvaluationKeyMetadata and conformance AspireApiEvaluationKeyMetadata, (void (*)(uint64_t))type metadata accessor for AspireApiEvaluationKeyMetadata);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspireApiEvaluationKeyMetadata@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireApiEvaluationKeyMetadata._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspireApiEvaluationKeyMetadata(uint64_t a1)
{
  uint64_t v2 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiEvaluationKeyMetadata and conformance AspireApiEvaluationKeyMetadata, (void (*)(uint64_t))type metadata accessor for AspireApiEvaluationKeyMetadata);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspireApiEvaluationKeyMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiEvaluationKeyMetadata and conformance AspireApiEvaluationKeyMetadata, (void (*)(uint64_t))type metadata accessor for AspireApiEvaluationKeyMetadata);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

unint64_t static AspireApiKeyStatus.protoMessageName.getter()
{
  return 0xD000000000000014;
}

uint64_t static AspireApiKeyStatus._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireApiKeyStatus._protobuf_nameMap, a1);
}

uint64_t AspireApiKeyStatus.decodeMessage<A>(decoder:)()
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0) {
      break;
    }
    if (result == 2)
    {
      closure #2 in AspireApiKeyStatus.decodeMessage<A>(decoder:)();
    }
    else if (result == 1)
    {
      dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
    }
  }
  return result;
}

uint64_t closure #2 in AspireApiKeyStatus.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t AspireApiKeyStatus.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*v3 || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v4))
  {
    uint64_t result = closure #1 in AspireApiKeyStatus.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3);
    if (!v4)
    {
      type metadata accessor for AspireApiKeyStatus(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t closure #1 in AspireApiKeyStatus.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for AspireApiKeyStatus(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v12 + 24), (uint64_t)v7, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v7, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  }
  outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v7, (uint64_t)v11, type metadata accessor for AspireHeEvaluationKeyConfig);
  _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireHeEvaluationKeyConfig and conformance AspireHeEvaluationKeyConfig, (void (*)(uint64_t))type metadata accessor for AspireHeEvaluationKeyConfig);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v11, type metadata accessor for AspireHeEvaluationKeyConfig);
}

Swift::Int AspireApiKeyStatus.hashValue.getter()
{
  return AspireApiEmpty.hashValue.getter((void (*)(void))type metadata accessor for AspireApiKeyStatus, &lazy protocol witness table cache variable for type AspireApiKeyStatus and conformance AspireApiKeyStatus, (void (*)(uint64_t))type metadata accessor for AspireApiKeyStatus);
}

uint64_t protocol witness for Message.init() in conformance AspireApiKeyStatus@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  UnknownStorage.init()();
  uint64_t v4 = (char *)a2 + *(int *)(a1 + 24);
  uint64_t v5 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  uint64_t v6 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
  return v6(v4, 1, 1, v5);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspireApiKeyStatus()
{
  return 0xD000000000000014;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspireApiKeyStatus()
{
  return AspireApiKeyStatus.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspireApiKeyStatus(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireApiKeyStatus.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspireApiKeyStatus(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiKeyStatus and conformance AspireApiKeyStatus, (void (*)(uint64_t))type metadata accessor for AspireApiKeyStatus);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspireApiKeyStatus@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireApiKeyStatus._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspireApiKeyStatus(uint64_t a1)
{
  uint64_t v2 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiKeyStatus and conformance AspireApiKeyStatus, (void (*)(uint64_t))type metadata accessor for AspireApiKeyStatus);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspireApiKeyStatus(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiKeyStatus and conformance AspireApiKeyStatus, (void (*)(uint64_t))type metadata accessor for AspireApiKeyStatus);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

unint64_t static AspireApiEvaluationKeys.protoMessageName.getter()
{
  return 0xD000000000000019;
}

uint64_t static AspireApiEvaluationKeys._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireApiEvaluationKeys._protobuf_nameMap, a1);
}

uint64_t AspireApiEvaluationKeys.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireApiEvaluationKeys.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(void))type metadata accessor for AspireApiEvaluationKey, &lazy protocol witness table cache variable for type AspireApiEvaluationKey and conformance AspireApiEvaluationKey, (void (*)(uint64_t))type metadata accessor for AspireApiEvaluationKey);
}

uint64_t AspireApiEvaluationKeys.traverse<A>(visitor:)()
{
  if (!*(void *)(*(void *)v0 + 16)
    || (type metadata accessor for AspireApiEvaluationKey(0),
        _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiEvaluationKey and conformance AspireApiEvaluationKey, (void (*)(uint64_t))type metadata accessor for AspireApiEvaluationKey), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
  {
    type metadata accessor for AspireApiEvaluationKeys(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t static AspireApiEvaluationKeys.== infix(_:_:)(char *a1, char *a2)
{
  return specialized static AspireApiEvaluationKeys.== infix(_:_:)(a1, a2, (uint64_t (*)(void, void, double))specialized static Array<A>.== infix(_:_:), type metadata accessor for AspireApiEvaluationKeys) & 1;
}

Swift::Int AspireApiEvaluationKeys.hashValue.getter()
{
  return AspireApiEmpty.hashValue.getter((void (*)(void))type metadata accessor for AspireApiEvaluationKeys, &lazy protocol witness table cache variable for type AspireApiEvaluationKeys and conformance AspireApiEvaluationKeys, (void (*)(uint64_t))type metadata accessor for AspireApiEvaluationKeys);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspireApiEvaluationKeys()
{
  return 0xD000000000000019;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspireApiEvaluationKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireApiEvaluationKeys.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspireApiEvaluationKeys()
{
  return AspireApiEvaluationKeys.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspireApiEvaluationKeys(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiEvaluationKeys and conformance AspireApiEvaluationKeys, (void (*)(uint64_t))type metadata accessor for AspireApiEvaluationKeys);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspireApiEvaluationKeys@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireApiEvaluationKeys._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspireApiEvaluationKeys(uint64_t a1)
{
  uint64_t v2 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiEvaluationKeys and conformance AspireApiEvaluationKeys, (void (*)(uint64_t))type metadata accessor for AspireApiEvaluationKeys);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspireApiEvaluationKeys(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiEvaluationKeys and conformance AspireApiEvaluationKeys, (void (*)(uint64_t))type metadata accessor for AspireApiEvaluationKeys);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AspireApiEvaluationKeys(char *a1, char *a2)
{
  return specialized static AspireApiEvaluationKeys.== infix(_:_:)(a1, a2, (uint64_t (*)(void, void, double))specialized static Array<A>.== infix(_:_:), type metadata accessor for AspireApiEvaluationKeys) & 1;
}

unint64_t static AspireApiEvaluationKey.protoMessageName.getter()
{
  return 0xD000000000000018;
}

uint64_t static AspireApiEvaluationKey._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireApiEvaluationKey._protobuf_nameMap, a1);
}

uint64_t AspireApiEvaluationKey.decodeMessage<A>(decoder:)()
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0) {
      break;
    }
    if (result == 2)
    {
      closure #2 in AspireApiEvaluationKey.decodeMessage<A>(decoder:)();
    }
    else if (result == 1)
    {
      closure #1 in AspireApiEvaluationKey.decodeMessage<A>(decoder:)();
    }
  }
  return result;
}

uint64_t closure #1 in AspireApiEvaluationKey.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t closure #2 in AspireApiEvaluationKey.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t AspireApiEvaluationKey.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = closure #1 in AspireApiEvaluationKey.traverse<A>(visitor:)(v3, a1, a2, a3);
  if (!v4)
  {
    closure #2 in AspireApiEvaluationKey.traverse<A>(visitor:)(v3, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in AspireApiEvaluationKey.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for AspireApiEvaluationKey(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v12 + 20), (uint64_t)v7, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v7, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  }
  outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v7, (uint64_t)v11, type metadata accessor for AspireApiEvaluationKeyMetadata);
  _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiEvaluationKeyMetadata and conformance AspireApiEvaluationKeyMetadata, (void (*)(uint64_t))type metadata accessor for AspireApiEvaluationKeyMetadata);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v11, type metadata accessor for AspireApiEvaluationKeyMetadata);
}

uint64_t closure #2 in AspireApiEvaluationKey.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for AspireApiEvaluationKey(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v12 + 24), (uint64_t)v7, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v7, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  }
  outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v7, (uint64_t)v11, type metadata accessor for AspireHeSerializedEvaluationKey);
  _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireHeSerializedEvaluationKey and conformance AspireHeSerializedEvaluationKey, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedEvaluationKey);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v11, type metadata accessor for AspireHeSerializedEvaluationKey);
}

Swift::Int AspireApiEvaluationKey.hashValue.getter()
{
  return AspireApiEmpty.hashValue.getter((void (*)(void))type metadata accessor for AspireApiEvaluationKey, &lazy protocol witness table cache variable for type AspireApiEvaluationKey and conformance AspireApiEvaluationKey, (void (*)(uint64_t))type metadata accessor for AspireApiEvaluationKey);
}

uint64_t protocol witness for Message.init() in conformance AspireApiEvaluationKey@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  uint64_t v4 = a2 + *(int *)(a1 + 20);
  uint64_t v5 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v6 = a2 + *(int *)(a1 + 24);
  uint64_t v7 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
  return v8(v6, 1, 1, v7);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspireApiEvaluationKey()
{
  return 0xD000000000000018;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspireApiEvaluationKey()
{
  return AspireApiEvaluationKey.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspireApiEvaluationKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireApiEvaluationKey.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspireApiEvaluationKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiEvaluationKey and conformance AspireApiEvaluationKey, (void (*)(uint64_t))type metadata accessor for AspireApiEvaluationKey);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspireApiEvaluationKey@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireApiEvaluationKey._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspireApiEvaluationKey(uint64_t a1)
{
  uint64_t v2 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiEvaluationKey and conformance AspireApiEvaluationKey, (void (*)(uint64_t))type metadata accessor for AspireApiEvaluationKey);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspireApiEvaluationKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiEvaluationKey and conformance AspireApiEvaluationKey, (void (*)(uint64_t))type metadata accessor for AspireApiEvaluationKey);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

unint64_t static AspireApiConfigRequest.protoMessageName.getter()
{
  return 0xD000000000000018;
}

uint64_t static AspireApiConfigRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireApiConfigRequest._protobuf_nameMap, a1);
}

uint64_t AspireApiConfigRequest.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        dispatch thunk of Decoder.decodeRepeatedBytesField(value:)();
      }
      else if (result == 1)
      {
        dispatch thunk of Decoder.decodeRepeatedStringField(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t AspireApiConfigRequest.traverse<A>(visitor:)()
{
  if (!*(void *)(*v0 + 16)
    || (uint64_t result = dispatch thunk of Visitor.visitRepeatedStringField(value:fieldNumber:)(), !v1))
  {
    if (!*(void *)(v0[1] + 16)
      || (uint64_t result = dispatch thunk of Visitor.visitRepeatedBytesField(value:fieldNumber:)(), !v1))
    {
      type metadata accessor for AspireApiConfigRequest(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t static AspireApiConfigRequest.== infix(_:_:)(char *a1, char *a2)
{
  return specialized static AspireApiConfigResponse.== infix(_:_:)(a1, a2, (uint64_t (*)(void, void, double))specialized static Array<A>.== infix(_:_:), specialized static Array<A>.== infix(_:_:), type metadata accessor for AspireApiConfigRequest) & 1;
}

Swift::Int AspireApiConfigRequest.hashValue.getter()
{
  return AspireApiEmpty.hashValue.getter((void (*)(void))type metadata accessor for AspireApiConfigRequest, &lazy protocol witness table cache variable for type AspireApiConfigRequest and conformance AspireApiConfigRequest, (void (*)(uint64_t))type metadata accessor for AspireApiConfigRequest);
}

uint64_t protocol witness for Message.init() in conformance AspireApiConfigRequest@<X0>(void *a1@<X8>)
{
  uint64_t v1 = MEMORY[0x263F8EE78];
  *a1 = MEMORY[0x263F8EE78];
  a1[1] = v1;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspireApiConfigRequest()
{
  return 0xD000000000000018;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspireApiConfigRequest()
{
  return AspireApiConfigRequest.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspireApiConfigRequest()
{
  return AspireApiConfigRequest.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspireApiConfigRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiConfigRequest and conformance AspireApiConfigRequest, (void (*)(uint64_t))type metadata accessor for AspireApiConfigRequest);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspireApiConfigRequest@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireApiConfigRequest._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspireApiConfigRequest(uint64_t a1)
{
  uint64_t v2 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiConfigRequest and conformance AspireApiConfigRequest, (void (*)(uint64_t))type metadata accessor for AspireApiConfigRequest);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspireApiConfigRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiConfigRequest and conformance AspireApiConfigRequest, (void (*)(uint64_t))type metadata accessor for AspireApiConfigRequest);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AspireApiConfigRequest(char *a1, char *a2)
{
  return specialized static AspireApiConfigResponse.== infix(_:_:)(a1, a2, (uint64_t (*)(void, void, double))specialized static Array<A>.== infix(_:_:), specialized static Array<A>.== infix(_:_:), type metadata accessor for AspireApiConfigRequest) & 1;
}

unint64_t static AspireApiConfig.protoMessageName.getter()
{
  return 0xD000000000000011;
}

uint64_t static AspireApiConfig._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireApiConfig._protobuf_nameMap, a1);
}

uint64_t AspireApiConfig.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v4 || (v10 & 1) != 0) {
      return result;
    }
    switch(result)
    {
      case 1:
        closure #1 in AspireApiConfig.decodeMessage<A>(decoder:)(v5, a1, a2, a3);
        break;
      case 2:
        closure #2 in AspireApiConfig.decodeMessage<A>(decoder:)(v5, a1, a2, a3);
        break;
      case 3:
        type metadata accessor for AspireApiConfig(0);
        dispatch thunk of Decoder.decodeSingularBytesField(value:)();
        break;
      case 4:
        type metadata accessor for AspireApiConfig(0);
        dispatch thunk of Decoder.decodeSingularBoolField(value:)();
        break;
      default:
        continue;
    }
  }
}

uint64_t closure #1 in AspireApiConfig.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v50 = a4;
  uint64_t v48 = a2;
  uint64_t v49 = a3;
  uint64_t v5 = type metadata accessor for AspireApiPIRConfig(0);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v42 = (uint64_t)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v45 = (char *)&v38 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for AspireApiConfig.OneOf_Config(0);
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v38 - v18;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiPIRConfig?);
  MEMORY[0x270FA5388](v20 - 8);
  uint64_t v43 = (uint64_t)&v38 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v23 = MEMORY[0x270FA5388](v22);
  uint64_t v25 = (char *)&v38 - v24;
  uint64_t v44 = v6;
  uint64_t v26 = *(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56);
  uint64_t v47 = v5;
  uint64_t v27 = v5;
  uint64_t v28 = v26;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t, double))v26)((char *)&v38 - v24, 1, 1, v27, v23);
  uint64_t v41 = a1;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v12, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
  uint64_t v40 = v14;
  int v29 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if (v29 == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v12, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
    uint64_t v30 = v13;
    uint64_t v31 = v47;
  }
  else
  {
    uint64_t v39 = v28;
    uint64_t v32 = (uint64_t)v45;
    outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v12, (uint64_t)v19, type metadata accessor for AspireApiConfig.OneOf_Config);
    outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v19, (uint64_t)v16, type metadata accessor for AspireApiConfig.OneOf_Config);
    uint64_t v30 = v13;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v16, type metadata accessor for AspireApiConfig.OneOf_Config);
      uint64_t v31 = v47;
    }
    else
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v25, &demangling cache variable for type metadata for AspireApiPIRConfig?);
      outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v16, v32, type metadata accessor for AspireApiPIRConfig);
      outlined init with take of AspireApiEvaluationKeyMetadata(v32, (uint64_t)v25, type metadata accessor for AspireApiPIRConfig);
      uint64_t v31 = v47;
      v39(v25, 0, 1, v47);
    }
  }
  uint64_t v33 = v46;
  _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiPIRConfig and conformance AspireApiPIRConfig, (void (*)(uint64_t))type metadata accessor for AspireApiPIRConfig);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v33) {
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v25, &demangling cache variable for type metadata for AspireApiPIRConfig?);
  }
  uint64_t v35 = v43;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v25, v43, &demangling cache variable for type metadata for AspireApiPIRConfig?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v44 + 48))(v35, 1, v31) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v25, &demangling cache variable for type metadata for AspireApiPIRConfig?);
    return outlined destroy of AMDPbHEConfig.OneOf_Config?(v35, &demangling cache variable for type metadata for AspireApiPIRConfig?);
  }
  else
  {
    uint64_t v36 = v42;
    outlined init with take of AspireApiEvaluationKeyMetadata(v35, v42, type metadata accessor for AspireApiPIRConfig);
    if (v29 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v25, &demangling cache variable for type metadata for AspireApiPIRConfig?);
    uint64_t v37 = v41;
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v41, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
    outlined init with take of AspireApiEvaluationKeyMetadata(v36, v37, type metadata accessor for AspireApiPIRConfig);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v30);
  }
}

uint64_t closure #2 in AspireApiConfig.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v50 = a4;
  uint64_t v48 = a2;
  uint64_t v49 = a3;
  uint64_t v5 = type metadata accessor for AspireApiPECConfig(0);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v42 = (uint64_t)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v45 = (char *)&v38 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for AspireApiConfig.OneOf_Config(0);
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v38 - v18;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiPECConfig?);
  MEMORY[0x270FA5388](v20 - 8);
  uint64_t v43 = (uint64_t)&v38 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v23 = MEMORY[0x270FA5388](v22);
  uint64_t v25 = (char *)&v38 - v24;
  uint64_t v44 = v6;
  uint64_t v26 = *(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56);
  uint64_t v47 = v5;
  uint64_t v27 = v5;
  uint64_t v28 = v26;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t, double))v26)((char *)&v38 - v24, 1, 1, v27, v23);
  uint64_t v41 = a1;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v12, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
  uint64_t v40 = v14;
  int v29 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if (v29 == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v12, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
    uint64_t v30 = v13;
  }
  else
  {
    uint64_t v39 = v28;
    uint64_t v31 = (uint64_t)v45;
    outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v12, (uint64_t)v19, type metadata accessor for AspireApiConfig.OneOf_Config);
    outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v19, (uint64_t)v16, type metadata accessor for AspireApiConfig.OneOf_Config);
    uint64_t v30 = v13;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v25, &demangling cache variable for type metadata for AspireApiPECConfig?);
      outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v16, v31, type metadata accessor for AspireApiPECConfig);
      outlined init with take of AspireApiEvaluationKeyMetadata(v31, (uint64_t)v25, type metadata accessor for AspireApiPECConfig);
      uint64_t v32 = v47;
      v39(v25, 0, 1, v47);
      goto LABEL_7;
    }
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v16, type metadata accessor for AspireApiConfig.OneOf_Config);
  }
  uint64_t v32 = v47;
LABEL_7:
  uint64_t v33 = v46;
  _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiPECConfig and conformance AspireApiPECConfig, (void (*)(uint64_t))type metadata accessor for AspireApiPECConfig);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v33) {
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v25, &demangling cache variable for type metadata for AspireApiPECConfig?);
  }
  uint64_t v35 = v43;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v25, v43, &demangling cache variable for type metadata for AspireApiPECConfig?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v44 + 48))(v35, 1, v32) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v25, &demangling cache variable for type metadata for AspireApiPECConfig?);
    return outlined destroy of AMDPbHEConfig.OneOf_Config?(v35, &demangling cache variable for type metadata for AspireApiPECConfig?);
  }
  else
  {
    uint64_t v36 = v42;
    outlined init with take of AspireApiEvaluationKeyMetadata(v35, v42, type metadata accessor for AspireApiPECConfig);
    if (v29 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v25, &demangling cache variable for type metadata for AspireApiPECConfig?);
    uint64_t v37 = v41;
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v41, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
    outlined init with take of AspireApiEvaluationKeyMetadata(v36, v37, type metadata accessor for AspireApiPECConfig);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v30);
  }
}

uint64_t AspireApiConfig.traverse<A>(visitor:)()
{
  uint64_t v2 = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v0, (uint64_t)v5, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
  uint64_t v6 = type metadata accessor for AspireApiConfig.OneOf_Config(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6) == 1) {
    goto LABEL_18;
  }
  if (swift_getEnumCaseMultiPayload() == 1) {
    closure #2 in AspireApiConfig.traverse<A>(visitor:)(v0);
  }
  else {
    closure #1 in AspireApiConfig.traverse<A>(visitor:)(v0);
  }
  uint64_t v2 = v1;
  uint64_t result = _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v5, type metadata accessor for AspireApiConfig.OneOf_Config);
  if (!v1)
  {
LABEL_18:
    uint64_t v8 = type metadata accessor for AspireApiConfig(0);
    uint64_t v9 = (uint64_t *)(v0 + *(int *)(v8 + 20));
    uint64_t v10 = *v9;
    unint64_t v11 = v9[1];
    switch(v11 >> 62)
    {
      case 1uLL:
        if ((int)v10 != v10 >> 32) {
          goto LABEL_12;
        }
        goto LABEL_13;
      case 2uLL:
        if (*(void *)(v10 + 16) != *(void *)(v10 + 24)) {
          goto LABEL_12;
        }
        goto LABEL_13;
      case 3uLL:
        goto LABEL_13;
      default:
        if ((v11 & 0xFF000000000000) == 0) {
          goto LABEL_13;
        }
LABEL_12:
        uint64_t result = dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
        if (!v2)
        {
LABEL_13:
          if (*(unsigned char *)(v0 + *(int *)(v8 + 24)) != 1
            || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v2))
          {
            uint64_t result = UnknownStorage.traverse<A>(visitor:)();
          }
        }
        break;
    }
  }
  return result;
}

uint64_t closure #1 in AspireApiConfig.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for AspireApiPIRConfig(0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v4, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
  uint64_t v8 = type metadata accessor for AspireApiConfig.OneOf_Config(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v4, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v4, (uint64_t)v7, type metadata accessor for AspireApiPIRConfig);
    _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiPIRConfig and conformance AspireApiPIRConfig, (void (*)(uint64_t))type metadata accessor for AspireApiPIRConfig);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v7, type metadata accessor for AspireApiPIRConfig);
  }
  uint64_t result = _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v4, type metadata accessor for AspireApiConfig.OneOf_Config);
  __break(1u);
  return result;
}

uint64_t closure #2 in AspireApiConfig.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for AspireApiPECConfig(0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v4, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
  uint64_t v8 = type metadata accessor for AspireApiConfig.OneOf_Config(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v4, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v4, (uint64_t)v7, type metadata accessor for AspireApiPECConfig);
    _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiPECConfig and conformance AspireApiPECConfig, (void (*)(uint64_t))type metadata accessor for AspireApiPECConfig);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v7, type metadata accessor for AspireApiPECConfig);
  }
  uint64_t result = _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v4, type metadata accessor for AspireApiConfig.OneOf_Config);
  __break(1u);
  return result;
}

Swift::Int AspireApiConfig.hashValue.getter()
{
  return AspireApiEmpty.hashValue.getter((void (*)(void))type metadata accessor for AspireApiConfig, &lazy protocol witness table cache variable for type AspireApiConfig and conformance AspireApiConfig, (void (*)(uint64_t))type metadata accessor for AspireApiConfig);
}

uint64_t protocol witness for Message.init() in conformance AspireApiConfig@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for AspireApiConfig.OneOf_Config(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(a2, 1, 1, v4);
  uint64_t v5 = *(int *)(a1 + 24);
  *(_OWORD *)(a2 + *(int *)(a1 + 20)) = xmmword_249E85DF0;
  *(unsigned char *)(a2 + v5) = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspireApiConfig()
{
  return 0xD000000000000011;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspireApiConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireApiConfig.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspireApiConfig()
{
  return AspireApiConfig.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspireApiConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiConfig and conformance AspireApiConfig, (void (*)(uint64_t))type metadata accessor for AspireApiConfig);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspireApiConfig@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireApiConfig._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspireApiConfig(uint64_t a1)
{
  uint64_t v2 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiConfig and conformance AspireApiConfig, (void (*)(uint64_t))type metadata accessor for AspireApiConfig);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspireApiConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiConfig and conformance AspireApiConfig, (void (*)(uint64_t))type metadata accessor for AspireApiConfig);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

unint64_t static AspireApiConfigResponse.protoMessageName.getter()
{
  return 0xD000000000000019;
}

uint64_t static AspireApiConfigResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireApiConfigResponse._protobuf_nameMap, a1);
}

uint64_t AspireApiConfigResponse.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        type metadata accessor for AspireApiKeyStatus(0);
        _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiKeyStatus and conformance AspireApiKeyStatus, (void (*)(uint64_t))type metadata accessor for AspireApiKeyStatus);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      else if (result == 1)
      {
        closure #1 in AspireApiConfigResponse.decodeMessage<A>(decoder:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #1 in AspireApiConfigResponse.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeMapField<A, B>(fieldType:value:)();
}

uint64_t AspireApiConfigResponse.traverse<A>(visitor:)()
{
  uint64_t v2 = v0;
  if (!*(void *)(*(void *)v0 + 16)
    || (type metadata accessor for ProtobufString(),
        type metadata accessor for AspireApiConfig(0),
        _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiConfig and conformance AspireApiConfig, (void (*)(uint64_t))type metadata accessor for AspireApiConfig), _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiConfig and conformance AspireApiConfig, (void (*)(uint64_t))type metadata accessor for AspireApiConfig), v2 = v0, uint64_t result = dispatch thunk of Visitor.visitMapField<A, B>(fieldType:value:fieldNumber:)(), !v1))
  {
    if (!*(void *)(*(void *)(v2 + 8) + 16)
      || (type metadata accessor for AspireApiKeyStatus(0),
          _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiKeyStatus and conformance AspireApiKeyStatus, (void (*)(uint64_t))type metadata accessor for AspireApiKeyStatus), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
    {
      type metadata accessor for AspireApiConfigResponse(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t static AspireApiConfigResponse.== infix(_:_:)(char *a1, char *a2)
{
  return specialized static AspireApiConfigResponse.== infix(_:_:)(a1, a2, (uint64_t (*)(void, void, double))specialized static Dictionary<>.== infix(_:_:), specialized static Array<A>.== infix(_:_:), type metadata accessor for AspireApiConfigResponse) & 1;
}

Swift::Int AspireApiConfigResponse.hashValue.getter()
{
  return AspireApiEmpty.hashValue.getter((void (*)(void))type metadata accessor for AspireApiConfigResponse, &lazy protocol witness table cache variable for type AspireApiConfigResponse and conformance AspireApiConfigResponse, (void (*)(uint64_t))type metadata accessor for AspireApiConfigResponse);
}

uint64_t protocol witness for Message.init() in conformance AspireApiConfigResponse@<X0>(unint64_t *a1@<X8>)
{
  unint64_t v2 = MEMORY[0x263F8EE78];
  *a1 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  a1[1] = v2;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspireApiConfigResponse()
{
  return 0xD000000000000019;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspireApiConfigResponse()
{
  return AspireApiConfigResponse.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspireApiConfigResponse()
{
  return AspireApiConfigResponse.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspireApiConfigResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiConfigResponse and conformance AspireApiConfigResponse, (void (*)(uint64_t))type metadata accessor for AspireApiConfigResponse);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspireApiConfigResponse@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireApiConfigResponse._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspireApiConfigResponse(uint64_t a1)
{
  uint64_t v2 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiConfigResponse and conformance AspireApiConfigResponse, (void (*)(uint64_t))type metadata accessor for AspireApiConfigResponse);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspireApiConfigResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiConfigResponse and conformance AspireApiConfigResponse, (void (*)(uint64_t))type metadata accessor for AspireApiConfigResponse);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AspireApiConfigResponse(char *a1, char *a2)
{
  return specialized static AspireApiConfigResponse.== infix(_:_:)(a1, a2, (uint64_t (*)(void, void, double))specialized static Dictionary<>.== infix(_:_:), specialized static Array<A>.== infix(_:_:), type metadata accessor for AspireApiConfigResponse) & 1;
}

unint64_t static AspireApiRequests.protoMessageName.getter()
{
  return 0xD000000000000013;
}

uint64_t static AspireApiRequests._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireApiRequests._protobuf_nameMap, a1);
}

uint64_t AspireApiRequests.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireApiEvaluationKeys.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(void))type metadata accessor for AspireApiRequest, &lazy protocol witness table cache variable for type AspireApiRequest and conformance AspireApiRequest, (void (*)(uint64_t))type metadata accessor for AspireApiRequest);
}

uint64_t AspireApiRequests.traverse<A>(visitor:)()
{
  if (!*(void *)(*(void *)v0 + 16)
    || (type metadata accessor for AspireApiRequest(0),
        _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiRequest and conformance AspireApiRequest, (void (*)(uint64_t))type metadata accessor for AspireApiRequest), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
  {
    type metadata accessor for AspireApiRequests(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t static AspireApiRequests.== infix(_:_:)(char *a1, char *a2)
{
  return specialized static AspireApiEvaluationKeys.== infix(_:_:)(a1, a2, (uint64_t (*)(void, void, double))specialized static Array<A>.== infix(_:_:), type metadata accessor for AspireApiRequests) & 1;
}

Swift::Int AspireApiRequests.hashValue.getter()
{
  return AspireApiEmpty.hashValue.getter((void (*)(void))type metadata accessor for AspireApiRequests, &lazy protocol witness table cache variable for type AspireApiRequests and conformance AspireApiRequests, (void (*)(uint64_t))type metadata accessor for AspireApiRequests);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspireApiRequests()
{
  return 0xD000000000000013;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspireApiRequests(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireApiRequests.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspireApiRequests()
{
  return AspireApiRequests.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspireApiRequests(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiRequests and conformance AspireApiRequests, (void (*)(uint64_t))type metadata accessor for AspireApiRequests);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspireApiRequests@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireApiRequests._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspireApiRequests(uint64_t a1)
{
  uint64_t v2 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiRequests and conformance AspireApiRequests, (void (*)(uint64_t))type metadata accessor for AspireApiRequests);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspireApiRequests(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiRequests and conformance AspireApiRequests, (void (*)(uint64_t))type metadata accessor for AspireApiRequests);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AspireApiRequests(char *a1, char *a2)
{
  return specialized static AspireApiEvaluationKeys.== infix(_:_:)(a1, a2, (uint64_t (*)(void, void, double))specialized static Array<A>.== infix(_:_:), type metadata accessor for AspireApiRequests) & 1;
}

unint64_t static AspireApiResponses.protoMessageName.getter()
{
  return 0xD000000000000014;
}

uint64_t static AspireApiResponses._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireApiResponses._protobuf_nameMap, a1);
}

uint64_t AspireApiResponses.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireApiEvaluationKeys.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(void))type metadata accessor for AspireApiResponse, &lazy protocol witness table cache variable for type AspireApiResponse and conformance AspireApiResponse, (void (*)(uint64_t))type metadata accessor for AspireApiResponse);
}

uint64_t AspireApiResponses.traverse<A>(visitor:)()
{
  if (!*(void *)(*(void *)v0 + 16)
    || (type metadata accessor for AspireApiResponse(0),
        _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiResponse and conformance AspireApiResponse, (void (*)(uint64_t))type metadata accessor for AspireApiResponse), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
  {
    type metadata accessor for AspireApiResponses(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t static AspireApiResponses.== infix(_:_:)(char *a1, char *a2)
{
  return specialized static AspireApiEvaluationKeys.== infix(_:_:)(a1, a2, (uint64_t (*)(void, void, double))specialized static Array<A>.== infix(_:_:), type metadata accessor for AspireApiResponses) & 1;
}

Swift::Int AspireApiResponses.hashValue.getter()
{
  return AspireApiEmpty.hashValue.getter((void (*)(void))type metadata accessor for AspireApiResponses, &lazy protocol witness table cache variable for type AspireApiResponses and conformance AspireApiResponses, (void (*)(uint64_t))type metadata accessor for AspireApiResponses);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspireApiResponses()
{
  return 0xD000000000000014;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspireApiResponses(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireApiResponses.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspireApiResponses()
{
  return AspireApiResponses.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspireApiResponses(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiResponses and conformance AspireApiResponses, (void (*)(uint64_t))type metadata accessor for AspireApiResponses);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspireApiResponses@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireApiResponses._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspireApiResponses(uint64_t a1)
{
  uint64_t v2 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiResponses and conformance AspireApiResponses, (void (*)(uint64_t))type metadata accessor for AspireApiResponses);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspireApiResponses(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiResponses and conformance AspireApiResponses, (void (*)(uint64_t))type metadata accessor for AspireApiResponses);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AspireApiResponses(char *a1, char *a2)
{
  return specialized static AspireApiEvaluationKeys.== infix(_:_:)(a1, a2, (uint64_t (*)(void, void, double))specialized static Array<A>.== infix(_:_:), type metadata accessor for AspireApiResponses) & 1;
}

unint64_t static AspireApiRequest.protoMessageName.getter()
{
  return 0xD000000000000012;
}

uint64_t static AspireApiRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireApiRequest._protobuf_nameMap, a1);
}

uint64_t AspireApiRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v4 || (v10 & 1) != 0) {
      return result;
    }
    switch(result)
    {
      case 1:
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
        break;
      case 2:
        closure #2 in AspireApiRequest.decodeMessage<A>(decoder:)(v5, a1, a2, a3);
        break;
      case 3:
        closure #3 in AspireApiRequest.decodeMessage<A>(decoder:)(v5, a1, a2, a3);
        break;
      case 4:
        closure #4 in AspireApiRequest.decodeMessage<A>(decoder:)(v5, a1, a2, a3);
        break;
      default:
        continue;
    }
  }
}

uint64_t closure #2 in AspireApiRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v44 = a2;
  uint64_t v45 = a3;
  uint64_t v46 = a4;
  uint64_t v47 = a1;
  uint64_t v4 = type metadata accessor for AspireApiPIRRequest(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v38 = (uint64_t)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v41 = (char *)&v35 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
  MEMORY[0x270FA5388](v9 - 8);
  unint64_t v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for AspireApiRequest.OneOf_Request(0);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v35 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiPIRRequest?);
  MEMORY[0x270FA5388](v19 - 8);
  uint64_t v39 = (uint64_t)&v35 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v22 = MEMORY[0x270FA5388](v21);
  uint64_t v24 = (char *)&v35 - v23;
  uint64_t v40 = v5;
  uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(v5 + 56);
  uint64_t v42 = v4;
  v25((char *)&v35 - v23, 1, 1, v4, v22);
  uint64_t v36 = v47 + *(int *)(type metadata accessor for AspireApiRequest(0) + 20);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v36, (uint64_t)v11, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
  uint64_t v37 = v13;
  LODWORD(v47) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v47 == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v11, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
    uint64_t v26 = v12;
LABEL_5:
    uint64_t v29 = v42;
    uint64_t v28 = v43;
    goto LABEL_6;
  }
  uint64_t v27 = (uint64_t)v41;
  outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v11, (uint64_t)v18, type metadata accessor for AspireApiRequest.OneOf_Request);
  outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v18, (uint64_t)v15, type metadata accessor for AspireApiRequest.OneOf_Request);
  uint64_t v26 = v12;
  if (swift_getEnumCaseMultiPayload())
  {
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v15, type metadata accessor for AspireApiRequest.OneOf_Request);
    goto LABEL_5;
  }
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AspireApiPIRRequest?);
  outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v15, v27, type metadata accessor for AspireApiPIRRequest);
  outlined init with take of AspireApiEvaluationKeyMetadata(v27, (uint64_t)v24, type metadata accessor for AspireApiPIRRequest);
  uint64_t v29 = v42;
  ((void (*)(char *, void, uint64_t, uint64_t))v25)(v24, 0, 1, v42);
  uint64_t v28 = v43;
LABEL_6:
  _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiPIRRequest and conformance AspireApiPIRRequest, (void (*)(uint64_t))type metadata accessor for AspireApiPIRRequest);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AspireApiPIRRequest?);
  }
  uint64_t v31 = v39;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, v39, &demangling cache variable for type metadata for AspireApiPIRRequest?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v40 + 48))(v31, 1, v29) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AspireApiPIRRequest?);
    return outlined destroy of AMDPbHEConfig.OneOf_Config?(v31, &demangling cache variable for type metadata for AspireApiPIRRequest?);
  }
  else
  {
    uint64_t v32 = v31;
    uint64_t v33 = v38;
    outlined init with take of AspireApiEvaluationKeyMetadata(v32, v38, type metadata accessor for AspireApiPIRRequest);
    if (v47 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AspireApiPIRRequest?);
    uint64_t v34 = v36;
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v36, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
    outlined init with take of AspireApiEvaluationKeyMetadata(v33, v34, type metadata accessor for AspireApiPIRRequest);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v26);
  }
}

uint64_t closure #3 in AspireApiRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v44 = a2;
  uint64_t v45 = a3;
  uint64_t v46 = a4;
  uint64_t v47 = a1;
  uint64_t v4 = type metadata accessor for AspireApiPECRequest(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v38 = (uint64_t)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v41 = (char *)&v35 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
  MEMORY[0x270FA5388](v9 - 8);
  unint64_t v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for AspireApiRequest.OneOf_Request(0);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v35 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiPECRequest?);
  MEMORY[0x270FA5388](v19 - 8);
  uint64_t v39 = (uint64_t)&v35 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v22 = MEMORY[0x270FA5388](v21);
  uint64_t v24 = (char *)&v35 - v23;
  uint64_t v40 = v5;
  uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(v5 + 56);
  uint64_t v42 = v4;
  v25((char *)&v35 - v23, 1, 1, v4, v22);
  uint64_t v36 = v47 + *(int *)(type metadata accessor for AspireApiRequest(0) + 20);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v36, (uint64_t)v11, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
  uint64_t v37 = v13;
  LODWORD(v47) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v47 == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v11, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
    uint64_t v26 = v12;
  }
  else
  {
    uint64_t v27 = (uint64_t)v41;
    outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v11, (uint64_t)v18, type metadata accessor for AspireApiRequest.OneOf_Request);
    outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v18, (uint64_t)v15, type metadata accessor for AspireApiRequest.OneOf_Request);
    uint64_t v26 = v12;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AspireApiPECRequest?);
      outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v15, v27, type metadata accessor for AspireApiPECRequest);
      outlined init with take of AspireApiEvaluationKeyMetadata(v27, (uint64_t)v24, type metadata accessor for AspireApiPECRequest);
      uint64_t v28 = v42;
      ((void (*)(char *, void, uint64_t, uint64_t))v25)(v24, 0, 1, v42);
      uint64_t v29 = v43;
      goto LABEL_7;
    }
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v15, type metadata accessor for AspireApiRequest.OneOf_Request);
  }
  uint64_t v28 = v42;
  uint64_t v29 = v43;
LABEL_7:
  _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiPECRequest and conformance AspireApiPECRequest, (void (*)(uint64_t))type metadata accessor for AspireApiPECRequest);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v29) {
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AspireApiPECRequest?);
  }
  uint64_t v31 = v39;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, v39, &demangling cache variable for type metadata for AspireApiPECRequest?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v40 + 48))(v31, 1, v28) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AspireApiPECRequest?);
    return outlined destroy of AMDPbHEConfig.OneOf_Config?(v31, &demangling cache variable for type metadata for AspireApiPECRequest?);
  }
  else
  {
    uint64_t v32 = v31;
    uint64_t v33 = v38;
    outlined init with take of AspireApiEvaluationKeyMetadata(v32, v38, type metadata accessor for AspireApiPECRequest);
    if (v47 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AspireApiPECRequest?);
    uint64_t v34 = v36;
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v36, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
    outlined init with take of AspireApiEvaluationKeyMetadata(v33, v34, type metadata accessor for AspireApiPECRequest);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v26);
  }
}

uint64_t closure #4 in AspireApiRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v44 = a2;
  uint64_t v45 = a3;
  uint64_t v46 = a4;
  uint64_t v47 = a1;
  uint64_t v4 = type metadata accessor for AspireApiOPRFRequest(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v38 = (uint64_t)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v41 = (char *)&v35 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
  MEMORY[0x270FA5388](v9 - 8);
  unint64_t v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for AspireApiRequest.OneOf_Request(0);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v35 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiOPRFRequest?);
  MEMORY[0x270FA5388](v19 - 8);
  uint64_t v39 = (uint64_t)&v35 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v22 = MEMORY[0x270FA5388](v21);
  uint64_t v24 = (char *)&v35 - v23;
  uint64_t v40 = v5;
  uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(v5 + 56);
  uint64_t v42 = v4;
  v25((char *)&v35 - v23, 1, 1, v4, v22);
  uint64_t v36 = v47 + *(int *)(type metadata accessor for AspireApiRequest(0) + 20);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v36, (uint64_t)v11, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
  uint64_t v37 = v13;
  LODWORD(v47) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v47 == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v11, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
    uint64_t v26 = v12;
  }
  else
  {
    uint64_t v27 = (uint64_t)v41;
    outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v11, (uint64_t)v18, type metadata accessor for AspireApiRequest.OneOf_Request);
    outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v18, (uint64_t)v15, type metadata accessor for AspireApiRequest.OneOf_Request);
    uint64_t v26 = v12;
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AspireApiOPRFRequest?);
      outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v15, v27, type metadata accessor for AspireApiOPRFRequest);
      outlined init with take of AspireApiEvaluationKeyMetadata(v27, (uint64_t)v24, type metadata accessor for AspireApiOPRFRequest);
      uint64_t v28 = v42;
      ((void (*)(char *, void, uint64_t, uint64_t))v25)(v24, 0, 1, v42);
      uint64_t v29 = v43;
      goto LABEL_7;
    }
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v15, type metadata accessor for AspireApiRequest.OneOf_Request);
  }
  uint64_t v28 = v42;
  uint64_t v29 = v43;
LABEL_7:
  _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiOPRFRequest and conformance AspireApiOPRFRequest, (void (*)(uint64_t))type metadata accessor for AspireApiOPRFRequest);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v29) {
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AspireApiOPRFRequest?);
  }
  uint64_t v31 = v39;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, v39, &demangling cache variable for type metadata for AspireApiOPRFRequest?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v40 + 48))(v31, 1, v28) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AspireApiOPRFRequest?);
    return outlined destroy of AMDPbHEConfig.OneOf_Config?(v31, &demangling cache variable for type metadata for AspireApiOPRFRequest?);
  }
  else
  {
    uint64_t v32 = v31;
    uint64_t v33 = v38;
    outlined init with take of AspireApiEvaluationKeyMetadata(v32, v38, type metadata accessor for AspireApiOPRFRequest);
    if (v47 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AspireApiOPRFRequest?);
    uint64_t v34 = v36;
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v36, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
    outlined init with take of AspireApiEvaluationKeyMetadata(v33, v34, type metadata accessor for AspireApiOPRFRequest);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v26);
  }
}

uint64_t AspireApiRequest.traverse<A>(visitor:)()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v5 = v0[1];
  uint64_t v6 = HIBYTE(v5) & 0xF;
  if ((v5 & 0x2000000000000000) == 0) {
    uint64_t v6 = *v0 & 0xFFFFFFFFFFFFLL;
  }
  if (!v6 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    uint64_t v8 = type metadata accessor for AspireApiRequest(0);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v0 + *(int *)(v8 + 20), (uint64_t)v4, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
    uint64_t v9 = type metadata accessor for AspireApiRequest.OneOf_Request(0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v4, 1, v9) == 1) {
      return UnknownStorage.traverse<A>(visitor:)();
    }
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload)
    {
      if (EnumCaseMultiPayload == 1) {
        closure #2 in AspireApiRequest.traverse<A>(visitor:)((uint64_t)v0);
      }
      else {
        closure #3 in AspireApiRequest.traverse<A>(visitor:)((uint64_t)v0);
      }
    }
    else
    {
      closure #1 in AspireApiRequest.traverse<A>(visitor:)((uint64_t)v0);
    }
    uint64_t result = _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v4, type metadata accessor for AspireApiRequest.OneOf_Request);
    if (!v1) {
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t closure #1 in AspireApiRequest.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for AspireApiPIRRequest(0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AspireApiRequest(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v8 + 20), (uint64_t)v4, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
  uint64_t v9 = type metadata accessor for AspireApiRequest.OneOf_Request(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v4, 1, v9) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v4, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
    __break(1u);
  }
  else if (!swift_getEnumCaseMultiPayload())
  {
    outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v4, (uint64_t)v7, type metadata accessor for AspireApiPIRRequest);
    _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiPIRRequest and conformance AspireApiPIRRequest, (void (*)(uint64_t))type metadata accessor for AspireApiPIRRequest);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v7, type metadata accessor for AspireApiPIRRequest);
  }
  uint64_t result = _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v4, type metadata accessor for AspireApiRequest.OneOf_Request);
  __break(1u);
  return result;
}

uint64_t closure #2 in AspireApiRequest.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for AspireApiPECRequest(0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AspireApiRequest(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v8 + 20), (uint64_t)v4, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
  uint64_t v9 = type metadata accessor for AspireApiRequest.OneOf_Request(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v4, 1, v9) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v4, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v4, (uint64_t)v7, type metadata accessor for AspireApiPECRequest);
    _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiPECRequest and conformance AspireApiPECRequest, (void (*)(uint64_t))type metadata accessor for AspireApiPECRequest);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v7, type metadata accessor for AspireApiPECRequest);
  }
  uint64_t result = _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v4, type metadata accessor for AspireApiRequest.OneOf_Request);
  __break(1u);
  return result;
}

uint64_t closure #3 in AspireApiRequest.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for AspireApiOPRFRequest(0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AspireApiRequest(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v8 + 20), (uint64_t)v4, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
  uint64_t v9 = type metadata accessor for AspireApiRequest.OneOf_Request(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v4, 1, v9) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v4, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 2)
  {
    outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v4, (uint64_t)v7, type metadata accessor for AspireApiOPRFRequest);
    _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiOPRFRequest and conformance AspireApiOPRFRequest, (void (*)(uint64_t))type metadata accessor for AspireApiOPRFRequest);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v7, type metadata accessor for AspireApiOPRFRequest);
  }
  uint64_t result = _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v4, type metadata accessor for AspireApiRequest.OneOf_Request);
  __break(1u);
  return result;
}

Swift::Int AspireApiRequest.hashValue.getter()
{
  return AspireApiEmpty.hashValue.getter((void (*)(void))type metadata accessor for AspireApiRequest, &lazy protocol witness table cache variable for type AspireApiRequest and conformance AspireApiRequest, (void (*)(uint64_t))type metadata accessor for AspireApiRequest);
}

uint64_t protocol witness for Message.init() in conformance AspireApiRequest@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0xE000000000000000;
  uint64_t v2 = (char *)a2 + *(int *)(a1 + 20);
  uint64_t v3 = type metadata accessor for AspireApiRequest.OneOf_Request(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 1, 1, v3);
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspireApiRequest()
{
  return 0xD000000000000012;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspireApiRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireApiRequest.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspireApiRequest()
{
  return AspireApiRequest.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspireApiRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiRequest and conformance AspireApiRequest, (void (*)(uint64_t))type metadata accessor for AspireApiRequest);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspireApiRequest@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireApiRequest._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspireApiRequest(uint64_t a1)
{
  uint64_t v2 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiRequest and conformance AspireApiRequest, (void (*)(uint64_t))type metadata accessor for AspireApiRequest);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspireApiRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiRequest and conformance AspireApiRequest, (void (*)(uint64_t))type metadata accessor for AspireApiRequest);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

unint64_t static AspireApiResponse.protoMessageName.getter()
{
  return 0xD000000000000013;
}

uint64_t static AspireApiResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireApiResponse._protobuf_nameMap, a1);
}

uint64_t AspireApiResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v4 || (v10 & 1) != 0) {
      break;
    }
    switch(result)
    {
      case 3:
        closure #3 in AspireApiResponse.decodeMessage<A>(decoder:)(v5, a1, a2, a3);
        break;
      case 2:
        closure #2 in AspireApiResponse.decodeMessage<A>(decoder:)(v5, a1, a2, a3);
        break;
      case 1:
        closure #1 in AspireApiResponse.decodeMessage<A>(decoder:)(v5, a1, a2, a3);
        break;
    }
  }
  return result;
}

uint64_t closure #1 in AspireApiResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v50 = a4;
  uint64_t v48 = a2;
  uint64_t v49 = a3;
  uint64_t v5 = type metadata accessor for AspireApiPIRResponse(0);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v42 = (uint64_t)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v45 = (char *)&v38 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for AspireApiResponse.OneOf_Response(0);
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v38 - v18;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiPIRResponse?);
  MEMORY[0x270FA5388](v20 - 8);
  uint64_t v43 = (uint64_t)&v38 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v23 = MEMORY[0x270FA5388](v22);
  uint64_t v25 = (char *)&v38 - v24;
  uint64_t v44 = v6;
  uint64_t v26 = *(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56);
  uint64_t v47 = v5;
  uint64_t v27 = v5;
  uint64_t v28 = v26;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t, double))v26)((char *)&v38 - v24, 1, 1, v27, v23);
  uint64_t v41 = a1;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v12, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  uint64_t v40 = v14;
  int v29 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if (v29 == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v12, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
    uint64_t v30 = v13;
    uint64_t v31 = v47;
  }
  else
  {
    uint64_t v39 = v28;
    uint64_t v32 = (uint64_t)v45;
    outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v12, (uint64_t)v19, type metadata accessor for AspireApiResponse.OneOf_Response);
    outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v19, (uint64_t)v16, type metadata accessor for AspireApiResponse.OneOf_Response);
    uint64_t v30 = v13;
    if (swift_getEnumCaseMultiPayload())
    {
      _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v16, type metadata accessor for AspireApiResponse.OneOf_Response);
      uint64_t v31 = v47;
    }
    else
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v25, &demangling cache variable for type metadata for AspireApiPIRResponse?);
      outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v16, v32, type metadata accessor for AspireApiPIRResponse);
      outlined init with take of AspireApiEvaluationKeyMetadata(v32, (uint64_t)v25, type metadata accessor for AspireApiPIRResponse);
      uint64_t v31 = v47;
      v39(v25, 0, 1, v47);
    }
  }
  uint64_t v33 = v46;
  _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiPIRResponse and conformance AspireApiPIRResponse, (void (*)(uint64_t))type metadata accessor for AspireApiPIRResponse);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v33) {
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v25, &demangling cache variable for type metadata for AspireApiPIRResponse?);
  }
  uint64_t v35 = v43;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v25, v43, &demangling cache variable for type metadata for AspireApiPIRResponse?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v44 + 48))(v35, 1, v31) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v25, &demangling cache variable for type metadata for AspireApiPIRResponse?);
    return outlined destroy of AMDPbHEConfig.OneOf_Config?(v35, &demangling cache variable for type metadata for AspireApiPIRResponse?);
  }
  else
  {
    uint64_t v36 = v42;
    outlined init with take of AspireApiEvaluationKeyMetadata(v35, v42, type metadata accessor for AspireApiPIRResponse);
    if (v29 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v25, &demangling cache variable for type metadata for AspireApiPIRResponse?);
    uint64_t v37 = v41;
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v41, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
    outlined init with take of AspireApiEvaluationKeyMetadata(v36, v37, type metadata accessor for AspireApiPIRResponse);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v30);
  }
}

uint64_t closure #2 in AspireApiResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v50 = a4;
  uint64_t v48 = a2;
  uint64_t v49 = a3;
  uint64_t v5 = type metadata accessor for AspireApiPECResponse(0);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v42 = (uint64_t)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v45 = (char *)&v38 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for AspireApiResponse.OneOf_Response(0);
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v38 - v18;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiPECResponse?);
  MEMORY[0x270FA5388](v20 - 8);
  uint64_t v43 = (uint64_t)&v38 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v23 = MEMORY[0x270FA5388](v22);
  uint64_t v25 = (char *)&v38 - v24;
  uint64_t v44 = v6;
  uint64_t v26 = *(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56);
  uint64_t v47 = v5;
  uint64_t v27 = v5;
  uint64_t v28 = v26;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t, double))v26)((char *)&v38 - v24, 1, 1, v27, v23);
  uint64_t v41 = a1;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v12, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  uint64_t v40 = v14;
  int v29 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if (v29 == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v12, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
    uint64_t v30 = v13;
  }
  else
  {
    uint64_t v39 = v28;
    uint64_t v31 = (uint64_t)v45;
    outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v12, (uint64_t)v19, type metadata accessor for AspireApiResponse.OneOf_Response);
    outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v19, (uint64_t)v16, type metadata accessor for AspireApiResponse.OneOf_Response);
    uint64_t v30 = v13;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v25, &demangling cache variable for type metadata for AspireApiPECResponse?);
      outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v16, v31, type metadata accessor for AspireApiPECResponse);
      outlined init with take of AspireApiEvaluationKeyMetadata(v31, (uint64_t)v25, type metadata accessor for AspireApiPECResponse);
      uint64_t v32 = v47;
      v39(v25, 0, 1, v47);
      goto LABEL_7;
    }
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v16, type metadata accessor for AspireApiResponse.OneOf_Response);
  }
  uint64_t v32 = v47;
LABEL_7:
  uint64_t v33 = v46;
  _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiPECResponse and conformance AspireApiPECResponse, (void (*)(uint64_t))type metadata accessor for AspireApiPECResponse);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v33) {
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v25, &demangling cache variable for type metadata for AspireApiPECResponse?);
  }
  uint64_t v35 = v43;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v25, v43, &demangling cache variable for type metadata for AspireApiPECResponse?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v44 + 48))(v35, 1, v32) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v25, &demangling cache variable for type metadata for AspireApiPECResponse?);
    return outlined destroy of AMDPbHEConfig.OneOf_Config?(v35, &demangling cache variable for type metadata for AspireApiPECResponse?);
  }
  else
  {
    uint64_t v36 = v42;
    outlined init with take of AspireApiEvaluationKeyMetadata(v35, v42, type metadata accessor for AspireApiPECResponse);
    if (v29 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v25, &demangling cache variable for type metadata for AspireApiPECResponse?);
    uint64_t v37 = v41;
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v41, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
    outlined init with take of AspireApiEvaluationKeyMetadata(v36, v37, type metadata accessor for AspireApiPECResponse);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v30);
  }
}

uint64_t closure #3 in AspireApiResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v50 = a4;
  uint64_t v48 = a2;
  uint64_t v49 = a3;
  uint64_t v5 = type metadata accessor for AspireApiOPRFResponse(0);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v42 = (uint64_t)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v45 = (char *)&v38 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for AspireApiResponse.OneOf_Response(0);
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v38 - v18;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiOPRFResponse?);
  MEMORY[0x270FA5388](v20 - 8);
  uint64_t v43 = (uint64_t)&v38 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v23 = MEMORY[0x270FA5388](v22);
  uint64_t v25 = (char *)&v38 - v24;
  uint64_t v44 = v6;
  uint64_t v26 = *(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56);
  uint64_t v47 = v5;
  uint64_t v27 = v5;
  uint64_t v28 = v26;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t, double))v26)((char *)&v38 - v24, 1, 1, v27, v23);
  uint64_t v41 = a1;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v12, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  uint64_t v40 = v14;
  int v29 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if (v29 == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v12, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
    uint64_t v30 = v13;
  }
  else
  {
    uint64_t v39 = v28;
    uint64_t v31 = (uint64_t)v45;
    outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v12, (uint64_t)v19, type metadata accessor for AspireApiResponse.OneOf_Response);
    outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v19, (uint64_t)v16, type metadata accessor for AspireApiResponse.OneOf_Response);
    uint64_t v30 = v13;
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v25, &demangling cache variable for type metadata for AspireApiOPRFResponse?);
      outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v16, v31, type metadata accessor for AspireApiOPRFResponse);
      outlined init with take of AspireApiEvaluationKeyMetadata(v31, (uint64_t)v25, type metadata accessor for AspireApiOPRFResponse);
      uint64_t v32 = v47;
      v39(v25, 0, 1, v47);
      goto LABEL_7;
    }
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v16, type metadata accessor for AspireApiResponse.OneOf_Response);
  }
  uint64_t v32 = v47;
LABEL_7:
  uint64_t v33 = v46;
  _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiOPRFResponse and conformance AspireApiOPRFResponse, (void (*)(uint64_t))type metadata accessor for AspireApiOPRFResponse);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v33) {
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v25, &demangling cache variable for type metadata for AspireApiOPRFResponse?);
  }
  uint64_t v35 = v43;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v25, v43, &demangling cache variable for type metadata for AspireApiOPRFResponse?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v44 + 48))(v35, 1, v32) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v25, &demangling cache variable for type metadata for AspireApiOPRFResponse?);
    return outlined destroy of AMDPbHEConfig.OneOf_Config?(v35, &demangling cache variable for type metadata for AspireApiOPRFResponse?);
  }
  else
  {
    uint64_t v36 = v42;
    outlined init with take of AspireApiEvaluationKeyMetadata(v35, v42, type metadata accessor for AspireApiOPRFResponse);
    if (v29 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v25, &demangling cache variable for type metadata for AspireApiOPRFResponse?);
    uint64_t v37 = v41;
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v41, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
    outlined init with take of AspireApiEvaluationKeyMetadata(v36, v37, type metadata accessor for AspireApiOPRFResponse);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v30);
  }
}

uint64_t AspireApiResponse.traverse<A>(visitor:)()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v0, (uint64_t)v4, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  uint64_t v5 = type metadata accessor for AspireApiResponse.OneOf_Response(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5) == 1) {
    goto LABEL_8;
  }
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1) {
      closure #2 in AspireApiResponse.traverse<A>(visitor:)(v0);
    }
    else {
      closure #3 in AspireApiResponse.traverse<A>(visitor:)(v0);
    }
  }
  else
  {
    closure #1 in AspireApiResponse.traverse<A>(visitor:)(v0);
  }
  uint64_t result = _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v4, type metadata accessor for AspireApiResponse.OneOf_Response);
  if (!v1)
  {
LABEL_8:
    type metadata accessor for AspireApiResponse(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in AspireApiResponse.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for AspireApiPIRResponse(0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v4, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  uint64_t v8 = type metadata accessor for AspireApiResponse.OneOf_Response(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v4, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
    __break(1u);
  }
  else if (!swift_getEnumCaseMultiPayload())
  {
    outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v4, (uint64_t)v7, type metadata accessor for AspireApiPIRResponse);
    _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiPIRResponse and conformance AspireApiPIRResponse, (void (*)(uint64_t))type metadata accessor for AspireApiPIRResponse);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v7, type metadata accessor for AspireApiPIRResponse);
  }
  uint64_t result = _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v4, type metadata accessor for AspireApiResponse.OneOf_Response);
  __break(1u);
  return result;
}

uint64_t closure #2 in AspireApiResponse.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for AspireApiPECResponse(0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v4, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  uint64_t v8 = type metadata accessor for AspireApiResponse.OneOf_Response(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v4, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v4, (uint64_t)v7, type metadata accessor for AspireApiPECResponse);
    _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiPECResponse and conformance AspireApiPECResponse, (void (*)(uint64_t))type metadata accessor for AspireApiPECResponse);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v7, type metadata accessor for AspireApiPECResponse);
  }
  uint64_t result = _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v4, type metadata accessor for AspireApiResponse.OneOf_Response);
  __break(1u);
  return result;
}

uint64_t closure #3 in AspireApiResponse.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for AspireApiOPRFResponse(0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v4, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  uint64_t v8 = type metadata accessor for AspireApiResponse.OneOf_Response(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v4, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 2)
  {
    outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v4, (uint64_t)v7, type metadata accessor for AspireApiOPRFResponse);
    _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiOPRFResponse and conformance AspireApiOPRFResponse, (void (*)(uint64_t))type metadata accessor for AspireApiOPRFResponse);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v7, type metadata accessor for AspireApiOPRFResponse);
  }
  uint64_t result = _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v4, type metadata accessor for AspireApiResponse.OneOf_Response);
  __break(1u);
  return result;
}

Swift::Int AspireApiResponse.hashValue.getter()
{
  return AspireApiEmpty.hashValue.getter((void (*)(void))type metadata accessor for AspireApiResponse, &lazy protocol witness table cache variable for type AspireApiResponse and conformance AspireApiResponse, (void (*)(uint64_t))type metadata accessor for AspireApiResponse);
}

uint64_t protocol witness for Message.init() in conformance AspireApiResponse@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Message.init() in conformance AspireApiResponse(type metadata accessor for AspireApiResponse.OneOf_Response, a1);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspireApiResponse()
{
  return 0xD000000000000013;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspireApiResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireApiResponse.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspireApiResponse()
{
  return AspireApiResponse.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspireApiResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiResponse and conformance AspireApiResponse, (void (*)(uint64_t))type metadata accessor for AspireApiResponse);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspireApiResponse@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireApiResponse._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspireApiResponse(uint64_t a1)
{
  uint64_t v2 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiResponse and conformance AspireApiResponse, (void (*)(uint64_t))type metadata accessor for AspireApiResponse);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspireApiResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiResponse and conformance AspireApiResponse, (void (*)(uint64_t))type metadata accessor for AspireApiResponse);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

unint64_t static AspireApiPIRShardConfig.protoMessageName.getter()
{
  return 0xD000000000000019;
}

uint64_t static AspireApiPIRShardConfig._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireApiPIRShardConfig._protobuf_nameMap, a1);
}

uint64_t AspireApiPIRShardConfig.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
          goto LABEL_5;
        case 3:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedUInt64Field(value:)();
          goto LABEL_5;
        case 4:
          type metadata accessor for AspireApiPIRShardConfig(0);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_5;
        case 5:
          type metadata accessor for AspireApiPIRShardConfig(0);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_5;
        case 6:
          type metadata accessor for AspireApiPIRShardConfig(0);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
LABEL_5:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t AspireApiPIRShardConfig.traverse<A>(visitor:)()
{
  if (!*v0 || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v1))
  {
    if (!v0[1] || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v1))
    {
      if (!*(void *)(v0[2] + 16)
        || (uint64_t result = dispatch thunk of Visitor.visitPackedUInt64Field(value:fieldNumber:)(), !v1))
      {
        uint64_t result = closure #1 in AspireApiPIRShardConfig.traverse<A>(visitor:)((uint64_t)v0);
        if (!v1)
        {
          closure #2 in AspireApiPIRShardConfig.traverse<A>(visitor:)((uint64_t)v0);
          closure #3 in AspireApiPIRShardConfig.traverse<A>(visitor:)((uint64_t)v0);
          type metadata accessor for AspireApiPIRShardConfig(0);
          return UnknownStorage.traverse<A>(visitor:)();
        }
      }
    }
  }
  return result;
}

uint64_t closure #1 in AspireApiPIRShardConfig.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = type metadata accessor for AspireApiPIRShardConfig(0);
  if (*(void *)(a1 + *(int *)(result + 32) + 8)) {
    return dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #2 in AspireApiPIRShardConfig.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = type metadata accessor for AspireApiPIRShardConfig(0);
  if (*(unsigned char *)(a1 + *(int *)(result + 36)) != 2) {
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #3 in AspireApiPIRShardConfig.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = type metadata accessor for AspireApiPIRShardConfig(0);
  if ((*(unsigned char *)(a1 + *(int *)(result + 40) + 8) & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
  }
  return result;
}

Swift::Int AspireApiPIRShardConfig.hashValue.getter()
{
  return AspireApiEmpty.hashValue.getter((void (*)(void))type metadata accessor for AspireApiPIRShardConfig, &lazy protocol witness table cache variable for type AspireApiPIRShardConfig and conformance AspireApiPIRShardConfig, (void (*)(uint64_t))type metadata accessor for AspireApiPIRShardConfig);
}

uint64_t protocol witness for Message.init() in conformance AspireApiPIRShardConfig@<X0>(int *a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = MEMORY[0x263F8EE78];
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[9];
  uint64_t v6 = (void *)((char *)a2 + a1[8]);
  *uint64_t v6 = 0;
  v6[1] = 0;
  *((unsigned char *)a2 + v5) = 2;
  uint64_t v7 = (char *)a2 + a1[10];
  *(void *)uint64_t v7 = 0;
  v7[8] = 1;
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspireApiPIRShardConfig()
{
  return 0xD000000000000019;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspireApiPIRShardConfig()
{
  return AspireApiPIRShardConfig.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspireApiPIRShardConfig()
{
  return AspireApiPIRShardConfig.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspireApiPIRShardConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiPIRShardConfig and conformance AspireApiPIRShardConfig, (void (*)(uint64_t))type metadata accessor for AspireApiPIRShardConfig);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspireApiPIRShardConfig@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireApiPIRShardConfig._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspireApiPIRShardConfig(uint64_t a1)
{
  uint64_t v2 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiPIRShardConfig and conformance AspireApiPIRShardConfig, (void (*)(uint64_t))type metadata accessor for AspireApiPIRShardConfig);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspireApiPIRShardConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiPIRShardConfig and conformance AspireApiPIRShardConfig, (void (*)(uint64_t))type metadata accessor for AspireApiPIRShardConfig);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

unint64_t static AspireApiPIRConfig.protoMessageName.getter()
{
  return 0xD000000000000014;
}

uint64_t static AspireApiPIRConfig._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireApiPIRConfig._protobuf_nameMap, a1);
}

uint64_t one-time initialization function for defaultInstance()
{
  type metadata accessor for AspireApiPIRConfig._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__encryptionParameters;
  uint64_t v2 = type metadata accessor for AspireHeEncryptionParameters(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  *(void *)(v0
            + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__shardConfigs) = MEMORY[0x263F8EE78];
  uint64_t v3 = v0
     + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__keywordPirParams;
  uint64_t v4 = type metadata accessor for AspirePirKeywordPirParameters(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  uint64_t v5 = v0 + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__algorithm;
  *(void *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 8) = 1;
  *(void *)(v0
            + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__batchSize) = 0;
  *(_OWORD *)(v0
            + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__evaluationKeyConfigHash) = xmmword_249E85DF0;
  uint64_t v6 = v0
     + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__batchPirParams;
  uint64_t v7 = type metadata accessor for AspirePirBatchPirParameters(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  uint64_t v8 = v0
     + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__pirShardConfigs;
  uint64_t v9 = type metadata accessor for AspireApiPIRShardConfigs(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  static AspireApiPIRConfig._StorageClass.defaultInstance = v0;
  return result;
}

uint64_t type metadata accessor for AspireApiConfig(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireApiConfig);
}

uint64_t AspireApiPIRConfig._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiPIRShardConfigs?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v50 = (uint64_t)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirBatchPirParameters?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v49 = (uint64_t)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v46 = (uint64_t)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = v1
      + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__encryptionParameters;
  uint64_t v13 = type metadata accessor for AspireHeEncryptionParameters(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
  uint64_t v14 = (void *)(v1
                 + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__shardConfigs);
  *(void *)(v1
            + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__shardConfigs) = MEMORY[0x263F8EE78];
  uint64_t v15 = v1
      + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__keywordPirParams;
  uint64_t v16 = type metadata accessor for AspirePirKeywordPirParameters(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v15, 1, 1, v16);
  uint64_t v17 = v1
      + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__algorithm;
  *(void *)uint64_t v17 = 0;
  *(unsigned char *)(v17 + 8) = 1;
  uint64_t v45 = (void *)(v1
                 + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__batchSize);
  *(void *)(v1
            + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__batchSize) = 0;
  uint64_t v18 = (uint64_t *)(v1
                  + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__evaluationKeyConfigHash);
  *(_OWORD *)(v1
            + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__evaluationKeyConfigHash) = xmmword_249E85DF0;
  uint64_t v19 = v1
      + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__batchPirParams;
  uint64_t v47 = v1
      + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__batchPirParams;
  uint64_t v20 = type metadata accessor for AspirePirBatchPirParameters(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v19, 1, 1, v20);
  uint64_t v21 = v1
      + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__pirShardConfigs;
  uint64_t v48 = v1
      + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__pirShardConfigs;
  uint64_t v22 = type metadata accessor for AspireApiPIRShardConfigs(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v21, 1, 1, v22);
  uint64_t v23 = a1
      + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__encryptionParameters;
  swift_beginAccess();
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v23, (uint64_t)v11, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  swift_beginAccess();
  outlined assign with take of AMDPbHEConfig.OneOf_Config?((uint64_t)v11, v12, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  swift_endAccess();
  uint64_t v24 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__shardConfigs);
  swift_beginAccess();
  uint64_t v25 = *v24;
  swift_beginAccess();
  *uint64_t v14 = v25;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v26 = a1
      + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__keywordPirParams;
  swift_beginAccess();
  uint64_t v27 = v46;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v26, v46, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  swift_beginAccess();
  outlined assign with take of AMDPbHEConfig.OneOf_Config?(v27, v15, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  swift_endAccess();
  uint64_t v28 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__algorithm);
  swift_beginAccess();
  uint64_t v29 = *v28;
  LOBYTE(v28) = *((unsigned char *)v28 + 8);
  swift_beginAccess();
  *(void *)uint64_t v17 = v29;
  *(unsigned char *)(v17 + 8) = (_BYTE)v28;
  uint64_t v30 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__batchSize);
  swift_beginAccess();
  uint64_t v31 = *v30;
  uint64_t v32 = v45;
  swift_beginAccess();
  void *v32 = v31;
  uint64_t v33 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__evaluationKeyConfigHash);
  swift_beginAccess();
  uint64_t v35 = *v33;
  unint64_t v34 = v33[1];
  swift_beginAccess();
  uint64_t v36 = *v18;
  unint64_t v37 = v18[1];
  *uint64_t v18 = v35;
  v18[1] = v34;
  outlined copy of Data._Representation(v35, v34);
  outlined consume of Data._Representation(v36, v37);
  uint64_t v38 = a1
      + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__batchPirParams;
  swift_beginAccess();
  uint64_t v39 = v49;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v38, v49, &demangling cache variable for type metadata for AspirePirBatchPirParameters?);
  uint64_t v40 = v47;
  swift_beginAccess();
  outlined assign with take of AMDPbHEConfig.OneOf_Config?(v39, v40, &demangling cache variable for type metadata for AspirePirBatchPirParameters?);
  swift_endAccess();
  uint64_t v41 = a1
      + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__pirShardConfigs;
  swift_beginAccess();
  uint64_t v42 = v50;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v41, v50, &demangling cache variable for type metadata for AspireApiPIRShardConfigs?);
  swift_release();
  uint64_t v43 = v48;
  swift_beginAccess();
  outlined assign with take of AMDPbHEConfig.OneOf_Config?(v42, v43, &demangling cache variable for type metadata for AspireApiPIRShardConfigs?);
  swift_endAccess();
  return v1;
}

uint64_t AspireApiPIRConfig._StorageClass.__deallocating_deinit()
{
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v0+ OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__encryptionParameters, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  swift_bridgeObjectRelease();
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v0+ OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__keywordPirParams, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  outlined consume of Data._Representation(*(void *)(v0+ OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__evaluationKeyConfigHash), *(void *)(v0+ OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__evaluationKeyConfigHash+ 8));
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v0+ OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__batchPirParams, &demangling cache variable for type metadata for AspirePirBatchPirParameters?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v0+ OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__pirShardConfigs, &demangling cache variable for type metadata for AspireApiPIRShardConfigs?);
  return swift_deallocClassInstance();
}

uint64_t AspireApiPIRConfig.decodeMessage<A>(decoder:)()
{
  uint64_t v1 = *(int *)(type metadata accessor for AspireApiPIRConfig(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspireApiPIRConfig._StorageClass(0);
    swift_allocObject();
    uint64_t v2 = swift_retain();
    *(void *)(v0 + v1) = AspireApiPIRConfig._StorageClass.init(copying:)(v2);
    swift_release();
  }
  swift_retain();
  closure #1 in AspireApiPIRConfig.decodeMessage<A>(decoder:)();
  return swift_release();
}

uint64_t closure #1 in AspireApiPIRConfig.decodeMessage<A>(decoder:)()
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0) {
      return result;
    }
    switch(result)
    {
      case 1:
        closure #1 in closure #1 in AspireApiPIRConfig.decodeMessage<A>(decoder:)();
        break;
      case 2:
        closure #2 in closure #1 in AspireApiPIRConfig.decodeMessage<A>(decoder:)();
        break;
      case 3:
        closure #3 in closure #1 in AspireApiPIRConfig.decodeMessage<A>(decoder:)();
        break;
      case 4:
        closure #4 in closure #1 in AspireApiPIRConfig.decodeMessage<A>(decoder:)();
        break;
      case 5:
        closure #5 in closure #1 in AspireApiPIRConfig.decodeMessage<A>(decoder:)();
        break;
      case 6:
        closure #6 in closure #1 in AspireApiPIRConfig.decodeMessage<A>(decoder:)();
        break;
      case 9:
        closure #7 in closure #1 in AspireApiPIRConfig.decodeMessage<A>(decoder:)();
        break;
      case 10:
        closure #8 in closure #1 in AspireApiPIRConfig.decodeMessage<A>(decoder:)();
        break;
      default:
        continue;
    }
  }
}

uint64_t closure #1 in closure #1 in AspireApiPIRConfig.decodeMessage<A>(decoder:)()
{
  return swift_endAccess();
}

uint64_t closure #2 in closure #1 in AspireApiPIRConfig.decodeMessage<A>(decoder:)()
{
  return swift_endAccess();
}

uint64_t closure #3 in closure #1 in AspireApiPIRConfig.decodeMessage<A>(decoder:)()
{
  return swift_endAccess();
}

uint64_t closure #4 in closure #1 in AspireApiPIRConfig.decodeMessage<A>(decoder:)()
{
  return swift_endAccess();
}

uint64_t closure #5 in closure #1 in AspireApiPIRConfig.decodeMessage<A>(decoder:)()
{
  return swift_endAccess();
}

uint64_t closure #6 in closure #1 in AspireApiPIRConfig.decodeMessage<A>(decoder:)()
{
  return swift_endAccess();
}

uint64_t closure #7 in closure #1 in AspireApiPIRConfig.decodeMessage<A>(decoder:)()
{
  return swift_endAccess();
}

uint64_t closure #8 in closure #1 in AspireApiPIRConfig.decodeMessage<A>(decoder:)()
{
  return swift_endAccess();
}

uint64_t AspireApiPIRConfig.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for AspireApiPIRConfig(0);
  uint64_t v7 = swift_retain();
  closure #1 in AspireApiPIRConfig.traverse<A>(visitor:)(v7, a1, a2, a3);
  uint64_t result = swift_release();
  if (!v3) {
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in AspireApiPIRConfig.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = closure #1 in closure #1 in AspireApiPIRConfig.traverse<A>(visitor:)(a1, a2, a3, a4);
  if (!v4)
  {
    uint64_t v10 = a1
        + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__shardConfigs;
    swift_beginAccess();
    if (*(void *)(*(void *)v10 + 16))
    {
      type metadata accessor for AspireApiPIRShardConfig(0);
      _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiPIRShardConfig and conformance AspireApiPIRShardConfig, (void (*)(uint64_t))type metadata accessor for AspireApiPIRShardConfig);
      swift_bridgeObjectRetain();
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
      swift_bridgeObjectRelease();
    }
    closure #2 in closure #1 in AspireApiPIRConfig.traverse<A>(visitor:)(a1, a2, a3, a4);
    uint64_t v11 = (void *)(a1
                   + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__algorithm);
    swift_beginAccess();
    if (*v11)
    {
      lazy protocol witness table accessor for type AspirePirPirAlgorithm and conformance AspirePirPirAlgorithm();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    uint64_t v12 = (void *)(a1
                   + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__batchSize);
    swift_beginAccess();
    if (*v12) {
      dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
    }
    uint64_t v13 = (uint64_t *)(a1
                    + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__evaluationKeyConfigHash);
    swift_beginAccess();
    uint64_t v14 = *v13;
    unint64_t v15 = v13[1];
    switch(v15 >> 62)
    {
      case 1uLL:
        uint64_t v16 = (int)v14;
        uint64_t v17 = v14 >> 32;
        goto LABEL_13;
      case 2uLL:
        uint64_t v16 = *(void *)(v14 + 16);
        uint64_t v17 = *(void *)(v14 + 24);
LABEL_13:
        if (v16 != v17) {
          goto LABEL_14;
        }
        goto LABEL_15;
      case 3uLL:
        goto LABEL_15;
      default:
        if ((v15 & 0xFF000000000000) == 0) {
          goto LABEL_15;
        }
LABEL_14:
        outlined copy of Data._Representation(v14, v15);
        dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
        outlined consume of Data._Representation(v14, v15);
LABEL_15:
        closure #3 in closure #1 in AspireApiPIRConfig.traverse<A>(visitor:)(a1, a2, a3, a4);
        uint64_t result = closure #4 in closure #1 in AspireApiPIRConfig.traverse<A>(visitor:)(a1, a2, a3, a4);
        break;
    }
  }
  return result;
}

uint64_t closure #1 in closure #1 in AspireApiPIRConfig.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AspireHeEncryptionParameters(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__encryptionParameters;
  swift_beginAccess();
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v12, (uint64_t)v7, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v7, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  }
  outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v7, (uint64_t)v11, type metadata accessor for AspireHeEncryptionParameters);
  _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type AspireHeEncryptionParameters and conformance AspireHeEncryptionParameters, (void (*)(uint64_t))type metadata accessor for AspireHeEncryptionParameters);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v11, type metadata accessor for AspireHeEncryptionParameters);
}

uint64_t closure #2 in closure #1 in AspireApiPIRConfig.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AspirePirKeywordPirParameters(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__keywordPirParams;
  swift_beginAccess();
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v12, (uint64_t)v7, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v7, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  }
  outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v7, (uint64_t)v11, type metadata accessor for AspirePirKeywordPirParameters);
  _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspirePirKeywordPirParameters and conformance AspirePirKeywordPirParameters, (void (*)(uint64_t))type metadata accessor for AspirePirKeywordPirParameters);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v11, type metadata accessor for AspirePirKeywordPirParameters);
}

uint64_t closure #3 in closure #1 in AspireApiPIRConfig.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirBatchPirParameters?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AspirePirBatchPirParameters(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__batchPirParams;
  swift_beginAccess();
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v12, (uint64_t)v7, &demangling cache variable for type metadata for AspirePirBatchPirParameters?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v7, &demangling cache variable for type metadata for AspirePirBatchPirParameters?);
  }
  outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v7, (uint64_t)v11, type metadata accessor for AspirePirBatchPirParameters);
  _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspirePirBatchPirParameters and conformance AspirePirBatchPirParameters, (void (*)(uint64_t))type metadata accessor for AspirePirBatchPirParameters);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v11, type metadata accessor for AspirePirBatchPirParameters);
}

uint64_t closure #4 in closure #1 in AspireApiPIRConfig.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiPIRShardConfigs?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AspireApiPIRShardConfigs(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__pirShardConfigs;
  swift_beginAccess();
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v12, (uint64_t)v7, &demangling cache variable for type metadata for AspireApiPIRShardConfigs?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v7, &demangling cache variable for type metadata for AspireApiPIRShardConfigs?);
  }
  outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v7, (uint64_t)v11, type metadata accessor for AspireApiPIRShardConfigs);
  _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiPIRShardConfigs and conformance AspireApiPIRShardConfigs, (void (*)(uint64_t))type metadata accessor for AspireApiPIRShardConfigs);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v11, type metadata accessor for AspireApiPIRShardConfigs);
}

BOOL closure #1 in static AspireApiPIRConfig.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v138 = a2;
  uint64_t v119 = type metadata accessor for AspireApiPIRShardConfigs(0);
  uint64_t v125 = *(void *)(v119 - 8);
  MEMORY[0x270FA5388](v119);
  uint64_t v115 = (uint64_t)&v114 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v118 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireApiPIRShardConfigs?, AspireApiPIRShardConfigs?));
  MEMORY[0x270FA5388](v118);
  uint64_t v120 = (uint64_t)&v114 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiPIRShardConfigs?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v116 = (uint64_t)&v114 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v126 = (uint64_t)&v114 - v8;
  uint64_t v9 = type metadata accessor for AspirePirBatchPirParameters(0);
  uint64_t v122 = *(void *)(v9 - 8);
  uint64_t v123 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v117 = (uint64_t)&v114 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v121 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspirePirBatchPirParameters?, AspirePirBatchPirParameters?));
  MEMORY[0x270FA5388](v121);
  uint64_t v124 = (uint64_t)&v114 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirBatchPirParameters?);
  MEMORY[0x270FA5388](v12 - 8);
  int64_t v130 = (char *)&v114 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v127 = (uint64_t)&v114 - v15;
  uint64_t v16 = type metadata accessor for AspirePirKeywordPirParameters(0);
  uint64_t v132 = *(void *)(v16 - 8);
  uint64_t v133 = v16;
  MEMORY[0x270FA5388](v16);
  uint64_t v128 = (uint64_t)&v114 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v131 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspirePirKeywordPirParameters?, AspirePirKeywordPirParameters?));
  MEMORY[0x270FA5388](v131);
  uint64_t v134 = (uint64_t)&v114 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  MEMORY[0x270FA5388](v19 - 8);
  uint64_t v129 = (uint64_t)&v114 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  uint64_t v136 = (uint64_t)&v114 - v22;
  uint64_t v23 = type metadata accessor for AspireHeEncryptionParameters(0);
  uint64_t v24 = *(void *)(v23 - 8);
  MEMORY[0x270FA5388](v23);
  uint64_t v135 = (uint64_t)&v114 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireHeEncryptionParameters?, AspireHeEncryptionParameters?));
  uint64_t v27 = v26 - 8;
  MEMORY[0x270FA5388](v26);
  uint64_t v29 = (char *)&v114 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  MEMORY[0x270FA5388](v30 - 8);
  uint64_t v137 = (uint64_t)&v114 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v32);
  unint64_t v34 = (char *)&v114 - v33;
  uint64_t v35 = a1;
  uint64_t v36 = a1
      + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__encryptionParameters;
  swift_beginAccess();
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v36, (uint64_t)v34, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  uint64_t v37 = v138;
  uint64_t v38 = v138
      + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__encryptionParameters;
  swift_beginAccess();
  uint64_t v39 = (uint64_t)&v29[*(int *)(v27 + 56)];
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v34, (uint64_t)v29, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v38, v39, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  uint64_t v40 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v24 + 48);
  if (v40((uint64_t)v29, 1, v23) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v34, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    int v41 = v40(v39, 1, v23);
    uint64_t v42 = v37;
    uint64_t v43 = v35;
    if (v41 == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v29, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      goto LABEL_9;
    }
LABEL_6:
    uint64_t v45 = &demangling cache variable for type metadata for (AspireHeEncryptionParameters?, AspireHeEncryptionParameters?);
    uint64_t v46 = (uint64_t)v29;
LABEL_7:
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v46, v45);
LABEL_39:
    swift_release();
    swift_release();
    return 0;
  }
  uint64_t v43 = v35;
  uint64_t v44 = v137;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v29, v137, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  if (v40(v39, 1, v23) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v34, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0(v44, type metadata accessor for AspireHeEncryptionParameters);
    goto LABEL_6;
  }
  uint64_t v47 = v135;
  outlined init with take of AspireApiEvaluationKeyMetadata(v39, v135, type metadata accessor for AspireHeEncryptionParameters);
  swift_retain();
  uint64_t v42 = v37;
  swift_retain();
  char v48 = static AspireHeEncryptionParameters.== infix(_:_:)(v44, v47);
  _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0(v47, type metadata accessor for AspireHeEncryptionParameters);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v34, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0(v44, type metadata accessor for AspireHeEncryptionParameters);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v29, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  if ((v48 & 1) == 0) {
    goto LABEL_39;
  }
LABEL_9:
  uint64_t v49 = (uint64_t *)(v43
                  + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__shardConfigs);
  swift_beginAccess();
  uint64_t v50 = *v49;
  uint64_t v51 = (uint64_t *)(v42
                  + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__shardConfigs);
  swift_beginAccess();
  uint64_t v52 = *v51;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v53 = specialized static Array<A>.== infix(_:_:)(v50, v52);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v53 & 1) == 0) {
    goto LABEL_39;
  }
  uint64_t v54 = v43
      + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__keywordPirParams;
  swift_beginAccess();
  uint64_t v55 = v136;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v54, v136, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  uint64_t v56 = v42
      + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__keywordPirParams;
  swift_beginAccess();
  uint64_t v57 = v134;
  uint64_t v58 = v134 + *(int *)(v131 + 48);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v55, v134, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v56, v58, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  uint64_t v59 = v133;
  id v60 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v132 + 48);
  if (v60(v57, 1, v133) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v55, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
    int v61 = v60(v58, 1, v59);
    uint64_t v62 = (uint64_t)v130;
    if (v61 == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v57, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
      goto LABEL_17;
    }
    goto LABEL_15;
  }
  uint64_t v63 = v129;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v57, v129, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  int v64 = v60(v58, 1, v59);
  uint64_t v62 = (uint64_t)v130;
  if (v64 == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v136, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0(v63, type metadata accessor for AspirePirKeywordPirParameters);
LABEL_15:
    uint64_t v45 = &demangling cache variable for type metadata for (AspirePirKeywordPirParameters?, AspirePirKeywordPirParameters?);
    uint64_t v46 = v57;
    goto LABEL_7;
  }
  uint64_t v65 = v128;
  outlined init with take of AspireApiEvaluationKeyMetadata(v58, v128, type metadata accessor for AspirePirKeywordPirParameters);
  char v66 = static AspirePirKeywordPirParameters.== infix(_:_:)(v63, v65);
  _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0(v65, type metadata accessor for AspirePirKeywordPirParameters);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v136, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0(v63, type metadata accessor for AspirePirKeywordPirParameters);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v57, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  if ((v66 & 1) == 0) {
    goto LABEL_39;
  }
LABEL_17:
  unsigned int v67 = (uint64_t *)(v43
                  + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__algorithm);
  swift_beginAccess();
  uint64_t v68 = *v67;
  unsigned int v69 = (uint64_t *)(v42
                  + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__algorithm);
  swift_beginAccess();
  uint64_t v70 = *v69;
  if (*((unsigned char *)v69 + 8) == 1)
  {
    if (v70)
    {
      if (v70 == 1)
      {
        if (v68 != 1) {
          goto LABEL_39;
        }
      }
      else if (v68 != 2)
      {
        goto LABEL_39;
      }
    }
    else if (v68)
    {
      goto LABEL_39;
    }
  }
  else if (v68 != v70)
  {
    goto LABEL_39;
  }
  uint64_t v71 = (uint64_t *)(v43
                  + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__batchSize);
  swift_beginAccess();
  uint64_t v72 = *v71;
  uint64_t v73 = (void *)(v42
                 + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__batchSize);
  swift_beginAccess();
  if (v72 != *v73) {
    goto LABEL_39;
  }
  uint64_t v74 = (uint64_t *)(v43
                  + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__evaluationKeyConfigHash);
  swift_beginAccess();
  uint64_t v76 = *v74;
  unint64_t v75 = v74[1];
  int64_t v77 = (uint64_t *)(v42
                  + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__evaluationKeyConfigHash);
  swift_beginAccess();
  uint64_t v79 = *v77;
  unint64_t v78 = v77[1];
  outlined copy of Data._Representation(v76, v75);
  outlined copy of Data._Representation(v79, v78);
  char v80 = specialized static Data.== infix(_:_:)(v76, v75, v79, v78);
  outlined consume of Data._Representation(v79, v78);
  outlined consume of Data._Representation(v76, v75);
  if ((v80 & 1) == 0) {
    goto LABEL_39;
  }
  uint64_t v81 = v43
      + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__batchPirParams;
  swift_beginAccess();
  uint64_t v82 = v81;
  uint64_t v83 = v127;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v82, v127, &demangling cache variable for type metadata for AspirePirBatchPirParameters?);
  uint64_t v84 = v42
      + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__batchPirParams;
  swift_beginAccess();
  uint64_t v85 = v124;
  uint64_t v86 = v124 + *(int *)(v121 + 48);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v83, v124, &demangling cache variable for type metadata for AspirePirBatchPirParameters?);
  uint64_t v87 = v84;
  uint64_t v88 = v85;
  uint64_t v89 = v86;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v87, v86, &demangling cache variable for type metadata for AspirePirBatchPirParameters?);
  int v90 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v122 + 48);
  uint64_t v91 = v85;
  uint64_t v92 = v123;
  if (v90(v91, 1, v123) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v83, &demangling cache variable for type metadata for AspirePirBatchPirParameters?);
    int v93 = v90(v86, 1, v92);
    uint64_t v95 = v125;
    uint64_t v94 = v126;
    if (v93 == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v88, &demangling cache variable for type metadata for AspirePirBatchPirParameters?);
      goto LABEL_36;
    }
    goto LABEL_34;
  }
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v88, v62, &demangling cache variable for type metadata for AspirePirBatchPirParameters?);
  int v96 = v90(v86, 1, v92);
  uint64_t v95 = v125;
  uint64_t v94 = v126;
  if (v96 == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v127, &demangling cache variable for type metadata for AspirePirBatchPirParameters?);
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0(v62, type metadata accessor for AspirePirBatchPirParameters);
LABEL_34:
    uint64_t v45 = &demangling cache variable for type metadata for (AspirePirBatchPirParameters?, AspirePirBatchPirParameters?);
    uint64_t v46 = v88;
    goto LABEL_7;
  }
  uint64_t v97 = v62;
  uint64_t v98 = v117;
  outlined init with take of AspireApiEvaluationKeyMetadata(v89, v117, type metadata accessor for AspirePirBatchPirParameters);
  char v99 = static AspirePirBatchPirParameters.== infix(_:_:)(v97, v98);
  _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0(v98, type metadata accessor for AspirePirBatchPirParameters);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v127, &demangling cache variable for type metadata for AspirePirBatchPirParameters?);
  _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0(v97, type metadata accessor for AspirePirBatchPirParameters);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v88, &demangling cache variable for type metadata for AspirePirBatchPirParameters?);
  if ((v99 & 1) == 0) {
    goto LABEL_39;
  }
LABEL_36:
  uint64_t v100 = v43
       + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__pirShardConfigs;
  swift_beginAccess();
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v100, v94, &demangling cache variable for type metadata for AspireApiPIRShardConfigs?);
  uint64_t v101 = v42
       + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__pirShardConfigs;
  swift_beginAccess();
  uint64_t v102 = v94;
  uint64_t v103 = v120;
  uint64_t v104 = v120 + *(int *)(v118 + 48);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v102, v120, &demangling cache variable for type metadata for AspireApiPIRShardConfigs?);
  uint64_t v105 = v101;
  uint64_t v106 = v103;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v105, v104, &demangling cache variable for type metadata for AspireApiPIRShardConfigs?);
  uint64_t v107 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v95 + 48);
  uint64_t v108 = v103;
  uint64_t v109 = v119;
  if (v107(v108, 1, v119) == 1)
  {
    swift_release();
    swift_release();
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v102, &demangling cache variable for type metadata for AspireApiPIRShardConfigs?);
    if (v107(v104, 1, v109) == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v106, &demangling cache variable for type metadata for AspireApiPIRShardConfigs?);
      return 1;
    }
LABEL_43:
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v106, &demangling cache variable for type metadata for (AspireApiPIRShardConfigs?, AspireApiPIRShardConfigs?));
    return 0;
  }
  uint64_t v111 = v116;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v106, v116, &demangling cache variable for type metadata for AspireApiPIRShardConfigs?);
  if (v107(v104, 1, v109) == 1)
  {
    swift_release();
    swift_release();
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v126, &demangling cache variable for type metadata for AspireApiPIRShardConfigs?);
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0(v111, type metadata accessor for AspireApiPIRShardConfigs);
    goto LABEL_43;
  }
  uint64_t v112 = v115;
  outlined init with take of AspireApiEvaluationKeyMetadata(v104, v115, type metadata accessor for AspireApiPIRShardConfigs);
  char v113 = specialized static AspireApiPIRShardConfigs.== infix(_:_:)(v111, v112);
  swift_release();
  swift_release();
  _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0(v112, type metadata accessor for AspireApiPIRShardConfigs);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v126, &demangling cache variable for type metadata for AspireApiPIRShardConfigs?);
  _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0(v111, type metadata accessor for AspireApiPIRShardConfigs);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v106, &demangling cache variable for type metadata for AspireApiPIRShardConfigs?);
  return (v113 & 1) != 0;
}

Swift::Int AspireApiPIRConfig.hashValue.getter()
{
  return AspireApiEmpty.hashValue.getter((void (*)(void))type metadata accessor for AspireApiPIRConfig, &lazy protocol witness table cache variable for type AspireApiPIRConfig and conformance AspireApiPIRConfig, (void (*)(uint64_t))type metadata accessor for AspireApiPIRConfig);
}

uint64_t protocol witness for Message.init() in conformance AspireApiPIRConfig@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  uint64_t v4 = *(int *)(a1 + 20);
  if (one-time initialization token for defaultInstance != -1) {
    swift_once();
  }
  *(void *)(a2 + v4) = static AspireApiPIRConfig._StorageClass.defaultInstance;
  return swift_retain();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspireApiPIRConfig()
{
  return 0xD000000000000014;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspireApiPIRConfig()
{
  return AspireApiPIRConfig.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspireApiPIRConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireApiPIRConfig.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspireApiPIRConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiPIRConfig and conformance AspireApiPIRConfig, (void (*)(uint64_t))type metadata accessor for AspireApiPIRConfig);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspireApiPIRConfig@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireApiPIRConfig._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspireApiPIRConfig(uint64_t a1)
{
  uint64_t v2 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiPIRConfig and conformance AspireApiPIRConfig, (void (*)(uint64_t))type metadata accessor for AspireApiPIRConfig);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspireApiPIRConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiPIRConfig and conformance AspireApiPIRConfig, (void (*)(uint64_t))type metadata accessor for AspireApiPIRConfig);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

unint64_t static AspireApiPIRShardConfigs.protoMessageName.getter()
{
  return 0xD00000000000001ALL;
}

uint64_t static AspireApiPIRShardConfigs._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireApiPIRShardConfigs._protobuf_nameMap, a1);
}

uint64_t AspireApiPIRShardConfigs.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v4 || (v10 & 1) != 0) {
      break;
    }
    if (result == 1) {
      closure #1 in AspireApiPIRShardConfigs.decodeMessage<A>(decoder:)(v5, a1, a2, a3);
    }
  }
  return result;
}

uint64_t closure #1 in AspireApiPIRShardConfigs.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t v4 = type metadata accessor for AspireApiPIRFixedShardConfig(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v37 = (uint64_t)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v39 = (uint64_t)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiPIRShardConfigs.OneOf_ShardConfigs?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for AspireApiPIRShardConfigs.OneOf_ShardConfigs(0);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiPIRFixedShardConfig?);
  MEMORY[0x270FA5388](v19 - 8);
  uint64_t v40 = (char *)&v34 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v22 = MEMORY[0x270FA5388](v21);
  uint64_t v24 = (char *)&v34 - v23;
  uint64_t v38 = v5;
  uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(v5 + 56);
  uint64_t v41 = v4;
  v25((char *)&v34 - v23, 1, 1, v4, v22);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v46, (uint64_t)v11, &demangling cache variable for type metadata for AspireApiPIRShardConfigs.OneOf_ShardConfigs?);
  uint64_t v35 = v13;
  uint64_t v36 = v12;
  int v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v26 == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v11, &demangling cache variable for type metadata for AspireApiPIRShardConfigs.OneOf_ShardConfigs?);
    uint64_t v27 = v41;
  }
  else
  {
    outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v11, (uint64_t)v18, type metadata accessor for AspireApiPIRShardConfigs.OneOf_ShardConfigs);
    outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v18, (uint64_t)v15, type metadata accessor for AspireApiPIRShardConfigs.OneOf_ShardConfigs);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AspireApiPIRFixedShardConfig?);
    uint64_t v28 = v39;
    outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v15, v39, type metadata accessor for AspireApiPIRFixedShardConfig);
    outlined init with take of AspireApiEvaluationKeyMetadata(v28, (uint64_t)v24, type metadata accessor for AspireApiPIRFixedShardConfig);
    uint64_t v27 = v41;
    ((void (*)(char *, void, uint64_t, uint64_t))v25)(v24, 0, 1, v41);
  }
  uint64_t v29 = v42;
  uint64_t v30 = (uint64_t)v40;
  _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiPIRFixedShardConfig and conformance AspireApiPIRFixedShardConfig, (void (*)(uint64_t))type metadata accessor for AspireApiPIRFixedShardConfig);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v29) {
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AspireApiPIRFixedShardConfig?);
  }
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, v30, &demangling cache variable for type metadata for AspireApiPIRFixedShardConfig?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v38 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AspireApiPIRFixedShardConfig?);
    return outlined destroy of AMDPbHEConfig.OneOf_Config?(v30, &demangling cache variable for type metadata for AspireApiPIRFixedShardConfig?);
  }
  else
  {
    uint64_t v32 = v37;
    outlined init with take of AspireApiEvaluationKeyMetadata(v30, v37, type metadata accessor for AspireApiPIRFixedShardConfig);
    if (v26 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AspireApiPIRFixedShardConfig?);
    uint64_t v33 = v46;
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v46, &demangling cache variable for type metadata for AspireApiPIRShardConfigs.OneOf_ShardConfigs?);
    outlined init with take of AspireApiEvaluationKeyMetadata(v32, v33, type metadata accessor for AspireApiPIRFixedShardConfig);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v35 + 56))(v33, 0, 1, v36);
  }
}

uint64_t AspireApiPIRShardConfigs.traverse<A>(visitor:)()
{
  uint64_t result = closure #1 in AspireApiPIRShardConfigs.traverse<A>(visitor:)(v0);
  if (!v1)
  {
    type metadata accessor for AspireApiPIRShardConfigs(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in AspireApiPIRShardConfigs.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiPIRShardConfigs.OneOf_ShardConfigs?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for AspireApiPIRFixedShardConfig(0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v4, &demangling cache variable for type metadata for AspireApiPIRShardConfigs.OneOf_ShardConfigs?);
  uint64_t v8 = type metadata accessor for AspireApiPIRShardConfigs.OneOf_ShardConfigs(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1) {
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v4, &demangling cache variable for type metadata for AspireApiPIRShardConfigs.OneOf_ShardConfigs?);
  }
  outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v4, (uint64_t)v7, type metadata accessor for AspireApiPIRFixedShardConfig);
  _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiPIRFixedShardConfig and conformance AspireApiPIRFixedShardConfig, (void (*)(uint64_t))type metadata accessor for AspireApiPIRFixedShardConfig);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v7, type metadata accessor for AspireApiPIRFixedShardConfig);
}

Swift::Int AspireApiPIRShardConfigs.hashValue.getter()
{
  return AspireApiEmpty.hashValue.getter((void (*)(void))type metadata accessor for AspireApiPIRShardConfigs, &lazy protocol witness table cache variable for type AspireApiPIRShardConfigs and conformance AspireApiPIRShardConfigs, (void (*)(uint64_t))type metadata accessor for AspireApiPIRShardConfigs);
}

uint64_t protocol witness for Message.init() in conformance AspireApiPIRShardConfigs@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Message.init() in conformance AspireApiResponse(type metadata accessor for AspireApiPIRShardConfigs.OneOf_ShardConfigs, a1);
}

uint64_t protocol witness for Message.init() in conformance AspireApiResponse@<X0>(uint64_t (*a1)(void)@<X2>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(a2, 1, 1, v3);
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspireApiPIRShardConfigs()
{
  return 0xD00000000000001ALL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspireApiPIRShardConfigs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireApiPIRShardConfigs.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspireApiPIRShardConfigs()
{
  return AspireApiPIRShardConfigs.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspireApiPIRShardConfigs(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiPIRShardConfigs and conformance AspireApiPIRShardConfigs, (void (*)(uint64_t))type metadata accessor for AspireApiPIRShardConfigs);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspireApiPIRShardConfigs@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireApiPIRShardConfigs._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspireApiPIRShardConfigs(uint64_t a1)
{
  uint64_t v2 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiPIRShardConfigs and conformance AspireApiPIRShardConfigs, (void (*)(uint64_t))type metadata accessor for AspireApiPIRShardConfigs);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspireApiPIRShardConfigs(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiPIRShardConfigs and conformance AspireApiPIRShardConfigs, (void (*)(uint64_t))type metadata accessor for AspireApiPIRShardConfigs);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

unint64_t static AspireApiPIRFixedShardConfig.protoMessageName.getter()
{
  return 0xD00000000000001ELL;
}

uint64_t static AspireApiPIRFixedShardConfig._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireApiPIRFixedShardConfig._protobuf_nameMap, a1);
}

uint64_t AspireApiPIRFixedShardConfig.decodeMessage<A>(decoder:)()
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0) {
      break;
    }
    if (result == 2)
    {
      dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
    }
    else if (result == 1)
    {
      closure #1 in AspireApiPIRFixedShardConfig.decodeMessage<A>(decoder:)();
    }
  }
  return result;
}

uint64_t closure #1 in AspireApiPIRFixedShardConfig.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t AspireApiPIRFixedShardConfig.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = closure #1 in AspireApiPIRFixedShardConfig.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3);
  if (!v4)
  {
    if (*v3) {
      dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    }
    type metadata accessor for AspireApiPIRFixedShardConfig(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in AspireApiPIRFixedShardConfig.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiPIRShardConfig?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AspireApiPIRShardConfig(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for AspireApiPIRFixedShardConfig(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v12 + 24), (uint64_t)v7, &demangling cache variable for type metadata for AspireApiPIRShardConfig?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v7, &demangling cache variable for type metadata for AspireApiPIRShardConfig?);
  }
  outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v7, (uint64_t)v11, type metadata accessor for AspireApiPIRShardConfig);
  _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiPIRShardConfig and conformance AspireApiPIRShardConfig, (void (*)(uint64_t))type metadata accessor for AspireApiPIRShardConfig);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v11, type metadata accessor for AspireApiPIRShardConfig);
}

Swift::Int AspireApiPIRFixedShardConfig.hashValue.getter()
{
  return AspireApiEmpty.hashValue.getter((void (*)(void))type metadata accessor for AspireApiPIRFixedShardConfig, &lazy protocol witness table cache variable for type AspireApiPIRFixedShardConfig and conformance AspireApiPIRFixedShardConfig, (void (*)(uint64_t))type metadata accessor for AspireApiPIRFixedShardConfig);
}

uint64_t protocol witness for Message.init() in conformance AspireApiPIRFixedShardConfig@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  *a2 = 0;
  UnknownStorage.init()();
  uint64_t v4 = (char *)a2 + *(int *)(a1 + 24);
  uint64_t v5 = type metadata accessor for AspireApiPIRShardConfig(0);
  uint64_t v6 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
  return v6(v4, 1, 1, v5);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspireApiPIRFixedShardConfig()
{
  return 0xD00000000000001ELL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspireApiPIRFixedShardConfig()
{
  return AspireApiPIRFixedShardConfig.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspireApiPIRFixedShardConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireApiPIRFixedShardConfig.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspireApiPIRFixedShardConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiPIRFixedShardConfig and conformance AspireApiPIRFixedShardConfig, (void (*)(uint64_t))type metadata accessor for AspireApiPIRFixedShardConfig);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspireApiPIRFixedShardConfig@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireApiPIRFixedShardConfig._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspireApiPIRFixedShardConfig(uint64_t a1)
{
  uint64_t v2 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiPIRFixedShardConfig and conformance AspireApiPIRFixedShardConfig, (void (*)(uint64_t))type metadata accessor for AspireApiPIRFixedShardConfig);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspireApiPIRFixedShardConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiPIRFixedShardConfig and conformance AspireApiPIRFixedShardConfig, (void (*)(uint64_t))type metadata accessor for AspireApiPIRFixedShardConfig);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

unint64_t static AspireApiPIRRequest.protoMessageName.getter()
{
  return 0xD000000000000015;
}

uint64_t static AspireApiPIRRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireApiPIRRequest._protobuf_nameMap, a1);
}

uint64_t AspireApiPIRRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v11 = v4;
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          uint64_t v12 = v11;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          goto LABEL_5;
        case 2:
          uint64_t v12 = v11;
          closure #2 in AspireApiPIRRequest.decodeMessage<A>(decoder:)();
          goto LABEL_5;
        case 3:
          uint64_t v12 = v11;
          closure #3 in AspireApiPIRRequest.decodeMessage<A>(decoder:)(a1, v5, a2, a3, (void (*)(void))type metadata accessor for AspireApiPIRRequest);
          goto LABEL_5;
        case 4:
          uint64_t v12 = v11;
          dispatch thunk of Decoder.decodeSingularBytesField(value:)();
          goto LABEL_5;
        case 5:
          type metadata accessor for AspireApiPIRRequest(0);
          uint64_t v12 = v11;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_5;
        case 6:
          uint64_t v12 = v11;
          closure #6 in AspireApiPIRRequest.decodeMessage<A>(decoder:)();
LABEL_5:
          uint64_t v11 = v12;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #2 in AspireApiPIRRequest.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t closure #6 in AspireApiPIRRequest.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t AspireApiPIRRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(_DWORD *)v3 || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v4))
  {
    uint64_t result = closure #1 in AspireApiPIRRequest.traverse<A>(visitor:)(v3, a1, a2, a3);
    if (!v4)
    {
      closure #2 in AspireApiPIRRequest.traverse<A>(visitor:)(v3, a1, a2, a3, (uint64_t (*)(void, double))type metadata accessor for AspireApiPIRRequest);
      uint64_t v9 = *(void *)(v3 + 8);
      unint64_t v10 = *(void *)(v3 + 16);
      switch(v10 >> 62)
      {
        case 1uLL:
          if ((int)v9 != v9 >> 32) {
            goto LABEL_10;
          }
          break;
        case 2uLL:
          if (*(void *)(v9 + 16) != *(void *)(v9 + 24)) {
            goto LABEL_10;
          }
          break;
        case 3uLL:
          break;
        default:
          if ((v10 & 0xFF000000000000) != 0) {
LABEL_10:
          }
            dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
          break;
      }
      closure #3 in AspireApiPIRRequest.traverse<A>(visitor:)(v3);
      closure #4 in AspireApiPIRRequest.traverse<A>(visitor:)(v3, a1, a2, a3);
      type metadata accessor for AspireApiPIRRequest(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t closure #1 in AspireApiPIRRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AspirePirEncryptedIndices(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for AspireApiPIRRequest(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v12 + 28), (uint64_t)v7, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v7, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  }
  outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v7, (uint64_t)v11, type metadata accessor for AspirePirEncryptedIndices);
  _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspirePirEncryptedIndices and conformance AspirePirEncryptedIndices, (void (*)(uint64_t))type metadata accessor for AspirePirEncryptedIndices);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v11, type metadata accessor for AspirePirEncryptedIndices);
}

uint64_t closure #3 in AspireApiPIRRequest.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = type metadata accessor for AspireApiPIRRequest(0);
  if (*(void *)(a1 + *(int *)(result + 36) + 8)) {
    return dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #4 in AspireApiPIRRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKey?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AspireApiEvaluationKey(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for AspireApiPIRRequest(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v12 + 40), (uint64_t)v7, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v7, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
  }
  outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v7, (uint64_t)v11, type metadata accessor for AspireApiEvaluationKey);
  _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiEvaluationKey and conformance AspireApiEvaluationKey, (void (*)(uint64_t))type metadata accessor for AspireApiEvaluationKey);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v11, type metadata accessor for AspireApiEvaluationKey);
}

Swift::Int AspireApiPIRRequest.hashValue.getter()
{
  return AspireApiEmpty.hashValue.getter((void (*)(void))type metadata accessor for AspireApiPIRRequest, &lazy protocol witness table cache variable for type AspireApiPIRRequest and conformance AspireApiPIRRequest, (void (*)(uint64_t))type metadata accessor for AspireApiPIRRequest);
}

uint64_t protocol witness for Message.init() in conformance AspireApiPIRRequest@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = 0;
  *(_OWORD *)(a2 + 8) = xmmword_249E85DF0;
  UnknownStorage.init()();
  uint64_t v4 = a2 + a1[7];
  uint64_t v5 = type metadata accessor for AspirePirEncryptedIndices(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v6 = a2 + a1[8];
  uint64_t v7 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  uint64_t v8 = a1[10];
  uint64_t v9 = (void *)(a2 + a1[9]);
  *uint64_t v9 = 0;
  v9[1] = 0;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for AspireApiEvaluationKey(0);
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
  return v12(v10, 1, 1, v11);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspireApiPIRRequest()
{
  return 0xD000000000000015;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspireApiPIRRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireApiPIRRequest.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspireApiPIRRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireApiPIRRequest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspireApiPIRRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiPIRRequest and conformance AspireApiPIRRequest, (void (*)(uint64_t))type metadata accessor for AspireApiPIRRequest);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspireApiPIRRequest@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireApiPIRRequest._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspireApiPIRRequest(uint64_t a1)
{
  uint64_t v2 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiPIRRequest and conformance AspireApiPIRRequest, (void (*)(uint64_t))type metadata accessor for AspireApiPIRRequest);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspireApiPIRRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiPIRRequest and conformance AspireApiPIRRequest, (void (*)(uint64_t))type metadata accessor for AspireApiPIRRequest);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

unint64_t static AspireApiPIRResponse.protoMessageName.getter()
{
  return 0xD000000000000016;
}

uint64_t static AspireApiPIRResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireApiPIRResponse._protobuf_nameMap, a1);
}

uint64_t AspireApiPIRResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireApiEvaluationKeys.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(void))type metadata accessor for AspireHeSerializedCiphertextVec, &lazy protocol witness table cache variable for type AspireHeSerializedCiphertextVec and conformance AspireHeSerializedCiphertextVec, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedCiphertextVec);
}

uint64_t AspireApiPIRResponse.traverse<A>(visitor:)()
{
  if (!*(void *)(*(void *)v0 + 16)
    || (type metadata accessor for AspireHeSerializedCiphertextVec(0),
        _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireHeSerializedCiphertextVec and conformance AspireHeSerializedCiphertextVec, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedCiphertextVec), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
  {
    type metadata accessor for AspireApiPIRResponse(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int AspireApiPIRResponse.hashValue.getter()
{
  return AspireApiEmpty.hashValue.getter((void (*)(void))type metadata accessor for AspireApiPIRResponse, &lazy protocol witness table cache variable for type AspireApiPIRResponse and conformance AspireApiPIRResponse, (void (*)(uint64_t))type metadata accessor for AspireApiPIRResponse);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspireApiPIRResponse()
{
  return 0xD000000000000016;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspireApiPIRResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireApiPIRResponse.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspireApiPIRResponse()
{
  return AspireApiPIRResponse.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspireApiPIRResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiPIRResponse and conformance AspireApiPIRResponse, (void (*)(uint64_t))type metadata accessor for AspireApiPIRResponse);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspireApiPIRResponse@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireApiPIRResponse._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspireApiPIRResponse(uint64_t a1)
{
  uint64_t v2 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiPIRResponse and conformance AspireApiPIRResponse, (void (*)(uint64_t))type metadata accessor for AspireApiPIRResponse);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspireApiPIRResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiPIRResponse and conformance AspireApiPIRResponse, (void (*)(uint64_t))type metadata accessor for AspireApiPIRResponse);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AspireApiPIRResponse(char *a1, char *a2)
{
  return specialized static AspireApiEvaluationKeys.== infix(_:_:)(a1, a2, (uint64_t (*)(void, void, double))specialized static Array<A>.== infix(_:_:), type metadata accessor for AspireApiPIRResponse) & 1;
}

unint64_t static AspireApiPECConfig.protoMessageName.getter()
{
  return 0xD000000000000014;
}

uint64_t static AspireApiPECConfig._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireApiPECConfig._protobuf_nameMap, a1);
}

uint64_t AspireApiPECConfig.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          closure #1 in AspireApiPECConfig.decodeMessage<A>(decoder:)();
          break;
        case 2:
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
          break;
        case 3:
          closure #3 in AspireApiPECConfig.decodeMessage<A>(decoder:)();
          break;
        case 4:
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          break;
        case 5:
          lazy protocol witness table accessor for type AspireSimilaritySimilarityMetric and conformance AspireSimilaritySimilarityMetric();
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          break;
        case 6:
          dispatch thunk of Decoder.decodeSingularBytesField(value:)();
          break;
        case 7:
          dispatch thunk of Decoder.decodeRepeatedUInt64Field(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #1 in AspireApiPECConfig.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t closure #3 in AspireApiPECConfig.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t AspireApiPECConfig.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = closure #1 in AspireApiPECConfig.traverse<A>(visitor:)(v3, a1, a2, a3);
  if (!v4)
  {
    if (*(void *)v3) {
      dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
    }
    closure #2 in AspireApiPECConfig.traverse<A>(visitor:)(v3, a1, a2, a3);
    if (*(_DWORD *)(v3 + 8)) {
      dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v3 + 24) & 1) == 0 && *(void *)(v3 + 16))
    {
      lazy protocol witness table accessor for type AspireSimilaritySimilarityMetric and conformance AspireSimilaritySimilarityMetric();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    uint64_t v9 = *(void *)(v3 + 32);
    unint64_t v10 = *(void *)(v3 + 40);
    switch(v10 >> 62)
    {
      case 1uLL:
        uint64_t v11 = (int)v9;
        uint64_t v12 = v9 >> 32;
        goto LABEL_14;
      case 2uLL:
        uint64_t v11 = *(void *)(v9 + 16);
        uint64_t v12 = *(void *)(v9 + 24);
LABEL_14:
        if (v11 != v12) {
          goto LABEL_15;
        }
        goto LABEL_16;
      case 3uLL:
        goto LABEL_16;
      default:
        if ((v10 & 0xFF000000000000) == 0) {
          goto LABEL_16;
        }
LABEL_15:
        dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
LABEL_16:
        if (*(void *)(*(void *)(v3 + 48) + 16)) {
          dispatch thunk of Visitor.visitPackedUInt64Field(value:fieldNumber:)();
        }
        type metadata accessor for AspireApiPECConfig(0);
        uint64_t result = UnknownStorage.traverse<A>(visitor:)();
        break;
    }
  }
  return result;
}

uint64_t closure #1 in AspireApiPECConfig.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AspireHeEncryptionParameters(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for AspireApiPECConfig(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v12 + 40), (uint64_t)v7, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v7, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  }
  outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v7, (uint64_t)v11, type metadata accessor for AspireHeEncryptionParameters);
  _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type AspireHeEncryptionParameters and conformance AspireHeEncryptionParameters, (void (*)(uint64_t))type metadata accessor for AspireHeEncryptionParameters);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v11, type metadata accessor for AspireHeEncryptionParameters);
}

uint64_t closure #2 in AspireApiPECConfig.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for AspireApiPECConfig(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v12 + 44), (uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  }
  outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v7, (uint64_t)v11, type metadata accessor for AspireSimilarityPlaintextPacking);
  _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireSimilarityPlaintextPacking and conformance AspireSimilarityPlaintextPacking, (void (*)(uint64_t))type metadata accessor for AspireSimilarityPlaintextPacking);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v11, type metadata accessor for AspireSimilarityPlaintextPacking);
}

Swift::Int AspireApiPECConfig.hashValue.getter()
{
  return AspireApiEmpty.hashValue.getter((void (*)(void))type metadata accessor for AspireApiPECConfig, &lazy protocol witness table cache variable for type AspireApiPECConfig and conformance AspireApiPECConfig, (void (*)(uint64_t))type metadata accessor for AspireApiPECConfig);
}

uint64_t protocol witness for Message.init() in conformance AspireApiPECConfig@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(unsigned char *)(a2 + 24) = 1;
  *(_OWORD *)(a2 + 32) = xmmword_249E85DF0;
  *(void *)(a2 + 48) = MEMORY[0x263F8EE78];
  UnknownStorage.init()();
  uint64_t v4 = a2 + *(int *)(a1 + 40);
  uint64_t v5 = type metadata accessor for AspireHeEncryptionParameters(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v6 = a2 + *(int *)(a1 + 44);
  uint64_t v7 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
  return v8(v6, 1, 1, v7);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspireApiPECConfig()
{
  return 0xD000000000000014;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance AspireApiPECConfig@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 36);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance AspireApiPECConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 36);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance AspireApiPECConfig())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspireApiPECConfig()
{
  return AspireApiPECConfig.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspireApiPECConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireApiPECConfig.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspireApiPECConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiPECConfig and conformance AspireApiPECConfig, (void (*)(uint64_t))type metadata accessor for AspireApiPECConfig);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspireApiPECConfig@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireApiPECConfig._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspireApiPECConfig(uint64_t a1)
{
  uint64_t v2 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiPECConfig and conformance AspireApiPECConfig, (void (*)(uint64_t))type metadata accessor for AspireApiPECConfig);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspireApiPECConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiPECConfig and conformance AspireApiPECConfig, (void (*)(uint64_t))type metadata accessor for AspireApiPECConfig);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

unint64_t static AspireApiPECRequest.protoMessageName.getter()
{
  return 0xD000000000000015;
}

uint64_t static AspireApiPECRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireApiPECRequest._protobuf_nameMap, a1);
}

uint64_t AspireApiPECRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v11 = v4;
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          uint64_t v12 = v11;
          dispatch thunk of Decoder.decodeRepeatedUInt32Field(value:)();
          goto LABEL_5;
        case 2:
          type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
          _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireSimilaritySerializedCiphertextMatrix and conformance AspireSimilaritySerializedCiphertextMatrix, (void (*)(uint64_t))type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
          uint64_t v12 = v11;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_5;
        case 3:
          uint64_t v12 = v11;
          closure #3 in AspireApiPIRRequest.decodeMessage<A>(decoder:)(a1, v5, a2, a3, (void (*)(void))type metadata accessor for AspireApiPECRequest);
          goto LABEL_5;
        case 4:
          uint64_t v12 = v11;
          dispatch thunk of Decoder.decodeSingularBytesField(value:)();
          goto LABEL_5;
        case 5:
          uint64_t v12 = v11;
          closure #5 in AspireApiPECRequest.decodeMessage<A>(decoder:)();
LABEL_5:
          uint64_t v11 = v12;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #3 in AspireApiPIRRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void))
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t closure #5 in AspireApiPECRequest.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t AspireApiPECRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  if (!*(void *)(*v5 + 16)
    || (uint64_t result = dispatch thunk of Visitor.visitPackedUInt32Field(value:fieldNumber:)(), !v4))
  {
    if (!*(void *)(v5[1] + 16)
      || (type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0),
          _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireSimilaritySerializedCiphertextMatrix and conformance AspireSimilaritySerializedCiphertextMatrix, (void (*)(uint64_t))type metadata accessor for AspireSimilaritySerializedCiphertextMatrix), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v4))
    {
      uint64_t result = closure #2 in AspireApiPIRRequest.traverse<A>(visitor:)((uint64_t)v5, a1, a2, a3, (uint64_t (*)(void, double))type metadata accessor for AspireApiPECRequest);
      if (!v4)
      {
        uint64_t v10 = v5[2];
        unint64_t v11 = v5[3];
        switch(v11 >> 62)
        {
          case 1uLL:
            if ((int)v10 != v10 >> 32) {
              goto LABEL_12;
            }
            break;
          case 2uLL:
            if (*(void *)(v10 + 16) != *(void *)(v10 + 24)) {
              goto LABEL_12;
            }
            break;
          case 3uLL:
            break;
          default:
            if ((v11 & 0xFF000000000000) != 0) {
LABEL_12:
            }
              dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
            break;
        }
        closure #2 in AspireApiPECRequest.traverse<A>(visitor:)((uint64_t)v5, a1, a2, a3);
        type metadata accessor for AspireApiPECRequest(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

uint64_t closure #2 in AspireApiPIRRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, double))
{
  v17[3] = a4;
  v17[1] = a3;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  uint64_t v11 = *(void *)(v10 - 8);
  double v12 = MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = a5(0, v12);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v15 + 32), (uint64_t)v9, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1) {
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v9, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  }
  outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v9, (uint64_t)v14, type metadata accessor for AspireApiEvaluationKeyMetadata);
  _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiEvaluationKeyMetadata and conformance AspireApiEvaluationKeyMetadata, (void (*)(uint64_t))type metadata accessor for AspireApiEvaluationKeyMetadata);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v14, type metadata accessor for AspireApiEvaluationKeyMetadata);
}

uint64_t closure #2 in AspireApiPECRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKey?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AspireApiEvaluationKey(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for AspireApiPECRequest(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v12 + 36), (uint64_t)v7, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v7, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
  }
  outlined init with take of AspireApiEvaluationKeyMetadata((uint64_t)v7, (uint64_t)v11, type metadata accessor for AspireApiEvaluationKey);
  _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiEvaluationKey and conformance AspireApiEvaluationKey, (void (*)(uint64_t))type metadata accessor for AspireApiEvaluationKey);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v11, type metadata accessor for AspireApiEvaluationKey);
}

Swift::Int AspireApiPECRequest.hashValue.getter()
{
  return AspireApiEmpty.hashValue.getter((void (*)(void))type metadata accessor for AspireApiPECRequest, &lazy protocol witness table cache variable for type AspireApiPECRequest and conformance AspireApiPECRequest, (void (*)(uint64_t))type metadata accessor for AspireApiPECRequest);
}

uint64_t protocol witness for Message.init() in conformance AspireApiPECRequest@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = MEMORY[0x263F8EE78];
  *(void *)a2 = MEMORY[0x263F8EE78];
  *(void *)(a2 + 8) = v4;
  *(_OWORD *)(a2 + 16) = xmmword_249E85DF0;
  UnknownStorage.init()();
  uint64_t v5 = a2 + *(int *)(a1 + 32);
  uint64_t v6 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  uint64_t v7 = a2 + *(int *)(a1 + 36);
  uint64_t v8 = type metadata accessor for AspireApiEvaluationKey(0);
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56);
  return v9(v7, 1, 1, v8);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspireApiPECRequest()
{
  return 0xD000000000000015;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspireApiPECRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireApiPECRequest.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspireApiPECRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireApiPECRequest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspireApiPECRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiPECRequest and conformance AspireApiPECRequest, (void (*)(uint64_t))type metadata accessor for AspireApiPECRequest);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspireApiPECRequest@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireApiPECRequest._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspireApiPECRequest(uint64_t a1)
{
  uint64_t v2 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiPECRequest and conformance AspireApiPECRequest, (void (*)(uint64_t))type metadata accessor for AspireApiPECRequest);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspireApiPECRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiPECRequest and conformance AspireApiPECRequest, (void (*)(uint64_t))type metadata accessor for AspireApiPECRequest);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

unint64_t static AspireApiPECShardResponse.protoMessageName.getter()
{
  return 0xD00000000000001BLL;
}

uint64_t static AspireApiPECShardResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireApiPECShardResponse._protobuf_nameMap, a1);
}

uint64_t AspireApiPECShardResponse.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while (1)
    {
      if (v2) {
        return result;
      }
      if (result == 3) {
        break;
      }
      if (result == 2)
      {
        uint64_t v4 = v3;
        dispatch thunk of Decoder.decodeRepeatedUInt64Field(value:)();
        goto LABEL_5;
      }
      if (result == 1)
      {
        type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
        _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireSimilaritySerializedCiphertextMatrix and conformance AspireSimilaritySerializedCiphertextMatrix, (void (*)(uint64_t))type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
        uint64_t v4 = v3;
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
        goto LABEL_5;
      }
LABEL_6:
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    uint64_t v4 = v3;
    dispatch thunk of Decoder.decodeRepeatedBytesField(value:)();
LABEL_5:
    uint64_t v3 = v4;
    goto LABEL_6;
  }
  return result;
}

uint64_t AspireApiPECShardResponse.traverse<A>(visitor:)()
{
  if (!*(void *)(*v0 + 16)
    || (type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0),
        _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireSimilaritySerializedCiphertextMatrix and conformance AspireSimilaritySerializedCiphertextMatrix, (void (*)(uint64_t))type metadata accessor for AspireSimilaritySerializedCiphertextMatrix), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
  {
    if (!*(void *)(v0[1] + 16)
      || (uint64_t result = dispatch thunk of Visitor.visitPackedUInt64Field(value:fieldNumber:)(), !v1))
    {
      if (!*(void *)(v0[2] + 16)
        || (uint64_t result = dispatch thunk of Visitor.visitRepeatedBytesField(value:fieldNumber:)(), !v1))
      {
        type metadata accessor for AspireApiPECShardResponse(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

Swift::Int AspireApiPECShardResponse.hashValue.getter()
{
  return AspireApiEmpty.hashValue.getter((void (*)(void))type metadata accessor for AspireApiPECShardResponse, &lazy protocol witness table cache variable for type AspireApiPECShardResponse and conformance AspireApiPECShardResponse, (void (*)(uint64_t))type metadata accessor for AspireApiPECShardResponse);
}

uint64_t protocol witness for Message.init() in conformance AspireApiPECShardResponse@<X0>(void *a1@<X8>)
{
  uint64_t v1 = MEMORY[0x263F8EE78];
  *a1 = MEMORY[0x263F8EE78];
  a1[1] = v1;
  a1[2] = v1;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspireApiPECShardResponse()
{
  return 0xD00000000000001BLL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspireApiPECShardResponse()
{
  return AspireApiPECShardResponse.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspireApiPECShardResponse()
{
  return AspireApiPECShardResponse.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspireApiPECShardResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiPECShardResponse and conformance AspireApiPECShardResponse, (void (*)(uint64_t))type metadata accessor for AspireApiPECShardResponse);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspireApiPECShardResponse@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireApiPECShardResponse._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspireApiPECShardResponse(uint64_t a1)
{
  uint64_t v2 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiPECShardResponse and conformance AspireApiPECShardResponse, (void (*)(uint64_t))type metadata accessor for AspireApiPECShardResponse);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspireApiPECShardResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiPECShardResponse and conformance AspireApiPECShardResponse, (void (*)(uint64_t))type metadata accessor for AspireApiPECShardResponse);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

unint64_t static AspireApiPECResponse.protoMessageName.getter()
{
  return 0xD000000000000016;
}

uint64_t static AspireApiPECResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireApiPECResponse._protobuf_nameMap, a1);
}

uint64_t AspireApiPECResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireApiEvaluationKeys.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(void))type metadata accessor for AspireApiPECShardResponse, &lazy protocol witness table cache variable for type AspireApiPECShardResponse and conformance AspireApiPECShardResponse, (void (*)(uint64_t))type metadata accessor for AspireApiPECShardResponse);
}

uint64_t AspireApiEvaluationKeys.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void), unint64_t *a5, void (*a6)(uint64_t))
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v6)
  {
    while ((v10 & 1) == 0)
    {
      if (result == 1)
      {
        a4(0);
        _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(a5, a6);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t AspireApiPECResponse.traverse<A>(visitor:)()
{
  if (!*(void *)(*(void *)v0 + 16)
    || (type metadata accessor for AspireApiPECShardResponse(0),
        _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiPECShardResponse and conformance AspireApiPECShardResponse, (void (*)(uint64_t))type metadata accessor for AspireApiPECShardResponse), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
  {
    type metadata accessor for AspireApiPECResponse(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int AspireApiPECResponse.hashValue.getter()
{
  return AspireApiEmpty.hashValue.getter((void (*)(void))type metadata accessor for AspireApiPECResponse, &lazy protocol witness table cache variable for type AspireApiPECResponse and conformance AspireApiPECResponse, (void (*)(uint64_t))type metadata accessor for AspireApiPECResponse);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspireApiPECResponse()
{
  return 0xD000000000000016;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspireApiPECResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireApiPECResponse.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspireApiPECResponse()
{
  return AspireApiPECResponse.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspireApiPECResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiPECResponse and conformance AspireApiPECResponse, (void (*)(uint64_t))type metadata accessor for AspireApiPECResponse);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspireApiPECResponse@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireApiPECResponse._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspireApiPECResponse(uint64_t a1)
{
  uint64_t v2 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiPECResponse and conformance AspireApiPECResponse, (void (*)(uint64_t))type metadata accessor for AspireApiPECResponse);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspireApiPECResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiPECResponse and conformance AspireApiPECResponse, (void (*)(uint64_t))type metadata accessor for AspireApiPECResponse);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AspireApiPECResponse(char *a1, char *a2)
{
  return specialized static AspireApiEvaluationKeys.== infix(_:_:)(a1, a2, (uint64_t (*)(void, void, double))specialized static Array<A>.== infix(_:_:), type metadata accessor for AspireApiPECResponse) & 1;
}

unint64_t static AspireApiOPRFRequest.protoMessageName.getter()
{
  return 0xD000000000000016;
}

uint64_t static AspireApiOPRFRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireApiOPRFRequest._protobuf_nameMap, a1);
}

uint64_t AspireApiOPRFRequest.decodeMessage<A>(decoder:)()
{
  return AspireApiOPRFRequest.decodeMessage<A>(decoder:)();
}

{
  uint64_t v0;
  uint64_t result;
  char v2;

  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2 || result == 1) {
        dispatch thunk of Decoder.decodeSingularBytesField(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t AspireApiOPRFRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireApiOPRFRequest.traverse<A>(visitor:)(a1, a2, a3, (void (*)(void))type metadata accessor for AspireApiOPRFRequest);
}

Swift::Int AspireApiOPRFRequest.hashValue.getter()
{
  return AspireApiEmpty.hashValue.getter((void (*)(void))type metadata accessor for AspireApiOPRFRequest, &lazy protocol witness table cache variable for type AspireApiOPRFRequest and conformance AspireApiOPRFRequest, (void (*)(uint64_t))type metadata accessor for AspireApiOPRFRequest);
}

uint64_t protocol witness for Message.init() in conformance AspireApiOPRFRequest@<X0>(_OWORD *a1@<X8>)
{
  *a1 = xmmword_249E85DF0;
  a1[1] = xmmword_249E85DF0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspireApiOPRFRequest()
{
  return 0xD000000000000016;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspireApiOPRFRequest()
{
  return AspireApiOPRFRequest.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspireApiOPRFRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireApiOPRFRequest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspireApiOPRFRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiOPRFRequest and conformance AspireApiOPRFRequest, (void (*)(uint64_t))type metadata accessor for AspireApiOPRFRequest);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspireApiOPRFRequest@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireApiOPRFRequest._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspireApiOPRFRequest(uint64_t a1)
{
  uint64_t v2 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiOPRFRequest and conformance AspireApiOPRFRequest, (void (*)(uint64_t))type metadata accessor for AspireApiOPRFRequest);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspireApiOPRFRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiOPRFRequest and conformance AspireApiOPRFRequest, (void (*)(uint64_t))type metadata accessor for AspireApiOPRFRequest);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AspireApiOPRFRequest(uint64_t a1, uint64_t a2)
{
  return specialized static AspireApiOPRFResponse.== infix(_:_:)(a1, a2, type metadata accessor for AspireApiOPRFRequest) & 1;
}

unint64_t static AspireApiOPRFResponse.protoMessageName.getter()
{
  return 0xD000000000000017;
}

uint64_t static AspireApiOPRFResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireApiOPRFResponse._protobuf_nameMap, a1);
}

uint64_t AspireApiOPRFResponse.decodeMessage<A>(decoder:)()
{
  return AspireApiOPRFRequest.decodeMessage<A>(decoder:)();
}

uint64_t AspireApiOPRFResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireApiOPRFRequest.traverse<A>(visitor:)(a1, a2, a3, (void (*)(void))type metadata accessor for AspireApiOPRFResponse);
}

uint64_t AspireApiOPRFRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  uint64_t v6 = *v4;
  unint64_t v7 = v4[1];
  switch(v7 >> 62)
  {
    case 1uLL:
      if ((int)v6 != v6 >> 32) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 2uLL:
      if (*(void *)(v6 + 16) != *(void *)(v6 + 24)) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 3uLL:
      goto LABEL_8;
    default:
      if ((v7 & 0xFF000000000000) == 0) {
        goto LABEL_8;
      }
LABEL_7:
      uint64_t result = dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
      if (!v5)
      {
LABEL_8:
        uint64_t v10 = v4[2];
        unint64_t v11 = v4[3];
        switch(v11 >> 62)
        {
          case 1uLL:
            if ((int)v10 != v10 >> 32) {
              goto LABEL_14;
            }
            goto LABEL_15;
          case 2uLL:
            if (*(void *)(v10 + 16) != *(void *)(v10 + 24)) {
              goto LABEL_14;
            }
            goto LABEL_15;
          case 3uLL:
            goto LABEL_15;
          default:
            if ((v11 & 0xFF000000000000) == 0) {
              goto LABEL_15;
            }
LABEL_14:
            uint64_t result = dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
            if (!v5)
            {
LABEL_15:
              a4(0);
              uint64_t result = UnknownStorage.traverse<A>(visitor:)();
            }
            break;
        }
      }
      return result;
  }
}

Swift::Int AspireApiOPRFResponse.hashValue.getter()
{
  return AspireApiEmpty.hashValue.getter((void (*)(void))type metadata accessor for AspireApiOPRFResponse, &lazy protocol witness table cache variable for type AspireApiOPRFResponse and conformance AspireApiOPRFResponse, (void (*)(uint64_t))type metadata accessor for AspireApiOPRFResponse);
}

Swift::Int AspireApiEmpty.hashValue.getter(void (*a1)(void), unint64_t *a2, void (*a3)(uint64_t))
{
  return Hasher._finalize()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspireApiOPRFResponse()
{
  return 0xD000000000000017;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspireApiOPRFResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireApiOPRFResponse.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspireApiOPRFResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiOPRFResponse and conformance AspireApiOPRFResponse, (void (*)(uint64_t))type metadata accessor for AspireApiOPRFResponse);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspireApiOPRFResponse@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireApiOPRFResponse._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspireApiOPRFResponse(uint64_t a1)
{
  uint64_t v2 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiOPRFResponse and conformance AspireApiOPRFResponse, (void (*)(uint64_t))type metadata accessor for AspireApiOPRFResponse);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspireApiOPRFResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiOPRFResponse and conformance AspireApiOPRFResponse, (void (*)(uint64_t))type metadata accessor for AspireApiOPRFResponse);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AspireApiOPRFResponse(uint64_t a1, uint64_t a2)
{
  return specialized static AspireApiOPRFResponse.== infix(_:_:)(a1, a2, type metadata accessor for AspireApiOPRFResponse) & 1;
}

uint64_t specialized static AspireApiEvaluationKeyMetadata.== infix(_:_:)(char *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  unint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v16 - v9;
  if (*(void *)a1 == *(void *)a2
    && (specialized static Data.== infix(_:_:)(*((void *)a1 + 1), *((void *)a1 + 2), *((void *)a2 + 1), *((void *)a2 + 2)) & 1) != 0)
  {
    uint64_t v11 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v12(v10, &a1[*(int *)(v11 + 24)], v4);
    v12(v7, &a2[*(int *)(v11 + 24)], v4);
    _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
    v14(v7, v4);
    v14(v10, v4);
  }
  else
  {
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t specialized static AspireApiPECShardResponse.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  unint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v16 - v9;
  if ((specialized static Array<A>.== infix(_:_:)(*(void *)a1, *(void *)a2) & 1) != 0
    && specialized static Array<A>.== infix(_:_:)(*(void **)(a1 + 8), *(void **)(a2 + 8))
    && (specialized static Array<A>.== infix(_:_:)(*(void *)(a1 + 16), *(void *)(a2 + 16)) & 1) != 0)
  {
    uint64_t v11 = type metadata accessor for AspireApiPECShardResponse(0);
    uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v12(v10, a1 + *(int *)(v11 + 28), v4);
    v12(v7, a2 + *(int *)(v11 + 28), v4);
    _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
    v14(v7, v4);
    v14(v10, v4);
  }
  else
  {
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t specialized static AspireApiPIRShardConfigs.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v51 = *(void *)(v4 - 8);
  uint64_t v52 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v50 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v49 = (char *)&v43 - v7;
  uint64_t v8 = type metadata accessor for AspireApiPIRFixedShardConfig(0);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v46 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireApiPIRShardConfigs.OneOf_ShardConfigs, AspireApiPIRShardConfigs.OneOf_ShardConfigs));
  MEMORY[0x270FA5388](v43);
  uint64_t v44 = (uint64_t)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for AspireApiPIRShardConfigs.OneOf_ShardConfigs(0);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v45 = (uint64_t)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireApiPIRShardConfigs.OneOf_ShardConfigs?, AspireApiPIRShardConfigs.OneOf_ShardConfigs?));
  uint64_t v15 = v14 - 8;
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiPIRShardConfigs.OneOf_ShardConfigs?);
  MEMORY[0x270FA5388](v18 - 8);
  uint64_t v20 = (char *)&v43 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = (char *)&v43 - v22;
  MEMORY[0x270FA5388](v24);
  int v26 = (char *)&v43 - v25;
  uint64_t v47 = a1;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)&v43 - v25, &demangling cache variable for type metadata for AspireApiPIRShardConfigs.OneOf_ShardConfigs?);
  uint64_t v48 = a2;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a2, (uint64_t)v23, &demangling cache variable for type metadata for AspireApiPIRShardConfigs.OneOf_ShardConfigs?);
  uint64_t v27 = (uint64_t)&v17[*(int *)(v15 + 56)];
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v26, (uint64_t)v17, &demangling cache variable for type metadata for AspireApiPIRShardConfigs.OneOf_ShardConfigs?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v23, v27, &demangling cache variable for type metadata for AspireApiPIRShardConfigs.OneOf_ShardConfigs?);
  uint64_t v28 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  if (v28((uint64_t)v17, 1, v11) != 1)
  {
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v17, (uint64_t)v20, &demangling cache variable for type metadata for AspireApiPIRShardConfigs.OneOf_ShardConfigs?);
    if (v28(v27, 1, v11) != 1)
    {
      uint64_t v29 = v45;
      outlined init with take of AspireApiEvaluationKeyMetadata(v27, v45, type metadata accessor for AspireApiPIRShardConfigs.OneOf_ShardConfigs);
      uint64_t v30 = v44;
      uint64_t v31 = (_DWORD *)(v44 + *(int *)(v43 + 48));
      outlined init with copy of AspireHeEvaluationKeyConfig((uint64_t)v20, v44, type metadata accessor for AspireApiPIRShardConfigs.OneOf_ShardConfigs);
      outlined init with copy of AspireHeEvaluationKeyConfig(v29, (uint64_t)v31, type metadata accessor for AspireApiPIRShardConfigs.OneOf_ShardConfigs);
      uint64_t v32 = v46;
      outlined init with take of AspireApiEvaluationKeyMetadata(v30, (uint64_t)v46, type metadata accessor for AspireApiPIRFixedShardConfig);
      char v33 = specialized static AspireApiPIRFixedShardConfig.== infix(_:_:)(v32, v31);
      _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v31, type metadata accessor for AspireApiPIRFixedShardConfig);
      _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v32, type metadata accessor for AspireApiPIRFixedShardConfig);
      _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0(v29, type metadata accessor for AspireApiPIRShardConfigs.OneOf_ShardConfigs);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v23, &demangling cache variable for type metadata for AspireApiPIRShardConfigs.OneOf_ShardConfigs?);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v26, &demangling cache variable for type metadata for AspireApiPIRShardConfigs.OneOf_ShardConfigs?);
      _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v20, type metadata accessor for AspireApiPIRShardConfigs.OneOf_ShardConfigs);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v17, &demangling cache variable for type metadata for AspireApiPIRShardConfigs.OneOf_ShardConfigs?);
      if (v33) {
        goto LABEL_8;
      }
LABEL_9:
      char v40 = 0;
      return v40 & 1;
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v23, &demangling cache variable for type metadata for AspireApiPIRShardConfigs.OneOf_ShardConfigs?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v26, &demangling cache variable for type metadata for AspireApiPIRShardConfigs.OneOf_ShardConfigs?);
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v20, type metadata accessor for AspireApiPIRShardConfigs.OneOf_ShardConfigs);
LABEL_6:
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v17, &demangling cache variable for type metadata for (AspireApiPIRShardConfigs.OneOf_ShardConfigs?, AspireApiPIRShardConfigs.OneOf_ShardConfigs?));
    goto LABEL_9;
  }
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v23, &demangling cache variable for type metadata for AspireApiPIRShardConfigs.OneOf_ShardConfigs?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v26, &demangling cache variable for type metadata for AspireApiPIRShardConfigs.OneOf_ShardConfigs?);
  if (v28(v27, 1, v11) != 1) {
    goto LABEL_6;
  }
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v17, &demangling cache variable for type metadata for AspireApiPIRShardConfigs.OneOf_ShardConfigs?);
LABEL_8:
  uint64_t v34 = type metadata accessor for AspireApiPIRShardConfigs(0);
  uint64_t v36 = v51;
  uint64_t v35 = v52;
  uint64_t v37 = *(void (**)(char *, uint64_t, uint64_t))(v51 + 16);
  uint64_t v38 = v49;
  v37(v49, v47 + *(int *)(v34 + 20), v52);
  uint64_t v39 = v50;
  v37(v50, v48 + *(int *)(v34 + 20), v35);
  _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
  char v40 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v41 = *(void (**)(char *, uint64_t))(v36 + 8);
  v41(v39, v35);
  v41(v38, v35);
  return v40 & 1;
}

uint64_t specialized static AspireApiPIRFixedShardConfig.== infix(_:_:)(char *a1, _DWORD *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v46 = *(void *)(v4 - 8);
  uint64_t v47 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v45 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v44 = (char *)&v43 - v7;
  uint64_t v8 = type metadata accessor for AspireApiPIRShardConfig(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v48 = (uint64_t)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireApiPIRShardConfig?, AspireApiPIRShardConfig?));
  uint64_t v12 = v11 - 8;
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiPIRShardConfig?);
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v17 = (char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)&v43 - v19;
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = (char *)&v43 - v22;
  uint64_t v24 = type metadata accessor for AspireApiPIRFixedShardConfig(0);
  uint64_t v25 = *(int *)(v24 + 24);
  uint64_t v49 = a1;
  uint64_t v26 = (uint64_t)&a1[v25];
  uint64_t v27 = v24;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v26, (uint64_t)v23, &demangling cache variable for type metadata for AspireApiPIRShardConfig?);
  uint64_t v28 = *(int *)(v27 + 24);
  uint64_t v50 = a2;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)a2 + v28, (uint64_t)v20, &demangling cache variable for type metadata for AspireApiPIRShardConfig?);
  uint64_t v29 = (uint64_t)&v14[*(int *)(v12 + 56)];
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v23, (uint64_t)v14, &demangling cache variable for type metadata for AspireApiPIRShardConfig?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v20, v29, &demangling cache variable for type metadata for AspireApiPIRShardConfig?);
  uint64_t v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v30((uint64_t)v14, 1, v8) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v20, &demangling cache variable for type metadata for AspireApiPIRShardConfig?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v23, &demangling cache variable for type metadata for AspireApiPIRShardConfig?);
    if (v30(v29, 1, v8) == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v14, &demangling cache variable for type metadata for AspireApiPIRShardConfig?);
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v14, (uint64_t)v17, &demangling cache variable for type metadata for AspireApiPIRShardConfig?);
  if (v30(v29, 1, v8) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v20, &demangling cache variable for type metadata for AspireApiPIRShardConfig?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v23, &demangling cache variable for type metadata for AspireApiPIRShardConfig?);
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v17, type metadata accessor for AspireApiPIRShardConfig);
LABEL_6:
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v14, &demangling cache variable for type metadata for (AspireApiPIRShardConfig?, AspireApiPIRShardConfig?));
LABEL_10:
    char v40 = 0;
    return v40 & 1;
  }
  uint64_t v31 = v48;
  outlined init with take of AspireApiEvaluationKeyMetadata(v29, v48, type metadata accessor for AspireApiPIRShardConfig);
  char v32 = specialized static AspireApiPIRShardConfig.== infix(_:_:)((uint64_t)v17, v31);
  _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0(v31, type metadata accessor for AspireApiPIRShardConfig);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v20, &demangling cache variable for type metadata for AspireApiPIRShardConfig?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v23, &demangling cache variable for type metadata for AspireApiPIRShardConfig?);
  _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v17, type metadata accessor for AspireApiPIRShardConfig);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v14, &demangling cache variable for type metadata for AspireApiPIRShardConfig?);
  if ((v32 & 1) == 0) {
    goto LABEL_10;
  }
LABEL_8:
  char v33 = v50;
  if (*(_DWORD *)v49 != *v50) {
    goto LABEL_10;
  }
  uint64_t v35 = v46;
  uint64_t v34 = v47;
  uint64_t v36 = *(void (**)(char *, char *, uint64_t))(v46 + 16);
  uint64_t v37 = v44;
  v36(v44, &v49[*(int *)(v27 + 20)], v47);
  uint64_t v38 = (char *)v33 + *(int *)(v27 + 20);
  uint64_t v39 = v45;
  v36(v45, v38, v34);
  _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
  char v40 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v41 = *(void (**)(char *, uint64_t))(v35 + 8);
  v41(v39, v34);
  v41(v37, v34);
  return v40 & 1;
}

uint64_t specialized static AspireApiPIRShardConfig.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v30 - v9;
  if (*(void *)a1 != *(void *)a2
    || *(void *)(a1 + 8) != *(void *)(a2 + 8)
    || !specialized static Array<A>.== infix(_:_:)(*(void **)(a1 + 16), *(void **)(a2 + 16)))
  {
    goto LABEL_20;
  }
  uint64_t v11 = (int *)type metadata accessor for AspireApiPIRShardConfig(0);
  uint64_t v12 = v11[8];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = *(void *)(a1 + v12 + 8);
  uint64_t v15 = (void *)(a2 + v12);
  uint64_t v16 = v15[1];
  if (!v14)
  {
    if (v16) {
      goto LABEL_20;
    }
    goto LABEL_13;
  }
  if (!v16) {
    goto LABEL_20;
  }
  BOOL v17 = *v13 == *v15 && v14 == v16;
  if (v17 || (char v18 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
LABEL_13:
    uint64_t v19 = v11[9];
    int v20 = *(unsigned __int8 *)(a1 + v19);
    int v21 = *(unsigned __int8 *)(a2 + v19);
    if (v20 != 2)
    {
      if (v21 == 2 || ((((v21 & 1) == 0) ^ v20) & 1) == 0) {
        goto LABEL_20;
      }
LABEL_18:
      uint64_t v22 = v11[10];
      uint64_t v23 = (void *)(a1 + v22);
      char v24 = *(unsigned char *)(a1 + v22 + 8);
      uint64_t v25 = (void *)(a2 + v22);
      int v26 = *(unsigned __int8 *)(a2 + v22 + 8);
      if (v24)
      {
        if (!v26) {
          goto LABEL_20;
        }
      }
      else
      {
        if (*v23 != *v25) {
          LOBYTE(v26) = 1;
        }
        if (v26) {
          goto LABEL_20;
        }
      }
      uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      v28(v10, a1 + v11[7], v4);
      v28(v7, a2 + v11[7], v4);
      _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
      char v18 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v29 = *(void (**)(char *, uint64_t))(v5 + 8);
      v29(v7, v4);
      v29(v10, v4);
      return v18 & 1;
    }
    if (v21 == 2) {
      goto LABEL_18;
    }
LABEL_20:
    char v18 = 0;
  }
  return v18 & 1;
}

uint64_t specialized static AspireApiEvaluationKey.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v68 = a1;
  uint64_t v69 = a2;
  uint64_t v61 = type metadata accessor for UnknownStorage();
  uint64_t v59 = *(void *)(v61 - 8);
  MEMORY[0x270FA5388](v61);
  uint64_t v58 = (char *)&v56 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v57 = (char *)&v56 - v4;
  uint64_t v5 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  uint64_t v64 = *(void *)(v5 - 8);
  uint64_t v65 = v5;
  MEMORY[0x270FA5388](v5);
  uint64_t v56 = (uint64_t)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireHeSerializedEvaluationKey?, AspireHeSerializedEvaluationKey?));
  MEMORY[0x270FA5388](v62);
  uint64_t v66 = (uint64_t)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v60 = (uint64_t)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v67 = (uint64_t)&v56 - v11;
  MEMORY[0x270FA5388](v12);
  uint64_t v63 = (uint64_t)&v56 - v13;
  uint64_t v14 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  BOOL v17 = (uint64_t *)((char *)&v56 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireApiEvaluationKeyMetadata?, AspireApiEvaluationKeyMetadata?));
  uint64_t v19 = v18 - 8;
  MEMORY[0x270FA5388](v18);
  int v21 = (char *)&v56 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  MEMORY[0x270FA5388](v22 - 8);
  char v24 = (uint64_t *)((char *)&v56 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v25);
  uint64_t v27 = (char *)&v56 - v26;
  MEMORY[0x270FA5388](v28);
  uint64_t v30 = (char *)&v56 - v29;
  uint64_t v31 = type metadata accessor for AspireApiEvaluationKey(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v68 + *(int *)(v31 + 20), (uint64_t)v30, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v69 + *(int *)(v31 + 20), (uint64_t)v27, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  uint64_t v32 = (uint64_t)&v21[*(int *)(v19 + 56)];
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v30, (uint64_t)v21, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v27, v32, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  char v33 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  if (v33((uint64_t)v21, 1, v14) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v27, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v30, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
    if (v33(v32, 1, v14) == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
      goto LABEL_4;
    }
    goto LABEL_9;
  }
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21, (uint64_t)v24, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  if (v33(v32, 1, v14) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v27, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v30, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v24, type metadata accessor for AspireApiEvaluationKeyMetadata);
LABEL_9:
    uint64_t v42 = &demangling cache variable for type metadata for (AspireApiEvaluationKeyMetadata?, AspireApiEvaluationKeyMetadata?);
    uint64_t v43 = (uint64_t)v21;
LABEL_18:
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v43, v42);
    goto LABEL_19;
  }
  outlined init with take of AspireApiEvaluationKeyMetadata(v32, (uint64_t)v17, type metadata accessor for AspireApiEvaluationKeyMetadata);
  if (*v24 != *v17 || (specialized static Data.== infix(_:_:)(v24[1], v24[2], v17[1], v17[2]) & 1) == 0)
  {
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v17, type metadata accessor for AspireApiEvaluationKeyMetadata);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v27, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v30, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v24, type metadata accessor for AspireApiEvaluationKeyMetadata);
    uint64_t v43 = (uint64_t)v21;
    uint64_t v42 = &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?;
    goto LABEL_18;
  }
  _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
  char v44 = dispatch thunk of static Equatable.== infix(_:_:)();
  _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v17, type metadata accessor for AspireApiEvaluationKeyMetadata);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v27, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v30, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v24, type metadata accessor for AspireApiEvaluationKeyMetadata);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  if ((v44 & 1) == 0) {
    goto LABEL_19;
  }
LABEL_4:
  uint64_t v34 = v68;
  uint64_t v35 = v63;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v68 + *(int *)(v31 + 24), v63, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  uint64_t v36 = v69;
  uint64_t v37 = v67;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v69 + *(int *)(v31 + 24), v67, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  uint64_t v38 = v66;
  uint64_t v39 = v66 + *(int *)(v62 + 48);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v35, v66, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v37, v39, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  uint64_t v40 = v65;
  uint64_t v41 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v64 + 48);
  if (v41(v38, 1, v65) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v37, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v35, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
    if (v41(v39, 1, v40) == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v38, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
LABEL_22:
      uint64_t v50 = v59;
      uint64_t v51 = *(void (**)(char *, uint64_t, uint64_t))(v59 + 16);
      uint64_t v52 = v57;
      uint64_t v53 = v61;
      v51(v57, v34, v61);
      uint64_t v54 = v58;
      v51(v58, v36, v53);
      _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
      char v46 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v55 = *(void (**)(char *, uint64_t))(v50 + 8);
      v55(v54, v53);
      v55(v52, v53);
      return v46 & 1;
    }
    goto LABEL_17;
  }
  uint64_t v45 = v60;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v38, v60, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  if (v41(v39, 1, v40) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v67, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v35, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0(v45, type metadata accessor for AspireHeSerializedEvaluationKey);
LABEL_17:
    uint64_t v42 = &demangling cache variable for type metadata for (AspireHeSerializedEvaluationKey?, AspireHeSerializedEvaluationKey?);
    uint64_t v43 = v38;
    goto LABEL_18;
  }
  uint64_t v48 = v56;
  outlined init with take of AspireApiEvaluationKeyMetadata(v39, v56, type metadata accessor for AspireHeSerializedEvaluationKey);
  char v49 = specialized static AspireHeSerializedEvaluationKey.== infix(_:_:)(v45, v48);
  _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0(v48, type metadata accessor for AspireHeSerializedEvaluationKey);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v67, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v35, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0(v45, type metadata accessor for AspireHeSerializedEvaluationKey);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v38, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  if (v49) {
    goto LABEL_22;
  }
LABEL_19:
  char v46 = 0;
  return v46 & 1;
}

uint64_t specialized static AspireApiConfigResponse.== infix(_:_:)(char *a1, char *a2, uint64_t (*a3)(void, void, double), uint64_t (*a4)(void, void), uint64_t (*a5)(void))
{
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v15 = MEMORY[0x270FA5388](v14);
  BOOL v17 = (char *)&v23 - v16;
  if (a3(*(void *)a1, *(void *)a2, v15) & 1) != 0 && (a4(*((void *)a1 + 1), *((void *)a2 + 1)))
  {
    uint64_t v18 = a5(0);
    uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
    v19(v17, &a1[*(int *)(v18 + 24)], v10);
    v19(v13, &a2[*(int *)(v18 + 24)], v10);
    _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    char v20 = dispatch thunk of static Equatable.== infix(_:_:)();
    int v21 = *(void (**)(char *, uint64_t))(v11 + 8);
    v21(v13, v10);
    v21(v17, v10);
  }
  else
  {
    char v20 = 0;
  }
  return v20 & 1;
}

uint64_t specialized static AspireApiOPRFResponse.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v18 - v11;
  if ((specialized static Data.== infix(_:_:)(*(void *)a1, *(void *)(a1 + 8), *(void *)a2, *(void *)(a2 + 8)) & 1) != 0
    && (specialized static Data.== infix(_:_:)(*(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a2 + 16), *(void *)(a2 + 24)) & 1) != 0)
  {
    uint64_t v13 = a3(0);
    uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    v14(v12, a1 + *(int *)(v13 + 24), v6);
    v14(v9, a2 + *(int *)(v13 + 24), v6);
    _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v16 = *(void (**)(char *, uint64_t))(v7 + 8);
    v16(v9, v6);
    v16(v12, v6);
  }
  else
  {
    char v15 = 0;
  }
  return v15 & 1;
}

uint64_t specialized static AspireApiPECRequest.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v70 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v69 = (char *)&v63 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v68 = (char *)&v63 - v7;
  uint64_t v8 = type metadata accessor for AspireApiEvaluationKey(0);
  uint64_t v74 = *(void *)(v8 - 8);
  uint64_t v75 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v67 = (uint64_t)&v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireApiEvaluationKey?, AspireApiEvaluationKey?));
  MEMORY[0x270FA5388](v72);
  uint64_t v76 = (char *)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKey?);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v71 = (uint64_t)&v63 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v77 = (uint64_t)&v63 - v14;
  MEMORY[0x270FA5388](v15);
  uint64_t v73 = (uint64_t)&v63 - v16;
  uint64_t v17 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  unint64_t v78 = (uint64_t *)((char *)&v63 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireApiEvaluationKeyMetadata?, AspireApiEvaluationKeyMetadata?));
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)&v63 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  MEMORY[0x270FA5388](v23 - 8);
  uint64_t v25 = (uint64_t *)((char *)&v63 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v26);
  uint64_t v28 = (char *)&v63 - v27;
  MEMORY[0x270FA5388](v29);
  uint64_t v31 = (char *)&v63 - v30;
  if (!specialized static Array<A>.== infix(_:_:)(*a1, *a2)
    || (specialized static Array<A>.== infix(_:_:)(a1[1], a2[1]) & 1) == 0)
  {
    goto LABEL_20;
  }
  uint64_t v63 = v4;
  uint64_t v32 = type metadata accessor for AspireApiPECRequest(0);
  uint64_t v33 = *(int *)(v32 + 32);
  uint64_t v65 = a1;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)a1 + v33, (uint64_t)v31, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  uint64_t v64 = v32;
  uint64_t v34 = *(int *)(v32 + 32);
  uint64_t v66 = a2;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)a2 + v34, (uint64_t)v28, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  uint64_t v35 = (uint64_t)&v22[*(int *)(v20 + 48)];
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v31, (uint64_t)v22, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v28, v35, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  uint64_t v36 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48);
  if (v36((uint64_t)v22, 1, v17) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v28, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v31, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
    if (v36(v35, 1, v17) == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v22, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
      goto LABEL_6;
    }
LABEL_12:
    uint64_t v45 = &demangling cache variable for type metadata for (AspireApiEvaluationKeyMetadata?, AspireApiEvaluationKeyMetadata?);
LABEL_13:
    uint64_t v46 = (uint64_t)v22;
LABEL_19:
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v46, v45);
    goto LABEL_20;
  }
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v22, (uint64_t)v25, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  if (v36(v35, 1, v17) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v28, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v31, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v25, type metadata accessor for AspireApiEvaluationKeyMetadata);
    goto LABEL_12;
  }
  uint64_t v47 = v78;
  outlined init with take of AspireApiEvaluationKeyMetadata(v35, (uint64_t)v78, type metadata accessor for AspireApiEvaluationKeyMetadata);
  if (*v25 != *v47 || (specialized static Data.== infix(_:_:)(v25[1], v25[2], v47[1], v47[2]) & 1) == 0)
  {
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v47, type metadata accessor for AspireApiEvaluationKeyMetadata);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v28, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v31, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v25, type metadata accessor for AspireApiEvaluationKeyMetadata);
    uint64_t v46 = (uint64_t)v22;
    uint64_t v45 = &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?;
    goto LABEL_19;
  }
  _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
  char v48 = dispatch thunk of static Equatable.== infix(_:_:)();
  _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v47, type metadata accessor for AspireApiEvaluationKeyMetadata);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v28, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v31, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v25, type metadata accessor for AspireApiEvaluationKeyMetadata);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v22, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  if ((v48 & 1) == 0) {
    goto LABEL_20;
  }
LABEL_6:
  uint64_t v37 = v65;
  uint64_t v38 = v66;
  if (specialized static Data.== infix(_:_:)(v65[2], v65[3], v66[2], v66[3]))
  {
    uint64_t v39 = v64;
    uint64_t v40 = v73;
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v37 + *(int *)(v64 + 36), v73, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
    uint64_t v41 = v77;
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v38 + *(int *)(v39 + 36), v77, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
    uint64_t v22 = v76;
    uint64_t v42 = (uint64_t)&v76[*(int *)(v72 + 48)];
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v40, (uint64_t)v76, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v41, v42, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
    uint64_t v43 = v75;
    char v44 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v74 + 48);
    if (v44((uint64_t)v22, 1, v75) == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v41, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v40, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
      if (v44(v42, 1, v43) == 1)
      {
        outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v22, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
LABEL_26:
        uint64_t v54 = v63;
        uint64_t v55 = v64;
        uint64_t v56 = (uint64_t)v37 + *(int *)(v64 + 28);
        uint64_t v57 = v70;
        uint64_t v58 = *(void (**)(char *, uint64_t, uint64_t))(v70 + 16);
        uint64_t v59 = v68;
        v58(v68, v56, v63);
        uint64_t v60 = (uint64_t)v38 + *(int *)(v55 + 28);
        uint64_t v61 = v69;
        v58(v69, v60, v54);
        _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
        char v49 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v62 = *(void (**)(char *, uint64_t))(v57 + 8);
        v62(v61, v54);
        v62(v59, v54);
        return v49 & 1;
      }
      goto LABEL_24;
    }
    uint64_t v51 = v71;
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v22, v71, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
    if (v44(v42, 1, v43) == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v77, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v40, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
      _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0(v51, type metadata accessor for AspireApiEvaluationKey);
LABEL_24:
      uint64_t v45 = &demangling cache variable for type metadata for (AspireApiEvaluationKey?, AspireApiEvaluationKey?);
      goto LABEL_13;
    }
    uint64_t v52 = v67;
    outlined init with take of AspireApiEvaluationKeyMetadata(v42, v67, type metadata accessor for AspireApiEvaluationKey);
    char v53 = specialized static AspireApiEvaluationKey.== infix(_:_:)(v51, v52);
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0(v52, type metadata accessor for AspireApiEvaluationKey);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v77, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v40, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0(v51, type metadata accessor for AspireApiEvaluationKey);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v22, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
    if (v53) {
      goto LABEL_26;
    }
  }
LABEL_20:
  char v49 = 0;
  return v49 & 1;
}

uint64_t specialized static AspireApiPECConfig.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v76 = a1;
  uint64_t v77 = a2;
  uint64_t v2 = type metadata accessor for UnknownStorage();
  uint64_t v65 = *(void *)(v2 - 8);
  uint64_t v66 = v2;
  MEMORY[0x270FA5388](v2);
  uint64_t v64 = (char *)&v62 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v63 = (char *)&v62 - v5;
  uint64_t v6 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  uint64_t v70 = *(void *)(v6 - 8);
  uint64_t v71 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v67 = (uint64_t)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireSimilarityPlaintextPacking?, AspireSimilarityPlaintextPacking?));
  MEMORY[0x270FA5388](v69);
  uint64_t v72 = (uint64_t)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v68 = (uint64_t)&v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v74 = (uint64_t)&v62 - v12;
  MEMORY[0x270FA5388](v13);
  uint64_t v75 = (uint64_t)&v62 - v14;
  uint64_t v15 = type metadata accessor for AspireHeEncryptionParameters(0);
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v62 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireHeEncryptionParameters?, AspireHeEncryptionParameters?));
  uint64_t v20 = v19 - 8;
  MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)&v62 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  MEMORY[0x270FA5388](v23 - 8);
  uint64_t v25 = (char *)&v62 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v26);
  uint64_t v28 = (char *)&v62 - v27;
  MEMORY[0x270FA5388](v29);
  uint64_t v31 = (char *)&v62 - v30;
  uint64_t v32 = type metadata accessor for AspireApiPECConfig(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v76 + *(int *)(v32 + 40), (uint64_t)v31, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  uint64_t v73 = v32;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v77 + *(int *)(v32 + 40), (uint64_t)v28, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  uint64_t v33 = (uint64_t)&v22[*(int *)(v20 + 56)];
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v31, (uint64_t)v22, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v28, v33, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  uint64_t v34 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  if (v34((uint64_t)v22, 1, v15) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v28, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v31, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    if (v34(v33, 1, v15) == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v22, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      goto LABEL_9;
    }
LABEL_6:
    uint64_t v35 = &demangling cache variable for type metadata for (AspireHeEncryptionParameters?, AspireHeEncryptionParameters?);
    uint64_t v36 = (uint64_t)v22;
LABEL_7:
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v36, v35);
    goto LABEL_28;
  }
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v22, (uint64_t)v25, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  if (v34(v33, 1, v15) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v28, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v31, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v25, type metadata accessor for AspireHeEncryptionParameters);
    goto LABEL_6;
  }
  outlined init with take of AspireApiEvaluationKeyMetadata(v33, (uint64_t)v18, type metadata accessor for AspireHeEncryptionParameters);
  char v37 = static AspireHeEncryptionParameters.== infix(_:_:)(v25, v18);
  _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v18, type metadata accessor for AspireHeEncryptionParameters);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v28, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v31, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v25, type metadata accessor for AspireHeEncryptionParameters);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v22, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  if ((v37 & 1) == 0) {
    goto LABEL_28;
  }
LABEL_9:
  uint64_t v39 = v76;
  uint64_t v38 = v77;
  if (*v76 != *v77) {
    goto LABEL_28;
  }
  uint64_t v40 = v73;
  uint64_t v41 = v75;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v76 + *(int *)(v73 + 44), v75, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  uint64_t v42 = v74;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v38 + *(int *)(v40 + 44), v74, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  uint64_t v43 = v72;
  uint64_t v44 = v72 + *(int *)(v69 + 48);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v41, v72, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v42, v44, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  uint64_t v45 = v71;
  uint64_t v46 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v70 + 48);
  if (v46(v43, 1, v71) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v42, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v41, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    if (v46(v44, 1, v45) == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v43, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
      goto LABEL_17;
    }
    goto LABEL_15;
  }
  uint64_t v47 = v68;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v43, v68, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  if (v46(v44, 1, v45) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v74, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v75, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0(v47, type metadata accessor for AspireSimilarityPlaintextPacking);
LABEL_15:
    uint64_t v35 = &demangling cache variable for type metadata for (AspireSimilarityPlaintextPacking?, AspireSimilarityPlaintextPacking?);
    uint64_t v36 = v43;
    goto LABEL_7;
  }
  uint64_t v48 = v67;
  outlined init with take of AspireApiEvaluationKeyMetadata(v44, v67, type metadata accessor for AspireSimilarityPlaintextPacking);
  char v49 = static AspireSimilarityPlaintextPacking.== infix(_:_:)(v47, v48);
  _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0(v48, type metadata accessor for AspireSimilarityPlaintextPacking);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v74, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v75, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0(v47, type metadata accessor for AspireSimilarityPlaintextPacking);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v43, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  if ((v49 & 1) == 0) {
    goto LABEL_28;
  }
LABEL_17:
  if (*((_DWORD *)v39 + 2) != *((_DWORD *)v38 + 2)) {
    goto LABEL_28;
  }
  if ((v39[3] & 1) == 0)
  {
    uint64_t v50 = v39[2];
    if (v38[3])
    {
      if (!v50) {
        goto LABEL_25;
      }
      goto LABEL_28;
    }
LABEL_24:
    if (v50 == v38[2]) {
      goto LABEL_25;
    }
LABEL_28:
    char v59 = 0;
    return v59 & 1;
  }
  if ((v38[3] & 1) == 0)
  {
    uint64_t v50 = 0;
    goto LABEL_24;
  }
LABEL_25:
  if ((specialized static Data.== infix(_:_:)(v39[4], v39[5], v38[4], v38[5]) & 1) == 0
    || !specialized static Array<A>.== infix(_:_:)((void *)v39[6], (void *)v38[6]))
  {
    goto LABEL_28;
  }
  uint64_t v51 = v73;
  uint64_t v52 = (char *)v39 + *(int *)(v73 + 36);
  uint64_t v54 = v65;
  uint64_t v53 = v66;
  uint64_t v55 = *(void (**)(char *, char *, uint64_t))(v65 + 16);
  uint64_t v56 = v63;
  v55(v63, v52, v66);
  uint64_t v57 = (char *)v38 + *(int *)(v51 + 36);
  uint64_t v58 = v64;
  v55(v64, v57, v53);
  _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
  char v59 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v60 = *(void (**)(char *, uint64_t))(v54 + 8);
  v60(v58, v53);
  v60(v56, v53);
  return v59 & 1;
}

uint64_t specialized static AspireApiKeyStatus.== infix(_:_:)(char *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v49 = *(void *)(v4 - 8);
  uint64_t v50 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v43 - v8;
  uint64_t v10 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  uint64_t v51 = *(void **)(v10 - 8);
  uint64_t v52 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireHeEvaluationKeyConfig?, AspireHeEvaluationKeyConfig?));
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  MEMORY[0x270FA5388](v16 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v43 - v18;
  MEMORY[0x270FA5388](v20);
  uint64_t v23 = (char *)&v43 - v22;
  if (*(void *)a1 != *a2) {
    goto LABEL_8;
  }
  uint64_t v24 = a1;
  uint64_t v47 = v6;
  uint64_t v48 = v21;
  uint64_t v44 = v12;
  uint64_t v46 = v9;
  uint64_t v25 = type metadata accessor for AspireApiKeyStatus(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)&a1[*(int *)(v25 + 24)], (uint64_t)v23, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  uint64_t v45 = v25;
  uint64_t v26 = a2;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)a2 + *(int *)(v25 + 24), (uint64_t)v19, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  uint64_t v27 = (uint64_t)&v15[*(int *)(v13 + 48)];
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v23, (uint64_t)v15, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v19, v27, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  uint64_t v28 = v52;
  uint64_t v29 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v51[6];
  if (v29((uint64_t)v15, 1, v52) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v19, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v23, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
    if (v29(v27, 1, v28) == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v15, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
LABEL_11:
      uint64_t v35 = v45;
      uint64_t v36 = v46;
      uint64_t v38 = v49;
      uint64_t v37 = v50;
      uint64_t v39 = *(void (**)(char *, char *, uint64_t))(v49 + 16);
      v39(v46, &v24[*(int *)(v45 + 20)], v50);
      uint64_t v40 = (char *)v26 + *(int *)(v35 + 20);
      uint64_t v41 = v47;
      v39(v47, v40, v37);
      _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
      char v31 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v42 = *(void (**)(char *, uint64_t))(v38 + 8);
      v42(v41, v37);
      v42(v36, v37);
      return v31 & 1;
    }
    goto LABEL_7;
  }
  uint64_t v51 = a2;
  uint64_t v30 = v48;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v15, v48, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  if (v29(v27, 1, v28) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v19, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v23, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0(v30, type metadata accessor for AspireHeEvaluationKeyConfig);
LABEL_7:
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v15, &demangling cache variable for type metadata for (AspireHeEvaluationKeyConfig?, AspireHeEvaluationKeyConfig?));
    goto LABEL_8;
  }
  uint64_t v33 = (uint64_t)v44;
  outlined init with take of AspireApiEvaluationKeyMetadata(v27, (uint64_t)v44, type metadata accessor for AspireHeEvaluationKeyConfig);
  char v34 = static AspireHeEvaluationKeyConfig.== infix(_:_:)(v30, v33);
  _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0(v33, type metadata accessor for AspireHeEvaluationKeyConfig);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v19, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v23, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0(v30, type metadata accessor for AspireHeEvaluationKeyConfig);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v15, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  uint64_t v26 = v51;
  if (v34) {
    goto LABEL_11;
  }
LABEL_8:
  char v31 = 0;
  return v31 & 1;
}

uint64_t specialized static AspireApiResponse.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v43 = *(void *)(v4 - 8);
  uint64_t v44 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v42 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v41 = (char *)&v37 - v7;
  uint64_t v8 = type metadata accessor for AspireApiResponse.OneOf_Response(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v38 = (uint64_t)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireApiResponse.OneOf_Response?, AspireApiResponse.OneOf_Response?));
  uint64_t v12 = v11 - 8;
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)&v37 - v19;
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = (char *)&v37 - v22;
  uint64_t v39 = a1;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)&v37 - v22, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  uint64_t v40 = a2;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a2, (uint64_t)v20, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  uint64_t v24 = (uint64_t)&v14[*(int *)(v12 + 56)];
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v23, (uint64_t)v14, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v20, v24, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  uint64_t v25 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v25((uint64_t)v14, 1, v8) != 1)
  {
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v14, (uint64_t)v17, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
    if (v25(v24, 1, v8) != 1)
    {
      uint64_t v26 = v38;
      outlined init with take of AspireApiEvaluationKeyMetadata(v24, v38, type metadata accessor for AspireApiResponse.OneOf_Response);
      char v27 = specialized static AspireApiResponse.OneOf_Response.== infix(_:_:)((uint64_t)v17, v26);
      _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0(v26, type metadata accessor for AspireApiResponse.OneOf_Response);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v20, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v23, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
      _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v17, type metadata accessor for AspireApiResponse.OneOf_Response);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v14, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
      if (v27) {
        goto LABEL_8;
      }
LABEL_9:
      char v34 = 0;
      return v34 & 1;
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v20, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v23, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v17, type metadata accessor for AspireApiResponse.OneOf_Response);
LABEL_6:
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v14, &demangling cache variable for type metadata for (AspireApiResponse.OneOf_Response?, AspireApiResponse.OneOf_Response?));
    goto LABEL_9;
  }
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v20, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v23, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  if (v25(v24, 1, v8) != 1) {
    goto LABEL_6;
  }
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v14, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
LABEL_8:
  uint64_t v28 = type metadata accessor for AspireApiResponse(0);
  uint64_t v30 = v43;
  uint64_t v29 = v44;
  char v31 = *(void (**)(char *, uint64_t, uint64_t))(v43 + 16);
  uint64_t v32 = v41;
  v31(v41, v39 + *(int *)(v28 + 20), v44);
  uint64_t v33 = v42;
  v31(v42, v40 + *(int *)(v28 + 20), v29);
  _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
  char v34 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v35 = *(void (**)(char *, uint64_t))(v30 + 8);
  v35(v33, v29);
  v35(v32, v29);
  return v34 & 1;
}

uint64_t specialized static AspireApiResponse.OneOf_Response.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v37 = a2;
  uint64_t v33 = type metadata accessor for AspireApiOPRFResponse(0);
  MEMORY[0x270FA5388](v33);
  uint64_t v35 = (uint64_t)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = type metadata accessor for AspireApiPECResponse(0);
  MEMORY[0x270FA5388](v34);
  uint64_t v36 = (uint64_t *)((char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = type metadata accessor for AspireApiPIRResponse(0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (uint64_t *)((char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = type metadata accessor for AspireApiResponse.OneOf_Response(0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (uint64_t *)((char *)&v32 - v12);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (uint64_t *)((char *)&v32 - v15);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireApiResponse.OneOf_Response, AspireApiResponse.OneOf_Response));
  MEMORY[0x270FA5388](v17 - 8);
  uint64_t v19 = (char *)&v32 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = (uint64_t)&v19[*(int *)(v20 + 56)];
  outlined init with copy of AspireHeEvaluationKeyConfig(a1, (uint64_t)v19, type metadata accessor for AspireApiResponse.OneOf_Response);
  outlined init with copy of AspireHeEvaluationKeyConfig(v37, v21, type metadata accessor for AspireApiResponse.OneOf_Response);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      outlined init with copy of AspireHeEvaluationKeyConfig((uint64_t)v19, (uint64_t)v13, type metadata accessor for AspireApiResponse.OneOf_Response);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v23 = v36;
        outlined init with take of AspireApiEvaluationKeyMetadata(v21, (uint64_t)v36, type metadata accessor for AspireApiPECResponse);
        if (specialized static Array<A>.== infix(_:_:)(*v13, *v23))
        {
          type metadata accessor for UnknownStorage();
          _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
          if (dispatch thunk of static Equatable.== infix(_:_:)())
          {
            uint64_t v24 = type metadata accessor for AspireApiPECResponse;
            _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v23, type metadata accessor for AspireApiPECResponse);
            uint64_t v25 = (uint64_t)v13;
LABEL_22:
            _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0(v25, v24);
            _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v19, type metadata accessor for AspireApiResponse.OneOf_Response);
            return 1;
          }
        }
        uint64_t v29 = type metadata accessor for AspireApiPECResponse;
        _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v23, type metadata accessor for AspireApiPECResponse);
        uint64_t v30 = (uint64_t)v13;
        goto LABEL_24;
      }
      uint64_t v26 = type metadata accessor for AspireApiPECResponse;
      uint64_t v27 = (uint64_t)v13;
    }
    else
    {
      outlined init with copy of AspireHeEvaluationKeyConfig((uint64_t)v19, (uint64_t)v10, type metadata accessor for AspireApiResponse.OneOf_Response);
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        uint64_t v28 = v35;
        outlined init with take of AspireApiEvaluationKeyMetadata(v21, v35, type metadata accessor for AspireApiOPRFResponse);
        if (specialized static Data.== infix(_:_:)(*(void *)v10, *((void *)v10 + 1), *(void *)v28, *(void *)(v28 + 8)) & 1) != 0&& (specialized static Data.== infix(_:_:)(*((void *)v10 + 2), *((void *)v10 + 3), *(void *)(v28 + 16), *(void *)(v28 + 24)))
        {
          type metadata accessor for UnknownStorage();
          _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
          if (dispatch thunk of static Equatable.== infix(_:_:)())
          {
            uint64_t v24 = type metadata accessor for AspireApiOPRFResponse;
            _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0(v28, type metadata accessor for AspireApiOPRFResponse);
            uint64_t v25 = (uint64_t)v10;
            goto LABEL_22;
          }
        }
        uint64_t v29 = type metadata accessor for AspireApiOPRFResponse;
        _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0(v28, type metadata accessor for AspireApiOPRFResponse);
        uint64_t v30 = (uint64_t)v10;
        goto LABEL_24;
      }
      uint64_t v26 = type metadata accessor for AspireApiOPRFResponse;
      uint64_t v27 = (uint64_t)v10;
    }
  }
  else
  {
    outlined init with copy of AspireHeEvaluationKeyConfig((uint64_t)v19, (uint64_t)v16, type metadata accessor for AspireApiResponse.OneOf_Response);
    if (!swift_getEnumCaseMultiPayload())
    {
      outlined init with take of AspireApiEvaluationKeyMetadata(v21, (uint64_t)v7, type metadata accessor for AspireApiPIRResponse);
      if (specialized static Array<A>.== infix(_:_:)(*v16, *v7))
      {
        type metadata accessor for UnknownStorage();
        _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
        if (dispatch thunk of static Equatable.== infix(_:_:)())
        {
          uint64_t v24 = type metadata accessor for AspireApiPIRResponse;
          _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v7, type metadata accessor for AspireApiPIRResponse);
          uint64_t v25 = (uint64_t)v16;
          goto LABEL_22;
        }
      }
      uint64_t v29 = type metadata accessor for AspireApiPIRResponse;
      _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v7, type metadata accessor for AspireApiPIRResponse);
      uint64_t v30 = (uint64_t)v16;
LABEL_24:
      _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0(v30, v29);
      _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v19, type metadata accessor for AspireApiResponse.OneOf_Response);
      return 0;
    }
    uint64_t v26 = type metadata accessor for AspireApiPIRResponse;
    uint64_t v27 = (uint64_t)v16;
  }
  _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0(v27, v26);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v19, &demangling cache variable for type metadata for (AspireApiResponse.OneOf_Response, AspireApiResponse.OneOf_Response));
  return 0;
}