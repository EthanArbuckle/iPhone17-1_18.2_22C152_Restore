void sub_249C424A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_249C42A6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
}

void sub_249C43CD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_249C44584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
}

void sub_249C449C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_249C45228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va1, a10);
  va_start(va, a10);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_249C45740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_249C45C44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_249C46168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_249C471D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__1(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__1(uint64_t a1)
{
}

void sub_249C47580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getAMDClientClass()
{
  uint64_t v4 = 0;
  v5 = &v4;
  uint64_t v6 = 0x2050000000;
  v0 = (void *)getAMDClientClass_softClass;
  uint64_t v7 = getAMDClientClass_softClass;
  if (!getAMDClientClass_softClass)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getAMDClientClass_block_invoke;
    v3[3] = &unk_26527E450;
    v3[4] = &v4;
    __getAMDClientClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_249C47E64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getAMDClientClass_block_invoke(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v4[0] = 0;
  if (!AppleMediaDiscoveryLibraryCore_frameworkLibrary)
  {
    v4[1] = MEMORY[0x263EF8330];
    v4[2] = 3221225472;
    v4[3] = __AppleMediaDiscoveryLibraryCore_block_invoke;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_26527E470;
    uint64_t v6 = 0;
    AppleMediaDiscoveryLibraryCore_frameworkLibrary = _sl_dlopen();
    v2 = (void *)v4[0];
    if (!AppleMediaDiscoveryLibraryCore_frameworkLibrary)
    {
      abort_report_np();
      goto LABEL_7;
    }
    if (v4[0]) {
      goto LABEL_8;
    }
  }
  while (1)
  {
    Class result = objc_getClass("AMDClient");
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
    if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
      break;
    }
LABEL_7:
    v2 = (void *)__getAMDClientClass_block_invoke_cold_1();
LABEL_8:
    free(v2);
  }
  getAMDClientClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __AppleMediaDiscoveryLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  AppleMediaDiscoveryLibraryCore_frameworkLibrary = result;
  return result;
}

void sub_249C4A0FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__2(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__2(uint64_t a1)
{
}

void sub_249C4A52C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_249C4A9E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_249C4AEA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_249C4B374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_249C4B790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_249C4BBAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_249C4BFF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_249C4C444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_249C4C8A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_249C4CFFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_249C4D4B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_249C4DF30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_249C4E49C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_249C4E914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_249C4EDA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_249C4F220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_249C4F664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_249C4FC08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_249C50008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_249C504E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_249C50924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_249C50D80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t SimilarityClient.secretKey.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of SecretKey(v1, a1, (uint64_t (*)(void))type metadata accessor for SecretKey);
}

uint64_t SimilarityClient.config.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for SimilarityClient();
  return outlined init with copy of SecretKey(v1 + *(int *)(v3 + 20), a1, type metadata accessor for AspireApiPECConfig);
}

uint64_t type metadata accessor for SimilarityClient()
{
  uint64_t result = type metadata singleton initialization cache for SimilarityClient;
  if (!type metadata singleton initialization cache for SimilarityClient) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t SimilarityClient.configId.getter()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for SimilarityClient() + 24);
  uint64_t v2 = *(void *)v1;
  outlined copy of Data._Representation(*(void *)v1, *(void *)(v1 + 8));
  return v2;
}

uint64_t outlined copy of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }
  return swift_retain();
}

uint64_t SimilarityClient.client.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for SimilarityClient() + 28);
  uint64_t v4 = type metadata accessor for PEC.SimilarityClient();
  long long v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t SimilarityClient.init(secretKey:config:configId:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v34 = a3;
  unint64_t v35 = a4;
  uint64_t v36 = a1;
  uint64_t v30 = a5;
  uint64_t v7 = type metadata accessor for HE.SerializedSecretKey();
  uint64_t v31 = *(void *)(v7 - 8);
  uint64_t v32 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for PEC.SimilarityClient();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  v33 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for PEC.SimilarityClientConfig();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  v19 = (char *)&v28 - v18;
  AspireApiPECConfig.cryptokit()((uint64_t)&v28 - v18);
  if (v5)
  {
    outlined consume of Data._Representation(v34, v35);
    outlined destroy of AspireApiPECConfig(a2, type metadata accessor for AspireApiPECConfig);
    return outlined destroy of AspireApiPECConfig(v36, (uint64_t (*)(void))type metadata accessor for SecretKey);
  }
  else
  {
    uint64_t v28 = v11;
    uint64_t v29 = v10;
    uint64_t v21 = v34;
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v17, v19, v13);
    uint64_t v22 = type metadata accessor for SecretKey();
    (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v9, v36 + *(int *)(v22 + 20), v32);
    v23 = v33;
    PEC.SimilarityClient.init(config:secretKey:)();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v19, v13);
    uint64_t v24 = v30;
    outlined init with take of SecretKey(v36, v30, (uint64_t (*)(void))type metadata accessor for SecretKey);
    v25 = (int *)type metadata accessor for SimilarityClient();
    outlined init with take of SecretKey(a2, v24 + v25[5], type metadata accessor for AspireApiPECConfig);
    v26 = (uint64_t *)(v24 + v25[6]);
    unint64_t v27 = v35;
    uint64_t *v26 = v21;
    v26[1] = v27;
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v28 + 32))(v24 + v25[7], v23, v29);
  }
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }
  return swift_release();
}

uint64_t SimilarityClient.encryptValues(_:shardIndices:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = v3;
  uint64_t v17 = a2;
  uint64_t v18 = a3;
  uint64_t v7 = type metadata accessor for PEC.SimilarityClientConfig();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(a1 + 16);
  type metadata accessor for SimilarityClient();
  PEC.SimilarityClient.similarityConfig.getter();
  uint64_t v12 = PEC.SimilarityClientConfig.embeddingDimension.getter();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  if (v12 == -1) {
    goto LABEL_6;
  }
  if (v12) {
    v11 %= v12;
  }
  if (!v11)
  {
LABEL_6:
    uint64_t result = PEC.SimilarityClient.queryCrt(values:)();
    if (!v4)
    {
      uint64_t v14 = result;
      uint64_t v15 = type metadata accessor for AspireApiPECRequest(0);
      MEMORY[0x270FA5388](v15);
      *(&v16 - 4) = v17;
      *(&v16 - 3) = v14;
      *(&v16 - 2) = v5;
      lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiPECRequest and conformance AspireApiPECRequest, (void (*)(uint64_t))type metadata accessor for AspireApiPECRequest);
      static Message.with(_:)();
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    type metadata accessor for CipherMLError();
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    return swift_willThrow();
  }
  return result;
}

uint64_t closure #1 in SimilarityClient.encryptValues(_:shardIndices:)(void *a1, unint64_t a2, char *a3, uint64_t a4)
{
  uint64_t v47 = a4;
  uint64_t v8 = type metadata accessor for PEC.SerializedCiphertextCoeffMatrix();
  uint64_t v54 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
  uint64_t v50 = *(void *)(v11 - 8);
  uint64_t v51 = v11;
  MEMORY[0x270FA5388](v11);
  v53 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  MEMORY[0x270FA5388](v13);
  int64_t v15 = *(void *)(a2 + 16);
  uint64_t v16 = MEMORY[0x263F8EE78];
  uint64_t v52 = v8;
  uint64_t v45 = v18;
  uint64_t v46 = v17;
  v44 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v15)
  {
    v49 = a3;
    uint64_t v55 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15, 0);
    unint64_t v19 = *(void *)(a2 + 32);
    if ((v19 & 0x8000000000000000) != 0 || HIDWORD(v19))
    {
LABEL_28:
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    uint64_t v16 = v55;
    int64_t v21 = *(void *)(v55 + 16);
    unint64_t v20 = *(void *)(v55 + 24);
    int64_t v22 = v21 + 1;
    if (v21 >= v20 >> 1) {
      goto LABEL_27;
    }
    while (1)
    {
      *(void *)(v16 + 16) = v22;
      unint64_t v20 = v16 + 4 * v21;
      *(_DWORD *)(v20 + 32) = v19;
      unint64_t v19 = v15 - 1;
      if (v15 == 1) {
        break;
      }
      int64_t v15 = v21 + 9;
      int64_t v21 = a2 + 40;
      while (v19)
      {
        a2 = *(void *)v21;
        if ((*(void *)v21 & 0x8000000000000000) != 0 || HIDWORD(a2)) {
          goto LABEL_28;
        }
        uint64_t v55 = v16;
        unint64_t v20 = *(void *)(v16 + 24);
        int64_t v22 = v15 - 7;
        if (v15 - 8 >= v20 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v15 - 7, 1);
          uint64_t v16 = v55;
        }
        *(void *)(v16 + 16) = v22;
        *(_DWORD *)(v16 + 4 * v15++) = a2;
        v21 += 8;
        if (!--v19) {
          goto LABEL_6;
        }
      }
      __break(1u);
LABEL_27:
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v22, 1);
      uint64_t v16 = v55;
    }
LABEL_6:
    uint64_t v8 = v52;
    a3 = v49;
  }
  swift_bridgeObjectRelease();
  *a1 = v16;
  int64_t v23 = *((void *)a3 + 2);
  uint64_t v24 = MEMORY[0x263F8EE78];
  if (v23)
  {
    v43 = a1;
    uint64_t v55 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v23, 0);
    v25 = *(char **)(v54 + 16);
    v26 = &a3[(*(unsigned __int8 *)(v54 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v54 + 80)];
    uint64_t v48 = *(void *)(v54 + 72);
    v49 = v25;
    v54 += 16;
    unint64_t v27 = (void (**)(char *, uint64_t))(v54 - 8);
    while (1)
    {
      uint64_t v28 = ((uint64_t (*)(char *, char *, uint64_t))v49)(v10, v26, v8);
      MEMORY[0x270FA5388](v28);
      lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilaritySerializedCiphertextMatrix and conformance AspireSimilaritySerializedCiphertextMatrix, (void (*)(uint64_t))type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
      static Message.with(_:)();
      if (v4) {
        break;
      }
      (*v27)(v10, v8);
      uint64_t v24 = v55;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v24 + 16) + 1, 1);
        uint64_t v24 = v55;
      }
      uint64_t v29 = (uint64_t)v53;
      unint64_t v31 = *(void *)(v24 + 16);
      unint64_t v30 = *(void *)(v24 + 24);
      if (v31 >= v30 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1, v31 + 1, 1);
        uint64_t v29 = (uint64_t)v53;
        uint64_t v24 = v55;
      }
      *(void *)(v24 + 16) = v31 + 1;
      outlined init with take of SecretKey(v29, v24+ ((*(unsigned __int8 *)(v50 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80))+ *(void *)(v50 + 72) * v31, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
      v26 += v48;
      --v23;
      uint64_t v8 = v52;
      if (!v23)
      {
        a1 = v43;
        goto LABEL_25;
      }
    }
    (*v27)(v10, v8);
    return swift_release();
  }
  else
  {
LABEL_25:
    uint64_t v33 = swift_bridgeObjectRelease();
    a1[1] = v24;
    MEMORY[0x270FA5388](v33);
    uint64_t v34 = v47;
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiEvaluationKeyMetadata and conformance AspireApiEvaluationKeyMetadata, (void (*)(uint64_t))type metadata accessor for AspireApiEvaluationKeyMetadata);
    uint64_t v35 = (uint64_t)v44;
    uint64_t v36 = v46;
    static Message.with(_:)();
    uint64_t v37 = (uint64_t)a1 + *(int *)(type metadata accessor for AspireApiPECRequest(0) + 32);
    outlined destroy of AspireApiEvaluationKeyMetadata?(v37);
    outlined init with take of SecretKey(v35, v37, type metadata accessor for AspireApiEvaluationKeyMetadata);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v45 + 56))(v37, 0, 1, v36);
    v38 = (uint64_t *)(v34 + *(int *)(type metadata accessor for SimilarityClient() + 24));
    uint64_t v39 = *v38;
    unint64_t v40 = v38[1];
    uint64_t v41 = a1[2];
    unint64_t v42 = a1[3];
    outlined copy of Data._Representation(*v38, v40);
    uint64_t result = outlined consume of Data._Representation(v41, v42);
    a1[2] = v39;
    a1[3] = v40;
  }
  return result;
}

uint64_t partial apply for closure #1 in SimilarityClient.encryptValues(_:shardIndices:)(void *a1)
{
  return closure #1 in SimilarityClient.encryptValues(_:shardIndices:)(a1, *(void *)(v1 + 16), *(char **)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CipherML42AspireSimilaritySerializedCiphertextMatrixVG_16CryptoKitPrivate3PECO0hi5CoeffJ0VsAE_pTg5(void (*a1)(uint64_t, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  unint64_t v19 = a1;
  uint64_t v20 = a2;
  uint64_t v18 = type metadata accessor for PEC.SerializedCiphertextCoeffMatrix();
  uint64_t v6 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v9 = *(void *)(a3 + 16);
  uint64_t v10 = MEMORY[0x263F8EE78];
  if (v9)
  {
    uint64_t v22 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9, 0);
    uint64_t v10 = v22;
    uint64_t v11 = *(void *)(type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0) - 8);
    uint64_t v12 = a3 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    uint64_t v17 = *(void *)(v11 + 72);
    uint64_t v16 = v6 + 32;
    while (1)
    {
      v19(v12, &v21);
      if (v4) {
        break;
      }
      uint64_t v4 = 0;
      uint64_t v22 = v10;
      unint64_t v14 = *(void *)(v10 + 16);
      unint64_t v13 = *(void *)(v10 + 24);
      if (v14 >= v13 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
        uint64_t v10 = v22;
      }
      *(void *)(v10 + 16) = v14 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v10+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(void *)(v6 + 72) * v14, v8, v18);
      v12 += v17;
      if (!--v9) {
        return v10;
      }
    }
    swift_release();
  }
  return v10;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation4DataVG_8CipherML16AspireApiRequestVsAE_pTg5(void (*a1)(void *, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  unint64_t v19 = a1;
  uint64_t v20 = a2;
  uint64_t v6 = type metadata accessor for AspireApiRequest(0);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6 - 8);
  int64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v10 = *(void *)(a3 + 16);
  uint64_t v11 = MEMORY[0x263F8EE78];
  if (v10)
  {
    uint64_t v23 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10, 0);
    uint64_t v11 = v23;
    uint64_t v12 = (unint64_t *)(a3 + 40);
    while (1)
    {
      uint64_t v14 = *(v12 - 1);
      unint64_t v13 = *v12;
      v22[0] = v14;
      v22[1] = v13;
      outlined copy of Data._Representation(v14, v13);
      v19(v22, &v21);
      if (v4) {
        break;
      }
      uint64_t v4 = 0;
      outlined consume of Data._Representation(v14, v13);
      uint64_t v23 = v11;
      unint64_t v16 = *(void *)(v11 + 16);
      unint64_t v15 = *(void *)(v11 + 24);
      if (v16 >= v15 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
        uint64_t v11 = v23;
      }
      v12 += 2;
      *(void *)(v11 + 16) = v16 + 1;
      outlined init with take of SecretKey((uint64_t)v9, v11+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(void *)(v7 + 72) * v16, type metadata accessor for AspireApiRequest);
      if (!--v10) {
        return v11;
      }
    }
    outlined consume of Data._Representation(v14, v13);
    swift_release();
  }
  return v11;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay16CryptoKitPrivate3PIRO14BlindedKeywordVG_8CipherML16AspireApiRequestVs5NeverOTg5(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  unint64_t v19 = a1;
  uint64_t v20 = a2;
  uint64_t v6 = type metadata accessor for AspireApiRequest(0);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6 - 8);
  int64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v10 = *(void *)(a3 + 16);
  uint64_t v11 = MEMORY[0x263F8EE78];
  if (v10)
  {
    uint64_t v21 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10, 0);
    uint64_t v11 = v21;
    uint64_t v12 = *(void *)(type metadata accessor for PIR.BlindedKeyword() - 8);
    uint64_t v13 = a3 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
    uint64_t v18 = *(void *)(v12 + 72);
    while (1)
    {
      v19(v13);
      if (v4) {
        break;
      }
      uint64_t v4 = 0;
      uint64_t v21 = v11;
      unint64_t v15 = *(void *)(v11 + 16);
      unint64_t v14 = *(void *)(v11 + 24);
      if (v15 >= v14 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
        uint64_t v11 = v21;
      }
      *(void *)(v11 + 16) = v15 + 1;
      outlined init with take of SecretKey((uint64_t)v9, v11+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(void *)(v7 + 72) * v15, type metadata accessor for AspireApiRequest);
      v13 += v18;
      if (!--v10) {
        return v11;
      }
    }
    swift_release();
  }
  return v11;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation4DataVG_16CryptoKitPrivate3PIRO14BlindedKeywordVsAE_pTg5(void (*a1)(void *, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  unint64_t v19 = a1;
  uint64_t v20 = a2;
  uint64_t v18 = type metadata accessor for PIR.BlindedKeyword();
  uint64_t v6 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v9 = *(void *)(a3 + 16);
  uint64_t v10 = MEMORY[0x263F8EE78];
  if (v9)
  {
    uint64_t v23 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9, 0);
    uint64_t v10 = v23;
    v17[1] = v6 + 32;
    uint64_t v11 = (unint64_t *)(a3 + 40);
    while (1)
    {
      uint64_t v12 = *(v11 - 1);
      unint64_t v13 = *v11;
      v22[0] = v12;
      v22[1] = v13;
      outlined copy of Data._Representation(v12, v13);
      v19(v22, &v21);
      if (v4) {
        break;
      }
      uint64_t v4 = 0;
      outlined consume of Data._Representation(v12, v13);
      uint64_t v23 = v10;
      unint64_t v15 = *(void *)(v10 + 16);
      unint64_t v14 = *(void *)(v10 + 24);
      if (v15 >= v14 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
        uint64_t v10 = v23;
      }
      v11 += 2;
      *(void *)(v10 + 16) = v15 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v10+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(void *)(v6 + 72) * v15, v8, v18);
      if (!--v9) {
        return v10;
      }
    }
    outlined consume of Data._Representation(v12, v13);
    swift_release();
  }
  return v10;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation4DataVG_8CipherML19SymmetricPirKeywordVs5NeverOTg5(void (*a1)(long long *__return_ptr, void *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  int64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = MEMORY[0x263F8EE78];
  if (v5)
  {
    uint64_t v23 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
    uint64_t v6 = v23;
    int64_t v9 = (unint64_t *)(a3 + 40);
    while (1)
    {
      uint64_t v10 = *(v9 - 1);
      unint64_t v11 = *v9;
      v20[0] = v10;
      v20[1] = v11;
      outlined copy of Data._Representation(v10, v11);
      a1(&v21, v20);
      if (v4) {
        break;
      }
      uint64_t v4 = 0;
      outlined consume of Data._Representation(v10, v11);
      long long v12 = v21;
      long long v13 = v22;
      uint64_t v23 = v6;
      unint64_t v15 = *(void *)(v6 + 16);
      unint64_t v14 = *(void *)(v6 + 24);
      if (v15 >= v14 >> 1)
      {
        long long v18 = v22;
        long long v19 = v21;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
        long long v13 = v18;
        long long v12 = v19;
        uint64_t v6 = v23;
      }
      v9 += 2;
      *(void *)(v6 + 16) = v15 + 1;
      uint64_t v16 = v6 + 32 * v15;
      *(_OWORD *)(v16 + 32) = v12;
      *(_OWORD *)(v16 + 48) = v13;
      if (!--v5) {
        return v6;
      }
    }
    outlined consume of Data._Representation(v10, v11);
    swift_release();
  }
  return v6;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_10Foundation4DataVsAE_pTg5(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *(*v16)(long long *__return_ptr, uint64_t *, uint64_t *);
  uint64_t v17;
  uint64_t v18;
  long long v19;
  uint64_t v20;

  uint64_t v16 = (void *(*)(long long *__return_ptr, uint64_t *, uint64_t *))result;
  uint64_t v5 = a4 - a3;
  if (__OFSUB__(a4, a3))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v6 = v4;
  uint64_t v7 = MEMORY[0x263F8EE78];
  if (!v5) {
    return (void *)v7;
  }
  uint64_t v20 = MEMORY[0x263F8EE78];
  uint64_t result = (void *)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5 & ~(v5 >> 63), 0);
  if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v7 = v20;
    if (a4 <= a3) {
      uint64_t v10 = a3;
    }
    else {
      uint64_t v10 = a4;
    }
    uint64_t v11 = a3;
    while (a4 != v11)
    {
      long long v18 = v11;
      uint64_t result = v16(&v19, &v18, &v17);
      if (v6)
      {
        swift_release();
        return (void *)v7;
      }
      uint64_t v6 = 0;
      long long v12 = v19;
      uint64_t v20 = v7;
      unint64_t v14 = *(void *)(v7 + 16);
      unint64_t v13 = *(void *)(v7 + 24);
      if (v14 >= v13 >> 1)
      {
        long long v15 = v19;
        uint64_t result = (void *)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
        long long v12 = v15;
        uint64_t v7 = v20;
      }
      *(void *)(v7 + 16) = v14 + 1;
      *(_OWORD *)(v7 + 16 * v14 + 32) = v12;
      if (a4 < a3) {
        goto LABEL_19;
      }
      if (v10 == v11) {
        goto LABEL_20;
      }
      if (a4 == ++v11) {
        return (void *)v7;
      }
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t closure #3 in closure #1 in SimilarityClient.encryptValues(_:shardIndices:)(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = (char *)a2 + *(int *)(type metadata accessor for SimilarityClient() + 20);
  uint64_t v4 = *((void *)v3 + 4);
  unint64_t v5 = *((void *)v3 + 5);
  uint64_t v6 = a1[1];
  unint64_t v7 = a1[2];
  outlined copy of Data._Representation(v4, v5);
  uint64_t result = outlined consume of Data._Representation(v6, v7);
  a1[1] = v4;
  a1[2] = v5;
  return result;
}

uint64_t SimilarityClient.decryptSimilarityScores(shard:)(uint64_t *a1)
{
  uint64_t v4 = *a1;
  swift_bridgeObjectRetain();
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CipherML42AspireSimilaritySerializedCiphertextMatrixVG_16CryptoKitPrivate3PECO0hi5CoeffJ0VsAE_pTg5((void (*)(uint64_t, uint64_t *))partial apply for closure #1 in SimilarityClient.decryptSimilarityScores(shard:), (uint64_t)&v26, v4);
  swift_bridgeObjectRelease();
  if (v2) {
    return (uint64_t)v1;
  }
  uint64_t v6 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v1 = ((char *)v1 + *(int *)(type metadata accessor for SimilarityClient() + 28));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v7 = PEC.SimilarityClient.decryptCrt(reply:)();
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v9 = *(void *)(v6 + 16);
  uint64_t v10 = *(void *)(v5 + 16);
  if (v9)
  {
    if (v10 && v9 != v10)
    {
      swift_bridgeObjectRelease();
      uint64_t v28 = 0;
      unint64_t v29 = 0xE000000000000000;
      _StringGuts.grow(_:)(47);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v28 = 0x7364497972746E65;
      unint64_t v29 = 0xEF20746E756F632ELL;
      unint64_t v27 = v9;
      v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v11);
      swift_bridgeObjectRelease();
      v12._object = (void *)0x8000000249E93C60;
      v12._countAndFlagsBits = 0xD00000000000001CLL;
      String.append(_:)(v12);
      swift_bridgeObjectRelease();
      unint64_t v27 = v10;
      v13._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v13);
      swift_bridgeObjectRelease();
      uint64_t v1 = v28;
      unint64_t v14 = v29;
      type metadata accessor for CipherMLError();
      lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
      swift_allocError();
      *long long v15 = v1;
      v15[1] = v14;
LABEL_25:
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      return (uint64_t)v1;
    }
    uint64_t v16 = *(void *)(v7 + 16);
    if (v16 % (uint64_t)v9)
    {
      swift_bridgeObjectRelease();
      if (one-time initialization token for daemon != -1) {
        swift_once();
      }
      uint64_t v23 = type metadata accessor for Logger();
      __swift_project_value_buffer(v23, (uint64_t)static Logger.daemon);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v1 = Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v1, v24))
      {
        uint64_t v19 = swift_slowAlloc();
        *(_DWORD *)uint64_t v19 = 134349312;
        swift_bridgeObjectRelease();
        uint64_t v28 = v9;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v19 + 12) = 2050;
        swift_bridgeObjectRelease();
        uint64_t v28 = v16;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v20 = "Wrong entryIds.count %{public}ld.\nMust be 0 or divide scores.count %{public}ld";
        long long v21 = v1;
        os_log_type_t v22 = v24;
        goto LABEL_17;
      }
      goto LABEL_23;
    }
    if (!v10 || !(v16 % v10))
    {
      uint64_t v1 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_SaySo18CMLSimilarityScoreCGs5NeverOTg5056_s8CipherML16SimilarityClientV07decryptC6Scores5shardSayo4So18dE47CGGAA25AspireApiPECShardResponseV_tKFAHSiXEfU0_Say10Foundation4DataVGSays6UInt64VGSaySfGSiTf1cn_nTf4ngggn_n(0, v16 / v9, v5, v6, v7, v16 / v9);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)v1;
    }
LABEL_8:
    swift_bridgeObjectRelease();
    if (one-time initialization token for daemon != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Logger.daemon);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v1 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v1, v18))
    {
      uint64_t v19 = swift_slowAlloc();
      *(_DWORD *)uint64_t v19 = 134349312;
      swift_bridgeObjectRelease();
      uint64_t v28 = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v19 + 12) = 2050;
      swift_bridgeObjectRelease();
      uint64_t v28 = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v20 = "Wrong metadatas.count %{public}ld.\nMust be 0 or divide scores.count %{public}ld";
      long long v21 = v1;
      os_log_type_t v22 = v18;
LABEL_17:
      _os_log_impl(&dword_249C3F000, v21, v22, v20, (uint8_t *)v19, 0x16u);
      MEMORY[0x24C5B4790](v19, -1, -1);

LABEL_24:
      type metadata accessor for CipherMLError();
      lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
      swift_allocError();
      goto LABEL_25;
    }
LABEL_23:

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    goto LABEL_24;
  }
  if (!v10)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for CipherMLError();
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
    swift_allocError();
    void *v25 = 0xD000000000000030;
    v25[1] = 0x8000000249E93C80;
    goto LABEL_25;
  }
  uint64_t v16 = *(void *)(v7 + 16);
  if (v16 % v10) {
    goto LABEL_8;
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in SimilarityClient.decryptSimilarityScores(shard:)@<X0>(void *a1@<X2>, uint64_t a2@<X8>)
{
  unint64_t v14 = a1;
  uint64_t v3 = type metadata accessor for HE.EncryptionParams();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for PEC.SimilarityClientConfig();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SimilarityClient();
  PEC.SimilarityClient.similarityConfig.getter();
  PEC.SimilarityClientConfig.encryptionParams.getter();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  uint64_t v11 = v15;
  AspireSimilaritySerializedCiphertextMatrix.cryptokit(encryptionParams:)((uint64_t)v6, a2);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  if (v11) {
    *unint64_t v14 = v11;
  }
  return result;
}

uint64_t partial apply for closure #1 in SimilarityClient.decryptSimilarityScores(shard:)@<X0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  return closure #1 in SimilarityClient.decryptSimilarityScores(shard:)(a1, a2);
}

uint64_t closure #2 in SimilarityClient.decryptSimilarityScores(shard:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v10 = a6;
  uint64_t v11 = *a1;
  if (*(void *)(a2 + 16))
  {
    MEMORY[0x270FA5388](a1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v13 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVys010EnumeratedE0VySays6UInt64VGGSay10Foundation4DataVGG_So18CMLSimilarityScoreCs5NeverOTg506_sSis6g14V10Foundation4i5VSo18jk37CIgyygo_Si6offset_AB7elementt_AEtAGs5L11OIegnrzr_TRSiAkpTIgyygo_Tf1cn_nTf4ng_n(a3, a2, (void (*)(unint64_t, uint64_t, uint64_t, unint64_t))partial apply for closure #2 in closure #2 in SimilarityClient.decryptSimilarityScores(shard:));
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
LABEL_11:
    *uint64_t v10 = v13;
    return result;
  }
  v26[1] = v26;
  unint64_t v27 = a6;
  uint64_t v28 = v6;
  uint64_t v31 = MEMORY[0x263F8EE78];
  swift_bridgeObjectRetain();
  specialized ContiguousArray.reserveCapacity(_:)();
  uint64_t v15 = *(void *)(a3 + 16);
  uint64_t v29 = a3;
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v30 = v15;
  if (!v15)
  {
LABEL_10:
    swift_bridgeObjectRelease();
    uint64_t v13 = v31;
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v10 = v27;
    goto LABEL_11;
  }
  uint64_t v16 = 0;
  uint64_t v17 = v29 + 32;
  while (1)
  {
    uint64_t v18 = v16 * a5;
    if ((unsigned __int128)(v16 * (__int128)a5) >> 64 != (v16 * a5) >> 63) {
      break;
    }
    BOOL v19 = __OFADD__(v18, v11);
    unint64_t v20 = v18 + v11;
    if (v19) {
      goto LABEL_13;
    }
    if ((v20 & 0x8000000000000000) != 0) {
      goto LABEL_14;
    }
    if (v20 >= *(void *)(a4 + 16)) {
      goto LABEL_15;
    }
    uint64_t v21 = *(void *)(v17 + 8 * v16++);
    int v22 = *(_DWORD *)(a4 + 32 + 4 * v20);
    uint64_t v23 = self;
    LODWORD(v24) = v22;
    id v25 = objc_msgSend(v23, sel_scoreWithIdentifier_score_, v21, v24);
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    uint64_t result = specialized ContiguousArray._endMutation()();
    if (v30 == v16) {
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_13:
  __break(1u);
LABEL_14:
  __break(1u);
LABEL_15:
  __break(1u);
  return result;
}

uint64_t closure #2 in closure #2 in SimilarityClient.decryptSimilarityScores(shard:)(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = result * a6;
  if ((unsigned __int128)(result * (__int128)a6) >> 64 != (result * a6) >> 63)
  {
    __break(1u);
    goto LABEL_7;
  }
  BOOL v8 = __OFADD__(v7, a7);
  unint64_t v9 = v7 + a7;
  if (v8)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if ((v9 & 0x8000000000000000) != 0)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v9 < *(void *)(a5 + 16))
  {
    int v13 = *(_DWORD *)(a5 + 4 * v9 + 32);
    outlined copy of Data._Representation(a3, a4);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data._Representation(a3, a4);
    uint64_t v15 = self;
    LODWORD(v16) = v13;
    id v17 = objc_msgSend(v15, sel_scoreWithIdentifier_score_metadata_, a2, isa, v16);

    return (uint64_t)v17;
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t SimilarityClient.decryptSimilarityScores(_:)(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for AspireApiPECShardResponse(0);
  uint64_t v34 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4 - 8);
  unint64_t v42 = (uint64_t *)((char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: AspireApiPECShardResponse));
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v33 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (offset: Int, element: AspireApiPECShardResponse)?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (unint64_t *)((char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v12);
  unint64_t v14 = (char **)((char *)&v33 - v13);
  uint64_t v15 = *a1;
  unint64_t v16 = *(void *)(*a1 + 16);
  v38 = (unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48);
  uint64_t v39 = (void (**)(unint64_t *, uint64_t, uint64_t, uint64_t))(v7 + 56);
  uint64_t v37 = v15;
  uint64_t result = swift_bridgeObjectRetain();
  unint64_t v18 = 0;
  BOOL v19 = (void *)MEMORY[0x263F8EE78];
  uint64_t v35 = v11;
  uint64_t v36 = v14;
  if (v16) {
    goto LABEL_5;
  }
LABEL_4:
  while (2)
  {
    uint64_t v20 = 1;
    unint64_t v21 = v16;
    while (1)
    {
      (*v39)(v11, v20, 1, v6);
      outlined init with take of (offset: Int, element: AspireApiPECShardResponse)?((uint64_t)v11, (uint64_t)v14);
      if ((*v38)(v14, 1, v6) == 1) {
        goto LABEL_22;
      }
      unint64_t v41 = v21;
      uint64_t v24 = *v14;
      id v25 = v42;
      outlined init with take of SecretKey((uint64_t)v14 + *(int *)(v6 + 48), (uint64_t)v42, type metadata accessor for AspireApiPECShardResponse);
      uint64_t v26 = SimilarityClient.decryptSimilarityScores(shard:)(v25);
      if (v2)
      {
        outlined destroy of AspireApiPECConfig((uint64_t)v42, type metadata accessor for AspireApiPECShardResponse);
        swift_bridgeObjectRelease();
LABEL_22:
        swift_bridgeObjectRelease();
        return (uint64_t)v19;
      }
      unint64_t v27 = (void *)v26;
      if (v24) {
        break;
      }
      outlined destroy of AspireApiPECConfig((uint64_t)v42, type metadata accessor for AspireApiPECShardResponse);
      uint64_t result = swift_bridgeObjectRelease();
      BOOL v19 = v27;
      unint64_t v18 = v41;
      if (v41 == v16) {
        goto LABEL_4;
      }
LABEL_5:
      if ((v18 & 0x8000000000000000) != 0) {
        goto LABEL_26;
      }
      if (v18 >= *(void *)(v37 + 16)) {
        goto LABEL_27;
      }
      unint64_t v21 = v18 + 1;
      uint64_t v22 = (uint64_t)&v33[*(int *)(v6 + 48)];
      outlined init with copy of SecretKey(v37+ ((*(unsigned __int8 *)(v34 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80))+ *(void *)(v34 + 72) * v18, v22, type metadata accessor for AspireApiPECShardResponse);
      uint64_t v23 = (uint64_t)v11 + *(int *)(v6 + 48);
      *uint64_t v11 = v18;
      outlined init with take of SecretKey(v22, v23, type metadata accessor for AspireApiPECShardResponse);
      uint64_t v20 = 0;
    }
    uint64_t v28 = v6;
    uint64_t v29 = v19[2];
    if (v29 != *(void *)(v26 + 16))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      type metadata accessor for CipherMLError();
      lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
      swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      outlined destroy of AspireApiPECConfig((uint64_t)v42, type metadata accessor for AspireApiPECShardResponse);
      return (uint64_t)v19;
    }
    uint64_t v40 = 0;
    if (!v29)
    {
LABEL_3:
      outlined destroy of AspireApiPECConfig((uint64_t)v42, type metadata accessor for AspireApiPECShardResponse);
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v2 = v40;
      unint64_t v18 = v41;
      uint64_t v6 = v28;
      uint64_t v11 = v35;
      unint64_t v14 = v36;
      if (v41 == v16) {
        continue;
      }
      goto LABEL_5;
    }
    break;
  }
  unint64_t v30 = 0;
  uint64_t v31 = v26 + 32;
  while (1)
  {
    unint64_t v32 = *(void *)(v31 + 8 * v30);
    swift_bridgeObjectRetain();
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v19);
      BOOL v19 = (void *)result;
    }
    if (v30 >= v19[2]) {
      break;
    }
    specialized Array.append<A>(contentsOf:)(v32);
    if (++v30 == v29) {
      goto LABEL_3;
    }
  }
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t specialized Array.append<A>(contentsOf:)(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  unint64_t v4 = *v1;
  if (*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v6 = v5 + v3;
    if (!__OFADD__(v5, v3)) {
      goto LABEL_5;
    }
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v6 = v5 + v3;
  if (__OFADD__(v5, v3)) {
    goto LABEL_25;
  }
LABEL_5:
  unint64_t v4 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v1 = v4;
  uint64_t v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_15;
    }
    uint64_t v5 = 1;
  }
  if (v4 >> 62) {
    goto LABEL_27;
  }
  uint64_t v9 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6) {
      uint64_t v9 = v6;
    }
    swift_bridgeObjectRetain();
    unint64_t v4 = MEMORY[0x24C5B3870](v5, v9, 1, v4);
    swift_bridgeObjectRelease();
    *uint64_t v1 = v4;
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    uint64_t v10 = specialized Array._copyContents(initializing:)(v8 + 8 * *(void *)(v8 + 16) + 32, (*(void *)(v8 + 24) >> 1) - *(void *)(v8 + 16), a1);
    if (v11 >= v3) {
      break;
    }
LABEL_26:
    __break(1u);
LABEL_27:
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v11 >= 1)
  {
    uint64_t v12 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v13 = __OFADD__(v12, v11);
    uint64_t v14 = v12 + v11;
    if (v13)
    {
      __break(1u);
      return MEMORY[0x270F9DBB8](v10);
    }
    *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
  }
  uint64_t v10 = swift_bridgeObjectRelease();
  return MEMORY[0x270F9DBB8](v10);
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t result, uint64_t a2, char a3)
{
  uint64_t v5 = *(void **)v3;
  int64_t v6 = *(void *)(*(void *)v3 + 16);
  int64_t v7 = v6 + result;
  if (__OFADD__(v6, result))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v9 = result;
  char v10 = a3 & 1;
  isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || (int64_t v12 = v5[3] >> 1, v12 < v7))
  {
    if (v6 <= v7) {
      int64_t v13 = v7;
    }
    else {
      int64_t v13 = v6;
    }
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v13, 1, v5);
    int64_t v12 = v5[3] >> 1;
  }
  uint64_t v14 = v5[2];
  uint64_t v15 = v12 - v14;
  uint64_t result = specialized Sequence._copyContents(initializing:)((uint64_t)&v43, (uint64_t)&v5[2 * v14 + 4], v12 - v14, v9, a2, v10);
  if (result < v9) {
    goto LABEL_15;
  }
  if (result >= 1)
  {
    uint64_t v16 = v5[2];
    BOOL v17 = __OFADD__(v16, result);
    uint64_t v18 = v16 + result;
    if (v17)
    {
      __break(1u);
LABEL_34:
      uint64_t v30 = v37 + v4 + 1;
      goto LABEL_35;
    }
    v5[2] = v18;
  }
  if (result != v15)
  {
LABEL_13:
    *(void *)uint64_t v3 = v5;
    return result;
  }
LABEL_16:
  uint64_t v19 = v46;
  if (v46 == v43) {
    goto LABEL_13;
  }
  int64_t v20 = v5[2];
  uint64_t v40 = v44;
  uint64_t v41 = v43;
  char v39 = v45;
  unint64_t v21 = specialized Repeated.subscript.read((uint64_t (*)())v42, v46, v43, v44, v45);
  uint64_t v23 = *v22;
  char v24 = *((unsigned char *)v22 + 8);
  uint64_t result = ((uint64_t (*)(unsigned char *, void))v21)(v42, 0);
  uint64_t v25 = v41;
  if (v19 < 0 || v19 >= v41) {
    goto LABEL_37;
  }
  uint64_t v26 = v19 + 1;
  uint64_t v27 = -v41;
LABEL_21:
  while (1)
  {
    unint64_t v28 = v5[3];
    int64_t v29 = v28 >> 1;
    uint64_t v30 = v20 + 1;
    if ((uint64_t)(v28 >> 1) < v20 + 1) {
      break;
    }
    if (v20 < v29) {
      goto LABEL_23;
    }
LABEL_20:
    v5[2] = v20;
  }
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v28 > 1), v20 + 1, 1, v5);
  uint64_t v25 = v41;
  uint64_t v5 = (void *)result;
  int64_t v29 = *(void *)(result + 24) >> 1;
  if (v20 >= v29) {
    goto LABEL_20;
  }
LABEL_23:
  int64_t v38 = v29;
  uint64_t v31 = &v5[2 * v20];
  v31[4] = v23;
  *((unsigned char *)v31 + 40) = v24 & 1;
  if (v26 == v25)
  {
LABEL_35:
    v5[2] = v30;
    goto LABEL_13;
  }
  uint64_t v4 = 0;
  uint64_t v32 = v27 + v26;
  int64_t v37 = v20;
  int64_t v33 = ~v20 + v29;
  uint64_t v34 = v31 + 7;
  while (1)
  {
    uint64_t v35 = specialized Repeated.subscript.read((uint64_t (*)())v42, v26 + v4, v41, v40, v39);
    uint64_t v23 = *v36;
    char v24 = *((unsigned char *)v36 + 8);
    uint64_t result = ((uint64_t (*)(unsigned char *, void))v35)(v42, 0);
    uint64_t v25 = v41;
    if (v26 < 0 || v26 + v4 >= v41) {
      break;
    }
    if (v33 == v4)
    {
      v26 += v4 + 1;
      int64_t v20 = v38;
      uint64_t v27 = -v41;
      v5[2] = v38;
      goto LABEL_21;
    }
    *((void *)v34 - 1) = v23;
    *uint64_t v34 = v24;
    v34 += 16;
    ++v4;
    if (!(v32 + v4)) {
      goto LABEL_34;
    }
  }
  __break(1u);
LABEL_37:
  __break(1u);
  return result;
}

uint64_t default argument 0 of RequestsManager.init(configCache:keyStorage:activeUseCaseTracker:allowList:currentTime:)()
{
  return 0;
}

uint64_t default argument 1 of RequestsManager.init(configCache:keyStorage:activeUseCaseTracker:allowList:currentTime:)()
{
  return 0;
}

uint64_t default argument 2 of RequestsManager.init(configCache:keyStorage:activeUseCaseTracker:allowList:currentTime:)()
{
  return 0;
}

uint64_t default argument 3 of RequestsManager.init(configCache:keyStorage:activeUseCaseTracker:allowList:currentTime:)()
{
  return 0;
}

uint64_t default argument 1 of RequestsManager.PIRContext.prepareDataRequests(keywords:shardIds:)()
{
  return MEMORY[0x263F8EE78];
}

uint64_t default argument 2 of RequestsManager.requestData(keywords:context:shardIds:)()
{
  return MEMORY[0x263F8EE78];
}

uint64_t default argument 1 of ActiveUseCaseTracker.markActive(useCase:active:)()
{
  return 1;
}

uint64_t default argument 2 of AMSNetworking.init(networkDelegationConfig:secondaryIdentifier:baseURL:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  URL.init(string:)();
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  if (result != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v6 + 32))(a1, v4, v5);
  }
  __break(1u);
  return result;
}

uint64_t default argument 1 of StaticPIRParameters.init(maxShards:cacheElementCount:cacheEntryMinutesToLive:shardingDependsOn:)()
{
  return 0;
}

uint64_t default argument 2 of StaticPIRParameters.init(maxShards:cacheElementCount:cacheEntryMinutesToLive:shardingDependsOn:)()
{
  return 0;
}

uint64_t default argument 3 of StaticPIRParameters.init(maxShards:cacheElementCount:cacheEntryMinutesToLive:shardingDependsOn:)()
{
  return 0;
}

double default argument 0 of StaticPECParameters.init(differentialPrivacyParameters:)@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 40) = 1;
  return result;
}

uint64_t default argument 2 of UseCaseGroup.init(useCases:networkConfig:keyExpirationMinutes:keyRotationBeforeExpirationMinutes:keyRotationIgnoreMissingEvaluationKey:securityLevel:)()
{
  return 43200;
}

uint64_t default argument 3 of UseCaseGroup.init(useCases:networkConfig:keyExpirationMinutes:keyRotationBeforeExpirationMinutes:keyRotationIgnoreMissingEvaluationKey:securityLevel:)()
{
  return 0;
}

uint64_t default argument 4 of UseCaseGroup.init(useCases:networkConfig:keyExpirationMinutes:keyRotationBeforeExpirationMinutes:keyRotationIgnoreMissingEvaluationKey:securityLevel:)()
{
  return 0;
}

uint64_t default argument 5 of UseCaseGroup.init(useCases:networkConfig:keyExpirationMinutes:keyRotationBeforeExpirationMinutes:keyRotationIgnoreMissingEvaluationKey:securityLevel:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *MEMORY[0x263F387F0];
  uint64_t v3 = type metadata accessor for HE.SecurityLevel();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104);
  return v4(a1, v2, v3);
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t default argument 1 of RequestsManager.queryStatus(for:options:)()
{
  return 0;
}

uint64_t default argument 2 of SqliteCache.init(useCase:cacheElementCount:cacheEntryMinutesToLive:getCurrentDate:)()
{
  if (one-time initialization token for defaultCacheEntryMinutesToLive != -1) {
    swift_once();
  }
  return static StaticPIRParameters.defaultCacheEntryMinutesToLive;
}

uint64_t default argument 1 of static SqliteCache.createTable(useCase:schemaVersion:)()
{
  return 1;
}

uint64_t default argument 1 of XPCHandler.queryStatus(for:options:)()
{
  return 0;
}

uint64_t default argument 0 of ActiveUseCaseTracker.init(persistenceFile:)@<X0>(uint64_t a1@<X8>)
{
  return default argument 0 of ActiveUseCaseTracker.init(persistenceFile:)(MEMORY[0x263F06EA8], a1);
}

uint64_t (*default argument 1 of TokenIssuerDirectory.isValid(tokenKey:currentTime:)())()
{
  return closure #1 in default argument 4 of RequestsManager.init(configCache:keyStorage:activeUseCaseTracker:allowList:currentTime:);
}

uint64_t default argument 2 of RequestsManager.PECContext.preparePECRequest(elements:shardIndices:keyConfig:)@<X0>(uint64_t a1@<X8>)
{
  return default argument 0 of ActiveUseCaseTracker.init(persistenceFile:)(type metadata accessor for AspireHeEvaluationKeyConfig, a1);
}

uint64_t default argument 0 of ActiveUseCaseTracker.init(persistenceFile:)@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1(0);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);
  return v4(a2, 1, 1, v3);
}

uint64_t default argument 1 of PoissonDistribution.init(mean:cap:)()
{
  return 0;
}

uint64_t default argument 2 of GammaDistribution.init(shape:scale:cap:)()
{
  return 0;
}

double default argument 0 of NormalDistribution.init(mean:standardDeviation:)()
{
  return 0.0;
}

double default argument 1 of NormalDistribution.init(mean:standardDeviation:)()
{
  return 1.0;
}

void protocol witness for SetAlgebra.init() in conformance CMLUseCaseControlOptions(void *a1@<X8>)
{
  *a1 = 0;
}

void *protocol witness for SetAlgebra.union(_:) in conformance CMLUseCaseControlOptions@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

void *protocol witness for SetAlgebra.symmetricDifference(_:) in conformance CMLUseCaseControlOptions@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

void *protocol witness for SetAlgebra.remove(_:) in conformance CMLUseCaseControlOptions@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *protocol witness for SetAlgebra.update(with:) in conformance CMLUseCaseControlOptions@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v4 = *v2;
  *v2 |= *result;
  uint64_t v5 = v4 & v3;
  *(void *)a2 = v5;
  *(unsigned char *)(a2 + 8) = v5 == 0;
  return result;
}

void *protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance CMLUseCaseControlOptions(void *result)
{
  *v1 ^= *result;
  return result;
}

void *protocol witness for SetAlgebra.subtracting(_:) in conformance CMLUseCaseControlOptions@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL protocol witness for SetAlgebra.isSubset(of:) in conformance CMLUseCaseControlOptions(void *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL protocol witness for SetAlgebra.isDisjoint(with:) in conformance CMLUseCaseControlOptions(void *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL protocol witness for SetAlgebra.isSuperset(of:) in conformance CMLUseCaseControlOptions(void *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL protocol witness for SetAlgebra.isEmpty.getter in conformance CMLUseCaseControlOptions()
{
  return *v0 == 0;
}

uint64_t protocol witness for SetAlgebra.init<A>(_:) in conformance CMLUseCaseControlOptions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x270F9E7D8](a1, a4, a2, a5, a3);
}

void *protocol witness for SetAlgebra.subtract(_:) in conformance CMLUseCaseControlOptions(void *result)
{
  *v1 &= ~*result;
  return result;
}

void *protocol witness for SetAlgebra.intersection(_:) in conformance container_query_flags_t@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

BOOL protocol witness for SetAlgebra.insert(_:) in conformance container_query_flags_t(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

void *protocol witness for SetAlgebra.formUnion(_:) in conformance container_query_flags_t(void *result)
{
  *v1 |= *result;
  return result;
}

void *protocol witness for SetAlgebra.formIntersection(_:) in conformance container_query_flags_t(void *result)
{
  *v1 &= *result;
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance CMLUseCaseControlOptions(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance CMLUseCaseControlOptions@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = specialized SetAlgebra<>.init(arrayLiteral:)(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

void *protocol witness for RawRepresentable.init(rawValue:) in conformance CMLUseCaseControlOptions@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance CMLUseCaseControlOptions(void *a1@<X8>)
{
  *a1 = *v1;
}

void *protocol witness for OptionSet.init(rawValue:) in conformance container_query_flags_t@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void *specialized _ArrayBuffer._consumeAndCreateNew()(void *a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

char *specialized _ArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew()(unint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, a1);
}

void (*specialized protocol witness for Collection.subscript.read in conformance [A](void (**a1)(id *a1), unint64_t a2, uint64_t a3))(void *a1)
{
  uint64_t v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

void protocol witness for Collection.subscript.read in conformance [A]specialized (void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);
  free(v1);
}

void (*specialized Array.subscript.read(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  uint64_t v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    id v4 = (id)MEMORY[0x24C5B3860](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    id v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(void *)uint64_t v3 = v4;
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

void Array.subscript.readspecialized (id *a1)
{
}

uint64_t specialized Array._copyContents(initializing:)(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        lazy protocol witness table accessor for type [CMLSimilarityScore] and conformance [A]();
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CMLSimilarityScore]);
          int64_t v12 = specialized protocol witness for Collection.subscript.read in conformance [A](v16, i, a3);
          id v14 = *v13;
          ((void (*)(void (**)(id *), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for CMLSimilarityScore();
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copyContents(initializing:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  if (!a2)
  {
    uint64_t v6 = 0;
    a3 = 0;
    goto LABEL_14;
  }
  if (!a3)
  {
    uint64_t v6 = 0;
    goto LABEL_14;
  }
  if (a3 < 0)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (!a4)
  {
    a3 = 0;
LABEL_13:
    uint64_t v6 = a4;
    goto LABEL_14;
  }
  if (a4 >= 1)
  {
    *(void *)a2 = a5;
    *(unsigned char *)(a2 + 8) = a6 & 1;
    if (a3 == 1)
    {
      uint64_t v6 = 1;
LABEL_14:
      *(void *)uint64_t result = a4;
      *(void *)(result + 8) = a5;
      *(unsigned char *)(result + 16) = a6 & 1;
      *(void *)(result + 24) = v6;
      return a3;
    }
    if (a4 == 1)
    {
      a3 = 1;
      goto LABEL_13;
    }
    uint64_t v7 = 1 - a4;
    uint64_t v8 = (unsigned char *)(a2 + 24);
    uint64_t v9 = 2;
    while (1)
    {
      uint64_t v10 = v9;
      if (v7 + v9 == 2) {
        break;
      }
      *((void *)v8 - 1) = a5;
      *uint64_t v8 = a6 & 1;
      if (a3 == v9)
      {
        uint64_t v6 = v9;
        goto LABEL_14;
      }
      ++v9;
      v8 += 16;
      if (v7 + v10 + 1 == 2)
      {
        uint64_t v6 = a4;
        a3 = v10;
        goto LABEL_14;
      }
    }
    __break(1u);
    __break(1u);
    goto LABEL_22;
  }
LABEL_23:
  __break(1u);
  return result;
}

uint64_t (*specialized Repeated.subscript.read(uint64_t (*result)(), uint64_t a2, uint64_t a3, uint64_t a4, char a5))()
{
  if (a2 < 0 || a2 >= a3)
  {
    __break(1u);
  }
  else
  {
    *(void *)uint64_t result = a4;
    *((unsigned char *)result + 8) = a5 & 1;
    return Repeated.subscript.readspecialized ;
  }
  return result;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVys010EnumeratedE0VySays6UInt64VGGSay10Foundation4DataVGG_So18CMLSimilarityScoreCs5NeverOTg506_sSis6g14V10Foundation4i5VSo18jk37CIgyygo_Si6offset_AB7elementt_AEtAGs5L11OIegnrzr_TRSiAkpTIgyygo_Tf1cn_nTf4ng_n(uint64_t a1, uint64_t a2, void (*a3)(unint64_t, uint64_t, uint64_t, unint64_t))
{
  uint64_t v14 = MEMORY[0x263F8EE78];
  specialized ContiguousArray.reserveCapacity(_:)();
  uint64_t v5 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRetain();
  if (v5)
  {
    unint64_t v7 = 0;
    uint64_t v8 = (unint64_t *)(a2 + 40);
    do
    {
      unint64_t v9 = *(void *)(a2 + 16);
      if (v7 == v9) {
        break;
      }
      if (v7 >= v9)
      {
        __break(1u);
        return result;
      }
      uint64_t v10 = *(void *)(a1 + 32 + 8 * v7);
      uint64_t v11 = *(v8 - 1);
      unint64_t v12 = *v8;
      outlined copy of Data._Representation(v11, *v8);
      a3(v7, v10, v11, v12);
      outlined consume of Data._Representation(v11, v12);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      uint64_t result = specialized ContiguousArray._endMutation()();
      v8 += 2;
      ++v7;
    }
    while (v5 != v7);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_SaySo18CMLSimilarityScoreCGs5NeverOTg5056_s8CipherML16SimilarityClientV07decryptC6Scores5shardSayo4So18dE47CGGAA25AspireApiPECShardResponseV_tKFAHSiXEfU0_Say10Foundation4DataVGSays6UInt64VGSaySfGSiTf1cn_nTf4ngggn_n(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v8 = v6;
  uint64_t v9 = MEMORY[0x263F8EE78];
  if (!v7) {
    return v9;
  }
  uint64_t v11 = result;
  uint64_t v23 = MEMORY[0x263F8EE78];
  uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7 & ~(v7 >> 63), 0);
  if ((v7 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = v23;
    if (a2 <= v11) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = a2;
    }
    uint64_t v13 = v11;
    while (a2 != v13)
    {
      uint64_t v21 = v13;
      uint64_t result = closure #2 in SimilarityClient.decryptSimilarityScores(shard:)(&v21, a3, a4, a5, a6, &v22);
      if (v8)
      {
        swift_release();
        return v9;
      }
      uint64_t v8 = 0;
      uint64_t v14 = v22;
      uint64_t v23 = v9;
      unint64_t v16 = *(void *)(v9 + 16);
      unint64_t v15 = *(void *)(v9 + 24);
      if (v16 >= v15 >> 1)
      {
        uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
        uint64_t v9 = v23;
      }
      *(void *)(v9 + 16) = v16 + 1;
      *(void *)(v9 + 8 * v16 + 32) = v14;
      if (a2 < v11) {
        goto LABEL_19;
      }
      if (v12 == v13) {
        goto LABEL_20;
      }
      if (a2 == ++v13) {
        return v9;
      }
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t outlined init with copy of SecretKey(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with take of (offset: Int, element: AspireApiPECShardResponse)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (offset: Int, element: AspireApiPECShardResponse)?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void *initializeBufferWithCopyOfBuffer for SimilarityClient(void *a1, void *a2, int *a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v27 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (void *)(v27 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    uint64_t v5 = *(int *)(type metadata accessor for SecretKey() + 20);
    uint64_t v6 = (char *)v3 + v5;
    uint64_t v7 = (char *)a2 + v5;
    uint64_t v8 = type metadata accessor for HE.SerializedSecretKey();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
    uint64_t v9 = a3[5];
    uint64_t v10 = (char *)v3 + v9;
    uint64_t v11 = (void *)((char *)a2 + v9);
    *(void *)uint64_t v10 = *(void *)((char *)a2 + v9);
    *((_DWORD *)v10 + 2) = *(_DWORD *)((char *)a2 + v9 + 8);
    *((void *)v10 + 2) = *(void *)((char *)a2 + v9 + 16);
    v10[24] = *((unsigned char *)a2 + v9 + 24);
    uint64_t v12 = *(void *)((char *)a2 + v9 + 32);
    uint64_t v13 = *(void *)((char *)a2 + v9 + 40);
    outlined copy of Data._Representation(v11[4], v11[5]);
    *((void *)v10 + 4) = v12;
    *((void *)v10 + 5) = v13;
    *((void *)v10 + 6) = v11[6];
    uint64_t v14 = (int *)type metadata accessor for AspireApiPECConfig(0);
    uint64_t v15 = v14[9];
    unint64_t v16 = &v10[v15];
    BOOL v17 = (char *)v11 + v15;
    uint64_t v18 = type metadata accessor for UnknownStorage();
    uint64_t v19 = *(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16);
    swift_bridgeObjectRetain();
    uint64_t v54 = v19;
    v19(v16, v17, v18);
    uint64_t v20 = v14[10];
    uint64_t v21 = &v10[v20];
    uint64_t v22 = (_OWORD *)((char *)v11 + v20);
    uint64_t v23 = type metadata accessor for AspireHeEncryptionParameters(0);
    uint64_t v24 = *(void *)(v23 - 8);
    uint64_t v53 = v18;
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
    {
      uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
      uint64_t v26 = v54;
    }
    else
    {
      *(_OWORD *)uint64_t v21 = *v22;
      uint64_t v28 = *((void *)v22 + 3);
      *((void *)v21 + 2) = *((void *)v22 + 2);
      *((void *)v21 + 3) = v28;
      v21[32] = *((unsigned char *)v22 + 32);
      *((void *)v21 + 5) = *((void *)v22 + 5);
      v21[48] = *((unsigned char *)v22 + 48);
      *((void *)v21 + 7) = *((void *)v22 + 7);
      v21[64] = *((unsigned char *)v22 + 64);
      uint64_t v29 = *(int *)(v23 + 40);
      uint64_t v52 = &v21[v29];
      uint64_t v30 = (char *)v22 + v29;
      swift_bridgeObjectRetain();
      uint64_t v31 = v18;
      uint64_t v26 = v54;
      v54(v52, v30, v31);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
    }
    uint64_t v32 = v14[11];
    int64_t v33 = &v10[v32];
    uint64_t v34 = (char *)v11 + v32;
    uint64_t v35 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
    uint64_t v36 = *(void *)(v35 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
    {
      uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
      memcpy(v33, v34, *(void *)(*(void *)(v37 - 8) + 64));
    }
    else
    {
      uint64_t v38 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
      uint64_t v39 = *(void *)(v38 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v34, 1, v38))
      {
        uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
        memcpy(v33, v34, *(void *)(*(void *)(v40 - 8) + 64));
        uint64_t v41 = v53;
      }
      else
      {
        swift_getEnumCaseMultiPayload();
        uint64_t v41 = v53;
        v26(v33, v34, v53);
        swift_storeEnumTagMultiPayload();
        (*(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56))(v33, 0, 1, v38);
      }
      v26(&v33[*(int *)(v35 + 20)], &v34[*(int *)(v35 + 20)], v41);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
    }
    uint64_t v42 = a3[6];
    uint64_t v43 = (void *)((char *)v3 + v42);
    uint64_t v44 = (void *)((char *)a2 + v42);
    uint64_t v45 = *v44;
    unint64_t v46 = v44[1];
    outlined copy of Data._Representation(*v44, v46);
    uint64_t *v43 = v45;
    v43[1] = v46;
    uint64_t v47 = a3[7];
    uint64_t v48 = (char *)v3 + v47;
    v49 = (char *)a2 + v47;
    uint64_t v50 = type metadata accessor for PEC.SimilarityClient();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v50 - 8) + 16))(v48, v49, v50);
  }
  return v3;
}

uint64_t destroy for SimilarityClient(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + *(int *)(type metadata accessor for SecretKey() + 20);
  uint64_t v5 = type metadata accessor for HE.SerializedSecretKey();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = a1 + a2[5];
  outlined consume of Data._Representation(*(void *)(v6 + 32), *(void *)(v6 + 40));
  swift_bridgeObjectRelease();
  uint64_t v7 = (int *)type metadata accessor for AspireApiPECConfig(0);
  uint64_t v8 = v6 + v7[9];
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8);
  v10(v8, v9);
  uint64_t v11 = v6 + v7[10];
  uint64_t v12 = type metadata accessor for AspireHeEncryptionParameters(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48))(v11, 1, v12))
  {
    swift_bridgeObjectRelease();
    v10(v11 + *(int *)(v12 + 40), v9);
  }
  uint64_t v13 = v6 + v7[11];
  uint64_t v14 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48))(v13, 1, v14))
  {
    uint64_t v15 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48))(v13, 1, v15)
      && swift_getEnumCaseMultiPayload() <= 2)
    {
      v10(v13, v9);
    }
    v10(v13 + *(int *)(v14 + 20), v9);
  }
  outlined consume of Data._Representation(*(void *)(a1 + a2[6]), *(void *)(a1 + a2[6] + 8));
  uint64_t v16 = a1 + a2[7];
  uint64_t v17 = type metadata accessor for PEC.SimilarityClient();
  uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8);
  return v18(v16, v17);
}

void *initializeWithCopy for SimilarityClient(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(type metadata accessor for SecretKey() + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for HE.SerializedSecretKey();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  uint64_t v50 = a3;
  uint64_t v51 = a2;
  uint64_t v10 = *(int *)(a3 + 20);
  uint64_t v52 = a1;
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  *(void *)uint64_t v11 = *(void *)((char *)a2 + v10);
  *((_DWORD *)v11 + 2) = *(_DWORD *)((char *)a2 + v10 + 8);
  *((void *)v11 + 2) = *(void *)((char *)a2 + v10 + 16);
  v11[24] = *((unsigned char *)a2 + v10 + 24);
  uint64_t v13 = *(void *)((char *)a2 + v10 + 32);
  unint64_t v14 = *(void *)((char *)a2 + v10 + 40);
  outlined copy of Data._Representation(v13, v14);
  *((void *)v11 + 4) = v13;
  *((void *)v11 + 5) = v14;
  *((void *)v11 + 6) = *((void *)v12 + 6);
  uint64_t v15 = (int *)type metadata accessor for AspireApiPECConfig(0);
  uint64_t v16 = v15[9];
  uint64_t v17 = &v11[v16];
  uint64_t v18 = &v12[v16];
  uint64_t v19 = type metadata accessor for UnknownStorage();
  uint64_t v20 = *(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16);
  swift_bridgeObjectRetain();
  v20(v17, v18, v19);
  uint64_t v21 = v15[10];
  uint64_t v22 = &v11[v21];
  uint64_t v23 = &v12[v21];
  uint64_t v24 = type metadata accessor for AspireHeEncryptionParameters(0);
  uint64_t v25 = *(void *)(v24 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
  {
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
  }
  else
  {
    *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
    uint64_t v27 = *((void *)v23 + 3);
    *((void *)v22 + 2) = *((void *)v23 + 2);
    *((void *)v22 + 3) = v27;
    v22[32] = v23[32];
    *((void *)v22 + 5) = *((void *)v23 + 5);
    v22[48] = v23[48];
    *((void *)v22 + 7) = *((void *)v23 + 7);
    v22[64] = v23[64];
    uint64_t v28 = *(int *)(v24 + 40);
    v49 = &v22[v28];
    uint64_t v29 = &v23[v28];
    swift_bridgeObjectRetain();
    v20(v49, v29, v19);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  }
  uint64_t v30 = v15[11];
  uint64_t v31 = &v11[v30];
  uint64_t v32 = &v12[v30];
  uint64_t v33 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  uint64_t v34 = *(void *)(v33 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
  {
    uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    memcpy(v31, v32, *(void *)(*(void *)(v35 - 8) + 64));
  }
  else
  {
    uint64_t v36 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
    uint64_t v37 = *(void *)(v36 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v32, 1, v36))
    {
      uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
      memcpy(v31, v32, *(void *)(*(void *)(v38 - 8) + 64));
    }
    else
    {
      swift_getEnumCaseMultiPayload();
      v20(v31, v32, v19);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(v31, 0, 1, v36);
    }
    v20(&v31[*(int *)(v33 + 20)], &v32[*(int *)(v33 + 20)], v19);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
  }
  uint64_t v39 = *(int *)(v50 + 24);
  uint64_t v40 = (void *)((char *)v52 + v39);
  uint64_t v41 = (void *)((char *)v51 + v39);
  uint64_t v42 = *v41;
  unint64_t v43 = v41[1];
  outlined copy of Data._Representation(*v41, v43);
  *uint64_t v40 = v42;
  v40[1] = v43;
  uint64_t v44 = *(int *)(v50 + 28);
  uint64_t v45 = (char *)v52 + v44;
  unint64_t v46 = (char *)v51 + v44;
  uint64_t v47 = type metadata accessor for PEC.SimilarityClient();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v47 - 8) + 16))(v45, v46, v47);
  return v52;
}

void *assignWithCopy for SimilarityClient(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(type metadata accessor for SecretKey() + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for HE.SerializedSecretKey();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v79 = a3;
  v80 = a1;
  uint64_t v10 = *(int *)(a3 + 20);
  uint64_t v11 = (char *)a1 + v10;
  v81 = a2;
  uint64_t v12 = (char *)a2 + v10;
  *(void *)uint64_t v11 = *(void *)v12;
  *((_DWORD *)v11 + 2) = *((_DWORD *)v12 + 2);
  uint64_t v13 = *((void *)v12 + 2);
  v11[24] = v12[24];
  *((void *)v11 + 2) = v13;
  uint64_t v14 = *((void *)v12 + 4);
  unint64_t v15 = *((void *)v12 + 5);
  outlined copy of Data._Representation(v14, v15);
  uint64_t v16 = *((void *)v11 + 4);
  unint64_t v17 = *((void *)v11 + 5);
  *((void *)v11 + 4) = v14;
  *((void *)v11 + 5) = v15;
  outlined consume of Data._Representation(v16, v17);
  *((void *)v11 + 6) = *((void *)v12 + 6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v18 = (int *)type metadata accessor for AspireApiPECConfig(0);
  uint64_t v19 = v18[9];
  uint64_t v20 = &v11[v19];
  uint64_t v21 = &v12[v19];
  uint64_t v22 = type metadata accessor for UnknownStorage();
  uint64_t v77 = *(void *)(v22 - 8);
  uint64_t v78 = v22;
  v76 = *(void (**)(char *, char *))(v77 + 24);
  v76(v20, v21);
  uint64_t v23 = v18[10];
  uint64_t v24 = (uint64_t)&v11[v23];
  uint64_t v25 = &v12[v23];
  uint64_t v26 = type metadata accessor for AspireHeEncryptionParameters(0);
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v27 + 48);
  int v29 = v28(v24, 1, v26);
  int v30 = v28((uint64_t)v25, 1, v26);
  if (v29)
  {
    if (!v30)
    {
      *(void *)uint64_t v24 = *(void *)v25;
      *(void *)(v24 + 8) = *((void *)v25 + 1);
      *(void *)(v24 + 16) = *((void *)v25 + 2);
      uint64_t v31 = *((void *)v25 + 3);
      *(unsigned char *)(v24 + 32) = v25[32];
      *(void *)(v24 + 24) = v31;
      uint64_t v32 = *((void *)v25 + 5);
      *(unsigned char *)(v24 + 48) = v25[48];
      *(void *)(v24 + 40) = v32;
      uint64_t v33 = *((void *)v25 + 7);
      *(unsigned char *)(v24 + 64) = v25[64];
      *(void *)(v24 + 56) = v33;
      uint64_t v34 = *(int *)(v26 + 40);
      uint64_t v35 = v24 + v34;
      uint64_t v36 = &v25[v34];
      uint64_t v37 = *(void (**)(uint64_t, char *, uint64_t))(v77 + 16);
      swift_bridgeObjectRetain();
      v37(v35, v36, v78);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v30)
  {
    outlined destroy of AspireApiPECConfig(v24, type metadata accessor for AspireHeEncryptionParameters);
LABEL_6:
    uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    memcpy((void *)v24, v25, *(void *)(*(void *)(v38 - 8) + 64));
    goto LABEL_7;
  }
  *(void *)uint64_t v24 = *(void *)v25;
  *(void *)(v24 + 8) = *((void *)v25 + 1);
  *(void *)(v24 + 16) = *((void *)v25 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v54 = *((void *)v25 + 3);
  *(unsigned char *)(v24 + 32) = v25[32];
  *(void *)(v24 + 24) = v54;
  uint64_t v55 = *((void *)v25 + 5);
  *(unsigned char *)(v24 + 48) = v25[48];
  *(void *)(v24 + 40) = v55;
  uint64_t v56 = *((void *)v25 + 7);
  *(unsigned char *)(v24 + 64) = v25[64];
  *(void *)(v24 + 56) = v56;
  ((void (*)(uint64_t, char *, uint64_t))v76)(v24 + *(int *)(v26 + 40), &v25[*(int *)(v26 + 40)], v78);
LABEL_7:
  uint64_t v39 = v18[11];
  uint64_t v40 = &v11[v39];
  uint64_t v41 = &v12[v39];
  uint64_t v42 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  uint64_t v43 = *(void *)(v42 - 8);
  uint64_t v44 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v43 + 48);
  int v45 = v44(v40, 1, v42);
  int v46 = v44(v41, 1, v42);
  if (!v45)
  {
    if (v46)
    {
      outlined destroy of AspireApiPECConfig((uint64_t)v40, type metadata accessor for AspireSimilarityPlaintextPacking);
      goto LABEL_13;
    }
    uint64_t v57 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
    uint64_t v58 = *(void *)(v57 - 8);
    v59 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v58 + 48);
    int v60 = v59(v40, 1, v57);
    int v61 = v59(v41, 1, v57);
    if (v60)
    {
      if (!v61)
      {
        swift_getEnumCaseMultiPayload();
        uint64_t v62 = v78;
        (*(void (**)(char *, char *, uint64_t))(v77 + 16))(v40, v41, v78);
        swift_storeEnumTagMultiPayload();
        (*(void (**)(char *, void, uint64_t, uint64_t))(v58 + 56))(v40, 0, 1, v57);
LABEL_25:
        ((void (*)(char *, char *, uint64_t))v76)(&v40[*(int *)(v42 + 20)], &v41[*(int *)(v42 + 20)], v62);
        goto LABEL_14;
      }
    }
    else
    {
      if (!v61)
      {
        uint64_t v62 = v78;
        if (v80 != v81)
        {
          outlined destroy of AspireApiPECConfig((uint64_t)v40, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
          swift_getEnumCaseMultiPayload();
          (*(void (**)(char *, char *, uint64_t))(v77 + 16))(v40, v41, v78);
          swift_storeEnumTagMultiPayload();
        }
        goto LABEL_25;
      }
      outlined destroy of AspireApiPECConfig((uint64_t)v40, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
    }
    uint64_t v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
    memcpy(v40, v41, *(void *)(*(void *)(v75 - 8) + 64));
    uint64_t v62 = v78;
    goto LABEL_25;
  }
  if (v46)
  {
LABEL_13:
    uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    memcpy(v40, v41, *(void *)(*(void *)(v52 - 8) + 64));
LABEL_14:
    uint64_t v53 = v79;
    goto LABEL_21;
  }
  uint64_t v47 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
  uint64_t v48 = *(void *)(v47 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v41, 1, v47))
  {
    uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
    memcpy(v40, v41, *(void *)(*(void *)(v49 - 8) + 64));
    uint64_t v50 = v78;
    uint64_t v51 = *(void (**)(char *, char *, uint64_t))(v77 + 16);
  }
  else
  {
    swift_getEnumCaseMultiPayload();
    uint64_t v50 = v78;
    uint64_t v51 = *(void (**)(char *, char *, uint64_t))(v77 + 16);
    v51(v40, v41, v78);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, void, uint64_t, uint64_t))(v48 + 56))(v40, 0, 1, v47);
  }
  uint64_t v53 = v79;
  v51(&v40[*(int *)(v42 + 20)], &v41[*(int *)(v42 + 20)], v50);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
LABEL_21:
  uint64_t v63 = *(int *)(v53 + 24);
  v64 = (void *)((char *)v80 + v63);
  v65 = (void *)((char *)v81 + v63);
  uint64_t v66 = *v65;
  unint64_t v67 = v65[1];
  outlined copy of Data._Representation(*v65, v67);
  uint64_t v68 = *v64;
  unint64_t v69 = v64[1];
  uint64_t *v64 = v66;
  v64[1] = v67;
  outlined consume of Data._Representation(v68, v69);
  uint64_t v70 = *(int *)(v53 + 28);
  v71 = (char *)v80 + v70;
  v72 = (char *)v81 + v70;
  uint64_t v73 = type metadata accessor for PEC.SimilarityClient();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v73 - 8) + 24))(v71, v72, v73);
  return v80;
}

uint64_t outlined destroy of AspireApiPECConfig(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void *initializeWithTake for SimilarityClient(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(type metadata accessor for SecretKey() + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for HE.SerializedSecretKey();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v40 = a2;
  uint64_t v41 = a3;
  uint64_t v10 = *(int *)(a3 + 20);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  *(void *)uint64_t v11 = *(void *)((char *)a2 + v10);
  *((_DWORD *)v11 + 2) = *(_DWORD *)((char *)a2 + v10 + 8);
  *((void *)v11 + 2) = *(void *)((char *)a2 + v10 + 16);
  v11[24] = *((unsigned char *)a2 + v10 + 24);
  *((_OWORD *)v11 + 2) = *(_OWORD *)((char *)a2 + v10 + 32);
  *((void *)v11 + 6) = *(void *)((char *)a2 + v10 + 48);
  uint64_t v13 = (int *)type metadata accessor for AspireApiPECConfig(0);
  uint64_t v14 = v13[9];
  unint64_t v15 = &v11[v14];
  uint64_t v16 = &v12[v14];
  uint64_t v17 = type metadata accessor for UnknownStorage();
  uint64_t v18 = *(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 32);
  v18(v15, v16, v17);
  uint64_t v19 = v13[10];
  uint64_t v20 = &v11[v19];
  uint64_t v21 = &v12[v19];
  uint64_t v22 = type metadata accessor for AspireHeEncryptionParameters(0);
  uint64_t v23 = *(void *)(v22 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
  {
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
  }
  else
  {
    *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
    uint64_t v25 = *((void *)v21 + 3);
    *((void *)v20 + 2) = *((void *)v21 + 2);
    *((void *)v20 + 3) = v25;
    v20[32] = v21[32];
    *((void *)v20 + 5) = *((void *)v21 + 5);
    v20[48] = v21[48];
    *((void *)v20 + 7) = *((void *)v21 + 7);
    v20[64] = v21[64];
    v18(&v20[*(int *)(v22 + 40)], &v21[*(int *)(v22 + 40)], v17);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  }
  uint64_t v26 = v13[11];
  uint64_t v27 = &v11[v26];
  uint64_t v28 = &v12[v26];
  uint64_t v29 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  uint64_t v30 = *(void *)(v29 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
  {
    uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    memcpy(v27, v28, *(void *)(*(void *)(v31 - 8) + 64));
  }
  else
  {
    uint64_t v32 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
    uint64_t v33 = *(void *)(v32 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v28, 1, v32))
    {
      uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
      memcpy(v27, v28, *(void *)(*(void *)(v34 - 8) + 64));
    }
    else
    {
      swift_getEnumCaseMultiPayload();
      v18(v27, v28, v17);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(v27, 0, 1, v32);
    }
    v18(&v27[*(int *)(v29 + 20)], &v28[*(int *)(v29 + 20)], v17);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
  }
  uint64_t v35 = *(int *)(v41 + 28);
  *(_OWORD *)((char *)a1 + *(int *)(v41 + 24)) = *(_OWORD *)((char *)v40 + *(int *)(v41 + 24));
  uint64_t v36 = (char *)a1 + v35;
  uint64_t v37 = (char *)v40 + v35;
  uint64_t v38 = type metadata accessor for PEC.SimilarityClient();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v38 - 8) + 32))(v36, v37, v38);
  return a1;
}

void *assignWithTake for SimilarityClient(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(type metadata accessor for SecretKey() + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for HE.SerializedSecretKey();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v63 = a3;
  v64 = a1;
  uint64_t v10 = *(int *)(a3 + 20);
  uint64_t v11 = (char *)a1 + v10;
  v65 = a2;
  uint64_t v12 = (char *)a2 + v10;
  *(void *)uint64_t v11 = *(void *)((char *)a2 + v10);
  *((_DWORD *)v11 + 2) = *(_DWORD *)((char *)a2 + v10 + 8);
  *((void *)v11 + 2) = *(void *)((char *)a2 + v10 + 16);
  v11[24] = *((unsigned char *)a2 + v10 + 24);
  uint64_t v13 = *(void *)((char *)a1 + v10 + 32);
  unint64_t v14 = *(void *)((char *)a1 + v10 + 40);
  *((_OWORD *)v11 + 2) = *(_OWORD *)((char *)a2 + v10 + 32);
  outlined consume of Data._Representation(v13, v14);
  *((void *)v11 + 6) = *((void *)v12 + 6);
  swift_bridgeObjectRelease();
  unint64_t v15 = (int *)type metadata accessor for AspireApiPECConfig(0);
  uint64_t v16 = v15[9];
  uint64_t v17 = &v11[v16];
  uint64_t v18 = &v12[v16];
  uint64_t v19 = type metadata accessor for UnknownStorage();
  uint64_t v61 = *(void *)(v19 - 8);
  uint64_t v62 = v19;
  int v60 = *(void (**)(char *, char *))(v61 + 40);
  v60(v17, v18);
  uint64_t v20 = v15[10];
  uint64_t v21 = (uint64_t)&v11[v20];
  uint64_t v22 = &v12[v20];
  uint64_t v23 = type metadata accessor for AspireHeEncryptionParameters(0);
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v24 + 48);
  int v26 = v25(v21, 1, v23);
  int v27 = v25((uint64_t)v22, 1, v23);
  if (v26)
  {
    if (!v27)
    {
      *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
      uint64_t v28 = *((void *)v22 + 3);
      *(void *)(v21 + 16) = *((void *)v22 + 2);
      *(void *)(v21 + 24) = v28;
      *(unsigned char *)(v21 + 32) = v22[32];
      *(unsigned char *)(v21 + 48) = v22[48];
      *(void *)(v21 + 40) = *((void *)v22 + 5);
      *(void *)(v21 + 56) = *((void *)v22 + 7);
      *(unsigned char *)(v21 + 64) = v22[64];
      (*(void (**)(uint64_t, char *, uint64_t))(v61 + 32))(v21 + *(int *)(v23 + 40), &v22[*(int *)(v23 + 40)], v62);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v27)
  {
    outlined destroy of AspireApiPECConfig(v21, type metadata accessor for AspireHeEncryptionParameters);
LABEL_6:
    uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    memcpy((void *)v21, v22, *(void *)(*(void *)(v29 - 8) + 64));
    goto LABEL_7;
  }
  *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
  *(void *)(v21 + 16) = *((void *)v22 + 2);
  swift_bridgeObjectRelease();
  *(void *)(v21 + 24) = *((void *)v22 + 3);
  *(unsigned char *)(v21 + 32) = v22[32];
  *(void *)(v21 + 40) = *((void *)v22 + 5);
  *(unsigned char *)(v21 + 48) = v22[48];
  *(void *)(v21 + 56) = *((void *)v22 + 7);
  *(unsigned char *)(v21 + 64) = v22[64];
  ((void (*)(uint64_t, char *, uint64_t))v60)(v21 + *(int *)(v23 + 40), &v22[*(int *)(v23 + 40)], v62);
LABEL_7:
  uint64_t v30 = v15[11];
  uint64_t v31 = &v11[v30];
  uint64_t v32 = &v12[v30];
  uint64_t v33 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  uint64_t v34 = *(void *)(v33 - 8);
  uint64_t v35 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v34 + 48);
  int v36 = v35(v31, 1, v33);
  int v37 = v35(v32, 1, v33);
  if (!v36)
  {
    if (v37)
    {
      outlined destroy of AspireApiPECConfig((uint64_t)v31, type metadata accessor for AspireSimilarityPlaintextPacking);
      goto LABEL_13;
    }
    uint64_t v45 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
    uint64_t v46 = *(void *)(v45 - 8);
    uint64_t v47 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v46 + 48);
    int v48 = v47(v31, 1, v45);
    int v49 = v47(v32, 1, v45);
    if (v48)
    {
      if (!v49)
      {
        swift_getEnumCaseMultiPayload();
        uint64_t v50 = v62;
        (*(void (**)(char *, char *, uint64_t))(v61 + 32))(v31, v32, v62);
        swift_storeEnumTagMultiPayload();
        (*(void (**)(char *, void, uint64_t, uint64_t))(v46 + 56))(v31, 0, 1, v45);
LABEL_25:
        ((void (*)(char *, char *, uint64_t))v60)(&v31[*(int *)(v33 + 20)], &v32[*(int *)(v33 + 20)], v50);
        goto LABEL_14;
      }
    }
    else
    {
      if (!v49)
      {
        uint64_t v50 = v62;
        if (v64 != v65)
        {
          outlined destroy of AspireApiPECConfig((uint64_t)v31, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
          swift_getEnumCaseMultiPayload();
          (*(void (**)(char *, char *, uint64_t))(v61 + 32))(v31, v32, v62);
          swift_storeEnumTagMultiPayload();
        }
        goto LABEL_25;
      }
      outlined destroy of AspireApiPECConfig((uint64_t)v31, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
    }
    uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
    memcpy(v31, v32, *(void *)(*(void *)(v59 - 8) + 64));
    uint64_t v50 = v62;
    goto LABEL_25;
  }
  if (v37)
  {
LABEL_13:
    uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    memcpy(v31, v32, *(void *)(*(void *)(v43 - 8) + 64));
LABEL_14:
    uint64_t v44 = v63;
    goto LABEL_21;
  }
  uint64_t v38 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
  uint64_t v39 = *(void *)(v38 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v32, 1, v38))
  {
    uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
    memcpy(v31, v32, *(void *)(*(void *)(v40 - 8) + 64));
    uint64_t v41 = v62;
    uint64_t v42 = *(void (**)(char *, char *, uint64_t))(v61 + 32);
  }
  else
  {
    swift_getEnumCaseMultiPayload();
    uint64_t v41 = v62;
    uint64_t v42 = *(void (**)(char *, char *, uint64_t))(v61 + 32);
    v42(v31, v32, v62);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56))(v31, 0, 1, v38);
  }
  uint64_t v44 = v63;
  v42(&v31[*(int *)(v33 + 20)], &v32[*(int *)(v33 + 20)], v41);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
LABEL_21:
  uint64_t v51 = *(int *)(v44 + 24);
  uint64_t v52 = *(void *)((char *)v64 + v51);
  unint64_t v53 = *(void *)((char *)v64 + v51 + 8);
  *(_OWORD *)((char *)v64 + v51) = *(_OWORD *)((char *)v65 + v51);
  outlined consume of Data._Representation(v52, v53);
  uint64_t v54 = *(int *)(v44 + 28);
  uint64_t v55 = (char *)v64 + v54;
  uint64_t v56 = (char *)v65 + v54;
  uint64_t v57 = type metadata accessor for PEC.SimilarityClient();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v57 - 8) + 40))(v55, v56, v57);
  return v64;
}

uint64_t getEnumTagSinglePayload for SimilarityClient(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_249C56E58);
}

uint64_t sub_249C56E58(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SecretKey();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = type metadata accessor for AspireApiPECConfig(0);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + a3[5];
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  if (a2 == 12)
  {
    uint64_t v14 = *(void *)(a1 + a3[6] + 8) >> 60;
    if (((4 * v14) & 0xC) != 0) {
      return 16 - ((4 * v14) & 0xC | (v14 >> 2));
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v15 = type metadata accessor for PEC.SimilarityClient();
    uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48);
    uint64_t v17 = v15;
    uint64_t v18 = a1 + a3[7];
    return v16(v18, a2, v17);
  }
}

uint64_t storeEnumTagSinglePayload for SimilarityClient(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_249C56FFC);
}

uint64_t sub_249C56FFC(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = type metadata accessor for SecretKey();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_5:
    return v11(v12, a2, a2, v10);
  }
  uint64_t result = type metadata accessor for AspireApiPECConfig(0);
  uint64_t v14 = *(void *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v12 = a1 + a4[5];
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_5;
  }
  if (a3 == 12)
  {
    uint64_t v15 = (void *)(a1 + a4[6]);
    *uint64_t v15 = 0;
    v15[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
  }
  else
  {
    uint64_t v16 = type metadata accessor for PEC.SimilarityClient();
    uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56);
    uint64_t v18 = v16;
    uint64_t v19 = a1 + a4[7];
    return v17(v19, a2, a2, v18);
  }
  return result;
}

uint64_t type metadata completion function for SimilarityClient()
{
  uint64_t result = type metadata accessor for SecretKey();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for AspireApiPECConfig(319);
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for PEC.SimilarityClient();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

void type metadata accessor for CMLUseCaseControlOptions(uint64_t a1)
{
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
}

void type metadata accessor for CMLUseCaseControlOptions(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t base witness table accessor for Equatable in CMLUseCaseControlOptions()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type CMLUseCaseControlOptions and conformance CMLUseCaseControlOptions, type metadata accessor for CMLUseCaseControlOptions);
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in CMLUseCaseControlOptions()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type CMLUseCaseControlOptions and conformance CMLUseCaseControlOptions, type metadata accessor for CMLUseCaseControlOptions);
}

uint64_t base witness table accessor for RawRepresentable in CMLUseCaseControlOptions()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type CMLUseCaseControlOptions and conformance CMLUseCaseControlOptions, type metadata accessor for CMLUseCaseControlOptions);
}

uint64_t base witness table accessor for SetAlgebra in CMLUseCaseControlOptions()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type CMLUseCaseControlOptions and conformance CMLUseCaseControlOptions, type metadata accessor for CMLUseCaseControlOptions);
}

uint64_t specialized SetAlgebra<>.init(arrayLiteral:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v4 = (uint64_t *)(a1 + 32);
  do
  {
    uint64_t v6 = *v4++;
    uint64_t v5 = v6;
    if ((v6 & ~result) == 0) {
      uint64_t v5 = 0;
    }
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

unint64_t type metadata accessor for CMLSimilarityScore()
{
  unint64_t result = lazy cache variable for type metadata for CMLSimilarityScore;
  if (!lazy cache variable for type metadata for CMLSimilarityScore)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CMLSimilarityScore);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [CMLSimilarityScore] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [CMLSimilarityScore] and conformance [A];
  if (!lazy protocol witness table cache variable for type [CMLSimilarityScore] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [CMLSimilarityScore]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [CMLSimilarityScore] and conformance [A]);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t partial apply for closure #2 in closure #2 in SimilarityClient.decryptSimilarityScores(shard:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return closure #2 in closure #2 in SimilarityClient.decryptSimilarityScores(shard:)(a1, a2, a3, a4, v4[2], v4[3], v4[4]);
}

uint64_t partial apply for closure #1 in PEC.SerializedCiphertextCoeffMatrix.proto()(uint64_t a1)
{
  return closure #1 in PEC.SerializedCiphertextCoeffMatrix.proto()(a1, *(void *)(v1 + 16));
}

uint64_t partial apply for closure #3 in closure #1 in SimilarityClient.encryptValues(_:shardIndices:)(void *a1)
{
  return closure #3 in closure #1 in SimilarityClient.encryptValues(_:shardIndices:)(a1, *(void **)(v1 + 16));
}

uint64_t outlined destroy of AspireApiEvaluationKeyMetadata?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with take of SecretKey(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void AMSNetworking.requestHeaders()()
{
}

uint64_t (*AMDPbFetchHEConfigs.unknownFields.modify())()
{
  return Repeated.subscript.readspecialized ;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1)
{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for (String, AMDPbHEConfig), &demangling cache variable for type metadata for _DictionaryStorage<String, AMDPbHEConfig>, type metadata accessor for AMDPbHEConfig, type metadata accessor for AMDPbHEConfig);
}

{
  void *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Data, [TokenCache.CachedToken]>);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  unint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    outlined copy of Data._Representation(v5, v6);
    swift_bridgeObjectRetain();
    uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v10 = v5;
    v10[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    uint64_t v11 = v2[2];
    uint64_t v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t result;
  char v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  void v25[2];

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Date));
  unint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (void *)((char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Date>);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = (char *)v5 + *(int *)(v2 + 48);
  uint64_t v10 = v6 + 64;
  uint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v25[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v12, (uint64_t)v5, &demangling cache variable for type metadata for (String, Date));
    uint64_t v14 = *v5;
    uint64_t v15 = v5[1];
    uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(*v5, v15);
    if (v17) {
      break;
    }
    uint64_t v18 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v19 = (uint64_t *)(v7[6] + 16 * result);
    void *v19 = v14;
    v19[1] = v15;
    uint64_t v20 = v7[7];
    uint64_t v21 = type metadata accessor for Date();
    uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v21 - 8) + 32))(v20 + *(void *)(*(void *)(v21 - 8) + 72) * v18, v9, v21);
    uint64_t v22 = v7[2];
    uint64_t v23 = __OFADD__(v22, 1);
    uint64_t v24 = v22 + 1;
    if (v23) {
      goto LABEL_11;
    }
    v7[2] = v24;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  void v22[2];

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (HE.SecurityLevel, [HE.RlweParams]));
  unint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<HE.SecurityLevel, [HE.RlweParams]>);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = *(int *)(v2 + 48);
  uint64_t v10 = v6 + 64;
  uint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v12, (uint64_t)v5, &demangling cache variable for type metadata for (HE.SecurityLevel, [HE.RlweParams]));
    uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v5);
    if (v15) {
      break;
    }
    uint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v17 = v7[6];
    uint64_t v18 = type metadata accessor for HE.SecurityLevel();
    uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16, v5, v18);
    *(void *)(v7[7] + 8 * v16) = *(void *)&v5[v9];
    uint64_t v19 = v7[2];
    uint64_t v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (v20) {
      goto LABEL_11;
    }
    v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for (String, UseCaseGroup), &demangling cache variable for type metadata for _DictionaryStorage<String, UseCaseGroup>, (uint64_t (*)(void))type metadata accessor for UseCaseGroup, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
}

{
  void *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Task<(), Error>>);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  unint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v10 = v5;
    v10[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    uint64_t v11 = v2[2];
    uint64_t v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t result;
  char v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  void v25[2];

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Data, SecretKey));
  unint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (void *)((char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Data, SecretKey>);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = (uint64_t)v5 + *(int *)(v2 + 48);
  uint64_t v10 = v6 + 64;
  uint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v25[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v12, (uint64_t)v5, &demangling cache variable for type metadata for (Data, SecretKey));
    uint64_t v14 = *v5;
    uint64_t v15 = v5[1];
    uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(*v5, v15);
    if (v17) {
      break;
    }
    uint64_t v18 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v19 = (uint64_t *)(v7[6] + 16 * result);
    void *v19 = v14;
    v19[1] = v15;
    uint64_t v20 = v7[7];
    uint64_t v21 = type metadata accessor for SecretKey();
    uint64_t result = outlined init with take of AMDPbPIRConfig(v9, v20 + *(void *)(*(void *)(v21 - 8) + 72) * v18, (uint64_t (*)(void))type metadata accessor for SecretKey);
    uint64_t v22 = v7[2];
    uint64_t v23 = __OFADD__(v22, 1);
    uint64_t v24 = v22 + 1;
    if (v23) {
      goto LABEL_11;
    }
    v7[2] = v24;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  void *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  unint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 3);
    uint64_t v6 = *(v4 - 2);
    uint64_t v8 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v11 = v5;
    v11[1] = v6;
    uint64_t v12 = (void *)(v2[7] + 16 * result);
    *uint64_t v12 = v8;
    v12[1] = v7;
    uint64_t v13 = v2[2];
    uint64_t v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  unint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Data, Data?>);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  unint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (unint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 3);
    uint64_t v6 = *(v4 - 2);
    uint64_t v7 = *(v4 - 1);
    uint64_t v8 = *v4;
    outlined copy of Data._Representation(v5, v6);
    outlined copy of Data?(v7, v8);
    uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v11 = v5;
    v11[1] = v6;
    uint64_t v12 = (uint64_t *)(v2[7] + 16 * result);
    *uint64_t v12 = v7;
    v12[1] = v8;
    uint64_t v13 = v2[2];
    uint64_t v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for (String, AspireApiConfig), &demangling cache variable for type metadata for _DictionaryStorage<String, AspireApiConfig>, type metadata accessor for AspireApiConfig, type metadata accessor for AspireApiConfig);
}

{
  void *v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, NSObject>);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  unint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (void **)(a1 + 48);
  while (1)
  {
    uint64_t v5 = (uint64_t)*(v4 - 2);
    uint64_t v6 = (uint64_t)*(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    uint64_t v8 = v7;
    uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v11 = v5;
    v11[1] = v6;
    *(void *)(v2[7] + 8 * result) = v8;
    uint64_t v12 = v2[2];
    uint64_t v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v2[2] = v14;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t result;
  char v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UInt64, AspireHeSerializedKeySwitchKey));
  unint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (uint64_t *)((char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt64, AspireHeSerializedKeySwitchKey>);
    uint64_t v7 = (void *)static _DictionaryStorage.allocate(capacity:)();
    uint64_t v8 = (uint64_t)v5 + *(int *)(v2 + 48);
    uint64_t v9 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v10 = *(void *)(v3 + 72);
    while (1)
    {
      outlined init with copy of AMDPbHEConfig.OneOf_Config?(v9, (uint64_t)v5, &demangling cache variable for type metadata for (UInt64, AspireHeSerializedKeySwitchKey));
      uint64_t v11 = *v5;
      uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(*v5);
      if (v13) {
        break;
      }
      uint64_t v14 = result;
      *(void *)((char *)v7 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(void *)(v7[6] + 8 * result) = v11;
      uint64_t v15 = v7[7];
      uint64_t v16 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
      uint64_t result = outlined init with take of AMDPbPIRConfig(v8, v15 + *(void *)(*(void *)(v16 - 8) + 72) * v14, type metadata accessor for AspireHeSerializedKeySwitchKey);
      uint64_t v17 = v7[2];
      uint64_t v18 = __OFADD__(v17, 1);
      uint64_t v19 = v17 + 1;
      if (v18) {
        goto LABEL_10;
      }
      v7[2] = v19;
      v9 += v10;
      if (!--v6) {
        return (unint64_t)v7;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x263F8EE80];
  }
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t v31 = a4;
  uint64_t v32 = a5;
  uint64_t v33 = a2;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (uint64_t *)((char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!*(void *)(a1 + 16))
  {
    uint64_t v12 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a3);
  uint64_t v11 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v12 = (void *)v11;
  uint64_t v13 = *(void *)(a1 + 16);
  if (!v13)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v12;
  }
  uint64_t v14 = (uint64_t)v10 + *(int *)(v7 + 48);
  uint64_t v15 = v11 + 64;
  unint64_t v16 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v30 = a1;
  uint64_t v17 = a1 + v16;
  uint64_t v18 = *(void *)(v8 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v17, (uint64_t)v10, v33);
    uint64_t v20 = *v10;
    uint64_t v19 = v10[1];
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(*v10, v19);
    if (v22) {
      break;
    }
    unint64_t v23 = result;
    *(void *)(v15 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v24 = (uint64_t *)(v12[6] + 16 * result);
    *uint64_t v24 = v20;
    v24[1] = v19;
    uint64_t v25 = v12[7];
    uint64_t v26 = v31(0);
    unint64_t result = outlined init with take of AMDPbPIRConfig(v14, v25 + *(void *)(*(void *)(v26 - 8) + 72) * v23, v32);
    uint64_t v27 = v12[2];
    BOOL v28 = __OFADD__(v27, 1);
    uint64_t v29 = v27 + 1;
    if (v28) {
      goto LABEL_11;
    }
    v12[2] = v29;
    v17 += v18;
    if (!--v13)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t (*AMDPbHEConfigsReply.configs.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t (*AMDPbHEConfigsReply.keyInfo.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbHEConfigsReply.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AMDPbHEConfigsReply.unknownFields.getter(type metadata accessor for AMDPbHEConfigsReply, a1);
}

uint64_t type metadata accessor for AMDPbHEConfigsReply(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AMDPbHEConfigsReply);
}

uint64_t AMDPbHEConfigsReply.unknownFields.setter(uint64_t a1)
{
  return AMDPbHEConfigsReply.unknownFields.setter(a1, type metadata accessor for AMDPbHEConfigsReply);
}

uint64_t (*AMDPbHEConfigsReply.unknownFields.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbHEConfigsReply.init()@<X0>(unint64_t *a1@<X8>)
{
  unint64_t v2 = MEMORY[0x263F8EE78];
  *a1 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78], &demangling cache variable for type metadata for (String, AMDPbHEConfig), &demangling cache variable for type metadata for _DictionaryStorage<String, AMDPbHEConfig>, type metadata accessor for AMDPbHEConfig, type metadata accessor for AMDPbHEConfig);
  a1[1] = v2;
  type metadata accessor for AMDPbHEConfigsReply(0);
  return UnknownStorage.init()();
}

uint64_t AMDPbHEConfig.config.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1, a1, &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
}

uint64_t AMDPbHEConfig.config.setter(uint64_t a1)
{
  return outlined assign with take of AMDPbHEConfig.OneOf_Config?(a1, v1, &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
}

uint64_t (*AMDPbHEConfig.config.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbHEConfig.pirConfig.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
  uint64_t v7 = type metadata accessor for AMDPbHEConfig.OneOf_Config(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
LABEL_5:
    *(void *)a1 = MEMORY[0x263F8EE78];
    *(void *)(a1 + 8) = 0;
    *(unsigned char *)(a1 + 16) = 1;
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0xC000000000000000;
    uint64_t v8 = type metadata accessor for AMDPbPIRConfig(0);
    UnknownStorage.init()();
    uint64_t v9 = a1 + *(int *)(v8 + 36);
    uint64_t v10 = type metadata accessor for AspireHeEncryptionParameters(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
    uint64_t v11 = a1 + *(int *)(v8 + 40);
    uint64_t v12 = type metadata accessor for AspirePirKeywordPirParameters(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  }
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v6, type metadata accessor for AMDPbHEConfig.OneOf_Config);
    goto LABEL_5;
  }
  return outlined init with take of AMDPbPIRConfig((uint64_t)v6, a1, type metadata accessor for AMDPbPIRConfig);
}

uint64_t AMDPbHEConfig.pirConfig.setter(uint64_t a1)
{
  return AMDPbHEConfig.pirConfig.setter(a1, &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?, type metadata accessor for AMDPbPIRConfig, type metadata accessor for AMDPbHEConfig.OneOf_Config);
}

uint64_t AMDPbPIRConfig.init()@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 1;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0xC000000000000000;
  uint64_t v2 = type metadata accessor for AMDPbPIRConfig(0);
  UnknownStorage.init()();
  uint64_t v3 = a1 + *(int *)(v2 + 36);
  uint64_t v4 = type metadata accessor for AspireHeEncryptionParameters(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  uint64_t v5 = a1 + *(int *)(v2 + 40);
  uint64_t v6 = type metadata accessor for AspirePirKeywordPirParameters(0);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
  return v7(v5, 1, 1, v6);
}

uint64_t type metadata accessor for AMDPbHEConfig.OneOf_Config(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AMDPbHEConfig.OneOf_Config);
}

uint64_t type metadata accessor for AMDPbPIRConfig(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AMDPbPIRConfig);
}

void (*AMDPbHEConfig.pirConfig.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v2 = v1;
  uint64_t v4 = malloc(0x30uLL);
  *a1 = v4;
  *uint64_t v4 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
  uint64_t v6 = malloc(*(void *)(*(void *)(v5 - 8) + 64));
  v4[1] = v6;
  uint64_t v7 = type metadata accessor for AMDPbPIRConfig(0);
  size_t v8 = *(void *)(*(void *)(v7 - 8) + 64);
  v4[2] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v4[3] = v9;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
  uint64_t v10 = type metadata accessor for AMDPbHEConfig.OneOf_Config(0);
  v4[4] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v4[5] = v11;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48))(v6, 1, v10) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      outlined init with take of AMDPbPIRConfig((uint64_t)v6, (uint64_t)v9, type metadata accessor for AMDPbPIRConfig);
      return AMDPbHEConfig.pirConfig.modify;
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v6, type metadata accessor for AMDPbHEConfig.OneOf_Config);
  }
  *uint64_t v9 = MEMORY[0x263F8EE78];
  v9[1] = 0;
  *((unsigned char *)v9 + 16) = 1;
  v9[3] = 0;
  v9[4] = 0;
  v9[5] = 0xC000000000000000;
  UnknownStorage.init()();
  uint64_t v12 = (char *)v9 + *(int *)(v7 + 36);
  uint64_t v13 = type metadata accessor for AspireHeEncryptionParameters(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
  uint64_t v14 = (char *)v9 + *(int *)(v7 + 40);
  uint64_t v15 = type metadata accessor for AspirePirKeywordPirParameters(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 1, 1, v15);
  return AMDPbHEConfig.pirConfig.modify;
}

void AMDPbHEConfig.pirConfig.modify(uint64_t **a1, char a2)
{
}

uint64_t outlined destroy of AMDPbHEConfig.OneOf_Config(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t AMDPbHEConfig.pecConfig.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
  uint64_t v7 = type metadata accessor for AMDPbHEConfig.OneOf_Config(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1) {
      return outlined init with take of AMDPbPIRConfig((uint64_t)v6, a1, type metadata accessor for AMDPbPECConfig);
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v6, type metadata accessor for AMDPbHEConfig.OneOf_Config);
  }
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 1;
  *(_OWORD *)(a1 + 32) = xmmword_249E85DF0;
  uint64_t v9 = type metadata accessor for AMDPbPECConfig(0);
  UnknownStorage.init()();
  uint64_t v10 = a1 + *(int *)(v9 + 36);
  uint64_t v11 = type metadata accessor for AspireHeEncryptionParameters(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  uint64_t v12 = a1 + *(int *)(v9 + 40);
  uint64_t v13 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
}

uint64_t key path setter for AMDPbHEConfig.pirConfig : AMDPbHEConfig(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  uint64_t v11 = a5(0);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v16 - v12;
  outlined init with copy of AMDPbPIRConfig(a1, (uint64_t)&v16 - v12, a6);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(a2, &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
  outlined init with take of AMDPbPIRConfig((uint64_t)v13, a2, a7);
  uint64_t v14 = type metadata accessor for AMDPbHEConfig.OneOf_Config(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(a2, 0, 1, v14);
}

uint64_t AMDPbHEConfig.pecConfig.setter(uint64_t a1)
{
  return AMDPbHEConfig.pirConfig.setter(a1, &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?, type metadata accessor for AMDPbPECConfig, type metadata accessor for AMDPbHEConfig.OneOf_Config);
}

uint64_t AMDPbPECConfig.init()@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 1;
  *(_OWORD *)(a1 + 32) = xmmword_249E85DF0;
  uint64_t v2 = type metadata accessor for AMDPbPECConfig(0);
  UnknownStorage.init()();
  uint64_t v3 = a1 + *(int *)(v2 + 36);
  uint64_t v4 = type metadata accessor for AspireHeEncryptionParameters(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  uint64_t v5 = a1 + *(int *)(v2 + 40);
  uint64_t v6 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
  return v7(v5, 1, 1, v6);
}

uint64_t type metadata accessor for AMDPbPECConfig(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AMDPbPECConfig);
}

uint64_t outlined init with take of AMDPbPIRConfig(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void (*AMDPbHEConfig.pecConfig.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v2 = v1;
  uint64_t v4 = malloc(0x30uLL);
  *a1 = v4;
  *uint64_t v4 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
  uint64_t v6 = malloc(*(void *)(*(void *)(v5 - 8) + 64));
  v4[1] = v6;
  uint64_t v7 = type metadata accessor for AMDPbPECConfig(0);
  size_t v8 = *(void *)(*(void *)(v7 - 8) + 64);
  v4[2] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v4[3] = v9;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
  uint64_t v10 = type metadata accessor for AMDPbHEConfig.OneOf_Config(0);
  v4[4] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v4[5] = v11;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48))(v6, 1, v10) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
LABEL_6:
    *(void *)uint64_t v9 = 0;
    v9[2] = 0;
    *((void *)v9 + 2) = 0;
    *((unsigned char *)v9 + 24) = 1;
    *((_OWORD *)v9 + 2) = xmmword_249E85DF0;
    UnknownStorage.init()();
    uint64_t v12 = (char *)v9 + *(int *)(v7 + 36);
    uint64_t v13 = type metadata accessor for AspireHeEncryptionParameters(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
    uint64_t v14 = (char *)v9 + *(int *)(v7 + 40);
    uint64_t v15 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 1, 1, v15);
    return AMDPbHEConfig.pecConfig.modify;
  }
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v6, type metadata accessor for AMDPbHEConfig.OneOf_Config);
    goto LABEL_6;
  }
  outlined init with take of AMDPbPIRConfig((uint64_t)v6, (uint64_t)v9, type metadata accessor for AMDPbPECConfig);
  return AMDPbHEConfig.pecConfig.modify;
}

void AMDPbHEConfig.pecConfig.modify(uint64_t **a1, char a2)
{
}

void AMDPbHEConfig.pirConfig.modify(uint64_t **a1, char a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  uint64_t v7 = *a1;
  uint64_t v8 = (*a1)[4];
  uint64_t v9 = (*a1)[5];
  uint64_t v10 = (void *)(*a1)[2];
  uint64_t v11 = (void *)(*a1)[3];
  uint64_t v13 = **a1;
  uint64_t v12 = (void *)(*a1)[1];
  if (a2)
  {
    outlined init with copy of AMDPbPIRConfig((*a1)[3], (uint64_t)v10, a5);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v13, &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
    outlined init with take of AMDPbPIRConfig((uint64_t)v10, v13, a3);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56))(v13, 0, 1, v8);
    outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v11, a6);
  }
  else
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(**a1, &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
    outlined init with take of AMDPbPIRConfig((uint64_t)v11, v13, a3);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56))(v13, 0, 1, v8);
  }
  free(v11);
  free(v10);
  free(v12);
  free(v7);
}

uint64_t outlined init with copy of AMDPbPIRConfig(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t AMDPbHEConfig.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AMDPbHEConfig.unknownFields.getter(type metadata accessor for AMDPbHEConfig, a1);
}

uint64_t type metadata accessor for AMDPbHEConfig(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AMDPbHEConfig);
}

uint64_t AMDPbHEConfig.unknownFields.setter(uint64_t a1)
{
  return AMDPbHEConfig.unknownFields.setter(a1, type metadata accessor for AMDPbHEConfig);
}

uint64_t (*AMDPbHEConfig.unknownFields.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbHEConfig.init()@<X0>(uint64_t a1@<X8>)
{
  return AMDPbHEConfig.init()(type metadata accessor for AMDPbHEConfig.OneOf_Config, (void (*)(void))type metadata accessor for AMDPbHEConfig, a1);
}

uint64_t AMDPbHEKeyStatus.timestamp.getter()
{
  return *(void *)v0;
}

uint64_t AMDPbHEKeyStatus.timestamp.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*AMDPbHEKeyStatus.timestamp.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbHEKeyStatus.keyConfig.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for AMDPbHEKeyStatus(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + *(int *)(v6 + 28), (uint64_t)v5, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  uint64_t v7 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of AMDPbPIRConfig((uint64_t)v5, a1, type metadata accessor for AspireHeEvaluationKeyConfig);
  }
  *(void *)a1 = MEMORY[0x263F8EE78];
  *(unsigned char *)(a1 + 8) = 0;
  UnknownStorage.init()();
  uint64_t v8 = a1 + *(int *)(v7 + 28);
  uint64_t v9 = type metadata accessor for AspireHeEncryptionParameters(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
}

uint64_t key path getter for AMDPbHEKeyStatus.keyConfig : AMDPbHEKeyStatus@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for AMDPbHEKeyStatus(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v7 + 28), (uint64_t)v6, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  uint64_t v8 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v6, 1, v8) != 1) {
    return outlined init with take of AMDPbPIRConfig((uint64_t)v6, a2, type metadata accessor for AspireHeEvaluationKeyConfig);
  }
  *(void *)a2 = MEMORY[0x263F8EE78];
  *(unsigned char *)(a2 + 8) = 0;
  UnknownStorage.init()();
  uint64_t v9 = a2 + *(int *)(v8 + 28);
  uint64_t v10 = type metadata accessor for AspireHeEncryptionParameters(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
}

uint64_t key path setter for AMDPbHEKeyStatus.keyConfig : AMDPbHEKeyStatus(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbPIRConfig(a1, (uint64_t)v7, type metadata accessor for AspireHeEvaluationKeyConfig);
  uint64_t v8 = a2 + *(int *)(type metadata accessor for AMDPbHEKeyStatus(0) + 28);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v8, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  outlined init with take of AMDPbPIRConfig((uint64_t)v7, v8, type metadata accessor for AspireHeEvaluationKeyConfig);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

uint64_t AMDPbHEKeyStatus.keyConfig.setter(uint64_t a1)
{
  return AMDPbHEKeyStatus.keyConfig.setter(a1, type metadata accessor for AMDPbHEKeyStatus, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?, type metadata accessor for AspireHeEvaluationKeyConfig, type metadata accessor for AspireHeEvaluationKeyConfig);
}

void (*AMDPbHEKeyStatus.keyConfig.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  void v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for AMDPbHEKeyStatus(0) + 28);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    *(void *)uint64_t v10 = MEMORY[0x263F8EE78];
    v10[8] = 0;
    UnknownStorage.init()();
    uint64_t v12 = &v10[*(int *)(v6 + 28)];
    uint64_t v13 = type metadata accessor for AspireHeEncryptionParameters(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  }
  else
  {
    outlined init with take of AMDPbPIRConfig((uint64_t)v5, (uint64_t)v10, type metadata accessor for AspireHeEvaluationKeyConfig);
  }
  return AMDPbHEKeyStatus.keyConfig.modify;
}

void AMDPbHEKeyStatus.keyConfig.modify(uint64_t a1, char a2)
{
}

BOOL AMDPbHEKeyStatus.hasKeyConfig.getter()
{
  return AMDPbHEKeyStatus.hasKeyConfig.getter(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?, type metadata accessor for AMDPbHEKeyStatus, type metadata accessor for AspireHeEvaluationKeyConfig);
}

Swift::Void __swiftcall AMDPbHEKeyStatus.clearKeyConfig()()
{
}

uint64_t AMDPbHEKeyStatus.group.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AMDPbHEKeyStatus.group.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 8) = a1;
  *(void *)(v2 + 16) = a2;
  return result;
}

uint64_t (*AMDPbHEKeyStatus.group.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbHEKeyStatus.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AMDPbHEConfigsReply.unknownFields.getter(type metadata accessor for AMDPbHEKeyStatus, a1);
}

uint64_t AMDPbHEConfigsReply.unknownFields.getter@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1(0) + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t AMDPbHEKeyStatus.unknownFields.setter(uint64_t a1)
{
  return AMDPbHEConfigsReply.unknownFields.setter(a1, type metadata accessor for AMDPbHEKeyStatus);
}

uint64_t AMDPbHEConfigsReply.unknownFields.setter(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = v2 + *(int *)(a2(0) + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t (*AMDPbHEKeyStatus.unknownFields.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbHEKeyStatus.init()@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0xE000000000000000;
  uint64_t v2 = type metadata accessor for AMDPbHEKeyStatus(0);
  UnknownStorage.init()();
  uint64_t v3 = (char *)a1 + *(int *)(v2 + 28);
  uint64_t v4 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  uint64_t v5 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(v3, 1, 1, v4);
}

uint64_t AMDPbPIRConfig.encryptionParameters.getter@<X0>(uint64_t a1@<X8>)
{
  return AMDPbPIRConfig.encryptionParameters.getter(type metadata accessor for AMDPbPIRConfig, a1);
}

uint64_t AMDPbPIRConfig.encryptionParameters.setter(uint64_t a1)
{
  return AMDPbPIRConfig.encryptionParameters.setter(a1, type metadata accessor for AMDPbPIRConfig);
}

void (*AMDPbPIRConfig.encryptionParameters.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for AspireHeEncryptionParameters(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  void v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for AMDPbPIRConfig(0) + 36);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    *uint64_t v10 = 0;
    v10[1] = 0;
    v10[2] = MEMORY[0x263F8EE78];
    v10[3] = 0;
    *((unsigned char *)v10 + 32) = 1;
    v10[5] = 0;
    *((unsigned char *)v10 + 48) = 1;
    v10[7] = 0;
    *((unsigned char *)v10 + 64) = 1;
    UnknownStorage.init()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  }
  else
  {
    outlined init with take of AMDPbPIRConfig((uint64_t)v5, (uint64_t)v10, type metadata accessor for AspireHeEncryptionParameters);
  }
  return AMDPbPIRConfig.encryptionParameters.modify;
}

void AMDPbPIRConfig.encryptionParameters.modify(uint64_t a1, char a2)
{
}

BOOL AMDPbPIRConfig.hasEncryptionParameters.getter()
{
  return AMDPbPIRConfig.hasEncryptionParameters.getter(type metadata accessor for AMDPbPIRConfig);
}

Swift::Void __swiftcall AMDPbPIRConfig.clearEncryptionParameters()()
{
}

uint64_t (*AMDPbPIRConfig.shardConfigs.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbPIRConfig.keywordPirParams.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for AMDPbPIRConfig(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + *(int *)(v6 + 40), (uint64_t)v5, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  uint64_t v7 = type metadata accessor for AspirePirKeywordPirParameters(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of AMDPbPIRConfig((uint64_t)v5, a1, type metadata accessor for AspirePirKeywordPirParameters);
  }
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 0;
  UnknownStorage.init()();
  uint64_t v8 = a1 + *(int *)(v7 + 28);
  uint64_t v9 = type metadata accessor for AspirePirSymmetricPirClientConfig(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  uint64_t v10 = a1 + *(int *)(v7 + 32);
  uint64_t v11 = type metadata accessor for AspirePirPIRShardingFunction(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
}

uint64_t key path getter for AMDPbPIRConfig.keywordPirParams : AMDPbPIRConfig@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for AMDPbPIRConfig(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v7 + 40), (uint64_t)v6, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  uint64_t v8 = type metadata accessor for AspirePirKeywordPirParameters(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v6, 1, v8) != 1) {
    return outlined init with take of AMDPbPIRConfig((uint64_t)v6, a2, type metadata accessor for AspirePirKeywordPirParameters);
  }
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 0;
  UnknownStorage.init()();
  uint64_t v9 = a2 + *(int *)(v8 + 28);
  uint64_t v10 = type metadata accessor for AspirePirSymmetricPirClientConfig(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  uint64_t v11 = a2 + *(int *)(v8 + 32);
  uint64_t v12 = type metadata accessor for AspirePirPIRShardingFunction(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
}

uint64_t key path setter for AMDPbPIRConfig.keywordPirParams : AMDPbPIRConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AspirePirKeywordPirParameters(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbPIRConfig(a1, (uint64_t)v7, type metadata accessor for AspirePirKeywordPirParameters);
  uint64_t v8 = a2 + *(int *)(type metadata accessor for AMDPbPIRConfig(0) + 40);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v8, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  outlined init with take of AMDPbPIRConfig((uint64_t)v7, v8, type metadata accessor for AspirePirKeywordPirParameters);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

uint64_t AMDPbPIRConfig.keywordPirParams.setter(uint64_t a1)
{
  return AMDPbPIRConfig.keywordPirParams.setter(a1, type metadata accessor for AMDPbPIRConfig, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?, type metadata accessor for AspirePirKeywordPirParameters, type metadata accessor for AspirePirKeywordPirParameters);
}

void (*AMDPbPIRConfig.keywordPirParams.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for AspirePirKeywordPirParameters(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  void v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for AMDPbPIRConfig(0) + 40);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    *(void *)uint64_t v10 = 0;
    v10[8] = 0;
    UnknownStorage.init()();
    uint64_t v12 = &v10[*(int *)(v6 + 28)];
    uint64_t v13 = type metadata accessor for AspirePirSymmetricPirClientConfig(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
    uint64_t v14 = &v10[*(int *)(v6 + 32)];
    uint64_t v15 = type metadata accessor for AspirePirPIRShardingFunction(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 1, 1, v15);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  }
  else
  {
    outlined init with take of AMDPbPIRConfig((uint64_t)v5, (uint64_t)v10, type metadata accessor for AspirePirKeywordPirParameters);
  }
  return AMDPbPIRConfig.keywordPirParams.modify;
}

void AMDPbPIRConfig.keywordPirParams.modify(uint64_t a1, char a2)
{
}

BOOL AMDPbPIRConfig.hasKeywordPirParams.getter()
{
  return AMDPbPIRConfig.hasKeywordPirParams.getter(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?, type metadata accessor for AMDPbPIRConfig, type metadata accessor for AspirePirKeywordPirParameters);
}

Swift::Void __swiftcall AMDPbPIRConfig.clearKeywordPirParams()()
{
}

void AMDPbPIRConfig.algorithm.getter(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 16);
  *(void *)a1 = *(void *)(v1 + 8);
  *(unsigned char *)(a1 + 8) = v2;
}

uint64_t AMDPbPIRConfig.algorithm.setter(uint64_t result)
{
  char v2 = *(unsigned char *)(result + 8);
  *(void *)(v1 + 8) = *(void *)result;
  *(unsigned char *)(v1 + 16) = v2;
  return result;
}

uint64_t (*AMDPbPIRConfig.algorithm.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbPIRConfig.batchSize.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t AMDPbPIRConfig.batchSize.setter(uint64_t result)
{
  *(void *)(v1 + 24) = result;
  return result;
}

uint64_t (*AMDPbPIRConfig.batchSize.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t (*AMDPbPIRConfig.evaluationKeyConfigHash.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbPIRConfig.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AMDPbPIRConfig.unknownFields.getter(type metadata accessor for AMDPbPIRConfig, a1);
}

uint64_t AMDPbPIRConfig.unknownFields.setter(uint64_t a1)
{
  return AMDPbPIRConfig.unknownFields.setter(a1, type metadata accessor for AMDPbPIRConfig);
}

uint64_t (*AMDPbPIRConfig.unknownFields.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbPIRShardConfig.numEntries.getter()
{
  return *(void *)v0;
}

uint64_t AMDPbPIRShardConfig.numEntries.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*AMDPbPIRShardConfig.numEntries.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbPIRShardConfig.entrySize.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t AMDPbPIRShardConfig.entrySize.setter(uint64_t result)
{
  *(void *)(v1 + 8) = result;
  return result;
}

uint64_t (*AMDPbPIRShardConfig.entrySize.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbPIRShardConfig.dimensions.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AMDPbPIRShardConfig.dimensions.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 16) = a1;
  return result;
}

uint64_t (*AMDPbPIRShardConfig.dimensions.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbPIRShardConfig.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AMDPbPIRShardConfig(0) + 28);
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t AMDPbPIRShardConfig.unknownFields.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AMDPbPIRShardConfig(0) + 28);
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);
  return v5(v3, a1, v4);
}

uint64_t (*AMDPbPIRShardConfig.unknownFields.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbPIRShardConfig.init()@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = MEMORY[0x263F8EE78];
  type metadata accessor for AMDPbPIRShardConfig(0);
  return UnknownStorage.init()();
}

uint64_t AMDPbPECConfig.encryptionParameters.getter@<X0>(uint64_t a1@<X8>)
{
  return AMDPbPIRConfig.encryptionParameters.getter(type metadata accessor for AMDPbPECConfig, a1);
}

uint64_t AMDPbPIRConfig.encryptionParameters.getter@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = a1(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v2 + *(int *)(v8 + 36), (uint64_t)v7, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  uint64_t v9 = type metadata accessor for AspireHeEncryptionParameters(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v7, 1, v9) != 1) {
    return outlined init with take of AMDPbPIRConfig((uint64_t)v7, a2, type metadata accessor for AspireHeEncryptionParameters);
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = MEMORY[0x263F8EE78];
  *(void *)(a2 + 24) = 0;
  *(unsigned char *)(a2 + 32) = 1;
  *(void *)(a2 + 40) = 0;
  *(unsigned char *)(a2 + 48) = 1;
  *(void *)(a2 + 56) = 0;
  *(unsigned char *)(a2 + 64) = 1;
  UnknownStorage.init()();
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v7, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
}

uint64_t key path setter for AMDPbPIRConfig.encryptionParameters : AMDPbPIRConfig(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v8 = type metadata accessor for AspireHeEncryptionParameters(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbPIRConfig(a1, (uint64_t)v11, type metadata accessor for AspireHeEncryptionParameters);
  uint64_t v12 = a2 + *(int *)(a5(0) + 36);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v12, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  outlined init with take of AMDPbPIRConfig((uint64_t)v11, v12, type metadata accessor for AspireHeEncryptionParameters);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56))(v12, 0, 1, v8);
}

uint64_t AMDPbPECConfig.encryptionParameters.setter(uint64_t a1)
{
  return AMDPbPIRConfig.encryptionParameters.setter(a1, type metadata accessor for AMDPbPECConfig);
}

uint64_t AMDPbPIRConfig.encryptionParameters.setter(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = v2 + *(int *)(a2(0) + 36);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v4, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  outlined init with take of AMDPbPIRConfig(a1, v4, type metadata accessor for AspireHeEncryptionParameters);
  uint64_t v5 = type metadata accessor for AspireHeEncryptionParameters(0);
  uint64_t v6 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
  return v6(v4, 0, 1, v5);
}

void (*AMDPbPECConfig.encryptionParameters.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for AspireHeEncryptionParameters(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  void v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for AMDPbPECConfig(0) + 36);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    *uint64_t v10 = 0;
    v10[1] = 0;
    v10[2] = MEMORY[0x263F8EE78];
    v10[3] = 0;
    *((unsigned char *)v10 + 32) = 1;
    v10[5] = 0;
    *((unsigned char *)v10 + 48) = 1;
    v10[7] = 0;
    *((unsigned char *)v10 + 64) = 1;
    UnknownStorage.init()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  }
  else
  {
    outlined init with take of AMDPbPIRConfig((uint64_t)v5, (uint64_t)v10, type metadata accessor for AspireHeEncryptionParameters);
  }
  return AMDPbPIRConfig.encryptionParameters.modify;
}

BOOL AMDPbPECConfig.hasEncryptionParameters.getter()
{
  return AMDPbPIRConfig.hasEncryptionParameters.getter(type metadata accessor for AMDPbPECConfig);
}

BOOL AMDPbPIRConfig.hasEncryptionParameters.getter(uint64_t (*a1)(void))
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = a1(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + *(int *)(v6 + 36), (uint64_t)v5, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  uint64_t v7 = type metadata accessor for AspireHeEncryptionParameters(0);
  BOOL v8 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1;
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  return v8;
}

Swift::Void __swiftcall AMDPbPECConfig.clearEncryptionParameters()()
{
}

uint64_t AMDPbPIRConfig.clearEncryptionParameters()(uint64_t (*a1)(void))
{
  uint64_t v2 = v1 + *(int *)(a1(0) + 36);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v2, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  uint64_t v3 = type metadata accessor for AspireHeEncryptionParameters(0);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);
  return v4(v2, 1, 1, v3);
}

uint64_t AMDPbPECConfig.scalingFactor.getter()
{
  return *(void *)v0;
}

uint64_t AMDPbPECConfig.scalingFactor.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*AMDPbPECConfig.scalingFactor.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbPECConfig.plaintextPacking.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for AMDPbPECConfig(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + *(int *)(v6 + 40), (uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  uint64_t v7 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of AMDPbPIRConfig((uint64_t)v5, a1, type metadata accessor for AspireSimilarityPlaintextPacking);
  }
  uint64_t v8 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(a1, 1, 1, v8);
  UnknownStorage.init()();
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
}

uint64_t key path getter for AMDPbPECConfig.plaintextPacking : AMDPbPECConfig@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for AMDPbPECConfig(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v7 + 40), (uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  uint64_t v8 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v6, 1, v8) != 1) {
    return outlined init with take of AMDPbPIRConfig((uint64_t)v6, a2, type metadata accessor for AspireSimilarityPlaintextPacking);
  }
  uint64_t v9 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(a2, 1, 1, v9);
  UnknownStorage.init()();
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
}

uint64_t key path setter for AMDPbPECConfig.plaintextPacking : AMDPbPECConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbPIRConfig(a1, (uint64_t)v7, type metadata accessor for AspireSimilarityPlaintextPacking);
  uint64_t v8 = a2 + *(int *)(type metadata accessor for AMDPbPECConfig(0) + 40);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v8, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  outlined init with take of AMDPbPIRConfig((uint64_t)v7, v8, type metadata accessor for AspireSimilarityPlaintextPacking);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

uint64_t AMDPbPECConfig.plaintextPacking.setter(uint64_t a1)
{
  return AMDPbPIRConfig.keywordPirParams.setter(a1, type metadata accessor for AMDPbPECConfig, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?, type metadata accessor for AspireSimilarityPlaintextPacking, type metadata accessor for AspireSimilarityPlaintextPacking);
}

uint64_t AMDPbPIRConfig.keywordPirParams.setter(uint64_t a1, uint64_t (*a2)(void), uint64_t *a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t v10 = v5 + *(int *)(a2(0) + 40);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v10, a3);
  outlined init with take of AMDPbPIRConfig(a1, v10, a4);
  uint64_t v11 = a5(0);
  uint64_t v12 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
  return v12(v10, 0, 1, v11);
}

void (*AMDPbPECConfig.plaintextPacking.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  void v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for AMDPbPECConfig(0) + 40);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + v11, (uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    uint64_t v12 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v10, 1, 1, v12);
    UnknownStorage.init()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  }
  else
  {
    outlined init with take of AMDPbPIRConfig((uint64_t)v5, (uint64_t)v10, type metadata accessor for AspireSimilarityPlaintextPacking);
  }
  return AMDPbPECConfig.plaintextPacking.modify;
}

void AMDPbPECConfig.plaintextPacking.modify(uint64_t a1, char a2)
{
}

BOOL AMDPbPECConfig.hasPlaintextPacking.getter()
{
  return AMDPbPIRConfig.hasKeywordPirParams.getter((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?, type metadata accessor for AMDPbPECConfig, type metadata accessor for AspireSimilarityPlaintextPacking);
}

BOOL AMDPbPIRConfig.hasKeywordPirParams.getter(uint64_t *a1, uint64_t (*a2)(void), uint64_t (*a3)(void))
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x270FA5388](v7 - 8);
  size_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = a2(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v3 + *(int *)(v10 + 40), (uint64_t)v9, a1);
  uint64_t v11 = a3(0);
  BOOL v12 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v9, 1, v11) != 1;
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v9, a1);
  return v12;
}

Swift::Void __swiftcall AMDPbPECConfig.clearPlaintextPacking()()
{
}

uint64_t AMDPbPIRConfig.clearKeywordPirParams()(uint64_t (*a1)(void), uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t v6 = v3 + *(int *)(a1(0) + 40);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v6, a2);
  uint64_t v7 = a3(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
  return v8(v6, 1, 1, v7);
}

uint64_t AMDPbPECConfig.embeddingDimension.getter()
{
  return *(unsigned int *)(v0 + 8);
}

uint64_t AMDPbPECConfig.embeddingDimension.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*AMDPbPECConfig.embeddingDimension.modify())()
{
  return Repeated.subscript.readspecialized ;
}

void AMDPbPECConfig.similarityMetric.getter(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 24);
  *(void *)a1 = *(void *)(v1 + 16);
  *(unsigned char *)(a1 + 8) = v2;
}

uint64_t AMDPbPECConfig.similarityMetric.setter(uint64_t result)
{
  char v2 = *(unsigned char *)(result + 8);
  *(void *)(v1 + 16) = *(void *)result;
  *(unsigned char *)(v1 + 24) = v2;
  return result;
}

uint64_t (*AMDPbPECConfig.similarityMetric.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbPECConfig.evaluationKeyConfigHash.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  outlined copy of Data._Representation(v1, *(void *)(v0 + 40));
  return v1;
}

uint64_t AMDPbPECConfig.evaluationKeyConfigHash.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = outlined consume of Data._Representation(*(void *)(v2 + 32), *(void *)(v2 + 40));
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = a2;
  return result;
}

uint64_t (*AMDPbPECConfig.evaluationKeyConfigHash.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbPECConfig.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AMDPbPIRConfig.unknownFields.getter(type metadata accessor for AMDPbPECConfig, a1);
}

uint64_t AMDPbPIRConfig.unknownFields.getter@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1(0) + 32);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t AMDPbPECConfig.unknownFields.setter(uint64_t a1)
{
  return AMDPbPIRConfig.unknownFields.setter(a1, type metadata accessor for AMDPbPECConfig);
}

uint64_t AMDPbPIRConfig.unknownFields.setter(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = v2 + *(int *)(a2(0) + 32);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t (*AMDPbPECConfig.unknownFields.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t (*AMDPbHEQueries.queries.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbHEQueries.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AMDPbHEConfig.unknownFields.getter(type metadata accessor for AMDPbHEQueries, a1);
}

uint64_t AMDPbHEConfig.unknownFields.getter@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1(0) + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t AMDPbHEQueries.unknownFields.setter(uint64_t a1)
{
  return AMDPbHEConfig.unknownFields.setter(a1, type metadata accessor for AMDPbHEQueries);
}

uint64_t AMDPbHEConfig.unknownFields.setter(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = v2 + *(int *)(a2(0) + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t (*AMDPbHEQueries.unknownFields.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbHEQueries.init()@<X0>(void *a1@<X8>)
{
  return AMDPbHEQueries.init()((void (*)(void))type metadata accessor for AMDPbHEQueries, a1);
}

uint64_t (*AMDPbHEReplies.replies.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbHEReplies.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AMDPbHEConfig.unknownFields.getter(type metadata accessor for AMDPbHEReplies, a1);
}

uint64_t AMDPbHEReplies.unknownFields.setter(uint64_t a1)
{
  return AMDPbHEConfig.unknownFields.setter(a1, type metadata accessor for AMDPbHEReplies);
}

uint64_t (*AMDPbHEReplies.unknownFields.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbHEReplies.init()@<X0>(void *a1@<X8>)
{
  return AMDPbHEQueries.init()((void (*)(void))type metadata accessor for AMDPbHEReplies, a1);
}

uint64_t AMDPbHEQueries.init()@<X0>(void (*a1)(void)@<X0>, void *a2@<X8>)
{
  *a2 = MEMORY[0x263F8EE78];
  a1(0);
  return UnknownStorage.init()();
}

uint64_t AMDPbHEQuery.useCase.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AMDPbHEQuery.useCase.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  void *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*AMDPbHEQuery.useCase.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbHEQuery.query.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for AMDPbHEQuery(0);
  return outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + *(int *)(v3 + 20), a1, &demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
}

uint64_t AMDPbHEQuery.query.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for AMDPbHEQuery(0);
  return outlined assign with take of AMDPbHEConfig.OneOf_Config?(a1, v1 + *(int *)(v3 + 20), &demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
}

uint64_t (*AMDPbHEQuery.query.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbHEQuery.pirQuery.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for AMDPbHEQuery(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + *(int *)(v6 + 20), (uint64_t)v5, &demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
  uint64_t v7 = type metadata accessor for AMDPbHEQuery.OneOf_Query(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
LABEL_5:
    *(_DWORD *)a1 = 0;
    *(_OWORD *)(a1 + 8) = xmmword_249E85DF0;
    uint64_t v8 = type metadata accessor for AMDPbPIRQuery(0);
    UnknownStorage.init()();
    uint64_t v9 = a1 + *(int *)(v8 + 28);
    uint64_t v10 = type metadata accessor for AspirePirEncryptedIndices(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
    uint64_t v11 = a1 + *(int *)(v8 + 32);
    uint64_t v12 = type metadata accessor for AMDPbEvaluationKey(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  }
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v5, type metadata accessor for AMDPbHEQuery.OneOf_Query);
    goto LABEL_5;
  }
  return outlined init with take of AMDPbPIRConfig((uint64_t)v5, a1, type metadata accessor for AMDPbPIRQuery);
}

uint64_t AMDPbHEQuery.pirQuery.setter(uint64_t a1)
{
  return AMDPbHEQuery.pirQuery.setter(a1, type metadata accessor for AMDPbPIRQuery);
}

uint64_t AMDPbPIRQuery.init()@<X0>(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(_OWORD *)(a1 + 8) = xmmword_249E85DF0;
  uint64_t v2 = type metadata accessor for AMDPbPIRQuery(0);
  UnknownStorage.init()();
  uint64_t v3 = a1 + *(int *)(v2 + 28);
  uint64_t v4 = type metadata accessor for AspirePirEncryptedIndices(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  uint64_t v5 = a1 + *(int *)(v2 + 32);
  uint64_t v6 = type metadata accessor for AMDPbEvaluationKey(0);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
  return v7(v5, 1, 1, v6);
}

void (*AMDPbHEQuery.pirQuery.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for AMDPbPIRQuery(0);
  size_t v7 = *(void *)(*(void *)(v6 - 8) + 64);
  v3[2] = malloc(v7);
  uint64_t v8 = (char *)malloc(v7);
  v3[3] = v8;
  uint64_t v9 = *(int *)(type metadata accessor for AMDPbHEQuery(0) + 20);
  *((_DWORD *)v3 + 12) = v9;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + v9, (uint64_t)v5, &demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
  uint64_t v10 = type metadata accessor for AMDPbHEQuery.OneOf_Query(0);
  v3[4] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  void v3[5] = v11;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48))(v5, 1, v10) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      outlined init with take of AMDPbPIRConfig((uint64_t)v5, (uint64_t)v8, type metadata accessor for AMDPbPIRQuery);
      return AMDPbHEQuery.pirQuery.modify;
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v5, type metadata accessor for AMDPbHEQuery.OneOf_Query);
  }
  *(_DWORD *)uint64_t v8 = 0;
  *(_OWORD *)(v8 + 8) = xmmword_249E85DF0;
  UnknownStorage.init()();
  uint64_t v12 = &v8[*(int *)(v6 + 28)];
  uint64_t v13 = type metadata accessor for AspirePirEncryptedIndices(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
  uint64_t v14 = &v8[*(int *)(v6 + 32)];
  uint64_t v15 = type metadata accessor for AMDPbEvaluationKey(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 1, 1, v15);
  return AMDPbHEQuery.pirQuery.modify;
}

void AMDPbHEQuery.pirQuery.modify(uint64_t a1, char a2)
{
}

uint64_t AMDPbHEQuery.pecQuery.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for AMDPbHEQuery(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + *(int *)(v6 + 20), (uint64_t)v5, &demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
  uint64_t v7 = type metadata accessor for AMDPbHEQuery.OneOf_Query(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1) {
      return outlined init with take of AMDPbPIRConfig((uint64_t)v5, a1, type metadata accessor for AMDPbPECQuery);
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v5, type metadata accessor for AMDPbHEQuery.OneOf_Query);
  }
  *(void *)a1 = MEMORY[0x263F8EE78];
  *(_OWORD *)(a1 + 8) = xmmword_249E85DF0;
  uint64_t v9 = type metadata accessor for AMDPbPECQuery(0);
  UnknownStorage.init()();
  uint64_t v10 = a1 + *(int *)(v9 + 28);
  uint64_t v11 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  uint64_t v12 = a1 + *(int *)(v9 + 32);
  uint64_t v13 = type metadata accessor for AMDPbEvaluationKey(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
}

uint64_t key path setter for AMDPbHEQuery.pirQuery : AMDPbHEQuery(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  uint64_t v11 = a5(0);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v17 - v12;
  outlined init with copy of AMDPbPIRConfig(a1, (uint64_t)&v17 - v12, a6);
  uint64_t v14 = a2 + *(int *)(type metadata accessor for AMDPbHEQuery(0) + 20);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v14, &demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
  outlined init with take of AMDPbPIRConfig((uint64_t)v13, v14, a7);
  uint64_t v15 = type metadata accessor for AMDPbHEQuery.OneOf_Query(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 0, 1, v15);
}

uint64_t AMDPbHEQuery.pecQuery.setter(uint64_t a1)
{
  return AMDPbHEQuery.pirQuery.setter(a1, type metadata accessor for AMDPbPECQuery);
}

uint64_t AMDPbHEQuery.pirQuery.setter(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v5 = v2 + *(int *)(type metadata accessor for AMDPbHEQuery(0) + 20);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v5, &demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
  outlined init with take of AMDPbPIRConfig(a1, v5, a2);
  uint64_t v6 = type metadata accessor for AMDPbHEQuery.OneOf_Query(0);
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
  return v7(v5, 0, 1, v6);
}

uint64_t AMDPbPECQuery.init()@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = MEMORY[0x263F8EE78];
  *(_OWORD *)(a1 + 8) = xmmword_249E85DF0;
  uint64_t v2 = type metadata accessor for AMDPbPECQuery(0);
  UnknownStorage.init()();
  uint64_t v3 = a1 + *(int *)(v2 + 28);
  uint64_t v4 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  uint64_t v5 = a1 + *(int *)(v2 + 32);
  uint64_t v6 = type metadata accessor for AMDPbEvaluationKey(0);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
  return v7(v5, 1, 1, v6);
}

void (*AMDPbHEQuery.pecQuery.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for AMDPbPECQuery(0);
  size_t v7 = *(void *)(*(void *)(v6 - 8) + 64);
  v3[2] = malloc(v7);
  uint64_t v8 = (char *)malloc(v7);
  v3[3] = v8;
  uint64_t v9 = *(int *)(type metadata accessor for AMDPbHEQuery(0) + 20);
  *((_DWORD *)v3 + 12) = v9;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + v9, (uint64_t)v5, &demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
  uint64_t v10 = type metadata accessor for AMDPbHEQuery.OneOf_Query(0);
  v3[4] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  void v3[5] = v11;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48))(v5, 1, v10) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
LABEL_6:
    *(void *)uint64_t v8 = MEMORY[0x263F8EE78];
    *(_OWORD *)(v8 + 8) = xmmword_249E85DF0;
    UnknownStorage.init()();
    uint64_t v12 = &v8[*(int *)(v6 + 28)];
    uint64_t v13 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
    uint64_t v14 = &v8[*(int *)(v6 + 32)];
    uint64_t v15 = type metadata accessor for AMDPbEvaluationKey(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 1, 1, v15);
    return AMDPbHEQuery.pecQuery.modify;
  }
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v5, type metadata accessor for AMDPbHEQuery.OneOf_Query);
    goto LABEL_6;
  }
  outlined init with take of AMDPbPIRConfig((uint64_t)v5, (uint64_t)v8, type metadata accessor for AMDPbPECQuery);
  return AMDPbHEQuery.pecQuery.modify;
}

void AMDPbHEQuery.pecQuery.modify(uint64_t a1, char a2)
{
}

void AMDPbHEQuery.pirQuery.modify(uint64_t a1, char a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  size_t v7 = *(void **)a1;
  uint64_t v8 = *(void *)(*(void *)a1 + 32);
  uint64_t v9 = *(void *)(*(void *)a1 + 40);
  uint64_t v10 = *(int *)(*(void *)a1 + 48);
  uint64_t v11 = *(void **)(*(void *)a1 + 16);
  uint64_t v12 = *(void **)(*(void *)a1 + 24);
  uint64_t v13 = *(void **)(*(void *)a1 + 8);
  uint64_t v14 = **(void **)a1 + v10;
  if (a2)
  {
    outlined init with copy of AMDPbPIRConfig(*(void *)(*(void *)a1 + 24), (uint64_t)v11, a5);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v14, &demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
    outlined init with take of AMDPbPIRConfig((uint64_t)v11, v14, a3);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56))(v14, 0, 1, v8);
    outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v12, a6);
  }
  else
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(**(void **)a1 + v10, &demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
    outlined init with take of AMDPbPIRConfig((uint64_t)v12, v14, a3);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56))(v14, 0, 1, v8);
  }
  free(v12);
  free(v11);
  free(v13);
  free(v7);
}

uint64_t AMDPbHEQuery.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AMDPbHEConfigsReply.unknownFields.getter(type metadata accessor for AMDPbHEQuery, a1);
}

uint64_t AMDPbHEQuery.unknownFields.setter(uint64_t a1)
{
  return AMDPbHEConfigsReply.unknownFields.setter(a1, type metadata accessor for AMDPbHEQuery);
}

uint64_t (*AMDPbHEQuery.unknownFields.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbHEQuery.init()@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  uint64_t v1 = (char *)a1 + *(int *)(type metadata accessor for AMDPbHEQuery(0) + 20);
  uint64_t v2 = type metadata accessor for AMDPbHEQuery.OneOf_Query(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  return UnknownStorage.init()();
}

uint64_t AMDPbHEReply.reply.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1, a1, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
}

uint64_t AMDPbHEReply.reply.setter(uint64_t a1)
{
  return outlined assign with take of AMDPbHEConfig.OneOf_Config?(a1, v1, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
}

uint64_t (*AMDPbHEReply.reply.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbHEReply.pirReply.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
  uint64_t v7 = type metadata accessor for AMDPbHEReply.OneOf_Reply(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
LABEL_5:
    *a1 = MEMORY[0x263F8EE78];
    type metadata accessor for AMDPbPIRReply(0);
    return UnknownStorage.init()();
  }
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v6, type metadata accessor for AMDPbHEReply.OneOf_Reply);
    goto LABEL_5;
  }
  return outlined init with take of AMDPbPIRConfig((uint64_t)v6, (uint64_t)a1, type metadata accessor for AMDPbPIRReply);
}

uint64_t key path getter for AMDPbHEReply.pirReply : AMDPbHEReply@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v6, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
  uint64_t v7 = type metadata accessor for AMDPbHEReply.OneOf_Reply(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
LABEL_5:
    *a2 = MEMORY[0x263F8EE78];
    type metadata accessor for AMDPbPIRReply(0);
    return UnknownStorage.init()();
  }
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v6, type metadata accessor for AMDPbHEReply.OneOf_Reply);
    goto LABEL_5;
  }
  return outlined init with take of AMDPbPIRConfig((uint64_t)v6, (uint64_t)a2, type metadata accessor for AMDPbPIRReply);
}

uint64_t key path setter for AMDPbHEReply.pecReply : AMDPbHEReply(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  uint64_t v11 = a5(0);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v16 - v12;
  outlined init with copy of AMDPbPIRConfig(a1, (uint64_t)&v16 - v12, a6);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(a2, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
  outlined init with take of AMDPbPIRConfig((uint64_t)v13, a2, a7);
  uint64_t v14 = type metadata accessor for AMDPbHEReply.OneOf_Reply(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(a2, 0, 1, v14);
}

uint64_t AMDPbHEReply.pirReply.setter(uint64_t a1)
{
  return AMDPbHEConfig.pirConfig.setter(a1, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?, type metadata accessor for AMDPbPIRReply, type metadata accessor for AMDPbHEReply.OneOf_Reply);
}

uint64_t AMDPbPIRReply.init()@<X0>(void *a1@<X8>)
{
  return AMDPbHEQueries.init()((void (*)(void))type metadata accessor for AMDPbPIRReply, a1);
}

void (*AMDPbHEReply.pirReply.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v2 = v1;
  uint64_t v4 = malloc(0x30uLL);
  *a1 = v4;
  *uint64_t v4 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
  uint64_t v6 = malloc(*(void *)(*(void *)(v5 - 8) + 64));
  v4[1] = v6;
  size_t v7 = *(void *)(*(void *)(type metadata accessor for AMDPbPIRReply(0) - 8) + 64);
  v4[2] = malloc(v7);
  uint64_t v8 = malloc(v7);
  v4[3] = v8;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
  uint64_t v9 = type metadata accessor for AMDPbHEReply.OneOf_Reply(0);
  v4[4] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v4[5] = v10;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v6, 1, v9) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      outlined init with take of AMDPbPIRConfig((uint64_t)v6, (uint64_t)v8, type metadata accessor for AMDPbPIRReply);
      return AMDPbHEReply.pirReply.modify;
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v6, type metadata accessor for AMDPbHEReply.OneOf_Reply);
  }
  *uint64_t v8 = MEMORY[0x263F8EE78];
  UnknownStorage.init()();
  return AMDPbHEReply.pirReply.modify;
}

void AMDPbHEReply.pirReply.modify(uint64_t **a1, char a2)
{
}

void AMDPbHEReply.pecReply.modify(uint64_t **a1, char a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  size_t v7 = *a1;
  uint64_t v8 = (*a1)[4];
  uint64_t v9 = (*a1)[5];
  uint64_t v10 = (void *)(*a1)[2];
  uint64_t v11 = (void *)(*a1)[3];
  uint64_t v13 = **a1;
  uint64_t v12 = (void *)(*a1)[1];
  if (a2)
  {
    outlined init with copy of AMDPbPIRConfig((*a1)[3], (uint64_t)v10, a5);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v13, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
    outlined init with take of AMDPbPIRConfig((uint64_t)v10, v13, a3);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56))(v13, 0, 1, v8);
    outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v11, a6);
  }
  else
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(**a1, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
    outlined init with take of AMDPbPIRConfig((uint64_t)v11, v13, a3);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56))(v13, 0, 1, v8);
  }
  free(v11);
  free(v10);
  free(v12);
  free(v7);
}

uint64_t AMDPbHEReply.pecReply.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
  uint64_t v7 = type metadata accessor for AMDPbHEReply.OneOf_Reply(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1) {
      return outlined init with take of AMDPbPIRConfig((uint64_t)v6, (uint64_t)a1, type metadata accessor for AMDPbPECReply);
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v6, type metadata accessor for AMDPbHEReply.OneOf_Reply);
  }
  *a1 = MEMORY[0x263F8EE78];
  type metadata accessor for AMDPbPECReply(0);
  return UnknownStorage.init()();
}

uint64_t key path getter for AMDPbHEReply.pecReply : AMDPbHEReply@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v6, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
  uint64_t v7 = type metadata accessor for AMDPbHEReply.OneOf_Reply(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1) {
      return outlined init with take of AMDPbPIRConfig((uint64_t)v6, (uint64_t)a2, type metadata accessor for AMDPbPECReply);
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v6, type metadata accessor for AMDPbHEReply.OneOf_Reply);
  }
  *a2 = MEMORY[0x263F8EE78];
  type metadata accessor for AMDPbPECReply(0);
  return UnknownStorage.init()();
}

uint64_t AMDPbHEReply.pecReply.setter(uint64_t a1)
{
  return AMDPbHEConfig.pirConfig.setter(a1, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?, type metadata accessor for AMDPbPECReply, type metadata accessor for AMDPbHEReply.OneOf_Reply);
}

uint64_t AMDPbHEConfig.pirConfig.setter(uint64_t a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t (*a4)(void))
{
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v4, a2);
  outlined init with take of AMDPbPIRConfig(a1, v4, a3);
  uint64_t v8 = a4(0);
  swift_storeEnumTagMultiPayload();
  uint64_t v9 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56);
  return v9(v4, 0, 1, v8);
}

uint64_t AMDPbPECReply.init()@<X0>(void *a1@<X8>)
{
  return AMDPbHEQueries.init()((void (*)(void))type metadata accessor for AMDPbPECReply, a1);
}

void (*AMDPbHEReply.pecReply.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v2 = v1;
  uint64_t v4 = malloc(0x30uLL);
  *a1 = v4;
  *uint64_t v4 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
  uint64_t v6 = malloc(*(void *)(*(void *)(v5 - 8) + 64));
  v4[1] = v6;
  size_t v7 = *(void *)(*(void *)(type metadata accessor for AMDPbPECReply(0) - 8) + 64);
  v4[2] = malloc(v7);
  uint64_t v8 = malloc(v7);
  v4[3] = v8;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
  uint64_t v9 = type metadata accessor for AMDPbHEReply.OneOf_Reply(0);
  v4[4] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v4[5] = v10;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v6, 1, v9) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
LABEL_6:
    *uint64_t v8 = MEMORY[0x263F8EE78];
    UnknownStorage.init()();
    return AMDPbHEReply.pecReply.modify;
  }
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v6, type metadata accessor for AMDPbHEReply.OneOf_Reply);
    goto LABEL_6;
  }
  outlined init with take of AMDPbPIRConfig((uint64_t)v6, (uint64_t)v8, type metadata accessor for AMDPbPECReply);
  return AMDPbHEReply.pecReply.modify;
}

void AMDPbHEReply.pecReply.modify(uint64_t **a1, char a2)
{
}

uint64_t AMDPbHEReply.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AMDPbHEConfig.unknownFields.getter(type metadata accessor for AMDPbHEReply, a1);
}

uint64_t AMDPbHEReply.unknownFields.setter(uint64_t a1)
{
  return AMDPbHEConfig.unknownFields.setter(a1, type metadata accessor for AMDPbHEReply);
}

uint64_t (*AMDPbHEReply.unknownFields.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t static AMDPbPIRReply.== infix(_:_:)(char *a1, char *a2)
{
  return specialized static AMDPbEvaluationKeys.== infix(_:_:)(a1, a2, specialized static Array<A>.== infix(_:_:), type metadata accessor for AMDPbPIRReply) & 1;
}

uint64_t static AMDPbPECReply.== infix(_:_:)(char *a1, char *a2)
{
  return specialized static AMDPbEvaluationKeys.== infix(_:_:)(a1, a2, specialized static Array<A>.== infix(_:_:), type metadata accessor for AMDPbPECReply) & 1;
}

uint64_t AMDPbHEReply.init()@<X0>(uint64_t a1@<X8>)
{
  return AMDPbHEConfig.init()(type metadata accessor for AMDPbHEReply.OneOf_Reply, (void (*)(void))type metadata accessor for AMDPbHEReply, a1);
}

uint64_t AMDPbHEConfig.init()@<X0>(uint64_t (*a1)(void)@<X0>, void (*a2)(void)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(a3, 1, 1, v5);
  a2(0);
  return UnknownStorage.init()();
}

uint64_t (*AMDPbEvaluationKeys.keys.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbEvaluationKeys.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AMDPbHEConfig.unknownFields.getter(type metadata accessor for AMDPbEvaluationKeys, a1);
}

uint64_t AMDPbEvaluationKeys.unknownFields.setter(uint64_t a1)
{
  return AMDPbHEConfig.unknownFields.setter(a1, type metadata accessor for AMDPbEvaluationKeys);
}

uint64_t (*AMDPbEvaluationKeys.unknownFields.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbEvaluationKeys.init()@<X0>(void *a1@<X8>)
{
  return AMDPbHEQueries.init()((void (*)(void))type metadata accessor for AMDPbEvaluationKeys, a1);
}

uint64_t AMDPbEvaluationKey.metadata.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for AMDPbEvaluationKey(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + *(int *)(v6 + 20), (uint64_t)v5, &demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
  uint64_t v7 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of AMDPbPIRConfig((uint64_t)v5, (uint64_t)a1, type metadata accessor for AMDPbEvaluationKeyMetadata);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0xC000000000000000;
  UnknownStorage.init()();
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
}

uint64_t key path getter for AMDPbEvaluationKey.metadata : AMDPbEvaluationKey@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for AMDPbEvaluationKey(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v7 + 20), (uint64_t)v6, &demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
  uint64_t v8 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v6, 1, v8) != 1) {
    return outlined init with take of AMDPbPIRConfig((uint64_t)v6, (uint64_t)a2, type metadata accessor for AMDPbEvaluationKeyMetadata);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0xC000000000000000;
  UnknownStorage.init()();
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
}

uint64_t key path setter for AMDPbEvaluationKey.metadata : AMDPbEvaluationKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbPIRConfig(a1, (uint64_t)v7, type metadata accessor for AMDPbEvaluationKeyMetadata);
  uint64_t v8 = a2 + *(int *)(type metadata accessor for AMDPbEvaluationKey(0) + 20);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v8, &demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
  outlined init with take of AMDPbPIRConfig((uint64_t)v7, v8, type metadata accessor for AMDPbEvaluationKeyMetadata);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

uint64_t AMDPbEvaluationKey.metadata.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AMDPbEvaluationKey(0) + 20);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v3, &demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
  outlined init with take of AMDPbPIRConfig(a1, v3, type metadata accessor for AMDPbEvaluationKeyMetadata);
  uint64_t v4 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(v3, 0, 1, v4);
}

uint64_t AMDPbEvaluationKeyMetadata.init()@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0xC000000000000000;
  type metadata accessor for AMDPbEvaluationKeyMetadata(0);
  return UnknownStorage.init()();
}

void (*AMDPbEvaluationKey.metadata.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  void v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for AMDPbEvaluationKey(0) + 20);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    *uint64_t v10 = 0;
    v10[1] = 0;
    v10[2] = 0xC000000000000000;
    UnknownStorage.init()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
  }
  else
  {
    outlined init with take of AMDPbPIRConfig((uint64_t)v5, (uint64_t)v10, type metadata accessor for AMDPbEvaluationKeyMetadata);
  }
  return AMDPbEvaluationKey.metadata.modify;
}

void AMDPbEvaluationKey.metadata.modify(uint64_t a1, char a2)
{
}

BOOL AMDPbEvaluationKey.hasMetadata.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for AMDPbEvaluationKey(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v0 + *(int *)(v4 + 20), (uint64_t)v3, &demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
  uint64_t v5 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
  BOOL v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v3, &demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
  return v6;
}

Swift::Void __swiftcall AMDPbEvaluationKey.clearMetadata()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for AMDPbEvaluationKey(0) + 20);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v1, &demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
  uint64_t v2 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);
  v3(v1, 1, 1, v2);
}

uint64_t AMDPbEvaluationKey.evaluationKey.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for AMDPbEvaluationKey(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + *(int *)(v6 + 24), (uint64_t)v5, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  uint64_t v7 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of AMDPbPIRConfig((uint64_t)v5, a1, type metadata accessor for AspireHeSerializedEvaluationKey);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + *(int *)(v7 + 20);
  uint64_t v9 = type metadata accessor for AspireHeSerializedGaloisKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  uint64_t v10 = a1 + *(int *)(v7 + 24);
  uint64_t v11 = type metadata accessor for AspireHeSerializedRelinKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
}

uint64_t key path getter for AMDPbEvaluationKey.evaluationKey : AMDPbEvaluationKey@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for AMDPbEvaluationKey(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v7 + 24), (uint64_t)v6, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  uint64_t v8 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v6, 1, v8) != 1) {
    return outlined init with take of AMDPbPIRConfig((uint64_t)v6, a2, type metadata accessor for AspireHeSerializedEvaluationKey);
  }
  UnknownStorage.init()();
  uint64_t v9 = a2 + *(int *)(v8 + 20);
  uint64_t v10 = type metadata accessor for AspireHeSerializedGaloisKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  uint64_t v11 = a2 + *(int *)(v8 + 24);
  uint64_t v12 = type metadata accessor for AspireHeSerializedRelinKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
}

uint64_t key path setter for AMDPbEvaluationKey.evaluationKey : AMDPbEvaluationKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbPIRConfig(a1, (uint64_t)v7, type metadata accessor for AspireHeSerializedEvaluationKey);
  uint64_t v8 = a2 + *(int *)(type metadata accessor for AMDPbEvaluationKey(0) + 24);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v8, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  outlined init with take of AMDPbPIRConfig((uint64_t)v7, v8, type metadata accessor for AspireHeSerializedEvaluationKey);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

uint64_t AMDPbEvaluationKey.evaluationKey.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AMDPbEvaluationKey(0) + 24);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v3, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  outlined init with take of AMDPbPIRConfig(a1, v3, type metadata accessor for AspireHeSerializedEvaluationKey);
  uint64_t v4 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(v3, 0, 1, v4);
}

void (*AMDPbEvaluationKey.evaluationKey.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  void v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for AMDPbEvaluationKey(0) + 24);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[*(int *)(v6 + 20)];
    uint64_t v13 = type metadata accessor for AspireHeSerializedGaloisKey(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
    uint64_t v14 = &v10[*(int *)(v6 + 24)];
    uint64_t v15 = type metadata accessor for AspireHeSerializedRelinKey(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 1, 1, v15);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  }
  else
  {
    outlined init with take of AMDPbPIRConfig((uint64_t)v5, (uint64_t)v10, type metadata accessor for AspireHeSerializedEvaluationKey);
  }
  return AMDPbEvaluationKey.evaluationKey.modify;
}

void AMDPbEvaluationKey.evaluationKey.modify(uint64_t a1, char a2)
{
}

BOOL AMDPbEvaluationKey.hasEvaluationKey.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for AMDPbEvaluationKey(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v0 + *(int *)(v4 + 24), (uint64_t)v3, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  uint64_t v5 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  BOOL v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v3, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  return v6;
}

Swift::Void __swiftcall AMDPbEvaluationKey.clearEvaluationKey()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for AMDPbEvaluationKey(0) + 24);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v1, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  uint64_t v2 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);
  v3(v1, 1, 1, v2);
}

uint64_t AMDPbFetchHEConfigs.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for UnknownStorage();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);
  return v4(a1, v1, v3);
}

uint64_t AMDPbFetchHEConfigs.unknownFields.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UnknownStorage();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40);
  return v4(v1, a1, v3);
}

uint64_t (*AMDPbEvaluationKey.unknownFields.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbEvaluationKey.init()@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t v2 = type metadata accessor for AMDPbEvaluationKey(0);
  uint64_t v3 = a1 + *(int *)(v2 + 20);
  uint64_t v4 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  uint64_t v5 = a1 + *(int *)(v2 + 24);
  uint64_t v6 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
  return v7(v5, 1, 1, v6);
}

uint64_t AMDPbEvaluationKeyMetadata.timestamp.getter()
{
  return *(void *)v0;
}

uint64_t AMDPbEvaluationKeyMetadata.timestamp.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*AMDPbEvaluationKeyMetadata.timestamp.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t (*AMDPbEvaluationKeyMetadata.identifier.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbEvaluationKeyMetadata.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AMDPbHEConfigsReply.unknownFields.getter(type metadata accessor for AMDPbEvaluationKeyMetadata, a1);
}

uint64_t AMDPbEvaluationKeyMetadata.unknownFields.setter(uint64_t a1)
{
  return AMDPbHEConfigsReply.unknownFields.setter(a1, type metadata accessor for AMDPbEvaluationKeyMetadata);
}

uint64_t (*AMDPbEvaluationKeyMetadata.unknownFields.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbPIRQuery.shardIndex.getter()
{
  return *v0;
}

uint64_t AMDPbPIRQuery.shardIndex.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*AMDPbPIRQuery.shardIndex.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbPIRQuery.query.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for AMDPbPIRQuery(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + *(int *)(v6 + 28), (uint64_t)v5, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  uint64_t v7 = type metadata accessor for AspirePirEncryptedIndices(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of AMDPbPIRConfig((uint64_t)v5, (uint64_t)a1, type metadata accessor for AspirePirEncryptedIndices);
  }
  *a1 = MEMORY[0x263F8EE78];
  a1[1] = 0;
  UnknownStorage.init()();
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
}

uint64_t key path getter for AMDPbPIRQuery.query : AMDPbPIRQuery@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for AMDPbPIRQuery(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v7 + 28), (uint64_t)v6, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  uint64_t v8 = type metadata accessor for AspirePirEncryptedIndices(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v6, 1, v8) != 1) {
    return outlined init with take of AMDPbPIRConfig((uint64_t)v6, (uint64_t)a2, type metadata accessor for AspirePirEncryptedIndices);
  }
  *a2 = MEMORY[0x263F8EE78];
  a2[1] = 0;
  UnknownStorage.init()();
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
}

uint64_t key path setter for AMDPbPIRQuery.query : AMDPbPIRQuery(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AspirePirEncryptedIndices(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbPIRConfig(a1, (uint64_t)v7, type metadata accessor for AspirePirEncryptedIndices);
  uint64_t v8 = a2 + *(int *)(type metadata accessor for AMDPbPIRQuery(0) + 28);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v8, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  outlined init with take of AMDPbPIRConfig((uint64_t)v7, v8, type metadata accessor for AspirePirEncryptedIndices);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

uint64_t AMDPbPIRQuery.query.setter(uint64_t a1)
{
  return AMDPbHEKeyStatus.keyConfig.setter(a1, type metadata accessor for AMDPbPIRQuery, &demangling cache variable for type metadata for AspirePirEncryptedIndices?, type metadata accessor for AspirePirEncryptedIndices, type metadata accessor for AspirePirEncryptedIndices);
}

void (*AMDPbPIRQuery.query.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for AspirePirEncryptedIndices(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  void v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for AMDPbPIRQuery(0) + 28);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    *uint64_t v10 = MEMORY[0x263F8EE78];
    v10[1] = 0;
    UnknownStorage.init()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  }
  else
  {
    outlined init with take of AMDPbPIRConfig((uint64_t)v5, (uint64_t)v10, type metadata accessor for AspirePirEncryptedIndices);
  }
  return AMDPbPIRQuery.query.modify;
}

void AMDPbPIRQuery.query.modify(uint64_t a1, char a2)
{
}

BOOL AMDPbPIRQuery.hasQuery.getter()
{
  return AMDPbHEKeyStatus.hasKeyConfig.getter(&demangling cache variable for type metadata for AspirePirEncryptedIndices?, type metadata accessor for AMDPbPIRQuery, type metadata accessor for AspirePirEncryptedIndices);
}

BOOL AMDPbHEKeyStatus.hasKeyConfig.getter(uint64_t *a1, uint64_t (*a2)(void), uint64_t (*a3)(void))
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x270FA5388](v7 - 8);
  size_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = a2(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v3 + *(int *)(v10 + 28), (uint64_t)v9, a1);
  uint64_t v11 = a3(0);
  BOOL v12 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v9, 1, v11) != 1;
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v9, a1);
  return v12;
}

Swift::Void __swiftcall AMDPbPIRQuery.clearQuery()()
{
}

uint64_t AMDPbHEKeyStatus.clearKeyConfig()(uint64_t (*a1)(void), uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t v6 = v3 + *(int *)(a1(0) + 28);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v6, a2);
  uint64_t v7 = a3(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
  return v8(v6, 1, 1, v7);
}

uint64_t AMDPbPIRQuery.evaluationKey.getter@<X0>(uint64_t a1@<X8>)
{
  return AMDPbPIRQuery.evaluationKey.getter(type metadata accessor for AMDPbPIRQuery, a1);
}

uint64_t AMDPbPIRQuery.evaluationKey.setter(uint64_t a1)
{
  return AMDPbPIRQuery.evaluationKey.setter(a1, type metadata accessor for AMDPbPIRQuery);
}

void (*AMDPbPIRQuery.evaluationKey.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKey?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for AMDPbEvaluationKey(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  void v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for AMDPbPIRQuery(0) + 32);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for AMDPbEvaluationKey?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    BOOL v12 = &v10[*(int *)(v6 + 20)];
    uint64_t v13 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
    uint64_t v14 = &v10[*(int *)(v6 + 24)];
    uint64_t v15 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 1, 1, v15);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AMDPbEvaluationKey?);
  }
  else
  {
    outlined init with take of AMDPbPIRConfig((uint64_t)v5, (uint64_t)v10, type metadata accessor for AMDPbEvaluationKey);
  }
  return AMDPbPIRQuery.evaluationKey.modify;
}

void AMDPbPIRQuery.evaluationKey.modify(uint64_t a1, char a2)
{
}

BOOL AMDPbPIRQuery.hasEvaluationKey.getter()
{
  return AMDPbPIRQuery.hasEvaluationKey.getter(type metadata accessor for AMDPbPIRQuery);
}

Swift::Void __swiftcall AMDPbPIRQuery.clearEvaluationKey()()
{
}

uint64_t (*AMDPbPIRQuery.configurationHash.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbPIRQuery.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AMDPbHEConfigsReply.unknownFields.getter(type metadata accessor for AMDPbPIRQuery, a1);
}

uint64_t AMDPbPIRQuery.unknownFields.setter(uint64_t a1)
{
  return AMDPbHEConfigsReply.unknownFields.setter(a1, type metadata accessor for AMDPbPIRQuery);
}

uint64_t (*AMDPbPIRQuery.unknownFields.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t (*AMDPbPIRReply.replies.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbPIRReply.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AMDPbHEConfig.unknownFields.getter(type metadata accessor for AMDPbPIRReply, a1);
}

uint64_t AMDPbPIRReply.unknownFields.setter(uint64_t a1)
{
  return AMDPbHEConfig.unknownFields.setter(a1, type metadata accessor for AMDPbPIRReply);
}

uint64_t (*AMDPbPIRReply.unknownFields.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbPECQuery.shardIndices.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AMDPbPECQuery.shardIndices.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*AMDPbPECQuery.shardIndices.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbPECQuery.query.getter@<X0>(void *a1@<X8>)
{
  return AMDPbPECQuery.query.getter(type metadata accessor for AMDPbPECQuery, a1);
}

uint64_t key path setter for AMDPbPECQuery.query : AMDPbPECQuery(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbPIRConfig(a1, (uint64_t)v7, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
  uint64_t v8 = a2 + *(int *)(type metadata accessor for AMDPbPECQuery(0) + 28);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v8, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
  outlined init with take of AMDPbPIRConfig((uint64_t)v7, v8, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

uint64_t AMDPbPECQuery.query.setter(uint64_t a1)
{
  return AMDPbHEKeyStatus.keyConfig.setter(a1, type metadata accessor for AMDPbPECQuery, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
}

void (*AMDPbPECQuery.query.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  void v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for AMDPbPECQuery(0) + 28);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    *uint64_t v10 = 0;
    v10[1] = MEMORY[0x263F8EE78];
    UnknownStorage.init()();
    BOOL v12 = (char *)v10 + *(int *)(v6 + 32);
    uint64_t v13 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
  }
  else
  {
    outlined init with take of AMDPbPIRConfig((uint64_t)v5, (uint64_t)v10, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
  }
  return AMDPbPECQuery.query.modify;
}

void AMDPbPECQuery.query.modify(uint64_t a1, char a2)
{
}

BOOL AMDPbPECQuery.hasQuery.getter()
{
  return AMDPbHEKeyStatus.hasKeyConfig.getter(&demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?, type metadata accessor for AMDPbPECQuery, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
}

Swift::Void __swiftcall AMDPbPECQuery.clearQuery()()
{
}

uint64_t AMDPbPECQuery.evaluationKey.getter@<X0>(uint64_t a1@<X8>)
{
  return AMDPbPIRQuery.evaluationKey.getter(type metadata accessor for AMDPbPECQuery, a1);
}

uint64_t AMDPbPIRQuery.evaluationKey.getter@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKey?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = a1(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v2 + *(int *)(v8 + 32), (uint64_t)v7, &demangling cache variable for type metadata for AMDPbEvaluationKey?);
  uint64_t v9 = type metadata accessor for AMDPbEvaluationKey(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v7, 1, v9) != 1) {
    return outlined init with take of AMDPbPIRConfig((uint64_t)v7, a2, type metadata accessor for AMDPbEvaluationKey);
  }
  UnknownStorage.init()();
  uint64_t v10 = a2 + *(int *)(v9 + 20);
  uint64_t v11 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  uint64_t v12 = a2 + *(int *)(v9 + 24);
  uint64_t v13 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v7, &demangling cache variable for type metadata for AMDPbEvaluationKey?);
}

uint64_t key path getter for AMDPbPIRQuery.evaluationKey : AMDPbPIRQuery@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X3>, uint64_t a3@<X8>)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKey?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a2(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v9 + 32), (uint64_t)v8, &demangling cache variable for type metadata for AMDPbEvaluationKey?);
  uint64_t v10 = type metadata accessor for AMDPbEvaluationKey(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v8, 1, v10) != 1) {
    return outlined init with take of AMDPbPIRConfig((uint64_t)v8, a3, type metadata accessor for AMDPbEvaluationKey);
  }
  UnknownStorage.init()();
  uint64_t v11 = a3 + *(int *)(v10 + 20);
  uint64_t v12 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  uint64_t v13 = a3 + *(int *)(v10 + 24);
  uint64_t v14 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v8, &demangling cache variable for type metadata for AMDPbEvaluationKey?);
}

uint64_t key path setter for AMDPbPIRQuery.evaluationKey : AMDPbPIRQuery(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v8 = type metadata accessor for AMDPbEvaluationKey(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbPIRConfig(a1, (uint64_t)v11, type metadata accessor for AMDPbEvaluationKey);
  uint64_t v12 = a2 + *(int *)(a5(0) + 32);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v12, &demangling cache variable for type metadata for AMDPbEvaluationKey?);
  outlined init with take of AMDPbPIRConfig((uint64_t)v11, v12, type metadata accessor for AMDPbEvaluationKey);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56))(v12, 0, 1, v8);
}

uint64_t AMDPbPECQuery.evaluationKey.setter(uint64_t a1)
{
  return AMDPbPIRQuery.evaluationKey.setter(a1, type metadata accessor for AMDPbPECQuery);
}

uint64_t AMDPbPIRQuery.evaluationKey.setter(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = v2 + *(int *)(a2(0) + 32);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v4, &demangling cache variable for type metadata for AMDPbEvaluationKey?);
  outlined init with take of AMDPbPIRConfig(a1, v4, type metadata accessor for AMDPbEvaluationKey);
  uint64_t v5 = type metadata accessor for AMDPbEvaluationKey(0);
  uint64_t v6 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
  return v6(v4, 0, 1, v5);
}

void (*AMDPbPECQuery.evaluationKey.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKey?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for AMDPbEvaluationKey(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  void v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for AMDPbPECQuery(0) + 32);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for AMDPbEvaluationKey?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[*(int *)(v6 + 20)];
    uint64_t v13 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
    uint64_t v14 = &v10[*(int *)(v6 + 24)];
    uint64_t v15 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 1, 1, v15);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AMDPbEvaluationKey?);
  }
  else
  {
    outlined init with take of AMDPbPIRConfig((uint64_t)v5, (uint64_t)v10, type metadata accessor for AMDPbEvaluationKey);
  }
  return AMDPbPIRQuery.evaluationKey.modify;
}

BOOL AMDPbPECQuery.hasEvaluationKey.getter()
{
  return AMDPbPIRQuery.hasEvaluationKey.getter(type metadata accessor for AMDPbPECQuery);
}

BOOL AMDPbPIRQuery.hasEvaluationKey.getter(uint64_t (*a1)(void))
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKey?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = a1(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + *(int *)(v6 + 32), (uint64_t)v5, &demangling cache variable for type metadata for AMDPbEvaluationKey?);
  uint64_t v7 = type metadata accessor for AMDPbEvaluationKey(0);
  BOOL v8 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1;
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AMDPbEvaluationKey?);
  return v8;
}

Swift::Void __swiftcall AMDPbPECQuery.clearEvaluationKey()()
{
}

uint64_t AMDPbPIRQuery.clearEvaluationKey()(uint64_t (*a1)(void))
{
  uint64_t v2 = v1 + *(int *)(a1(0) + 32);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v2, &demangling cache variable for type metadata for AMDPbEvaluationKey?);
  uint64_t v3 = type metadata accessor for AMDPbEvaluationKey(0);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);
  return v4(v2, 1, 1, v3);
}

uint64_t AMDPbPECQuery.configurationHash.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  outlined copy of Data._Representation(v1, *(void *)(v0 + 16));
  return v1;
}

uint64_t AMDPbPECQuery.configurationHash.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = outlined consume of Data._Representation(*(void *)(v2 + 8), *(void *)(v2 + 16));
  *(void *)(v2 + 8) = a1;
  *(void *)(v2 + 16) = a2;
  return result;
}

uint64_t (*AMDPbPECQuery.configurationHash.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbPECQuery.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AMDPbHEConfigsReply.unknownFields.getter(type metadata accessor for AMDPbPECQuery, a1);
}

uint64_t AMDPbPECQuery.unknownFields.setter(uint64_t a1)
{
  return AMDPbHEConfigsReply.unknownFields.setter(a1, type metadata accessor for AMDPbPECQuery);
}

uint64_t (*AMDPbPECQuery.unknownFields.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbPECShardReply.reply.getter@<X0>(void *a1@<X8>)
{
  return AMDPbPECQuery.query.getter(type metadata accessor for AMDPbPECShardReply, a1);
}

uint64_t AMDPbPECQuery.query.getter@<X0>(uint64_t (*a1)(void)@<X0>, void *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = a1(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v2 + *(int *)(v8 + 28), (uint64_t)v7, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
  uint64_t v9 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v7, 1, v9) != 1) {
    return outlined init with take of AMDPbPIRConfig((uint64_t)v7, (uint64_t)a2, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
  }
  *a2 = 0;
  a2[1] = MEMORY[0x263F8EE78];
  UnknownStorage.init()();
  uint64_t v10 = (char *)a2 + *(int *)(v9 + 32);
  uint64_t v11 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v7, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
}

uint64_t key path getter for AMDPbPECQuery.query : AMDPbPECQuery@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X3>, void *a3@<X8>)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a2(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v9 + 28), (uint64_t)v8, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
  uint64_t v10 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v8, 1, v10) != 1) {
    return outlined init with take of AMDPbPIRConfig((uint64_t)v8, (uint64_t)a3, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
  }
  *a3 = 0;
  a3[1] = MEMORY[0x263F8EE78];
  UnknownStorage.init()();
  uint64_t v11 = (char *)a3 + *(int *)(v10 + 32);
  uint64_t v12 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v8, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
}

uint64_t key path setter for AMDPbPECShardReply.reply : AMDPbPECShardReply(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbPIRConfig(a1, (uint64_t)v7, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
  uint64_t v8 = a2 + *(int *)(type metadata accessor for AMDPbPECShardReply(0) + 28);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v8, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
  outlined init with take of AMDPbPIRConfig((uint64_t)v7, v8, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

uint64_t AMDPbPECShardReply.reply.setter(uint64_t a1)
{
  return AMDPbHEKeyStatus.keyConfig.setter(a1, type metadata accessor for AMDPbPECShardReply, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
}

uint64_t AMDPbHEKeyStatus.keyConfig.setter(uint64_t a1, uint64_t (*a2)(void), uint64_t *a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t v10 = v5 + *(int *)(a2(0) + 28);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v10, a3);
  outlined init with take of AMDPbPIRConfig(a1, v10, a4);
  uint64_t v11 = a5(0);
  uint64_t v12 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
  return v12(v10, 0, 1, v11);
}

void (*AMDPbPECShardReply.reply.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  void v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for AMDPbPECShardReply(0) + 28);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    *uint64_t v10 = 0;
    v10[1] = MEMORY[0x263F8EE78];
    UnknownStorage.init()();
    uint64_t v12 = (char *)v10 + *(int *)(v6 + 32);
    uint64_t v13 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
  }
  else
  {
    outlined init with take of AMDPbPIRConfig((uint64_t)v5, (uint64_t)v10, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
  }
  return AMDPbPECQuery.query.modify;
}

void AMDPbHEKeyStatus.keyConfig.modify(uint64_t a1, char a2, uint64_t *a3, uint64_t (*a4)(void), uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  uint64_t v8 = *(void **)a1;
  uint64_t v9 = *(int *)(*(void *)a1 + 48);
  uint64_t v10 = *(void **)(*(void *)a1 + 32);
  uint64_t v11 = *(void **)(*(void *)a1 + 40);
  uint64_t v12 = *(void *)(*(void *)a1 + 16);
  uint64_t v13 = *(void *)(*(void *)a1 + 24);
  uint64_t v14 = *(void **)(*(void *)a1 + 8);
  uint64_t v15 = **(void **)a1 + v9;
  if (a2)
  {
    outlined init with copy of AMDPbPIRConfig(*(void *)(*(void *)a1 + 40), (uint64_t)v10, a5);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v15, a3);
    outlined init with take of AMDPbPIRConfig((uint64_t)v10, v15, a4);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(v15, 0, 1, v12);
    outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v11, a6);
  }
  else
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(**(void **)a1 + v9, a3);
    outlined init with take of AMDPbPIRConfig((uint64_t)v11, v15, a4);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(v15, 0, 1, v12);
  }
  free(v11);
  free(v10);
  free(v14);
  free(v8);
}

BOOL AMDPbPECShardReply.hasReply.getter()
{
  return AMDPbHEKeyStatus.hasKeyConfig.getter(&demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?, type metadata accessor for AMDPbPECShardReply, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
}

Swift::Void __swiftcall AMDPbPECShardReply.clearReply()()
{
}

uint64_t (*AMDPbPECShardReply.entryIds.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbPECShardReply.entryMetadatas.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AMDPbPECShardReply.entryMetadatas.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 8) = a1;
  return result;
}

uint64_t (*AMDPbPECShardReply.entryMetadatas.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbPECShardReply.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AMDPbHEConfigsReply.unknownFields.getter(type metadata accessor for AMDPbPECShardReply, a1);
}

uint64_t AMDPbPECShardReply.unknownFields.setter(uint64_t a1)
{
  return AMDPbHEConfigsReply.unknownFields.setter(a1, type metadata accessor for AMDPbPECShardReply);
}

uint64_t (*AMDPbPECShardReply.unknownFields.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbPECShardReply.init()@<X0>(void *a1@<X8>)
{
  uint64_t v2 = MEMORY[0x263F8EE78];
  *a1 = MEMORY[0x263F8EE78];
  a1[1] = v2;
  uint64_t v3 = type metadata accessor for AMDPbPECShardReply(0);
  UnknownStorage.init()();
  uint64_t v4 = (char *)a1 + *(int *)(v3 + 28);
  uint64_t v5 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
  uint64_t v6 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
  return v6(v4, 1, 1, v5);
}

uint64_t (*AMDPbPECReply.shardReplies.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbPECReply.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AMDPbHEConfig.unknownFields.getter(type metadata accessor for AMDPbPECReply, a1);
}

uint64_t AMDPbPECReply.unknownFields.setter(uint64_t a1)
{
  return AMDPbHEConfig.unknownFields.setter(a1, type metadata accessor for AMDPbPECReply);
}

uint64_t (*AMDPbPECReply.unknownFields.modify())()
{
  return Repeated.subscript.readspecialized ;
}

void *AMDPbFetchHEConfigs.protoMessageName.unsafeMutableAddressor()
{
  return &static AMDPbFetchHEConfigs.protoMessageName;
}

unint64_t static AMDPbFetchHEConfigs.protoMessageName.getter()
{
  return 0xD00000000000001ALL;
}

uint64_t one-time initialization function for _protobuf_nameMap()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AMDPbFetchHEConfigs._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AMDPbFetchHEConfigs._protobuf_nameMap);
  return _NameMap.init()();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AMDPbHEConfigsReply._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AMDPbHEConfigsReply._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  uint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_249E85E00;
  uint64_t v5 = (void *)(v4 + v3);
  uint64_t v6 = v4 + v3 + v1[14];
  void *v5 = 1;
  *(void *)uint64_t v6 = "configs";
  *(void *)(v6 + 8) = 7;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "key_info";
  *((void *)v10 + 1) = 8;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AMDPbHEKeyStatus._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AMDPbHEKeyStatus._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  uint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_249E85E10;
  uint64_t v5 = (void *)(v4 + v3);
  uint64_t v6 = v4 + v3 + v1[14];
  void *v5 = 1;
  *(void *)uint64_t v6 = "timestamp";
  *(void *)(v6 + 8) = 9;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "key_config";
  *((void *)v10 + 1) = 10;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "group";
  *(void *)(v11 + 8) = 5;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AMDPbPIRConfig._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AMDPbPIRConfig._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  uint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_249E85E20;
  uint64_t v5 = v4 + v3;
  uint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)uint64_t v6 = "encryption_parameters";
  *(void *)(v6 + 8) = 21;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)uint64_t v10 = "shard_configs";
  *(void *)(v10 + 8) = 13;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "keyword_pir_params";
  *((void *)v12 + 1) = 18;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "algorithm";
  *((void *)v14 + 1) = 9;
  v14[16] = 2;
  v9();
  uint64_t v15 = (void *)(v5 + 4 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 5;
  *(void *)uint64_t v16 = "batch_size";
  *((void *)v16 + 1) = 10;
  v16[16] = 2;
  v9();
  uint64_t v17 = (void *)(v5 + 5 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 6;
  *(void *)uint64_t v18 = "evaluation_key_config_hash";
  *((void *)v18 + 1) = 26;
  v18[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AMDPbPIRShardConfig._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AMDPbPIRShardConfig._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  uint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_249E85E10;
  uint64_t v5 = (void *)(v4 + v3);
  uint64_t v6 = v4 + v3 + v1[14];
  void *v5 = 1;
  *(void *)uint64_t v6 = "num_entries";
  *(void *)(v6 + 8) = 11;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "entry_size";
  *((void *)v10 + 1) = 10;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "dimensions";
  *(void *)(v11 + 8) = 10;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AMDPbPECConfig._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AMDPbPECConfig._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  uint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_249E85E20;
  uint64_t v5 = v4 + v3;
  uint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)uint64_t v6 = "encryption_parameters";
  *(void *)(v6 + 8) = 21;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)uint64_t v10 = "scaling_factor";
  *(void *)(v10 + 8) = 14;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "plaintext_packing";
  *((void *)v12 + 1) = 17;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "embedding_dimension";
  *((void *)v14 + 1) = 19;
  v14[16] = 2;
  v9();
  uint64_t v15 = (void *)(v5 + 4 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 5;
  *(void *)uint64_t v16 = "similarity_metric";
  *((void *)v16 + 1) = 17;
  v16[16] = 2;
  v9();
  uint64_t v17 = (void *)(v5 + 5 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 6;
  *(void *)uint64_t v18 = "evaluation_key_config_hash";
  *((void *)v18 + 1) = 26;
  v18[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AMDPbHEQuery._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AMDPbHEQuery._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  uint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_249E85E10;
  uint64_t v5 = (void *)(v4 + v3);
  uint64_t v6 = v4 + v3 + v1[14];
  void *v5 = 1;
  *(void *)uint64_t v6 = "use_case";
  *(void *)(v6 + 8) = 8;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "pir_query";
  *((void *)v10 + 1) = 9;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "pec_query";
  *(void *)(v11 + 8) = 9;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AMDPbEvaluationKey._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AMDPbEvaluationKey._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  uint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_249E85E00;
  uint64_t v5 = (void *)(v4 + v3);
  uint64_t v6 = v4 + v3 + v1[14];
  void *v5 = 1;
  *(void *)uint64_t v6 = "metadata";
  *(void *)(v6 + 8) = 8;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "evaluation_key";
  *((void *)v10 + 1) = 14;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AMDPbEvaluationKeyMetadata._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AMDPbEvaluationKeyMetadata._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  uint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_249E85E00;
  uint64_t v5 = (void *)(v4 + v3);
  uint64_t v6 = v4 + v3 + v1[14];
  void *v5 = 1;
  *(void *)uint64_t v6 = "timestamp";
  *(void *)(v6 + 8) = 9;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "identifier";
  *((void *)v10 + 1) = 10;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AMDPbPECShardReply._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AMDPbPECShardReply._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  uint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_249E85E10;
  uint64_t v5 = (void *)(v4 + v3);
  uint64_t v6 = v4 + v3 + v1[14];
  void *v5 = 1;
  *(void *)uint64_t v6 = "reply";
  *(void *)(v6 + 8) = 5;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "entry_ids";
  *((void *)v10 + 1) = 9;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "entry_metadatas";
  *(void *)(v11 + 8) = 15;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AMDPbHE_APICode._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AMDPbHE_APICode._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  uint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_249E85E30;
  uint64_t v5 = v4 + v3;
  uint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)uint64_t v6 = "KEY_UPLOAD";
  *(void *)(v6 + 8) = 10;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)uint64_t v10 = "USECASES_FETCH";
  *(void *)(v10 + 8) = 14;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "HE_QUERY";
  *((void *)v12 + 1) = 8;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 3;
  *(void *)uint64_t v14 = "HE_QUERIES";
  *((void *)v14 + 1) = 10;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void);
  unint64_t v8;
  void *v9;
  char *v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;
  uint64_t v20;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AMDPbHEResponse._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AMDPbHEResponse._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  uint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_249E8ABC0;
  uint64_t v4 = v20 + v3 + v1[14];
  *(void *)(v20 + v3) = 1;
  *(void *)uint64_t v4 = "api_code";
  *(void *)(v4 + 8) = 8;
  *(unsigned char *)(v4 + 16) = 2;
  uint64_t v5 = *MEMORY[0x263F50728];
  uint64_t v6 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v7 = *(void (**)(void))(*(void *)(v6 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v7)(v4, v5, v6);
  uint64_t v8 = v20 + v3 + v2 + v1[14];
  *(void *)(v20 + v3 + v2) = 2;
  *(void *)uint64_t v8 = "status";
  *(void *)(v8 + 8) = 6;
  *(unsigned char *)(v8 + 16) = 2;
  v7();
  uint64_t v9 = (void *)(v20 + v3 + 2 * v2);
  uint64_t v10 = (char *)v9 + v1[14];
  *uint64_t v9 = 6;
  *(void *)uint64_t v10 = "statuses";
  *((void *)v10 + 1) = 8;
  v10[16] = 2;
  v7();
  uint64_t v11 = (void *)(v20 + v3 + 3 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 7;
  *(void *)uint64_t v12 = "error_message";
  *((void *)v12 + 1) = 13;
  v12[16] = 2;
  v7();
  uint64_t v13 = (void *)(v20 + v3 + 4 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 3;
  *(void *)uint64_t v14 = "he_reply";
  *((void *)v14 + 1) = 8;
  v14[16] = 2;
  v7();
  uint64_t v15 = (void *)(v20 + v3 + 5 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 4;
  *(void *)uint64_t v16 = "he_replies";
  *((void *)v16 + 1) = 10;
  v16[16] = 2;
  v7();
  uint64_t v17 = (void *)(v20 + v3 + 6 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 5;
  *(void *)uint64_t v18 = "configs";
  *((void *)v18 + 1) = 7;
  v18[16] = 2;
  v7();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AMDPbHEResponse.PbStatus._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AMDPbHEResponse.PbStatus._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  uint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_249E85E20;
  uint64_t v5 = v4 + v3;
  uint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)uint64_t v6 = "SUCCESS";
  *(void *)(v6 + 8) = 7;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)uint64_t v10 = "INVALID_REQ";
  *(void *)(v10 + 8) = 11;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "SERVER_ERROR";
  *((void *)v12 + 1) = 12;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 3;
  *(void *)uint64_t v14 = "INVALID_KEY";
  *((void *)v14 + 1) = 11;
  v14[16] = 2;
  v9();
  uint64_t v15 = (void *)(v5 + 4 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 4;
  *(void *)uint64_t v16 = "VERSION_NOT_FOUND";
  *((void *)v16 + 1) = 17;
  v16[16] = 2;
  v9();
  uint64_t v17 = (void *)(v5 + 5 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 5;
  *(void *)uint64_t v18 = "PARTIAL_SUCCESS";
  *((void *)v18 + 1) = 15;
  v18[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspireApiEmpty._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspireApiEmpty._protobuf_nameMap);
  return _NameMap.init()();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspireApiEvaluationKeyMetadata._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspireApiEvaluationKeyMetadata._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  uint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_249E85E00;
  uint64_t v5 = (void *)(v4 + v3);
  uint64_t v6 = v4 + v3 + v1[14];
  void *v5 = 1;
  *(void *)uint64_t v6 = "timestamp";
  *(void *)(v6 + 8) = 9;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "identifier";
  *((void *)v10 + 1) = 10;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspireApiKeyStatus._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspireApiKeyStatus._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  uint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_249E85E00;
  uint64_t v5 = (void *)(v4 + v3);
  uint64_t v6 = v4 + v3 + v1[14];
  void *v5 = 1;
  *(void *)uint64_t v6 = "timestamp";
  *(void *)(v6 + 8) = 9;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "key_config";
  *((void *)v10 + 1) = 10;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspireApiEvaluationKey._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspireApiEvaluationKey._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  uint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_249E85E00;
  uint64_t v5 = (void *)(v4 + v3);
  uint64_t v6 = v4 + v3 + v1[14];
  void *v5 = 1;
  *(void *)uint64_t v6 = "metadata";
  *(void *)(v6 + 8) = 8;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "evaluation_key";
  *((void *)v10 + 1) = 14;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspireApiConfigRequest._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspireApiConfigRequest._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  uint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_249E85E00;
  uint64_t v5 = (void *)(v4 + v3);
  uint64_t v6 = v4 + v3 + v1[14];
  void *v5 = 1;
  *(void *)uint64_t v6 = "usecases";
  *(void *)(v6 + 8) = 8;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "existing_config_ids";
  *((void *)v10 + 1) = 19;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspireApiConfig._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspireApiConfig._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  uint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_249E85E30;
  uint64_t v5 = v4 + v3;
  uint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)uint64_t v6 = "pir_config";
  *(void *)(v6 + 8) = 10;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)uint64_t v10 = "pec_config";
  *(void *)(v10 + 8) = 10;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "config_id";
  *((void *)v12 + 1) = 9;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "reuse_existing_config";
  *((void *)v14 + 1) = 21;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspireApiConfigResponse._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspireApiConfigResponse._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  uint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_249E85E00;
  uint64_t v5 = (void *)(v4 + v3);
  uint64_t v6 = v4 + v3 + v1[14];
  void *v5 = 1;
  *(void *)uint64_t v6 = "configs";
  *(void *)(v6 + 8) = 7;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "key_info";
  *((void *)v10 + 1) = 8;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspireApiRequest._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspireApiRequest._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  uint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_249E85E30;
  uint64_t v5 = v4 + v3;
  uint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)uint64_t v6 = "usecase";
  *(void *)(v6 + 8) = 7;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)uint64_t v10 = "pir_request";
  *(void *)(v10 + 8) = 11;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "pec_request";
  *((void *)v12 + 1) = 11;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "oprf_request";
  *((void *)v14 + 1) = 12;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspireApiResponse._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspireApiResponse._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  uint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_249E85E10;
  uint64_t v5 = (void *)(v4 + v3);
  uint64_t v6 = v4 + v3 + v1[14];
  void *v5 = 1;
  *(void *)uint64_t v6 = "pir_response";
  *(void *)(v6 + 8) = 12;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "pec_response";
  *((void *)v10 + 1) = 12;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "oprf_response";
  *(void *)(v11 + 8) = 13;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void);
  unint64_t v8;
  void *v9;
  char *v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  uint64_t v18;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspireApiPIRShardConfig._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspireApiPIRShardConfig._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  uint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_249E85E20;
  uint64_t v4 = v18 + v3 + v1[14];
  *(void *)(v18 + v3) = 1;
  *(void *)uint64_t v4 = "num_entries";
  *(void *)(v4 + 8) = 11;
  *(unsigned char *)(v4 + 16) = 2;
  uint64_t v5 = *MEMORY[0x263F50728];
  uint64_t v6 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v7 = *(void (**)(void))(*(void *)(v6 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v7)(v4, v5, v6);
  uint64_t v8 = v18 + v3 + v2 + v1[14];
  *(void *)(v18 + v3 + v2) = 2;
  *(void *)uint64_t v8 = "entry_size";
  *(void *)(v8 + 8) = 10;
  *(unsigned char *)(v8 + 16) = 2;
  v7();
  uint64_t v9 = (void *)(v18 + v3 + 2 * v2);
  uint64_t v10 = (char *)v9 + v1[14];
  *uint64_t v9 = 3;
  *(void *)uint64_t v10 = "dimensions";
  *((void *)v10 + 1) = 10;
  v10[16] = 2;
  v7();
  uint64_t v11 = (void *)(v18 + v3 + 3 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 4;
  *(void *)uint64_t v12 = "shard_id";
  *((void *)v12 + 1) = 8;
  v12[16] = 2;
  v7();
  uint64_t v13 = (void *)(v18 + v3 + 4 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 5;
  *(void *)uint64_t v14 = "compress_vectorized_pir_response";
  *((void *)v14 + 1) = 32;
  v14[16] = 2;
  v7();
  uint64_t v15 = (void *)(v18 + v3 + 5 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 6;
  *(void *)uint64_t v16 = "vectorized_pir_internal_batching_size";
  *((void *)v16 + 1) = 37;
  v16[16] = 2;
  v7();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;
  void *v19;
  char *v20;
  void *v21;
  char *v22;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspireApiPIRConfig._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspireApiPIRConfig._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  uint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_249E8B080;
  uint64_t v5 = v4 + v3;
  uint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)uint64_t v6 = "encryption_parameters";
  *(void *)(v6 + 8) = 21;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)uint64_t v10 = "shard_configs";
  *(void *)(v10 + 8) = 13;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "keyword_pir_params";
  *((void *)v12 + 1) = 18;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "algorithm";
  *((void *)v14 + 1) = 9;
  v14[16] = 2;
  v9();
  uint64_t v15 = (void *)(v5 + 4 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 5;
  *(void *)uint64_t v16 = "batch_size";
  *((void *)v16 + 1) = 10;
  v16[16] = 2;
  v9();
  uint64_t v17 = (void *)(v5 + 5 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 6;
  *(void *)uint64_t v18 = "evaluation_key_config_hash";
  *((void *)v18 + 1) = 26;
  v18[16] = 2;
  v9();
  uint64_t v19 = (void *)(v5 + 6 * v2);
  uint64_t v20 = (char *)v19 + v1[14];
  void *v19 = 9;
  *(void *)uint64_t v20 = "batch_pir_params";
  *((void *)v20 + 1) = 16;
  v20[16] = 2;
  v9();
  uint64_t v21 = (void *)(v5 + 7 * v2);
  char v22 = (char *)v21 + v1[14];
  *uint64_t v21 = 10;
  *(void *)char v22 = "pir_shard_configs";
  *((void *)v22 + 1) = 17;
  v22[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspireApiPIRFixedShardConfig._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspireApiPIRFixedShardConfig._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  uint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_249E85E00;
  uint64_t v5 = (void *)(v4 + v3);
  uint64_t v6 = v4 + v3 + v1[14];
  void *v5 = 1;
  *(void *)uint64_t v6 = "shard_config";
  *(void *)(v6 + 8) = 12;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "shard_count";
  *((void *)v10 + 1) = 11;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspireApiPIRRequest._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspireApiPIRRequest._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  uint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_249E85E20;
  uint64_t v5 = v4 + v3;
  uint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)uint64_t v6 = "shard_index";
  *(void *)(v6 + 8) = 11;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)uint64_t v10 = "query";
  *(void *)(v10 + 8) = 5;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "evaluation_key_metadata";
  *((void *)v12 + 1) = 23;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "config_id";
  *((void *)v14 + 1) = 9;
  v14[16] = 2;
  v9();
  uint64_t v15 = (void *)(v5 + 4 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 5;
  *(void *)uint64_t v16 = "shard_id";
  *((void *)v16 + 1) = 8;
  v16[16] = 2;
  v9();
  uint64_t v17 = (void *)(v5 + 5 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 6;
  *(void *)uint64_t v18 = "evaluation_key";
  *((void *)v18 + 1) = 14;
  v18[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void);
  unint64_t v8;
  void *v9;
  char *v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;
  uint64_t v20;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspireApiPECConfig._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspireApiPECConfig._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  uint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_249E8ABC0;
  uint64_t v4 = v20 + v3 + v1[14];
  *(void *)(v20 + v3) = 1;
  *(void *)uint64_t v4 = "encryption_parameters";
  *(void *)(v4 + 8) = 21;
  *(unsigned char *)(v4 + 16) = 2;
  uint64_t v5 = *MEMORY[0x263F50728];
  uint64_t v6 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v7 = *(void (**)(void))(*(void *)(v6 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v7)(v4, v5, v6);
  uint64_t v8 = v20 + v3 + v2 + v1[14];
  *(void *)(v20 + v3 + v2) = 2;
  *(void *)uint64_t v8 = "scaling_factor";
  *(void *)(v8 + 8) = 14;
  *(unsigned char *)(v8 + 16) = 2;
  v7();
  uint64_t v9 = (void *)(v20 + v3 + 2 * v2);
  uint64_t v10 = (char *)v9 + v1[14];
  *uint64_t v9 = 3;
  *(void *)uint64_t v10 = "plaintext_packing";
  *((void *)v10 + 1) = 17;
  v10[16] = 2;
  v7();
  uint64_t v11 = (void *)(v20 + v3 + 3 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 4;
  *(void *)uint64_t v12 = "embedding_dimension";
  *((void *)v12 + 1) = 19;
  v12[16] = 2;
  v7();
  uint64_t v13 = (void *)(v20 + v3 + 4 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 5;
  *(void *)uint64_t v14 = "similarity_metric";
  *((void *)v14 + 1) = 17;
  v14[16] = 2;
  v7();
  uint64_t v15 = (void *)(v20 + v3 + 5 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 6;
  *(void *)uint64_t v16 = "evaluation_key_config_hash";
  *((void *)v16 + 1) = 26;
  v16[16] = 2;
  v7();
  uint64_t v17 = (void *)(v20 + v3 + 6 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 7;
  *(void *)uint64_t v18 = "extra_plaintext_moduli";
  *((void *)v18 + 1) = 22;
  v18[16] = 2;
  v7();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  uint64_t v15;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspireApiPECRequest._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspireApiPECRequest._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  uint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_249E8B090;
  uint64_t v5 = v4 + v3;
  uint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)uint64_t v6 = "shard_indices";
  *(void *)(v6 + 8) = 13;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)uint64_t v10 = "query";
  *(void *)(v10 + 8) = 5;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "evaluation_key_metadata";
  *((void *)v12 + 1) = 23;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "config_id";
  *((void *)v14 + 1) = 9;
  v14[16] = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 5;
  *(void *)uint64_t v15 = "evaluation_key";
  *(void *)(v15 + 8) = 14;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspireApiPECShardResponse._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspireApiPECShardResponse._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  uint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_249E85E10;
  uint64_t v5 = (void *)(v4 + v3);
  uint64_t v6 = v4 + v3 + v1[14];
  void *v5 = 1;
  *(void *)uint64_t v6 = "reply";
  *(void *)(v6 + 8) = 5;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "entry_ids";
  *((void *)v10 + 1) = 9;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "entry_metadatas";
  *(void *)(v11 + 8) = 15;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspireApiOPRFRequest._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspireApiOPRFRequest._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  uint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_249E85E00;
  uint64_t v5 = (void *)(v4 + v3);
  uint64_t v6 = v4 + v3 + v1[14];
  void *v5 = 1;
  *(void *)uint64_t v6 = "query_element";
  *(void *)(v6 + 8) = 13;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "config_id";
  *((void *)v10 + 1) = 9;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspireApiOPRFResponse._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspireApiOPRFResponse._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  uint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_249E85E00;
  uint64_t v5 = (void *)(v4 + v3);
  uint64_t v6 = v4 + v3 + v1[14];
  void *v5 = 1;
  *(void *)uint64_t v6 = "evaluated_element";
  *(void *)(v6 + 8) = 17;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "proof";
  *((void *)v10 + 1) = 5;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspirePirPirAlgorithm._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspirePirPirAlgorithm._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  uint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_249E85E10;
  uint64_t v5 = (void *)(v4 + v3);
  uint64_t v6 = v4 + v3 + v1[14];
  void *v5 = 0;
  *(void *)uint64_t v6 = "ACLS_PIR";
  *(void *)(v6 + 8) = 8;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 1;
  *(void *)uint64_t v10 = "MUL_PIR";
  *((void *)v10 + 1) = 7;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 2;
  *(void *)uint64_t v11 = "VECTORIZED_PIR";
  *(void *)(v11 + 8) = 14;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspirePirKeyCompressionStrategy._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspirePirKeyCompressionStrategy._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  uint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_249E85E10;
  uint64_t v5 = (void *)(v4 + v3);
  uint64_t v6 = v4 + v3 + v1[14];
  void *v5 = 0;
  *(void *)uint64_t v6 = "NO_COMPRESSION";
  *(void *)(v6 + 8) = 14;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 1;
  *(void *)uint64_t v10 = "MAXIMUM_COMPRESSION";
  *((void *)v10 + 1) = 19;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 2;
  *(void *)uint64_t v11 = "HYBRID_COMPRESSION";
  *(void *)(v11 + 8) = 18;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspirePirSymmetricPirConfigType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspirePirSymmetricPirConfigType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  uint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_249E85E00;
  uint64_t v5 = (void *)(v4 + v3);
  uint64_t v6 = v4 + v3 + v1[14];
  void *v5 = 0;
  *(void *)uint64_t v6 = "SYMMETRIC_PIR_CONFIG_TYPE_UNSPECIFIED";
  *(void *)(v6 + 8) = 37;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 1;
  *(void *)uint64_t v10 = "SYMMETRIC_PIR_CONFIG_TYPE_OPRF_P384_AES_GCM_192_96_128";
  *((void *)v10 + 1) = 54;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  void *v25;
  char *v26;
  void *v27;
  char *v28;
  uint64_t v30;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspirePirPirParameters._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspirePirPirParameters._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  uint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_249E8D870;
  uint64_t v4 = v30 + v3;
  uint64_t v5 = v30 + v3 + v1[14];
  *(void *)(v30 + v3) = 1;
  *(void *)uint64_t v5 = "encryption_parameters";
  *(void *)(v5 + 8) = 21;
  *(unsigned char *)(v5 + 16) = 2;
  uint64_t v6 = *MEMORY[0x263F50728];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  uint64_t v9 = v30 + v3 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)uint64_t v9 = "num_entries";
  *(void *)(v9 + 8) = 11;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  uint64_t v10 = (void *)(v30 + v3 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *uint64_t v10 = 3;
  *(void *)uint64_t v11 = "entry_size";
  *((void *)v11 + 1) = 10;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v30 + v3 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "dimensions";
  *((void *)v13 + 1) = 10;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v30 + v3 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  *uint64_t v14 = 5;
  *(void *)uint64_t v15 = "keyword_pir_params";
  *((void *)v15 + 1) = 18;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v30 + v3 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "algorithm";
  *((void *)v17 + 1) = 9;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v30 + v3 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "batch_size";
  *((void *)v19 + 1) = 10;
  v19[16] = 2;
  v8();
  uint64_t v20 = (void *)(v30 + v3 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  *uint64_t v20 = 8;
  *(void *)uint64_t v21 = "evaluation_key_config";
  *((void *)v21 + 1) = 21;
  v21[16] = 2;
  v8();
  char v22 = v30 + v3 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)char v22 = "key_compression_strategy";
  *(void *)(v22 + 8) = 24;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  unint64_t v23 = (void *)(v30 + v3 + 9 * v2);
  uint64_t v24 = (char *)v23 + v1[14];
  char *v23 = 10;
  *(void *)uint64_t v24 = "compress_vectorized_pir_response";
  *((void *)v24 + 1) = 32;
  v24[16] = 2;
  v8();
  uint64_t v25 = (void *)(v30 + v3 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  char *v25 = 11;
  *(void *)uint64_t v26 = "vectorized_pir_internal_batching_size";
  *((void *)v26 + 1) = 37;
  v26[16] = 2;
  v8();
  uint64_t v27 = (void *)(v30 + v3 + 11 * v2);
  BOOL v28 = (char *)v27 + v1[14];
  *uint64_t v27 = 12;
  *(void *)BOOL v28 = "batch_pir_params";
  *((void *)v28 + 1) = 16;
  v28[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void);
  unint64_t v8;
  void *v9;
  char *v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;
  uint64_t v20;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspirePirCuckooTableConfig._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspirePirCuckooTableConfig._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  uint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_249E8ABC0;
  uint64_t v4 = v20 + v3 + v1[14];
  *(void *)(v20 + v3) = 1;
  *(void *)uint64_t v4 = "expansion_factor";
  *(void *)(v4 + 8) = 16;
  *(unsigned char *)(v4 + 16) = 2;
  uint64_t v5 = *MEMORY[0x263F50728];
  uint64_t v6 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v7 = *(void (**)(void))(*(void *)(v6 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v7)(v4, v5, v6);
  uint64_t v8 = v20 + v3 + v2 + v1[14];
  *(void *)(v20 + v3 + v2) = 2;
  *(void *)uint64_t v8 = "num_hash_functions";
  *(void *)(v8 + 8) = 18;
  *(unsigned char *)(v8 + 16) = 2;
  v7();
  uint64_t v9 = (void *)(v20 + v3 + 2 * v2);
  uint64_t v10 = (char *)v9 + v1[14];
  *uint64_t v9 = 3;
  *(void *)uint64_t v10 = "max_num_evictions";
  *((void *)v10 + 1) = 17;
  v10[16] = 2;
  v7();
  uint64_t v11 = (void *)(v20 + v3 + 3 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 4;
  *(void *)uint64_t v12 = "target_load_factor";
  *((void *)v12 + 1) = 18;
  v12[16] = 2;
  v7();
  uint64_t v13 = (void *)(v20 + v3 + 4 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 5;
  *(void *)uint64_t v14 = "slots_per_bucket";
  *((void *)v14 + 1) = 16;
  v14[16] = 2;
  v7();
  uint64_t v15 = (void *)(v20 + v3 + 5 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 6;
  *(void *)uint64_t v16 = "allow_expansion";
  *((void *)v16 + 1) = 15;
  v16[16] = 2;
  v7();
  uint64_t v17 = (void *)(v20 + v3 + 6 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 7;
  *(void *)uint64_t v18 = "multiple_tables";
  *((void *)v18 + 1) = 15;
  v18[16] = 2;
  v7();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void);
  unint64_t v8;
  void *v9;
  char *v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;
  uint64_t v20;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspirePirBatchKeywordPirConfig._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspirePirBatchKeywordPirConfig._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  uint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_249E8ABC0;
  uint64_t v4 = v20 + v3 + v1[14];
  *(void *)(v20 + v3) = 1;
  *(void *)uint64_t v4 = "cuckoo_config";
  *(void *)(v4 + 8) = 13;
  *(unsigned char *)(v4 + 16) = 2;
  uint64_t v5 = *MEMORY[0x263F50728];
  uint64_t v6 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v7 = *(void (**)(void))(*(void *)(v6 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v7)(v4, v5, v6);
  uint64_t v8 = v20 + v3 + v2 + v1[14];
  *(void *)(v20 + v3 + v2) = 2;
  *(void *)uint64_t v8 = "batch_size";
  *(void *)(v8 + 8) = 10;
  *(unsigned char *)(v8 + 16) = 2;
  v7();
  uint64_t v9 = (void *)(v20 + v3 + 2 * v2);
  uint64_t v10 = (char *)v9 + v1[14];
  *uint64_t v9 = 3;
  *(void *)uint64_t v10 = "target_load_factor";
  *((void *)v10 + 1) = 18;
  v10[16] = 2;
  v7();
  uint64_t v11 = (void *)(v20 + v3 + 3 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 4;
  *(void *)uint64_t v12 = "num_hash_functions";
  *((void *)v12 + 1) = 18;
  v12[16] = 2;
  v7();
  uint64_t v13 = (void *)(v20 + v3 + 4 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 5;
  *(void *)uint64_t v14 = "num_pir_dimensions";
  *((void *)v14 + 1) = 18;
  v14[16] = 2;
  v7();
  uint64_t v15 = (void *)(v20 + v3 + 5 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 6;
  *(void *)uint64_t v16 = "max_num_shards";
  *((void *)v16 + 1) = 14;
  v16[16] = 2;
  v7();
  uint64_t v17 = (void *)(v20 + v3 + 6 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 7;
  *(void *)uint64_t v18 = "target_vpir_internal_batch_size";
  *((void *)v18 + 1) = 31;
  v18[16] = 2;
  v7();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspirePirBatchPirParameters._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspirePirBatchPirParameters._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  uint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_249E85E30;
  uint64_t v5 = v4 + v3;
  uint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)uint64_t v6 = "num_hash_functions";
  *(void *)(v6 + 8) = 18;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)uint64_t v10 = "num_hash_functions_per_bucket";
  *(void *)(v10 + 8) = 29;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "batch_pir_table_size";
  *((void *)v12 + 1) = 20;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "num_pir_db_per_shard";
  *((void *)v14 + 1) = 20;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  uint64_t v15;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspirePirKeywordPirParameters._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspirePirKeywordPirParameters._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  uint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_249E8B090;
  uint64_t v5 = v4 + v3;
  uint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)uint64_t v6 = "num_hash_functions";
  *(void *)(v6 + 8) = 18;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)uint64_t v10 = "multiple_tables";
  *(void *)(v10 + 8) = 15;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "symmetric_pir_client_config";
  *((void *)v12 + 1) = 27;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "sharding_function";
  *((void *)v14 + 1) = 17;
  v14[16] = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 5;
  *(void *)uint64_t v15 = "symmetric_pir_client_config";
  *(void *)(v15 + 8) = 27;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspirePirPIRShardingFunction._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspirePirPIRShardingFunction._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  uint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_249E85E00;
  uint64_t v5 = (void *)(v4 + v3);
  uint64_t v6 = v4 + v3 + v1[14];
  void *v5 = 1;
  *(void *)uint64_t v6 = "sha256";
  *(void *)(v6 + 8) = 6;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "double_mod";
  *((void *)v10 + 1) = 10;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspirePirPIRShardingFunctionSHA256._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspirePirPIRShardingFunctionSHA256._protobuf_nameMap);
  return _NameMap.init()();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspirePirEncryptedIndices._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspirePirEncryptedIndices._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  uint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_249E85E00;
  uint64_t v5 = (void *)(v4 + v3);
  uint64_t v6 = v4 + v3 + v1[14];
  void *v5 = 1;
  *(void *)uint64_t v6 = "ciphertexts";
  *(void *)(v6 + 8) = 11;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "num_pir_calls";
  *((void *)v10 + 1) = 13;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspirePirSerializedKeywordDbRow._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspirePirSerializedKeywordDbRow._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  uint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_249E85E10;
  uint64_t v5 = (void *)(v4 + v3);
  uint64_t v6 = v4 + v3 + v1[14];
  void *v5 = 1;
  *(void *)uint64_t v6 = "keyword";
  *(void *)(v6 + 8) = 7;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "value";
  *((void *)v10 + 1) = 5;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "shard_id";
  *(void *)(v11 + 8) = 8;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  void *v25;
  char *v26;
  void *v27;
  char *v28;
  void *v29;
  char *v30;
  void *v31;
  char *v32;
  void *v33;
  char *v34;
  void *v35;
  char *v36;
  uint64_t v37;
  uint64_t v39;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspirePirPirPreprocessDbArgs._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspirePirPirPreprocessDbArgs._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  uint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v39 = swift_allocObject();
  *(_OWORD *)(v39 + 16) = xmmword_249E8D880;
  uint64_t v4 = v39 + v3;
  uint64_t v5 = v39 + v3 + v1[14];
  *(void *)(v39 + v3) = 1;
  *(void *)uint64_t v5 = "input_database";
  *(void *)(v5 + 8) = 14;
  *(unsigned char *)(v5 + 16) = 2;
  uint64_t v6 = *MEMORY[0x263F50728];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  uint64_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)uint64_t v9 = "values_proto_path";
  *(void *)(v9 + 8) = 17;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  uint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *uint64_t v10 = 3;
  *(void *)uint64_t v11 = "algorithm";
  *((void *)v11 + 1) = 9;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "num_shards";
  *((void *)v13 + 1) = 10;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  *uint64_t v14 = 5;
  *(void *)uint64_t v15 = "num_entries_per_shard";
  *((void *)v15 + 1) = 21;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "shard_id";
  *((void *)v17 + 1) = 8;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "predefined_encryption_parameters";
  *((void *)v19 + 1) = 32;
  v19[16] = 2;
  v8();
  uint64_t v20 = (void *)(v4 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  *uint64_t v20 = 8;
  *(void *)uint64_t v21 = "he_scheme";
  *((void *)v21 + 1) = 9;
  v21[16] = 2;
  v8();
  char v22 = v4 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)char v22 = "output_database";
  *(void *)(v22 + 8) = 15;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  unint64_t v23 = (void *)(v4 + 9 * v2);
  uint64_t v24 = (char *)v23 + v1[14];
  char *v23 = 10;
  *(void *)uint64_t v24 = "output_pir_parameters";
  *((void *)v24 + 1) = 21;
  v24[16] = 2;
  v8();
  uint64_t v25 = (void *)(v4 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  char *v25 = 11;
  *(void *)uint64_t v26 = "output_key_config";
  *((void *)v26 + 1) = 17;
  v26[16] = 2;
  v8();
  uint64_t v27 = (void *)(v4 + 11 * v2);
  BOOL v28 = (char *)v27 + v1[14];
  *uint64_t v27 = 12;
  *(void *)BOOL v28 = "key_compression_strategy";
  *((void *)v28 + 1) = 24;
  v28[16] = 2;
  v8();
  uint64_t v29 = (void *)(v4 + 12 * v2);
  uint64_t v30 = (char *)v29 + v1[14];
  *uint64_t v29 = 13;
  *(void *)uint64_t v30 = "split_large_entry";
  *((void *)v30 + 1) = 17;
  v30[16] = 2;
  v8();
  uint64_t v31 = (void *)(v4 + 13 * v2);
  uint64_t v32 = (char *)v31 + v1[14];
  *uint64_t v31 = 14;
  *(void *)uint64_t v32 = "skip_large_entry_size";
  *((void *)v32 + 1) = 21;
  v32[16] = 2;
  v8();
  uint64_t v33 = (void *)(v4 + 14 * v2);
  uint64_t v34 = (char *)v33 + v1[14];
  uint64_t *v33 = 15;
  *(void *)uint64_t v34 = "uneven_dimensions";
  *((void *)v34 + 1) = 17;
  v34[16] = 2;
  v8();
  uint64_t v35 = (void *)(v4 + 15 * v2);
  int v36 = (char *)v35 + v1[14];
  *uint64_t v35 = 16;
  *(void *)int v36 = "no_validate";
  *((void *)v36 + 1) = 11;
  v36[16] = 2;
  v8();
  int v37 = v4 + 16 * v2 + v1[14];
  *(void *)(v4 + 16 * v2) = 17;
  *(void *)int v37 = "command";
  *(void *)(v37 + 8) = 7;
  *(unsigned char *)(v37 + 16) = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspirePirPirPreprocessDbCommand._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspirePirPirPreprocessDbCommand._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  uint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_249E85E00;
  uint64_t v5 = (void *)(v4 + v3);
  uint64_t v6 = v4 + v3 + v1[14];
  void *v5 = 1;
  *(void *)uint64_t v6 = "keyword";
  *(void *)(v6 + 8) = 7;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "index";
  *((void *)v10 + 1) = 5;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspirePirPirPreprocessDbCommand.Index._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspirePirPirPreprocessDbCommand.Index._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  uint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_249E85E00;
  uint64_t v5 = (void *)(v4 + v3);
  uint64_t v6 = v4 + v3 + v1[14];
  void *v5 = 1;
  *(void *)uint64_t v6 = "num_entries";
  *(void *)(v6 + 8) = 11;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "entry_size";
  *((void *)v10 + 1) = 10;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspirePirPirPreprocessDbCommand.Keyword._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspirePirPirPreprocessDbCommand.Keyword._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  uint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_249E85E30;
  uint64_t v5 = v4 + v3;
  uint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)uint64_t v6 = "keyword";
  *(void *)(v6 + 8) = 7;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)uint64_t v10 = "value";
  *(void *)(v10 + 8) = 5;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "cuckoo_config";
  *((void *)v12 + 1) = 13;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "batch_pir_config";
  *((void *)v14 + 1) = 16;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspirePirSymmetricPirClientConfig._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspirePirSymmetricPirClientConfig._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  uint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_249E85E00;
  uint64_t v5 = (void *)(v4 + v3);
  uint64_t v6 = v4 + v3 + v1[14];
  void *v5 = 1;
  *(void *)uint64_t v6 = "server_public_key";
  *(void *)(v6 + 8) = 17;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "config_type";
  *((void *)v10 + 1) = 11;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspireHeSecurityLevel._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspireHeSecurityLevel._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  uint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_249E85E00;
  uint64_t v5 = (void *)(v4 + v3);
  uint64_t v6 = v4 + v3 + v1[14];
  void *v5 = 0;
  *(void *)uint64_t v6 = "Unchecked";
  *(void *)(v6 + 8) = 9;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 1;
  *(void *)uint64_t v10 = "Quantum128";
  *((void *)v10 + 1) = 10;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspireHeErrorStdDev._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspireHeErrorStdDev._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_249E85E40;
  uint64_t v4 = v3 + v2 + v1[14];
  *(void *)(v3 + v2) = 0;
  *(void *)uint64_t v4 = "StdDev32";
  *(void *)(v4 + 8) = 8;
  *(unsigned char *)(v4 + 16) = 2;
  uint64_t v5 = *MEMORY[0x263F50718];
  uint64_t v6 = type metadata accessor for _NameMap.NameDescription();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 104))(v4, v5, v6);
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspireHeHeScheme._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspireHeHeScheme._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  uint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_249E85E10;
  uint64_t v5 = (void *)(v4 + v3);
  uint64_t v6 = v4 + v3 + v1[14];
  void *v5 = 0;
  *(void *)uint64_t v6 = "UNSPECIFIED";
  *(void *)(v6 + 8) = 11;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 1;
  *(void *)uint64_t v10 = "BFV";
  *((void *)v10 + 1) = 3;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 2;
  *(void *)uint64_t v11 = "BGV";
  *(void *)(v11 + 8) = 3;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspireHeSerializedDcrtPlaintext._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspireHeSerializedDcrtPlaintext._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_249E85E40;
  uint64_t v4 = v3 + v2 + v1[14];
  *(void *)(v3 + v2) = 1;
  *(void *)uint64_t v4 = "poly";
  *(void *)(v4 + 8) = 4;
  *(unsigned char *)(v4 + 16) = 2;
  uint64_t v5 = *MEMORY[0x263F50718];
  uint64_t v6 = type metadata accessor for _NameMap.NameDescription();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 104))(v4, v5, v6);
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspireHeSerializedCiphertextVec._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspireHeSerializedCiphertextVec._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_249E85E40;
  uint64_t v4 = v3 + v2 + v1[14];
  *(void *)(v3 + v2) = 1;
  *(void *)uint64_t v4 = "ciphertexts";
  *(void *)(v4 + 8) = 11;
  *(unsigned char *)(v4 + 16) = 2;
  uint64_t v5 = *MEMORY[0x263F50718];
  uint64_t v6 = type metadata accessor for _NameMap.NameDescription();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 104))(v4, v5, v6);
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspireHeSerializedCiphertext._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspireHeSerializedCiphertext._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  uint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_249E85E00;
  uint64_t v5 = (void *)(v4 + v3);
  uint64_t v6 = v4 + v3 + v1[14];
  void *v5 = 1;
  *(void *)uint64_t v6 = "seeded";
  *(void *)(v6 + 8) = 6;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "full";
  *((void *)v10 + 1) = 4;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspireHeSerializedSeededCiphertext._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspireHeSerializedSeededCiphertext._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  uint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_249E85E00;
  uint64_t v5 = (void *)(v4 + v3);
  uint64_t v6 = v4 + v3 + v1[14];
  void *v5 = 1;
  *(void *)uint64_t v6 = "poly0";
  *(void *)(v6 + 8) = 5;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "seed";
  *((void *)v10 + 1) = 4;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspireHeSerializedFullCiphertext._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspireHeSerializedFullCiphertext._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  uint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_249E85E10;
  uint64_t v5 = (void *)(v4 + v3);
  uint64_t v6 = v4 + v3 + v1[14];
  void *v5 = 1;
  *(void *)uint64_t v6 = "polys";
  *(void *)(v6 + 8) = 5;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "skip_lsbs";
  *((void *)v10 + 1) = 9;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "correction_factor";
  *(void *)(v11 + 8) = 17;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspireHeSerializedKeySwitchKey._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspireHeSerializedKeySwitchKey._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_249E85E40;
  uint64_t v4 = v3 + v2 + v1[14];
  *(void *)(v3 + v2) = 1;
  *(void *)uint64_t v4 = "key_switch_key";
  *(void *)(v4 + 8) = 14;
  *(unsigned char *)(v4 + 16) = 2;
  uint64_t v5 = *MEMORY[0x263F50728];
  uint64_t v6 = type metadata accessor for _NameMap.NameDescription();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 104))(v4, v5, v6);
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspireHeSerializedGaloisKey._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspireHeSerializedGaloisKey._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_249E85E40;
  uint64_t v4 = v3 + v2 + v1[14];
  *(void *)(v3 + v2) = 1;
  *(void *)uint64_t v4 = "key_switch_keys";
  *(void *)(v4 + 8) = 15;
  *(unsigned char *)(v4 + 16) = 2;
  uint64_t v5 = *MEMORY[0x263F50728];
  uint64_t v6 = type metadata accessor for _NameMap.NameDescription();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 104))(v4, v5, v6);
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspireHeSerializedRelinKey._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspireHeSerializedRelinKey._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_249E85E40;
  uint64_t v4 = v3 + v2 + v1[14];
  *(void *)(v3 + v2) = 1;
  *(void *)uint64_t v4 = "relin_key";
  *(void *)(v4 + 8) = 9;
  *(unsigned char *)(v4 + 16) = 2;
  uint64_t v5 = *MEMORY[0x263F50728];
  uint64_t v6 = type metadata accessor for _NameMap.NameDescription();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 104))(v4, v5, v6);
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspireHeSerializedSecretKey._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspireHeSerializedSecretKey._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_249E85E40;
  uint64_t v4 = v3 + v2 + v1[14];
  *(void *)(v3 + v2) = 1;
  *(void *)uint64_t v4 = "polys";
  *(void *)(v4 + 8) = 5;
  *(unsigned char *)(v4 + 16) = 2;
  uint64_t v5 = *MEMORY[0x263F50718];
  uint64_t v6 = type metadata accessor for _NameMap.NameDescription();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 104))(v4, v5, v6);
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspireHeSerializedEvaluationKey._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspireHeSerializedEvaluationKey._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  uint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_249E85E00;
  uint64_t v5 = (void *)(v4 + v3);
  uint64_t v6 = v4 + v3 + v1[14];
  void *v5 = 1;
  *(void *)uint64_t v6 = "galois_key";
  *(void *)(v6 + 8) = 10;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "relin_key";
  *((void *)v10 + 1) = 9;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspireHeEvaluationKeyConfig._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspireHeEvaluationKeyConfig._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  uint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_249E85E10;
  uint64_t v5 = (void *)(v4 + v3);
  uint64_t v6 = v4 + v3 + v1[14];
  void *v5 = 1;
  *(void *)uint64_t v6 = "encryption_parameters";
  *(void *)(v6 + 8) = 21;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "galois_elements";
  *((void *)v10 + 1) = 15;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "has_relin_key";
  *(void *)(v11 + 8) = 13;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void);
  unint64_t v8;
  void *v9;
  char *v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  uint64_t v18;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspireHeEncryptionParameters._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspireHeEncryptionParameters._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  uint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_249E85E20;
  uint64_t v4 = v18 + v3 + v1[14];
  *(void *)(v18 + v3) = 1;
  *(void *)uint64_t v4 = "polynomial_degree";
  *(void *)(v4 + 8) = 17;
  *(unsigned char *)(v4 + 16) = 2;
  uint64_t v5 = *MEMORY[0x263F50728];
  uint64_t v6 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v7 = *(void (**)(void))(*(void *)(v6 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v7)(v4, v5, v6);
  uint64_t v8 = v18 + v3 + v2 + v1[14];
  *(void *)(v18 + v3 + v2) = 2;
  *(void *)uint64_t v8 = "plaintext_modulus";
  *(void *)(v8 + 8) = 17;
  *(unsigned char *)(v8 + 16) = 2;
  v7();
  uint64_t v9 = (void *)(v18 + v3 + 2 * v2);
  uint64_t v10 = (char *)v9 + v1[14];
  *uint64_t v9 = 3;
  *(void *)uint64_t v10 = "coefficient_moduli";
  *((void *)v10 + 1) = 18;
  v10[16] = 2;
  v7();
  uint64_t v11 = (void *)(v18 + v3 + 3 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 4;
  *(void *)uint64_t v12 = "error_std_dev";
  *((void *)v12 + 1) = 13;
  v12[16] = 2;
  v7();
  uint64_t v13 = (void *)(v18 + v3 + 4 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 5;
  *(void *)uint64_t v14 = "security_level";
  *((void *)v14 + 1) = 14;
  v14[16] = 2;
  v7();
  uint64_t v15 = (void *)(v18 + v3 + 5 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 6;
  *(void *)uint64_t v16 = "he_scheme";
  *((void *)v16 + 1) = 9;
  v16[16] = 2;
  v7();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspireSimilarityPlaintextPacking._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspireSimilarityPlaintextPacking._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  uint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_249E85E10;
  uint64_t v5 = (void *)(v4 + v3);
  uint64_t v6 = v4 + v3 + v1[14];
  void *v5 = 1;
  *(void *)uint64_t v6 = "dense_row";
  *(void *)(v6 + 8) = 9;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "diagonal";
  *((void *)v10 + 1) = 8;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "dense_column";
  *(void *)(v11 + 8) = 12;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspireSimilaritySerializedCiphertextMatrix._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspireSimilaritySerializedCiphertextMatrix._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  uint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_249E85E30;
  uint64_t v5 = v4 + v3;
  uint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)uint64_t v6 = "nrows";
  *(void *)(v6 + 8) = 5;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)uint64_t v10 = "ncols";
  *(void *)(v10 + 8) = 5;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "ciphertexts";
  *((void *)v12 + 1) = 11;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "packing";
  *((void *)v14 + 1) = 7;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspireSimilaritySerializedDcrtPlaintextMatrix._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspireSimilaritySerializedDcrtPlaintextMatrix._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  uint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_249E85E30;
  uint64_t v5 = v4 + v3;
  uint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)uint64_t v6 = "num_rows";
  *(void *)(v6 + 8) = 8;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)uint64_t v10 = "num_cols";
  *(void *)(v10 + 8) = 8;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "plaintexts";
  *((void *)v12 + 1) = 10;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "packing";
  *((void *)v14 + 1) = 7;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;
  void *v19;
  char *v20;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspireSimilaritySimilarityClientConfig._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspireSimilaritySimilarityClientConfig._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  uint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_249E8ABC0;
  uint64_t v5 = v4 + v3;
  uint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)uint64_t v6 = "encryption_parameters";
  *(void *)(v6 + 8) = 21;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)uint64_t v10 = "scaling_factor";
  *(void *)(v10 + 8) = 14;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "plaintext_packing";
  *((void *)v12 + 1) = 17;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "embedding_dimension";
  *((void *)v14 + 1) = 19;
  v14[16] = 2;
  v9();
  uint64_t v15 = (void *)(v5 + 4 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 5;
  *(void *)uint64_t v16 = "galois_elts";
  *((void *)v16 + 1) = 11;
  v16[16] = 2;
  v9();
  uint64_t v17 = (void *)(v5 + 5 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 6;
  *(void *)uint64_t v18 = "similarity_metric";
  *((void *)v18 + 1) = 17;
  v18[16] = 2;
  v9();
  uint64_t v19 = (void *)(v5 + 6 * v2);
  uint64_t v20 = (char *)v19 + v1[14];
  void *v19 = 7;
  *(void *)uint64_t v20 = "extra_plaintext_moduli";
  *((void *)v20 + 1) = 22;
  v20[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspireSimilaritySimilarityServerConfig._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspireSimilaritySimilarityServerConfig._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  uint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_249E85E30;
  uint64_t v5 = v4 + v3;
  uint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)uint64_t v6 = "client_config";
  *(void *)(v6 + 8) = 13;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)uint64_t v10 = "db_packing";
  *(void *)(v10 + 8) = 10;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "parallel";
  *((void *)v12 + 1) = 8;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "baby_step";
  *((void *)v14 + 1) = 9;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspireSimilaritySerializedProcessedSimilarityDb._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspireSimilaritySerializedProcessedSimilarityDb._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  uint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_249E85E30;
  uint64_t v5 = v4 + v3;
  uint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)uint64_t v6 = "plaintext_matrices";
  *(void *)(v6 + 8) = 18;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)uint64_t v10 = "entry_ids";
  *(void *)(v10 + 8) = 9;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "entry_metadatas";
  *((void *)v12 + 1) = 15;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "server_config";
  *((void *)v14 + 1) = 13;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspireSimilaritySimilarityDbRow._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspireSimilaritySimilarityDbRow._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  uint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_249E85E10;
  uint64_t v5 = (void *)(v4 + v3);
  uint64_t v6 = v4 + v3 + v1[14];
  void *v5 = 1;
  *(void *)uint64_t v6 = "entry_id";
  *(void *)(v6 + 8) = 8;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "entry_metadata";
  *((void *)v10 + 1) = 14;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "embedding";
  *(void *)(v11 + 8) = 9;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  void *v25;
  char *v26;
  void *v27;
  char *v28;
  void *v29;
  char *v30;
  uint64_t v32;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspireSimilarityPecPreprocessDbArgs._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspireSimilarityPecPreprocessDbArgs._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  uint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v32 = swift_allocObject();
  *(_OWORD *)(v32 + 16) = xmmword_249E91640;
  uint64_t v4 = v32 + v3;
  uint64_t v5 = v32 + v3 + v1[14];
  *(void *)(v32 + v3) = 1;
  *(void *)uint64_t v5 = "input_database";
  *(void *)(v5 + 8) = 14;
  *(unsigned char *)(v5 + 16) = 2;
  uint64_t v6 = *MEMORY[0x263F50728];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  uint64_t v9 = v32 + v3 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)uint64_t v9 = "output_database";
  *(void *)(v9 + 8) = 15;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  uint64_t v10 = (void *)(v32 + v3 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *uint64_t v10 = 3;
  *(void *)uint64_t v11 = "output_server_config";
  *((void *)v11 + 1) = 20;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v32 + v3 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "input_server_config";
  *((void *)v13 + 1) = 19;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v32 + v3 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  *uint64_t v14 = 5;
  *(void *)uint64_t v15 = "entry_id";
  *((void *)v15 + 1) = 8;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v32 + v3 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "entry_metadata_id";
  *((void *)v17 + 1) = 17;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v32 + v3 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "embedding_id";
  *((void *)v19 + 1) = 12;
  v19[16] = 2;
  v8();
  uint64_t v20 = (void *)(v32 + v3 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  *uint64_t v20 = 8;
  *(void *)uint64_t v21 = "shard_id";
  *((void *)v21 + 1) = 8;
  v21[16] = 2;
  v8();
  char v22 = v32 + v3 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)char v22 = "predefined_encryption_parameters";
  *(void *)(v22 + 8) = 32;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  unint64_t v23 = (void *)(v32 + v3 + 9 * v2);
  uint64_t v24 = (char *)v23 + v1[14];
  char *v23 = 10;
  *(void *)uint64_t v24 = "he_scheme";
  *((void *)v24 + 1) = 9;
  v24[16] = 2;
  v8();
  uint64_t v25 = (void *)(v32 + v3 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  char *v25 = 11;
  *(void *)uint64_t v26 = "extra_plaintext_moduli";
  *((void *)v26 + 1) = 22;
  v26[16] = 2;
  v8();
  uint64_t v27 = (void *)(v32 + v3 + 11 * v2);
  BOOL v28 = (char *)v27 + v1[14];
  *uint64_t v27 = 12;
  *(void *)BOOL v28 = "baby_step";
  *((void *)v28 + 1) = 9;
  v28[16] = 2;
  v8();
  uint64_t v29 = (void *)(v32 + v3 + 12 * v2);
  uint64_t v30 = (char *)v29 + v1[14];
  *uint64_t v29 = 13;
  *(void *)uint64_t v30 = "parallel";
  *((void *)v30 + 1) = 8;
  v30[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t AMDPbFetchHEConfigs._protobuf_nameMap.unsafeMutableAddressor()
{
  return AMDPbFetchHEConfigs._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbFetchHEConfigs._protobuf_nameMap);
}

uint64_t static AMDPbFetchHEConfigs._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbFetchHEConfigs._protobuf_nameMap, a1);
}

uint64_t AMDPbFetchHEConfigs.decodeMessage<A>(decoder:)()
{
  do
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  while (!v0 && (v2 & 1) == 0);
  return result;
}

uint64_t AMDPbFetchHEConfigs.traverse<A>(visitor:)()
{
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t static AMDPbFetchHEConfigs.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v14 - v9;
  uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v11((char *)&v14 - v9, a1, v4);
  v11(v8, a2, v4);
  lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
  LOBYTE(a2) = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v12 = *(void (**)(char *, uint64_t))(v5 + 8);
  v12(v8, v4);
  v12(v10, v4);
  return a2 & 1;
}

Swift::Int AMDPbFetchHEConfigs.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter((void (*)(void))type metadata accessor for AMDPbFetchHEConfigs, &lazy protocol witness table cache variable for type AMDPbFetchHEConfigs and conformance AMDPbFetchHEConfigs, (void (*)(uint64_t))type metadata accessor for AMDPbFetchHEConfigs);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AMDPbFetchHEConfigs()
{
  return 0xD00000000000001ALL;
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance AMDPbFetchHEConfigs())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AMDPbFetchHEConfigs()
{
  return AMDPbFetchHEConfigs.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AMDPbFetchHEConfigs()
{
  return AMDPbFetchHEConfigs.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.hash(into:) in conformance AMDPbFetchHEConfigs()
{
  return MEMORY[0x270F44CD8]();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AMDPbFetchHEConfigs(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbFetchHEConfigs and conformance AMDPbFetchHEConfigs, (void (*)(uint64_t))type metadata accessor for AMDPbFetchHEConfigs);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for _MessageImplementationBase._protobuf_generated_isEqualTo(other:) in conformance AMDPbFetchHEConfigs()
{
  return MEMORY[0x270F44AD8]();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbFetchHEConfigs._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AMDPbFetchHEConfigs(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbFetchHEConfigs and conformance AMDPbFetchHEConfigs, (void (*)(uint64_t))type metadata accessor for AMDPbFetchHEConfigs);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AMDPbFetchHEConfigs(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbFetchHEConfigs and conformance AMDPbFetchHEConfigs, (void (*)(uint64_t))type metadata accessor for AMDPbFetchHEConfigs);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AMDPbFetchHEConfigs(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v14 - v9;
  uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v11((char *)&v14 - v9, a1, v4);
  v11(v8, a2, v4);
  lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
  LOBYTE(a2) = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v12 = *(void (**)(char *, uint64_t))(v5 + 8);
  v12(v8, v4);
  v12(v10, v4);
  return a2 & 1;
}

void *AMDPbHEConfigsReply.protoMessageName.unsafeMutableAddressor()
{
  return &static AMDPbHEConfigsReply.protoMessageName;
}

unint64_t static AMDPbHEConfigsReply.protoMessageName.getter()
{
  return 0xD00000000000001ALL;
}

uint64_t AMDPbHEConfigsReply._protobuf_nameMap.unsafeMutableAddressor()
{
  return AMDPbFetchHEConfigs._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbHEConfigsReply._protobuf_nameMap);
}

uint64_t static AMDPbHEConfigsReply._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbHEConfigsReply._protobuf_nameMap, a1);
}

uint64_t AMDPbHEConfigsReply.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        type metadata accessor for AMDPbHEKeyStatus(0);
        lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbHEKeyStatus and conformance AMDPbHEKeyStatus, (void (*)(uint64_t))type metadata accessor for AMDPbHEKeyStatus);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      else if (result == 1)
      {
        closure #1 in AMDPbHEConfigsReply.decodeMessage<A>(decoder:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #1 in AMDPbHEConfigsReply.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeMapField<A, B>(fieldType:value:)();
}

uint64_t AMDPbHEConfigsReply.traverse<A>(visitor:)()
{
  uint64_t v2 = v0;
  if (!*(void *)(*(void *)v0 + 16)
    || (type metadata accessor for ProtobufString(),
        type metadata accessor for AMDPbHEConfig(0),
        lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbHEConfig and conformance AMDPbHEConfig, (void (*)(uint64_t))type metadata accessor for AMDPbHEConfig), lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbHEConfig and conformance AMDPbHEConfig, (void (*)(uint64_t))type metadata accessor for AMDPbHEConfig), v2 = v0, uint64_t result = dispatch thunk of Visitor.visitMapField<A, B>(fieldType:value:fieldNumber:)(), !v1))
  {
    if (!*(void *)(*(void *)(v2 + 8) + 16)
      || (type metadata accessor for AMDPbHEKeyStatus(0),
          lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbHEKeyStatus and conformance AMDPbHEKeyStatus, (void (*)(uint64_t))type metadata accessor for AMDPbHEKeyStatus), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
    {
      type metadata accessor for AMDPbHEConfigsReply(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

Swift::Int AMDPbHEConfigsReply.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter((void (*)(void))type metadata accessor for AMDPbHEConfigsReply, &lazy protocol witness table cache variable for type AMDPbHEConfigsReply and conformance AMDPbHEConfigsReply, (void (*)(uint64_t))type metadata accessor for AMDPbHEConfigsReply);
}

uint64_t protocol witness for Message.init() in conformance AMDPbHEConfigsReply@<X0>(unint64_t *a1@<X8>)
{
  unint64_t v2 = MEMORY[0x263F8EE78];
  *a1 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78], &demangling cache variable for type metadata for (String, AMDPbHEConfig), &demangling cache variable for type metadata for _DictionaryStorage<String, AMDPbHEConfig>, type metadata accessor for AMDPbHEConfig, type metadata accessor for AMDPbHEConfig);
  a1[1] = v2;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AMDPbHEConfigsReply()
{
  return 0xD00000000000001ALL;
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance AMDPbHEConfigsReply())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AMDPbHEConfigsReply()
{
  return AMDPbHEConfigsReply.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AMDPbHEConfigsReply()
{
  return AMDPbHEConfigsReply.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AMDPbHEConfigsReply(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbHEConfigsReply and conformance AMDPbHEConfigsReply, (void (*)(uint64_t))type metadata accessor for AMDPbHEConfigsReply);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbHEConfigsReply@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbHEConfigsReply._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AMDPbHEConfigsReply(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbHEConfigsReply and conformance AMDPbHEConfigsReply, (void (*)(uint64_t))type metadata accessor for AMDPbHEConfigsReply);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AMDPbHEConfigsReply(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbHEConfigsReply and conformance AMDPbHEConfigsReply, (void (*)(uint64_t))type metadata accessor for AMDPbHEConfigsReply);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *AMDPbHEConfig.protoMessageName.unsafeMutableAddressor()
{
  return &static AMDPbHEConfig.protoMessageName;
}

unint64_t static AMDPbHEConfig.protoMessageName.getter()
{
  return 0xD000000000000014;
}

uint64_t one-time initialization function for _protobuf_nameMap(uint64_t a1)
{
  return one-time initialization function for _protobuf_nameMap(a1, static AMDPbHEConfig._protobuf_nameMap, (uint64_t)"pir_config", 10, (uint64_t)"pec_config");
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static AMDPbHEQueries._protobuf_nameMap, (uint64_t)"queries", 7, MEMORY[0x263F50718]);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static AMDPbHEReplies._protobuf_nameMap, (uint64_t)"replies", 7, MEMORY[0x263F50718]);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static AMDPbHEReply._protobuf_nameMap, (uint64_t)"pir_reply", 9, (uint64_t)"pec_reply");
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static AMDPbEvaluationKeys._protobuf_nameMap, (uint64_t)"keys", 4, MEMORY[0x263F50718]);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static AMDPbPIRQuery._protobuf_nameMap, (uint64_t)"shard_index", 11);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static AMDPbPIRReply._protobuf_nameMap, (uint64_t)"replies", 7, MEMORY[0x263F50718]);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static AMDPbPECQuery._protobuf_nameMap, (uint64_t)"shard_indices", 13);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static AMDPbPECReply._protobuf_nameMap, (uint64_t)"shard_replies", 13, MEMORY[0x263F50728]);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static AspireApiEvaluationKeys._protobuf_nameMap, (uint64_t)"keys", 4, MEMORY[0x263F50718]);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static AspireApiRequests._protobuf_nameMap, (uint64_t)"requests", 8, MEMORY[0x263F50718]);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static AspireApiResponses._protobuf_nameMap, (uint64_t)"responses", 9, MEMORY[0x263F50718]);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static AspireApiPIRShardConfigs._protobuf_nameMap, (uint64_t)"repeated_shard_config", 21, MEMORY[0x263F50728]);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static AspireApiPIRResponse._protobuf_nameMap, (uint64_t)"replies", 7, MEMORY[0x263F50718]);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static AspireApiPECResponse._protobuf_nameMap, (uint64_t)"shard_responses", 15, MEMORY[0x263F50728]);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static AspirePirPIRShardingFunctionDoubleMod._protobuf_nameMap, (uint64_t)"other_shard_count", 17, MEMORY[0x263F50728]);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static AspirePirSerializedKeywordDb._protobuf_nameMap, (uint64_t)"rows", 4, MEMORY[0x263F50718]);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static AspireSimilaritySimilarityMetric._protobuf_nameMap, 0, (uint64_t)"CosineSimilarity", 16);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static AspireSimilarityPlaintextPackingDenseRow._protobuf_nameMap);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static AspireSimilarityPlaintextPackingDiagonal._protobuf_nameMap);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static AspireSimilarityPlaintextPackingDenseColumn._protobuf_nameMap);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static AspireSimilaritySimilarityDb._protobuf_nameMap, 1, (uint64_t)"rows", 4);
}

uint64_t AMDPbHEConfig._protobuf_nameMap.unsafeMutableAddressor()
{
  return AMDPbFetchHEConfigs._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbHEConfig._protobuf_nameMap);
}

uint64_t static AMDPbHEConfig._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbHEConfig._protobuf_nameMap, a1);
}

uint64_t AMDPbHEConfig.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AMDPbHEConfig.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in AMDPbHEConfig.decodeMessage<A>(decoder:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #2 in AMDPbHEConfig.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in AMDPbHEConfig.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v49 = a4;
  uint64_t v47 = a2;
  uint64_t v48 = a3;
  uint64_t v5 = type metadata accessor for AMDPbPIRConfig(0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v41 = (uint64_t)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v44 = (char *)&v37 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for AMDPbHEConfig.OneOf_Config(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v19 = (char *)&v37 - v18;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbPIRConfig?);
  uint64_t v21 = MEMORY[0x270FA5388](v20 - 8);
  uint64_t v42 = (uint64_t)&v37 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  uint64_t v24 = (char *)&v37 - v23;
  uint64_t v43 = v6;
  uint64_t v25 = *(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56);
  uint64_t v46 = v5;
  uint64_t v26 = v5;
  uint64_t v27 = v25;
  v25((char *)&v37 - v23, 1, 1, v26);
  uint64_t v40 = a1;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v12, &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
  uint64_t v39 = v14;
  int v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if (v28 == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v12, &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
    uint64_t v29 = v13;
    uint64_t v30 = v46;
  }
  else
  {
    uint64_t v38 = v27;
    uint64_t v31 = (uint64_t)v44;
    outlined init with take of AMDPbPIRConfig((uint64_t)v12, (uint64_t)v19, type metadata accessor for AMDPbHEConfig.OneOf_Config);
    outlined init with take of AMDPbPIRConfig((uint64_t)v19, (uint64_t)v17, type metadata accessor for AMDPbHEConfig.OneOf_Config);
    uint64_t v29 = v13;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v17, type metadata accessor for AMDPbHEConfig.OneOf_Config);
      uint64_t v30 = v46;
    }
    else
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AMDPbPIRConfig?);
      outlined init with take of AMDPbPIRConfig((uint64_t)v17, v31, type metadata accessor for AMDPbPIRConfig);
      outlined init with take of AMDPbPIRConfig(v31, (uint64_t)v24, type metadata accessor for AMDPbPIRConfig);
      uint64_t v30 = v46;
      v38(v24, 0, 1, v46);
    }
  }
  uint64_t v32 = v45;
  lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbPIRConfig and conformance AMDPbPIRConfig, (void (*)(uint64_t))type metadata accessor for AMDPbPIRConfig);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v32) {
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AMDPbPIRConfig?);
  }
  uint64_t v34 = v42;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, v42, &demangling cache variable for type metadata for AMDPbPIRConfig?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v34, 1, v30) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AMDPbPIRConfig?);
    return outlined destroy of AMDPbHEConfig.OneOf_Config?(v34, &demangling cache variable for type metadata for AMDPbPIRConfig?);
  }
  else
  {
    uint64_t v35 = v41;
    outlined init with take of AMDPbPIRConfig(v34, v41, type metadata accessor for AMDPbPIRConfig);
    if (v28 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AMDPbPIRConfig?);
    uint64_t v36 = v40;
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v40, &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
    outlined init with take of AMDPbPIRConfig(v35, v36, type metadata accessor for AMDPbPIRConfig);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v29);
  }
}

uint64_t closure #2 in AMDPbHEConfig.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v49 = a4;
  uint64_t v47 = a2;
  uint64_t v48 = a3;
  uint64_t v5 = type metadata accessor for AMDPbPECConfig(0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v41 = (uint64_t)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v44 = (char *)&v37 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for AMDPbHEConfig.OneOf_Config(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v19 = (char *)&v37 - v18;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbPECConfig?);
  uint64_t v21 = MEMORY[0x270FA5388](v20 - 8);
  uint64_t v42 = (uint64_t)&v37 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  uint64_t v24 = (char *)&v37 - v23;
  uint64_t v43 = v6;
  uint64_t v25 = *(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56);
  uint64_t v46 = v5;
  uint64_t v26 = v5;
  uint64_t v27 = v25;
  v25((char *)&v37 - v23, 1, 1, v26);
  uint64_t v40 = a1;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v12, &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
  uint64_t v39 = v14;
  int v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if (v28 == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v12, &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
    uint64_t v29 = v13;
  }
  else
  {
    uint64_t v38 = v27;
    uint64_t v30 = (uint64_t)v44;
    outlined init with take of AMDPbPIRConfig((uint64_t)v12, (uint64_t)v19, type metadata accessor for AMDPbHEConfig.OneOf_Config);
    outlined init with take of AMDPbPIRConfig((uint64_t)v19, (uint64_t)v17, type metadata accessor for AMDPbHEConfig.OneOf_Config);
    uint64_t v29 = v13;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AMDPbPECConfig?);
      outlined init with take of AMDPbPIRConfig((uint64_t)v17, v30, type metadata accessor for AMDPbPECConfig);
      outlined init with take of AMDPbPIRConfig(v30, (uint64_t)v24, type metadata accessor for AMDPbPECConfig);
      uint64_t v31 = v46;
      v38(v24, 0, 1, v46);
      goto LABEL_7;
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v17, type metadata accessor for AMDPbHEConfig.OneOf_Config);
  }
  uint64_t v31 = v46;
LABEL_7:
  uint64_t v32 = v45;
  lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbPECConfig and conformance AMDPbPECConfig, (void (*)(uint64_t))type metadata accessor for AMDPbPECConfig);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v32) {
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AMDPbPECConfig?);
  }
  uint64_t v34 = v42;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, v42, &demangling cache variable for type metadata for AMDPbPECConfig?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v34, 1, v31) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AMDPbPECConfig?);
    return outlined destroy of AMDPbHEConfig.OneOf_Config?(v34, &demangling cache variable for type metadata for AMDPbPECConfig?);
  }
  else
  {
    uint64_t v35 = v41;
    outlined init with take of AMDPbPIRConfig(v34, v41, type metadata accessor for AMDPbPECConfig);
    if (v28 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AMDPbPECConfig?);
    uint64_t v36 = v40;
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v40, &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
    outlined init with take of AMDPbPIRConfig(v35, v36, type metadata accessor for AMDPbPECConfig);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v29);
  }
}

uint64_t AMDPbHEConfig.traverse<A>(visitor:)()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v0, (uint64_t)v4, &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
  uint64_t v5 = type metadata accessor for AMDPbHEConfig.OneOf_Config(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5) == 1) {
    goto LABEL_6;
  }
  if (swift_getEnumCaseMultiPayload() == 1) {
    closure #2 in AMDPbHEConfig.traverse<A>(visitor:)(v0);
  }
  else {
    closure #1 in AMDPbHEConfig.traverse<A>(visitor:)(v0);
  }
  uint64_t result = outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v4, type metadata accessor for AMDPbHEConfig.OneOf_Config);
  if (!v1)
  {
LABEL_6:
    type metadata accessor for AMDPbHEConfig(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in AMDPbHEConfig.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for AMDPbPIRConfig(0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v4, &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
  uint64_t v8 = type metadata accessor for AMDPbHEConfig.OneOf_Config(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v4, &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined init with take of AMDPbPIRConfig((uint64_t)v4, (uint64_t)v7, type metadata accessor for AMDPbPIRConfig);
    lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbPIRConfig and conformance AMDPbPIRConfig, (void (*)(uint64_t))type metadata accessor for AMDPbPIRConfig);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v7, type metadata accessor for AMDPbPIRConfig);
  }
  uint64_t result = outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v4, type metadata accessor for AMDPbHEConfig.OneOf_Config);
  __break(1u);
  return result;
}

uint64_t closure #2 in AMDPbHEConfig.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for AMDPbPECConfig(0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v4, &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
  uint64_t v8 = type metadata accessor for AMDPbHEConfig.OneOf_Config(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v4, &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with take of AMDPbPIRConfig((uint64_t)v4, (uint64_t)v7, type metadata accessor for AMDPbPECConfig);
    lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbPECConfig and conformance AMDPbPECConfig, (void (*)(uint64_t))type metadata accessor for AMDPbPECConfig);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v7, type metadata accessor for AMDPbPECConfig);
  }
  uint64_t result = outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v4, type metadata accessor for AMDPbHEConfig.OneOf_Config);
  __break(1u);
  return result;
}

Swift::Int AMDPbHEConfig.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter((void (*)(void))type metadata accessor for AMDPbHEConfig, &lazy protocol witness table cache variable for type AMDPbHEConfig and conformance AMDPbHEConfig, (void (*)(uint64_t))type metadata accessor for AMDPbHEConfig);
}

uint64_t protocol witness for Message.init() in conformance AMDPbHEConfig@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Message.init() in conformance AMDPbHEConfig(type metadata accessor for AMDPbHEConfig.OneOf_Config, a1);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AMDPbHEConfig()
{
  return 0xD000000000000014;
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance AMDPbHEConfig())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AMDPbHEConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AMDPbHEConfig.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AMDPbHEConfig()
{
  return AMDPbHEConfig.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AMDPbHEConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbHEConfig and conformance AMDPbHEConfig, (void (*)(uint64_t))type metadata accessor for AMDPbHEConfig);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbHEConfig@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbHEConfig._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AMDPbHEConfig(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbHEConfig and conformance AMDPbHEConfig, (void (*)(uint64_t))type metadata accessor for AMDPbHEConfig);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AMDPbHEConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbHEConfig and conformance AMDPbHEConfig, (void (*)(uint64_t))type metadata accessor for AMDPbHEConfig);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *AMDPbHEKeyStatus.protoMessageName.unsafeMutableAddressor()
{
  return &static AMDPbHEKeyStatus.protoMessageName;
}

unint64_t static AMDPbHEKeyStatus.protoMessageName.getter()
{
  return 0xD000000000000017;
}

uint64_t AMDPbHEKeyStatus._protobuf_nameMap.unsafeMutableAddressor()
{
  return AMDPbFetchHEConfigs._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbHEKeyStatus._protobuf_nameMap);
}

uint64_t static AMDPbHEKeyStatus._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbHEKeyStatus._protobuf_nameMap, a1);
}

uint64_t AMDPbHEKeyStatus.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 3:
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
        case 2:
          closure #2 in AMDPbHEKeyStatus.decodeMessage<A>(decoder:)();
          break;
        case 1:
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #2 in AMDPbHEKeyStatus.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t AMDPbHEKeyStatus.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*v3 || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v4))
  {
    uint64_t result = closure #1 in AMDPbHEKeyStatus.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3);
    if (!v4)
    {
      unint64_t v9 = v3[2];
      uint64_t v10 = HIBYTE(v9) & 0xF;
      if ((v9 & 0x2000000000000000) == 0) {
        uint64_t v10 = v3[1] & 0xFFFFFFFFFFFFLL;
      }
      if (v10) {
        dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
      }
      type metadata accessor for AMDPbHEKeyStatus(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t closure #1 in AMDPbHEKeyStatus.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for AMDPbHEKeyStatus(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v12 + 28), (uint64_t)v7, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v7, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  }
  outlined init with take of AMDPbPIRConfig((uint64_t)v7, (uint64_t)v11, type metadata accessor for AspireHeEvaluationKeyConfig);
  lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AspireHeEvaluationKeyConfig and conformance AspireHeEvaluationKeyConfig, (void (*)(uint64_t))type metadata accessor for AspireHeEvaluationKeyConfig);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v11, type metadata accessor for AspireHeEvaluationKeyConfig);
}

Swift::Int AMDPbHEKeyStatus.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter((void (*)(void))type metadata accessor for AMDPbHEKeyStatus, &lazy protocol witness table cache variable for type AMDPbHEKeyStatus and conformance AMDPbHEKeyStatus, (void (*)(uint64_t))type metadata accessor for AMDPbHEKeyStatus);
}

uint64_t protocol witness for Message.init() in conformance AMDPbHEKeyStatus@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0xE000000000000000;
  UnknownStorage.init()();
  uint64_t v4 = (char *)a2 + *(int *)(a1 + 28);
  uint64_t v5 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  uint64_t v6 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
  return v6(v4, 1, 1, v5);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AMDPbHEKeyStatus()
{
  return 0xD000000000000017;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AMDPbHEKeyStatus()
{
  return AMDPbHEKeyStatus.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AMDPbHEKeyStatus(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AMDPbHEKeyStatus.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AMDPbHEKeyStatus(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbHEKeyStatus and conformance AMDPbHEKeyStatus, (void (*)(uint64_t))type metadata accessor for AMDPbHEKeyStatus);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbHEKeyStatus@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbHEKeyStatus._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AMDPbHEKeyStatus(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbHEKeyStatus and conformance AMDPbHEKeyStatus, (void (*)(uint64_t))type metadata accessor for AMDPbHEKeyStatus);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AMDPbHEKeyStatus(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbHEKeyStatus and conformance AMDPbHEKeyStatus, (void (*)(uint64_t))type metadata accessor for AMDPbHEKeyStatus);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *AMDPbPIRConfig.protoMessageName.unsafeMutableAddressor()
{
  return &static AMDPbPIRConfig.protoMessageName;
}

unint64_t static AMDPbPIRConfig.protoMessageName.getter()
{
  return 0xD000000000000015;
}

uint64_t AMDPbPIRConfig._protobuf_nameMap.unsafeMutableAddressor()
{
  return AMDPbFetchHEConfigs._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbPIRConfig._protobuf_nameMap);
}

uint64_t static AMDPbPIRConfig._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbPIRConfig._protobuf_nameMap, a1);
}

uint64_t AMDPbPIRConfig.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v11 = v4;
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          uint64_t v12 = v11;
          closure #1 in AMDPbPIRConfig.decodeMessage<A>(decoder:)(a1, v5, a2, a3, (void (*)(void))type metadata accessor for AMDPbPIRConfig);
          goto LABEL_5;
        case 2:
          type metadata accessor for AMDPbPIRShardConfig(0);
          lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbPIRShardConfig and conformance AMDPbPIRShardConfig, (void (*)(uint64_t))type metadata accessor for AMDPbPIRShardConfig);
          uint64_t v12 = v11;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_5;
        case 3:
          uint64_t v12 = v11;
          closure #3 in AMDPbPIRConfig.decodeMessage<A>(decoder:)();
          goto LABEL_5;
        case 4:
          lazy protocol witness table accessor for type AspirePirPirAlgorithm and conformance AspirePirPirAlgorithm();
          uint64_t v12 = v11;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_5;
        case 5:
          uint64_t v12 = v11;
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
          goto LABEL_5;
        case 6:
          uint64_t v12 = v11;
          dispatch thunk of Decoder.decodeSingularBytesField(value:)();
LABEL_5:
          uint64_t v11 = v12;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #3 in AMDPbPIRConfig.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t AMDPbPIRConfig.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = closure #1 in AMDPbPIRConfig.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3, type metadata accessor for AMDPbPIRConfig);
  if (!v4)
  {
    if (*(void *)(*v3 + 16))
    {
      type metadata accessor for AMDPbPIRShardConfig(0);
      lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbPIRShardConfig and conformance AMDPbPIRShardConfig, (void (*)(uint64_t))type metadata accessor for AMDPbPIRShardConfig);
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    }
    closure #2 in AMDPbPIRConfig.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3);
    if (v3[1])
    {
      lazy protocol witness table accessor for type AspirePirPirAlgorithm and conformance AspirePirPirAlgorithm();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    if (v3[3]) {
      dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
    }
    uint64_t v9 = v3[4];
    unint64_t v10 = v3[5];
    switch(v10 >> 62)
    {
      case 1uLL:
        uint64_t v11 = (int)v9;
        uint64_t v12 = v9 >> 32;
        goto LABEL_13;
      case 2uLL:
        uint64_t v11 = *(void *)(v9 + 16);
        uint64_t v12 = *(void *)(v9 + 24);
LABEL_13:
        if (v11 != v12) {
          goto LABEL_14;
        }
        goto LABEL_15;
      case 3uLL:
        goto LABEL_15;
      default:
        if ((v10 & 0xFF000000000000) == 0) {
          goto LABEL_15;
        }
LABEL_14:
        dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
LABEL_15:
        type metadata accessor for AMDPbPIRConfig(0);
        uint64_t result = UnknownStorage.traverse<A>(visitor:)();
        break;
    }
  }
  return result;
}

uint64_t closure #2 in AMDPbPIRConfig.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AspirePirKeywordPirParameters(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for AMDPbPIRConfig(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v12 + 40), (uint64_t)v7, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v7, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  }
  outlined init with take of AMDPbPIRConfig((uint64_t)v7, (uint64_t)v11, type metadata accessor for AspirePirKeywordPirParameters);
  lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AspirePirKeywordPirParameters and conformance AspirePirKeywordPirParameters, (void (*)(uint64_t))type metadata accessor for AspirePirKeywordPirParameters);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v11, type metadata accessor for AspirePirKeywordPirParameters);
}

Swift::Int AMDPbPIRConfig.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter((void (*)(void))type metadata accessor for AMDPbPIRConfig, &lazy protocol witness table cache variable for type AMDPbPIRConfig and conformance AMDPbPIRConfig, (void (*)(uint64_t))type metadata accessor for AMDPbPIRConfig);
}

uint64_t protocol witness for Message.init() in conformance AMDPbPIRConfig@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = MEMORY[0x263F8EE78];
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 1;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0xC000000000000000;
  UnknownStorage.init()();
  uint64_t v4 = a2 + *(int *)(a1 + 36);
  uint64_t v5 = type metadata accessor for AspireHeEncryptionParameters(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v6 = a2 + *(int *)(a1 + 40);
  uint64_t v7 = type metadata accessor for AspirePirKeywordPirParameters(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
  return v8(v6, 1, 1, v7);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AMDPbPIRConfig()
{
  return 0xD000000000000015;
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance AMDPbPIRConfig())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AMDPbPIRConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AMDPbPIRConfig.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AMDPbPIRConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AMDPbPIRConfig.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AMDPbPIRConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbPIRConfig and conformance AMDPbPIRConfig, (void (*)(uint64_t))type metadata accessor for AMDPbPIRConfig);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbPIRConfig@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbPIRConfig._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AMDPbPIRConfig(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbPIRConfig and conformance AMDPbPIRConfig, (void (*)(uint64_t))type metadata accessor for AMDPbPIRConfig);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AMDPbPIRConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbPIRConfig and conformance AMDPbPIRConfig, (void (*)(uint64_t))type metadata accessor for AMDPbPIRConfig);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *AMDPbPIRShardConfig.protoMessageName.unsafeMutableAddressor()
{
  return &static AMDPbPIRShardConfig.protoMessageName;
}

unint64_t static AMDPbPIRShardConfig.protoMessageName.getter()
{
  return 0xD00000000000001ALL;
}

uint64_t AMDPbPIRShardConfig._protobuf_nameMap.unsafeMutableAddressor()
{
  return AMDPbFetchHEConfigs._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbPIRShardConfig._protobuf_nameMap);
}

uint64_t static AMDPbPIRShardConfig._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbPIRShardConfig._protobuf_nameMap, a1);
}

uint64_t AMDPbPIRShardConfig.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 3)
      {
        dispatch thunk of Decoder.decodeRepeatedUInt64Field(value:)();
      }
      else if (result == 2 || result == 1)
      {
        dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t AMDPbPIRShardConfig.traverse<A>(visitor:)()
{
  if (!*v0 || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v1))
  {
    if (!v0[1] || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v1))
    {
      if (!*(void *)(v0[2] + 16)
        || (uint64_t result = dispatch thunk of Visitor.visitPackedUInt64Field(value:fieldNumber:)(), !v1))
      {
        type metadata accessor for AMDPbPIRShardConfig(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

Swift::Int AMDPbPIRShardConfig.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter((void (*)(void))type metadata accessor for AMDPbPIRShardConfig, &lazy protocol witness table cache variable for type AMDPbPIRShardConfig and conformance AMDPbPIRShardConfig, (void (*)(uint64_t))type metadata accessor for AMDPbPIRShardConfig);
}

uint64_t protocol witness for Message.init() in conformance AMDPbPIRShardConfig@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = MEMORY[0x263F8EE78];
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AMDPbPIRShardConfig()
{
  return 0xD00000000000001ALL;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance AMDPbPIRShardConfig@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance AMDPbPIRShardConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance AMDPbPIRShardConfig())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AMDPbPIRShardConfig()
{
  return AMDPbPIRShardConfig.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AMDPbPIRShardConfig()
{
  return AMDPbPIRShardConfig.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AMDPbPIRShardConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbPIRShardConfig and conformance AMDPbPIRShardConfig, (void (*)(uint64_t))type metadata accessor for AMDPbPIRShardConfig);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbPIRShardConfig@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbPIRShardConfig._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AMDPbPIRShardConfig(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbPIRShardConfig and conformance AMDPbPIRShardConfig, (void (*)(uint64_t))type metadata accessor for AMDPbPIRShardConfig);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AMDPbPIRShardConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbPIRShardConfig and conformance AMDPbPIRShardConfig, (void (*)(uint64_t))type metadata accessor for AMDPbPIRShardConfig);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *AMDPbPECConfig.protoMessageName.unsafeMutableAddressor()
{
  return &static AMDPbPECConfig.protoMessageName;
}

unint64_t static AMDPbPECConfig.protoMessageName.getter()
{
  return 0xD000000000000015;
}

uint64_t AMDPbPECConfig._protobuf_nameMap.unsafeMutableAddressor()
{
  return AMDPbFetchHEConfigs._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbPECConfig._protobuf_nameMap);
}

uint64_t static AMDPbPECConfig._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbPECConfig._protobuf_nameMap, a1);
}

uint64_t AMDPbPECConfig.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v11 = v4;
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          uint64_t v12 = v11;
          closure #1 in AMDPbPIRConfig.decodeMessage<A>(decoder:)(a1, v5, a2, a3, (void (*)(void))type metadata accessor for AMDPbPECConfig);
          goto LABEL_5;
        case 2:
          uint64_t v12 = v11;
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
          goto LABEL_5;
        case 3:
          uint64_t v12 = v11;
          closure #3 in AMDPbPECConfig.decodeMessage<A>(decoder:)();
          goto LABEL_5;
        case 4:
          uint64_t v12 = v11;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          goto LABEL_5;
        case 5:
          lazy protocol witness table accessor for type AspireSimilaritySimilarityMetric and conformance AspireSimilaritySimilarityMetric();
          uint64_t v12 = v11;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_5;
        case 6:
          uint64_t v12 = v11;
          dispatch thunk of Decoder.decodeSingularBytesField(value:)();
LABEL_5:
          uint64_t v11 = v12;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #1 in AMDPbPIRConfig.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void))
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t closure #3 in AMDPbPECConfig.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t AMDPbPECConfig.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = closure #1 in AMDPbPIRConfig.traverse<A>(visitor:)(v3, a1, a2, a3, type metadata accessor for AMDPbPECConfig);
  if (!v4)
  {
    if (*(void *)v3) {
      dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
    }
    closure #2 in AMDPbPECConfig.traverse<A>(visitor:)(v3, a1, a2, a3);
    if (*(_DWORD *)(v3 + 8)) {
      dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v3 + 24) & 1) == 0 && *(void *)(v3 + 16))
    {
      lazy protocol witness table accessor for type AspireSimilaritySimilarityMetric and conformance AspireSimilaritySimilarityMetric();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    uint64_t v9 = *(void *)(v3 + 32);
    unint64_t v10 = *(void *)(v3 + 40);
    switch(v10 >> 62)
    {
      case 1uLL:
        uint64_t v11 = (int)v9;
        uint64_t v12 = v9 >> 32;
        goto LABEL_14;
      case 2uLL:
        uint64_t v11 = *(void *)(v9 + 16);
        uint64_t v12 = *(void *)(v9 + 24);
LABEL_14:
        if (v11 != v12) {
          goto LABEL_15;
        }
        goto LABEL_16;
      case 3uLL:
        goto LABEL_16;
      default:
        if ((v10 & 0xFF000000000000) == 0) {
          goto LABEL_16;
        }
LABEL_15:
        dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
LABEL_16:
        type metadata accessor for AMDPbPECConfig(0);
        uint64_t result = UnknownStorage.traverse<A>(visitor:)();
        break;
    }
  }
  return result;
}

uint64_t closure #1 in AMDPbPIRConfig.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  v16[3] = a4;
  v16[1] = a3;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for AspireHeEncryptionParameters(0);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = a5(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v14 + 36), (uint64_t)v9, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1) {
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v9, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  }
  outlined init with take of AMDPbPIRConfig((uint64_t)v9, (uint64_t)v13, type metadata accessor for AspireHeEncryptionParameters);
  lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage((unint64_t *)&lazy protocol witness table cache variable for type AspireHeEncryptionParameters and conformance AspireHeEncryptionParameters, (void (*)(uint64_t))type metadata accessor for AspireHeEncryptionParameters);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v13, type metadata accessor for AspireHeEncryptionParameters);
}

uint64_t closure #2 in AMDPbPECConfig.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for AMDPbPECConfig(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v12 + 40), (uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  }
  outlined init with take of AMDPbPIRConfig((uint64_t)v7, (uint64_t)v11, type metadata accessor for AspireSimilarityPlaintextPacking);
  lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AspireSimilarityPlaintextPacking and conformance AspireSimilarityPlaintextPacking, (void (*)(uint64_t))type metadata accessor for AspireSimilarityPlaintextPacking);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v11, type metadata accessor for AspireSimilarityPlaintextPacking);
}

Swift::Int AMDPbPECConfig.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter((void (*)(void))type metadata accessor for AMDPbPECConfig, &lazy protocol witness table cache variable for type AMDPbPECConfig and conformance AMDPbPECConfig, (void (*)(uint64_t))type metadata accessor for AMDPbPECConfig);
}

uint64_t protocol witness for Message.init() in conformance AMDPbPECConfig@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(unsigned char *)(a2 + 24) = 1;
  *(_OWORD *)(a2 + 32) = xmmword_249E85DF0;
  UnknownStorage.init()();
  uint64_t v4 = a2 + *(int *)(a1 + 36);
  uint64_t v5 = type metadata accessor for AspireHeEncryptionParameters(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v6 = a2 + *(int *)(a1 + 40);
  uint64_t v7 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
  return v8(v6, 1, 1, v7);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AMDPbPECConfig()
{
  return 0xD000000000000015;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance AMDPbPIRConfig@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 32);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance AMDPbPIRConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 32);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AMDPbPECConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AMDPbPECConfig.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AMDPbPECConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AMDPbPECConfig.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AMDPbPECConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbPECConfig and conformance AMDPbPECConfig, (void (*)(uint64_t))type metadata accessor for AMDPbPECConfig);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbPECConfig@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbPECConfig._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AMDPbPECConfig(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbPECConfig and conformance AMDPbPECConfig, (void (*)(uint64_t))type metadata accessor for AMDPbPECConfig);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AMDPbPECConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbPECConfig and conformance AMDPbPECConfig, (void (*)(uint64_t))type metadata accessor for AMDPbPECConfig);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *AMDPbHEQueries.protoMessageName.unsafeMutableAddressor()
{
  return &static AMDPbHEQueries.protoMessageName;
}

unint64_t static AMDPbHEQueries.protoMessageName.getter()
{
  return 0xD000000000000015;
}

uint64_t AMDPbHEQueries._protobuf_nameMap.unsafeMutableAddressor()
{
  return AMDPbFetchHEConfigs._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbHEQueries._protobuf_nameMap);
}

uint64_t static AMDPbHEQueries._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbHEQueries._protobuf_nameMap, a1);
}

uint64_t AMDPbHEQueries.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AMDPbHEQueries.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(void))type metadata accessor for AMDPbHEQuery, &lazy protocol witness table cache variable for type AMDPbHEQuery and conformance AMDPbHEQuery, (void (*)(uint64_t))type metadata accessor for AMDPbHEQuery);
}

uint64_t AMDPbHEQueries.traverse<A>(visitor:)()
{
  if (!*(void *)(*(void *)v0 + 16)
    || (type metadata accessor for AMDPbHEQuery(0),
        lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbHEQuery and conformance AMDPbHEQuery, (void (*)(uint64_t))type metadata accessor for AMDPbHEQuery), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
  {
    type metadata accessor for AMDPbHEQueries(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t static AMDPbHEQueries.== infix(_:_:)(char *a1, char *a2)
{
  return specialized static AMDPbEvaluationKeys.== infix(_:_:)(a1, a2, specialized static Array<A>.== infix(_:_:), type metadata accessor for AMDPbHEQueries) & 1;
}

Swift::Int AMDPbHEQueries.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter((void (*)(void))type metadata accessor for AMDPbHEQueries, &lazy protocol witness table cache variable for type AMDPbHEQueries and conformance AMDPbHEQueries, (void (*)(uint64_t))type metadata accessor for AMDPbHEQueries);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AMDPbHEQueries()
{
  return 0xD000000000000015;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AMDPbHEQueries(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AMDPbHEQueries.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AMDPbHEQueries()
{
  return AMDPbHEQueries.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AMDPbHEQueries(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbHEQueries and conformance AMDPbHEQueries, (void (*)(uint64_t))type metadata accessor for AMDPbHEQueries);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbHEQueries@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbHEQueries._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AMDPbHEQueries(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbHEQueries and conformance AMDPbHEQueries, (void (*)(uint64_t))type metadata accessor for AMDPbHEQueries);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AMDPbHEQueries(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbHEQueries and conformance AMDPbHEQueries, (void (*)(uint64_t))type metadata accessor for AMDPbHEQueries);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AMDPbHEQueries(char *a1, char *a2)
{
  return specialized static AMDPbEvaluationKeys.== infix(_:_:)(a1, a2, specialized static Array<A>.== infix(_:_:), type metadata accessor for AMDPbHEQueries) & 1;
}

void *AMDPbHEReplies.protoMessageName.unsafeMutableAddressor()
{
  return &static AMDPbHEReplies.protoMessageName;
}

unint64_t static AMDPbHEReplies.protoMessageName.getter()
{
  return 0xD000000000000015;
}

uint64_t AMDPbHEReplies._protobuf_nameMap.unsafeMutableAddressor()
{
  return AMDPbFetchHEConfigs._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbHEReplies._protobuf_nameMap);
}

uint64_t static AMDPbHEReplies._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbHEReplies._protobuf_nameMap, a1);
}

uint64_t AMDPbHEReplies.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AMDPbHEQueries.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(void))type metadata accessor for AMDPbHEReply, &lazy protocol witness table cache variable for type AMDPbHEReply and conformance AMDPbHEReply, (void (*)(uint64_t))type metadata accessor for AMDPbHEReply);
}

uint64_t AMDPbHEReplies.traverse<A>(visitor:)()
{
  if (!*(void *)(*(void *)v0 + 16)
    || (type metadata accessor for AMDPbHEReply(0),
        lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbHEReply and conformance AMDPbHEReply, (void (*)(uint64_t))type metadata accessor for AMDPbHEReply), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
  {
    type metadata accessor for AMDPbHEReplies(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t static AMDPbHEReplies.== infix(_:_:)(char *a1, char *a2)
{
  return specialized static AMDPbEvaluationKeys.== infix(_:_:)(a1, a2, specialized static Array<A>.== infix(_:_:), type metadata accessor for AMDPbHEReplies) & 1;
}

Swift::Int AMDPbHEReplies.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter((void (*)(void))type metadata accessor for AMDPbHEReplies, &lazy protocol witness table cache variable for type AMDPbHEReplies and conformance AMDPbHEReplies, (void (*)(uint64_t))type metadata accessor for AMDPbHEReplies);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AMDPbHEReplies()
{
  return 0xD000000000000015;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AMDPbHEReplies(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AMDPbHEReplies.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AMDPbHEReplies()
{
  return AMDPbHEReplies.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AMDPbHEReplies(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbHEReplies and conformance AMDPbHEReplies, (void (*)(uint64_t))type metadata accessor for AMDPbHEReplies);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbHEReplies@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbHEReplies._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AMDPbHEReplies(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbHEReplies and conformance AMDPbHEReplies, (void (*)(uint64_t))type metadata accessor for AMDPbHEReplies);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AMDPbHEReplies(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbHEReplies and conformance AMDPbHEReplies, (void (*)(uint64_t))type metadata accessor for AMDPbHEReplies);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AMDPbHEReplies(char *a1, char *a2)
{
  return specialized static AMDPbEvaluationKeys.== infix(_:_:)(a1, a2, specialized static Array<A>.== infix(_:_:), type metadata accessor for AMDPbHEReplies) & 1;
}

void *AMDPbHEQuery.protoMessageName.unsafeMutableAddressor()
{
  return &static AMDPbHEQuery.protoMessageName;
}

unint64_t static AMDPbHEQuery.protoMessageName.getter()
{
  return 0xD000000000000013;
}

uint64_t AMDPbHEQuery._protobuf_nameMap.unsafeMutableAddressor()
{
  return AMDPbFetchHEConfigs._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbHEQuery._protobuf_nameMap);
}

uint64_t static AMDPbHEQuery._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbHEQuery._protobuf_nameMap, a1);
}

uint64_t AMDPbHEQuery.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v4 || (v10 & 1) != 0) {
      break;
    }
    switch(result)
    {
      case 3:
        closure #3 in AMDPbHEQuery.decodeMessage<A>(decoder:)(v5, a1, a2, a3);
        break;
      case 2:
        closure #2 in AMDPbHEQuery.decodeMessage<A>(decoder:)(v5, a1, a2, a3);
        break;
      case 1:
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
        break;
    }
  }
  return result;
}

uint64_t closure #2 in AMDPbHEQuery.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t v4 = type metadata accessor for AMDPbPIRQuery(0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for AMDPbHEQuery.OneOf_Query(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbPIRQuery?);
  uint64_t v20 = MEMORY[0x270FA5388](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = v4;
  v24((char *)&v34 - v22, 1, 1, v4);
  uint64_t v35 = v46 + *(int *)(type metadata accessor for AMDPbHEQuery(0) + 20);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v35, (uint64_t)v11, &demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v11, &demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
    uint64_t v25 = v12;
LABEL_5:
    uint64_t v28 = v41;
    uint64_t v27 = v42;
    goto LABEL_7;
  }
  uint64_t v26 = (uint64_t)v40;
  outlined init with take of AMDPbPIRConfig((uint64_t)v11, (uint64_t)v18, type metadata accessor for AMDPbHEQuery.OneOf_Query);
  outlined init with take of AMDPbPIRConfig((uint64_t)v18, (uint64_t)v16, type metadata accessor for AMDPbHEQuery.OneOf_Query);
  uint64_t v25 = v12;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v16, type metadata accessor for AMDPbHEQuery.OneOf_Query);
    goto LABEL_5;
  }
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v23, &demangling cache variable for type metadata for AMDPbPIRQuery?);
  outlined init with take of AMDPbPIRConfig((uint64_t)v16, v26, type metadata accessor for AMDPbPIRQuery);
  outlined init with take of AMDPbPIRConfig(v26, (uint64_t)v23, type metadata accessor for AMDPbPIRQuery);
  uint64_t v28 = v41;
  v24(v23, 0, 1, v41);
  uint64_t v27 = v42;
LABEL_7:
  lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbPIRQuery and conformance AMDPbPIRQuery, (void (*)(uint64_t))type metadata accessor for AMDPbPIRQuery);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27) {
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v23, &demangling cache variable for type metadata for AMDPbPIRQuery?);
  }
  uint64_t v30 = v38;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v23, v38, &demangling cache variable for type metadata for AMDPbPIRQuery?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v28) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v23, &demangling cache variable for type metadata for AMDPbPIRQuery?);
    return outlined destroy of AMDPbHEConfig.OneOf_Config?(v30, &demangling cache variable for type metadata for AMDPbPIRQuery?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of AMDPbPIRConfig(v31, v37, type metadata accessor for AMDPbPIRQuery);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v23, &demangling cache variable for type metadata for AMDPbPIRQuery?);
    uint64_t v33 = v35;
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v35, &demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
    outlined init with take of AMDPbPIRConfig(v32, v33, type metadata accessor for AMDPbPIRQuery);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #3 in AMDPbHEQuery.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t v4 = type metadata accessor for AMDPbPECQuery(0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for AMDPbHEQuery.OneOf_Query(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbPECQuery?);
  uint64_t v20 = MEMORY[0x270FA5388](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = v4;
  v24((char *)&v34 - v22, 1, 1, v4);
  uint64_t v35 = v46 + *(int *)(type metadata accessor for AMDPbHEQuery(0) + 20);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v35, (uint64_t)v11, &demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v11, &demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of AMDPbPIRConfig((uint64_t)v11, (uint64_t)v18, type metadata accessor for AMDPbHEQuery.OneOf_Query);
    outlined init with take of AMDPbPIRConfig((uint64_t)v18, (uint64_t)v16, type metadata accessor for AMDPbHEQuery.OneOf_Query);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v23, &demangling cache variable for type metadata for AMDPbPECQuery?);
      outlined init with take of AMDPbPIRConfig((uint64_t)v16, v26, type metadata accessor for AMDPbPECQuery);
      outlined init with take of AMDPbPIRConfig(v26, (uint64_t)v23, type metadata accessor for AMDPbPECQuery);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v16, type metadata accessor for AMDPbHEQuery.OneOf_Query);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbPECQuery and conformance AMDPbPECQuery, (void (*)(uint64_t))type metadata accessor for AMDPbPECQuery);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v23, &demangling cache variable for type metadata for AMDPbPECQuery?);
  }
  uint64_t v30 = v38;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v23, v38, &demangling cache variable for type metadata for AMDPbPECQuery?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v23, &demangling cache variable for type metadata for AMDPbPECQuery?);
    return outlined destroy of AMDPbHEConfig.OneOf_Config?(v30, &demangling cache variable for type metadata for AMDPbPECQuery?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of AMDPbPIRConfig(v31, v37, type metadata accessor for AMDPbPECQuery);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v23, &demangling cache variable for type metadata for AMDPbPECQuery?);
    uint64_t v33 = v35;
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v35, &demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
    outlined init with take of AMDPbPIRConfig(v32, v33, type metadata accessor for AMDPbPECQuery);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t AMDPbHEQuery.traverse<A>(visitor:)()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v5 = v0[1];
  uint64_t v6 = HIBYTE(v5) & 0xF;
  if ((v5 & 0x2000000000000000) == 0) {
    uint64_t v6 = *v0 & 0xFFFFFFFFFFFFLL;
  }
  if (!v6 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    uint64_t v8 = type metadata accessor for AMDPbHEQuery(0);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v0 + *(int *)(v8 + 20), (uint64_t)v4, &demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
    uint64_t v9 = type metadata accessor for AMDPbHEQuery.OneOf_Query(0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v4, 1, v9) == 1) {
      return UnknownStorage.traverse<A>(visitor:)();
    }
    if (swift_getEnumCaseMultiPayload() == 1) {
      closure #2 in AMDPbHEQuery.traverse<A>(visitor:)((uint64_t)v0);
    }
    else {
      closure #1 in AMDPbHEQuery.traverse<A>(visitor:)((uint64_t)v0);
    }
    uint64_t result = outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v4, type metadata accessor for AMDPbHEQuery.OneOf_Query);
    if (!v1) {
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t closure #1 in AMDPbHEQuery.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for AMDPbPIRQuery(0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AMDPbHEQuery(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v8 + 20), (uint64_t)v4, &demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
  uint64_t v9 = type metadata accessor for AMDPbHEQuery.OneOf_Query(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v4, 1, v9) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v4, &demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined init with take of AMDPbPIRConfig((uint64_t)v4, (uint64_t)v7, type metadata accessor for AMDPbPIRQuery);
    lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbPIRQuery and conformance AMDPbPIRQuery, (void (*)(uint64_t))type metadata accessor for AMDPbPIRQuery);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v7, type metadata accessor for AMDPbPIRQuery);
  }
  uint64_t result = outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v4, type metadata accessor for AMDPbHEQuery.OneOf_Query);
  __break(1u);
  return result;
}

uint64_t closure #2 in AMDPbHEQuery.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for AMDPbPECQuery(0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AMDPbHEQuery(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v8 + 20), (uint64_t)v4, &demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
  uint64_t v9 = type metadata accessor for AMDPbHEQuery.OneOf_Query(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v4, 1, v9) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v4, &demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with take of AMDPbPIRConfig((uint64_t)v4, (uint64_t)v7, type metadata accessor for AMDPbPECQuery);
    lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbPECQuery and conformance AMDPbPECQuery, (void (*)(uint64_t))type metadata accessor for AMDPbPECQuery);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v7, type metadata accessor for AMDPbPECQuery);
  }
  uint64_t result = outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v4, type metadata accessor for AMDPbHEQuery.OneOf_Query);
  __break(1u);
  return result;
}

Swift::Int AMDPbHEQuery.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter((void (*)(void))type metadata accessor for AMDPbHEQuery, &lazy protocol witness table cache variable for type AMDPbHEQuery and conformance AMDPbHEQuery, (void (*)(uint64_t))type metadata accessor for AMDPbHEQuery);
}

uint64_t protocol witness for Message.init() in conformance AMDPbHEQuery@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0xE000000000000000;
  uint64_t v2 = (char *)a2 + *(int *)(a1 + 20);
  uint64_t v3 = type metadata accessor for AMDPbHEQuery.OneOf_Query(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 1, 1, v3);
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AMDPbHEQuery()
{
  return 0xD000000000000013;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AMDPbHEQuery(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AMDPbHEQuery.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AMDPbHEQuery()
{
  return AMDPbHEQuery.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AMDPbHEQuery(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbHEQuery and conformance AMDPbHEQuery, (void (*)(uint64_t))type metadata accessor for AMDPbHEQuery);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbHEQuery@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbHEQuery._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AMDPbHEQuery(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbHEQuery and conformance AMDPbHEQuery, (void (*)(uint64_t))type metadata accessor for AMDPbHEQuery);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AMDPbHEQuery(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbHEQuery and conformance AMDPbHEQuery, (void (*)(uint64_t))type metadata accessor for AMDPbHEQuery);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *AMDPbHEReply.protoMessageName.unsafeMutableAddressor()
{
  return &static AMDPbHEReply.protoMessageName;
}

unint64_t static AMDPbHEReply.protoMessageName.getter()
{
  return 0xD000000000000013;
}

uint64_t one-time initialization function for _protobuf_nameMap(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v8, a2);
  __swift_project_value_buffer(v8, (uint64_t)a2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v9 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v10 = *(void *)(*(void *)v9 + 72);
  unint64_t v11 = (*(unsigned __int8 *)(*(void *)v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v9 + 80);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_249E85E00;
  uint64_t v13 = (void *)(v12 + v11);
  unint64_t v14 = v12 + v11 + v9[14];
  *uint64_t v13 = 1;
  *(void *)unint64_t v14 = a3;
  *(void *)(v14 + 8) = a4;
  *(unsigned char *)(v14 + 16) = 2;
  uint64_t v15 = *MEMORY[0x263F50728];
  uint64_t v16 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v17 = *(void (**)(void))(*(void *)(v16 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v17)(v14, v15, v16);
  uint64_t v18 = (char *)v13 + v10 + v9[14];
  *(void *)((char *)v13 + v10) = 2;
  *(void *)uint64_t v18 = a5;
  *((void *)v18 + 1) = a4;
  v18[16] = 2;
  v17();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v9;
  int *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  uint64_t v9 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v9, a2);
  __swift_project_value_buffer(v9, (uint64_t)a2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v10 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
              - 8);
  unint64_t v11 = (*(unsigned __int8 *)(*(void *)v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v10 + 80);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_249E85E40;
  uint64_t v13 = v12 + v11 + v10[14];
  *(void *)(v12 + v11) = a3;
  *(void *)uint64_t v13 = a4;
  *(void *)(v13 + 8) = a5;
  *(unsigned char *)(v13 + 16) = 2;
  unint64_t v14 = *MEMORY[0x263F50718];
  uint64_t v15 = type metadata accessor for _NameMap.NameDescription();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 104))(v13, v14, v15);
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t AMDPbHEReply._protobuf_nameMap.unsafeMutableAddressor()
{
  return AMDPbFetchHEConfigs._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbHEReply._protobuf_nameMap);
}

uint64_t static AMDPbHEReply._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbHEReply._protobuf_nameMap, a1);
}

uint64_t AMDPbHEReply.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AMDPbHEConfig.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in AMDPbHEReply.decodeMessage<A>(decoder:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #2 in AMDPbHEReply.decodeMessage<A>(decoder:));
}

uint64_t AMDPbHEConfig.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t, uint64_t), void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v9 = v5;
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v6 || (v14 & 1) != 0) {
      break;
    }
    if (result == 2)
    {
      a5(v9, a1, a2, a3);
    }
    else if (result == 1)
    {
      a4(v9, a1, a2, a3);
    }
  }
  return result;
}

uint64_t closure #1 in AMDPbHEReply.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v49 = a4;
  uint64_t v47 = a2;
  uint64_t v48 = a3;
  uint64_t v5 = type metadata accessor for AMDPbPIRReply(0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v41 = (uint64_t)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v44 = (char *)&v37 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for AMDPbHEReply.OneOf_Reply(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v19 = (char *)&v37 - v18;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbPIRReply?);
  uint64_t v21 = MEMORY[0x270FA5388](v20 - 8);
  uint64_t v42 = (uint64_t)&v37 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  uint64_t v24 = (char *)&v37 - v23;
  uint64_t v43 = v6;
  uint64_t v25 = *(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56);
  uint64_t v46 = v5;
  uint64_t v26 = v5;
  uint64_t v27 = v25;
  v25((char *)&v37 - v23, 1, 1, v26);
  uint64_t v40 = a1;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v12, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
  uint64_t v39 = v14;
  int v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if (v28 == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v12, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
    uint64_t v29 = v13;
    uint64_t v30 = v46;
  }
  else
  {
    uint64_t v38 = v27;
    uint64_t v31 = (uint64_t)v44;
    outlined init with take of AMDPbPIRConfig((uint64_t)v12, (uint64_t)v19, type metadata accessor for AMDPbHEReply.OneOf_Reply);
    outlined init with take of AMDPbPIRConfig((uint64_t)v19, (uint64_t)v17, type metadata accessor for AMDPbHEReply.OneOf_Reply);
    uint64_t v29 = v13;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v17, type metadata accessor for AMDPbHEReply.OneOf_Reply);
      uint64_t v30 = v46;
    }
    else
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AMDPbPIRReply?);
      outlined init with take of AMDPbPIRConfig((uint64_t)v17, v31, type metadata accessor for AMDPbPIRReply);
      outlined init with take of AMDPbPIRConfig(v31, (uint64_t)v24, type metadata accessor for AMDPbPIRReply);
      uint64_t v30 = v46;
      v38(v24, 0, 1, v46);
    }
  }
  uint64_t v32 = v45;
  lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbPIRReply and conformance AMDPbPIRReply, (void (*)(uint64_t))type metadata accessor for AMDPbPIRReply);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v32) {
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AMDPbPIRReply?);
  }
  uint64_t v34 = v42;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, v42, &demangling cache variable for type metadata for AMDPbPIRReply?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v34, 1, v30) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AMDPbPIRReply?);
    return outlined destroy of AMDPbHEConfig.OneOf_Config?(v34, &demangling cache variable for type metadata for AMDPbPIRReply?);
  }
  else
  {
    uint64_t v35 = v41;
    outlined init with take of AMDPbPIRConfig(v34, v41, type metadata accessor for AMDPbPIRReply);
    if (v28 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AMDPbPIRReply?);
    uint64_t v36 = v40;
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v40, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
    outlined init with take of AMDPbPIRConfig(v35, v36, type metadata accessor for AMDPbPIRReply);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v29);
  }
}

uint64_t closure #2 in AMDPbHEReply.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v49 = a4;
  uint64_t v47 = a2;
  uint64_t v48 = a3;
  uint64_t v5 = type metadata accessor for AMDPbPECReply(0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v41 = (uint64_t)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v44 = (char *)&v37 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for AMDPbHEReply.OneOf_Reply(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v19 = (char *)&v37 - v18;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbPECReply?);
  uint64_t v21 = MEMORY[0x270FA5388](v20 - 8);
  uint64_t v42 = (uint64_t)&v37 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  uint64_t v24 = (char *)&v37 - v23;
  uint64_t v43 = v6;
  uint64_t v25 = *(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56);
  uint64_t v46 = v5;
  uint64_t v26 = v5;
  uint64_t v27 = v25;
  v25((char *)&v37 - v23, 1, 1, v26);
  uint64_t v40 = a1;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v12, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
  uint64_t v39 = v14;
  int v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if (v28 == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v12, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
    uint64_t v29 = v13;
  }
  else
  {
    uint64_t v38 = v27;
    uint64_t v30 = (uint64_t)v44;
    outlined init with take of AMDPbPIRConfig((uint64_t)v12, (uint64_t)v19, type metadata accessor for AMDPbHEReply.OneOf_Reply);
    outlined init with take of AMDPbPIRConfig((uint64_t)v19, (uint64_t)v17, type metadata accessor for AMDPbHEReply.OneOf_Reply);
    uint64_t v29 = v13;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AMDPbPECReply?);
      outlined init with take of AMDPbPIRConfig((uint64_t)v17, v30, type metadata accessor for AMDPbPECReply);
      outlined init with take of AMDPbPIRConfig(v30, (uint64_t)v24, type metadata accessor for AMDPbPECReply);
      uint64_t v31 = v46;
      v38(v24, 0, 1, v46);
      goto LABEL_7;
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v17, type metadata accessor for AMDPbHEReply.OneOf_Reply);
  }
  uint64_t v31 = v46;
LABEL_7:
  uint64_t v32 = v45;
  lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbPECReply and conformance AMDPbPECReply, (void (*)(uint64_t))type metadata accessor for AMDPbPECReply);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v32) {
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AMDPbPECReply?);
  }
  uint64_t v34 = v42;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, v42, &demangling cache variable for type metadata for AMDPbPECReply?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v34, 1, v31) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AMDPbPECReply?);
    return outlined destroy of AMDPbHEConfig.OneOf_Config?(v34, &demangling cache variable for type metadata for AMDPbPECReply?);
  }
  else
  {
    uint64_t v35 = v41;
    outlined init with take of AMDPbPIRConfig(v34, v41, type metadata accessor for AMDPbPECReply);
    if (v28 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AMDPbPECReply?);
    uint64_t v36 = v40;
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v40, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
    outlined init with take of AMDPbPIRConfig(v35, v36, type metadata accessor for AMDPbPECReply);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v29);
  }
}

uint64_t AMDPbHEReply.traverse<A>(visitor:)()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v0, (uint64_t)v4, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
  uint64_t v5 = type metadata accessor for AMDPbHEReply.OneOf_Reply(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5) == 1) {
    goto LABEL_6;
  }
  if (swift_getEnumCaseMultiPayload() == 1) {
    closure #2 in AMDPbHEReply.traverse<A>(visitor:)(v0);
  }
  else {
    closure #1 in AMDPbHEReply.traverse<A>(visitor:)(v0);
  }
  uint64_t result = outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v4, type metadata accessor for AMDPbHEReply.OneOf_Reply);
  if (!v1)
  {
LABEL_6:
    type metadata accessor for AMDPbHEReply(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in AMDPbHEReply.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for AMDPbPIRReply(0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v4, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
  uint64_t v8 = type metadata accessor for AMDPbHEReply.OneOf_Reply(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v4, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined init with take of AMDPbPIRConfig((uint64_t)v4, (uint64_t)v7, type metadata accessor for AMDPbPIRReply);
    lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbPIRReply and conformance AMDPbPIRReply, (void (*)(uint64_t))type metadata accessor for AMDPbPIRReply);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v7, type metadata accessor for AMDPbPIRReply);
  }
  uint64_t result = outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v4, type metadata accessor for AMDPbHEReply.OneOf_Reply);
  __break(1u);
  return result;
}

uint64_t closure #2 in AMDPbHEReply.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for AMDPbPECReply(0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v4, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
  uint64_t v8 = type metadata accessor for AMDPbHEReply.OneOf_Reply(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v4, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with take of AMDPbPIRConfig((uint64_t)v4, (uint64_t)v7, type metadata accessor for AMDPbPECReply);
    lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbPECReply and conformance AMDPbPECReply, (void (*)(uint64_t))type metadata accessor for AMDPbPECReply);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v7, type metadata accessor for AMDPbPECReply);
  }
  uint64_t result = outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v4, type metadata accessor for AMDPbHEReply.OneOf_Reply);
  __break(1u);
  return result;
}

Swift::Int AMDPbHEReply.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter((void (*)(void))type metadata accessor for AMDPbHEReply, &lazy protocol witness table cache variable for type AMDPbHEReply and conformance AMDPbHEReply, (void (*)(uint64_t))type metadata accessor for AMDPbHEReply);
}

uint64_t protocol witness for Message.init() in conformance AMDPbHEReply@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Message.init() in conformance AMDPbHEConfig(type metadata accessor for AMDPbHEReply.OneOf_Reply, a1);
}

uint64_t protocol witness for Message.init() in conformance AMDPbHEConfig@<X0>(uint64_t (*a1)(void)@<X2>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(a2, 1, 1, v3);
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AMDPbHEReply()
{
  return 0xD000000000000013;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AMDPbHEReply(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AMDPbHEReply.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AMDPbHEReply()
{
  return AMDPbHEReply.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AMDPbHEReply(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbHEReply and conformance AMDPbHEReply, (void (*)(uint64_t))type metadata accessor for AMDPbHEReply);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbHEReply@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbHEReply._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AMDPbHEReply(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbHEReply and conformance AMDPbHEReply, (void (*)(uint64_t))type metadata accessor for AMDPbHEReply);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AMDPbHEReply(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbHEReply and conformance AMDPbHEReply, (void (*)(uint64_t))type metadata accessor for AMDPbHEReply);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *AMDPbEvaluationKeys.protoMessageName.unsafeMutableAddressor()
{
  return &static AMDPbEvaluationKeys.protoMessageName;
}

unint64_t static AMDPbEvaluationKeys.protoMessageName.getter()
{
  return 0xD00000000000001ALL;
}

uint64_t AMDPbEvaluationKeys._protobuf_nameMap.unsafeMutableAddressor()
{
  return AMDPbFetchHEConfigs._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbEvaluationKeys._protobuf_nameMap);
}

uint64_t static AMDPbEvaluationKeys._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbEvaluationKeys._protobuf_nameMap, a1);
}

uint64_t AMDPbEvaluationKeys.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AMDPbHEQueries.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(void))type metadata accessor for AMDPbEvaluationKey, &lazy protocol witness table cache variable for type AMDPbEvaluationKey and conformance AMDPbEvaluationKey, (void (*)(uint64_t))type metadata accessor for AMDPbEvaluationKey);
}

uint64_t AMDPbEvaluationKeys.traverse<A>(visitor:)()
{
  if (!*(void *)(*(void *)v0 + 16)
    || (type metadata accessor for AMDPbEvaluationKey(0),
        lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbEvaluationKey and conformance AMDPbEvaluationKey, (void (*)(uint64_t))type metadata accessor for AMDPbEvaluationKey), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
  {
    type metadata accessor for AMDPbEvaluationKeys(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t static AMDPbEvaluationKeys.== infix(_:_:)(char *a1, char *a2)
{
  return specialized static AMDPbEvaluationKeys.== infix(_:_:)(a1, a2, specialized static Array<A>.== infix(_:_:), type metadata accessor for AMDPbEvaluationKeys) & 1;
}

Swift::Int AMDPbEvaluationKeys.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter((void (*)(void))type metadata accessor for AMDPbEvaluationKeys, &lazy protocol witness table cache variable for type AMDPbEvaluationKeys and conformance AMDPbEvaluationKeys, (void (*)(uint64_t))type metadata accessor for AMDPbEvaluationKeys);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AMDPbEvaluationKeys()
{
  return 0xD00000000000001ALL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AMDPbEvaluationKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AMDPbEvaluationKeys.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AMDPbEvaluationKeys()
{
  return AMDPbEvaluationKeys.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AMDPbEvaluationKeys(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbEvaluationKeys and conformance AMDPbEvaluationKeys, (void (*)(uint64_t))type metadata accessor for AMDPbEvaluationKeys);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbEvaluationKeys@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbEvaluationKeys._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AMDPbEvaluationKeys(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbEvaluationKeys and conformance AMDPbEvaluationKeys, (void (*)(uint64_t))type metadata accessor for AMDPbEvaluationKeys);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AMDPbEvaluationKeys(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbEvaluationKeys and conformance AMDPbEvaluationKeys, (void (*)(uint64_t))type metadata accessor for AMDPbEvaluationKeys);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AMDPbEvaluationKeys(char *a1, char *a2)
{
  return specialized static AMDPbEvaluationKeys.== infix(_:_:)(a1, a2, specialized static Array<A>.== infix(_:_:), type metadata accessor for AMDPbEvaluationKeys) & 1;
}

void *AMDPbEvaluationKey.protoMessageName.unsafeMutableAddressor()
{
  return &static AMDPbEvaluationKey.protoMessageName;
}

unint64_t static AMDPbEvaluationKey.protoMessageName.getter()
{
  return 0xD000000000000019;
}

uint64_t AMDPbEvaluationKey._protobuf_nameMap.unsafeMutableAddressor()
{
  return AMDPbFetchHEConfigs._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbEvaluationKey._protobuf_nameMap);
}

uint64_t static AMDPbEvaluationKey._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbEvaluationKey._protobuf_nameMap, a1);
}

uint64_t AMDPbEvaluationKey.decodeMessage<A>(decoder:)()
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0) {
      break;
    }
    if (result == 2)
    {
      closure #2 in AMDPbEvaluationKey.decodeMessage<A>(decoder:)();
    }
    else if (result == 1)
    {
      closure #1 in AMDPbEvaluationKey.decodeMessage<A>(decoder:)();
    }
  }
  return result;
}

uint64_t closure #1 in AMDPbEvaluationKey.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t closure #2 in AMDPbEvaluationKey.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t AMDPbEvaluationKey.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = closure #1 in AMDPbEvaluationKey.traverse<A>(visitor:)(v3, a1, a2, a3);
  if (!v4)
  {
    closure #2 in AMDPbEvaluationKey.traverse<A>(visitor:)(v3, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in AMDPbEvaluationKey.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for AMDPbEvaluationKey(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v12 + 20), (uint64_t)v7, &demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v7, &demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
  }
  outlined init with take of AMDPbPIRConfig((uint64_t)v7, (uint64_t)v11, type metadata accessor for AMDPbEvaluationKeyMetadata);
  lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbEvaluationKeyMetadata and conformance AMDPbEvaluationKeyMetadata, (void (*)(uint64_t))type metadata accessor for AMDPbEvaluationKeyMetadata);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v11, type metadata accessor for AMDPbEvaluationKeyMetadata);
}

uint64_t closure #2 in AMDPbEvaluationKey.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for AMDPbEvaluationKey(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v12 + 24), (uint64_t)v7, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v7, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  }
  outlined init with take of AMDPbPIRConfig((uint64_t)v7, (uint64_t)v11, type metadata accessor for AspireHeSerializedEvaluationKey);
  lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AspireHeSerializedEvaluationKey and conformance AspireHeSerializedEvaluationKey, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedEvaluationKey);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v11, type metadata accessor for AspireHeSerializedEvaluationKey);
}

Swift::Int AMDPbEvaluationKey.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter((void (*)(void))type metadata accessor for AMDPbEvaluationKey, &lazy protocol witness table cache variable for type AMDPbEvaluationKey and conformance AMDPbEvaluationKey, (void (*)(uint64_t))type metadata accessor for AMDPbEvaluationKey);
}

uint64_t protocol witness for Message.init() in conformance AMDPbEvaluationKey@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  uint64_t v4 = a2 + *(int *)(a1 + 20);
  uint64_t v5 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v6 = a2 + *(int *)(a1 + 24);
  uint64_t v7 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
  return v8(v6, 1, 1, v7);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AMDPbEvaluationKey()
{
  return 0xD000000000000019;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AMDPbEvaluationKey()
{
  return AMDPbEvaluationKey.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AMDPbEvaluationKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AMDPbEvaluationKey.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AMDPbEvaluationKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbEvaluationKey and conformance AMDPbEvaluationKey, (void (*)(uint64_t))type metadata accessor for AMDPbEvaluationKey);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbEvaluationKey@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbEvaluationKey._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AMDPbEvaluationKey(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbEvaluationKey and conformance AMDPbEvaluationKey, (void (*)(uint64_t))type metadata accessor for AMDPbEvaluationKey);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AMDPbEvaluationKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbEvaluationKey and conformance AMDPbEvaluationKey, (void (*)(uint64_t))type metadata accessor for AMDPbEvaluationKey);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *AMDPbEvaluationKeyMetadata.protoMessageName.unsafeMutableAddressor()
{
  return &static AMDPbEvaluationKeyMetadata.protoMessageName;
}

unint64_t static AMDPbEvaluationKeyMetadata.protoMessageName.getter()
{
  return 0xD000000000000021;
}

uint64_t AMDPbEvaluationKeyMetadata._protobuf_nameMap.unsafeMutableAddressor()
{
  return AMDPbFetchHEConfigs._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbEvaluationKeyMetadata._protobuf_nameMap);
}

uint64_t static AMDPbEvaluationKeyMetadata._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbEvaluationKeyMetadata._protobuf_nameMap, a1);
}

uint64_t AMDPbEvaluationKeyMetadata.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        dispatch thunk of Decoder.decodeSingularBytesField(value:)();
      }
      else if (result == 1)
      {
        dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t AMDPbEvaluationKeyMetadata.traverse<A>(visitor:)()
{
  if (!*v0 || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v1))
  {
    uint64_t v3 = v0[1];
    unint64_t v4 = v0[2];
    switch(v4 >> 62)
    {
      case 1uLL:
        if ((int)v3 != v3 >> 32) {
          goto LABEL_9;
        }
        goto LABEL_10;
      case 2uLL:
        if (*(void *)(v3 + 16) != *(void *)(v3 + 24)) {
          goto LABEL_9;
        }
        goto LABEL_10;
      case 3uLL:
        goto LABEL_10;
      default:
        if ((v4 & 0xFF000000000000) == 0) {
          goto LABEL_10;
        }
LABEL_9:
        uint64_t result = dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
        if (!v1)
        {
LABEL_10:
          type metadata accessor for AMDPbEvaluationKeyMetadata(0);
          uint64_t result = UnknownStorage.traverse<A>(visitor:)();
        }
        break;
    }
  }
  return result;
}

Swift::Int AMDPbEvaluationKeyMetadata.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter((void (*)(void))type metadata accessor for AMDPbEvaluationKeyMetadata, &lazy protocol witness table cache variable for type AMDPbEvaluationKeyMetadata and conformance AMDPbEvaluationKeyMetadata, (void (*)(uint64_t))type metadata accessor for AMDPbEvaluationKeyMetadata);
}

uint64_t protocol witness for Message.init() in conformance AMDPbEvaluationKeyMetadata@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0xC000000000000000;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AMDPbEvaluationKeyMetadata()
{
  return 0xD000000000000021;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AMDPbEvaluationKeyMetadata()
{
  return AMDPbEvaluationKeyMetadata.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AMDPbEvaluationKeyMetadata()
{
  return AMDPbEvaluationKeyMetadata.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AMDPbEvaluationKeyMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbEvaluationKeyMetadata and conformance AMDPbEvaluationKeyMetadata, (void (*)(uint64_t))type metadata accessor for AMDPbEvaluationKeyMetadata);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbEvaluationKeyMetadata@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbEvaluationKeyMetadata._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AMDPbEvaluationKeyMetadata(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbEvaluationKeyMetadata and conformance AMDPbEvaluationKeyMetadata, (void (*)(uint64_t))type metadata accessor for AMDPbEvaluationKeyMetadata);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AMDPbEvaluationKeyMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbEvaluationKeyMetadata and conformance AMDPbEvaluationKeyMetadata, (void (*)(uint64_t))type metadata accessor for AMDPbEvaluationKeyMetadata);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *AMDPbPIRQuery.protoMessageName.unsafeMutableAddressor()
{
  return &static AMDPbPIRQuery.protoMessageName;
}

unint64_t static AMDPbPIRQuery.protoMessageName.getter()
{
  return 0xD000000000000014;
}

uint64_t AMDPbPIRQuery._protobuf_nameMap.unsafeMutableAddressor()
{
  return AMDPbFetchHEConfigs._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbPIRQuery._protobuf_nameMap);
}

uint64_t static AMDPbPIRQuery._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbPIRQuery._protobuf_nameMap, a1);
}

uint64_t AMDPbPIRQuery.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          break;
        case 2:
          closure #2 in AMDPbPIRQuery.decodeMessage<A>(decoder:)();
          break;
        case 3:
          closure #3 in AMDPbPIRQuery.decodeMessage<A>(decoder:)(a1, v5, a2, a3, (void (*)(void))type metadata accessor for AMDPbPIRQuery);
          break;
        case 4:
          dispatch thunk of Decoder.decodeSingularBytesField(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #2 in AMDPbPIRQuery.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t AMDPbPIRQuery.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(_DWORD *)v3 || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v4))
  {
    uint64_t result = closure #1 in AMDPbPIRQuery.traverse<A>(visitor:)(v3, a1, a2, a3);
    if (!v4)
    {
      closure #2 in AMDPbPIRQuery.traverse<A>(visitor:)(v3, a1, a2, a3, type metadata accessor for AMDPbPIRQuery);
      uint64_t v9 = *(void *)(v3 + 8);
      unint64_t v10 = *(void *)(v3 + 16);
      switch(v10 >> 62)
      {
        case 1uLL:
          if ((int)v9 != v9 >> 32) {
            goto LABEL_10;
          }
          break;
        case 2uLL:
          if (*(void *)(v9 + 16) != *(void *)(v9 + 24)) {
            goto LABEL_10;
          }
          break;
        case 3uLL:
          break;
        default:
          if ((v10 & 0xFF000000000000) != 0) {
LABEL_10:
          }
            dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
          break;
      }
      type metadata accessor for AMDPbPIRQuery(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t closure #1 in AMDPbPIRQuery.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AspirePirEncryptedIndices(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for AMDPbPIRQuery(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v12 + 28), (uint64_t)v7, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v7, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  }
  outlined init with take of AMDPbPIRConfig((uint64_t)v7, (uint64_t)v11, type metadata accessor for AspirePirEncryptedIndices);
  lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AspirePirEncryptedIndices and conformance AspirePirEncryptedIndices, (void (*)(uint64_t))type metadata accessor for AspirePirEncryptedIndices);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v11, type metadata accessor for AspirePirEncryptedIndices);
}

Swift::Int AMDPbPIRQuery.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter((void (*)(void))type metadata accessor for AMDPbPIRQuery, &lazy protocol witness table cache variable for type AMDPbPIRQuery and conformance AMDPbPIRQuery, (void (*)(uint64_t))type metadata accessor for AMDPbPIRQuery);
}

uint64_t protocol witness for Message.init() in conformance AMDPbPIRQuery@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = 0;
  *(_OWORD *)(a2 + 8) = xmmword_249E85DF0;
  UnknownStorage.init()();
  uint64_t v4 = a2 + *(int *)(a1 + 28);
  uint64_t v5 = type metadata accessor for AspirePirEncryptedIndices(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v6 = a2 + *(int *)(a1 + 32);
  uint64_t v7 = type metadata accessor for AMDPbEvaluationKey(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
  return v8(v6, 1, 1, v7);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AMDPbPIRQuery()
{
  return 0xD000000000000014;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AMDPbPIRQuery(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AMDPbPIRQuery.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AMDPbPIRQuery(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AMDPbPIRQuery.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AMDPbPIRQuery(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbPIRQuery and conformance AMDPbPIRQuery, (void (*)(uint64_t))type metadata accessor for AMDPbPIRQuery);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbPIRQuery@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbPIRQuery._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AMDPbPIRQuery(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbPIRQuery and conformance AMDPbPIRQuery, (void (*)(uint64_t))type metadata accessor for AMDPbPIRQuery);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AMDPbPIRQuery(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbPIRQuery and conformance AMDPbPIRQuery, (void (*)(uint64_t))type metadata accessor for AMDPbPIRQuery);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *AMDPbPIRReply.protoMessageName.unsafeMutableAddressor()
{
  return &static AMDPbPIRReply.protoMessageName;
}

unint64_t static AMDPbPIRReply.protoMessageName.getter()
{
  return 0xD000000000000014;
}

uint64_t AMDPbPIRReply._protobuf_nameMap.unsafeMutableAddressor()
{
  return AMDPbFetchHEConfigs._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbPIRReply._protobuf_nameMap);
}

uint64_t static AMDPbPIRReply._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbPIRReply._protobuf_nameMap, a1);
}

uint64_t AMDPbPIRReply.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AMDPbHEQueries.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(void))type metadata accessor for AspireHeSerializedCiphertextVec, &lazy protocol witness table cache variable for type AspireHeSerializedCiphertextVec and conformance AspireHeSerializedCiphertextVec, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedCiphertextVec);
}

uint64_t AMDPbPIRReply.traverse<A>(visitor:)()
{
  if (!*(void *)(*(void *)v0 + 16)
    || (type metadata accessor for AspireHeSerializedCiphertextVec(0),
        lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AspireHeSerializedCiphertextVec and conformance AspireHeSerializedCiphertextVec, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedCiphertextVec), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
  {
    type metadata accessor for AMDPbPIRReply(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int AMDPbPIRReply.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter((void (*)(void))type metadata accessor for AMDPbPIRReply, &lazy protocol witness table cache variable for type AMDPbPIRReply and conformance AMDPbPIRReply, (void (*)(uint64_t))type metadata accessor for AMDPbPIRReply);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AMDPbPIRReply()
{
  return 0xD000000000000014;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AMDPbPIRReply(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AMDPbPIRReply.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AMDPbPIRReply()
{
  return AMDPbPIRReply.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AMDPbPIRReply(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbPIRReply and conformance AMDPbPIRReply, (void (*)(uint64_t))type metadata accessor for AMDPbPIRReply);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbPIRReply@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbPIRReply._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AMDPbPIRReply(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbPIRReply and conformance AMDPbPIRReply, (void (*)(uint64_t))type metadata accessor for AMDPbPIRReply);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AMDPbPIRReply(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbPIRReply and conformance AMDPbPIRReply, (void (*)(uint64_t))type metadata accessor for AMDPbPIRReply);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AMDPbPIRReply(char *a1, char *a2)
{
  return specialized static AMDPbEvaluationKeys.== infix(_:_:)(a1, a2, specialized static Array<A>.== infix(_:_:), type metadata accessor for AMDPbPIRReply) & 1;
}

void *AMDPbPECQuery.protoMessageName.unsafeMutableAddressor()
{
  return &static AMDPbPECQuery.protoMessageName;
}

unint64_t static AMDPbPECQuery.protoMessageName.getter()
{
  return 0xD000000000000014;
}

uint64_t one-time initialization function for _protobuf_nameMap(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v7, a2);
  __swift_project_value_buffer(v7, (uint64_t)a2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v8 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v9 = *(void *)(*(void *)v8 + 72);
  unint64_t v10 = (*(unsigned __int8 *)(*(void *)v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v8 + 80);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_249E85E30;
  unint64_t v12 = v11 + v10;
  unint64_t v13 = v11 + v10 + v8[14];
  *(void *)(v11 + v10) = 1;
  *(void *)unint64_t v13 = a3;
  *(void *)(v13 + 8) = a4;
  *(unsigned char *)(v13 + 16) = 2;
  uint64_t v14 = *MEMORY[0x263F50728];
  uint64_t v15 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v16 = *(void (**)(void))(*(void *)(v15 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v16)(v13, v14, v15);
  unint64_t v17 = v12 + v9 + v8[14];
  *(void *)(v12 + v9) = 2;
  *(void *)unint64_t v17 = "query";
  *(void *)(v17 + 8) = 5;
  *(unsigned char *)(v17 + 16) = 2;
  v16();
  uint64_t v18 = (void *)(v12 + 2 * v9);
  uint64_t v19 = (char *)v18 + v8[14];
  *uint64_t v18 = 3;
  *(void *)uint64_t v19 = "evaluation_key";
  *((void *)v19 + 1) = 14;
  v19[16] = 2;
  v16();
  uint64_t v20 = (void *)(v12 + 3 * v9);
  uint64_t v21 = (char *)v20 + v8[14];
  *uint64_t v20 = 4;
  *(void *)uint64_t v21 = "configuration_hash";
  *((void *)v21 + 1) = 18;
  v21[16] = 2;
  v16();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t AMDPbPECQuery._protobuf_nameMap.unsafeMutableAddressor()
{
  return AMDPbFetchHEConfigs._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbPECQuery._protobuf_nameMap);
}

uint64_t static AMDPbPECQuery._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbPECQuery._protobuf_nameMap, a1);
}

uint64_t AMDPbPECQuery.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          dispatch thunk of Decoder.decodeRepeatedUInt32Field(value:)();
          break;
        case 2:
          closure #2 in AMDPbPECQuery.decodeMessage<A>(decoder:)();
          break;
        case 3:
          closure #3 in AMDPbPIRQuery.decodeMessage<A>(decoder:)(a1, v5, a2, a3, (void (*)(void))type metadata accessor for AMDPbPECQuery);
          break;
        case 4:
          dispatch thunk of Decoder.decodeSingularBytesField(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #2 in AMDPbPECQuery.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t closure #3 in AMDPbPIRQuery.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void))
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t AMDPbPECQuery.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(*v3 + 16)
    || (uint64_t result = dispatch thunk of Visitor.visitPackedUInt32Field(value:fieldNumber:)(), !v4))
  {
    uint64_t result = closure #1 in AMDPbPECQuery.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3);
    if (!v4)
    {
      closure #2 in AMDPbPIRQuery.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3, type metadata accessor for AMDPbPECQuery);
      uint64_t v9 = v3[1];
      unint64_t v10 = v3[2];
      switch(v10 >> 62)
      {
        case 1uLL:
          if ((int)v9 != v9 >> 32) {
            goto LABEL_10;
          }
          break;
        case 2uLL:
          if (*(void *)(v9 + 16) != *(void *)(v9 + 24)) {
            goto LABEL_10;
          }
          break;
        case 3uLL:
          break;
        default:
          if ((v10 & 0xFF000000000000) != 0) {
LABEL_10:
          }
            dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
          break;
      }
      type metadata accessor for AMDPbPECQuery(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t closure #1 in AMDPbPECQuery.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for AMDPbPECQuery(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v12 + 28), (uint64_t)v7, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v7, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
  }
  outlined init with take of AMDPbPIRConfig((uint64_t)v7, (uint64_t)v11, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
  lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AspireSimilaritySerializedCiphertextMatrix and conformance AspireSimilaritySerializedCiphertextMatrix, (void (*)(uint64_t))type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v11, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
}

uint64_t closure #2 in AMDPbPIRQuery.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  v16[3] = a4;
  v16[1] = a3;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKey?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for AMDPbEvaluationKey(0);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  unint64_t v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = a5(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v14 + 32), (uint64_t)v9, &demangling cache variable for type metadata for AMDPbEvaluationKey?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1) {
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v9, &demangling cache variable for type metadata for AMDPbEvaluationKey?);
  }
  outlined init with take of AMDPbPIRConfig((uint64_t)v9, (uint64_t)v13, type metadata accessor for AMDPbEvaluationKey);
  lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbEvaluationKey and conformance AMDPbEvaluationKey, (void (*)(uint64_t))type metadata accessor for AMDPbEvaluationKey);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v13, type metadata accessor for AMDPbEvaluationKey);
}

Swift::Int AMDPbPECQuery.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter((void (*)(void))type metadata accessor for AMDPbPECQuery, &lazy protocol witness table cache variable for type AMDPbPECQuery and conformance AMDPbPECQuery, (void (*)(uint64_t))type metadata accessor for AMDPbPECQuery);
}

uint64_t protocol witness for Message.init() in conformance AMDPbPECQuery@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = MEMORY[0x263F8EE78];
  *(_OWORD *)(a2 + 8) = xmmword_249E85DF0;
  UnknownStorage.init()();
  uint64_t v4 = a2 + *(int *)(a1 + 28);
  uint64_t v5 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v6 = a2 + *(int *)(a1 + 32);
  uint64_t v7 = type metadata accessor for AMDPbEvaluationKey(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
  return v8(v6, 1, 1, v7);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AMDPbPECQuery()
{
  return 0xD000000000000014;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AMDPbPECQuery(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AMDPbPECQuery.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AMDPbPECQuery(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AMDPbPECQuery.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AMDPbPECQuery(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbPECQuery and conformance AMDPbPECQuery, (void (*)(uint64_t))type metadata accessor for AMDPbPECQuery);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbPECQuery@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbPECQuery._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AMDPbPECQuery(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbPECQuery and conformance AMDPbPECQuery, (void (*)(uint64_t))type metadata accessor for AMDPbPECQuery);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AMDPbPECQuery(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbPECQuery and conformance AMDPbPECQuery, (void (*)(uint64_t))type metadata accessor for AMDPbPECQuery);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *AMDPbPECShardReply.protoMessageName.unsafeMutableAddressor()
{
  return &static AMDPbPECShardReply.protoMessageName;
}

unint64_t static AMDPbPECShardReply.protoMessageName.getter()
{
  return 0xD000000000000019;
}

uint64_t AMDPbPECShardReply._protobuf_nameMap.unsafeMutableAddressor()
{
  return AMDPbFetchHEConfigs._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbPECShardReply._protobuf_nameMap);
}

uint64_t static AMDPbPECShardReply._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbPECShardReply._protobuf_nameMap, a1);
}

uint64_t AMDPbPECShardReply.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 3:
          dispatch thunk of Decoder.decodeRepeatedBytesField(value:)();
          break;
        case 2:
          dispatch thunk of Decoder.decodeRepeatedUInt64Field(value:)();
          break;
        case 1:
          closure #1 in AMDPbPECShardReply.decodeMessage<A>(decoder:)();
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #1 in AMDPbPECShardReply.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t AMDPbPECShardReply.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = closure #1 in AMDPbPECShardReply.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3);
  if (!v4)
  {
    if (*(void *)(*v3 + 16)) {
      dispatch thunk of Visitor.visitPackedUInt64Field(value:fieldNumber:)();
    }
    if (*(void *)(v3[1] + 16)) {
      dispatch thunk of Visitor.visitRepeatedBytesField(value:fieldNumber:)();
    }
    type metadata accessor for AMDPbPECShardReply(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in AMDPbPECShardReply.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for AMDPbPECShardReply(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v12 + 28), (uint64_t)v7, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v7, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
  }
  outlined init with take of AMDPbPIRConfig((uint64_t)v7, (uint64_t)v11, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
  lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AspireSimilaritySerializedCiphertextMatrix and conformance AspireSimilaritySerializedCiphertextMatrix, (void (*)(uint64_t))type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v11, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
}

Swift::Int AMDPbPECShardReply.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter((void (*)(void))type metadata accessor for AMDPbPECShardReply, &lazy protocol witness table cache variable for type AMDPbPECShardReply and conformance AMDPbPECShardReply, (void (*)(uint64_t))type metadata accessor for AMDPbPECShardReply);
}

uint64_t protocol witness for Message.init() in conformance AMDPbPECShardReply@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = MEMORY[0x263F8EE78];
  *a2 = MEMORY[0x263F8EE78];
  a2[1] = v4;
  UnknownStorage.init()();
  uint64_t v5 = (char *)a2 + *(int *)(a1 + 28);
  uint64_t v6 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
  uint64_t v7 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
  return v7(v5, 1, 1, v6);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AMDPbPECShardReply()
{
  return 0xD000000000000019;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance AMDPbHEConfigsReply@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance AMDPbHEConfigsReply(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AMDPbPECShardReply()
{
  return AMDPbPECShardReply.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AMDPbPECShardReply(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AMDPbPECShardReply.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AMDPbPECShardReply(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbPECShardReply and conformance AMDPbPECShardReply, (void (*)(uint64_t))type metadata accessor for AMDPbPECShardReply);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbPECShardReply@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbPECShardReply._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AMDPbPECShardReply(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbPECShardReply and conformance AMDPbPECShardReply, (void (*)(uint64_t))type metadata accessor for AMDPbPECShardReply);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AMDPbPECShardReply(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbPECShardReply and conformance AMDPbPECShardReply, (void (*)(uint64_t))type metadata accessor for AMDPbPECShardReply);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *AMDPbPECReply.protoMessageName.unsafeMutableAddressor()
{
  return &static AMDPbPECReply.protoMessageName;
}

unint64_t static AMDPbPECReply.protoMessageName.getter()
{
  return 0xD000000000000014;
}

uint64_t one-time initialization function for _protobuf_nameMap(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  uint64_t v9 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v9, a2);
  __swift_project_value_buffer(v9, (uint64_t)a2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v10 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
              - 8);
  unint64_t v11 = (*(unsigned __int8 *)(*(void *)v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v10 + 80);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_249E85E40;
  unint64_t v13 = v12 + v11 + v10[14];
  *(void *)(v12 + v11) = 1;
  *(void *)unint64_t v13 = a3;
  *(void *)(v13 + 8) = a4;
  *(unsigned char *)(v13 + 16) = 2;
  uint64_t v14 = *a5;
  uint64_t v15 = type metadata accessor for _NameMap.NameDescription();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 104))(v13, v14, v15);
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t AMDPbPECReply._protobuf_nameMap.unsafeMutableAddressor()
{
  return AMDPbFetchHEConfigs._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbPECReply._protobuf_nameMap);
}

uint64_t AMDPbFetchHEConfigs._protobuf_nameMap.unsafeMutableAddressor(void *a1, uint64_t a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for _NameMap();
  return __swift_project_value_buffer(v3, a2);
}

uint64_t static AMDPbPECReply._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbPECReply._protobuf_nameMap, a1);
}

uint64_t static AMDPbFetchHEConfigs._protobuf_nameMap.getter@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for _NameMap();
  uint64_t v6 = __swift_project_value_buffer(v5, a2);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v7(a3, v6, v5);
}

uint64_t AMDPbPECReply.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AMDPbHEQueries.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(void))type metadata accessor for AMDPbPECShardReply, &lazy protocol witness table cache variable for type AMDPbPECShardReply and conformance AMDPbPECShardReply, (void (*)(uint64_t))type metadata accessor for AMDPbPECShardReply);
}

uint64_t AMDPbHEQueries.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void), unint64_t *a5, void (*a6)(uint64_t))
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v6)
  {
    while ((v10 & 1) == 0)
    {
      if (result == 1)
      {
        a4(0);
        lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(a5, a6);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t AMDPbPECReply.traverse<A>(visitor:)()
{
  if (!*(void *)(*(void *)v0 + 16)
    || (type metadata accessor for AMDPbPECShardReply(0),
        lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbPECShardReply and conformance AMDPbPECShardReply, (void (*)(uint64_t))type metadata accessor for AMDPbPECShardReply), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
  {
    type metadata accessor for AMDPbPECReply(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int AMDPbPECReply.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter((void (*)(void))type metadata accessor for AMDPbPECReply, &lazy protocol witness table cache variable for type AMDPbPECReply and conformance AMDPbPECReply, (void (*)(uint64_t))type metadata accessor for AMDPbPECReply);
}

Swift::Int AMDPbFetchHEConfigs.hashValue.getter(void (*a1)(void), unint64_t *a2, void (*a3)(uint64_t))
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Message.init() in conformance AMDPbPECReply@<X0>(void *a1@<X8>)
{
  *a1 = MEMORY[0x263F8EE78];
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AMDPbPECReply()
{
  return 0xD000000000000014;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance AMDPbHEConfig@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance AMDPbHEConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AMDPbPECReply(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AMDPbPECReply.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AMDPbPECReply()
{
  return AMDPbPECReply.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AMDPbPECReply(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbPECReply and conformance AMDPbPECReply, (void (*)(uint64_t))type metadata accessor for AMDPbPECReply);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbPECReply@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbPECReply._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs@<X0>(void *a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for _NameMap();
  uint64_t v6 = __swift_project_value_buffer(v5, a2);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v7(a3, v6, v5);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AMDPbPECReply(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbPECReply and conformance AMDPbPECReply, (void (*)(uint64_t))type metadata accessor for AMDPbPECReply);
  return MEMORY[0x270F44CC0](a1, v2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AMDPbFetchHEConfigs()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AMDPbPECReply(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbPECReply and conformance AMDPbPECReply, (void (*)(uint64_t))type metadata accessor for AMDPbPECReply);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AMDPbFetchHEConfigs()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AMDPbPECReply(char *a1, char *a2)
{
  return specialized static AMDPbEvaluationKeys.== infix(_:_:)(a1, a2, specialized static Array<A>.== infix(_:_:), type metadata accessor for AMDPbPECReply) & 1;
}

uint64_t specialized static AMDPbEvaluationKeyMetadata.== infix(_:_:)(char *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  char v10 = (char *)&v16 - v9;
  if (*(void *)a1 == *(void *)a2
    && (specialized static Data.== infix(_:_:)(*((void *)a1 + 1), *((void *)a1 + 2), *((void *)a2 + 1), *((void *)a2 + 2)) & 1) != 0)
  {
    uint64_t v11 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v12(v10, &a1[*(int *)(v11 + 24)], v4);
    v12(v8, &a2[*(int *)(v11 + 24)], v4);
    lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
    v14(v8, v4);
    v14(v10, v4);
  }
  else
  {
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t specialized static AMDPbPIRShardConfig.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  char v10 = (char *)&v16 - v9;
  if (*(void *)a1 == *(void *)a2
    && *(void *)(a1 + 8) == *(void *)(a2 + 8)
    && specialized static Array<A>.== infix(_:_:)(*(void **)(a1 + 16), *(void **)(a2 + 16)))
  {
    uint64_t v11 = type metadata accessor for AMDPbPIRShardConfig(0);
    uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v12(v10, a1 + *(int *)(v11 + 28), v4);
    v12(v8, a2 + *(int *)(v11 + 28), v4);
    lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
    v14(v8, v4);
    v14(v10, v4);
  }
  else
  {
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t specialized static AMDPbHEConfigsReply.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  char v10 = (char *)&v16 - v9;
  if ((specialized static Dictionary<>.== infix(_:_:)(*a1, *a2) & 1) != 0
    && (specialized static Array<A>.== infix(_:_:)(a1[1], a2[1]) & 1) != 0)
  {
    uint64_t v11 = type metadata accessor for AMDPbHEConfigsReply(0);
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v12(v10, (char *)a1 + *(int *)(v11 + 24), v4);
    v12(v8, (char *)a2 + *(int *)(v11 + 24), v4);
    lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
    v14(v8, v4);
    v14(v10, v4);
  }
  else
  {
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t specialized static AMDPbPECShardReply.== infix(_:_:)(char *a1, void **a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v47 = *(void *)(v4 - 8);
  uint64_t v48 = v4;
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v46 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v45 = (char *)&v44 - v7;
  uint64_t v8 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v51 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireSimilaritySerializedCiphertextMatrix?, AspireSimilaritySerializedCiphertextMatrix?));
  uint64_t v12 = v11 - 8;
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
  uint64_t v16 = MEMORY[0x270FA5388](v15 - 8);
  uint64_t v18 = (char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x270FA5388](v16);
  uint64_t v21 = (char *)&v44 - v20;
  MEMORY[0x270FA5388](v19);
  uint64_t v23 = (char *)&v44 - v22;
  uint64_t v24 = type metadata accessor for AMDPbPECShardReply(0);
  uint64_t v25 = *(int *)(v24 + 28);
  uint64_t v49 = a1;
  uint64_t v26 = (uint64_t)&a1[v25];
  uint64_t v27 = v24;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v26, (uint64_t)v23, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
  uint64_t v28 = *(int *)(v27 + 28);
  uint64_t v50 = a2;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)a2 + v28, (uint64_t)v21, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
  uint64_t v29 = (uint64_t)&v14[*(int *)(v12 + 56)];
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v23, (uint64_t)v14, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21, v29, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
  uint64_t v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v30((uint64_t)v14, 1, v8) != 1)
  {
    uint64_t v31 = (uint64_t)v51;
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v14, (uint64_t)v18, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
    if (v30(v29, 1, v8) != 1)
    {
      outlined init with take of AMDPbPIRConfig(v29, v31, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
      char v32 = static AspireSimilaritySerializedCiphertextMatrix.== infix(_:_:)((uint64_t)v18, v31);
      outlined destroy of AMDPbHEConfig.OneOf_Config(v31, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v23, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
      outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v18, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v14, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
      if (v32) {
        goto LABEL_8;
      }
LABEL_11:
      char v41 = 0;
      return v41 & 1;
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v23, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
    outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v18, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
LABEL_6:
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v14, &demangling cache variable for type metadata for (AspireSimilaritySerializedCiphertextMatrix?, AspireSimilaritySerializedCiphertextMatrix?));
    goto LABEL_11;
  }
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v23, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
  if (v30(v29, 1, v8) != 1) {
    goto LABEL_6;
  }
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v14, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
LABEL_8:
  uint64_t v33 = v49;
  uint64_t v34 = v50;
  if (!specialized static Array<A>.== infix(_:_:)(*(void **)v49, *v50)
    || (specialized static Array<A>.== infix(_:_:)(*((void *)v33 + 1), (uint64_t)v34[1]) & 1) == 0)
  {
    goto LABEL_11;
  }
  uint64_t v36 = v47;
  uint64_t v35 = v48;
  uint64_t v37 = *(void (**)(char *, char *, uint64_t))(v47 + 16);
  uint64_t v38 = v45;
  v37(v45, &v33[*(int *)(v27 + 24)], v48);
  uint64_t v39 = (char *)v34 + *(int *)(v27 + 24);
  uint64_t v40 = v46;
  v37(v46, v39, v35);
  lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
  char v41 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v42 = *(void (**)(char *, uint64_t))(v36 + 8);
  v42(v40, v35);
  v42(v38, v35);
  return v41 & 1;
}

uint64_t specialized static AMDPbEvaluationKey.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v68 = a1;
  uint64_t v69 = a2;
  uint64_t v61 = type metadata accessor for UnknownStorage();
  uint64_t v59 = *(void *)(v61 - 8);
  uint64_t v2 = MEMORY[0x270FA5388](v61);
  uint64_t v58 = (char *)&v56 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v2);
  uint64_t v57 = (char *)&v56 - v4;
  uint64_t v5 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  uint64_t v64 = *(void *)(v5 - 8);
  uint64_t v65 = v5;
  MEMORY[0x270FA5388](v5);
  uint64_t v56 = (uint64_t)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireHeSerializedEvaluationKey?, AspireHeSerializedEvaluationKey?));
  MEMORY[0x270FA5388](v62);
  uint64_t v66 = (uint64_t)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  uint64_t v9 = MEMORY[0x270FA5388](v8 - 8);
  uint64_t v60 = (uint64_t)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v67 = (uint64_t)&v56 - v12;
  MEMORY[0x270FA5388](v11);
  uint64_t v63 = (uint64_t)&v56 - v13;
  uint64_t v14 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (uint64_t *)((char *)&v56 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AMDPbEvaluationKeyMetadata?, AMDPbEvaluationKeyMetadata?));
  uint64_t v19 = v18 - 8;
  MEMORY[0x270FA5388](v18);
  uint64_t v21 = (char *)&v56 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
  uint64_t v23 = MEMORY[0x270FA5388](v22 - 8);
  uint64_t v25 = (uint64_t *)((char *)&v56 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v26 = MEMORY[0x270FA5388](v23);
  uint64_t v28 = (char *)&v56 - v27;
  MEMORY[0x270FA5388](v26);
  uint64_t v30 = (char *)&v56 - v29;
  uint64_t v31 = type metadata accessor for AMDPbEvaluationKey(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v68 + *(int *)(v31 + 20), (uint64_t)v30, &demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v69 + *(int *)(v31 + 20), (uint64_t)v28, &demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
  uint64_t v32 = (uint64_t)&v21[*(int *)(v19 + 56)];
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v30, (uint64_t)v21, &demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v28, v32, &demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
  uint64_t v33 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  if (v33((uint64_t)v21, 1, v14) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v28, &demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v30, &demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
    if (v33(v32, 1, v14) == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21, &demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
      goto LABEL_4;
    }
    goto LABEL_9;
  }
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21, (uint64_t)v25, &demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
  if (v33(v32, 1, v14) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v28, &demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v30, &demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
    outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v25, type metadata accessor for AMDPbEvaluationKeyMetadata);
LABEL_9:
    uint64_t v42 = &demangling cache variable for type metadata for (AMDPbEvaluationKeyMetadata?, AMDPbEvaluationKeyMetadata?);
    uint64_t v43 = (uint64_t)v21;
LABEL_18:
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v43, v42);
    goto LABEL_19;
  }
  outlined init with take of AMDPbPIRConfig(v32, (uint64_t)v17, type metadata accessor for AMDPbEvaluationKeyMetadata);
  if (*v25 != *v17 || (specialized static Data.== infix(_:_:)(v25[1], v25[2], v17[1], v17[2]) & 1) == 0)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v17, type metadata accessor for AMDPbEvaluationKeyMetadata);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v28, &demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v30, &demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
    outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v25, type metadata accessor for AMDPbEvaluationKeyMetadata);
    uint64_t v43 = (uint64_t)v21;
    uint64_t v42 = &demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?;
    goto LABEL_18;
  }
  lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
  char v44 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v17, type metadata accessor for AMDPbEvaluationKeyMetadata);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v28, &demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v30, &demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
  outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v25, type metadata accessor for AMDPbEvaluationKeyMetadata);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21, &demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
  if ((v44 & 1) == 0) {
    goto LABEL_19;
  }
LABEL_4:
  uint64_t v34 = v68;
  uint64_t v35 = v63;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v68 + *(int *)(v31 + 24), v63, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  uint64_t v36 = v69;
  uint64_t v37 = v67;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v69 + *(int *)(v31 + 24), v67, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  uint64_t v38 = v66;
  uint64_t v39 = v66 + *(int *)(v62 + 48);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v35, v66, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v37, v39, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  uint64_t v40 = v65;
  char v41 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v64 + 48);
  if (v41(v38, 1, v65) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v37, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v35, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
    if (v41(v39, 1, v40) == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v38, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
LABEL_22:
      uint64_t v50 = v59;
      uint64_t v51 = *(void (**)(char *, uint64_t, uint64_t))(v59 + 16);
      uint64_t v52 = v57;
      uint64_t v53 = v61;
      v51(v57, v34, v61);
      uint64_t v54 = v58;
      v51(v58, v36, v53);
      lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
      char v46 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v55 = *(void (**)(char *, uint64_t))(v50 + 8);
      v55(v54, v53);
      v55(v52, v53);
      return v46 & 1;
    }
    goto LABEL_17;
  }
  uint64_t v45 = v60;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v38, v60, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  if (v41(v39, 1, v40) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v67, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v35, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
    outlined destroy of AMDPbHEConfig.OneOf_Config(v45, type metadata accessor for AspireHeSerializedEvaluationKey);
LABEL_17:
    uint64_t v42 = &demangling cache variable for type metadata for (AspireHeSerializedEvaluationKey?, AspireHeSerializedEvaluationKey?);
    uint64_t v43 = v38;
    goto LABEL_18;
  }
  uint64_t v48 = v56;
  outlined init with take of AMDPbPIRConfig(v39, v56, type metadata accessor for AspireHeSerializedEvaluationKey);
  char v49 = specialized static AspireHeSerializedEvaluationKey.== infix(_:_:)(v45, v48);
  outlined destroy of AMDPbHEConfig.OneOf_Config(v48, type metadata accessor for AspireHeSerializedEvaluationKey);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v67, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v35, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  outlined destroy of AMDPbHEConfig.OneOf_Config(v45, type metadata accessor for AspireHeSerializedEvaluationKey);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v38, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  if (v49) {
    goto LABEL_22;
  }
LABEL_19:
  char v46 = 0;
  return v46 & 1;
}

uint64_t specialized static AMDPbHEKeyStatus.== infix(_:_:)(char *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v49 = *(void *)(v4 - 8);
  uint64_t v50 = v4;
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v43 - v8;
  uint64_t v10 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  uint64_t v51 = *(void *)(v10 - 8);
  uint64_t v52 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireHeEvaluationKeyConfig?, AspireHeEvaluationKeyConfig?));
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  uint64_t v17 = MEMORY[0x270FA5388](v16 - 8);
  uint64_t v18 = MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v43 - v19;
  MEMORY[0x270FA5388](v18);
  uint64_t v23 = (char *)&v43 - v22;
  if (*(void *)a1 != *a2) {
    goto LABEL_8;
  }
  uint64_t v24 = a1;
  uint64_t v47 = v7;
  uint64_t v48 = v21;
  char v44 = v12;
  char v46 = v9;
  uint64_t v25 = type metadata accessor for AMDPbHEKeyStatus(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)&a1[*(int *)(v25 + 28)], (uint64_t)v23, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  uint64_t v45 = v25;
  uint64_t v26 = a2;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)a2 + *(int *)(v25 + 28), (uint64_t)v20, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  uint64_t v27 = (uint64_t)&v15[*(int *)(v13 + 48)];
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v23, (uint64_t)v15, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v20, v27, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  uint64_t v28 = v52;
  uint64_t v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v51 + 48);
  if (v29((uint64_t)v15, 1, v52) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v20, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v23, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
    if (v29(v27, 1, v28) == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v15, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
      goto LABEL_11;
    }
    goto LABEL_7;
  }
  uint64_t v30 = v48;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v15, v48, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  if (v29(v27, 1, v28) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v20, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v23, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
    outlined destroy of AMDPbHEConfig.OneOf_Config(v30, type metadata accessor for AspireHeEvaluationKeyConfig);
LABEL_7:
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v15, &demangling cache variable for type metadata for (AspireHeEvaluationKeyConfig?, AspireHeEvaluationKeyConfig?));
LABEL_8:
    char v31 = 0;
    return v31 & 1;
  }
  uint64_t v33 = (uint64_t)v44;
  outlined init with take of AMDPbPIRConfig(v27, (uint64_t)v44, type metadata accessor for AspireHeEvaluationKeyConfig);
  char v34 = static AspireHeEvaluationKeyConfig.== infix(_:_:)(v30, v33);
  outlined destroy of AMDPbHEConfig.OneOf_Config(v33, type metadata accessor for AspireHeEvaluationKeyConfig);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v20, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v23, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  outlined destroy of AMDPbHEConfig.OneOf_Config(v30, type metadata accessor for AspireHeEvaluationKeyConfig);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v15, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  if ((v34 & 1) == 0) {
    goto LABEL_8;
  }
LABEL_11:
  if (*((void *)v24 + 1) == v26[1] && *((void *)v24 + 2) == v26[2]
    || (char v31 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    uint64_t v35 = v45;
    uint64_t v36 = v46;
    uint64_t v38 = v49;
    uint64_t v37 = v50;
    uint64_t v39 = *(void (**)(char *, char *, uint64_t))(v49 + 16);
    v39(v46, &v24[*(int *)(v45 + 24)], v50);
    uint64_t v40 = (char *)v26 + *(int *)(v35 + 24);
    char v41 = v47;
    v39(v47, v40, v37);
    lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    char v31 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v42 = *(void (**)(char *, uint64_t))(v38 + 8);
    v42(v41, v37);
    v42(v36, v37);
  }
  return v31 & 1;
}

uint64_t specialized static AMDPbPECConfig.== infix(_:_:)(void *a1, void *a2)
{
  v76 = a1;
  uint64_t v77 = a2;
  uint64_t v2 = type metadata accessor for UnknownStorage();
  uint64_t v65 = *(void *)(v2 - 8);
  uint64_t v66 = v2;
  uint64_t v3 = MEMORY[0x270FA5388](v2);
  uint64_t v64 = (char *)&v62 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v63 = (char *)&v62 - v5;
  uint64_t v6 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  uint64_t v70 = *(void *)(v6 - 8);
  uint64_t v71 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v67 = (uint64_t)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireSimilarityPlaintextPacking?, AspireSimilarityPlaintextPacking?));
  MEMORY[0x270FA5388](v69);
  uint64_t v72 = (uint64_t)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  uint64_t v10 = MEMORY[0x270FA5388](v9 - 8);
  uint64_t v68 = (uint64_t)&v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v74 = (uint64_t)&v62 - v13;
  MEMORY[0x270FA5388](v12);
  uint64_t v75 = (uint64_t)&v62 - v14;
  uint64_t v15 = type metadata accessor for AspireHeEncryptionParameters(0);
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v62 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireHeEncryptionParameters?, AspireHeEncryptionParameters?));
  uint64_t v20 = v19 - 8;
  MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)&v62 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  uint64_t v24 = MEMORY[0x270FA5388](v23 - 8);
  uint64_t v26 = (char *)&v62 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = MEMORY[0x270FA5388](v24);
  uint64_t v29 = (char *)&v62 - v28;
  MEMORY[0x270FA5388](v27);
  char v31 = (char *)&v62 - v30;
  uint64_t v32 = type metadata accessor for AMDPbPECConfig(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v76 + *(int *)(v32 + 36), (uint64_t)v31, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  uint64_t v73 = v32;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v77 + *(int *)(v32 + 36), (uint64_t)v29, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  uint64_t v33 = (uint64_t)&v22[*(int *)(v20 + 56)];
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v31, (uint64_t)v22, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v29, v33, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  char v34 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  if (v34((uint64_t)v22, 1, v15) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v29, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v31, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    if (v34(v33, 1, v15) == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v22, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      goto LABEL_9;
    }
LABEL_6:
    uint64_t v35 = &demangling cache variable for type metadata for (AspireHeEncryptionParameters?, AspireHeEncryptionParameters?);
    uint64_t v36 = (uint64_t)v22;
LABEL_7:
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v36, v35);
    goto LABEL_27;
  }
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v22, (uint64_t)v26, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  if (v34(v33, 1, v15) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v29, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v31, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v26, type metadata accessor for AspireHeEncryptionParameters);
    goto LABEL_6;
  }
  outlined init with take of AMDPbPIRConfig(v33, (uint64_t)v18, type metadata accessor for AspireHeEncryptionParameters);
  char v37 = static AspireHeEncryptionParameters.== infix(_:_:)(v26, v18);
  outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v18, type metadata accessor for AspireHeEncryptionParameters);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v29, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v31, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v26, type metadata accessor for AspireHeEncryptionParameters);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v22, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  if ((v37 & 1) == 0) {
    goto LABEL_27;
  }
LABEL_9:
  uint64_t v39 = v76;
  uint64_t v38 = v77;
  if (*v76 != *v77) {
    goto LABEL_27;
  }
  uint64_t v40 = v73;
  uint64_t v41 = v75;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v76 + *(int *)(v73 + 40), v75, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  uint64_t v42 = v74;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v38 + *(int *)(v40 + 40), v74, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  uint64_t v43 = v72;
  uint64_t v44 = v72 + *(int *)(v69 + 48);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v41, v72, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v42, v44, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  uint64_t v45 = v71;
  char v46 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v70 + 48);
  if (v46(v43, 1, v71) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v42, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v41, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    if (v46(v44, 1, v45) == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v43, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
      goto LABEL_17;
    }
    goto LABEL_15;
  }
  uint64_t v47 = v68;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v43, v68, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  if (v46(v44, 1, v45) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v74, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v75, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    outlined destroy of AMDPbHEConfig.OneOf_Config(v47, type metadata accessor for AspireSimilarityPlaintextPacking);
LABEL_15:
    uint64_t v35 = &demangling cache variable for type metadata for (AspireSimilarityPlaintextPacking?, AspireSimilarityPlaintextPacking?);
    uint64_t v36 = v43;
    goto LABEL_7;
  }
  uint64_t v48 = v67;
  outlined init with take of AMDPbPIRConfig(v44, v67, type metadata accessor for AspireSimilarityPlaintextPacking);
  char v49 = static AspireSimilarityPlaintextPacking.== infix(_:_:)(v47, v48);
  outlined destroy of AMDPbHEConfig.OneOf_Config(v48, type metadata accessor for AspireSimilarityPlaintextPacking);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v74, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v75, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  outlined destroy of AMDPbHEConfig.OneOf_Config(v47, type metadata accessor for AspireSimilarityPlaintextPacking);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v43, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  if ((v49 & 1) == 0) {
    goto LABEL_27;
  }
LABEL_17:
  if (*((_DWORD *)v39 + 2) != *((_DWORD *)v38 + 2)) {
    goto LABEL_27;
  }
  if (v39[3])
  {
    if (v38[3]) {
      goto LABEL_25;
    }
    uint64_t v50 = 0;
LABEL_24:
    if (v50 == v38[2]) {
      goto LABEL_25;
    }
LABEL_27:
    char v59 = 0;
    return v59 & 1;
  }
  uint64_t v50 = v39[2];
  if ((v38[3] & 1) == 0) {
    goto LABEL_24;
  }
  if (v50) {
    goto LABEL_27;
  }
LABEL_25:
  if ((specialized static Data.== infix(_:_:)(v39[4], v39[5], v38[4], v38[5]) & 1) == 0) {
    goto LABEL_27;
  }
  uint64_t v51 = v73;
  uint64_t v52 = (char *)v39 + *(int *)(v73 + 32);
  uint64_t v54 = v65;
  uint64_t v53 = v66;
  uint64_t v55 = *(void (**)(char *, char *, uint64_t))(v65 + 16);
  uint64_t v56 = v63;
  v55(v63, v52, v66);
  uint64_t v57 = (char *)v38 + *(int *)(v51 + 32);
  uint64_t v58 = v64;
  v55(v64, v57, v53);
  lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
  char v59 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v60 = *(void (**)(char *, uint64_t))(v54 + 8);
  v60(v58, v53);
  v60(v56, v53);
  return v59 & 1;
}

uint64_t specialized static AMDPbEvaluationKeys.== infix(_:_:)(char *a1, char *a2, uint64_t (*a3)(void, void), uint64_t (*a4)(void))
{
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v20 - v13;
  if (a3(*(void *)a1, *(void *)a2))
  {
    uint64_t v15 = a4(0);
    uint64_t v16 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
    v16(v14, &a1[*(int *)(v15 + 20)], v8);
    v16(v12, &a2[*(int *)(v15 + 20)], v8);
    lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    char v17 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v18 = *(void (**)(char *, uint64_t))(v9 + 8);
    v18(v12, v8);
    v18(v14, v8);
  }
  else
  {
    char v17 = 0;
  }
  return v17 & 1;
}

uint64_t specialized static AMDPbPECQuery.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v76 = *(void *)(v4 - 8);
  uint64_t v77 = v4;
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v75 = (char *)&v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v74 = (char *)&v69 - v7;
  uint64_t v8 = type metadata accessor for AMDPbEvaluationKey(0);
  uint64_t v82 = *(void *)(v8 - 8);
  uint64_t v83 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v78 = (uint64_t)&v69 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AMDPbEvaluationKey?, AMDPbEvaluationKey?));
  MEMORY[0x270FA5388](v81);
  uint64_t v84 = (uint64_t)&v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKey?);
  uint64_t v12 = MEMORY[0x270FA5388](v11 - 8);
  uint64_t v80 = (uint64_t)&v69 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v69 - v15;
  MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v69 - v17;
  uint64_t v19 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
  uint64_t v85 = *(void *)(v19 - 8);
  uint64_t v86 = v19;
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v69 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireSimilaritySerializedCiphertextMatrix?, AspireSimilaritySerializedCiphertextMatrix?));
  MEMORY[0x270FA5388](v22);
  uint64_t v24 = (char *)&v69 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
  uint64_t v26 = MEMORY[0x270FA5388](v25 - 8);
  uint64_t v28 = (char *)&v69 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = MEMORY[0x270FA5388](v26);
  char v31 = (char *)&v69 - v30;
  MEMORY[0x270FA5388](v29);
  uint64_t v33 = (char *)&v69 - v32;
  if (!specialized static Array<A>.== infix(_:_:)(*a1, *a2)) {
    goto LABEL_16;
  }
  uint64_t v73 = v28;
  uint64_t v69 = v21;
  uint64_t v70 = v18;
  uint64_t v79 = v16;
  uint64_t v34 = type metadata accessor for AMDPbPECQuery(0);
  uint64_t v35 = *(int *)(v34 + 28);
  uint64_t v71 = a1;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)a1 + v35, (uint64_t)v33, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
  uint64_t v36 = *(int *)(v34 + 28);
  uint64_t v72 = a2;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)a2 + v36, (uint64_t)v31, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
  uint64_t v37 = (uint64_t)&v24[*(int *)(v22 + 48)];
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v33, (uint64_t)v24, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v31, v37, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
  uint64_t v38 = v86;
  uint64_t v39 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v85 + 48);
  if (v39((uint64_t)v24, 1, v86) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v31, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v33, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
    int v40 = v39(v37, 1, v38);
    uint64_t v41 = (uint64_t)v79;
    if (v40 == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
      goto LABEL_9;
    }
LABEL_7:
    uint64_t v44 = &demangling cache variable for type metadata for (AspireSimilaritySerializedCiphertextMatrix?, AspireSimilaritySerializedCiphertextMatrix?);
    uint64_t v45 = (uint64_t)v24;
LABEL_15:
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v45, v44);
    goto LABEL_16;
  }
  uint64_t v42 = (uint64_t)v73;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, (uint64_t)v73, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
  int v43 = v39(v37, 1, v38);
  uint64_t v41 = (uint64_t)v79;
  if (v43 == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v31, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v33, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
    outlined destroy of AMDPbHEConfig.OneOf_Config(v42, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
    goto LABEL_7;
  }
  uint64_t v46 = (uint64_t)v69;
  outlined init with take of AMDPbPIRConfig(v37, (uint64_t)v69, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
  char v47 = specialized static AspireSimilaritySerializedCiphertextMatrix.== infix(_:_:)(v42, v46);
  outlined destroy of AMDPbHEConfig.OneOf_Config(v46, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v31, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v33, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
  outlined destroy of AMDPbHEConfig.OneOf_Config(v42, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
  if ((v47 & 1) == 0) {
    goto LABEL_16;
  }
LABEL_9:
  uint64_t v49 = (uint64_t)v70;
  uint64_t v48 = v71;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v71 + *(int *)(v34 + 32), (uint64_t)v70, &demangling cache variable for type metadata for AMDPbEvaluationKey?);
  uint64_t v86 = v34;
  uint64_t v50 = v72;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v72 + *(int *)(v34 + 32), v41, &demangling cache variable for type metadata for AMDPbEvaluationKey?);
  uint64_t v51 = v84;
  uint64_t v52 = v84 + *(int *)(v81 + 48);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v49, v84, &demangling cache variable for type metadata for AMDPbEvaluationKey?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v41, v52, &demangling cache variable for type metadata for AMDPbEvaluationKey?);
  uint64_t v53 = v83;
  uint64_t v54 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v82 + 48);
  if (v54(v51, 1, v83) != 1)
  {
    uint64_t v55 = v80;
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v51, v80, &demangling cache variable for type metadata for AMDPbEvaluationKey?);
    if (v54(v52, 1, v53) != 1)
    {
      uint64_t v58 = v78;
      outlined init with take of AMDPbPIRConfig(v52, v78, type metadata accessor for AMDPbEvaluationKey);
      char v59 = specialized static AMDPbEvaluationKey.== infix(_:_:)(v55, v58);
      outlined destroy of AMDPbHEConfig.OneOf_Config(v58, type metadata accessor for AMDPbEvaluationKey);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v79, &demangling cache variable for type metadata for AMDPbEvaluationKey?);
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v49, &demangling cache variable for type metadata for AMDPbEvaluationKey?);
      outlined destroy of AMDPbHEConfig.OneOf_Config(v55, type metadata accessor for AMDPbEvaluationKey);
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v51, &demangling cache variable for type metadata for AMDPbEvaluationKey?);
      if ((v59 & 1) == 0) {
        goto LABEL_16;
      }
      goto LABEL_19;
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v79, &demangling cache variable for type metadata for AMDPbEvaluationKey?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v49, &demangling cache variable for type metadata for AMDPbEvaluationKey?);
    outlined destroy of AMDPbHEConfig.OneOf_Config(v55, type metadata accessor for AMDPbEvaluationKey);
    goto LABEL_14;
  }
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v41, &demangling cache variable for type metadata for AMDPbEvaluationKey?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v49, &demangling cache variable for type metadata for AMDPbEvaluationKey?);
  if (v54(v52, 1, v53) != 1)
  {
LABEL_14:
    uint64_t v44 = &demangling cache variable for type metadata for (AMDPbEvaluationKey?, AMDPbEvaluationKey?);
    uint64_t v45 = v51;
    goto LABEL_15;
  }
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v51, &demangling cache variable for type metadata for AMDPbEvaluationKey?);
LABEL_19:
  if (specialized static Data.== infix(_:_:)(v48[1], v48[2], v50[1], v50[2]))
  {
    uint64_t v60 = v86;
    uint64_t v61 = (uint64_t)v48 + *(int *)(v86 + 24);
    uint64_t v63 = v76;
    uint64_t v62 = v77;
    uint64_t v64 = *(void (**)(char *, uint64_t, uint64_t))(v76 + 16);
    uint64_t v65 = v74;
    v64(v74, v61, v77);
    uint64_t v66 = (uint64_t)v50 + *(int *)(v60 + 24);
    uint64_t v67 = v75;
    v64(v75, v66, v62);
    lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    char v56 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v68 = *(void (**)(char *, uint64_t))(v63 + 8);
    v68(v67, v62);
    v68(v65, v62);
    return v56 & 1;
  }
LABEL_16:
  char v56 = 0;
  return v56 & 1;
}

uint64_t specialized static AMDPbHEConfig.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v43 = *(void *)(v4 - 8);
  uint64_t v44 = v4;
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v42 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v41 = (char *)&v37 - v7;
  uint64_t v8 = type metadata accessor for AMDPbHEConfig.OneOf_Config(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v38 = (uint64_t)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AMDPbHEConfig.OneOf_Config?, AMDPbHEConfig.OneOf_Config?));
  uint64_t v12 = v11 - 8;
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
  uint64_t v16 = MEMORY[0x270FA5388](v15 - 8);
  uint64_t v18 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x270FA5388](v16);
  uint64_t v21 = (char *)&v37 - v20;
  MEMORY[0x270FA5388](v19);
  uint64_t v23 = (char *)&v37 - v22;
  uint64_t v39 = a1;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)&v37 - v22, &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
  uint64_t v40 = a2;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a2, (uint64_t)v21, &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
  uint64_t v24 = (uint64_t)&v14[*(int *)(v12 + 56)];
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v23, (uint64_t)v14, &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21, v24, &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
  uint64_t v25 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v25((uint64_t)v14, 1, v8) != 1)
  {
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v14, (uint64_t)v18, &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
    if (v25(v24, 1, v8) != 1)
    {
      uint64_t v26 = v38;
      outlined init with take of AMDPbPIRConfig(v24, v38, type metadata accessor for AMDPbHEConfig.OneOf_Config);
      char v27 = specialized static AMDPbHEConfig.OneOf_Config.== infix(_:_:)((uint64_t)v18, v26);
      outlined destroy of AMDPbHEConfig.OneOf_Config(v26, type metadata accessor for AMDPbHEConfig.OneOf_Config);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21, &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v23, &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
      outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v18, type metadata accessor for AMDPbHEConfig.OneOf_Config);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v14, &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
      if (v27) {
        goto LABEL_8;
      }
LABEL_9:
      char v34 = 0;
      return v34 & 1;
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21, &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v23, &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
    outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v18, type metadata accessor for AMDPbHEConfig.OneOf_Config);
LABEL_6:
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v14, &demangling cache variable for type metadata for (AMDPbHEConfig.OneOf_Config?, AMDPbHEConfig.OneOf_Config?));
    goto LABEL_9;
  }
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21, &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v23, &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
  if (v25(v24, 1, v8) != 1) {
    goto LABEL_6;
  }
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v14, &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
LABEL_8:
  uint64_t v28 = type metadata accessor for AMDPbHEConfig(0);
  uint64_t v30 = v43;
  uint64_t v29 = v44;
  char v31 = *(void (**)(char *, uint64_t, uint64_t))(v43 + 16);
  uint64_t v32 = v41;
  v31(v41, v39 + *(int *)(v28 + 20), v44);
  uint64_t v33 = v42;
  v31(v42, v40 + *(int *)(v28 + 20), v29);
  lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
  char v34 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v35 = *(void (**)(char *, uint64_t))(v30 + 8);
  v35(v33, v29);
  v35(v32, v29);
  return v34 & 1;
}

uint64_t specialized static AMDPbPIRConfig.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v77 = a1;
  uint64_t v78 = a2;
  uint64_t v2 = type metadata accessor for UnknownStorage();
  uint64_t v66 = *(void *)(v2 - 8);
  uint64_t v67 = v2;
  uint64_t v3 = MEMORY[0x270FA5388](v2);
  uint64_t v65 = (char *)&v63 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v64 = (char *)&v63 - v5;
  uint64_t v6 = type metadata accessor for AspirePirKeywordPirParameters(0);
  uint64_t v71 = *(void *)(v6 - 8);
  uint64_t v72 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v68 = (uint64_t)&v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspirePirKeywordPirParameters?, AspirePirKeywordPirParameters?));
  MEMORY[0x270FA5388](v70);
  uint64_t v73 = (uint64_t)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  uint64_t v10 = MEMORY[0x270FA5388](v9 - 8);
  uint64_t v69 = (uint64_t)&v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v75 = (uint64_t)&v63 - v13;
  MEMORY[0x270FA5388](v12);
  uint64_t v76 = (uint64_t)&v63 - v14;
  uint64_t v15 = type metadata accessor for AspireHeEncryptionParameters(0);
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v63 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireHeEncryptionParameters?, AspireHeEncryptionParameters?));
  uint64_t v20 = v19 - 8;
  MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)&v63 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  uint64_t v24 = MEMORY[0x270FA5388](v23 - 8);
  uint64_t v26 = (char *)&v63 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = MEMORY[0x270FA5388](v24);
  uint64_t v29 = (char *)&v63 - v28;
  MEMORY[0x270FA5388](v27);
  char v31 = (char *)&v63 - v30;
  uint64_t v32 = type metadata accessor for AMDPbPIRConfig(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v77 + *(int *)(v32 + 36), (uint64_t)v31, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  uint64_t v74 = v32;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v78 + *(int *)(v32 + 36), (uint64_t)v29, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  uint64_t v33 = (uint64_t)&v22[*(int *)(v20 + 56)];
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v31, (uint64_t)v22, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v29, v33, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  char v34 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  if (v34((uint64_t)v22, 1, v15) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v29, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v31, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    if (v34(v33, 1, v15) == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v22, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      goto LABEL_9;
    }
LABEL_6:
    uint64_t v35 = &demangling cache variable for type metadata for (AspireHeEncryptionParameters?, AspireHeEncryptionParameters?);
    uint64_t v36 = (uint64_t)v22;
LABEL_7:
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v36, v35);
    goto LABEL_30;
  }
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v22, (uint64_t)v26, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  if (v34(v33, 1, v15) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v29, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v31, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v26, type metadata accessor for AspireHeEncryptionParameters);
    goto LABEL_6;
  }
  outlined init with take of AMDPbPIRConfig(v33, (uint64_t)v18, type metadata accessor for AspireHeEncryptionParameters);
  char v37 = static AspireHeEncryptionParameters.== infix(_:_:)(v26, v18);
  outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v18, type metadata accessor for AspireHeEncryptionParameters);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v29, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v31, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v26, type metadata accessor for AspireHeEncryptionParameters);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v22, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  if ((v37 & 1) == 0) {
    goto LABEL_30;
  }
LABEL_9:
  uint64_t v39 = v77;
  uint64_t v38 = v78;
  if ((specialized static Array<A>.== infix(_:_:)(*v77, *v78) & 1) == 0) {
    goto LABEL_30;
  }
  uint64_t v40 = v74;
  uint64_t v41 = v76;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v39 + *(int *)(v74 + 40), v76, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  uint64_t v42 = v75;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v38 + *(int *)(v40 + 40), v75, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  uint64_t v43 = v73;
  uint64_t v44 = v73 + *(int *)(v70 + 48);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v41, v73, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v42, v44, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  uint64_t v45 = v72;
  uint64_t v46 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v71 + 48);
  if (v46(v43, 1, v72) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v42, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v41, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
    if (v46(v44, 1, v45) == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v43, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
      goto LABEL_17;
    }
    goto LABEL_15;
  }
  uint64_t v47 = v69;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v43, v69, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  if (v46(v44, 1, v45) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v75, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v76, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
    outlined destroy of AMDPbHEConfig.OneOf_Config(v47, type metadata accessor for AspirePirKeywordPirParameters);
LABEL_15:
    uint64_t v35 = &demangling cache variable for type metadata for (AspirePirKeywordPirParameters?, AspirePirKeywordPirParameters?);
    uint64_t v36 = v43;
    goto LABEL_7;
  }
  uint64_t v48 = v68;
  outlined init with take of AMDPbPIRConfig(v44, v68, type metadata accessor for AspirePirKeywordPirParameters);
  char v49 = static AspirePirKeywordPirParameters.== infix(_:_:)(v47, v48);
  outlined destroy of AMDPbHEConfig.OneOf_Config(v48, type metadata accessor for AspirePirKeywordPirParameters);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v75, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v76, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  outlined destroy of AMDPbHEConfig.OneOf_Config(v47, type metadata accessor for AspirePirKeywordPirParameters);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v43, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  if ((v49 & 1) == 0) {
    goto LABEL_30;
  }
LABEL_17:
  uint64_t v50 = v39[1];
  uint64_t v51 = v38[1];
  if (*((unsigned char *)v38 + 16) != 1)
  {
    if (v50 == v51) {
      goto LABEL_27;
    }
    goto LABEL_30;
  }
  if (!v51)
  {
    if (!v50) {
      goto LABEL_27;
    }
    goto LABEL_30;
  }
  if (v51 == 1)
  {
    if (v50 == 1) {
      goto LABEL_27;
    }
LABEL_30:
    char v60 = 0;
    return v60 & 1;
  }
  if (v50 != 2) {
    goto LABEL_30;
  }
LABEL_27:
  if (v39[3] != v38[3] || (specialized static Data.== infix(_:_:)(v39[4], v39[5], v38[4], v38[5]) & 1) == 0) {
    goto LABEL_30;
  }
  uint64_t v52 = v74;
  uint64_t v53 = (char *)v39 + *(int *)(v74 + 32);
  uint64_t v55 = v66;
  uint64_t v54 = v67;
  char v56 = *(void (**)(char *, char *, uint64_t))(v66 + 16);
  uint64_t v57 = v64;
  v56(v64, v53, v67);
  uint64_t v58 = (char *)v38 + *(int *)(v52 + 32);
  char v59 = v65;
  v56(v65, v58, v54);
  lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
  char v60 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v61 = *(void (**)(char *, uint64_t))(v55 + 8);
  v61(v59, v54);
  v61(v57, v54);
  return v60 & 1;
}

uint64_t specialized static AMDPbHEConfig.OneOf_Config.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AMDPbPECConfig(0);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (uint64_t *)((char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = type metadata accessor for AMDPbPIRConfig(0);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (uint64_t *)((char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = type metadata accessor for AMDPbHEConfig.OneOf_Config(0);
  uint64_t v11 = MEMORY[0x270FA5388](v10);
  uint64_t v13 = (uint64_t *)((char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (uint64_t *)((char *)&v27 - v14);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AMDPbHEConfig.OneOf_Config, AMDPbHEConfig.OneOf_Config));
  uint64_t v17 = MEMORY[0x270FA5388](v16 - 8);
  uint64_t v19 = (char *)&v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = (uint64_t)&v19[*(int *)(v17 + 56)];
  outlined init with copy of AMDPbPIRConfig(a1, (uint64_t)v19, type metadata accessor for AMDPbHEConfig.OneOf_Config);
  outlined init with copy of AMDPbPIRConfig(a2, v20, type metadata accessor for AMDPbHEConfig.OneOf_Config);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with copy of AMDPbPIRConfig((uint64_t)v19, (uint64_t)v13, type metadata accessor for AMDPbHEConfig.OneOf_Config);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined init with take of AMDPbPIRConfig(v20, (uint64_t)v6, type metadata accessor for AMDPbPECConfig);
      char v21 = specialized static AMDPbPECConfig.== infix(_:_:)(v13, v6);
      outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v6, type metadata accessor for AMDPbPECConfig);
      uint64_t v22 = (uint64_t)v13;
      uint64_t v23 = type metadata accessor for AMDPbPECConfig;
LABEL_9:
      outlined destroy of AMDPbHEConfig.OneOf_Config(v22, v23);
      outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v19, type metadata accessor for AMDPbHEConfig.OneOf_Config);
      return v21 & 1;
    }
    uint64_t v24 = type metadata accessor for AMDPbPECConfig;
    uint64_t v25 = (uint64_t)v13;
  }
  else
  {
    outlined init with copy of AMDPbPIRConfig((uint64_t)v19, (uint64_t)v15, type metadata accessor for AMDPbHEConfig.OneOf_Config);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      outlined init with take of AMDPbPIRConfig(v20, (uint64_t)v9, type metadata accessor for AMDPbPIRConfig);
      char v21 = specialized static AMDPbPIRConfig.== infix(_:_:)(v15, v9);
      outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v9, type metadata accessor for AMDPbPIRConfig);
      uint64_t v22 = (uint64_t)v15;
      uint64_t v23 = type metadata accessor for AMDPbPIRConfig;
      goto LABEL_9;
    }
    uint64_t v24 = type metadata accessor for AMDPbPIRConfig;
    uint64_t v25 = (uint64_t)v15;
  }
  outlined destroy of AMDPbHEConfig.OneOf_Config(v25, v24);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v19, &demangling cache variable for type metadata for (AMDPbHEConfig.OneOf_Config, AMDPbHEConfig.OneOf_Config));
  char v21 = 0;
  return v21 & 1;
}

uint64_t type metadata accessor for AMDPbHEKeyStatus(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AMDPbHEKeyStatus);
}

uint64_t type metadata accessor for AMDPbPIRShardConfig(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AMDPbPIRShardConfig);
}

uint64_t type metadata accessor for AMDPbHEQueries(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AMDPbHEQueries);
}

uint64_t type metadata accessor for AMDPbHEReplies(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AMDPbHEReplies);
}

uint64_t type metadata accessor for AMDPbHEQuery(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AMDPbHEQuery);
}

uint64_t type metadata accessor for AMDPbHEQuery.OneOf_Query(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AMDPbHEQuery.OneOf_Query);
}

uint64_t type metadata accessor for AMDPbPIRQuery(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AMDPbPIRQuery);
}

uint64_t type metadata accessor for AMDPbEvaluationKey(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AMDPbEvaluationKey);
}

uint64_t type metadata accessor for AMDPbPECQuery(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AMDPbPECQuery);
}

uint64_t specialized static AMDPbHEReply.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v43 = *(void *)(v4 - 8);
  uint64_t v44 = v4;
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v42 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v41 = (char *)&v37 - v7;
  uint64_t v8 = type metadata accessor for AMDPbHEReply.OneOf_Reply(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v38 = (uint64_t)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AMDPbHEReply.OneOf_Reply?, AMDPbHEReply.OneOf_Reply?));
  uint64_t v12 = v11 - 8;
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
  uint64_t v16 = MEMORY[0x270FA5388](v15 - 8);
  uint64_t v18 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x270FA5388](v16);
  char v21 = (char *)&v37 - v20;
  MEMORY[0x270FA5388](v19);
  uint64_t v23 = (char *)&v37 - v22;
  uint64_t v39 = a1;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)&v37 - v22, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
  uint64_t v40 = a2;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a2, (uint64_t)v21, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
  uint64_t v24 = (uint64_t)&v14[*(int *)(v12 + 56)];
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v23, (uint64_t)v14, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21, v24, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
  uint64_t v25 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v25((uint64_t)v14, 1, v8) != 1)
  {
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v14, (uint64_t)v18, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
    if (v25(v24, 1, v8) != 1)
    {
      uint64_t v26 = v38;
      outlined init with take of AMDPbPIRConfig(v24, v38, type metadata accessor for AMDPbHEReply.OneOf_Reply);
      char v27 = specialized static AMDPbHEReply.OneOf_Reply.== infix(_:_:)((uint64_t)v18, v26);
      outlined destroy of AMDPbHEConfig.OneOf_Config(v26, type metadata accessor for AMDPbHEReply.OneOf_Reply);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v23, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
      outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v18, type metadata accessor for AMDPbHEReply.OneOf_Reply);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v14, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
      if (v27) {
        goto LABEL_8;
      }
LABEL_9:
      char v34 = 0;
      return v34 & 1;
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v23, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
    outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v18, type metadata accessor for AMDPbHEReply.OneOf_Reply);
LABEL_6:
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v14, &demangling cache variable for type metadata for (AMDPbHEReply.OneOf_Reply?, AMDPbHEReply.OneOf_Reply?));
    goto LABEL_9;
  }
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v23, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
  if (v25(v24, 1, v8) != 1) {
    goto LABEL_6;
  }
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v14, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
LABEL_8:
  uint64_t v28 = type metadata accessor for AMDPbHEReply(0);
  uint64_t v30 = v43;
  uint64_t v29 = v44;
  char v31 = *(void (**)(char *, uint64_t, uint64_t))(v43 + 16);
  uint64_t v32 = v41;
  v31(v41, v39 + *(int *)(v28 + 20), v44);
  uint64_t v33 = v42;
  v31(v42, v40 + *(int *)(v28 + 20), v29);
  lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
  char v34 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v35 = *(void (**)(char *, uint64_t))(v30 + 8);
  v35(v33, v29);
  v35(v32, v29);
  return v34 & 1;
}

uint64_t specialized static AMDPbHEReply.OneOf_Reply.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = a1;
  uint64_t v27 = a2;
  uint64_t v2 = type metadata accessor for AMDPbPECReply(0);
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = (uint64_t *)((char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = type metadata accessor for AMDPbPIRReply(0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (uint64_t *)((char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = type metadata accessor for AMDPbHEReply.OneOf_Reply(0);
  uint64_t v9 = MEMORY[0x270FA5388](v8);
  uint64_t v11 = (uint64_t *)((char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v9);
  uint64_t v13 = (uint64_t *)((char *)&v26 - v12);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AMDPbHEReply.OneOf_Reply, AMDPbHEReply.OneOf_Reply));
  uint64_t v15 = MEMORY[0x270FA5388](v14 - 8);
  uint64_t v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = (uint64_t)&v17[*(int *)(v15 + 56)];
  outlined init with copy of AMDPbPIRConfig(v26, (uint64_t)v17, type metadata accessor for AMDPbHEReply.OneOf_Reply);
  outlined init with copy of AMDPbPIRConfig(v27, v18, type metadata accessor for AMDPbHEReply.OneOf_Reply);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with copy of AMDPbPIRConfig((uint64_t)v17, (uint64_t)v11, type metadata accessor for AMDPbHEReply.OneOf_Reply);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined init with take of AMDPbPIRConfig(v18, (uint64_t)v4, type metadata accessor for AMDPbPECReply);
      if (specialized static Array<A>.== infix(_:_:)(*v11, *v4))
      {
        type metadata accessor for UnknownStorage();
        lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
        if (dispatch thunk of static Equatable.== infix(_:_:)())
        {
          uint64_t v19 = type metadata accessor for AMDPbPECReply;
          outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v4, type metadata accessor for AMDPbPECReply);
          uint64_t v20 = (uint64_t)v11;
LABEL_13:
          outlined destroy of AMDPbHEConfig.OneOf_Config(v20, v19);
          outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v17, type metadata accessor for AMDPbHEReply.OneOf_Reply);
          return 1;
        }
      }
      uint64_t v24 = type metadata accessor for AMDPbPECReply;
      outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v4, type metadata accessor for AMDPbPECReply);
      uint64_t v25 = (uint64_t)v11;
LABEL_16:
      outlined destroy of AMDPbHEConfig.OneOf_Config(v25, v24);
      outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v17, type metadata accessor for AMDPbHEReply.OneOf_Reply);
      return 0;
    }
    char v21 = type metadata accessor for AMDPbPECReply;
    uint64_t v22 = (uint64_t)v11;
  }
  else
  {
    outlined init with copy of AMDPbPIRConfig((uint64_t)v17, (uint64_t)v13, type metadata accessor for AMDPbHEReply.OneOf_Reply);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      outlined init with take of AMDPbPIRConfig(v18, (uint64_t)v7, type metadata accessor for AMDPbPIRReply);
      if (specialized static Array<A>.== infix(_:_:)(*v13, *v7))
      {
        type metadata accessor for UnknownStorage();
        lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
        if (dispatch thunk of static Equatable.== infix(_:_:)())
        {
          uint64_t v19 = type metadata accessor for AMDPbPIRReply;
          outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v7, type metadata accessor for AMDPbPIRReply);
          uint64_t v20 = (uint64_t)v13;
          goto LABEL_13;
        }
      }
      uint64_t v24 = type metadata accessor for AMDPbPIRReply;
      outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v7, type metadata accessor for AMDPbPIRReply);
      uint64_t v25 = (uint64_t)v13;
      goto LABEL_16;
    }
    char v21 = type metadata accessor for AMDPbPIRReply;
    uint64_t v22 = (uint64_t)v13;
  }
  outlined destroy of AMDPbHEConfig.OneOf_Config(v22, v21);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v17, &demangling cache variable for type metadata for (AMDPbHEReply.OneOf_Reply, AMDPbHEReply.OneOf_Reply));
  return 0;
}

uint64_t specialized static AMDPbHEQuery.== infix(_:_:)(char *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v43 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v42 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v41 = (char *)&v38 - v7;
  uint64_t v8 = type metadata accessor for AMDPbHEQuery.OneOf_Query(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v40 = (uint64_t)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AMDPbHEQuery.OneOf_Query?, AMDPbHEQuery.OneOf_Query?));
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
  uint64_t v15 = MEMORY[0x270FA5388](v14 - 8);
  uint64_t v17 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x270FA5388](v15);
  uint64_t v20 = (char *)&v38 - v19;
  MEMORY[0x270FA5388](v18);
  uint64_t v22 = (char *)&v38 - v21;
  uint64_t v23 = *(void *)a1;
  uint64_t v24 = *((void *)a1 + 1);
  uint64_t v44 = a1;
  uint64_t v45 = a2;
  if (v23 == *(void *)a2 && v24 == *((void *)a2 + 1)
    || (char v25 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    uint64_t v39 = v4;
    uint64_t v26 = type metadata accessor for AMDPbHEQuery(0);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)&v44[*(int *)(v26 + 20)], (uint64_t)v22, &demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)&v45[*(int *)(v26 + 20)], (uint64_t)v20, &demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
    uint64_t v27 = (uint64_t)&v13[*(int *)(v11 + 48)];
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v22, (uint64_t)v13, &demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v20, v27, &demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
    uint64_t v28 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    if (v28((uint64_t)v13, 1, v8) == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v20, &demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v22, &demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
      if (v28(v27, 1, v8) == 1)
      {
        outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v13, &demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
LABEL_11:
        uint64_t v31 = v43;
        uint64_t v32 = *(void (**)(char *, char *, uint64_t))(v43 + 16);
        uint64_t v33 = v41;
        uint64_t v34 = v39;
        v32(v41, &v44[*(int *)(v26 + 24)], v39);
        uint64_t v35 = v42;
        v32(v42, &v45[*(int *)(v26 + 24)], v34);
        lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
        char v25 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v36 = *(void (**)(char *, uint64_t))(v31 + 8);
        v36(v35, v34);
        v36(v33, v34);
        return v25 & 1;
      }
    }
    else
    {
      outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v13, (uint64_t)v17, &demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
      if (v28(v27, 1, v8) != 1)
      {
        uint64_t v29 = v40;
        outlined init with take of AMDPbPIRConfig(v27, v40, type metadata accessor for AMDPbHEQuery.OneOf_Query);
        char v30 = specialized static AMDPbHEQuery.OneOf_Query.== infix(_:_:)((uint64_t)v17, v29);
        outlined destroy of AMDPbHEConfig.OneOf_Config(v29, type metadata accessor for AMDPbHEQuery.OneOf_Query);
        outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v20, &demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
        outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v22, &demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
        outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v17, type metadata accessor for AMDPbHEQuery.OneOf_Query);
        outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v13, &demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
        if (v30) {
          goto LABEL_11;
        }
LABEL_12:
        char v25 = 0;
        return v25 & 1;
      }
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v20, &demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v22, &demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
      outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v17, type metadata accessor for AMDPbHEQuery.OneOf_Query);
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v13, &demangling cache variable for type metadata for (AMDPbHEQuery.OneOf_Query?, AMDPbHEQuery.OneOf_Query?));
    goto LABEL_12;
  }
  return v25 & 1;
}

uint64_t specialized static AMDPbPIRQuery.== infix(_:_:)(_DWORD *a1, _DWORD *a2)
{
  uint64_t v74 = type metadata accessor for UnknownStorage();
  uint64_t v72 = *(void *)(v74 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v74);
  uint64_t v71 = (char *)&v64 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v70 = (char *)&v64 - v6;
  uint64_t v7 = type metadata accessor for AMDPbEvaluationKey(0);
  uint64_t v76 = *(void *)(v7 - 8);
  uint64_t v77 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v73 = (uint64_t)&v64 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AMDPbEvaluationKey?, AMDPbEvaluationKey?));
  MEMORY[0x270FA5388](v75);
  uint64_t v78 = (uint64_t)&v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKey?);
  uint64_t v11 = MEMORY[0x270FA5388](v10 - 8);
  uint64_t v13 = (char *)&v64 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x270FA5388](v11);
  uint64_t v16 = (char *)&v64 - v15;
  MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v64 - v17;
  uint64_t v19 = type metadata accessor for AspirePirEncryptedIndices(0);
  uint64_t v79 = *(_DWORD **)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (uint64_t *)((char *)&v64 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspirePirEncryptedIndices?, AspirePirEncryptedIndices?));
  MEMORY[0x270FA5388](v22);
  uint64_t v24 = (char *)&v64 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  uint64_t v26 = MEMORY[0x270FA5388](v25 - 8);
  uint64_t v27 = MEMORY[0x270FA5388](v26);
  MEMORY[0x270FA5388](v27);
  uint64_t v31 = (char *)&v64 - v30;
  if (*a1 != *a2) {
    goto LABEL_20;
  }
  uint64_t v64 = v13;
  uint64_t v65 = v21;
  uint64_t v68 = v18;
  uint64_t v69 = (uint64_t *)v28;
  uint64_t v67 = v16;
  uint64_t v32 = v29;
  uint64_t v33 = type metadata accessor for AMDPbPIRQuery(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)a1 + *(int *)(v33 + 28), (uint64_t)v31, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  uint64_t v34 = *(int *)(v33 + 28);
  uint64_t v66 = a2;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)a2 + v34, v32, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  uint64_t v35 = (uint64_t)&v24[*(int *)(v22 + 48)];
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v31, (uint64_t)v24, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v32, v35, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  uint64_t v36 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))*((void *)v79 + 6);
  if (v36((uint64_t)v24, 1, v19) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v32, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v31, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
    if (v36(v35, 1, v19) == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
      uint64_t v37 = a1;
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  uint64_t v79 = a1;
  uint64_t v45 = v69;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, (uint64_t)v69, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  if (v36(v35, 1, v19) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v32, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v31, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
    outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v45, type metadata accessor for AspirePirEncryptedIndices);
LABEL_10:
    uint64_t v46 = &demangling cache variable for type metadata for (AspirePirEncryptedIndices?, AspirePirEncryptedIndices?);
    uint64_t v47 = (uint64_t)v24;
LABEL_19:
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v47, v46);
    goto LABEL_20;
  }
  uint64_t v48 = v65;
  outlined init with take of AMDPbPIRConfig(v35, (uint64_t)v65, type metadata accessor for AspirePirEncryptedIndices);
  if ((specialized static Array<A>.== infix(_:_:)(*v45, *v48) & 1) == 0 || v45[1] != v48[1])
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v48, type metadata accessor for AspirePirEncryptedIndices);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v32, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v31, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
    outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v45, type metadata accessor for AspirePirEncryptedIndices);
    uint64_t v47 = (uint64_t)v24;
    uint64_t v46 = &demangling cache variable for type metadata for AspirePirEncryptedIndices?;
    goto LABEL_19;
  }
  uint64_t v49 = (uint64_t)v24;
  lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
  char v50 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v48, type metadata accessor for AspirePirEncryptedIndices);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v32, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v31, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v45, type metadata accessor for AspirePirEncryptedIndices);
  uint64_t v37 = v79;
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v49, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  if ((v50 & 1) == 0) {
    goto LABEL_20;
  }
LABEL_5:
  uint64_t v38 = (uint64_t)v68;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v37 + *(int *)(v33 + 32), (uint64_t)v68, &demangling cache variable for type metadata for AMDPbEvaluationKey?);
  uint64_t v79 = (_DWORD *)v33;
  uint64_t v39 = v66;
  uint64_t v40 = (uint64_t)v67;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v66 + *(int *)(v33 + 32), (uint64_t)v67, &demangling cache variable for type metadata for AMDPbEvaluationKey?);
  uint64_t v41 = v78;
  uint64_t v42 = v78 + *(int *)(v75 + 48);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v38, v78, &demangling cache variable for type metadata for AMDPbEvaluationKey?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v40, v42, &demangling cache variable for type metadata for AMDPbEvaluationKey?);
  uint64_t v43 = v77;
  uint64_t v44 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v76 + 48);
  if (v44(v41, 1, v77) != 1)
  {
    uint64_t v51 = (uint64_t)v64;
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v41, (uint64_t)v64, &demangling cache variable for type metadata for AMDPbEvaluationKey?);
    if (v44(v42, 1, v43) != 1)
    {
      uint64_t v54 = v73;
      outlined init with take of AMDPbPIRConfig(v42, v73, type metadata accessor for AMDPbEvaluationKey);
      char v55 = specialized static AMDPbEvaluationKey.== infix(_:_:)(v51, v54);
      outlined destroy of AMDPbHEConfig.OneOf_Config(v54, type metadata accessor for AMDPbEvaluationKey);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v67, &demangling cache variable for type metadata for AMDPbEvaluationKey?);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v68, &demangling cache variable for type metadata for AMDPbEvaluationKey?);
      outlined destroy of AMDPbHEConfig.OneOf_Config(v51, type metadata accessor for AMDPbEvaluationKey);
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v41, &demangling cache variable for type metadata for AMDPbEvaluationKey?);
      if ((v55 & 1) == 0) {
        goto LABEL_20;
      }
      goto LABEL_23;
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v67, &demangling cache variable for type metadata for AMDPbEvaluationKey?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v68, &demangling cache variable for type metadata for AMDPbEvaluationKey?);
    outlined destroy of AMDPbHEConfig.OneOf_Config(v51, type metadata accessor for AMDPbEvaluationKey);
    goto LABEL_18;
  }
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v40, &demangling cache variable for type metadata for AMDPbEvaluationKey?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v38, &demangling cache variable for type metadata for AMDPbEvaluationKey?);
  if (v44(v42, 1, v43) != 1)
  {
LABEL_18:
    uint64_t v46 = &demangling cache variable for type metadata for (AMDPbEvaluationKey?, AMDPbEvaluationKey?);
    uint64_t v47 = v41;
    goto LABEL_19;
  }
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v41, &demangling cache variable for type metadata for AMDPbEvaluationKey?);
LABEL_23:
  if (specialized static Data.== infix(_:_:)(*((void *)v37 + 1), *((void *)v37 + 2), *((void *)v39 + 1), *((void *)v39 + 2)))
  {
    char v56 = v79;
    uint64_t v57 = (char *)v37 + (int)v79[6];
    uint64_t v58 = v72;
    char v59 = *(void (**)(char *, char *, uint64_t))(v72 + 16);
    char v60 = v70;
    uint64_t v61 = v74;
    v59(v70, v57, v74);
    uint64_t v62 = v71;
    v59(v71, (char *)v39 + (int)v56[6], v61);
    lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    char v52 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v63 = *(void (**)(char *, uint64_t))(v58 + 8);
    v63(v62, v61);
    v63(v60, v61);
    return v52 & 1;
  }
LABEL_20:
  char v52 = 0;
  return v52 & 1;
}

uint64_t specialized static AMDPbHEQuery.OneOf_Query.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AMDPbPECQuery(0);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (uint64_t *)((char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = type metadata accessor for AMDPbPIRQuery(0);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (_DWORD *)((char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = type metadata accessor for AMDPbHEQuery.OneOf_Query(0);
  uint64_t v11 = MEMORY[0x270FA5388](v10);
  uint64_t v13 = (uint64_t *)((char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (_DWORD *)((char *)&v27 - v14);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AMDPbHEQuery.OneOf_Query, AMDPbHEQuery.OneOf_Query));
  uint64_t v17 = MEMORY[0x270FA5388](v16 - 8);
  uint64_t v19 = (char *)&v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = (uint64_t)&v19[*(int *)(v17 + 56)];
  outlined init with copy of AMDPbPIRConfig(a1, (uint64_t)v19, type metadata accessor for AMDPbHEQuery.OneOf_Query);
  outlined init with copy of AMDPbPIRConfig(a2, v20, type metadata accessor for AMDPbHEQuery.OneOf_Query);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with copy of AMDPbPIRConfig((uint64_t)v19, (uint64_t)v13, type metadata accessor for AMDPbHEQuery.OneOf_Query);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined init with take of AMDPbPIRConfig(v20, (uint64_t)v6, type metadata accessor for AMDPbPECQuery);
      char v21 = specialized static AMDPbPECQuery.== infix(_:_:)(v13, v6);
      outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v6, type metadata accessor for AMDPbPECQuery);
      uint64_t v22 = (uint64_t)v13;
      uint64_t v23 = type metadata accessor for AMDPbPECQuery;
LABEL_9:
      outlined destroy of AMDPbHEConfig.OneOf_Config(v22, v23);
      outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v19, type metadata accessor for AMDPbHEQuery.OneOf_Query);
      return v21 & 1;
    }
    uint64_t v24 = type metadata accessor for AMDPbPECQuery;
    uint64_t v25 = (uint64_t)v13;
  }
  else
  {
    outlined init with copy of AMDPbPIRConfig((uint64_t)v19, (uint64_t)v15, type metadata accessor for AMDPbHEQuery.OneOf_Query);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      outlined init with take of AMDPbPIRConfig(v20, (uint64_t)v9, type metadata accessor for AMDPbPIRQuery);
      char v21 = specialized static AMDPbPIRQuery.== infix(_:_:)(v15, v9);
      outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v9, type metadata accessor for AMDPbPIRQuery);
      uint64_t v22 = (uint64_t)v15;
      uint64_t v23 = type metadata accessor for AMDPbPIRQuery;
      goto LABEL_9;
    }
    uint64_t v24 = type metadata accessor for AMDPbPIRQuery;
    uint64_t v25 = (uint64_t)v15;
  }
  outlined destroy of AMDPbHEConfig.OneOf_Config(v25, v24);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v19, &demangling cache variable for type metadata for (AMDPbHEQuery.OneOf_Query, AMDPbHEQuery.OneOf_Query));
  char v21 = 0;
  return v21 & 1;
}

uint64_t outlined assign with take of AMDPbHEConfig.OneOf_Config?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for AMDPbHEReply.OneOf_Reply(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AMDPbHEReply.OneOf_Reply);
}

uint64_t type metadata accessor for AMDPbPIRReply(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AMDPbPIRReply);
}

uint64_t type metadata accessor for AMDPbPECReply(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AMDPbPECReply);
}

uint64_t type metadata accessor for AMDPbHEReply(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AMDPbHEReply);
}

uint64_t type metadata accessor for AMDPbEvaluationKeys(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AMDPbEvaluationKeys);
}

uint64_t type metadata accessor for AMDPbEvaluationKeyMetadata(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AMDPbEvaluationKeyMetadata);
}

uint64_t type metadata accessor for AMDPbPECShardReply(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AMDPbPECShardReply);
}

uint64_t type metadata accessor for AMDPbFetchHEConfigs(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AMDPbFetchHEConfigs);
}

uint64_t type metadata accessor for AMDPbHEConfigsReply(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AspirePirPirAlgorithm and conformance AspirePirPirAlgorithm()
{
  unint64_t result = lazy protocol witness table cache variable for type AspirePirPirAlgorithm and conformance AspirePirPirAlgorithm;
  if (!lazy protocol witness table cache variable for type AspirePirPirAlgorithm and conformance AspirePirPirAlgorithm)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AspirePirPirAlgorithm and conformance AspirePirPirAlgorithm);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AspirePirPirAlgorithm and conformance AspirePirPirAlgorithm;
  if (!lazy protocol witness table cache variable for type AspirePirPirAlgorithm and conformance AspirePirPirAlgorithm)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AspirePirPirAlgorithm and conformance AspirePirPirAlgorithm);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AspirePirPirAlgorithm and conformance AspirePirPirAlgorithm;
  if (!lazy protocol witness table cache variable for type AspirePirPirAlgorithm and conformance AspirePirPirAlgorithm)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AspirePirPirAlgorithm and conformance AspirePirPirAlgorithm);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AspirePirPirAlgorithm and conformance AspirePirPirAlgorithm;
  if (!lazy protocol witness table cache variable for type AspirePirPirAlgorithm and conformance AspirePirPirAlgorithm)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AspirePirPirAlgorithm and conformance AspirePirPirAlgorithm);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AspireSimilaritySimilarityMetric and conformance AspireSimilaritySimilarityMetric()
{
  unint64_t result = lazy protocol witness table cache variable for type AspireSimilaritySimilarityMetric and conformance AspireSimilaritySimilarityMetric;
  if (!lazy protocol witness table cache variable for type AspireSimilaritySimilarityMetric and conformance AspireSimilaritySimilarityMetric)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AspireSimilaritySimilarityMetric and conformance AspireSimilaritySimilarityMetric);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AspireSimilaritySimilarityMetric and conformance AspireSimilaritySimilarityMetric;
  if (!lazy protocol witness table cache variable for type AspireSimilaritySimilarityMetric and conformance AspireSimilaritySimilarityMetric)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AspireSimilaritySimilarityMetric and conformance AspireSimilaritySimilarityMetric);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AspireSimilaritySimilarityMetric and conformance AspireSimilaritySimilarityMetric;
  if (!lazy protocol witness table cache variable for type AspireSimilaritySimilarityMetric and conformance AspireSimilaritySimilarityMetric)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AspireSimilaritySimilarityMetric and conformance AspireSimilaritySimilarityMetric);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AspireSimilaritySimilarityMetric and conformance AspireSimilaritySimilarityMetric;
  if (!lazy protocol witness table cache variable for type AspireSimilaritySimilarityMetric and conformance AspireSimilaritySimilarityMetric)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AspireSimilaritySimilarityMetric and conformance AspireSimilaritySimilarityMetric);
  }
  return result;
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AMDPbFetchHEConfigs()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbFetchHEConfigs and conformance AMDPbFetchHEConfigs, (void (*)(uint64_t))type metadata accessor for AMDPbFetchHEConfigs);
}

uint64_t base witness table accessor for Message in AMDPbFetchHEConfigs()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbFetchHEConfigs and conformance AMDPbFetchHEConfigs, (void (*)(uint64_t))type metadata accessor for AMDPbFetchHEConfigs);
}

uint64_t base witness table accessor for Hashable in AMDPbFetchHEConfigs()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbFetchHEConfigs and conformance AMDPbFetchHEConfigs, (void (*)(uint64_t))type metadata accessor for AMDPbFetchHEConfigs);
}

uint64_t base witness table accessor for Equatable in AMDPbFetchHEConfigs()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbFetchHEConfigs and conformance AMDPbFetchHEConfigs, (void (*)(uint64_t))type metadata accessor for AMDPbFetchHEConfigs);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AMDPbHEConfigsReply()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbHEConfigsReply and conformance AMDPbHEConfigsReply, (void (*)(uint64_t))type metadata accessor for AMDPbHEConfigsReply);
}

uint64_t base witness table accessor for Message in AMDPbHEConfigsReply()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbHEConfigsReply and conformance AMDPbHEConfigsReply, (void (*)(uint64_t))type metadata accessor for AMDPbHEConfigsReply);
}

uint64_t base witness table accessor for Hashable in AMDPbHEConfigsReply()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbHEConfigsReply and conformance AMDPbHEConfigsReply, (void (*)(uint64_t))type metadata accessor for AMDPbHEConfigsReply);
}

uint64_t base witness table accessor for Equatable in AMDPbHEConfigsReply()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbHEConfigsReply and conformance AMDPbHEConfigsReply, (void (*)(uint64_t))type metadata accessor for AMDPbHEConfigsReply);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AMDPbHEConfig()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbHEConfig and conformance AMDPbHEConfig, (void (*)(uint64_t))type metadata accessor for AMDPbHEConfig);
}

uint64_t base witness table accessor for Message in AMDPbHEConfig()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbHEConfig and conformance AMDPbHEConfig, (void (*)(uint64_t))type metadata accessor for AMDPbHEConfig);
}

uint64_t base witness table accessor for Hashable in AMDPbHEConfig()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbHEConfig and conformance AMDPbHEConfig, (void (*)(uint64_t))type metadata accessor for AMDPbHEConfig);
}

uint64_t base witness table accessor for Equatable in AMDPbHEConfig()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbHEConfig and conformance AMDPbHEConfig, (void (*)(uint64_t))type metadata accessor for AMDPbHEConfig);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AMDPbHEKeyStatus()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbHEKeyStatus and conformance AMDPbHEKeyStatus, (void (*)(uint64_t))type metadata accessor for AMDPbHEKeyStatus);
}

uint64_t base witness table accessor for Message in AMDPbHEKeyStatus()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbHEKeyStatus and conformance AMDPbHEKeyStatus, (void (*)(uint64_t))type metadata accessor for AMDPbHEKeyStatus);
}

uint64_t base witness table accessor for Hashable in AMDPbHEKeyStatus()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbHEKeyStatus and conformance AMDPbHEKeyStatus, (void (*)(uint64_t))type metadata accessor for AMDPbHEKeyStatus);
}

uint64_t base witness table accessor for Equatable in AMDPbHEKeyStatus()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbHEKeyStatus and conformance AMDPbHEKeyStatus, (void (*)(uint64_t))type metadata accessor for AMDPbHEKeyStatus);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AMDPbPIRConfig()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbPIRConfig and conformance AMDPbPIRConfig, (void (*)(uint64_t))type metadata accessor for AMDPbPIRConfig);
}

uint64_t base witness table accessor for Message in AMDPbPIRConfig()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbPIRConfig and conformance AMDPbPIRConfig, (void (*)(uint64_t))type metadata accessor for AMDPbPIRConfig);
}

uint64_t base witness table accessor for Hashable in AMDPbPIRConfig()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbPIRConfig and conformance AMDPbPIRConfig, (void (*)(uint64_t))type metadata accessor for AMDPbPIRConfig);
}

uint64_t base witness table accessor for Equatable in AMDPbPIRConfig()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbPIRConfig and conformance AMDPbPIRConfig, (void (*)(uint64_t))type metadata accessor for AMDPbPIRConfig);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AMDPbPIRShardConfig()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbPIRShardConfig and conformance AMDPbPIRShardConfig, (void (*)(uint64_t))type metadata accessor for AMDPbPIRShardConfig);
}

uint64_t base witness table accessor for Message in AMDPbPIRShardConfig()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbPIRShardConfig and conformance AMDPbPIRShardConfig, (void (*)(uint64_t))type metadata accessor for AMDPbPIRShardConfig);
}

uint64_t base witness table accessor for Hashable in AMDPbPIRShardConfig()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbPIRShardConfig and conformance AMDPbPIRShardConfig, (void (*)(uint64_t))type metadata accessor for AMDPbPIRShardConfig);
}

uint64_t base witness table accessor for Equatable in AMDPbPIRShardConfig()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbPIRShardConfig and conformance AMDPbPIRShardConfig, (void (*)(uint64_t))type metadata accessor for AMDPbPIRShardConfig);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AMDPbPECConfig()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbPECConfig and conformance AMDPbPECConfig, (void (*)(uint64_t))type metadata accessor for AMDPbPECConfig);
}

uint64_t base witness table accessor for Message in AMDPbPECConfig()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbPECConfig and conformance AMDPbPECConfig, (void (*)(uint64_t))type metadata accessor for AMDPbPECConfig);
}

uint64_t base witness table accessor for Hashable in AMDPbPECConfig()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbPECConfig and conformance AMDPbPECConfig, (void (*)(uint64_t))type metadata accessor for AMDPbPECConfig);
}

uint64_t base witness table accessor for Equatable in AMDPbPECConfig()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbPECConfig and conformance AMDPbPECConfig, (void (*)(uint64_t))type metadata accessor for AMDPbPECConfig);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AMDPbHEQueries()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbHEQueries and conformance AMDPbHEQueries, (void (*)(uint64_t))type metadata accessor for AMDPbHEQueries);
}

uint64_t base witness table accessor for Message in AMDPbHEQueries()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbHEQueries and conformance AMDPbHEQueries, (void (*)(uint64_t))type metadata accessor for AMDPbHEQueries);
}

uint64_t base witness table accessor for Hashable in AMDPbHEQueries()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbHEQueries and conformance AMDPbHEQueries, (void (*)(uint64_t))type metadata accessor for AMDPbHEQueries);
}

uint64_t base witness table accessor for Equatable in AMDPbHEQueries()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbHEQueries and conformance AMDPbHEQueries, (void (*)(uint64_t))type metadata accessor for AMDPbHEQueries);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AMDPbHEReplies()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbHEReplies and conformance AMDPbHEReplies, (void (*)(uint64_t))type metadata accessor for AMDPbHEReplies);
}

uint64_t base witness table accessor for Message in AMDPbHEReplies()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbHEReplies and conformance AMDPbHEReplies, (void (*)(uint64_t))type metadata accessor for AMDPbHEReplies);
}

uint64_t base witness table accessor for Hashable in AMDPbHEReplies()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbHEReplies and conformance AMDPbHEReplies, (void (*)(uint64_t))type metadata accessor for AMDPbHEReplies);
}

uint64_t base witness table accessor for Equatable in AMDPbHEReplies()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbHEReplies and conformance AMDPbHEReplies, (void (*)(uint64_t))type metadata accessor for AMDPbHEReplies);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AMDPbHEQuery()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbHEQuery and conformance AMDPbHEQuery, (void (*)(uint64_t))type metadata accessor for AMDPbHEQuery);
}

uint64_t base witness table accessor for Message in AMDPbHEQuery()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbHEQuery and conformance AMDPbHEQuery, (void (*)(uint64_t))type metadata accessor for AMDPbHEQuery);
}

uint64_t base witness table accessor for Hashable in AMDPbHEQuery()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbHEQuery and conformance AMDPbHEQuery, (void (*)(uint64_t))type metadata accessor for AMDPbHEQuery);
}

uint64_t base witness table accessor for Equatable in AMDPbHEQuery()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbHEQuery and conformance AMDPbHEQuery, (void (*)(uint64_t))type metadata accessor for AMDPbHEQuery);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AMDPbHEReply()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbHEReply and conformance AMDPbHEReply, (void (*)(uint64_t))type metadata accessor for AMDPbHEReply);
}

uint64_t base witness table accessor for Message in AMDPbHEReply()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbHEReply and conformance AMDPbHEReply, (void (*)(uint64_t))type metadata accessor for AMDPbHEReply);
}

uint64_t base witness table accessor for Hashable in AMDPbHEReply()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbHEReply and conformance AMDPbHEReply, (void (*)(uint64_t))type metadata accessor for AMDPbHEReply);
}

uint64_t base witness table accessor for Equatable in AMDPbHEReply()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbHEReply and conformance AMDPbHEReply, (void (*)(uint64_t))type metadata accessor for AMDPbHEReply);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AMDPbEvaluationKeys()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbEvaluationKeys and conformance AMDPbEvaluationKeys, (void (*)(uint64_t))type metadata accessor for AMDPbEvaluationKeys);
}

uint64_t base witness table accessor for Message in AMDPbEvaluationKeys()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbEvaluationKeys and conformance AMDPbEvaluationKeys, (void (*)(uint64_t))type metadata accessor for AMDPbEvaluationKeys);
}

uint64_t base witness table accessor for Hashable in AMDPbEvaluationKeys()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbEvaluationKeys and conformance AMDPbEvaluationKeys, (void (*)(uint64_t))type metadata accessor for AMDPbEvaluationKeys);
}

uint64_t base witness table accessor for Equatable in AMDPbEvaluationKeys()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbEvaluationKeys and conformance AMDPbEvaluationKeys, (void (*)(uint64_t))type metadata accessor for AMDPbEvaluationKeys);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AMDPbEvaluationKey()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbEvaluationKey and conformance AMDPbEvaluationKey, (void (*)(uint64_t))type metadata accessor for AMDPbEvaluationKey);
}

uint64_t base witness table accessor for Message in AMDPbEvaluationKey()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbEvaluationKey and conformance AMDPbEvaluationKey, (void (*)(uint64_t))type metadata accessor for AMDPbEvaluationKey);
}

uint64_t base witness table accessor for Hashable in AMDPbEvaluationKey()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbEvaluationKey and conformance AMDPbEvaluationKey, (void (*)(uint64_t))type metadata accessor for AMDPbEvaluationKey);
}

uint64_t base witness table accessor for Equatable in AMDPbEvaluationKey()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbEvaluationKey and conformance AMDPbEvaluationKey, (void (*)(uint64_t))type metadata accessor for AMDPbEvaluationKey);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AMDPbEvaluationKeyMetadata()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbEvaluationKeyMetadata and conformance AMDPbEvaluationKeyMetadata, (void (*)(uint64_t))type metadata accessor for AMDPbEvaluationKeyMetadata);
}

uint64_t base witness table accessor for Message in AMDPbEvaluationKeyMetadata()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbEvaluationKeyMetadata and conformance AMDPbEvaluationKeyMetadata, (void (*)(uint64_t))type metadata accessor for AMDPbEvaluationKeyMetadata);
}

uint64_t base witness table accessor for Hashable in AMDPbEvaluationKeyMetadata()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbEvaluationKeyMetadata and conformance AMDPbEvaluationKeyMetadata, (void (*)(uint64_t))type metadata accessor for AMDPbEvaluationKeyMetadata);
}

uint64_t base witness table accessor for Equatable in AMDPbEvaluationKeyMetadata()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbEvaluationKeyMetadata and conformance AMDPbEvaluationKeyMetadata, (void (*)(uint64_t))type metadata accessor for AMDPbEvaluationKeyMetadata);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AMDPbPIRQuery()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbPIRQuery and conformance AMDPbPIRQuery, (void (*)(uint64_t))type metadata accessor for AMDPbPIRQuery);
}

uint64_t base witness table accessor for Message in AMDPbPIRQuery()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbPIRQuery and conformance AMDPbPIRQuery, (void (*)(uint64_t))type metadata accessor for AMDPbPIRQuery);
}

uint64_t base witness table accessor for Hashable in AMDPbPIRQuery()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbPIRQuery and conformance AMDPbPIRQuery, (void (*)(uint64_t))type metadata accessor for AMDPbPIRQuery);
}

uint64_t base witness table accessor for Equatable in AMDPbPIRQuery()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbPIRQuery and conformance AMDPbPIRQuery, (void (*)(uint64_t))type metadata accessor for AMDPbPIRQuery);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AMDPbPIRReply()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbPIRReply and conformance AMDPbPIRReply, (void (*)(uint64_t))type metadata accessor for AMDPbPIRReply);
}

uint64_t base witness table accessor for Message in AMDPbPIRReply()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbPIRReply and conformance AMDPbPIRReply, (void (*)(uint64_t))type metadata accessor for AMDPbPIRReply);
}

uint64_t base witness table accessor for Hashable in AMDPbPIRReply()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbPIRReply and conformance AMDPbPIRReply, (void (*)(uint64_t))type metadata accessor for AMDPbPIRReply);
}

uint64_t base witness table accessor for Equatable in AMDPbPIRReply()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbPIRReply and conformance AMDPbPIRReply, (void (*)(uint64_t))type metadata accessor for AMDPbPIRReply);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AMDPbPECQuery()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbPECQuery and conformance AMDPbPECQuery, (void (*)(uint64_t))type metadata accessor for AMDPbPECQuery);
}

uint64_t base witness table accessor for Message in AMDPbPECQuery()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbPECQuery and conformance AMDPbPECQuery, (void (*)(uint64_t))type metadata accessor for AMDPbPECQuery);
}

uint64_t base witness table accessor for Hashable in AMDPbPECQuery()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbPECQuery and conformance AMDPbPECQuery, (void (*)(uint64_t))type metadata accessor for AMDPbPECQuery);
}

uint64_t base witness table accessor for Equatable in AMDPbPECQuery()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbPECQuery and conformance AMDPbPECQuery, (void (*)(uint64_t))type metadata accessor for AMDPbPECQuery);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AMDPbPECShardReply()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbPECShardReply and conformance AMDPbPECShardReply, (void (*)(uint64_t))type metadata accessor for AMDPbPECShardReply);
}

uint64_t base witness table accessor for Message in AMDPbPECShardReply()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbPECShardReply and conformance AMDPbPECShardReply, (void (*)(uint64_t))type metadata accessor for AMDPbPECShardReply);
}

uint64_t base witness table accessor for Hashable in AMDPbPECShardReply()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbPECShardReply and conformance AMDPbPECShardReply, (void (*)(uint64_t))type metadata accessor for AMDPbPECShardReply);
}

uint64_t base witness table accessor for Equatable in AMDPbPECShardReply()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbPECShardReply and conformance AMDPbPECShardReply, (void (*)(uint64_t))type metadata accessor for AMDPbPECShardReply);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AMDPbPECReply()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbPECReply and conformance AMDPbPECReply, (void (*)(uint64_t))type metadata accessor for AMDPbPECReply);
}

uint64_t base witness table accessor for Message in AMDPbPECReply()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbPECReply and conformance AMDPbPECReply, (void (*)(uint64_t))type metadata accessor for AMDPbPECReply);
}

uint64_t base witness table accessor for Hashable in AMDPbPECReply()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbPECReply and conformance AMDPbPECReply, (void (*)(uint64_t))type metadata accessor for AMDPbPECReply);
}

uint64_t base witness table accessor for Equatable in AMDPbPECReply()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type AMDPbPECReply and conformance AMDPbPECReply, (void (*)(uint64_t))type metadata accessor for AMDPbPECReply);
}

uint64_t sub_249C75D94@<X0>(uint64_t a1@<X8>)
{
  return AMDPbHEConfig.pirConfig.getter(a1);
}

uint64_t sub_249C75DB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AMDPbHEConfig.pirConfig : AMDPbHEConfig(a1, a2, a3, a4, type metadata accessor for AMDPbPIRConfig, type metadata accessor for AMDPbPIRConfig, type metadata accessor for AMDPbPIRConfig);
}

uint64_t sub_249C75E10@<X0>(uint64_t a1@<X8>)
{
  return AMDPbHEConfig.pecConfig.getter(a1);
}

uint64_t sub_249C75E34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AMDPbHEConfig.pirConfig : AMDPbHEConfig(a1, a2, a3, a4, type metadata accessor for AMDPbPECConfig, type metadata accessor for AMDPbPECConfig, type metadata accessor for AMDPbPECConfig);
}

uint64_t sub_249C75E94@<X0>(uint64_t a1@<X8>)
{
  return AMDPbPIRConfig.encryptionParameters.getter(a1);
}

uint64_t sub_249C75EB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AMDPbPIRConfig.encryptionParameters : AMDPbPIRConfig(a1, a2, a3, a4, type metadata accessor for AMDPbPIRConfig);
}

uint64_t sub_249C75EEC@<X0>(uint64_t a1@<X8>)
{
  return AMDPbPECConfig.encryptionParameters.getter(a1);
}

uint64_t sub_249C75F10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AMDPbPIRConfig.encryptionParameters : AMDPbPIRConfig(a1, a2, a3, a4, type metadata accessor for AMDPbPECConfig);
}

uint64_t sub_249C75F44@<X0>(uint64_t a1@<X8>)
{
  return AMDPbHEQuery.pirQuery.getter(a1);
}

uint64_t sub_249C75F68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AMDPbHEQuery.pirQuery : AMDPbHEQuery(a1, a2, a3, a4, type metadata accessor for AMDPbPIRQuery, type metadata accessor for AMDPbPIRQuery, type metadata accessor for AMDPbPIRQuery);
}

uint64_t sub_249C75FC0@<X0>(uint64_t a1@<X8>)
{
  return AMDPbHEQuery.pecQuery.getter(a1);
}

uint64_t sub_249C75FE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AMDPbHEQuery.pirQuery : AMDPbHEQuery(a1, a2, a3, a4, type metadata accessor for AMDPbPECQuery, type metadata accessor for AMDPbPECQuery, type metadata accessor for AMDPbPECQuery);
}

uint64_t sub_249C76040(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AMDPbHEReply.pecReply : AMDPbHEReply(a1, a2, a3, a4, type metadata accessor for AMDPbPIRReply, type metadata accessor for AMDPbPIRReply, type metadata accessor for AMDPbPIRReply);
}

uint64_t sub_249C7609C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AMDPbHEReply.pecReply : AMDPbHEReply(a1, a2, a3, a4, type metadata accessor for AMDPbPECReply, type metadata accessor for AMDPbPECReply, type metadata accessor for AMDPbPECReply);
}

uint64_t sub_249C7610C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for AMDPbPIRQuery.evaluationKey : AMDPbPIRQuery(a1, type metadata accessor for AMDPbPIRQuery, a2);
}

uint64_t sub_249C76138(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AMDPbPIRQuery.evaluationKey : AMDPbPIRQuery(a1, a2, a3, a4, type metadata accessor for AMDPbPIRQuery);
}

uint64_t sub_249C76164@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return key path getter for AMDPbPECQuery.query : AMDPbPECQuery(a1, type metadata accessor for AMDPbPECQuery, a2);
}

uint64_t sub_249C76194@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for AMDPbPIRQuery.evaluationKey : AMDPbPIRQuery(a1, type metadata accessor for AMDPbPECQuery, a2);
}

uint64_t sub_249C761C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AMDPbPIRQuery.evaluationKey : AMDPbPIRQuery(a1, a2, a3, a4, type metadata accessor for AMDPbPECQuery);
}

uint64_t sub_249C761EC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return key path getter for AMDPbPECQuery.query : AMDPbPECQuery(a1, type metadata accessor for AMDPbPECShardReply, a2);
}

uint64_t initializeBufferWithCopyOfBuffer for AMDPbFetchHEConfigs(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);
  return v5(a1, a2, v4);
}

uint64_t destroy for AMDPbFetchHEConfigs(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UnknownStorage();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  return v3(a1, v2);
}

uint64_t initializeWithCopy for AMDPbFetchHEConfigs(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for AMDPbFetchHEConfigs(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for AMDPbFetchHEConfigs(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for AMDPbFetchHEConfigs(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for AMDPbFetchHEConfigs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_249C76490);
}

uint64_t sub_249C76490(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);
  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for AMDPbFetchHEConfigs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_249C76510);
}

uint64_t sub_249C76510(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(a1, a2, a2, v4);
}

uint64_t type metadata completion function for AMDPbFetchHEConfigs()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AMDPbHEConfigsReply(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a1;
    a1[1] = a2[1];
    uint64_t v6 = *(int *)(a3 + 24);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for UnknownStorage();
    uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t destroy for AMDPbHEConfigsReply(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

void *initializeWithCopy for AMDPbHEConfigsReply(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

void *assignWithCopy for AMDPbHEConfigsReply(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_OWORD *initializeWithTake for AMDPbHEConfigsReply(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void *assignWithTake for AMDPbHEConfigsReply(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for AMDPbHEConfigsReply(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_249C769F8);
}

uint64_t sub_249C769F8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for AMDPbHEConfigsReply(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_249C76ABC);
}

void *sub_249C76ABC(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 24);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for AMDPbHEConfigsReply()
{
  return type metadata completion function for AMDPbHEConfigsReply();
}

{
  uint64_t result;
  unint64_t v1;

  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for AMDPbHEConfig(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) == 0)
  {
    uint64_t v7 = type metadata accessor for AMDPbHEConfig.OneOf_Config(0);
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
LABEL_35:
      uint64_t v84 = *(int *)(a3 + 20);
      uint64_t v85 = (char *)a1 + v84;
      uint64_t v86 = (char *)a2 + v84;
      uint64_t v87 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v87 - 8) + 16))(v85, v86, v87);
      return a1;
    }
    uint64_t v103 = v8;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      *((_DWORD *)a1 + 2) = *((_DWORD *)a2 + 2);
      a1[2] = a2[2];
      *((unsigned char *)a1 + 24) = *((unsigned char *)a2 + 24);
      uint64_t v11 = a2[4];
      unint64_t v12 = a2[5];
      outlined copy of Data._Representation(v11, v12);
      a1[4] = v11;
      a1[5] = v12;
      uint64_t v13 = type metadata accessor for AMDPbPECConfig(0);
      uint64_t v14 = *(int *)(v13 + 32);
      uint64_t v15 = (char *)a1 + v14;
      uint64_t v16 = (char *)a2 + v14;
      uint64_t v17 = type metadata accessor for UnknownStorage();
      uint64_t v18 = *(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16);
      v18(v15, v16, v17);
      uint64_t v101 = v13;
      uint64_t v19 = *(int *)(v13 + 36);
      uint64_t v20 = (_OWORD *)((char *)a1 + v19);
      char v21 = (_OWORD *)((char *)a2 + v19);
      uint64_t v22 = type metadata accessor for AspireHeEncryptionParameters(0);
      uint64_t v23 = *(void *)(v22 - 8);
      v96 = v18;
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
      {
        uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
        memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
      }
      else
      {
        *uint64_t v20 = *v21;
        uint64_t v42 = *((void *)v21 + 3);
        *((void *)v20 + 2) = *((void *)v21 + 2);
        *((void *)v20 + 3) = v42;
        *((unsigned char *)v20 + 32) = *((unsigned char *)v21 + 32);
        *((void *)v20 + 5) = *((void *)v21 + 5);
        *((unsigned char *)v20 + 48) = *((unsigned char *)v21 + 48);
        *((void *)v20 + 7) = *((void *)v21 + 7);
        *((unsigned char *)v20 + 64) = *((unsigned char *)v21 + 64);
        uint64_t v43 = *(int *)(v22 + 40);
        v94 = (char *)v20 + v43;
        uint64_t v44 = (char *)v21 + v43;
        swift_bridgeObjectRetain();
        v18(v94, v44, v17);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
      }
      uint64_t v45 = *(int *)(v101 + 40);
      uint64_t v46 = (char *)a1 + v45;
      uint64_t v47 = (char *)a2 + v45;
      uint64_t v48 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
      uint64_t v49 = *(void *)(v48 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v47, 1, v48))
      {
        uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
        memcpy(v46, v47, *(void *)(*(void *)(v50 - 8) + 64));
      }
      else
      {
        uint64_t v102 = v49;
        uint64_t v63 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
        uint64_t v64 = *(void *)(v63 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48))(v47, 1, v63))
        {
          uint64_t v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
          memcpy(v46, v47, *(void *)(*(void *)(v65 - 8) + 64));
        }
        else
        {
          swift_getEnumCaseMultiPayload();
          v96(v46, v47, v17);
          swift_storeEnumTagMultiPayload();
          (*(void (**)(char *, void, uint64_t, uint64_t))(v64 + 56))(v46, 0, 1, v63);
        }
        v96(&v46[*(int *)(v48 + 20)], &v47[*(int *)(v48 + 20)], v17);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v102 + 56))(v46, 0, 1, v48);
      }
    }
    else
    {
      uint64_t v100 = v7;
      uint64_t v25 = a2[1];
      *a1 = *a2;
      a1[1] = v25;
      *((unsigned char *)a1 + 16) = *((unsigned char *)a2 + 16);
      uint64_t v26 = a2[4];
      a1[3] = a2[3];
      unint64_t v27 = a2[5];
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v26, v27);
      a1[4] = v26;
      a1[5] = v27;
      uint64_t v28 = (int *)type metadata accessor for AMDPbPIRConfig(0);
      uint64_t v29 = v28[8];
      uint64_t v30 = (char *)a1 + v29;
      uint64_t v31 = (char *)a2 + v29;
      uint64_t v32 = type metadata accessor for UnknownStorage();
      uint64_t v33 = *(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 16);
      uint64_t v34 = v30;
      uint64_t v35 = v32;
      v33(v34, v31, v32);
      uint64_t v36 = v28[9];
      uint64_t v37 = (_OWORD *)((char *)a1 + v36);
      uint64_t v38 = (_OWORD *)((char *)a2 + v36);
      uint64_t v39 = type metadata accessor for AspireHeEncryptionParameters(0);
      uint64_t v40 = *(void *)(v39 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39))
      {
        uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
        memcpy(v37, v38, *(void *)(*(void *)(v41 - 8) + 64));
      }
      else
      {
        *uint64_t v37 = *v38;
        uint64_t v51 = *((void *)v38 + 3);
        *((void *)v37 + 2) = *((void *)v38 + 2);
        *((void *)v37 + 3) = v51;
        *((unsigned char *)v37 + 32) = *((unsigned char *)v38 + 32);
        *((void *)v37 + 5) = *((void *)v38 + 5);
        *((unsigned char *)v37 + 48) = *((unsigned char *)v38 + 48);
        *((void *)v37 + 7) = *((void *)v38 + 7);
        *((unsigned char *)v37 + 64) = *((unsigned char *)v38 + 64);
        uint64_t v52 = *(int *)(v39 + 40);
        uint64_t v98 = v35;
        uint64_t v53 = (char *)v37 + v52;
        uint64_t v54 = (char *)v38 + v52;
        swift_bridgeObjectRetain();
        char v55 = v53;
        uint64_t v35 = v98;
        v33(v55, v54, v98);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
      }
      uint64_t v56 = v28[10];
      uint64_t v57 = (char *)a1 + v56;
      uint64_t v58 = (char *)a2 + v56;
      char v59 = (int *)type metadata accessor for AspirePirKeywordPirParameters(0);
      uint64_t v60 = *((void *)v59 - 1);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, int *))(v60 + 48))(v58, 1, v59))
      {
        uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
        memcpy(v57, v58, *(void *)(*(void *)(v61 - 8) + 64));
        uint64_t v62 = v103;
        uint64_t v7 = v100;
LABEL_34:
        swift_storeEnumTagMultiPayload();
        (*(void (**)(void *, void, uint64_t, uint64_t))(v62 + 56))(a1, 0, 1, v7);
        goto LABEL_35;
      }
      uint64_t v95 = v60;
      *(void *)uint64_t v57 = *(void *)v58;
      v57[8] = v58[8];
      v33(&v57[v59[6]], &v58[v59[6]], v35);
      uint64_t v66 = v59[7];
      v97 = v57;
      uint64_t v67 = &v57[v66];
      uint64_t v68 = (uint64_t *)&v58[v66];
      uint64_t v99 = v35;
      uint64_t v69 = type metadata accessor for AspirePirSymmetricPirClientConfig(0);
      uint64_t v70 = *(void *)(v69 - 8);
      v93 = v33;
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v70 + 48))(v68, 1, v69))
      {
        uint64_t v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirSymmetricPirClientConfig?);
        memcpy(v67, v68, *(void *)(*(void *)(v71 - 8) + 64));
      }
      else
      {
        unint64_t v89 = v68[1];
        uint64_t v91 = *v68;
        outlined copy of Data._Representation(*v68, v89);
        *uint64_t v67 = v91;
        v67[1] = v89;
        v67[2] = v68[2];
        *((unsigned char *)v67 + 24) = *((unsigned char *)v68 + 24);
        v33((char *)v67 + *(int *)(v69 + 24), (char *)v68 + *(int *)(v69 + 24), v99);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v70 + 56))(v67, 0, 1, v69);
      }
      uint64_t v72 = v59[8];
      uint64_t v73 = v97;
      uint64_t v74 = &v97[v72];
      uint64_t v75 = &v58[v72];
      uint64_t v76 = type metadata accessor for AspirePirPIRShardingFunction(0);
      uint64_t v77 = *(void *)(v76 - 8);
      uint64_t v7 = v100;
      if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v77 + 48))(v75, 1, v76))
      {
        uint64_t v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPIRShardingFunction?);
        memcpy(v74, v75, *(void *)(*(void *)(v78 - 8) + 64));
      }
      else
      {
        uint64_t v92 = v77;
        uint64_t v79 = type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function(0);
        uint64_t v80 = *(void *)(v79 - 8);
        if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v80 + 48))(v75, 1, v79))
        {
          uint64_t v81 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
          memcpy(v74, v75, *(void *)(*(void *)(v81 - 8) + 64));
          uint64_t v73 = v97;
          uint64_t v82 = v92;
        }
        else
        {
          uint64_t v90 = v80;
          if (swift_getEnumCaseMultiPayload() == 1)
          {
            *uint64_t v74 = *v75;
            uint64_t v83 = type metadata accessor for AspirePirPIRShardingFunctionDoubleMod(0);
            v93((char *)v74 + *(int *)(v83 + 20), (char *)v75 + *(int *)(v83 + 20), v99);
          }
          else
          {
            v93((char *)v74, (char *)v75, v99);
          }
          uint64_t v82 = v92;
          swift_storeEnumTagMultiPayload();
          (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v90 + 56))(v74, 0, 1, v79);
          uint64_t v73 = v97;
        }
        v93((char *)v74 + *(int *)(v76 + 20), (char *)v75 + *(int *)(v76 + 20), v99);
        (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v82 + 56))(v74, 0, 1, v76);
      }
      (*(void (**)(unsigned char *, void, uint64_t, int *))(v95 + 56))(v73, 0, 1, v59);
    }
    uint64_t v62 = v103;
    goto LABEL_34;
  }
  uint64_t v10 = *a2;
  *a1 = *a2;
  a1 = (void *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
  swift_retain();
  return a1;
}

uint64_t destroy for AMDPbHEConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AMDPbHEConfig.OneOf_Config(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, 1, v4))
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined consume of Data._Representation(*(void *)(a1 + 32), *(void *)(a1 + 40));
      uint64_t v9 = (int *)type metadata accessor for AMDPbPECConfig(0);
      uint64_t v10 = a1 + v9[8];
      uint64_t v11 = type metadata accessor for UnknownStorage();
      unint64_t v12 = *(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8);
      v12(v10, v11);
      uint64_t v13 = a1 + v9[9];
      uint64_t v14 = type metadata accessor for AspireHeEncryptionParameters(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48))(v13, 1, v14))
      {
        swift_bridgeObjectRelease();
        v12(v13 + *(int *)(v14 + 40), v11);
      }
      uint64_t v15 = a1 + v9[10];
      uint64_t v16 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48))(v15, 1, v16))
      {
        uint64_t v17 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 48))(v15, 1, v17)
          && swift_getEnumCaseMultiPayload() <= 2)
        {
          v12(v15, v11);
        }
        v12(v15 + *(int *)(v16 + 20), v11);
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      outlined consume of Data._Representation(*(void *)(a1 + 32), *(void *)(a1 + 40));
      uint64_t v18 = (int *)type metadata accessor for AMDPbPIRConfig(0);
      uint64_t v19 = a1 + v18[8];
      uint64_t v20 = type metadata accessor for UnknownStorage();
      char v21 = *(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8);
      v21(v19, v20);
      uint64_t v22 = a1 + v18[9];
      uint64_t v23 = type metadata accessor for AspireHeEncryptionParameters(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 48))(v22, 1, v23))
      {
        swift_bridgeObjectRelease();
        v21(v22 + *(int *)(v23 + 40), v20);
      }
      uint64_t v24 = a1 + v18[10];
      uint64_t v25 = (int *)type metadata accessor for AspirePirKeywordPirParameters(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((void *)v25 - 1) + 48))(v24, 1, v25))
      {
        v21(v24 + v25[6], v20);
        uint64_t v26 = v24 + v25[7];
        uint64_t v27 = type metadata accessor for AspirePirSymmetricPirClientConfig(0);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 48))(v26, 1, v27))
        {
          outlined consume of Data._Representation(*(void *)v26, *(void *)(v26 + 8));
          v21(v26 + *(int *)(v27 + 24), v20);
        }
        uint64_t v28 = v24 + v25[8];
        uint64_t v29 = type metadata accessor for AspirePirPIRShardingFunction(0);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 48))(v28, 1, v29))
        {
          uint64_t v30 = type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function(0);
          if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 48))(v28, 1, v30))
          {
            int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
            uint64_t v32 = v28;
            if (EnumCaseMultiPayload == 1) {
              uint64_t v32 = v28 + *(int *)(type metadata accessor for AspirePirPIRShardingFunctionDoubleMod(0) + 20);
            }
            v21(v32, v20);
          }
          v21(v28 + *(int *)(v29 + 20), v20);
        }
      }
    }
  }
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
  return v7(v5, v6);
}

void *initializeWithCopy for AMDPbHEConfig(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AMDPbHEConfig.OneOf_Config(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    uint64_t v105 = v7;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v103 = a3;
      *a1 = *a2;
      *((_DWORD *)a1 + 2) = *((_DWORD *)a2 + 2);
      a1[2] = a2[2];
      *((unsigned char *)a1 + 24) = *((unsigned char *)a2 + 24);
      uint64_t v9 = a2[4];
      unint64_t v10 = a2[5];
      outlined copy of Data._Representation(v9, v10);
      a1[4] = v9;
      a1[5] = v10;
      uint64_t v11 = (int *)type metadata accessor for AMDPbPECConfig(0);
      uint64_t v12 = v11[8];
      uint64_t v13 = (char *)a1 + v12;
      uint64_t v14 = (char *)a2 + v12;
      uint64_t v15 = type metadata accessor for UnknownStorage();
      uint64_t v16 = (void (**)(char *, char *))(*(void *)(v15 - 8) + 16);
      uint64_t v17 = v13;
      uint64_t v18 = *v16;
      uint64_t v102 = v15;
      (*v16)(v17, v14);
      uint64_t v19 = v11[9];
      uint64_t v20 = (_OWORD *)((char *)a1 + v19);
      char v21 = (_OWORD *)((char *)a2 + v19);
      uint64_t v22 = type metadata accessor for AspireHeEncryptionParameters(0);
      uint64_t v23 = *(void *)(v22 - 8);
      uint64_t v100 = v18;
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
      {
        uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
        memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
      }
      else
      {
        *uint64_t v20 = *v21;
        uint64_t v42 = *((void *)v21 + 3);
        *((void *)v20 + 2) = *((void *)v21 + 2);
        *((void *)v20 + 3) = v42;
        *((unsigned char *)v20 + 32) = *((unsigned char *)v21 + 32);
        *((void *)v20 + 5) = *((void *)v21 + 5);
        *((unsigned char *)v20 + 48) = *((unsigned char *)v21 + 48);
        *((void *)v20 + 7) = *((void *)v21 + 7);
        *((unsigned char *)v20 + 64) = *((unsigned char *)v21 + 64);
        uint64_t v43 = *(int *)(v22 + 40);
        v97 = (char *)v20 + v43;
        uint64_t v44 = (char *)v21 + v43;
        swift_bridgeObjectRetain();
        ((void (*)(char *, char *, uint64_t))v18)(v97, v44, v102);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
      }
      a3 = v103;
      uint64_t v45 = v11[10];
      uint64_t v46 = (char *)a1 + v45;
      uint64_t v47 = (char *)a2 + v45;
      uint64_t v48 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
      uint64_t v49 = *(void *)(v48 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v47, 1, v48))
      {
        uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
        memcpy(v46, v47, *(void *)(*(void *)(v50 - 8) + 64));
      }
      else
      {
        uint64_t v63 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
        uint64_t v64 = *(void *)(v63 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48))(v47, 1, v63))
        {
          uint64_t v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
          memcpy(v46, v47, *(void *)(*(void *)(v65 - 8) + 64));
        }
        else
        {
          swift_getEnumCaseMultiPayload();
          ((void (*)(char *, char *, uint64_t))v100)(v46, v47, v102);
          swift_storeEnumTagMultiPayload();
          (*(void (**)(char *, void, uint64_t, uint64_t))(v64 + 56))(v46, 0, 1, v63);
        }
        a3 = v103;
        ((void (*)(char *, char *, uint64_t))v100)(&v46[*(int *)(v48 + 20)], &v47[*(int *)(v48 + 20)], v102);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v49 + 56))(v46, 0, 1, v48);
      }
      uint64_t v62 = v105;
    }
    else
    {
      uint64_t v101 = v6;
      uint64_t v25 = a2[1];
      *a1 = *a2;
      a1[1] = v25;
      *((unsigned char *)a1 + 16) = *((unsigned char *)a2 + 16);
      uint64_t v26 = a2[4];
      a1[3] = a2[3];
      unint64_t v27 = a2[5];
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v26, v27);
      a1[4] = v26;
      a1[5] = v27;
      uint64_t v28 = (int *)type metadata accessor for AMDPbPIRConfig(0);
      uint64_t v29 = v28[8];
      uint64_t v30 = (char *)a1 + v29;
      uint64_t v31 = (char *)a2 + v29;
      uint64_t v32 = type metadata accessor for UnknownStorage();
      uint64_t v33 = *(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 16);
      uint64_t v34 = v30;
      uint64_t v35 = v32;
      v33(v34, v31, v32);
      uint64_t v36 = v28[9];
      uint64_t v37 = (_OWORD *)((char *)a1 + v36);
      uint64_t v38 = (_OWORD *)((char *)a2 + v36);
      uint64_t v39 = type metadata accessor for AspireHeEncryptionParameters(0);
      uint64_t v40 = *(void *)(v39 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39))
      {
        uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
        memcpy(v37, v38, *(void *)(*(void *)(v41 - 8) + 64));
      }
      else
      {
        *uint64_t v37 = *v38;
        uint64_t v51 = *((void *)v38 + 3);
        *((void *)v37 + 2) = *((void *)v38 + 2);
        *((void *)v37 + 3) = v51;
        *((unsigned char *)v37 + 32) = *((unsigned char *)v38 + 32);
        *((void *)v37 + 5) = *((void *)v38 + 5);
        *((unsigned char *)v37 + 48) = *((unsigned char *)v38 + 48);
        *((void *)v37 + 7) = *((void *)v38 + 7);
        *((unsigned char *)v37 + 64) = *((unsigned char *)v38 + 64);
        uint64_t v52 = *(int *)(v39 + 40);
        uint64_t v98 = v35;
        uint64_t v53 = (char *)v37 + v52;
        uint64_t v54 = (char *)v38 + v52;
        swift_bridgeObjectRetain();
        char v55 = v53;
        uint64_t v35 = v98;
        v33(v55, v54, v98);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
      }
      uint64_t v56 = v28[10];
      uint64_t v57 = (char *)a1 + v56;
      uint64_t v58 = (char *)a2 + v56;
      char v59 = (int *)type metadata accessor for AspirePirKeywordPirParameters(0);
      uint64_t v60 = *((void *)v59 - 1);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, int *))(v60 + 48))(v58, 1, v59))
      {
        uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
        memcpy(v57, v58, *(void *)(*(void *)(v61 - 8) + 64));
        uint64_t v62 = v105;
        uint64_t v6 = v101;
      }
      else
      {
        uint64_t v95 = v60;
        uint64_t v104 = a3;
        *(void *)uint64_t v57 = *(void *)v58;
        v57[8] = v58[8];
        v33(&v57[v59[6]], &v58[v59[6]], v35);
        uint64_t v66 = v59[7];
        v96 = v57;
        uint64_t v67 = &v57[v66];
        uint64_t v68 = (uint64_t *)&v58[v66];
        uint64_t v69 = v35;
        uint64_t v70 = type metadata accessor for AspirePirSymmetricPirClientConfig(0);
        uint64_t v71 = *(void *)(v70 - 8);
        uint64_t v99 = v69;
        v94 = v33;
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v71 + 48))(v68, 1, v70))
        {
          uint64_t v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirSymmetricPirClientConfig?);
          memcpy(v67, v68, *(void *)(*(void *)(v72 - 8) + 64));
        }
        else
        {
          unint64_t v91 = v68[1];
          uint64_t v92 = *v68;
          outlined copy of Data._Representation(*v68, v91);
          *uint64_t v67 = v92;
          v67[1] = v91;
          v67[2] = v68[2];
          *((unsigned char *)v67 + 24) = *((unsigned char *)v68 + 24);
          v33((char *)v67 + *(int *)(v70 + 24), (char *)v68 + *(int *)(v70 + 24), v69);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v71 + 56))(v67, 0, 1, v70);
        }
        uint64_t v73 = v59[8];
        uint64_t v74 = &v96[v73];
        uint64_t v75 = &v58[v73];
        uint64_t v76 = type metadata accessor for AspirePirPIRShardingFunction(0);
        uint64_t v77 = *(void *)(v76 - 8);
        uint64_t v62 = v105;
        uint64_t v6 = v101;
        if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v77 + 48))(v75, 1, v76))
        {
          uint64_t v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPIRShardingFunction?);
          memcpy(v74, v75, *(void *)(*(void *)(v78 - 8) + 64));
        }
        else
        {
          uint64_t v93 = v77;
          uint64_t v79 = type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function(0);
          uint64_t v80 = *(void *)(v79 - 8);
          if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v80 + 48))(v75, 1, v79))
          {
            uint64_t v81 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
            memcpy(v74, v75, *(void *)(*(void *)(v81 - 8) + 64));
            uint64_t v82 = v99;
            uint64_t v83 = v93;
          }
          else
          {
            uint64_t v90 = v80;
            uint64_t v83 = v93;
            if (swift_getEnumCaseMultiPayload() == 1)
            {
              *uint64_t v74 = *v75;
              uint64_t v84 = type metadata accessor for AspirePirPIRShardingFunctionDoubleMod(0);
              v94((char *)v74 + *(int *)(v84 + 20), (char *)v75 + *(int *)(v84 + 20), v99);
            }
            else
            {
              v94((char *)v74, (char *)v75, v99);
            }
            swift_storeEnumTagMultiPayload();
            (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v90 + 56))(v74, 0, 1, v79);
            uint64_t v82 = v99;
          }
          v94((char *)v74 + *(int *)(v76 + 20), (char *)v75 + *(int *)(v76 + 20), v82);
          (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v83 + 56))(v74, 0, 1, v76);
        }
        (*(void (**)(unsigned char *, void, uint64_t, int *))(v95 + 56))(v96, 0, 1, v59);
        a3 = v104;
      }
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(void *, void, uint64_t, uint64_t))(v62 + 56))(a1, 0, 1, v6);
  }
  uint64_t v85 = *(int *)(a3 + 20);
  uint64_t v86 = (char *)a1 + v85;
  uint64_t v87 = (char *)a2 + v85;
  uint64_t v88 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v88 - 8) + 16))(v86, v87, v88);
  return a1;
}

uint64_t assignWithCopy for AMDPbHEConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AMDPbHEConfig.OneOf_Config(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  uint64_t v206 = v6;
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      uint64_t v204 = a3;
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v201 = v7;
        *(void *)a1 = *(void *)a2;
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
        uint64_t v11 = *(void *)(a2 + 16);
        *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
        *(void *)(a1 + 16) = v11;
        uint64_t v12 = *(void *)(a2 + 32);
        unint64_t v13 = *(void *)(a2 + 40);
        outlined copy of Data._Representation(v12, v13);
        *(void *)(a1 + 32) = v12;
        *(void *)(a1 + 40) = v13;
        uint64_t v14 = type metadata accessor for AMDPbPECConfig(0);
        uint64_t v15 = *(int *)(v14 + 32);
        uint64_t v16 = a1 + v15;
        uint64_t v17 = a2 + v15;
        uint64_t v18 = type metadata accessor for UnknownStorage();
        uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16);
        uint64_t v20 = v16;
        uint64_t v21 = v14;
        v19(v20, v17, v18);
        uint64_t v22 = *(int *)(v14 + 36);
        uint64_t v23 = (void *)(a1 + v22);
        uint64_t v24 = (void *)(a2 + v22);
        uint64_t v25 = type metadata accessor for AspireHeEncryptionParameters(0);
        uint64_t v26 = *(void *)(v25 - 8);
        uint64_t v195 = v18;
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
        {
          uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
          memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64));
        }
        else
        {
          void *v23 = *v24;
          v23[1] = v24[1];
          v23[2] = v24[2];
          uint64_t v63 = v24[3];
          *((unsigned char *)v23 + 32) = *((unsigned char *)v24 + 32);
          v23[3] = v63;
          uint64_t v64 = v24[5];
          *((unsigned char *)v23 + 48) = *((unsigned char *)v24 + 48);
          v23[5] = v64;
          uint64_t v65 = v24[7];
          *((unsigned char *)v23 + 64) = *((unsigned char *)v24 + 64);
          v23[7] = v65;
          uint64_t v66 = *(int *)(v25 + 40);
          uint64_t v189 = v21;
          uint64_t v67 = (char *)v23 + v66;
          uint64_t v68 = (char *)v24 + v66;
          swift_bridgeObjectRetain();
          uint64_t v69 = v67;
          uint64_t v21 = v189;
          v19((uint64_t)v69, (uint64_t)v68, v18);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
        }
        uint64_t v7 = v201;
        uint64_t v70 = *(int *)(v21 + 40);
        uint64_t v71 = (char *)(a1 + v70);
        uint64_t v72 = (char *)(a2 + v70);
        uint64_t v73 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
        uint64_t v74 = *(void *)(v73 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v74 + 48))(v72, 1, v73))
        {
          uint64_t v75 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
          memcpy(v71, v72, *(void *)(*(void *)(v75 - 8) + 64));
        }
        else
        {
          uint64_t v106 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
          uint64_t v107 = *(void *)(v106 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v107 + 48))(v72, 1, v106))
          {
            uint64_t v108 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
            memcpy(v71, v72, *(void *)(*(void *)(v108 - 8) + 64));
          }
          else
          {
            swift_getEnumCaseMultiPayload();
            v19((uint64_t)v71, (uint64_t)v72, v195);
            swift_storeEnumTagMultiPayload();
            (*(void (**)(char *, void, uint64_t, uint64_t))(v107 + 56))(v71, 0, 1, v106);
          }
          uint64_t v7 = v201;
          v19((uint64_t)&v71[*(int *)(v73 + 20)], (uint64_t)&v72[*(int *)(v73 + 20)], v195);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v74 + 56))(v71, 0, 1, v73);
        }
      }
      else
      {
        *(void *)a1 = *(void *)a2;
        uint64_t v46 = *(void *)(a2 + 8);
        *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
        *(void *)(a1 + 8) = v46;
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        uint64_t v47 = *(void *)(a2 + 32);
        unint64_t v48 = *(void *)(a2 + 40);
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v47, v48);
        *(void *)(a1 + 32) = v47;
        *(void *)(a1 + 40) = v48;
        uint64_t v49 = (int *)type metadata accessor for AMDPbPIRConfig(0);
        uint64_t v50 = v49[8];
        uint64_t v51 = a1 + v50;
        uint64_t v52 = a2 + v50;
        uint64_t v53 = type metadata accessor for UnknownStorage();
        uint64_t v54 = v51;
        char v55 = (void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v53 - 8) + 16);
        v196 = *v55;
        (*v55)(v54, v52, v53);
        uint64_t v56 = v49[9];
        uint64_t v57 = (void *)(a1 + v56);
        uint64_t v58 = (void *)(a2 + v56);
        uint64_t v59 = type metadata accessor for AspireHeEncryptionParameters(0);
        uint64_t v60 = *(void *)(v59 - 8);
        uint64_t v193 = v53;
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v60 + 48))(v58, 1, v59))
        {
          uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
          memcpy(v57, v58, *(void *)(*(void *)(v61 - 8) + 64));
          uint64_t v62 = v196;
        }
        else
        {
          *uint64_t v57 = *v58;
          v57[1] = v58[1];
          v57[2] = v58[2];
          uint64_t v93 = v58[3];
          *((unsigned char *)v57 + 32) = *((unsigned char *)v58 + 32);
          v57[3] = v93;
          uint64_t v94 = v58[5];
          *((unsigned char *)v57 + 48) = *((unsigned char *)v58 + 48);
          v57[5] = v94;
          uint64_t v95 = v58[7];
          *((unsigned char *)v57 + 64) = *((unsigned char *)v58 + 64);
          v57[7] = v95;
          uint64_t v96 = *(int *)(v59 + 40);
          v97 = (char *)v57 + v96;
          uint64_t v98 = (char *)v58 + v96;
          swift_bridgeObjectRetain();
          uint64_t v99 = v53;
          uint64_t v62 = v196;
          v196((uint64_t)v97, (uint64_t)v98, v99);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v60 + 56))(v57, 0, 1, v59);
        }
        uint64_t v100 = v49[10];
        uint64_t v101 = (char *)(a1 + v100);
        uint64_t v102 = (char *)(a2 + v100);
        uint64_t v103 = (int *)type metadata accessor for AspirePirKeywordPirParameters(0);
        uint64_t v104 = *((void *)v103 - 1);
        if (!(*(unsigned int (**)(char *, uint64_t, int *))(v104 + 48))(v102, 1, v103))
        {
          uint64_t v187 = v104;
          uint64_t v203 = v7;
          *(void *)uint64_t v101 = *(void *)v102;
          v101[8] = v102[8];
          uint64_t v109 = v103[6];
          v110 = &v101[v109];
          v111 = v101;
          uint64_t v112 = v193;
          v62((uint64_t)v110, (uint64_t)&v102[v109], v193);
          uint64_t v113 = v103[7];
          v190 = v111;
          v114 = &v111[v113];
          v115 = &v102[v113];
          uint64_t v116 = type metadata accessor for AspirePirSymmetricPirClientConfig(0);
          uint64_t v117 = *(void *)(v116 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v117 + 48))(v115, 1, v116))
          {
            uint64_t v118 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirSymmetricPirClientConfig?);
            memcpy(v114, v115, *(void *)(*(void *)(v118 - 8) + 64));
          }
          else
          {
            unint64_t v151 = *((void *)v115 + 1);
            v186 = v103;
            uint64_t v152 = *(void *)v115;
            outlined copy of Data._Representation(*(void *)v115, v151);
            *(void *)v114 = v152;
            *((void *)v114 + 1) = v151;
            uint64_t v112 = v193;
            uint64_t v103 = v186;
            uint64_t v153 = *((void *)v115 + 2);
            v114[24] = v115[24];
            *((void *)v114 + 2) = v153;
            v62((uint64_t)&v114[*(int *)(v116 + 24)], (uint64_t)&v115[*(int *)(v116 + 24)], v193);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v117 + 56))(v114, 0, 1, v116);
          }
          uint64_t v154 = v103[8];
          v155 = &v190[v154];
          v156 = &v102[v154];
          uint64_t v157 = type metadata accessor for AspirePirPIRShardingFunction(0);
          uint64_t v158 = *(void *)(v157 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v158 + 48))(v156, 1, v157))
          {
            uint64_t v159 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPIRShardingFunction?);
            memcpy(v155, v156, *(void *)(*(void *)(v159 - 8) + 64));
          }
          else
          {
            uint64_t v170 = type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function(0);
            uint64_t v171 = *(void *)(v170 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v171 + 48))(v156, 1, v170))
            {
              uint64_t v172 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
              memcpy(v155, v156, *(void *)(*(void *)(v172 - 8) + 64));
            }
            else
            {
              if (swift_getEnumCaseMultiPayload() == 1)
              {
                *(_DWORD *)v155 = *(_DWORD *)v156;
                uint64_t v181 = type metadata accessor for AspirePirPIRShardingFunctionDoubleMod(0);
                v196((uint64_t)&v155[*(int *)(v181 + 20)], (uint64_t)&v156[*(int *)(v181 + 20)], v112);
              }
              else
              {
                v196((uint64_t)v155, (uint64_t)v156, v112);
              }
              swift_storeEnumTagMultiPayload();
              (*(void (**)(char *, void, uint64_t, uint64_t))(v171 + 56))(v155, 0, 1, v170);
            }
            v196((uint64_t)&v155[*(int *)(v157 + 20)], (uint64_t)&v156[*(int *)(v157 + 20)], v112);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v158 + 56))(v155, 0, 1, v157);
          }
          uint64_t v7 = v203;
          a3 = v204;
          (*(void (**)(char *, void, uint64_t, int *))(v187 + 56))(v190, 0, 1, v103);
          goto LABEL_36;
        }
        uint64_t v105 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
        memcpy(v101, v102, *(void *)(*(void *)(v105 - 8) + 64));
      }
      a3 = v204;
LABEL_36:
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v206);
      goto LABEL_37;
    }
    goto LABEL_8;
  }
  if (v10)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config(a1, type metadata accessor for AMDPbHEConfig.OneOf_Config);
LABEL_8:
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
    memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v28 - 8) + 64));
    goto LABEL_37;
  }
  if (a1 != a2)
  {
    uint64_t v205 = a3;
    outlined destroy of AMDPbHEConfig.OneOf_Config(a1, type metadata accessor for AMDPbHEConfig.OneOf_Config);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *(void *)a1 = *(void *)a2;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
      uint64_t v29 = *(void *)(a2 + 16);
      *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
      *(void *)(a1 + 16) = v29;
      uint64_t v30 = *(void *)(a2 + 32);
      unint64_t v31 = *(void *)(a2 + 40);
      outlined copy of Data._Representation(v30, v31);
      *(void *)(a1 + 32) = v30;
      *(void *)(a1 + 40) = v31;
      uint64_t v32 = (int *)type metadata accessor for AMDPbPECConfig(0);
      uint64_t v33 = v32[8];
      uint64_t v34 = a1 + v33;
      uint64_t v35 = a2 + v33;
      uint64_t v36 = type metadata accessor for UnknownStorage();
      uint64_t v37 = (void (**)(uint64_t, uint64_t))(*(void *)(v36 - 8) + 16);
      uint64_t v38 = v34;
      uint64_t v39 = *v37;
      uint64_t v202 = v36;
      (*v37)(v38, v35);
      uint64_t v40 = v32[9];
      uint64_t v41 = (void *)(a1 + v40);
      uint64_t v42 = (void *)(a2 + v40);
      uint64_t v43 = type metadata accessor for AspireHeEncryptionParameters(0);
      uint64_t v44 = *(void *)(v43 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v44 + 48))(v42, 1, v43))
      {
        uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
        memcpy(v41, v42, *(void *)(*(void *)(v45 - 8) + 64));
      }
      else
      {
        *uint64_t v41 = *v42;
        v41[1] = v42[1];
        v41[2] = v42[2];
        uint64_t v119 = v42[3];
        *((unsigned char *)v41 + 32) = *((unsigned char *)v42 + 32);
        v41[3] = v119;
        uint64_t v120 = v42[5];
        *((unsigned char *)v41 + 48) = *((unsigned char *)v42 + 48);
        v41[5] = v120;
        uint64_t v121 = v42[7];
        *((unsigned char *)v41 + 64) = *((unsigned char *)v42 + 64);
        v41[7] = v121;
        uint64_t v122 = *(int *)(v43 + 40);
        v197 = v39;
        v123 = (char *)v41 + v122;
        v124 = (char *)v42 + v122;
        swift_bridgeObjectRetain();
        v125 = v123;
        uint64_t v39 = v197;
        ((void (*)(char *, char *, uint64_t))v197)(v125, v124, v202);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v44 + 56))(v41, 0, 1, v43);
      }
      uint64_t v126 = v32[10];
      v127 = (char *)(a1 + v126);
      v128 = (char *)(a2 + v126);
      uint64_t v129 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
      uint64_t v130 = *(void *)(v129 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v130 + 48))(v128, 1, v129))
      {
        uint64_t v131 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
        memcpy(v127, v128, *(void *)(*(void *)(v131 - 8) + 64));
      }
      else
      {
        v199 = (void (*)(char *, char *, uint64_t))v39;
        uint64_t v160 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
        uint64_t v161 = *(void *)(v160 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v161 + 48))(v128, 1, v160))
        {
          uint64_t v162 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
          memcpy(v127, v128, *(void *)(*(void *)(v162 - 8) + 64));
        }
        else
        {
          swift_getEnumCaseMultiPayload();
          v199(v127, v128, v202);
          swift_storeEnumTagMultiPayload();
          (*(void (**)(char *, void, uint64_t, uint64_t))(v161 + 56))(v127, 0, 1, v160);
        }
        v199(&v127[*(int *)(v129 + 20)], &v128[*(int *)(v129 + 20)], v202);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v130 + 56))(v127, 0, 1, v129);
      }
    }
    else
    {
      *(void *)a1 = *(void *)a2;
      uint64_t v76 = *(void *)(a2 + 8);
      *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
      *(void *)(a1 + 8) = v76;
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      uint64_t v77 = *(void *)(a2 + 32);
      unint64_t v78 = *(void *)(a2 + 40);
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v77, v78);
      *(void *)(a1 + 32) = v77;
      *(void *)(a1 + 40) = v78;
      uint64_t v79 = (int *)type metadata accessor for AMDPbPIRConfig(0);
      uint64_t v80 = v79[8];
      uint64_t v81 = a1 + v80;
      uint64_t v82 = a2 + v80;
      uint64_t v83 = type metadata accessor for UnknownStorage();
      uint64_t v84 = v82;
      uint64_t v85 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v83 - 8) + 16);
      v85(v81, v84, v83);
      uint64_t v86 = v79[9];
      uint64_t v87 = (void *)(a1 + v86);
      uint64_t v88 = (void *)(a2 + v86);
      uint64_t v89 = type metadata accessor for AspireHeEncryptionParameters(0);
      uint64_t v90 = *(void *)(v89 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v90 + 48))(v88, 1, v89))
      {
        uint64_t v91 = v83;
        uint64_t v92 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
        memcpy(v87, v88, *(void *)(*(void *)(v92 - 8) + 64));
      }
      else
      {
        *uint64_t v87 = *v88;
        v87[1] = v88[1];
        v87[2] = v88[2];
        uint64_t v132 = v88[3];
        *((unsigned char *)v87 + 32) = *((unsigned char *)v88 + 32);
        v87[3] = v132;
        uint64_t v133 = v88[5];
        *((unsigned char *)v87 + 48) = *((unsigned char *)v88 + 48);
        v87[5] = v133;
        uint64_t v134 = v88[7];
        *((unsigned char *)v87 + 64) = *((unsigned char *)v88 + 64);
        v87[7] = v134;
        uint64_t v135 = *(int *)(v89 + 40);
        v136 = (char *)v87 + v135;
        v198 = v85;
        v137 = (char *)v88 + v135;
        swift_bridgeObjectRetain();
        v138 = v136;
        v139 = v137;
        uint64_t v91 = v83;
        uint64_t v85 = v198;
        v198((uint64_t)v138, (uint64_t)v139, v83);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v90 + 56))(v87, 0, 1, v89);
      }
      uint64_t v140 = v79[10];
      v141 = (unsigned char *)(a1 + v140);
      v142 = (unsigned char *)(a2 + v140);
      v143 = (int *)type metadata accessor for AspirePirKeywordPirParameters(0);
      uint64_t v144 = *((void *)v143 - 1);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, int *))(v144 + 48))(v142, 1, v143))
      {
        uint64_t v145 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
        memcpy(v141, v142, *(void *)(*(void *)(v145 - 8) + 64));
      }
      else
      {
        uint64_t v192 = v144;
        *(void *)v141 = *(void *)v142;
        v141[8] = v142[8];
        v85((uint64_t)&v141[v143[6]], (uint64_t)&v142[v143[6]], v91);
        uint64_t v163 = v143[7];
        v194 = v141;
        v164 = &v141[v163];
        v165 = (uint64_t *)&v142[v163];
        v166 = v85;
        uint64_t v167 = type metadata accessor for AspirePirSymmetricPirClientConfig(0);
        uint64_t v168 = *(void *)(v167 - 8);
        uint64_t v191 = v91;
        v200 = (void (*)(char *, char *, uint64_t))v166;
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v168 + 48))(v165, 1, v167))
        {
          uint64_t v169 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirSymmetricPirClientConfig?);
          memcpy(v164, v165, *(void *)(*(void *)(v169 - 8) + 64));
        }
        else
        {
          unint64_t v188 = v165[1];
          uint64_t v173 = *v165;
          outlined copy of Data._Representation(*v165, v188);
          void *v164 = v173;
          v164[1] = v188;
          uint64_t v174 = v165[2];
          *((unsigned char *)v164 + 24) = *((unsigned char *)v165 + 24);
          v164[2] = v174;
          v166((uint64_t)v164 + *(int *)(v167 + 24), (uint64_t)v165 + *(int *)(v167 + 24), v191);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v168 + 56))(v164, 0, 1, v167);
        }
        uint64_t v175 = v143[8];
        v176 = &v194[v175];
        v177 = &v142[v175];
        uint64_t v178 = type metadata accessor for AspirePirPIRShardingFunction(0);
        uint64_t v179 = *(void *)(v178 - 8);
        if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v179 + 48))(v177, 1, v178))
        {
          uint64_t v180 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPIRShardingFunction?);
          memcpy(v176, v177, *(void *)(*(void *)(v180 - 8) + 64));
        }
        else
        {
          uint64_t v182 = type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function(0);
          uint64_t v183 = *(void *)(v182 - 8);
          if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v183 + 48))(v177, 1, v182))
          {
            uint64_t v184 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
            memcpy(v176, v177, *(void *)(*(void *)(v184 - 8) + 64));
          }
          else
          {
            if (swift_getEnumCaseMultiPayload() == 1)
            {
              _DWORD *v176 = *v177;
              uint64_t v185 = type metadata accessor for AspirePirPIRShardingFunctionDoubleMod(0);
              v200((char *)v176 + *(int *)(v185 + 20), (char *)v177 + *(int *)(v185 + 20), v191);
            }
            else
            {
              v200((char *)v176, (char *)v177, v191);
            }
            swift_storeEnumTagMultiPayload();
            (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v183 + 56))(v176, 0, 1, v182);
          }
          v200((char *)v176 + *(int *)(v178 + 20), (char *)v177 + *(int *)(v178 + 20), v191);
          (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v179 + 56))(v176, 0, 1, v178);
        }
        (*(void (**)(unsigned char *, void, uint64_t, int *))(v192 + 56))(v194, 0, 1, v143);
      }
    }
    a3 = v205;
    swift_storeEnumTagMultiPayload();
  }
LABEL_37:
  uint64_t v146 = *(int *)(a3 + 20);
  uint64_t v147 = a1 + v146;
  uint64_t v148 = a2 + v146;
  uint64_t v149 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v149 - 8) + 24))(v147, v148, v149);
  return a1;
}

_DWORD *initializeWithTake for AMDPbHEConfig(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AMDPbHEConfig.OneOf_Config(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (!(*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    *(void *)a1 = *(void *)a2;
    uint64_t v82 = v7;
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v81 = a3;
      a1[2] = a2[2];
      *((void *)a1 + 2) = *((void *)a2 + 2);
      *((unsigned char *)a1 + 24) = *((unsigned char *)a2 + 24);
      *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
      int v10 = (int *)type metadata accessor for AMDPbPECConfig(0);
      uint64_t v11 = v10[8];
      uint64_t v12 = (char *)a1 + v11;
      unint64_t v13 = (char *)a2 + v11;
      uint64_t v14 = type metadata accessor for UnknownStorage();
      uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32);
      v15(v12, v13, v14);
      uint64_t v16 = v10[9];
      uint64_t v17 = (_OWORD *)((char *)a1 + v16);
      uint64_t v18 = (_OWORD *)((char *)a2 + v16);
      uint64_t v19 = type metadata accessor for AspireHeEncryptionParameters(0);
      uint64_t v20 = *(void *)(v19 - 8);
      uint64_t v78 = v14;
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
      {
        uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
        memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
      }
      else
      {
        *uint64_t v17 = *v18;
        uint64_t v34 = *((void *)v18 + 3);
        *((void *)v17 + 2) = *((void *)v18 + 2);
        *((void *)v17 + 3) = v34;
        *((unsigned char *)v17 + 32) = *((unsigned char *)v18 + 32);
        *((void *)v17 + 5) = *((void *)v18 + 5);
        *((unsigned char *)v17 + 48) = *((unsigned char *)v18 + 48);
        *((void *)v17 + 7) = *((void *)v18 + 7);
        *((unsigned char *)v17 + 64) = *((unsigned char *)v18 + 64);
        v15((char *)v17 + *(int *)(v19 + 40), (char *)v18 + *(int *)(v19 + 40), v14);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      }
      uint64_t v35 = v82;
      uint64_t v36 = v10[10];
      uint64_t v37 = (char *)a1 + v36;
      uint64_t v38 = (char *)a2 + v36;
      uint64_t v39 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
      uint64_t v40 = *(void *)(v39 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39))
      {
        uint64_t v76 = v40;
        uint64_t v49 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
        uint64_t v50 = *(void *)(v49 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48))(v38, 1, v49))
        {
          uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
          memcpy(v37, v38, *(void *)(*(void *)(v51 - 8) + 64));
        }
        else
        {
          swift_getEnumCaseMultiPayload();
          v15(v37, v38, v78);
          swift_storeEnumTagMultiPayload();
          (*(void (**)(char *, void, uint64_t, uint64_t))(v50 + 56))(v37, 0, 1, v49);
        }
        v15(&v37[*(int *)(v39 + 20)], &v38[*(int *)(v39 + 20)], v78);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v76 + 56))(v37, 0, 1, v39);
        a3 = v81;
        uint64_t v35 = v82;
        goto LABEL_32;
      }
      uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
      memcpy(v37, v38, *(void *)(*(void *)(v41 - 8) + 64));
    }
    else
    {
      uint64_t v80 = v6;
      *((void *)a1 + 1) = *((void *)a2 + 1);
      *((unsigned char *)a1 + 16) = *((unsigned char *)a2 + 16);
      *((void *)a1 + 3) = *((void *)a2 + 3);
      *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
      uint64_t v22 = (int *)type metadata accessor for AMDPbPIRConfig(0);
      uint64_t v23 = v22[8];
      uint64_t v24 = (char *)a1 + v23;
      uint64_t v25 = (char *)a2 + v23;
      uint64_t v26 = type metadata accessor for UnknownStorage();
      uint64_t v27 = *(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 32);
      v27(v24, v25, v26);
      uint64_t v28 = v22[9];
      uint64_t v29 = (_OWORD *)((char *)a1 + v28);
      uint64_t v30 = (_OWORD *)((char *)a2 + v28);
      uint64_t v31 = type metadata accessor for AspireHeEncryptionParameters(0);
      uint64_t v32 = *(void *)(v31 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
      {
        uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
        memcpy(v29, v30, *(void *)(*(void *)(v33 - 8) + 64));
      }
      else
      {
        *uint64_t v29 = *v30;
        uint64_t v42 = *((void *)v30 + 3);
        *((void *)v29 + 2) = *((void *)v30 + 2);
        *((void *)v29 + 3) = v42;
        *((unsigned char *)v29 + 32) = *((unsigned char *)v30 + 32);
        *((void *)v29 + 5) = *((void *)v30 + 5);
        *((unsigned char *)v29 + 48) = *((unsigned char *)v30 + 48);
        *((void *)v29 + 7) = *((void *)v30 + 7);
        *((unsigned char *)v29 + 64) = *((unsigned char *)v30 + 64);
        v27((char *)v29 + *(int *)(v31 + 40), (char *)v30 + *(int *)(v31 + 40), v26);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
      }
      uint64_t v43 = v22[10];
      uint64_t v44 = (char *)a1 + v43;
      uint64_t v45 = (char *)a2 + v43;
      uint64_t v46 = (int *)type metadata accessor for AspirePirKeywordPirParameters(0);
      uint64_t v47 = *((void *)v46 - 1);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, int *))(v47 + 48))(v45, 1, v46))
      {
        uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
        memcpy(v44, v45, *(void *)(*(void *)(v48 - 8) + 64));
        uint64_t v35 = v82;
        uint64_t v6 = v80;
LABEL_32:
        swift_storeEnumTagMultiPayload();
        (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v35 + 56))(a1, 0, 1, v6);
        goto LABEL_33;
      }
      uint64_t v77 = v47;
      uint64_t v81 = a3;
      *(void *)uint64_t v44 = *(void *)v45;
      v44[8] = v45[8];
      v27(&v44[v46[6]], &v45[v46[6]], v26);
      uint64_t v52 = v46[7];
      uint64_t v75 = v27;
      uint64_t v79 = v44;
      uint64_t v53 = &v44[v52];
      uint64_t v54 = &v45[v52];
      uint64_t v55 = type metadata accessor for AspirePirSymmetricPirClientConfig(0);
      uint64_t v56 = *(void *)(v55 - 8);
      uint64_t v74 = v26;
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v56 + 48))(v54, 1, v55))
      {
        uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirSymmetricPirClientConfig?);
        memcpy(v53, v54, *(void *)(*(void *)(v57 - 8) + 64));
      }
      else
      {
        _OWORD *v53 = *v54;
        *((void *)v53 + 2) = *((void *)v54 + 2);
        *((unsigned char *)v53 + 24) = *((unsigned char *)v54 + 24);
        v27((char *)v53 + *(int *)(v55 + 24), (char *)v54 + *(int *)(v55 + 24), v26);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v56 + 56))(v53, 0, 1, v55);
      }
      uint64_t v58 = v46[8];
      uint64_t v59 = &v79[v58];
      uint64_t v60 = &v45[v58];
      uint64_t v61 = type metadata accessor for AspirePirPIRShardingFunction(0);
      uint64_t v62 = *(void *)(v61 - 8);
      uint64_t v35 = v82;
      uint64_t v6 = v80;
      if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v62 + 48))(v60, 1, v61))
      {
        uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPIRShardingFunction?);
        memcpy(v59, v60, *(void *)(*(void *)(v63 - 8) + 64));
      }
      else
      {
        uint64_t v73 = v62;
        uint64_t v64 = type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function(0);
        uint64_t v72 = *(void *)(v64 - 8);
        if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v72 + 48))(v60, 1, v64))
        {
          uint64_t v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
          memcpy(v59, v60, *(void *)(*(void *)(v65 - 8) + 64));
        }
        else
        {
          if (swift_getEnumCaseMultiPayload() == 1)
          {
            *uint64_t v59 = *v60;
            uint64_t v66 = type metadata accessor for AspirePirPIRShardingFunctionDoubleMod(0);
            v75((char *)v59 + *(int *)(v66 + 20), (char *)v60 + *(int *)(v66 + 20), v74);
          }
          else
          {
            v75((char *)v59, (char *)v60, v74);
          }
          swift_storeEnumTagMultiPayload();
          (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v72 + 56))(v59, 0, 1, v64);
        }
        v75((char *)v59 + *(int *)(v61 + 20), (char *)v60 + *(int *)(v61 + 20), v74);
        (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v73 + 56))(v59, 0, 1, v61);
      }
      (*(void (**)(unsigned char *, void, uint64_t, int *))(v77 + 56))(v79, 0, 1, v46);
    }
    a3 = v81;
    goto LABEL_32;
  }
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
  memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
LABEL_33:
  uint64_t v67 = *(int *)(a3 + 20);
  uint64_t v68 = (char *)a1 + v67;
  uint64_t v69 = (char *)a2 + v67;
  uint64_t v70 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v70 - 8) + 32))(v68, v69, v70);
  return a1;
}

uint64_t assignWithTake for AMDPbHEConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AMDPbHEConfig.OneOf_Config(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      *(void *)a1 = *(void *)a2;
      uint64_t v162 = v7;
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v157 = a3;
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        uint64_t v12 = type metadata accessor for AMDPbPECConfig(0);
        uint64_t v13 = *(int *)(v12 + 32);
        uint64_t v14 = a1 + v13;
        uint64_t v15 = a2 + v13;
        uint64_t v16 = type metadata accessor for UnknownStorage();
        uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 32);
        v17(v14, v15, v16);
        uint64_t v155 = v12;
        uint64_t v18 = *(int *)(v12 + 36);
        uint64_t v19 = (_OWORD *)(a1 + v18);
        uint64_t v20 = (_OWORD *)(a2 + v18);
        uint64_t v21 = type metadata accessor for AspireHeEncryptionParameters(0);
        uint64_t v22 = *(void *)(v21 - 8);
        uint64_t v146 = v16;
        v150 = (void (*)(char *, char *, uint64_t))v17;
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
        {
          uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
          memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
        }
        else
        {
          _OWORD *v19 = *v20;
          uint64_t v50 = *((void *)v20 + 3);
          *((void *)v19 + 2) = *((void *)v20 + 2);
          *((void *)v19 + 3) = v50;
          *((unsigned char *)v19 + 32) = *((unsigned char *)v20 + 32);
          *((void *)v19 + 5) = *((void *)v20 + 5);
          *((unsigned char *)v19 + 48) = *((unsigned char *)v20 + 48);
          *((void *)v19 + 7) = *((void *)v20 + 7);
          *((unsigned char *)v19 + 64) = *((unsigned char *)v20 + 64);
          v17((uint64_t)v19 + *(int *)(v21 + 40), (uint64_t)v20 + *(int *)(v21 + 40), v16);
          (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
        }
        uint64_t v51 = *(int *)(v155 + 40);
        uint64_t v52 = (char *)(a1 + v51);
        uint64_t v53 = (char *)(a2 + v51);
        uint64_t v54 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
        uint64_t v55 = *(void *)(v54 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v53, 1, v54))
        {
          uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
          memcpy(v52, v53, *(void *)(*(void *)(v56 - 8) + 64));
        }
        else
        {
          uint64_t v76 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
          uint64_t v77 = *(void *)(v76 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v77 + 48))(v53, 1, v76))
          {
            uint64_t v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
            memcpy(v52, v53, *(void *)(*(void *)(v78 - 8) + 64));
          }
          else
          {
            swift_getEnumCaseMultiPayload();
            v150(v52, v53, v146);
            swift_storeEnumTagMultiPayload();
            (*(void (**)(char *, void, uint64_t, uint64_t))(v77 + 56))(v52, 0, 1, v76);
          }
          v150(&v52[*(int *)(v54 + 20)], &v53[*(int *)(v54 + 20)], v146);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v55 + 56))(v52, 0, 1, v54);
        }
        a3 = v157;
      }
      else
      {
        uint64_t v152 = v6;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        uint64_t v38 = (int *)type metadata accessor for AMDPbPIRConfig(0);
        uint64_t v39 = v38[8];
        uint64_t v40 = a1 + v39;
        uint64_t v41 = a2 + v39;
        uint64_t v42 = type metadata accessor for UnknownStorage();
        uint64_t v43 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 32);
        v43(v40, v41, v42);
        uint64_t v44 = v38[9];
        uint64_t v45 = (_OWORD *)(a1 + v44);
        uint64_t v46 = (_OWORD *)(a2 + v44);
        uint64_t v47 = type metadata accessor for AspireHeEncryptionParameters(0);
        uint64_t v48 = *(void *)(v47 - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v48 + 48))(v46, 1, v47))
        {
          uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
          memcpy(v45, v46, *(void *)(*(void *)(v49 - 8) + 64));
        }
        else
        {
          *uint64_t v45 = *v46;
          uint64_t v69 = *((void *)v46 + 3);
          *((void *)v45 + 2) = *((void *)v46 + 2);
          *((void *)v45 + 3) = v69;
          *((unsigned char *)v45 + 32) = *((unsigned char *)v46 + 32);
          *((void *)v45 + 5) = *((void *)v46 + 5);
          *((unsigned char *)v45 + 48) = *((unsigned char *)v46 + 48);
          *((void *)v45 + 7) = *((void *)v46 + 7);
          *((unsigned char *)v45 + 64) = *((unsigned char *)v46 + 64);
          v43((uint64_t)v45 + *(int *)(v47 + 40), (uint64_t)v46 + *(int *)(v47 + 40), v42);
          (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
        }
        uint64_t v70 = v38[10];
        uint64_t v71 = (unsigned char *)(a1 + v70);
        uint64_t v72 = (unsigned char *)(a2 + v70);
        uint64_t v73 = (int *)type metadata accessor for AspirePirKeywordPirParameters(0);
        uint64_t v74 = *((void *)v73 - 1);
        if ((*(unsigned int (**)(unsigned char *, uint64_t, int *))(v74 + 48))(v72, 1, v73))
        {
          uint64_t v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
          memcpy(v71, v72, *(void *)(*(void *)(v75 - 8) + 64));
          uint64_t v7 = v162;
          uint64_t v6 = v152;
        }
        else
        {
          uint64_t v145 = v74;
          uint64_t v160 = a3;
          *(void *)uint64_t v71 = *(void *)v72;
          v71[8] = v72[8];
          v43((uint64_t)&v71[v73[6]], (uint64_t)&v72[v73[6]], v42);
          uint64_t v79 = v73[7];
          v143 = (void (*)(char *, char *, uint64_t))v43;
          uint64_t v147 = v71;
          uint64_t v80 = &v71[v79];
          uint64_t v81 = &v72[v79];
          uint64_t v82 = type metadata accessor for AspirePirSymmetricPirClientConfig(0);
          uint64_t v83 = *(void *)(v82 - 8);
          uint64_t v141 = v42;
          if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v83 + 48))(v81, 1, v82))
          {
            uint64_t v84 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirSymmetricPirClientConfig?);
            memcpy(v80, v81, *(void *)(*(void *)(v84 - 8) + 64));
          }
          else
          {
            _OWORD *v80 = *v81;
            *((void *)v80 + 2) = *((void *)v81 + 2);
            *((unsigned char *)v80 + 24) = *((unsigned char *)v81 + 24);
            v43((uint64_t)v80 + *(int *)(v82 + 24), (uint64_t)v81 + *(int *)(v82 + 24), v42);
            (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v83 + 56))(v80, 0, 1, v82);
          }
          uint64_t v7 = v162;
          uint64_t v100 = v147;
          uint64_t v6 = v152;
          uint64_t v101 = v73[8];
          uint64_t v102 = &v147[v101];
          uint64_t v103 = &v72[v101];
          uint64_t v104 = type metadata accessor for AspirePirPIRShardingFunction(0);
          uint64_t v105 = *(void *)(v104 - 8);
          if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v105 + 48))(v103, 1, v104))
          {
            uint64_t v106 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPIRShardingFunction?);
            memcpy(v102, v103, *(void *)(*(void *)(v106 - 8) + 64));
          }
          else
          {
            uint64_t v154 = v105;
            uint64_t v118 = type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function(0);
            uint64_t v149 = *(void *)(v118 - 8);
            if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v149 + 48))(v103, 1, v118))
            {
              uint64_t v119 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
              memcpy(v102, v103, *(void *)(*(void *)(v119 - 8) + 64));
            }
            else
            {
              if (swift_getEnumCaseMultiPayload() == 1)
              {
                *uint64_t v102 = *v103;
                uint64_t v127 = type metadata accessor for AspirePirPIRShardingFunctionDoubleMod(0);
                v143((char *)v102 + *(int *)(v127 + 20), (char *)v103 + *(int *)(v127 + 20), v141);
              }
              else
              {
                v143((char *)v102, (char *)v103, v141);
              }
              swift_storeEnumTagMultiPayload();
              (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v149 + 56))(v102, 0, 1, v118);
            }
            v143((char *)v102 + *(int *)(v104 + 20), (char *)v103 + *(int *)(v104 + 20), v141);
            (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v154 + 56))(v102, 0, 1, v104);
          }
          a3 = v160;
          (*(void (**)(unsigned char *, void, uint64_t, int *))(v145 + 56))(v100, 0, 1, v73);
        }
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_60;
    }
LABEL_8:
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
    memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v24 - 8) + 64));
    goto LABEL_60;
  }
  if (v10)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config(a1, type metadata accessor for AMDPbHEConfig.OneOf_Config);
    goto LABEL_8;
  }
  if (a1 != a2)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config(a1, type metadata accessor for AMDPbHEConfig.OneOf_Config);
    int v25 = swift_getEnumCaseMultiPayload();
    *(void *)a1 = *(void *)a2;
    if (v25 == 1)
    {
      uint64_t v158 = a3;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      uint64_t v26 = (int *)type metadata accessor for AMDPbPECConfig(0);
      uint64_t v27 = v26[8];
      uint64_t v28 = a1 + v27;
      uint64_t v29 = a2 + v27;
      uint64_t v30 = type metadata accessor for UnknownStorage();
      uint64_t v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 32);
      v31(v28, v29, v30);
      uint64_t v32 = v26[9];
      uint64_t v33 = (_OWORD *)(a1 + v32);
      uint64_t v34 = (_OWORD *)(a2 + v32);
      uint64_t v35 = type metadata accessor for AspireHeEncryptionParameters(0);
      uint64_t v36 = *(void *)(v35 - 8);
      uint64_t v151 = v30;
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
      {
        uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
        memcpy(v33, v34, *(void *)(*(void *)(v37 - 8) + 64));
      }
      else
      {
        _OWORD *v33 = *v34;
        uint64_t v85 = *((void *)v34 + 3);
        *((void *)v33 + 2) = *((void *)v34 + 2);
        *((void *)v33 + 3) = v85;
        *((unsigned char *)v33 + 32) = *((unsigned char *)v34 + 32);
        *((void *)v33 + 5) = *((void *)v34 + 5);
        *((unsigned char *)v33 + 48) = *((unsigned char *)v34 + 48);
        *((void *)v33 + 7) = *((void *)v34 + 7);
        *((unsigned char *)v33 + 64) = *((unsigned char *)v34 + 64);
        v31((uint64_t)v33 + *(int *)(v35 + 40), (uint64_t)v34 + *(int *)(v35 + 40), v30);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
      }
      uint64_t v86 = v26[10];
      uint64_t v87 = (char *)(a1 + v86);
      uint64_t v88 = (char *)(a2 + v86);
      uint64_t v89 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
      uint64_t v90 = *(void *)(v89 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v90 + 48))(v88, 1, v89))
      {
        uint64_t v91 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
        memcpy(v87, v88, *(void *)(*(void *)(v91 - 8) + 64));
      }
      else
      {
        uint64_t v107 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
        uint64_t v108 = *(void *)(v107 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v108 + 48))(v88, 1, v107))
        {
          uint64_t v109 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
          memcpy(v87, v88, *(void *)(*(void *)(v109 - 8) + 64));
        }
        else
        {
          swift_getEnumCaseMultiPayload();
          v31((uint64_t)v87, (uint64_t)v88, v151);
          swift_storeEnumTagMultiPayload();
          (*(void (**)(char *, void, uint64_t, uint64_t))(v108 + 56))(v87, 0, 1, v107);
        }
        v31((uint64_t)&v87[*(int *)(v89 + 20)], (uint64_t)&v88[*(int *)(v89 + 20)], v151);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v90 + 56))(v87, 0, 1, v89);
      }
      a3 = v158;
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      uint64_t v57 = type metadata accessor for AMDPbPIRConfig(0);
      uint64_t v58 = *(int *)(v57 + 32);
      uint64_t v59 = a1 + v58;
      uint64_t v60 = a2 + v58;
      uint64_t v61 = type metadata accessor for UnknownStorage();
      uint64_t v62 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v61 - 8) + 32);
      v62(v59, v60, v61);
      uint64_t v159 = v57;
      uint64_t v63 = *(int *)(v57 + 36);
      uint64_t v64 = (_OWORD *)(a1 + v63);
      uint64_t v65 = (_OWORD *)(a2 + v63);
      uint64_t v66 = type metadata accessor for AspireHeEncryptionParameters(0);
      uint64_t v67 = *(void *)(v66 - 8);
      v156 = v62;
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v67 + 48))(v65, 1, v66))
      {
        uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
        memcpy(v64, v65, *(void *)(*(void *)(v68 - 8) + 64));
      }
      else
      {
        _OWORD *v64 = *v65;
        uint64_t v92 = *((void *)v65 + 3);
        *((void *)v64 + 2) = *((void *)v65 + 2);
        *((void *)v64 + 3) = v92;
        *((unsigned char *)v64 + 32) = *((unsigned char *)v65 + 32);
        *((void *)v64 + 5) = *((void *)v65 + 5);
        *((unsigned char *)v64 + 48) = *((unsigned char *)v65 + 48);
        *((void *)v64 + 7) = *((void *)v65 + 7);
        *((unsigned char *)v64 + 64) = *((unsigned char *)v65 + 64);
        v62((uint64_t)v64 + *(int *)(v66 + 40), (uint64_t)v65 + *(int *)(v66 + 40), v61);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v67 + 56))(v64, 0, 1, v66);
      }
      uint64_t v93 = v61;
      uint64_t v94 = *(int *)(v159 + 40);
      uint64_t v95 = (unsigned char *)(a1 + v94);
      uint64_t v96 = (unsigned char *)(a2 + v94);
      uint64_t v97 = type metadata accessor for AspirePirKeywordPirParameters(0);
      uint64_t v98 = *(void *)(v97 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v98 + 48))(v96, 1, v97))
      {
        uint64_t v99 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
        memcpy(v95, v96, *(void *)(*(void *)(v99 - 8) + 64));
      }
      else
      {
        uint64_t v161 = a3;
        *(void *)uint64_t v95 = *(void *)v96;
        v95[8] = v96[8];
        v62((uint64_t)&v95[*(int *)(v97 + 24)], (uint64_t)&v96[*(int *)(v97 + 24)], v93);
        uint64_t v148 = v95;
        uint64_t v153 = v97;
        uint64_t v110 = *(int *)(v97 + 28);
        uint64_t v111 = v93;
        uint64_t v112 = &v95[v110];
        uint64_t v113 = &v96[v110];
        uint64_t v114 = type metadata accessor for AspirePirSymmetricPirClientConfig(0);
        uint64_t v115 = *(void *)(v114 - 8);
        uint64_t v144 = v111;
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v115 + 48))(v113, 1, v114))
        {
          uint64_t v116 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirSymmetricPirClientConfig?);
          memcpy(v112, v113, *(void *)(*(void *)(v116 - 8) + 64));
          uint64_t v117 = (void (*)(char *, char *, uint64_t))v156;
        }
        else
        {
          *uint64_t v112 = *v113;
          *((void *)v112 + 2) = *((void *)v113 + 2);
          *((unsigned char *)v112 + 24) = *((unsigned char *)v113 + 24);
          uint64_t v120 = v111;
          uint64_t v117 = (void (*)(char *, char *, uint64_t))v156;
          v156((uint64_t)v112 + *(int *)(v114 + 24), (uint64_t)v113 + *(int *)(v114 + 24), v120);
          (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v115 + 56))(v112, 0, 1, v114);
        }
        uint64_t v121 = *(int *)(v153 + 32);
        uint64_t v122 = &v148[v121];
        v123 = &v96[v121];
        uint64_t v124 = type metadata accessor for AspirePirPIRShardingFunction(0);
        uint64_t v125 = *(void *)(v124 - 8);
        if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v125 + 48))(v123, 1, v124))
        {
          uint64_t v126 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPIRShardingFunction?);
          memcpy(v122, v123, *(void *)(*(void *)(v126 - 8) + 64));
        }
        else
        {
          uint64_t v142 = v125;
          uint64_t v128 = type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function(0);
          uint64_t v129 = *(void *)(v128 - 8);
          if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v129 + 48))(v123, 1, v128))
          {
            uint64_t v130 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
            memcpy(v122, v123, *(void *)(*(void *)(v130 - 8) + 64));
            uint64_t v132 = v142;
            uint64_t v131 = v144;
          }
          else
          {
            uint64_t v140 = v129;
            uint64_t v138 = v128;
            uint64_t v132 = v142;
            uint64_t v131 = v144;
            if (swift_getEnumCaseMultiPayload() == 1)
            {
              *uint64_t v122 = *v123;
              uint64_t v139 = type metadata accessor for AspirePirPIRShardingFunctionDoubleMod(0);
              v156((uint64_t)v122 + *(int *)(v139 + 20), (uint64_t)v123 + *(int *)(v139 + 20), v144);
            }
            else
            {
              v156((uint64_t)v122, (uint64_t)v123, v144);
            }
            swift_storeEnumTagMultiPayload();
            (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v140 + 56))(v122, 0, 1, v138);
            uint64_t v117 = (void (*)(char *, char *, uint64_t))v156;
          }
          v117((char *)v122 + *(int *)(v124 + 20), (char *)v123 + *(int *)(v124 + 20), v131);
          (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v132 + 56))(v122, 0, 1, v124);
        }
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v98 + 56))(v148, 0, 1, v153);
        a3 = v161;
      }
      swift_storeEnumTagMultiPayload();
    }
  }
LABEL_60:
  uint64_t v133 = *(int *)(a3 + 20);
  uint64_t v134 = a1 + v133;
  uint64_t v135 = a2 + v133;
  uint64_t v136 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v136 - 8) + 40))(v134, v135, v136);
  return a1;
}

uint64_t getEnumTagSinglePayload for AMDPbHEConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_249C7BE48);
}

uint64_t sub_249C7BE48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_40Tm(a1, a2, a3, &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
}

uint64_t storeEnumTagSinglePayload for AMDPbHEConfig(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_249C7BE68);
}

uint64_t sub_249C7BE68(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_41Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
}

void type metadata completion function for AMDPbHEConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t initializeBufferWithCopyOfBuffer for AMDPbHEConfig.OneOf_Config(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *(void *)a1 = *a2;
    a1 = v20 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *(void *)a1 = *a2;
      *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
      *(void *)(a1 + 16) = a2[2];
      *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
      uint64_t v6 = a2[4];
      unint64_t v7 = a2[5];
      outlined copy of Data._Representation(v6, v7);
      *(void *)(a1 + 32) = v6;
      *(void *)(a1 + 40) = v7;
      uint64_t v8 = (int *)type metadata accessor for AMDPbPECConfig(0);
      uint64_t v9 = v8[8];
      uint64_t v10 = a1 + v9;
      uint64_t v11 = (uint64_t)a2 + v9;
      uint64_t v12 = type metadata accessor for UnknownStorage();
      uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16);
      v13(v10, v11, v12);
      uint64_t v14 = v8[9];
      uint64_t v15 = (_OWORD *)(a1 + v14);
      uint64_t v16 = (_OWORD *)((char *)a2 + v14);
      uint64_t v17 = type metadata accessor for AspireHeEncryptionParameters(0);
      uint64_t v18 = *(void *)(v17 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
      {
        uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
        memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
      }
      else
      {
        *uint64_t v15 = *v16;
        uint64_t v36 = *((void *)v16 + 3);
        *((void *)v15 + 2) = *((void *)v16 + 2);
        *((void *)v15 + 3) = v36;
        *((unsigned char *)v15 + 32) = *((unsigned char *)v16 + 32);
        *((void *)v15 + 5) = *((void *)v16 + 5);
        *((unsigned char *)v15 + 48) = *((unsigned char *)v16 + 48);
        *((void *)v15 + 7) = *((void *)v16 + 7);
        *((unsigned char *)v15 + 64) = *((unsigned char *)v16 + 64);
        uint64_t v37 = *(int *)(v17 + 40);
        uint64_t v89 = v12;
        uint64_t v38 = v13;
        uint64_t v39 = (char *)v15 + v37;
        uint64_t v40 = (char *)v16 + v37;
        swift_bridgeObjectRetain();
        uint64_t v41 = v39;
        uint64_t v13 = v38;
        uint64_t v12 = v89;
        v13((uint64_t)v41, (uint64_t)v40, v89);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      }
      uint64_t v42 = v8[10];
      uint64_t v43 = (char *)(a1 + v42);
      uint64_t v44 = (char *)a2 + v42;
      uint64_t v45 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
      uint64_t v46 = *(void *)(v45 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v44, 1, v45))
      {
        uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
        memcpy(v43, v44, *(void *)(*(void *)(v47 - 8) + 64));
      }
      else
      {
        uint64_t v60 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
        uint64_t v61 = *(void *)(v60 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v61 + 48))(v44, 1, v60))
        {
          uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
          memcpy(v43, v44, *(void *)(*(void *)(v62 - 8) + 64));
        }
        else
        {
          swift_getEnumCaseMultiPayload();
          v13((uint64_t)v43, (uint64_t)v44, v12);
          swift_storeEnumTagMultiPayload();
          (*(void (**)(char *, void, uint64_t, uint64_t))(v61 + 56))(v43, 0, 1, v60);
        }
        v13((uint64_t)&v43[*(int *)(v45 + 20)], (uint64_t)&v44[*(int *)(v45 + 20)], v12);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
      }
    }
    else
    {
      uint64_t v21 = a2[1];
      *(void *)a1 = *a2;
      *(void *)(a1 + 8) = v21;
      *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
      uint64_t v22 = a2[4];
      *(void *)(a1 + 24) = a2[3];
      unint64_t v23 = a2[5];
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v22, v23);
      *(void *)(a1 + 32) = v22;
      *(void *)(a1 + 40) = v23;
      uint64_t v24 = (int *)type metadata accessor for AMDPbPIRConfig(0);
      uint64_t v25 = v24[8];
      uint64_t v26 = a1 + v25;
      uint64_t v27 = (uint64_t)a2 + v25;
      uint64_t v28 = type metadata accessor for UnknownStorage();
      uint64_t v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 16);
      v29(v26, v27, v28);
      uint64_t v30 = v24[9];
      uint64_t v31 = (_OWORD *)(a1 + v30);
      uint64_t v32 = (_OWORD *)((char *)a2 + v30);
      uint64_t v33 = type metadata accessor for AspireHeEncryptionParameters(0);
      uint64_t v34 = *(void *)(v33 - 8);
      uint64_t v90 = v28;
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
      {
        uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
        memcpy(v31, v32, *(void *)(*(void *)(v35 - 8) + 64));
      }
      else
      {
        *uint64_t v31 = *v32;
        uint64_t v48 = *((void *)v32 + 3);
        *((void *)v31 + 2) = *((void *)v32 + 2);
        *((void *)v31 + 3) = v48;
        *((unsigned char *)v31 + 32) = *((unsigned char *)v32 + 32);
        *((void *)v31 + 5) = *((void *)v32 + 5);
        *((unsigned char *)v31 + 48) = *((unsigned char *)v32 + 48);
        *((void *)v31 + 7) = *((void *)v32 + 7);
        *((unsigned char *)v31 + 64) = *((unsigned char *)v32 + 64);
        uint64_t v49 = *(int *)(v33 + 40);
        uint64_t v50 = v29;
        uint64_t v51 = (char *)v31 + v49;
        uint64_t v52 = (char *)v32 + v49;
        swift_bridgeObjectRetain();
        uint64_t v53 = v51;
        uint64_t v29 = v50;
        v50((uint64_t)v53, (uint64_t)v52, v28);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
      }
      uint64_t v54 = v24[10];
      uint64_t v55 = (unsigned char *)(a1 + v54);
      uint64_t v56 = (char *)a2 + v54;
      uint64_t v57 = (int *)type metadata accessor for AspirePirKeywordPirParameters(0);
      uint64_t v58 = *((void *)v57 - 1);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, int *))(v58 + 48))(v56, 1, v57))
      {
        uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
        memcpy(v55, v56, *(void *)(*(void *)(v59 - 8) + 64));
      }
      else
      {
        uint64_t v87 = v58;
        *(void *)uint64_t v55 = *(void *)v56;
        v55[8] = v56[8];
        v29((uint64_t)&v55[v57[6]], (uint64_t)&v56[v57[6]], v28);
        uint64_t v63 = v57[7];
        uint64_t v88 = v55;
        uint64_t v64 = &v55[v63];
        uint64_t v65 = (uint64_t *)&v56[v63];
        uint64_t v66 = v29;
        uint64_t v67 = type metadata accessor for AspirePirSymmetricPirClientConfig(0);
        uint64_t v68 = *(void *)(v67 - 8);
        uint64_t v86 = (void (*)(char *, char *, uint64_t))v66;
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v68 + 48))(v65, 1, v67))
        {
          uint64_t v69 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirSymmetricPirClientConfig?);
          memcpy(v64, v65, *(void *)(*(void *)(v69 - 8) + 64));
        }
        else
        {
          uint64_t v71 = *v65;
          unint64_t v70 = v65[1];
          outlined copy of Data._Representation(*v65, v70);
          void *v64 = v71;
          v64[1] = v70;
          v64[2] = v65[2];
          *((unsigned char *)v64 + 24) = *((unsigned char *)v65 + 24);
          uint64_t v28 = v90;
          ((void (*)(char *, char *))v66)((char *)v64 + *(int *)(v67 + 24), (char *)v65 + *(int *)(v67 + 24));
          (*(void (**)(void *, void, uint64_t, uint64_t))(v68 + 56))(v64, 0, 1, v67);
        }
        uint64_t v72 = v57[8];
        uint64_t v73 = v88;
        uint64_t v74 = &v88[v72];
        uint64_t v75 = &v56[v72];
        uint64_t v76 = type metadata accessor for AspirePirPIRShardingFunction(0);
        uint64_t v77 = *(void *)(v76 - 8);
        if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v77 + 48))(v75, 1, v76))
        {
          uint64_t v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPIRShardingFunction?);
          memcpy(v74, v75, *(void *)(*(void *)(v78 - 8) + 64));
        }
        else
        {
          uint64_t v79 = v28;
          uint64_t v80 = type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function(0);
          uint64_t v81 = *(void *)(v80 - 8);
          if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v81 + 48))(v75, 1, v80))
          {
            uint64_t v82 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
            memcpy(v74, v75, *(void *)(*(void *)(v82 - 8) + 64));
          }
          else
          {
            if (swift_getEnumCaseMultiPayload() == 1)
            {
              *uint64_t v74 = *v75;
              uint64_t v83 = type metadata accessor for AspirePirPIRShardingFunctionDoubleMod(0);
              v86((char *)v74 + *(int *)(v83 + 20), (char *)v75 + *(int *)(v83 + 20), v79);
            }
            else
            {
              v86((char *)v74, (char *)v75, v79);
            }
            swift_storeEnumTagMultiPayload();
            (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v81 + 56))(v74, 0, 1, v80);
          }
          uint64_t v84 = v79;
          uint64_t v73 = v88;
          v86((char *)v74 + *(int *)(v76 + 20), (char *)v75 + *(int *)(v76 + 20), v84);
          (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v77 + 56))(v74, 0, 1, v76);
        }
        (*(void (**)(unsigned char *, void, uint64_t, int *))(v87 + 56))(v73, 0, 1, v57);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for AMDPbHEConfig.OneOf_Config(uint64_t a1)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined consume of Data._Representation(*(void *)(a1 + 32), *(void *)(a1 + 40));
    uint64_t v2 = (int *)type metadata accessor for AMDPbPECConfig(0);
    uint64_t v3 = a1 + v2[8];
    uint64_t v4 = type metadata accessor for UnknownStorage();
    unint64_t v23 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
    v23(v3, v4);
    uint64_t v5 = a1 + v2[9];
    uint64_t v6 = type metadata accessor for AspireHeEncryptionParameters(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6))
    {
      swift_bridgeObjectRelease();
      v23(v5 + *(int *)(v6 + 40), v4);
    }
    uint64_t v7 = a1 + v2[10];
    uint64_t v8 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v7, 1, v8);
    if (!result)
    {
      uint64_t v10 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v7, 1, v10)
        && swift_getEnumCaseMultiPayload() <= 2)
      {
        uint64_t v11 = v7;
LABEL_18:
        v23(v11, v4);
        goto LABEL_19;
      }
      goto LABEL_19;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(*(void *)(a1 + 32), *(void *)(a1 + 40));
    uint64_t v12 = (int *)type metadata accessor for AMDPbPIRConfig(0);
    uint64_t v13 = a1 + v12[8];
    uint64_t v4 = type metadata accessor for UnknownStorage();
    unint64_t v23 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
    v23(v13, v4);
    uint64_t v14 = a1 + v12[9];
    uint64_t v15 = type metadata accessor for AspireHeEncryptionParameters(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48))(v14, 1, v15))
    {
      swift_bridgeObjectRelease();
      v23(v14 + *(int *)(v15 + 40), v4);
    }
    uint64_t v16 = a1 + v12[10];
    uint64_t v17 = (int *)type metadata accessor for AspirePirKeywordPirParameters(0);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*((void *)v17 - 1) + 48))(v16, 1, v17);
    if (!result)
    {
      v23(v16 + v17[6], v4);
      uint64_t v18 = v16 + v17[7];
      uint64_t v19 = type metadata accessor for AspirePirSymmetricPirClientConfig(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 48))(v18, 1, v19))
      {
        outlined consume of Data._Representation(*(void *)v18, *(void *)(v18 + 8));
        v23(v18 + *(int *)(v19 + 24), v4);
      }
      uint64_t v7 = v16 + v17[8];
      uint64_t v8 = type metadata accessor for AspirePirPIRShardingFunction(0);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v7, 1, v8);
      if (!result)
      {
        uint64_t v20 = type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function(0);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 48))(v7, 1, v20))
        {
          int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
          uint64_t v11 = v7;
          if (EnumCaseMultiPayload == 1) {
            uint64_t v11 = v7 + *(int *)(type metadata accessor for AspirePirPIRShardingFunctionDoubleMod(0) + 20);
          }
          goto LABEL_18;
        }
LABEL_19:
        uint64_t v22 = v7 + *(int *)(v8 + 20);
        return ((uint64_t (*)(uint64_t, uint64_t))v23)(v22, v4);
      }
    }
  }
  return result;
}

uint64_t initializeWithCopy for AMDPbHEConfig.OneOf_Config(uint64_t a1, uint64_t a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *(void *)a1 = *(void *)a2;
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
    uint64_t v4 = *(void *)(a2 + 32);
    unint64_t v5 = *(void *)(a2 + 40);
    outlined copy of Data._Representation(v4, v5);
    *(void *)(a1 + 32) = v4;
    *(void *)(a1 + 40) = v5;
    uint64_t v6 = (int *)type metadata accessor for AMDPbPECConfig(0);
    uint64_t v7 = v6[8];
    uint64_t v8 = a1 + v7;
    uint64_t v9 = a2 + v7;
    uint64_t v10 = type metadata accessor for UnknownStorage();
    uint64_t v11 = (void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
    uint64_t v12 = v8;
    uint64_t v13 = *v11;
    (*v11)(v12, v9, v10);
    uint64_t v14 = v6[9];
    uint64_t v15 = (_OWORD *)(a1 + v14);
    uint64_t v16 = (_OWORD *)(a2 + v14);
    uint64_t v17 = type metadata accessor for AspireHeEncryptionParameters(0);
    uint64_t v18 = *(void *)(v17 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      *uint64_t v15 = *v16;
      uint64_t v35 = *((void *)v16 + 3);
      *((void *)v15 + 2) = *((void *)v16 + 2);
      *((void *)v15 + 3) = v35;
      *((unsigned char *)v15 + 32) = *((unsigned char *)v16 + 32);
      *((void *)v15 + 5) = *((void *)v16 + 5);
      *((unsigned char *)v15 + 48) = *((unsigned char *)v16 + 48);
      *((void *)v15 + 7) = *((void *)v16 + 7);
      *((unsigned char *)v15 + 64) = *((unsigned char *)v16 + 64);
      uint64_t v36 = *(int *)(v17 + 40);
      uint64_t v37 = v13;
      uint64_t v38 = (char *)v15 + v36;
      uint64_t v39 = (char *)v16 + v36;
      swift_bridgeObjectRetain();
      uint64_t v40 = v38;
      uint64_t v13 = v37;
      v37((uint64_t)v40, (uint64_t)v39, v10);
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
    uint64_t v41 = v6[10];
    uint64_t v42 = (char *)(a1 + v41);
    uint64_t v43 = (char *)(a2 + v41);
    uint64_t v44 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
    uint64_t v45 = *(void *)(v44 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44))
    {
      uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
      memcpy(v42, v43, *(void *)(*(void *)(v46 - 8) + 64));
    }
    else
    {
      uint64_t v57 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
      uint64_t v58 = *(void *)(v57 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48))(v43, 1, v57))
      {
        uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
        memcpy(v42, v43, *(void *)(*(void *)(v59 - 8) + 64));
      }
      else
      {
        swift_getEnumCaseMultiPayload();
        v13((uint64_t)v42, (uint64_t)v43, v10);
        swift_storeEnumTagMultiPayload();
        (*(void (**)(char *, void, uint64_t, uint64_t))(v58 + 56))(v42, 0, 1, v57);
      }
      v13((uint64_t)&v42[*(int *)(v44 + 20)], (uint64_t)&v43[*(int *)(v44 + 20)], v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v45 + 56))(v42, 0, 1, v44);
    }
  }
  else
  {
    uint64_t v20 = *(void *)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v20;
    *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
    uint64_t v21 = *(void *)(a2 + 32);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    unint64_t v22 = *(void *)(a2 + 40);
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v21, v22);
    *(void *)(a1 + 32) = v21;
    *(void *)(a1 + 40) = v22;
    unint64_t v23 = (int *)type metadata accessor for AMDPbPIRConfig(0);
    uint64_t v24 = v23[8];
    uint64_t v25 = a1 + v24;
    uint64_t v26 = a2 + v24;
    uint64_t v27 = type metadata accessor for UnknownStorage();
    uint64_t v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 16);
    v28(v25, v26, v27);
    uint64_t v29 = v23[9];
    uint64_t v30 = (_OWORD *)(a1 + v29);
    uint64_t v31 = (_OWORD *)(a2 + v29);
    uint64_t v32 = type metadata accessor for AspireHeEncryptionParameters(0);
    uint64_t v33 = *(void *)(v32 - 8);
    uint64_t v81 = v27;
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
    {
      uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64));
    }
    else
    {
      *uint64_t v30 = *v31;
      uint64_t v47 = *((void *)v31 + 3);
      *((void *)v30 + 2) = *((void *)v31 + 2);
      *((void *)v30 + 3) = v47;
      *((unsigned char *)v30 + 32) = *((unsigned char *)v31 + 32);
      *((void *)v30 + 5) = *((void *)v31 + 5);
      *((unsigned char *)v30 + 48) = *((unsigned char *)v31 + 48);
      *((void *)v30 + 7) = *((void *)v31 + 7);
      *((unsigned char *)v30 + 64) = *((unsigned char *)v31 + 64);
      uint64_t v48 = *(int *)(v32 + 40);
      uint64_t v49 = (char *)v30 + v48;
      uint64_t v50 = (char *)v31 + v48;
      swift_bridgeObjectRetain();
      v28((uint64_t)v49, (uint64_t)v50, v27);
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
    }
    uint64_t v51 = v23[10];
    uint64_t v52 = (unsigned char *)(a1 + v51);
    uint64_t v53 = (unsigned char *)(a2 + v51);
    uint64_t v54 = (int *)type metadata accessor for AspirePirKeywordPirParameters(0);
    uint64_t v55 = *((void *)v54 - 1);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, int *))(v55 + 48))(v53, 1, v54))
    {
      uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
      memcpy(v52, v53, *(void *)(*(void *)(v56 - 8) + 64));
    }
    else
    {
      *(void *)uint64_t v52 = *(void *)v53;
      v52[8] = v53[8];
      v28((uint64_t)&v52[v54[6]], (uint64_t)&v53[v54[6]], v27);
      uint64_t v60 = v54[7];
      uint64_t v80 = v52;
      uint64_t v61 = &v52[v60];
      uint64_t v62 = (uint64_t *)&v53[v60];
      uint64_t v63 = type metadata accessor for AspirePirSymmetricPirClientConfig(0);
      uint64_t v64 = *(void *)(v63 - 8);
      uint64_t v79 = (void (*)(char *, char *, uint64_t))v28;
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v64 + 48))(v62, 1, v63))
      {
        uint64_t v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirSymmetricPirClientConfig?);
        memcpy(v61, v62, *(void *)(*(void *)(v65 - 8) + 64));
      }
      else
      {
        uint64_t v66 = *v62;
        unint64_t v78 = v62[1];
        outlined copy of Data._Representation(*v62, v78);
        *uint64_t v61 = v66;
        v61[1] = v78;
        v61[2] = v62[2];
        *((unsigned char *)v61 + 24) = *((unsigned char *)v62 + 24);
        v79((char *)v61 + *(int *)(v63 + 24), (char *)v62 + *(int *)(v63 + 24), v81);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v64 + 56))(v61, 0, 1, v63);
      }
      uint64_t v67 = v54[8];
      uint64_t v68 = &v52[v67];
      uint64_t v69 = &v53[v67];
      uint64_t v70 = type metadata accessor for AspirePirPIRShardingFunction(0);
      uint64_t v71 = *(void *)(v70 - 8);
      if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v71 + 48))(v69, 1, v70))
      {
        uint64_t v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPIRShardingFunction?);
        memcpy(v68, v69, *(void *)(*(void *)(v72 - 8) + 64));
      }
      else
      {
        uint64_t v73 = type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function(0);
        uint64_t v74 = *(void *)(v73 - 8);
        if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v74 + 48))(v69, 1, v73))
        {
          uint64_t v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
          memcpy(v68, v69, *(void *)(*(void *)(v75 - 8) + 64));
        }
        else
        {
          if (swift_getEnumCaseMultiPayload() == 1)
          {
            *uint64_t v68 = *v69;
            uint64_t v76 = type metadata accessor for AspirePirPIRShardingFunctionDoubleMod(0);
            v79((char *)v68 + *(int *)(v76 + 20), (char *)v69 + *(int *)(v76 + 20), v81);
          }
          else
          {
            v79((char *)v68, (char *)v69, v81);
          }
          swift_storeEnumTagMultiPayload();
          (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v74 + 56))(v68, 0, 1, v73);
        }
        v79((char *)v68 + *(int *)(v70 + 20), (char *)v69 + *(int *)(v70 + 20), v81);
        (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v71 + 56))(v68, 0, 1, v70);
      }
      (*(void (**)(unsigned char *, void, uint64_t, int *))(v55 + 56))(v80, 0, 1, v54);
    }
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for AMDPbHEConfig.OneOf_Config(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config(a1, type metadata accessor for AMDPbHEConfig.OneOf_Config);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *(void *)a1 = *(void *)a2;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
      uint64_t v4 = *(void *)(a2 + 16);
      *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
      *(void *)(a1 + 16) = v4;
      uint64_t v5 = *(void *)(a2 + 32);
      unint64_t v6 = *(void *)(a2 + 40);
      outlined copy of Data._Representation(v5, v6);
      *(void *)(a1 + 32) = v5;
      *(void *)(a1 + 40) = v6;
      uint64_t v7 = (int *)type metadata accessor for AMDPbPECConfig(0);
      uint64_t v8 = v7[8];
      uint64_t v9 = a1 + v8;
      uint64_t v10 = a2 + v8;
      uint64_t v11 = type metadata accessor for UnknownStorage();
      uint64_t v12 = (void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
      uint64_t v13 = v9;
      uint64_t v14 = *v12;
      (*v12)(v13, v10, v11);
      uint64_t v15 = v7[9];
      uint64_t v16 = (void *)(a1 + v15);
      uint64_t v17 = (void *)(a2 + v15);
      uint64_t v18 = type metadata accessor for AspireHeEncryptionParameters(0);
      uint64_t v19 = *(void *)(v18 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
      {
        uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
        memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
      }
      else
      {
        *uint64_t v16 = *v17;
        v16[1] = v17[1];
        v16[2] = v17[2];
        uint64_t v36 = v17[3];
        *((unsigned char *)v16 + 32) = *((unsigned char *)v17 + 32);
        v16[3] = v36;
        uint64_t v37 = v17[5];
        *((unsigned char *)v16 + 48) = *((unsigned char *)v17 + 48);
        v16[5] = v37;
        uint64_t v38 = v17[7];
        *((unsigned char *)v16 + 64) = *((unsigned char *)v17 + 64);
        v16[7] = v38;
        uint64_t v39 = *(int *)(v18 + 40);
        uint64_t v40 = v14;
        uint64_t v41 = (char *)v16 + v39;
        uint64_t v42 = (char *)v17 + v39;
        swift_bridgeObjectRetain();
        uint64_t v43 = v41;
        uint64_t v14 = v40;
        v40((uint64_t)v43, (uint64_t)v42, v11);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      }
      uint64_t v44 = v7[10];
      uint64_t v45 = (char *)(a1 + v44);
      uint64_t v46 = (char *)(a2 + v44);
      uint64_t v47 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
      uint64_t v48 = *(void *)(v47 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v46, 1, v47))
      {
        uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
        memcpy(v45, v46, *(void *)(*(void *)(v49 - 8) + 64));
      }
      else
      {
        uint64_t v62 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
        uint64_t v63 = *(void *)(v62 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v63 + 48))(v46, 1, v62))
        {
          uint64_t v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
          memcpy(v45, v46, *(void *)(*(void *)(v64 - 8) + 64));
        }
        else
        {
          swift_getEnumCaseMultiPayload();
          v14((uint64_t)v45, (uint64_t)v46, v11);
          swift_storeEnumTagMultiPayload();
          (*(void (**)(char *, void, uint64_t, uint64_t))(v63 + 56))(v45, 0, 1, v62);
        }
        v14((uint64_t)&v45[*(int *)(v47 + 20)], (uint64_t)&v46[*(int *)(v47 + 20)], v11);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
      }
    }
    else
    {
      *(void *)a1 = *(void *)a2;
      uint64_t v21 = *(void *)(a2 + 8);
      *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
      *(void *)(a1 + 8) = v21;
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      uint64_t v22 = *(void *)(a2 + 32);
      unint64_t v23 = *(void *)(a2 + 40);
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v22, v23);
      *(void *)(a1 + 32) = v22;
      *(void *)(a1 + 40) = v23;
      uint64_t v24 = (int *)type metadata accessor for AMDPbPIRConfig(0);
      uint64_t v25 = v24[8];
      uint64_t v26 = a1 + v25;
      uint64_t v27 = a2 + v25;
      uint64_t v28 = type metadata accessor for UnknownStorage();
      uint64_t v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 16);
      v29(v26, v27, v28);
      uint64_t v30 = v24[9];
      uint64_t v31 = (void *)(a1 + v30);
      uint64_t v32 = (void *)(a2 + v30);
      uint64_t v33 = type metadata accessor for AspireHeEncryptionParameters(0);
      uint64_t v34 = *(void *)(v33 - 8);
      uint64_t v87 = v28;
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
      {
        uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
        memcpy(v31, v32, *(void *)(*(void *)(v35 - 8) + 64));
      }
      else
      {
        *uint64_t v31 = *v32;
        v31[1] = v32[1];
        v31[2] = v32[2];
        uint64_t v50 = v32[3];
        *((unsigned char *)v31 + 32) = *((unsigned char *)v32 + 32);
        v31[3] = v50;
        uint64_t v51 = v32[5];
        *((unsigned char *)v31 + 48) = *((unsigned char *)v32 + 48);
        v31[5] = v51;
        uint64_t v52 = v32[7];
        *((unsigned char *)v31 + 64) = *((unsigned char *)v32 + 64);
        v31[7] = v52;
        uint64_t v53 = *(int *)(v33 + 40);
        uint64_t v54 = (char *)v31 + v53;
        uint64_t v55 = (char *)v32 + v53;
        swift_bridgeObjectRetain();
        v29((uint64_t)v54, (uint64_t)v55, v28);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
      }
      uint64_t v56 = v24[10];
      uint64_t v57 = (unsigned char *)(a1 + v56);
      uint64_t v58 = (unsigned char *)(a2 + v56);
      uint64_t v59 = (int *)type metadata accessor for AspirePirKeywordPirParameters(0);
      uint64_t v60 = *((void *)v59 - 1);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, int *))(v60 + 48))(v58, 1, v59))
      {
        uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
        memcpy(v57, v58, *(void *)(*(void *)(v61 - 8) + 64));
      }
      else
      {
        *(void *)uint64_t v57 = *(void *)v58;
        v57[8] = v58[8];
        v29((uint64_t)&v57[v59[6]], (uint64_t)&v58[v59[6]], v28);
        uint64_t v65 = v59[7];
        uint64_t v85 = v57;
        uint64_t v66 = &v57[v65];
        uint64_t v67 = (uint64_t *)&v58[v65];
        uint64_t v68 = type metadata accessor for AspirePirSymmetricPirClientConfig(0);
        uint64_t v69 = *(void *)(v68 - 8);
        uint64_t v86 = (void (*)(char *, char *, uint64_t))v29;
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v69 + 48))(v67, 1, v68))
        {
          uint64_t v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirSymmetricPirClientConfig?);
          memcpy(v66, v67, *(void *)(*(void *)(v70 - 8) + 64));
        }
        else
        {
          uint64_t v72 = *v67;
          unint64_t v84 = v67[1];
          outlined copy of Data._Representation(*v67, v84);
          *uint64_t v66 = v72;
          v66[1] = v84;
          uint64_t v73 = v67[2];
          *((unsigned char *)v66 + 24) = *((unsigned char *)v67 + 24);
          v66[2] = v73;
          v86((char *)v66 + *(int *)(v68 + 24), (char *)v67 + *(int *)(v68 + 24), v87);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v69 + 56))(v66, 0, 1, v68);
        }
        uint64_t v74 = v59[8];
        uint64_t v75 = &v57[v74];
        uint64_t v76 = &v58[v74];
        uint64_t v77 = type metadata accessor for AspirePirPIRShardingFunction(0);
        uint64_t v78 = *(void *)(v77 - 8);
        if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v78 + 48))(v76, 1, v77))
        {
          uint64_t v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPIRShardingFunction?);
          memcpy(v75, v76, *(void *)(*(void *)(v79 - 8) + 64));
        }
        else
        {
          uint64_t v80 = type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function(0);
          uint64_t v81 = *(void *)(v80 - 8);
          if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v81 + 48))(v76, 1, v80))
          {
            uint64_t v82 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
            memcpy(v75, v76, *(void *)(*(void *)(v82 - 8) + 64));
          }
          else
          {
            if (swift_getEnumCaseMultiPayload() == 1)
            {
              *uint64_t v75 = *v76;
              uint64_t v83 = type metadata accessor for AspirePirPIRShardingFunctionDoubleMod(0);
              v86((char *)v75 + *(int *)(v83 + 20), (char *)v76 + *(int *)(v83 + 20), v87);
            }
            else
            {
              v86((char *)v75, (char *)v76, v87);
            }
            swift_storeEnumTagMultiPayload();
            (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v81 + 56))(v75, 0, 1, v80);
          }
          v86((char *)v75 + *(int *)(v77 + 20), (char *)v76 + *(int *)(v77 + 20), v87);
          (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v78 + 56))(v75, 0, 1, v77);
        }
        (*(void (**)(unsigned char *, void, uint64_t, int *))(v60 + 56))(v85, 0, 1, v59);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t initializeWithTake for AMDPbHEConfig.OneOf_Config(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  *(void *)a1 = *(void *)a2;
  if (EnumCaseMultiPayload == 1)
  {
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    uint64_t v5 = (int *)type metadata accessor for AMDPbPECConfig(0);
    uint64_t v6 = v5[8];
    uint64_t v7 = a1 + v6;
    uint64_t v8 = a2 + v6;
    uint64_t v9 = type metadata accessor for UnknownStorage();
    uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32);
    v10(v7, v8, v9);
    uint64_t v11 = v5[9];
    uint64_t v12 = (_OWORD *)(a1 + v11);
    uint64_t v13 = (_OWORD *)(a2 + v11);
    uint64_t v14 = type metadata accessor for AspireHeEncryptionParameters(0);
    uint64_t v15 = *(void *)(v14 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    {
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
    }
    else
    {
      *uint64_t v12 = *v13;
      uint64_t v30 = *((void *)v13 + 3);
      *((void *)v12 + 2) = *((void *)v13 + 2);
      *((void *)v12 + 3) = v30;
      *((unsigned char *)v12 + 32) = *((unsigned char *)v13 + 32);
      *((void *)v12 + 5) = *((void *)v13 + 5);
      *((unsigned char *)v12 + 48) = *((unsigned char *)v13 + 48);
      *((void *)v12 + 7) = *((void *)v13 + 7);
      *((unsigned char *)v12 + 64) = *((unsigned char *)v13 + 64);
      v10((uint64_t)v12 + *(int *)(v14 + 40), (uint64_t)v13 + *(int *)(v14 + 40), v9);
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
    }
    uint64_t v31 = v5[10];
    uint64_t v32 = (char *)(a1 + v31);
    uint64_t v33 = (char *)(a2 + v31);
    uint64_t v34 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
    uint64_t v35 = *(void *)(v34 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
    {
      uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
      memcpy(v32, v33, *(void *)(*(void *)(v36 - 8) + 64));
    }
    else
    {
      uint64_t v45 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
      uint64_t v46 = *(void *)(v45 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v33, 1, v45))
      {
        uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
        memcpy(v32, v33, *(void *)(*(void *)(v47 - 8) + 64));
      }
      else
      {
        swift_getEnumCaseMultiPayload();
        v10((uint64_t)v32, (uint64_t)v33, v9);
        swift_storeEnumTagMultiPayload();
        (*(void (**)(char *, void, uint64_t, uint64_t))(v46 + 56))(v32, 0, 1, v45);
      }
      v10((uint64_t)&v32[*(int *)(v34 + 20)], (uint64_t)&v33[*(int *)(v34 + 20)], v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
    }
  }
  else
  {
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    uint64_t v17 = (int *)type metadata accessor for AMDPbPIRConfig(0);
    uint64_t v18 = v17[8];
    uint64_t v19 = a1 + v18;
    uint64_t v20 = a2 + v18;
    uint64_t v21 = type metadata accessor for UnknownStorage();
    uint64_t v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 32);
    v22(v19, v20, v21);
    uint64_t v23 = v17[9];
    uint64_t v24 = (_OWORD *)(a1 + v23);
    uint64_t v25 = (_OWORD *)(a2 + v23);
    uint64_t v26 = type metadata accessor for AspireHeEncryptionParameters(0);
    uint64_t v27 = *(void *)(v26 - 8);
    uint64_t v71 = v21;
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
    {
      uint64_t v28 = v22;
      uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      memcpy(v24, v25, *(void *)(*(void *)(v29 - 8) + 64));
    }
    else
    {
      *uint64_t v24 = *v25;
      uint64_t v37 = *((void *)v25 + 3);
      *((void *)v24 + 2) = *((void *)v25 + 2);
      *((void *)v24 + 3) = v37;
      *((unsigned char *)v24 + 32) = *((unsigned char *)v25 + 32);
      *((void *)v24 + 5) = *((void *)v25 + 5);
      *((unsigned char *)v24 + 48) = *((unsigned char *)v25 + 48);
      *((void *)v24 + 7) = *((void *)v25 + 7);
      *((unsigned char *)v24 + 64) = *((unsigned char *)v25 + 64);
      uint64_t v38 = v21;
      uint64_t v28 = v22;
      v22((uint64_t)v24 + *(int *)(v26 + 40), (uint64_t)v25 + *(int *)(v26 + 40), v38);
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
    }
    uint64_t v39 = v17[10];
    uint64_t v40 = (unsigned char *)(a1 + v39);
    uint64_t v41 = (unsigned char *)(a2 + v39);
    uint64_t v42 = (int *)type metadata accessor for AspirePirKeywordPirParameters(0);
    uint64_t v43 = *((void *)v42 - 1);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, int *))(v43 + 48))(v41, 1, v42))
    {
      uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
      memcpy(v40, v41, *(void *)(*(void *)(v44 - 8) + 64));
    }
    else
    {
      uint64_t v69 = v43;
      *(void *)uint64_t v40 = *(void *)v41;
      v40[8] = v41[8];
      v28((uint64_t)&v40[v42[6]], (uint64_t)&v41[v42[6]], v71);
      uint64_t v48 = v42[7];
      uint64_t v70 = v40;
      uint64_t v49 = &v40[v48];
      uint64_t v50 = &v41[v48];
      uint64_t v51 = type metadata accessor for AspirePirSymmetricPirClientConfig(0);
      uint64_t v52 = *(void *)(v51 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v52 + 48))(v50, 1, v51))
      {
        uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirSymmetricPirClientConfig?);
        memcpy(v49, v50, *(void *)(*(void *)(v53 - 8) + 64));
      }
      else
      {
        _OWORD *v49 = *v50;
        *((void *)v49 + 2) = *((void *)v50 + 2);
        *((unsigned char *)v49 + 24) = *((unsigned char *)v50 + 24);
        v28((uint64_t)v49 + *(int *)(v51 + 24), (uint64_t)v50 + *(int *)(v51 + 24), v71);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v52 + 56))(v49, 0, 1, v51);
      }
      uint64_t v54 = v42[8];
      uint64_t v55 = v70;
      uint64_t v56 = &v70[v54];
      uint64_t v57 = &v41[v54];
      uint64_t v58 = type metadata accessor for AspirePirPIRShardingFunction(0);
      uint64_t v59 = *(void *)(v58 - 8);
      if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v59 + 48))(v57, 1, v58))
      {
        uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPIRShardingFunction?);
        memcpy(v56, v57, *(void *)(*(void *)(v60 - 8) + 64));
      }
      else
      {
        uint64_t v68 = v59;
        uint64_t v61 = type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function(0);
        uint64_t v62 = *(void *)(v61 - 8);
        if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v62 + 48))(v57, 1, v61))
        {
          uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
          memcpy(v56, v57, *(void *)(*(void *)(v63 - 8) + 64));
          uint64_t v64 = (void (*)(char *, char *, uint64_t))v28;
          uint64_t v65 = v71;
        }
        else
        {
          uint64_t v65 = v71;
          if (swift_getEnumCaseMultiPayload() == 1)
          {
            *uint64_t v56 = *v57;
            uint64_t v66 = type metadata accessor for AspirePirPIRShardingFunctionDoubleMod(0);
            v28((uint64_t)v56 + *(int *)(v66 + 20), (uint64_t)v57 + *(int *)(v66 + 20), v71);
          }
          else
          {
            v28((uint64_t)v56, (uint64_t)v57, v71);
          }
          swift_storeEnumTagMultiPayload();
          (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v62 + 56))(v56, 0, 1, v61);
          uint64_t v64 = (void (*)(char *, char *, uint64_t))v28;
        }
        uint64_t v55 = v70;
        v64((char *)v56 + *(int *)(v58 + 20), (char *)v57 + *(int *)(v58 + 20), v65);
        (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v68 + 56))(v56, 0, 1, v58);
      }
      (*(void (**)(unsigned char *, void, uint64_t, int *))(v69 + 56))(v55, 0, 1, v42);
    }
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithTake for AMDPbHEConfig.OneOf_Config(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config(a1, type metadata accessor for AMDPbHEConfig.OneOf_Config);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    *(void *)a1 = *(void *)a2;
    if (EnumCaseMultiPayload == 1)
    {
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      uint64_t v5 = (int *)type metadata accessor for AMDPbPECConfig(0);
      uint64_t v6 = v5[8];
      uint64_t v7 = a1 + v6;
      uint64_t v8 = a2 + v6;
      uint64_t v9 = type metadata accessor for UnknownStorage();
      uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32);
      v10(v7, v8, v9);
      uint64_t v11 = v5[9];
      uint64_t v12 = (_OWORD *)(a1 + v11);
      uint64_t v13 = (_OWORD *)(a2 + v11);
      uint64_t v14 = type metadata accessor for AspireHeEncryptionParameters(0);
      uint64_t v15 = *(void *)(v14 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
      {
        uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
        memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
      }
      else
      {
        *uint64_t v12 = *v13;
        uint64_t v30 = *((void *)v13 + 3);
        *((void *)v12 + 2) = *((void *)v13 + 2);
        *((void *)v12 + 3) = v30;
        *((unsigned char *)v12 + 32) = *((unsigned char *)v13 + 32);
        *((void *)v12 + 5) = *((void *)v13 + 5);
        *((unsigned char *)v12 + 48) = *((unsigned char *)v13 + 48);
        *((void *)v12 + 7) = *((void *)v13 + 7);
        *((unsigned char *)v12 + 64) = *((unsigned char *)v13 + 64);
        v10((uint64_t)v12 + *(int *)(v14 + 40), (uint64_t)v13 + *(int *)(v14 + 40), v9);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      }
      uint64_t v31 = v5[10];
      uint64_t v32 = (char *)(a1 + v31);
      uint64_t v33 = (char *)(a2 + v31);
      uint64_t v34 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
      uint64_t v35 = *(void *)(v34 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
      {
        uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
        memcpy(v32, v33, *(void *)(*(void *)(v36 - 8) + 64));
      }
      else
      {
        uint64_t v45 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
        uint64_t v46 = *(void *)(v45 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v33, 1, v45))
        {
          uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
          memcpy(v32, v33, *(void *)(*(void *)(v47 - 8) + 64));
        }
        else
        {
          swift_getEnumCaseMultiPayload();
          v10((uint64_t)v32, (uint64_t)v33, v9);
          swift_storeEnumTagMultiPayload();
          (*(void (**)(char *, void, uint64_t, uint64_t))(v46 + 56))(v32, 0, 1, v45);
        }
        v10((uint64_t)&v32[*(int *)(v34 + 20)], (uint64_t)&v33[*(int *)(v34 + 20)], v9);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
      }
    }
    else
    {
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      uint64_t v17 = (int *)type metadata accessor for AMDPbPIRConfig(0);
      uint64_t v18 = v17[8];
      uint64_t v19 = a1 + v18;
      uint64_t v20 = a2 + v18;
      uint64_t v21 = type metadata accessor for UnknownStorage();
      uint64_t v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 32);
      v22(v19, v20, v21);
      uint64_t v23 = v17[9];
      uint64_t v24 = (_OWORD *)(a1 + v23);
      uint64_t v25 = (_OWORD *)(a2 + v23);
      uint64_t v26 = type metadata accessor for AspireHeEncryptionParameters(0);
      uint64_t v27 = *(void *)(v26 - 8);
      uint64_t v71 = v21;
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
      {
        uint64_t v28 = v22;
        uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
        memcpy(v24, v25, *(void *)(*(void *)(v29 - 8) + 64));
      }
      else
      {
        *uint64_t v24 = *v25;
        uint64_t v37 = *((void *)v25 + 3);
        *((void *)v24 + 2) = *((void *)v25 + 2);
        *((void *)v24 + 3) = v37;
        *((unsigned char *)v24 + 32) = *((unsigned char *)v25 + 32);
        *((void *)v24 + 5) = *((void *)v25 + 5);
        *((unsigned char *)v24 + 48) = *((unsigned char *)v25 + 48);
        *((void *)v24 + 7) = *((void *)v25 + 7);
        *((unsigned char *)v24 + 64) = *((unsigned char *)v25 + 64);
        uint64_t v38 = v21;
        uint64_t v28 = v22;
        v22((uint64_t)v24 + *(int *)(v26 + 40), (uint64_t)v25 + *(int *)(v26 + 40), v38);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
      }
      uint64_t v39 = v17[10];
      uint64_t v40 = (unsigned char *)(a1 + v39);
      uint64_t v41 = (unsigned char *)(a2 + v39);
      uint64_t v42 = (int *)type metadata accessor for AspirePirKeywordPirParameters(0);
      uint64_t v43 = *((void *)v42 - 1);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, int *))(v43 + 48))(v41, 1, v42))
      {
        uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
        memcpy(v40, v41, *(void *)(*(void *)(v44 - 8) + 64));
      }
      else
      {
        uint64_t v69 = v43;
        *(void *)uint64_t v40 = *(void *)v41;
        v40[8] = v41[8];
        v28((uint64_t)&v40[v42[6]], (uint64_t)&v41[v42[6]], v71);
        uint64_t v48 = v42[7];
        uint64_t v70 = v40;
        uint64_t v49 = &v40[v48];
        uint64_t v50 = &v41[v48];
        uint64_t v51 = type metadata accessor for AspirePirSymmetricPirClientConfig(0);
        uint64_t v52 = *(void *)(v51 - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v52 + 48))(v50, 1, v51))
        {
          uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirSymmetricPirClientConfig?);
          memcpy(v49, v50, *(void *)(*(void *)(v53 - 8) + 64));
        }
        else
        {
          _OWORD *v49 = *v50;
          *((void *)v49 + 2) = *((void *)v50 + 2);
          *((unsigned char *)v49 + 24) = *((unsigned char *)v50 + 24);
          v28((uint64_t)v49 + *(int *)(v51 + 24), (uint64_t)v50 + *(int *)(v51 + 24), v71);
          (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v52 + 56))(v49, 0, 1, v51);
        }
        uint64_t v54 = v42[8];
        uint64_t v55 = v70;
        uint64_t v56 = &v70[v54];
        uint64_t v57 = &v41[v54];
        uint64_t v58 = type metadata accessor for AspirePirPIRShardingFunction(0);
        uint64_t v59 = *(void *)(v58 - 8);
        if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v59 + 48))(v57, 1, v58))
        {
          uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPIRShardingFunction?);
          memcpy(v56, v57, *(void *)(*(void *)(v60 - 8) + 64));
        }
        else
        {
          uint64_t v68 = v59;
          uint64_t v61 = type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function(0);
          uint64_t v62 = *(void *)(v61 - 8);
          if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v62 + 48))(v57, 1, v61))
          {
            uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
            memcpy(v56, v57, *(void *)(*(void *)(v63 - 8) + 64));
            uint64_t v64 = (void (*)(char *, char *, uint64_t))v28;
            uint64_t v65 = v71;
          }
          else
          {
            uint64_t v65 = v71;
            if (swift_getEnumCaseMultiPayload() == 1)
            {
              *uint64_t v56 = *v57;
              uint64_t v66 = type metadata accessor for AspirePirPIRShardingFunctionDoubleMod(0);
              v28((uint64_t)v56 + *(int *)(v66 + 20), (uint64_t)v57 + *(int *)(v66 + 20), v71);
            }
            else
            {
              v28((uint64_t)v56, (uint64_t)v57, v71);
            }
            swift_storeEnumTagMultiPayload();
            (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v62 + 56))(v56, 0, 1, v61);
            uint64_t v64 = (void (*)(char *, char *, uint64_t))v28;
          }
          uint64_t v55 = v70;
          v64((char *)v56 + *(int *)(v58 + 20), (char *)v57 + *(int *)(v58 + 20), v65);
          (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v68 + 56))(v56, 0, 1, v58);
        }
        (*(void (**)(unsigned char *, void, uint64_t, int *))(v69 + 56))(v55, 0, 1, v42);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destructiveInjectEnumTag for AMDPbHEConfig.OneOf_Config()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata completion function for AMDPbHEConfig.OneOf_Config(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for AMDPbHEConfig.OneOf_Config(a1, a2, a3, type metadata accessor for AMDPbPIRConfig, type metadata accessor for AMDPbPECConfig);
}

uint64_t *initializeBufferWithCopyOfBuffer for AMDPbHEKeyStatus(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = a2[2];
    uint64_t v7 = *(int *)(a3 + 24);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for UnknownStorage();
    uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    v11(v8, v9, v10);
    uint64_t v12 = *(int *)(a3 + 28);
    uint64_t v13 = (char *)v4 + v12;
    uint64_t v14 = (char *)a2 + v12;
    uint64_t v15 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
    uint64_t v16 = *(void *)(v15 - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
      memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      *(void *)uint64_t v13 = *(void *)v14;
      v13[8] = v14[8];
      uint64_t v19 = *(int *)(v15 + 24);
      uint64_t v20 = &v13[v19];
      uint64_t v21 = &v14[v19];
      swift_bridgeObjectRetain();
      v11(v20, v21, v10);
      uint64_t v22 = *(int *)(v15 + 28);
      uint64_t v23 = &v13[v22];
      uint64_t v24 = &v14[v22];
      uint64_t v25 = type metadata accessor for AspireHeEncryptionParameters(0);
      uint64_t v32 = *(void *)(v25 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v32 + 48))(v24, 1, v25))
      {
        uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
        memcpy(v23, v24, *(void *)(*(void *)(v26 - 8) + 64));
      }
      else
      {
        _OWORD *v23 = *v24;
        uint64_t v27 = *((void *)v24 + 3);
        *((void *)v23 + 2) = *((void *)v24 + 2);
        *((void *)v23 + 3) = v27;
        *((unsigned char *)v23 + 32) = *((unsigned char *)v24 + 32);
        *((void *)v23 + 5) = *((void *)v24 + 5);
        *((unsigned char *)v23 + 48) = *((unsigned char *)v24 + 48);
        *((void *)v23 + 7) = *((void *)v24 + 7);
        *((unsigned char *)v23 + 64) = *((unsigned char *)v24 + 64);
        uint64_t v28 = *(int *)(v25 + 40);
        uint64_t v31 = (char *)v23 + v28;
        uint64_t v29 = (char *)v24 + v28;
        swift_bridgeObjectRetain();
        v11(v31, v29, v10);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v32 + 56))(v23, 0, 1, v25);
      }
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
  }
  return v4;
}

uint64_t destroy for AMDPbHEKeyStatus(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v12(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 28);
  uint64_t v7 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7);
  if (!result)
  {
    swift_bridgeObjectRelease();
    v12(v6 + *(int *)(v7 + 24), v5);
    uint64_t v9 = v6 + *(int *)(v7 + 28);
    uint64_t v10 = type metadata accessor for AspireHeEncryptionParameters(0);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v9, 1, v10);
    if (!result)
    {
      swift_bridgeObjectRelease();
      uint64_t v11 = v9 + *(int *)(v10 + 40);
      return ((uint64_t (*)(uint64_t, uint64_t))v12)(v11, v5);
    }
  }
  return result;
}

uint64_t initializeWithCopy for AMDPbHEKeyStatus(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 28);
  uint64_t v12 = (unsigned char *)(a1 + v11);
  uint64_t v13 = (unsigned char *)(a2 + v11);
  uint64_t v14 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    *(void *)uint64_t v12 = *(void *)v13;
    v12[8] = v13[8];
    uint64_t v17 = *(int *)(v14 + 24);
    uint64_t v18 = &v12[v17];
    uint64_t v19 = &v13[v17];
    swift_bridgeObjectRetain();
    v10((uint64_t)v18, (uint64_t)v19, v9);
    uint64_t v20 = *(int *)(v14 + 28);
    uint64_t v21 = &v12[v20];
    uint64_t v22 = &v13[v20];
    uint64_t v23 = type metadata accessor for AspireHeEncryptionParameters(0);
    uint64_t v30 = *(void *)(v23 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v30 + 48))(v22, 1, v23))
    {
      uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      memcpy(v21, v22, *(void *)(*(void *)(v24 - 8) + 64));
    }
    else
    {
      *uint64_t v21 = *v22;
      uint64_t v25 = *((void *)v22 + 3);
      *((void *)v21 + 2) = *((void *)v22 + 2);
      *((void *)v21 + 3) = v25;
      *((unsigned char *)v21 + 32) = *((unsigned char *)v22 + 32);
      *((void *)v21 + 5) = *((void *)v22 + 5);
      *((unsigned char *)v21 + 48) = *((unsigned char *)v22 + 48);
      *((void *)v21 + 7) = *((void *)v22 + 7);
      *((unsigned char *)v21 + 64) = *((unsigned char *)v22 + 64);
      uint64_t v26 = *(int *)(v23 + 40);
      uint64_t v29 = (char *)v21 + v26;
      uint64_t v27 = (char *)v22 + v26;
      swift_bridgeObjectRetain();
      v10((uint64_t)v29, (uint64_t)v27, v9);
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v30 + 56))(v21, 0, 1, v23);
    }
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

void *assignWithCopy for AMDPbHEKeyStatus(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v56 = *(void *)(v9 - 8);
  uint64_t v58 = v9;
  uint64_t v10 = *(void (**)(char *, char *))(v56 + 24);
  v10(v7, v8);
  uint64_t v11 = *(int *)(a3 + 28);
  uint64_t v12 = (uint64_t)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  LODWORD(v8) = v16(v12, 1, v14);
  int v17 = v16((uint64_t)v13, 1, v14);
  if (!v8)
  {
    if (!v17)
    {
      *(void *)uint64_t v12 = *(void *)v13;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(unsigned char *)(v12 + 8) = v13[8];
      ((void (*)(uint64_t, char *, uint64_t))v10)(v12 + *(int *)(v14 + 24), &v13[*(int *)(v14 + 24)], v58);
      uint64_t v31 = *(int *)(v14 + 28);
      uint64_t v32 = v12 + v31;
      uint64_t v33 = &v13[v31];
      uint64_t v34 = type metadata accessor for AspireHeEncryptionParameters(0);
      uint64_t v35 = *(void *)(v34 - 8);
      uint64_t v36 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v35 + 48);
      int v37 = v36(v32, 1, v34);
      int v38 = v36((uint64_t)v33, 1, v34);
      if (v37)
      {
        if (!v38)
        {
          *(void *)uint64_t v32 = *(void *)v33;
          *(void *)(v32 + 8) = *((void *)v33 + 1);
          *(void *)(v32 + 16) = *((void *)v33 + 2);
          uint64_t v39 = *((void *)v33 + 3);
          *(unsigned char *)(v32 + 32) = v33[32];
          *(void *)(v32 + 24) = v39;
          uint64_t v40 = *((void *)v33 + 5);
          *(unsigned char *)(v32 + 48) = v33[48];
          *(void *)(v32 + 40) = v40;
          uint64_t v41 = *((void *)v33 + 7);
          *(unsigned char *)(v32 + 64) = v33[64];
          *(void *)(v32 + 56) = v41;
          uint64_t v42 = *(int *)(v34 + 40);
          uint64_t v43 = v32 + v42;
          uint64_t v44 = &v33[v42];
          uint64_t v45 = *(void (**)(uint64_t, char *, uint64_t))(v56 + 16);
          swift_bridgeObjectRetain();
          v45(v43, v44, v58);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
          return a1;
        }
      }
      else
      {
        if (!v38)
        {
          *(void *)uint64_t v32 = *(void *)v33;
          *(void *)(v32 + 8) = *((void *)v33 + 1);
          *(void *)(v32 + 16) = *((void *)v33 + 2);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          uint64_t v52 = *((void *)v33 + 3);
          *(unsigned char *)(v32 + 32) = v33[32];
          *(void *)(v32 + 24) = v52;
          uint64_t v53 = *((void *)v33 + 5);
          *(unsigned char *)(v32 + 48) = v33[48];
          *(void *)(v32 + 40) = v53;
          uint64_t v54 = *((void *)v33 + 7);
          *(unsigned char *)(v32 + 64) = v33[64];
          *(void *)(v32 + 56) = v54;
          ((void (*)(uint64_t, char *, uint64_t))v10)(v32 + *(int *)(v34 + 40), &v33[*(int *)(v34 + 40)], v58);
          return a1;
        }
        outlined destroy of AMDPbHEConfig.OneOf_Config(v32, type metadata accessor for AspireHeEncryptionParameters);
      }
      size_t v28 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?)
                                  - 8)
                      + 64);
      uint64_t v29 = (void *)v32;
      uint64_t v30 = v33;
      goto LABEL_8;
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config(v12, type metadata accessor for AspireHeEvaluationKeyConfig);
LABEL_7:
    size_t v28 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?)
                                - 8)
                    + 64);
    uint64_t v29 = (void *)v12;
    uint64_t v30 = v13;
LABEL_8:
    memcpy(v29, v30, v28);
    return a1;
  }
  if (v17) {
    goto LABEL_7;
  }
  *(void *)uint64_t v12 = *(void *)v13;
  *(unsigned char *)(v12 + 8) = v13[8];
  uint64_t v18 = *(int *)(v14 + 24);
  uint64_t v19 = (char *)(v12 + v18);
  uint64_t v20 = &v13[v18];
  uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v56 + 16);
  swift_bridgeObjectRetain();
  uint64_t v57 = v21;
  v21(v19, v20, v58);
  uint64_t v22 = *(int *)(v14 + 28);
  uint64_t v23 = (void *)(v12 + v22);
  uint64_t v24 = &v13[v22];
  uint64_t v25 = type metadata accessor for AspireHeEncryptionParameters(0);
  uint64_t v26 = *(void *)(v25 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
  {
    uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64));
  }
  else
  {
    void *v23 = *(void *)v24;
    v23[1] = *((void *)v24 + 1);
    v23[2] = *((void *)v24 + 2);
    uint64_t v46 = *((void *)v24 + 3);
    *((unsigned char *)v23 + 32) = v24[32];
    v23[3] = v46;
    uint64_t v47 = *((void *)v24 + 5);
    *((unsigned char *)v23 + 48) = v24[48];
    v23[5] = v47;
    uint64_t v48 = *((void *)v24 + 7);
    *((unsigned char *)v23 + 64) = v24[64];
    v23[7] = v48;
    uint64_t v49 = *(int *)(v25 + 40);
    uint64_t v55 = (char *)v23 + v49;
    uint64_t v50 = &v24[v49];
    swift_bridgeObjectRetain();
    v57(v55, v50, v58);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  return a1;
}

uint64_t initializeWithTake for AMDPbHEKeyStatus(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (unsigned char *)(a1 + v6);
  uint64_t v8 = (unsigned char *)(a2 + v6);
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 28);
  uint64_t v12 = (unsigned char *)(a1 + v11);
  uint64_t v13 = (unsigned char *)(a2 + v11);
  uint64_t v14 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    *(void *)uint64_t v12 = *(void *)v13;
    v12[8] = v13[8];
    v10(&v12[*(int *)(v14 + 24)], &v13[*(int *)(v14 + 24)], v9);
    uint64_t v17 = *(int *)(v14 + 28);
    uint64_t v18 = &v12[v17];
    uint64_t v19 = &v13[v17];
    uint64_t v20 = type metadata accessor for AspireHeEncryptionParameters(0);
    uint64_t v24 = *(void *)(v20 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v24 + 48))(v19, 1, v20))
    {
      uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      memcpy(v18, v19, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      *uint64_t v18 = *v19;
      uint64_t v22 = *((void *)v19 + 3);
      *((void *)v18 + 2) = *((void *)v19 + 2);
      *((void *)v18 + 3) = v22;
      *((unsigned char *)v18 + 32) = *((unsigned char *)v19 + 32);
      *((void *)v18 + 5) = *((void *)v19 + 5);
      *((unsigned char *)v18 + 48) = *((unsigned char *)v19 + 48);
      *((void *)v18 + 7) = *((void *)v19 + 7);
      *((unsigned char *)v18 + 64) = *((unsigned char *)v19 + 64);
      v10((unsigned char *)v18 + *(int *)(v20 + 40), (unsigned char *)v19 + *(int *)(v20 + 40), v9);
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v24 + 56))(v18, 0, 1, v20);
    }
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t assignWithTake for AMDPbHEKeyStatus(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v38 = *(void *)(v9 - 8);
  uint64_t v40 = v9;
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v38 + 40);
  v10(v7, v8);
  uint64_t v11 = *(int *)(a3 + 28);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = (unsigned char *)(a2 + v11);
  uint64_t v14 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  LODWORD(v8) = v16(v12, 1, v14);
  int v17 = v16((uint64_t)v13, 1, v14);
  if (!v8)
  {
    if (!v17)
    {
      *(void *)uint64_t v12 = *(void *)v13;
      swift_bridgeObjectRelease();
      *(unsigned char *)(v12 + 8) = v13[8];
      ((void (*)(uint64_t, unsigned char *, uint64_t))v10)(v12 + *(int *)(v14 + 24), &v13[*(int *)(v14 + 24)], v40);
      uint64_t v27 = *(int *)(v14 + 28);
      uint64_t v28 = v12 + v27;
      uint64_t v29 = &v13[v27];
      uint64_t v30 = type metadata accessor for AspireHeEncryptionParameters(0);
      uint64_t v31 = *(void *)(v30 - 8);
      uint64_t v32 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v31 + 48);
      int v33 = v32(v28, 1, v30);
      int v34 = v32((uint64_t)v29, 1, v30);
      if (v33)
      {
        if (!v34)
        {
          *(_OWORD *)uint64_t v28 = *(_OWORD *)v29;
          uint64_t v35 = *((void *)v29 + 3);
          *(void *)(v28 + 16) = *((void *)v29 + 2);
          *(void *)(v28 + 24) = v35;
          *(unsigned char *)(v28 + 32) = v29[32];
          *(unsigned char *)(v28 + 48) = v29[48];
          *(void *)(v28 + 40) = *((void *)v29 + 5);
          *(void *)(v28 + 56) = *((void *)v29 + 7);
          *(unsigned char *)(v28 + 64) = v29[64];
          (*(void (**)(uint64_t, char *, uint64_t))(v38 + 32))(v28 + *(int *)(v30 + 40), &v29[*(int *)(v30 + 40)], v40);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
          return a1;
        }
      }
      else
      {
        if (!v34)
        {
          *(_OWORD *)uint64_t v28 = *(_OWORD *)v29;
          *(void *)(v28 + 16) = *((void *)v29 + 2);
          swift_bridgeObjectRelease();
          *(void *)(v28 + 24) = *((void *)v29 + 3);
          *(unsigned char *)(v28 + 32) = v29[32];
          *(void *)(v28 + 40) = *((void *)v29 + 5);
          *(unsigned char *)(v28 + 48) = v29[48];
          *(void *)(v28 + 56) = *((void *)v29 + 7);
          *(unsigned char *)(v28 + 64) = v29[64];
          ((void (*)(uint64_t, char *, uint64_t))v10)(v28 + *(int *)(v30 + 40), &v29[*(int *)(v30 + 40)], v40);
          return a1;
        }
        outlined destroy of AMDPbHEConfig.OneOf_Config(v28, type metadata accessor for AspireHeEncryptionParameters);
      }
      size_t v24 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?)
                                  - 8)
                      + 64);
      uint64_t v25 = (void *)v28;
      uint64_t v26 = v29;
      goto LABEL_8;
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config(v12, type metadata accessor for AspireHeEvaluationKeyConfig);
LABEL_7:
    size_t v24 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?)
                                - 8)
                    + 64);
    uint64_t v25 = (void *)v12;
    uint64_t v26 = v13;
LABEL_8:
    memcpy(v25, v26, v24);
    return a1;
  }
  if (v17) {
    goto LABEL_7;
  }
  *(void *)uint64_t v12 = *(void *)v13;
  *(unsigned char *)(v12 + 8) = v13[8];
  uint64_t v39 = *(void (**)(uint64_t, unsigned char *, uint64_t))(v38 + 32);
  v39(v12 + *(int *)(v14 + 24), &v13[*(int *)(v14 + 24)], v40);
  uint64_t v18 = *(int *)(v14 + 28);
  uint64_t v19 = (_OWORD *)(v12 + v18);
  uint64_t v20 = &v13[v18];
  uint64_t v21 = type metadata accessor for AspireHeEncryptionParameters(0);
  uint64_t v22 = *(void *)(v21 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    _OWORD *v19 = *v20;
    uint64_t v36 = *((void *)v20 + 3);
    *((void *)v19 + 2) = *((void *)v20 + 2);
    *((void *)v19 + 3) = v36;
    *((unsigned char *)v19 + 32) = *((unsigned char *)v20 + 32);
    *((void *)v19 + 5) = *((void *)v20 + 5);
    *((unsigned char *)v19 + 48) = *((unsigned char *)v20 + 48);
    *((void *)v19 + 7) = *((void *)v20 + 7);
    *((unsigned char *)v19 + 64) = *((unsigned char *)v20 + 64);
    v39((uint64_t)v19 + *(int *)(v21 + 40), (unsigned char *)v20 + *(int *)(v21 + 40), v40);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for AMDPbHEKeyStatus(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_249C80AB0);
}

uint64_t sub_249C80AB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 24);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 28);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t storeEnumTagSinglePayload for AMDPbHEKeyStatus(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_249C80BF4);
}

uint64_t sub_249C80BF4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 16) = (a2 - 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 24);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 28);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void type metadata completion function for AMDPbHEKeyStatus(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void type metadata accessor for AMDPbHEConfig.OneOf_Config?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t initializeBufferWithCopyOfBuffer for AMDPbPIRConfig(uint64_t a1, uint64_t *a2, int *a3)
{
  int v4 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v5 = *a2;
  *(void *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = v5 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain();
  }
  else
  {
    *(void *)(a1 + 8) = a2[1];
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    uint64_t v8 = a2[4];
    *(void *)(a1 + 24) = a2[3];
    unint64_t v9 = a2[5];
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v8, v9);
    *(void *)(a1 + 32) = v8;
    *(void *)(a1 + 40) = v9;
    uint64_t v10 = a3[8];
    uint64_t v11 = a1 + v10;
    uint64_t v12 = (uint64_t)a2 + v10;
    uint64_t v13 = type metadata accessor for UnknownStorage();
    uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16);
    v14(v11, v12, v13);
    uint64_t v15 = a3[9];
    uint64_t v16 = (_OWORD *)(a1 + v15);
    int v17 = (_OWORD *)((char *)a2 + v15);
    uint64_t v18 = type metadata accessor for AspireHeEncryptionParameters(0);
    uint64_t v19 = *(void *)(v18 - 8);
    uint64_t v54 = v13;
    uint64_t v55 = (void (*)(char *, char *))v14;
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
    {
      uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
    }
    else
    {
      *uint64_t v16 = *v17;
      uint64_t v21 = *((void *)v17 + 3);
      *((void *)v16 + 2) = *((void *)v17 + 2);
      *((void *)v16 + 3) = v21;
      *((unsigned char *)v16 + 32) = *((unsigned char *)v17 + 32);
      *((void *)v16 + 5) = *((void *)v17 + 5);
      *((unsigned char *)v16 + 48) = *((unsigned char *)v17 + 48);
      *((void *)v16 + 7) = *((void *)v17 + 7);
      *((unsigned char *)v16 + 64) = *((unsigned char *)v17 + 64);
      uint64_t v22 = *(int *)(v18 + 40);
      uint64_t v23 = (char *)v16 + v22;
      size_t v24 = (char *)v17 + v22;
      swift_bridgeObjectRetain();
      v14((uint64_t)v23, (uint64_t)v24, v13);
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
    }
    uint64_t v25 = a3[10];
    uint64_t v26 = (unsigned char *)(a1 + v25);
    uint64_t v27 = (char *)a2 + v25;
    uint64_t v28 = (int *)type metadata accessor for AspirePirKeywordPirParameters(0);
    uint64_t v29 = *((void *)v28 - 1);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, int *))(v29 + 48))(v27, 1, v28))
    {
      uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
      memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64));
    }
    else
    {
      uint64_t v53 = v29;
      *(void *)uint64_t v26 = *(void *)v27;
      v26[8] = v27[8];
      uint64_t v31 = v54;
      v14((uint64_t)&v26[v28[6]], (uint64_t)&v27[v28[6]], v54);
      uint64_t v32 = v28[7];
      int v33 = &v26[v32];
      int v34 = (uint64_t *)&v27[v32];
      uint64_t v35 = type metadata accessor for AspirePirSymmetricPirClientConfig(0);
      uint64_t v36 = *(void *)(v35 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
      {
        uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirSymmetricPirClientConfig?);
        memcpy(v33, v34, *(void *)(*(void *)(v37 - 8) + 64));
      }
      else
      {
        uint64_t v51 = v26;
        uint64_t v38 = *v34;
        unint64_t v39 = v34[1];
        outlined copy of Data._Representation(*v34, v39);
        void *v33 = v38;
        v33[1] = v39;
        uint64_t v26 = v51;
        v33[2] = v34[2];
        *((unsigned char *)v33 + 24) = *((unsigned char *)v34 + 24);
        uint64_t v31 = v54;
        v55((char *)v33 + *(int *)(v35 + 24), (char *)v34 + *(int *)(v35 + 24));
        (*(void (**)(void *, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
      }
      uint64_t v40 = v28[8];
      uint64_t v41 = &v26[v40];
      uint64_t v42 = &v27[v40];
      uint64_t v43 = type metadata accessor for AspirePirPIRShardingFunction(0);
      uint64_t v44 = *(void *)(v43 - 8);
      if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v44 + 48))(v42, 1, v43))
      {
        uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPIRShardingFunction?);
        memcpy(v41, v42, *(void *)(*(void *)(v45 - 8) + 64));
      }
      else
      {
        uint64_t v52 = v26;
        uint64_t v46 = type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function(0);
        uint64_t v47 = *(void *)(v46 - 8);
        if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v47 + 48))(v42, 1, v46))
        {
          uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
          memcpy(v41, v42, *(void *)(*(void *)(v48 - 8) + 64));
        }
        else
        {
          if (swift_getEnumCaseMultiPayload() == 1)
          {
            *uint64_t v41 = *v42;
            uint64_t v49 = type metadata accessor for AspirePirPIRShardingFunctionDoubleMod(0);
            ((void (*)(char *, char *, uint64_t))v55)((char *)v41 + *(int *)(v49 + 20), (char *)v42 + *(int *)(v49 + 20), v31);
          }
          else
          {
            ((void (*)(_DWORD *, _DWORD *, uint64_t))v55)(v41, v42, v31);
          }
          swift_storeEnumTagMultiPayload();
          (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v47 + 56))(v41, 0, 1, v46);
        }
        uint64_t v26 = v52;
        ((void (*)(char *, char *, uint64_t))v55)((char *)v41 + *(int *)(v43 + 20), (char *)v42 + *(int *)(v43 + 20), v31);
        (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v44 + 56))(v41, 0, 1, v43);
      }
      (*(void (**)(unsigned char *, void, uint64_t, int *))(v53 + 56))(v26, 0, 1, v28);
    }
  }
  return a1;
}

uint64_t destroy for AMDPbPIRConfig(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(*(void *)(a1 + 32), *(void *)(a1 + 40));
  uint64_t v4 = a1 + a2[8];
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v19 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v19(v4, v5);
  uint64_t v6 = a1 + a2[9];
  uint64_t v7 = type metadata accessor for AspireHeEncryptionParameters(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7))
  {
    swift_bridgeObjectRelease();
    v19(v6 + *(int *)(v7 + 40), v5);
  }
  uint64_t v8 = a1 + a2[10];
  unint64_t v9 = (int *)type metadata accessor for AspirePirKeywordPirParameters(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*((void *)v9 - 1) + 48))(v8, 1, v9);
  if (!result)
  {
    v19(v8 + v9[6], v5);
    uint64_t v11 = v8 + v9[7];
    uint64_t v12 = type metadata accessor for AspirePirSymmetricPirClientConfig(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48))(v11, 1, v12))
    {
      outlined consume of Data._Representation(*(void *)v11, *(void *)(v11 + 8));
      v19(v11 + *(int *)(v12 + 24), v5);
    }
    uint64_t v13 = v8 + v9[8];
    uint64_t v14 = type metadata accessor for AspirePirPIRShardingFunction(0);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48))(v13, 1, v14);
    if (!result)
    {
      uint64_t v15 = type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48))(v13, 1, v15))
      {
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        uint64_t v17 = v13;
        if (EnumCaseMultiPayload == 1) {
          uint64_t v17 = v13 + *(int *)(type metadata accessor for AspirePirPIRShardingFunctionDoubleMod(0) + 20);
        }
        v19(v17, v5);
      }
      uint64_t v18 = v13 + *(int *)(v14 + 20);
      return ((uint64_t (*)(uint64_t, uint64_t))v19)(v18, v5);
    }
  }
  return result;
}

uint64_t initializeWithCopy for AMDPbPIRConfig(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  unint64_t v8 = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(v7, v8);
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  uint64_t v9 = a3[8];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for UnknownStorage();
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16);
  v13(v10, v11, v12);
  uint64_t v14 = a3[9];
  uint64_t v15 = (_OWORD *)(a1 + v14);
  uint64_t v16 = (_OWORD *)(a2 + v14);
  uint64_t v17 = type metadata accessor for AspireHeEncryptionParameters(0);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v53 = v12;
  uint64_t v54 = (void (*)(char *, char *))v13;
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
  {
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    *uint64_t v15 = *v16;
    uint64_t v20 = *((void *)v16 + 3);
    *((void *)v15 + 2) = *((void *)v16 + 2);
    *((void *)v15 + 3) = v20;
    *((unsigned char *)v15 + 32) = *((unsigned char *)v16 + 32);
    *((void *)v15 + 5) = *((void *)v16 + 5);
    *((unsigned char *)v15 + 48) = *((unsigned char *)v16 + 48);
    *((void *)v15 + 7) = *((void *)v16 + 7);
    *((unsigned char *)v15 + 64) = *((unsigned char *)v16 + 64);
    uint64_t v21 = *(int *)(v17 + 40);
    uint64_t v22 = (char *)v15 + v21;
    uint64_t v23 = (char *)v16 + v21;
    swift_bridgeObjectRetain();
    v13((uint64_t)v22, (uint64_t)v23, v12);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  }
  uint64_t v24 = a3[10];
  uint64_t v25 = (unsigned char *)(a1 + v24);
  uint64_t v26 = (unsigned char *)(a2 + v24);
  uint64_t v27 = (int *)type metadata accessor for AspirePirKeywordPirParameters(0);
  uint64_t v28 = *((void *)v27 - 1);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, int *))(v28 + 48))(v26, 1, v27))
  {
    uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
    memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
  }
  else
  {
    uint64_t v52 = v28;
    *(void *)uint64_t v25 = *(void *)v26;
    v25[8] = v26[8];
    uint64_t v30 = v53;
    v13((uint64_t)&v25[v27[6]], (uint64_t)&v26[v27[6]], v53);
    uint64_t v31 = v27[7];
    uint64_t v32 = &v25[v31];
    int v33 = (uint64_t *)&v26[v31];
    uint64_t v34 = type metadata accessor for AspirePirSymmetricPirClientConfig(0);
    uint64_t v35 = *(void *)(v34 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
    {
      uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirSymmetricPirClientConfig?);
      memcpy(v32, v33, *(void *)(*(void *)(v36 - 8) + 64));
    }
    else
    {
      uint64_t v50 = v25;
      uint64_t v37 = *v33;
      unint64_t v38 = v33[1];
      outlined copy of Data._Representation(*v33, v38);
      *uint64_t v32 = v37;
      v32[1] = v38;
      uint64_t v25 = v50;
      v32[2] = v33[2];
      *((unsigned char *)v32 + 24) = *((unsigned char *)v33 + 24);
      uint64_t v30 = v53;
      v54((char *)v32 + *(int *)(v34 + 24), (char *)v33 + *(int *)(v34 + 24));
      (*(void (**)(void *, void, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
    }
    uint64_t v39 = v27[8];
    uint64_t v40 = &v25[v39];
    uint64_t v41 = &v26[v39];
    uint64_t v42 = type metadata accessor for AspirePirPIRShardingFunction(0);
    uint64_t v43 = *(void *)(v42 - 8);
    if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
    {
      uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPIRShardingFunction?);
      memcpy(v40, v41, *(void *)(*(void *)(v44 - 8) + 64));
    }
    else
    {
      uint64_t v51 = v25;
      uint64_t v45 = type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function(0);
      uint64_t v46 = *(void *)(v45 - 8);
      if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v46 + 48))(v41, 1, v45))
      {
        uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
        memcpy(v40, v41, *(void *)(*(void *)(v47 - 8) + 64));
      }
      else
      {
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          *uint64_t v40 = *v41;
          uint64_t v48 = type metadata accessor for AspirePirPIRShardingFunctionDoubleMod(0);
          ((void (*)(char *, char *, uint64_t))v54)((char *)v40 + *(int *)(v48 + 20), (char *)v41 + *(int *)(v48 + 20), v30);
        }
        else
        {
          ((void (*)(_DWORD *, _DWORD *, uint64_t))v54)(v40, v41, v30);
        }
        swift_storeEnumTagMultiPayload();
        (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v46 + 56))(v40, 0, 1, v45);
      }
      uint64_t v25 = v51;
      ((void (*)(char *, char *, uint64_t))v54)((char *)v40 + *(int *)(v42 + 20), (char *)v41 + *(int *)(v42 + 20), v30);
      (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
    }
    (*(void (**)(unsigned char *, void, uint64_t, int *))(v52 + 56))(v25, 0, 1, v27);
  }
  return a1;
}

uint64_t assignWithCopy for AMDPbPIRConfig(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  outlined copy of Data._Representation(v7, v8);
  uint64_t v9 = *(void *)(a1 + 32);
  unint64_t v10 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  outlined consume of Data._Representation(v9, v10);
  uint64_t v11 = a3[8];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for UnknownStorage();
  uint64_t v109 = *(void *)(v14 - 8);
  uint64_t v110 = v14;
  uint64_t v106 = *(void (**)(uint64_t, uint64_t))(v109 + 24);
  v106(v12, v13);
  uint64_t v15 = a3[9];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = type metadata accessor for AspireHeEncryptionParameters(0);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 48);
  int v21 = v20(v16, 1, v18);
  int v22 = v20(v17, 1, v18);
  if (v21)
  {
    if (!v22)
    {
      *(void *)uint64_t v16 = *(void *)v17;
      *(void *)(v16 + 8) = *(void *)(v17 + 8);
      *(void *)(v16 + 16) = *(void *)(v17 + 16);
      uint64_t v23 = *(void *)(v17 + 24);
      *(unsigned char *)(v16 + 32) = *(unsigned char *)(v17 + 32);
      *(void *)(v16 + 24) = v23;
      uint64_t v24 = *(void *)(v17 + 40);
      *(unsigned char *)(v16 + 48) = *(unsigned char *)(v17 + 48);
      *(void *)(v16 + 40) = v24;
      uint64_t v25 = *(void *)(v17 + 56);
      *(unsigned char *)(v16 + 64) = *(unsigned char *)(v17 + 64);
      *(void *)(v16 + 56) = v25;
      uint64_t v26 = *(int *)(v18 + 40);
      uint64_t v27 = v16 + v26;
      uint64_t v28 = v17 + v26;
      uint64_t v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(v109 + 16);
      swift_bridgeObjectRetain();
      v29(v27, v28, v110);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v22)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config(v16, type metadata accessor for AspireHeEncryptionParameters);
LABEL_6:
    uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    memcpy((void *)v16, (const void *)v17, *(void *)(*(void *)(v30 - 8) + 64));
    goto LABEL_7;
  }
  *(void *)uint64_t v16 = *(void *)v17;
  *(void *)(v16 + 8) = *(void *)(v17 + 8);
  *(void *)(v16 + 16) = *(void *)(v17 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v49 = *(void *)(v17 + 24);
  *(unsigned char *)(v16 + 32) = *(unsigned char *)(v17 + 32);
  *(void *)(v16 + 24) = v49;
  uint64_t v50 = *(void *)(v17 + 40);
  *(unsigned char *)(v16 + 48) = *(unsigned char *)(v17 + 48);
  *(void *)(v16 + 40) = v50;
  uint64_t v51 = *(void *)(v17 + 56);
  *(unsigned char *)(v16 + 64) = *(unsigned char *)(v17 + 64);
  *(void *)(v16 + 56) = v51;
  ((void (*)(uint64_t, uint64_t, uint64_t))v106)(v16 + *(int *)(v18 + 40), v17 + *(int *)(v18 + 40), v110);
LABEL_7:
  uint64_t v31 = a3[10];
  uint64_t v32 = a1 + v31;
  int v33 = (unsigned char *)(a2 + v31);
  uint64_t v34 = (int *)type metadata accessor for AspirePirKeywordPirParameters(0);
  uint64_t v35 = *((void *)v34 - 1);
  uint64_t v36 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v35 + 48);
  int v37 = v36(v32, 1, v34);
  int v38 = v36((uint64_t)v33, 1, v34);
  if (!v37)
  {
    if (v38)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config(v32, type metadata accessor for AspirePirKeywordPirParameters);
      goto LABEL_13;
    }
    *(void *)uint64_t v32 = *(void *)v33;
    *(unsigned char *)(v32 + 8) = v33[8];
    ((void (*)(uint64_t, unsigned char *, uint64_t))v106)(v32 + v34[6], &v33[v34[6]], v110);
    uint64_t v52 = v34[7];
    uint64_t v53 = v32 + v52;
    uint64_t v54 = (uint64_t *)&v33[v52];
    uint64_t v55 = type metadata accessor for AspirePirSymmetricPirClientConfig(0);
    uint64_t v102 = *(void *)(v55 - 8);
    uint64_t v103 = v53;
    uint64_t v56 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v102 + 48);
    LODWORD(v53) = v56(v53, 1, v55);
    int v57 = v56((uint64_t)v54, 1, v55);
    if (v53)
    {
      if (v57)
      {
        size_t v58 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirSymmetricPirClientConfig?)
                                    - 8)
                        + 64);
        uint64_t v59 = (void *)v103;
LABEL_26:
        memcpy(v59, v54, v58);
        goto LABEL_31;
      }
      uint64_t v71 = *v54;
      unint64_t v70 = v54[1];
      outlined copy of Data._Representation(*v54, v70);
      *(void *)uint64_t v103 = v71;
      *(void *)(v103 + 8) = v70;
      uint64_t v72 = v54[2];
      *(unsigned char *)(v103 + 24) = *((unsigned char *)v54 + 24);
      *(void *)(v103 + 16) = v72;
      (*(void (**)(uint64_t, char *, uint64_t))(v109 + 16))(v103 + *(int *)(v55 + 24), (char *)v54 + *(int *)(v55 + 24), v110);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v102 + 56))(v103, 0, 1, v55);
    }
    else
    {
      if (v57)
      {
        outlined destroy of AMDPbHEConfig.OneOf_Config(v103, type metadata accessor for AspirePirSymmetricPirClientConfig);
        size_t v58 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirSymmetricPirClientConfig?)
                                    - 8)
                        + 64);
        uint64_t v59 = (void *)v103;
        goto LABEL_26;
      }
      uint64_t v75 = *v54;
      unint64_t v74 = v54[1];
      outlined copy of Data._Representation(*v54, v74);
      uint64_t v76 = *(void *)v103;
      unint64_t v77 = *(void *)(v103 + 8);
      *(void *)uint64_t v103 = v75;
      *(void *)(v103 + 8) = v74;
      outlined consume of Data._Representation(v76, v77);
      uint64_t v78 = v54[2];
      *(unsigned char *)(v103 + 24) = *((unsigned char *)v54 + 24);
      *(void *)(v103 + 16) = v78;
      ((void (*)(uint64_t, char *, uint64_t))v106)(v103 + *(int *)(v55 + 24), (char *)v54 + *(int *)(v55 + 24), v110);
    }
LABEL_31:
    uint64_t v79 = v34[8];
    uint64_t v80 = (_DWORD *)(v32 + v79);
    uint64_t v81 = &v33[v79];
    uint64_t v82 = type metadata accessor for AspirePirPIRShardingFunction(0);
    uint64_t v83 = *(void *)(v82 - 8);
    unint64_t v84 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(v83 + 48);
    int v85 = v84(v80, 1, v82);
    int v86 = v84(v81, 1, v82);
    if (v85)
    {
      if (!v86)
      {
        uint64_t v87 = type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function(0);
        uint64_t v88 = *(void *)(v87 - 8);
        if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v88 + 48))(v81, 1, v87))
        {
          uint64_t v89 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
          memcpy(v80, v81, *(void *)(*(void *)(v89 - 8) + 64));
          (*(void (**)(char *, char *, uint64_t))(v109 + 16))((char *)v80 + *(int *)(v82 + 20), (char *)v81 + *(int *)(v82 + 20), v110);
        }
        else
        {
          if (swift_getEnumCaseMultiPayload() == 1)
          {
            _DWORD *v80 = *v81;
            uint64_t v98 = type metadata accessor for AspirePirPIRShardingFunctionDoubleMod(0);
            uint64_t v99 = *(void (**)(char *, char *, uint64_t))(v109 + 16);
            v99((char *)v80 + *(int *)(v98 + 20), (char *)v81 + *(int *)(v98 + 20), v110);
          }
          else
          {
            uint64_t v99 = *(void (**)(char *, char *, uint64_t))(v109 + 16);
            v99((char *)v80, (char *)v81, v110);
          }
          swift_storeEnumTagMultiPayload();
          (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v88 + 56))(v80, 0, 1, v87);
          v99((char *)v80 + *(int *)(v82 + 20), (char *)v81 + *(int *)(v82 + 20), v110);
        }
        (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v83 + 56))(v80, 0, 1, v82);
        return a1;
      }
      goto LABEL_37;
    }
    if (v86)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v80, type metadata accessor for AspirePirPIRShardingFunction);
LABEL_37:
      size_t v46 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPIRShardingFunction?)
                                  - 8)
                      + 64);
      uint64_t v47 = v80;
      uint64_t v48 = v81;
      goto LABEL_14;
    }
    uint64_t v90 = type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function(0);
    uint64_t v91 = *(void *)(v90 - 8);
    uint64_t v92 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(v91 + 48);
    int v93 = v92(v80, 1, v90);
    int v94 = v92(v81, 1, v90);
    if (v93)
    {
      if (!v94)
      {
        uint64_t v95 = v110;
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          _DWORD *v80 = *v81;
          uint64_t v96 = type metadata accessor for AspirePirPIRShardingFunctionDoubleMod(0);
          (*(void (**)(char *, char *, uint64_t))(v109 + 16))((char *)v80 + *(int *)(v96 + 20), (char *)v81 + *(int *)(v96 + 20), v110);
        }
        else
        {
          (*(void (**)(_DWORD *, _DWORD *, uint64_t))(v109 + 16))(v80, v81, v110);
        }
        swift_storeEnumTagMultiPayload();
        (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v91 + 56))(v80, 0, 1, v90);
        goto LABEL_61;
      }
    }
    else
    {
      if (!v94)
      {
        uint64_t v95 = v110;
        if (a1 != a2)
        {
          outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v80, type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function);
          if (swift_getEnumCaseMultiPayload() == 1)
          {
            _DWORD *v80 = *v81;
            uint64_t v101 = type metadata accessor for AspirePirPIRShardingFunctionDoubleMod(0);
            (*(void (**)(char *, char *, uint64_t))(v109 + 16))((char *)v80 + *(int *)(v101 + 20), (char *)v81 + *(int *)(v101 + 20), v110);
          }
          else
          {
            (*(void (**)(_DWORD *, _DWORD *, uint64_t))(v109 + 16))(v80, v81, v110);
          }
          swift_storeEnumTagMultiPayload();
        }
        goto LABEL_61;
      }
      outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v80, type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function);
    }
    uint64_t v100 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
    memcpy(v80, v81, *(void *)(*(void *)(v100 - 8) + 64));
    uint64_t v95 = v110;
LABEL_61:
    ((void (*)(char *, char *, uint64_t))v106)((char *)v80 + *(int *)(v82 + 20), (char *)v81 + *(int *)(v82 + 20), v95);
    return a1;
  }
  if (v38)
  {
LABEL_13:
    size_t v46 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?)
                                - 8)
                    + 64);
    uint64_t v47 = (void *)v32;
    uint64_t v48 = v33;
LABEL_14:
    memcpy(v47, v48, v46);
    return a1;
  }
  uint64_t v108 = v35;
  *(void *)uint64_t v32 = *(void *)v33;
  *(unsigned char *)(v32 + 8) = v33[8];
  uint64_t v39 = *(void (**)(char *, char *, uint64_t))(v109 + 16);
  v39((char *)(v32 + v34[6]), &v33[v34[6]], v110);
  uint64_t v40 = v34[7];
  uint64_t v41 = (void *)(v32 + v40);
  uint64_t v42 = (void **)&v33[v40];
  uint64_t v43 = type metadata accessor for AspirePirSymmetricPirClientConfig(0);
  uint64_t v44 = *(void *)(v43 - 8);
  uint64_t v107 = v39;
  if ((*(unsigned int (**)(void **, uint64_t, uint64_t))(v44 + 48))(v42, 1, v43))
  {
    uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirSymmetricPirClientConfig?);
    memcpy(v41, v42, *(void *)(*(void *)(v45 - 8) + 64));
  }
  else
  {
    unint64_t v104 = (unint64_t)v42[1];
    __src = *v42;
    outlined copy of Data._Representation((uint64_t)*v42, v104);
    *uint64_t v41 = __src;
    v41[1] = v104;
    uint64_t v60 = v42[2];
    *((unsigned char *)v41 + 24) = *((unsigned char *)v42 + 24);
    v41[2] = v60;
    v39((char *)v41 + *(int *)(v43 + 24), (char *)v42 + *(int *)(v43 + 24), v110);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v44 + 56))(v41, 0, 1, v43);
  }
  uint64_t v61 = v34[8];
  uint64_t v62 = (_DWORD *)(v32 + v61);
  uint64_t v63 = &v33[v61];
  uint64_t v64 = type metadata accessor for AspirePirPIRShardingFunction(0);
  uint64_t v65 = *(void *)(v64 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v65 + 48))(v63, 1, v64))
  {
    uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPIRShardingFunction?);
    memcpy(v62, v63, *(void *)(*(void *)(v66 - 8) + 64));
  }
  else
  {
    uint64_t v67 = type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function(0);
    uint64_t v68 = *(void *)(v67 - 8);
    if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v68 + 48))(v63, 1, v67))
    {
      uint64_t v69 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
      memcpy(v62, v63, *(void *)(*(void *)(v69 - 8) + 64));
    }
    else
    {
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        *uint64_t v62 = *v63;
        uint64_t v73 = type metadata accessor for AspirePirPIRShardingFunctionDoubleMod(0);
        v107((char *)v62 + *(int *)(v73 + 20), (char *)v63 + *(int *)(v73 + 20), v110);
      }
      else
      {
        v107((char *)v62, (char *)v63, v110);
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v68 + 56))(v62, 0, 1, v67);
    }
    v107((char *)v62 + *(int *)(v64 + 20), (char *)v63 + *(int *)(v64 + 20), v110);
    (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v65 + 56))(v62, 0, 1, v64);
  }
  (*(void (**)(uint64_t, void, uint64_t, int *))(v108 + 56))(v32, 0, 1, v34);
  return a1;
}

uint64_t initializeWithTake for AMDPbPIRConfig(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v7 = a3[8];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  uint64_t v12 = a3[9];
  uint64_t v13 = (_OWORD *)(a1 + v12);
  uint64_t v14 = (_OWORD *)(a2 + v12);
  uint64_t v15 = type metadata accessor for AspireHeEncryptionParameters(0);
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    *uint64_t v13 = *v14;
    uint64_t v18 = *((void *)v14 + 3);
    *((void *)v13 + 2) = *((void *)v14 + 2);
    *((void *)v13 + 3) = v18;
    *((unsigned char *)v13 + 32) = *((unsigned char *)v14 + 32);
    *((void *)v13 + 5) = *((void *)v14 + 5);
    *((unsigned char *)v13 + 48) = *((unsigned char *)v14 + 48);
    *((void *)v13 + 7) = *((void *)v14 + 7);
    *((unsigned char *)v13 + 64) = *((unsigned char *)v14 + 64);
    v11((uint64_t)v13 + *(int *)(v15 + 40), (uint64_t)v14 + *(int *)(v15 + 40), v10);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  uint64_t v19 = a3[10];
  uint64_t v20 = (unsigned char *)(a1 + v19);
  int v21 = (unsigned char *)(a2 + v19);
  int v22 = (int *)type metadata accessor for AspirePirKeywordPirParameters(0);
  uint64_t v23 = *((void *)v22 - 1);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, int *))(v23 + 48))(v21, 1, v22))
  {
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
  }
  else
  {
    uint64_t v48 = v23;
    *(void *)uint64_t v20 = *(void *)v21;
    v20[8] = v21[8];
    v11((uint64_t)&v20[v22[6]], (uint64_t)&v21[v22[6]], v10);
    uint64_t v25 = v22[7];
    uint64_t v26 = &v20[v25];
    uint64_t v27 = &v21[v25];
    uint64_t v28 = type metadata accessor for AspirePirSymmetricPirClientConfig(0);
    uint64_t v29 = (void (*)(char *, char *, uint64_t))v11;
    uint64_t v30 = *(void *)(v28 - 8);
    uint64_t v46 = v10;
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v30 + 48))(v27, 1, v28))
    {
      uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirSymmetricPirClientConfig?);
      memcpy(v26, v27, *(void *)(*(void *)(v31 - 8) + 64));
    }
    else
    {
      _OWORD *v26 = *v27;
      *((void *)v26 + 2) = *((void *)v27 + 2);
      *((unsigned char *)v26 + 24) = *((unsigned char *)v27 + 24);
      v29((char *)v26 + *(int *)(v28 + 24), (char *)v27 + *(int *)(v28 + 24), v10);
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v30 + 56))(v26, 0, 1, v28);
    }
    uint64_t v32 = v22[8];
    int v33 = &v20[v32];
    uint64_t v34 = &v21[v32];
    uint64_t v35 = type metadata accessor for AspirePirPIRShardingFunction(0);
    uint64_t v36 = *(void *)(v35 - 8);
    if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
    {
      uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPIRShardingFunction?);
      memcpy(v33, v34, *(void *)(*(void *)(v37 - 8) + 64));
    }
    else
    {
      uint64_t v38 = type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function(0);
      uint64_t v39 = *(void *)(v38 - 8);
      uint64_t v47 = v36;
      if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v39 + 48))(v34, 1, v38))
      {
        uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
        memcpy(v33, v34, *(void *)(*(void *)(v40 - 8) + 64));
        v29((char *)v33 + *(int *)(v35 + 20), (char *)v34 + *(int *)(v35 + 20), v46);
      }
      else
      {
        uint64_t v45 = v39;
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          _DWORD *v33 = *v34;
          uint64_t v41 = type metadata accessor for AspirePirPIRShardingFunctionDoubleMod(0);
          uint64_t v42 = v46;
          uint64_t v43 = v29;
          v29((char *)v33 + *(int *)(v41 + 20), (char *)v34 + *(int *)(v41 + 20), v46);
        }
        else
        {
          uint64_t v42 = v46;
          uint64_t v43 = v29;
          v29((char *)v33, (char *)v34, v46);
        }
        swift_storeEnumTagMultiPayload();
        (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v45 + 56))(v33, 0, 1, v38);
        v43((char *)v33 + *(int *)(v35 + 20), (char *)v34 + *(int *)(v35 + 20), v42);
      }
      (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v47 + 56))(v33, 0, 1, v35);
    }
    (*(void (**)(unsigned char *, void, uint64_t, int *))(v48 + 56))(v20, 0, 1, v22);
  }
  return a1;
}

uint64_t assignWithTake for AMDPbPIRConfig(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 40);
  uint64_t v7 = *(void *)(a1 + 32);
  unint64_t v8 = *(void *)(a1 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = v6;
  outlined consume of Data._Representation(v7, v8);
  uint64_t v9 = a3[8];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for UnknownStorage();
  uint64_t v90 = *(void *)(v12 - 8);
  uint64_t v91 = v12;
  uint64_t v88 = *(void (**)(uint64_t, uint64_t))(v90 + 40);
  v88(v10, v11);
  uint64_t v13 = a3[9];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  uint64_t v16 = type metadata accessor for AspireHeEncryptionParameters(0);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  int v19 = v18(v14, 1, v16);
  int v20 = v18(v15, 1, v16);
  if (v19)
  {
    if (!v20)
    {
      *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
      uint64_t v21 = *(void *)(v15 + 24);
      *(void *)(v14 + 16) = *(void *)(v15 + 16);
      *(void *)(v14 + 24) = v21;
      *(unsigned char *)(v14 + 32) = *(unsigned char *)(v15 + 32);
      *(unsigned char *)(v14 + 48) = *(unsigned char *)(v15 + 48);
      *(void *)(v14 + 40) = *(void *)(v15 + 40);
      *(void *)(v14 + 56) = *(void *)(v15 + 56);
      *(unsigned char *)(v14 + 64) = *(unsigned char *)(v15 + 64);
      uint64_t v22 = v91;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v90 + 32))(v14 + *(int *)(v16 + 40), v15 + *(int *)(v16 + 40), v91);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v20)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config(v14, type metadata accessor for AspireHeEncryptionParameters);
LABEL_6:
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    memcpy((void *)v14, (const void *)v15, *(void *)(*(void *)(v23 - 8) + 64));
    uint64_t v22 = v91;
    goto LABEL_7;
  }
  *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
  *(void *)(v14 + 16) = *(void *)(v15 + 16);
  swift_bridgeObjectRelease();
  *(void *)(v14 + 24) = *(void *)(v15 + 24);
  *(unsigned char *)(v14 + 32) = *(unsigned char *)(v15 + 32);
  *(void *)(v14 + 40) = *(void *)(v15 + 40);
  *(unsigned char *)(v14 + 48) = *(unsigned char *)(v15 + 48);
  *(void *)(v14 + 56) = *(void *)(v15 + 56);
  *(unsigned char *)(v14 + 64) = *(unsigned char *)(v15 + 64);
  uint64_t v22 = v91;
  ((void (*)(uint64_t, uint64_t, uint64_t))v88)(v14 + *(int *)(v16 + 40), v15 + *(int *)(v16 + 40), v91);
LABEL_7:
  uint64_t v24 = a3[10];
  uint64_t v25 = a1 + v24;
  uint64_t v26 = (unsigned char *)(a2 + v24);
  uint64_t v27 = (int *)type metadata accessor for AspirePirKeywordPirParameters(0);
  uint64_t v28 = *((void *)v27 - 1);
  uint64_t v29 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v28 + 48);
  int v30 = v29(v25, 1, v27);
  int v31 = v29((uint64_t)v26, 1, v27);
  if (!v30)
  {
    if (v31)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config(v25, type metadata accessor for AspirePirKeywordPirParameters);
      goto LABEL_13;
    }
    *(void *)uint64_t v25 = *(void *)v26;
    *(unsigned char *)(v25 + 8) = v26[8];
    ((void (*)(uint64_t, unsigned char *, uint64_t))v88)(v25 + v27[6], &v26[v27[6]], v22);
    uint64_t v42 = v27[7];
    uint64_t v43 = v25 + v42;
    uint64_t v44 = &v26[v42];
    uint64_t v45 = type metadata accessor for AspirePirSymmetricPirClientConfig(0);
    uint64_t v86 = *(void *)(v45 - 8);
    uint64_t v87 = v43;
    uint64_t v46 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v86 + 48);
    LODWORD(v43) = v46(v43, 1, v45);
    int v47 = v46((uint64_t)v44, 1, v45);
    if (v43)
    {
      if (v47)
      {
        size_t v48 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirSymmetricPirClientConfig?)
                                    - 8)
                        + 64);
        uint64_t v49 = (void *)v87;
LABEL_26:
        memcpy(v49, v44, v48);
        uint64_t v59 = v91;
        goto LABEL_31;
      }
      *(_OWORD *)uint64_t v87 = *v44;
      *(void *)(v87 + 16) = *((void *)v44 + 2);
      *(unsigned char *)(v87 + 24) = *((unsigned char *)v44 + 24);
      uint64_t v59 = v91;
      (*(void (**)(uint64_t, char *, uint64_t))(v90 + 32))(v87 + *(int *)(v45 + 24), (char *)v44 + *(int *)(v45 + 24), v91);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v86 + 56))(v87, 0, 1, v45);
    }
    else
    {
      if (v47)
      {
        outlined destroy of AMDPbHEConfig.OneOf_Config(v87, type metadata accessor for AspirePirSymmetricPirClientConfig);
        size_t v48 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirSymmetricPirClientConfig?)
                                    - 8)
                        + 64);
        uint64_t v49 = (void *)v87;
        goto LABEL_26;
      }
      uint64_t v61 = *(void *)v87;
      unint64_t v62 = *(void *)(v87 + 8);
      *(_OWORD *)uint64_t v87 = *v44;
      outlined consume of Data._Representation(v61, v62);
      *(void *)(v87 + 16) = *((void *)v44 + 2);
      *(unsigned char *)(v87 + 24) = *((unsigned char *)v44 + 24);
      uint64_t v59 = v91;
      ((void (*)(uint64_t, char *, uint64_t))v88)(v87 + *(int *)(v45 + 24), (char *)v44 + *(int *)(v45 + 24), v91);
    }
LABEL_31:
    uint64_t v63 = v27[8];
    uint64_t v64 = (_DWORD *)(v25 + v63);
    uint64_t v65 = &v26[v63];
    uint64_t v66 = type metadata accessor for AspirePirPIRShardingFunction(0);
    uint64_t v67 = *(void *)(v66 - 8);
    uint64_t v68 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(v67 + 48);
    int v69 = v68(v64, 1, v66);
    int v70 = v68(v65, 1, v66);
    if (v69)
    {
      if (!v70)
      {
        uint64_t v71 = type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function(0);
        uint64_t v72 = *(void *)(v71 - 8);
        if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v72 + 48))(v65, 1, v71))
        {
          uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
          memcpy(v64, v65, *(void *)(*(void *)(v73 - 8) + 64));
          (*(void (**)(char *, char *, uint64_t))(v90 + 32))((char *)v64 + *(int *)(v66 + 20), (char *)v65 + *(int *)(v66 + 20), v59);
        }
        else
        {
          if (swift_getEnumCaseMultiPayload() == 1)
          {
            _DWORD *v64 = *v65;
            uint64_t v82 = type metadata accessor for AspirePirPIRShardingFunctionDoubleMod(0);
            uint64_t v83 = *(void (**)(char *, char *, uint64_t))(v90 + 32);
            v83((char *)v64 + *(int *)(v82 + 20), (char *)v65 + *(int *)(v82 + 20), v59);
          }
          else
          {
            uint64_t v83 = *(void (**)(char *, char *, uint64_t))(v90 + 32);
            v83((char *)v64, (char *)v65, v59);
          }
          swift_storeEnumTagMultiPayload();
          (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v72 + 56))(v64, 0, 1, v71);
          v83((char *)v64 + *(int *)(v66 + 20), (char *)v65 + *(int *)(v66 + 20), v59);
        }
        (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v67 + 56))(v64, 0, 1, v66);
        return a1;
      }
      goto LABEL_37;
    }
    if (v70)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v64, type metadata accessor for AspirePirPIRShardingFunction);
LABEL_37:
      size_t v39 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPIRShardingFunction?)
                                  - 8)
                      + 64);
      uint64_t v40 = v64;
      uint64_t v41 = v65;
      goto LABEL_14;
    }
    uint64_t v74 = type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function(0);
    uint64_t v75 = *(void *)(v74 - 8);
    uint64_t v76 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(v75 + 48);
    int v77 = v76(v64, 1, v74);
    int v78 = v76(v65, 1, v74);
    if (v77)
    {
      if (!v78)
      {
        uint64_t v79 = v91;
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          _DWORD *v64 = *v65;
          uint64_t v80 = type metadata accessor for AspirePirPIRShardingFunctionDoubleMod(0);
          (*(void (**)(char *, char *, uint64_t))(v90 + 32))((char *)v64 + *(int *)(v80 + 20), (char *)v65 + *(int *)(v80 + 20), v91);
        }
        else
        {
          (*(void (**)(_DWORD *, _DWORD *, uint64_t))(v90 + 32))(v64, v65, v91);
        }
        swift_storeEnumTagMultiPayload();
        (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v75 + 56))(v64, 0, 1, v74);
        goto LABEL_61;
      }
    }
    else
    {
      if (!v78)
      {
        uint64_t v79 = v91;
        if (a1 != a2)
        {
          outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v64, type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function);
          if (swift_getEnumCaseMultiPayload() == 1)
          {
            _DWORD *v64 = *v65;
            uint64_t v85 = type metadata accessor for AspirePirPIRShardingFunctionDoubleMod(0);
            (*(void (**)(char *, char *, uint64_t))(v90 + 32))((char *)v64 + *(int *)(v85 + 20), (char *)v65 + *(int *)(v85 + 20), v91);
          }
          else
          {
            (*(void (**)(_DWORD *, _DWORD *, uint64_t))(v90 + 32))(v64, v65, v91);
          }
          swift_storeEnumTagMultiPayload();
        }
        goto LABEL_61;
      }
      outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v64, type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function);
    }
    uint64_t v84 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
    memcpy(v64, v65, *(void *)(*(void *)(v84 - 8) + 64));
    uint64_t v79 = v91;
LABEL_61:
    ((void (*)(char *, char *, uint64_t))v88)((char *)v64 + *(int *)(v66 + 20), (char *)v65 + *(int *)(v66 + 20), v79);
    return a1;
  }
  if (v31)
  {
LABEL_13:
    size_t v39 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?)
                                - 8)
                    + 64);
    uint64_t v40 = (void *)v25;
    uint64_t v41 = v26;
LABEL_14:
    memcpy(v40, v41, v39);
    return a1;
  }
  uint64_t v89 = v28;
  *(void *)uint64_t v25 = *(void *)v26;
  *(unsigned char *)(v25 + 8) = v26[8];
  uint64_t v32 = *(void (**)(uint64_t, _DWORD *, uint64_t))(v90 + 32);
  v32(v25 + v27[6], &v26[v27[6]], v22);
  uint64_t v33 = v27[7];
  uint64_t v34 = (_OWORD *)(v25 + v33);
  uint64_t v35 = &v26[v33];
  uint64_t v36 = type metadata accessor for AspirePirSymmetricPirClientConfig(0);
  uint64_t v37 = *(void *)(v36 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36))
  {
    uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirSymmetricPirClientConfig?);
    memcpy(v34, v35, *(void *)(*(void *)(v38 - 8) + 64));
  }
  else
  {
    *uint64_t v34 = *v35;
    *((void *)v34 + 2) = *((void *)v35 + 2);
    *((unsigned char *)v34 + 24) = *((unsigned char *)v35 + 24);
    v32((uint64_t)v34 + *(int *)(v36 + 24), (_OWORD *)((char *)v35 + *(int *)(v36 + 24)), v91);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
  }
  uint64_t v50 = v27[8];
  uint64_t v51 = (_DWORD *)(v25 + v50);
  uint64_t v52 = &v26[v50];
  uint64_t v53 = type metadata accessor for AspirePirPIRShardingFunction(0);
  uint64_t v54 = *(void *)(v53 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v54 + 48))(v52, 1, v53))
  {
    uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPIRShardingFunction?);
    memcpy(v51, v52, *(void *)(*(void *)(v55 - 8) + 64));
  }
  else
  {
    uint64_t v56 = type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function(0);
    uint64_t v57 = *(void *)(v56 - 8);
    if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v57 + 48))(v52, 1, v56))
    {
      uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
      memcpy(v51, v52, *(void *)(*(void *)(v58 - 8) + 64));
      v32((uint64_t)v51 + *(int *)(v53 + 20), (_DWORD *)((char *)v52 + *(int *)(v53 + 20)), v91);
    }
    else
    {
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        *uint64_t v51 = *v52;
        uint64_t v60 = type metadata accessor for AspirePirPIRShardingFunctionDoubleMod(0);
        v32((uint64_t)v51 + *(int *)(v60 + 20), (_DWORD *)((char *)v52 + *(int *)(v60 + 20)), v91);
      }
      else
      {
        v32((uint64_t)v51, v52, v91);
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v57 + 56))(v51, 0, 1, v56);
      v32((uint64_t)v51 + *(int *)(v53 + 20), (_DWORD *)((char *)v52 + *(int *)(v53 + 20)), v91);
    }
    (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v54 + 56))(v51, 0, 1, v53);
  }
  (*(void (**)(uint64_t, void, uint64_t, int *))(v89 + 56))(v25, 0, 1, v27);
  return a1;
}

uint64_t getEnumTagSinglePayload for AMDPbPIRConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_249C83F9C);
}

uint64_t sub_249C83F9C(char *a1, uint64_t a2, int *a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  uint64_t v8 = type metadata accessor for UnknownStorage();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a2)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a3[8];
LABEL_9:
    uint64_t v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
    return v13(&a1[v11], a2, v9);
  }
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a2)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a3[9];
    goto LABEL_9;
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  uint64_t v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
  uint64_t v16 = v14;
  uint64_t v17 = &a1[a3[10]];
  return v15(v17, a2, v16);
}

uint64_t storeEnumTagSinglePayload for AMDPbPIRConfig(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_249C84130);
}

char *sub_249C84130(char *result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)uint64_t result = (a2 - 1);
    return result;
  }
  uint64_t v8 = type metadata accessor for UnknownStorage();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[8];
LABEL_7:
    uint64_t v13 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return (char *)v13(&v5[v11], a2, a2, v9);
  }
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a3)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a4[9];
    goto LABEL_7;
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  uint64_t v15 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
  uint64_t v16 = v14;
  uint64_t v17 = &v5[a4[10]];
  return (char *)v15(v17, a2, a2, v16);
}

void type metadata completion function for AMDPbPIRConfig()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for AMDPbHEConfig.OneOf_Config?(319, &lazy cache variable for type metadata for AspireHeEncryptionParameters?, (void (*)(uint64_t))type metadata accessor for AspireHeEncryptionParameters);
    if (v1 <= 0x3F)
    {
      type metadata accessor for AMDPbHEConfig.OneOf_Config?(319, &lazy cache variable for type metadata for AspirePirKeywordPirParameters?, (void (*)(uint64_t))type metadata accessor for AspirePirKeywordPirParameters);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for AMDPbPIRShardConfig(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v10 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = a2[2];
    uint64_t v5 = *(int *)(a3 + 28);
    uint64_t v6 = (char *)a1 + v5;
    uint64_t v7 = (char *)a2 + v5;
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16);
    swift_bridgeObjectRetain();
    v9(v6, v7, v8);
  }
  return v3;
}

uint64_t destroy for AMDPbPIRShardConfig(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

uint64_t initializeWithCopy for AMDPbPIRShardConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  return a1;
}

void *assignWithCopy for AMDPbPIRShardConfig(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for AMDPbPIRShardConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for AMDPbPIRShardConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for AMDPbPIRShardConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_249C847F4);
}

uint64_t sub_249C847F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 28);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for AMDPbPIRShardConfig(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_249C848B8);
}

uint64_t sub_249C848B8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 16) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 28);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for AMDPbPIRShardConfig()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for AMDPbPECConfig(uint64_t a1, uint64_t *a2, int *a3)
{
  unint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *unint64_t v4 = *a2;
    unint64_t v4 = (void *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(void *)a1 = *a2;
    *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
    *(void *)(a1 + 16) = a2[2];
    *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
    uint64_t v7 = a2[4];
    unint64_t v8 = a2[5];
    outlined copy of Data._Representation(v7, v8);
    v4[4] = v7;
    v4[5] = v8;
    uint64_t v9 = a3[8];
    uint64_t v10 = (char *)v4 + v9;
    uint64_t v11 = (uint64_t)a2 + v9;
    uint64_t v12 = type metadata accessor for UnknownStorage();
    uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16);
    v13(v10, v11, v12);
    uint64_t v14 = a3[9];
    uint64_t v15 = (_OWORD *)((char *)v4 + v14);
    uint64_t v16 = (_OWORD *)((char *)a2 + v14);
    uint64_t v17 = type metadata accessor for AspireHeEncryptionParameters(0);
    uint64_t v18 = *(void *)(v17 - 8);
    uint64_t v35 = (void (*)(char *, char *, uint64_t))v13;
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      *uint64_t v15 = *v16;
      uint64_t v21 = *((void *)v16 + 3);
      *((void *)v15 + 2) = *((void *)v16 + 2);
      *((void *)v15 + 3) = v21;
      *((unsigned char *)v15 + 32) = *((unsigned char *)v16 + 32);
      *((void *)v15 + 5) = *((void *)v16 + 5);
      *((unsigned char *)v15 + 48) = *((unsigned char *)v16 + 48);
      *((void *)v15 + 7) = *((void *)v16 + 7);
      *((unsigned char *)v15 + 64) = *((unsigned char *)v16 + 64);
      uint64_t v22 = *(int *)(v17 + 40);
      uint64_t v23 = (char *)v15 + v22;
      uint64_t v24 = (char *)v16 + v22;
      swift_bridgeObjectRetain();
      v13(v23, (uint64_t)v24, v12);
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
    uint64_t v25 = a3[10];
    uint64_t v26 = (char *)v4 + v25;
    uint64_t v27 = (char *)a2 + v25;
    uint64_t v28 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
    uint64_t v29 = *(void *)(v28 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
    {
      uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
      memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64));
    }
    else
    {
      uint64_t v31 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
      uint64_t v32 = *(void *)(v31 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v27, 1, v31))
      {
        uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
        memcpy(v26, v27, *(void *)(*(void *)(v33 - 8) + 64));
      }
      else
      {
        swift_getEnumCaseMultiPayload();
        v35(v26, v27, v12);
        swift_storeEnumTagMultiPayload();
        (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(v26, 0, 1, v31);
      }
      v35(&v26[*(int *)(v28 + 20)], &v27[*(int *)(v28 + 20)], v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
    }
  }
  return v4;
}

uint64_t destroy for AMDPbPECConfig(uint64_t a1, int *a2)
{
  outlined consume of Data._Representation(*(void *)(a1 + 32), *(void *)(a1 + 40));
  uint64_t v4 = a1 + a2[8];
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v13 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v13(v4, v5);
  uint64_t v6 = a1 + a2[9];
  uint64_t v7 = type metadata accessor for AspireHeEncryptionParameters(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7))
  {
    swift_bridgeObjectRelease();
    v13(v6 + *(int *)(v7 + 40), v5);
  }
  uint64_t v8 = a1 + a2[10];
  uint64_t v9 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9);
  if (!result)
  {
    uint64_t v11 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v8, 1, v11)
      && swift_getEnumCaseMultiPayload() <= 2)
    {
      v13(v8, v5);
    }
    uint64_t v12 = v8 + *(int *)(v9 + 20);
    return ((uint64_t (*)(uint64_t, uint64_t))v13)(v12, v5);
  }
  return result;
}

uint64_t initializeWithCopy for AMDPbPECConfig(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 32);
  unint64_t v7 = *(void *)(a2 + 40);
  outlined copy of Data._Representation(v6, v7);
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v7;
  uint64_t v8 = a3[8];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
  v12(v9, v10, v11);
  uint64_t v13 = a3[9];
  uint64_t v14 = (_OWORD *)(a1 + v13);
  uint64_t v15 = (_OWORD *)(a2 + v13);
  uint64_t v16 = type metadata accessor for AspireHeEncryptionParameters(0);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v33 = (void (*)(char *, char *, uint64_t))v12;
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    *uint64_t v14 = *v15;
    uint64_t v19 = *((void *)v15 + 3);
    *((void *)v14 + 2) = *((void *)v15 + 2);
    *((void *)v14 + 3) = v19;
    *((unsigned char *)v14 + 32) = *((unsigned char *)v15 + 32);
    *((void *)v14 + 5) = *((void *)v15 + 5);
    *((unsigned char *)v14 + 48) = *((unsigned char *)v15 + 48);
    *((void *)v14 + 7) = *((void *)v15 + 7);
    *((unsigned char *)v14 + 64) = *((unsigned char *)v15 + 64);
    uint64_t v20 = *(int *)(v16 + 40);
    uint64_t v21 = (char *)v14 + v20;
    uint64_t v22 = (char *)v15 + v20;
    swift_bridgeObjectRetain();
    v12((uint64_t)v21, (uint64_t)v22, v11);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  uint64_t v23 = a3[10];
  uint64_t v24 = (char *)(a1 + v23);
  uint64_t v25 = (char *)(a2 + v23);
  uint64_t v26 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  uint64_t v27 = *(void *)(v26 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
  {
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
  }
  else
  {
    uint64_t v29 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
    uint64_t v30 = *(void *)(v29 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v25, 1, v29))
    {
      uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
      memcpy(v24, v25, *(void *)(*(void *)(v31 - 8) + 64));
    }
    else
    {
      swift_getEnumCaseMultiPayload();
      v33(v24, v25, v11);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(v24, 0, 1, v29);
    }
    v33(&v24[*(int *)(v26 + 20)], &v25[*(int *)(v26 + 20)], v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  }
  return a1;
}

uint64_t assignWithCopy for AMDPbPECConfig(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = v6;
  uint64_t v7 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  outlined copy of Data._Representation(v7, v8);
  uint64_t v9 = *(void *)(a1 + 32);
  unint64_t v10 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  outlined consume of Data._Representation(v9, v10);
  uint64_t v11 = a3[8];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for UnknownStorage();
  uint64_t v56 = *(void *)(v14 - 8);
  uint64_t v57 = v14;
  uint64_t v55 = *(void (**)(uint64_t, uint64_t))(v56 + 24);
  v55(v12, v13);
  uint64_t v15 = a3[9];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = type metadata accessor for AspireHeEncryptionParameters(0);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 48);
  int v21 = v20(v16, 1, v18);
  int v22 = v20(v17, 1, v18);
  if (v21)
  {
    if (!v22)
    {
      *(void *)uint64_t v16 = *(void *)v17;
      *(void *)(v16 + 8) = *(void *)(v17 + 8);
      *(void *)(v16 + 16) = *(void *)(v17 + 16);
      uint64_t v23 = *(void *)(v17 + 24);
      *(unsigned char *)(v16 + 32) = *(unsigned char *)(v17 + 32);
      *(void *)(v16 + 24) = v23;
      uint64_t v24 = *(void *)(v17 + 40);
      *(unsigned char *)(v16 + 48) = *(unsigned char *)(v17 + 48);
      *(void *)(v16 + 40) = v24;
      uint64_t v25 = *(void *)(v17 + 56);
      *(unsigned char *)(v16 + 64) = *(unsigned char *)(v17 + 64);
      *(void *)(v16 + 56) = v25;
      uint64_t v26 = *(int *)(v18 + 40);
      uint64_t v27 = v16 + v26;
      uint64_t v28 = v17 + v26;
      uint64_t v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(v56 + 16);
      swift_bridgeObjectRetain();
      v29(v27, v28, v57);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v22)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config(v16, type metadata accessor for AspireHeEncryptionParameters);
LABEL_6:
    uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    memcpy((void *)v16, (const void *)v17, *(void *)(*(void *)(v30 - 8) + 64));
    goto LABEL_7;
  }
  *(void *)uint64_t v16 = *(void *)v17;
  *(void *)(v16 + 8) = *(void *)(v17 + 8);
  *(void *)(v16 + 16) = *(void *)(v17 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v43 = *(void *)(v17 + 24);
  *(unsigned char *)(v16 + 32) = *(unsigned char *)(v17 + 32);
  *(void *)(v16 + 24) = v43;
  uint64_t v44 = *(void *)(v17 + 40);
  *(unsigned char *)(v16 + 48) = *(unsigned char *)(v17 + 48);
  *(void *)(v16 + 40) = v44;
  uint64_t v45 = *(void *)(v17 + 56);
  *(unsigned char *)(v16 + 64) = *(unsigned char *)(v17 + 64);
  *(void *)(v16 + 56) = v45;
  ((void (*)(uint64_t, uint64_t, uint64_t))v55)(v16 + *(int *)(v18 + 40), v17 + *(int *)(v18 + 40), v57);
LABEL_7:
  uint64_t v31 = a3[10];
  uint64_t v32 = (char *)(a1 + v31);
  uint64_t v33 = (char *)(a2 + v31);
  uint64_t v34 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  uint64_t v35 = *(void *)(v34 - 8);
  uint64_t v36 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v35 + 48);
  int v37 = v36(v32, 1, v34);
  int v38 = v36(v33, 1, v34);
  if (!v37)
  {
    if (v38)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v32, type metadata accessor for AspireSimilarityPlaintextPacking);
      goto LABEL_13;
    }
    uint64_t v46 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
    uint64_t v47 = *(void *)(v46 - 8);
    size_t v48 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v47 + 48);
    int v49 = v48(v32, 1, v46);
    int v50 = v48(v33, 1, v46);
    if (v49)
    {
      if (!v50)
      {
        swift_getEnumCaseMultiPayload();
        uint64_t v51 = v57;
        (*(void (**)(char *, char *, uint64_t))(v56 + 16))(v32, v33, v57);
        swift_storeEnumTagMultiPayload();
        (*(void (**)(char *, void, uint64_t, uint64_t))(v47 + 56))(v32, 0, 1, v46);
LABEL_23:
        ((void (*)(char *, char *, uint64_t))v55)(&v32[*(int *)(v34 + 20)], &v33[*(int *)(v34 + 20)], v51);
        return a1;
      }
    }
    else
    {
      if (!v50)
      {
        uint64_t v51 = v57;
        if (a1 != a2)
        {
          outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v32, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
          swift_getEnumCaseMultiPayload();
          (*(void (**)(char *, char *, uint64_t))(v56 + 16))(v32, v33, v57);
          swift_storeEnumTagMultiPayload();
        }
        goto LABEL_23;
      }
      outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v32, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
    }
    uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
    memcpy(v32, v33, *(void *)(*(void *)(v53 - 8) + 64));
    uint64_t v51 = v57;
    goto LABEL_23;
  }
  if (v38)
  {
LABEL_13:
    uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    memcpy(v32, v33, *(void *)(*(void *)(v42 - 8) + 64));
    return a1;
  }
  uint64_t v39 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
  uint64_t v40 = *(void *)(v39 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v33, 1, v39))
  {
    uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
    memcpy(v32, v33, *(void *)(*(void *)(v41 - 8) + 64));
    (*(void (**)(char *, char *, uint64_t))(v56 + 16))(&v32[*(int *)(v34 + 20)], &v33[*(int *)(v34 + 20)], v57);
  }
  else
  {
    swift_getEnumCaseMultiPayload();
    uint64_t v52 = *(void (**)(char *, char *, uint64_t))(v56 + 16);
    v52(v32, v33, v57);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, void, uint64_t, uint64_t))(v40 + 56))(v32, 0, 1, v39);
    v52(&v32[*(int *)(v34 + 20)], &v33[*(int *)(v34 + 20)], v57);
  }
  (*(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
  return a1;
}

uint64_t initializeWithTake for AMDPbPECConfig(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v6 = a3[8];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  unint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = a3[9];
  uint64_t v12 = (_OWORD *)(a1 + v11);
  uint64_t v13 = (_OWORD *)(a2 + v11);
  uint64_t v14 = type metadata accessor for AspireHeEncryptionParameters(0);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    *uint64_t v12 = *v13;
    uint64_t v17 = *((void *)v13 + 3);
    *((void *)v12 + 2) = *((void *)v13 + 2);
    *((void *)v12 + 3) = v17;
    *((unsigned char *)v12 + 32) = *((unsigned char *)v13 + 32);
    *((void *)v12 + 5) = *((void *)v13 + 5);
    *((unsigned char *)v12 + 48) = *((unsigned char *)v13 + 48);
    *((void *)v12 + 7) = *((void *)v13 + 7);
    *((unsigned char *)v12 + 64) = *((unsigned char *)v13 + 64);
    v10((uint64_t)v12 + *(int *)(v14 + 40), (uint64_t)v13 + *(int *)(v14 + 40), v9);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  uint64_t v18 = a3[10];
  uint64_t v19 = (char *)(a1 + v18);
  uint64_t v20 = (char *)(a2 + v18);
  uint64_t v21 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  uint64_t v22 = *(void *)(v21 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    uint64_t v24 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
    uint64_t v25 = *(void *)(v24 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v20, 1, v24))
    {
      uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
      memcpy(v19, v20, *(void *)(*(void *)(v26 - 8) + 64));
    }
    else
    {
      swift_getEnumCaseMultiPayload();
      v10((uint64_t)v19, (uint64_t)v20, v9);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v19, 0, 1, v24);
    }
    v10((uint64_t)&v19[*(int *)(v21 + 20)], (uint64_t)&v20[*(int *)(v21 + 20)], v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  return a1;
}

uint64_t assignWithTake for AMDPbPECConfig(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v6 = *(void *)(a1 + 32);
  unint64_t v7 = *(void *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  outlined consume of Data._Representation(v6, v7);
  uint64_t v8 = a3[8];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  uint64_t v44 = *(void *)(v11 - 8);
  uint64_t v45 = v11;
  uint64_t v43 = *(void (**)(uint64_t, uint64_t))(v44 + 40);
  v43(v9, v10);
  uint64_t v12 = a3[9];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = type metadata accessor for AspireHeEncryptionParameters(0);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v13, 1, v15);
  int v19 = v17(v14, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
      uint64_t v20 = *(void *)(v14 + 24);
      *(void *)(v13 + 16) = *(void *)(v14 + 16);
      *(void *)(v13 + 24) = v20;
      *(unsigned char *)(v13 + 32) = *(unsigned char *)(v14 + 32);
      *(unsigned char *)(v13 + 48) = *(unsigned char *)(v14 + 48);
      *(void *)(v13 + 40) = *(void *)(v14 + 40);
      *(void *)(v13 + 56) = *(void *)(v14 + 56);
      *(unsigned char *)(v13 + 64) = *(unsigned char *)(v14 + 64);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 32))(v13 + *(int *)(v15 + 40), v14 + *(int *)(v15 + 40), v45);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config(v13, type metadata accessor for AspireHeEncryptionParameters);
LABEL_6:
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    memcpy((void *)v13, (const void *)v14, *(void *)(*(void *)(v21 - 8) + 64));
    goto LABEL_7;
  }
  *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
  *(void *)(v13 + 16) = *(void *)(v14 + 16);
  swift_bridgeObjectRelease();
  *(void *)(v13 + 24) = *(void *)(v14 + 24);
  *(unsigned char *)(v13 + 32) = *(unsigned char *)(v14 + 32);
  *(void *)(v13 + 40) = *(void *)(v14 + 40);
  *(unsigned char *)(v13 + 48) = *(unsigned char *)(v14 + 48);
  *(void *)(v13 + 56) = *(void *)(v14 + 56);
  *(unsigned char *)(v13 + 64) = *(unsigned char *)(v14 + 64);
  ((void (*)(uint64_t, uint64_t, uint64_t))v43)(v13 + *(int *)(v15 + 40), v14 + *(int *)(v15 + 40), v45);
LABEL_7:
  uint64_t v22 = a3[10];
  uint64_t v23 = (char *)(a1 + v22);
  uint64_t v24 = (char *)(a2 + v22);
  uint64_t v25 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v27 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v26 + 48);
  int v28 = v27(v23, 1, v25);
  int v29 = v27(v24, 1, v25);
  if (!v28)
  {
    if (v29)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v23, type metadata accessor for AspireSimilarityPlaintextPacking);
      goto LABEL_13;
    }
    uint64_t v34 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
    uint64_t v35 = *(void *)(v34 - 8);
    uint64_t v36 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v35 + 48);
    int v37 = v36(v23, 1, v34);
    int v38 = v36(v24, 1, v34);
    if (v37)
    {
      if (!v38)
      {
        swift_getEnumCaseMultiPayload();
        uint64_t v39 = v45;
        (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v23, v24, v45);
        swift_storeEnumTagMultiPayload();
        (*(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(v23, 0, 1, v34);
LABEL_23:
        ((void (*)(char *, char *, uint64_t))v43)(&v23[*(int *)(v25 + 20)], &v24[*(int *)(v25 + 20)], v39);
        return a1;
      }
    }
    else
    {
      if (!v38)
      {
        uint64_t v39 = v45;
        if (a1 != a2)
        {
          outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v23, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
          swift_getEnumCaseMultiPayload();
          (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v23, v24, v45);
          swift_storeEnumTagMultiPayload();
        }
        goto LABEL_23;
      }
      outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v23, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
    }
    uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
    memcpy(v23, v24, *(void *)(*(void *)(v41 - 8) + 64));
    uint64_t v39 = v45;
    goto LABEL_23;
  }
  if (v29)
  {
LABEL_13:
    uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    memcpy(v23, v24, *(void *)(*(void *)(v33 - 8) + 64));
    return a1;
  }
  uint64_t v30 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
  uint64_t v31 = *(void *)(v30 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v24, 1, v30))
  {
    uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
    memcpy(v23, v24, *(void *)(*(void *)(v32 - 8) + 64));
    (*(void (**)(char *, char *, uint64_t))(v44 + 32))(&v23[*(int *)(v25 + 20)], &v24[*(int *)(v25 + 20)], v45);
  }
  else
  {
    swift_getEnumCaseMultiPayload();
    uint64_t v40 = *(void (**)(char *, char *, uint64_t))(v44 + 32);
    v40(v23, v24, v45);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, void, uint64_t, uint64_t))(v31 + 56))(v23, 0, 1, v30);
    v40(&v23[*(int *)(v25 + 20)], &v24[*(int *)(v25 + 20)], v45);
  }
  (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
  return a1;
}

uint64_t getEnumTagSinglePayload for AMDPbPECConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_249C86670);
}

uint64_t sub_249C86670(uint64_t a1, uint64_t a2, int *a3)
{
  if (a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 40) >> 60;
    if (((4 * v4) & 0xC) != 0) {
      return 16 - ((4 * v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0;
    }
  }
  uint64_t v8 = type metadata accessor for UnknownStorage();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a2)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a3[8];
LABEL_9:
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
    return v13(a1 + v11, a2, v9);
  }
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a2)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a3[9];
    goto LABEL_9;
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
  uint64_t v16 = v14;
  uint64_t v17 = a1 + a3[10];
  return v15(v17, a2, v16);
}

uint64_t storeEnumTagSinglePayload for AMDPbPECConfig(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_249C86810);
}

uint64_t sub_249C86810(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *(void *)(result + 32) = 0;
    *(void *)(result + 40) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
    return result;
  }
  uint64_t v8 = type metadata accessor for UnknownStorage();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[8];
LABEL_7:
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return v13(v5 + v11, a2, a2, v9);
  }
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a3)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a4[9];
    goto LABEL_7;
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
  uint64_t v16 = v14;
  uint64_t v17 = v5 + a4[10];
  return v15(v17, a2, a2, v16);
}

void type metadata completion function for AMDPbPECConfig()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for AMDPbHEConfig.OneOf_Config?(319, &lazy cache variable for type metadata for AspireHeEncryptionParameters?, (void (*)(uint64_t))type metadata accessor for AspireHeEncryptionParameters);
    if (v1 <= 0x3F)
    {
      type metadata accessor for AMDPbHEConfig.OneOf_Config?(319, &lazy cache variable for type metadata for AspireSimilarityPlaintextPacking?, (void (*)(uint64_t))type metadata accessor for AspireSimilarityPlaintextPacking);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

uint64_t getEnumTagSinglePayload for AMDPbHEQueries(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_56Tm);
}

uint64_t storeEnumTagSinglePayload for AMDPbHEQueries(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_57Tm);
}

uint64_t getEnumTagSinglePayload for AMDPbHEReplies(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_56Tm_0);
}

uint64_t storeEnumTagSinglePayload for AMDPbHEReplies(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_57Tm_0);
}

void *initializeBufferWithCopyOfBuffer for AMDPbHEQuery(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a2;
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) == 0)
  {
    uint64_t v6 = a3;
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (void *)((char *)a1 + v8);
    uint64_t v10 = (void *)((char *)a2 + v8);
    uint64_t v11 = type metadata accessor for AMDPbHEQuery.OneOf_Query(0);
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v11))
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
      memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
LABEL_62:
      uint64_t v176 = *(int *)(v6 + 24);
      v177 = (char *)v4 + v176;
      uint64_t v178 = (char *)v3 + v176;
      uint64_t v179 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v179 - 8) + 16))(v177, v178, v179);
      return v4;
    }
    uint64_t v217 = v12;
    uint64_t v218 = v11;
    uint64_t v223 = v6;
    v219 = v3;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v16 = v10[1];
      *uint64_t v9 = *v10;
      unint64_t v17 = v10[2];
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v16, v17);
      v9[1] = v16;
      v9[2] = v17;
      int v18 = (int *)type metadata accessor for AMDPbPECQuery(0);
      uint64_t v19 = v18[6];
      uint64_t v20 = (char *)v9 + v19;
      uint64_t v21 = (char *)v10 + v19;
      uint64_t v22 = type metadata accessor for UnknownStorage();
      uint64_t v23 = *(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 16);
      v23(v20, v21, v22);
      uint64_t v24 = v18[7];
      uint64_t v25 = (void *)((char *)v9 + v24);
      uint64_t v26 = (void *)((char *)v10 + v24);
      uint64_t v27 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
      uint64_t v28 = *(void *)(v27 - 8);
      v215 = v23;
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
      {
        uint64_t v29 = v22;
        uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
        memcpy(v25, v26, *(void *)(*(void *)(v30 - 8) + 64));
      }
      else
      {
        v213 = v18;
        uint64_t v46 = v22;
        v221 = v9;
        void *v25 = *v26;
        v25[1] = v26[1];
        uint64_t v47 = *(int *)(v27 + 28);
        size_t v48 = v25;
        int v49 = (char *)v25 + v47;
        int v50 = (char *)v26 + v47;
        swift_bridgeObjectRetain();
        uint64_t v51 = v49;
        uint64_t v52 = v46;
        v23(v51, v50, v46);
        uint64_t v205 = v27;
        v208 = v48;
        uint64_t v53 = *(int *)(v27 + 32);
        uint64_t v54 = (char *)v48 + v53;
        uint64_t v55 = (char *)v26 + v53;
        uint64_t v56 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
        uint64_t v57 = *(void *)(v56 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48))(v55, 1, v56))
        {
          uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
          memcpy(v54, v55, *(void *)(*(void *)(v58 - 8) + 64));
          uint64_t v9 = v221;
          uint64_t v29 = v46;
          uint64_t v59 = v208;
          int v18 = v213;
          uint64_t v60 = v205;
        }
        else
        {
          uint64_t v76 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
          uint64_t v196 = *(void *)(v76 - 8);
          v199 = v55;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v196 + 48))(v55, 1, v76))
          {
            uint64_t v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
            memcpy(v54, v55, *(void *)(*(void *)(v77 - 8) + 64));
            uint64_t v78 = v52;
            uint64_t v79 = v23;
          }
          else
          {
            swift_getEnumCaseMultiPayload();
            uint64_t v97 = v55;
            uint64_t v98 = v76;
            uint64_t v78 = v52;
            uint64_t v99 = v52;
            uint64_t v79 = v23;
            v23(v54, v97, v99);
            swift_storeEnumTagMultiPayload();
            (*(void (**)(char *, void, uint64_t, uint64_t))(v196 + 56))(v54, 0, 1, v98);
          }
          uint64_t v60 = v205;
          v79(&v54[*(int *)(v56 + 20)], &v199[*(int *)(v56 + 20)], v78);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v57 + 56))(v54, 0, 1, v56);
          uint64_t v9 = v221;
          uint64_t v29 = v78;
          uint64_t v59 = v208;
          int v18 = v213;
        }
        (*(void (**)(void *, void, uint64_t, uint64_t))(v28 + 56))(v59, 0, 1, v60);
      }
      uint64_t v100 = v18[8];
      uint64_t v101 = (char *)v9 + v100;
      uint64_t v102 = (char *)v10 + v100;
      uint64_t v103 = type metadata accessor for AMDPbEvaluationKey(0);
      uint64_t v104 = *(void *)(v103 - 8);
      uint64_t v3 = v219;
      uint64_t v6 = v223;
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v104 + 48))(v102, 1, v103))
      {
        uint64_t v207 = v104;
        v222 = v9;
        uint64_t v106 = v29;
        uint64_t v107 = v215;
        v215(v101, v102, v29);
        uint64_t v211 = v103;
        v214 = v101;
        uint64_t v108 = *(int *)(v103 + 20);
        uint64_t v109 = &v101[v108];
        uint64_t v110 = &v102[v108];
        uint64_t v111 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
        uint64_t v112 = *(void *)(v111 - 8);
        uint64_t v204 = v106;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v112 + 48))(v110, 1, v111))
        {
          uint64_t v113 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
          memcpy(v109, v110, *(void *)(*(void *)(v113 - 8) + 64));
        }
        else
        {
          uint64_t v114 = *((void *)v110 + 1);
          uint64_t v201 = v114;
          *(void *)uint64_t v109 = *(void *)v110;
          unint64_t v115 = *((void *)v110 + 2);
          outlined copy of Data._Representation(v114, v115);
          *((void *)v109 + 1) = v201;
          *((void *)v109 + 2) = v115;
          uint64_t v107 = v215;
          v215(&v109[*(int *)(v111 + 24)], &v110[*(int *)(v111 + 24)], v106);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v112 + 56))(v109, 0, 1, v111);
        }
        uint64_t v9 = v222;
        uint64_t v116 = *(int *)(v211 + 24);
        uint64_t v117 = &v214[v116];
        uint64_t v118 = &v102[v116];
        uint64_t v119 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
        uint64_t v120 = *(void *)(v119 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v120 + 48))(v118, 1, v119))
        {
          uint64_t v121 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
          memcpy(v117, v118, *(void *)(*(void *)(v121 - 8) + 64));
          uint64_t v90 = v217;
          uint64_t v89 = v218;
          uint64_t v122 = v207;
        }
        else
        {
          uint64_t v198 = v120;
          v107(v117, v118, v106);
          uint64_t v123 = *(int *)(v119 + 20);
          uint64_t v202 = v117;
          uint64_t v193 = &v117[v123];
          uint64_t v124 = &v118[v123];
          uint64_t v125 = type metadata accessor for AspireHeSerializedGaloisKey(0);
          uint64_t v126 = *(void *)(v125 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v126 + 48))(v124, 1, v125))
          {
            uint64_t v127 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
            memcpy(v193, v124, *(void *)(*(void *)(v127 - 8) + 64));
          }
          else
          {
            *(void *)uint64_t v193 = *(void *)v124;
            uint64_t v138 = *(int *)(v125 + 20);
            uint64_t v187 = &v193[v138];
            uint64_t v139 = &v124[v138];
            swift_bridgeObjectRetain();
            v215(v187, v139, v204);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v126 + 56))(v193, 0, 1, v125);
          }
          uint64_t v9 = v222;
          uint64_t v140 = v202;
          uint64_t v141 = *(int *)(v119 + 24);
          uint64_t v142 = &v202[v141];
          v143 = &v118[v141];
          uint64_t v144 = type metadata accessor for AspireHeSerializedRelinKey(0);
          uint64_t v145 = *(void *)(v144 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v145 + 48))(v143, 1, v144))
          {
            uint64_t v146 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
            memcpy(v142, v143, *(void *)(*(void *)(v146 - 8) + 64));
          }
          else
          {
            v215(v142, v143, v204);
            __dstb = (void *)v144;
            uint64_t v195 = v142;
            uint64_t v153 = *(int *)(v144 + 20);
            uint64_t v154 = &v142[v153];
            uint64_t v155 = &v143[v153];
            uint64_t v156 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
            uint64_t v157 = *(void *)(v156 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v157 + 48))(v155, 1, v156))
            {
              uint64_t v158 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
              memcpy(v154, v155, *(void *)(*(void *)(v158 - 8) + 64));
              uint64_t v9 = v222;
              uint64_t v140 = v202;
              uint64_t v159 = v195;
            }
            else
            {
              v215(v154, v155, v204);
              uint64_t v167 = *(int *)(v156 + 20);
              uint64_t v189 = v154;
              uint64_t v183 = &v154[v167];
              uint64_t v168 = &v155[v167];
              uint64_t v169 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
              uint64_t v170 = *(void *)(v169 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v170 + 48))(v168, 1, v169))
              {
                uint64_t v171 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                memcpy(v183, v168, *(void *)(*(void *)(v171 - 8) + 64));
              }
              else
              {
                *(void *)uint64_t v183 = *(void *)v168;
                uint64_t v175 = *(int *)(v169 + 20);
                uint64_t v181 = &v183[v175];
                uint64_t v185 = &v168[v175];
                swift_bridgeObjectRetain();
                v215(v181, v185, v204);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v170 + 56))(v183, 0, 1, v169);
              }
              uint64_t v140 = v202;
              uint64_t v159 = v195;
              (*(void (**)(char *, void, uint64_t, uint64_t))(v157 + 56))(v189, 0, 1, v156);
              uint64_t v9 = v222;
            }
            (*(void (**)(char *, void, uint64_t, void *))(v145 + 56))(v159, 0, 1, __dstb);
          }
          uint64_t v122 = v207;
          (*(void (**)(char *, void, uint64_t, uint64_t))(v198 + 56))(v140, 0, 1, v119);
          uint64_t v90 = v217;
          uint64_t v89 = v218;
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v122 + 56))(v214, 0, 1, v211);
        goto LABEL_61;
      }
      uint64_t v105 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKey?);
      memcpy(v101, v102, *(void *)(*(void *)(v105 - 8) + 64));
    }
    else
    {
      *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
      uint64_t v31 = v9;
      uint64_t v32 = v10[1];
      unint64_t v33 = v10[2];
      outlined copy of Data._Representation(v32, v33);
      v31[1] = v32;
      v31[2] = v33;
      uint64_t v34 = (int *)type metadata accessor for AMDPbPIRQuery(0);
      uint64_t v35 = v34[6];
      uint64_t v36 = (char *)v31 + v35;
      int v37 = (char *)v10 + v35;
      uint64_t v38 = type metadata accessor for UnknownStorage();
      uint64_t v39 = *(void (**)(char *, char *, uint64_t))(*(void *)(v38 - 8) + 16);
      v39(v36, v37, v38);
      uint64_t v40 = v34[7];
      v220 = v31;
      uint64_t v41 = (void *)((char *)v31 + v40);
      uint64_t v42 = (void *)((char *)v10 + v40);
      uint64_t v43 = type metadata accessor for AspirePirEncryptedIndices(0);
      uint64_t v44 = *(void *)(v43 - 8);
      uint64_t v212 = v38;
      v216 = v39;
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v44 + 48))(v42, 1, v43))
      {
        uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
        memcpy(v41, v42, *(void *)(*(void *)(v45 - 8) + 64));
      }
      else
      {
        uint64_t v61 = v42[1];
        *uint64_t v41 = *v42;
        v41[1] = v61;
        uint64_t v62 = *(int *)(v43 + 24);
        v209 = (char *)v41 + v62;
        uint64_t v63 = (char *)v42 + v62;
        swift_bridgeObjectRetain();
        v39(v209, v63, v38);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v44 + 56))(v41, 0, 1, v43);
      }
      uint64_t v64 = v34[8];
      uint64_t v9 = v220;
      uint64_t v65 = (char *)v220 + v64;
      uint64_t v66 = (char *)v10 + v64;
      uint64_t v67 = type metadata accessor for AMDPbEvaluationKey(0);
      uint64_t v68 = *(void *)(v67 - 8);
      uint64_t v6 = v223;
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v68 + 48))(v66, 1, v67))
      {
        uint64_t v203 = v68;
        v216(v65, v66, v212);
        uint64_t v210 = v67;
        uint64_t v70 = *(int *)(v67 + 20);
        uint64_t v71 = &v65[v70];
        uint64_t v72 = &v66[v70];
        uint64_t v73 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
        uint64_t v74 = *(void *)(v73 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v74 + 48))(v72, 1, v73))
        {
          uint64_t v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
          memcpy(v71, v72, *(void *)(*(void *)(v75 - 8) + 64));
        }
        else
        {
          uint64_t v80 = *((void *)v72 + 1);
          *(void *)uint64_t v71 = *(void *)v72;
          unint64_t v81 = *((void *)v72 + 2);
          outlined copy of Data._Representation(v80, v81);
          *((void *)v71 + 1) = v80;
          *((void *)v71 + 2) = v81;
          uint64_t v3 = v219;
          v216(&v71[*(int *)(v73 + 24)], &v72[*(int *)(v73 + 24)], v212);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v74 + 56))(v71, 0, 1, v73);
        }
        uint64_t v9 = v220;
        uint64_t v6 = v223;
        uint64_t v82 = v210;
        uint64_t v83 = *(int *)(v210 + 24);
        uint64_t v84 = &v65[v83];
        uint64_t v85 = &v66[v83];
        uint64_t v86 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
        uint64_t v87 = *(void *)(v86 - 8);
        uint64_t v206 = v65;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v87 + 48))(v85, 1, v86))
        {
          uint64_t v88 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
          memcpy(v84, v85, *(void *)(*(void *)(v88 - 8) + 64));
          uint64_t v90 = v217;
          uint64_t v89 = v218;
          uint64_t v91 = v203;
        }
        else
        {
          uint64_t v197 = v87;
          v216(v84, v85, v212);
          uint64_t v92 = *(int *)(v86 + 20);
          v200 = v84;
          __dst = &v84[v92];
          int v93 = &v85[v92];
          uint64_t v94 = type metadata accessor for AspireHeSerializedGaloisKey(0);
          uint64_t v95 = *(void *)(v94 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v95 + 48))(v93, 1, v94))
          {
            uint64_t v96 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
            memcpy(__dst, v93, *(void *)(*(void *)(v96 - 8) + 64));
          }
          else
          {
            *(void *)__dst = *(void *)v93;
            uint64_t v128 = *(int *)(v94 + 20);
            v186 = &__dst[v128];
            uint64_t v129 = &v93[v128];
            swift_bridgeObjectRetain();
            v216(v186, v129, v212);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v95 + 56))(__dst, 0, 1, v94);
          }
          uint64_t v9 = v220;
          uint64_t v6 = v223;
          uint64_t v130 = *(int *)(v86 + 24);
          uint64_t v131 = &v84[v130];
          uint64_t v132 = &v85[v130];
          uint64_t v133 = type metadata accessor for AspireHeSerializedRelinKey(0);
          uint64_t v134 = *(void *)(v133 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v134 + 48))(v132, 1, v133))
          {
            uint64_t v135 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
            memcpy(v131, v132, *(void *)(*(void *)(v135 - 8) + 64));
            uint64_t v82 = v210;
            uint64_t v136 = v200;
            uint64_t v91 = v203;
            uint64_t v137 = v197;
          }
          else
          {
            uint64_t v188 = v86;
            v216(v131, v132, v212);
            __dsta = (void *)v133;
            v194 = v131;
            uint64_t v147 = *(int *)(v133 + 20);
            uint64_t v148 = &v131[v147];
            uint64_t v149 = &v132[v147];
            uint64_t v150 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
            uint64_t v151 = *(void *)(v150 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v151 + 48))(v149, 1, v150))
            {
              uint64_t v152 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
              memcpy(v148, v149, *(void *)(*(void *)(v152 - 8) + 64));
              uint64_t v9 = v220;
              uint64_t v6 = v223;
              uint64_t v82 = v210;
              uint64_t v91 = v203;
            }
            else
            {
              uint64_t v182 = v151;
              v216(v148, v149, v212);
              uint64_t v160 = *(int *)(v150 + 20);
              uint64_t v184 = v148;
              uint64_t v161 = &v148[v160];
              uint64_t v162 = &v149[v160];
              uint64_t v163 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
              uint64_t v164 = *(void *)(v163 - 8);
              v165 = v162;
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v164 + 48))(v162, 1, v163))
              {
                uint64_t v166 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                memcpy(v161, v162, *(void *)(*(void *)(v166 - 8) + 64));
              }
              else
              {
                *(void *)uint64_t v161 = *(void *)v162;
                uint64_t v172 = *(int *)(v163 + 20);
                uint64_t v173 = &v161[v172];
                uint64_t v174 = (char *)v165 + v172;
                swift_bridgeObjectRetain();
                v216(v173, v174, v212);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v164 + 56))(v161, 0, 1, v163);
              }
              uint64_t v82 = v210;
              uint64_t v6 = v223;
              uint64_t v3 = v219;
              uint64_t v133 = (uint64_t)__dsta;
              (*(void (**)(char *, void, uint64_t, uint64_t))(v182 + 56))(v184, 0, 1, v150);
              uint64_t v9 = v220;
              uint64_t v91 = v203;
            }
            (*(void (**)(char *, void, uint64_t, uint64_t))(v134 + 56))(v194, 0, 1, v133);
            uint64_t v137 = v197;
            uint64_t v136 = v200;
            uint64_t v86 = v188;
          }
          (*(void (**)(char *, void, uint64_t, uint64_t))(v137 + 56))(v136, 0, 1, v86);
          uint64_t v90 = v217;
          uint64_t v89 = v218;
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v91 + 56))(v206, 0, 1, v82);
        goto LABEL_61;
      }
      uint64_t v69 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKey?);
      memcpy(v65, v66, *(void *)(*(void *)(v69 - 8) + 64));
    }
    uint64_t v90 = v217;
    uint64_t v89 = v218;
LABEL_61:
    swift_storeEnumTagMultiPayload();
    (*(void (**)(void *, void, uint64_t, uint64_t))(v90 + 56))(v9, 0, 1, v89);
    goto LABEL_62;
  }
  uint64_t v15 = *a2;
  *uint64_t v4 = *a2;
  uint64_t v4 = (void *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
  swift_retain();
  return v4;
}

uint64_t destroy for AMDPbHEQuery(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for AMDPbHEQuery.OneOf_Query(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5))
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      swift_bridgeObjectRelease();
      outlined consume of Data._Representation(*(void *)(v4 + 8), *(void *)(v4 + 16));
      uint64_t v10 = (int *)type metadata accessor for AMDPbPECQuery(0);
      uint64_t v11 = v4 + v10[6];
      uint64_t v12 = type metadata accessor for UnknownStorage();
      uint64_t v13 = *(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8);
      v13(v11, v12);
      uint64_t v14 = v4 + v10[7];
      uint64_t v15 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48))(v14, 1, v15))
      {
        swift_bridgeObjectRelease();
        v13(v14 + *(int *)(v15 + 28), v12);
        uint64_t v16 = v14 + *(int *)(v15 + 32);
        uint64_t v17 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 48))(v16, 1, v17))
        {
          uint64_t v18 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
          if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 48))(v16, 1, v18)
            && swift_getEnumCaseMultiPayload() <= 2)
          {
            v13(v16, v12);
          }
          v13(v16 + *(int *)(v17 + 20), v12);
        }
      }
      uint64_t v19 = v4 + v10[8];
      uint64_t v20 = type metadata accessor for AMDPbEvaluationKey(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 48))(v19, 1, v20))
      {
        v13(v19, v12);
        uint64_t v21 = v19 + *(int *)(v20 + 20);
        uint64_t v22 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 48))(v21, 1, v22))
        {
          outlined consume of Data._Representation(*(void *)(v21 + 8), *(void *)(v21 + 16));
          v13(v21 + *(int *)(v22 + 24), v12);
        }
        uint64_t v23 = v19 + *(int *)(v20 + 24);
        uint64_t v24 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 48))(v23, 1, v24))
        {
          v13(v23, v12);
          uint64_t v25 = v23 + *(int *)(v24 + 20);
          uint64_t v26 = type metadata accessor for AspireHeSerializedGaloisKey(0);
          if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 48))(v25, 1, v26))
          {
            swift_bridgeObjectRelease();
            v13(v25 + *(int *)(v26 + 20), v12);
          }
          uint64_t v27 = v23 + *(int *)(v24 + 24);
          uint64_t v28 = type metadata accessor for AspireHeSerializedRelinKey(0);
          if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 48))(v27, 1, v28))
          {
            v13(v27, v12);
            uint64_t v29 = v27 + *(int *)(v28 + 20);
            uint64_t v30 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
            if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 48))(v29, 1, v30))
            {
              v13(v29, v12);
              uint64_t v31 = v29 + *(int *)(v30 + 20);
              uint64_t v32 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
              if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 48))(v31, 1, v32))
              {
                swift_bridgeObjectRelease();
                v13(v31 + *(int *)(v32 + 20), v12);
              }
            }
          }
        }
      }
    }
    else
    {
      outlined consume of Data._Representation(*(void *)(v4 + 8), *(void *)(v4 + 16));
      unint64_t v33 = (int *)type metadata accessor for AMDPbPIRQuery(0);
      uint64_t v34 = v4 + v33[6];
      uint64_t v35 = type metadata accessor for UnknownStorage();
      uint64_t v36 = *(void (**)(uint64_t, uint64_t))(*(void *)(v35 - 8) + 8);
      v36(v34, v35);
      uint64_t v37 = v4 + v33[7];
      uint64_t v38 = type metadata accessor for AspirePirEncryptedIndices(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 48))(v37, 1, v38))
      {
        swift_bridgeObjectRelease();
        v36(v37 + *(int *)(v38 + 24), v35);
      }
      uint64_t v39 = v4 + v33[8];
      uint64_t v40 = type metadata accessor for AMDPbEvaluationKey(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 48))(v39, 1, v40))
      {
        v36(v39, v35);
        uint64_t v41 = v39 + *(int *)(v40 + 20);
        uint64_t v42 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 48))(v41, 1, v42))
        {
          outlined consume of Data._Representation(*(void *)(v41 + 8), *(void *)(v41 + 16));
          v36(v41 + *(int *)(v42 + 24), v35);
        }
        uint64_t v43 = v39 + *(int *)(v40 + 24);
        uint64_t v44 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 48))(v43, 1, v44))
        {
          v36(v43, v35);
          uint64_t v45 = v43 + *(int *)(v44 + 20);
          uint64_t v46 = type metadata accessor for AspireHeSerializedGaloisKey(0);
          if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v46 - 8) + 48))(v45, 1, v46))
          {
            swift_bridgeObjectRelease();
            v36(v45 + *(int *)(v46 + 20), v35);
          }
          uint64_t v47 = v43 + *(int *)(v44 + 24);
          uint64_t v48 = type metadata accessor for AspireHeSerializedRelinKey(0);
          if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v48 - 8) + 48))(v47, 1, v48))
          {
            v36(v47, v35);
            uint64_t v49 = v47 + *(int *)(v48 + 20);
            uint64_t v50 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
            if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v50 - 8) + 48))(v49, 1, v50))
            {
              v36(v49, v35);
              uint64_t v51 = v49 + *(int *)(v50 + 20);
              uint64_t v52 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
              if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v52 - 8) + 48))(v51, 1, v52))
              {
                swift_bridgeObjectRelease();
                v36(v51 + *(int *)(v52 + 20), v35);
              }
            }
          }
        }
      }
    }
  }
  uint64_t v6 = a1 + *(int *)(a2 + 24);
  uint64_t v7 = type metadata accessor for UnknownStorage();
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  return v8(v6, v7);
}

void *initializeWithCopy for AMDPbHEQuery(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a2;
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)((char *)a1 + v7);
  uint64_t v9 = (void *)((char *)a2 + v7);
  uint64_t v10 = type metadata accessor for AMDPbHEQuery.OneOf_Query(0);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain();
  if (v12(v9, 1, v10))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
    memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    uint64_t v214 = v10;
    uint64_t v215 = v3;
    uint64_t v213 = v11;
    v216 = v4;
    uint64_t v217 = v8;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v14 = v9[1];
      *uint64_t v8 = *v9;
      unint64_t v15 = v9[2];
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v14, v15);
      v8[1] = v14;
      v8[2] = v15;
      uint64_t v16 = v8;
      uint64_t v17 = (int *)type metadata accessor for AMDPbPECQuery(0);
      uint64_t v18 = v17[6];
      uint64_t v19 = (char *)v16 + v18;
      uint64_t v20 = (char *)v9 + v18;
      uint64_t v21 = type metadata accessor for UnknownStorage();
      uint64_t v22 = *(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16);
      v22(v19, v20, v21);
      uint64_t v23 = v17[7];
      uint64_t v24 = (void *)((char *)v16 + v23);
      uint64_t v25 = (void *)((char *)v9 + v23);
      uint64_t v26 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
      uint64_t v27 = *(void *)(v26 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
      {
        uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
        memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
      }
      else
      {
        uint64_t v197 = v27;
        uint64_t v201 = v17;
        *uint64_t v24 = *v25;
        v24[1] = v25[1];
        uint64_t v44 = *(int *)(v26 + 28);
        uint64_t v45 = (char *)v24 + v44;
        uint64_t v46 = v21;
        uint64_t v47 = (char *)v25 + v44;
        swift_bridgeObjectRetain();
        v209 = v22;
        uint64_t v211 = v46;
        v22(v45, v47, v46);
        uint64_t v206 = v24;
        uint64_t v48 = *(int *)(v26 + 32);
        uint64_t v49 = (char *)v24 + v48;
        uint64_t v50 = (char *)v25 + v48;
        uint64_t v51 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
        uint64_t v52 = *(void *)(v51 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v50, 1, v51))
        {
          uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
          memcpy(v49, v50, *(void *)(*(void *)(v53 - 8) + 64));
          uint64_t v21 = v211;
          uint64_t v17 = v201;
          uint64_t v54 = v26;
          uint64_t v55 = v24;
          uint64_t v56 = v197;
        }
        else
        {
          uint64_t v76 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
          uint64_t v77 = *(unsigned int (***)(const void *, uint64_t, uint64_t))(v76 - 8);
          if (v77[6](v50, 1, v76))
          {
            uint64_t v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
            memcpy(v49, v50, *(void *)(*(void *)(v78 - 8) + 64));
            uint64_t v79 = v209;
            uint64_t v80 = v211;
          }
          else
          {
            swift_getEnumCaseMultiPayload();
            __dstd = v77;
            uint64_t v80 = v211;
            v209(v49, v50, v211);
            swift_storeEnumTagMultiPayload();
            ((void (*)(char *, void, uint64_t, uint64_t))__dstd[7])(v49, 0, 1, v76);
            uint64_t v79 = v209;
          }
          uint64_t v96 = v49;
          uint64_t v56 = v197;
          uint64_t v17 = v201;
          uint64_t v97 = *(int *)(v51 + 20);
          uint64_t v98 = &v50[v97];
          uint64_t v21 = v80;
          uint64_t v99 = v80;
          uint64_t v22 = v79;
          v79(&v96[v97], v98, v99);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v52 + 56))(v96, 0, 1, v51);
          uint64_t v54 = v26;
          uint64_t v55 = v206;
        }
        (*(void (**)(void *, void, uint64_t, uint64_t))(v56 + 56))(v55, 0, 1, v54);
      }
      uint64_t v100 = v17[8];
      uint64_t v62 = v217;
      uint64_t v101 = (char *)v217 + v100;
      uint64_t v102 = (char *)v9 + v100;
      uint64_t v103 = type metadata accessor for AMDPbEvaluationKey(0);
      uint64_t v104 = *(void *)(v103 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v104 + 48))(v102, 1, v103))
      {
        uint64_t v105 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKey?);
        memcpy(v101, v102, *(void *)(*(void *)(v105 - 8) + 64));
        uint64_t v68 = v214;
        uint64_t v3 = v215;
        uint64_t v69 = v213;
        uint64_t v4 = v216;
      }
      else
      {
        uint64_t v203 = v104;
        v22(v101, v102, v21);
        uint64_t v204 = v103;
        uint64_t v207 = v101;
        uint64_t v106 = *(int *)(v103 + 20);
        uint64_t v107 = &v101[v106];
        uint64_t v108 = &v102[v106];
        uint64_t v109 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
        uint64_t v110 = *(void *)(v109 - 8);
        uint64_t v210 = v22;
        uint64_t v212 = v21;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v110 + 48))(v108, 1, v109))
        {
          uint64_t v111 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
          memcpy(v107, v108, *(void *)(*(void *)(v111 - 8) + 64));
        }
        else
        {
          uint64_t v199 = *((void *)v108 + 1);
          *(void *)uint64_t v107 = *(void *)v108;
          unint64_t v114 = *((void *)v108 + 2);
          outlined copy of Data._Representation(v199, v114);
          *((void *)v107 + 1) = v199;
          *((void *)v107 + 2) = v114;
          v22(&v107[*(int *)(v109 + 24)], &v108[*(int *)(v109 + 24)], v21);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v110 + 56))(v107, 0, 1, v109);
        }
        uint64_t v112 = v204;
        uint64_t v113 = v207;
        uint64_t v4 = v216;
        uint64_t v115 = *(int *)(v204 + 24);
        uint64_t v116 = &v207[v115];
        uint64_t v117 = &v102[v115];
        uint64_t v118 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
        uint64_t v119 = *(void *)(v118 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v119 + 48))(v117, 1, v118))
        {
          uint64_t v120 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
          memcpy(v116, v117, *(void *)(*(void *)(v120 - 8) + 64));
        }
        else
        {
          v22(v116, v117, v212);
          uint64_t v200 = v118;
          uint64_t v121 = *(int *)(v118 + 20);
          v190 = v116;
          __dsta = &v116[v121];
          uint64_t v122 = &v117[v121];
          uint64_t v123 = type metadata accessor for AspireHeSerializedGaloisKey(0);
          uint64_t v124 = *(void *)(v123 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v124 + 48))(v122, 1, v123))
          {
            uint64_t v125 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
            memcpy(__dsta, v122, *(void *)(*(void *)(v125 - 8) + 64));
          }
          else
          {
            *(void *)__dsta = *(void *)v122;
            uint64_t v136 = *(int *)(v123 + 20);
            uint64_t v185 = &__dsta[v136];
            uint64_t v137 = &v122[v136];
            swift_bridgeObjectRetain();
            v210(v185, v137, v212);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v124 + 56))(__dsta, 0, 1, v123);
          }
          uint64_t v113 = v207;
          uint64_t v138 = v190;
          uint64_t v139 = *(int *)(v118 + 24);
          uint64_t v140 = &v190[v139];
          uint64_t v141 = &v117[v139];
          uint64_t v142 = type metadata accessor for AspireHeSerializedRelinKey(0);
          uint64_t v143 = *(void *)(v142 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v143 + 48))(v141, 1, v142))
          {
            uint64_t v144 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
            memcpy(v140, v141, *(void *)(*(void *)(v144 - 8) + 64));
            uint64_t v112 = v204;
          }
          else
          {
            uint64_t v183 = v143;
            v210(v140, v141, v212);
            uint64_t v187 = v142;
            uint64_t v151 = *(int *)(v142 + 20);
            __dstb = v140;
            uint64_t v152 = &v140[v151];
            uint64_t v153 = &v141[v151];
            uint64_t v154 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
            uint64_t v155 = *(void *)(v154 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v155 + 48))(v153, 1, v154))
            {
              uint64_t v156 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
              memcpy(v152, v153, *(void *)(*(void *)(v156 - 8) + 64));
              uint64_t v113 = v207;
              uint64_t v157 = v187;
              uint64_t v158 = v183;
            }
            else
            {
              v210(v152, v153, v212);
              uint64_t v165 = *(int *)(v154 + 20);
              uint64_t v179 = v152;
              uint64_t v181 = &v152[v165];
              uint64_t v166 = &v153[v165];
              uint64_t v167 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
              uint64_t v168 = *(void *)(v167 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v168 + 48))(v166, 1, v167))
              {
                uint64_t v169 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                memcpy(v181, v166, *(void *)(*(void *)(v169 - 8) + 64));
              }
              else
              {
                *(void *)uint64_t v181 = *(void *)v166;
                uint64_t v172 = *(int *)(v167 + 20);
                uint64_t v178 = &v181[v172];
                uint64_t v180 = &v166[v172];
                swift_bridgeObjectRetain();
                v210(v178, v180, v212);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v168 + 56))(v181, 0, 1, v167);
              }
              uint64_t v113 = v207;
              uint64_t v157 = v187;
              uint64_t v158 = v183;
              (*(void (**)(char *, void, uint64_t, uint64_t))(v155 + 56))(v179, 0, 1, v154);
            }
            (*(void (**)(char *, void, uint64_t, uint64_t))(v158 + 56))(__dstb, 0, 1, v157);
            uint64_t v112 = v204;
            uint64_t v138 = v190;
          }
          (*(void (**)(char *, void, uint64_t, uint64_t))(v119 + 56))(v138, 0, 1, v200);
        }
        uint64_t v68 = v214;
        uint64_t v3 = v215;
        uint64_t v69 = v213;
        (*(void (**)(char *, void, uint64_t, uint64_t))(v203 + 56))(v113, 0, 1, v112);
      }
    }
    else
    {
      *(_DWORD *)uint64_t v8 = *(_DWORD *)v9;
      uint64_t v29 = v9[1];
      unint64_t v30 = v9[2];
      outlined copy of Data._Representation(v29, v30);
      v8[1] = v29;
      v8[2] = v30;
      uint64_t v31 = (int *)type metadata accessor for AMDPbPIRQuery(0);
      uint64_t v32 = v31[6];
      unint64_t v33 = (char *)v8 + v32;
      uint64_t v34 = (char *)v9 + v32;
      uint64_t v35 = v8;
      uint64_t v36 = type metadata accessor for UnknownStorage();
      uint64_t v37 = *(void (**)(char *, char *, uint64_t))(*(void *)(v36 - 8) + 16);
      v37(v33, v34, v36);
      uint64_t v38 = v31[7];
      uint64_t v39 = (void *)((char *)v35 + v38);
      uint64_t v40 = (void *)((char *)v9 + v38);
      uint64_t v41 = type metadata accessor for AspirePirEncryptedIndices(0);
      uint64_t v42 = *(void *)(v41 - 8);
      uint64_t v205 = v37;
      uint64_t v208 = v36;
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41))
      {
        uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
        memcpy(v39, v40, *(void *)(*(void *)(v43 - 8) + 64));
      }
      else
      {
        uint64_t v57 = v40[1];
        *uint64_t v39 = *v40;
        v39[1] = v57;
        uint64_t v58 = *(int *)(v41 + 24);
        uint64_t v59 = (char *)v39 + v58;
        uint64_t v60 = (char *)v40 + v58;
        swift_bridgeObjectRetain();
        v37(v59, v60, v36);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
      }
      uint64_t v61 = v31[8];
      uint64_t v62 = v217;
      uint64_t v63 = (char *)v217 + v61;
      uint64_t v64 = (char *)v9 + v61;
      uint64_t v65 = type metadata accessor for AMDPbEvaluationKey(0);
      uint64_t v66 = *(void *)(v65 - 8);
      uint64_t v4 = v216;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v64, 1, v65))
      {
        uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKey?);
        memcpy(v63, v64, *(void *)(*(void *)(v67 - 8) + 64));
        uint64_t v68 = v214;
        uint64_t v3 = v215;
        uint64_t v69 = v213;
      }
      else
      {
        uint64_t v196 = v66;
        v205(v63, v64, v208);
        uint64_t v202 = v65;
        uint64_t v70 = *(int *)(v65 + 20);
        uint64_t v71 = &v63[v70];
        uint64_t v72 = &v64[v70];
        uint64_t v73 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
        uint64_t v74 = *(void *)(v73 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v74 + 48))(v72, 1, v73))
        {
          uint64_t v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
          memcpy(v71, v72, *(void *)(*(void *)(v75 - 8) + 64));
        }
        else
        {
          uint64_t v81 = *((void *)v72 + 1);
          __dstc = (void *)v81;
          *(void *)uint64_t v71 = *(void *)v72;
          unint64_t v82 = *((void *)v72 + 2);
          outlined copy of Data._Representation(v81, v82);
          *((void *)v71 + 1) = __dstc;
          *((void *)v71 + 2) = v82;
          v205(&v71[*(int *)(v73 + 24)], &v72[*(int *)(v73 + 24)], v208);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v74 + 56))(v71, 0, 1, v73);
        }
        uint64_t v83 = v202;
        uint64_t v4 = v216;
        uint64_t v62 = v217;
        uint64_t v84 = *(int *)(v202 + 24);
        uint64_t v85 = &v63[v84];
        uint64_t v86 = &v64[v84];
        uint64_t v87 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
        __dst = *(void (***)(void *, void, uint64_t, uint64_t))(v87 - 8);
        uint64_t v198 = v63;
        if (((unsigned int (*)(char *, uint64_t, uint64_t))__dst[6])(v86, 1, v87))
        {
          uint64_t v88 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
          memcpy(v85, v86, *(void *)(*(void *)(v88 - 8) + 64));
          uint64_t v68 = v214;
          uint64_t v3 = v215;
          uint64_t v69 = v213;
          uint64_t v89 = v196;
        }
        else
        {
          v205(v85, v86, v208);
          uint64_t v90 = *(int *)(v87 + 20);
          uint64_t v91 = &v85[v90];
          uint64_t v92 = &v86[v90];
          uint64_t v93 = type metadata accessor for AspireHeSerializedGaloisKey(0);
          uint64_t v94 = *(void *)(v93 - 8);
          uint64_t v189 = v85;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v94 + 48))(v92, 1, v93))
          {
            uint64_t v95 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
            memcpy(v91, v92, *(void *)(*(void *)(v95 - 8) + 64));
          }
          else
          {
            *(void *)uint64_t v91 = *(void *)v92;
            uint64_t v126 = *(int *)(v93 + 20);
            uint64_t v127 = &v91[v126];
            uint64_t v128 = &v92[v126];
            swift_bridgeObjectRetain();
            uint64_t v129 = v127;
            uint64_t v85 = v189;
            v205(v129, v128, v208);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v94 + 56))(v91, 0, 1, v93);
          }
          uint64_t v4 = v216;
          uint64_t v62 = v217;
          uint64_t v130 = *(int *)(v87 + 24);
          uint64_t v131 = &v85[v130];
          uint64_t v132 = &v86[v130];
          uint64_t v133 = type metadata accessor for AspireHeSerializedRelinKey(0);
          uint64_t v134 = *(void *)(v133 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v134 + 48))(v132, 1, v133))
          {
            uint64_t v135 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
            memcpy(v131, v132, *(void *)(*(void *)(v135 - 8) + 64));
            uint64_t v83 = v202;
            uint64_t v89 = v196;
          }
          else
          {
            v205(v131, v132, v208);
            uint64_t v186 = v133;
            uint64_t v188 = v131;
            uint64_t v145 = *(int *)(v133 + 20);
            uint64_t v146 = &v131[v145];
            uint64_t v147 = &v132[v145];
            uint64_t v148 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
            uint64_t v149 = *(void *)(v148 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v149 + 48))(v147, 1, v148))
            {
              uint64_t v150 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
              memcpy(v146, v147, *(void *)(*(void *)(v150 - 8) + 64));
              uint64_t v83 = v202;
              uint64_t v89 = v196;
              uint64_t v4 = v216;
              uint64_t v62 = v217;
            }
            else
            {
              v205(v146, v147, v208);
              uint64_t v159 = *(int *)(v148 + 20);
              uint64_t v184 = v146;
              uint64_t v160 = &v146[v159];
              uint64_t v161 = &v147[v159];
              uint64_t v162 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
              uint64_t v163 = *(void *)(v162 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v163 + 48))(v161, 1, v162))
              {
                uint64_t v164 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                memcpy(v160, v161, *(void *)(*(void *)(v164 - 8) + 64));
              }
              else
              {
                *(void *)uint64_t v160 = *(void *)v161;
                uint64_t v170 = *(int *)(v162 + 20);
                uint64_t v182 = &v160[v170];
                uint64_t v171 = &v161[v170];
                swift_bridgeObjectRetain();
                v205(v182, v171, v208);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v163 + 56))(v160, 0, 1, v162);
              }
              uint64_t v83 = v202;
              uint64_t v4 = v216;
              uint64_t v62 = v217;
              (*(void (**)(char *, void, uint64_t, uint64_t))(v149 + 56))(v184, 0, 1, v148);
              uint64_t v89 = v196;
            }
            (*(void (**)(char *, void, uint64_t, uint64_t))(v134 + 56))(v188, 0, 1, v186);
          }
          __dst[7](v189, 0, 1, v87);
          uint64_t v68 = v214;
          uint64_t v3 = v215;
          uint64_t v69 = v213;
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v89 + 56))(v198, 0, 1, v83);
      }
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(void *, void, uint64_t, uint64_t))(v69 + 56))(v62, 0, 1, v68);
  }
  uint64_t v173 = *(int *)(v3 + 24);
  uint64_t v174 = (char *)a1 + v173;
  uint64_t v175 = (char *)v4 + v173;
  uint64_t v176 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v176 - 8) + 16))(v174, v175, v176);
  return a1;
}

void *assignWithCopy for AMDPbHEQuery(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2;
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  v393 = a1;
  uint64_t v7 = (void *)((char *)a1 + v6);
  uint64_t v8 = (void *)((char *)v4 + v6);
  uint64_t v9 = type metadata accessor for AMDPbHEQuery.OneOf_Query(0);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  v394 = v7;
  LODWORD(v7) = v11(v7, 1, v9);
  int v12 = v11(v8, 1, v9);
  if (v7)
  {
    if (v12)
    {
      size_t v13 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?)
                                  - 8)
                      + 64);
      uint64_t v14 = v394;
LABEL_6:
      memcpy(v14, v8, v13);
      goto LABEL_107;
    }
    uint64_t v381 = v10;
    uint64_t v392 = v9;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v377 = v4;
      void *v394 = *v8;
      uint64_t v15 = v8[1];
      unint64_t v16 = v8[2];
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v15, v16);
      v394[1] = v15;
      v394[2] = v16;
      uint64_t v17 = (int *)type metadata accessor for AMDPbPECQuery(0);
      uint64_t v18 = v17[6];
      uint64_t v19 = (char *)v394 + v18;
      uint64_t v20 = (char *)v8 + v18;
      uint64_t v21 = type metadata accessor for UnknownStorage();
      uint64_t v22 = *(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16);
      v22(v19, v20, v21);
      uint64_t v23 = v17[7];
      uint64_t v24 = (_DWORD *)((char *)v394 + v23);
      uint64_t v25 = (_DWORD *)((char *)v8 + v23);
      uint64_t v26 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
      uint64_t v27 = *(void *)(v26 - 8);
      __dst = (void (*)(char *, char *, void *))v22;
      if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
      {
        uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
        memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
      }
      else
      {
        uint64_t v362 = v27;
        uint64_t v386 = a3;
        *uint64_t v24 = *v25;
        v24[1] = v25[1];
        *((void *)v24 + 1) = *((void *)v25 + 1);
        uint64_t v58 = *(int *)(v26 + 28);
        uint64_t v59 = (char *)v24 + v58;
        uint64_t v60 = (char *)v25 + v58;
        swift_bridgeObjectRetain();
        __src = (void *)v21;
        v22(v59, v60, v21);
        uint64_t v61 = *(int *)(v26 + 32);
        uint64_t v62 = (char *)v24 + v61;
        uint64_t v63 = (char *)v25 + v61;
        uint64_t v64 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
        uint64_t v65 = *(void *)(v64 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v65 + 48))(v63, 1, v64))
        {
          uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
          memcpy(v62, v63, *(void *)(*(void *)(v66 - 8) + 64));
        }
        else
        {
          uint64_t v110 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
          uint64_t v357 = *(void *)(v110 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v357 + 48))(v63, 1, v110))
          {
            uint64_t v111 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
            memcpy(v62, v63, *(void *)(*(void *)(v111 - 8) + 64));
          }
          else
          {
            swift_getEnumCaseMultiPayload();
            __dst(v62, v63, __src);
            swift_storeEnumTagMultiPayload();
            (*(void (**)(char *, void, uint64_t, uint64_t))(v357 + 56))(v62, 0, 1, v110);
          }
          __dst(&v62[*(int *)(v64 + 20)], &v63[*(int *)(v64 + 20)], __src);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v65 + 56))(v62, 0, 1, v64);
        }
        (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v362 + 56))(v24, 0, 1, v26);
        uint64_t v21 = (uint64_t)__src;
        a3 = v386;
      }
      uint64_t v149 = v17[8];
      uint64_t v150 = (char *)v394 + v149;
      uint64_t v151 = (char *)v8 + v149;
      uint64_t v152 = type metadata accessor for AMDPbEvaluationKey(0);
      uint64_t v153 = *(void *)(v152 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v153 + 48))(v151, 1, v152))
      {
        uint64_t v358 = v153;
        __dst(v150, v151, (void *)v21);
        uint64_t v365 = v152;
        uint64_t v155 = *(int *)(v152 + 20);
        uint64_t v156 = &v150[v155];
        uint64_t v157 = &v151[v155];
        uint64_t v158 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
        uint64_t v159 = *(void *)(v158 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v159 + 48))(v157, 1, v158))
        {
          uint64_t v160 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
          memcpy(v156, v157, *(void *)(*(void *)(v160 - 8) + 64));
        }
        else
        {
          *(void *)uint64_t v156 = *(void *)v157;
          uint64_t v389 = a3;
          uint64_t v161 = v21;
          uint64_t v162 = *((void *)v157 + 1);
          unint64_t v163 = *((void *)v157 + 2);
          outlined copy of Data._Representation(v162, v163);
          *((void *)v156 + 1) = v162;
          *((void *)v156 + 2) = v163;
          uint64_t v21 = v161;
          a3 = v389;
          __dst(&v156[*(int *)(v158 + 24)], &v157[*(int *)(v158 + 24)], (void *)v21);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v159 + 56))(v156, 0, 1, v158);
        }
        uint64_t v164 = v365;
        uint64_t v165 = *(int *)(v365 + 24);
        uint64_t v166 = &v150[v165];
        uint64_t v167 = &v151[v165];
        uint64_t v168 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
        uint64_t v169 = *(void *)(v168 - 8);
        uint64_t v4 = v377;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v169 + 48))(v167, 1, v168))
        {
          uint64_t v170 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
          memcpy(v166, v167, *(void *)(*(void *)(v170 - 8) + 64));
          uint64_t v171 = v358;
        }
        else
        {
          uint64_t v342 = v169;
          __dst(v166, v167, (void *)v21);
          uint64_t v172 = *(int *)(v168 + 20);
          v346 = v166;
          uint64_t v173 = &v166[v172];
          uint64_t v174 = &v167[v172];
          uint64_t v175 = type metadata accessor for AspireHeSerializedGaloisKey(0);
          uint64_t v176 = *(void *)(v175 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v176 + 48))(v174, 1, v175))
          {
            uint64_t v177 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
            memcpy(v173, v174, *(void *)(*(void *)(v177 - 8) + 64));
          }
          else
          {
            *(void *)uint64_t v173 = *(void *)v174;
            uint64_t v196 = *(int *)(v175 + 20);
            uint64_t v390 = a3;
            uint64_t v197 = v21;
            uint64_t v198 = &v173[v196];
            uint64_t v199 = &v174[v196];
            swift_bridgeObjectRetain();
            uint64_t v200 = v198;
            uint64_t v21 = v197;
            a3 = v390;
            __dst(v200, v199, (void *)v21);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v176 + 56))(v173, 0, 1, v175);
          }
          uint64_t v201 = *(int *)(v168 + 24);
          uint64_t v202 = &v346[v201];
          uint64_t v203 = &v167[v201];
          uint64_t v204 = type metadata accessor for AspireHeSerializedRelinKey(0);
          uint64_t v205 = *(void *)(v204 - 8);
          uint64_t v164 = v365;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v205 + 48))(v203, 1, v204))
          {
            uint64_t v206 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
            memcpy(v202, v203, *(void *)(*(void *)(v206 - 8) + 64));
            uint64_t v171 = v358;
          }
          else
          {
            __dst(v202, v203, (void *)v21);
            uint64_t v338 = v204;
            uint64_t v220 = *(int *)(v204 + 20);
            v391 = v202;
            v221 = &v202[v220];
            v222 = &v203[v220];
            uint64_t v223 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
            __srcb = (void *)v21;
            uint64_t v224 = *(void *)(v223 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v224 + 48))(v222, 1, v223))
            {
              uint64_t v225 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
              memcpy(v221, v222, *(void *)(*(void *)(v225 - 8) + 64));
              uint64_t v171 = v358;
              v226 = v391;
            }
            else
            {
              __dst(v221, v222, __srcb);
              uint64_t v269 = *(int *)(v223 + 20);
              v330 = &v221[v269];
              v333 = v221;
              v270 = &v222[v269];
              uint64_t v271 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
              uint64_t v272 = *(void *)(v271 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v272 + 48))(v270, 1, v271))
              {
                uint64_t v273 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                memcpy(v330, v270, *(void *)(*(void *)(v273 - 8) + 64));
              }
              else
              {
                *(void *)v330 = *(void *)v270;
                uint64_t v303 = *(int *)(v271 + 20);
                v327 = &v330[v303];
                v304 = &v270[v303];
                swift_bridgeObjectRetain();
                __dst(v327, v304, __srcb);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v272 + 56))(v330, 0, 1, v271);
              }
              uint64_t v164 = v365;
              v226 = v391;
              (*(void (**)(char *, void, uint64_t, uint64_t))(v224 + 56))(v333, 0, 1, v223);
              uint64_t v171 = v358;
            }
            (*(void (**)(char *, void, uint64_t, uint64_t))(v205 + 56))(v226, 0, 1, v338);
          }
          (*(void (**)(char *, void, uint64_t, uint64_t))(v342 + 56))(v346, 0, 1, v168);
          uint64_t v4 = v377;
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v171 + 56))(v150, 0, 1, v164);
        goto LABEL_105;
      }
      uint64_t v154 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKey?);
      memcpy(v150, v151, *(void *)(*(void *)(v154 - 8) + 64));
    }
    else
    {
      uint64_t v385 = a3;
      *(_DWORD *)v394 = *(_DWORD *)v8;
      uint64_t v43 = v8[1];
      unint64_t v44 = v8[2];
      outlined copy of Data._Representation(v43, v44);
      v394[1] = v43;
      v394[2] = v44;
      uint64_t v45 = type metadata accessor for AMDPbPIRQuery(0);
      uint64_t v46 = *(int *)(v45 + 24);
      uint64_t v47 = (char *)v394 + v46;
      uint64_t v48 = (char *)v8 + v46;
      uint64_t v49 = type metadata accessor for UnknownStorage();
      uint64_t v50 = *(void (**)(char *, char *, uint64_t))(*(void *)(v49 - 8) + 16);
      v50(v47, v48, v49);
      __dstb = (int *)v45;
      uint64_t v51 = *(int *)(v45 + 28);
      uint64_t v52 = (void *)((char *)v394 + v51);
      uint64_t v53 = (void *)((char *)v8 + v51);
      uint64_t v54 = type metadata accessor for AspirePirEncryptedIndices(0);
      uint64_t v55 = *(void *)(v54 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v55 + 48))(v53, 1, v54))
      {
        uint64_t v56 = v50;
        uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
        memcpy(v52, v53, *(void *)(*(void *)(v57 - 8) + 64));
      }
      else
      {
        *uint64_t v52 = *v53;
        v52[1] = v53[1];
        uint64_t v82 = *(int *)(v54 + 24);
        uint64_t v83 = v4;
        uint64_t v84 = (char *)v52 + v82;
        uint64_t v85 = (char *)v53 + v82;
        swift_bridgeObjectRetain();
        uint64_t v86 = v84;
        uint64_t v4 = v83;
        uint64_t v56 = v50;
        v50(v86, v85, v49);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v55 + 56))(v52, 0, 1, v54);
      }
      uint64_t v87 = __dstb[8];
      __dstd = (char *)v394 + v87;
      uint64_t v88 = (char *)v8 + v87;
      uint64_t v89 = type metadata accessor for AMDPbEvaluationKey(0);
      uint64_t v90 = *(void *)(v89 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v90 + 48))(v88, 1, v89))
      {
        uint64_t v91 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKey?);
        memcpy(__dstd, v88, *(void *)(*(void *)(v91 - 8) + 64));
        a3 = v385;
        uint64_t v92 = v392;
LABEL_106:
        swift_storeEnumTagMultiPayload();
        (*(void (**)(void *, void, uint64_t, uint64_t))(v381 + 56))(v394, 0, 1, v92);
        goto LABEL_107;
      }
      uint64_t v363 = v90;
      v377 = v4;
      uint64_t v93 = v56;
      v56(__dstd, v88, v49);
      uint64_t v94 = *(int *)(v89 + 20);
      uint64_t v95 = &__dstd[v94];
      uint64_t v96 = &v88[v94];
      uint64_t v97 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
      uint64_t v98 = *(void *)(v97 - 8);
      v356 = v56;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v98 + 48))(v96, 1, v97))
      {
        uint64_t v99 = v49;
        uint64_t v100 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
        memcpy(v95, v96, *(void *)(*(void *)(v100 - 8) + 64));
      }
      else
      {
        *(void *)uint64_t v95 = *(void *)v96;
        uint64_t v122 = v89;
        uint64_t v124 = *((void *)v96 + 1);
        unint64_t v123 = *((void *)v96 + 2);
        outlined copy of Data._Representation(v124, v123);
        *((void *)v95 + 1) = v124;
        *((void *)v95 + 2) = v123;
        uint64_t v89 = v122;
        uint64_t v99 = v49;
        v93(&v95[*(int *)(v97 + 24)], &v96[*(int *)(v97 + 24)], v49);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v98 + 56))(v95, 0, 1, v97);
      }
      uint64_t v125 = *(int *)(v89 + 24);
      uint64_t v126 = &__dstd[v125];
      uint64_t v127 = &v88[v125];
      uint64_t v128 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
      uint64_t v129 = *(void *)(v128 - 8);
      a3 = v385;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v129 + 48))(v127, 1, v128))
      {
        uint64_t v130 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
        memcpy(v126, v127, *(void *)(*(void *)(v130 - 8) + 64));
        uint64_t v131 = v363;
      }
      else
      {
        uint64_t v345 = v129;
        uint64_t v138 = v99;
        v356(v126, v127, v99);
        uint64_t v139 = *(int *)(v128 + 20);
        v353 = v126;
        uint64_t v140 = &v126[v139];
        uint64_t v141 = &v127[v139];
        uint64_t v142 = type metadata accessor for AspireHeSerializedGaloisKey(0);
        uint64_t v143 = *(void *)(v142 - 8);
        uint64_t v341 = v138;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v143 + 48))(v141, 1, v142))
        {
          uint64_t v144 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
          memcpy(v140, v141, *(void *)(*(void *)(v144 - 8) + 64));
        }
        else
        {
          *(void *)uint64_t v140 = *(void *)v141;
          uint64_t v187 = *(int *)(v142 + 20);
          v336 = &v140[v187];
          uint64_t v188 = &v141[v187];
          swift_bridgeObjectRetain();
          v356(v336, v188, v138);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v143 + 56))(v140, 0, 1, v142);
        }
        uint64_t v189 = *(int *)(v128 + 24);
        v190 = v353;
        uint64_t v191 = &v353[v189];
        uint64_t v192 = &v127[v189];
        uint64_t v193 = type metadata accessor for AspireHeSerializedRelinKey(0);
        uint64_t v194 = *(void *)(v193 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v194 + 48))(v192, 1, v193))
        {
          uint64_t v195 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
          memcpy(v191, v192, *(void *)(*(void *)(v195 - 8) + 64));
          uint64_t v131 = v363;
        }
        else
        {
          v356(v191, v192, v341);
          uint64_t v332 = v193;
          v337 = v191;
          uint64_t v213 = *(int *)(v193 + 20);
          uint64_t v214 = &v191[v213];
          uint64_t v215 = &v192[v213];
          uint64_t v216 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
          uint64_t v217 = *(void *)(v216 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v217 + 48))(v215, 1, v216))
          {
            uint64_t v218 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
            memcpy(v214, v215, *(void *)(*(void *)(v218 - 8) + 64));
            uint64_t v131 = v363;
            uint64_t v219 = v332;
          }
          else
          {
            v356(v214, v215, v341);
            uint64_t v265 = *(int *)(v216 + 20);
            v326 = &v214[v265];
            v329 = v214;
            v266 = &v215[v265];
            uint64_t v267 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
            uint64_t v324 = *(void *)(v267 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v324 + 48))(v266, 1, v267))
            {
              uint64_t v268 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
              memcpy(v326, v266, *(void *)(*(void *)(v268 - 8) + 64));
            }
            else
            {
              *(void *)v326 = *(void *)v266;
              uint64_t v302 = *(int *)(v267 + 20);
              v323 = &v326[v302];
              v325 = &v266[v302];
              swift_bridgeObjectRetain();
              v356(v323, v325, v341);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v324 + 56))(v326, 0, 1, v267);
            }
            uint64_t v131 = v363;
            uint64_t v219 = v332;
            (*(void (**)(char *, void, uint64_t, uint64_t))(v217 + 56))(v329, 0, 1, v216);
          }
          (*(void (**)(char *, void, uint64_t, uint64_t))(v194 + 56))(v337, 0, 1, v219);
          v190 = v353;
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v345 + 56))(v190, 0, 1, v128);
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v131 + 56))(__dstd, 0, 1, v89);
    }
    uint64_t v4 = v377;
LABEL_105:
    uint64_t v92 = v392;
    goto LABEL_106;
  }
  if (v12)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v394, type metadata accessor for AMDPbHEQuery.OneOf_Query);
    size_t v13 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?)
                                - 8)
                    + 64);
    uint64_t v14 = v394;
    goto LABEL_6;
  }
  if (a1 != v4)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v394, type metadata accessor for AMDPbHEQuery.OneOf_Query);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v384 = a3;
      void *v394 = *v8;
      uint64_t v29 = v8[1];
      unint64_t v30 = v8[2];
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v29, v30);
      v394[1] = v29;
      v394[2] = v30;
      uint64_t v31 = (int *)type metadata accessor for AMDPbPECQuery(0);
      uint64_t v32 = v31[6];
      unint64_t v33 = (char *)v394 + v32;
      uint64_t v34 = (char *)v8 + v32;
      uint64_t v35 = type metadata accessor for UnknownStorage();
      uint64_t v36 = *(void (**)(char *, char *))(*(void *)(v35 - 8) + 16);
      uint64_t v382 = v35;
      v36(v33, v34);
      uint64_t v37 = v31[7];
      uint64_t v38 = (_DWORD *)((char *)v394 + v37);
      uint64_t v39 = (_DWORD *)((char *)v8 + v37);
      uint64_t v40 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
      uint64_t v41 = *(void *)(v40 - 8);
      __dsta = (void (*)(char *, char *, uint64_t))v36;
      if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
      {
        uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
        memcpy(v38, v39, *(void *)(*(void *)(v42 - 8) + 64));
      }
      else
      {
        v378 = v4;
        _DWORD *v38 = *v39;
        v38[1] = v39[1];
        *((void *)v38 + 1) = *((void *)v39 + 1);
        uint64_t v101 = *(int *)(v40 + 28);
        uint64_t v102 = (char *)v38 + v101;
        uint64_t v103 = (char *)v39 + v101;
        swift_bridgeObjectRetain();
        ((void (*)(char *, char *, uint64_t))v36)(v102, v103, v382);
        uint64_t v104 = *(int *)(v40 + 32);
        uint64_t v105 = (char *)v38 + v104;
        uint64_t v106 = (char *)v39 + v104;
        uint64_t v107 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
        uint64_t v108 = *(void *)(v107 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v108 + 48))(v106, 1, v107))
        {
          uint64_t v109 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
          memcpy(v105, v106, *(void *)(*(void *)(v109 - 8) + 64));
        }
        else
        {
          uint64_t v145 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
          uint64_t v146 = *(void *)(v145 - 8);
          __srca = v106;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v146 + 48))(v106, 1, v145))
          {
            uint64_t v147 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
            uint64_t v148 = v105;
            memcpy(v105, __srca, *(void *)(*(void *)(v147 - 8) + 64));
          }
          else
          {
            swift_getEnumCaseMultiPayload();
            __dsta(v105, v106, v382);
            swift_storeEnumTagMultiPayload();
            uint64_t v148 = v105;
            (*(void (**)(void))(v146 + 56))();
          }
          __dsta(&v105[*(int *)(v107 + 20)], &__srca[*(int *)(v107 + 20)], v382);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v108 + 56))(v148, 0, 1, v107);
        }
        (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
        uint64_t v4 = v378;
      }
      uint64_t v227 = v31[8];
      v228 = (char *)v394 + v227;
      v229 = (char *)v8 + v227;
      uint64_t v230 = type metadata accessor for AMDPbEvaluationKey(0);
      uint64_t v231 = *(void *)(v230 - 8);
      a3 = v384;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v231 + 48))(v229, 1, v230))
      {
        uint64_t v232 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKey?);
        memcpy(v228, v229, *(void *)(*(void *)(v232 - 8) + 64));
      }
      else
      {
        uint64_t v366 = v231;
        v233 = __dsta;
        __dsta(v228, v229, v382);
        __srcc = (int *)v230;
        uint64_t v234 = *(int *)(v230 + 20);
        v235 = &v228[v234];
        v236 = &v229[v234];
        uint64_t v237 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
        uint64_t v238 = *(void *)(v237 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v238 + 48))(v236, 1, v237))
        {
          uint64_t v239 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
          memcpy(v235, v236, *(void *)(*(void *)(v239 - 8) + 64));
        }
        else
        {
          *(void *)v235 = *(void *)v236;
          v240 = v4;
          uint64_t v242 = *((void *)v236 + 1);
          unint64_t v241 = *((void *)v236 + 2);
          outlined copy of Data._Representation(v242, v241);
          *((void *)v235 + 1) = v242;
          *((void *)v235 + 2) = v241;
          uint64_t v4 = v240;
          v233 = __dsta;
          __dsta(&v235[*(int *)(v237 + 24)], &v236[*(int *)(v237 + 24)], v382);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v238 + 56))(v235, 0, 1, v237);
        }
        v243 = __srcc;
        uint64_t v244 = __srcc[6];
        v245 = &v228[v244];
        v246 = &v229[v244];
        uint64_t v247 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
        uint64_t v248 = *(void *)(v247 - 8);
        a3 = v384;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v248 + 48))(v246, 1, v247))
        {
          uint64_t v249 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
          memcpy(v245, v246, *(void *)(*(void *)(v249 - 8) + 64));
          uint64_t v250 = v366;
        }
        else
        {
          uint64_t v355 = v248;
          v233(v245, v246, v382);
          uint64_t v251 = *(int *)(v247 + 20);
          v351 = &v245[v251];
          v252 = &v246[v251];
          uint64_t v253 = type metadata accessor for AspireHeSerializedGaloisKey(0);
          uint64_t v254 = *(void *)(v253 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v254 + 48))(v252, 1, v253))
          {
            uint64_t v255 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
            memcpy(v351, v252, *(void *)(*(void *)(v255 - 8) + 64));
          }
          else
          {
            *(void *)v351 = *(void *)v252;
            uint64_t v274 = *(int *)(v253 + 20);
            v275 = &v351[v274];
            v276 = v4;
            v277 = &v252[v274];
            swift_bridgeObjectRetain();
            v278 = v275;
            v233 = __dsta;
            v279 = v277;
            uint64_t v4 = v276;
            __dsta(v278, v279, v382);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v254 + 56))(v351, 0, 1, v253);
          }
          uint64_t v280 = *(int *)(v247 + 24);
          v361 = v245;
          v281 = &v245[v280];
          v282 = &v246[v280];
          uint64_t v283 = type metadata accessor for AspireHeSerializedRelinKey(0);
          uint64_t v284 = *(void *)(v283 - 8);
          uint64_t v285 = v355;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v284 + 48))(v282, 1, v283))
          {
            uint64_t v286 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
            memcpy(v281, v282, *(void *)(*(void *)(v286 - 8) + 64));
            uint64_t v250 = v366;
            v243 = __srcc;
            v287 = v361;
          }
          else
          {
            uint64_t v343 = v284;
            v380 = v4;
            v233(v281, v282, v382);
            uint64_t v349 = v283;
            v352 = v281;
            uint64_t v294 = *(int *)(v283 + 20);
            v295 = &v281[v294];
            v296 = &v282[v294];
            uint64_t v297 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
            uint64_t v298 = *(void *)(v297 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v298 + 48))(v296, 1, v297))
            {
              uint64_t v299 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
              memcpy(v295, v296, *(void *)(*(void *)(v299 - 8) + 64));
              uint64_t v4 = v380;
              v287 = v361;
              uint64_t v250 = v366;
              uint64_t v300 = v349;
              uint64_t v301 = v343;
            }
            else
            {
              v233(v295, v296, v382);
              uint64_t v314 = *(int *)(v297 + 20);
              v339 = v295;
              v315 = &v295[v314];
              v316 = &v296[v314];
              uint64_t v317 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
              uint64_t v318 = *(void *)(v317 - 8);
              v287 = v361;
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v318 + 48))(v316, 1, v317))
              {
                uint64_t v319 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                memcpy(v315, v316, *(void *)(*(void *)(v319 - 8) + 64));
              }
              else
              {
                *(void *)v315 = *(void *)v316;
                uint64_t v321 = *(int *)(v317 + 20);
                v335 = &v315[v321];
                v322 = &v316[v321];
                swift_bridgeObjectRetain();
                __dsta(v335, v322, v382);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v318 + 56))(v315, 0, 1, v317);
              }
              uint64_t v250 = v366;
              v281 = v352;
              uint64_t v285 = v355;
              uint64_t v301 = v343;
              (*(void (**)(char *, void, uint64_t, uint64_t))(v298 + 56))(v339, 0, 1, v297);
              uint64_t v4 = v380;
              uint64_t v300 = v349;
            }
            (*(void (**)(char *, void, uint64_t, uint64_t))(v301 + 56))(v281, 0, 1, v300);
            v243 = __srcc;
          }
          (*(void (**)(char *, void, uint64_t, uint64_t))(v285 + 56))(v287, 0, 1, v247);
          a3 = v384;
        }
        (*(void (**)(char *, void, uint64_t, int *))(v250 + 56))(v228, 0, 1, v243);
      }
    }
    else
    {
      *(_DWORD *)v394 = *(_DWORD *)v8;
      uint64_t v67 = v8[1];
      unint64_t v68 = v8[2];
      outlined copy of Data._Representation(v67, v68);
      v394[1] = v67;
      v394[2] = v68;
      uint64_t v69 = type metadata accessor for AMDPbPIRQuery(0);
      uint64_t v70 = *(int *)(v69 + 24);
      uint64_t v71 = (char *)v394 + v70;
      uint64_t v72 = (char *)v8 + v70;
      uint64_t v73 = type metadata accessor for UnknownStorage();
      uint64_t v74 = (void (**)(char *, char *, uint64_t))(*(void *)(v73 - 8) + 16);
      v383 = *v74;
      (*v74)(v71, v72, v73);
      __dstc = (int *)v69;
      uint64_t v75 = *(int *)(v69 + 28);
      uint64_t v76 = (void *)((char *)v394 + v75);
      uint64_t v77 = (void *)((char *)v8 + v75);
      uint64_t v78 = type metadata accessor for AspirePirEncryptedIndices(0);
      uint64_t v79 = *(void *)(v78 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v79 + 48))(v77, 1, v78))
      {
        uint64_t v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
        memcpy(v76, v77, *(void *)(*(void *)(v80 - 8) + 64));
      }
      else
      {
        void *v76 = *v77;
        v76[1] = v77[1];
        uint64_t v112 = *(int *)(v78 + 24);
        uint64_t v387 = a3;
        uint64_t v113 = v4;
        unint64_t v114 = (char *)v76 + v112;
        uint64_t v115 = (char *)v77 + v112;
        swift_bridgeObjectRetain();
        uint64_t v116 = v114;
        uint64_t v4 = v113;
        a3 = v387;
        v383(v116, v115, v73);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v79 + 56))(v76, 0, 1, v78);
      }
      uint64_t v81 = v73;
      uint64_t v117 = __dstc[8];
      v388 = (char *)v394 + v117;
      uint64_t v118 = (char *)v8 + v117;
      uint64_t v119 = type metadata accessor for AMDPbEvaluationKey(0);
      uint64_t v120 = *(unsigned int (***)(const void *, uint64_t, uint64_t))(v119 - 8);
      if (v120[6](v118, 1, v119))
      {
        uint64_t v121 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKey?);
        memcpy(v388, v118, *(void *)(*(void *)(v121 - 8) + 64));
      }
      else
      {
        __dste = v120;
        v383(v388, v118, v81);
        uint64_t v132 = *(int *)(v119 + 20);
        uint64_t v133 = &v388[v132];
        uint64_t v134 = &v118[v132];
        uint64_t v135 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
        uint64_t v136 = *(void *)(v135 - 8);
        v379 = v4;
        uint64_t v364 = v81;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v136 + 48))(v134, 1, v135))
        {
          uint64_t v137 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
          memcpy(v133, v134, *(void *)(*(void *)(v137 - 8) + 64));
        }
        else
        {
          *(void *)uint64_t v133 = *(void *)v134;
          uint64_t v359 = v119;
          uint64_t v179 = *((void *)v134 + 1);
          unint64_t v178 = *((void *)v134 + 2);
          outlined copy of Data._Representation(v179, v178);
          *((void *)v133 + 1) = v179;
          *((void *)v133 + 2) = v178;
          uint64_t v119 = v359;
          v383(&v133[*(int *)(v135 + 24)], &v134[*(int *)(v135 + 24)], v81);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v136 + 56))(v133, 0, 1, v135);
        }
        uint64_t v180 = *(int *)(v119 + 24);
        uint64_t v181 = &v388[v180];
        uint64_t v182 = &v118[v180];
        uint64_t v183 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
        uint64_t v184 = *(unsigned int (***)(const void *, uint64_t, uint64_t))(v183 - 8);
        if (v184[6](v182, 1, v183))
        {
          uint64_t v185 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
          memcpy(v181, v182, *(void *)(*(void *)(v185 - 8) + 64));
          uint64_t v186 = __dste;
        }
        else
        {
          v350 = v184;
          uint64_t v360 = v119;
          v383(v181, v182, v81);
          uint64_t v207 = *(int *)(v183 + 20);
          v354 = v181;
          uint64_t v208 = &v181[v207];
          v209 = &v182[v207];
          uint64_t v210 = type metadata accessor for AspireHeSerializedGaloisKey(0);
          uint64_t v211 = *(void *)(v210 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v211 + 48))(v209, 1, v210))
          {
            uint64_t v212 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
            memcpy(v208, v209, *(void *)(*(void *)(v212 - 8) + 64));
          }
          else
          {
            *(void *)uint64_t v208 = *(void *)v209;
            uint64_t v256 = *(int *)(v210 + 20);
            v347 = &v208[v256];
            v257 = &v209[v256];
            swift_bridgeObjectRetain();
            v383(v347, v257, v81);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v211 + 56))(v208, 0, 1, v210);
          }
          uint64_t v258 = *(int *)(v183 + 24);
          v259 = v354;
          v260 = &v354[v258];
          v261 = &v182[v258];
          uint64_t v262 = type metadata accessor for AspireHeSerializedRelinKey(0);
          uint64_t v263 = *(void *)(v262 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v263 + 48))(v261, 1, v262))
          {
            uint64_t v264 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
            memcpy(v260, v261, *(void *)(*(void *)(v264 - 8) + 64));
            uint64_t v186 = __dste;
          }
          else
          {
            v383(v260, v261, v364);
            uint64_t v348 = v262;
            uint64_t v288 = *(int *)(v262 + 20);
            v289 = &v260[v288];
            v290 = &v261[v288];
            uint64_t v291 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
            uint64_t v292 = *(void *)(v291 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v292 + 48))(v290, 1, v291))
            {
              uint64_t v293 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
              memcpy(v289, v290, *(void *)(*(void *)(v293 - 8) + 64));
              uint64_t v186 = __dste;
            }
            else
            {
              v383(v289, v290, v364);
              uint64_t v310 = *(int *)(v291 + 20);
              v344 = v289;
              v334 = &v289[v310];
              v311 = &v290[v310];
              uint64_t v312 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
              v331 = *(void (***)(char *, void, uint64_t, uint64_t))(v312 - 8);
              if (((unsigned int (*)(char *, uint64_t, uint64_t))v331[6])(v311, 1, v312))
              {
                uint64_t v313 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                memcpy(v334, v311, *(void *)(*(void *)(v313 - 8) + 64));
              }
              else
              {
                *(void *)v334 = *(void *)v311;
                uint64_t v320 = *(int *)(v312 + 20);
                v328 = &v334[v320];
                v340 = &v311[v320];
                swift_bridgeObjectRetain();
                v383(v328, v340, v364);
                v331[7](v334, 0, 1, v312);
              }
              uint64_t v186 = __dste;
              (*(void (**)(char *, void, uint64_t, uint64_t))(v292 + 56))(v344, 0, 1, v291);
            }
            (*(void (**)(char *, void, uint64_t, uint64_t))(v263 + 56))(v260, 0, 1, v348);
            v259 = v354;
          }
          ((void (*)(char *, void, uint64_t, uint64_t))v350[7])(v259, 0, 1, v183);
          uint64_t v119 = v360;
        }
        ((void (*)(char *, void, uint64_t, uint64_t))v186[7])(v388, 0, 1, v119);
        uint64_t v4 = v379;
      }
    }
    swift_storeEnumTagMultiPayload();
  }
LABEL_107:
  uint64_t v305 = *(int *)(a3 + 24);
  v306 = (char *)v393 + v305;
  v307 = (char *)v4 + v305;
  uint64_t v308 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v308 - 8) + 24))(v306, v307, v308);
  return v393;
}

_OWORD *initializeWithTake for AMDPbHEQuery(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a2;
  uint64_t v5 = a1;
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (void *)((char *)a1 + v6);
  uint64_t v8 = (void *)((char *)a2 + v6);
  uint64_t v9 = type metadata accessor for AMDPbHEQuery.OneOf_Query(0);
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    uint64_t v179 = v10;
    uint64_t v180 = v3;
    uint64_t v181 = v7;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v177 = v4;
      *uint64_t v7 = *v8;
      *(_OWORD *)(v7 + 1) = *(_OWORD *)(v8 + 1);
      uint64_t v12 = type metadata accessor for AMDPbPECQuery(0);
      uint64_t v13 = *(int *)(v12 + 24);
      uint64_t v14 = (char *)v7 + v13;
      uint64_t v15 = (char *)v8 + v13;
      uint64_t v16 = type metadata accessor for UnknownStorage();
      uint64_t v17 = *(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32);
      v17(v14, v15, v16);
      uint64_t v174 = v12;
      uint64_t v18 = *(int *)(v12 + 28);
      uint64_t v19 = (void *)((char *)v7 + v18);
      uint64_t v20 = (void *)((char *)v8 + v18);
      uint64_t v21 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
      uint64_t v22 = *(void *)(v21 - 8);
      uint64_t v171 = v17;
      uint64_t v173 = v16;
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
      {
        uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
        memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
        uint64_t v4 = v177;
        uint64_t v24 = v174;
        uint64_t v25 = v181;
      }
      else
      {
        uint64_t v166 = v22;
        void *v19 = *v20;
        v19[1] = v20[1];
        v17((char *)v19 + *(int *)(v21 + 28), (char *)v20 + *(int *)(v21 + 28), v16);
        uint64_t v39 = *(int *)(v21 + 32);
        uint64_t v169 = v19;
        uint64_t v40 = (char *)v19 + v39;
        uint64_t v41 = (char *)v20 + v39;
        uint64_t v42 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
        uint64_t v43 = *(void *)(v42 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
        {
          uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
          memcpy(v40, v41, *(void *)(*(void *)(v44 - 8) + 64));
          uint64_t v4 = v177;
        }
        else
        {
          uint64_t v61 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
          uint64_t v160 = *(void *)(v61 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v160 + 48))(v41, 1, v61))
          {
            uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
            memcpy(v40, v41, *(void *)(*(void *)(v62 - 8) + 64));
          }
          else
          {
            swift_getEnumCaseMultiPayload();
            v17(v40, v41, v173);
            swift_storeEnumTagMultiPayload();
            (*(void (**)(char *, void, uint64_t, uint64_t))(v160 + 56))(v40, 0, 1, v61);
          }
          v17(&v40[*(int *)(v42 + 20)], &v41[*(int *)(v42 + 20)], v173);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
          uint64_t v4 = v177;
        }
        uint64_t v24 = v174;
        uint64_t v25 = v181;
        (*(void (**)(void *, void, uint64_t, uint64_t))(v166 + 56))(v169, 0, 1, v21);
      }
      uint64_t v80 = *(int *)(v24 + 32);
      uint64_t v81 = (char *)v25 + v80;
      uint64_t v82 = (char *)v8 + v80;
      uint64_t v83 = type metadata accessor for AMDPbEvaluationKey(0);
      uint64_t v84 = *(void *)(v83 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v84 + 48))(v82, 1, v83))
      {
        uint64_t v85 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKey?);
        memcpy(v81, v82, *(void *)(*(void *)(v85 - 8) + 64));
      }
      else
      {
        uint64_t v168 = v84;
        v17(v81, v82, v173);
        uint64_t v176 = v83;
        uint64_t v86 = *(int *)(v83 + 20);
        uint64_t v170 = v81;
        uint64_t v87 = &v81[v86];
        uint64_t v88 = &v82[v86];
        uint64_t v89 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
        uint64_t v90 = *(void *)(v89 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v90 + 48))(v88, 1, v89))
        {
          uint64_t v91 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
          memcpy(v87, v88, *(void *)(*(void *)(v91 - 8) + 64));
        }
        else
        {
          *(void *)uint64_t v87 = *(void *)v88;
          *(_OWORD *)(v87 + 8) = *(_OWORD *)(v88 + 8);
          v171(&v87[*(int *)(v89 + 24)], &v88[*(int *)(v89 + 24)], v173);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v90 + 56))(v87, 0, 1, v89);
        }
        uint64_t v4 = v177;
        uint64_t v92 = v170;
        uint64_t v93 = *(int *)(v176 + 24);
        uint64_t v94 = &v170[v93];
        uint64_t v95 = &v82[v93];
        uint64_t v96 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
        uint64_t v97 = *(void *)(v96 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v97 + 48))(v95, 1, v96))
        {
          uint64_t v98 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
          memcpy(v94, v95, *(void *)(*(void *)(v98 - 8) + 64));
          uint64_t v99 = v176;
        }
        else
        {
          uint64_t v159 = v97;
          v171(v94, v95, v173);
          uint64_t v162 = v96;
          uint64_t v164 = v94;
          uint64_t v100 = *(int *)(v96 + 20);
          __dsta = &v94[v100];
          uint64_t v101 = &v95[v100];
          uint64_t v102 = type metadata accessor for AspireHeSerializedGaloisKey(0);
          uint64_t v103 = *(void *)(v102 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v103 + 48))(v101, 1, v102))
          {
            uint64_t v104 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
            memcpy(__dsta, v101, *(void *)(*(void *)(v104 - 8) + 64));
          }
          else
          {
            *(void *)__dsta = *(void *)v101;
            v171(&__dsta[*(int *)(v102 + 20)], &v101[*(int *)(v102 + 20)], v173);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v103 + 56))(__dsta, 0, 1, v102);
          }
          uint64_t v4 = v177;
          uint64_t v113 = v162;
          uint64_t v114 = *(int *)(v162 + 24);
          uint64_t v115 = &v164[v114];
          uint64_t v116 = &v95[v114];
          uint64_t v117 = type metadata accessor for AspireHeSerializedRelinKey(0);
          uint64_t v118 = *(void *)(v117 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v118 + 48))(v116, 1, v117))
          {
            uint64_t v119 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
            memcpy(v115, v116, *(void *)(*(void *)(v119 - 8) + 64));
            uint64_t v84 = v168;
            uint64_t v92 = v170;
            uint64_t v99 = v176;
          }
          else
          {
            v171(v115, v116, v173);
            uint64_t v154 = v117;
            __dstb = v115;
            uint64_t v127 = *(int *)(v117 + 20);
            uint64_t v128 = &v115[v127];
            uint64_t v129 = &v116[v127];
            uint64_t v130 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
            uint64_t v131 = *(void *)(v130 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v131 + 48))(v129, 1, v130))
            {
              uint64_t v132 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
              memcpy(v128, v129, *(void *)(*(void *)(v132 - 8) + 64));
              uint64_t v4 = v177;
              uint64_t v99 = v176;
              uint64_t v84 = v168;
            }
            else
            {
              v171(v128, v129, v173);
              uint64_t v138 = *(int *)(v130 + 20);
              uint64_t v151 = &v128[v138];
              uint64_t v152 = v128;
              uint64_t v139 = &v129[v138];
              uint64_t v140 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
              uint64_t v141 = *(void *)(v140 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v141 + 48))(v139, 1, v140))
              {
                uint64_t v142 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                memcpy(v151, v139, *(void *)(*(void *)(v142 - 8) + 64));
              }
              else
              {
                *(void *)uint64_t v151 = *(void *)v139;
                v171(&v151[*(int *)(v140 + 20)], &v139[*(int *)(v140 + 20)], v173);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v141 + 56))(v151, 0, 1, v140);
              }
              uint64_t v4 = v177;
              uint64_t v99 = v176;
              uint64_t v84 = v168;
              (*(void (**)(char *, void, uint64_t, uint64_t))(v131 + 56))(v152, 0, 1, v130);
            }
            (*(void (**)(char *, void, uint64_t, uint64_t))(v118 + 56))(__dstb, 0, 1, v154);
            uint64_t v92 = v170;
            uint64_t v113 = v162;
          }
          (*(void (**)(char *, void, uint64_t, uint64_t))(v159 + 56))(v164, 0, 1, v113);
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v84 + 56))(v92, 0, 1, v99);
      }
      uint64_t v51 = v179;
      uint64_t v3 = v180;
    }
    else
    {
      uint64_t v175 = v5;
      uint64_t v178 = v9;
      *(_DWORD *)uint64_t v7 = *(_DWORD *)v8;
      *(_OWORD *)(v7 + 1) = *(_OWORD *)(v8 + 1);
      uint64_t v26 = (int *)type metadata accessor for AMDPbPIRQuery(0);
      uint64_t v27 = v26[6];
      uint64_t v28 = (char *)v7 + v27;
      uint64_t v29 = (char *)v8 + v27;
      uint64_t v30 = type metadata accessor for UnknownStorage();
      uint64_t v31 = v7;
      uint64_t v32 = *(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 32);
      v32(v28, v29, v30);
      uint64_t v33 = v26[7];
      uint64_t v34 = (_OWORD *)((char *)v31 + v33);
      uint64_t v35 = (_OWORD *)((char *)v8 + v33);
      uint64_t v36 = type metadata accessor for AspirePirEncryptedIndices(0);
      uint64_t v37 = *(void *)(v36 - 8);
      uint64_t v172 = v32;
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36))
      {
        uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
        memcpy(v34, v35, *(void *)(*(void *)(v38 - 8) + 64));
      }
      else
      {
        *uint64_t v34 = *v35;
        v32((char *)v34 + *(int *)(v36 + 24), (char *)v35 + *(int *)(v36 + 24), v30);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
      }
      uint64_t v45 = v26[8];
      uint64_t v25 = v181;
      uint64_t v46 = (char *)v181 + v45;
      uint64_t v47 = (char *)v8 + v45;
      uint64_t v48 = type metadata accessor for AMDPbEvaluationKey(0);
      uint64_t v49 = *(void *)(v48 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v47, 1, v48))
      {
        uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKey?);
        memcpy(v46, v47, *(void *)(*(void *)(v50 - 8) + 64));
        uint64_t v51 = v179;
        uint64_t v3 = v180;
        uint64_t v9 = v178;
        uint64_t v5 = v175;
      }
      else
      {
        uint64_t v163 = v49;
        v172(v46, v47, v30);
        uint64_t v165 = v46;
        uint64_t v167 = v48;
        uint64_t v52 = *(int *)(v48 + 20);
        uint64_t v53 = &v46[v52];
        uint64_t v54 = &v47[v52];
        uint64_t v55 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
        uint64_t v56 = *(void *)(v55 - 8);
        uint64_t v5 = v175;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v56 + 48))(v54, 1, v55))
        {
          uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
          memcpy(v53, v54, *(void *)(*(void *)(v57 - 8) + 64));
          uint64_t v59 = v165;
          uint64_t v58 = v167;
          uint64_t v60 = v30;
        }
        else
        {
          *(void *)uint64_t v53 = *(void *)v54;
          *(_OWORD *)(v53 + 8) = *(_OWORD *)(v54 + 8);
          uint64_t v63 = *(int *)(v55 + 24);
          uint64_t v64 = &v54[v63];
          uint64_t v60 = v30;
          v172(&v53[v63], v64, v30);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v56 + 56))(v53, 0, 1, v55);
          uint64_t v59 = v165;
          uint64_t v58 = v167;
        }
        uint64_t v65 = *(int *)(v58 + 24);
        uint64_t v66 = &v59[v65];
        uint64_t v67 = &v47[v65];
        uint64_t v68 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
        uint64_t v69 = *(unsigned int (***)(const void *, uint64_t, uint64_t))(v68 - 8);
        if (v69[6](v67, 1, v68))
        {
          uint64_t v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
          memcpy(v66, v67, *(void *)(*(void *)(v70 - 8) + 64));
          uint64_t v71 = v163;
          uint64_t v72 = v167;
          uint64_t v25 = v181;
        }
        else
        {
          __dst = v69;
          v172(v66, v67, v60);
          uint64_t v158 = v66;
          uint64_t v161 = v68;
          uint64_t v73 = *(int *)(v68 + 20);
          uint64_t v74 = &v66[v73];
          uint64_t v75 = v60;
          uint64_t v76 = &v67[v73];
          uint64_t v77 = type metadata accessor for AspireHeSerializedGaloisKey(0);
          uint64_t v78 = *(void *)(v77 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v78 + 48))(v76, 1, v77))
          {
            uint64_t v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
            memcpy(v74, v76, *(void *)(*(void *)(v79 - 8) + 64));
          }
          else
          {
            *(void *)uint64_t v74 = *(void *)v76;
            v172(&v74[*(int *)(v77 + 20)], &v76[*(int *)(v77 + 20)], v75);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v78 + 56))(v74, 0, 1, v77);
          }
          uint64_t v72 = v167;
          uint64_t v105 = v158;
          uint64_t v106 = *(int *)(v161 + 24);
          uint64_t v107 = &v158[v106];
          uint64_t v108 = &v67[v106];
          uint64_t v109 = type metadata accessor for AspireHeSerializedRelinKey(0);
          uint64_t v110 = *(unsigned int (***)(const void *, uint64_t, uint64_t))(v109 - 8);
          if (v110[6](v108, 1, v109))
          {
            uint64_t v111 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
            memcpy(v107, v108, *(void *)(*(void *)(v111 - 8) + 64));
            uint64_t v71 = v163;
            uint64_t v59 = v165;
            uint64_t v112 = __dst;
            uint64_t v25 = v181;
          }
          else
          {
            uint64_t v150 = v110;
            v172(v107, v108, v30);
            uint64_t v153 = v107;
            uint64_t v120 = *(int *)(v109 + 20);
            uint64_t v121 = &v107[v120];
            uint64_t v122 = &v108[v120];
            uint64_t v123 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
            uint64_t v124 = *(void *)(v123 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v124 + 48))(v122, 1, v123))
            {
              uint64_t v125 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
              memcpy(v121, v122, *(void *)(*(void *)(v125 - 8) + 64));
              uint64_t v71 = v163;
              uint64_t v105 = v158;
              uint64_t v126 = v153;
              uint64_t v25 = v181;
            }
            else
            {
              v172(v121, v122, v30);
              uint64_t v133 = *(int *)(v123 + 20);
              uint64_t v149 = v121;
              uint64_t v148 = &v121[v133];
              uint64_t v134 = &v122[v133];
              uint64_t v135 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
              uint64_t v136 = *(void *)(v135 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v136 + 48))(v134, 1, v135))
              {
                uint64_t v137 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                memcpy(v148, v134, *(void *)(*(void *)(v137 - 8) + 64));
              }
              else
              {
                *(void *)uint64_t v148 = *(void *)v134;
                v172(&v148[*(int *)(v135 + 20)], &v134[*(int *)(v135 + 20)], v30);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v136 + 56))(v148, 0, 1, v135);
              }
              uint64_t v72 = v167;
              uint64_t v71 = v163;
              uint64_t v105 = v158;
              uint64_t v126 = v153;
              uint64_t v25 = v181;
              (*(void (**)(char *, void, uint64_t, uint64_t))(v124 + 56))(v149, 0, 1, v123);
            }
            ((void (*)(char *, void, uint64_t, uint64_t))v150[7])(v126, 0, 1, v109);
            uint64_t v59 = v165;
            uint64_t v112 = __dst;
          }
          ((void (*)(char *, void, uint64_t, uint64_t))v112[7])(v105, 0, 1, v161);
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v71 + 56))(v59, 0, 1, v72);
        uint64_t v51 = v179;
        uint64_t v3 = v180;
        uint64_t v9 = v178;
      }
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(void *, void, uint64_t, uint64_t))(v51 + 56))(v25, 0, 1, v9);
  }
  uint64_t v143 = *(int *)(v3 + 24);
  uint64_t v144 = (char *)v5 + v143;
  uint64_t v145 = (char *)v4 + v143;
  uint64_t v146 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v146 - 8) + 32))(v144, v145, v146);
  return v5;
}

void *assignWithTake for AMDPbHEQuery(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2;
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)v4 + v7;
  uint64_t v10 = type metadata accessor for AMDPbHEQuery.OneOf_Query(0);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      uint64_t v336 = a3;
      uint64_t v338 = v10;
      v334 = v4;
      v335 = v8;
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        *(void *)uint64_t v8 = *(void *)v9;
        *(_OWORD *)(v8 + 8) = *(_OWORD *)(v9 + 8);
        uint64_t v15 = type metadata accessor for AMDPbPECQuery(0);
        uint64_t v16 = *(int *)(v15 + 24);
        uint64_t v17 = &v8[v16];
        uint64_t v18 = &v9[v16];
        uint64_t v19 = type metadata accessor for UnknownStorage();
        uint64_t v20 = *(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 32);
        v20(v17, v18, v19);
        uint64_t v331 = v15;
        uint64_t v21 = *(int *)(v15 + 28);
        uint64_t v22 = &v8[v21];
        uint64_t v23 = &v9[v21];
        uint64_t v24 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
        uint64_t v25 = *(void *)(v24 - 8);
        uint64_t v322 = v19;
        v325 = v20;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
        {
          uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
          memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
        }
        else
        {
          uint64_t v318 = v25;
          *(void *)uint64_t v22 = *(void *)v23;
          *((void *)v22 + 1) = *((void *)v23 + 1);
          v20(&v22[*(int *)(v24 + 28)], &v23[*(int *)(v24 + 28)], v19);
          uint64_t v54 = *(int *)(v24 + 32);
          uint64_t v55 = &v22[v54];
          uint64_t v56 = &v23[v54];
          uint64_t v57 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
          uint64_t v58 = *(void *)(v57 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48))(v56, 1, v57))
          {
            uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
            memcpy(v55, v56, *(void *)(*(void *)(v59 - 8) + 64));
            uint64_t v60 = v318;
          }
          else
          {
            uint64_t v307 = v58;
            uint64_t v313 = v22;
            uint64_t v93 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
            uint64_t v94 = *(void *)(v93 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v94 + 48))(v56, 1, v93))
            {
              uint64_t v95 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
              memcpy(v55, v56, *(void *)(*(void *)(v95 - 8) + 64));
            }
            else
            {
              swift_getEnumCaseMultiPayload();
              v325(v55, v56, v322);
              swift_storeEnumTagMultiPayload();
              (*(void (**)(char *, void, uint64_t, uint64_t))(v94 + 56))(v55, 0, 1, v93);
            }
            v325(&v55[*(int *)(v57 + 20)], &v56[*(int *)(v57 + 20)], v322);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v307 + 56))(v55, 0, 1, v57);
            uint64_t v22 = v313;
            uint64_t v60 = v318;
          }
          (*(void (**)(char *, void, uint64_t, uint64_t))(v60 + 56))(v22, 0, 1, v24);
        }
        uint64_t v132 = *(int *)(v331 + 32);
        uint64_t v74 = v335;
        uint64_t v75 = &v335[v132];
        uint64_t v76 = &v9[v132];
        uint64_t v133 = type metadata accessor for AMDPbEvaluationKey(0);
        uint64_t v134 = *(void *)(v133 - 8);
        uint64_t v79 = v338;
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v134 + 48))(v76, 1, v133))
        {
          uint64_t v315 = v134;
          v325(v75, v76, v322);
          uint64_t v333 = v133;
          uint64_t v136 = *(int *)(v133 + 20);
          uint64_t v321 = v75;
          uint64_t v137 = &v75[v136];
          uint64_t v138 = &v76[v136];
          uint64_t v139 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
          uint64_t v140 = *(void *)(v139 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v140 + 48))(v138, 1, v139))
          {
            uint64_t v141 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
            memcpy(v137, v138, *(void *)(*(void *)(v141 - 8) + 64));
          }
          else
          {
            *(void *)uint64_t v137 = *(void *)v138;
            *(_OWORD *)(v137 + 8) = *(_OWORD *)(v138 + 8);
            v325(&v137[*(int *)(v139 + 24)], &v138[*(int *)(v139 + 24)], v322);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v140 + 56))(v137, 0, 1, v139);
          }
          uint64_t v142 = *(int *)(v333 + 24);
          uint64_t v143 = v321;
          uint64_t v144 = &v321[v142];
          uint64_t v145 = &v76[v142];
          uint64_t v146 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
          uint64_t v147 = *(void *)(v146 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v147 + 48))(v145, 1, v146))
          {
            uint64_t v148 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
            memcpy(v144, v145, *(void *)(*(void *)(v148 - 8) + 64));
            a3 = v336;
            uint64_t v79 = v338;
            uint64_t v149 = v333;
            uint64_t v150 = v315;
          }
          else
          {
            uint64_t v298 = v147;
            v325(v144, v145, v322);
            uint64_t v303 = v146;
            v309 = v144;
            uint64_t v151 = *(int *)(v146 + 20);
            uint64_t v152 = &v144[v151];
            uint64_t v153 = &v145[v151];
            uint64_t v154 = type metadata accessor for AspireHeSerializedGaloisKey(0);
            uint64_t v155 = *(void *)(v154 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v155 + 48))(v153, 1, v154))
            {
              uint64_t v156 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
              memcpy(v152, v153, *(void *)(*(void *)(v156 - 8) + 64));
            }
            else
            {
              *(void *)uint64_t v152 = *(void *)v153;
              v325(&v152[*(int *)(v154 + 20)], &v153[*(int *)(v154 + 20)], v322);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v155 + 56))(v152, 0, 1, v154);
            }
            uint64_t v172 = *(int *)(v303 + 24);
            uint64_t v173 = &v309[v172];
            uint64_t v174 = &v145[v172];
            uint64_t v175 = type metadata accessor for AspireHeSerializedRelinKey(0);
            uint64_t v176 = *(void *)(v175 - 8);
            a3 = v336;
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v176 + 48))(v174, 1, v175))
            {
              uint64_t v177 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
              memcpy(v173, v174, *(void *)(*(void *)(v177 - 8) + 64));
              uint64_t v79 = v338;
              uint64_t v149 = v333;
              uint64_t v150 = v315;
            }
            else
            {
              v325(v173, v174, v322);
              __dstb = (void *)v175;
              uint64_t v294 = v173;
              uint64_t v189 = *(int *)(v175 + 20);
              v190 = &v173[v189];
              uint64_t v191 = &v174[v189];
              uint64_t v192 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
              uint64_t v193 = *(void *)(v192 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v193 + 48))(v191, 1, v192))
              {
                uint64_t v194 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
                memcpy(v190, v191, *(void *)(*(void *)(v194 - 8) + 64));
                a3 = v336;
                uint64_t v79 = v338;
                uint64_t v149 = v333;
                uint64_t v150 = v315;
              }
              else
              {
                v325(v190, v191, v322);
                uint64_t v231 = *(int *)(v192 + 20);
                v282 = v190;
                v277 = &v190[v231];
                uint64_t v232 = &v191[v231];
                uint64_t v233 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
                uint64_t v234 = *(void *)(v233 - 8);
                if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v234 + 48))(v232, 1, v233))
                {
                  uint64_t v235 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                  memcpy(v277, v232, *(void *)(*(void *)(v235 - 8) + 64));
                }
                else
                {
                  *(void *)v277 = *(void *)v232;
                  v325(&v277[*(int *)(v233 + 20)], &v232[*(int *)(v233 + 20)], v322);
                  (*(void (**)(char *, void, uint64_t, uint64_t))(v234 + 56))(v277, 0, 1, v233);
                }
                uint64_t v79 = v338;
                uint64_t v149 = v333;
                uint64_t v150 = v315;
                (*(void (**)(char *, void, uint64_t, uint64_t))(v193 + 56))(v282, 0, 1, v192);
                a3 = v336;
              }
              (*(void (**)(char *, void, uint64_t, void *))(v176 + 56))(v294, 0, 1, __dstb);
            }
            (*(void (**)(char *, void, uint64_t, uint64_t))(v298 + 56))(v309, 0, 1, v303);
            uint64_t v143 = v321;
          }
          (*(void (**)(char *, void, uint64_t, uint64_t))(v150 + 56))(v143, 0, 1, v149);
          goto LABEL_101;
        }
      }
      else
      {
        *(_DWORD *)uint64_t v8 = *(_DWORD *)v9;
        *(_OWORD *)(v8 + 8) = *(_OWORD *)(v9 + 8);
        uint64_t v41 = (int *)type metadata accessor for AMDPbPIRQuery(0);
        uint64_t v42 = v41[6];
        uint64_t v43 = &v8[v42];
        uint64_t v44 = &v9[v42];
        uint64_t v45 = v8;
        uint64_t v46 = type metadata accessor for UnknownStorage();
        uint64_t v47 = *(void (**)(char *, char *, uint64_t))(*(void *)(v46 - 8) + 32);
        v47(v43, v44, v46);
        uint64_t v48 = v41[7];
        uint64_t v49 = &v45[v48];
        uint64_t v50 = &v9[v48];
        uint64_t v51 = type metadata accessor for AspirePirEncryptedIndices(0);
        uint64_t v52 = *(void *)(v51 - 8);
        uint64_t v327 = v46;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v50, 1, v51))
        {
          uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
          memcpy(v49, v50, *(void *)(*(void *)(v53 - 8) + 64));
        }
        else
        {
          *(_OWORD *)uint64_t v49 = *(_OWORD *)v50;
          v47(&v49[*(int *)(v51 + 24)], &v50[*(int *)(v51 + 24)], v46);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v52 + 56))(v49, 0, 1, v51);
        }
        uint64_t v73 = v41[8];
        uint64_t v74 = v335;
        uint64_t v75 = &v335[v73];
        uint64_t v76 = &v9[v73];
        uint64_t v77 = type metadata accessor for AMDPbEvaluationKey(0);
        uint64_t v78 = *(void *)(v77 - 8);
        uint64_t v79 = v338;
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v78 + 48))(v76, 1, v77))
        {
          uint64_t v306 = v78;
          v47(v75, v76, v327);
          v311 = v75;
          uint64_t v319 = v77;
          uint64_t v80 = *(int *)(v77 + 20);
          uint64_t v81 = &v75[v80];
          uint64_t v82 = &v76[v80];
          uint64_t v83 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
          uint64_t v84 = *(void *)(v83 - 8);
          uint64_t v301 = v47;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v84 + 48))(v82, 1, v83))
          {
            uint64_t v85 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
            memcpy(v81, v82, *(void *)(*(void *)(v85 - 8) + 64));
          }
          else
          {
            *(void *)uint64_t v81 = *(void *)v82;
            *(_OWORD *)(v81 + 8) = *(_OWORD *)(v82 + 8);
            v47(&v81[*(int *)(v83 + 24)], &v82[*(int *)(v83 + 24)], v327);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v84 + 56))(v81, 0, 1, v83);
          }
          uint64_t v103 = v311;
          uint64_t v104 = v319;
          uint64_t v105 = *(int *)(v319 + 24);
          uint64_t v106 = &v311[v105];
          uint64_t v107 = &v76[v105];
          uint64_t v108 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
          uint64_t v109 = *(unsigned int (***)(const void *, uint64_t, uint64_t))(v108 - 8);
          uint64_t v4 = v334;
          uint64_t v74 = v335;
          if (v109[6](v107, 1, v108))
          {
            uint64_t v110 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
            memcpy(v106, v107, *(void *)(*(void *)(v110 - 8) + 64));
            a3 = v336;
            uint64_t v79 = v338;
            uint64_t v111 = v306;
          }
          else
          {
            __dst = v109;
            v301(v106, v107, v327);
            uint64_t v291 = v106;
            uint64_t v296 = v108;
            uint64_t v119 = *(int *)(v108 + 20);
            uint64_t v120 = &v106[v119];
            uint64_t v121 = &v107[v119];
            uint64_t v122 = type metadata accessor for AspireHeSerializedGaloisKey(0);
            uint64_t v123 = *(void *)(v122 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v123 + 48))(v121, 1, v122))
            {
              uint64_t v124 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
              memcpy(v120, v121, *(void *)(*(void *)(v124 - 8) + 64));
            }
            else
            {
              *(void *)uint64_t v120 = *(void *)v121;
              v301(&v120[*(int *)(v122 + 20)], &v121[*(int *)(v122 + 20)], v327);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v123 + 56))(v120, 0, 1, v122);
            }
            uint64_t v165 = v291;
            uint64_t v166 = *(int *)(v296 + 24);
            uint64_t v167 = &v291[v166];
            uint64_t v168 = &v107[v166];
            uint64_t v169 = type metadata accessor for AspireHeSerializedRelinKey(0);
            uint64_t v170 = *(void *)(v169 - 8);
            uint64_t v104 = v319;
            uint64_t v4 = v334;
            uint64_t v74 = v335;
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v170 + 48))(v168, 1, v169))
            {
              uint64_t v171 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
              memcpy(v167, v168, *(void *)(*(void *)(v171 - 8) + 64));
              uint64_t v79 = v338;
              uint64_t v111 = v306;
              uint64_t v103 = v311;
            }
            else
            {
              uint64_t v276 = v170;
              v301(v167, v168, v327);
              uint64_t v279 = v169;
              uint64_t v183 = *(int *)(v169 + 20);
              uint64_t v184 = &v167[v183];
              uint64_t v185 = &v168[v183];
              uint64_t v186 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
              uint64_t v187 = *(void *)(v186 - 8);
              v281 = v167;
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v187 + 48))(v185, 1, v186))
              {
                uint64_t v188 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
                memcpy(v184, v185, *(void *)(*(void *)(v188 - 8) + 64));
                uint64_t v79 = v338;
                uint64_t v111 = v306;
              }
              else
              {
                v301(v184, v185, v327);
                uint64_t v226 = *(int *)(v186 + 20);
                uint64_t v271 = &v184[v226];
                uint64_t v227 = &v185[v226];
                uint64_t v228 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
                uint64_t v229 = *(void *)(v228 - 8);
                uint64_t v274 = v184;
                if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v229 + 48))(v227, 1, v228))
                {
                  uint64_t v230 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                  memcpy(v271, v227, *(void *)(*(void *)(v230 - 8) + 64));
                }
                else
                {
                  *(void *)uint64_t v271 = *(void *)v227;
                  v301(&v271[*(int *)(v228 + 20)], &v227[*(int *)(v228 + 20)], v327);
                  (*(void (**)(char *, void, uint64_t, uint64_t))(v229 + 56))(v271, 0, 1, v228);
                }
                uint64_t v79 = v338;
                uint64_t v104 = v319;
                uint64_t v111 = v306;
                (*(void (**)(char *, void, uint64_t, uint64_t))(v187 + 56))(v274, 0, 1, v186);
              }
              (*(void (**)(char *, void, uint64_t, uint64_t))(v276 + 56))(v281, 0, 1, v279);
              uint64_t v103 = v311;
              uint64_t v165 = v291;
            }
            ((void (*)(char *, void, uint64_t, uint64_t))__dst[7])(v165, 0, 1, v296);
            a3 = v336;
          }
          (*(void (**)(char *, void, uint64_t, uint64_t))(v111 + 56))(v103, 0, 1, v104);
          goto LABEL_101;
        }
      }
      uint64_t v135 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKey?);
      memcpy(v75, v76, *(void *)(*(void *)(v135 - 8) + 64));
      a3 = v336;
      uint64_t v4 = v334;
LABEL_101:
      swift_storeEnumTagMultiPayload();
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v74, 0, 1, v79);
      goto LABEL_102;
    }
    goto LABEL_8;
  }
  if (!v14)
  {
    if (a1 == v4) {
      goto LABEL_102;
    }
    uint64_t v337 = a3;
    outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v8, type metadata accessor for AMDPbHEQuery.OneOf_Query);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *(void *)uint64_t v8 = *(void *)v9;
      *(_OWORD *)(v8 + 8) = *(_OWORD *)(v9 + 8);
      uint64_t v28 = type metadata accessor for AMDPbPECQuery(0);
      uint64_t v29 = *(int *)(v28 + 24);
      uint64_t v30 = &v8[v29];
      uint64_t v31 = &v9[v29];
      uint64_t v32 = type metadata accessor for UnknownStorage();
      uint64_t v33 = *(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 32);
      v33(v30, v31, v32);
      uint64_t v326 = v28;
      uint64_t v34 = *(int *)(v28 + 28);
      uint64_t v35 = &v8[v34];
      uint64_t v36 = &v9[v34];
      uint64_t v37 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
      uint64_t v38 = *(void *)(v37 - 8);
      uint64_t v317 = v33;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
      {
        uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
        memcpy(v35, v36, *(void *)(*(void *)(v39 - 8) + 64));
        uint64_t v40 = v326;
      }
      else
      {
        uint64_t v312 = v38;
        *(void *)uint64_t v35 = *(void *)v36;
        *((void *)v35 + 1) = *((void *)v36 + 1);
        uint64_t v323 = v32;
        v33(&v35[*(int *)(v37 + 28)], &v36[*(int *)(v37 + 28)], v32);
        uint64_t v86 = *(int *)(v37 + 32);
        uint64_t v87 = &v35[v86];
        uint64_t v88 = &v36[v86];
        uint64_t v89 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
        uint64_t v90 = *(void *)(v89 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v90 + 48))(v88, 1, v89))
        {
          uint64_t v91 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
          memcpy(v87, v88, *(void *)(*(void *)(v91 - 8) + 64));
          uint64_t v40 = v326;
          uint64_t v92 = v312;
        }
        else
        {
          uint64_t v292 = v90;
          uint64_t v297 = v89;
          uint64_t v302 = v35;
          uint64_t v308 = v37;
          uint64_t v125 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
          uint64_t v126 = *(void *)(v125 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v126 + 48))(v88, 1, v125))
          {
            uint64_t v127 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
            uint64_t v128 = v87;
            uint64_t v129 = v88;
            memcpy(v87, v88, *(void *)(*(void *)(v127 - 8) + 64));
            uint64_t v131 = v317;
            uint64_t v130 = v323;
          }
          else
          {
            swift_getEnumCaseMultiPayload();
            uint64_t v128 = v87;
            uint64_t v129 = v88;
            uint64_t v195 = v88;
            uint64_t v131 = v317;
            v317(v87, v195, v323);
            swift_storeEnumTagMultiPayload();
            (*(void (**)(char *, void, uint64_t, uint64_t))(v126 + 56))(v87, 0, 1, v125);
            uint64_t v130 = v323;
          }
          v131(&v128[*(int *)(v297 + 20)], &v129[*(int *)(v297 + 20)], v130);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v292 + 56))(v128, 0, 1, v297);
          uint64_t v40 = v326;
          uint64_t v37 = v308;
          uint64_t v92 = v312;
          uint64_t v35 = v302;
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v92 + 56))(v35, 0, 1, v37);
        uint64_t v32 = v323;
      }
      uint64_t v196 = *(int *)(v40 + 32);
      uint64_t v98 = &v8[v196];
      uint64_t v99 = &v9[v196];
      uint64_t v197 = type metadata accessor for AMDPbEvaluationKey(0);
      uint64_t v198 = *(void *)(v197 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v198 + 48))(v99, 1, v197))
      {
        uint64_t v310 = v198;
        v317(v98, v99, v32);
        uint64_t v324 = v32;
        uint64_t v330 = v197;
        uint64_t v199 = *(int *)(v197 + 20);
        v316 = v98;
        uint64_t v200 = &v98[v199];
        uint64_t v201 = &v99[v199];
        uint64_t v202 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
        uint64_t v203 = *(void *)(v202 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v203 + 48))(v201, 1, v202))
        {
          uint64_t v204 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
          memcpy(v200, v201, *(void *)(*(void *)(v204 - 8) + 64));
        }
        else
        {
          *(void *)uint64_t v200 = *(void *)v201;
          *(_OWORD *)(v200 + 8) = *(_OWORD *)(v201 + 8);
          v317(&v200[*(int *)(v202 + 24)], &v201[*(int *)(v202 + 24)], v324);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v203 + 56))(v200, 0, 1, v202);
        }
        uint64_t v205 = *(int *)(v197 + 24);
        uint64_t v206 = v316;
        uint64_t v207 = &v316[v205];
        uint64_t v208 = &v99[v205];
        uint64_t v209 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
        uint64_t v210 = *(void *)(v209 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v210 + 48))(v208, 1, v209))
        {
          uint64_t v211 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
          memcpy(v207, v208, *(void *)(*(void *)(v211 - 8) + 64));
          a3 = v337;
          uint64_t v212 = v197;
        }
        else
        {
          uint64_t v295 = v210;
          v317(v207, v208, v324);
          uint64_t v300 = v207;
          uint64_t v305 = v209;
          uint64_t v213 = *(int *)(v209 + 20);
          __dstc = &v207[v213];
          uint64_t v214 = &v208[v213];
          uint64_t v215 = type metadata accessor for AspireHeSerializedGaloisKey(0);
          uint64_t v216 = *(void *)(v215 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v216 + 48))(v214, 1, v215))
          {
            uint64_t v217 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
            memcpy(__dstc, v214, *(void *)(*(void *)(v217 - 8) + 64));
          }
          else
          {
            *(void *)__dstc = *(void *)v214;
            v317(&__dstc[*(int *)(v215 + 20)], &v214[*(int *)(v215 + 20)], v324);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v216 + 56))(__dstc, 0, 1, v215);
          }
          v236 = v300;
          uint64_t v237 = *(int *)(v305 + 24);
          uint64_t v238 = &v300[v237];
          uint64_t v239 = &v208[v237];
          uint64_t v240 = type metadata accessor for AspireHeSerializedRelinKey(0);
          uint64_t v241 = *(void *)(v240 - 8);
          a3 = v337;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v241 + 48))(v239, 1, v240))
          {
            uint64_t v242 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
            memcpy(v238, v239, *(void *)(*(void *)(v242 - 8) + 64));
            uint64_t v206 = v316;
            uint64_t v212 = v330;
          }
          else
          {
            v317(v238, v239, v324);
            uint64_t v284 = v240;
            __dste = v238;
            uint64_t v250 = *(int *)(v240 + 20);
            uint64_t v251 = &v238[v250];
            v252 = &v239[v250];
            uint64_t v253 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
            uint64_t v254 = *(void *)(v253 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v254 + 48))(v252, 1, v253))
            {
              uint64_t v255 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
              memcpy(v251, v252, *(void *)(*(void *)(v255 - 8) + 64));
              uint64_t v212 = v330;
              uint64_t v256 = __dste;
            }
            else
            {
              v317(v251, v252, v324);
              uint64_t v266 = *(int *)(v253 + 20);
              v278 = v251;
              uint64_t v273 = &v251[v266];
              uint64_t v267 = &v252[v266];
              uint64_t v268 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
              uint64_t v269 = *(void *)(v268 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v269 + 48))(v267, 1, v268))
              {
                uint64_t v270 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                memcpy(v273, v267, *(void *)(*(void *)(v270 - 8) + 64));
              }
              else
              {
                *(void *)uint64_t v273 = *(void *)v267;
                v317(&v273[*(int *)(v268 + 20)], &v267[*(int *)(v268 + 20)], v324);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v269 + 56))(v273, 0, 1, v268);
              }
              a3 = v337;
              uint64_t v212 = v330;
              uint64_t v256 = __dste;
              (*(void (**)(char *, void, uint64_t, uint64_t))(v254 + 56))(v278, 0, 1, v253);
            }
            (*(void (**)(char *, void, uint64_t, uint64_t))(v241 + 56))(v256, 0, 1, v284);
            uint64_t v206 = v316;
            v236 = v300;
          }
          (*(void (**)(char *, void, uint64_t, uint64_t))(v295 + 56))(v236, 0, 1, v305);
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v310 + 56))(v206, 0, 1, v212);
        goto LABEL_112;
      }
    }
    else
    {
      *(_DWORD *)uint64_t v8 = *(_DWORD *)v9;
      *(_OWORD *)(v8 + 8) = *(_OWORD *)(v9 + 8);
      uint64_t v61 = type metadata accessor for AMDPbPIRQuery(0);
      uint64_t v62 = *(int *)(v61 + 24);
      uint64_t v63 = &v8[v62];
      uint64_t v64 = &v9[v62];
      uint64_t v65 = type metadata accessor for UnknownStorage();
      uint64_t v66 = (void (**)(char *, char *, uint64_t))(*(void *)(v65 - 8) + 32);
      uint64_t v332 = *v66;
      (*v66)(v63, v64, v65);
      uint64_t v328 = v61;
      uint64_t v67 = *(int *)(v61 + 28);
      uint64_t v68 = &v8[v67];
      uint64_t v69 = &v9[v67];
      uint64_t v70 = type metadata accessor for AspirePirEncryptedIndices(0);
      uint64_t v71 = *(void *)(v70 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v71 + 48))(v69, 1, v70))
      {
        uint64_t v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
        memcpy(v68, v69, *(void *)(*(void *)(v72 - 8) + 64));
      }
      else
      {
        *(_OWORD *)uint64_t v68 = *(_OWORD *)v69;
        v332(&v68[*(int *)(v70 + 24)], &v69[*(int *)(v70 + 24)], v65);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v71 + 56))(v68, 0, 1, v70);
      }
      uint64_t v96 = v65;
      uint64_t v97 = *(int *)(v328 + 32);
      uint64_t v98 = &v8[v97];
      uint64_t v99 = &v9[v97];
      uint64_t v100 = type metadata accessor for AMDPbEvaluationKey(0);
      uint64_t v101 = *(void *)(v100 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v101 + 48))(v99, 1, v100))
      {
        uint64_t v314 = v101;
        v332(v98, v99, v96);
        uint64_t v329 = v100;
        uint64_t v112 = *(int *)(v100 + 20);
        uint64_t v320 = v98;
        uint64_t v113 = &v98[v112];
        uint64_t v114 = v96;
        uint64_t v115 = &v99[v112];
        uint64_t v116 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
        uint64_t v117 = *(void *)(v116 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v117 + 48))(v115, 1, v116))
        {
          uint64_t v118 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
          memcpy(v113, v115, *(void *)(*(void *)(v118 - 8) + 64));
        }
        else
        {
          *(void *)uint64_t v113 = *(void *)v115;
          *(_OWORD *)(v113 + 8) = *(_OWORD *)(v115 + 8);
          v332(&v113[*(int *)(v116 + 24)], &v115[*(int *)(v116 + 24)], v114);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v117 + 56))(v113, 0, 1, v116);
        }
        uint64_t v157 = *(int *)(v100 + 24);
        uint64_t v158 = v320;
        uint64_t v159 = &v320[v157];
        uint64_t v160 = &v99[v157];
        uint64_t v161 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
        uint64_t v162 = *(void *)(v161 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v162 + 48))(v160, 1, v161))
        {
          uint64_t v163 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
          memcpy(v159, v160, *(void *)(*(void *)(v163 - 8) + 64));
          a3 = v337;
          uint64_t v164 = v314;
        }
        else
        {
          uint64_t v293 = v162;
          v332(v159, v160, v114);
          uint64_t v299 = v161;
          v304 = v159;
          uint64_t v178 = *(int *)(v161 + 20);
          __dsta = &v159[v178];
          uint64_t v179 = &v160[v178];
          uint64_t v180 = type metadata accessor for AspireHeSerializedGaloisKey(0);
          uint64_t v181 = *(void *)(v180 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v181 + 48))(v179, 1, v180))
          {
            uint64_t v182 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
            memcpy(__dsta, v179, *(void *)(*(void *)(v182 - 8) + 64));
          }
          else
          {
            *(void *)__dsta = *(void *)v179;
            v332(&__dsta[*(int *)(v180 + 20)], &v179[*(int *)(v180 + 20)], v114);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v181 + 56))(__dsta, 0, 1, v180);
          }
          uint64_t v219 = v299;
          uint64_t v218 = v304;
          uint64_t v220 = *(int *)(v299 + 24);
          v221 = &v304[v220];
          v222 = &v160[v220];
          uint64_t v223 = type metadata accessor for AspireHeSerializedRelinKey(0);
          uint64_t v224 = *(void *)(v223 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v224 + 48))(v222, 1, v223))
          {
            uint64_t v225 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
            memcpy(v221, v222, *(void *)(*(void *)(v225 - 8) + 64));
            uint64_t v164 = v314;
            uint64_t v158 = v320;
          }
          else
          {
            v332(v221, v222, v114);
            uint64_t v283 = v223;
            __dstd = v221;
            uint64_t v243 = *(int *)(v223 + 20);
            uint64_t v244 = &v221[v243];
            v245 = &v222[v243];
            uint64_t v246 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
            uint64_t v247 = *(void *)(v246 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v247 + 48))(v245, 1, v246))
            {
              uint64_t v248 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
              memcpy(v244, v245, *(void *)(*(void *)(v248 - 8) + 64));
              uint64_t v164 = v314;
              uint64_t v218 = v304;
              uint64_t v249 = v283;
            }
            else
            {
              v332(v244, v245, v114);
              uint64_t v262 = *(int *)(v246 + 20);
              uint64_t v280 = v244;
              v275 = &v244[v262];
              uint64_t v263 = &v245[v262];
              uint64_t v264 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
              uint64_t v272 = *(void *)(v264 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v272 + 48))(v263, 1, v264))
              {
                uint64_t v265 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                memcpy(v275, v263, *(void *)(*(void *)(v265 - 8) + 64));
              }
              else
              {
                *(void *)v275 = *(void *)v263;
                v332(&v275[*(int *)(v264 + 20)], &v263[*(int *)(v264 + 20)], v114);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v272 + 56))(v275, 0, 1, v264);
              }
              uint64_t v164 = v314;
              uint64_t v218 = v304;
              uint64_t v249 = v283;
              (*(void (**)(char *, void, uint64_t, uint64_t))(v247 + 56))(v280, 0, 1, v246);
            }
            (*(void (**)(char *, void, uint64_t, uint64_t))(v224 + 56))(__dstd, 0, 1, v249);
            uint64_t v158 = v320;
            uint64_t v219 = v299;
          }
          (*(void (**)(char *, void, uint64_t, uint64_t))(v293 + 56))(v218, 0, 1, v219);
          a3 = v337;
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v164 + 56))(v158, 0, 1, v329);
        goto LABEL_112;
      }
    }
    uint64_t v102 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKey?);
    memcpy(v98, v99, *(void *)(*(void *)(v102 - 8) + 64));
    a3 = v337;
LABEL_112:
    swift_storeEnumTagMultiPayload();
    goto LABEL_102;
  }
  outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v8, type metadata accessor for AMDPbHEQuery.OneOf_Query);
LABEL_8:
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
  memcpy(v8, v9, *(void *)(*(void *)(v27 - 8) + 64));
LABEL_102:
  uint64_t v257 = *(int *)(a3 + 24);
  uint64_t v258 = (char *)a1 + v257;
  v259 = (char *)v4 + v257;
  uint64_t v260 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v260 - 8) + 40))(v258, v259, v260);
  return a1;
}

uint64_t getEnumTagSinglePayload for AMDPbHEQuery(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_249C90130);
}

uint64_t sub_249C90130(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 20);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = type metadata accessor for UnknownStorage();
      int v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 24);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t storeEnumTagSinglePayload for AMDPbHEQuery(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_249C90274);
}

uint64_t sub_249C90274(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 20);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = type metadata accessor for UnknownStorage();
      int v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 24);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void type metadata completion function for AMDPbHEQuery()
{
  type metadata accessor for AMDPbHEConfig.OneOf_Config?(319, &lazy cache variable for type metadata for AMDPbHEQuery.OneOf_Query?, (void (*)(uint64_t))type metadata accessor for AMDPbHEQuery.OneOf_Query);
  if (v0 <= 0x3F)
  {
    type metadata accessor for UnknownStorage();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for AMDPbHEQuery.OneOf_Query(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v21 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v21 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v5 = a2[1];
      *a1 = *a2;
      unint64_t v6 = a2[2];
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v5, v6);
      a1[1] = v5;
      a1[2] = v6;
      uint64_t v7 = (int *)type metadata accessor for AMDPbPECQuery(0);
      uint64_t v8 = v7[6];
      uint64_t v9 = (char *)a1 + v8;
      uint64_t v10 = (char *)a2 + v8;
      uint64_t v11 = type metadata accessor for UnknownStorage();
      uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
      uint64_t v13 = v9;
      uint64_t v14 = v11;
      v12(v13, v10, v11);
      uint64_t v15 = v7[7];
      uint64_t v16 = (uint64_t *)((char *)a1 + v15);
      uint64_t v17 = (uint64_t *)((char *)a2 + v15);
      uint64_t v18 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
      uint64_t v19 = *(void *)(v18 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
      {
        uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
        memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
      }
      else
      {
        uint64_t v189 = v19;
        *uint64_t v16 = *v17;
        v16[1] = v17[1];
        uint64_t v36 = *(int *)(v18 + 28);
        uint64_t v192 = v14;
        uint64_t v37 = (char *)v16 + v36;
        uint64_t v38 = v12;
        uint64_t v39 = (char *)v17 + v36;
        swift_bridgeObjectRetain();
        uint64_t v40 = v37;
        uint64_t v14 = v192;
        uint64_t v185 = v38;
        v38(v40, v39, v192);
        uint64_t v41 = *(int *)(v18 + 32);
        uint64_t v42 = (char *)v16 + v41;
        uint64_t v43 = (char *)v17 + v41;
        uint64_t v44 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
        uint64_t v45 = *(void *)(v44 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44))
        {
          uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
          memcpy(v42, v43, *(void *)(*(void *)(v46 - 8) + 64));
          uint64_t v12 = v185;
        }
        else
        {
          uint64_t v67 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
          uint64_t v68 = *(void *)(v67 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v68 + 48))(v43, 1, v67))
          {
            uint64_t v69 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
            memcpy(v42, v43, *(void *)(*(void *)(v69 - 8) + 64));
            uint64_t v14 = v192;
          }
          else
          {
            swift_getEnumCaseMultiPayload();
            v185(v42, v43, v192);
            swift_storeEnumTagMultiPayload();
            uint64_t v85 = v67;
            uint64_t v14 = v192;
            (*(void (**)(char *, void, uint64_t, uint64_t))(v68 + 56))(v42, 0, 1, v85);
          }
          v185(&v42[*(int *)(v44 + 20)], &v43[*(int *)(v44 + 20)], v14);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v45 + 56))(v42, 0, 1, v44);
          uint64_t v12 = v185;
        }
        (*(void (**)(void *, void, uint64_t, uint64_t))(v189 + 56))(v16, 0, 1, v18);
      }
      uint64_t v86 = v7[8];
      uint64_t v87 = (char *)a1 + v86;
      uint64_t v88 = (char *)a2 + v86;
      uint64_t v89 = type metadata accessor for AMDPbEvaluationKey(0);
      uint64_t v90 = *(void *)(v89 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v90 + 48))(v88, 1, v89))
      {
        uint64_t v91 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKey?);
        memcpy(v87, v88, *(void *)(*(void *)(v91 - 8) + 64));
      }
      else
      {
        uint64_t v182 = v90;
        v12(v87, v88, v14);
        uint64_t v188 = v89;
        uint64_t v191 = v87;
        uint64_t v92 = *(int *)(v89 + 20);
        uint64_t v93 = &v87[v92];
        uint64_t v94 = v12;
        uint64_t v95 = &v88[v92];
        uint64_t v96 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
        uint64_t v97 = *(void *)(v96 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v97 + 48))(v95, 1, v96))
        {
          uint64_t v98 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
          memcpy(v93, v95, *(void *)(*(void *)(v98 - 8) + 64));
        }
        else
        {
          uint64_t v193 = v14;
          uint64_t v99 = *((void *)v95 + 1);
          *(void *)uint64_t v93 = *(void *)v95;
          unint64_t v100 = *((void *)v95 + 2);
          outlined copy of Data._Representation(v99, v100);
          *((void *)v93 + 1) = v99;
          *((void *)v93 + 2) = v100;
          uint64_t v14 = v193;
          v94(&v93[*(int *)(v96 + 24)], &v95[*(int *)(v96 + 24)], v193);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v97 + 56))(v93, 0, 1, v96);
        }
        uint64_t v102 = v188;
        uint64_t v101 = v191;
        uint64_t v103 = *(int *)(v188 + 24);
        uint64_t v104 = &v191[v103];
        uint64_t v105 = &v88[v103];
        uint64_t v106 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
        uint64_t v107 = *(void *)(v106 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v107 + 48))(v105, 1, v106))
        {
          uint64_t v108 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
          memcpy(v104, v105, *(void *)(*(void *)(v108 - 8) + 64));
          uint64_t v109 = v90;
        }
        else
        {
          uint64_t v178 = v107;
          v94(v104, v105, v14);
          uint64_t v110 = *(int *)(v106 + 20);
          uint64_t v180 = v104;
          uint64_t v111 = &v104[v110];
          uint64_t v112 = v14;
          uint64_t v113 = &v105[v110];
          uint64_t v114 = type metadata accessor for AspireHeSerializedGaloisKey(0);
          uint64_t v115 = *(void *)(v114 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v115 + 48))(v113, 1, v114))
          {
            uint64_t v116 = v94;
            uint64_t v117 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
            memcpy(v111, v113, *(void *)(*(void *)(v117 - 8) + 64));
          }
          else
          {
            *(void *)uint64_t v111 = *(void *)v113;
            uint64_t v130 = *(int *)(v114 + 20);
            uint64_t v131 = &v111[v130];
            uint64_t v132 = &v113[v130];
            swift_bridgeObjectRetain();
            uint64_t v133 = v131;
            uint64_t v116 = v94;
            v94(v133, v132, v112);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v115 + 56))(v111, 0, 1, v114);
          }
          uint64_t v134 = v112;
          uint64_t v135 = *(int *)(v106 + 24);
          uint64_t v136 = &v180[v135];
          uint64_t v137 = &v105[v135];
          uint64_t v138 = type metadata accessor for AspireHeSerializedRelinKey(0);
          uint64_t v139 = *(void *)(v138 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v139 + 48))(v137, 1, v138))
          {
            uint64_t v140 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
            memcpy(v136, v137, *(void *)(*(void *)(v140 - 8) + 64));
            uint64_t v102 = v188;
            uint64_t v101 = v191;
            uint64_t v141 = v180;
            uint64_t v109 = v182;
            uint64_t v142 = v178;
          }
          else
          {
            uint64_t v187 = v116;
            v116(v136, v137, v112);
            uint64_t v149 = *(int *)(v138 + 20);
            uint64_t v150 = &v136[v149];
            uint64_t v151 = &v137[v149];
            uint64_t v152 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
            uint64_t v153 = *(void *)(v152 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v153 + 48))(v151, 1, v152))
            {
              uint64_t v154 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
              memcpy(v150, v151, *(void *)(*(void *)(v154 - 8) + 64));
              uint64_t v102 = v188;
              uint64_t v142 = v178;
            }
            else
            {
              v187(v150, v151, v134);
              uint64_t v175 = v152;
              uint64_t v177 = v150;
              uint64_t v159 = *(int *)(v152 + 20);
              uint64_t v160 = &v150[v159];
              uint64_t v194 = v134;
              uint64_t v161 = &v151[v159];
              uint64_t v162 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
              uint64_t v163 = *(void *)(v162 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v163 + 48))(v161, 1, v162))
              {
                uint64_t v164 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                memcpy(v160, v161, *(void *)(*(void *)(v164 - 8) + 64));
              }
              else
              {
                *(void *)uint64_t v160 = *(void *)v161;
                uint64_t v167 = *(int *)(v162 + 20);
                uint64_t v173 = &v160[v167];
                uint64_t v168 = &v161[v167];
                swift_bridgeObjectRetain();
                v187(v173, v168, v194);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v163 + 56))(v160, 0, 1, v162);
              }
              uint64_t v142 = v178;
              (*(void (**)(char *, void, uint64_t, uint64_t))(v153 + 56))(v177, 0, 1, v175);
              uint64_t v102 = v188;
            }
            (*(void (**)(char *, void, uint64_t, uint64_t))(v139 + 56))(v136, 0, 1, v138);
            uint64_t v101 = v191;
            uint64_t v141 = v180;
            uint64_t v109 = v182;
          }
          (*(void (**)(char *, void, uint64_t, uint64_t))(v142 + 56))(v141, 0, 1, v106);
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v109 + 56))(v101, 0, 1, v102);
      }
    }
    else
    {
      *(_DWORD *)a1 = *(_DWORD *)a2;
      uint64_t v22 = a2[1];
      unint64_t v23 = a2[2];
      outlined copy of Data._Representation(v22, v23);
      a1[1] = v22;
      a1[2] = v23;
      uint64_t v24 = (int *)type metadata accessor for AMDPbPIRQuery(0);
      uint64_t v25 = v24[6];
      uint64_t v26 = (char *)a1 + v25;
      uint64_t v27 = (char *)a2 + v25;
      uint64_t v28 = type metadata accessor for UnknownStorage();
      uint64_t v29 = *(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 16);
      v29(v26, v27, v28);
      uint64_t v30 = v24[7];
      uint64_t v31 = (uint64_t *)((char *)a1 + v30);
      uint64_t v32 = (uint64_t *)((char *)a2 + v30);
      uint64_t v33 = type metadata accessor for AspirePirEncryptedIndices(0);
      uint64_t v34 = *(void *)(v33 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
      {
        uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
        memcpy(v31, v32, *(void *)(*(void *)(v35 - 8) + 64));
      }
      else
      {
        uint64_t v47 = v32[1];
        *uint64_t v31 = *v32;
        v31[1] = v47;
        uint64_t v48 = *(int *)(v33 + 24);
        uint64_t v49 = v28;
        uint64_t v50 = v29;
        uint64_t v51 = (char *)v31 + v48;
        uint64_t v52 = (char *)v32 + v48;
        swift_bridgeObjectRetain();
        uint64_t v53 = v51;
        uint64_t v29 = v50;
        uint64_t v28 = v49;
        v29(v53, v52, v49);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
      }
      uint64_t v54 = v24[8];
      uint64_t v55 = (char *)a1 + v54;
      uint64_t v56 = (char *)a2 + v54;
      uint64_t v57 = type metadata accessor for AMDPbEvaluationKey(0);
      uint64_t v58 = *(void *)(v57 - 8);
      uint64_t v195 = v57;
      if ((*(unsigned int (**)(char *, uint64_t))(v58 + 48))(v56, 1))
      {
        uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKey?);
        memcpy(v55, v56, *(void *)(*(void *)(v59 - 8) + 64));
      }
      else
      {
        uint64_t v190 = v58;
        v29(v55, v56, v28);
        uint64_t v60 = *(int *)(v195 + 20);
        uint64_t v61 = &v55[v60];
        uint64_t v62 = &v56[v60];
        uint64_t v63 = v29;
        uint64_t v64 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
        uint64_t v65 = *(void *)(v64 - 8);
        uint64_t v186 = v28;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v65 + 48))(v62, 1, v64))
        {
          uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
          memcpy(v61, v62, *(void *)(*(void *)(v66 - 8) + 64));
        }
        else
        {
          uint64_t v70 = *((void *)v62 + 1);
          *(void *)uint64_t v61 = *(void *)v62;
          uint64_t v181 = v55;
          unint64_t v71 = *((void *)v62 + 2);
          outlined copy of Data._Representation(v70, v71);
          *((void *)v61 + 1) = v70;
          *((void *)v61 + 2) = v71;
          uint64_t v55 = v181;
          v63(&v61[*(int *)(v64 + 24)], &v62[*(int *)(v64 + 24)], v28);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v65 + 56))(v61, 0, 1, v64);
        }
        uint64_t v72 = *(int *)(v195 + 24);
        uint64_t v73 = &v55[v72];
        uint64_t v74 = &v56[v72];
        uint64_t v75 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
        uint64_t v76 = *(void *)(v75 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v76 + 48))(v74, 1, v75))
        {
          uint64_t v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
          memcpy(v73, v74, *(void *)(*(void *)(v77 - 8) + 64));
          uint64_t v78 = v190;
        }
        else
        {
          v63(v73, v74, v186);
          uint64_t v79 = *(int *)(v75 + 20);
          uint64_t v179 = v73;
          uint64_t v80 = &v73[v79];
          uint64_t v81 = &v74[v79];
          uint64_t v82 = type metadata accessor for AspireHeSerializedGaloisKey(0);
          uint64_t v83 = *(void *)(v82 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v83 + 48))(v81, 1, v82))
          {
            uint64_t v84 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
            memcpy(v80, v81, *(void *)(*(void *)(v84 - 8) + 64));
          }
          else
          {
            *(void *)uint64_t v80 = *(void *)v81;
            uint64_t v118 = *(int *)(v82 + 20);
            uint64_t v183 = v55;
            uint64_t v119 = &v80[v118];
            uint64_t v120 = &v81[v118];
            swift_bridgeObjectRetain();
            uint64_t v121 = v119;
            uint64_t v55 = v183;
            v63(v121, v120, v186);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v83 + 56))(v80, 0, 1, v82);
          }
          uint64_t v122 = v179;
          uint64_t v123 = *(int *)(v75 + 24);
          uint64_t v124 = &v179[v123];
          uint64_t v125 = &v74[v123];
          uint64_t v126 = type metadata accessor for AspireHeSerializedRelinKey(0);
          uint64_t v127 = *(void *)(v126 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v127 + 48))(v125, 1, v126))
          {
            uint64_t v128 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
            memcpy(v124, v125, *(void *)(*(void *)(v128 - 8) + 64));
            uint64_t v78 = v190;
            uint64_t v129 = v76;
          }
          else
          {
            uint64_t v184 = v55;
            v63(v124, v125, v186);
            uint64_t v143 = *(int *)(v126 + 20);
            uint64_t v144 = &v124[v143];
            uint64_t v145 = &v125[v143];
            uint64_t v146 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
            uint64_t v147 = *(void *)(v146 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v147 + 48))(v145, 1, v146))
            {
              uint64_t v148 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
              memcpy(v144, v145, *(void *)(*(void *)(v148 - 8) + 64));
              uint64_t v122 = v179;
              uint64_t v55 = v184;
              uint64_t v129 = v76;
            }
            else
            {
              v63(v144, v145, v186);
              uint64_t v176 = v146;
              uint64_t v155 = *(int *)(v146 + 20);
              uint64_t v172 = &v144[v155];
              uint64_t v156 = &v145[v155];
              uint64_t v157 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
              uint64_t v170 = *(void *)(v157 - 8);
              uint64_t v174 = v144;
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v170 + 48))(v156, 1, v157))
              {
                uint64_t v158 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                memcpy(v172, v156, *(void *)(*(void *)(v158 - 8) + 64));
              }
              else
              {
                *(void *)uint64_t v172 = *(void *)v156;
                uint64_t v165 = *(int *)(v157 + 20);
                uint64_t v166 = &v172[v165];
                uint64_t v171 = &v156[v165];
                swift_bridgeObjectRetain();
                v63(v166, v171, v186);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v170 + 56))(v172, 0, 1, v157);
              }
              uint64_t v129 = v76;
              uint64_t v122 = v179;
              (*(void (**)(char *, void, uint64_t, uint64_t))(v147 + 56))(v174, 0, 1, v176);
              uint64_t v55 = v184;
            }
            (*(void (**)(char *, void, uint64_t, uint64_t))(v127 + 56))(v124, 0, 1, v126);
            uint64_t v78 = v190;
          }
          (*(void (**)(char *, void, uint64_t, uint64_t))(v129 + 56))(v122, 0, 1, v75);
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v78 + 56))(v55, 0, 1, v195);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for AMDPbHEQuery.OneOf_Query(uint64_t a1)
{
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined consume of Data._Representation(*(void *)(a1 + 8), *(void *)(a1 + 16));
    unint64_t v2 = (int *)type metadata accessor for AMDPbPIRQuery(0);
    uint64_t v11 = a1 + v2[6];
    uint64_t v4 = type metadata accessor for UnknownStorage();
    uint64_t v29 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
    v29(v11, v4);
    uint64_t v7 = a1 + v2[7];
    uint64_t v12 = type metadata accessor for AspirePirEncryptedIndices(0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48))(v7, 1, v12)) {
      goto LABEL_11;
    }
    swift_bridgeObjectRelease();
    uint64_t v10 = *(int *)(v12 + 24);
    goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(*(void *)(a1 + 8), *(void *)(a1 + 16));
  unint64_t v2 = (int *)type metadata accessor for AMDPbPECQuery(0);
  uint64_t v3 = a1 + v2[6];
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v29 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v29(v3, v4);
  uint64_t v5 = a1 + v2[7];
  uint64_t v6 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6))
  {
    swift_bridgeObjectRelease();
    v29(v5 + *(int *)(v6 + 28), v4);
    uint64_t v7 = v5 + *(int *)(v6 + 32);
    uint64_t v8 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v7, 1, v8))
    {
      uint64_t v9 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v7, 1, v9)
        && swift_getEnumCaseMultiPayload() <= 2)
      {
        v29(v7, v4);
      }
      uint64_t v10 = *(int *)(v8 + 20);
LABEL_10:
      v29(v7 + v10, v4);
    }
  }
LABEL_11:
  uint64_t v13 = a1 + v2[8];
  uint64_t v14 = type metadata accessor for AMDPbEvaluationKey(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48))(v13, 1, v14);
  if (!result)
  {
    v29(v13, v4);
    uint64_t v16 = v13 + *(int *)(v14 + 20);
    uint64_t v17 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 48))(v16, 1, v17))
    {
      outlined consume of Data._Representation(*(void *)(v16 + 8), *(void *)(v16 + 16));
      v29(v16 + *(int *)(v17 + 24), v4);
    }
    uint64_t v18 = v13 + *(int *)(v14 + 24);
    uint64_t v19 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 48))(v18, 1, v19);
    if (!result)
    {
      v29(v18, v4);
      uint64_t v20 = v18 + *(int *)(v19 + 20);
      uint64_t v21 = type metadata accessor for AspireHeSerializedGaloisKey(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 48))(v20, 1, v21))
      {
        swift_bridgeObjectRelease();
        v29(v20 + *(int *)(v21 + 20), v4);
      }
      uint64_t v22 = v18 + *(int *)(v19 + 24);
      uint64_t v23 = type metadata accessor for AspireHeSerializedRelinKey(0);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 48))(v22, 1, v23);
      if (!result)
      {
        v29(v22, v4);
        uint64_t v24 = v22 + *(int *)(v23 + 20);
        uint64_t v25 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 48))(v24, 1, v25);
        if (!result)
        {
          v29(v24, v4);
          uint64_t v26 = v24 + *(int *)(v25 + 20);
          uint64_t v27 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 48))(v26, 1, v27);
          if (!result)
          {
            swift_bridgeObjectRelease();
            uint64_t v28 = v26 + *(int *)(v27 + 20);
            return ((uint64_t (*)(uint64_t, uint64_t))v29)(v28, v4);
          }
        }
      }
    }
  }
  return result;
}

void *initializeWithCopy for AMDPbHEQuery.OneOf_Query(void *a1, void *a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v3 = a2[1];
    *a1 = *a2;
    unint64_t v4 = a2[2];
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v3, v4);
    a1[1] = v3;
    a1[2] = v4;
    uint64_t v5 = (int *)type metadata accessor for AMDPbPECQuery(0);
    uint64_t v6 = v5[6];
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for UnknownStorage();
    uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
    uint64_t v11 = v7;
    uint64_t v12 = v9;
    v10(v11, v8, v9);
    uint64_t v13 = v5[7];
    uint64_t v14 = (void *)((char *)a1 + v13);
    uint64_t v15 = (void *)((char *)a2 + v13);
    uint64_t v16 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
    uint64_t v17 = *(void *)(v16 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      uint64_t v182 = v12;
      *uint64_t v14 = *v15;
      v14[1] = v15[1];
      uint64_t v33 = *(int *)(v16 + 28);
      uint64_t v34 = (char *)v14 + v33;
      uint64_t v35 = v10;
      uint64_t v36 = (char *)v15 + v33;
      swift_bridgeObjectRetain();
      uint64_t v37 = v34;
      uint64_t v12 = v182;
      uint64_t v173 = v35;
      v35(v37, v36, v182);
      uint64_t v38 = *(int *)(v16 + 32);
      uint64_t v39 = (char *)v14 + v38;
      uint64_t v40 = (char *)v15 + v38;
      uint64_t v41 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
      uint64_t v42 = *(void *)(v41 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41))
      {
        uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
        memcpy(v39, v40, *(void *)(*(void *)(v43 - 8) + 64));
        uint64_t v10 = v173;
      }
      else
      {
        uint64_t v63 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
        uint64_t v180 = *(void *)(v63 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v180 + 48))(v40, 1, v63))
        {
          uint64_t v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
          memcpy(v39, v40, *(void *)(*(void *)(v64 - 8) + 64));
          uint64_t v12 = v182;
        }
        else
        {
          swift_getEnumCaseMultiPayload();
          v173(v39, v40, v182);
          swift_storeEnumTagMultiPayload();
          uint64_t v81 = v63;
          uint64_t v12 = v182;
          (*(void (**)(char *, void, uint64_t, uint64_t))(v180 + 56))(v39, 0, 1, v81);
        }
        v173(&v39[*(int *)(v41 + 20)], &v40[*(int *)(v41 + 20)], v12);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
        uint64_t v10 = v173;
      }
      (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
    uint64_t v82 = v5[8];
    uint64_t v83 = (char *)a1 + v82;
    uint64_t v84 = (char *)a2 + v82;
    uint64_t v85 = type metadata accessor for AMDPbEvaluationKey(0);
    uint64_t v86 = *(void *)(v85 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v86 + 48))(v84, 1, v85))
    {
      uint64_t v87 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKey?);
      memcpy(v83, v84, *(void *)(*(void *)(v87 - 8) + 64));
    }
    else
    {
      uint64_t v172 = v86;
      v10(v83, v84, v12);
      uint64_t v178 = v85;
      uint64_t v181 = v83;
      uint64_t v88 = *(int *)(v85 + 20);
      uint64_t v89 = &v83[v88];
      uint64_t v90 = v10;
      uint64_t v91 = &v84[v88];
      uint64_t v92 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
      uint64_t v93 = *(void *)(v92 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v93 + 48))(v91, 1, v92))
      {
        uint64_t v94 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
        memcpy(v89, v91, *(void *)(*(void *)(v94 - 8) + 64));
      }
      else
      {
        uint64_t v183 = v12;
        uint64_t v95 = *((void *)v91 + 1);
        *(void *)uint64_t v89 = *(void *)v91;
        unint64_t v96 = *((void *)v91 + 2);
        outlined copy of Data._Representation(v95, v96);
        *((void *)v89 + 1) = v95;
        *((void *)v89 + 2) = v96;
        uint64_t v12 = v183;
        v90(&v89[*(int *)(v92 + 24)], &v91[*(int *)(v92 + 24)], v183);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v93 + 56))(v89, 0, 1, v92);
      }
      uint64_t v98 = v178;
      uint64_t v97 = v181;
      uint64_t v99 = *(int *)(v178 + 24);
      unint64_t v100 = &v181[v99];
      uint64_t v101 = &v84[v99];
      uint64_t v102 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
      uint64_t v103 = *(void *)(v102 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v103 + 48))(v101, 1, v102))
      {
        uint64_t v104 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
        memcpy(v100, v101, *(void *)(*(void *)(v104 - 8) + 64));
      }
      else
      {
        uint64_t v169 = v103;
        v90(v100, v101, v12);
        uint64_t v105 = *(int *)(v102 + 20);
        uint64_t v106 = &v100[v105];
        uint64_t v107 = v12;
        uint64_t v108 = &v101[v105];
        uint64_t v109 = type metadata accessor for AspireHeSerializedGaloisKey(0);
        uint64_t v110 = *(void *)(v109 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v110 + 48))(v108, 1, v109))
        {
          uint64_t v111 = v90;
          uint64_t v112 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
          memcpy(v106, v108, *(void *)(*(void *)(v112 - 8) + 64));
        }
        else
        {
          *(void *)uint64_t v106 = *(void *)v108;
          uint64_t v124 = *(int *)(v109 + 20);
          uint64_t v125 = &v106[v124];
          uint64_t v126 = &v108[v124];
          swift_bridgeObjectRetain();
          uint64_t v127 = v125;
          uint64_t v111 = v90;
          v90(v127, v126, v107);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v110 + 56))(v106, 0, 1, v109);
        }
        uint64_t v128 = v107;
        uint64_t v129 = *(int *)(v102 + 24);
        uint64_t v130 = &v100[v129];
        uint64_t v131 = &v101[v129];
        uint64_t v132 = type metadata accessor for AspireHeSerializedRelinKey(0);
        uint64_t v133 = *(void *)(v132 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v133 + 48))(v131, 1, v132))
        {
          uint64_t v134 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
          memcpy(v130, v131, *(void *)(*(void *)(v134 - 8) + 64));
          uint64_t v98 = v178;
          uint64_t v97 = v181;
        }
        else
        {
          uint64_t v175 = v111;
          v111(v130, v131, v107);
          uint64_t v141 = *(int *)(v132 + 20);
          uint64_t v142 = &v130[v141];
          uint64_t v143 = &v131[v141];
          uint64_t v144 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
          uint64_t v145 = *(void *)(v144 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v145 + 48))(v143, 1, v144))
          {
            uint64_t v146 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
            memcpy(v142, v143, *(void *)(*(void *)(v146 - 8) + 64));
          }
          else
          {
            v175(v142, v143, v128);
            uint64_t v166 = v144;
            uint64_t v168 = v142;
            uint64_t v152 = *(int *)(v144 + 20);
            uint64_t v153 = &v142[v152];
            uint64_t v184 = v128;
            uint64_t v154 = &v143[v152];
            uint64_t v155 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
            uint64_t v156 = *(void *)(v155 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v156 + 48))(v154, 1, v155))
            {
              uint64_t v157 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
              memcpy(v153, v154, *(void *)(*(void *)(v157 - 8) + 64));
            }
            else
            {
              *(void *)uint64_t v153 = *(void *)v154;
              uint64_t v160 = *(int *)(v155 + 20);
              uint64_t v164 = &v153[v160];
              uint64_t v161 = &v154[v160];
              swift_bridgeObjectRetain();
              v175(v164, v161, v184);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v156 + 56))(v153, 0, 1, v155);
            }
            (*(void (**)(char *, void, uint64_t, uint64_t))(v145 + 56))(v168, 0, 1, v166);
          }
          uint64_t v98 = v178;
          (*(void (**)(char *, void, uint64_t, uint64_t))(v133 + 56))(v130, 0, 1, v132);
          uint64_t v97 = v181;
        }
        uint64_t v86 = v172;
        (*(void (**)(char *, void, uint64_t, uint64_t))(v169 + 56))(v100, 0, 1, v102);
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v86 + 56))(v97, 0, 1, v98);
    }
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    uint64_t v19 = a2[1];
    unint64_t v20 = a2[2];
    outlined copy of Data._Representation(v19, v20);
    a1[1] = v19;
    a1[2] = v20;
    uint64_t v21 = (int *)type metadata accessor for AMDPbPIRQuery(0);
    uint64_t v22 = v21[6];
    uint64_t v23 = (char *)a1 + v22;
    uint64_t v24 = (char *)a2 + v22;
    uint64_t v25 = type metadata accessor for UnknownStorage();
    uint64_t v26 = *(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 16);
    v26(v23, v24, v25);
    uint64_t v27 = v21[7];
    uint64_t v28 = (void *)((char *)a1 + v27);
    uint64_t v29 = (void *)((char *)a2 + v27);
    uint64_t v30 = type metadata accessor for AspirePirEncryptedIndices(0);
    uint64_t v31 = *(void *)(v30 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
    {
      uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
      memcpy(v28, v29, *(void *)(*(void *)(v32 - 8) + 64));
    }
    else
    {
      uint64_t v44 = v29[1];
      *uint64_t v28 = *v29;
      v28[1] = v44;
      uint64_t v45 = *(int *)(v30 + 24);
      uint64_t v46 = v25;
      uint64_t v47 = v26;
      uint64_t v48 = (char *)v28 + v45;
      uint64_t v49 = (char *)v29 + v45;
      swift_bridgeObjectRetain();
      uint64_t v50 = v48;
      uint64_t v26 = v47;
      uint64_t v25 = v46;
      v26(v50, v49, v46);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
    }
    uint64_t v51 = v21[8];
    __dst = (char *)a1 + v51;
    uint64_t v52 = (char *)a2 + v51;
    uint64_t v53 = type metadata accessor for AMDPbEvaluationKey(0);
    uint64_t v54 = *(void *)(v53 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48))(v52, 1, v53))
    {
      uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKey?);
      memcpy(__dst, v52, *(void *)(*(void *)(v55 - 8) + 64));
    }
    else
    {
      uint64_t v179 = v54;
      v26(__dst, v52, v25);
      uint64_t v56 = *(int *)(v53 + 20);
      uint64_t v57 = &__dst[v56];
      uint64_t v58 = v26;
      uint64_t v59 = &v52[v56];
      uint64_t v60 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
      uint64_t v61 = *(void *)(v60 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v61 + 48))(v59, 1, v60))
      {
        uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
        memcpy(v57, v59, *(void *)(*(void *)(v62 - 8) + 64));
      }
      else
      {
        uint64_t v176 = v53;
        uint64_t v65 = *((void *)v59 + 1);
        *(void *)uint64_t v57 = *(void *)v59;
        unint64_t v66 = *((void *)v59 + 2);
        outlined copy of Data._Representation(v65, v66);
        *((void *)v57 + 1) = v65;
        *((void *)v57 + 2) = v66;
        uint64_t v53 = v176;
        v58(&v57[*(int *)(v60 + 24)], &v59[*(int *)(v60 + 24)], v25);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v61 + 56))(v57, 0, 1, v60);
      }
      uint64_t v67 = *(int *)(v53 + 24);
      uint64_t v68 = &__dst[v67];
      uint64_t v69 = &v52[v67];
      uint64_t v70 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
      uint64_t v71 = *(void *)(v70 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v71 + 48))(v69, 1, v70))
      {
        uint64_t v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
        memcpy(v68, v69, *(void *)(*(void *)(v72 - 8) + 64));
        uint64_t v73 = v179;
      }
      else
      {
        uint64_t v177 = v53;
        v58(v68, v69, v25);
        uint64_t v74 = *(int *)(v70 + 20);
        uint64_t v75 = &v68[v74];
        uint64_t v76 = &v69[v74];
        uint64_t v77 = type metadata accessor for AspireHeSerializedGaloisKey(0);
        uint64_t v78 = *(void *)(v77 - 8);
        uint64_t v171 = v71;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v78 + 48))(v76, 1, v77))
        {
          uint64_t v79 = v58;
          uint64_t v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
          memcpy(v75, v76, *(void *)(*(void *)(v80 - 8) + 64));
        }
        else
        {
          *(void *)uint64_t v75 = *(void *)v76;
          uint64_t v113 = *(int *)(v77 + 20);
          uint64_t v114 = &v75[v113];
          uint64_t v115 = &v76[v113];
          swift_bridgeObjectRetain();
          uint64_t v116 = v114;
          uint64_t v79 = v58;
          v58(v116, v115, v25);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v78 + 56))(v75, 0, 1, v77);
        }
        uint64_t v53 = v177;
        uint64_t v117 = *(int *)(v70 + 24);
        uint64_t v118 = &v68[v117];
        uint64_t v119 = &v69[v117];
        uint64_t v120 = type metadata accessor for AspireHeSerializedRelinKey(0);
        uint64_t v121 = *(void *)(v120 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v121 + 48))(v119, 1, v120))
        {
          uint64_t v122 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
          memcpy(v118, v119, *(void *)(*(void *)(v122 - 8) + 64));
          uint64_t v73 = v179;
          uint64_t v123 = v171;
        }
        else
        {
          uint64_t v174 = v79;
          v79(v118, v119, v25);
          uint64_t v135 = *(int *)(v120 + 20);
          uint64_t v136 = &v118[v135];
          uint64_t v137 = &v119[v135];
          uint64_t v138 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
          uint64_t v139 = *(void *)(v138 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v139 + 48))(v137, 1, v138))
          {
            uint64_t v140 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
            memcpy(v136, v137, *(void *)(*(void *)(v140 - 8) + 64));
            uint64_t v53 = v177;
            uint64_t v123 = v171;
          }
          else
          {
            v174(v136, v137, v25);
            uint64_t v167 = v138;
            uint64_t v170 = v136;
            uint64_t v147 = *(int *)(v138 + 20);
            uint64_t v148 = &v136[v147];
            uint64_t v149 = &v137[v147];
            uint64_t v150 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
            uint64_t v165 = *(void *)(v150 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v165 + 48))(v149, 1, v150))
            {
              uint64_t v151 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
              memcpy(v148, v149, *(void *)(*(void *)(v151 - 8) + 64));
            }
            else
            {
              *(void *)uint64_t v148 = *(void *)v149;
              uint64_t v158 = *(int *)(v150 + 20);
              uint64_t v163 = &v148[v158];
              uint64_t v159 = &v149[v158];
              swift_bridgeObjectRetain();
              v174(v163, v159, v25);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v165 + 56))(v148, 0, 1, v150);
            }
            uint64_t v123 = v171;
            (*(void (**)(char *, void, uint64_t, uint64_t))(v139 + 56))(v170, 0, 1, v167);
            uint64_t v53 = v177;
          }
          (*(void (**)(char *, void, uint64_t, uint64_t))(v121 + 56))(v118, 0, 1, v120);
          uint64_t v73 = v179;
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v123 + 56))(v68, 0, 1, v70);
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v73 + 56))(__dst, 0, 1, v53);
    }
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *assignWithCopy for AMDPbHEQuery.OneOf_Query(void *a1, void *a2)
{
  if (a1 != a2)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)a1, type metadata accessor for AMDPbHEQuery.OneOf_Query);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      uint64_t v3 = a2[1];
      unint64_t v4 = a2[2];
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v3, v4);
      a1[1] = v3;
      a1[2] = v4;
      uint64_t v5 = (int *)type metadata accessor for AMDPbPECQuery(0);
      uint64_t v6 = v5[6];
      uint64_t v7 = (char *)a1 + v6;
      uint64_t v8 = (char *)a2 + v6;
      uint64_t v9 = type metadata accessor for UnknownStorage();
      uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
      uint64_t v11 = v7;
      uint64_t v12 = v9;
      v10(v11, v8, v9);
      uint64_t v13 = v5[7];
      uint64_t v14 = (_DWORD *)((char *)a1 + v13);
      uint64_t v15 = (_DWORD *)((char *)a2 + v13);
      uint64_t v16 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
      uint64_t v17 = *(void *)(v16 - 8);
      if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
      {
        uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
        memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
      }
      else
      {
        uint64_t v184 = v12;
        *uint64_t v14 = *v15;
        v14[1] = v15[1];
        *((void *)v14 + 1) = *((void *)v15 + 1);
        uint64_t v33 = *(int *)(v16 + 28);
        uint64_t v34 = (char *)v14 + v33;
        uint64_t v35 = v10;
        uint64_t v36 = (char *)v15 + v33;
        swift_bridgeObjectRetain();
        uint64_t v37 = v34;
        uint64_t v12 = v184;
        uint64_t v181 = v35;
        v35(v37, v36, v184);
        uint64_t v38 = *(int *)(v16 + 32);
        uint64_t v39 = (char *)v14 + v38;
        uint64_t v40 = (char *)v15 + v38;
        uint64_t v41 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
        uint64_t v42 = *(void *)(v41 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41))
        {
          uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
          memcpy(v39, v40, *(void *)(*(void *)(v43 - 8) + 64));
          uint64_t v10 = v181;
        }
        else
        {
          uint64_t v62 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
          uint64_t v177 = *(void *)(v62 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v177 + 48))(v40, 1, v62))
          {
            uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
            memcpy(v39, v40, *(void *)(*(void *)(v63 - 8) + 64));
            uint64_t v64 = v181;
            uint64_t v12 = v184;
          }
          else
          {
            swift_getEnumCaseMultiPayload();
            v181(v39, v40, v184);
            swift_storeEnumTagMultiPayload();
            uint64_t v81 = v62;
            uint64_t v12 = v184;
            (*(void (**)(char *, void, uint64_t, uint64_t))(v177 + 56))(v39, 0, 1, v81);
            uint64_t v64 = v181;
          }
          uint64_t v82 = *(int *)(v41 + 20);
          uint64_t v83 = &v40[v82];
          uint64_t v84 = v64;
          v64(&v39[v82], v83, v12);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
          uint64_t v10 = v84;
        }
        (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
      }
      uint64_t v85 = v5[8];
      uint64_t v86 = (char *)a1 + v85;
      uint64_t v87 = (char *)a2 + v85;
      uint64_t v88 = type metadata accessor for AMDPbEvaluationKey(0);
      uint64_t v89 = *(void *)(v88 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v89 + 48))(v87, 1, v88))
      {
        uint64_t v90 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKey?);
        memcpy(v86, v87, *(void *)(*(void *)(v90 - 8) + 64));
      }
      else
      {
        uint64_t v174 = v89;
        v10(v86, v87, v12);
        uint64_t v175 = v86;
        uint64_t v180 = v88;
        uint64_t v91 = *(int *)(v88 + 20);
        uint64_t v92 = &v86[v91];
        uint64_t v93 = v10;
        uint64_t v94 = &v87[v91];
        uint64_t v95 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
        uint64_t v96 = *(void *)(v95 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v96 + 48))(v94, 1, v95))
        {
          uint64_t v97 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
          memcpy(v92, v94, *(void *)(*(void *)(v97 - 8) + 64));
        }
        else
        {
          *(void *)uint64_t v92 = *(void *)v94;
          uint64_t v185 = v12;
          uint64_t v98 = *((void *)v94 + 1);
          unint64_t v99 = *((void *)v94 + 2);
          outlined copy of Data._Representation(v98, v99);
          *((void *)v92 + 1) = v98;
          *((void *)v92 + 2) = v99;
          uint64_t v12 = v185;
          v93(&v92[*(int *)(v95 + 24)], &v94[*(int *)(v95 + 24)], v185);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v96 + 56))(v92, 0, 1, v95);
        }
        unint64_t v100 = v175;
        uint64_t v101 = v180;
        uint64_t v102 = *(int *)(v180 + 24);
        uint64_t v103 = &v175[v102];
        uint64_t v104 = &v87[v102];
        uint64_t v105 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
        uint64_t v106 = *(void *)(v105 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v106 + 48))(v104, 1, v105))
        {
          uint64_t v107 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
          memcpy(v103, v104, *(void *)(*(void *)(v107 - 8) + 64));
          uint64_t v108 = v174;
        }
        else
        {
          uint64_t v186 = v106;
          v93(v103, v104, v12);
          uint64_t v109 = *(int *)(v105 + 20);
          uint64_t v110 = v93;
          uint64_t v111 = &v103[v109];
          uint64_t v112 = v12;
          uint64_t v113 = &v104[v109];
          uint64_t v114 = type metadata accessor for AspireHeSerializedGaloisKey(0);
          uint64_t v115 = *(void *)(v114 - 8);
          uint64_t v183 = v110;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v115 + 48))(v113, 1, v114))
          {
            uint64_t v116 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
            memcpy(v111, v113, *(void *)(*(void *)(v116 - 8) + 64));
          }
          else
          {
            *(void *)uint64_t v111 = *(void *)v113;
            uint64_t v128 = *(int *)(v114 + 20);
            uint64_t v170 = &v111[v128];
            uint64_t v129 = &v113[v128];
            swift_bridgeObjectRetain();
            v110(v170, v129, v112);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v115 + 56))(v111, 0, 1, v114);
          }
          uint64_t v101 = v180;
          uint64_t v130 = *(int *)(v105 + 24);
          uint64_t v131 = &v103[v130];
          uint64_t v132 = &v104[v130];
          uint64_t v133 = type metadata accessor for AspireHeSerializedRelinKey(0);
          uint64_t v134 = *(void *)(v133 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v134 + 48))(v132, 1, v133))
          {
            uint64_t v135 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
            memcpy(v131, v132, *(void *)(*(void *)(v135 - 8) + 64));
          }
          else
          {
            uint64_t v171 = v134;
            v183(v131, v132, v112);
            uint64_t v142 = *(int *)(v133 + 20);
            uint64_t v143 = &v131[v142];
            uint64_t v144 = &v132[v142];
            uint64_t v145 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
            uint64_t v146 = *(void *)(v145 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v146 + 48))(v144, 1, v145))
            {
              uint64_t v147 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
              memcpy(v143, v144, *(void *)(*(void *)(v147 - 8) + 64));
            }
            else
            {
              v183(v143, v144, v112);
              uint64_t v167 = v145;
              uint64_t v169 = v143;
              uint64_t v153 = *(int *)(v145 + 20);
              uint64_t v154 = &v143[v153];
              uint64_t v155 = &v144[v153];
              uint64_t v156 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
              uint64_t v157 = *(void *)(v156 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v157 + 48))(v155, 1, v156))
              {
                uint64_t v158 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                memcpy(v154, v155, *(void *)(*(void *)(v158 - 8) + 64));
              }
              else
              {
                *(void *)uint64_t v154 = *(void *)v155;
                uint64_t v161 = *(int *)(v156 + 20);
                uint64_t v165 = &v154[v161];
                uint64_t v162 = &v155[v161];
                swift_bridgeObjectRetain();
                v183(v165, v162, v112);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v157 + 56))(v154, 0, 1, v156);
              }
              (*(void (**)(char *, void, uint64_t, uint64_t))(v146 + 56))(v169, 0, 1, v167);
            }
            uint64_t v101 = v180;
            (*(void (**)(char *, void, uint64_t, uint64_t))(v171 + 56))(v131, 0, 1, v133);
          }
          uint64_t v108 = v174;
          unint64_t v100 = v175;
          (*(void (**)(char *, void, uint64_t, uint64_t))(v186 + 56))(v103, 0, 1, v105);
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v108 + 56))(v100, 0, 1, v101);
      }
    }
    else
    {
      *(_DWORD *)a1 = *(_DWORD *)a2;
      uint64_t v19 = a2[1];
      unint64_t v20 = a2[2];
      outlined copy of Data._Representation(v19, v20);
      a1[1] = v19;
      a1[2] = v20;
      uint64_t v21 = (int *)type metadata accessor for AMDPbPIRQuery(0);
      uint64_t v22 = v21[6];
      uint64_t v23 = (char *)a1 + v22;
      uint64_t v24 = (char *)a2 + v22;
      uint64_t v25 = type metadata accessor for UnknownStorage();
      uint64_t v26 = *(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 16);
      v26(v23, v24, v25);
      uint64_t v27 = v21[7];
      uint64_t v28 = (void *)((char *)a1 + v27);
      uint64_t v29 = (void *)((char *)a2 + v27);
      uint64_t v30 = type metadata accessor for AspirePirEncryptedIndices(0);
      uint64_t v31 = *(void *)(v30 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
      {
        uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
        memcpy(v28, v29, *(void *)(*(void *)(v32 - 8) + 64));
      }
      else
      {
        *uint64_t v28 = *v29;
        v28[1] = v29[1];
        uint64_t v44 = *(int *)(v30 + 24);
        uint64_t v45 = v25;
        uint64_t v46 = v26;
        uint64_t v47 = (char *)v28 + v44;
        uint64_t v48 = (char *)v29 + v44;
        swift_bridgeObjectRetain();
        uint64_t v49 = v47;
        uint64_t v26 = v46;
        uint64_t v25 = v45;
        v26(v49, v48, v45);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
      }
      uint64_t v50 = v21[8];
      __dst = (char *)a1 + v50;
      uint64_t v51 = (char *)a2 + v50;
      uint64_t v52 = type metadata accessor for AMDPbEvaluationKey(0);
      uint64_t v53 = *(void *)(v52 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48))(v51, 1, v52))
      {
        uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKey?);
        memcpy(__dst, v51, *(void *)(*(void *)(v54 - 8) + 64));
      }
      else
      {
        uint64_t v182 = v53;
        v26(__dst, v51, v25);
        uint64_t v55 = *(int *)(v52 + 20);
        uint64_t v56 = &__dst[v55];
        uint64_t v57 = v26;
        uint64_t v58 = &v51[v55];
        uint64_t v59 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
        uint64_t v60 = *(void *)(v59 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v60 + 48))(v58, 1, v59))
        {
          uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
          memcpy(v56, v58, *(void *)(*(void *)(v61 - 8) + 64));
        }
        else
        {
          *(void *)uint64_t v56 = *(void *)v58;
          uint64_t v178 = v52;
          uint64_t v65 = *((void *)v58 + 1);
          unint64_t v66 = *((void *)v58 + 2);
          outlined copy of Data._Representation(v65, v66);
          *((void *)v56 + 1) = v65;
          *((void *)v56 + 2) = v66;
          uint64_t v52 = v178;
          v57(&v56[*(int *)(v59 + 24)], &v58[*(int *)(v59 + 24)], v25);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v60 + 56))(v56, 0, 1, v59);
        }
        uint64_t v67 = *(int *)(v52 + 24);
        uint64_t v68 = &__dst[v67];
        uint64_t v69 = &v51[v67];
        uint64_t v70 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
        uint64_t v71 = *(void *)(v70 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v71 + 48))(v69, 1, v70))
        {
          uint64_t v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
          memcpy(v68, v69, *(void *)(*(void *)(v72 - 8) + 64));
          uint64_t v73 = v182;
        }
        else
        {
          uint64_t v179 = v52;
          v57(v68, v69, v25);
          uint64_t v74 = *(int *)(v70 + 20);
          uint64_t v75 = &v68[v74];
          uint64_t v76 = &v69[v74];
          uint64_t v77 = type metadata accessor for AspireHeSerializedGaloisKey(0);
          uint64_t v78 = *(void *)(v77 - 8);
          uint64_t v173 = v71;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v78 + 48))(v76, 1, v77))
          {
            uint64_t v79 = v57;
            uint64_t v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
            memcpy(v75, v76, *(void *)(*(void *)(v80 - 8) + 64));
          }
          else
          {
            *(void *)uint64_t v75 = *(void *)v76;
            uint64_t v117 = *(int *)(v77 + 20);
            uint64_t v118 = &v75[v117];
            uint64_t v119 = &v76[v117];
            swift_bridgeObjectRetain();
            uint64_t v120 = v118;
            uint64_t v79 = v57;
            v57(v120, v119, v25);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v78 + 56))(v75, 0, 1, v77);
          }
          uint64_t v52 = v179;
          uint64_t v121 = *(int *)(v70 + 24);
          uint64_t v122 = &v68[v121];
          uint64_t v123 = &v69[v121];
          uint64_t v124 = type metadata accessor for AspireHeSerializedRelinKey(0);
          uint64_t v125 = *(void *)(v124 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v125 + 48))(v123, 1, v124))
          {
            uint64_t v126 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
            memcpy(v122, v123, *(void *)(*(void *)(v126 - 8) + 64));
            uint64_t v73 = v182;
            uint64_t v127 = v173;
          }
          else
          {
            uint64_t v176 = v79;
            v79(v122, v123, v25);
            uint64_t v136 = *(int *)(v124 + 20);
            uint64_t v137 = &v122[v136];
            uint64_t v138 = &v123[v136];
            uint64_t v139 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
            uint64_t v140 = *(void *)(v139 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v140 + 48))(v138, 1, v139))
            {
              uint64_t v141 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
              memcpy(v137, v138, *(void *)(*(void *)(v141 - 8) + 64));
              uint64_t v52 = v179;
              uint64_t v127 = v173;
            }
            else
            {
              v176(v137, v138, v25);
              uint64_t v168 = v139;
              uint64_t v172 = v137;
              uint64_t v148 = *(int *)(v139 + 20);
              uint64_t v149 = &v137[v148];
              uint64_t v150 = &v138[v148];
              uint64_t v151 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
              uint64_t v166 = *(void *)(v151 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v166 + 48))(v150, 1, v151))
              {
                uint64_t v152 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                memcpy(v149, v150, *(void *)(*(void *)(v152 - 8) + 64));
              }
              else
              {
                *(void *)uint64_t v149 = *(void *)v150;
                uint64_t v159 = *(int *)(v151 + 20);
                uint64_t v164 = &v149[v159];
                uint64_t v160 = &v150[v159];
                swift_bridgeObjectRetain();
                v176(v164, v160, v25);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v166 + 56))(v149, 0, 1, v151);
              }
              uint64_t v127 = v173;
              (*(void (**)(char *, void, uint64_t, uint64_t))(v140 + 56))(v172, 0, 1, v168);
              uint64_t v52 = v179;
            }
            (*(void (**)(char *, void, uint64_t, uint64_t))(v125 + 56))(v122, 0, 1, v124);
            uint64_t v73 = v182;
          }
          (*(void (**)(char *, void, uint64_t, uint64_t))(v127 + 56))(v68, 0, 1, v70);
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v73 + 56))(__dst, 0, 1, v52);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t initializeWithTake for AMDPbHEQuery.OneOf_Query(uint64_t a1, uint64_t a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *(void *)a1 = *(void *)a2;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    unint64_t v4 = (int *)type metadata accessor for AMDPbPECQuery(0);
    uint64_t v5 = v4[6];
    uint64_t v6 = a1 + v5;
    uint64_t v7 = a2 + v5;
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = (void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32);
    uint64_t v10 = v6;
    uint64_t v11 = *v9;
    (*v9)(v10, v7, v8);
    uint64_t v12 = v4[7];
    uint64_t v162 = a1;
    uint64_t v13 = (void *)(a1 + v12);
    uint64_t v14 = (void *)(a2 + v12);
    uint64_t v15 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
    uint64_t v16 = *(void *)(v15 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
      memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
      a1 = v162;
    }
    else
    {
      *uint64_t v13 = *v14;
      v13[1] = v14[1];
      uint64_t v157 = v8;
      v11((uint64_t)v13 + *(int *)(v15 + 28), (uint64_t)v14 + *(int *)(v15 + 28), v8);
      uint64_t v30 = *(int *)(v15 + 32);
      uint64_t v31 = (char *)v13 + v30;
      uint64_t v32 = (char *)v14 + v30;
      uint64_t v33 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
      uint64_t v34 = *(void *)(v33 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
      {
        uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
        memcpy(v31, v32, *(void *)(*(void *)(v35 - 8) + 64));
        uint64_t v8 = v157;
      }
      else
      {
        uint64_t v148 = v11;
        uint64_t v48 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
        uint64_t v154 = *(void *)(v48 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v154 + 48))(v32, 1, v48))
        {
          uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
          memcpy(v31, v32, *(void *)(*(void *)(v49 - 8) + 64));
          uint64_t v50 = v157;
          uint64_t v11 = v148;
        }
        else
        {
          swift_getEnumCaseMultiPayload();
          v148((uint64_t)v31, (uint64_t)v32, v157);
          swift_storeEnumTagMultiPayload();
          uint64_t v65 = v48;
          uint64_t v11 = v148;
          (*(void (**)(char *, void, uint64_t, uint64_t))(v154 + 56))(v31, 0, 1, v65);
          uint64_t v50 = v157;
        }
        uint64_t v66 = *(int *)(v33 + 20);
        uint64_t v67 = &v32[v66];
        uint64_t v68 = v50;
        v11((uint64_t)&v31[v66], (uint64_t)v67, v50);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
        uint64_t v8 = v68;
      }
      a1 = v162;
      (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
    uint64_t v69 = v4[8];
    uint64_t v70 = (char *)(a1 + v69);
    uint64_t v71 = (char *)(a2 + v69);
    uint64_t v72 = type metadata accessor for AMDPbEvaluationKey(0);
    uint64_t v73 = *(void *)(v72 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v73 + 48))(v71, 1, v72))
    {
      uint64_t v74 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKey?);
      memcpy(v70, v71, *(void *)(*(void *)(v74 - 8) + 64));
    }
    else
    {
      uint64_t v156 = v73;
      v11((uint64_t)v70, (uint64_t)v71, v8);
      uint64_t v75 = *(int *)(v72 + 20);
      uint64_t v76 = &v70[v75];
      uint64_t v77 = v11;
      uint64_t v78 = &v71[v75];
      uint64_t v79 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
      uint64_t v80 = v8;
      uint64_t v81 = *(void *)(v79 - 8);
      uint64_t v159 = v80;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v81 + 48))(v78, 1, v79))
      {
        uint64_t v82 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
        memcpy(v76, v78, *(void *)(*(void *)(v82 - 8) + 64));
      }
      else
      {
        *(void *)uint64_t v76 = *(void *)v78;
        *(_OWORD *)(v76 + 8) = *(_OWORD *)(v78 + 8);
        v77((uint64_t)&v76[*(int *)(v79 + 24)], (uint64_t)&v78[*(int *)(v79 + 24)], v80);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v81 + 56))(v76, 0, 1, v79);
      }
      uint64_t v83 = *(int *)(v72 + 24);
      uint64_t v84 = &v70[v83];
      uint64_t v85 = &v71[v83];
      uint64_t v86 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
      uint64_t v87 = *(void *)(v86 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v87 + 48))(v85, 1, v86))
      {
        uint64_t v88 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
        memcpy(v84, v85, *(void *)(*(void *)(v88 - 8) + 64));
        a1 = v162;
        uint64_t v89 = v156;
      }
      else
      {
        uint64_t v146 = v87;
        v77((uint64_t)v84, (uint64_t)v85, v159);
        uint64_t v152 = v86;
        uint64_t v90 = *(int *)(v86 + 20);
        uint64_t v147 = v84;
        uint64_t v91 = &v84[v90];
        uint64_t v92 = &v85[v90];
        uint64_t v93 = type metadata accessor for AspireHeSerializedGaloisKey(0);
        uint64_t v94 = *(void *)(v93 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v94 + 48))(v92, 1, v93))
        {
          uint64_t v95 = v77;
          uint64_t v96 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
          memcpy(v91, v92, *(void *)(*(void *)(v96 - 8) + 64));
        }
        else
        {
          *(void *)uint64_t v91 = *(void *)v92;
          uint64_t v95 = v77;
          v77((uint64_t)&v91[*(int *)(v93 + 20)], (uint64_t)&v92[*(int *)(v93 + 20)], v159);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v94 + 56))(v91, 0, 1, v93);
        }
        uint64_t v105 = v147;
        uint64_t v106 = *(int *)(v152 + 24);
        uint64_t v107 = &v147[v106];
        uint64_t v108 = &v85[v106];
        uint64_t v109 = type metadata accessor for AspireHeSerializedRelinKey(0);
        uint64_t v110 = *(void *)(v109 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v110 + 48))(v108, 1, v109))
        {
          uint64_t v111 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
          memcpy(v107, v108, *(void *)(*(void *)(v111 - 8) + 64));
          a1 = v162;
          uint64_t v112 = v152;
          uint64_t v89 = v156;
          uint64_t v113 = v146;
        }
        else
        {
          uint64_t v150 = v95;
          v95((uint64_t)v107, (uint64_t)v108, v159);
          uint64_t v120 = *(int *)(v109 + 20);
          uint64_t v121 = &v107[v120];
          uint64_t v122 = &v108[v120];
          uint64_t v123 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
          uint64_t v124 = *(void *)(v123 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v124 + 48))(v122, 1, v123))
          {
            uint64_t v125 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
            memcpy(v121, v122, *(void *)(*(void *)(v125 - 8) + 64));
            uint64_t v89 = v156;
            uint64_t v113 = v146;
          }
          else
          {
            uint64_t v161 = v124;
            v150((uint64_t)v121, (uint64_t)v122, v159);
            uint64_t v132 = *(int *)(v123 + 20);
            uint64_t v142 = v123;
            __dsta = &v121[v132];
            uint64_t v133 = &v122[v132];
            uint64_t v134 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
            uint64_t v140 = *(void *)(v134 - 8);
            uint64_t v135 = v133;
            int v136 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v140 + 48))(v133, 1, v134);
            uint64_t v137 = v121;
            if (v136)
            {
              uint64_t v138 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
              memcpy(__dsta, v135, *(void *)(*(void *)(v138 - 8) + 64));
            }
            else
            {
              *(void *)__dsta = *v135;
              v150((uint64_t)&__dsta[*(int *)(v134 + 20)], (uint64_t)v135 + *(int *)(v134 + 20), v159);
              uint64_t v137 = v121;
              (*(void (**)(char *, void, uint64_t, uint64_t))(v140 + 56))(__dsta, 0, 1, v134);
            }
            uint64_t v89 = v156;
            uint64_t v113 = v146;
            (*(void (**)(char *, void, uint64_t, uint64_t))(v161 + 56))(v137, 0, 1, v142);
          }
          (*(void (**)(char *, void, uint64_t, uint64_t))(v110 + 56))(v107, 0, 1, v109);
          a1 = v162;
          uint64_t v105 = v147;
          uint64_t v112 = v152;
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v113 + 56))(v105, 0, 1, v112);
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v89 + 56))(v70, 0, 1, v72);
    }
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    uint64_t v18 = (int *)type metadata accessor for AMDPbPIRQuery(0);
    uint64_t v19 = v18[6];
    uint64_t v20 = a1 + v19;
    uint64_t v21 = a2 + v19;
    uint64_t v22 = type metadata accessor for UnknownStorage();
    uint64_t v23 = *(void (**)(void, void, void))(*(void *)(v22 - 8) + 32);
    v23(v20, v21, v22);
    uint64_t v24 = v18[7];
    uint64_t v25 = (_OWORD *)(a1 + v24);
    uint64_t v26 = (_OWORD *)(a2 + v24);
    uint64_t v27 = type metadata accessor for AspirePirEncryptedIndices(0);
    uint64_t v28 = *(void *)(v27 - 8);
    uint64_t v160 = v23;
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
    {
      uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
      memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
    }
    else
    {
      _OWORD *v25 = *v26;
      v23((char *)v25 + *(int *)(v27 + 24), (char *)v26 + *(int *)(v27 + 24), v22);
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
    }
    uint64_t v36 = v18[8];
    uint64_t v37 = (char *)(a1 + v36);
    uint64_t v38 = (char *)(a2 + v36);
    uint64_t v39 = type metadata accessor for AMDPbEvaluationKey(0);
    uint64_t v40 = *(void *)(v39 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39))
    {
      uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKey?);
      memcpy(v37, v38, *(void *)(*(void *)(v41 - 8) + 64));
    }
    else
    {
      uint64_t v158 = v40;
      uint64_t v163 = a1;
      v160(v37, v38, v22);
      uint64_t v42 = *(int *)(v39 + 20);
      uint64_t v43 = &v37[v42];
      uint64_t v44 = &v38[v42];
      uint64_t v45 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
      uint64_t v46 = *(void *)(v45 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v44, 1, v45))
      {
        uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
        memcpy(v43, v44, *(void *)(*(void *)(v47 - 8) + 64));
      }
      else
      {
        *(void *)uint64_t v43 = *(void *)v44;
        *(_OWORD *)(v43 + 8) = *(_OWORD *)(v44 + 8);
        v160(&v43[*(int *)(v45 + 24)], &v44[*(int *)(v45 + 24)], v22);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
      }
      uint64_t v51 = *(int *)(v39 + 24);
      uint64_t v52 = &v37[v51];
      uint64_t v53 = &v38[v51];
      uint64_t v54 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
      uint64_t v55 = *(void *)(v54 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v53, 1, v54))
      {
        uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
        memcpy(v52, v53, *(void *)(*(void *)(v56 - 8) + 64));
        a1 = v163;
        uint64_t v57 = v158;
      }
      else
      {
        uint64_t v149 = v55;
        v160(v52, v53, v22);
        uint64_t v151 = v54;
        uint64_t v155 = v52;
        uint64_t v58 = *(int *)(v54 + 20);
        uint64_t v59 = &v52[v58];
        uint64_t v60 = v22;
        uint64_t v61 = &v53[v58];
        uint64_t v62 = type metadata accessor for AspireHeSerializedGaloisKey(0);
        uint64_t v63 = *(void *)(v62 - 8);
        uint64_t v145 = v60;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v63 + 48))(v61, 1, v62))
        {
          uint64_t v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
          memcpy(v59, v61, *(void *)(*(void *)(v64 - 8) + 64));
        }
        else
        {
          *(void *)uint64_t v59 = *(void *)v61;
          v160(&v59[*(int *)(v62 + 20)], &v61[*(int *)(v62 + 20)], v60);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v63 + 56))(v59, 0, 1, v62);
        }
        uint64_t v98 = v151;
        uint64_t v97 = v155;
        uint64_t v99 = *(int *)(v151 + 24);
        unint64_t v100 = &v155[v99];
        uint64_t v101 = &v53[v99];
        uint64_t v102 = type metadata accessor for AspireHeSerializedRelinKey(0);
        uint64_t v103 = *(void *)(v102 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v103 + 48))(v101, 1, v102))
        {
          uint64_t v104 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
          memcpy(v100, v101, *(void *)(*(void *)(v104 - 8) + 64));
        }
        else
        {
          v160(v100, v101, v145);
          uint64_t v114 = *(int *)(v102 + 20);
          uint64_t v115 = &v100[v114];
          uint64_t v116 = &v101[v114];
          uint64_t v117 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
          uint64_t v118 = *(void *)(v117 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v118 + 48))(v116, 1, v117))
          {
            uint64_t v119 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
            memcpy(v115, v116, *(void *)(*(void *)(v119 - 8) + 64));
            uint64_t v97 = v155;
          }
          else
          {
            uint64_t v153 = v118;
            v160(v115, v116, v145);
            uint64_t v141 = v117;
            __dst = v115;
            uint64_t v126 = *(int *)(v117 + 20);
            uint64_t v127 = &v115[v126];
            uint64_t v128 = &v116[v126];
            uint64_t v129 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
            uint64_t v130 = *(void *)(v129 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v130 + 48))(v128, 1, v129))
            {
              uint64_t v131 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
              memcpy(v127, v128, *(void *)(*(void *)(v131 - 8) + 64));
            }
            else
            {
              *(void *)uint64_t v127 = *(void *)v128;
              v160(&v127[*(int *)(v129 + 20)], &v128[*(int *)(v129 + 20)], v145);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v130 + 56))(v127, 0, 1, v129);
            }
            uint64_t v97 = v155;
            (*(void (**)(char *, void, uint64_t, uint64_t))(v153 + 56))(__dst, 0, 1, v141);
          }
          (*(void (**)(char *, void, uint64_t, uint64_t))(v103 + 56))(v100, 0, 1, v102);
        }
        a1 = v163;
        uint64_t v57 = v158;
        (*(void (**)(char *, void, uint64_t, uint64_t))(v149 + 56))(v97, 0, 1, v98);
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v57 + 56))(v37, 0, 1, v39);
    }
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithTake for AMDPbHEQuery.OneOf_Query(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  if (a1 != a2)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config(a1, type metadata accessor for AMDPbHEQuery.OneOf_Query);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *(void *)uint64_t v2 = *(void *)a2;
      *(_OWORD *)(v2 + 8) = *(_OWORD *)(a2 + 8);
      uint64_t v4 = type metadata accessor for AMDPbPECQuery(0);
      uint64_t v5 = *(int *)(v4 + 24);
      uint64_t v6 = v2 + v5;
      uint64_t v7 = a2 + v5;
      uint64_t v8 = type metadata accessor for UnknownStorage();
      uint64_t v9 = (void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32);
      uint64_t v10 = v6;
      uint64_t v11 = *v9;
      (*v9)(v10, v7, v8);
      uint64_t v170 = v4;
      uint64_t v12 = *(int *)(v4 + 28);
      uint64_t v13 = (void *)(v2 + v12);
      uint64_t v14 = (void *)(a2 + v12);
      uint64_t v15 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
      uint64_t v16 = *(void *)(v15 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
      {
        uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
        memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
        uint64_t v18 = v170;
      }
      else
      {
        *uint64_t v13 = *v14;
        v13[1] = v14[1];
        uint64_t v166 = v8;
        v11((uint64_t)v13 + *(int *)(v15 + 28), (uint64_t)v14 + *(int *)(v15 + 28), v8);
        uint64_t v32 = *(int *)(v15 + 32);
        uint64_t v33 = (char *)v13 + v32;
        uint64_t v34 = (char *)v14 + v32;
        uint64_t v35 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
        uint64_t v36 = *(void *)(v35 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
        {
          uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
          memcpy(v33, v34, *(void *)(*(void *)(v37 - 8) + 64));
          uint64_t v8 = v166;
          uint64_t v18 = v170;
        }
        else
        {
          uint64_t v155 = v11;
          uint64_t v51 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
          uint64_t v161 = *(void *)(v51 - 8);
          uint64_t v164 = v36;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v161 + 48))(v34, 1, v51))
          {
            uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
            memcpy(v33, v34, *(void *)(*(void *)(v52 - 8) + 64));
            uint64_t v53 = v166;
            uint64_t v11 = v155;
          }
          else
          {
            swift_getEnumCaseMultiPayload();
            v155((uint64_t)v33, (uint64_t)v34, v166);
            swift_storeEnumTagMultiPayload();
            uint64_t v68 = v51;
            uint64_t v11 = v155;
            (*(void (**)(char *, void, uint64_t, uint64_t))(v161 + 56))(v33, 0, 1, v68);
            uint64_t v53 = v166;
          }
          uint64_t v69 = v33;
          uint64_t v18 = v170;
          uint64_t v70 = *(int *)(v35 + 20);
          uint64_t v71 = &v34[v70];
          uint64_t v72 = v53;
          v11((uint64_t)&v69[v70], (uint64_t)v71, v53);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v164 + 56))(v69, 0, 1, v35);
          uint64_t v8 = v72;
        }
        (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      }
      uint64_t v73 = *(int *)(v18 + 32);
      uint64_t v74 = (char *)(v2 + v73);
      uint64_t v75 = (char *)(a2 + v73);
      uint64_t v76 = type metadata accessor for AMDPbEvaluationKey(0);
      uint64_t v77 = *(void *)(v76 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v77 + 48))(v75, 1, v76))
      {
        uint64_t v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKey?);
        memcpy(v74, v75, *(void *)(*(void *)(v78 - 8) + 64));
      }
      else
      {
        uint64_t v165 = v77;
        v11((uint64_t)v74, (uint64_t)v75, v8);
        uint64_t v79 = *(int *)(v76 + 20);
        uint64_t v173 = v74;
        uint64_t v80 = &v74[v79];
        uint64_t v81 = v11;
        uint64_t v82 = &v75[v79];
        uint64_t v83 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
        uint64_t v84 = v8;
        uint64_t v85 = *(void *)(v83 - 8);
        uint64_t v167 = v84;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v85 + 48))(v82, 1, v83))
        {
          uint64_t v86 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
          memcpy(v80, v82, *(void *)(*(void *)(v86 - 8) + 64));
        }
        else
        {
          *(void *)uint64_t v80 = *(void *)v82;
          *(_OWORD *)(v80 + 8) = *(_OWORD *)(v82 + 8);
          v81((uint64_t)&v80[*(int *)(v83 + 24)], (uint64_t)&v82[*(int *)(v83 + 24)], v84);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v85 + 56))(v80, 0, 1, v83);
        }
        uint64_t v87 = v173;
        uint64_t v88 = *(int *)(v76 + 24);
        uint64_t v89 = &v173[v88];
        uint64_t v90 = &v75[v88];
        uint64_t v91 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
        uint64_t v92 = *(void *)(v91 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v92 + 48))(v90, 1, v91))
        {
          uint64_t v93 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
          memcpy(v89, v90, *(void *)(*(void *)(v93 - 8) + 64));
          uint64_t v94 = v165;
        }
        else
        {
          uint64_t v154 = v92;
          v81((uint64_t)v89, (uint64_t)v90, v167);
          uint64_t v159 = v91;
          uint64_t v162 = v89;
          uint64_t v95 = *(int *)(v91 + 20);
          uint64_t v96 = &v89[v95];
          uint64_t v97 = &v90[v95];
          uint64_t v98 = type metadata accessor for AspireHeSerializedGaloisKey(0);
          uint64_t v99 = *(void *)(v98 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v99 + 48))(v97, 1, v98))
          {
            unint64_t v100 = v81;
            uint64_t v101 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
            memcpy(v96, v97, *(void *)(*(void *)(v101 - 8) + 64));
          }
          else
          {
            *(void *)uint64_t v96 = *(void *)v97;
            unint64_t v100 = v81;
            v81((uint64_t)&v96[*(int *)(v98 + 20)], (uint64_t)&v97[*(int *)(v98 + 20)], v167);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v99 + 56))(v96, 0, 1, v98);
          }
          uint64_t v111 = *(int *)(v159 + 24);
          uint64_t v112 = &v162[v111];
          uint64_t v113 = &v90[v111];
          uint64_t v114 = type metadata accessor for AspireHeSerializedRelinKey(0);
          uint64_t v115 = *(void *)(v114 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v115 + 48))(v113, 1, v114))
          {
            uint64_t v116 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
            memcpy(v112, v113, *(void *)(*(void *)(v116 - 8) + 64));
            uint64_t v87 = v173;
            uint64_t v117 = v162;
            uint64_t v94 = v165;
            uint64_t v118 = v159;
            uint64_t v119 = v154;
          }
          else
          {
            uint64_t v157 = v100;
            v100((uint64_t)v112, (uint64_t)v113, v167);
            uint64_t v126 = *(int *)(v114 + 20);
            uint64_t v127 = &v112[v126];
            uint64_t v128 = &v113[v126];
            uint64_t v129 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
            uint64_t v130 = *(void *)(v129 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v130 + 48))(v128, 1, v129))
            {
              uint64_t v131 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
              memcpy(v127, v128, *(void *)(*(void *)(v131 - 8) + 64));
              uint64_t v119 = v154;
            }
            else
            {
              uint64_t v152 = v130;
              v157((uint64_t)v127, (uint64_t)v128, v167);
              uint64_t v169 = v129;
              uint64_t v138 = *(int *)(v129 + 20);
              __dsta = &v127[v138];
              uint64_t v139 = &v128[v138];
              uint64_t v140 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
              uint64_t v148 = *(void *)(v140 - 8);
              uint64_t v141 = v139;
              int v142 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v148 + 48))(v139, 1, v140);
              uint64_t v143 = v127;
              if (v142)
              {
                uint64_t v144 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                memcpy(__dsta, v141, *(void *)(*(void *)(v144 - 8) + 64));
              }
              else
              {
                *(void *)__dsta = *v141;
                v157((uint64_t)&__dsta[*(int *)(v140 + 20)], (uint64_t)v141 + *(int *)(v140 + 20), v167);
                uint64_t v143 = v127;
                (*(void (**)(char *, void, uint64_t, uint64_t))(v148 + 56))(__dsta, 0, 1, v140);
              }
              uint64_t v119 = v154;
              (*(void (**)(char *, void, uint64_t, uint64_t))(v152 + 56))(v143, 0, 1, v169);
            }
            (*(void (**)(char *, void, uint64_t, uint64_t))(v115 + 56))(v112, 0, 1, v114);
            uint64_t v87 = v173;
            uint64_t v117 = v162;
            uint64_t v94 = v165;
            uint64_t v118 = v159;
          }
          (*(void (**)(char *, void, uint64_t, uint64_t))(v119 + 56))(v117, 0, 1, v118);
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v94 + 56))(v87, 0, 1, v76);
      }
    }
    else
    {
      *(_DWORD *)uint64_t v2 = *(_DWORD *)a2;
      *(_OWORD *)(v2 + 8) = *(_OWORD *)(a2 + 8);
      uint64_t v19 = (int *)type metadata accessor for AMDPbPIRQuery(0);
      uint64_t v20 = v19[6];
      uint64_t v21 = v2 + v20;
      uint64_t v22 = a2 + v20;
      uint64_t v23 = v2;
      uint64_t v24 = type metadata accessor for UnknownStorage();
      uint64_t v25 = *(void (**)(void, void, void))(*(void *)(v24 - 8) + 32);
      v25(v21, v22, v24);
      uint64_t v26 = v19[7];
      uint64_t v171 = v23;
      uint64_t v27 = (_OWORD *)(v23 + v26);
      uint64_t v28 = (_OWORD *)(a2 + v26);
      uint64_t v29 = type metadata accessor for AspirePirEncryptedIndices(0);
      uint64_t v30 = *(void *)(v29 - 8);
      uint64_t v168 = v24;
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
      {
        uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
        memcpy(v27, v28, *(void *)(*(void *)(v31 - 8) + 64));
      }
      else
      {
        *uint64_t v27 = *v28;
        v25((char *)v27 + *(int *)(v29 + 24), (char *)v28 + *(int *)(v29 + 24), v24);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
      }
      uint64_t v38 = v19[8];
      uint64_t v2 = v171;
      uint64_t v39 = (char *)(v171 + v38);
      uint64_t v40 = (char *)(a2 + v38);
      uint64_t v41 = type metadata accessor for AMDPbEvaluationKey(0);
      uint64_t v42 = *(void *)(v41 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41))
      {
        uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKey?);
        memcpy(v39, v40, *(void *)(*(void *)(v43 - 8) + 64));
      }
      else
      {
        uint64_t v160 = v42;
        v25(v39, v40, v168);
        uint64_t v44 = *(int *)(v41 + 20);
        uint64_t v163 = v39;
        uint64_t v45 = &v39[v44];
        uint64_t v46 = &v40[v44];
        uint64_t v47 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
        uint64_t v48 = v25;
        uint64_t v49 = *(void *)(v47 - 8);
        uint64_t v158 = v48;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v46, 1, v47))
        {
          uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
          memcpy(v45, v46, *(void *)(*(void *)(v50 - 8) + 64));
        }
        else
        {
          *(void *)uint64_t v45 = *(void *)v46;
          *(_OWORD *)(v45 + 8) = *(_OWORD *)(v46 + 8);
          v48(&v45[*(int *)(v47 + 24)], &v46[*(int *)(v47 + 24)], v168);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v49 + 56))(v45, 0, 1, v47);
        }
        uint64_t v54 = v163;
        uint64_t v2 = v171;
        uint64_t v55 = *(int *)(v41 + 24);
        uint64_t v56 = &v163[v55];
        uint64_t v57 = &v40[v55];
        uint64_t v58 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
        uint64_t v59 = *(void *)(v58 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v59 + 48))(v57, 1, v58))
        {
          uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
          memcpy(v56, v57, *(void *)(*(void *)(v60 - 8) + 64));
          uint64_t v61 = v160;
        }
        else
        {
          uint64_t v153 = v59;
          v158(v56, v57, v168);
          uint64_t v156 = v58;
          uint64_t v62 = *(int *)(v58 + 20);
          uint64_t v172 = v56;
          uint64_t v63 = &v56[v62];
          uint64_t v64 = &v57[v62];
          uint64_t v65 = type metadata accessor for AspireHeSerializedGaloisKey(0);
          uint64_t v66 = *(void *)(v65 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v64, 1, v65))
          {
            uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
            memcpy(v63, v64, *(void *)(*(void *)(v67 - 8) + 64));
          }
          else
          {
            *(void *)uint64_t v63 = *(void *)v64;
            v158(&v63[*(int *)(v65 + 20)], &v64[*(int *)(v65 + 20)], v168);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v66 + 56))(v63, 0, 1, v65);
          }
          uint64_t v54 = v163;
          uint64_t v102 = v172;
          uint64_t v103 = v156;
          uint64_t v104 = *(int *)(v156 + 24);
          uint64_t v105 = &v172[v104];
          uint64_t v106 = &v57[v104];
          uint64_t v107 = type metadata accessor for AspireHeSerializedRelinKey(0);
          uint64_t v108 = *(void *)(v107 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v108 + 48))(v106, 1, v107))
          {
            uint64_t v109 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
            memcpy(v105, v106, *(void *)(*(void *)(v109 - 8) + 64));
            uint64_t v61 = v160;
            uint64_t v110 = v153;
          }
          else
          {
            uint64_t v151 = v108;
            v158(v105, v106, v168);
            uint64_t v120 = *(int *)(v107 + 20);
            uint64_t v121 = &v105[v120];
            uint64_t v122 = &v106[v120];
            uint64_t v123 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
            uint64_t v124 = *(void *)(v123 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v124 + 48))(v122, 1, v123))
            {
              uint64_t v125 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
              memcpy(v121, v122, *(void *)(*(void *)(v125 - 8) + 64));
              uint64_t v102 = v172;
              uint64_t v110 = v153;
              uint64_t v103 = v156;
            }
            else
            {
              uint64_t v146 = v124;
              v158(v121, v122, v168);
              uint64_t v147 = v123;
              __dst = v121;
              uint64_t v132 = *(int *)(v123 + 20);
              uint64_t v133 = &v121[v132];
              uint64_t v134 = &v122[v132];
              uint64_t v135 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
              uint64_t v136 = *(void *)(v135 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v136 + 48))(v134, 1, v135))
              {
                uint64_t v137 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                memcpy(v133, v134, *(void *)(*(void *)(v137 - 8) + 64));
              }
              else
              {
                *(void *)uint64_t v133 = *(void *)v134;
                v158(&v133[*(int *)(v135 + 20)], &v134[*(int *)(v135 + 20)], v168);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v136 + 56))(v133, 0, 1, v135);
              }
              uint64_t v102 = v172;
              uint64_t v110 = v153;
              uint64_t v103 = v156;
              (*(void (**)(char *, void, uint64_t, uint64_t))(v146 + 56))(__dst, 0, 1, v147);
            }
            (*(void (**)(char *, void, uint64_t, uint64_t))(v151 + 56))(v105, 0, 1, v107);
            uint64_t v61 = v160;
          }
          (*(void (**)(char *, void, uint64_t, uint64_t))(v110 + 56))(v102, 0, 1, v103);
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v61 + 56))(v54, 0, 1, v41);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return v2;
}

uint64_t type metadata completion function for AMDPbHEQuery.OneOf_Query(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for AMDPbHEConfig.OneOf_Config(a1, a2, a3, type metadata accessor for AMDPbPIRQuery, type metadata accessor for AMDPbPECQuery);
}

uint64_t type metadata completion function for AMDPbHEConfig.OneOf_Config(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t))
{
  uint64_t result = a4(319);
  if (v7 <= 0x3F)
  {
    uint64_t result = a5(319);
    if (v8 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AMDPbHEReply(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for AMDPbHEReply.OneOf_Reply(0);
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      *a1 = *a2;
      if (EnumCaseMultiPayload == 1) {
        uint64_t v12 = *(int *)(type metadata accessor for AMDPbPECReply(0) + 20);
      }
      else {
        uint64_t v12 = *(int *)(type metadata accessor for AMDPbPIRReply(0) + 20);
      }
      uint64_t v21 = (char *)a1 + v12;
      uint64_t v13 = (char *)a2 + v12;
      uint64_t v14 = type metadata accessor for UnknownStorage();
      uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16);
      swift_bridgeObjectRetain();
      v15(v21, v13, v14);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    uint64_t v16 = *(int *)(a3 + 20);
    uint64_t v17 = (char *)a1 + v16;
    uint64_t v18 = (char *)a2 + v16;
    uint64_t v19 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
  }
  return a1;
}

uint64_t destroy for AMDPbHEReply(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AMDPbHEReply.OneOf_Reply(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, 1, v4))
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    swift_bridgeObjectRelease();
    if (EnumCaseMultiPayload == 1) {
      uint64_t v6 = type metadata accessor for AMDPbPECReply(0);
    }
    else {
      uint64_t v6 = type metadata accessor for AMDPbPIRReply(0);
    }
    uint64_t v7 = a1 + *(int *)(v6 + 20);
    uint64_t v8 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  }
  uint64_t v9 = a1 + *(int *)(a2 + 20);
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8);
  return v11(v9, v10);
}

void *initializeWithCopy for AMDPbHEReply(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AMDPbHEReply.OneOf_Reply(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    *a1 = *a2;
    if (EnumCaseMultiPayload == 1) {
      uint64_t v10 = *(int *)(type metadata accessor for AMDPbPECReply(0) + 20);
    }
    else {
      uint64_t v10 = *(int *)(type metadata accessor for AMDPbPIRReply(0) + 20);
    }
    uint64_t v19 = (char *)a1 + v10;
    uint64_t v11 = (char *)a2 + v10;
    uint64_t v12 = type metadata accessor for UnknownStorage();
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    v13(v19, v11, v12);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v14 = *(int *)(a3 + 20);
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16))(v15, v16, v17);
  return a1;
}

void *assignWithCopy for AMDPbHEReply(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AMDPbHEReply.OneOf_Reply(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      *a1 = *a2;
      if (EnumCaseMultiPayload == 1) {
        uint64_t v12 = *(int *)(type metadata accessor for AMDPbPECReply(0) + 20);
      }
      else {
        uint64_t v12 = *(int *)(type metadata accessor for AMDPbPIRReply(0) + 20);
      }
      uint64_t v28 = (char *)a1 + v12;
      uint64_t v13 = (char *)a2 + v12;
      uint64_t v14 = type metadata accessor for UnknownStorage();
      uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16);
      swift_bridgeObjectRetain();
      v15(v28, v13, v14);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_14;
    }
LABEL_7:
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
    memcpy(a1, a2, *(void *)(*(void *)(v16 - 8) + 64));
    goto LABEL_14;
  }
  if (v10)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)a1, type metadata accessor for AMDPbHEReply.OneOf_Reply);
    goto LABEL_7;
  }
  if (a1 != a2)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)a1, type metadata accessor for AMDPbHEReply.OneOf_Reply);
    int v17 = swift_getEnumCaseMultiPayload();
    *a1 = *a2;
    if (v17 == 1) {
      uint64_t v18 = *(int *)(type metadata accessor for AMDPbPECReply(0) + 20);
    }
    else {
      uint64_t v18 = *(int *)(type metadata accessor for AMDPbPIRReply(0) + 20);
    }
    uint64_t v19 = (char *)a1 + v18;
    uint64_t v20 = (char *)a2 + v18;
    uint64_t v21 = type metadata accessor for UnknownStorage();
    uint64_t v22 = *(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16);
    swift_bridgeObjectRetain();
    v22(v19, v20, v21);
    swift_storeEnumTagMultiPayload();
  }
LABEL_14:
  uint64_t v23 = *(int *)(a3 + 20);
  uint64_t v24 = (char *)a1 + v23;
  uint64_t v25 = (char *)a2 + v23;
  uint64_t v26 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 24))(v24, v25, v26);
  return a1;
}

void *initializeWithTake for AMDPbHEReply(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AMDPbHEReply.OneOf_Reply(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    *a1 = *a2;
    if (EnumCaseMultiPayload == 1) {
      uint64_t v10 = *(int *)(type metadata accessor for AMDPbPECReply(0) + 20);
    }
    else {
      uint64_t v10 = *(int *)(type metadata accessor for AMDPbPIRReply(0) + 20);
    }
    uint64_t v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    uint64_t v13 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v14 = *(int *)(a3 + 20);
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 32))(v15, v16, v17);
  return a1;
}

void *assignWithTake for AMDPbHEReply(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AMDPbHEReply.OneOf_Reply(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      *a1 = *a2;
      if (EnumCaseMultiPayload == 1) {
        uint64_t v12 = *(int *)(type metadata accessor for AMDPbPECReply(0) + 20);
      }
      else {
        uint64_t v12 = *(int *)(type metadata accessor for AMDPbPIRReply(0) + 20);
      }
      uint64_t v13 = (char *)a1 + v12;
      uint64_t v14 = (char *)a2 + v12;
      uint64_t v15 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32))(v13, v14, v15);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_14;
    }
LABEL_7:
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
    memcpy(a1, a2, *(void *)(*(void *)(v16 - 8) + 64));
    goto LABEL_14;
  }
  if (v10)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)a1, type metadata accessor for AMDPbHEReply.OneOf_Reply);
    goto LABEL_7;
  }
  if (a1 != a2)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)a1, type metadata accessor for AMDPbHEReply.OneOf_Reply);
    int v17 = swift_getEnumCaseMultiPayload();
    *a1 = *a2;
    if (v17 == 1) {
      uint64_t v18 = *(int *)(type metadata accessor for AMDPbPECReply(0) + 20);
    }
    else {
      uint64_t v18 = *(int *)(type metadata accessor for AMDPbPIRReply(0) + 20);
    }
    uint64_t v19 = (char *)a1 + v18;
    uint64_t v20 = (char *)a2 + v18;
    uint64_t v21 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 32))(v19, v20, v21);
    swift_storeEnumTagMultiPayload();
  }
LABEL_14:
  uint64_t v22 = *(int *)(a3 + 20);
  uint64_t v23 = (char *)a1 + v22;
  uint64_t v24 = (char *)a2 + v22;
  uint64_t v25 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 40))(v23, v24, v25);
  return a1;
}

uint64_t getEnumTagSinglePayload for AMDPbHEReply(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_249C97A04);
}

uint64_t sub_249C97A04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_40Tm(a1, a2, a3, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
}

uint64_t __swift_get_extra_inhabitant_index_40Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(a4);
  uint64_t v8 = *(void *)(v7 - 8);
  if (*(_DWORD *)(v8 + 84) == a2)
  {
    int v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    return v9(a1, a2, v7);
  }
  else
  {
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a3 + 20);
    return v12(v14, a2, v13);
  }
}

uint64_t storeEnumTagSinglePayload for AMDPbHEReply(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_249C97B1C);
}

uint64_t sub_249C97B1C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_41Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
}

uint64_t __swift_store_extra_inhabitant_index_41Tm(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v10 = *(void *)(v9 - 8);
  if (*(_DWORD *)(v10 + 84) == a3)
  {
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return v11(a1, a2, a2, v9);
  }
  else
  {
    uint64_t v13 = type metadata accessor for UnknownStorage();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
    uint64_t v15 = v13;
    uint64_t v16 = a1 + *(int *)(a4 + 20);
    return v14(v16, a2, a2, v15);
  }
}

void type metadata completion function for AMDPbHEReply(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void type metadata completion function for AMDPbHEConfig(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, void (*a5)(uint64_t))
{
  type metadata accessor for AMDPbHEConfig.OneOf_Config?(319, a4, a5);
  if (v5 <= 0x3F)
  {
    type metadata accessor for UnknownStorage();
    if (v6 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for AMDPbHEReply.OneOf_Reply(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    *a1 = *a2;
    if (EnumCaseMultiPayload == 1) {
      uint64_t v7 = *(int *)(type metadata accessor for AMDPbPECReply(0) + 20);
    }
    else {
      uint64_t v7 = *(int *)(type metadata accessor for AMDPbPIRReply(0) + 20);
    }
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for UnknownStorage();
    uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    v11(v8, v9, v10);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for AMDPbHEReply.OneOf_Reply(uint64_t a1)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  swift_bridgeObjectRelease();
  if (EnumCaseMultiPayload == 1) {
    uint64_t v3 = type metadata accessor for AMDPbPECReply(0);
  }
  else {
    uint64_t v3 = type metadata accessor for AMDPbPIRReply(0);
  }
  uint64_t v4 = a1 + *(int *)(v3 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

void *initializeWithCopy for AMDPbHEReply.OneOf_Reply(void *a1, void *a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  *a1 = *a2;
  if (EnumCaseMultiPayload == 1) {
    uint64_t v5 = *(int *)(type metadata accessor for AMDPbPECReply(0) + 20);
  }
  else {
    uint64_t v5 = *(int *)(type metadata accessor for AMDPbPIRReply(0) + 20);
  }
  unint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *assignWithCopy for AMDPbHEReply.OneOf_Reply(void *a1, void *a2)
{
  if (a1 != a2)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)a1, type metadata accessor for AMDPbHEReply.OneOf_Reply);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    *a1 = *a2;
    if (EnumCaseMultiPayload == 1) {
      uint64_t v5 = *(int *)(type metadata accessor for AMDPbPECReply(0) + 20);
    }
    else {
      uint64_t v5 = *(int *)(type metadata accessor for AMDPbPIRReply(0) + 20);
    }
    unint64_t v6 = (char *)a1 + v5;
    uint64_t v7 = (char *)a2 + v5;
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16);
    swift_bridgeObjectRetain();
    v9(v6, v7, v8);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *initializeWithTake for AMDPbHEReply.OneOf_Reply(void *a1, void *a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  *a1 = *a2;
  if (EnumCaseMultiPayload == 1) {
    uint64_t v5 = *(int *)(type metadata accessor for AMDPbPECReply(0) + 20);
  }
  else {
    uint64_t v5 = *(int *)(type metadata accessor for AMDPbPIRReply(0) + 20);
  }
  unint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *assignWithTake for AMDPbHEReply.OneOf_Reply(void *a1, void *a2)
{
  if (a1 != a2)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)a1, type metadata accessor for AMDPbHEReply.OneOf_Reply);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    *a1 = *a2;
    if (EnumCaseMultiPayload == 1) {
      uint64_t v5 = *(int *)(type metadata accessor for AMDPbPECReply(0) + 20);
    }
    else {
      uint64_t v5 = *(int *)(type metadata accessor for AMDPbPIRReply(0) + 20);
    }
    unint64_t v6 = (char *)a1 + v5;
    uint64_t v7 = (char *)a2 + v5;
    uint64_t v8 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for AMDPbHEConfig.OneOf_Config(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for AMDPbHEConfig.OneOf_Config(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t type metadata completion function for AMDPbHEReply.OneOf_Reply(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for AMDPbHEConfig.OneOf_Config(a1, a2, a3, type metadata accessor for AMDPbPIRReply, type metadata accessor for AMDPbPECReply);
}

uint64_t getEnumTagSinglePayload for AMDPbEvaluationKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_56Tm_1);
}

uint64_t storeEnumTagSinglePayload for AMDPbEvaluationKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_57Tm_1);
}

uint64_t *initializeBufferWithCopyOfBuffer for AMDPbEvaluationKey(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    uint64_t v9 = *(int *)(a3 + 20);
    uint64_t v10 = (uint64_t *)((char *)a1 + v9);
    uint64_t v11 = (uint64_t *)((char *)a2 + v9);
    uint64_t v12 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
    uint64_t v13 = *(void *)(v12 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      uint64_t v65 = a1;
      uint64_t v16 = v11[1];
      *uint64_t v10 = *v11;
      uint64_t v17 = v7;
      uint64_t v18 = v8;
      unint64_t v19 = v11[2];
      outlined copy of Data._Representation(v16, v19);
      v10[1] = v16;
      void v10[2] = v19;
      uint64_t v8 = v18;
      uint64_t v7 = v17;
      a1 = v65;
      v8((void *)((char *)v10 + *(int *)(v12 + 24)), (void *)((char *)v11 + *(int *)(v12 + 24)), v7);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    uint64_t v20 = *(int *)(a3 + 24);
    uint64_t v21 = (char *)a1 + v20;
    uint64_t v22 = (char *)a2 + v20;
    uint64_t v23 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
    uint64_t v24 = *(void *)(v23 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
    {
      uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
      memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
    }
    else
    {
      uint64_t v64 = v24;
      v8((uint64_t *)v21, (uint64_t *)v22, v7);
      uint64_t v26 = *(int *)(v23 + 20);
      uint64_t v27 = &v21[v26];
      uint64_t v28 = &v22[v26];
      uint64_t v29 = type metadata accessor for AspireHeSerializedGaloisKey(0);
      uint64_t v30 = *(void *)(v29 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
      {
        uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
        memcpy(v27, v28, *(void *)(*(void *)(v31 - 8) + 64));
      }
      else
      {
        *(void *)uint64_t v27 = *(void *)v28;
        uint64_t v32 = *(int *)(v29 + 20);
        uint64_t v62 = v8;
        uint64_t v33 = &v27[v32];
        uint64_t v34 = &v28[v32];
        swift_bridgeObjectRetain();
        uint64_t v35 = v33;
        uint64_t v8 = v62;
        v62((uint64_t *)v35, (uint64_t *)v34, v7);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
      }
      uint64_t v36 = *(int *)(v23 + 24);
      uint64_t v37 = &v21[v36];
      uint64_t v38 = &v22[v36];
      uint64_t v39 = type metadata accessor for AspireHeSerializedRelinKey(0);
      uint64_t v40 = *(void *)(v39 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39))
      {
        uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
        memcpy(v37, v38, *(void *)(*(void *)(v41 - 8) + 64));
      }
      else
      {
        uint64_t v66 = v40;
        v8((uint64_t *)v37, (uint64_t *)v38, v7);
        uint64_t v42 = *(int *)(v39 + 20);
        uint64_t v43 = &v37[v42];
        uint64_t v63 = (void (*)(char *, char *, uint64_t))v8;
        uint64_t v44 = &v38[v42];
        uint64_t v45 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
        uint64_t v46 = *(void *)(v45 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v44, 1, v45))
        {
          uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
          memcpy(v43, v44, *(void *)(*(void *)(v47 - 8) + 64));
          uint64_t v48 = v66;
        }
        else
        {
          uint64_t v59 = v46;
          v63(v43, v44, v7);
          uint64_t v60 = v45;
          uint64_t v61 = v43;
          uint64_t v49 = *(int *)(v45 + 20);
          uint64_t v50 = &v43[v49];
          uint64_t v51 = &v44[v49];
          uint64_t v52 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
          uint64_t v53 = *(void *)(v52 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48))(v51, 1, v52))
          {
            uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
            memcpy(v50, v51, *(void *)(*(void *)(v54 - 8) + 64));
          }
          else
          {
            *(void *)uint64_t v50 = *(void *)v51;
            uint64_t v55 = *(int *)(v52 + 20);
            uint64_t v58 = &v50[v55];
            uint64_t v56 = &v51[v55];
            swift_bridgeObjectRetain();
            v63(v58, v56, v7);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v53 + 56))(v50, 0, 1, v52);
          }
          uint64_t v48 = v66;
          (*(void (**)(char *, void, uint64_t, uint64_t))(v59 + 56))(v61, 0, 1, v60);
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v48 + 56))(v37, 0, 1, v39);
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v64 + 56))(v21, 0, 1, v23);
    }
  }
  return a1;
}

uint64_t destroy for AMDPbEvaluationKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  unint64_t v19 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v19(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6))
  {
    outlined consume of Data._Representation(*(void *)(v5 + 8), *(void *)(v5 + 16));
    v19(v5 + *(int *)(v6 + 24), v4);
  }
  uint64_t v7 = a1 + *(int *)(a2 + 24);
  uint64_t v8 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v7, 1, v8);
  if (!result)
  {
    v19(v7, v4);
    uint64_t v10 = v7 + *(int *)(v8 + 20);
    uint64_t v11 = type metadata accessor for AspireHeSerializedGaloisKey(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v10, 1, v11))
    {
      swift_bridgeObjectRelease();
      v19(v10 + *(int *)(v11 + 20), v4);
    }
    uint64_t v12 = v7 + *(int *)(v8 + 24);
    uint64_t v13 = type metadata accessor for AspireHeSerializedRelinKey(0);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v12, 1, v13);
    if (!result)
    {
      v19(v12, v4);
      uint64_t v14 = v12 + *(int *)(v13 + 20);
      uint64_t v15 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48))(v14, 1, v15);
      if (!result)
      {
        v19(v14, v4);
        uint64_t v16 = v14 + *(int *)(v15 + 20);
        uint64_t v17 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 48))(v16, 1, v17);
        if (!result)
        {
          swift_bridgeObjectRelease();
          uint64_t v18 = v16 + *(int *)(v17 + 20);
          return ((uint64_t (*)(uint64_t, uint64_t))v19)(v18, v4);
        }
      }
    }
  }
  return result;
}

uint64_t initializeWithCopy for AMDPbEvaluationKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  uint64_t v11 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    uint64_t v63 = v6;
    uint64_t v14 = v10[1];
    *uint64_t v9 = *v10;
    uint64_t v15 = a1;
    uint64_t v16 = v7;
    unint64_t v17 = v10[2];
    outlined copy of Data._Representation(v14, v17);
    v9[1] = v14;
    v9[2] = v17;
    uint64_t v7 = v16;
    a1 = v15;
    uint64_t v6 = v63;
    v7((uint64_t)v9 + *(int *)(v11 + 24), (uint64_t)v10 + *(int *)(v11 + 24), v63);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  uint64_t v18 = *(int *)(a3 + 24);
  unint64_t v19 = (char *)(a1 + v18);
  uint64_t v20 = (char *)(a2 + v18);
  uint64_t v21 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  uint64_t v22 = *(void *)(v21 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
    memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    uint64_t v62 = v22;
    v7((uint64_t)v19, (uint64_t)v20, v6);
    uint64_t v24 = *(int *)(v21 + 20);
    uint64_t v25 = &v19[v24];
    uint64_t v26 = &v20[v24];
    uint64_t v27 = type metadata accessor for AspireHeSerializedGaloisKey(0);
    uint64_t v28 = *(void *)(v27 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
    {
      uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
      memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
    }
    else
    {
      *(void *)uint64_t v25 = *(void *)v26;
      uint64_t v30 = *(int *)(v27 + 20);
      uint64_t v60 = v7;
      uint64_t v31 = &v25[v30];
      uint64_t v32 = &v26[v30];
      swift_bridgeObjectRetain();
      uint64_t v33 = v31;
      uint64_t v7 = v60;
      v60((uint64_t)v33, (uint64_t)v32, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
    }
    uint64_t v34 = *(int *)(v21 + 24);
    uint64_t v35 = &v19[v34];
    uint64_t v36 = &v20[v34];
    uint64_t v37 = type metadata accessor for AspireHeSerializedRelinKey(0);
    uint64_t v38 = *(void *)(v37 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
    {
      uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
      memcpy(v35, v36, *(void *)(*(void *)(v39 - 8) + 64));
    }
    else
    {
      uint64_t v64 = v38;
      v7((uint64_t)v35, (uint64_t)v36, v6);
      uint64_t v40 = *(int *)(v37 + 20);
      uint64_t v41 = &v35[v40];
      uint64_t v61 = (void (*)(char *, char *, uint64_t))v7;
      uint64_t v42 = &v36[v40];
      uint64_t v43 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
      uint64_t v44 = *(void *)(v43 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v42, 1, v43))
      {
        uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
        memcpy(v41, v42, *(void *)(*(void *)(v45 - 8) + 64));
        uint64_t v46 = v64;
      }
      else
      {
        uint64_t v57 = v44;
        v61(v41, v42, v6);
        uint64_t v58 = v43;
        uint64_t v59 = v41;
        uint64_t v47 = *(int *)(v43 + 20);
        uint64_t v48 = &v41[v47];
        uint64_t v49 = &v42[v47];
        uint64_t v50 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
        uint64_t v51 = *(void *)(v50 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48))(v49, 1, v50))
        {
          uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
          memcpy(v48, v49, *(void *)(*(void *)(v52 - 8) + 64));
        }
        else
        {
          *(void *)uint64_t v48 = *(void *)v49;
          uint64_t v53 = *(int *)(v50 + 20);
          uint64_t v56 = &v48[v53];
          uint64_t v54 = &v49[v53];
          swift_bridgeObjectRetain();
          v61(v56, v54, v6);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v51 + 56))(v48, 0, 1, v50);
        }
        uint64_t v46 = v64;
        (*(void (**)(char *, void, uint64_t, uint64_t))(v57 + 56))(v59, 0, 1, v58);
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v46 + 56))(v35, 0, 1, v37);
    }
    (*(void (**)(char *, void, uint64_t, uint64_t))(v62 + 56))(v19, 0, 1, v21);
  }
  return a1;
}

uint64_t assignWithCopy for AMDPbEvaluationKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v134 = *(void *)(v6 - 8);
  uint64_t v135 = *(void (**)(uint64_t, uint64_t, uint64_t))(v134 + 24);
  v135(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v138 = a1;
  uint64_t v8 = (char *)(a1 + v7);
  uint64_t v9 = (char *)(a2 + v7);
  uint64_t v10 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      *(void *)uint64_t v8 = *(void *)v9;
      uint64_t v15 = *((void *)v9 + 1);
      unint64_t v16 = *((void *)v9 + 2);
      outlined copy of Data._Representation(v15, v16);
      *((void *)v8 + 1) = v15;
      *((void *)v8 + 2) = v16;
      (*(void (**)(char *, char *, uint64_t))(v134 + 16))(&v8[*(int *)(v10 + 24)], &v9[*(int *)(v10 + 24)], v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
LABEL_7:
      uint64_t v18 = (void (*)(char *, char *, uint64_t))v135;
      uint64_t v19 = v138;
      goto LABEL_8;
    }
LABEL_6:
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
    memcpy(v8, v9, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  if (v14)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v8, type metadata accessor for AMDPbEvaluationKeyMetadata);
    goto LABEL_6;
  }
  *(void *)uint64_t v8 = *(void *)v9;
  uint64_t v39 = *((void *)v9 + 1);
  unint64_t v40 = *((void *)v9 + 2);
  outlined copy of Data._Representation(v39, v40);
  uint64_t v41 = *((void *)v8 + 1);
  unint64_t v42 = *((void *)v8 + 2);
  *((void *)v8 + 1) = v39;
  *((void *)v8 + 2) = v40;
  outlined consume of Data._Representation(v41, v42);
  uint64_t v18 = (void (*)(char *, char *, uint64_t))v135;
  v135((uint64_t)&v8[*(int *)(v10 + 24)], (uint64_t)&v9[*(int *)(v10 + 24)], v6);
  uint64_t v19 = v138;
LABEL_8:
  uint64_t v20 = *(int *)(a3 + 24);
  uint64_t v21 = (char *)(v19 + v20);
  uint64_t v22 = (char *)(a2 + v20);
  uint64_t v23 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v24 + 48);
  int v26 = v25(v21, 1, v23);
  int v27 = v25(v22, 1, v23);
  if (v26)
  {
    if (!v27)
    {
      uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v134 + 16);
      v28(v21, v22, v6);
      uint64_t v29 = *(int *)(v23 + 20);
      uint64_t v30 = &v21[v29];
      uint64_t v31 = &v22[v29];
      uint64_t v32 = type metadata accessor for AspireHeSerializedGaloisKey(0);
      uint64_t v33 = *(void *)(v32 - 8);
      uint64_t v130 = v6;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
      {
        uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
        memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64));
      }
      else
      {
        *(void *)uint64_t v30 = *(void *)v31;
        uint64_t v52 = *(int *)(v32 + 20);
        uint64_t v131 = &v30[v52];
        uint64_t v53 = &v31[v52];
        swift_bridgeObjectRetain();
        v28(v131, v53, v6);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
      }
      uint64_t v54 = *(int *)(v23 + 24);
      uint64_t v55 = &v21[v54];
      uint64_t v56 = &v22[v54];
      uint64_t v57 = type metadata accessor for AspireHeSerializedRelinKey(0);
      uint64_t v58 = *(void *)(v57 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48))(v56, 1, v57))
      {
        uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
        memcpy(v55, v56, *(void *)(*(void *)(v59 - 8) + 64));
        uint64_t v19 = v138;
      }
      else
      {
        uint64_t v132 = v28;
        v28(v55, v56, v6);
        uint64_t v60 = *(int *)(v57 + 20);
        uint64_t v61 = &v55[v60];
        uint64_t v62 = &v56[v60];
        uint64_t v63 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
        uint64_t v64 = *(void *)(v63 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48))(v62, 1, v63))
        {
          uint64_t v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
          memcpy(v61, v62, *(void *)(*(void *)(v65 - 8) + 64));
        }
        else
        {
          v132(v61, v62, v130);
          uint64_t v80 = *(int *)(v63 + 20);
          __src = v61;
          uint64_t v124 = &v61[v80];
          uint64_t v81 = &v62[v80];
          uint64_t v82 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
          uint64_t v123 = *(void *)(v82 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v123 + 48))(v81, 1, v82))
          {
            uint64_t v83 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
            memcpy(v124, v81, *(void *)(*(void *)(v83 - 8) + 64));
          }
          else
          {
            *(void *)uint64_t v124 = *(void *)v81;
            uint64_t v97 = *(int *)(v82 + 20);
            uint64_t v122 = &v124[v97];
            uint64_t v126 = &v81[v97];
            swift_bridgeObjectRetain();
            v132(v122, v126, v130);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v123 + 56))(v124, 0, 1, v82);
          }
          (*(void (**)(char *, void, uint64_t, uint64_t))(v64 + 56))(__src, 0, 1, v63);
        }
        uint64_t v19 = v138;
        (*(void (**)(char *, void, uint64_t, uint64_t))(v58 + 56))(v55, 0, 1, v57);
      }
      goto LABEL_48;
    }
    goto LABEL_14;
  }
  if (v27)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v21, type metadata accessor for AspireHeSerializedEvaluationKey);
LABEL_14:
    uint64_t v35 = &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?;
LABEL_15:
    size_t v36 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(v35) - 8) + 64);
    uint64_t v37 = v21;
    uint64_t v38 = v22;
LABEL_16:
    memcpy(v37, v38, v36);
    return v19;
  }
  v18(v21, v22, v6);
  uint64_t v43 = *(int *)(v23 + 20);
  uint64_t v44 = &v21[v43];
  uint64_t v45 = &v22[v43];
  uint64_t v46 = type metadata accessor for AspireHeSerializedGaloisKey(0);
  uint64_t v47 = *(void *)(v46 - 8);
  uint64_t v48 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v47 + 48);
  uint64_t v125 = v44;
  LODWORD(v44) = v48(v44, 1, v46);
  int v49 = v48(v45, 1, v46);
  if (v44)
  {
    if (v49)
    {
      size_t v50 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?)
                                  - 8)
                      + 64);
      uint64_t v51 = v125;
LABEL_28:
      memcpy(v51, v45, v50);
      goto LABEL_30;
    }
    void *v125 = *(void *)v45;
    uint64_t v66 = *(int *)(v46 + 20);
    uint64_t v67 = (char *)v125 + v66;
    uint64_t v68 = &v45[v66];
    __srca = *(void (**)(char *, char *, uint64_t))(v134 + 16);
    swift_bridgeObjectRetain();
    __srca(v67, v68, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v47 + 56))(v125, 0, 1, v46);
  }
  else
  {
    if (v49)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v125, type metadata accessor for AspireHeSerializedGaloisKey);
      size_t v50 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?)
                                  - 8)
                      + 64);
      uint64_t v51 = v125;
      goto LABEL_28;
    }
    void *v125 = *(void *)v45;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v135((uint64_t)v125 + *(int *)(v46 + 20), (uint64_t)&v45[*(int *)(v46 + 20)], v6);
  }
LABEL_30:
  uint64_t v69 = *(int *)(v23 + 24);
  v21 += v69;
  uint64_t v70 = &v22[v69];
  uint64_t v23 = type metadata accessor for AspireHeSerializedRelinKey(0);
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v71 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v24 + 48);
  int v72 = v71(v21, 1, v23);
  int v73 = v71(v70, 1, v23);
  uint64_t v19 = v138;
  if (v72)
  {
    if (!v73)
    {
      uint64_t v136 = *(void (**)(char *, char *, uint64_t))(v134 + 16);
      v136(v21, v70, v6);
      uint64_t v74 = *(int *)(v23 + 20);
      uint64_t v75 = &v21[v74];
      uint64_t v76 = &v70[v74];
      uint64_t v77 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
      uint64_t v78 = *(void *)(v77 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v78 + 48))(v76, 1, v77))
      {
        uint64_t v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
        memcpy(v75, v76, *(void *)(*(void *)(v79 - 8) + 64));
      }
      else
      {
        v136(v75, v76, v6);
        uint64_t v91 = *(int *)(v77 + 20);
        uint64_t v133 = v75;
        uint64_t v92 = &v75[v91];
        uint64_t v93 = &v76[v91];
        uint64_t v94 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
        uint64_t v95 = *(void *)(v94 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v95 + 48))(v93, 1, v94))
        {
          uint64_t v96 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
          memcpy(v92, v93, *(void *)(*(void *)(v96 - 8) + 64));
        }
        else
        {
          *(void *)uint64_t v92 = *(void *)v93;
          uint64_t v106 = *(int *)(v94 + 20);
          __srcb = &v92[v106];
          uint64_t v107 = &v93[v106];
          swift_bridgeObjectRetain();
          v136(__srcb, v107, v6);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v95 + 56))(v92, 0, 1, v94);
        }
        uint64_t v19 = v138;
        (*(void (**)(char *, void, uint64_t, uint64_t))(v78 + 56))(v133, 0, 1, v77);
      }
LABEL_48:
      (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
      return v19;
    }
    goto LABEL_36;
  }
  if (v73)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v21, type metadata accessor for AspireHeSerializedRelinKey);
LABEL_36:
    size_t v36 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?)
                                - 8)
                    + 64);
    uint64_t v37 = v21;
    uint64_t v38 = v70;
    goto LABEL_16;
  }
  v135((uint64_t)v21, (uint64_t)v70, v6);
  uint64_t v84 = *(int *)(v23 + 20);
  v21 += v84;
  uint64_t v22 = &v70[v84];
  uint64_t v85 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
  uint64_t v86 = *(void *)(v85 - 8);
  uint64_t v87 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v86 + 48);
  int v88 = v87(v21, 1, v85);
  int v89 = v87(v22, 1, v85);
  if (!v88)
  {
    uint64_t v19 = v138;
    if (!v89)
    {
      v135((uint64_t)v21, (uint64_t)v22, v6);
      uint64_t v108 = *(int *)(v85 + 20);
      uint64_t v109 = &v21[v108];
      uint64_t v110 = &v22[v108];
      uint64_t v111 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
      uint64_t v112 = *(void *)(v111 - 8);
      uint64_t v113 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v112 + 48);
      int v114 = v113(v109, 1, v111);
      int v115 = v113(v110, 1, v111);
      if (v114)
      {
        if (!v115)
        {
          *(void *)uint64_t v109 = *(void *)v110;
          uint64_t v116 = *(int *)(v111 + 20);
          uint64_t v117 = &v109[v116];
          uint64_t v118 = &v110[v116];
          uint64_t v119 = *(void (**)(char *, char *, uint64_t))(v134 + 16);
          swift_bridgeObjectRetain();
          v119(v117, v118, v6);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v112 + 56))(v109, 0, 1, v111);
          return v19;
        }
      }
      else
      {
        if (!v115)
        {
          *(void *)uint64_t v109 = *(void *)v110;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          v135((uint64_t)&v109[*(int *)(v111 + 20)], (uint64_t)&v110[*(int *)(v111 + 20)], v6);
          return v19;
        }
        outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v109, type metadata accessor for AspireHeSerializedCiphertextVec);
      }
      size_t v36 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?)
                                  - 8)
                      + 64);
      uint64_t v37 = v109;
      uint64_t v38 = v110;
      goto LABEL_16;
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v21, type metadata accessor for AspireHeSerializedKeySwitchKey);
    uint64_t v35 = &demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?;
    goto LABEL_15;
  }
  if (v89)
  {
    uint64_t v90 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
    memcpy(v21, v22, *(void *)(*(void *)(v90 - 8) + 64));
    return v138;
  }
  else
  {
    uint64_t v99 = *(void (**)(char *, char *, uint64_t))(v134 + 16);
    v99(v21, v22, v6);
    uint64_t v100 = *(int *)(v85 + 20);
    uint64_t v101 = &v21[v100];
    uint64_t v102 = &v22[v100];
    uint64_t v103 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
    uint64_t v104 = *(void *)(v103 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v104 + 48))(v102, 1, v103))
    {
      uint64_t v105 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
      memcpy(v101, v102, *(void *)(*(void *)(v105 - 8) + 64));
    }
    else
    {
      *(void *)uint64_t v101 = *(void *)v102;
      uint64_t v120 = *(int *)(v103 + 20);
      uint64_t v137 = &v101[v120];
      uint64_t v121 = &v102[v120];
      swift_bridgeObjectRetain();
      v99(v137, v121, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v104 + 56))(v101, 0, 1, v103);
    }
    (*(void (**)(char *, void, uint64_t, uint64_t))(v86 + 56))(v21, 0, 1, v85);
    return v138;
  }
}

uint64_t initializeWithTake for AMDPbEvaluationKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  uint64_t v11 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    *uint64_t v9 = *v10;
    *(_OWORD *)(v9 + 1) = *(_OWORD *)(v10 + 1);
    v7((uint64_t)v9 + *(int *)(v11 + 24), (uint64_t)v10 + *(int *)(v11 + 24), v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  uint64_t v14 = *(int *)(a3 + 24);
  uint64_t v15 = (char *)(a1 + v14);
  unint64_t v16 = (char *)(a2 + v14);
  uint64_t v17 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  uint64_t v18 = *(void *)(v17 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
  {
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
    memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    uint64_t v51 = v18;
    v7((uint64_t)v15, (uint64_t)v16, v6);
    uint64_t v20 = *(int *)(v17 + 20);
    uint64_t v52 = v15;
    uint64_t v21 = &v15[v20];
    uint64_t v22 = &v16[v20];
    uint64_t v23 = type metadata accessor for AspireHeSerializedGaloisKey(0);
    uint64_t v24 = *(void *)(v23 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
    {
      uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
      memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
    }
    else
    {
      *(void *)uint64_t v21 = *(void *)v22;
      v7((uint64_t)&v21[*(int *)(v23 + 20)], (uint64_t)&v22[*(int *)(v23 + 20)], v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
    }
    int v26 = v52;
    uint64_t v27 = *(int *)(v17 + 24);
    uint64_t v28 = &v52[v27];
    uint64_t v29 = &v16[v27];
    uint64_t v30 = type metadata accessor for AspireHeSerializedRelinKey(0);
    uint64_t v31 = *(void *)(v30 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
    {
      uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
      memcpy(v28, v29, *(void *)(*(void *)(v32 - 8) + 64));
    }
    else
    {
      uint64_t v49 = v31;
      v7((uint64_t)v28, (uint64_t)v29, v6);
      uint64_t v33 = *(int *)(v30 + 20);
      uint64_t v48 = v28;
      __dst = &v28[v33];
      uint64_t v34 = &v29[v33];
      uint64_t v35 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
      uint64_t v36 = *(void *)(v35 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
      {
        uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
        memcpy(__dst, v34, *(void *)(*(void *)(v37 - 8) + 64));
        uint64_t v39 = v48;
        uint64_t v38 = v49;
      }
      else
      {
        v7((uint64_t)__dst, (uint64_t)v34, v6);
        uint64_t v47 = v35;
        uint64_t v40 = *(int *)(v35 + 20);
        uint64_t v46 = &__dst[v40];
        uint64_t v41 = &v34[v40];
        uint64_t v42 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
        uint64_t v43 = *(void *)(v42 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
        {
          uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
          memcpy(v46, v41, *(void *)(*(void *)(v44 - 8) + 64));
        }
        else
        {
          *(void *)uint64_t v46 = *(void *)v41;
          v7((uint64_t)&v46[*(int *)(v42 + 20)], (uint64_t)&v41[*(int *)(v42 + 20)], v6);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v43 + 56))(v46, 0, 1, v42);
        }
        uint64_t v39 = v48;
        uint64_t v38 = v49;
        (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(__dst, 0, 1, v47);
        int v26 = v52;
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v38 + 56))(v39, 0, 1, v30);
    }
    (*(void (**)(char *, void, uint64_t, uint64_t))(v51 + 56))(v26, 0, 1, v17);
  }
  return a1;
}

uint64_t assignWithTake for AMDPbEvaluationKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v118 = *(void *)(v6 - 8);
  uint64_t v119 = v6;
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v118 + 40);
  v7(a1, a2);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v120 = a1;
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  uint64_t v11 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  int v14 = v13(v9, 1, v11);
  int v15 = v13(v10, 1, v11);
  if (v14)
  {
    if (!v15)
    {
      *uint64_t v9 = *v10;
      *(_OWORD *)(v9 + 1) = *(_OWORD *)(v10 + 1);
      (*(void (**)(char *, char *, uint64_t))(v118 + 32))((char *)v9 + *(int *)(v11 + 24), (char *)v10 + *(int *)(v11 + 24), v119);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
LABEL_7:
      uint64_t v17 = v120;
      uint64_t v18 = (void (*)(char *, char *, uint64_t))v7;
      goto LABEL_8;
    }
LABEL_6:
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
    memcpy(v9, v10, *(void *)(*(void *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  if (v15)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v9, type metadata accessor for AMDPbEvaluationKeyMetadata);
    goto LABEL_6;
  }
  uint64_t v38 = v10[2];
  uint64_t v39 = v9[1];
  unint64_t v40 = v9[2];
  *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
  v9[2] = v38;
  outlined consume of Data._Representation(v39, v40);
  uint64_t v18 = (void (*)(char *, char *, uint64_t))v7;
  ((void (*)(char *, char *, uint64_t))v7)((char *)v9 + *(int *)(v11 + 24), (char *)v10 + *(int *)(v11 + 24), v119);
  uint64_t v17 = v120;
LABEL_8:
  uint64_t v19 = *(int *)(a3 + 24);
  uint64_t v20 = (char *)(v17 + v19);
  uint64_t v21 = (char *)(a2 + v19);
  uint64_t v22 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  uint64_t v23 = *(void **)(v22 - 8);
  uint64_t v24 = (uint64_t (*)(char *, uint64_t, uint64_t))v23[6];
  int v25 = v24(v20, 1, v22);
  int v26 = v24(v21, 1, v22);
  if (!v25)
  {
    if (v26)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v20, type metadata accessor for AspireHeSerializedEvaluationKey);
      goto LABEL_14;
    }
    v18(v20, v21, v119);
    uint64_t v41 = *(int *)(v22 + 20);
    uint64_t v42 = &v20[v41];
    uint64_t v43 = &v21[v41];
    uint64_t v44 = type metadata accessor for AspireHeSerializedGaloisKey(0);
    uint64_t v45 = *(void *)(v44 - 8);
    uint64_t v46 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v45 + 48);
    int v114 = v42;
    LODWORD(v42) = v46(v42, 1, v44);
    int v47 = v46(v43, 1, v44);
    if (v42)
    {
      if (v47)
      {
        size_t v48 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?)
                                    - 8)
                        + 64);
        uint64_t v49 = v114;
LABEL_28:
        memcpy(v49, v43, v48);
        uint64_t v63 = v118;
        uint64_t v62 = v119;
        goto LABEL_33;
      }
      void *v114 = *(void *)v43;
      uint64_t v63 = v118;
      uint64_t v62 = v119;
      (*(void (**)(char *, char *, uint64_t))(v118 + 32))((char *)v114 + *(int *)(v44 + 20), &v43[*(int *)(v44 + 20)], v119);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v45 + 56))(v114, 0, 1, v44);
    }
    else
    {
      if (v47)
      {
        outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v114, type metadata accessor for AspireHeSerializedGaloisKey);
        size_t v48 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?)
                                    - 8)
                        + 64);
        uint64_t v49 = v114;
        goto LABEL_28;
      }
      void *v114 = *(void *)v43;
      swift_bridgeObjectRelease();
      uint64_t v62 = v119;
      ((void (*)(char *, char *, uint64_t))v7)((char *)v114 + *(int *)(v44 + 20), &v43[*(int *)(v44 + 20)], v119);
      uint64_t v63 = v118;
    }
LABEL_33:
    uint64_t v68 = *(int *)(v22 + 24);
    uint64_t v69 = (uint64_t)&v20[v68];
    uint64_t v70 = &v21[v68];
    uint64_t v71 = type metadata accessor for AspireHeSerializedRelinKey(0);
    uint64_t v72 = *(void *)(v71 - 8);
    int v73 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v72 + 48);
    int v74 = v73(v69, 1, v71);
    int v75 = v73((uint64_t)v70, 1, v71);
    if (v74)
    {
      uint64_t v17 = v120;
      if (!v75)
      {
        uint64_t v76 = *(void (**)(uint64_t, char *, uint64_t))(v63 + 32);
        v76(v69, v70, v62);
        uint64_t v77 = *(int *)(v71 + 20);
        uint64_t v78 = (char *)(v69 + v77);
        uint64_t v79 = &v70[v77];
        uint64_t v80 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
        uint64_t v81 = *(void *)(v80 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v81 + 48))(v79, 1, v80))
        {
          uint64_t v82 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
          memcpy(v78, v79, *(void *)(*(void *)(v82 - 8) + 64));
          uint64_t v17 = v120;
        }
        else
        {
          v76((uint64_t)v78, v79, v62);
          uint64_t v91 = *(int *)(v80 + 20);
          uint64_t v117 = &v78[v91];
          uint64_t v92 = &v79[v91];
          uint64_t v93 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
          uint64_t v94 = *(void *)(v93 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v94 + 48))(v92, 1, v93))
          {
            uint64_t v95 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
            memcpy(v117, v92, *(void *)(*(void *)(v95 - 8) + 64));
          }
          else
          {
            *(void *)uint64_t v117 = *(void *)v92;
            v76((uint64_t)&v117[*(int *)(v93 + 20)], &v92[*(int *)(v93 + 20)], v119);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v94 + 56))(v117, 0, 1, v93);
          }
          uint64_t v17 = v120;
          (*(void (**)(char *, void, uint64_t, uint64_t))(v81 + 56))(v78, 0, 1, v80);
        }
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v72 + 56))(v69, 0, 1, v71);
        return v17;
      }
    }
    else
    {
      uint64_t v17 = v120;
      if (!v75)
      {
        ((void (*)(uint64_t, char *, uint64_t))v7)(v69, v70, v62);
        uint64_t v83 = *(int *)(v71 + 20);
        uint64_t v20 = (char *)(v69 + v83);
        uint64_t v21 = &v70[v83];
        uint64_t v84 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
        uint64_t v85 = *(void *)(v84 - 8);
        uint64_t v86 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v85 + 48);
        int v87 = v86(v20, 1, v84);
        int v88 = v86(v21, 1, v84);
        if (v87)
        {
          if (v88)
          {
            uint64_t v89 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
            memcpy(v20, v21, *(void *)(*(void *)(v89 - 8) + 64));
            return v120;
          }
          else
          {
            uint64_t v96 = *(void (**)(char *, char *, uint64_t))(v63 + 32);
            v96(v20, v21, v62);
            uint64_t v97 = *(int *)(v84 + 20);
            uint64_t v98 = &v20[v97];
            uint64_t v99 = &v21[v97];
            uint64_t v100 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
            uint64_t v101 = v62;
            uint64_t v102 = *(void *)(v100 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v102 + 48))(v99, 1, v100))
            {
              uint64_t v103 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
              memcpy(v98, v99, *(void *)(*(void *)(v103 - 8) + 64));
            }
            else
            {
              *(void *)uint64_t v98 = *(void *)v99;
              v96(&v98[*(int *)(v100 + 20)], &v99[*(int *)(v100 + 20)], v101);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v102 + 56))(v98, 0, 1, v100);
            }
            (*(void (**)(char *, void, uint64_t, uint64_t))(v85 + 56))(v20, 0, 1, v84);
            return v120;
          }
        }
        uint64_t v17 = v120;
        if (!v88)
        {
          ((void (*)(char *, char *, uint64_t))v7)(v20, v21, v62);
          uint64_t v104 = *(int *)(v84 + 20);
          uint64_t v105 = &v20[v104];
          uint64_t v106 = &v21[v104];
          uint64_t v107 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
          uint64_t v108 = *(void *)(v107 - 8);
          uint64_t v109 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v108 + 48);
          int v110 = v109(v105, 1, v107);
          int v111 = v109(v106, 1, v107);
          if (v110)
          {
            uint64_t v17 = v120;
            if (!v111)
            {
              *(void *)uint64_t v105 = *(void *)v106;
              (*(void (**)(char *, char *, uint64_t))(v63 + 32))(&v105[*(int *)(v107 + 20)], &v106[*(int *)(v107 + 20)], v62);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v108 + 56))(v105, 0, 1, v107);
              return v17;
            }
          }
          else
          {
            uint64_t v17 = v120;
            if (!v111)
            {
              *(void *)uint64_t v105 = *(void *)v106;
              swift_bridgeObjectRelease();
              ((void (*)(char *, char *, uint64_t))v7)(&v105[*(int *)(v107 + 20)], &v106[*(int *)(v107 + 20)], v62);
              return v17;
            }
            outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v105, type metadata accessor for AspireHeSerializedCiphertextVec);
          }
          size_t v35 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?)
                                      - 8)
                          + 64);
          uint64_t v36 = v105;
          uint64_t v37 = v106;
          goto LABEL_16;
        }
        outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v20, type metadata accessor for AspireHeSerializedKeySwitchKey);
        uint64_t v34 = &demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?;
        goto LABEL_15;
      }
      outlined destroy of AMDPbHEConfig.OneOf_Config(v69, type metadata accessor for AspireHeSerializedRelinKey);
    }
    size_t v35 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?)
                                - 8)
                    + 64);
    uint64_t v36 = (void *)v69;
    uint64_t v37 = v70;
    goto LABEL_16;
  }
  if (v26)
  {
LABEL_14:
    uint64_t v34 = &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?;
LABEL_15:
    size_t v35 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(v34) - 8) + 64);
    uint64_t v36 = v20;
    uint64_t v37 = v21;
LABEL_16:
    memcpy(v36, v37, v35);
    return v17;
  }
  uint64_t v116 = (void (**)(void *, void, uint64_t, uint64_t))v23;
  uint64_t v27 = *(void (**)(char *, char *, uint64_t))(v118 + 32);
  v27(v20, v21, v119);
  uint64_t v28 = *(int *)(v22 + 20);
  uint64_t v29 = &v20[v28];
  uint64_t v30 = &v21[v28];
  uint64_t v31 = type metadata accessor for AspireHeSerializedGaloisKey(0);
  uint64_t v32 = *(void *)(v31 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
  {
    uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
    memcpy(v29, v30, *(void *)(*(void *)(v33 - 8) + 64));
  }
  else
  {
    *(void *)uint64_t v29 = *(void *)v30;
    v27(&v29[*(int *)(v31 + 20)], &v30[*(int *)(v31 + 20)], v119);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
  }
  uint64_t v50 = *(int *)(v22 + 24);
  uint64_t v51 = &v20[v50];
  uint64_t v52 = &v21[v50];
  uint64_t v53 = type metadata accessor for AspireHeSerializedRelinKey(0);
  uint64_t v54 = *(void *)(v53 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48))(v52, 1, v53))
  {
    uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
    memcpy(v51, v52, *(void *)(*(void *)(v55 - 8) + 64));
  }
  else
  {
    v27(v51, v52, v119);
    uint64_t v56 = *(int *)(v53 + 20);
    uint64_t v57 = &v51[v56];
    uint64_t v58 = &v52[v56];
    uint64_t v59 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
    uint64_t v60 = *(void *)(v59 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v60 + 48))(v58, 1, v59))
    {
      uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
      memcpy(v57, v58, *(void *)(*(void *)(v61 - 8) + 64));
    }
    else
    {
      v27(v57, v58, v119);
      uint64_t v64 = *(int *)(v59 + 20);
      int v115 = v57;
      __dst = &v57[v64];
      uint64_t v65 = &v58[v64];
      uint64_t v66 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
      uint64_t v112 = *(void *)(v66 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v112 + 48))(v65, 1, v66))
      {
        uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
        memcpy(__dst, v65, *(void *)(*(void *)(v67 - 8) + 64));
      }
      else
      {
        *(void *)__dst = *(void *)v65;
        v27(&__dst[*(int *)(v66 + 20)], &v65[*(int *)(v66 + 20)], v119);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v112 + 56))(__dst, 0, 1, v66);
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v60 + 56))(v115, 0, 1, v59);
    }
    (*(void (**)(char *, void, uint64_t, uint64_t))(v54 + 56))(v51, 0, 1, v53);
  }
  uint64_t v17 = v120;
  v116[7](v20, 0, 1, v22);
  return v17;
}

uint64_t getEnumTagSinglePayload for AMDPbEvaluationKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_249C9BA18);
}

uint64_t sub_249C9BA18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  int v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
  uint64_t v16 = v14;
  uint64_t v17 = a1 + *(int *)(a3 + 24);
  return v15(v17, a2, v16);
}

uint64_t storeEnumTagSinglePayload for AMDPbEvaluationKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_249C9BB80);
}

uint64_t sub_249C9BB80(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_5:
    return v11(v12, a2, a2, v10);
  }
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
  uint64_t v14 = *(void *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_5;
  }
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56);
  uint64_t v18 = v16;
  uint64_t v19 = a1 + *(int *)(a4 + 24);
  return v17(v19, a2, a2, v18);
}

void type metadata completion function for AMDPbEvaluationKey()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for AMDPbHEConfig.OneOf_Config?(319, &lazy cache variable for type metadata for AMDPbEvaluationKeyMetadata?, (void (*)(uint64_t))type metadata accessor for AMDPbEvaluationKeyMetadata);
    if (v1 <= 0x3F)
    {
      type metadata accessor for AMDPbHEConfig.OneOf_Config?(319, &lazy cache variable for type metadata for AspireHeSerializedEvaluationKey?, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedEvaluationKey);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for AMDPbEvaluationKeyMetadata(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    unint64_t v8 = a2[2];
    outlined copy of Data._Representation(v7, v8);
    v4[1] = v7;
    v4[2] = v8;
    uint64_t v9 = *(int *)(a3 + 24);
    uint64_t v10 = (char *)v4 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
  }
  return v4;
}

uint64_t destroy for AMDPbEvaluationKeyMetadata(uint64_t a1, uint64_t a2)
{
  outlined consume of Data._Representation(*(void *)(a1 + 8), *(void *)(a1 + 16));
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

void *initializeWithCopy for AMDPbEvaluationKeyMetadata(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  unint64_t v7 = a2[2];
  outlined copy of Data._Representation(v6, v7);
  a1[1] = v6;
  a1[2] = v7;
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  return a1;
}

void *assignWithCopy for AMDPbEvaluationKeyMetadata(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = a2[1];
  unint64_t v7 = a2[2];
  outlined copy of Data._Representation(v6, v7);
  uint64_t v8 = a1[1];
  unint64_t v9 = a1[2];
  a1[1] = v6;
  a1[2] = v7;
  outlined consume of Data._Representation(v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

uint64_t initializeWithTake for AMDPbEvaluationKeyMetadata(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for AMDPbEvaluationKeyMetadata(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a1 + 8);
  unint64_t v8 = *(void *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v6;
  outlined consume of Data._Representation(v7, v8);
  uint64_t v9 = *(int *)(a3 + 24);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 40))(v10, v11, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for AMDPbEvaluationKeyMetadata(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_249C9C200);
}

uint64_t sub_249C9C200(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 16) >> 60;
    if (((4 * v4) & 0xC) != 0) {
      return 16 - ((4 * v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for AMDPbEvaluationKeyMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_249C9C2D0);
}

uint64_t sub_249C9C2D0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 24);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for AMDPbEvaluationKeyMetadata()
{
  return type metadata completion function for AMDPbHEConfigsReply();
}

uint64_t *initializeBufferWithCopyOfBuffer for AMDPbPIRQuery(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v21 = v20 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    uint64_t v7 = a2[1];
    unint64_t v8 = a2[2];
    outlined copy of Data._Representation(v7, v8);
    v4[1] = v7;
    v4[2] = v8;
    uint64_t v9 = a3[6];
    uint64_t v10 = (char *)v4 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for UnknownStorage();
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    v13(v10, v11, v12);
    uint64_t v14 = a3[7];
    int v15 = (uint64_t *)((char *)v4 + v14);
    uint64_t v16 = (uint64_t *)((char *)a2 + v14);
    uint64_t v17 = type metadata accessor for AspirePirEncryptedIndices(0);
    uint64_t v18 = *(void *)(v17 - 8);
    uint64_t v94 = v4;
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
      memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      uint64_t v22 = v16[1];
      *int v15 = *v16;
      v15[1] = v22;
      uint64_t v23 = *(int *)(v17 + 24);
      uint64_t v24 = v12;
      int v25 = v13;
      int v26 = (char *)v15 + v23;
      uint64_t v27 = (char *)v16 + v23;
      swift_bridgeObjectRetain();
      uint64_t v28 = v26;
      uint64_t v13 = v25;
      uint64_t v12 = v24;
      uint64_t v4 = v94;
      v13(v28, v27, v12);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
    uint64_t v29 = a3[8];
    uint64_t v30 = (char *)v4 + v29;
    uint64_t v31 = (char *)a2 + v29;
    uint64_t v32 = type metadata accessor for AMDPbEvaluationKey(0);
    uint64_t v33 = *(void *)(v32 - 8);
    uint64_t v93 = v32;
    if ((*(unsigned int (**)(char *, uint64_t))(v33 + 48))(v31, 1))
    {
      uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKey?);
      memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64));
    }
    else
    {
      v13(v30, v31, v12);
      uint64_t v35 = *(int *)(v93 + 20);
      uint64_t v36 = &v30[v35];
      uint64_t v37 = &v31[v35];
      uint64_t v38 = v13;
      uint64_t v39 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
      uint64_t v40 = *(void *)(v39 - 8);
      uint64_t v88 = v12;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v37, 1, v39))
      {
        uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
        memcpy(v36, v37, *(void *)(*(void *)(v41 - 8) + 64));
      }
      else
      {
        uint64_t v91 = v33;
        uint64_t v42 = *((void *)v37 + 1);
        *(void *)uint64_t v36 = *(void *)v37;
        uint64_t v89 = v30;
        unint64_t v43 = *((void *)v37 + 2);
        outlined copy of Data._Representation(v42, v43);
        *((void *)v36 + 1) = v42;
        *((void *)v36 + 2) = v43;
        uint64_t v33 = v91;
        uint64_t v30 = v89;
        v38(&v36[*(int *)(v39 + 24)], &v37[*(int *)(v39 + 24)], v12);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v40 + 56))(v36, 0, 1, v39);
      }
      uint64_t v44 = *(int *)(v93 + 24);
      uint64_t v45 = &v30[v44];
      uint64_t v46 = &v31[v44];
      uint64_t v47 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
      uint64_t v48 = *(void *)(v47 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v46, 1, v47))
      {
        uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
        memcpy(v45, v46, *(void *)(*(void *)(v49 - 8) + 64));
      }
      else
      {
        uint64_t v92 = v33;
        uint64_t v90 = v30;
        v38(v45, v46, v88);
        uint64_t v50 = *(int *)(v47 + 20);
        int v87 = v45;
        uint64_t v51 = &v45[v50];
        uint64_t v52 = &v46[v50];
        uint64_t v53 = type metadata accessor for AspireHeSerializedGaloisKey(0);
        uint64_t v54 = *(void *)(v53 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48))(v52, 1, v53))
        {
          uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
          memcpy(v51, v52, *(void *)(*(void *)(v55 - 8) + 64));
        }
        else
        {
          *(void *)uint64_t v51 = *(void *)v52;
          uint64_t v56 = *(int *)(v53 + 20);
          uint64_t v57 = &v51[v56];
          uint64_t v58 = &v52[v56];
          swift_bridgeObjectRetain();
          v38(v57, v58, v88);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v54 + 56))(v51, 0, 1, v53);
        }
        uint64_t v33 = v92;
        uint64_t v59 = v87;
        uint64_t v60 = *(int *)(v47 + 24);
        uint64_t v61 = &v87[v60];
        uint64_t v62 = &v46[v60];
        uint64_t v63 = type metadata accessor for AspireHeSerializedRelinKey(0);
        uint64_t v64 = *(void *)(v63 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48))(v62, 1, v63))
        {
          uint64_t v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
          memcpy(v61, v62, *(void *)(*(void *)(v65 - 8) + 64));
          uint64_t v30 = v90;
          uint64_t v66 = v48;
        }
        else
        {
          uint64_t v86 = v64;
          v38(v61, v62, v88);
          uint64_t v67 = *(int *)(v63 + 20);
          uint64_t v68 = &v61[v67];
          uint64_t v69 = &v62[v67];
          uint64_t v70 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
          uint64_t v71 = *(void *)(v70 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v71 + 48))(v69, 1, v70))
          {
            uint64_t v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
            memcpy(v68, v69, *(void *)(*(void *)(v72 - 8) + 64));
            uint64_t v33 = v92;
            uint64_t v66 = v48;
            uint64_t v59 = v87;
            uint64_t v73 = v86;
          }
          else
          {
            v38(v68, v69, v88);
            uint64_t v84 = v70;
            uint64_t v85 = v68;
            uint64_t v74 = *(int *)(v70 + 20);
            int v75 = &v68[v74];
            uint64_t v76 = &v69[v74];
            uint64_t v77 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
            uint64_t v78 = *(void *)(v77 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v78 + 48))(v76, 1, v77))
            {
              uint64_t v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
              memcpy(v75, v76, *(void *)(*(void *)(v79 - 8) + 64));
            }
            else
            {
              *(void *)int v75 = *(void *)v76;
              uint64_t v80 = *(int *)(v77 + 20);
              uint64_t v83 = &v75[v80];
              uint64_t v81 = &v76[v80];
              swift_bridgeObjectRetain();
              v38(v83, v81, v88);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v78 + 56))(v75, 0, 1, v77);
            }
            uint64_t v33 = v92;
            uint64_t v66 = v48;
            uint64_t v59 = v87;
            uint64_t v73 = v86;
            (*(void (**)(char *, void, uint64_t, uint64_t))(v71 + 56))(v85, 0, 1, v84);
          }
          (*(void (**)(char *, void, uint64_t, uint64_t))(v73 + 56))(v61, 0, 1, v63);
          uint64_t v30 = v90;
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v66 + 56))(v59, 0, 1, v47);
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v93);
    }
    return v94;
  }
  return (uint64_t *)v21;
}

uint64_t destroy for AMDPbPIRQuery(uint64_t a1, int *a2)
{
  outlined consume of Data._Representation(*(void *)(a1 + 8), *(void *)(a1 + 16));
  uint64_t v4 = a1 + a2[6];
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v24 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v24(v4, v5);
  uint64_t v6 = a1 + a2[7];
  uint64_t v7 = type metadata accessor for AspirePirEncryptedIndices(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7))
  {
    swift_bridgeObjectRelease();
    v24(v6 + *(int *)(v7 + 24), v5);
  }
  uint64_t v8 = a1 + a2[8];
  uint64_t v9 = type metadata accessor for AMDPbEvaluationKey(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9);
  if (!result)
  {
    v24(v8, v5);
    uint64_t v11 = v8 + *(int *)(v9 + 20);
    uint64_t v12 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48))(v11, 1, v12))
    {
      outlined consume of Data._Representation(*(void *)(v11 + 8), *(void *)(v11 + 16));
      v24(v11 + *(int *)(v12 + 24), v5);
    }
    uint64_t v13 = v8 + *(int *)(v9 + 24);
    uint64_t v14 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48))(v13, 1, v14);
    if (!result)
    {
      v24(v13, v5);
      uint64_t v15 = v13 + *(int *)(v14 + 20);
      uint64_t v16 = type metadata accessor for AspireHeSerializedGaloisKey(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48))(v15, 1, v16))
      {
        swift_bridgeObjectRelease();
        v24(v15 + *(int *)(v16 + 20), v5);
      }
      uint64_t v17 = v13 + *(int *)(v14 + 24);
      uint64_t v18 = type metadata accessor for AspireHeSerializedRelinKey(0);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 48))(v17, 1, v18);
      if (!result)
      {
        v24(v17, v5);
        uint64_t v19 = v17 + *(int *)(v18 + 20);
        uint64_t v20 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 48))(v19, 1, v20);
        if (!result)
        {
          v24(v19, v5);
          uint64_t v21 = v19 + *(int *)(v20 + 20);
          uint64_t v22 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 48))(v21, 1, v22);
          if (!result)
          {
            swift_bridgeObjectRelease();
            uint64_t v23 = v21 + *(int *)(v22 + 20);
            return ((uint64_t (*)(uint64_t, uint64_t))v24)(v23, v5);
          }
        }
      }
    }
  }
  return result;
}

uint64_t initializeWithCopy for AMDPbPIRQuery(uint64_t a1, uint64_t a2, int *a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  unint64_t v7 = *(void *)(a2 + 16);
  outlined copy of Data._Representation(v6, v7);
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = v7;
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
  v12(v9, v10, v11);
  uint64_t v13 = a3[7];
  uint64_t v92 = a1;
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (void *)(a2 + v13);
  uint64_t v16 = type metadata accessor for AspirePirEncryptedIndices(0);
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    uint64_t v19 = v15[1];
    *uint64_t v14 = *v15;
    v14[1] = v19;
    uint64_t v20 = *(int *)(v16 + 24);
    uint64_t v21 = v11;
    uint64_t v22 = v12;
    uint64_t v23 = (char *)v14 + v20;
    uint64_t v24 = (char *)v15 + v20;
    swift_bridgeObjectRetain();
    int v25 = v23;
    uint64_t v12 = v22;
    uint64_t v11 = v21;
    v12((uint64_t)v25, (uint64_t)v24, v21);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  uint64_t v26 = a3[8];
  uint64_t v27 = v92;
  uint64_t v28 = (char *)(v92 + v26);
  uint64_t v29 = (char *)(a2 + v26);
  uint64_t v30 = type metadata accessor for AMDPbEvaluationKey(0);
  uint64_t v31 = *(void *)(v30 - 8);
  uint64_t v91 = v30;
  if ((*(unsigned int (**)(char *, uint64_t))(v31 + 48))(v29, 1))
  {
    uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKey?);
    memcpy(v28, v29, *(void *)(*(void *)(v32 - 8) + 64));
  }
  else
  {
    v12((uint64_t)v28, (uint64_t)v29, v11);
    uint64_t v33 = *(int *)(v91 + 20);
    uint64_t v34 = &v28[v33];
    uint64_t v35 = &v29[v33];
    uint64_t v36 = (void (*)(char *, char *, uint64_t))v12;
    uint64_t v37 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
    uint64_t v38 = *(void *)(v37 - 8);
    uint64_t v86 = v11;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v35, 1, v37))
    {
      uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
      memcpy(v34, v35, *(void *)(*(void *)(v39 - 8) + 64));
    }
    else
    {
      uint64_t v89 = v31;
      uint64_t v40 = *((void *)v35 + 1);
      *(void *)uint64_t v34 = *(void *)v35;
      int v87 = v28;
      unint64_t v41 = *((void *)v35 + 2);
      outlined copy of Data._Representation(v40, v41);
      *((void *)v34 + 1) = v40;
      *((void *)v34 + 2) = v41;
      uint64_t v31 = v89;
      uint64_t v28 = v87;
      v36(&v34[*(int *)(v37 + 24)], &v35[*(int *)(v37 + 24)], v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v38 + 56))(v34, 0, 1, v37);
    }
    uint64_t v42 = *(int *)(v91 + 24);
    unint64_t v43 = &v28[v42];
    uint64_t v44 = &v29[v42];
    uint64_t v45 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
    uint64_t v46 = *(void *)(v45 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v44, 1, v45))
    {
      uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
      memcpy(v43, v44, *(void *)(*(void *)(v47 - 8) + 64));
      uint64_t v27 = v92;
    }
    else
    {
      uint64_t v90 = v31;
      uint64_t v88 = v28;
      v36(v43, v44, v86);
      uint64_t v48 = *(int *)(v45 + 20);
      uint64_t v85 = v43;
      uint64_t v49 = &v43[v48];
      uint64_t v50 = &v44[v48];
      uint64_t v51 = type metadata accessor for AspireHeSerializedGaloisKey(0);
      uint64_t v52 = *(void *)(v51 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v50, 1, v51))
      {
        uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
        memcpy(v49, v50, *(void *)(*(void *)(v53 - 8) + 64));
      }
      else
      {
        *(void *)uint64_t v49 = *(void *)v50;
        uint64_t v54 = *(int *)(v51 + 20);
        uint64_t v55 = &v49[v54];
        uint64_t v56 = &v50[v54];
        swift_bridgeObjectRetain();
        v36(v55, v56, v86);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v52 + 56))(v49, 0, 1, v51);
      }
      uint64_t v31 = v90;
      uint64_t v57 = v85;
      uint64_t v58 = *(int *)(v45 + 24);
      uint64_t v59 = &v85[v58];
      uint64_t v60 = &v44[v58];
      uint64_t v61 = type metadata accessor for AspireHeSerializedRelinKey(0);
      uint64_t v62 = *(void *)(v61 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48))(v60, 1, v61))
      {
        uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
        memcpy(v59, v60, *(void *)(*(void *)(v63 - 8) + 64));
        uint64_t v28 = v88;
        uint64_t v64 = v46;
      }
      else
      {
        uint64_t v84 = v62;
        v36(v59, v60, v86);
        uint64_t v65 = *(int *)(v61 + 20);
        uint64_t v66 = &v59[v65];
        uint64_t v67 = &v60[v65];
        uint64_t v68 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
        uint64_t v69 = *(void *)(v68 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v69 + 48))(v67, 1, v68))
        {
          uint64_t v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
          memcpy(v66, v67, *(void *)(*(void *)(v70 - 8) + 64));
          uint64_t v31 = v90;
          uint64_t v64 = v46;
          uint64_t v57 = v85;
          uint64_t v71 = v84;
        }
        else
        {
          v36(v66, v67, v86);
          uint64_t v82 = v68;
          uint64_t v83 = v66;
          uint64_t v72 = *(int *)(v68 + 20);
          uint64_t v73 = &v66[v72];
          uint64_t v74 = &v67[v72];
          uint64_t v75 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
          uint64_t v76 = *(void *)(v75 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v76 + 48))(v74, 1, v75))
          {
            uint64_t v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
            memcpy(v73, v74, *(void *)(*(void *)(v77 - 8) + 64));
          }
          else
          {
            *(void *)uint64_t v73 = *(void *)v74;
            uint64_t v78 = *(int *)(v75 + 20);
            uint64_t v81 = &v73[v78];
            uint64_t v79 = &v74[v78];
            swift_bridgeObjectRetain();
            v36(v81, v79, v86);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v76 + 56))(v73, 0, 1, v75);
          }
          uint64_t v31 = v90;
          uint64_t v64 = v46;
          uint64_t v57 = v85;
          uint64_t v71 = v84;
          (*(void (**)(char *, void, uint64_t, uint64_t))(v69 + 56))(v83, 0, 1, v82);
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v71 + 56))(v59, 0, 1, v61);
        uint64_t v28 = v88;
      }
      uint64_t v27 = v92;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v64 + 56))(v57, 0, 1, v45);
    }
    (*(void (**)(char *, void, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v91);
  }
  return v27;
}

uint64_t assignWithCopy for AMDPbPIRQuery(uint64_t a1, uint64_t a2, int *a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  unint64_t v7 = *(void *)(a2 + 16);
  outlined copy of Data._Representation(v6, v7);
  uint64_t v8 = *(void *)(a1 + 8);
  unint64_t v9 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = v7;
  outlined consume of Data._Representation(v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage();
  uint64_t v219 = *(void *)(v13 - 8);
  uint64_t v228 = v13;
  __dst = *(void (**)(uint64_t, uint64_t))(v219 + 24);
  __dst(v11, v12);
  uint64_t v14 = a3[7];
  uint64_t v227 = a1;
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (void *)(a2 + v14);
  uint64_t v17 = type metadata accessor for AspirePirEncryptedIndices(0);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v18 + 48);
  int v20 = v19(v15, 1, v17);
  int v21 = v19(v16, 1, v17);
  if (v20)
  {
    if (!v21)
    {
      *uint64_t v15 = *v16;
      v15[1] = v16[1];
      uint64_t v22 = *(int *)(v17 + 24);
      uint64_t v23 = (char *)v15 + v22;
      uint64_t v24 = (char *)v16 + v22;
      int v25 = *(void (**)(char *, char *, uint64_t))(v219 + 16);
      swift_bridgeObjectRetain();
      v25(v23, v24, v228);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
LABEL_7:
      uint64_t v27 = (void (*)(uint64_t, char *, uint64_t))__dst;
      uint64_t v28 = v227;
      goto LABEL_8;
    }
LABEL_6:
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
    memcpy(v15, v16, *(void *)(*(void *)(v26 - 8) + 64));
    goto LABEL_7;
  }
  if (v21)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v15, type metadata accessor for AspirePirEncryptedIndices);
    goto LABEL_6;
  }
  *uint64_t v15 = *v16;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v15[1] = v16[1];
  uint64_t v27 = (void (*)(uint64_t, char *, uint64_t))__dst;
  ((void (*)(char *, char *, uint64_t))__dst)((char *)v15 + *(int *)(v17 + 24), (char *)v16 + *(int *)(v17 + 24), v228);
  uint64_t v28 = v227;
LABEL_8:
  uint64_t v29 = a3[8];
  uint64_t v30 = v28 + v29;
  uint64_t v31 = (char *)(a2 + v29);
  uint64_t v32 = type metadata accessor for AMDPbEvaluationKey(0);
  uint64_t v33 = *(void **)(v32 - 8);
  uint64_t v34 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v33[6];
  int v35 = v34(v30, 1, v32);
  int v36 = v34((uint64_t)v31, 1, v32);
  if (v35)
  {
    if (!v36)
    {
      __src = v33;
      uint64_t v37 = v32;
      uint64_t v38 = *(void (**)(uint64_t, char *, uint64_t))(v219 + 16);
      v38(v30, v31, v228);
      uint64_t v210 = v37;
      uint64_t v39 = *(int *)(v37 + 20);
      __dsta = (char *)v30;
      uint64_t v40 = (void *)(v30 + v39);
      unint64_t v41 = &v31[v39];
      uint64_t v42 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
      uint64_t v43 = *(void *)(v42 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
      {
        uint64_t v44 = v38;
        uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
        memcpy(v40, v41, *(void *)(*(void *)(v45 - 8) + 64));
      }
      else
      {
        *uint64_t v40 = *(void *)v41;
        uint64_t v59 = *((void *)v41 + 1);
        unint64_t v60 = *((void *)v41 + 2);
        outlined copy of Data._Representation(v59, v60);
        v40[1] = v59;
        v40[2] = v60;
        uint64_t v28 = v227;
        uint64_t v44 = v38;
        v38((uint64_t)v40 + *(int *)(v42 + 24), &v41[*(int *)(v42 + 24)], v228);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
      }
      uint64_t v61 = v210;
      uint64_t v62 = *(int *)(v210 + 24);
      uint64_t v63 = &__dsta[v62];
      uint64_t v64 = &v31[v62];
      uint64_t v65 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
      uint64_t v66 = *(void *)(v65 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v64, 1, v65))
      {
        uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
        memcpy(v63, v64, *(void *)(*(void *)(v67 - 8) + 64));
        uint64_t v68 = (uint64_t)__dsta;
      }
      else
      {
        uint64_t v206 = v66;
        uint64_t v69 = v44;
        v44((uint64_t)v63, v64, v228);
        uint64_t v70 = *(int *)(v65 + 20);
        uint64_t v208 = v63;
        uint64_t v71 = &v63[v70];
        uint64_t v72 = &v64[v70];
        uint64_t v73 = type metadata accessor for AspireHeSerializedGaloisKey(0);
        uint64_t v74 = *(void *)(v73 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v74 + 48))(v72, 1, v73))
        {
          uint64_t v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
          memcpy(v71, v72, *(void *)(*(void *)(v75 - 8) + 64));
        }
        else
        {
          *(void *)uint64_t v71 = *(void *)v72;
          uint64_t v91 = *(int *)(v73 + 20);
          uint64_t v92 = &v71[v91];
          uint64_t v93 = &v72[v91];
          swift_bridgeObjectRetain();
          uint64_t v94 = v92;
          uint64_t v44 = v69;
          v69((uint64_t)v94, v93, v228);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v74 + 56))(v71, 0, 1, v73);
        }
        uint64_t v95 = *(int *)(v65 + 24);
        uint64_t v96 = &v208[v95];
        uint64_t v97 = &v64[v95];
        uint64_t v98 = type metadata accessor for AspireHeSerializedRelinKey(0);
        uint64_t v99 = *(void *)(v98 - 8);
        uint64_t v61 = v210;
        uint64_t v33 = __src;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v99 + 48))(v97, 1, v98))
        {
          uint64_t v100 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
          memcpy(v96, v97, *(void *)(*(void *)(v100 - 8) + 64));
          uint64_t v68 = (uint64_t)__dsta;
          uint64_t v28 = v227;
          uint64_t v101 = v208;
        }
        else
        {
          uint64_t v204 = v99;
          v44((uint64_t)v96, v97, v228);
          uint64_t v102 = *(int *)(v98 + 20);
          uint64_t v202 = v96;
          uint64_t v103 = &v96[v102];
          uint64_t v104 = &v97[v102];
          uint64_t v105 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
          uint64_t v106 = *(void *)(v105 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v106 + 48))(v104, 1, v105))
          {
            uint64_t v107 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
            memcpy(v103, v104, *(void *)(*(void *)(v107 - 8) + 64));
            uint64_t v33 = __src;
            uint64_t v101 = v208;
            uint64_t v68 = (uint64_t)__dsta;
            uint64_t v109 = v202;
            uint64_t v108 = v204;
          }
          else
          {
            v44((uint64_t)v103, v104, v228);
            uint64_t v200 = v105;
            uint64_t v201 = v103;
            uint64_t v132 = *(int *)(v105 + 20);
            uint64_t v133 = &v103[v132];
            uint64_t v134 = &v104[v132];
            uint64_t v135 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
            uint64_t v136 = *(void *)(v135 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v136 + 48))(v134, 1, v135))
            {
              uint64_t v137 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
              memcpy(v133, v134, *(void *)(*(void *)(v137 - 8) + 64));
            }
            else
            {
              *(void *)uint64_t v133 = *(void *)v134;
              uint64_t v147 = *(int *)(v135 + 20);
              uint64_t v199 = &v133[v147];
              uint64_t v148 = &v134[v147];
              swift_bridgeObjectRetain();
              v44((uint64_t)v199, v148, v228);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v136 + 56))(v133, 0, 1, v135);
            }
            uint64_t v33 = __src;
            uint64_t v66 = v206;
            uint64_t v101 = v208;
            uint64_t v68 = (uint64_t)__dsta;
            uint64_t v109 = v202;
            uint64_t v108 = v204;
            (*(void (**)(char *, void, uint64_t, uint64_t))(v106 + 56))(v201, 0, 1, v200);
          }
          (*(void (**)(char *, void, uint64_t, uint64_t))(v108 + 56))(v109, 0, 1, v98);
          uint64_t v28 = v227;
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v66 + 56))(v101, 0, 1, v65);
      }
      goto LABEL_62;
    }
    goto LABEL_14;
  }
  if (v36)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config(v30, type metadata accessor for AMDPbEvaluationKey);
LABEL_14:
    uint64_t v46 = &demangling cache variable for type metadata for AMDPbEvaluationKey?;
LABEL_15:
    size_t v47 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(v46) - 8) + 64);
    uint64_t v48 = (void *)v30;
    uint64_t v49 = v31;
LABEL_16:
    memcpy(v48, v49, v47);
    return v28;
  }
  v27(v30, v31, v228);
  uint64_t v50 = *(int *)(v32 + 20);
  uint64_t v51 = (char *)(v30 + v50);
  uint64_t v52 = &v31[v50];
  uint64_t v53 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
  uint64_t v211 = *(void *)(v53 - 8);
  uint64_t v54 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v211 + 48);
  int v55 = v54(v51, 1, v53);
  int v56 = v54(v52, 1, v53);
  if (v55)
  {
    if (!v56)
    {
      *(void *)uint64_t v51 = *(void *)v52;
      uint64_t v58 = *((void *)v52 + 1);
      unint64_t v57 = *((void *)v52 + 2);
      outlined copy of Data._Representation(v58, v57);
      *((void *)v51 + 1) = v58;
      *((void *)v51 + 2) = v57;
      (*(void (**)(char *, char *, uint64_t))(v219 + 16))(&v51[*(int *)(v53 + 24)], &v52[*(int *)(v53 + 24)], v228);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v211 + 56))(v51, 0, 1, v53);
LABEL_29:
      uint64_t v77 = (void (*)(uint64_t, char *, uint64_t))__dst;
      uint64_t v28 = v227;
      goto LABEL_30;
    }
LABEL_28:
    uint64_t v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
    memcpy(v51, v52, *(void *)(*(void *)(v76 - 8) + 64));
    goto LABEL_29;
  }
  if (v56)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v51, type metadata accessor for AMDPbEvaluationKeyMetadata);
    goto LABEL_28;
  }
  *(void *)uint64_t v51 = *(void *)v52;
  uint64_t v111 = *((void *)v52 + 1);
  unint64_t v110 = *((void *)v52 + 2);
  outlined copy of Data._Representation(v111, v110);
  uint64_t v112 = *((void *)v51 + 1);
  unint64_t v113 = *((void *)v51 + 2);
  *((void *)v51 + 1) = v111;
  *((void *)v51 + 2) = v110;
  outlined consume of Data._Representation(v112, v113);
  uint64_t v114 = *(int *)(v53 + 24);
  uint64_t v77 = (void (*)(uint64_t, char *, uint64_t))__dst;
  ((void (*)(char *, char *, uint64_t))__dst)(&v51[v114], &v52[v114], v228);
  uint64_t v28 = v227;
LABEL_30:
  uint64_t v78 = *(int *)(v32 + 24);
  uint64_t v68 = v30 + v78;
  uint64_t v79 = &v31[v78];
  uint64_t v61 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  uint64_t v33 = *(void **)(v61 - 8);
  uint64_t v80 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v33[6];
  int v81 = v80(v68, 1, v61);
  int v82 = v80((uint64_t)v79, 1, v61);
  if (v81)
  {
    if (!v82)
    {
      __dstb = v33;
      uint64_t v83 = *(void (**)(uint64_t, char *, uint64_t))(v219 + 16);
      v83(v68, v79, v228);
      uint64_t v84 = *(int *)(v61 + 20);
      uint64_t v85 = (void *)(v68 + v84);
      uint64_t v86 = &v79[v84];
      uint64_t v87 = type metadata accessor for AspireHeSerializedGaloisKey(0);
      uint64_t v88 = *(void *)(v87 - 8);
      __srca = (void (*)(char *, char *, uint64_t))v83;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v88 + 48))(v86, 1, v87))
      {
        uint64_t v89 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
        memcpy(v85, v86, *(void *)(*(void *)(v89 - 8) + 64));
      }
      else
      {
        *uint64_t v85 = *(void *)v86;
        uint64_t v124 = *(int *)(v87 + 20);
        uint64_t v220 = (char *)v85 + v124;
        uint64_t v125 = &v86[v124];
        swift_bridgeObjectRetain();
        v83((uint64_t)v220, v125, v228);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v88 + 56))(v85, 0, 1, v87);
      }
      uint64_t v126 = *(int *)(v61 + 24);
      uint64_t v127 = (char *)(v68 + v126);
      uint64_t v128 = &v79[v126];
      uint64_t v129 = type metadata accessor for AspireHeSerializedRelinKey(0);
      uint64_t v130 = *(void *)(v129 - 8);
      uint64_t v28 = v227;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v130 + 48))(v128, 1, v129))
      {
        uint64_t v131 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
        memcpy(v127, v128, *(void *)(*(void *)(v131 - 8) + 64));
      }
      else
      {
        v83((uint64_t)v127, v128, v228);
        uint64_t v138 = *(int *)(v129 + 20);
        uint64_t v139 = &v127[v138];
        uint64_t v140 = &v128[v138];
        uint64_t v141 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
        uint64_t v142 = *(void *)(v141 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v142 + 48))(v140, 1, v141))
        {
          uint64_t v143 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
          memcpy(v139, v140, *(void *)(*(void *)(v143 - 8) + 64));
          uint64_t v28 = v227;
        }
        else
        {
          __srca(v139, v140, v228);
          uint64_t v150 = *(int *)(v141 + 20);
          uint64_t v213 = v139;
          uint64_t v207 = &v139[v150];
          uint64_t v151 = &v140[v150];
          uint64_t v152 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
          uint64_t v205 = *(void *)(v152 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v205 + 48))(v151, 1, v152))
          {
            uint64_t v153 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
            memcpy(v207, v151, *(void *)(*(void *)(v153 - 8) + 64));
          }
          else
          {
            *(void *)uint64_t v207 = *(void *)v151;
            uint64_t v178 = *(int *)(v152 + 20);
            uint64_t v203 = &v207[v178];
            uint64_t v209 = &v151[v178];
            swift_bridgeObjectRetain();
            __srca(v203, v209, v228);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v205 + 56))(v207, 0, 1, v152);
          }
          uint64_t v28 = v227;
          (*(void (**)(char *, void, uint64_t, uint64_t))(v142 + 56))(v213, 0, 1, v141);
        }
        uint64_t v33 = __dstb;
        (*(void (**)(char *, void, uint64_t, uint64_t))(v130 + 56))(v127, 0, 1, v129);
      }
      goto LABEL_62;
    }
    goto LABEL_36;
  }
  if (v82)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config(v68, type metadata accessor for AspireHeSerializedEvaluationKey);
LABEL_36:
    uint64_t v90 = &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?;
    goto LABEL_37;
  }
  v77(v68, v79, v228);
  uint64_t v115 = *(int *)(v61 + 20);
  uint64_t v116 = (void *)(v68 + v115);
  uint64_t v117 = &v79[v115];
  uint64_t v118 = type metadata accessor for AspireHeSerializedGaloisKey(0);
  uint64_t v119 = *(void *)(v118 - 8);
  uint64_t v120 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v119 + 48);
  uint64_t v212 = v116;
  LODWORD(v116) = v120((char *)v116, 1, v118);
  int v121 = v120(v117, 1, v118);
  if (v116)
  {
    if (v121)
    {
      size_t v122 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?)
                                   - 8)
                       + 64);
      uint64_t v123 = v212;
LABEL_56:
      memcpy(v123, v117, v122);
      goto LABEL_67;
    }
    *uint64_t v212 = *(void *)v117;
    uint64_t v144 = *(int *)(v118 + 20);
    uint64_t v145 = (char *)v212 + v144;
    uint64_t v146 = &v117[v144];
    __srcc = *(void (**)(char *, char *, uint64_t))(v219 + 16);
    swift_bridgeObjectRetain();
    __srcc(v145, v146, v228);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v119 + 56))(v212, 0, 1, v118);
  }
  else
  {
    if (v121)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v212, type metadata accessor for AspireHeSerializedGaloisKey);
      size_t v122 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?)
                                   - 8)
                       + 64);
      uint64_t v123 = v212;
      goto LABEL_56;
    }
    *uint64_t v212 = *(void *)v117;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    ((void (*)(char *, char *, uint64_t))__dst)((char *)v212 + *(int *)(v118 + 20), &v117[*(int *)(v118 + 20)], v228);
  }
LABEL_67:
  uint64_t v28 = v227;
  uint64_t v154 = *(int *)(v61 + 24);
  uint64_t v30 = v68 + v154;
  uint64_t v31 = &v79[v154];
  uint64_t v155 = type metadata accessor for AspireHeSerializedRelinKey(0);
  uint64_t v156 = *(void *)(v155 - 8);
  uint64_t v157 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v156 + 48);
  int v158 = v157(v30, 1, v155);
  int v159 = v157((uint64_t)v31, 1, v155);
  if (!v158)
  {
    if (!v159)
    {
      ((void (*)(uint64_t, char *, uint64_t))__dst)(v30, v31, v228);
      uint64_t v167 = *(int *)(v155 + 20);
      uint64_t v68 = v30 + v167;
      uint64_t v79 = &v31[v167];
      uint64_t v61 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
      uint64_t v33 = *(void **)(v61 - 8);
      uint64_t v168 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v33[6];
      int v169 = v168(v68, 1, v61);
      int v170 = v168((uint64_t)v79, 1, v61);
      if (v169)
      {
        if (!v170)
        {
          uint64_t v171 = *(void (**)(uint64_t, char *, uint64_t))(v219 + 16);
          v171(v68, v79, v228);
          uint64_t v172 = *(int *)(v61 + 20);
          uint64_t v173 = (void *)(v68 + v172);
          uint64_t v174 = &v79[v172];
          uint64_t v175 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
          uint64_t v176 = *(void *)(v175 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v176 + 48))(v174, 1, v175))
          {
            uint64_t v177 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
            memcpy(v173, v174, *(void *)(*(void *)(v177 - 8) + 64));
          }
          else
          {
            *uint64_t v173 = *(void *)v174;
            uint64_t v197 = *(int *)(v175 + 20);
            __dstd = (char *)v173 + v197;
            uint64_t v198 = &v174[v197];
            swift_bridgeObjectRetain();
            v171((uint64_t)__dstd, v198, v228);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v176 + 56))(v173, 0, 1, v175);
          }
          uint64_t v28 = v227;
LABEL_62:
          ((void (*)(uint64_t, void, uint64_t, uint64_t))v33[7])(v68, 0, 1, v61);
          return v28;
        }
      }
      else
      {
        if (!v170)
        {
          ((void (*)(uint64_t, char *, uint64_t))__dst)(v68, v79, v228);
          uint64_t v185 = *(int *)(v61 + 20);
          uint64_t v186 = (void *)(v68 + v185);
          uint64_t v187 = &v79[v185];
          uint64_t v188 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
          uint64_t v189 = *(void *)(v188 - 8);
          uint64_t v190 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v189 + 48);
          int v191 = v190((char *)v186, 1, v188);
          int v192 = v190(v187, 1, v188);
          if (v191)
          {
            if (!v192)
            {
              char *v186 = *(void *)v187;
              uint64_t v193 = *(int *)(v188 + 20);
              uint64_t v194 = (char *)v186 + v193;
              uint64_t v195 = &v187[v193];
              uint64_t v196 = *(void (**)(char *, char *, uint64_t))(v219 + 16);
              swift_bridgeObjectRetain();
              v196(v194, v195, v228);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v189 + 56))((char *)v186, 0, 1, v188);
              return v28;
            }
          }
          else
          {
            if (!v192)
            {
              char *v186 = *(void *)v187;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease();
              ((void (*)(char *, char *, uint64_t))__dst)((char *)v186 + *(int *)(v188 + 20), &v187[*(int *)(v188 + 20)], v228);
              return v28;
            }
            outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v186, type metadata accessor for AspireHeSerializedCiphertextVec);
          }
          size_t v47 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?)
                                      - 8)
                          + 64);
          uint64_t v48 = v186;
          uint64_t v49 = v187;
          goto LABEL_16;
        }
        outlined destroy of AMDPbHEConfig.OneOf_Config(v68, type metadata accessor for AspireHeSerializedKeySwitchKey);
      }
      uint64_t v90 = &demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?;
LABEL_37:
      size_t v47 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(v90) - 8) + 64);
      uint64_t v48 = (void *)v68;
      uint64_t v49 = v79;
      goto LABEL_16;
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config(v30, type metadata accessor for AspireHeSerializedRelinKey);
LABEL_73:
    uint64_t v46 = &demangling cache variable for type metadata for AspireHeSerializedRelinKey?;
    goto LABEL_15;
  }
  if (v159) {
    goto LABEL_73;
  }
  uint64_t v160 = *(void (**)(uint64_t, char *, uint64_t))(v219 + 16);
  v160(v30, v31, v228);
  uint64_t v161 = *(int *)(v155 + 20);
  uint64_t v162 = (char *)(v30 + v161);
  uint64_t v163 = &v31[v161];
  uint64_t v164 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
  uint64_t v165 = *(void *)(v164 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v165 + 48))(v163, 1, v164))
  {
    uint64_t v166 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
    memcpy(v162, v163, *(void *)(*(void *)(v166 - 8) + 64));
  }
  else
  {
    v160((uint64_t)v162, v163, v228);
    uint64_t v179 = *(int *)(v164 + 20);
    v221 = v162;
    __dstc = &v162[v179];
    uint64_t v180 = &v163[v179];
    uint64_t v181 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
    __srcb = *(void (***)(char *, void, uint64_t, uint64_t))(v181 - 8);
    if (((unsigned int (*)(char *, uint64_t, uint64_t))__srcb[6])(v180, 1, v181))
    {
      uint64_t v182 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
      memcpy(__dstc, v180, *(void *)(*(void *)(v182 - 8) + 64));
    }
    else
    {
      *(void *)__dstc = *(void *)v180;
      uint64_t v183 = *(int *)(v181 + 20);
      uint64_t v214 = &__dstc[v183];
      uint64_t v184 = &v180[v183];
      swift_bridgeObjectRetain();
      v160((uint64_t)v214, v184, v228);
      __srcb[7](__dstc, 0, 1, v181);
    }
    (*(void (**)(char *, void, uint64_t, uint64_t))(v165 + 56))(v221, 0, 1, v164);
  }
  uint64_t v28 = v227;
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v156 + 56))(v30, 0, 1, v155);
  return v28;
}

uint64_t initializeWithTake for AMDPbPIRQuery(uint64_t a1, uint64_t a2, int *a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v6 = a3[6];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = a3[7];
  uint64_t v12 = (_OWORD *)(a1 + v11);
  uint64_t v13 = (_OWORD *)(a2 + v11);
  uint64_t v14 = type metadata accessor for AspirePirEncryptedIndices(0);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    *uint64_t v12 = *v13;
    v10((uint64_t)v12 + *(int *)(v14 + 24), (uint64_t)v13 + *(int *)(v14 + 24), v9);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  uint64_t v17 = a3[8];
  uint64_t v18 = (char *)(a1 + v17);
  uint64_t v19 = (char *)(a2 + v17);
  uint64_t v20 = type metadata accessor for AMDPbEvaluationKey(0);
  uint64_t v21 = *(void *)(v20 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKey?);
    memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    uint64_t v74 = v21;
    v10((uint64_t)v18, (uint64_t)v19, v9);
    uint64_t v23 = *(int *)(v20 + 20);
    uint64_t v75 = v18;
    uint64_t v24 = &v18[v23];
    int v25 = &v19[v23];
    uint64_t v26 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
    uint64_t v27 = v10;
    uint64_t v28 = *(void *)(v26 - 8);
    uint64_t v73 = (void (*)(char *, char *, uint64_t))v27;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v25, 1, v26))
    {
      uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
      memcpy(v24, v25, *(void *)(*(void *)(v29 - 8) + 64));
    }
    else
    {
      *(void *)uint64_t v24 = *(void *)v25;
      *(_OWORD *)(v24 + 8) = *(_OWORD *)(v25 + 8);
      v27((uint64_t)&v24[*(int *)(v26 + 24)], (uint64_t)&v25[*(int *)(v26 + 24)], v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v24, 0, 1, v26);
    }
    uint64_t v30 = v75;
    uint64_t v31 = *(int *)(v20 + 24);
    uint64_t v32 = &v75[v31];
    uint64_t v33 = &v19[v31];
    uint64_t v34 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
    uint64_t v35 = *(void *)(v34 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
    {
      uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
      memcpy(v32, v33, *(void *)(*(void *)(v36 - 8) + 64));
      uint64_t v37 = v74;
    }
    else
    {
      uint64_t v70 = v35;
      v73(v32, v33, v9);
      uint64_t v71 = v34;
      uint64_t v72 = v32;
      uint64_t v38 = *(int *)(v34 + 20);
      uint64_t v39 = &v32[v38];
      uint64_t v40 = &v33[v38];
      uint64_t v41 = type metadata accessor for AspireHeSerializedGaloisKey(0);
      uint64_t v42 = *(void *)(v41 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41))
      {
        uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
        memcpy(v39, v40, *(void *)(*(void *)(v43 - 8) + 64));
      }
      else
      {
        *(void *)uint64_t v39 = *(void *)v40;
        v73(&v39[*(int *)(v41 + 20)], &v40[*(int *)(v41 + 20)], v9);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
      }
      uint64_t v44 = v71;
      uint64_t v30 = v75;
      uint64_t v45 = *(int *)(v71 + 24);
      uint64_t v46 = &v72[v45];
      size_t v47 = &v33[v45];
      uint64_t v48 = type metadata accessor for AspireHeSerializedRelinKey(0);
      uint64_t v49 = *(void *)(v48 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v47, 1, v48))
      {
        uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
        memcpy(v46, v47, *(void *)(*(void *)(v50 - 8) + 64));
      }
      else
      {
        uint64_t v69 = v49;
        v73(v46, v47, v9);
        uint64_t v51 = *(int *)(v48 + 20);
        uint64_t v68 = v46;
        uint64_t v52 = &v46[v51];
        uint64_t v53 = &v47[v51];
        uint64_t v54 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
        uint64_t v55 = *(void *)(v54 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v53, 1, v54))
        {
          uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
          memcpy(v52, v53, *(void *)(*(void *)(v56 - 8) + 64));
          uint64_t v44 = v71;
          uint64_t v57 = v69;
        }
        else
        {
          uint64_t v65 = v55;
          v73(v52, v53, v9);
          uint64_t v66 = v54;
          uint64_t v67 = v52;
          uint64_t v58 = *(int *)(v54 + 20);
          uint64_t v59 = &v52[v58];
          unint64_t v60 = &v53[v58];
          uint64_t v61 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
          uint64_t v62 = *(void *)(v61 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48))(v60, 1, v61))
          {
            uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
            memcpy(v59, v60, *(void *)(*(void *)(v63 - 8) + 64));
          }
          else
          {
            *(void *)uint64_t v59 = *(void *)v60;
            v73(&v59[*(int *)(v61 + 20)], &v60[*(int *)(v61 + 20)], v9);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v62 + 56))(v59, 0, 1, v61);
          }
          uint64_t v44 = v71;
          uint64_t v57 = v69;
          (*(void (**)(char *, void, uint64_t, uint64_t))(v65 + 56))(v67, 0, 1, v66);
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v57 + 56))(v68, 0, 1, v48);
      }
      uint64_t v37 = v74;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v70 + 56))(v72, 0, 1, v44);
    }
    (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(v30, 0, 1, v20);
  }
  return a1;
}

uint64_t assignWithTake for AMDPbPIRQuery(uint64_t a1, uint64_t a2, int *a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = *(void *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  outlined consume of Data._Representation(v6, v7);
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  uint64_t v175 = *(void *)(v11 - 8);
  uint64_t v177 = v11;
  uint64_t v178 = *(void (**)(uint64_t, uint64_t))(v175 + 40);
  v178(v9, v10);
  uint64_t v12 = a3[7];
  uint64_t v182 = a1;
  uint64_t v13 = (char *)(a1 + v12);
  uint64_t v14 = (char *)(a2 + v12);
  uint64_t v15 = type metadata accessor for AspirePirEncryptedIndices(0);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v13, 1, v15);
  int v19 = v17(v14, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
      (*(void (**)(char *, char *, uint64_t))(v175 + 32))(&v13[*(int *)(v15 + 24)], &v14[*(int *)(v15 + 24)], v177);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
LABEL_7:
      uint64_t v22 = (void (*)(uint64_t, char *, uint64_t))v178;
      uint64_t v21 = v182;
      goto LABEL_8;
    }
LABEL_6:
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
    memcpy(v13, v14, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  if (v19)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v13, type metadata accessor for AspirePirEncryptedIndices);
    goto LABEL_6;
  }
  *(void *)uint64_t v13 = *(void *)v14;
  swift_bridgeObjectRelease();
  *((void *)v13 + 1) = *((void *)v14 + 1);
  uint64_t v22 = (void (*)(uint64_t, char *, uint64_t))v178;
  ((void (*)(char *, char *, uint64_t))v178)(&v13[*(int *)(v15 + 24)], &v14[*(int *)(v15 + 24)], v177);
  uint64_t v21 = v182;
LABEL_8:
  uint64_t v23 = a3[8];
  uint64_t v24 = v21 + v23;
  int v25 = (char *)(a2 + v23);
  uint64_t v26 = type metadata accessor for AMDPbEvaluationKey(0);
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v27 + 48);
  int v29 = v28(v24, 1, v26);
  int v30 = v28((uint64_t)v25, 1, v26);
  if (v29)
  {
    if (!v30)
    {
      uint64_t v179 = v27;
      uint64_t v31 = *(void (**)(uint64_t, char *, uint64_t))(v175 + 32);
      v31(v24, v25, v177);
      uint64_t v32 = *(int *)(v26 + 20);
      uint64_t v33 = (void *)(v24 + v32);
      uint64_t v34 = &v25[v32];
      uint64_t v35 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
      uint64_t v36 = *(void *)(v35 - 8);
      __src = (void (*)(char *, char *, uint64_t))v31;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
      {
        uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
        memcpy(v33, v34, *(void *)(*(void *)(v37 - 8) + 64));
      }
      else
      {
        void *v33 = *(void *)v34;
        *(_OWORD *)(v33 + 1) = *(_OWORD *)(v34 + 8);
        v31((uint64_t)v33 + *(int *)(v35 + 24), &v34[*(int *)(v35 + 24)], v177);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
      }
      uint64_t v51 = *(int *)(v26 + 24);
      uint64_t v52 = (char *)(v24 + v51);
      uint64_t v53 = &v25[v51];
      uint64_t v54 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
      uint64_t v55 = *(void *)(v54 - 8);
      uint64_t v56 = v179;
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v53, 1, v54))
      {
        uint64_t v167 = v55;
        __src(v52, v53, v177);
        uint64_t v60 = *(int *)(v54 + 20);
        int v169 = v52;
        uint64_t v61 = &v52[v60];
        uint64_t v62 = &v53[v60];
        uint64_t v63 = type metadata accessor for AspireHeSerializedGaloisKey(0);
        uint64_t v64 = *(void *)(v63 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48))(v62, 1, v63))
        {
          uint64_t v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
          memcpy(v61, v62, *(void *)(*(void *)(v65 - 8) + 64));
        }
        else
        {
          *(void *)uint64_t v61 = *(void *)v62;
          __src(&v61[*(int *)(v63 + 20)], &v62[*(int *)(v63 + 20)], v177);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v64 + 56))(v61, 0, 1, v63);
        }
        uint64_t v81 = *(int *)(v54 + 24);
        int v82 = v169;
        uint64_t v83 = &v169[v81];
        uint64_t v84 = &v53[v81];
        uint64_t v85 = type metadata accessor for AspireHeSerializedRelinKey(0);
        uint64_t v86 = *(unsigned int (***)(const void *, uint64_t, uint64_t))(v85 - 8);
        uint64_t v56 = v179;
        if (v86[6](v84, 1, v85))
        {
          uint64_t v87 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
          memcpy(v83, v84, *(void *)(*(void *)(v87 - 8) + 64));
        }
        else
        {
          uint64_t v165 = v86;
          __src(v83, v84, v177);
          uint64_t v88 = *(int *)(v85 + 20);
          uint64_t v89 = &v83[v88];
          uint64_t v90 = &v84[v88];
          uint64_t v91 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
          uint64_t v92 = *(void *)(v91 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v92 + 48))(v90, 1, v91))
          {
            uint64_t v93 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
            memcpy(v89, v90, *(void *)(*(void *)(v93 - 8) + 64));
            int v82 = v169;
            uint64_t v94 = v165;
          }
          else
          {
            uint64_t v162 = v92;
            __src(v89, v90, v177);
            uint64_t v112 = *(int *)(v91 + 20);
            uint64_t v163 = v89;
            __dst = &v89[v112];
            unint64_t v113 = &v90[v112];
            uint64_t v114 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
            uint64_t v160 = *(void *)(v114 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v160 + 48))(v113, 1, v114))
            {
              uint64_t v115 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
              memcpy(__dst, v113, *(void *)(*(void *)(v115 - 8) + 64));
            }
            else
            {
              *(void *)__dst = *(void *)v113;
              __src(&__dst[*(int *)(v114 + 20)], &v113[*(int *)(v114 + 20)], v177);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v160 + 56))(__dst, 0, 1, v114);
            }
            int v82 = v169;
            uint64_t v94 = v165;
            (*(void (**)(char *, void, uint64_t, uint64_t))(v162 + 56))(v163, 0, 1, v91);
          }
          ((void (*)(char *, void, uint64_t, uint64_t))v94[7])(v83, 0, 1, v85);
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v167 + 56))(v82, 0, 1, v54);
        goto LABEL_73;
      }
      size_t v57 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?)
                                  - 8)
                      + 64);
      uint64_t v58 = v52;
      goto LABEL_24;
    }
    goto LABEL_14;
  }
  if (!v30)
  {
    v22(v24, v25, v177);
    uint64_t v42 = *(int *)(v26 + 20);
    uint64_t v43 = v24 + v42;
    uint64_t v44 = &v25[v42];
    uint64_t v45 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
    uint64_t v46 = *(void *)(v45 - 8);
    size_t v47 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v46 + 48);
    uint64_t v168 = v43;
    LODWORD(v43) = v47(v43, 1, v45);
    int v48 = v47((uint64_t)v44, 1, v45);
    if (v43)
    {
      if (!v48)
      {
        *(void *)uint64_t v168 = *(void *)v44;
        *(_OWORD *)(v168 + 8) = *(_OWORD *)(v44 + 8);
        (*(void (**)(uint64_t, char *, uint64_t))(v175 + 32))(v168 + *(int *)(v45 + 24), &v44[*(int *)(v45 + 24)], v177);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v46 + 56))(v168, 0, 1, v45);
        goto LABEL_32;
      }
      size_t v49 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?)
                                  - 8)
                      + 64);
      uint64_t v50 = (void *)v168;
    }
    else
    {
      if (!v48)
      {
        uint64_t v95 = *((void *)v44 + 2);
        uint64_t v96 = *(void *)(v168 + 8);
        unint64_t v97 = *(void *)(v168 + 16);
        *(_OWORD *)uint64_t v168 = *(_OWORD *)v44;
        *(void *)(v168 + 16) = v95;
        outlined consume of Data._Representation(v96, v97);
        uint64_t v66 = (void (*)(uint64_t, char *, uint64_t))v178;
        ((void (*)(uint64_t, char *, uint64_t))v178)(v168 + *(int *)(v45 + 24), &v44[*(int *)(v45 + 24)], v177);
        uint64_t v21 = v182;
LABEL_33:
        uint64_t v67 = *(int *)(v26 + 24);
        v24 += v67;
        uint64_t v68 = &v25[v67];
        uint64_t v26 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
        uint64_t v69 = *(void *)(v26 - 8);
        uint64_t v70 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v69 + 48);
        int v71 = v70(v24, 1, v26);
        int v72 = v70((uint64_t)v68, 1, v26);
        if (v71)
        {
          if (!v72)
          {
            uint64_t v180 = v69;
            uint64_t v73 = *(void (**)(uint64_t, char *, uint64_t))(v175 + 32);
            v73(v24, v68, v177);
            uint64_t v74 = *(int *)(v26 + 20);
            uint64_t v75 = (void *)(v24 + v74);
            uint64_t v76 = &v68[v74];
            uint64_t v77 = type metadata accessor for AspireHeSerializedGaloisKey(0);
            uint64_t v78 = *(void *)(v77 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v78 + 48))(v76, 1, v77))
            {
              uint64_t v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
              memcpy(v75, v76, *(void *)(*(void *)(v79 - 8) + 64));
            }
            else
            {
              *uint64_t v75 = *(void *)v76;
              v73((uint64_t)v75 + *(int *)(v77 + 20), &v76[*(int *)(v77 + 20)], v177);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v78 + 56))(v75, 0, 1, v77);
            }
            uint64_t v107 = (void (*)(char *, char *, uint64_t))v73;
            uint64_t v108 = *(int *)(v26 + 24);
            uint64_t v109 = (char *)(v24 + v108);
            uint64_t v53 = &v68[v108];
            uint64_t v110 = type metadata accessor for AspireHeSerializedRelinKey(0);
            uint64_t v111 = *(unsigned int (***)(void, uint64_t, uint64_t))(v110 - 8);
            uint64_t v56 = v180;
            if (!((unsigned int (**)(char *, uint64_t, uint64_t))v111)[6](v53, 1, v110))
            {
              __srca = (void (**)(void *, void, uint64_t, uint64_t))v111;
              v107(v109, v53, v177);
              uint64_t v116 = *(int *)(v110 + 20);
              uint64_t v117 = &v109[v116];
              uint64_t v118 = &v53[v116];
              uint64_t v119 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
              uint64_t v120 = *(void *)(v119 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v120 + 48))(v118, 1, v119))
              {
                uint64_t v121 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
                memcpy(v117, v118, *(void *)(*(void *)(v121 - 8) + 64));
                size_t v122 = __srca;
              }
              else
              {
                v107(v117, v118, v177);
                uint64_t v134 = *(int *)(v119 + 20);
                uint64_t v171 = v117;
                uint64_t v166 = &v117[v134];
                uint64_t v135 = &v118[v134];
                uint64_t v136 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
                uint64_t v164 = *(void *)(v136 - 8);
                if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v164 + 48))(v135, 1, v136))
                {
                  uint64_t v137 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                  memcpy(v166, v135, *(void *)(*(void *)(v137 - 8) + 64));
                }
                else
                {
                  *(void *)uint64_t v166 = *(void *)v135;
                  v107(&v166[*(int *)(v136 + 20)], &v135[*(int *)(v136 + 20)], v177);
                  (*(void (**)(char *, void, uint64_t, uint64_t))(v164 + 56))(v166, 0, 1, v136);
                }
                size_t v122 = __srca;
                (*(void (**)(char *, void, uint64_t, uint64_t))(v120 + 56))(v171, 0, 1, v119);
              }
              v122[7](v109, 0, 1, v110);
              goto LABEL_73;
            }
            size_t v57 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?)
                                        - 8)
                            + 64);
            uint64_t v58 = v109;
            goto LABEL_24;
          }
          goto LABEL_39;
        }
        if (v72)
        {
          outlined destroy of AMDPbHEConfig.OneOf_Config(v24, type metadata accessor for AspireHeSerializedEvaluationKey);
LABEL_39:
          uint64_t v80 = &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?;
LABEL_40:
          size_t v39 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(v80) - 8) + 64);
          uint64_t v40 = (void *)v24;
          uint64_t v41 = v68;
          goto LABEL_16;
        }
        v66(v24, v68, v177);
        uint64_t v98 = *(int *)(v26 + 20);
        uint64_t v99 = (char *)(v24 + v98);
        uint64_t v100 = &v68[v98];
        uint64_t v101 = type metadata accessor for AspireHeSerializedGaloisKey(0);
        uint64_t v102 = *(void *)(v101 - 8);
        uint64_t v103 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v102 + 48);
        int v170 = v99;
        LODWORD(v99) = v103(v99, 1, v101);
        int v104 = v103(v100, 1, v101);
        if (v99)
        {
          if (!v104)
          {
            *(void *)int v170 = *(void *)v100;
            (*(void (**)(char *, char *, uint64_t))(v175 + 32))(&v170[*(int *)(v101 + 20)], &v100[*(int *)(v101 + 20)], v177);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v102 + 56))(v170, 0, 1, v101);
            goto LABEL_61;
          }
          size_t v105 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?)
                                       - 8)
                           + 64);
          uint64_t v106 = v170;
        }
        else
        {
          if (!v104)
          {
            *(void *)int v170 = *(void *)v100;
            swift_bridgeObjectRelease();
            uint64_t v123 = (void (*)(uint64_t, char *, uint64_t))v178;
            ((void (*)(char *, char *, uint64_t))v178)(&v170[*(int *)(v101 + 20)], &v100[*(int *)(v101 + 20)], v177);
            uint64_t v21 = v182;
LABEL_62:
            uint64_t v124 = *(int *)(v26 + 24);
            v24 += v124;
            int v25 = &v68[v124];
            uint64_t v26 = type metadata accessor for AspireHeSerializedRelinKey(0);
            uint64_t v56 = *(void *)(v26 - 8);
            uint64_t v125 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v56 + 48);
            int v126 = v125(v24, 1, v26);
            int v127 = v125((uint64_t)v25, 1, v26);
            if (v126)
            {
              if (!v127)
              {
                uint64_t v128 = *(void (**)(uint64_t, char *, uint64_t))(v175 + 32);
                v128(v24, v25, v177);
                uint64_t v129 = *(int *)(v26 + 20);
                uint64_t v130 = (char *)(v24 + v129);
                uint64_t v53 = &v25[v129];
                uint64_t v131 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
                uint64_t v132 = *(void *)(v131 - 8);
                if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v132 + 48))(v53, 1, v131))
                {
                  v128((uint64_t)v130, v53, v177);
                  uint64_t v148 = *(int *)(v131 + 20);
                  uint64_t v181 = v130;
                  uint64_t v176 = &v130[v148];
                  uint64_t v149 = &v53[v148];
                  uint64_t v150 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
                  uint64_t v172 = *(void *)(v150 - 8);
                  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v172 + 48))(v149, 1, v150))
                  {
                    uint64_t v151 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                    memcpy(v176, v149, *(void *)(*(void *)(v151 - 8) + 64));
                  }
                  else
                  {
                    *(void *)uint64_t v176 = *(void *)v149;
                    v128((uint64_t)&v176[*(int *)(v150 + 20)], &v149[*(int *)(v150 + 20)], v177);
                    (*(void (**)(char *, void, uint64_t, uint64_t))(v172 + 56))(v176, 0, 1, v150);
                  }
                  uint64_t v21 = v182;
                  (*(void (**)(char *, void, uint64_t, uint64_t))(v132 + 56))(v181, 0, 1, v131);
                  goto LABEL_74;
                }
                size_t v57 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?)
                                            - 8)
                                + 64);
                uint64_t v58 = v130;
LABEL_24:
                uint64_t v59 = v53;
                goto LABEL_25;
              }
            }
            else
            {
              if (!v127)
              {
                v123(v24, v25, v177);
                uint64_t v138 = *(int *)(v26 + 20);
                v24 += v138;
                uint64_t v68 = &v25[v138];
                uint64_t v26 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
                uint64_t v56 = *(void *)(v26 - 8);
                uint64_t v139 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v56 + 48);
                int v140 = v139(v24, 1, v26);
                int v141 = v139((uint64_t)v68, 1, v26);
                if (v140)
                {
                  if (!v141)
                  {
                    uint64_t v142 = *(void (**)(uint64_t, char *, uint64_t))(v175 + 32);
                    v142(v24, v68, v177);
                    uint64_t v143 = *(int *)(v26 + 20);
                    uint64_t v144 = (void *)(v24 + v143);
                    uint64_t v145 = &v68[v143];
                    uint64_t v146 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
                    uint64_t v147 = *(void *)(v146 - 8);
                    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v147 + 48))(v145, 1, v146))
                    {
                      *uint64_t v144 = *(void *)v145;
                      v142((uint64_t)v144 + *(int *)(v146 + 20), &v145[*(int *)(v146 + 20)], v177);
                      (*(void (**)(void *, void, uint64_t, uint64_t))(v147 + 56))(v144, 0, 1, v146);
                      goto LABEL_73;
                    }
                    size_t v57 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?)
                                                - 8)
                                    + 64);
                    uint64_t v58 = v144;
                    uint64_t v59 = v145;
LABEL_25:
                    memcpy(v58, v59, v57);
LABEL_73:
                    uint64_t v21 = v182;
LABEL_74:
                    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v56 + 56))(v24, 0, 1, v26);
                    return v21;
                  }
                }
                else
                {
                  if (!v141)
                  {
                    v123(v24, v68, v177);
                    uint64_t v152 = *(int *)(v26 + 20);
                    uint64_t v153 = (char *)(v24 + v152);
                    uint64_t v154 = &v68[v152];
                    uint64_t v155 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
                    uint64_t v156 = *(void *)(v155 - 8);
                    uint64_t v157 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v156 + 48);
                    int v158 = v157(v153, 1, v155);
                    int v159 = v157(v154, 1, v155);
                    if (v158)
                    {
                      if (!v159)
                      {
                        *(void *)uint64_t v153 = *(void *)v154;
                        (*(void (**)(char *, char *, uint64_t))(v175 + 32))(&v153[*(int *)(v155 + 20)], &v154[*(int *)(v155 + 20)], v177);
                        (*(void (**)(char *, void, uint64_t, uint64_t))(v156 + 56))(v153, 0, 1, v155);
                        return v21;
                      }
                    }
                    else
                    {
                      if (!v159)
                      {
                        *(void *)uint64_t v153 = *(void *)v154;
                        swift_bridgeObjectRelease();
                        v123((uint64_t)&v153[*(int *)(v155 + 20)], &v154[*(int *)(v155 + 20)], v177);
                        return v21;
                      }
                      outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v153, type metadata accessor for AspireHeSerializedCiphertextVec);
                    }
                    size_t v39 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?)
                                                - 8)
                                    + 64);
                    uint64_t v40 = v153;
                    uint64_t v41 = v154;
                    goto LABEL_16;
                  }
                  outlined destroy of AMDPbHEConfig.OneOf_Config(v24, type metadata accessor for AspireHeSerializedKeySwitchKey);
                }
                uint64_t v80 = &demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?;
                goto LABEL_40;
              }
              outlined destroy of AMDPbHEConfig.OneOf_Config(v24, type metadata accessor for AspireHeSerializedRelinKey);
            }
            uint64_t v38 = &demangling cache variable for type metadata for AspireHeSerializedRelinKey?;
            goto LABEL_15;
          }
          outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v170, type metadata accessor for AspireHeSerializedGaloisKey);
          size_t v105 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?)
                                       - 8)
                           + 64);
          uint64_t v106 = v170;
        }
        memcpy(v106, v100, v105);
LABEL_61:
        uint64_t v123 = (void (*)(uint64_t, char *, uint64_t))v178;
        uint64_t v21 = v182;
        goto LABEL_62;
      }
      outlined destroy of AMDPbHEConfig.OneOf_Config(v168, type metadata accessor for AMDPbEvaluationKeyMetadata);
      size_t v49 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?)
                                  - 8)
                      + 64);
      uint64_t v50 = (void *)v168;
    }
    memcpy(v50, v44, v49);
LABEL_32:
    uint64_t v66 = (void (*)(uint64_t, char *, uint64_t))v178;
    uint64_t v21 = v182;
    goto LABEL_33;
  }
  outlined destroy of AMDPbHEConfig.OneOf_Config(v24, type metadata accessor for AMDPbEvaluationKey);
LABEL_14:
  uint64_t v38 = &demangling cache variable for type metadata for AMDPbEvaluationKey?;
LABEL_15:
  size_t v39 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(v38) - 8) + 64);
  uint64_t v40 = (void *)v24;
  uint64_t v41 = v25;
LABEL_16:
  memcpy(v40, v41, v39);
  return v21;
}

uint64_t getEnumTagSinglePayload for AMDPbPIRQuery(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_249CA10B0);
}

uint64_t sub_249CA10B0(uint64_t a1, uint64_t a2, int *a3)
{
  if (a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 16) >> 60;
    if (((4 * v4) & 0xC) != 0) {
      return 16 - ((4 * v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0;
    }
  }
  uint64_t v8 = type metadata accessor for UnknownStorage();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a2)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a3[6];
LABEL_9:
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
    return v13(a1 + v11, a2, v9);
  }
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a2)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a3[7];
    goto LABEL_9;
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKey?);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
  uint64_t v16 = v14;
  uint64_t v17 = a1 + a3[8];
  return v15(v17, a2, v16);
}

uint64_t storeEnumTagSinglePayload for AMDPbPIRQuery(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_249CA1250);
}

uint64_t sub_249CA1250(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
    return result;
  }
  uint64_t v8 = type metadata accessor for UnknownStorage();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[6];
LABEL_7:
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return v13(v5 + v11, a2, a2, v9);
  }
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a3)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a4[7];
    goto LABEL_7;
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKey?);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
  uint64_t v16 = v14;
  uint64_t v17 = v5 + a4[8];
  return v15(v17, a2, a2, v16);
}

void type metadata completion function for AMDPbPIRQuery(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t getEnumTagSinglePayload for AMDPbPIRReply(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_56Tm_2);
}

uint64_t storeEnumTagSinglePayload for AMDPbPIRReply(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_57Tm_2);
}

uint64_t *initializeBufferWithCopyOfBuffer for AMDPbPECQuery(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v4 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v5 = *a2;
  *a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v8 = a2[1];
    unint64_t v9 = a2[2];
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v8, v9);
    a1[1] = v8;
    a1[2] = v9;
    uint64_t v10 = a3[6];
    uint64_t v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    uint64_t v13 = type metadata accessor for UnknownStorage();
    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16);
    v14(v11, v12, v13);
    uint64_t v15 = a3[7];
    uint64_t v16 = (uint64_t *)((char *)a1 + v15);
    uint64_t v17 = (uint64_t *)((char *)a2 + v15);
    uint64_t v18 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
    uint64_t v19 = *(void *)(v18 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
    {
      uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
      memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
    }
    else
    {
      uint64_t v104 = v19;
      *uint64_t v16 = *v17;
      v16[1] = v17[1];
      uint64_t v21 = *(int *)(v18 + 28);
      uint64_t v22 = (char *)v16 + v21;
      uint64_t v23 = (char *)v17 + v21;
      swift_bridgeObjectRetain();
      uint64_t v24 = v22;
      uint64_t v25 = v13;
      uint64_t v108 = v14;
      v14(v24, v23, v13);
      uint64_t v26 = *(int *)(v18 + 32);
      uint64_t v27 = (char *)v16 + v26;
      uint64_t v28 = (char *)v17 + v26;
      uint64_t v29 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
      uint64_t v30 = *(void *)(v29 - 8);
      __src = v28;
      uint64_t v31 = v28;
      uint64_t v32 = v29;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v31, 1, v29))
      {
        uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
        memcpy(v27, __src, *(void *)(*(void *)(v33 - 8) + 64));
        uint64_t v14 = v108;
        uint64_t v13 = v25;
        uint64_t v34 = v104;
      }
      else
      {
        uint64_t v102 = v30;
        uint64_t v111 = v25;
        uint64_t v35 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
        uint64_t v36 = *(void *)(v35 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(__src, 1, v35))
        {
          uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
          memcpy(v27, __src, *(void *)(*(void *)(v37 - 8) + 64));
          size_t v39 = v108;
          uint64_t v38 = v111;
        }
        else
        {
          swift_getEnumCaseMultiPayload();
          size_t v39 = v108;
          v108(v27, __src, v111);
          swift_storeEnumTagMultiPayload();
          (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(v27, 0, 1, v35);
          uint64_t v38 = v111;
        }
        uint64_t v34 = v104;
        v39(&v27[*(int *)(v32 + 20)], &__src[*(int *)(v32 + 20)], v38);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v102 + 56))(v27, 0, 1, v32);
        uint64_t v14 = v108;
        uint64_t v13 = v111;
      }
      (*(void (**)(void *, void, uint64_t, uint64_t))(v34 + 56))(v16, 0, 1, v18);
    }
    uint64_t v40 = a3[8];
    uint64_t v41 = (char *)a1 + v40;
    uint64_t v42 = (char *)a2 + v40;
    uint64_t v43 = type metadata accessor for AMDPbEvaluationKey(0);
    uint64_t v44 = *(unsigned int (***)(const void *, uint64_t, uint64_t))(v43 - 8);
    if (v44[6](v42, 1, v43))
    {
      uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKey?);
      memcpy(v41, v42, *(void *)(*(void *)(v45 - 8) + 64));
    }
    else
    {
      __srca = v44;
      v14(v41, v42, v13);
      uint64_t v46 = *(int *)(v43 + 20);
      size_t v47 = &v41[v46];
      uint64_t v112 = v13;
      int v48 = &v42[v46];
      uint64_t v49 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
      uint64_t v50 = *(void *)(v49 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48))(v48, 1, v49))
      {
        uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
        memcpy(v47, v48, *(void *)(*(void *)(v51 - 8) + 64));
        uint64_t v52 = v112;
      }
      else
      {
        uint64_t v109 = v14;
        uint64_t v53 = *((void *)v48 + 1);
        *(void *)size_t v47 = *(void *)v48;
        unint64_t v54 = *((void *)v48 + 2);
        outlined copy of Data._Representation(v53, v54);
        *((void *)v47 + 1) = v53;
        *((void *)v47 + 2) = v54;
        uint64_t v14 = v109;
        uint64_t v55 = *(int *)(v49 + 24);
        uint64_t v56 = &v48[v55];
        uint64_t v52 = v112;
        v109(&v47[v55], v56, v112);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v50 + 56))(v47, 0, 1, v49);
      }
      uint64_t v57 = *(int *)(v43 + 24);
      uint64_t v58 = &v41[v57];
      uint64_t v59 = &v42[v57];
      uint64_t v60 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
      uint64_t v61 = *(void *)(v60 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v61 + 48))(v59, 1, v60))
      {
        uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
        memcpy(v58, v59, *(void *)(*(void *)(v62 - 8) + 64));
        uint64_t v63 = __srca;
      }
      else
      {
        uint64_t v100 = v43;
        uint64_t v101 = v61;
        size_t v105 = v41;
        v14(v58, v59, v52);
        uint64_t v64 = *(int *)(v60 + 20);
        uint64_t v103 = v58;
        uint64_t v65 = v52;
        uint64_t v66 = &v58[v64];
        uint64_t v67 = v14;
        uint64_t v68 = &v59[v64];
        uint64_t v69 = type metadata accessor for AspireHeSerializedGaloisKey(0);
        uint64_t v70 = *(void *)(v69 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v70 + 48))(v68, 1, v69))
        {
          uint64_t v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
          memcpy(v66, v68, *(void *)(*(void *)(v71 - 8) + 64));
        }
        else
        {
          *(void *)uint64_t v66 = *(void *)v68;
          uint64_t v72 = *(int *)(v69 + 20);
          __dsta = &v66[v72];
          uint64_t v73 = &v68[v72];
          swift_bridgeObjectRetain();
          v67(__dsta, v73, v65);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v70 + 56))(v66, 0, 1, v69);
        }
        uint64_t v74 = v67;
        uint64_t v75 = v103;
        uint64_t v76 = *(int *)(v60 + 24);
        uint64_t v77 = &v103[v76];
        uint64_t v78 = &v59[v76];
        uint64_t v79 = type metadata accessor for AspireHeSerializedRelinKey(0);
        uint64_t v80 = *(void *)(v79 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v80 + 48))(v78, 1, v79))
        {
          uint64_t v81 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
          memcpy(v77, v78, *(void *)(*(void *)(v81 - 8) + 64));
          uint64_t v41 = v105;
          uint64_t v63 = __srca;
          uint64_t v43 = v100;
        }
        else
        {
          v67(v77, v78, v112);
          uint64_t v82 = *(int *)(v79 + 20);
          uint64_t v83 = &v77[v82];
          uint64_t v84 = &v78[v82];
          uint64_t v85 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
          uint64_t v86 = *(void *)(v85 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v86 + 48))(v84, 1, v85))
          {
            uint64_t v87 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
            memcpy(v83, v84, *(void *)(*(void *)(v87 - 8) + 64));
            uint64_t v41 = v105;
          }
          else
          {
            uint64_t v110 = v74;
            v74(v83, v84, v112);
            uint64_t v88 = *(int *)(v85 + 20);
            unint64_t v97 = v83;
            __dst = &v83[v88];
            uint64_t v89 = &v84[v88];
            uint64_t v90 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
            uint64_t v96 = *(void *)(v90 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v96 + 48))(v89, 1, v90))
            {
              uint64_t v91 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
              memcpy(__dst, v89, *(void *)(*(void *)(v91 - 8) + 64));
            }
            else
            {
              *(void *)__dst = *(void *)v89;
              uint64_t v92 = *(int *)(v90 + 20);
              uint64_t v95 = &__dst[v92];
              uint64_t v93 = &v89[v92];
              swift_bridgeObjectRetain();
              v110(v95, v93, v112);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v96 + 56))(__dst, 0, 1, v90);
            }
            uint64_t v41 = v105;
            (*(void (**)(char *, void, uint64_t, uint64_t))(v86 + 56))(v97, 0, 1, v85);
          }
          uint64_t v43 = v100;
          (*(void (**)(char *, void, uint64_t, uint64_t))(v80 + 56))(v77, 0, 1, v79);
          uint64_t v63 = __srca;
          uint64_t v75 = v103;
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v101 + 56))(v75, 0, 1, v60);
      }
      ((void (*)(char *, void, uint64_t, uint64_t))v63[7])(v41, 0, 1, v43);
    }
  }
  return a1;
}

uint64_t destroy for AMDPbPECQuery(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(*(void *)(a1 + 8), *(void *)(a1 + 16));
  uint64_t v4 = a1 + a2[6];
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v27 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v27(v4, v5);
  uint64_t v6 = a1 + a2[7];
  uint64_t v7 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7))
  {
    swift_bridgeObjectRelease();
    v27(v6 + *(int *)(v7 + 28), v5);
    uint64_t v8 = v6 + *(int *)(v7 + 32);
    uint64_t v9 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9))
    {
      uint64_t v10 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v8, 1, v10)
        && swift_getEnumCaseMultiPayload() <= 2)
      {
        v27(v8, v5);
      }
      v27(v8 + *(int *)(v9 + 20), v5);
    }
  }
  uint64_t v11 = a1 + a2[8];
  uint64_t v12 = type metadata accessor for AMDPbEvaluationKey(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48))(v11, 1, v12);
  if (!result)
  {
    v27(v11, v5);
    uint64_t v14 = v11 + *(int *)(v12 + 20);
    uint64_t v15 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48))(v14, 1, v15))
    {
      outlined consume of Data._Representation(*(void *)(v14 + 8), *(void *)(v14 + 16));
      v27(v14 + *(int *)(v15 + 24), v5);
    }
    uint64_t v16 = v11 + *(int *)(v12 + 24);
    uint64_t v17 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 48))(v16, 1, v17);
    if (!result)
    {
      v27(v16, v5);
      uint64_t v18 = v16 + *(int *)(v17 + 20);
      uint64_t v19 = type metadata accessor for AspireHeSerializedGaloisKey(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 48))(v18, 1, v19))
      {
        swift_bridgeObjectRelease();
        v27(v18 + *(int *)(v19 + 20), v5);
      }
      uint64_t v20 = v16 + *(int *)(v17 + 24);
      uint64_t v21 = type metadata accessor for AspireHeSerializedRelinKey(0);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 48))(v20, 1, v21);
      if (!result)
      {
        v27(v20, v5);
        uint64_t v22 = v20 + *(int *)(v21 + 20);
        uint64_t v23 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 48))(v22, 1, v23);
        if (!result)
        {
          v27(v22, v5);
          uint64_t v24 = v22 + *(int *)(v23 + 20);
          uint64_t v25 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 48))(v24, 1, v25);
          if (!result)
          {
            swift_bridgeObjectRelease();
            uint64_t v26 = v24 + *(int *)(v25 + 20);
            return ((uint64_t (*)(uint64_t, uint64_t))v27)(v26, v5);
          }
        }
      }
    }
  }
  return result;
}

void *initializeWithCopy for AMDPbPECQuery(void *a1, void *a2, int *a3)
{
  uint64_t v5 = a1;
  uint64_t v6 = a2[1];
  *a1 = *a2;
  unint64_t v7 = a2[2];
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(v6, v7);
  v5[1] = v6;
  v5[2] = v7;
  uint64_t v8 = a3[6];
  uint64_t v9 = (char *)v5 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
  v12(v9, v10, v11);
  uint64_t v13 = a3[7];
  uint64_t v14 = (void *)((char *)v5 + v13);
  uint64_t v15 = (void *)((char *)a2 + v13);
  uint64_t v16 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    uint64_t v100 = a3;
    uint64_t v102 = v5;
    *uint64_t v14 = *v15;
    v14[1] = v15[1];
    uint64_t v19 = *(int *)(v16 + 28);
    uint64_t v20 = (char *)v14 + v19;
    uint64_t v21 = (char *)v15 + v19;
    swift_bridgeObjectRetain();
    uint64_t v104 = v12;
    v12(v20, v21, v11);
    uint64_t v22 = *(int *)(v16 + 32);
    uint64_t v23 = (char *)v14 + v22;
    uint64_t v24 = (char *)v15 + v22;
    uint64_t v25 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
    uint64_t v26 = *(void *)(v25 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
    {
      uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
      memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64));
      uint64_t v12 = v104;
      a3 = v100;
      uint64_t v5 = v102;
    }
    else
    {
      uint64_t v95 = v11;
      uint64_t v28 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
      uint64_t v29 = *(void *)(v28 - 8);
      uint64_t v93 = v26;
      uint64_t v97 = v25;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v24, 1, v28))
      {
        uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
        memcpy(v23, v24, *(void *)(*(void *)(v30 - 8) + 64));
        uint64_t v11 = v95;
      }
      else
      {
        swift_getEnumCaseMultiPayload();
        v104(v23, v24, v95);
        swift_storeEnumTagMultiPayload();
        uint64_t v31 = v28;
        uint64_t v11 = v95;
        (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v23, 0, 1, v31);
      }
      uint64_t v32 = v23;
      uint64_t v5 = v102;
      a3 = v100;
      v104(&v32[*(int *)(v97 + 20)], &v24[*(int *)(v97 + 20)], v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v93 + 56))(v32, 0, 1, v97);
      uint64_t v12 = v104;
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  uint64_t v33 = a3[8];
  uint64_t v34 = (char *)v5 + v33;
  uint64_t v35 = (char *)a2 + v33;
  uint64_t v36 = type metadata accessor for AMDPbEvaluationKey(0);
  uint64_t v37 = *(void *)(v36 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36))
  {
    uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKey?);
    memcpy(v34, v35, *(void *)(*(void *)(v38 - 8) + 64));
  }
  else
  {
    v12(v34, v35, v11);
    uint64_t v103 = v36;
    uint64_t v39 = *(int *)(v36 + 20);
    uint64_t v40 = &v34[v39];
    uint64_t v41 = &v35[v39];
    uint64_t v42 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
    uint64_t v43 = *(void *)(v42 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
    {
      uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
      memcpy(v40, v41, *(void *)(*(void *)(v44 - 8) + 64));
    }
    else
    {
      size_t v105 = v12;
      uint64_t v45 = *((void *)v41 + 1);
      *(void *)uint64_t v40 = *(void *)v41;
      uint64_t v98 = v34;
      uint64_t v46 = v11;
      unint64_t v47 = *((void *)v41 + 2);
      outlined copy of Data._Representation(v45, v47);
      *((void *)v40 + 1) = v45;
      *((void *)v40 + 2) = v47;
      uint64_t v12 = v105;
      uint64_t v11 = v46;
      uint64_t v34 = v98;
      v105(&v40[*(int *)(v42 + 24)], &v41[*(int *)(v42 + 24)], v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
    }
    uint64_t v48 = v103;
    uint64_t v49 = *(int *)(v103 + 24);
    uint64_t v50 = &v34[v49];
    uint64_t v51 = &v35[v49];
    uint64_t v52 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
    uint64_t v53 = *(void *)(v52 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48))(v51, 1, v52))
    {
      uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
      memcpy(v50, v51, *(void *)(*(void *)(v54 - 8) + 64));
    }
    else
    {
      uint64_t v94 = v53;
      uint64_t v99 = v34;
      v12(v50, v51, v11);
      uint64_t v55 = *(int *)(v52 + 20);
      uint64_t v106 = v50;
      uint64_t v56 = &v50[v55];
      uint64_t v57 = v12;
      uint64_t v58 = &v51[v55];
      uint64_t v59 = v11;
      uint64_t v60 = type metadata accessor for AspireHeSerializedGaloisKey(0);
      uint64_t v61 = *(void *)(v60 - 8);
      uint64_t v96 = v59;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v61 + 48))(v58, 1, v60))
      {
        uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
        memcpy(v56, v58, *(void *)(*(void *)(v62 - 8) + 64));
      }
      else
      {
        *(void *)uint64_t v56 = *(void *)v58;
        uint64_t v63 = *(int *)(v60 + 20);
        uint64_t v91 = &v56[v63];
        uint64_t v64 = &v58[v63];
        swift_bridgeObjectRetain();
        v57(v91, v64, v59);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v61 + 56))(v56, 0, 1, v60);
      }
      uint64_t v65 = v106;
      uint64_t v66 = *(int *)(v52 + 24);
      uint64_t v67 = &v106[v66];
      uint64_t v68 = &v51[v66];
      uint64_t v69 = type metadata accessor for AspireHeSerializedRelinKey(0);
      uint64_t v70 = *(void *)(v69 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v70 + 48))(v68, 1, v69))
      {
        uint64_t v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
        memcpy(v67, v68, *(void *)(*(void *)(v71 - 8) + 64));
        uint64_t v34 = v99;
        uint64_t v48 = v103;
      }
      else
      {
        uint64_t v101 = v70;
        v57(v67, v68, v96);
        uint64_t v72 = *(int *)(v69 + 20);
        uint64_t v73 = &v67[v72];
        uint64_t v74 = &v68[v72];
        uint64_t v75 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
        uint64_t v76 = *(void *)(v75 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v76 + 48))(v74, 1, v75))
        {
          uint64_t v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
          memcpy(v73, v74, *(void *)(*(void *)(v77 - 8) + 64));
          uint64_t v34 = v99;
          uint64_t v78 = v101;
        }
        else
        {
          uint64_t v89 = v76;
          v57(v73, v74, v96);
          uint64_t v90 = v75;
          uint64_t v92 = v73;
          uint64_t v79 = *(int *)(v75 + 20);
          uint64_t v80 = &v73[v79];
          uint64_t v81 = &v74[v79];
          uint64_t v82 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
          uint64_t v83 = *(void *)(v82 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v83 + 48))(v81, 1, v82))
          {
            uint64_t v84 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
            memcpy(v80, v81, *(void *)(*(void *)(v84 - 8) + 64));
          }
          else
          {
            *(void *)uint64_t v80 = *(void *)v81;
            uint64_t v85 = *(int *)(v82 + 20);
            uint64_t v88 = &v80[v85];
            uint64_t v86 = &v81[v85];
            swift_bridgeObjectRetain();
            v57(v88, v86, v96);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v83 + 56))(v80, 0, 1, v82);
          }
          uint64_t v34 = v99;
          uint64_t v78 = v101;
          (*(void (**)(char *, void, uint64_t, uint64_t))(v89 + 56))(v92, 0, 1, v90);
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v78 + 56))(v67, 0, 1, v69);
        uint64_t v48 = v103;
        uint64_t v65 = v106;
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v94 + 56))(v65, 0, 1, v52);
    }
    (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v48);
  }
  return v5;
}

void *assignWithCopy for AMDPbPECQuery(void *a1, void *a2, int *a3)
{
  uint64_t v5 = a1;
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[1];
  unint64_t v7 = a2[2];
  outlined copy of Data._Representation(v6, v7);
  uint64_t v8 = v5[1];
  unint64_t v9 = v5[2];
  v5[1] = v6;
  v5[2] = v7;
  outlined consume of Data._Representation(v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = (char *)v5 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage();
  __dst = *(void **)(v13 - 8);
  uint64_t v256 = v13;
  uint64_t v247 = (void (*)(char *, char *))__dst[3];
  v247(v11, v12);
  uint64_t v14 = a3[7];
  uint64_t v15 = (uint64_t)v5 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48);
  int v20 = v19(v15, 1, v17);
  int v21 = v19((uint64_t)v16, 1, v17);
  if (!v20)
  {
    if (v21)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config(v15, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
      goto LABEL_7;
    }
    *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
    *(_DWORD *)(v15 + 4) = *((_DWORD *)v16 + 1);
    *(void *)(v15 + 8) = *((void *)v16 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    ((void (*)(uint64_t, char *, uint64_t))v247)(v15 + *(int *)(v17 + 28), &v16[*(int *)(v17 + 28)], v256);
    uint64_t v34 = *(int *)(v17 + 32);
    uint64_t v35 = (char *)(v15 + v34);
    uint64_t v36 = &v16[v34];
    uint64_t v37 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
    uint64_t v38 = *(void *)(v37 - 8);
    uint64_t v39 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v38 + 48);
    int v40 = v39(v35, 1, v37);
    int v41 = v39(v36, 1, v37);
    if (v40)
    {
      if (!v41)
      {
        uint64_t v238 = v5;
        uint64_t v42 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
        uint64_t v43 = *(void *)(v42 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v36, 1, v42))
        {
          uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
          memcpy(v35, v36, *(void *)(*(void *)(v44 - 8) + 64));
          ((void (*)(char *, char *, uint64_t))__dst[2])(&v35[*(int *)(v37 + 20)], &v36[*(int *)(v37 + 20)], v256);
        }
        else
        {
          swift_getEnumCaseMultiPayload();
          uint64_t v147 = (void (*)(char *, char *, uint64_t))__dst[2];
          v147(v35, v36, v256);
          swift_storeEnumTagMultiPayload();
          (*(void (**)(char *, void, uint64_t, uint64_t))(v43 + 56))(v35, 0, 1, v42);
          v147(&v35[*(int *)(v37 + 20)], &v36[*(int *)(v37 + 20)], v256);
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
        uint64_t v5 = v238;
        goto LABEL_21;
      }
      goto LABEL_17;
    }
    if (v41)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v35, type metadata accessor for AspireSimilarityPlaintextPacking);
LABEL_17:
      size_t v31 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?)
                                  - 8)
                      + 64);
      uint64_t v32 = v35;
      uint64_t v33 = v36;
      goto LABEL_8;
    }
    uint64_t v127 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
    uint64_t v243 = *(void *)(v127 - 8);
    uint64_t v128 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v243 + 48);
    int v129 = v128(v35, 1, v127);
    int v130 = v128(v36, 1, v127);
    if (v129)
    {
      if (!v130)
      {
        swift_getEnumCaseMultiPayload();
        ((void (*)(char *, char *, uint64_t))__dst[2])(v35, v36, v256);
        swift_storeEnumTagMultiPayload();
        (*(void (**)(char *, void, uint64_t, uint64_t))(v243 + 56))(v35, 0, 1, v127);
LABEL_73:
        uint64_t v168 = (void (*)(char *, char *, uint64_t))v247;
LABEL_74:
        v168(&v35[*(int *)(v37 + 20)], &v36[*(int *)(v37 + 20)], v256);
        goto LABEL_21;
      }
    }
    else
    {
      if (!v130)
      {
        uint64_t v168 = (void (*)(char *, char *, uint64_t))v247;
        if (v5 != a2)
        {
          outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v35, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
          swift_getEnumCaseMultiPayload();
          ((void (*)(char *, char *, uint64_t))__dst[2])(v35, v36, v256);
          swift_storeEnumTagMultiPayload();
        }
        goto LABEL_74;
      }
      outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v35, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
    }
    uint64_t v167 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
    memcpy(v35, v36, *(void *)(*(void *)(v167 - 8) + 64));
    goto LABEL_73;
  }
  if (v21)
  {
LABEL_7:
    size_t v31 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?)
                                - 8)
                    + 64);
    uint64_t v32 = (void *)v15;
    uint64_t v33 = v16;
LABEL_8:
    memcpy(v32, v33, v31);
    goto LABEL_21;
  }
  *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
  *(_DWORD *)(v15 + 4) = *((_DWORD *)v16 + 1);
  *(void *)(v15 + 8) = *((void *)v16 + 1);
  uint64_t v22 = *(int *)(v17 + 28);
  uint64_t v23 = v15 + v22;
  uint64_t v24 = &v16[v22];
  uint64_t v25 = (void (*)(uint64_t, char *, uint64_t))__dst[2];
  swift_bridgeObjectRetain();
  v25(v23, v24, v256);
  uint64_t v26 = *(int *)(v17 + 32);
  uint64_t v232 = (char *)(v15 + v26);
  uint64_t v27 = &v16[v26];
  uint64_t v28 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  uint64_t v29 = *(void *)(v28 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
  {
    uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    memcpy(v232, v27, *(void *)(*(void *)(v30 - 8) + 64));
  }
  else
  {
    uint64_t v227 = v29;
    uint64_t v239 = v5;
    uint64_t v45 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
    uint64_t v46 = *(void *)(v45 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v27, 1, v45))
    {
      uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
      memcpy(v232, v27, *(void *)(*(void *)(v47 - 8) + 64));
      uint64_t v5 = v239;
      uint64_t v48 = v256;
    }
    else
    {
      swift_getEnumCaseMultiPayload();
      v25((uint64_t)v232, v27, v256);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(char *, void, uint64_t, uint64_t))(v46 + 56))(v232, 0, 1, v45);
      uint64_t v48 = v256;
      uint64_t v5 = v239;
    }
    v25((uint64_t)&v232[*(int *)(v28 + 20)], &v27[*(int *)(v28 + 20)], v48);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v227 + 56))(v232, 0, 1, v28);
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
LABEL_21:
  uint64_t v49 = a3[8];
  uint64_t v50 = (uint64_t)v5 + v49;
  uint64_t v51 = (char *)a2 + v49;
  uint64_t v52 = type metadata accessor for AMDPbEvaluationKey(0);
  uint64_t v53 = *(void *)(v52 - 8);
  uint64_t v54 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v53 + 48);
  int v55 = v54(v50, 1, v52);
  int v56 = v54((uint64_t)v51, 1, v52);
  if (!v55)
  {
    if (v56)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config(v50, type metadata accessor for AMDPbEvaluationKey);
      goto LABEL_27;
    }
    uint64_t v240 = v5;
    ((void (*)(uint64_t, char *, uint64_t))v247)(v50, v51, v256);
    uint64_t v67 = *(int *)(v52 + 20);
    uint64_t v68 = (char *)(v50 + v67);
    uint64_t v69 = &v51[v67];
    uint64_t v70 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
    uint64_t v71 = *(void *)(v70 - 8);
    uint64_t v72 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v71 + 48);
    int v73 = v72(v68, 1, v70);
    int v74 = v72(v69, 1, v70);
    if (v73)
    {
      if (!v74)
      {
        *(void *)uint64_t v68 = *(void *)v69;
        uint64_t v75 = *((void *)v69 + 1);
        unint64_t v76 = *((void *)v69 + 2);
        outlined copy of Data._Representation(v75, v76);
        *((void *)v68 + 1) = v75;
        *((void *)v68 + 2) = v76;
        ((void (*)(char *, char *, uint64_t))__dst[2])(&v68[*(int *)(v70 + 24)], &v69[*(int *)(v70 + 24)], v256);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v71 + 56))(v68, 0, 1, v70);
        goto LABEL_41;
      }
    }
    else
    {
      if (!v74)
      {
        *(void *)uint64_t v68 = *(void *)v69;
        uint64_t v131 = *((void *)v69 + 1);
        unint64_t v132 = *((void *)v69 + 2);
        outlined copy of Data._Representation(v131, v132);
        uint64_t v133 = *((void *)v68 + 1);
        unint64_t v134 = *((void *)v68 + 2);
        *((void *)v68 + 1) = v131;
        *((void *)v68 + 2) = v132;
        outlined consume of Data._Representation(v133, v134);
        ((void (*)(char *, char *, uint64_t))v247)(&v68[*(int *)(v70 + 24)], &v69[*(int *)(v70 + 24)], v256);
LABEL_41:
        uint64_t v93 = *(int *)(v52 + 24);
        uint64_t v94 = (char *)(v50 + v93);
        uint64_t v95 = &v51[v93];
        uint64_t v96 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
        uint64_t v97 = *(void *)(v96 - 8);
        uint64_t v98 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v97 + 48);
        int v99 = v98(v94, 1, v96);
        int v100 = v98(v95, 1, v96);
        if (v99)
        {
          if (v100)
          {
            uint64_t v101 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
            memcpy(v94, v95, *(void *)(*(void *)(v101 - 8) + 64));
            return v240;
          }
          else
          {
            uint64_t v249 = v97;
            uint64_t v114 = (void (*)(char *, char *, uint64_t))__dst[2];
            v114(v94, v95, v256);
            uint64_t v115 = *(int *)(v96 + 20);
            uint64_t v116 = &v94[v115];
            uint64_t v117 = &v95[v115];
            uint64_t v118 = type metadata accessor for AspireHeSerializedGaloisKey(0);
            uint64_t v119 = *(void *)(v118 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v119 + 48))(v117, 1, v118))
            {
              uint64_t v120 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
              memcpy(v116, v117, *(void *)(*(void *)(v120 - 8) + 64));
            }
            else
            {
              *(void *)uint64_t v116 = *(void *)v117;
              uint64_t v148 = *(int *)(v118 + 20);
              __dstc = &v116[v148];
              uint64_t v149 = &v117[v148];
              swift_bridgeObjectRetain();
              v114(__dstc, v149, v256);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v119 + 56))(v116, 0, 1, v118);
            }
            uint64_t v150 = *(int *)(v96 + 24);
            uint64_t v151 = &v94[v150];
            uint64_t v152 = &v95[v150];
            uint64_t v153 = type metadata accessor for AspireHeSerializedRelinKey(0);
            uint64_t v154 = *(void *)(v153 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v154 + 48))(v152, 1, v153))
            {
              uint64_t v155 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
              memcpy(v151, v152, *(void *)(*(void *)(v155 - 8) + 64));
              uint64_t v156 = v249;
            }
            else
            {
              v114(v151, v152, v256);
              uint64_t v161 = *(int *)(v153 + 20);
              uint64_t v162 = &v151[v161];
              uint64_t v163 = &v152[v161];
              uint64_t v164 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
              uint64_t v165 = *(void *)(v164 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v165 + 48))(v163, 1, v164))
              {
                uint64_t v166 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
                memcpy(v162, v163, *(void *)(*(void *)(v166 - 8) + 64));
                uint64_t v156 = v249;
              }
              else
              {
                v114(v162, v163, v256);
                uint64_t v186 = *(int *)(v164 + 20);
                v245 = v162;
                __src = &v162[v186];
                uint64_t v187 = &v163[v186];
                uint64_t v188 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
                uint64_t v231 = *(void *)(v188 - 8);
                if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v231 + 48))(v187, 1, v188))
                {
                  uint64_t v189 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                  memcpy(__src, v187, *(void *)(*(void *)(v189 - 8) + 64));
                }
                else
                {
                  *(void *)__src = *(void *)v187;
                  uint64_t v206 = *(int *)(v188 + 20);
                  uint64_t v229 = &__src[v206];
                  uint64_t v234 = &v187[v206];
                  swift_bridgeObjectRetain();
                  v114(v229, v234, v256);
                  (*(void (**)(char *, void, uint64_t, uint64_t))(v231 + 56))(__src, 0, 1, v188);
                }
                uint64_t v156 = v249;
                (*(void (**)(char *, void, uint64_t, uint64_t))(v165 + 56))(v245, 0, 1, v164);
              }
              (*(void (**)(char *, void, uint64_t, uint64_t))(v154 + 56))(v151, 0, 1, v153);
            }
            (*(void (**)(char *, void, uint64_t, uint64_t))(v156 + 56))(v94, 0, 1, v96);
            return v240;
          }
        }
        uint64_t v5 = v240;
        if (v100)
        {
          outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v94, type metadata accessor for AspireHeSerializedEvaluationKey);
          uint64_t v102 = &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?;
LABEL_46:
          size_t v64 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(v102) - 8) + 64);
          uint64_t v65 = v94;
          uint64_t v66 = v95;
          goto LABEL_29;
        }
        ((void (*)(char *, char *, uint64_t))v247)(v94, v95, v256);
        uint64_t v135 = *(int *)(v96 + 20);
        uint64_t v136 = &v94[v135];
        uint64_t v137 = &v95[v135];
        uint64_t v138 = type metadata accessor for AspireHeSerializedGaloisKey(0);
        uint64_t v139 = *(void *)(v138 - 8);
        int v140 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v139 + 48);
        int v141 = v140(v136, 1, v138);
        int v142 = v140(v137, 1, v138);
        if (v141)
        {
          if (!v142)
          {
            *(void *)uint64_t v136 = *(void *)v137;
            uint64_t v143 = *(int *)(v138 + 20);
            uint64_t v144 = &v136[v143];
            uint64_t v145 = &v137[v143];
            uint64_t v146 = (void (*)(char *, char *, uint64_t))__dst[2];
            swift_bridgeObjectRetain();
            v146(v144, v145, v256);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v139 + 56))(v136, 0, 1, v138);
            goto LABEL_78;
          }
        }
        else
        {
          if (!v142)
          {
            *(void *)uint64_t v136 = *(void *)v137;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            ((void (*)(char *, char *, uint64_t))v247)(&v136[*(int *)(v138 + 20)], &v137[*(int *)(v138 + 20)], v256);
LABEL_78:
            uint64_t v5 = v240;
            uint64_t v170 = *(int *)(v96 + 24);
            uint64_t v171 = (uint64_t)&v94[v170];
            uint64_t v51 = &v95[v170];
            uint64_t v172 = type metadata accessor for AspireHeSerializedRelinKey(0);
            uint64_t v173 = *(void *)(v172 - 8);
            uint64_t v174 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v173 + 48);
            int v175 = v174(v171, 1, v172);
            int v176 = v174((uint64_t)v51, 1, v172);
            if (v175)
            {
              if (!v176)
              {
                uint64_t v177 = (void (*)(uint64_t, char *, uint64_t))__dst[2];
                v177(v171, v51, v256);
                uint64_t v178 = *(int *)(v172 + 20);
                uint64_t v179 = (char *)(v171 + v178);
                uint64_t v180 = &v51[v178];
                uint64_t v181 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
                uint64_t v182 = *(void *)(v181 - 8);
                if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v182 + 48))(v180, 1, v181))
                {
                  uint64_t v183 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
                  memcpy(v179, v180, *(void *)(*(void *)(v183 - 8) + 64));
                  uint64_t v5 = v240;
                }
                else
                {
                  v177((uint64_t)v179, v180, v256);
                  uint64_t v202 = *(int *)(v181 + 20);
                  uint64_t v250 = v179;
                  __dstb = &v179[v202];
                  uint64_t v203 = &v180[v202];
                  uint64_t v204 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
                  uint64_t v246 = *(void *)(v204 - 8);
                  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v246 + 48))(v203, 1, v204))
                  {
                    uint64_t v205 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                    memcpy(__dstb, v203, *(void *)(*(void *)(v205 - 8) + 64));
                  }
                  else
                  {
                    *(void *)__dstb = *(void *)v203;
                    uint64_t v207 = *(int *)(v204 + 20);
                    __srcb = &__dstb[v207];
                    uint64_t v208 = &v203[v207];
                    swift_bridgeObjectRetain();
                    v177((uint64_t)__srcb, v208, v256);
                    (*(void (**)(char *, void, uint64_t, uint64_t))(v246 + 56))(__dstb, 0, 1, v204);
                  }
                  uint64_t v5 = v240;
                  (*(void (**)(char *, void, uint64_t, uint64_t))(v182 + 56))(v250, 0, 1, v181);
                }
                (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v173 + 56))(v171, 0, 1, v172);
                return v5;
              }
            }
            else
            {
              if (!v176)
              {
                ((void (*)(uint64_t, char *, uint64_t))v247)(v171, v51, v256);
                uint64_t v190 = *(int *)(v172 + 20);
                uint64_t v94 = (char *)(v171 + v190);
                uint64_t v95 = &v51[v190];
                uint64_t v191 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
                uint64_t v192 = *(void *)(v191 - 8);
                uint64_t v193 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v192 + 48);
                int v194 = v193(v94, 1, v191);
                int v195 = v193(v95, 1, v191);
                if (v194)
                {
                  if (!v195)
                  {
                    __dsta = (void (*)(char *, char *, uint64_t))__dst[2];
                    __dsta(v94, v95, v256);
                    uint64_t v196 = *(int *)(v191 + 20);
                    uint64_t v197 = &v94[v196];
                    uint64_t v198 = &v95[v196];
                    uint64_t v199 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
                    uint64_t v200 = *(void *)(v199 - 8);
                    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v200 + 48))(v198, 1, v199))
                    {
                      uint64_t v201 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                      memcpy(v197, v198, *(void *)(*(void *)(v201 - 8) + 64));
                    }
                    else
                    {
                      *(void *)uint64_t v197 = *(void *)v198;
                      uint64_t v221 = *(int *)(v199 + 20);
                      uint64_t v251 = &v197[v221];
                      v222 = &v198[v221];
                      swift_bridgeObjectRetain();
                      __dsta(v251, v222, v256);
                      (*(void (**)(char *, void, uint64_t, uint64_t))(v200 + 56))(v197, 0, 1, v199);
                    }
                    (*(void (**)(char *, void, uint64_t, uint64_t))(v192 + 56))(v94, 0, 1, v191);
                    return v5;
                  }
                }
                else
                {
                  if (!v195)
                  {
                    ((void (*)(char *, char *, uint64_t))v247)(v94, v95, v256);
                    uint64_t v209 = *(int *)(v191 + 20);
                    uint64_t v210 = &v94[v209];
                    uint64_t v211 = &v95[v209];
                    uint64_t v212 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
                    uint64_t v213 = *(void *)(v212 - 8);
                    uint64_t v214 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v213 + 48);
                    int v215 = v214(v210, 1, v212);
                    int v216 = v214(v211, 1, v212);
                    if (v215)
                    {
                      if (!v216)
                      {
                        *(void *)uint64_t v210 = *(void *)v211;
                        uint64_t v217 = *(int *)(v212 + 20);
                        uint64_t v218 = &v210[v217];
                        uint64_t v219 = &v211[v217];
                        uint64_t v220 = (void (*)(char *, char *, uint64_t))__dst[2];
                        swift_bridgeObjectRetain();
                        v220(v218, v219, v256);
                        (*(void (**)(char *, void, uint64_t, uint64_t))(v213 + 56))(v210, 0, 1, v212);
                        return v5;
                      }
                    }
                    else
                    {
                      if (!v216)
                      {
                        *(void *)uint64_t v210 = *(void *)v211;
                        swift_bridgeObjectRetain();
                        swift_bridgeObjectRelease();
                        ((void (*)(char *, char *, uint64_t))v247)(&v210[*(int *)(v212 + 20)], &v211[*(int *)(v212 + 20)], v256);
                        return v5;
                      }
                      outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v210, type metadata accessor for AspireHeSerializedCiphertextVec);
                    }
                    size_t v64 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?)
                                                - 8)
                                    + 64);
                    uint64_t v65 = v210;
                    uint64_t v66 = v211;
                    goto LABEL_29;
                  }
                  outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v94, type metadata accessor for AspireHeSerializedKeySwitchKey);
                }
                uint64_t v102 = &demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?;
                goto LABEL_46;
              }
              outlined destroy of AMDPbHEConfig.OneOf_Config(v171, type metadata accessor for AspireHeSerializedRelinKey);
            }
            size_t v64 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?)
                                        - 8)
                            + 64);
            uint64_t v65 = (void *)v171;
            goto LABEL_28;
          }
          outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v136, type metadata accessor for AspireHeSerializedGaloisKey);
        }
        uint64_t v169 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
        memcpy(v136, v137, *(void *)(*(void *)(v169 - 8) + 64));
        goto LABEL_78;
      }
      outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v68, type metadata accessor for AMDPbEvaluationKeyMetadata);
    }
    uint64_t v92 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
    memcpy(v68, v69, *(void *)(*(void *)(v92 - 8) + 64));
    goto LABEL_41;
  }
  if (v56)
  {
LABEL_27:
    size_t v64 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKey?)
                                - 8)
                    + 64);
    uint64_t v65 = (void *)v50;
LABEL_28:
    uint64_t v66 = v51;
LABEL_29:
    memcpy(v65, v66, v64);
    return v5;
  }
  uint64_t v248 = v53;
  uint64_t v57 = (void (*)(uint64_t, char *, uint64_t))__dst[2];
  v57(v50, v51, v256);
  uint64_t v58 = *(int *)(v52 + 20);
  uint64_t v59 = (void *)(v50 + v58);
  uint64_t v60 = &v51[v58];
  uint64_t v61 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
  uint64_t v62 = *(void *)(v61 - 8);
  uint64_t v244 = (void (*)(char *, char *, uint64_t))v57;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48))(v60, 1, v61))
  {
    uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
    memcpy(v59, v60, *(void *)(*(void *)(v63 - 8) + 64));
  }
  else
  {
    *uint64_t v59 = *(void *)v60;
    __srca = (void *)v50;
    uint64_t v241 = v5;
    uint64_t v77 = *((void *)v60 + 1);
    unint64_t v78 = *((void *)v60 + 2);
    outlined copy of Data._Representation(v77, v78);
    v59[1] = v77;
    v59[2] = v78;
    uint64_t v50 = (uint64_t)__srca;
    uint64_t v5 = v241;
    v57((uint64_t)v59 + *(int *)(v61 + 24), &v60[*(int *)(v61 + 24)], v256);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v62 + 56))(v59, 0, 1, v61);
  }
  uint64_t v79 = *(int *)(v52 + 24);
  uint64_t v80 = (char *)(v50 + v79);
  uint64_t v81 = &v51[v79];
  uint64_t v82 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  uint64_t v83 = *(void *)(v82 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v83 + 48))(v81, 1, v82))
  {
    uint64_t v84 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
    memcpy(v80, v81, *(void *)(*(void *)(v84 - 8) + 64));
  }
  else
  {
    uint64_t v230 = v83;
    uint64_t v242 = v5;
    v244(v80, v81, v256);
    uint64_t v85 = *(int *)(v82 + 20);
    uint64_t v233 = v80;
    uint64_t v86 = &v80[v85];
    uint64_t v87 = &v81[v85];
    uint64_t v88 = type metadata accessor for AspireHeSerializedGaloisKey(0);
    uint64_t v89 = *(void *)(v88 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v89 + 48))(v87, 1, v88))
    {
      uint64_t v90 = v244;
      uint64_t v91 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
      memcpy(v86, v87, *(void *)(*(void *)(v91 - 8) + 64));
    }
    else
    {
      *(void *)uint64_t v86 = *(void *)v87;
      uint64_t v103 = *(int *)(v88 + 20);
      uint64_t v104 = &v86[v103];
      size_t v105 = &v87[v103];
      swift_bridgeObjectRetain();
      uint64_t v106 = v104;
      uint64_t v90 = v244;
      v244(v106, v105, v256);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v89 + 56))(v86, 0, 1, v88);
    }
    uint64_t v107 = *(int *)(v82 + 24);
    uint64_t v108 = v233;
    uint64_t v109 = &v233[v107];
    uint64_t v110 = &v81[v107];
    uint64_t v111 = type metadata accessor for AspireHeSerializedRelinKey(0);
    uint64_t v112 = *(void *)(v111 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v112 + 48))(v110, 1, v111))
    {
      uint64_t v113 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
      memcpy(v109, v110, *(void *)(*(void *)(v113 - 8) + 64));
      uint64_t v5 = v242;
    }
    else
    {
      v90(v109, v110, v256);
      uint64_t v121 = *(int *)(v111 + 20);
      size_t v122 = &v109[v121];
      uint64_t v123 = &v110[v121];
      uint64_t v124 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
      uint64_t v125 = *(void *)(v124 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v125 + 48))(v123, 1, v124))
      {
        uint64_t v126 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
        memcpy(v122, v123, *(void *)(*(void *)(v126 - 8) + 64));
        uint64_t v108 = v233;
      }
      else
      {
        v244(v122, v123, v256);
        uint64_t v157 = *(int *)(v124 + 20);
        uint64_t v228 = v122;
        uint64_t v225 = &v122[v157];
        int v158 = &v123[v157];
        uint64_t v159 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
        uint64_t v224 = *(void *)(v159 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v224 + 48))(v158, 1, v159))
        {
          uint64_t v160 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
          memcpy(v225, v158, *(void *)(*(void *)(v160 - 8) + 64));
        }
        else
        {
          *(void *)uint64_t v225 = *(void *)v158;
          uint64_t v184 = *(int *)(v159 + 20);
          uint64_t v223 = &v225[v184];
          uint64_t v226 = &v158[v184];
          swift_bridgeObjectRetain();
          v244(v223, v226, v256);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v224 + 56))(v225, 0, 1, v159);
        }
        uint64_t v108 = v233;
        (*(void (**)(char *, void, uint64_t, uint64_t))(v125 + 56))(v228, 0, 1, v124);
      }
      uint64_t v83 = v230;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v112 + 56))(v109, 0, 1, v111);
      uint64_t v5 = v242;
    }
    (*(void (**)(char *, void, uint64_t, uint64_t))(v83 + 56))(v108, 0, 1, v82);
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v248 + 56))(v50, 0, 1, v52);
  return v5;
}

uint64_t initializeWithTake for AMDPbPECQuery(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5 = a1;
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v6 = a3[6];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = a3[7];
  uint64_t v12 = (void *)(v5 + v11);
  uint64_t v13 = (void *)(a2 + v11);
  uint64_t v14 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    uint64_t v81 = v10;
    uint64_t v83 = v5;
    *uint64_t v12 = *v13;
    v12[1] = v13[1];
    v10((uint64_t)v12 + *(int *)(v14 + 28), (uint64_t)v13 + *(int *)(v14 + 28), v9);
    uint64_t v17 = *(int *)(v14 + 32);
    uint64_t v18 = (char *)v12 + v17;
    uint64_t v19 = (char *)v13 + v17;
    uint64_t v20 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
    uint64_t v21 = *(void *)(v20 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
    {
      uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
      memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
      uint64_t v10 = v81;
    }
    else
    {
      uint64_t v78 = v9;
      uint64_t v23 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
      uint64_t v75 = *(void *)(v23 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v75 + 48))(v19, 1, v23))
      {
        uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
        memcpy(v18, v19, *(void *)(*(void *)(v24 - 8) + 64));
        uint64_t v9 = v78;
      }
      else
      {
        swift_getEnumCaseMultiPayload();
        v81((uint64_t)v18, (uint64_t)v19, v78);
        swift_storeEnumTagMultiPayload();
        uint64_t v25 = v23;
        uint64_t v9 = v78;
        (*(void (**)(char *, void, uint64_t, uint64_t))(v75 + 56))(v18, 0, 1, v25);
      }
      v81((uint64_t)&v18[*(int *)(v20 + 20)], (uint64_t)&v19[*(int *)(v20 + 20)], v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
      uint64_t v10 = v81;
    }
    uint64_t v5 = v83;
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  uint64_t v26 = a3[8];
  uint64_t v27 = (char *)(v5 + v26);
  uint64_t v28 = (char *)(a2 + v26);
  uint64_t v29 = type metadata accessor for AMDPbEvaluationKey(0);
  uint64_t v30 = *(void *)(v29 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
  {
    uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKey?);
    memcpy(v27, v28, *(void *)(*(void *)(v31 - 8) + 64));
  }
  else
  {
    uint64_t v80 = v30;
    v10((uint64_t)v27, (uint64_t)v28, v9);
    uint64_t v32 = *(int *)(v29 + 20);
    uint64_t v84 = v27;
    uint64_t v33 = &v27[v32];
    uint64_t v34 = &v28[v32];
    uint64_t v35 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
    uint64_t v36 = *(void *)(v35 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
    {
      uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
      memcpy(v33, v34, *(void *)(*(void *)(v37 - 8) + 64));
    }
    else
    {
      *(void *)uint64_t v33 = *(void *)v34;
      *(_OWORD *)(v33 + 8) = *(_OWORD *)(v34 + 8);
      v10((uint64_t)&v33[*(int *)(v35 + 24)], (uint64_t)&v34[*(int *)(v35 + 24)], v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
    }
    uint64_t v38 = *(int *)(v29 + 24);
    uint64_t v39 = &v27[v38];
    int v40 = &v28[v38];
    uint64_t v41 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
    uint64_t v42 = *(void *)(v41 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41))
    {
      uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
      memcpy(v39, v40, *(void *)(*(void *)(v43 - 8) + 64));
      uint64_t v44 = v80;
    }
    else
    {
      v10((uint64_t)v39, (uint64_t)v40, v9);
      uint64_t v76 = v41;
      uint64_t v77 = v39;
      uint64_t v45 = *(int *)(v41 + 20);
      uint64_t v46 = &v39[v45];
      uint64_t v47 = (void (*)(char *, char *, uint64_t))v10;
      uint64_t v48 = &v40[v45];
      uint64_t v49 = v9;
      uint64_t v50 = type metadata accessor for AspireHeSerializedGaloisKey(0);
      uint64_t v51 = *(void *)(v50 - 8);
      uint64_t v79 = v49;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48))(v48, 1, v50))
      {
        uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
        memcpy(v46, v48, *(void *)(*(void *)(v52 - 8) + 64));
      }
      else
      {
        *(void *)uint64_t v46 = *(void *)v48;
        v47(&v46[*(int *)(v50 + 20)], &v48[*(int *)(v50 + 20)], v49);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v51 + 56))(v46, 0, 1, v50);
      }
      uint64_t v53 = v47;
      uint64_t v27 = v84;
      uint64_t v54 = *(int *)(v76 + 24);
      int v55 = &v77[v54];
      int v56 = &v40[v54];
      uint64_t v57 = type metadata accessor for AspireHeSerializedRelinKey(0);
      uint64_t v58 = *(void *)(v57 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48))(v56, 1, v57))
      {
        uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
        memcpy(v55, v56, *(void *)(*(void *)(v59 - 8) + 64));
      }
      else
      {
        uint64_t v74 = v58;
        v53(v55, v56, v79);
        uint64_t v60 = *(int *)(v57 + 20);
        uint64_t v61 = &v55[v60];
        uint64_t v82 = v53;
        uint64_t v62 = &v56[v60];
        uint64_t v63 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
        uint64_t v64 = *(void *)(v63 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48))(v62, 1, v63))
        {
          uint64_t v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
          memcpy(v61, v62, *(void *)(*(void *)(v65 - 8) + 64));
        }
        else
        {
          v82(v61, v62, v79);
          uint64_t v66 = *(int *)(v63 + 20);
          int v73 = v61;
          uint64_t v72 = &v61[v66];
          uint64_t v67 = &v62[v66];
          uint64_t v68 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
          uint64_t v71 = *(void *)(v68 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v71 + 48))(v67, 1, v68))
          {
            uint64_t v69 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
            memcpy(v72, v67, *(void *)(*(void *)(v69 - 8) + 64));
          }
          else
          {
            *(void *)uint64_t v72 = *(void *)v67;
            v82(&v72[*(int *)(v68 + 20)], &v67[*(int *)(v68 + 20)], v79);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v71 + 56))(v72, 0, 1, v68);
          }
          (*(void (**)(char *, void, uint64_t, uint64_t))(v64 + 56))(v73, 0, 1, v63);
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v74 + 56))(v55, 0, 1, v57);
      }
      uint64_t v44 = v80;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v42 + 56))(v77, 0, 1, v76);
    }
    (*(void (**)(char *, void, uint64_t, uint64_t))(v44 + 56))(v27, 0, 1, v29);
  }
  return v5;
}

void *assignWithTake for AMDPbPECQuery(void *a1, uint64_t a2, int *a3)
{
  uint64_t v5 = a1;
  *a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = v5[1];
  unint64_t v7 = v5[2];
  *(_OWORD *)(v5 + 1) = *(_OWORD *)(a2 + 8);
  outlined consume of Data._Representation(v6, v7);
  uint64_t v8 = a3[6];
  uint64_t v9 = (char *)v5 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  uint64_t v221 = *(void *)(v11 - 8);
  uint64_t v223 = v11;
  uint64_t v224 = *(void (**)(char *, uint64_t))(v221 + 40);
  v224(v9, v10);
  uint64_t v12 = a3[7];
  uint64_t v13 = (char *)v5 + v12;
  uint64_t v14 = (char *)(a2 + v12);
  uint64_t v15 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v13, 1, v15);
  int v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (v19)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v13, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
      goto LABEL_7;
    }
    *(void *)uint64_t v13 = *(void *)v14;
    *((void *)v13 + 1) = *((void *)v14 + 1);
    swift_bridgeObjectRelease();
    ((void (*)(char *, char *, uint64_t))v224)(&v13[*(int *)(v15 + 28)], &v14[*(int *)(v15 + 28)], v223);
    uint64_t v31 = *(int *)(v15 + 32);
    uint64_t v32 = &v13[v31];
    uint64_t v33 = &v14[v31];
    uint64_t v34 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
    uint64_t v35 = *(void *)(v34 - 8);
    uint64_t v36 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v35 + 48);
    int v37 = v36(v32, 1, v34);
    int v38 = v36(v33, 1, v34);
    if (v37)
    {
      if (!v38)
      {
        uint64_t v214 = v5;
        uint64_t v39 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
        uint64_t v40 = *(void *)(v39 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v33, 1, v39))
        {
          uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
          memcpy(v32, v33, *(void *)(*(void *)(v41 - 8) + 64));
          (*(void (**)(char *, char *, uint64_t))(v221 + 32))(&v32[*(int *)(v34 + 20)], &v33[*(int *)(v34 + 20)], v223);
        }
        else
        {
          swift_getEnumCaseMultiPayload();
          uint64_t v136 = *(void (**)(char *, char *, uint64_t))(v221 + 32);
          v136(v32, v33, v223);
          swift_storeEnumTagMultiPayload();
          (*(void (**)(char *, void, uint64_t, uint64_t))(v40 + 56))(v32, 0, 1, v39);
          v136(&v32[*(int *)(v34 + 20)], &v33[*(int *)(v34 + 20)], v223);
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
        uint64_t v5 = v214;
        goto LABEL_9;
      }
      goto LABEL_18;
    }
    if (v38)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v32, type metadata accessor for AspireSimilarityPlaintextPacking);
LABEL_18:
      size_t v28 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?)
                                  - 8)
                      + 64);
      uint64_t v29 = v32;
      uint64_t v30 = v33;
      goto LABEL_8;
    }
    uint64_t v118 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
    uint64_t v217 = *(void *)(v118 - 8);
    uint64_t v119 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v217 + 48);
    int v120 = v119(v32, 1, v118);
    int v121 = v119(v33, 1, v118);
    if (v120)
    {
      uint64_t v122 = v223;
      if (!v121)
      {
        swift_getEnumCaseMultiPayload();
        (*(void (**)(char *, char *, uint64_t))(v221 + 32))(v32, v33, v223);
        swift_storeEnumTagMultiPayload();
        (*(void (**)(char *, void, uint64_t, uint64_t))(v217 + 56))(v32, 0, 1, v118);
LABEL_75:
        uint64_t v156 = *(int *)(v34 + 20);
        uint64_t v27 = (void (*)(uint64_t, char *, uint64_t))v224;
        ((void (*)(char *, char *, uint64_t))v224)(&v32[v156], &v33[v156], v122);
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v122 = v223;
      if (!v121)
      {
        if (v5 != (void *)a2)
        {
          outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v32, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
          swift_getEnumCaseMultiPayload();
          (*(void (**)(char *, char *, uint64_t))(v221 + 32))(v32, v33, v223);
          swift_storeEnumTagMultiPayload();
        }
        goto LABEL_75;
      }
      outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v32, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
    }
    uint64_t v155 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
    memcpy(v32, v33, *(void *)(*(void *)(v155 - 8) + 64));
    goto LABEL_75;
  }
  if (v19)
  {
LABEL_7:
    size_t v28 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?)
                                - 8)
                    + 64);
    uint64_t v29 = v13;
    uint64_t v30 = v14;
LABEL_8:
    memcpy(v29, v30, v28);
LABEL_9:
    uint64_t v27 = (void (*)(uint64_t, char *, uint64_t))v224;
    goto LABEL_22;
  }
  uint64_t v213 = v5;
  uint64_t v208 = a3;
  *(void *)uint64_t v13 = *(void *)v14;
  *((void *)v13 + 1) = *((void *)v14 + 1);
  uint64_t v20 = *(void (**)(char *, char *, uint64_t))(v221 + 32);
  v20(&v13[*(int *)(v15 + 28)], &v14[*(int *)(v15 + 28)], v223);
  uint64_t v21 = *(int *)(v15 + 32);
  uint64_t v22 = &v13[v21];
  uint64_t v23 = &v14[v21];
  uint64_t v24 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  uint64_t v25 = *(void *)(v24 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
  {
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
    uint64_t v27 = (void (*)(uint64_t, char *, uint64_t))v224;
  }
  else
  {
    uint64_t v206 = v25;
    uint64_t v42 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
    uint64_t v43 = *(void *)(v42 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v23, 1, v42))
    {
      uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
      memcpy(v22, v23, *(void *)(*(void *)(v44 - 8) + 64));
      uint64_t v5 = v213;
      uint64_t v45 = v223;
    }
    else
    {
      swift_getEnumCaseMultiPayload();
      v20(v22, v23, v223);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(char *, void, uint64_t, uint64_t))(v43 + 56))(v22, 0, 1, v42);
      uint64_t v45 = v223;
      uint64_t v5 = v213;
    }
    v20(&v22[*(int *)(v24 + 20)], &v23[*(int *)(v24 + 20)], v45);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v206 + 56))(v22, 0, 1, v24);
    uint64_t v27 = (void (*)(uint64_t, char *, uint64_t))v224;
  }
  (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  a3 = v208;
LABEL_22:
  uint64_t v46 = a3[8];
  uint64_t v47 = (uint64_t)v5 + v46;
  uint64_t v48 = (char *)(a2 + v46);
  uint64_t v49 = type metadata accessor for AMDPbEvaluationKey(0);
  uint64_t v50 = *(void *)(v49 - 8);
  uint64_t v51 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v50 + 48);
  int v52 = v51(v47, 1, v49);
  int v53 = v51((uint64_t)v48, 1, v49);
  if (!v52)
  {
    if (v53)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config(v47, type metadata accessor for AMDPbEvaluationKey);
      goto LABEL_28;
    }
    int v215 = v5;
    v27(v47, v48, v223);
    uint64_t v64 = *(int *)(v49 + 20);
    uint64_t v65 = (void *)(v47 + v64);
    uint64_t v66 = &v48[v64];
    uint64_t v67 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
    uint64_t v68 = *(void *)(v67 - 8);
    uint64_t v69 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v68 + 48);
    int v70 = v69((char *)v65, 1, v67);
    int v71 = v69(v66, 1, v67);
    if (v70)
    {
      if (!v71)
      {
        void *v65 = *(void *)v66;
        *(_OWORD *)(v65 + 1) = *(_OWORD *)(v66 + 8);
        (*(void (**)(char *, char *, uint64_t))(v221 + 32))((char *)v65 + *(int *)(v67 + 24), &v66[*(int *)(v67 + 24)], v223);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v68 + 56))(v65, 0, 1, v67);
LABEL_42:
        uint64_t v5 = v215;
        uint64_t v86 = (void (*)(uint64_t, char *, uint64_t))v224;
        goto LABEL_43;
      }
    }
    else
    {
      if (!v71)
      {
        uint64_t v123 = *((void *)v66 + 2);
        uint64_t v124 = v65[1];
        unint64_t v125 = v65[2];
        *(_OWORD *)uint64_t v65 = *(_OWORD *)v66;
        v65[2] = v123;
        outlined consume of Data._Representation(v124, v125);
        uint64_t v126 = *(int *)(v67 + 24);
        uint64_t v127 = &v66[v126];
        uint64_t v86 = (void (*)(uint64_t, char *, uint64_t))v224;
        ((void (*)(char *, char *, uint64_t))v224)((char *)v65 + v126, v127, v223);
        uint64_t v5 = v215;
LABEL_43:
        uint64_t v87 = *(int *)(v49 + 24);
        uint64_t v88 = v47 + v87;
        uint64_t v89 = &v48[v87];
        uint64_t v90 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
        uint64_t v91 = *(void *)(v90 - 8);
        uint64_t v92 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v91 + 48);
        int v93 = v92(v88, 1, v90);
        int v94 = v92((uint64_t)v89, 1, v90);
        if (v93)
        {
          if (!v94)
          {
            uint64_t v225 = v91;
            uint64_t v219 = *(void (**)(uint64_t, char *, uint64_t))(v221 + 32);
            v219(v88, v89, v223);
            uint64_t v95 = *(int *)(v90 + 20);
            uint64_t v96 = (void *)(v88 + v95);
            uint64_t v97 = &v89[v95];
            uint64_t v98 = type metadata accessor for AspireHeSerializedGaloisKey(0);
            uint64_t v99 = *(void *)(v98 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v99 + 48))(v97, 1, v98))
            {
              uint64_t v100 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
              memcpy(v96, v97, *(void *)(*(void *)(v100 - 8) + 64));
              uint64_t v101 = (void (*)(char *, char *, uint64_t))v219;
            }
            else
            {
              void *v96 = *(void *)v97;
              uint64_t v101 = (void (*)(char *, char *, uint64_t))v219;
              v219((uint64_t)v96 + *(int *)(v98 + 20), &v97[*(int *)(v98 + 20)], v223);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v99 + 56))(v96, 0, 1, v98);
            }
            uint64_t v137 = *(int *)(v90 + 24);
            uint64_t v138 = (char *)(v88 + v137);
            uint64_t v139 = &v89[v137];
            uint64_t v140 = type metadata accessor for AspireHeSerializedRelinKey(0);
            uint64_t v141 = *(void *)(v140 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v141 + 48))(v139, 1, v140))
            {
              uint64_t v142 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
              memcpy(v138, v139, *(void *)(*(void *)(v142 - 8) + 64));
            }
            else
            {
              v101(v138, v139, v223);
              uint64_t v149 = *(int *)(v140 + 20);
              uint64_t v150 = &v138[v149];
              uint64_t v151 = &v139[v149];
              uint64_t v152 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
              uint64_t v153 = *(void *)(v152 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v153 + 48))(v151, 1, v152))
              {
                uint64_t v154 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
                memcpy(v150, v151, *(void *)(*(void *)(v154 - 8) + 64));
                uint64_t v5 = v215;
              }
              else
              {
                v101(v150, v151, v223);
                uint64_t v173 = *(int *)(v152 + 20);
                uint64_t v220 = v150;
                uint64_t v210 = &v150[v173];
                uint64_t v174 = &v151[v173];
                uint64_t v175 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
                uint64_t v207 = *(void *)(v175 - 8);
                if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v207 + 48))(v174, 1, v175))
                {
                  uint64_t v176 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                  memcpy(v210, v174, *(void *)(*(void *)(v176 - 8) + 64));
                }
                else
                {
                  *(void *)uint64_t v210 = *(void *)v174;
                  v101(&v210[*(int *)(v175 + 20)], &v174[*(int *)(v175 + 20)], v223);
                  (*(void (**)(char *, void, uint64_t, uint64_t))(v207 + 56))(v210, 0, 1, v175);
                }
                uint64_t v5 = v215;
                (*(void (**)(char *, void, uint64_t, uint64_t))(v153 + 56))(v220, 0, 1, v152);
              }
              (*(void (**)(char *, void, uint64_t, uint64_t))(v141 + 56))(v138, 0, 1, v140);
            }
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v225 + 56))(v88, 0, 1, v90);
            return v5;
          }
          goto LABEL_49;
        }
        if (v94)
        {
          outlined destroy of AMDPbHEConfig.OneOf_Config(v88, type metadata accessor for AspireHeSerializedEvaluationKey);
LABEL_49:
          uint64_t v102 = &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?;
LABEL_50:
          size_t v61 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(v102) - 8) + 64);
          uint64_t v62 = (void *)v88;
          uint64_t v63 = v89;
          goto LABEL_30;
        }
        v86(v88, v89, v223);
        uint64_t v128 = *(int *)(v90 + 20);
        int v129 = (char *)(v88 + v128);
        int v130 = &v89[v128];
        uint64_t v131 = type metadata accessor for AspireHeSerializedGaloisKey(0);
        uint64_t v132 = *(void *)(v131 - 8);
        uint64_t v133 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v132 + 48);
        int v134 = v133(v129, 1, v131);
        int v135 = v133(v130, 1, v131);
        if (v134)
        {
          if (!v135)
          {
            *(void *)int v129 = *(void *)v130;
            (*(void (**)(char *, char *, uint64_t))(v221 + 32))(&v129[*(int *)(v131 + 20)], &v130[*(int *)(v131 + 20)], v223);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v132 + 56))(v129, 0, 1, v131);
            goto LABEL_79;
          }
        }
        else
        {
          if (!v135)
          {
            *(void *)int v129 = *(void *)v130;
            swift_bridgeObjectRelease();
            ((void (*)(char *, char *, uint64_t))v224)(&v129[*(int *)(v131 + 20)], &v130[*(int *)(v131 + 20)], v223);
LABEL_79:
            uint64_t v5 = v215;
            uint64_t v158 = *(int *)(v90 + 24);
            uint64_t v159 = v88 + v158;
            uint64_t v48 = &v89[v158];
            uint64_t v160 = type metadata accessor for AspireHeSerializedRelinKey(0);
            uint64_t v161 = *(void *)(v160 - 8);
            uint64_t v162 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v161 + 48);
            int v163 = v162(v159, 1, v160);
            int v164 = v162((uint64_t)v48, 1, v160);
            if (v163)
            {
              if (!v164)
              {
                uint64_t v165 = *(void (**)(uint64_t, char *, uint64_t))(v221 + 32);
                v165(v159, v48, v223);
                uint64_t v166 = *(int *)(v160 + 20);
                uint64_t v167 = (char *)(v159 + v166);
                uint64_t v168 = &v48[v166];
                uint64_t v169 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
                uint64_t v170 = *(void *)(v169 - 8);
                if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v170 + 48))(v168, 1, v169))
                {
                  uint64_t v171 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
                  memcpy(v167, v168, *(void *)(*(void *)(v171 - 8) + 64));
                  uint64_t v5 = v215;
                }
                else
                {
                  v165((uint64_t)v167, v168, v223);
                  uint64_t v189 = *(int *)(v169 + 20);
                  uint64_t v227 = v167;
                  v222 = &v167[v189];
                  uint64_t v190 = &v168[v189];
                  uint64_t v191 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
                  __srca = *(void (***)(char *, void, uint64_t, uint64_t))(v191 - 8);
                  if (((unsigned int (*)(char *, uint64_t, uint64_t))__srca[6])(v190, 1, v191))
                  {
                    uint64_t v192 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                    memcpy(v222, v190, *(void *)(*(void *)(v192 - 8) + 64));
                  }
                  else
                  {
                    *(void *)v222 = *(void *)v190;
                    v165((uint64_t)&v222[*(int *)(v191 + 20)], &v190[*(int *)(v191 + 20)], v223);
                    __srca[7](v222, 0, 1, v191);
                  }
                  uint64_t v5 = v215;
                  (*(void (**)(char *, void, uint64_t, uint64_t))(v170 + 56))(v227, 0, 1, v169);
                }
                (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v161 + 56))(v159, 0, 1, v160);
                return v5;
              }
            }
            else
            {
              if (!v164)
              {
                ((void (*)(uint64_t, char *, uint64_t))v224)(v159, v48, v223);
                uint64_t v177 = *(int *)(v160 + 20);
                uint64_t v88 = v159 + v177;
                uint64_t v89 = &v48[v177];
                uint64_t v178 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
                uint64_t v179 = *(void *)(v178 - 8);
                uint64_t v180 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v179 + 48);
                int v181 = v180(v88, 1, v178);
                int v182 = v180((uint64_t)v89, 1, v178);
                if (v181)
                {
                  if (!v182)
                  {
                    uint64_t v226 = *(void (**)(uint64_t, char *, uint64_t))(v221 + 32);
                    v226(v88, v89, v223);
                    uint64_t v183 = *(int *)(v178 + 20);
                    uint64_t v184 = (void *)(v88 + v183);
                    uint64_t v185 = &v89[v183];
                    uint64_t v186 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
                    uint64_t v187 = *(void *)(v186 - 8);
                    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v187 + 48))(v185, 1, v186))
                    {
                      uint64_t v188 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                      memcpy(v184, v185, *(void *)(*(void *)(v188 - 8) + 64));
                    }
                    else
                    {
                      *uint64_t v184 = *(void *)v185;
                      v226((uint64_t)v184 + *(int *)(v186 + 20), &v185[*(int *)(v186 + 20)], v223);
                      (*(void (**)(void *, void, uint64_t, uint64_t))(v187 + 56))(v184, 0, 1, v186);
                    }
                    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v179 + 56))(v88, 0, 1, v178);
                    return v5;
                  }
                }
                else
                {
                  if (!v182)
                  {
                    ((void (*)(uint64_t, char *, uint64_t))v224)(v88, v89, v223);
                    uint64_t v193 = *(int *)(v178 + 20);
                    int v194 = (char *)(v88 + v193);
                    int v195 = &v89[v193];
                    uint64_t v196 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
                    uint64_t v197 = *(void *)(v196 - 8);
                    uint64_t v198 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v197 + 48);
                    int v199 = v198(v194, 1, v196);
                    int v200 = v198(v195, 1, v196);
                    if (v199)
                    {
                      if (!v200)
                      {
                        *(void *)int v194 = *(void *)v195;
                        (*(void (**)(char *, char *, uint64_t))(v221 + 32))(&v194[*(int *)(v196 + 20)], &v195[*(int *)(v196 + 20)], v223);
                        (*(void (**)(char *, void, uint64_t, uint64_t))(v197 + 56))(v194, 0, 1, v196);
                        return v5;
                      }
                    }
                    else
                    {
                      if (!v200)
                      {
                        *(void *)int v194 = *(void *)v195;
                        swift_bridgeObjectRelease();
                        ((void (*)(char *, char *, uint64_t))v224)(&v194[*(int *)(v196 + 20)], &v195[*(int *)(v196 + 20)], v223);
                        return v5;
                      }
                      outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v194, type metadata accessor for AspireHeSerializedCiphertextVec);
                    }
                    size_t v61 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?)
                                                - 8)
                                    + 64);
                    uint64_t v62 = v194;
                    uint64_t v63 = v195;
                    goto LABEL_30;
                  }
                  outlined destroy of AMDPbHEConfig.OneOf_Config(v88, type metadata accessor for AspireHeSerializedKeySwitchKey);
                }
                uint64_t v102 = &demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?;
                goto LABEL_50;
              }
              outlined destroy of AMDPbHEConfig.OneOf_Config(v159, type metadata accessor for AspireHeSerializedRelinKey);
            }
            size_t v61 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?)
                                        - 8)
                            + 64);
            uint64_t v62 = (void *)v159;
            goto LABEL_29;
          }
          outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v129, type metadata accessor for AspireHeSerializedGaloisKey);
        }
        uint64_t v157 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
        memcpy(v129, v130, *(void *)(*(void *)(v157 - 8) + 64));
        goto LABEL_79;
      }
      outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v65, type metadata accessor for AMDPbEvaluationKeyMetadata);
    }
    uint64_t v85 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
    memcpy(v65, v66, *(void *)(*(void *)(v85 - 8) + 64));
    goto LABEL_42;
  }
  if (v53)
  {
LABEL_28:
    size_t v61 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKey?)
                                - 8)
                    + 64);
    uint64_t v62 = (void *)v47;
LABEL_29:
    uint64_t v63 = v48;
LABEL_30:
    memcpy(v62, v63, v61);
    return v5;
  }
  uint64_t v218 = v50;
  uint64_t v54 = *(void (**)(uint64_t, char *, uint64_t))(v221 + 32);
  v54(v47, v48, v223);
  uint64_t v55 = *(int *)(v49 + 20);
  int v56 = (void *)(v47 + v55);
  uint64_t v57 = &v48[v55];
  uint64_t v58 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
  uint64_t v59 = *(void *)(v58 - 8);
  __src = v54;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v59 + 48))(v57, 1, v58))
  {
    uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
    memcpy(v56, v57, *(void *)(*(void *)(v60 - 8) + 64));
  }
  else
  {
    *int v56 = *(void *)v57;
    *(_OWORD *)(v56 + 1) = *(_OWORD *)(v57 + 8);
    v54((uint64_t)v56 + *(int *)(v58 + 24), &v57[*(int *)(v58 + 24)], v223);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v59 + 56))(v56, 0, 1, v58);
  }
  uint64_t v72 = *(int *)(v49 + 24);
  int v73 = (char *)(v47 + v72);
  uint64_t v74 = &v48[v72];
  uint64_t v75 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  uint64_t v76 = *(void *)(v75 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v76 + 48))(v74, 1, v75))
  {
    uint64_t v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
    memcpy(v73, v74, *(void *)(*(void *)(v77 - 8) + 64));
  }
  else
  {
    int v216 = v5;
    v54((uint64_t)v73, v74, v223);
    uint64_t v78 = *(int *)(v75 + 20);
    uint64_t v209 = v73;
    uint64_t v79 = &v73[v78];
    uint64_t v80 = &v74[v78];
    uint64_t v81 = type metadata accessor for AspireHeSerializedGaloisKey(0);
    uint64_t v82 = *(void *)(v81 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v82 + 48))(v80, 1, v81))
    {
      uint64_t v83 = (void (*)(char *, char *, uint64_t))__src;
      uint64_t v84 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
      memcpy(v79, v80, *(void *)(*(void *)(v84 - 8) + 64));
    }
    else
    {
      *(void *)uint64_t v79 = *(void *)v80;
      uint64_t v83 = (void (*)(char *, char *, uint64_t))__src;
      __src((uint64_t)&v79[*(int *)(v81 + 20)], &v80[*(int *)(v81 + 20)], v223);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v82 + 56))(v79, 0, 1, v81);
    }
    uint64_t v103 = *(int *)(v75 + 24);
    uint64_t v104 = v209;
    size_t v105 = &v209[v103];
    uint64_t v106 = &v74[v103];
    uint64_t v107 = type metadata accessor for AspireHeSerializedRelinKey(0);
    uint64_t v108 = *(void *)(v107 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v108 + 48))(v106, 1, v107))
    {
      uint64_t v109 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
      memcpy(v105, v106, *(void *)(*(void *)(v109 - 8) + 64));
      uint64_t v5 = v216;
    }
    else
    {
      uint64_t v205 = v108;
      v83(v105, v106, v223);
      uint64_t v110 = *(int *)(v107 + 20);
      uint64_t v204 = v105;
      uint64_t v111 = &v105[v110];
      uint64_t v112 = &v106[v110];
      uint64_t v113 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
      uint64_t v114 = *(void *)(v113 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v114 + 48))(v112, 1, v113))
      {
        uint64_t v115 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
        memcpy(v111, v112, *(void *)(*(void *)(v115 - 8) + 64));
        uint64_t v116 = v205;
        uint64_t v117 = v204;
      }
      else
      {
        uint64_t v201 = v114;
        v83(v111, v112, v223);
        uint64_t v202 = v113;
        uint64_t v203 = v111;
        uint64_t v143 = *(int *)(v113 + 20);
        uint64_t v144 = &v111[v143];
        uint64_t v145 = &v112[v143];
        uint64_t v146 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
        uint64_t v147 = *(void *)(v146 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v147 + 48))(v145, 1, v146))
        {
          uint64_t v148 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
          memcpy(v144, v145, *(void *)(*(void *)(v148 - 8) + 64));
        }
        else
        {
          *(void *)uint64_t v144 = *(void *)v145;
          v83(&v144[*(int *)(v146 + 20)], &v145[*(int *)(v146 + 20)], v223);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v147 + 56))(v144, 0, 1, v146);
        }
        uint64_t v116 = v205;
        uint64_t v117 = v204;
        (*(void (**)(char *, void, uint64_t, uint64_t))(v201 + 56))(v203, 0, 1, v202);
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v116 + 56))(v117, 0, 1, v107);
      uint64_t v5 = v216;
      uint64_t v104 = v209;
    }
    (*(void (**)(char *, void, uint64_t, uint64_t))(v76 + 56))(v104, 0, 1, v75);
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v218 + 56))(v47, 0, 1, v49);
  return v5;
}

uint64_t getEnumTagSinglePayload for AMDPbPECQuery(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_249CA75E0);
}

uint64_t sub_249CA75E0(char *a1, uint64_t a2, int *a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  uint64_t v8 = type metadata accessor for UnknownStorage();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a2)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a3[6];
LABEL_9:
    uint64_t v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
    return v13(&a1[v11], a2, v9);
  }
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a2)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a3[7];
    goto LABEL_9;
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKey?);
  uint64_t v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
  uint64_t v16 = v14;
  uint64_t v17 = &a1[a3[8]];
  return v15(v17, a2, v16);
}

uint64_t storeEnumTagSinglePayload for AMDPbPECQuery(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_249CA7774);
}

char *sub_249CA7774(char *result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)uint64_t result = (a2 - 1);
    return result;
  }
  uint64_t v8 = type metadata accessor for UnknownStorage();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[6];
LABEL_7:
    uint64_t v13 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return (char *)v13(&v5[v11], a2, a2, v9);
  }
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a3)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a4[7];
    goto LABEL_7;
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKey?);
  uint64_t v15 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
  uint64_t v16 = v14;
  uint64_t v17 = &v5[a4[8]];
  return (char *)v15(v17, a2, a2, v16);
}

void type metadata completion function for AMDPbPECQuery(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void type metadata completion function for AMDPbPIRQuery(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5, void (*a6)(uint64_t))
{
  type metadata accessor for UnknownStorage();
  if (v8 <= 0x3F)
  {
    type metadata accessor for AMDPbHEConfig.OneOf_Config?(319, a5, a6);
    if (v9 <= 0x3F)
    {
      type metadata accessor for AMDPbHEConfig.OneOf_Config?(319, &lazy cache variable for type metadata for AMDPbEvaluationKey?, (void (*)(uint64_t))type metadata accessor for AMDPbEvaluationKey);
      if (v10 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for AMDPbPECShardReply(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    unint64_t v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    unint64_t v7 = a1;
    a1[1] = a2[1];
    uint64_t v8 = *(int *)(a3 + 24);
    unint64_t v9 = (char *)a1 + v8;
    unint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v13 = v10;
    uint64_t v14 = v12;
    v12(v9, v13, v11);
    uint64_t v15 = *(int *)(a3 + 28);
    uint64_t v16 = (uint64_t *)((char *)v7 + v15);
    uint64_t v17 = (uint64_t *)((char *)a2 + v15);
    uint64_t v18 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
    uint64_t v19 = *(void *)(v18 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
    {
      uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
      memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
    }
    else
    {
      *uint64_t v16 = *v17;
      v16[1] = v17[1];
      uint64_t v21 = *(int *)(v18 + 28);
      uint64_t v22 = (char *)v16 + v21;
      uint64_t v23 = (char *)v17 + v21;
      swift_bridgeObjectRetain();
      v14(v22, v23, v11);
      uint64_t v24 = *(int *)(v18 + 32);
      uint64_t v25 = (char *)v16 + v24;
      uint64_t v26 = (char *)v17 + v24;
      uint64_t v27 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
      uint64_t v28 = *(void *)(v27 - 8);
      __src = v26;
      uint64_t v29 = v26;
      uint64_t v30 = v27;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v29, 1, v27))
      {
        uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
        memcpy(v25, __src, *(void *)(*(void *)(v31 - 8) + 64));
      }
      else
      {
        uint64_t v36 = v14;
        uint64_t v37 = v28;
        uint64_t v32 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
        uint64_t v33 = *(void *)(v32 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(__src, 1, v32))
        {
          uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
          memcpy(v25, __src, *(void *)(*(void *)(v34 - 8) + 64));
        }
        else
        {
          swift_getEnumCaseMultiPayload();
          v36(v25, __src, v11);
          swift_storeEnumTagMultiPayload();
          (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(v25, 0, 1, v32);
        }
        v36(&v25[*(int *)(v30 + 20)], &__src[*(int *)(v30 + 20)], v11);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(v25, 0, 1, v30);
      }
      (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
    }
  }
  return v7;
}

uint64_t destroy for AMDPbPECShardReply(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v13 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v13(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 28);
  uint64_t v7 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7);
  if (!result)
  {
    swift_bridgeObjectRelease();
    v13(v6 + *(int *)(v7 + 28), v5);
    uint64_t v9 = v6 + *(int *)(v7 + 32);
    uint64_t v10 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v9, 1, v10);
    if (!result)
    {
      uint64_t v11 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v9, 1, v11)
        && swift_getEnumCaseMultiPayload() <= 2)
      {
        v13(v9, v5);
      }
      uint64_t v12 = v9 + *(int *)(v10 + 20);
      return ((uint64_t (*)(uint64_t, uint64_t))v13)(v12, v5);
    }
  }
  return result;
}

void *initializeWithCopy for AMDPbPECShardReply(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v12 = v9;
  uint64_t v13 = v11;
  v11(v8, v12, v10);
  uint64_t v14 = *(int *)(a3 + 28);
  uint64_t v15 = (void *)((char *)a1 + v14);
  uint64_t v16 = (void *)((char *)a2 + v14);
  uint64_t v17 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
  uint64_t v18 = *(void *)(v17 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
  {
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
    memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    *uint64_t v15 = *v16;
    v15[1] = v16[1];
    uint64_t v20 = *(int *)(v17 + 28);
    uint64_t v21 = (char *)v15 + v20;
    uint64_t v22 = (char *)v16 + v20;
    swift_bridgeObjectRetain();
    v13(v21, v22, v10);
    uint64_t v23 = *(int *)(v17 + 32);
    uint64_t v36 = (char *)v15 + v23;
    uint64_t v24 = (char *)v16 + v23;
    uint64_t v25 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
    uint64_t v26 = *(void *)(v25 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
    {
      uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
      memcpy(v36, v24, *(void *)(*(void *)(v27 - 8) + 64));
    }
    else
    {
      uint64_t v33 = v25;
      uint64_t v34 = v26;
      uint64_t v35 = v13;
      uint64_t v28 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
      uint64_t v29 = *(void *)(v28 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v24, 1, v28))
      {
        uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
        memcpy(v36, v24, *(void *)(*(void *)(v30 - 8) + 64));
        uint64_t v31 = v35;
      }
      else
      {
        swift_getEnumCaseMultiPayload();
        uint64_t v31 = v35;
        v35(v36, v24, v10);
        swift_storeEnumTagMultiPayload();
        (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v36, 0, 1, v28);
      }
      v31(&v36[*(int *)(v33 + 20)], &v24[*(int *)(v33 + 20)], v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56))(v36, 0, 1, v33);
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  }
  return a1;
}

void *assignWithCopy for AMDPbPECShardReply(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v57 = type metadata accessor for UnknownStorage();
  uint64_t v58 = *(void *)(v57 - 8);
  uint64_t v9 = *(void (**)(char *, char *))(v58 + 24);
  v9(v7, v8);
  uint64_t v10 = *(int *)(a3 + 28);
  uint64_t v59 = a1;
  uint64_t v11 = (uint64_t)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
  LODWORD(v8) = v15(v11, 1, v13);
  int v16 = v15((uint64_t)v12, 1, v13);
  if (v8)
  {
    if (!v16)
    {
      *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
      *(_DWORD *)(v11 + 4) = *((_DWORD *)v12 + 1);
      *(void *)(v11 + 8) = *((void *)v12 + 1);
      uint64_t v17 = *(int *)(v13 + 28);
      uint64_t v18 = v11 + v17;
      uint64_t v19 = &v12[v17];
      uint64_t v20 = *(void (**)(uint64_t, char *, uint64_t))(v58 + 16);
      swift_bridgeObjectRetain();
      v20(v18, v19, v57);
      uint64_t v21 = *(int *)(v13 + 32);
      uint64_t v22 = (char *)(v11 + v21);
      uint64_t v23 = &v12[v21];
      uint64_t v24 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
      uint64_t v25 = *(void *)(v24 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
      {
        uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
        memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
      }
      else
      {
        __srca = (void (*)(char *, char *, uint64_t))v20;
        uint64_t v41 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
        uint64_t v42 = *(void *)(v41 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v23, 1, v41))
        {
          uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
          memcpy(v22, v23, *(void *)(*(void *)(v43 - 8) + 64));
        }
        else
        {
          swift_getEnumCaseMultiPayload();
          __srca(v22, v23, v57);
          swift_storeEnumTagMultiPayload();
          (*(void (**)(char *, void, uint64_t, uint64_t))(v42 + 56))(v22, 0, 1, v41);
        }
        __srca(&v22[*(int *)(v24 + 20)], &v23[*(int *)(v24 + 20)], v57);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
      }
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      return v59;
    }
LABEL_7:
    uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
    memcpy((void *)v11, v12, *(void *)(*(void *)(v27 - 8) + 64));
    return v59;
  }
  if (v16)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config(v11, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
    goto LABEL_7;
  }
  uint64_t v28 = (void (*)(char *, char *, uint64_t))v9;
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  *(_DWORD *)(v11 + 4) = *((_DWORD *)v12 + 1);
  *(void *)(v11 + 8) = *((void *)v12 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  ((void (*)(uint64_t, char *, uint64_t))v9)(v11 + *(int *)(v13 + 28), &v12[*(int *)(v13 + 28)], v57);
  uint64_t v29 = *(int *)(v13 + 32);
  uint64_t v30 = (char *)(v11 + v29);
  uint64_t v31 = &v12[v29];
  uint64_t v32 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  uint64_t v33 = *(void *)(v32 - 8);
  uint64_t v34 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v33 + 48);
  int v35 = v34(v30, 1, v32);
  __src = v31;
  int v36 = v34(v31, 1, v32);
  uint64_t v37 = v59;
  if (!v35)
  {
    if (v36)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v30, type metadata accessor for AspireSimilarityPlaintextPacking);
      goto LABEL_16;
    }
    uint64_t v46 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
    uint64_t v54 = *(void *)(v46 - 8);
    uint64_t v47 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v54 + 48);
    int v48 = v47(v30, 1, v46);
    int v49 = v47(__src, 1, v46);
    if (v48)
    {
      if (!v49)
      {
        uint64_t v50 = __src;
        swift_getEnumCaseMultiPayload();
        uint64_t v51 = v57;
        (*(void (**)(char *, char *, uint64_t))(v58 + 16))(v30, __src, v57);
        swift_storeEnumTagMultiPayload();
        (*(void (**)(char *, void, uint64_t, uint64_t))(v54 + 56))(v30, 0, 1, v46);
LABEL_30:
        v28(&v30[*(int *)(v32 + 20)], &v50[*(int *)(v32 + 20)], v51);
        return v37;
      }
    }
    else
    {
      if (!v49)
      {
        uint64_t v50 = __src;
        uint64_t v51 = v57;
        if (v59 != a2)
        {
          outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v30, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
          swift_getEnumCaseMultiPayload();
          uint64_t v50 = __src;
          (*(void (**)(char *, char *, uint64_t))(v58 + 16))(v30, __src, v57);
          swift_storeEnumTagMultiPayload();
        }
        goto LABEL_30;
      }
      outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v30, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
    }
    uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
    uint64_t v50 = __src;
    memcpy(v30, __src, *(void *)(*(void *)(v53 - 8) + 64));
    uint64_t v51 = v57;
    goto LABEL_30;
  }
  if (v36)
  {
LABEL_16:
    uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    memcpy(v30, __src, *(void *)(*(void *)(v44 - 8) + 64));
    return v37;
  }
  uint64_t v38 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
  uint64_t v39 = *(void *)(v38 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(__src, 1, v38))
  {
    uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
    memcpy(v30, __src, *(void *)(*(void *)(v40 - 8) + 64));
    (*(void (**)(char *, char *, uint64_t))(v58 + 16))(&v30[*(int *)(v32 + 20)], &__src[*(int *)(v32 + 20)], v57);
  }
  else
  {
    swift_getEnumCaseMultiPayload();
    int v52 = *(void (**)(char *, char *, uint64_t))(v58 + 16);
    v52(v30, __src, v57);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56))(v30, 0, 1, v38);
    v52(&v30[*(int *)(v32 + 20)], &__src[*(int *)(v32 + 20)], v57);
  }
  (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
  return v37;
}

_OWORD *initializeWithTake for AMDPbPECShardReply(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 28);
  uint64_t v12 = (void *)((char *)a1 + v11);
  uint64_t v13 = (void *)((char *)a2 + v11);
  uint64_t v14 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    *uint64_t v12 = *v13;
    v12[1] = v13[1];
    v10((char *)v12 + *(int *)(v14 + 28), (char *)v13 + *(int *)(v14 + 28), v9);
    uint64_t v17 = *(int *)(v14 + 32);
    uint64_t v28 = (char *)v12 + v17;
    uint64_t v18 = (char *)v13 + v17;
    uint64_t v19 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
    uint64_t v20 = *(void *)(v19 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
    {
      uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
      memcpy(v28, v18, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      uint64_t v26 = v19;
      uint64_t v27 = v20;
      uint64_t v22 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
      uint64_t v23 = *(void *)(v22 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v18, 1, v22))
      {
        uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
        memcpy(v28, v18, *(void *)(*(void *)(v24 - 8) + 64));
      }
      else
      {
        swift_getEnumCaseMultiPayload();
        v10(v28, v18, v9);
        swift_storeEnumTagMultiPayload();
        (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v28, 0, 1, v22);
      }
      v10(&v28[*(int *)(v26 + 20)], &v18[*(int *)(v26 + 20)], v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v28, 0, 1, v26);
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

void *assignWithTake for AMDPbPECShardReply(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v54 = type metadata accessor for UnknownStorage();
  uint64_t v55 = *(void *)(v54 - 8);
  uint64_t v9 = *(void (**)(char *, char *))(v55 + 40);
  v9(v7, v8);
  uint64_t v10 = *(int *)(a3 + 28);
  int v56 = a1;
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  LODWORD(v8) = v15(v11, 1, v13);
  int v16 = v15(v12, 1, v13);
  if (v8)
  {
    if (!v16)
    {
      *(void *)uint64_t v11 = *(void *)v12;
      *((void *)v11 + 1) = *((void *)v12 + 1);
      uint64_t v17 = *(void (**)(char *, char *, uint64_t))(v55 + 32);
      v17(&v11[*(int *)(v13 + 28)], &v12[*(int *)(v13 + 28)], v54);
      uint64_t v18 = *(int *)(v13 + 32);
      uint64_t v19 = &v11[v18];
      uint64_t v20 = &v12[v18];
      uint64_t v21 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
      uint64_t v22 = *(void *)(v21 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
      {
        uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
        memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
      }
      else
      {
        __srca = v17;
        uint64_t v38 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
        uint64_t v39 = *(void *)(v38 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v20, 1, v38))
        {
          uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
          memcpy(v19, v20, *(void *)(*(void *)(v40 - 8) + 64));
        }
        else
        {
          swift_getEnumCaseMultiPayload();
          __srca(v19, v20, v54);
          swift_storeEnumTagMultiPayload();
          (*(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56))(v19, 0, 1, v38);
        }
        __srca(&v19[*(int *)(v21 + 20)], &v20[*(int *)(v21 + 20)], v54);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      return a1;
    }
LABEL_7:
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
    memcpy(v11, v12, *(void *)(*(void *)(v24 - 8) + 64));
    return a1;
  }
  if (v16)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v11, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
    goto LABEL_7;
  }
  uint64_t v25 = (void (*)(char *, char *, uint64_t))v9;
  *(void *)uint64_t v11 = *(void *)v12;
  *((void *)v11 + 1) = *((void *)v12 + 1);
  swift_bridgeObjectRelease();
  ((void (*)(char *, char *, uint64_t))v9)(&v11[*(int *)(v13 + 28)], &v12[*(int *)(v13 + 28)], v54);
  uint64_t v26 = *(int *)(v13 + 32);
  uint64_t v27 = &v11[v26];
  uint64_t v28 = &v12[v26];
  uint64_t v29 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  uint64_t v30 = *(void *)(v29 - 8);
  uint64_t v31 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v30 + 48);
  int v32 = v31(v27, 1, v29);
  __src = v28;
  int v33 = v31(v28, 1, v29);
  uint64_t v34 = v56;
  if (!v32)
  {
    if (v33)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v27, type metadata accessor for AspireSimilarityPlaintextPacking);
      goto LABEL_16;
    }
    uint64_t v43 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
    uint64_t v51 = *(void *)(v43 - 8);
    uint64_t v44 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v51 + 48);
    int v45 = v44(v27, 1, v43);
    int v46 = v44(__src, 1, v43);
    if (v45)
    {
      if (!v46)
      {
        uint64_t v47 = __src;
        swift_getEnumCaseMultiPayload();
        (*(void (**)(char *, char *, uint64_t))(v55 + 32))(v27, __src, v54);
        swift_storeEnumTagMultiPayload();
        (*(void (**)(char *, void, uint64_t, uint64_t))(v51 + 56))(v27, 0, 1, v43);
        uint64_t v48 = v54;
LABEL_30:
        v25(&v27[*(int *)(v29 + 20)], &v47[*(int *)(v29 + 20)], v48);
        return v34;
      }
    }
    else
    {
      if (!v46)
      {
        uint64_t v47 = __src;
        uint64_t v48 = v54;
        if (v56 != a2)
        {
          outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v27, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
          swift_getEnumCaseMultiPayload();
          uint64_t v47 = __src;
          (*(void (**)(char *, char *, uint64_t))(v55 + 32))(v27, __src, v54);
          swift_storeEnumTagMultiPayload();
        }
        goto LABEL_30;
      }
      outlined destroy of AMDPbHEConfig.OneOf_Config((uint64_t)v27, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
    }
    uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
    uint64_t v47 = __src;
    memcpy(v27, __src, *(void *)(*(void *)(v50 - 8) + 64));
    uint64_t v48 = v54;
    goto LABEL_30;
  }
  if (v33)
  {
LABEL_16:
    uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    memcpy(v27, __src, *(void *)(*(void *)(v41 - 8) + 64));
    return v34;
  }
  uint64_t v35 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
  uint64_t v36 = *(void *)(v35 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(__src, 1, v35))
  {
    uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
    memcpy(v27, __src, *(void *)(*(void *)(v37 - 8) + 64));
    (*(void (**)(char *, char *, uint64_t))(v55 + 32))(&v27[*(int *)(v29 + 20)], &__src[*(int *)(v29 + 20)], v54);
  }
  else
  {
    swift_getEnumCaseMultiPayload();
    int v49 = *(void (**)(char *, char *, uint64_t))(v55 + 32);
    v49(v27, __src, v54);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(v27, 0, 1, v35);
    v49(&v27[*(int *)(v29 + 20)], &__src[*(int *)(v29 + 20)], v54);
  }
  (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
  return v34;
}

uint64_t getEnumTagSinglePayload for AMDPbPECShardReply(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_249CA9950);
}

uint64_t sub_249CA9950(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = (char *)a1 + *(int *)(a3 + 24);
      uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      int v16 = (char *)a1 + *(int *)(a3 + 28);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t storeEnumTagSinglePayload for AMDPbPECShardReply(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_249CA9A94);
}

void *sub_249CA9A94(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = (char *)v5 + *(int *)(a4 + 24);
      uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return (void *)v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      int v16 = (char *)v5 + *(int *)(a4 + 28);
      return (void *)v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void type metadata completion function for AMDPbPECShardReply(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void type metadata completion function for AMDPbHEKeyStatus(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t *a6, void (*a7)(uint64_t))
{
  type metadata accessor for UnknownStorage();
  if (v9 <= 0x3F)
  {
    type metadata accessor for AMDPbHEConfig.OneOf_Config?(319, a6, a7);
    if (v10 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for AMDPbHEQueries(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a1;
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for UnknownStorage();
    unint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t destroy for AMDPbHEQueries(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

void *initializeWithCopy for AMDPbHEQueries(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  return a1;
}

void *assignWithCopy for AMDPbHEQueries(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

void *initializeWithTake for AMDPbHEQueries(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void *assignWithTake for AMDPbHEQueries(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for AMDPbPECReply(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_249CAA07C);
}

uint64_t __swift_get_extra_inhabitant_index_56Tm(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for AMDPbPECReply(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_249CAA144);
}

void *__swift_store_extra_inhabitant_index_57Tm(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for AMDPbHEQueries()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t outlined copy of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return outlined copy of Data._Representation(a1, a2);
  }
  return a1;
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t outlined destroy of AMDPbHEConfig.OneOf_Config?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with copy of AMDPbHEConfig.OneOf_Config?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS4name_Says5UInt8VG16existingConfigIdtG_SSs5NeverOTg5062_s8CipherML20AspireNetworkManagerV12fetchConfigs8useCases6userh9AA0C17Apig25ResponseVSaySS4name_Says5E112VG08existingmK0tG_10Foundation4UUIDVtYaKFS2SAI_AlMt_tcfu_32a168a102879cc1a6a91172b0770f0c91SSAI_AlMtSSTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    uint64_t v11 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v2 = v11;
    uint64_t v4 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v6 = *(v4 - 1);
      uint64_t v5 = *v4;
      unint64_t v8 = *(void *)(v11 + 16);
      unint64_t v7 = *(void *)(v11 + 24);
      swift_bridgeObjectRetain();
      if (v8 >= v7 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
      }
      v4 += 3;
      *(void *)(v11 + 16) = v8 + 1;
      uint64_t v9 = v11 + 16 * v8;
      *(void *)(v9 + 32) = v6;
      *(void *)(v9 + 40) = v5;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS4name_Says5UInt8VG16existingConfigIdtG_AIs5NeverOTg5062_s8CipherML20AspireNetworkManagerV12fetchConfigs8useCases6userh9AA0C17Apig25ResponseVSaySS4name_Says5E115VG08existingmK0tG_10Foundation4UUIDVtYaKFALSSAI_AlMt_tcfu0_33_6015d9f3b4717280ac1d98b6926fd564SSAI_AlMtALTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    uint64_t v9 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v2 = v9;
    uint64_t v4 = (uint64_t *)(a1 + 48);
    do
    {
      uint64_t v5 = *v4;
      unint64_t v7 = *(void *)(v9 + 16);
      unint64_t v6 = *(void *)(v9 + 24);
      swift_bridgeObjectRetain();
      if (v7 >= v6 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1);
      }
      *(void *)(v9 + 16) = v7 + 1;
      *(void *)(v9 + 8 * v7 + 32) = v5;
      v4 += 3;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t AspireNetworkManager.endpointUrl.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);
  return v4(a1, v1, v3);
}

uint64_t AspireNetworkManager.authenticationToken.getter()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for AspireNetworkManager() + 20);
  uint64_t v2 = *(void *)v1;
  outlined copy of Data?(*(void *)v1, *(void *)(v1 + 8));
  return v2;
}

uint64_t type metadata accessor for AspireNetworkManager()
{
  uint64_t result = type metadata singleton initialization cache for AspireNetworkManager;
  if (!type metadata singleton initialization cache for AspireNetworkManager) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t AspireNetworkManager.networkDelegationConfig.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for AspireNetworkManager() + 24));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AspireNetworkManager.privacyProxyFailClosed.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for AspireNetworkManager() + 28));
}

uint64_t AspireNetworkManager.tokenFetcher.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for AspireNetworkManager();
  return outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + *(int *)(v3 + 32), a1, &demangling cache variable for type metadata for TokenFetcher?);
}

id AspireNetworkManager.urlSession.getter()
{
  uint64_t v1 = *(void **)(v0 + *(int *)(type metadata accessor for AspireNetworkManager() + 36));
  return v1;
}

uint64_t AspireNetworkManager.init(endpointUrl:issuerUrl:authenticationToken:networkDelegationConfig:privacyProxyFailClosed:secondaryIdentifier:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, unint64_t a10)
{
  int v51 = a7;
  unint64_t v57 = a4;
  uint64_t v58 = a3;
  uint64_t v54 = a2;
  uint64_t v56 = a9;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v50 = (uint64_t)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for URL();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v48 = (char *)&v47 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  int v49 = (char *)&v47 - v20;
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TokenFetcher?);
  MEMORY[0x270FA5388](v21 - 8);
  uint64_t v53 = (char *)&v47 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v23 = objc_msgSend(self, sel_ephemeralSessionConfiguration);
  uint64_t v55 = a1;
  if (a6)
  {
    swift_bridgeObjectRetain();
    uint64_t v24 = (void *)MEMORY[0x24C5B33F0](a5, a6);
    swift_bridgeObjectRelease();
    objc_msgSend(v23, sel_set_sourceApplicationBundleIdentifier_, v24);

    a1 = v55;
  }
  specialized static NetworkManagerHelper.configureSecondaryIdentifier(configuration:secondaryIdentifier:)(v23, a8, a10);
  swift_bridgeObjectRelease();
  objc_msgSend(v23, sel_set_usesNWLoader_, 1);
  id v52 = objc_msgSend(self, sel_sessionWithConfiguration_, v23);
  uint64_t v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16);
  uint64_t v26 = v56;
  v25(v56, a1, v16);
  uint64_t v27 = a1;
  uint64_t v28 = (int *)type metadata accessor for AspireNetworkManager();
  uint64_t v29 = (void *)(v26 + v28[5]);
  unint64_t v30 = v57;
  *uint64_t v29 = v58;
  v29[1] = v30;
  uint64_t v31 = (void *)(v26 + v28[6]);
  *uint64_t v31 = a5;
  v31[1] = a6;
  char v32 = v51 & 1;
  *(unsigned char *)(v26 + v28[7]) = v51 & 1;
  if (v30 >> 60 == 15)
  {
    uint64_t v33 = type metadata accessor for TokenFetcher(0);
    uint64_t v34 = (uint64_t)v53;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v53, 1, 1, v33);
    unint64_t v35 = v57;
    uint64_t v36 = v58;
    uint64_t v37 = v52;
  }
  else
  {
    uint64_t v38 = v50;
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v54, v50, &demangling cache variable for type metadata for URL?);
    uint64_t v39 = v48;
    v25((uint64_t)v48, v27, v16);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v38, 1, v16) == 1)
    {
      uint64_t v40 = v49;
      v25((uint64_t)v49, (uint64_t)v39, v16);
      uint64_t v36 = v58;
      uint64_t v41 = v38;
      unint64_t v35 = v57;
      outlined copy of Data._Representation(v58, v57);
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v41, &demangling cache variable for type metadata for URL?);
    }
    else
    {
      uint64_t v40 = v49;
      (*(void (**)(char *, uint64_t, uint64_t))(v17 + 32))(v49, v38, v16);
      unint64_t v35 = v57;
      uint64_t v36 = v58;
      outlined copy of Data._Representation(v58, v57);
    }
    (*(void (**)(char *, uint64_t))(v17 + 8))(v39, v16);
    uint64_t v34 = (uint64_t)v53;
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v53, v40, v16);
    uint64_t v42 = (int *)type metadata accessor for TokenFetcher(0);
    uint64_t v43 = (uint64_t *)(v34 + v42[5]);
    uint64_t *v43 = v36;
    v43[1] = v35;
    uint64_t v37 = v52;
    *(void *)(v34 + v42[6]) = v52;
    *(unsigned char *)(v34 + v42[7]) = v32;
    (*(void (**)(uint64_t, void, uint64_t, int *))(*((void *)v42 - 1) + 56))(v34, 0, 1, v42);
    id v44 = v37;
  }
  outlined copy of Data?(v36, v35);

  outlined destroy of AMDPbHEConfig.OneOf_Config?(v54, &demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v55, v16);
  outlined consume of Data?(v36, v35);
  uint64_t v45 = v56;
  uint64_t result = outlined init with take of TokenFetcher?(v34, v56 + v28[8]);
  *(void *)(v45 + v28[9]) = v37;
  return result;
}

uint64_t AspireNetworkManager.prepareRequest(path:userId:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[21] = a6;
  v7[22] = v6;
  v7[19] = a4;
  v7[20] = a5;
  v7[17] = a2;
  v7[18] = a3;
  v7[16] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TokenFetcher?);
  v7[23] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for TokenFetcher(0);
  v7[24] = v8;
  v7[25] = *(void *)(v8 - 8);
  v7[26] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for URL.DirectoryHint();
  v7[27] = v9;
  v7[28] = *(void *)(v9 - 8);
  v7[29] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for URL();
  v7[30] = v10;
  v7[31] = *(void *)(v10 - 8);
  v7[32] = swift_task_alloc();
  return MEMORY[0x270FA2498](AspireNetworkManager.prepareRequest(path:userId:body:), 0, 0);
}

uint64_t AspireNetworkManager.prepareRequest(path:userId:body:)()
{
  v0[2] = v0[17];
  uint64_t v1 = v0[28];
  uint64_t v2 = v0[29];
  uint64_t v3 = v0[27];
  uint64_t v4 = v0[25];
  uint64_t v5 = v0[22];
  uint64_t v23 = v0[23];
  uint64_t v24 = v0[24];
  v0[3] = v0[18];
  (*(void (**)(uint64_t, void, uint64_t))(v1 + 104))(v2, *MEMORY[0x263F06E50], v3);
  v0[33] = lazy protocol witness table accessor for type String and conformance String();
  URL.appending<A>(path:directoryHint:)();
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v3);
  id v6 = objc_allocWithZone(MEMORY[0x263F089E0]);
  URL._bridgeToObjectiveC()(v7);
  uint64_t v9 = v8;
  id v10 = objc_msgSend(v6, sel_initWithURL_, v8);
  v0[34] = v10;

  uint64_t v11 = type metadata accessor for AspireNetworkManager();
  objc_msgSend(v10, sel__setPrivacyProxyFailClosed_, *(unsigned __int8 *)(v5 + *(int *)(v11 + 28)));
  static URLRequest._unconditionallyBridgeFromObjectiveC(_:)();
  v12.value._countAndFlagsBits = UUID.uuidString.getter();
  v13._countAndFlagsBits = 0x6564492D72657355;
  v13._object = (void *)0xEF7265696669746ELL;
  URLRequest.setValue(_:forHTTPHeaderField:)(v12, v13);
  swift_bridgeObjectRelease();
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v5 + *(int *)(v11 + 32), v23, &demangling cache variable for type metadata for TokenFetcher?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v23, 1, v24) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v0[23], &demangling cache variable for type metadata for TokenFetcher?);
    uint64_t v14 = (void *)v0[34];
    uint64_t v16 = v0[31];
    uint64_t v15 = v0[32];
    uint64_t v17 = v0[30];
    uint64_t v19 = v0[20];
    unint64_t v18 = v0[21];
    URLRequest.httpMethod.setter();
    outlined copy of Data._Representation(v19, v18);
    URLRequest.httpBody.setter();

    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v20 = (uint64_t (*)(void))v0[1];
    return v20();
  }
  else
  {
    outlined init with take of TokenFetcher(v0[23], v0[26]);
    uint64_t v22 = (void *)swift_task_alloc();
    v0[35] = v22;
    *uint64_t v22 = v0;
    v22[1] = AspireNetworkManager.prepareRequest(path:userId:body:);
    return TokenFetcher.getToken()();
  }
}

{
  Swift::String *v0;
  uint64_t countAndFlagsBits;
  unint64_t object;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  Swift::String v9;
  Swift::String_optional v10;
  Swift::String v11;
  void *v12;
  uint64_t v13;
  void (**v14)(uint64_t, uint64_t);
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(void);
  uint64_t v20;
  uint64_t v21;

  object = (unint64_t)v0[18]._object;
  countAndFlagsBits = v0[19]._countAndFlagsBits;
  uint64_t v20 = v0[13]._countAndFlagsBits;
  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease();
  v0[2] = Data.base64EncodedString(options:)(0);
  v0[3]._countAndFlagsBits = 43;
  v0[3]._object = (void *)0xE100000000000000;
  v0[4]._countAndFlagsBits = 45;
  v0[4]._object = (void *)0xE100000000000000;
  uint64_t v3 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  uint64_t v5 = v4;
  swift_bridgeObjectRelease();
  v0[5]._countAndFlagsBits = v3;
  v0[5]._object = v5;
  v0[6]._countAndFlagsBits = 47;
  v0[6]._object = (void *)0xE100000000000000;
  v0[7]._countAndFlagsBits = 95;
  v0[7]._object = (void *)0xE100000000000000;
  id v6 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  uint64_t v8 = v7;
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = v6;
  v9._object = v8;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10.value._countAndFlagsBits = 0xD000000000000013;
  v10.value._object = (void *)0x8000000249E943E0;
  v11._countAndFlagsBits = 0x7A69726F68747541;
  v11._object = (void *)0xED00006E6F697461;
  URLRequest.setValue(_:forHTTPHeaderField:)(v10, v11);
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(countAndFlagsBits, object);
  outlined destroy of AspireApiConfigRequest(v20, type metadata accessor for TokenFetcher);
  Swift::String_optional v12 = (void *)v0[17]._countAndFlagsBits;
  uint64_t v14 = (void (**)(uint64_t, uint64_t))v0[15]._object;
  Swift::String v13 = v0[16]._countAndFlagsBits;
  uint64_t v15 = v0[15]._countAndFlagsBits;
  uint64_t v17 = v0[10]._countAndFlagsBits;
  uint64_t v16 = (unint64_t)v0[10]._object;
  URLRequest.httpMethod.setter();
  outlined copy of Data._Representation(v17, v16);
  URLRequest.httpBody.setter();

  v14[1](v13, v15);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v18 = (uint64_t (*)(void))v0->_object;
  return v18();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  uint64_t v2 = *(void *)(v0 + 248);
  uint64_t v1 = *(void *)(v0 + 256);
  uint64_t v3 = *(void *)(v0 + 240);
  uint64_t v4 = *(void *)(v0 + 208);
  uint64_t v5 = *(void *)(v0 + 128);

  outlined destroy of AspireApiConfigRequest(v4, type metadata accessor for TokenFetcher);
  id v6 = type metadata accessor for URLRequest();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t AspireNetworkManager.prepareRequest(path:userId:body:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  *(void *)(*v3 + 288) = v2;
  swift_task_dealloc();
  if (v2)
  {
    unint64_t v7 = AspireNetworkManager.prepareRequest(path:userId:body:);
  }
  else
  {
    *(void *)(v6 + 296) = a2;
    *(void *)(v6 + 304) = a1;
    unint64_t v7 = AspireNetworkManager.prepareRequest(path:userId:body:);
  }
  return MEMORY[0x270FA2498](v7, 0, 0);
}

uint64_t AspireNetworkManager.fetchConfigs(useCases:userId:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[32] = a3;
  v4[33] = v3;
  v4[30] = a1;
  v4[31] = a2;
  type metadata accessor for BinaryDecodingOptions();
  v4[34] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for UUID();
  v4[35] = v5;
  v4[36] = *(void *)(v5 - 8);
  v4[37] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for URLRequest();
  v4[38] = v6;
  v4[39] = *(void *)(v6 - 8);
  v4[40] = swift_task_alloc();
  v4[41] = type metadata accessor for AspireApiConfigRequest(0);
  v4[42] = swift_task_alloc();
  return MEMORY[0x270FA2498](AspireNetworkManager.fetchConfigs(useCases:userId:), 0, 0);
}

{
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t (*v6)();
  uint64_t v8;

  uint64_t v5 = (void *)*v4;
  v5[51] = a1;
  v5[52] = a2;
  v5[53] = a3;
  v5[54] = v3;
  swift_task_dealloc();
  if (v3) {
    uint64_t v6 = AspireNetworkManager.fetchConfigs(useCases:userId:);
  }
  else {
    uint64_t v6 = AspireNetworkManager.fetchConfigs(useCases:userId:);
  }
  return MEMORY[0x270FA2498](v6, 0, 0);
}

uint64_t AspireNetworkManager.fetchConfigs(useCases:userId:)()
{
  uint64_t v33 = v0;
  uint64_t v32 = *MEMORY[0x263EF8340];
  uint64_t v1 = v0[31];
  uint64_t v2 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS4name_Says5UInt8VG16existingConfigIdtG_SSs5NeverOTg5062_s8CipherML20AspireNetworkManagerV12fetchConfigs8useCases6userh9AA0C17Apig25ResponseVSaySS4name_Says5E112VG08existingmK0tG_10Foundation4UUIDVtYaKFS2SAI_AlMt_tcfu_32a168a102879cc1a6a91172b0770f0c91SSAI_AlMtSSTf3nnnpk_nTf1cn_n(v1);
  v0[43] = v2;
  uint64_t v3 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS4name_Says5UInt8VG16existingConfigIdtG_AIs5NeverOTg5062_s8CipherML20AspireNetworkManagerV12fetchConfigs8useCases6userh9AA0C17Apig25ResponseVSaySS4name_Says5E115VG08existingmK0tG_10Foundation4UUIDVtYaKFALSSAI_AlMt_tcfu0_33_6015d9f3b4717280ac1d98b6926fd564SSAI_AlMtALTf3nnnpk_nTf1cn_n(v1);
  int64_t v4 = *(void *)(v3 + 16);
  if (v4)
  {
    uint64_t v29 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0);
    unint64_t v27 = lazy protocol witness table accessor for type [UInt8] and conformance <A> [A]();
    uint64_t v28 = v3;
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = *(void *)(v3 + 8 * v5 + 32);
      uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
      v0[5] = v7;
      v0[6] = v27;
      v0[2] = v6;
      uint64_t v8 = __swift_project_boxed_opaque_existential_1(v0 + 2, v7);
      uint64_t v9 = *v8;
      size_t v10 = *(void *)(*v8 + 16);
      if (v10)
      {
        if (v10 <= 0xE)
        {
          memset(__dst, 0, sizeof(__dst));
          unsigned __int8 v31 = v10;
          memcpy(__dst, (const void *)(v9 + 32), v10);
          uint64_t v13 = *(void *)__dst;
          unint64_t v14 = *(unsigned int *)&__dst[8] | ((unint64_t)__dst[12] << 32) | ((unint64_t)__dst[13] << 40) | ((unint64_t)v31 << 48);
          swift_bridgeObjectRetain_n();
        }
        else
        {
          type metadata accessor for __DataStorage();
          swift_allocObject();
          swift_bridgeObjectRetain_n();
          uint64_t v11 = __DataStorage.init(bytes:length:)();
          uint64_t v12 = v11;
          if (v10 >= 0x7FFFFFFF)
          {
            type metadata accessor for Data.RangeReference();
            uint64_t v13 = swift_allocObject();
            *(void *)(v13 + 16) = 0;
            *(void *)(v13 + 24) = v10;
            unint64_t v14 = v12 | 0x8000000000000000;
          }
          else
          {
            uint64_t v13 = v10 << 32;
            unint64_t v14 = v11 | 0x4000000000000000;
          }
        }
      }
      else
      {
        swift_bridgeObjectRetain_n();
        uint64_t v13 = 0;
        unint64_t v14 = 0xC000000000000000;
      }
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 2));
      uint64_t v15 = v29;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v29 + 16) + 1, 1);
        uint64_t v15 = v29;
      }
      unint64_t v17 = *(void *)(v15 + 16);
      unint64_t v16 = *(void *)(v15 + 24);
      if (v17 >= v16 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1);
        uint64_t v15 = v29;
      }
      ++v5;
      *(void *)(v15 + 16) = v17 + 1;
      uint64_t v18 = v15 + 16 * v17;
      *(void *)(v18 + 32) = v13;
      *(void *)(v18 + 40) = v14;
      uint64_t v3 = v28;
    }
    while (v4 != v5);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v15 = MEMORY[0x263F8EE78];
  }
  v0[44] = v15;
  uint64_t v19 = swift_task_alloc();
  *(void *)(v19 + 16) = v2;
  *(void *)(v19 + 24) = v15;
  lazy protocol witness table accessor for type AspireApiConfigRequest and conformance AspireApiConfigRequest(&lazy protocol witness table cache variable for type AspireApiConfigRequest and conformance AspireApiConfigRequest, (void (*)(uint64_t))type metadata accessor for AspireApiConfigRequest);
  static Message.with(_:)();
  swift_task_dealloc();
  uint64_t v20 = Message.serializedData(partial:)();
  uint64_t v22 = v21;
  v0[45] = v20;
  v0[46] = v21;
  outlined destroy of AspireApiConfigRequest(v0[42], type metadata accessor for AspireApiConfigRequest);
  uint64_t v23 = (void *)swift_task_alloc();
  v0[47] = v23;
  void *v23 = v0;
  v23[1] = AspireNetworkManager.fetchConfigs(useCases:userId:);
  uint64_t v24 = v0[40];
  uint64_t v25 = v0[32];
  return AspireNetworkManager.prepareRequest(path:userId:body:)(v24, 0x6769666E6F63, 0xE600000000000000, v25, v20, v22);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 384) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v2 = AspireNetworkManager.fetchConfigs(useCases:userId:);
  }
  else
  {
    uint64_t v2 = AspireNetworkManager.fetchConfigs(useCases:userId:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  unint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  Swift::String v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  NSObject *log;
  os_log_type_t type;
  uint64_t v37;
  uint64_t v38[2];
  void *v39;
  uint64_t v40;

  uint64_t v39 = v0;
  v38[1] = *MEMORY[0x263EF8340];
  uint64_t v1 = v0[44];
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    v38[0] = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    uint64_t v3 = v38[0];
    int64_t v4 = (unint64_t *)(v1 + 40);
    do
    {
      uint64_t v5 = *(v4 - 1);
      uint64_t v6 = *v4;
      outlined copy of Data._Representation(v5, *v4);
      uint64_t v7 = Data.base64EncodedString(options:)(0);
      outlined consume of Data._Representation(v5, v6);
      v38[0] = v3;
      uint64_t v9 = *(void *)(v3 + 16);
      uint64_t v8 = *(void *)(v3 + 24);
      if (v9 >= v8 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
        uint64_t v3 = v38[0];
      }
      v4 += 2;
      *(void *)(v3 + 16) = v9 + 1;
      *(Swift::String *)(v3 + 16 * v9 + 32) = v7;
      --v2;
    }
    while (v2);
  }
  swift_bridgeObjectRelease();
  if (one-time initialization token for networking != -1) {
    swift_once();
  }
  uint64_t v11 = v0[36];
  size_t v10 = v0[37];
  uint64_t v12 = v0[35];
  uint64_t v13 = v0[32];
  unint64_t v14 = type metadata accessor for Logger();
  v0[49] = __swift_project_value_buffer(v14, (uint64_t)static Logger.networking);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v10, v13, v12);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v15 = Logger.logObject.getter();
  unint64_t v16 = static os_log_type_t.default.getter();
  unint64_t v17 = os_log_type_enabled(v15, v16);
  uint64_t v19 = v0[36];
  uint64_t v18 = v0[37];
  uint64_t v20 = v0[35];
  if (v17)
  {
    type = v16;
    uint64_t v21 = swift_slowAlloc();
    uint64_t v37 = swift_slowAlloc();
    v38[0] = v37;
    *(_DWORD *)uint64_t v21 = 136446723;
    uint64_t v22 = swift_bridgeObjectRetain();
    log = v15;
    uint64_t v23 = MEMORY[0x24C5B3560](v22, MEMORY[0x263F8D310]);
    uint64_t v25 = v24;
    swift_bridgeObjectRelease();
    v0[27] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v25, v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v21 + 12) = 2081;
    uint64_t v26 = UUID.uuidString.getter();
    v0[28] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
    *(_WORD *)(v21 + 22) = 2082;
    uint64_t v28 = swift_bridgeObjectRetain();
    uint64_t v29 = MEMORY[0x24C5B3560](v28, MEMORY[0x263F8D310]);
    unsigned __int8 v31 = v30;
    swift_bridgeObjectRelease();
    v0[29] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v31, v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_249C3F000, log, type, "Request to fetchConfigs has started for useCases '%{public}s', userId: '%{private}s', existingConfigIds: '%{public}s'", (uint8_t *)v21, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x24C5B4790](v37, -1, -1);
    MEMORY[0x24C5B4790](v21, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
    swift_bridgeObjectRelease_n();
  }
  type metadata accessor for AspireNetworkManager();
  uint64_t v32 = (void *)swift_task_alloc();
  v0[50] = v32;
  *uint64_t v32 = v0;
  v32[1] = AspireNetworkManager.fetchConfigs(useCases:userId:);
  uint64_t v33 = v0[40];
  return MEMORY[0x270EF1EB0](v33, 0);
}

{
  uint64_t v0;
  void *v1;
  NSObject *v2;
  os_log_type_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v6;
  uint8_t *v7;
  uint8_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t (*v56)(void);
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t *v70;
  long long *v71;
  _OWORD v72[2];
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;

  uint64_t v75 = v0;
  uint64_t v74 = *MEMORY[0x263EF8340];
  self;
  uint64_t v1 = (void *)swift_dynamicCastObjCClass();
  if (v1 && objc_msgSend(v1, sel_statusCode) == (id)200)
  {
    outlined copy of Data._Representation(*(void *)(v0 + 408), *(void *)(v0 + 416));
    uint64_t v2 = Logger.logObject.getter();
    uint64_t v3 = static os_log_type_t.default.getter();
    int64_t v4 = os_log_type_enabled(v2, v3);
    uint64_t v5 = *(void *)(v0 + 416);
    if (v4)
    {
      uint64_t v6 = v5 >> 62;
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 134349056;
      uint64_t v8 = v7;
      uint64_t v9 = 0;
      switch(v6)
      {
        case 1uLL:
          uint64_t v41 = *(_DWORD *)(v0 + 408);
          uint64_t v42 = *(_DWORD *)(v0 + 412);
          uint64_t v43 = __OFSUB__(v42, v41);
          LODWORD(v9) = v42 - v41;
          if (v43) {
            goto LABEL_38;
          }
          uint64_t v9 = (int)v9;
LABEL_25:
          uint64_t v47 = *(void *)(v0 + 408);
          int v46 = *(void *)(v0 + 416);
          *(void *)(v0 + 208) = v9;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          outlined consume of Data._Representation(v47, v46);
          _os_log_impl(&dword_249C3F000, v2, v3, "Request to fetchConfigs has finished, response length: %{public}ld", v8, 0xCu);
          MEMORY[0x24C5B4790](v8, -1, -1);
          break;
        case 2uLL:
          id v44 = *(void *)(*(void *)(v0 + 408) + 16);
          uint64_t v45 = *(void *)(*(void *)(v0 + 408) + 24);
          uint64_t v43 = __OFSUB__(v45, v44);
          uint64_t v9 = v45 - v44;
          if (!v43) {
            goto LABEL_25;
          }
          goto LABEL_39;
        case 3uLL:
          goto LABEL_25;
        default:
          uint64_t v9 = *(unsigned __int8 *)(v0 + 422);
          goto LABEL_25;
      }
    }
    else
    {
      outlined consume of Data._Representation(*(void *)(v0 + 408), v5);
    }
    uint64_t v48 = *(void *)(v0 + 432);
    uint64_t v50 = *(void *)(v0 + 408);
    int v49 = *(void *)(v0 + 416);

    type metadata accessor for AspireApiConfigResponse(0);
    *(void *)(v0 + 152) = v50;
    *(void *)(v0 + 160) = v49;
    int v73 = 0;
    memset(v72, 0, sizeof(v72));
    outlined copy of Data._Representation(v50, v49);
    BinaryDecodingOptions.init()();
    lazy protocol witness table accessor for type AspireApiConfigRequest and conformance AspireApiConfigRequest(&lazy protocol witness table cache variable for type AspireApiConfigResponse and conformance AspireApiConfigResponse, (void (*)(uint64_t))type metadata accessor for AspireApiConfigResponse);
    Message.init<A>(serializedBytes:extensions:partial:options:)();
    int v51 = *(void *)(v0 + 416);
    id v52 = *(void **)(v0 + 424);
    uint64_t v53 = *(void *)(v0 + 408);
    uint64_t v55 = *(void *)(v0 + 360);
    uint64_t v54 = *(void *)(v0 + 368);
    if (v48)
    {
      (*(void (**)(void, void))(*(void *)(v0 + 312) + 8))(*(void *)(v0 + 320), *(void *)(v0 + 304));

      outlined consume of Data._Representation(v53, v51);
      outlined consume of Data._Representation(v55, v54);
LABEL_33:
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v56 = *(uint64_t (**)(void))(v0 + 8);
    }
    else
    {
      (*(void (**)(void, void))(*(void *)(v0 + 312) + 8))(*(void *)(v0 + 320), *(void *)(v0 + 304));

      outlined consume of Data._Representation(v53, v51);
      outlined consume of Data._Representation(v55, v54);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v56 = *(uint64_t (**)(void))(v0 + 8);
    }
    return v56();
  }
  else
  {
    int v71 = (long long *)(v0 + 96);
    size_t v10 = *(void *)(v0 + 416);
    type metadata accessor for CipherMLError();
    lazy protocol witness table accessor for type AspireApiConfigRequest and conformance AspireApiConfigRequest((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
    swift_allocError();
    uint64_t v12 = v11;
    switch(v10 >> 62)
    {
      case 1uLL:
        uint64_t v69 = (void *)(v0 + 56);
        uint64_t v19 = *(void *)(v0 + 408);
        if (v19 >> 32 < (int)v19)
        {
          __break(1u);
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
        }
        uint64_t v20 = *(void *)(v0 + 432);
        uint64_t v21 = *(void *)(v0 + 416);
        outlined copy of Data._Representation(*(void *)(v0 + 408), v21);
        swift_retain();
        uint64_t v22 = _s10Foundation13__DataStorageC15withUnsafeBytes2in5applyxSnySiG_xSWKXEtKlFSSSg_Tg5015_s10Foundation4b17V32withContiguousC50IfAvailableyxSgxSRys5UInt8VGKXEKlFAESWKXEfU_SS_TG5SRys0Q0VGxs5Error_pRi_zRi0_zlySSIsgyrzo_Tf1ncn_n((int)v19, v19 >> 32, v21 & 0x3FFFFFFFFFFFFFFFLL, (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))specialized closure #1 in String.init<A, B>(decoding:as:));
        uint64_t v24 = v23;
        uint64_t result = outlined consume of Data._Representation(v19, v21);
        if (!v20)
        {
          uint64_t v26 = v22;
          goto LABEL_13;
        }
        break;
      case 2uLL:
        uint64_t v69 = (void *)(v0 + 56);
        unint64_t v27 = *(void *)(v0 + 432);
        uint64_t v29 = *(void *)(v0 + 408);
        uint64_t v28 = *(void *)(v0 + 416);
        unint64_t v30 = v28 & 0x3FFFFFFFFFFFFFFFLL;
        unsigned __int8 v31 = *(void *)(v29 + 16);
        uint64_t v32 = *(void *)(v29 + 24);
        outlined copy of Data._Representation(v29, v28);
        swift_retain();
        swift_retain();
        uint64_t v33 = _s10Foundation13__DataStorageC15withUnsafeBytes2in5applyxSnySiG_xSWKXEtKlFSSSg_Tg5015_s10Foundation4b17V32withContiguousC50IfAvailableyxSgxSRys5UInt8VGKXEKlFAESWKXEfU_SS_TG5SRys0Q0VGxs5Error_pRi_zRi0_zlySSIsgyrzo_Tf1ncn_n(v31, v32, v30, (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))specialized closure #1 in String.init<A, B>(decoding:as:));
        uint64_t v24 = v34;
        swift_release();
        uint64_t result = swift_release();
        if (!v27)
        {
          uint64_t v26 = v33;
LABEL_13:
          unint64_t v35 = *(void *)(v0 + 408);
          uint64_t v36 = *(void *)(v0 + 416);
          int v70 = v12;
          if (v24)
          {
            outlined consume of Data._Representation(v35, v36);
            uint64_t v18 = v26;
            unint64_t v17 = v24;
            goto LABEL_32;
          }
          *(void *)(v0 + 136) = v35;
          *(void *)(v0 + 144) = v36;
          outlined copy of Data._Representation(v35, v36);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _HasContiguousBytes);
          if (swift_dynamicCast())
          {
            outlined init with take of _HasContiguousBytes(v71, (uint64_t)v69);
            __swift_project_boxed_opaque_existential_1(v69, *(void *)(v0 + 80));
            if (dispatch thunk of _HasContiguousBytes._providesContiguousBytesNoCopy.getter())
            {
              uint64_t v39 = *(void *)(v0 + 408);
              uint64_t v38 = *(void *)(v0 + 416);
              __swift_project_boxed_opaque_existential_1(v69, *(void *)(v0 + 80));
              dispatch thunk of _HasContiguousBytes.withUnsafeBytes<A>(_:)();
              outlined consume of Data._Representation(v39, v38);
              uint64_t v40 = *(void *)(v0 + 168);
              unint64_t v17 = *(void *)(v0 + 176);
              __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v69);
              uint64_t v18 = v40;
              goto LABEL_32;
            }
            __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v69);
          }
          else
          {
            *(void *)(v0 + 128) = 0;
            char *v71 = 0u;
            *(_OWORD *)(v0 + 112) = 0u;
            outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v71, &demangling cache variable for type metadata for _HasContiguousBytes?);
          }
          unint64_t v57 = *(void *)(v0 + 408);
          uint64_t v58 = *(void *)(v0 + 416);
          uint64_t v59 = specialized static String._fromNonContiguousUnsafeBitcastUTF8Repairing<A>(_:)(v57, v58);
          unint64_t v17 = v60;
          outlined consume of Data._Representation(v57, v58);
          uint64_t v18 = v59;
          goto LABEL_32;
        }
        break;
      case 3uLL:
        uint64_t v37 = *(void *)(v0 + 432);
        *(void *)(v0 + 454) = 0;
        *(void *)(v0 + 460) = 0;
        uint64_t result = specialized closure #1 in String.init<A, B>(decoding:as:)((uint64_t *)v72);
        if (!v37)
        {
          int v70 = v12;
          outlined consume of Data._Representation(*(void *)(v0 + 408), *(void *)(v0 + 416));
          unint64_t v17 = *((void *)&v72[0] + 1);
          uint64_t v18 = *(void *)&v72[0];
          goto LABEL_32;
        }
        break;
      default:
        int v70 = v11;
        unint64_t v14 = *(void *)(v0 + 408);
        uint64_t v13 = *(void *)(v0 + 416);
        *(void *)(v0 + 440) = v14;
        *(_WORD *)(v0 + 448) = v13;
        *(unsigned char *)(v0 + 450) = BYTE2(v13);
        *(unsigned char *)(v0 + 451) = BYTE3(v13);
        *(unsigned char *)(v0 + 452) = BYTE4(v13);
        *(unsigned char *)(v0 + 453) = BYTE5(v13);
        uint64_t v15 = static String._fromUTF8Repairing(_:)();
        unint64_t v17 = v16;
        outlined consume of Data._Representation(v14, v13);
        uint64_t v18 = v15;
LABEL_32:
        size_t v61 = *(void *)(v0 + 416);
        uint64_t v62 = *(void **)(v0 + 424);
        uint64_t v63 = *(void *)(v0 + 408);
        uint64_t v64 = *(void *)(v0 + 360);
        uint64_t v65 = *(void *)(v0 + 368);
        uint64_t v67 = *(void *)(v0 + 312);
        uint64_t v66 = *(void *)(v0 + 320);
        uint64_t v68 = *(void *)(v0 + 304);
        *int v70 = v18;
        v70[1] = v17;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        outlined consume of Data._Representation(v64, v65);
        outlined consume of Data._Representation(v63, v61);

        (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v66, v68);
        goto LABEL_33;
    }
  }
  return result;
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  outlined consume of Data._Representation(v0[45], v0[46]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v2 = v0[39];
  uint64_t v1 = v0[40];
  uint64_t v3 = v0[38];
  outlined consume of Data._Representation(v0[45], v0[46]);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  int64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t closure #2 in AspireNetworkManager.fetchConfigs(useCases:userId:)(void *a1, uint64_t a2, uint64_t a3)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *a1 = a2;
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  a1[1] = a3;
  return result;
}

uint64_t AspireNetworkManager.uploadKeys(evaluationKeys:userId:)(uint64_t a1, uint64_t a2)
{
  v3[7] = a2;
  v3[8] = v2;
  v3[6] = a1;
  uint64_t v4 = type metadata accessor for UUID();
  v3[9] = v4;
  v3[10] = *(void *)(v4 - 8);
  v3[11] = swift_task_alloc();
  v3[12] = type metadata accessor for AspireApiEvaluationKeys(0);
  v3[13] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for URLRequest();
  v3[14] = v5;
  v3[15] = *(void *)(v5 - 8);
  v3[16] = swift_task_alloc();
  return MEMORY[0x270FA2498](AspireNetworkManager.uploadKeys(evaluationKeys:userId:), 0, 0);
}

uint64_t AspireNetworkManager.uploadKeys(evaluationKeys:userId:)()
{
  lazy protocol witness table accessor for type AspireApiConfigRequest and conformance AspireApiConfigRequest(&lazy protocol witness table cache variable for type AspireApiEvaluationKeys and conformance AspireApiEvaluationKeys, (void (*)(uint64_t))type metadata accessor for AspireApiEvaluationKeys);
  uint64_t v1 = Message.serializedData(partial:)();
  v0[17] = v1;
  v0[18] = v2;
  uint64_t v3 = v1;
  uint64_t v4 = v2;
  uint64_t v5 = (void *)swift_task_alloc();
  v0[19] = v5;
  void *v5 = v0;
  v5[1] = AspireNetworkManager.uploadKeys(evaluationKeys:userId:);
  uint64_t v6 = v0[16];
  uint64_t v7 = v0[7];
  return AspireNetworkManager.prepareRequest(path:userId:body:)(v6, 7955819, 0xE300000000000000, v7, v3, v4);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 160) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = AspireNetworkManager.uploadKeys(evaluationKeys:userId:);
  }
  else {
    uint64_t v2 = AspireNetworkManager.uploadKeys(evaluationKeys:userId:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v36;
  os_log_type_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  uint64_t v41 = v0;
  if (one-time initialization token for networking != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = *(void *)(v0 + 136);
  uint64_t v38 = *(void *)(v0 + 144);
  uint64_t v3 = *(void *)(v0 + 104);
  uint64_t v4 = *(void *)(v0 + 80);
  uint64_t v5 = *(void *)(v0 + 88);
  uint64_t v6 = *(void *)(v0 + 72);
  uint64_t v7 = *(void *)(v0 + 56);
  uint64_t v8 = type metadata accessor for Logger();
  *(void *)(v0 + 168) = __swift_project_value_buffer(v8, (uint64_t)static Logger.networking);
  outlined init with copy of AspireApiEvaluationKeys(v1, v3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v5, v7, v6);
  outlined copy of Data._Representation(v2, v38);
  uint64_t v9 = Logger.logObject.getter();
  size_t v10 = static os_log_type_t.default.getter();
  uint64_t v11 = os_log_type_enabled(v9, v10);
  uint64_t v12 = *(void *)(v0 + 144);
  if (v11)
  {
    uint64_t v37 = v10;
    uint64_t v13 = *(void *)(v0 + 104);
    unint64_t v14 = v12 >> 62;
    uint64_t v15 = swift_slowAlloc();
    uint64_t v39 = swift_slowAlloc();
    uint64_t v40 = v39;
    *(_DWORD *)uint64_t v15 = 134349571;
    unint64_t v16 = *(void *)(*(void *)v13 + 16);
    outlined destroy of AspireApiConfigRequest(v13, type metadata accessor for AspireApiEvaluationKeys);
    *(void *)(v0 + 24) = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v15 + 12) = 2050;
    unint64_t v17 = 0;
    switch(v14)
    {
      case 1uLL:
        uint64_t v22 = *(_DWORD *)(v0 + 136);
        uint64_t v23 = *(_DWORD *)(v0 + 140);
        uint64_t v24 = __OFSUB__(v23, v22);
        LODWORD(v17) = v23 - v22;
        if (v24)
        {
          __break(1u);
LABEL_15:
          __break(1u);
          JUMPOUT(0x249CAD770);
        }
        unint64_t v17 = (int)v17;
LABEL_10:
        uint64_t v28 = *(void *)(v0 + 136);
        unint64_t v27 = *(void *)(v0 + 144);
        unint64_t v30 = *(void *)(v0 + 80);
        uint64_t v29 = *(void *)(v0 + 88);
        uint64_t v36 = *(void *)(v0 + 72);
        *(void *)(v0 + 32) = v17;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        outlined consume of Data._Representation(v28, v27);
        *(_WORD *)(v15 + 22) = 2081;
        unsigned __int8 v31 = UUID.uuidString.getter();
        *(void *)(v0 + 40) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, &v40);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v29, v36);
        _os_log_impl(&dword_249C3F000, v9, v37, "Request to uploadKeys has started for %{public}ld key(s) with %{public}ld bytes for userId: '%{private}s'", (uint8_t *)v15, 0x20u);
        swift_arrayDestroy();
        MEMORY[0x24C5B4790](v39, -1, -1);
        MEMORY[0x24C5B4790](v15, -1, -1);
        break;
      case 2uLL:
        uint64_t v25 = *(void *)(*(void *)(v0 + 136) + 16);
        uint64_t v26 = *(void *)(*(void *)(v0 + 136) + 24);
        uint64_t v24 = __OFSUB__(v26, v25);
        unint64_t v17 = v26 - v25;
        if (!v24) {
          goto LABEL_10;
        }
        goto LABEL_15;
      case 3uLL:
        goto LABEL_10;
      default:
        unint64_t v17 = *(unsigned __int8 *)(v0 + 150);
        goto LABEL_10;
    }
  }
  else
  {
    uint64_t v18 = *(void *)(v0 + 136);
    uint64_t v20 = *(void *)(v0 + 80);
    uint64_t v19 = *(void *)(v0 + 88);
    uint64_t v21 = *(void *)(v0 + 72);
    outlined destroy of AspireApiConfigRequest(*(void *)(v0 + 104), type metadata accessor for AspireApiEvaluationKeys);
    outlined consume of Data._Representation(v18, v12);
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
  }

  type metadata accessor for AspireNetworkManager();
  uint64_t v33 = (void *)swift_task_alloc();
  *(void *)(v0 + 176) = v33;
  void *v33 = v0;
  v33[1] = AspireNetworkManager.uploadKeys(evaluationKeys:userId:);
  uint64_t v34 = *(void *)(v0 + 128);
  return MEMORY[0x270EF1EB0](v34, 0);
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  BOOL v3;
  unint64_t v4;
  unint64_t v5;
  uint8_t *v6;
  uint8_t *v7;
  uint64_t v8;
  int v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(void);
  void *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;

  outlined copy of Data._Representation(*(void *)(v0 + 184), *(void *)(v0 + 192));
  uint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.default.getter();
  uint64_t v3 = os_log_type_enabled(v1, v2);
  uint64_t v4 = *(void *)(v0 + 192);
  if (v3)
  {
    uint64_t v5 = v4 >> 62;
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 134349056;
    uint64_t v7 = v6;
    uint64_t v8 = 0;
    switch(v5)
    {
      case 1uLL:
        uint64_t v9 = *(_DWORD *)(v0 + 184);
        size_t v10 = *(_DWORD *)(v0 + 188);
        uint64_t v11 = __OFSUB__(v10, v9);
        LODWORD(v8) = v10 - v9;
        if (v11)
        {
          __break(1u);
LABEL_17:
          __break(1u);
          JUMPOUT(0x249CADBB4);
        }
        uint64_t v8 = (int)v8;
LABEL_8:
        uint64_t v15 = *(void *)(v0 + 184);
        unint64_t v14 = *(void *)(v0 + 192);
        *(void *)(v0 + 16) = v8;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        outlined consume of Data._Representation(v15, v14);
        _os_log_impl(&dword_249C3F000, v1, v2, "Request to uploadKeys has finished, response length: %{public}ld", v7, 0xCu);
        MEMORY[0x24C5B4790](v7, -1, -1);
        break;
      case 2uLL:
        uint64_t v12 = *(void *)(*(void *)(v0 + 184) + 16);
        uint64_t v13 = *(void *)(*(void *)(v0 + 184) + 24);
        uint64_t v11 = __OFSUB__(v13, v12);
        uint64_t v8 = v13 - v12;
        if (!v11) {
          goto LABEL_8;
        }
        goto LABEL_17;
      case 3uLL:
        goto LABEL_8;
      default:
        uint64_t v8 = *(unsigned __int8 *)(v0 + 198);
        goto LABEL_8;
    }
  }
  else
  {
    outlined consume of Data._Representation(*(void *)(v0 + 184), v4);
  }

  self;
  unint64_t v16 = (void *)swift_dynamicCastObjCClass();
  if (v16 && objc_msgSend(v16, sel_statusCode) == (id)200)
  {
    unint64_t v17 = *(void *)(v0 + 192);
    uint64_t v18 = *(void *)(v0 + 184);
    uint64_t v20 = *(void *)(v0 + 136);
    uint64_t v19 = *(void *)(v0 + 144);
    uint64_t v22 = *(void *)(v0 + 120);
    uint64_t v21 = *(void *)(v0 + 128);
    uint64_t v23 = *(void *)(v0 + 112);

    outlined consume of Data._Representation(v18, v17);
    outlined consume of Data._Representation(v20, v19);
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v23);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v24 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    uint64_t v26 = *(void *)(v0 + 192);
    uint64_t v25 = *(void **)(v0 + 200);
    unint64_t v27 = *(void *)(v0 + 184);
    uint64_t v29 = *(void *)(v0 + 136);
    uint64_t v28 = *(void *)(v0 + 144);
    unint64_t v30 = *(void *)(v0 + 120);
    uint64_t v33 = *(void *)(v0 + 128);
    unsigned __int8 v31 = *(void *)(v0 + 112);
    type metadata accessor for CipherMLError();
    lazy protocol witness table accessor for type AspireApiConfigRequest and conformance AspireApiConfigRequest((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();

    outlined consume of Data._Representation(v27, v26);
    outlined consume of Data._Representation(v29, v28);
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v33, v31);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v24 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v24();
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  outlined consume of Data._Representation(v0[17], v0[18]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v2 = v0[15];
  uint64_t v1 = v0[16];
  uint64_t v3 = v0[14];
  outlined consume of Data._Representation(v0[17], v0[18]);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t AspireNetworkManager.uploadKeys(evaluationKeys:userId:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (void *)*v4;
  v5[23] = a1;
  v5[24] = a2;
  v5[25] = a3;
  v5[26] = v3;
  swift_task_dealloc();
  if (v3) {
    uint64_t v6 = AspireNetworkManager.uploadKeys(evaluationKeys:userId:);
  }
  else {
    uint64_t v6 = AspireNetworkManager.uploadKeys(evaluationKeys:userId:);
  }
  return MEMORY[0x270FA2498](v6, 0, 0);
}

uint64_t AspireNetworkManager.queries(requests:userId:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[24] = a3;
  v4[25] = v3;
  v4[22] = a1;
  v4[23] = a2;
  type metadata accessor for BinaryDecodingOptions();
  v4[26] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for UUID();
  v4[27] = v5;
  v4[28] = *(void *)(v5 - 8);
  v4[29] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for URLRequest();
  v4[30] = v6;
  v4[31] = *(void *)(v6 - 8);
  v4[32] = swift_task_alloc();
  v4[33] = type metadata accessor for AspireApiRequests(0);
  v4[34] = swift_task_alloc();
  return MEMORY[0x270FA2498](AspireNetworkManager.queries(requests:userId:), 0, 0);
}

{
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t (*v6)();
  uint64_t v8;

  uint64_t v5 = (void *)*v4;
  v5[41] = a1;
  v5[42] = a2;
  v5[43] = a3;
  v5[44] = v3;
  swift_task_dealloc();
  if (v3) {
    uint64_t v6 = AspireNetworkManager.queries(requests:userId:);
  }
  else {
    uint64_t v6 = AspireNetworkManager.queries(requests:userId:);
  }
  return MEMORY[0x270FA2498](v6, 0, 0);
}

uint64_t AspireNetworkManager.queries(requests:userId:)()
{
  uint64_t v1 = v0[23];
  *(void *)(swift_task_alloc() + 16) = v1;
  lazy protocol witness table accessor for type AspireApiConfigRequest and conformance AspireApiConfigRequest(&lazy protocol witness table cache variable for type AspireApiRequests and conformance AspireApiRequests, (void (*)(uint64_t))type metadata accessor for AspireApiRequests);
  static Message.with(_:)();
  swift_task_dealloc();
  uint64_t v2 = Message.serializedData(partial:)();
  uint64_t v4 = v3;
  v0[35] = v2;
  v0[36] = v3;
  outlined destroy of AspireApiConfigRequest(v0[34], type metadata accessor for AspireApiRequests);
  uint64_t v5 = (void *)swift_task_alloc();
  v0[37] = v5;
  void *v5 = v0;
  v5[1] = AspireNetworkManager.queries(requests:userId:);
  uint64_t v6 = v0[32];
  uint64_t v7 = v0[24];
  return AspireNetworkManager.prepareRequest(path:userId:body:)(v6, 0x73656972657571, 0xE700000000000000, v7, v2, v4);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 304) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = AspireNetworkManager.queries(requests:userId:);
  }
  else {
    uint64_t v2 = AspireNetworkManager.queries(requests:userId:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35[2];
  void *v36;
  uint64_t v37;

  uint64_t v36 = v0;
  v35[1] = *MEMORY[0x263EF8340];
  if (one-time initialization token for networking != -1) {
    swift_once();
  }
  uint64_t v1 = v0[35];
  uint64_t v2 = v0[36];
  uint64_t v4 = v0[28];
  uint64_t v3 = v0[29];
  uint64_t v5 = v0[27];
  uint64_t v6 = v0[24];
  uint64_t v7 = type metadata accessor for Logger();
  v0[39] = __swift_project_value_buffer(v7, (uint64_t)static Logger.networking);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v6, v5);
  outlined copy of Data._Representation(v1, v2);
  outlined copy of Data._Representation(v1, v2);
  uint64_t v8 = Logger.logObject.getter();
  uint64_t v9 = static os_log_type_t.default.getter();
  size_t v10 = os_log_type_enabled(v8, v9);
  uint64_t v11 = v0[36];
  if (v10)
  {
    uint64_t v13 = v0[28];
    uint64_t v12 = v0[29];
    uint64_t v33 = v0[27];
    uint64_t v34 = v11 >> 62;
    unint64_t v14 = swift_slowAlloc();
    uint64_t v32 = swift_slowAlloc();
    v35[0] = v32;
    *(_DWORD *)unint64_t v14 = 136380931;
    uint64_t v15 = UUID.uuidString.getter();
    v0[20] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v33);
    *(_WORD *)(v14 + 12) = 2050;
    switch(v34)
    {
      case 1uLL:
        uint64_t v23 = v0[35];
        outlined consume of Data._Representation(v23, v0[36]);
        LODWORD(v18) = HIDWORD(v23) - v23;
        if (__OFSUB__(HIDWORD(v23), v23)) {
          __break(1u);
        }
        uint64_t v18 = (int)v18;
        break;
      case 2uLL:
        uint64_t v24 = v0[35];
        uint64_t v26 = *(void *)(v24 + 16);
        uint64_t v25 = *(void *)(v24 + 24);
        outlined consume of Data._Representation(v24, v0[36]);
        uint64_t v18 = v25 - v26;
        if (__OFSUB__(v25, v26))
        {
          __break(1u);
          goto LABEL_12;
        }
        break;
      case 3uLL:
LABEL_12:
        outlined consume of Data._Representation(v0[35], v0[36]);
        uint64_t v18 = 0;
        break;
      default:
        unint64_t v17 = v0[36];
        outlined consume of Data._Representation(v0[35], v17);
        uint64_t v18 = BYTE6(v17);
        break;
    }
    uint64_t v28 = v0[35];
    unint64_t v27 = v0[36];
    v0[21] = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    outlined consume of Data._Representation(v28, v27);
    _os_log_impl(&dword_249C3F000, v8, v9, "Request to queries-batch has started for userId: '%{private}s', length: %{public}ld", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x24C5B4790](v32, -1, -1);
    MEMORY[0x24C5B4790](v14, -1, -1);
  }
  else
  {
    uint64_t v19 = v0[35];
    uint64_t v21 = v0[28];
    uint64_t v20 = v0[29];
    uint64_t v22 = v0[27];
    outlined consume of Data._Representation(v19, v0[36]);
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
    outlined consume of Data._Representation(v19, v11);
  }

  type metadata accessor for AspireNetworkManager();
  uint64_t v29 = (void *)swift_task_alloc();
  v0[40] = v29;
  *uint64_t v29 = v0;
  v29[1] = AspireNetworkManager.queries(requests:userId:);
  unint64_t v30 = v0[32];
  return MEMORY[0x270EF1EB0](v30, 0);
}

{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint8_t *v6;
  uint64_t v7;
  int v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t result;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t (*v50)(void);
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  _OWORD v69[2];
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  uint64_t v72 = v0;
  int v71 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(v0 + 336);
  uint64_t v2 = v1 >> 62;
  outlined copy of Data._Representation(*(void *)(v0 + 328), v1);
  uint64_t v3 = Logger.logObject.getter();
  uint64_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 134349056;
    uint64_t v6 = v5;
    uint64_t v7 = 0;
    switch((int)v2)
    {
      case 1:
        uint64_t v8 = *(_DWORD *)(v0 + 328);
        uint64_t v9 = *(_DWORD *)(v0 + 332);
        size_t v10 = __OFSUB__(v9, v8);
        LODWORD(v7) = v9 - v8;
        if (v10) {
          goto LABEL_37;
        }
        uint64_t v7 = (int)v7;
LABEL_8:
        unint64_t v14 = *(void *)(v0 + 328);
        uint64_t v13 = *(void *)(v0 + 336);
        *(void *)(v0 + 152) = v7;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        outlined consume of Data._Representation(v14, v13);
        _os_log_impl(&dword_249C3F000, v3, v4, "Request to queries-batch has finished response, length: %{public}ld", v6, 0xCu);
        MEMORY[0x24C5B4790](v6, -1, -1);
        break;
      case 2:
        uint64_t v11 = *(void *)(*(void *)(v0 + 328) + 16);
        uint64_t v12 = *(void *)(*(void *)(v0 + 328) + 24);
        size_t v10 = __OFSUB__(v12, v11);
        uint64_t v7 = v12 - v11;
        if (!v10) {
          goto LABEL_8;
        }
        goto LABEL_38;
      case 3:
        goto LABEL_8;
      default:
        uint64_t v7 = *(unsigned __int8 *)(v0 + 342);
        goto LABEL_8;
    }
  }
  else
  {
    outlined consume of Data._Representation(*(void *)(v0 + 328), *(void *)(v0 + 336));
  }

  self;
  uint64_t v15 = (void *)swift_dynamicCastObjCClass();
  if (!v15 || objc_msgSend(v15, sel_statusCode) != (id)200)
  {
    uint64_t v24 = (void *)(v0 + 16);
    type metadata accessor for CipherMLError();
    lazy protocol witness table accessor for type AspireApiConfigRequest and conformance AspireApiConfigRequest((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
    swift_allocError();
    switch((int)v2)
    {
      case 1:
        uint64_t v68 = v25;
        uint64_t v67 = v0 + 56;
        uint64_t v32 = *(void *)(v0 + 328);
        if (v32 >> 32 < (int)v32)
        {
          __break(1u);
LABEL_37:
          __break(1u);
LABEL_38:
          __break(1u);
        }
        uint64_t v33 = *(void *)(v0 + 352);
        uint64_t v34 = *(void *)(v0 + 336);
        outlined copy of Data._Representation(*(void *)(v0 + 328), v34);
        swift_retain();
        unint64_t v35 = _s10Foundation13__DataStorageC15withUnsafeBytes2in5applyxSnySiG_xSWKXEtKlFSSSg_Tg5015_s10Foundation4b17V32withContiguousC50IfAvailableyxSgxSRys5UInt8VGKXEKlFAESWKXEfU_SS_TG5SRys0Q0VGxs5Error_pRi_zRi0_zlySSIsgyrzo_Tf1ncn_n((int)v32, v32 >> 32, v34 & 0x3FFFFFFFFFFFFFFFLL, (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))specialized closure #1 in String.init<A, B>(decoding:as:));
        uint64_t v37 = v36;
        uint64_t result = outlined consume of Data._Representation(v32, v34);
        uint64_t v24 = (void *)(v0 + 16);
        if (v33) {
          return result;
        }
LABEL_19:
        int v46 = *(void *)(v0 + 328);
        uint64_t v47 = *(void *)(v0 + 336);
        if (v37)
        {
          outlined consume of Data._Representation(v46, v47);
          unsigned __int8 v31 = v35;
          unint64_t v30 = v37;
          goto LABEL_31;
        }
        *(void *)(v0 + 96) = v46;
        *(void *)(v0 + 104) = v47;
        outlined copy of Data._Representation(v46, v47);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _HasContiguousBytes);
        if (swift_dynamicCast())
        {
          outlined init with take of _HasContiguousBytes((long long *)v67, (uint64_t)v24);
          __swift_project_boxed_opaque_existential_1(v24, *(void *)(v0 + 40));
          int v51 = (uint64_t)v24;
          if (dispatch thunk of _HasContiguousBytes._providesContiguousBytesNoCopy.getter())
          {
            uint64_t v53 = *(void *)(v0 + 328);
            id v52 = *(void *)(v0 + 336);
            __swift_project_boxed_opaque_existential_1(v24, *(void *)(v0 + 40));
            dispatch thunk of _HasContiguousBytes.withUnsafeBytes<A>(_:)();
            outlined consume of Data._Representation(v53, v52);
            uint64_t v54 = *(void *)(v0 + 112);
            unint64_t v30 = *(void *)(v0 + 120);
            __swift_destroy_boxed_opaque_existential_1Tm(v51);
            unsigned __int8 v31 = v54;
            goto LABEL_31;
          }
          __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v24);
        }
        else
        {
          *(void *)(v67 + 32) = 0;
          *(_OWORD *)uint64_t v67 = 0u;
          *(_OWORD *)(v67 + 16) = 0u;
          outlined destroy of AMDPbHEConfig.OneOf_Config?(v67, &demangling cache variable for type metadata for _HasContiguousBytes?);
        }
        uint64_t v55 = *(void *)(v0 + 328);
        uint64_t v56 = *(void *)(v0 + 336);
        unint64_t v57 = specialized static String._fromNonContiguousUnsafeBitcastUTF8Repairing<A>(_:)(v55, v56);
        unint64_t v30 = v58;
        outlined consume of Data._Representation(v55, v56);
        unsigned __int8 v31 = v57;
LABEL_31:
        uint64_t v59 = *(void *)(v0 + 336);
        uint64_t v60 = *(void **)(v0 + 344);
        size_t v61 = *(void *)(v0 + 328);
        uint64_t v62 = *(void *)(v0 + 280);
        uint64_t v63 = *(void *)(v0 + 288);
        uint64_t v65 = *(void *)(v0 + 248);
        uint64_t v64 = *(void *)(v0 + 256);
        uint64_t v66 = *(void *)(v0 + 240);
        *uint64_t v68 = v31;
        v68[1] = v30;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();

        outlined consume of Data._Representation(v61, v59);
        outlined consume of Data._Representation(v62, v63);
        (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v64, v66);
        break;
      case 2:
        uint64_t v68 = v25;
        uint64_t v67 = v0 + 56;
        uint64_t v39 = *(void *)(v0 + 352);
        uint64_t v41 = *(void *)(v0 + 328);
        uint64_t v40 = *(void *)(v0 + 336);
        uint64_t v42 = v40 & 0x3FFFFFFFFFFFFFFFLL;
        uint64_t v43 = *(void *)(v41 + 16);
        id v44 = *(void *)(v41 + 24);
        outlined copy of Data._Representation(v41, v40);
        swift_retain();
        swift_retain();
        unint64_t v35 = _s10Foundation13__DataStorageC15withUnsafeBytes2in5applyxSnySiG_xSWKXEtKlFSSSg_Tg5015_s10Foundation4b17V32withContiguousC50IfAvailableyxSgxSRys5UInt8VGKXEKlFAESWKXEfU_SS_TG5SRys0Q0VGxs5Error_pRi_zRi0_zlySSIsgyrzo_Tf1ncn_n(v43, v44, v42, (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))specialized closure #1 in String.init<A, B>(decoding:as:));
        uint64_t v37 = v45;
        swift_release();
        uint64_t result = swift_release();
        if (!v39) {
          goto LABEL_19;
        }
        return result;
      case 3:
        uint64_t v48 = v25;
        int v49 = *(void *)(v0 + 352);
        *(void *)(v0 + 360) = 0;
        *(void *)(v0 + 366) = 0;
        uint64_t result = specialized closure #1 in String.init<A, B>(decoding:as:)((uint64_t *)v69);
        if (v49) {
          return result;
        }
        uint64_t v68 = v48;
        outlined consume of Data._Representation(*(void *)(v0 + 328), *(void *)(v0 + 336));
        unint64_t v30 = *((void *)&v69[0] + 1);
        unsigned __int8 v31 = *(void *)&v69[0];
        goto LABEL_31;
      default:
        uint64_t v68 = v25;
        unint64_t v27 = *(void *)(v0 + 328);
        uint64_t v26 = *(void *)(v0 + 336);
        *(void *)(v0 + 374) = v27;
        *(_WORD *)(v0 + 382) = v26;
        *(unsigned char *)(v0 + 384) = BYTE2(v26);
        *(unsigned char *)(v0 + 385) = BYTE3(v26);
        *(unsigned char *)(v0 + 386) = BYTE4(v26);
        *(unsigned char *)(v0 + 387) = BYTE5(v26);
        uint64_t v28 = static String._fromUTF8Repairing(_:)();
        unint64_t v30 = v29;
        outlined consume of Data._Representation(v27, v26);
        unsigned __int8 v31 = v28;
        goto LABEL_31;
    }
    goto LABEL_32;
  }
  unint64_t v16 = *(void *)(v0 + 352);
  uint64_t v18 = *(void *)(v0 + 328);
  unint64_t v17 = *(void *)(v0 + 336);
  type metadata accessor for AspireApiResponses(0);
  *(void *)(v0 + 128) = v18;
  *(void *)(v0 + 136) = v17;
  int v70 = 0;
  memset(v69, 0, sizeof(v69));
  outlined copy of Data._Representation(v18, v17);
  BinaryDecodingOptions.init()();
  lazy protocol witness table accessor for type AspireApiConfigRequest and conformance AspireApiConfigRequest(&lazy protocol witness table cache variable for type AspireApiResponses and conformance AspireApiResponses, (void (*)(uint64_t))type metadata accessor for AspireApiResponses);
  Message.init<A>(serializedBytes:extensions:partial:options:)();
  uint64_t v19 = *(void *)(v0 + 336);
  uint64_t v20 = *(void **)(v0 + 344);
  uint64_t v21 = *(void *)(v0 + 328);
  uint64_t v23 = *(void *)(v0 + 280);
  uint64_t v22 = *(void *)(v0 + 288);
  if (v16)
  {
    (*(void (**)(void, void))(*(void *)(v0 + 248) + 8))(*(void *)(v0 + 256), *(void *)(v0 + 240));
    outlined consume of Data._Representation(v23, v22);
    outlined consume of Data._Representation(v21, v19);

LABEL_32:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v50 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_33;
  }
  (*(void (**)(void, void))(*(void *)(v0 + 248) + 8))(*(void *)(v0 + 256), *(void *)(v0 + 240));
  outlined consume of Data._Representation(v23, v22);
  outlined consume of Data._Representation(v21, v19);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v50 = *(uint64_t (**)(void))(v0 + 8);
LABEL_33:
  return v50();
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  outlined consume of Data._Representation(v0[35], v0[36]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v2 = v0[31];
  uint64_t v1 = v0[32];
  uint64_t v3 = v0[30];
  outlined consume of Data._Representation(v0[35], v0[36]);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

Swift::Void __swiftcall AspireNetworkManager.cancel()()
{
  uint64_t v1 = *(void **)(v0 + *(int *)(type metadata accessor for AspireNetworkManager() + 36));
  v3[4] = closure #1 in AspireNetworkManager.cancel();
  void v3[5] = 0;
  v3[0] = MEMORY[0x263EF8330];
  v3[1] = 1107296256;
  v3[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed [NSURLSessionTask]) -> ();
  v3[3] = &block_descriptor;
  uint64_t v2 = _Block_copy(v3);
  objc_msgSend(v1, sel_getAllTasksWithCompletionHandler_, v2);
  _Block_release(v2);
}

uint64_t closure #1 in AspireNetworkManager.cancel()(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v2 = result;
    if (!result) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (!v2) {
      goto LABEL_10;
    }
  }
  if (v2 < 1)
  {
    __break(1u);
    return result;
  }
  for (uint64_t i = 0; i != v2; ++i)
  {
    if ((a1 & 0xC000000000000001) != 0) {
      id v5 = (id)MEMORY[0x24C5B3860](i, a1);
    }
    else {
      id v5 = *(id *)(a1 + 8 * i + 32);
    }
    uint64_t v6 = v5;
    objc_msgSend(v5, sel_cancel);
  }
LABEL_10:
  return swift_bridgeObjectRelease();
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable (@guaranteed [NSURLSessionTask]) -> ()(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  type metadata accessor for NSURLSessionTask();
  uint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  v1(v2);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for NetworkManager.networkDelegationConfig.getter in conformance AspireNetworkManager(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 24));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return AspireNetworkManager.fetchConfigs(useCases:userId:)(a1, a2, a3);
}

uint64_t protocol witness for NetworkManager.uploadKeys(evaluationKeys:userId:) in conformance AspireNetworkManager(uint64_t a1, uint64_t a2)
{
  id v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = protocol witness for NetworkManager.uploadKeys(evaluationKeys:userId:) in conformance AspireNetworkManager;
  return AspireNetworkManager.uploadKeys(evaluationKeys:userId:)(a1, a2);
}

uint64_t protocol witness for NetworkManager.uploadKeys(evaluationKeys:userId:) in conformance AspireNetworkManager()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t protocol witness for NetworkManager.queries(requests:userId:) in conformance AspireNetworkManager(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return AspireNetworkManager.queries(requests:userId:)(a1, a2, a3);
}

void protocol witness for NetworkManager.cancel() in conformance AspireNetworkManager(uint64_t a1)
{
  uint64_t v2 = *(void **)(v1 + *(int *)(a1 + 36));
  v4[4] = closure #1 in AspireNetworkManager.cancel();
  v4[5] = 0;
  v4[0] = MEMORY[0x263EF8330];
  v4[1] = 1107296256;
  v4[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed [NSURLSessionTask]) -> ();
  v4[3] = &block_descriptor_13;
  uint64_t v3 = _Block_copy(v4);
  objc_msgSend(v2, sel_getAllTasksWithCompletionHandler_, v3);
  _Block_release(v3);
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = specialized _StringGuts._deconstructUTF8<A>(scratch:)(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = MEMORY[0x263F8DBE0];
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v12);
  return v7;
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = _StringGuts._allocateForDeconstruct()(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t _StringGuts._allocateForDeconstruct()(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = _StringGuts.copyUTF8(into:)();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return (uint64_t)v4;
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      uint64_t v2 = String.UTF8View._foreignCount()();
      if (!v2) {
        return MEMORY[0x263F8EE78];
      }
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return MEMORY[0x263F8EE78];
  }
  return result;
}

void *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

{
  uint64_t v2;
  void *v4;
  int64_t v5;
  uint64_t v6;

  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int?>);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  char v6 = v5 - 32;
  if (v5 < 32) {
    char v6 = v5 - 17;
  }
  v4[2] = a1;
  v4[3] = 2 * (v6 >> 4);
  return v4;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized static String._fromNonContiguousUnsafeBitcastUTF8Repairing<A>(_:)(uint64_t a1, unint64_t a2)
{
  outlined copy of Data._Representation(a1, a2);
  specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  outlined consume of Data._Representation(a1, a2);
  uint64_t v4 = static String._fromUTF8Repairing(_:)();
  swift_release();
  return v4;
}

uint64_t closure #2 in String.init<A, B>(decoding:as:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._fromUTF8Repairing(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

unsigned char *closure #1 in Data.init<A>(_:)@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X1>, void *a3@<X8>)
{
  if (!result) {
    goto LABEL_4;
  }
  uint64_t v4 = a2 - result;
  if (a2 == result)
  {
    uint64_t result = 0;
LABEL_4:
    unint64_t v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    uint64_t result = (unsigned char *)specialized Data.InlineData.init(_:)(result, a2);
    unint64_t v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    uint64_t result = (unsigned char *)specialized Data.LargeSlice.init(_:)((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v8 | 0x8000000000000000;
  }
  else
  {
    uint64_t result = (unsigned char *)specialized Data.InlineSlice.init(_:)((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t _s10Foundation13__DataStorageC15withUnsafeBytes2in5applyxSnySiG_xSWKXEtKlFSSSg_Tg5015_s10Foundation4b17V32withContiguousC50IfAvailableyxSgxSRys5UInt8VGKXEKlFAESWKXEfU_SS_TG5SRys0Q0VGxs5Error_pRi_zRi0_zlySSIsgyrzo_Tf1ncn_n(uint64_t a1, uint64_t a2, uint64_t a3, void *(*a4)(uint64_t *__return_ptr, uint64_t, uint64_t))
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v9 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v9 += a1 - result;
  }
  BOOL v10 = __OFSUB__(a2, a1);
  uint64_t v11 = a2 - a1;
  if (v10)
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v12 = __DataStorage._length.getter();
  if (v12 >= v11) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = v12;
  }
  uint64_t v14 = v9 + v13;
  if (v9) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0;
  }
  uint64_t result = (uint64_t)_sSW17withMemoryRebound2to_q0_xm_q0_SRyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_sAD_pSSTgm507_sSRys5f5VGxs5E34_pIgyrzo_ACxsAD_pIegyrzr_lTRSS_TG5SRyAFGSSsAD_pIgyrzo_Tf1cn_n(v9, v15, a4);
  if (v4) {
    return v16;
  }
  return result;
}

void *_sSW17withMemoryRebound2to_q0_xm_q0_SRyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_sAD_pSSTgm507_sSRys5f5VGxs5E34_pIgyrzo_ACxsAD_pIegyrzr_lTRSS_TG5SRyAFGSSsAD_pIgyrzo_Tf1cn_n(uint64_t a1, uint64_t a2, void *(*a3)(uint64_t *__return_ptr, uint64_t, uint64_t))
{
  if (a1) {
    uint64_t v4 = a2 - a1;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t result = a3(&v6, a1, v4);
  if (!v3) {
    return (void *)v6;
  }
  return result;
}

uint64_t specialized closure #1 in String.init<A, B>(decoding:as:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._fromUTF8Repairing(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t outlined consume of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return outlined consume of Data._Representation(a1, a2);
  }
  return a1;
}

uint64_t outlined init with take of TokenFetcher?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TokenFetcher?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type [UInt8] and conformance <A> [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [UInt8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A]);
  }
  return result;
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t partial apply for closure #2 in AspireNetworkManager.fetchConfigs(useCases:userId:)(void *a1)
{
  return closure #2 in AspireNetworkManager.fetchConfigs(useCases:userId:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t outlined init with take of _HasContiguousBytes(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t outlined init with copy of AspireApiEvaluationKeys(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AspireApiEvaluationKeys(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in AspireNetworkManager.queries(requests:userId:)(void *a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v3;
  return result;
}

uint64_t lazy protocol witness table accessor for type AspireApiConfigRequest and conformance AspireApiConfigRequest(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

char *initializeBufferWithCopyOfBuffer for AspireNetworkManager(char *a1, char *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for URL();
    uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    uint64_t v9 = a3[5];
    BOOL v10 = &a1[v9];
    uint64_t v11 = (uint64_t *)&a2[v9];
    unint64_t v12 = v11[1];
    uint64_t v41 = v8;
    uint64_t v42 = v7;
    if (v12 >> 60 == 15)
    {
      *(_OWORD *)BOOL v10 = *(_OWORD *)v11;
    }
    else
    {
      uint64_t v14 = *v11;
      outlined copy of Data._Representation(*v11, v12);
      *(void *)BOOL v10 = v14;
      *((void *)v10 + 1) = v12;
    }
    uint64_t v15 = a3[6];
    uint64_t v16 = a3[7];
    unint64_t v17 = &a1[v15];
    uint64_t v18 = (uint64_t *)&a2[v15];
    uint64_t v19 = *v18;
    uint64_t v20 = v18[1];
    LOBYTE(v18) = a2[v16];
    *(void *)unint64_t v17 = v19;
    *((void *)v17 + 1) = v20;
    a1[v16] = (char)v18;
    uint64_t v21 = a3[8];
    uint64_t v22 = &a1[v21];
    uint64_t v23 = &a2[v21];
    uint64_t v24 = (int *)type metadata accessor for TokenFetcher(0);
    uint64_t v25 = *((void *)v24 - 1);
    uint64_t v26 = *(unsigned int (**)(char *, uint64_t, int *))(v25 + 48);
    swift_bridgeObjectRetain();
    if (v26(v23, 1, v24))
    {
      uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TokenFetcher?);
      memcpy(v22, v23, *(void *)(*(void *)(v27 - 8) + 64));
    }
    else
    {
      v41(v22, v23, v42);
      uint64_t v28 = v24[5];
      uint64_t v29 = (uint64_t *)&v22[v28];
      unint64_t v30 = (uint64_t *)&v23[v28];
      uint64_t v31 = *v30;
      unint64_t v32 = v30[1];
      outlined copy of Data._Representation(*v30, v32);
      *uint64_t v29 = v31;
      v29[1] = v32;
      uint64_t v33 = v24[6];
      uint64_t v34 = *(void **)&v23[v33];
      *(void *)&v22[v33] = v34;
      v22[v24[7]] = v23[v24[7]];
      unint64_t v35 = *(void (**)(char *, void, uint64_t, int *))(v25 + 56);
      id v36 = v34;
      v35(v22, 0, 1, v24);
    }
    uint64_t v37 = a3[9];
    uint64_t v38 = *(void **)&a2[v37];
    *(void *)&a1[v37] = v38;
    id v39 = v38;
  }
  return a1;
}

void destroy for AspireNetworkManager(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for URL();
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v5(a1, v4);
  uint64_t v6 = (uint64_t *)(a1 + a2[5]);
  unint64_t v7 = v6[1];
  if (v7 >> 60 != 15) {
    outlined consume of Data._Representation(*v6, v7);
  }
  swift_bridgeObjectRelease();
  uint64_t v8 = a1 + a2[8];
  uint64_t v9 = type metadata accessor for TokenFetcher(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9))
  {
    v5(v8, v4);
    outlined consume of Data._Representation(*(void *)(v8 + *(int *)(v9 + 20)), *(void *)(v8 + *(int *)(v9 + 20) + 8));
  }
  BOOL v10 = *(void **)(a1 + a2[9]);
}

char *initializeWithCopy for AspireNetworkManager(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  unint64_t v7 = *(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  BOOL v10 = (uint64_t *)&a2[v8];
  unint64_t v11 = v10[1];
  id v39 = v7;
  uint64_t v40 = v6;
  if (v11 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
  }
  else
  {
    uint64_t v12 = *v10;
    outlined copy of Data._Representation(*v10, v11);
    *(void *)uint64_t v9 = v12;
    *((void *)v9 + 1) = v11;
  }
  uint64_t v13 = a3[6];
  uint64_t v14 = a3[7];
  uint64_t v15 = &a1[v13];
  uint64_t v16 = (uint64_t *)&a2[v13];
  uint64_t v17 = *v16;
  uint64_t v18 = v16[1];
  LOBYTE(v16) = a2[v14];
  *(void *)uint64_t v15 = v17;
  *((void *)v15 + 1) = v18;
  a1[v14] = (char)v16;
  uint64_t v19 = a3[8];
  uint64_t v20 = &a1[v19];
  uint64_t v21 = &a2[v19];
  uint64_t v22 = (int *)type metadata accessor for TokenFetcher(0);
  uint64_t v23 = *((void *)v22 - 1);
  uint64_t v24 = *(unsigned int (**)(char *, uint64_t, int *))(v23 + 48);
  swift_bridgeObjectRetain();
  if (v24(v21, 1, v22))
  {
    uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TokenFetcher?);
    memcpy(v20, v21, *(void *)(*(void *)(v25 - 8) + 64));
  }
  else
  {
    v39(v20, v21, v40);
    uint64_t v26 = v22[5];
    uint64_t v27 = (uint64_t *)&v20[v26];
    uint64_t v28 = (uint64_t *)&v21[v26];
    uint64_t v29 = *v28;
    unint64_t v30 = v28[1];
    outlined copy of Data._Representation(*v28, v30);
    *uint64_t v27 = v29;
    v27[1] = v30;
    uint64_t v31 = v22[6];
    unint64_t v32 = *(void **)&v21[v31];
    *(void *)&v20[v31] = v32;
    v20[v22[7]] = v21[v22[7]];
    uint64_t v33 = *(void (**)(char *, void, uint64_t, int *))(v23 + 56);
    id v34 = v32;
    v33(v20, 0, 1, v22);
  }
  uint64_t v35 = a3[9];
  id v36 = *(void **)&a2[v35];
  *(void *)&a1[v35] = v36;
  id v37 = v36;
  return a1;
}

uint64_t assignWithCopy for AspireNetworkManager(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v53 = *(void *)(v6 - 8);
  uint64_t v54 = v6;
  id v52 = *(void (**)(uint64_t, uint64_t))(v53 + 24);
  v52(a1, a2);
  uint64_t v7 = a3[5];
  uint64_t v8 = (uint64_t *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  unint64_t v10 = *(void *)(a2 + v7 + 8);
  if (*(void *)(a1 + v7 + 8) >> 60 == 15)
  {
    if (v10 >> 60 != 15)
    {
      uint64_t v11 = *v9;
      outlined copy of Data._Representation(v11, v10);
      *uint64_t v8 = v11;
      v8[1] = v10;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v10 >> 60 == 15)
  {
    outlined destroy of Data((uint64_t)v8);
LABEL_6:
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
    goto LABEL_8;
  }
  uint64_t v12 = *v9;
  outlined copy of Data._Representation(v12, v10);
  uint64_t v13 = *v8;
  unint64_t v14 = v8[1];
  *uint64_t v8 = v12;
  v8[1] = v10;
  outlined consume of Data._Representation(v13, v14);
LABEL_8:
  uint64_t v15 = a3[6];
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (void *)(a2 + v15);
  *uint64_t v16 = *v17;
  v16[1] = v17[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  uint64_t v18 = a3[8];
  uint64_t v19 = (unsigned char *)(a1 + v18);
  uint64_t v20 = (unsigned char *)(a2 + v18);
  uint64_t v21 = (int *)type metadata accessor for TokenFetcher(0);
  uint64_t v22 = *((void *)v21 - 1);
  uint64_t v23 = *(uint64_t (**)(unsigned char *, uint64_t, int *))(v22 + 48);
  int v24 = v23(v19, 1, v21);
  int v25 = v23(v20, 1, v21);
  if (!v24)
  {
    if (!v25)
    {
      ((void (*)(unsigned char *, unsigned char *, uint64_t))v52)(v19, v20, v54);
      uint64_t v41 = v21[5];
      uint64_t v42 = (uint64_t *)&v19[v41];
      uint64_t v43 = (uint64_t *)&v20[v41];
      uint64_t v44 = *v43;
      unint64_t v45 = v43[1];
      outlined copy of Data._Representation(*v43, v45);
      uint64_t v46 = *v42;
      unint64_t v47 = v42[1];
      *uint64_t v42 = v44;
      v42[1] = v45;
      outlined consume of Data._Representation(v46, v47);
      uint64_t v48 = v21[6];
      int v49 = *(void **)&v20[v48];
      uint64_t v50 = *(void **)&v19[v48];
      *(void *)&v19[v48] = v49;
      id v51 = v49;

      v19[v21[7]] = v20[v21[7]];
      goto LABEL_14;
    }
    outlined destroy of AspireApiConfigRequest((uint64_t)v19, type metadata accessor for TokenFetcher);
    goto LABEL_13;
  }
  if (v25)
  {
LABEL_13:
    uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TokenFetcher?);
    memcpy(v19, v20, *(void *)(*(void *)(v35 - 8) + 64));
    goto LABEL_14;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v53 + 16))(v19, v20, v54);
  uint64_t v26 = v21[5];
  uint64_t v27 = (uint64_t *)&v19[v26];
  uint64_t v28 = (uint64_t *)&v20[v26];
  uint64_t v29 = *v28;
  unint64_t v30 = v28[1];
  outlined copy of Data._Representation(*v28, v30);
  *uint64_t v27 = v29;
  v27[1] = v30;
  uint64_t v31 = v21[6];
  unint64_t v32 = *(void **)&v20[v31];
  *(void *)&v19[v31] = v32;
  v19[v21[7]] = v20[v21[7]];
  uint64_t v33 = *(void (**)(unsigned char *, void, uint64_t, int *))(v22 + 56);
  id v34 = v32;
  v33(v19, 0, 1, v21);
LABEL_14:
  uint64_t v36 = a3[9];
  id v37 = *(void **)(a2 + v36);
  uint64_t v38 = *(void **)(a1 + v36);
  *(void *)(a1 + v36) = v37;
  id v39 = v37;

  return a1;
}

uint64_t outlined destroy of Data(uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of AspireApiConfigRequest(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t initializeWithTake for AspireNetworkManager(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  uint64_t v9 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  unint64_t v10 = (char *)(a1 + v9);
  uint64_t v11 = (char *)(a2 + v9);
  uint64_t v12 = (int *)type metadata accessor for TokenFetcher(0);
  uint64_t v13 = *((void *)v12 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1, v12))
  {
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TokenFetcher?);
    memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v10, (uint64_t)v11, v6);
    *(_OWORD *)&v10[v12[5]] = *(_OWORD *)&v11[v12[5]];
    *(void *)&v10[v12[6]] = *(void *)&v11[v12[6]];
    v10[v12[7]] = v11[v12[7]];
    (*(void (**)(char *, void, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
  }
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  return a1;
}

uint64_t assignWithTake for AspireNetworkManager(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v36 = *(void *)(v6 - 8);
  uint64_t v37 = v6;
  uint64_t v35 = *(void (**)(uint64_t, uint64_t))(v36 + 40);
  v35(a1, a2);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  unint64_t v10 = *(void *)(a1 + v7 + 8);
  if (v10 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v11 = *(void *)(v9 + 8);
  if (v11 >> 60 == 15)
  {
    outlined destroy of Data(v8);
LABEL_4:
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
    goto LABEL_6;
  }
  uint64_t v12 = *(void *)v8;
  *(void *)uint64_t v8 = *(void *)v9;
  *(void *)(v8 + 8) = v11;
  outlined consume of Data._Representation(v12, v10);
LABEL_6:
  uint64_t v13 = a3[6];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (uint64_t *)(a2 + v13);
  uint64_t v17 = *v15;
  uint64_t v16 = v15[1];
  *uint64_t v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease();
  uint64_t v18 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  uint64_t v19 = (unsigned char *)(a1 + v18);
  uint64_t v20 = (unsigned char *)(a2 + v18);
  uint64_t v21 = (int *)type metadata accessor for TokenFetcher(0);
  uint64_t v22 = *((void *)v21 - 1);
  uint64_t v23 = *(uint64_t (**)(unsigned char *, uint64_t, int *))(v22 + 48);
  int v24 = v23(v19, 1, v21);
  int v25 = v23(v20, 1, v21);
  if (!v24)
  {
    if (!v25)
    {
      ((void (*)(unsigned char *, unsigned char *, uint64_t))v35)(v19, v20, v37);
      uint64_t v30 = v21[5];
      uint64_t v31 = *(void *)&v19[v30];
      unint64_t v32 = *(void *)&v19[v30 + 8];
      *(_OWORD *)&v19[v30] = *(_OWORD *)&v20[v30];
      outlined consume of Data._Representation(v31, v32);
      uint64_t v33 = v21[6];
      id v34 = *(void **)&v19[v33];
      *(void *)&v19[v33] = *(void *)&v20[v33];

      v19[v21[7]] = v20[v21[7]];
      goto LABEL_12;
    }
    outlined destroy of AspireApiConfigRequest((uint64_t)v19, type metadata accessor for TokenFetcher);
    goto LABEL_11;
  }
  if (v25)
  {
LABEL_11:
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TokenFetcher?);
    memcpy(v19, v20, *(void *)(*(void *)(v26 - 8) + 64));
    goto LABEL_12;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v36 + 32))(v19, v20, v37);
  *(_OWORD *)&v19[v21[5]] = *(_OWORD *)&v20[v21[5]];
  *(void *)&v19[v21[6]] = *(void *)&v20[v21[6]];
  v19[v21[7]] = v20[v21[7]];
  (*(void (**)(unsigned char *, void, uint64_t, int *))(v22 + 56))(v19, 0, 1, v21);
LABEL_12:
  uint64_t v27 = a3[9];
  uint64_t v28 = *(void **)(a1 + v27);
  *(void *)(a1 + v27) = *(void *)(a2 + v27);

  return a1;
}

uint64_t getEnumTagSinglePayload for AspireNetworkManager(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_249CB104C);
}

uint64_t sub_249CB104C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TokenFetcher?);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 32);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  unint64_t v14 = *(void *)(a1 + *(int *)(a3 + 36));
  if (v14 >= 0xFFFFFFFF) {
    LODWORD(v14) = -1;
  }
  return (v14 + 1);
}

uint64_t storeEnumTagSinglePayload for AspireNetworkManager(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_249CB1178);
}

uint64_t sub_249CB1178(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TokenFetcher?);
    uint64_t v14 = *(void *)(result - 8);
    if (*(_DWORD *)(v14 + 84) != a3)
    {
      *(void *)(a1 + *(int *)(a4 + 36)) = (a2 - 1);
      return result;
    }
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 32);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void type metadata completion function for AspireNetworkManager()
{
  type metadata accessor for URL();
  if (v0 <= 0x3F)
  {
    type metadata accessor for TokenFetcher?();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void type metadata accessor for TokenFetcher?()
{
  if (!lazy cache variable for type metadata for TokenFetcher?)
  {
    type metadata accessor for TokenFetcher(255);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TokenFetcher?);
    }
  }
}

unint64_t type metadata accessor for NSURLSessionTask()
{
  unint64_t result = lazy cache variable for type metadata for NSURLSessionTask;
  if (!lazy cache variable for type metadata for NSURLSessionTask)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSURLSessionTask);
  }
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_1Tm(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

uint64_t outlined init with take of TokenFetcher(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TokenFetcher(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t RequestsManager.configCache.getter()
{
  return swift_retain();
}

uint64_t RequestsManager.keyStorage.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t RequestsManager.activeUseCaseTracker.getter()
{
  return swift_retain();
}

uint64_t RequestsManager.allowListLock.getter()
{
  return swift_retain();
}

uint64_t RequestsManager.currentTime.getter()
{
  uint64_t v1 = *(void *)(v0 + 56);
  swift_retain();
  return v1;
}

uint64_t RequestsManager.keyRotationCoordinator.getter()
{
  return swift_retain();
}

uint64_t RequestsManager.allowList.getter()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 48);
  uint64_t v2 = v1 + 4;
  uint64_t v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  closure #1 in OSAllocatedUnfairLock<A>.current.getter(v2, &v5);
  os_unfair_lock_unlock(v3);
  return v5;
}

uint64_t (*default argument 4 of RequestsManager.init(configCache:keyStorage:activeUseCaseTracker:allowList:currentTime:)())()
{
  return closure #1 in default argument 4 of RequestsManager.init(configCache:keyStorage:activeUseCaseTracker:allowList:currentTime:);
}

uint64_t RequestsManager.__allocating_init(configCache:keyStorage:activeUseCaseTracker:allowList:currentTime:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint8_t *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = swift_allocObject();
  RequestsManager.init(configCache:keyStorage:activeUseCaseTracker:allowList:currentTime:)(a1, a2, a3, a4, a5, a6, a7);
  return v14;
}

void *RequestsManager.init(configCache:keyStorage:activeUseCaseTracker:allowList:currentTime:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint8_t *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = v7;
  unint64_t v57 = a5;
  uint64_t v58 = a7;
  uint64_t v56 = a6;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v14 = MEMORY[0x270FA5388](v13 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)v51 - v16;
  MEMORY[0x270FA5388](v15);
  uint64_t v19 = (char *)v51 - v18;
  uint64_t v55 = a4;
  if (a1)
  {
    v8[2] = a1;
    if (a2) {
      goto LABEL_3;
    }
LABEL_8:
    type metadata accessor for KVSKeyStorage();
    uint64_t v26 = swift_allocObject();
    swift_retain();
    swift_defaultActor_initialize();
    id v27 = objc_allocWithZone(MEMORY[0x263F08C40]);
    uint64_t v28 = (void *)MEMORY[0x24C5B33F0](0xD000000000000013, 0x8000000249E94420);
    id v29 = objc_msgSend(v27, sel_initWithStoreIdentifier_type_, v28, 1);

    *(void *)(v26 + 112) = v29;
    v8[3] = v26;
    v8[4] = &protocol witness table for KVSKeyStorage;
    if (a4) {
      goto LABEL_4;
    }
    goto LABEL_9;
  }
  uint64_t v53 = a2;
  uint64_t v54 = 0;
  if (one-time initialization token for configCacheFile != -1) {
    swift_once();
  }
  uint64_t v22 = type metadata accessor for URL();
  uint64_t v23 = __swift_project_value_buffer(v22, (uint64_t)static CacheDirectory.configCacheFile);
  uint64_t v24 = *(void *)(v22 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v19, v23, v22);
  id v52 = *(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56);
  v52(v19, 0, 1, v22);
  v51[4] = type metadata accessor for ConfigCache();
  swift_allocObject();
  uint64_t v25 = ConfigCache.init(cacheFile:)((uint64_t)v19);
  a2 = v53;
  a1 = v54;
  v8[2] = v25;
  if (!a2) {
    goto LABEL_8;
  }
LABEL_3:
  swift_retain();
  v8[3] = a2;
  v8[4] = a3;
  if (a4)
  {
LABEL_4:
    swift_unknownObjectRetain();
    uint64_t v20 = a4;
    uint64_t v21 = v58;
    goto LABEL_12;
  }
LABEL_9:
  uint64_t v30 = one-time initialization token for activeUseCaseTrackerFile;
  swift_unknownObjectRetain();
  uint64_t v21 = v58;
  if (v30 != -1) {
    swift_once();
  }
  uint64_t v31 = type metadata accessor for URL();
  uint64_t v32 = __swift_project_value_buffer(v31, (uint64_t)static CacheDirectory.activeUseCaseTrackerFile);
  uint64_t v33 = *(void *)(v31 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))(v17, v32, v31);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(v17, 0, 1, v31);
  uint64_t v20 = specialized ActiveUseCaseTracker.__allocating_init(persistenceFile:)((uint64_t)v17);
LABEL_12:
  v8[5] = v20;
  id v34 = v57;
  if (v57)
  {
    swift_retain();
    uint64_t v35 = v34;
  }
  else
  {
    swift_retain();
    uint64_t v35 = specialized AllowList.__allocating_init()();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<AllowList, os_unfair_lock_s>);
  uint64_t v36 = swift_allocObject();
  *(_DWORD *)(v36 + 24) = 0;
  *(void *)(v36 + 16) = v35;
  uint64_t v37 = v56;
  v8[6] = v36;
  v8[7] = v37;
  v8[8] = v21;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinator<String, ()>);
  uint64_t v38 = swift_allocObject();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_defaultActor_initialize();
  *(void *)(v38 + 112) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  v8[9] = v38;
  RequestsManager.loadDynamicAllowList()();
  if (!v39)
  {
    swift_release();
    swift_release();
    swift_release();
LABEL_22:
    swift_release();
    swift_unknownObjectRelease();
    goto LABEL_23;
  }
  if (one-time initialization token for daemon != -1) {
    swift_once();
  }
  uint64_t v40 = type metadata accessor for Logger();
  __swift_project_value_buffer(v40, (uint64_t)static Logger.daemon);
  id v41 = v39;
  id v42 = v39;
  uint64_t v43 = Logger.logObject.getter();
  os_log_type_t v44 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v43, v44))
  {
    swift_release();

    swift_release();
    swift_release();
    goto LABEL_22;
  }
  uint64_t v45 = swift_slowAlloc();
  uint64_t v54 = a1;
  uint64_t v46 = (uint8_t *)v45;
  unint64_t v47 = (void *)swift_slowAlloc();
  uint64_t v53 = a2;
  *(_DWORD *)uint64_t v46 = 138543362;
  id v48 = v39;
  uint64_t v49 = _swift_stdlib_bridgeErrorToNSError();
  uint64_t v59 = v49;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *unint64_t v47 = v49;

  _os_log_impl(&dword_249C3F000, v43, v44, "Failed to load dynamic allow list: %{public}@", v46, 0xCu);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
  swift_arrayDestroy();
  MEMORY[0x24C5B4790](v47, -1, -1);
  MEMORY[0x24C5B4790](v46, -1, -1);

  swift_release();
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  swift_release();

LABEL_23:
  swift_release();
  return v8;
}

uint64_t RequestsManager.keyRotation(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)(v2 + 16);
  uint64_t v7 = *(void *)(v2 + 48);
  uint64_t v8 = (void *)(v7 + 16);
  uint64_t v9 = (os_unfair_lock_s *)(v7 + 24);
  swift_retain();
  long long v18 = *(_OWORD *)(v3 + 24);
  swift_unknownObjectRetain();
  os_unfair_lock_lock(v9);
  closure #1 in OSAllocatedUnfairLock<A>.current.getter(v8, &v19);
  os_unfair_lock_unlock(v9);
  uint64_t v10 = v19;
  uint64_t v11 = *(void *)(v3 + 40);
  uint64_t v12 = *(void *)(v3 + 56);
  uint64_t v15 = v3 + 64;
  uint64_t v14 = *(void *)(v3 + 64);
  uint64_t v13 = *(void *)(v15 + 8);
  type metadata accessor for KeyRotation();
  uint64_t v16 = swift_allocObject();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_defaultActor_initialize();
  *(void *)(v16 + 224) = 0;
  *(_OWORD *)(v16 + 192) = 0u;
  *(_OWORD *)(v16 + 208) = 0u;
  *(void *)(v16 + 112) = v6;
  *(_OWORD *)(v16 + 120) = v18;
  *(void *)(v16 + 136) = v10;
  *(void *)(v16 + 144) = v11;
  *(void *)(v16 + 168) = a1;
  *(void *)(v16 + 176) = a2;
  *(void *)(v16 + 152) = v12;
  *(void *)(v16 + 160) = v14;
  *(void *)(v16 + 184) = v13;
  return v16;
}

uint64_t RequestsManager.rotateKeysOffline(useCase:keyStatus:networkDelegation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[13] = a5;
  v6[14] = v5;
  v6[11] = a3;
  v6[12] = a4;
  v6[9] = a1;
  v6[10] = a2;
  v6[15] = type metadata accessor for AspireApiEvaluationKey(0);
  v6[16] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecretKey?);
  v6[17] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for SecretKey();
  v6[18] = v7;
  v6[19] = *(void *)(v7 - 8);
  v6[20] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiKeyStatus?);
  v6[21] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  v6[22] = swift_task_alloc();
  v6[23] = swift_task_alloc();
  v6[24] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  v6[25] = v8;
  v6[26] = *(void *)(v8 - 8);
  v6[27] = swift_task_alloc();
  v6[28] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserIdentifier?);
  v6[29] = swift_task_alloc();
  v6[30] = swift_task_alloc();
  v6[31] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for UserIdentifier();
  v6[32] = v9;
  v6[33] = *(void *)(v9 - 8);
  v6[34] = swift_task_alloc();
  v6[35] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UseCaseGroup?);
  v6[36] = swift_task_alloc();
  return MEMORY[0x270FA2498](RequestsManager.rotateKeysOffline(useCase:keyStatus:networkDelegation:), 0, 0);
}

uint64_t RequestsManager.rotateKeysOffline(useCase:keyStatus:networkDelegation:)()
{
  id v39 = v0;
  if (one-time initialization token for daemon != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.daemon);
  swift_bridgeObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  unint64_t v5 = v0[10];
  if (v4)
  {
    uint64_t v6 = v0[9];
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    v38[0] = v8;
    *(_DWORD *)uint64_t v7 = 136446210;
    swift_bridgeObjectRetain();
    v0[8] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v5, v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_249C3F000, v2, v3, "rotateKeysOffline for use case %{public}s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5B4790](v8, -1, -1);
    MEMORY[0x24C5B4790](v7, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v9 = *(os_unfair_lock_s **)(v0[14] + 48);
  uint64_t v10 = v9 + 4;
  uint64_t v11 = v9 + 6;
  os_unfair_lock_lock(v9 + 6);
  closure #1 in OSAllocatedUnfairLock<A>.current.getter(v10, v38);
  os_unfair_lock_unlock(v11);
  uint64_t v12 = *(void *)(v38[0] + 48);
  swift_bridgeObjectRetain();
  swift_release();
  if (!*(void *)(v12 + 16)) {
    goto LABEL_13;
  }
  uint64_t v14 = v0[9];
  uint64_t v13 = v0[10];
  swift_bridgeObjectRetain();
  uint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(v14, v13, MEMORY[0x263F8D2A8], (uint64_t (*)(uint64_t, uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
  if ((v16 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_13:
    swift_bridgeObjectRelease();
LABEL_14:
    type metadata accessor for CipherMLError();
    _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v28 = (uint64_t (*)(void))v0[1];
    return v28();
  }
  uint64_t v17 = (uint64_t *)(*(void *)(v12 + 56) + 16 * v15);
  uint64_t v18 = *v17;
  v0[37] = *v17;
  uint64_t v19 = v17[1];
  v0[38] = v19;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  os_unfair_lock_lock(v11);
  closure #1 in OSAllocatedUnfairLock<A>.current.getter(v10, v38);
  os_unfair_lock_unlock(v11);
  uint64_t v20 = *(void *)(v38[0] + 32);
  swift_bridgeObjectRetain();
  swift_release();
  if (*(void *)(v20 + 16))
  {
    swift_bridgeObjectRetain();
    uint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v19, MEMORY[0x263F8D2A8], (uint64_t (*)(uint64_t, uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
    uint64_t v22 = v0[36];
    if (v23)
    {
      uint64_t v24 = v21;
      uint64_t v25 = *(void *)(v20 + 56);
      uint64_t v26 = type metadata accessor for UseCaseGroup();
      uint64_t v27 = *(void *)(v26 - 8);
      outlined init with copy of AspireApiKeyStatus(v25 + *(void *)(v27 + 72) * v24, v22, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v27 + 56))(v22, 0, 1, v26);
    }
    else
    {
      uint64_t v26 = type metadata accessor for UseCaseGroup();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v22, 1, 1, v26);
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v30 = v0[36];
    uint64_t v26 = type metadata accessor for UseCaseGroup();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v30, 1, 1, v26);
  }
  uint64_t v31 = v0[36];
  swift_bridgeObjectRelease();
  type metadata accessor for UseCaseGroup();
  int v32 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 48))(v31, 1, v26);
  uint64_t v33 = v0[36];
  if (v32 == 1)
  {
    swift_bridgeObjectRelease();
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v33, &demangling cache variable for type metadata for UseCaseGroup?);
    goto LABEL_14;
  }
  uint64_t v34 = v0[13];
  uint64_t v35 = v0[12];
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v0[36], &demangling cache variable for type metadata for UseCaseGroup?);
  v0[39] = RequestsManager.keyRotation(for:)(v35, v34);
  uint64_t v36 = (void *)swift_task_alloc();
  v0[40] = v36;
  *uint64_t v36 = v0;
  v36[1] = RequestsManager.rotateKeysOffline(useCase:keyStatus:networkDelegation:);
  uint64_t v37 = v0[35];
  return KeyRotation.rotateUserId(groupName:)(v37, v18, v19);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 328) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = RequestsManager.rotateKeysOffline(useCase:keyStatus:networkDelegation:);
  }
  else
  {
    uint64_t v2 = RequestsManager.rotateKeysOffline(useCase:keyStatus:networkDelegation:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t inited;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = *(void *)(v0 + 88);
  os_log_type_t v3 = *(void *)(v0 + 72);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AspireApiKeyStatus>);
  BOOL v4 = type metadata accessor for AspireApiKeyStatus(0);
  *(void *)(v0 + 336) = v4;
  unint64_t v5 = *(void *)(v4 - 8);
  *(void *)(v0 + 344) = v5;
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  *(_DWORD *)(v0 + 416) = v6;
  uint64_t v7 = (v6 + 32) & ~(unint64_t)v6;
  uint64_t v8 = swift_allocObject();
  *(void *)(v0 + 352) = v8;
  *(_OWORD *)(v8 + 16) = xmmword_249E85E40;
  outlined init with copy of AspireApiKeyStatus(v2, v8 + v7, type metadata accessor for AspireApiKeyStatus);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_249E85E40;
  *(void *)(inited + 32) = v3;
  *(void *)(inited + 40) = v1;
  swift_bridgeObjectRetain();
  uint64_t v10 = specialized Set.init<A>(_:)(inited);
  *(void *)(v0 + 360) = v10;
  swift_setDeallocating();
  swift_arrayDestroy();
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v0 + 368) = v11;
  *uint64_t v11 = v0;
  v11[1] = RequestsManager.rotateKeysOffline(useCase:keyStatus:networkDelegation:);
  uint64_t v12 = *(void *)(v0 + 304);
  uint64_t v13 = *(void *)(v0 + 296);
  uint64_t v14 = *(void *)(v0 + 280);
  uint64_t v15 = *(void *)(v0 + 248);
  return KeyRotation.collectKeyStatusesToUpload(groupName:userId:keyStatuses:activeUseCases:)(v15, v13, v12, v14, v8, v10);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(void, unint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t ObjectType;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v48;

  uint64_t v1 = *(void *)(v0 + 256);
  uint64_t v2 = *(void *)(v0 + 264);
  os_log_type_t v3 = *(void *)(v0 + 240);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(*(void *)(v0 + 248), v3, &demangling cache variable for type metadata for UserIdentifier?);
  BOOL v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1);
  unint64_t v5 = *(void *)(v0 + 376);
  if (v4 == 1)
  {
    uint64_t v6 = *(void *)(v0 + 280);
    uint64_t v8 = *(void *)(v0 + 240);
    uint64_t v7 = *(void *)(v0 + 248);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v7, &demangling cache variable for type metadata for UserIdentifier?);
    outlined destroy of UserIdentifier(v6, (uint64_t (*)(void))type metadata accessor for UserIdentifier);
    uint64_t v9 = v8;
    uint64_t v10 = &demangling cache variable for type metadata for UserIdentifier?;
LABEL_8:
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v9, v10);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v21 = *(uint64_t (**)(void, unint64_t))(v0 + 8);
    return v21(0, 0xF000000000000000);
  }
  outlined init with take of UserIdentifier(*(void *)(v0 + 240), *(void *)(v0 + 272), (uint64_t (*)(void))type metadata accessor for UserIdentifier);
  if (*(void *)(v5 + 16))
  {
    outlined init with copy of AspireApiKeyStatus(*(void *)(v0 + 376)+ ((*(unsigned __int8 *)(v0 + 416) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 416)), *(void *)(v0 + 168), type metadata accessor for AspireApiKeyStatus);
    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v11 = 1;
  }
  uint64_t v12 = *(void *)(v0 + 336);
  uint64_t v13 = *(void *)(v0 + 344);
  uint64_t v14 = *(void *)(v0 + 168);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(v14, v11, 1, v12);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v14, 1, v12) == 1)
  {
    char v16 = *(void *)(v0 + 272);
    uint64_t v15 = *(void *)(v0 + 280);
    uint64_t v17 = *(void *)(v0 + 248);
    uint64_t v18 = *(void *)(v0 + 200);
    uint64_t v19 = *(void *)(v0 + 208);
    uint64_t v20 = *(void *)(v0 + 192);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(*(void *)(v0 + 168), &demangling cache variable for type metadata for AspireApiKeyStatus?);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56))(v20, 1, 1, v18);
    swift_release();
    swift_bridgeObjectRelease();
    outlined destroy of UserIdentifier(v16, (uint64_t (*)(void))type metadata accessor for UserIdentifier);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v17, &demangling cache variable for type metadata for UserIdentifier?);
    outlined destroy of UserIdentifier(v15, (uint64_t (*)(void))type metadata accessor for UserIdentifier);
    uint64_t v10 = &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?;
    uint64_t v9 = v20;
    goto LABEL_8;
  }
  char v23 = *(void *)(v0 + 200);
  uint64_t v24 = *(void *)(v0 + 208);
  uint64_t v25 = *(void *)(v0 + 184);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(*(void *)(v0 + 168) + *(int *)(*(void *)(v0 + 336) + 24), v25, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  uint64_t v26 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48);
  *(void *)(v0 + 392) = v26;
  *(void *)(v0 + 400) = (v24 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
  if (v26(v25, 1, v23) == 1)
  {
    uint64_t v28 = *(void *)(v0 + 192);
    uint64_t v27 = *(void *)(v0 + 200);
    id v29 = *(void *)(v0 + 184);
    *(void *)uint64_t v28 = MEMORY[0x263F8EE78];
    *(unsigned char *)(v28 + 8) = 0;
    UnknownStorage.init()();
    uint64_t v30 = v28 + *(int *)(v27 + 28);
    uint64_t v31 = type metadata accessor for AspireHeEncryptionParameters(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v30, 1, 1, v31);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v29, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  }
  else
  {
    outlined init with take of UserIdentifier(*(void *)(v0 + 184), *(void *)(v0 + 192), type metadata accessor for AspireHeEvaluationKeyConfig);
  }
  uint64_t v33 = *(void *)(v0 + 264);
  int v32 = *(void *)(v0 + 272);
  uint64_t v34 = *(void *)(v0 + 256);
  uint64_t v35 = *(void *)(v0 + 224);
  uint64_t v36 = *(void *)(v0 + 232);
  uint64_t v37 = *(void *)(v0 + 200);
  uint64_t v38 = *(void *)(v0 + 208);
  id v39 = *(void *)(v0 + 192);
  uint64_t v40 = *(void *)(v0 + 112);
  outlined destroy of UserIdentifier(*(void *)(v0 + 168), type metadata accessor for AspireApiKeyStatus);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v38 + 56))(v39, 0, 1, v37);
  outlined init with take of UserIdentifier(v39, v35, type metadata accessor for AspireHeEvaluationKeyConfig);
  id v41 = *(void *)(v40 + 32);
  uint64_t ObjectType = swift_getObjectType();
  outlined init with copy of AspireApiKeyStatus(v32, v36, (uint64_t (*)(void))type metadata accessor for UserIdentifier);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v33 + 56))(v36, 0, 1, v34);
  unint64_t v47 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v41 + 16)
                                                                            + **(int **)(v41 + 16));
  uint64_t v43 = (void *)swift_task_alloc();
  *(void *)(v0 + 408) = v43;
  NSObject *v43 = v0;
  v43[1] = RequestsManager.rotateKeysOffline(useCase:keyStatus:networkDelegation:);
  uint64_t v45 = *(void *)(v0 + 296);
  os_log_type_t v44 = *(void *)(v0 + 304);
  uint64_t v46 = *(void *)(v0 + 232);
  return v47(v45, v44, v46, ObjectType, v41);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 232);
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v1, &demangling cache variable for type metadata for UserIdentifier?);
  return MEMORY[0x270FA2498](RequestsManager.rotateKeysOffline(useCase:keyStatus:networkDelegation:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, unint64_t);
  uint64_t (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;

  uint64_t v1 = v0[48];
  uint64_t v2 = specialized Message.hash()();
  if (v1)
  {
    unint64_t v5 = v0[34];
    BOOL v4 = v0[35];
    uint64_t v6 = v0[31];
    uint64_t v7 = v0[28];
    swift_release();
    outlined destroy of UserIdentifier(v7, type metadata accessor for AspireHeEvaluationKeyConfig);
    outlined destroy of UserIdentifier(v5, (uint64_t (*)(void))type metadata accessor for UserIdentifier);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v6, &demangling cache variable for type metadata for UserIdentifier?);
    outlined destroy of UserIdentifier(v4, (uint64_t (*)(void))type metadata accessor for UserIdentifier);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
  uint64_t v10 = (uint64_t)v2;
  uint64_t v11 = v3;
  uint64_t v12 = *(void *)(v0[34] + *(int *)(v0[32] + 24));
  if (*(void *)(v12 + 16))
  {
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v10, v11);
    uint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v11, MEMORY[0x263F06F38], (uint64_t (*)(uint64_t, uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
    if (v14)
    {
      outlined init with copy of AspireApiKeyStatus(*(void *)(v12 + 56) + *(void *)(v0[19] + 72) * v13, v0[17], (uint64_t (*)(void))type metadata accessor for SecretKey);
      uint64_t v15 = 0;
    }
    else
    {
      uint64_t v15 = 1;
    }
    char v16 = v0[18];
    uint64_t v17 = v0[19];
    uint64_t v18 = v0[17];
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56))(v18, v15, 1, v16);
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(v10, v11);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v18, 1, v16) != 1)
    {
      uint64_t v25 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[49];
      uint64_t v26 = v0[42];
      uint64_t v27 = v0[25];
      uint64_t v28 = v0[22];
      id v29 = v0[11];
      outlined init with take of UserIdentifier(v0[17], v0[20], (uint64_t (*)(void))type metadata accessor for SecretKey);
      outlined init with copy of AMDPbHEConfig.OneOf_Config?(v29 + *(int *)(v26 + 24), v28, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
      uint64_t v30 = v25(v28, 1, v27);
      uint64_t v31 = v0[27];
      if (v30 == 1)
      {
        int v32 = v0[25];
        uint64_t v33 = v0[22];
        *(void *)uint64_t v31 = MEMORY[0x263F8EE78];
        *(unsigned char *)(v31 + 8) = 0;
        UnknownStorage.init()();
        uint64_t v34 = v31 + *(int *)(v32 + 28);
        uint64_t v35 = type metadata accessor for AspireHeEncryptionParameters(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v34, 1, 1, v35);
        outlined destroy of AMDPbHEConfig.OneOf_Config?(v33, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
      }
      else
      {
        outlined init with take of UserIdentifier(v0[22], v0[27], type metadata accessor for AspireHeEvaluationKeyConfig);
      }
      generateEvaluationKey(secretKey:config:)(v0[20], v0[27], v0[16]);
      outlined destroy of UserIdentifier(v0[27], type metadata accessor for AspireHeEvaluationKeyConfig);
      _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiEvaluationKey and conformance AspireApiEvaluationKey, (void (*)(uint64_t))type metadata accessor for AspireApiEvaluationKey);
      uint64_t v36 = Message.serializedData(partial:)();
      uint64_t v38 = v37;
      uint64_t v40 = v0[34];
      id v39 = v0[35];
      id v41 = v0[31];
      id v42 = v0[28];
      os_log_type_t v44 = v0[16];
      uint64_t v46 = v0[20];
      swift_release();
      outlined consume of Data._Representation(v10, v11);
      outlined destroy of UserIdentifier(v44, type metadata accessor for AspireApiEvaluationKey);
      outlined destroy of UserIdentifier(v46, (uint64_t (*)(void))type metadata accessor for SecretKey);
      outlined destroy of UserIdentifier(v42, type metadata accessor for AspireHeEvaluationKeyConfig);
      outlined destroy of UserIdentifier(v40, (uint64_t (*)(void))type metadata accessor for UserIdentifier);
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v41, &demangling cache variable for type metadata for UserIdentifier?);
      outlined destroy of UserIdentifier(v39, (uint64_t (*)(void))type metadata accessor for UserIdentifier);
      uint64_t v43 = v36;
      uint64_t v45 = v38;
      goto LABEL_12;
    }
  }
  else
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(v0[19] + 56))(v0[17], 1, 1, v0[18]);
  }
  uint64_t v20 = v0[34];
  uint64_t v19 = v0[35];
  uint64_t v21 = v0[31];
  uint64_t v22 = v0[28];
  char v23 = v0[17];
  swift_release();
  outlined consume of Data._Representation(v10, v11);
  outlined destroy of UserIdentifier(v22, type metadata accessor for AspireHeEvaluationKeyConfig);
  outlined destroy of UserIdentifier(v20, (uint64_t (*)(void))type metadata accessor for UserIdentifier);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v21, &demangling cache variable for type metadata for UserIdentifier?);
  outlined destroy of UserIdentifier(v19, (uint64_t (*)(void))type metadata accessor for UserIdentifier);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v23, &demangling cache variable for type metadata for SecretKey?);
  uint64_t v43 = 0;
  uint64_t v45 = 0xF000000000000000;
LABEL_12:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v24 = (uint64_t (*)(uint64_t, unint64_t))v0[1];
  return v24(v43, v45);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void *)(v0 + 280);
  swift_release();
  outlined destroy of UserIdentifier(v1, (uint64_t (*)(void))type metadata accessor for UserIdentifier);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t RequestsManager.rotateKeysOffline(useCase:keyStatus:networkDelegation:)(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 376) = a1;
  *(void *)(v3 + 384) = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  if (v1)
  {
    swift_bridgeObjectRelease();
    BOOL v4 = RequestsManager.rotateKeysOffline(useCase:keyStatus:networkDelegation:);
  }
  else
  {
    BOOL v4 = RequestsManager.rotateKeysOffline(useCase:keyStatus:networkDelegation:);
  }
  return MEMORY[0x270FA2498](v4, 0, 0);
}

uint64_t specialized Set.init<A>(_:)(uint64_t a1)
{
  uint64_t result = Set.init(minimumCapacity:)();
  int64_t v3 = 0;
  uint64_t v18 = result;
  uint64_t v4 = a1 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a1 + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      unint64_t v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    int64_t v14 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v14 >= v8) {
      goto LABEL_23;
    }
    unint64_t v15 = *(void *)(v4 + 8 * v14);
    ++v3;
    if (!v15)
    {
      int64_t v3 = v14 + 1;
      if (v14 + 1 >= v8) {
        goto LABEL_23;
      }
      unint64_t v15 = *(void *)(v4 + 8 * v3);
      if (!v15)
      {
        int64_t v3 = v14 + 2;
        if (v14 + 2 >= v8) {
          goto LABEL_23;
        }
        unint64_t v15 = *(void *)(v4 + 8 * v3);
        if (!v15)
        {
          int64_t v3 = v14 + 3;
          if (v14 + 3 >= v8) {
            goto LABEL_23;
          }
          unint64_t v15 = *(void *)(v4 + 8 * v3);
          if (!v15) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v7 = (v15 - 1) & v15;
    unint64_t v10 = __clz(__rbit64(v15)) + (v3 << 6);
LABEL_5:
    uint64_t v11 = (Swift::Int *)(*(void *)(a1 + 48) + 16 * v10);
    Swift::Int v12 = *v11;
    Swift::Int v13 = v11[1];
    swift_bridgeObjectRetain();
    specialized Set._Variant.insert(_:)(&v17, v12, v13);
    uint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v16 = v14 + 4;
  if (v16 >= v8)
  {
LABEL_23:
    swift_release();
    return v18;
  }
  unint64_t v15 = *(void *)(v4 + 8 * v16);
  if (v15)
  {
    int64_t v3 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v3 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v3 >= v8) {
      goto LABEL_23;
    }
    unint64_t v15 = *(void *)(v4 + 8 * v3);
    ++v16;
    if (v15) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  Swift::Int *v4;
  Swift::Int v5;
  Swift::Int v6;
  Swift::Int v7;
  uint64_t v8;

  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = Set.init(minimumCapacity:)();
  int64_t v8 = result;
  if (v2)
  {
    uint64_t v4 = (Swift::Int *)(a1 + 40);
    do
    {
      uint64_t v5 = *(v4 - 1);
      uint64_t v6 = *v4;
      swift_bridgeObjectRetain();
      specialized Set._Variant.insert(_:)(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

char *specialized Message.hash()()
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v1 = type metadata accessor for SHA256();
  uint64_t v25 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  int64_t v3 = (char *)&v20 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for SHA256Digest();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  unint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AspireHeEvaluationKeyConfig(0);
  _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_0(&lazy protocol witness table cache variable for type AspireHeEvaluationKeyConfig and conformance AspireHeEvaluationKeyConfig, (void (*)(uint64_t))type metadata accessor for AspireHeEvaluationKeyConfig);
  uint64_t v8 = Message.serializedData(partial:)();
  if (!v0)
  {
    uint64_t v10 = v8;
    unint64_t v11 = v9;
    uint64_t v24 = v7;
    uint64_t v22 = _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, MEMORY[0x263F047F8]);
    char v23 = v3;
    dispatch thunk of HashFunction.init()();
    uint64_t v12 = v5;
    switch(v11 >> 62)
    {
      case 1uLL:
        uint64_t v21 = v1;
        int64_t v16 = v23;
        Swift::Int v17 = v24;
        if (v10 >> 32 < (int)v10) {
          __break(1u);
        }
        uint64_t v20 = v11 & 0x3FFFFFFFFFFFFFFFLL;
        outlined copy of Data._Representation(v10, v11);
        specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)v10, v10 >> 32);
        outlined consume of Data._Representation(v10, v11);
        uint64_t v1 = v21;
        break;
      case 2uLL:
        uint64_t v13 = *(void *)(v10 + 16);
        uint64_t v14 = *(void *)(v10 + 24);
        outlined copy of Data._Representation(v10, v11);
        swift_retain();
        swift_retain();
        uint64_t v15 = v13;
        int64_t v16 = v23;
        specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v15, v14);
        Swift::Int v17 = v24;
        swift_release();
        swift_release();
        outlined consume of Data._Representation(v10, v11);
        break;
      case 3uLL:
        memset(v27, 0, 14);
        goto LABEL_6;
      default:
        v27[0] = v10;
        LOWORD(v27[1]) = v11;
        BYTE2(v27[1]) = BYTE2(v11);
        BYTE3(v27[1]) = BYTE3(v11);
        BYTE4(v27[1]) = BYTE4(v11);
        BYTE5(v27[1]) = BYTE5(v11);
LABEL_6:
        int64_t v16 = v23;
        dispatch thunk of HashFunction.update(bufferPointer:)();
        outlined consume of Data._Representation(v10, v11);
        Swift::Int v17 = v24;
        break;
    }
    dispatch thunk of HashFunction.finalize()();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v16, v1);
    outlined consume of Data._Representation(v10, v11);
    uint64_t v28 = v4;
    uint64_t v29 = _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_0(&lazy protocol witness table cache variable for type SHA256Digest and conformance SHA256Digest, MEMORY[0x263F045C0]);
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v27);
    (*(void (**)(uint64_t *, char *, uint64_t))(v12 + 16))(boxed_opaque_existential_1, v17, v4);
    __swift_project_boxed_opaque_existential_1(v27, v28);
    dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v17, v4);
    unint64_t v7 = v26;
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v27);
  }
  return v7;
}

void RequestsManager.validateConfig(useCase:keyStatus:encryptionParams:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v148 = a4;
  uint64_t v146 = a3;
  uint64_t v143 = type metadata accessor for AspireApiKeyStatus(0);
  MEMORY[0x270FA5388](v143);
  uint64_t v140 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&v124 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v9);
  uint64_t v131 = (uint64_t)&v124 - v10;
  uint64_t v138 = type metadata accessor for UnknownStorage();
  uint64_t v137 = *(void *)(v138 - 8);
  MEMORY[0x270FA5388](v138);
  uint64_t v136 = (char *)&v124 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v139 = (char *)&v124 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v127 = (uint64_t)&v124 - v15;
  MEMORY[0x270FA5388](v16);
  uint64_t v133 = (uint64_t)&v124 - v17;
  uint64_t v144 = type metadata accessor for AspireHeEncryptionParameters(0);
  uint64_t v141 = *(void *)(v144 - 8);
  MEMORY[0x270FA5388](v144);
  int v129 = (uint64_t *)((char *)&v124 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v19);
  uint64_t v126 = (uint64_t *)((char *)&v124 - v20);
  MEMORY[0x270FA5388](v21);
  uint64_t v130 = (uint64_t)&v124 - v22;
  MEMORY[0x270FA5388](v23);
  uint64_t v134 = (uint64_t)&v124 - v24;
  MEMORY[0x270FA5388](v25);
  int v135 = (uint64_t *)((char *)&v124 - v26);
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  MEMORY[0x270FA5388](v27 - 8);
  uint64_t v128 = (uint64_t)&v124 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v29);
  uint64_t v124 = (uint64_t)&v124 - v30;
  MEMORY[0x270FA5388](v31);
  uint64_t v132 = (uint64_t)&v124 - v32;
  uint64_t v142 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  uint64_t v147 = *(void *)(v142 - 8);
  MEMORY[0x270FA5388](v142);
  uint64_t v149 = (uint64_t)&v124 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v34);
  unint64_t v125 = (uint64_t *)((char *)&v124 - v35);
  MEMORY[0x270FA5388](v36);
  uint64_t v145 = (uint64_t *)((char *)&v124 - v37);
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UseCaseGroup?);
  MEMORY[0x270FA5388](v38 - 8);
  uint64_t v40 = (char *)&v124 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = type metadata accessor for UseCaseGroup();
  uint64_t v42 = *(void *)(v41 - 8);
  MEMORY[0x270FA5388](v41);
  uint64_t v150 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))((char *)&v124 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v44);
  uint64_t v152 = (uint64_t)&v124 - v45;
  uint64_t v46 = *(os_unfair_lock_s **)(v4 + 48);
  unint64_t v47 = v46 + 4;
  id v48 = v46 + 6;
  os_unfair_lock_lock(v46 + 6);
  closure #1 in OSAllocatedUnfairLock<A>.current.getter(v47, v154);
  if (v5)
  {
    os_unfair_lock_unlock(v48);
    __break(1u);
  }
  else
  {
    os_unfair_lock_unlock(v48);
    uint64_t v151 = a1;
    unint64_t v153 = a2;
    AllowList.group(useCase:)(a1, a2, (uint64_t)v40);
    swift_release();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41) == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v40, &demangling cache variable for type metadata for UseCaseGroup?);
      if (one-time initialization token for daemon != -1) {
        swift_once();
      }
      uint64_t v49 = type metadata accessor for Logger();
      __swift_project_value_buffer(v49, (uint64_t)static Logger.daemon);
      unint64_t v50 = v153;
      swift_bridgeObjectRetain_n();
      id v51 = Logger.logObject.getter();
      os_log_type_t v52 = static os_log_type_t.error.getter();
      BOOL v53 = os_log_type_enabled(v51, v52);
      uint64_t v54 = v151;
      if (v53)
      {
        uint64_t v55 = (uint8_t *)swift_slowAlloc();
        uint64_t v56 = swift_slowAlloc();
        v154[0] = v56;
        *(_DWORD *)uint64_t v55 = 136446210;
        swift_bridgeObjectRetain();
        uint64_t v155 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, v50, v154);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_249C3F000, v51, v52, "No group associated with use-case '%{public}s'", v55, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x24C5B4790](v56, -1, -1);
        MEMORY[0x24C5B4790](v55, -1, -1);
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      type metadata accessor for CipherMLError();
      _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
      swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
    }
    else
    {
      uint64_t v57 = v152;
      outlined init with take of UserIdentifier((uint64_t)v40, v152, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
      os_unfair_lock_lock(v48);
      closure #1 in OSAllocatedUnfairLock<A>.current.getter(v47, v154);
      os_unfair_lock_unlock(v48);
      uint64_t v58 = v148;
      char v59 = AllowList.isAllowListed(group:encryptionParameters:)(v57, v148);
      uint64_t v61 = v149;
      uint64_t v60 = (uint64_t)v150;
      char v62 = v59;
      swift_release();
      if (v62)
      {
        uint64_t v63 = v132;
        outlined init with copy of AMDPbHEConfig.OneOf_Config?(v146 + *(int *)(v143 + 24), v132, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
        uint64_t v64 = v147 + 48;
        uint64_t v65 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v147 + 48);
        uint64_t v66 = v142;
        int v67 = v65(v63, 1, v142);
        uint64_t v147 = v64;
        uint64_t v68 = v145;
        if (v67 == 1)
        {
          *uint64_t v145 = MEMORY[0x263F8EE78];
          *((unsigned char *)v68 + 8) = 0;
          UnknownStorage.init()();
          uint64_t v69 = v141;
          uint64_t v70 = v144;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v141 + 56))((char *)v68 + *(int *)(v66 + 28), 1, 1, v144);
          outlined destroy of AMDPbHEConfig.OneOf_Config?(v63, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
        }
        else
        {
          outlined init with take of UserIdentifier(v63, (uint64_t)v145, type metadata accessor for AspireHeEvaluationKeyConfig);
          uint64_t v70 = v144;
          uint64_t v69 = v141;
        }
        uint64_t v87 = v133;
        outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v68 + *(int *)(v66 + 28), v133, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
        uint64_t v88 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v69 + 48);
        int v89 = v88(v87, 1, v70);
        uint64_t v149 = v69 + 48;
        uint64_t v150 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v65;
        uint64_t v140 = v88;
        uint64_t v90 = v135;
        if (v89 == 1)
        {
          *int v135 = 0;
          v90[1] = 0;
          v90[2] = MEMORY[0x263F8EE78];
          v90[3] = 0;
          *((unsigned char *)v90 + 32) = 1;
          v90[5] = 0;
          *((unsigned char *)v90 + 48) = 1;
          v90[7] = 0;
          *((unsigned char *)v90 + 64) = 1;
          UnknownStorage.init()();
          outlined destroy of AMDPbHEConfig.OneOf_Config?(v87, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
        }
        else
        {
          outlined init with take of UserIdentifier(v87, (uint64_t)v135, type metadata accessor for AspireHeEncryptionParameters);
        }
        outlined destroy of UserIdentifier((uint64_t)v145, type metadata accessor for AspireHeEvaluationKeyConfig);
        uint64_t v91 = v134;
        outlined init with copy of AspireApiKeyStatus(v58, v134, type metadata accessor for AspireHeEncryptionParameters);
        uint64_t v92 = v137;
        int v93 = v136;
        uint64_t v94 = v138;
        (*(void (**)(char *, char *, uint64_t))(v137 + 16))(v136, (char *)v90 + *(int *)(v70 + 40), v138);
        (*(void (**)(uint64_t, char *, uint64_t))(v92 + 40))(v91 + *(int *)(v70 + 40), v93, v94);
        v154[3] = v70;
        v154[4] = _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type AspireHeEncryptionParameters and conformance AspireHeEncryptionParameters, (void (*)(uint64_t))type metadata accessor for AspireHeEncryptionParameters);
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v154);
        outlined init with copy of AspireApiKeyStatus(v91, (uint64_t)boxed_opaque_existential_1, type metadata accessor for AspireHeEncryptionParameters);
        char v96 = dispatch thunk of Message.isEqualTo(message:)();
        outlined destroy of UserIdentifier(v91, type metadata accessor for AspireHeEncryptionParameters);
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v154);
        outlined destroy of UserIdentifier((uint64_t)v90, type metadata accessor for AspireHeEncryptionParameters);
        if ((v96 & 1) == 0)
        {
          if (one-time initialization token for daemon != -1) {
            swift_once();
          }
          uint64_t v97 = type metadata accessor for Logger();
          __swift_project_value_buffer(v97, (uint64_t)static Logger.daemon);
          uint64_t v98 = v131;
          outlined init with copy of AspireApiKeyStatus(v146, v131, type metadata accessor for AspireApiKeyStatus);
          uint64_t v99 = v130;
          outlined init with copy of AspireApiKeyStatus(v58, v130, type metadata accessor for AspireHeEncryptionParameters);
          swift_bridgeObjectRetain_n();
          uint64_t v100 = Logger.logObject.getter();
          int v101 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v100, (os_log_type_t)v101))
          {
            uint64_t v102 = swift_slowAlloc();
            uint64_t v103 = swift_slowAlloc();
            v154[0] = v103;
            *(_DWORD *)uint64_t v102 = 136446722;
            uint64_t v104 = v124;
            outlined init with copy of AMDPbHEConfig.OneOf_Config?(v98 + *(int *)(v143 + 24), v124, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
            uint64_t v105 = v142;
            if (v150(v104, 1, v142) == 1)
            {
              uint64_t v106 = v125;
              void *v125 = MEMORY[0x263F8EE78];
              *((unsigned char *)v106 + 8) = 0;
              UnknownStorage.init()();
              uint64_t v107 = v144;
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v141 + 56))((char *)v106 + *(int *)(v105 + 28), 1, 1, v144);
              outlined destroy of AMDPbHEConfig.OneOf_Config?(v104, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
            }
            else
            {
              uint64_t v106 = v125;
              outlined init with take of UserIdentifier(v104, (uint64_t)v125, type metadata accessor for AspireHeEvaluationKeyConfig);
              uint64_t v107 = v144;
            }
            uint64_t v116 = v127;
            outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v106 + *(int *)(v105 + 28), v127, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
            int v117 = v140(v116, 1, v107);
            LODWORD(v148) = v101;
            uint64_t v146 = v103;
            uint64_t v118 = v126;
            if (v117 == 1)
            {
              *uint64_t v126 = 0;
              v118[1] = 0;
              v118[2] = MEMORY[0x263F8EE78];
              v118[3] = 0;
              *((unsigned char *)v118 + 32) = 1;
              v118[5] = 0;
              *((unsigned char *)v118 + 48) = 1;
              v118[7] = 0;
              *((unsigned char *)v118 + 64) = 1;
              UnknownStorage.init()();
              outlined destroy of AMDPbHEConfig.OneOf_Config?(v116, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
            }
            else
            {
              outlined init with take of UserIdentifier(v116, (uint64_t)v126, type metadata accessor for AspireHeEncryptionParameters);
            }
            outlined destroy of UserIdentifier((uint64_t)v106, type metadata accessor for AspireHeEvaluationKeyConfig);
            Swift::String v119 = Message.textFormatString()();
            outlined destroy of UserIdentifier((uint64_t)v118, type metadata accessor for AspireHeEncryptionParameters);
            uint64_t v155 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v119._countAndFlagsBits, (unint64_t)v119._object, v154);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            outlined destroy of UserIdentifier(v131, type metadata accessor for AspireApiKeyStatus);
            *(_WORD *)(v102 + 12) = 2082;
            unint64_t v120 = v153;
            swift_bridgeObjectRetain();
            uint64_t v155 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v151, v120, v154);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v102 + 22) = 2082;
            uint64_t v121 = v130;
            Swift::String v122 = Message.textFormatString()();
            uint64_t v155 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v122._countAndFlagsBits, (unint64_t)v122._object, v154);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            outlined destroy of UserIdentifier(v121, type metadata accessor for AspireHeEncryptionParameters);
            _os_log_impl(&dword_249C3F000, v100, (os_log_type_t)v148, "Invalid key config encryptionParameters '%{public}s' for useCase '%{public}s', expected: '%{public}s'", (uint8_t *)v102, 0x20u);
            uint64_t v123 = v146;
            swift_arrayDestroy();
            MEMORY[0x24C5B4790](v123, -1, -1);
            MEMORY[0x24C5B4790](v102, -1, -1);
          }
          else
          {
            outlined destroy of UserIdentifier(v98, type metadata accessor for AspireApiKeyStatus);
            swift_bridgeObjectRelease_n();
            outlined destroy of UserIdentifier(v99, type metadata accessor for AspireHeEncryptionParameters);
          }

          type metadata accessor for CipherMLError();
          _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
          swift_allocError();
          swift_storeEnumTagMultiPayload();
          swift_willThrow();
        }
        uint64_t v115 = v152;
      }
      else
      {
        unint64_t v71 = v153;
        if (one-time initialization token for daemon != -1) {
          swift_once();
        }
        uint64_t v72 = type metadata accessor for Logger();
        __swift_project_value_buffer(v72, (uint64_t)static Logger.daemon);
        int v73 = v140;
        outlined init with copy of AspireApiKeyStatus(v146, (uint64_t)v140, type metadata accessor for AspireApiKeyStatus);
        outlined init with copy of AspireApiKeyStatus(v57, v60, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
        swift_bridgeObjectRetain_n();
        uint64_t v74 = Logger.logObject.getter();
        int v75 = static os_log_type_t.error.getter();
        BOOL v76 = os_log_type_enabled(v74, (os_log_type_t)v75);
        uint64_t v77 = (uint64_t)v139;
        if (v76)
        {
          LODWORD(v148) = v75;
          uint64_t v78 = swift_slowAlloc();
          uint64_t v146 = swift_slowAlloc();
          v154[0] = v146;
          *(_DWORD *)uint64_t v78 = 136446722;
          uint64_t v79 = (uint64_t)v73 + *(int *)(v143 + 24);
          uint64_t v80 = v128;
          outlined init with copy of AMDPbHEConfig.OneOf_Config?(v79, v128, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
          uint64_t v81 = v142;
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v147 + 48))(v80, 1, v142) == 1)
          {
            *(void *)uint64_t v61 = MEMORY[0x263F8EE78];
            *(unsigned char *)(v61 + 8) = 0;
            UnknownStorage.init()();
            uint64_t v82 = v74;
            uint64_t v83 = v80;
            uint64_t v84 = v141;
            uint64_t v85 = v144;
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v141 + 56))(v61 + *(int *)(v81 + 28), 1, 1, v144);
            uint64_t v86 = v83;
            uint64_t v74 = v82;
            unint64_t v71 = v153;
            outlined destroy of AMDPbHEConfig.OneOf_Config?(v86, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
          }
          else
          {
            outlined init with take of UserIdentifier(v80, v61, type metadata accessor for AspireHeEvaluationKeyConfig);
            uint64_t v85 = v144;
            uint64_t v84 = v141;
          }
          outlined init with copy of AMDPbHEConfig.OneOf_Config?(v61 + *(int *)(v81 + 28), v77, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v84 + 48))(v77, 1, v85) == 1)
          {
            uint64_t v108 = v129;
            *int v129 = 0;
            v108[1] = 0;
            v108[2] = MEMORY[0x263F8EE78];
            v108[3] = 0;
            *((unsigned char *)v108 + 32) = 1;
            v108[5] = 0;
            *((unsigned char *)v108 + 48) = 1;
            v108[7] = 0;
            *((unsigned char *)v108 + 64) = 1;
            uint64_t v109 = v108;
            UnknownStorage.init()();
            outlined destroy of AMDPbHEConfig.OneOf_Config?(v77, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
          }
          else
          {
            uint64_t v109 = v129;
            outlined init with take of UserIdentifier(v77, (uint64_t)v129, type metadata accessor for AspireHeEncryptionParameters);
          }
          outlined destroy of UserIdentifier(v149, type metadata accessor for AspireHeEvaluationKeyConfig);
          _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type AspireHeEncryptionParameters and conformance AspireHeEncryptionParameters, (void (*)(uint64_t))type metadata accessor for AspireHeEncryptionParameters);
          Swift::String v110 = Message.textFormatString()();
          outlined destroy of UserIdentifier((uint64_t)v109, type metadata accessor for AspireHeEncryptionParameters);
          uint64_t v155 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v110._countAndFlagsBits, (unint64_t)v110._object, v154);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          outlined destroy of UserIdentifier((uint64_t)v140, type metadata accessor for AspireApiKeyStatus);
          *(_WORD *)(v78 + 12) = 2082;
          swift_bridgeObjectRetain();
          uint64_t v155 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v151, v71, v154);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v78 + 22) = 2082;
          uint64_t v111 = (uint64_t)v150;
          uint64_t v112 = HE.SecurityLevel.rawValue.getter();
          uint64_t v155 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v112, v113, v154);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          outlined destroy of UserIdentifier(v111, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
          _os_log_impl(&dword_249C3F000, v74, (os_log_type_t)v148, "Invalid key config encryptionParameters '%{public}s' for useCase '%{public}s' and security level '%{public}s'", (uint8_t *)v78, 0x20u);
          uint64_t v114 = v146;
          swift_arrayDestroy();
          MEMORY[0x24C5B4790](v114, -1, -1);
          MEMORY[0x24C5B4790](v78, -1, -1);
        }
        else
        {
          outlined destroy of UserIdentifier((uint64_t)v73, type metadata accessor for AspireApiKeyStatus);
          swift_bridgeObjectRelease_n();
          outlined destroy of UserIdentifier(v60, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
        }

        type metadata accessor for CipherMLError();
        _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
        swift_allocError();
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v115 = v57;
      }
      outlined destroy of UserIdentifier(v115, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
    }
  }
}

uint64_t RequestsManager.validateDependentConfig(config:useCase:dependsOn:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[19] = a5;
  v6[20] = v5;
  v6[17] = a3;
  v6[18] = a4;
  v6[15] = a1;
  v6[16] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
  v6[21] = swift_task_alloc();
  v6[22] = type metadata accessor for AspireApiPIRConfig(0);
  v6[23] = swift_task_alloc();
  v6[24] = swift_task_alloc();
  v6[25] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiConfig?);
  v6[26] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for AspireApiConfig(0);
  v6[27] = v7;
  v6[28] = *(void *)(v7 - 8);
  v6[29] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
  v6[30] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPIRShardingFunction?);
  v6[31] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for AspirePirPIRShardingFunction(0);
  v6[32] = v8;
  v6[33] = *(void *)(v8 - 8);
  v6[34] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  v6[35] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for AspirePirKeywordPirParameters(0);
  v6[36] = v9;
  v6[37] = *(void *)(v9 - 8);
  v6[38] = swift_task_alloc();
  type metadata accessor for AspirePirPIRShardingFunctionDoubleMod(0);
  v6[39] = swift_task_alloc();
  v6[40] = swift_task_alloc();
  v6[41] = swift_task_alloc();
  v6[42] = swift_task_alloc();
  return MEMORY[0x270FA2498](RequestsManager.validateDependentConfig(config:useCase:dependsOn:), 0, 0);
}

uint64_t RequestsManager.validateDependentConfig(config:useCase:dependsOn:)()
{
  uint64_t v59 = v0;
  uint64_t v1 = *(void *)(v0 + 288);
  uint64_t v2 = *(void *)(v0 + 296);
  uint64_t v3 = *(void *)(v0 + 280);
  uint64_t v4 = *(void *)(*(void *)(v0 + 120) + *(int *)(*(void *)(v0 + 176) + 20))
     + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__keywordPirParams;
  swift_beginAccess();
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v4, v3, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  int v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1);
  uint64_t v6 = *(void *)(v0 + 304);
  if (v5 == 1)
  {
    uint64_t v7 = *(void *)(v0 + 280);
    uint64_t v8 = *(void *)(v0 + 288);
    uint64_t v9 = *(void *)(v0 + 256);
    uint64_t v10 = *(void *)(v0 + 264);
    *(void *)uint64_t v6 = 0;
    *(unsigned char *)(v6 + 8) = 0;
    UnknownStorage.init()();
    uint64_t v11 = v6 + *(int *)(v8 + 28);
    uint64_t v12 = type metadata accessor for AspirePirSymmetricPirClientConfig(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(v6 + *(int *)(v8 + 32), 1, 1, v9);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v7, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  }
  else
  {
    outlined init with take of UserIdentifier(*(void *)(v0 + 280), *(void *)(v0 + 304), type metadata accessor for AspirePirKeywordPirParameters);
  }
  uint64_t v13 = *(void *)(v0 + 256);
  uint64_t v14 = *(void *)(v0 + 264);
  uint64_t v15 = *(void *)(v0 + 248);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(*(void *)(v0 + 304) + *(int *)(*(void *)(v0 + 288) + 32), v15, &demangling cache variable for type metadata for AspirePirPIRShardingFunction?);
  int v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v15, 1, v13);
  uint64_t v17 = *(void *)(v0 + 272);
  if (v16 == 1)
  {
    uint64_t v18 = *(void *)(v0 + 248);
    uint64_t v19 = type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v17, 1, 1, v19);
    UnknownStorage.init()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v18, &demangling cache variable for type metadata for AspirePirPIRShardingFunction?);
  }
  else
  {
    outlined init with take of UserIdentifier(*(void *)(v0 + 248), *(void *)(v0 + 272), type metadata accessor for AspirePirPIRShardingFunction);
  }
  uint64_t v20 = *(void *)(v0 + 272);
  uint64_t v21 = *(void *)(v0 + 240);
  outlined destroy of UserIdentifier(*(void *)(v0 + 304), type metadata accessor for AspirePirKeywordPirParameters);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v20, v21, &demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
  outlined destroy of UserIdentifier(v20, type metadata accessor for AspirePirPIRShardingFunction);
  uint64_t v22 = type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function(0);
  int v23 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 48))(v21, 1, v22);
  uint64_t v24 = *(void *)(v0 + 240);
  if (v23 == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(*(void *)(v0 + 240), &demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
LABEL_16:
    if (one-time initialization token for daemon != -1) {
      swift_once();
    }
    uint64_t v43 = type metadata accessor for Logger();
    __swift_project_value_buffer(v43, (uint64_t)static Logger.daemon);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v44 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.error.getter();
    BOOL v46 = os_log_type_enabled(v44, v45);
    unint64_t v47 = *(void *)(v0 + 152);
    if (v46)
    {
      unint64_t v48 = *(void *)(v0 + 136);
      uint64_t v57 = *(void *)(v0 + 144);
      uint64_t v49 = *(void *)(v0 + 128);
      uint64_t v50 = swift_slowAlloc();
      uint64_t v51 = swift_slowAlloc();
      uint64_t v58 = v51;
      *(_DWORD *)uint64_t v50 = 136315394;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 40) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v49, v48, &v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v50 + 12) = 2080;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 48) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v57, v47, &v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_arrayDestroy();
      MEMORY[0x24C5B4790](v51, -1, -1);
      MEMORY[0x24C5B4790](v50, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }

LABEL_22:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    os_log_type_t v52 = *(uint64_t (**)(void))(v0 + 8);
    return v52(0);
  }
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined destroy of UserIdentifier(v24, type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function);
    goto LABEL_16;
  }
  uint64_t v25 = *(unsigned int **)(v0 + 336);
  outlined init with take of UserIdentifier(v24, (uint64_t)v25, type metadata accessor for AspirePirPIRShardingFunctionDoubleMod);
  uint64_t v26 = *v25;
  if (AspireApiPIRConfig.shardCount.getter() > v26)
  {
    if (one-time initialization token for daemon != -1) {
      swift_once();
    }
    uint64_t v27 = *(void *)(v0 + 336);
    uint64_t v28 = *(void *)(v0 + 312);
    uint64_t v29 = *(void *)(v0 + 184);
    uint64_t v30 = *(void *)(v0 + 120);
    uint64_t v31 = type metadata accessor for Logger();
    __swift_project_value_buffer(v31, (uint64_t)static Logger.daemon);
    outlined init with copy of AspireApiKeyStatus(v30, v29, type metadata accessor for AspireApiPIRConfig);
    outlined init with copy of AspireApiKeyStatus(v27, v28, type metadata accessor for AspirePirPIRShardingFunctionDoubleMod);
    swift_bridgeObjectRetain_n();
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.error.getter();
    BOOL v34 = os_log_type_enabled(v32, v33);
    uint64_t v35 = *(void *)(v0 + 336);
    uint64_t v36 = *(_DWORD **)(v0 + 312);
    uint64_t v37 = *(void *)(v0 + 184);
    unint64_t v38 = *(void *)(v0 + 136);
    if (v34)
    {
      uint64_t v56 = *(void *)(v0 + 336);
      uint64_t v39 = *(void *)(v0 + 128);
      uint64_t v40 = swift_slowAlloc();
      uint64_t v55 = swift_slowAlloc();
      uint64_t v58 = v55;
      *(_DWORD *)uint64_t v40 = 136315650;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 104) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v38, &v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v40 + 12) = 2048;
      uint64_t v41 = AspireApiPIRConfig.shardCount.getter();
      outlined destroy of UserIdentifier(v37, type metadata accessor for AspireApiPIRConfig);
      *(void *)(v0 + 112) = v41;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v40 + 22) = 1024;
      LODWORD(v39) = *v36;
      outlined destroy of UserIdentifier((uint64_t)v36, type metadata accessor for AspirePirPIRShardingFunctionDoubleMod);
      *(_DWORD *)(v0 + 360) = v39;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_249C3F000, v32, v33, "Dynamic configuration for '%s' has %ld shards that should be less than the dependent usecase which has %u shards.", (uint8_t *)v40, 0x1Cu);
      swift_arrayDestroy();
      MEMORY[0x24C5B4790](v55, -1, -1);
      MEMORY[0x24C5B4790](v40, -1, -1);

      uint64_t v42 = v56;
    }
    else
    {
      outlined destroy of UserIdentifier(*(void *)(v0 + 312), type metadata accessor for AspirePirPIRShardingFunctionDoubleMod);
      outlined destroy of UserIdentifier(v37, type metadata accessor for AspireApiPIRConfig);

      swift_bridgeObjectRelease_n();
      uint64_t v42 = v35;
    }
    outlined destroy of UserIdentifier(v42, type metadata accessor for AspirePirPIRShardingFunctionDoubleMod);
    goto LABEL_22;
  }
  uint64_t v54 = *(void *)(*(void *)(v0 + 160) + 16);
  *(void *)(v0 + 344) = v54;
  return MEMORY[0x270FA2498](RequestsManager.validateDependentConfig(config:useCase:dependsOn:), v54, 0);
}

{
  uint64_t *v0;
  uint64_t v2;

  ConfigCache.subscript.getter(v0[18], v0[19], v0[26]);
  return MEMORY[0x270FA2498](RequestsManager.validateDependentConfig(config:useCase:dependsOn:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  uint8_t *v12;
  uint64_t v13;
  os_unfair_lock_s *v14;
  os_unfair_lock_s *v15;
  os_unfair_lock_s *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  NSObject *v30;
  os_log_type_t v31;
  BOOL v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  BOOL v52;
  uint64_t v53;
  int *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;
  _DWORD *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76[2];
  uint64_t v77;
  uint64_t v78;

  uint64_t v77 = v0;
  uint64_t v1 = *(void *)(v0 + 208);
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(*(void *)(v0 + 224) + 48))(v1, 1, *(void *)(v0 + 216)) == 1)
  {
    uint64_t v2 = (uint64_t *)&demangling cache variable for type metadata for AspireApiConfig?;
LABEL_5:
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v1, v2);
    goto LABEL_6;
  }
  uint64_t v3 = *(void *)(v0 + 232);
  uint64_t v4 = *(void *)(v0 + 168);
  outlined init with take of UserIdentifier(v1, v3, type metadata accessor for AspireApiConfig);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v3, v4, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
  int v5 = type metadata accessor for AspireApiConfig.OneOf_Config(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5) == 1)
  {
    uint64_t v1 = *(void *)(v0 + 168);
    outlined destroy of UserIdentifier(*(void *)(v0 + 232), type metadata accessor for AspireApiConfig);
    uint64_t v2 = &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?;
    goto LABEL_5;
  }
  uint64_t v37 = *(void *)(v0 + 168);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined destroy of UserIdentifier(*(void *)(v0 + 232), type metadata accessor for AspireApiConfig);
    outlined destroy of UserIdentifier(v37, type metadata accessor for AspireApiConfig.OneOf_Config);
LABEL_6:
    if (one-time initialization token for daemon != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.daemon);
    swift_bridgeObjectRetain_n();
    uint64_t v7 = Logger.logObject.getter();
    uint64_t v8 = static os_log_type_t.error.getter();
    uint64_t v9 = os_log_type_enabled(v7, v8);
    uint64_t v10 = *(void *)(v0 + 152);
    if (v9)
    {
      uint64_t v11 = *(void *)(v0 + 144);
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      v76[0] = v13;
      *(_DWORD *)uint64_t v12 = 136446210;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 80) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v10, v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_249C3F000, v7, v8, "No dynamic PIR configuration for %{public}s!", v12, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C5B4790](v13, -1, -1);
      MEMORY[0x24C5B4790](v12, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    uint64_t v14 = *(os_unfair_lock_s **)(*(void *)(v0 + 160) + 48);
    uint64_t v15 = v14 + 4;
    int v16 = v14 + 6;
    os_unfair_lock_lock(v14 + 6);
    closure #1 in OSAllocatedUnfairLock<A>.current.getter(v15, v76);
    os_unfair_lock_unlock(v16);
    uint64_t v17 = *(void *)(v76[0] + 40);
    if (*(void *)(v17 + 16))
    {
      uint64_t v19 = *(void *)(v0 + 144);
      uint64_t v18 = *(void *)(v0 + 152);
      swift_bridgeObjectRetain();
      uint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(v19, v18, MEMORY[0x263F8D2A8], (uint64_t (*)(uint64_t, uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
      if (v21)
      {
        uint64_t v22 = *(void *)(v17 + 56) + (v20 << 6);
        int v23 = *(void *)(v22 + 40);
        uint64_t v24 = *(unsigned __int8 *)(v22 + 56);
        uint64_t v74 = *(void *)v22;
        uint64_t v25 = *(void *)(v22 + 8);
        uint64_t v26 = *(void *)(v22 + 16);
        uint64_t v27 = *(void *)(v22 + 24);
        uint64_t v28 = *(void *)(v22 + 32);
        uint64_t v72 = *(void *)(v22 + 48);
        outlined copy of UseCase(*(void *)v22, v25, v26, v27, v28, v23, v72, *(unsigned char *)(v22 + 56));
        swift_bridgeObjectRelease();
        swift_release();
        if (v24 == 1)
        {
          uint64_t v29 = *(unsigned int **)(v0 + 336);
          if (v74 < *v29)
          {
            outlined init with copy of AspireApiKeyStatus((uint64_t)v29, *(void *)(v0 + 320), type metadata accessor for AspirePirPIRShardingFunctionDoubleMod);
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain();
            int v67 = v25;
            unint64_t v71 = v23;
            outlined copy of UseCase(v74, v25, v26, v27, v28, v23, v72, 1);
            swift_bridgeObjectRetain();
            uint64_t v30 = Logger.logObject.getter();
            uint64_t v31 = static os_log_type_t.error.getter();
            uint64_t v32 = os_log_type_enabled(v30, v31);
            uint64_t v68 = *(void *)(v0 + 336);
            uint64_t v64 = *(_DWORD **)(v0 + 320);
            uint64_t v65 = *(void *)(v0 + 152);
            if (v32)
            {
              os_log_type_t v33 = *(void *)(v0 + 136);
              char v62 = *(void *)(v0 + 144);
              BOOL v34 = *(void *)(v0 + 128);
              uint64_t v35 = swift_slowAlloc();
              uint64_t v63 = swift_slowAlloc();
              v76[0] = v63;
              *(_DWORD *)uint64_t v35 = 136446978;
              swift_bridgeObjectRetain();
              *(void *)(v0 + 56) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v33, v76);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              *(_WORD *)(v35 + 12) = 1024;
              LODWORD(v33) = *v64;
              outlined destroy of UserIdentifier((uint64_t)v64, type metadata accessor for AspirePirPIRShardingFunctionDoubleMod);
              *(_DWORD *)(v0 + 352) = v33;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *(_WORD *)(v35 + 18) = 2048;
              outlined consume of UseCase(v74, v67, v26, v27, v28, v71, v72, 1);
              *(void *)(v0 + 64) = v74;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              outlined consume of UseCase(v74, v67, v26, v27, v28, v71, v72, 1);
              *(_WORD *)(v35 + 28) = 2082;
              swift_bridgeObjectRetain();
              *(void *)(v0 + 72) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v62, v65, v76);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              swift_arrayDestroy();
              MEMORY[0x24C5B4790](v63, -1, -1);
              MEMORY[0x24C5B4790](v35, -1, -1);
            }
            else
            {
              outlined consume of UseCase(v74, v25, v26, v27, v28, v71, v72, 1);
              outlined destroy of UserIdentifier((uint64_t)v64, type metadata accessor for AspirePirPIRShardingFunctionDoubleMod);

              swift_bridgeObjectRelease_n();
              outlined consume of UseCase(v74, v25, v26, v27, v28, v71, v72, 1);
              swift_bridgeObjectRelease_n();
            }
            uint64_t v36 = v68;
LABEL_32:
            outlined destroy of UserIdentifier(v36, type metadata accessor for AspirePirPIRShardingFunctionDoubleMod);
            uint64_t v69 = 0;
            goto LABEL_33;
          }
          outlined destroy of UserIdentifier((uint64_t)v29, type metadata accessor for AspirePirPIRShardingFunctionDoubleMod);
          uint64_t v69 = 1;
          outlined consume of UseCase(v74, v25, v26, v27, v28, v23, v72, 1);
          goto LABEL_33;
        }
LABEL_24:
        uint64_t v42 = *(void *)(v0 + 336);
        type metadata accessor for CipherMLError();
        _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
        swift_allocError();
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        outlined destroy of UserIdentifier(v42, type metadata accessor for AspirePirPIRShardingFunctionDoubleMod);
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        uint64_t v43 = *(uint64_t (**)(uint64_t))(v0 + 8);
        uint64_t v44 = 0;
        goto LABEL_34;
      }
      swift_bridgeObjectRelease();
    }
    swift_release();
    goto LABEL_24;
  }
  unint64_t v38 = *(unsigned int **)(v0 + 336);
  outlined init with take of UserIdentifier(v37, *(void *)(v0 + 200), type metadata accessor for AspireApiPIRConfig);
  uint64_t v39 = *v38;
  if (AspireApiPIRConfig.shardCount.getter() != v39)
  {
    if (one-time initialization token for daemon != -1) {
      swift_once();
    }
    BOOL v46 = *(void *)(v0 + 328);
    os_log_type_t v45 = *(void *)(v0 + 336);
    unint64_t v48 = *(void *)(v0 + 192);
    unint64_t v47 = *(void *)(v0 + 200);
    uint64_t v49 = type metadata accessor for Logger();
    __swift_project_value_buffer(v49, (uint64_t)static Logger.daemon);
    outlined init with copy of AspireApiKeyStatus(v45, v46, type metadata accessor for AspirePirPIRShardingFunctionDoubleMod);
    outlined init with copy of AspireApiKeyStatus(v47, v48, type metadata accessor for AspireApiPIRConfig);
    swift_bridgeObjectRetain_n();
    uint64_t v50 = Logger.logObject.getter();
    uint64_t v51 = static os_log_type_t.error.getter();
    os_log_type_t v52 = os_log_type_enabled(v50, v51);
    uint64_t v54 = *(int **)(v0 + 328);
    BOOL v53 = *(void *)(v0 + 336);
    uint64_t v55 = *(void *)(v0 + 232);
    uint64_t v56 = *(void *)(v0 + 192);
    int v75 = *(void *)(v0 + 200);
    uint64_t v57 = *(void *)(v0 + 152);
    if (v52)
    {
      uint64_t v66 = *(void *)(v0 + 144);
      int v73 = *(void *)(v0 + 336);
      uint64_t v58 = swift_slowAlloc();
      uint64_t v70 = swift_slowAlloc();
      v76[0] = v70;
      *(_DWORD *)uint64_t v58 = 67109634;
      uint64_t v59 = *v54;
      outlined destroy of UserIdentifier((uint64_t)v54, type metadata accessor for AspirePirPIRShardingFunctionDoubleMod);
      *(_DWORD *)(v0 + 356) = v59;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v58 + 8) = 2080;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 88) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v66, v57, v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v58 + 18) = 2048;
      uint64_t v60 = AspireApiPIRConfig.shardCount.getter();
      outlined destroy of UserIdentifier(v56, type metadata accessor for AspireApiPIRConfig);
      *(void *)(v0 + 96) = v60;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_249C3F000, v50, v51, "Dynamic configuration has Double mod with %u shards, but '%s' config has '%ld' shards.", (uint8_t *)v58, 0x1Cu);
      swift_arrayDestroy();
      MEMORY[0x24C5B4790](v70, -1, -1);
      MEMORY[0x24C5B4790](v58, -1, -1);

      outlined destroy of UserIdentifier(v75, type metadata accessor for AspireApiPIRConfig);
      outlined destroy of UserIdentifier(v55, type metadata accessor for AspireApiConfig);
      uint64_t v36 = v73;
    }
    else
    {
      outlined destroy of UserIdentifier(v56, type metadata accessor for AspireApiPIRConfig);
      outlined destroy of UserIdentifier((uint64_t)v54, type metadata accessor for AspirePirPIRShardingFunctionDoubleMod);

      swift_bridgeObjectRelease_n();
      outlined destroy of UserIdentifier(v75, type metadata accessor for AspireApiPIRConfig);
      outlined destroy of UserIdentifier(v55, type metadata accessor for AspireApiConfig);
      uint64_t v36 = v53;
    }
    goto LABEL_32;
  }
  uint64_t v40 = *(void *)(v0 + 336);
  uint64_t v41 = *(void *)(v0 + 232);
  outlined destroy of UserIdentifier(*(void *)(v0 + 200), type metadata accessor for AspireApiPIRConfig);
  outlined destroy of UserIdentifier(v41, type metadata accessor for AspireApiConfig);
  outlined destroy of UserIdentifier(v40, type metadata accessor for AspirePirPIRShardingFunctionDoubleMod);
  uint64_t v69 = 1;
LABEL_33:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v43 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v44 = v69;
LABEL_34:
  return v43(v44);
}

uint64_t RequestsManager.validate(config:static:useCase:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[12] = a4;
  v5[13] = v4;
  v5[10] = a2;
  v5[11] = a3;
  v5[9] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  v5[14] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for AspireHeEncryptionParameters(0);
  v5[15] = v6;
  v5[16] = *(void *)(v6 - 8);
  v5[17] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UseCaseGroup?);
  v5[18] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for UseCaseGroup();
  v5[19] = v7;
  v5[20] = *(void *)(v7 - 8);
  v5[21] = swift_task_alloc();
  return MEMORY[0x270FA2498](RequestsManager.validate(config:static:useCase:), 0, 0);
}

{
  char v4;

  specialized RequestsManager.validate(config:static:useCase:)(a1, a3, a4);
  return v4 & 1;
}

uint64_t RequestsManager.validate(config:static:useCase:)()
{
  uint64_t v27 = v0;
  uint64_t v1 = (uint64_t *)v0[10];
  if (*v1 < AspireApiPIRConfig.shardCount.getter())
  {
    char v2 = 0;
LABEL_3:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = (uint64_t (*)(uint64_t))v0[1];
    uint64_t v4 = v2 & 1;
LABEL_4:
    return v3(v4);
  }
  uint64_t v6 = *(os_unfair_lock_s **)(v0[13] + 48);
  uint64_t v7 = v6 + 4;
  uint64_t v8 = v6 + 6;
  os_unfair_lock_lock(v6 + 6);
  closure #1 in OSAllocatedUnfairLock<A>.current.getter(v7, v26);
  os_unfair_lock_unlock(v8);
  uint64_t v9 = v0[19];
  uint64_t v10 = v0[20];
  uint64_t v11 = v0[18];
  AllowList.group(useCase:)(v0[11], v0[12], v11);
  swift_release();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v11, 1, v9) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v0[18], &demangling cache variable for type metadata for UseCaseGroup?);
    type metadata accessor for CipherMLError();
    _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = (uint64_t (*)(uint64_t))v0[1];
    uint64_t v4 = 0;
    goto LABEL_4;
  }
  outlined init with take of UserIdentifier(v0[18], v0[21], (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
  os_unfair_lock_lock(v8);
  closure #1 in OSAllocatedUnfairLock<A>.current.getter(v7, v26);
  os_unfair_lock_unlock(v8);
  uint64_t v12 = v0[15];
  uint64_t v13 = v0[16];
  uint64_t v14 = v0[14];
  uint64_t v15 = v0[9];
  uint64_t v16 = *(void *)(v15 + *(int *)(type metadata accessor for AspireApiPIRConfig(0) + 20))
      + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__encryptionParameters;
  swift_beginAccess();
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v16, v14, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  int v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v14, 1, v12);
  uint64_t v18 = v0[17];
  if (v17 == 1)
  {
    uint64_t v19 = v0[14];
    *(void *)uint64_t v18 = 0;
    *(void *)(v18 + 8) = 0;
    *(void *)(v18 + 16) = MEMORY[0x263F8EE78];
    *(void *)(v18 + 24) = 0;
    *(unsigned char *)(v18 + 32) = 1;
    *(void *)(v18 + 40) = 0;
    *(unsigned char *)(v18 + 48) = 1;
    *(void *)(v18 + 56) = 0;
    *(unsigned char *)(v18 + 64) = 1;
    UnknownStorage.init()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v19, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  }
  else
  {
    outlined init with take of UserIdentifier(v0[14], v18, type metadata accessor for AspireHeEncryptionParameters);
  }
  char v2 = AllowList.isAllowListed(group:encryptionParameters:)(v0[21], v0[17]);
  outlined destroy of UserIdentifier(v0[17], type metadata accessor for AspireHeEncryptionParameters);
  swift_release();
  if ((v2 & 1) == 0
    || (outlined init with take of String?(v0[10] + 40, (uint64_t)(v0 + 7)),
        outlined init with take of String?((uint64_t)(v0 + 7), (uint64_t)(v0 + 5)),
        (uint64_t v20 = v0[6]) == 0))
  {
    outlined destroy of UserIdentifier(v0[21], (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
    goto LABEL_3;
  }
  uint64_t v21 = v0[5];
  uint64_t v22 = (void *)swift_task_alloc();
  v0[22] = v22;
  *uint64_t v22 = v0;
  v22[1] = RequestsManager.validate(config:static:useCase:);
  uint64_t v23 = v0[12];
  uint64_t v24 = v0[11];
  uint64_t v25 = v0[9];
  return RequestsManager.validateDependentConfig(config:useCase:dependsOn:)(v25, v24, v23, v21, v20);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v4;

  uint64_t v1 = *(unsigned __int8 *)(v0 + 192);
  outlined destroy of UserIdentifier(*(void *)(v0 + 168), (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  outlined destroy of UserIdentifier(*(void *)(v0 + 168), (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1(0);
}

uint64_t RequestsManager.validate(config:static:useCase:)(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 184) = v1;
  swift_task_dealloc();
  if (v1)
  {
    int v5 = RequestsManager.validate(config:static:useCase:);
  }
  else
  {
    *(unsigned char *)(v4 + 192) = a1 & 1;
    int v5 = RequestsManager.validate(config:static:useCase:);
  }
  return MEMORY[0x270FA2498](v5, 0, 0);
}

uint64_t RequestsManager.deinit()
{
  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t RequestsManager.__deallocating_deinit()
{
  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2)
{
  return specialized __RawDictionaryStorage.find<A>(_:)(a1, a2, MEMORY[0x263F8D2A8], (uint64_t (*)(uint64_t, uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
}

{
  return specialized __RawDictionaryStorage.find<A>(_:)(a1, a2, MEMORY[0x263F06F38], (uint64_t (*)(uint64_t, uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  uint64_t v2 = static Hasher._hash(seed:_:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  uint64_t v2;
  uint64_t vars8;

  type metadata accessor for HE.SecurityLevel();
  _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_0(&lazy protocol witness table cache variable for type HE.SecurityLevel and conformance HE.SecurityLevel, MEMORY[0x263F38800]);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2, void (*a3)(unsigned char *, uint64_t, uint64_t), uint64_t (*a4)(uint64_t, uint64_t, Swift::Int))
{
  Hasher.init(_seed:)();
  a3(v10, a1, a2);
  Swift::Int v7 = Hasher._finalize()();
  return a4(a1, a2, v7);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void (*v11)(char *, unint64_t, uint64_t);
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  uint64_t v14;
  char v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  uint64_t v19 = a1;
  uint64_t v4 = type metadata accessor for HE.SecurityLevel();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = v2;
  uint64_t v8 = -1 << *(unsigned char *)(v2 + 32);
  uint64_t v9 = a2 & ~v8;
  uint64_t v18 = v2 + 64;
  if ((*(void *)(v2 + 64 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
  {
    uint64_t v10 = ~v8;
    uint64_t v13 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    uint64_t v12 = v5 + 16;
    BOOL v11 = v13;
    BOOL v14 = *(void *)(v12 + 56);
    do
    {
      v11(v7, *(void *)(v20 + 48) + v14 * v9, v4);
      _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_0(&lazy protocol witness table cache variable for type HE.SecurityLevel and conformance HE.SecurityLevel, MEMORY[0x263F38800]);
      uint64_t v15 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v12 - 8))(v7, v4);
      if (v15) {
        break;
      }
      uint64_t v9 = (v9 + 1) & v10;
    }
    while (((*(void *)(v18 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  return v9;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  __s1[2] = *MEMORY[0x263EF8340];
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v7 = v3;
    unint64_t v8 = a2;
    uint64_t v10 = ~v5;
    unint64_t v80 = HIDWORD(a1);
    size_t v86 = HIDWORD(a1) - (int)a1;
    uint64_t v87 = ~v5;
    BOOL v11 = __OFSUB__(HIDWORD(a1), a1);
    BOOL v85 = v11;
    unint64_t v88 = a2 >> 62;
    uint64_t v83 = v3 + 64;
    uint64_t v84 = (int)a1;
    uint64_t v81 = a1 >> 32;
    uint64_t v79 = (a1 >> 32) - (int)a1;
    unint64_t v89 = a2 >> 62;
    size_t __n = BYTE6(a2);
    while (1)
    {
      uint64_t v12 = (uint64_t *)(*(void *)(v7 + 48) + 16 * v6);
      uint64_t v14 = *v12;
      unint64_t v13 = v12[1];
      uint64_t v15 = 0;
      switch(v13 >> 62)
      {
        case 1uLL:
          if (__OFSUB__(HIDWORD(v14), v14))
          {
            __break(1u);
LABEL_122:
            __break(1u);
LABEL_123:
            __break(1u);
LABEL_124:
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
LABEL_135:
            __break(1u);
LABEL_136:
            __break(1u);
LABEL_137:
            __break(1u);
LABEL_138:
            __break(1u);
LABEL_139:
            __break(1u);
LABEL_140:
            __break(1u);
LABEL_141:
            __break(1u);
LABEL_142:
            __break(1u);
LABEL_143:
            __break(1u);
          }
          uint64_t v15 = HIDWORD(v14) - (int)v14;
LABEL_14:
          outlined copy of Data._Representation(v14, v13);
          break;
        case 2uLL:
          uint64_t v17 = *(void *)(v14 + 16);
          uint64_t v16 = *(void *)(v14 + 24);
          uint64_t v15 = v16 - v17;
          if (!__OFSUB__(v16, v17)) {
            goto LABEL_14;
          }
          goto LABEL_122;
        case 3uLL:
          break;
        default:
          uint64_t v15 = BYTE6(v13);
          break;
      }
      size_t v18 = __n;
      switch(v89)
      {
        case 1uLL:
          size_t v18 = v86;
          if (v85) {
            goto LABEL_123;
          }
          goto LABEL_19;
        case 2uLL:
          uint64_t v20 = *(void *)(a1 + 16);
          uint64_t v19 = *(void *)(a1 + 24);
          BOOL v21 = __OFSUB__(v19, v20);
          size_t v18 = v19 - v20;
          if (!v21) {
            goto LABEL_19;
          }
          goto LABEL_124;
        case 3uLL:
          if (v15) {
            goto LABEL_7;
          }
          goto LABEL_119;
        default:
LABEL_19:
          if (v15 == v18)
          {
            if (v15 < 1)
            {
LABEL_119:
              outlined consume of Data._Representation(v14, v13);
              return v6;
            }
            switch(v13 >> 62)
            {
              case 1uLL:
                if ((int)v14 > v14 >> 32) {
                  goto LABEL_125;
                }
                uint64_t v26 = __DataStorage._bytes.getter();
                if (v26)
                {
                  uint64_t v27 = v26;
                  uint64_t v28 = __DataStorage._offset.getter();
                  if (__OFSUB__((int)v14, v28)) {
                    goto LABEL_127;
                  }
                  uint64_t v29 = (const void *)(v27 + (int)v14 - v28);
                }
                else
                {
                  uint64_t v29 = 0;
                }
                __DataStorage._length.getter();
                if (!v88)
                {
                  LOWORD(__s1[0]) = a1;
                  BYTE2(__s1[0]) = BYTE2(a1);
                  BYTE3(__s1[0]) = BYTE3(a1);
                  BYTE4(__s1[0]) = v80;
                  BYTE5(__s1[0]) = BYTE5(a1);
                  BYTE6(__s1[0]) = BYTE6(a1);
                  HIBYTE(__s1[0]) = HIBYTE(a1);
                  LOWORD(__s1[1]) = v8;
                  BYTE2(__s1[1]) = BYTE2(v8);
                  BYTE3(__s1[1]) = BYTE3(v8);
                  BYTE4(__s1[1]) = BYTE4(v8);
                  BYTE5(__s1[1]) = BYTE5(v8);
                  if (!v29) {
                    goto LABEL_155;
                  }
                  int v46 = memcmp(v29, __s1, __n);
LABEL_102:
                  outlined consume of Data._Representation(v14, v13);
                  uint64_t v10 = v87;
                  if (!v46) {
                    return v6;
                  }
                  break;
                }
                if (v88 == 1)
                {
                  if (v81 < v84) {
                    goto LABEL_136;
                  }
                  swift_retain();
                  uint64_t v47 = __DataStorage._bytes.getter();
                  if (v47)
                  {
                    uint64_t v48 = __DataStorage._offset.getter();
                    if (__OFSUB__(v84, v48)) {
                      goto LABEL_143;
                    }
                    v47 += v84 - v48;
                  }
                  uint64_t v49 = __DataStorage._length.getter();
                  size_t v50 = v79;
                  if (v49 < v79) {
                    size_t v50 = v49;
                  }
                  if (!v29) {
                    goto LABEL_148;
                  }
                  if (!v47) {
                    goto LABEL_149;
                  }
                  size_t v39 = v50;
                  uint64_t v40 = v29;
                  unint64_t v38 = (const void *)v47;
LABEL_71:
                  int v46 = memcmp(v40, v38, v39);
                  outlined consume of Data._Representation(a1, v8);
                  goto LABEL_102;
                }
                uint64_t v69 = *(void *)(a1 + 16);
                uint64_t v78 = *(void *)(a1 + 24);
                swift_retain();
                swift_retain();
                uint64_t v70 = __DataStorage._bytes.getter();
                if (v70)
                {
                  uint64_t v71 = v70;
                  uint64_t v72 = __DataStorage._offset.getter();
                  if (__OFSUB__(v69, v72)) {
                    goto LABEL_142;
                  }
                  int v73 = (const void *)(v71 + v69 - v72);
                }
                else
                {
                  int v73 = 0;
                }
                if (__OFSUB__(v78, v69)) {
                  goto LABEL_137;
                }
                uint64_t v74 = __DataStorage._length.getter();
                if (v74 >= v78 - v69) {
                  size_t v75 = v78 - v69;
                }
                else {
                  size_t v75 = v74;
                }
                if (!v29) {
                  goto LABEL_156;
                }
                uint64_t v4 = v83;
                if (!v73) {
                  goto LABEL_157;
                }
                int v62 = memcmp(v29, v73, v75);
LABEL_115:
                swift_release();
LABEL_116:
                swift_release();
                outlined consume of Data._Representation(v14, v13);
                unint64_t v8 = a2;
                uint64_t v10 = v87;
                if (!v62) {
                  return v6;
                }
                break;
              case 2uLL:
                uint64_t v30 = *(void *)(v14 + 16);
                swift_retain();
                swift_retain();
                uint64_t v31 = __DataStorage._bytes.getter();
                if (v31)
                {
                  uint64_t v32 = v31;
                  uint64_t v33 = __DataStorage._offset.getter();
                  if (__OFSUB__(v30, v33)) {
                    goto LABEL_126;
                  }
                  BOOL v34 = (const void *)(v32 + v30 - v33);
                }
                else
                {
                  BOOL v34 = 0;
                }
                __DataStorage._length.getter();
                uint64_t v4 = v83;
                if (!v88)
                {
                  LOWORD(__s1[0]) = a1;
                  BYTE2(__s1[0]) = BYTE2(a1);
                  BYTE3(__s1[0]) = BYTE3(a1);
                  BYTE4(__s1[0]) = v80;
                  BYTE5(__s1[0]) = BYTE5(a1);
                  BYTE6(__s1[0]) = BYTE6(a1);
                  HIBYTE(__s1[0]) = HIBYTE(a1);
                  LODWORD(__s1[1]) = a2;
                  WORD2(__s1[1]) = WORD2(a2);
                  if (!v34) {
                    goto LABEL_152;
                  }
                  int v62 = memcmp(v34, __s1, __n);
                  swift_release();
                  goto LABEL_116;
                }
                if (v88 == 1)
                {
                  if (v81 < v84) {
                    goto LABEL_130;
                  }
                  swift_retain();
                  uint64_t v42 = (char *)__DataStorage._bytes.getter();
                  if (v42)
                  {
                    uint64_t v43 = __DataStorage._offset.getter();
                    if (__OFSUB__(v84, v43)) {
                      goto LABEL_141;
                    }
                    v42 += v84 - v43;
                  }
                  uint64_t v44 = __DataStorage._length.getter();
                  size_t v45 = v79;
                  if (v44 < v79) {
                    size_t v45 = v44;
                  }
                  if (!v34) {
                    goto LABEL_146;
                  }
                  if (!v42) {
                    goto LABEL_147;
                  }
                  int v46 = memcmp(v34, v42, v45);
                  unint64_t v8 = a2;
                  outlined consume of Data._Representation(a1, a2);
                  swift_release();
                  swift_release();
                  goto LABEL_102;
                }
                uint64_t v63 = *(void *)(a1 + 16);
                uint64_t v77 = *(void *)(a1 + 24);
                swift_retain();
                swift_retain();
                uint64_t v64 = (char *)__DataStorage._bytes.getter();
                if (v64)
                {
                  uint64_t v65 = __DataStorage._offset.getter();
                  if (__OFSUB__(v63, v65)) {
                    goto LABEL_140;
                  }
                  v64 += v63 - v65;
                }
                BOOL v21 = __OFSUB__(v77, v63);
                int64_t v66 = v77 - v63;
                if (v21) {
                  goto LABEL_135;
                }
                uint64_t v67 = __DataStorage._length.getter();
                if (v67 >= v66) {
                  size_t v68 = v66;
                }
                else {
                  size_t v68 = v67;
                }
                if (!v34) {
                  goto LABEL_153;
                }
                uint64_t v4 = v83;
                if (!v64) {
                  goto LABEL_154;
                }
                int v62 = memcmp(v34, v64, v68);
                swift_release();
                swift_release();
                goto LABEL_115;
              case 3uLL:
                memset(__s1, 0, 14);
                if (!v88) {
                  goto LABEL_45;
                }
                if (v88 == 1)
                {
                  if (v81 < v84) {
                    goto LABEL_129;
                  }
                  outlined copy of Data._Representation(a1, v8);
                  uint64_t v35 = __DataStorage._bytes.getter();
                  if (!v35) {
                    goto LABEL_145;
                  }
                  uint64_t v23 = v35;
                  uint64_t v36 = __DataStorage._offset.getter();
                  uint64_t v25 = v84 - v36;
                  if (__OFSUB__(v84, v36)) {
                    goto LABEL_134;
                  }
LABEL_41:
                  uint64_t v37 = __DataStorage._length.getter();
                  unint64_t v38 = (const void *)(v23 + v25);
                  if (v37 >= v79) {
                    size_t v39 = v79;
                  }
                  else {
                    size_t v39 = v37;
                  }
                  uint64_t v40 = __s1;
                  goto LABEL_71;
                }
                uint64_t v57 = *(void *)(a1 + 16);
                uint64_t v58 = *(void *)(a1 + 24);
                swift_retain();
                swift_retain();
                BOOL v53 = (char *)__DataStorage._bytes.getter();
                if (v53)
                {
                  uint64_t v59 = __DataStorage._offset.getter();
                  if (__OFSUB__(v57, v59)) {
                    goto LABEL_139;
                  }
                  v53 += v57 - v59;
                }
                BOOL v21 = __OFSUB__(v58, v57);
                int64_t v55 = v58 - v57;
                if (v21) {
                  goto LABEL_132;
                }
                uint64_t v56 = __DataStorage._length.getter();
                if (!v53) {
                  goto LABEL_151;
                }
LABEL_83:
                if (v56 >= v55) {
                  size_t v60 = v55;
                }
                else {
                  size_t v60 = v56;
                }
                int v61 = memcmp(__s1, v53, v60);
                swift_release();
                swift_release();
                outlined consume of Data._Representation(v14, v13);
                uint64_t v4 = v83;
                uint64_t v10 = v87;
                if (!v61) {
                  return v6;
                }
                break;
              default:
                __s1[0] = v14;
                LOWORD(__s1[1]) = v13;
                BYTE2(__s1[1]) = BYTE2(v13);
                BYTE3(__s1[1]) = BYTE3(v13);
                BYTE4(__s1[1]) = BYTE4(v13);
                BYTE5(__s1[1]) = BYTE5(v13);
                if (!v88)
                {
LABEL_45:
                  __int16 __s2 = a1;
                  char v92 = BYTE2(a1);
                  char v93 = BYTE3(a1);
                  char v94 = v80;
                  char v95 = BYTE5(a1);
                  char v96 = BYTE6(a1);
                  char v97 = HIBYTE(a1);
                  __int16 v98 = v8;
                  char v99 = BYTE2(v8);
                  char v100 = BYTE3(v8);
                  char v101 = BYTE4(v8);
                  char v102 = BYTE5(v8);
                  int v41 = memcmp(__s1, &__s2, __n);
                  outlined consume of Data._Representation(v14, v13);
                  if (!v41) {
                    return v6;
                  }
                  break;
                }
                if (v88 == 1)
                {
                  if (v81 < v84) {
                    goto LABEL_128;
                  }
                  outlined copy of Data._Representation(a1, v8);
                  uint64_t v22 = __DataStorage._bytes.getter();
                  if (!v22)
                  {
                    __DataStorage._length.getter();
                    __break(1u);
LABEL_145:
                    __DataStorage._length.getter();
                    __break(1u);
LABEL_146:
                    __break(1u);
LABEL_147:
                    __break(1u);
LABEL_148:
                    __break(1u);
LABEL_149:
                    __break(1u);
LABEL_150:
                    __break(1u);
LABEL_151:
                    __break(1u);
LABEL_152:
                    __break(1u);
LABEL_153:
                    __break(1u);
LABEL_154:
                    __break(1u);
LABEL_155:
                    __break(1u);
LABEL_156:
                    __break(1u);
LABEL_157:
                    __break(1u);
                    JUMPOUT(0x249CB8FB8);
                  }
                  uint64_t v23 = v22;
                  uint64_t v24 = __DataStorage._offset.getter();
                  uint64_t v25 = v84 - v24;
                  if (__OFSUB__(v84, v24)) {
                    goto LABEL_133;
                  }
                  goto LABEL_41;
                }
                uint64_t v51 = *(void *)(a1 + 16);
                uint64_t v52 = *(void *)(a1 + 24);
                swift_retain();
                swift_retain();
                BOOL v53 = (char *)__DataStorage._bytes.getter();
                if (v53)
                {
                  uint64_t v54 = __DataStorage._offset.getter();
                  if (__OFSUB__(v51, v54)) {
                    goto LABEL_138;
                  }
                  v53 += v51 - v54;
                }
                BOOL v21 = __OFSUB__(v52, v51);
                int64_t v55 = v52 - v51;
                if (v21) {
                  goto LABEL_131;
                }
                uint64_t v56 = __DataStorage._length.getter();
                if (!v53) {
                  goto LABEL_150;
                }
                goto LABEL_83;
            }
          }
          else
          {
LABEL_7:
            outlined consume of Data._Representation(v14, v13);
          }
          unint64_t v6 = (v6 + 1) & v10;
          if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
            return v6;
          }
          break;
      }
    }
  }
  return v6;
}

uint64_t specialized Set._Variant.insert(_:)(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = *(void *)(v7 + 48);
    uint64_t v12 = (void *)(v11 + 16 * v10);
    BOOL v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v14 = (Swift::Int *)(*(void *)(*v3 + 48) + 16 * v10);
      Swift::Int v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      size_t v18 = (void *)(v11 + 16 * v10);
      BOOL v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  specialized _NativeSet.insertNew(_:at:isUnique:)(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *uint64_t v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t specialized _NativeSet.resize(capacity:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v15 = v14 | (v11 << 6);
      }
      else
      {
        int64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8) {
          goto LABEL_33;
        }
        unint64_t v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          int64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v17 = v30[v11];
          if (!v17)
          {
            int64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v17 = v30[v11];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v30 = -1 << v29;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v30[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      BOOL v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      BOOL v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
      *BOOL v13 = v20;
      v13[1] = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  Swift::Int v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_22;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  uint64_t result = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    unint64_t v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        int64_t v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v21 = (Swift::Int *)(*(void *)(v20 + 48) + 16 * a3);
  *uint64_t v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

void *specialized _NativeSet.copy()()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = v17[1];
    BOOL v19 = (void *)(*(void *)(v4 + 48) + v16);
    void *v19 = *v17;
    v19[1] = v18;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      int64_t v11 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        int64_t v11 = v16 + 2;
        if (v16 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v11);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    BOOL v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    int64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
    *int64_t v13 = v20;
    v13[1] = v21;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t outlined init with take of String?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void specialized RequestsManager.validate(config:static:useCase:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v25 = a2;
  uint64_t v26 = a3;
  uint64_t v22 = a1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v24 = (uint64_t)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for AspireHeEncryptionParameters(0);
  uint64_t v21 = *(void *)(v23 - 8);
  MEMORY[0x270FA5388](v23);
  unint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UseCaseGroup?);
  MEMORY[0x270FA5388](v9 - 8);
  int64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for UseCaseGroup();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  unint64_t v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v16 = *(os_unfair_lock_s **)(v3 + 48);
  unint64_t v17 = v16 + 4;
  int64_t v18 = v16 + 6;
  os_unfair_lock_lock(v16 + 6);
  closure #1 in OSAllocatedUnfairLock<A>.current.getter(v17, &v27);
  if (v4)
  {
    os_unfair_lock_unlock(v18);
    __break(1u);
  }
  else
  {
    os_unfair_lock_unlock(v18);
    AllowList.group(useCase:)(v25, v26, (uint64_t)v11);
    swift_release();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v11, &demangling cache variable for type metadata for UseCaseGroup?);
      type metadata accessor for CipherMLError();
      _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
      swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
    }
    else
    {
      outlined init with take of UserIdentifier((uint64_t)v11, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
      os_unfair_lock_lock(v18);
      closure #1 in OSAllocatedUnfairLock<A>.current.getter(v17, &v27);
      os_unfair_lock_unlock(v18);
      uint64_t v19 = type metadata accessor for AspireApiPECConfig(0);
      uint64_t v20 = v24;
      outlined init with copy of AMDPbHEConfig.OneOf_Config?(v22 + *(int *)(v19 + 40), v24, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(v20, 1, v23) == 1)
      {
        *(void *)unint64_t v8 = 0;
        *((void *)v8 + 1) = 0;
        *((void *)v8 + 2) = MEMORY[0x263F8EE78];
        *((void *)v8 + 3) = 0;
        v8[32] = 1;
        *((void *)v8 + 5) = 0;
        v8[48] = 1;
        *((void *)v8 + 7) = 0;
        v8[64] = 1;
        UnknownStorage.init()();
        outlined destroy of AMDPbHEConfig.OneOf_Config?(v20, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      }
      else
      {
        outlined init with take of UserIdentifier(v20, (uint64_t)v8, type metadata accessor for AspireHeEncryptionParameters);
      }
      AllowList.isAllowListed(group:encryptionParameters:)((uint64_t)v15, (uint64_t)v8);
      swift_release();
      outlined destroy of UserIdentifier((uint64_t)v8, type metadata accessor for AspireHeEncryptionParameters);
      outlined destroy of UserIdentifier((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
    }
  }
}

uint64_t type metadata accessor for RequestsManager()
{
  return self;
}

uint64_t method lookup function for RequestsManager(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for RequestsManager);
}

uint64_t dispatch thunk of RequestsManager.__allocating_init(configCache:keyStorage:activeUseCaseTracker:allowList:currentTime:)()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t outlined copy of UseCase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  if (a8) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined consume of UseCase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  if (a8) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined init with copy of AspireApiKeyStatus(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of UserIdentifier(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with take of UserIdentifier(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *PrivateAccessToken.TokenTypeBlindRSA.unsafeMutableAddressor()
{
  return &static PrivateAccessToken.TokenTypeBlindRSA;
}

uint64_t static PrivateAccessToken.TokenTypeBlindRSA.getter()
{
  return 2;
}

uint64_t PrivateAccessToken.Token.nonce.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PrivateAccessToken.Token.challengeDigest.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PrivateAccessToken.TokenRequest.truncatedKeyId.getter(unsigned int a1)
{
  return HIWORD(a1);
}

uint64_t PrivateAccessToken.TokenRequest.blindedMsg.getter(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return a2;
}

uint64_t PrivateAccessToken.TokenRequest.requestData.getter(unsigned int a1, uint64_t a2, unint64_t a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v4 = 0;
  switch(a3 >> 62)
  {
    case 1uLL:
      LODWORD(v4) = HIDWORD(a2) - a2;
      if (__OFSUB__(HIDWORD(a2), a2)) {
        goto LABEL_9;
      }
      uint64_t v4 = (int)v4;
LABEL_6:
      if (__OFADD__(v4, 3))
      {
        __break(1u);
LABEL_9:
        __break(1u);
LABEL_10:
        __break(1u);
      }
      uint64_t v15 = specialized Data.init(capacity:)(v4 + 3);
      uint64_t v16 = v8;
      __int16 v11 = bswap32(a1) >> 16;
      uint64_t v13 = MEMORY[0x263F8D3E8];
      unint64_t v14 = MEMORY[0x263F07B80];
      v12[0] = &v11;
      v12[1] = v12;
      __swift_project_boxed_opaque_existential_1(v12, MEMORY[0x263F8D3E8]);
      Data._Representation.append(contentsOf:)();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v12);
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollectionOfOne<UInt8>);
      uint64_t v13 = v9;
      unint64_t v14 = lazy protocol witness table accessor for type CollectionOfOne<UInt8> and conformance <A> CollectionOfOne<A>();
      LOBYTE(v12[0]) = BYTE2(a1);
      LOBYTE(v11) = *(unsigned char *)__swift_project_boxed_opaque_existential_1(v12, v9);
      Data._Representation.replaceSubrange(_:with:count:)();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v12);
      Data.append(_:)();
      return v15;
    case 2uLL:
      uint64_t v6 = *(void *)(a2 + 16);
      uint64_t v5 = *(void *)(a2 + 24);
      BOOL v7 = __OFSUB__(v5, v6);
      uint64_t v4 = v5 - v6;
      if (!v7) {
        goto LABEL_6;
      }
      goto LABEL_10;
    case 3uLL:
      goto LABEL_6;
    default:
      uint64_t v4 = BYTE6(a3);
      goto LABEL_6;
  }
}

Swift::Void __swiftcall Data.appendU16BE(_:)(Swift::UInt16 a1)
{
  v2[5] = *MEMORY[0x263EF8340];
  __int16 v1 = bswap32(a1) >> 16;
  v2[3] = MEMORY[0x263F8D3E8];
  v2[4] = MEMORY[0x263F07B80];
  v2[0] = &v1;
  v2[1] = v2;
  __swift_project_boxed_opaque_existential_1(v2, MEMORY[0x263F8D3E8]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v2);
}

uint64_t static PrivateAccessToken.TokenRequest.request(challenge:publicKey:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  return specialized static PrivateAccessToken.TokenRequest.request(challenge:publicKey:)(a1, a2, a3, a4) & 0xFFFFFF;
}

uint64_t specialized BidirectionalCollection.last.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  int v2 = 1;
  int v3 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      if (!((a1 ^ (unint64_t)(a1 << 32)) >> 32)) {
        goto LABEL_5;
      }
      goto LABEL_16;
    case 2uLL:
      uint64_t v5 = *(void *)(a1 + 16);
      uint64_t v4 = *(void *)(a1 + 24);
      if (v5 != v4)
      {
        if (a2 >> 62 == 2)
        {
          uint64_t v6 = v4 - 1;
          if (__OFSUB__(v4, 1))
          {
LABEL_23:
            __break(1u);
            goto LABEL_24;
          }
          if (v6 < v5)
          {
LABEL_24:
            __break(1u);
LABEL_25:
            __break(1u);
          }
          if (v6 >= v4) {
            goto LABEL_25;
          }
          uint64_t v7 = __DataStorage._bytes.getter();
          if (!v7) {
            goto LABEL_27;
          }
          uint64_t v8 = v7;
          a1 = __DataStorage._offset.getter();
          uint64_t v9 = v6 - a1;
          if (!__OFSUB__(v6, a1)) {
            goto LABEL_19;
          }
          __break(1u);
        }
LABEL_16:
        uint64_t v10 = a1 >> 32;
        if (a1 >> 32 <= (int)a1)
        {
          __break(1u);
LABEL_22:
          __break(1u);
          goto LABEL_23;
        }
        uint64_t v11 = __DataStorage._bytes.getter();
        if (v11)
        {
          uint64_t v8 = v11;
          uint64_t v12 = v10 - 1;
          uint64_t v13 = __DataStorage._offset.getter();
          uint64_t v9 = v12 - v13;
          if (!__OFSUB__(v12, v13))
          {
LABEL_19:
            int v2 = 0;
            int v3 = *(unsigned __int8 *)(v8 + v9);
            return v3 | (v2 << 8);
          }
          goto LABEL_22;
        }
        __break(1u);
LABEL_27:
        __break(1u);
        JUMPOUT(0x249CBA8BCLL);
      }
      int v3 = 0;
      int v2 = 1;
      return v3 | (v2 << 8);
    case 3uLL:
      return v3 | (v2 << 8);
    default:
      if ((a2 & 0xFF000000000000) != 0)
      {
        int v2 = 0;
        uint64_t v15 = a1;
        __int16 v16 = a2;
        char v17 = BYTE2(a2);
        char v18 = BYTE3(a2);
        char v19 = BYTE4(a2);
        char v20 = BYTE5(a2);
        int v3 = *((unsigned __int8 *)&v15 + BYTE6(a2) - 1);
      }
      else
      {
LABEL_5:
        int v3 = 0;
      }
      return v3 | (v2 << 8);
  }
}

uint64_t PrivateAccessToken.ClientState.__allocating_init(tokenWaitingActivation:)(uint64_t a1)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  return result;
}

uint64_t PrivateAccessToken.ClientState.init(tokenWaitingActivation:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return v1;
}

id PrivateAccessToken.ClientState.tokenWaitingActivation.getter()
{
  return *(id *)(v0 + 16);
}

uint64_t PrivateAccessToken.ClientState.finalize(tokenResponse:)()
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void **)(v0 + 16);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  *(void *)&long long v16 = 0;
  id v3 = objc_msgSend(v1, sel_activateTokenWithServerResponse_error_, isa, &v16);

  uint64_t v4 = (void *)v16;
  if (v3)
  {
    long long v16 = xmmword_249E85DF0;
    id v5 = v4;
    id v6 = objc_msgSend(v3, sel_tokenContent);
    uint64_t v7 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v9 = v8;

    Data.append(_:)();
    outlined consume of Data._Representation(v7, v9);
    id v10 = objc_msgSend(v3, sel_signature);
    uint64_t v11 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v13 = v12;

    Data.append(_:)();
    outlined consume of Data._Representation(v11, v13);
    return v16;
  }
  else
  {
    id v15 = (id)v16;
    _convertNSErrorToError(_:)();

    return swift_willThrow();
  }
}

uint64_t PrivateAccessToken.ClientState.deinit()
{
  return v0;
}

uint64_t PrivateAccessToken.ClientState.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t Data.init(base64urlEncoded:)()
{
  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  swift_bridgeObjectRelease();
  StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  swift_bridgeObjectRelease();
  uint64_t v0 = Data.init(base64Encoded:options:)();
  unint64_t v2 = v1;
  outlined copy of Data?(v0, v1);
  swift_bridgeObjectRelease();
  if (v2 >> 60 != 15) {
    outlined consume of Data?(v0, v2);
  }
  return v0;
}

Swift::String __swiftcall Data.base64urlEncodedString()()
{
  Data.base64EncodedString(options:)(0);
  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  swift_bridgeObjectRelease();
  uint64_t v0 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  unint64_t v2 = v1;
  swift_bridgeObjectRelease();
  uint64_t v3 = v0;
  uint64_t v4 = v2;
  result._object = v4;
  result._countAndFlagsBits = v3;
  return result;
}

void specialized Data.InlineSlice.withUnsafeMutableBytes<A>(_:)(int *a1)
{
  Data.InlineSlice.ensureUniqueReference()();
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if ((int)v3 < (int)v2)
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v4 = __DataStorage._bytes.getter();
  if (!v4)
  {
LABEL_10:
    __break(1u);
    return;
  }
  uint64_t v5 = v4;
  uint64_t v6 = __DataStorage._offset.getter();
  uint64_t v7 = v2 - v6;
  if (__OFSUB__(v2, v6))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  int64_t v8 = v3 - v2;
  uint64_t v9 = __DataStorage._length.getter();
  if (v9 >= v8) {
    size_t v10 = v8;
  }
  else {
    size_t v10 = v9;
  }
  arc4random_buf((void *)(v5 + v7), v10);
}

uint64_t specialized Data.init(capacity:)(uint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    if (result < 15)
    {
      return 0;
    }
    else
    {
      type metadata accessor for __DataStorage();
      swift_allocObject();
      __DataStorage.init(capacity:)();
      if (v1 >= 0x7FFFFFFF)
      {
        type metadata accessor for Data.RangeReference();
        Swift::String result = swift_allocObject();
        *(void *)(result + 16) = 0;
        *(void *)(result + 24) = 0;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CollectionOfOne<UInt8> and conformance <A> CollectionOfOne<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type CollectionOfOne<UInt8> and conformance <A> CollectionOfOne<A>;
  if (!lazy protocol witness table cache variable for type CollectionOfOne<UInt8> and conformance <A> CollectionOfOne<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for CollectionOfOne<UInt8>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CollectionOfOne<UInt8> and conformance <A> CollectionOfOne<A>);
  }
  return result;
}

id specialized @nonobjc RSABSSATokenBlinder.init(publicKey:)()
{
  v6[1] = *(id *)MEMORY[0x263EF8340];
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  v6[0] = 0;
  id v2 = objc_msgSend(v0, sel_initWithPublicKey_error_, isa, v6);

  if (v2)
  {
    id v3 = v6[0];
  }
  else
  {
    id v4 = v6[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v2;
}

uint64_t specialized static PrivateAccessToken.TokenRequest.request(challenge:publicKey:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v67 = a2;
  uint64_t v64 = a1;
  uint64_t v75 = *MEMORY[0x263EF8340];
  uint64_t v66 = type metadata accessor for SHA256();
  uint64_t v63 = *(void *)(v66 - 8);
  MEMORY[0x270FA5388](v66);
  uint64_t v65 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for SHA256Digest();
  uint64_t v68 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  size_t v10 = (char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for __DataStorage();
  swift_allocObject();
  uint64_t v12 = __DataStorage.init(length:)();
  *(void *)&long long v70 = 0x2000000000;
  *((void *)&v70 + 1) = v12;
  specialized Data.InlineSlice.withUnsafeMutableBytes<A>(_:)((int *)&v70);
  long long v13 = v70;
  id v14 = objc_allocWithZone(MEMORY[0x263F388E0]);
  outlined copy of Data._Representation(a3, a4);
  id v15 = specialized @nonobjc RSABSSATokenBlinder.init(publicKey:)();
  outlined consume of Data._Representation(a3, a4);
  if (!v4)
  {
    uint64_t v57 = v11;
    uint64_t v58 = v13;
    uint64_t v17 = v63;
    uint64_t v16 = v64;
    id v59 = v15;
    uint64_t v60 = v8;
    uint64_t v61 = *((void *)&v13 + 1);
    int v62 = v10;
    uint64_t v56 = *((void *)&v13 + 1) | 0x4000000000000000;
    lazy protocol witness table accessor for type SHA256 and conformance SHA256((unint64_t *)&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, MEMORY[0x263F047F8]);
    char v18 = v65;
    uint64_t v19 = v66;
    dispatch thunk of HashFunction.init()();
    unint64_t v20 = v67;
    uint64_t v21 = v18;
    uint64_t v22 = v17;
    uint64_t v23 = v16;
    switch(v67 >> 62)
    {
      case 1uLL:
        unint64_t v24 = v67;
        if (v23 >> 32 < (int)v23) {
          __break(1u);
        }
        unint64_t v55 = v67 & 0x3FFFFFFFFFFFFFFFLL;
        outlined copy of Data._Representation(v23, v67);
        specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)v23, v23 >> 32);
        goto LABEL_9;
      case 2uLL:
        unint64_t v24 = v67;
        uint64_t v25 = *(void *)(v23 + 16);
        unint64_t v55 = *(void *)(v23 + 24);
        outlined copy of Data._Representation(v23, v67);
        swift_retain();
        swift_retain();
        specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v25, v55);
        swift_release();
        swift_release();
LABEL_9:
        uint64_t v26 = v23;
        unint64_t v27 = v24;
        goto LABEL_10;
      case 3uLL:
        *(void *)((char *)&v70 + 6) = 0;
        *(void *)&long long v70 = 0;
        goto LABEL_6;
      default:
        *(void *)&long long v70 = v16;
        DWORD2(v70) = v67;
        WORD6(v70) = WORD2(v67);
LABEL_6:
        dispatch thunk of HashFunction.update(bufferPointer:)();
        uint64_t v26 = v16;
        unint64_t v27 = v20;
LABEL_10:
        outlined consume of Data._Representation(v26, v27);
        unint64_t v28 = v56;
        int64_t v29 = v62;
        dispatch thunk of HashFunction.finalize()();
        (*(void (**)(char *, uint64_t))(v22 + 8))(v21, v19);
        swift_allocObject();
        uint64_t v30 = __DataStorage.init(capacity:)();
        uint64_t v73 = 0;
        unint64_t v74 = v30 | 0x4000000000000000;
        __int16 v69 = 512;
        uint64_t v71 = MEMORY[0x263F8D3E8];
        uint64_t v72 = MEMORY[0x263F07B80];
        *(void *)&long long v70 = &v69;
        *((void *)&v70 + 1) = &v70;
        __swift_project_boxed_opaque_existential_1(&v70, MEMORY[0x263F8D3E8]);
        Data._Representation.append(contentsOf:)();
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v70);
        outlined copy of Data._Representation(v58, v28);
        Data.append(_:)();
        swift_release();
        uint64_t v31 = v60;
        uint64_t v71 = v60;
        uint64_t v72 = lazy protocol witness table accessor for type SHA256 and conformance SHA256(&lazy protocol witness table cache variable for type SHA256Digest and conformance SHA256Digest, MEMORY[0x263F045C0]);
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v70);
        (*(void (**)(uint64_t *, char *, uint64_t))(v68 + 16))(boxed_opaque_existential_1, v29, v31);
        uint64_t v33 = __swift_project_boxed_opaque_existential_1(&v70, v71);
        MEMORY[0x270FA5388](v33);
        *(&v55 - 2) = (unint64_t)&v73;
        dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v70);
        id v34 = v59;
        id v35 = objc_msgSend(v59, sel_keyId);
        uint64_t v36 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v38 = v37;

        Data.append(_:)();
        outlined consume of Data._Representation(v36, v38);
        id v39 = objc_msgSend(v34, sel_keyId);
        uint64_t v40 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v42 = v41;

        int v43 = specialized BidirectionalCollection.last.getter(v40, v42);
        outlined consume of Data._Representation(v40, v42);
        if ((v43 & 0x100) != 0)
        {
          lazy protocol witness table accessor for type AuthenticationError and conformance AuthenticationError();
          swift_allocError();
          unsigned char *v53 = 9;
          swift_willThrow();

          outlined consume of Data._Representation(v73, v74);
          (*(void (**)(char *, uint64_t))(v68 + 8))(v62, v31);
        }
        else
        {
          LODWORD(v67) = v43;
          uint64_t v44 = v68;
          size_t v45 = v62;
          uint64_t v46 = v73;
          unint64_t v47 = v74;
          outlined copy of Data._Representation(v73, v74);
          Class isa = Data._bridgeToObjectiveC()().super.isa;
          outlined consume of Data._Representation(v46, v47);
          *(void *)&long long v70 = 0;
          id v49 = objc_msgSend(v34, sel_tokenWaitingActivationWithContent_error_, isa, &v70);

          if (v49)
          {
            id v50 = (id)v70;
            id v51 = objc_msgSend(v49, sel_blindedMessage);
            static Data._unconditionallyBridgeFromObjectiveC(_:)();

            outlined consume of Data._Representation(v46, v47);
            (*(void (**)(char *, uint64_t))(v44 + 8))(v62, v60);
            swift_release();
            type metadata accessor for PrivateAccessToken.ClientState();
            *(void *)(swift_allocObject() + 16) = v49;
            return (v67 << 16) | 2u;
          }
          id v54 = (id)v70;
          _convertNSErrorToError(_:)();

          swift_willThrow();
          outlined consume of Data._Representation(v46, v47);
          (*(void (**)(char *, uint64_t))(v44 + 8))(v45, v60);
        }
        break;
    }
  }
  return swift_release();
}

uint64_t specialized static PrivateAccessToken.newBlindRSATokenChallenge(for:)(unint64_t a1, unint64_t a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  long long v20 = xmmword_249E85DF0;
  __int16 v15 = 512;
  uint64_t v4 = MEMORY[0x263F8D3E8];
  uint64_t v5 = MEMORY[0x263F07B80];
  uint64_t v18 = MEMORY[0x263F8D3E8];
  uint64_t v19 = MEMORY[0x263F07B80];
  uint64_t v16 = &v15;
  uint64_t v17 = &v16;
  __swift_project_boxed_opaque_existential_1(&v16, MEMORY[0x263F8D3E8]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v16);
  swift_bridgeObjectRetain();
  uint64_t v6 = specialized Data.init<A>(_:)(a1, a2);
  uint64_t v8 = v6;
  unint64_t v9 = v7;
  LODWORD(v10) = 0;
  switch(v7 >> 62)
  {
    case 1uLL:
      LODWORD(v10) = HIDWORD(v6) - v6;
      if (__OFSUB__(HIDWORD(v6), v6))
      {
        __break(1u);
LABEL_10:
        __break(1u);
      }
      unint64_t v10 = (int)v10;
LABEL_6:
      if ((v10 & 0x8000000000000000) != 0 || v10 >= 0x10000)
      {
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x249CBBA04);
      }
LABEL_8:
      __int16 v15 = bswap32(v10) >> 16;
      uint64_t v18 = v4;
      uint64_t v19 = v5;
      uint64_t v16 = &v15;
      uint64_t v17 = &v16;
      __swift_project_boxed_opaque_existential_1(&v16, v4);
      Data._Representation.append(contentsOf:)();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v16);
      Data.append(_:)();
      Data._Representation.append(contentsOf:)();
      __int16 v15 = 0;
      uint64_t v18 = v4;
      uint64_t v19 = v5;
      uint64_t v16 = &v15;
      uint64_t v17 = &v16;
      __swift_project_boxed_opaque_existential_1(&v16, v4);
      Data._Representation.append(contentsOf:)();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v16);
      outlined consume of Data._Representation(v8, v9);
      return v20;
    case 2uLL:
      uint64_t v12 = *(void *)(v6 + 16);
      uint64_t v11 = *(void *)(v6 + 24);
      BOOL v13 = __OFSUB__(v11, v12);
      unint64_t v10 = v11 - v12;
      if (!v13) {
        goto LABEL_6;
      }
      goto LABEL_10;
    case 3uLL:
      goto LABEL_8;
    default:
      LODWORD(v10) = BYTE6(v7);
      goto LABEL_8;
  }
}

ValueMetadata *type metadata accessor for PrivateAccessToken()
{
  return &type metadata for PrivateAccessToken;
}

uint64_t destroy for PrivateAccessToken.Token()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeBufferWithCopyOfBuffer for PrivateAccessToken.Token(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PrivateAccessToken.Token(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for PrivateAccessToken.Token(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PrivateAccessToken.Token(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PrivateAccessToken.Token(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PrivateAccessToken.Token()
{
  return &type metadata for PrivateAccessToken.Token;
}

uint64_t destroy for PrivateAccessToken.TokenRequest(uint64_t a1)
{
  return outlined consume of Data._Representation(*(void *)(a1 + 8), *(void *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for PrivateAccessToken.TokenRequest(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  uint64_t v3 = *(void *)(a2 + 8);
  unint64_t v4 = *(void *)(a2 + 16);
  outlined copy of Data._Representation(v3, v4);
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  return a1;
}

uint64_t assignWithCopy for PrivateAccessToken.TokenRequest(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  uint64_t v3 = *(void *)(a2 + 8);
  unint64_t v4 = *(void *)(a2 + 16);
  outlined copy of Data._Representation(v3, v4);
  uint64_t v5 = *(void *)(a1 + 8);
  unint64_t v6 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  outlined consume of Data._Representation(v5, v6);
  return a1;
}

uint64_t assignWithTake for PrivateAccessToken.TokenRequest(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  outlined consume of Data._Representation(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for PrivateAccessToken.TokenRequest(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xD && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 16) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 16) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for PrivateAccessToken.TokenRequest(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 13;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2)
    {
      *(void *)(result + 8) = 0;
      *(void *)(result + 16) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PrivateAccessToken.TokenRequest()
{
  return &type metadata for PrivateAccessToken.TokenRequest;
}

uint64_t type metadata accessor for PrivateAccessToken.ClientState()
{
  return self;
}

uint64_t method lookup function for PrivateAccessToken.ClientState(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for PrivateAccessToken.ClientState);
}

uint64_t dispatch thunk of PrivateAccessToken.ClientState.__allocating_init(tokenWaitingActivation:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of PrivateAccessToken.ClientState.finalize(tokenResponse:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t lazy protocol witness table accessor for type SHA256 and conformance SHA256(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for closure #1 in Data.append<A>(contentsOf:)()
{
  return Data._Representation.append(contentsOf:)();
}

unint64_t lazy protocol witness table accessor for type AuthenticationError and conformance AuthenticationError()
{
  unint64_t result = lazy protocol witness table cache variable for type AuthenticationError and conformance AuthenticationError;
  if (!lazy protocol witness table cache variable for type AuthenticationError and conformance AuthenticationError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AuthenticationError and conformance AuthenticationError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AuthenticationError and conformance AuthenticationError;
  if (!lazy protocol witness table cache variable for type AuthenticationError and conformance AuthenticationError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AuthenticationError and conformance AuthenticationError);
  }
  return result;
}

char *Message.hash()()
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  uint64_t v1 = type metadata accessor for SHA256();
  uint64_t v30 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  unsigned int v3 = (char *)v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for SHA256Digest();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  unint64_t v7 = (char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = Message.serializedData(partial:)();
  if (!v0)
  {
    uint64_t v10 = v8;
    unint64_t v11 = v9;
    int64_t v29 = v7;
    uint64_t v12 = _s9CryptoKit6SHA256VAcA12HashFunctionAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, MEMORY[0x263F047F8]);
    unint64_t v27 = v3;
    uint64_t v28 = v1;
    uint64_t v13 = v12;
    dispatch thunk of HashFunction.init()();
    uint64_t v14 = v5;
    uint64_t v15 = v4;
    switch(v11 >> 62)
    {
      case 1uLL:
        uint64_t v26 = v13;
        uint64_t v25 = v10 >> 32;
        uint64_t v21 = v28;
        long long v20 = v29;
        uint64_t v19 = v27;
        if (v10 >> 32 < (int)v10) {
          __break(1u);
        }
        v24[1] = v11 & 0x3FFFFFFFFFFFFFFFLL;
        outlined copy of Data._Representation(v10, v11);
        specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)v10, v25);
        goto LABEL_9;
      case 2uLL:
        uint64_t v26 = v13;
        uint64_t v16 = *(void *)(v10 + 16);
        uint64_t v17 = *(void *)(v10 + 24);
        outlined copy of Data._Representation(v10, v11);
        swift_retain();
        swift_retain();
        uint64_t v18 = v16;
        uint64_t v19 = v27;
        specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v18, v17);
        uint64_t v21 = v28;
        long long v20 = v29;
        swift_release();
        swift_release();
LABEL_9:
        outlined consume of Data._Representation(v10, v11);
        goto LABEL_10;
      case 3uLL:
        memset(v32, 0, 14);
        goto LABEL_6;
      default:
        v32[0] = v10;
        LOWORD(v32[1]) = v11;
        BYTE2(v32[1]) = BYTE2(v11);
        BYTE3(v32[1]) = BYTE3(v11);
        BYTE4(v32[1]) = BYTE4(v11);
        BYTE5(v32[1]) = BYTE5(v11);
LABEL_6:
        uint64_t v19 = v27;
        uint64_t v21 = v28;
        dispatch thunk of HashFunction.update(bufferPointer:)();
        outlined consume of Data._Representation(v10, v11);
        long long v20 = v29;
LABEL_10:
        dispatch thunk of HashFunction.finalize()();
        (*(void (**)(char *, uint64_t))(v30 + 8))(v19, v21);
        outlined consume of Data._Representation(v10, v11);
        uint64_t v33 = v15;
        uint64_t v34 = _s9CryptoKit6SHA256VAcA12HashFunctionAAWlTm_0(&lazy protocol witness table cache variable for type SHA256Digest and conformance SHA256Digest, MEMORY[0x263F045C0]);
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v32);
        (*(void (**)(uint64_t *, char *, uint64_t))(v14 + 16))(boxed_opaque_existential_1, v20, v15);
        __swift_project_boxed_opaque_existential_1(v32, v33);
        dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
        (*(void (**)(char *, uint64_t))(v14 + 8))(v20, v15);
        unint64_t v7 = v31;
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v32);
        break;
    }
  }
  return v7;
}

uint64_t AspireApiPIRConfig.shardCount.getter()
{
  uint64_t v1 = type metadata accessor for AspireApiPIRFixedShardConfig(0);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v32 = (unsigned int *)((char *)&v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiPIRShardConfigs.OneOf_ShardConfigs?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiPIRShardConfigs?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for AspireApiPIRShardConfigs(0);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for AspireApiPIRShardConfigs.OneOf_ShardConfigs(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v30 = (uint64_t)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v29 - v17;
  uint64_t v19 = *(int *)(type metadata accessor for AspireApiPIRConfig(0) + 20);
  uint64_t v31 = v0;
  uint64_t v20 = *(void *)(v0 + v19);
  uint64_t v21 = v19;
  uint64_t v22 = v20
      + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__pirShardConfigs;
  swift_beginAccess();
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v22, (uint64_t)v8, &demangling cache variable for type metadata for AspireApiPIRShardConfigs?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v12, 1, 1, v13);
    UnknownStorage.init()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v8, &demangling cache variable for type metadata for AspireApiPIRShardConfigs?);
  }
  else
  {
    outlined init with take of AspireApiPIRShardConfigs.OneOf_ShardConfigs((uint64_t)v8, (uint64_t)v12, type metadata accessor for AspireApiPIRShardConfigs);
  }
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v12, (uint64_t)v5, &demangling cache variable for type metadata for AspireApiPIRShardConfigs.OneOf_ShardConfigs?);
  outlined destroy of AspireApiPIRShardConfigs((uint64_t)v12, type metadata accessor for AspireApiPIRShardConfigs);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v5, 1, v13) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireApiPIRShardConfigs.OneOf_ShardConfigs?);
    uint64_t v23 = *(void *)(v31 + v21)
        + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__shardConfigs;
    swift_beginAccess();
    return *(void *)(*(void *)v23 + 16);
  }
  else
  {
    outlined init with take of AspireApiPIRShardConfigs.OneOf_ShardConfigs((uint64_t)v5, (uint64_t)v18, type metadata accessor for AspireApiPIRShardConfigs.OneOf_ShardConfigs);
    uint64_t v25 = v30;
    outlined init with copy of AspireApiPIRShardConfigs.OneOf_ShardConfigs((uint64_t)v18, v30, type metadata accessor for AspireApiPIRShardConfigs.OneOf_ShardConfigs);
    uint64_t v26 = v25;
    unint64_t v27 = v32;
    outlined init with take of AspireApiPIRShardConfigs.OneOf_ShardConfigs(v26, (uint64_t)v32, type metadata accessor for AspireApiPIRFixedShardConfig);
    uint64_t v24 = *v27;
    outlined destroy of AspireApiPIRShardConfigs((uint64_t)v27, type metadata accessor for AspireApiPIRFixedShardConfig);
    outlined destroy of AspireApiPIRShardConfigs((uint64_t)v18, type metadata accessor for AspireApiPIRShardConfigs.OneOf_ShardConfigs);
  }
  return v24;
}

uint64_t AspireApiPIRConfig.shardConfig(at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, void *a4@<X8>)
{
  uint64_t v94 = a2;
  uint64_t v90 = a4;
  uint64_t v85 = type metadata accessor for AspireApiPIRFixedShardConfig(0);
  MEMORY[0x270FA5388](v85);
  uint64_t v8 = (char *)&v82 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiPIRShardConfigs.OneOf_ShardConfigs?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v89 = (uint64_t)&v82 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiPIRShardConfigs?);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v82 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for AspireApiPIRShardConfigs(0);
  uint64_t v86 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v82 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for AspireApiPIRShardConfigs.OneOf_ShardConfigs(0);
  uint64_t v87 = *(void *)(v17 - 8);
  uint64_t v88 = v17;
  uint64_t v18 = MEMORY[0x270FA5388](v17);
  uint64_t v83 = (uint64_t)&v82 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v84 = (uint64_t)&v82 - v20;
  uint64_t v21 = type metadata accessor for AspireApiPIRShardConfig(0);
  uint64_t v92 = *(void *)(v21 - 8);
  char v93 = (int *)v21;
  uint64_t v22 = MEMORY[0x270FA5388](v21);
  uint64_t v24 = (char *)&v82 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22);
  uint64_t v26 = (char *)&v82 - v25;
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiPIRShardConfig?);
  uint64_t v28 = MEMORY[0x270FA5388](v27 - 8);
  uint64_t v29 = MEMORY[0x270FA5388](v28);
  uint64_t v91 = (uint64_t)&v82 - v30;
  MEMORY[0x270FA5388](v29);
  uint64_t v95 = a1;
  if ((a3 & 1) == 0)
  {
    uint64_t v89 = (uint64_t)&v82 - v31;
    uint64_t v33 = *(void *)(v4 + *(int *)(type metadata accessor for AspireApiPIRConfig(0) + 20))
        + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__shardConfigs;
    swift_beginAccess();
    uint64_t v34 = *(void *)v33;
    uint64_t v35 = *(void *)(*(void *)v33 + 16);
    if (!v35)
    {
      uint64_t v59 = v95;
      outlined copy of ShardLabel(v95, v94, 0);
      swift_bridgeObjectRetain();
      uint64_t v60 = 1;
      id v39 = v93;
LABEL_23:
      uint64_t v61 = v89;
      goto LABEL_35;
    }
    uint64_t v36 = v92;
    uint64_t v37 = v34 + ((*(unsigned __int8 *)(v92 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v92 + 80));
    swift_bridgeObjectRetain();
    outlined copy of ShardLabel(v95, v94, 0);
    uint64_t v38 = *(void *)(v36 + 72);
    uint64_t v88 = v34;
    swift_bridgeObjectRetain();
    id v39 = v93;
    while (1)
    {
      outlined init with copy of AspireApiPIRShardConfigs.OneOf_ShardConfigs(v37, (uint64_t)v26, type metadata accessor for AspireApiPIRShardConfig);
      uint64_t v40 = *(void *)&v26[v39[8] + 8];
      outlined init with copy of AspireApiPIRShardConfigs.OneOf_ShardConfigs((uint64_t)v26, (uint64_t)v24, type metadata accessor for AspireApiPIRShardConfig);
      if (v40)
      {
        unint64_t v41 = &v24[v39[8]];
        if (*((void *)v41 + 1))
        {
          uint64_t v42 = *(void *)v41;
          unint64_t v43 = *((void *)v41 + 1);
        }
        else
        {
          uint64_t v42 = 0;
          unint64_t v43 = 0xE000000000000000;
        }
        if (v42 == v95 && v43 == v94)
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          outlined destroy of AspireApiPIRShardConfigs((uint64_t)v24, type metadata accessor for AspireApiPIRShardConfig);
          id v39 = v93;
LABEL_34:
          swift_bridgeObjectRelease();
          uint64_t v61 = v89;
          outlined init with take of AspireApiPIRShardConfigs.OneOf_ShardConfigs((uint64_t)v26, v89, type metadata accessor for AspireApiPIRShardConfig);
          uint64_t v60 = 0;
          uint64_t v59 = v95;
LABEL_35:
          uint64_t v73 = v92;
          (*(void (**)(uint64_t, uint64_t, uint64_t, int *))(v92 + 56))(v61, v60, 1, v39);
          swift_bridgeObjectRelease();
          uint64_t v74 = v91;
          outlined init with copy of AMDPbHEConfig.OneOf_Config?(v61, v91, &demangling cache variable for type metadata for AspireApiPIRShardConfig?);
          if ((*(unsigned int (**)(uint64_t, uint64_t, int *))(v73 + 48))(v74, 1, v39) == 1)
          {
            outlined destroy of AMDPbHEConfig.OneOf_Config?(v74, &demangling cache variable for type metadata for AspireApiPIRShardConfig?);
            if (one-time initialization token for daemon != -1) {
              swift_once();
            }
            uint64_t v75 = type metadata accessor for Logger();
            __swift_project_value_buffer(v75, (uint64_t)static Logger.daemon);
            uint64_t v76 = v94;
            outlined copy of ShardLabel(v59, v94, 0);
            uint64_t v77 = Logger.logObject.getter();
            os_log_type_t v78 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v77, v78))
            {
              uint64_t v79 = (uint8_t *)swift_slowAlloc();
              uint64_t v80 = v59;
              uint64_t v81 = swift_slowAlloc();
              v96[0] = v81;
              *(_DWORD *)uint64_t v79 = 136446210;
              uint64_t v61 = v89;
              outlined copy of ShardLabel(v80, v76, 0);
              v96[8] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v80, v76, v96);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              outlined consume of ShardLabel(v80, v76, 0);
              outlined consume of ShardLabel(v80, v76, 0);
              outlined consume of ShardLabel(v80, v76, 0);
              _os_log_impl(&dword_249C3F000, v77, v78, "PIR configuration is missing shardId %{public}s", v79, 0xCu);
              swift_arrayDestroy();
              MEMORY[0x24C5B4790](v81, -1, -1);
              MEMORY[0x24C5B4790](v79, -1, -1);
            }
            else
            {
              outlined consume of ShardLabel(v59, v76, 0);
              outlined consume of ShardLabel(v59, v76, 0);
            }

            type metadata accessor for CipherMLError();
            _s9CryptoKit6SHA256VAcA12HashFunctionAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
            swift_allocError();
            swift_storeEnumTagMultiPayload();
            swift_willThrow();
            return outlined destroy of AMDPbHEConfig.OneOf_Config?(v61, &demangling cache variable for type metadata for AspireApiPIRShardConfig?);
          }
          else
          {
            outlined destroy of AMDPbHEConfig.OneOf_Config?(v61, &demangling cache variable for type metadata for AspireApiPIRShardConfig?);
            outlined consume of ShardLabel(v59, v94, 0);
            return outlined init with take of AspireApiPIRShardConfigs.OneOf_ShardConfigs(v74, (uint64_t)v90, type metadata accessor for AspireApiPIRShardConfig);
          }
        }
        char v44 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        outlined destroy of AspireApiPIRShardConfigs((uint64_t)v24, type metadata accessor for AspireApiPIRShardConfig);
        id v39 = v93;
        if (v44) {
          goto LABEL_34;
        }
      }
      else
      {
        outlined destroy of AspireApiPIRShardConfigs((uint64_t)v24, type metadata accessor for AspireApiPIRShardConfig);
      }
      outlined destroy of AspireApiPIRShardConfigs((uint64_t)v26, type metadata accessor for AspireApiPIRShardConfig);
      v37 += v38;
      if (!--v35)
      {
        swift_bridgeObjectRelease();
        uint64_t v60 = 1;
        uint64_t v59 = v95;
        goto LABEL_23;
      }
    }
  }
  uint64_t v94 = v32;
  uint64_t v45 = (uint64_t)v8;
  uint64_t v46 = AspireApiPIRConfig.shardCount.getter();
  if (v46 <= a1)
  {
    uint64_t v53 = v46;
    if (one-time initialization token for daemon != -1) {
      swift_once();
    }
    uint64_t v54 = type metadata accessor for Logger();
    __swift_project_value_buffer(v54, (uint64_t)static Logger.daemon);
    unint64_t v55 = Logger.logObject.getter();
    os_log_type_t v56 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v55, v56))
    {
      uint64_t v57 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v57 = 134217984;
      uint64_t v58 = v95;
      v96[3] = v95;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_249C3F000, v55, v56, "Invalid shard index %ld for PIR configuration", v57, 0xCu);
      MEMORY[0x24C5B4790](v57, -1, -1);
    }
    else
    {

      uint64_t v58 = v95;
    }
    type metadata accessor for CipherMLError();
    _s9CryptoKit6SHA256VAcA12HashFunctionAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
    swift_allocError();
    uint64_t *v65 = v58;
    v65[1] = v53;
    swift_storeEnumTagMultiPayload();
    return swift_willThrow();
  }
  else
  {
    uint64_t v47 = v4;
    uint64_t v48 = *(int *)(type metadata accessor for AspireApiPIRConfig(0) + 20);
    uint64_t v49 = *(void *)(v4 + v48)
        + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__pirShardConfigs;
    swift_beginAccess();
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v49, (uint64_t)v13, &demangling cache variable for type metadata for AspireApiPIRShardConfigs?);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v86 + 48))(v13, 1, v14) == 1)
    {
      uint64_t v51 = v87;
      uint64_t v50 = v88;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v87 + 56))(v16, 1, 1, v88);
      UnknownStorage.init()();
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v13, &demangling cache variable for type metadata for AspireApiPIRShardConfigs?);
      unint64_t v52 = v95;
    }
    else
    {
      outlined init with take of AspireApiPIRShardConfigs.OneOf_ShardConfigs((uint64_t)v13, (uint64_t)v16, type metadata accessor for AspireApiPIRShardConfigs);
      unint64_t v52 = v95;
      uint64_t v51 = v87;
      uint64_t v50 = v88;
    }
    uint64_t v62 = v89;
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v16, v89, &demangling cache variable for type metadata for AspireApiPIRShardConfigs.OneOf_ShardConfigs?);
    outlined destroy of AspireApiPIRShardConfigs((uint64_t)v16, type metadata accessor for AspireApiPIRShardConfigs);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v51 + 48))(v62, 1, v50) == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v62, &demangling cache variable for type metadata for AspireApiPIRShardConfigs.OneOf_ShardConfigs?);
      uint64_t v63 = *(void *)(v47 + v48)
          + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__shardConfigs;
      uint64_t result = swift_beginAccess();
      if ((v52 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if (*(void *)(*(void *)v63 + 16) > v52)
      {
        return outlined init with copy of AspireApiPIRShardConfigs.OneOf_ShardConfigs(*(void *)v63+ ((*(unsigned __int8 *)(v92 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v92 + 80))+ *(void *)(v92 + 72) * v52, (uint64_t)v90, type metadata accessor for AspireApiPIRShardConfig);
      }
      __break(1u);
    }
    else
    {
      uint64_t v66 = v84;
      outlined init with take of AspireApiPIRShardConfigs.OneOf_ShardConfigs(v62, v84, type metadata accessor for AspireApiPIRShardConfigs.OneOf_ShardConfigs);
      uint64_t v67 = v83;
      outlined init with copy of AspireApiPIRShardConfigs.OneOf_ShardConfigs(v66, v83, type metadata accessor for AspireApiPIRShardConfigs.OneOf_ShardConfigs);
      outlined init with take of AspireApiPIRShardConfigs.OneOf_ShardConfigs(v67, v45, type metadata accessor for AspireApiPIRFixedShardConfig);
      uint64_t v68 = v94;
      outlined init with copy of AMDPbHEConfig.OneOf_Config?(v45 + *(int *)(v85 + 24), v94, &demangling cache variable for type metadata for AspireApiPIRShardConfig?);
      __int16 v69 = v93;
      if ((*(unsigned int (**)(uint64_t, uint64_t, int *))(v92 + 48))(v68, 1, v93) == 1)
      {
        long long v70 = v90;
        *uint64_t v90 = 0;
        v70[1] = 0;
        v70[2] = MEMORY[0x263F8EE78];
        UnknownStorage.init()();
        uint64_t v71 = (void *)((char *)v70 + v69[8]);
        void *v71 = 0;
        v71[1] = 0;
        *((unsigned char *)v70 + v69[9]) = 2;
        uint64_t v72 = (char *)v70 + v69[10];
        *(void *)uint64_t v72 = 0;
        v72[8] = 1;
        outlined destroy of AMDPbHEConfig.OneOf_Config?(v68, &demangling cache variable for type metadata for AspireApiPIRShardConfig?);
      }
      else
      {
        outlined init with take of AspireApiPIRShardConfigs.OneOf_ShardConfigs(v68, (uint64_t)v90, type metadata accessor for AspireApiPIRShardConfig);
      }
      outlined destroy of AspireApiPIRShardConfigs(v45, type metadata accessor for AspireApiPIRFixedShardConfig);
      return outlined destroy of AspireApiPIRShardConfigs(v66, type metadata accessor for AspireApiPIRShardConfigs.OneOf_ShardConfigs);
    }
  }
  return result;
}

unint64_t AspireApiPIRConfig.shardIndex(for:)(uint64_t a1, unint64_t a2)
{
  uint64_t v105 = a1;
  unint64_t v106 = a2;
  uint64_t v2 = type metadata accessor for AspireApiPIRConfig(0);
  MEMORY[0x270FA5388](v2);
  uint64_t v97 = (uint64_t)&v88 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for AspirePirPIRShardingFunctionDoubleMod(0);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v90 = (unsigned int *)((char *)&v88 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
  uint64_t v7 = MEMORY[0x270FA5388](v6 - 8);
  uint64_t v95 = (uint64_t)&v88 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  char v101 = (char *)&v88 - v9;
  uint64_t v10 = type metadata accessor for AspirePirPIRShardingFunction(0);
  uint64_t v108 = *(void *)(v10 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v10);
  uint64_t v93 = (uint64_t)&v88 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  char v100 = (char *)&v88 - v13;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPIRShardingFunction?);
  uint64_t v15 = MEMORY[0x270FA5388](v14 - 8);
  uint64_t v92 = (uint64_t)&v88 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  uint64_t v99 = (uint64_t)&v88 - v18;
  MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v88 - v19;
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  uint64_t v22 = MEMORY[0x270FA5388](v21 - 8);
  uint64_t v94 = (uint64_t)&v88 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = MEMORY[0x270FA5388](v22);
  uint64_t v98 = (uint64_t)&v88 - v25;
  MEMORY[0x270FA5388](v24);
  uint64_t v27 = (char *)&v88 - v26;
  uint64_t v28 = type metadata accessor for AspirePirKeywordPirParameters(0);
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v30 = MEMORY[0x270FA5388](v28);
  char v96 = (uint64_t *)((char *)&v88 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v32 = MEMORY[0x270FA5388](v30);
  uint64_t v107 = (uint64_t *)((char *)&v88 - v33);
  MEMORY[0x270FA5388](v32);
  uint64_t v35 = (char *)&v88 - v34;
  uint64_t v91 = v2;
  uint64_t v36 = *(int *)(v2 + 20);
  uint64_t v37 = *(void *)(v109 + v36)
      + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__keywordPirParams;
  swift_beginAccess();
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v37, (uint64_t)v27, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  char v102 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48);
  uint64_t v103 = v29 + 48;
  if (v102(v27, 1, v28) == 1)
  {
    *(void *)uint64_t v35 = 0;
    v35[8] = 0;
    UnknownStorage.init()();
    uint64_t v38 = &v35[*(int *)(v28 + 28)];
    uint64_t v39 = type metadata accessor for AspirePirSymmetricPirClientConfig(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v38, 1, 1, v39);
    uint64_t v40 = v108;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v108 + 56))(&v35[*(int *)(v28 + 32)], 1, 1, v10);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v27, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
    uint64_t v41 = v40;
  }
  else
  {
    outlined init with take of AspireApiPIRShardConfigs.OneOf_ShardConfigs((uint64_t)v27, (uint64_t)v35, type metadata accessor for AspirePirKeywordPirParameters);
    uint64_t v41 = v108;
  }
  uint64_t v42 = v28;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)&v35[*(int *)(v28 + 32)], (uint64_t)v20, &demangling cache variable for type metadata for AspirePirPIRShardingFunction?);
  unint64_t v43 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48);
  uint64_t v104 = v10;
  unsigned int v44 = v43(v20, 1, v10);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v20, &demangling cache variable for type metadata for AspirePirPIRShardingFunction?);
  outlined destroy of AspireApiPIRShardConfigs((uint64_t)v35, type metadata accessor for AspirePirKeywordPirParameters);
  if (v44 == 1)
  {
    unint64_t v45 = AspireApiPIRConfig.shardCount.getter();
    return specialized static Sharding.sha256Shard(keyword:shardCount:)(v105, v106, v45);
  }
  uint64_t v47 = v109;
  uint64_t v48 = *(void *)(v109 + v36)
      + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__keywordPirParams;
  swift_beginAccess();
  uint64_t v49 = v98;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v48, v98, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  if (v102((char *)v49, 1, v42) == 1)
  {
    uint64_t v50 = v107;
    *uint64_t v107 = 0;
    *((unsigned char *)v50 + 8) = 0;
    UnknownStorage.init()();
    uint64_t v51 = (char *)v50 + *(int *)(v42 + 28);
    uint64_t v52 = type metadata accessor for AspirePirSymmetricPirClientConfig(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v52 - 8) + 56))(v51, 1, 1, v52);
    uint64_t v53 = v104;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v108 + 56))((char *)v50 + *(int *)(v42 + 32), 1, 1, v104);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v49, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
    uint64_t v54 = (uint64_t)v101;
  }
  else
  {
    uint64_t v50 = v107;
    outlined init with take of AspireApiPIRShardConfigs.OneOf_ShardConfigs(v49, (uint64_t)v107, type metadata accessor for AspirePirKeywordPirParameters);
    uint64_t v54 = (uint64_t)v101;
    uint64_t v53 = v104;
  }
  uint64_t v55 = (uint64_t)v100;
  uint64_t v56 = v99;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v50 + *(int *)(v42 + 32), v99, &demangling cache variable for type metadata for AspirePirPIRShardingFunction?);
  unsigned int v57 = v43((char *)v56, 1, v53);
  uint64_t v89 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v43;
  if (v57 == 1)
  {
    uint64_t v58 = type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v58 - 8) + 56))(v55, 1, 1, v58);
    UnknownStorage.init()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v56, &demangling cache variable for type metadata for AspirePirPIRShardingFunction?);
  }
  else
  {
    outlined init with take of AspireApiPIRShardConfigs.OneOf_ShardConfigs(v56, v55, type metadata accessor for AspirePirPIRShardingFunction);
  }
  uint64_t v59 = v54;
  outlined destroy of AspireApiPIRShardConfigs((uint64_t)v107, type metadata accessor for AspirePirKeywordPirParameters);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v55, v54, &demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
  outlined destroy of AspireApiPIRShardConfigs(v55, type metadata accessor for AspirePirPIRShardingFunction);
  uint64_t v60 = type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function(0);
  uint64_t v61 = *(void *)(v60 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v61 + 48))(v54, 1, v60) == 1)
  {
    if (one-time initialization token for daemon != -1) {
      swift_once();
    }
    uint64_t v62 = type metadata accessor for Logger();
    __swift_project_value_buffer(v62, (uint64_t)static Logger.daemon);
    uint64_t v63 = v47;
    uint64_t v64 = v97;
    outlined init with copy of AspireApiPIRShardConfigs.OneOf_ShardConfigs(v63, v97, type metadata accessor for AspireApiPIRConfig);
    uint64_t v65 = Logger.logObject.getter();
    int v66 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v65, (os_log_type_t)v66))
    {
      LODWORD(v109) = v66;
      uint64_t v67 = (uint8_t *)swift_slowAlloc();
      uint64_t v107 = (void *)swift_slowAlloc();
      uint64_t v111 = v107;
      *(_DWORD *)uint64_t v67 = 136315138;
      uint64_t v68 = *(void *)(v64 + *(int *)(v91 + 20))
          + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__keywordPirParams;
      swift_beginAccess();
      uint64_t v69 = v68;
      uint64_t v70 = v94;
      outlined init with copy of AMDPbHEConfig.OneOf_Config?(v69, v94, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
      if (v102((char *)v70, 1, v42) == 1)
      {
        uint64_t v71 = v96;
        void *v96 = 0;
        *((unsigned char *)v71 + 8) = 0;
        UnknownStorage.init()();
        uint64_t v72 = (char *)v71 + *(int *)(v42 + 28);
        uint64_t v73 = type metadata accessor for AspirePirSymmetricPirClientConfig(0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v73 - 8) + 56))(v72, 1, 1, v73);
        uint64_t v74 = v104;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v108 + 56))((char *)v71 + *(int *)(v42 + 32), 1, 1, v104);
        outlined destroy of AMDPbHEConfig.OneOf_Config?(v94, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
      }
      else
      {
        uint64_t v71 = v96;
        outlined init with take of AspireApiPIRShardConfigs.OneOf_ShardConfigs(v70, (uint64_t)v96, type metadata accessor for AspirePirKeywordPirParameters);
        uint64_t v74 = v104;
      }
      uint64_t v82 = (uint64_t)v71 + *(int *)(v42 + 32);
      uint64_t v83 = v92;
      outlined init with copy of AMDPbHEConfig.OneOf_Config?(v82, v92, &demangling cache variable for type metadata for AspirePirPIRShardingFunction?);
      if (v89(v83, 1, v74) == 1)
      {
        uint64_t v84 = v93;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v61 + 56))(v93, 1, 1, v60);
        uint64_t v85 = v84;
        UnknownStorage.init()();
        outlined destroy of AMDPbHEConfig.OneOf_Config?(v83, &demangling cache variable for type metadata for AspirePirPIRShardingFunction?);
      }
      else
      {
        uint64_t v85 = v93;
        outlined init with take of AspireApiPIRShardConfigs.OneOf_ShardConfigs(v83, v93, type metadata accessor for AspirePirPIRShardingFunction);
      }
      outlined destroy of AspireApiPIRShardConfigs((uint64_t)v96, type metadata accessor for AspirePirKeywordPirParameters);
      _s9CryptoKit6SHA256VAcA12HashFunctionAAWlTm_0(&lazy protocol witness table cache variable for type AspirePirPIRShardingFunction and conformance AspirePirPIRShardingFunction, (void (*)(uint64_t))type metadata accessor for AspirePirPIRShardingFunction);
      Swift::String v86 = Message.textFormatString()();
      outlined destroy of AspireApiPIRShardConfigs(v85, type metadata accessor for AspirePirPIRShardingFunction);
      uint64_t v110 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v86._countAndFlagsBits, (unint64_t)v86._object, (uint64_t *)&v111);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of AspireApiPIRShardConfigs(v97, type metadata accessor for AspireApiPIRConfig);
      _os_log_impl(&dword_249C3F000, v65, (os_log_type_t)v109, "PIR configuration has invalid sharding function: %s.", v67, 0xCu);
      uint64_t v87 = v107;
      swift_arrayDestroy();
      MEMORY[0x24C5B4790](v87, -1, -1);
      MEMORY[0x24C5B4790](v67, -1, -1);
    }
    else
    {
      outlined destroy of AspireApiPIRShardConfigs(v64, type metadata accessor for AspireApiPIRConfig);
    }

    unint64_t v46 = type metadata accessor for CipherMLError();
    _s9CryptoKit6SHA256VAcA12HashFunctionAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v59, &demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
    return v46;
  }
  uint64_t v75 = v95;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v54, v95, &demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    unint64_t v81 = AspireApiPIRConfig.shardCount.getter();
    unint64_t v46 = specialized static Sharding.sha256Shard(keyword:shardCount:)(v105, v106, v81);
    outlined destroy of AspireApiPIRShardConfigs(v75, type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function);
    goto LABEL_23;
  }
  uint64_t v76 = v75;
  uint64_t v77 = v90;
  outlined init with take of AspireApiPIRShardConfigs.OneOf_ShardConfigs(v76, (uint64_t)v90, type metadata accessor for AspirePirPIRShardingFunctionDoubleMod);
  int64_t v78 = specialized static Sharding.sha256Shard(keyword:shardCount:)(v105, v106, *v77);
  unint64_t result = AspireApiPIRConfig.shardCount.getter();
  if (result)
  {
    int64_t v80 = result;
    outlined destroy of AspireApiPIRShardConfigs((uint64_t)v77, type metadata accessor for AspirePirPIRShardingFunctionDoubleMod);
    unint64_t v46 = v78 % v80;
LABEL_23:
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v54, &demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
    return v46;
  }
  __break(1u);
  return result;
}

uint64_t AspireApiConfig.evaluationKeyConfigHash.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for AspireApiPIRConfig(0);
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for AspireApiPECConfig(0);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1, (uint64_t)v10, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
  uint64_t v11 = type metadata accessor for AspireApiConfig.OneOf_Config(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v10, 1, v11) == 1) {
    return 0;
  }
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with take of AspireApiPIRShardConfigs.OneOf_ShardConfigs((uint64_t)v10, (uint64_t)v7, type metadata accessor for AspireApiPECConfig);
    uint64_t v12 = *((void *)v7 + 4);
    outlined copy of Data._Representation(v12, *((void *)v7 + 5));
    uint64_t v13 = type metadata accessor for AspireApiPECConfig;
    uint64_t v14 = (uint64_t)v7;
  }
  else
  {
    outlined init with take of AspireApiPIRShardConfigs.OneOf_ShardConfigs((uint64_t)v10, (uint64_t)v4, type metadata accessor for AspireApiPIRConfig);
    uint64_t v15 = *(void *)&v4[*(int *)(v2 + 20)]
        + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__evaluationKeyConfigHash;
    swift_beginAccess();
    uint64_t v12 = *(void *)v15;
    outlined copy of Data._Representation(*(void *)v15, *(void *)(v15 + 8));
    uint64_t v13 = type metadata accessor for AspireApiPIRConfig;
    uint64_t v14 = (uint64_t)v4;
  }
  outlined destroy of AspireApiPIRShardConfigs(v14, v13);
  return v12;
}

uint64_t specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = __DataStorage._bytes.getter();
  if (!result || (uint64_t result = __DataStorage._offset.getter(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      __DataStorage._length.getter();
      type metadata accessor for SHA256();
      _s9CryptoKit6SHA256VAcA12HashFunctionAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, MEMORY[0x263F047F8]);
      return dispatch thunk of HashFunction.update(bufferPointer:)();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t outlined copy of ShardLabel(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) == 0) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined consume of ShardLabel(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) == 0) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined init with copy of AspireApiPIRShardConfigs.OneOf_ShardConfigs(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t _s9CryptoKit6SHA256VAcA12HashFunctionAAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with take of AspireApiPIRShardConfigs.OneOf_ShardConfigs(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of AspireApiPIRShardConfigs(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t protocol witness for Error._domain.getter in conformance CipherMLError()
{
  return MEMORY[0x270F9FB40]();
}

uint64_t protocol witness for Error._code.getter in conformance CipherMLError()
{
  return MEMORY[0x270F9FB38]();
}

uint64_t protocol witness for Error._userInfo.getter in conformance CipherMLError()
{
  return MEMORY[0x270F9FB48]();
}

uint64_t protocol witness for Error._getEmbeddedNSError() in conformance CipherMLError()
{
  return MEMORY[0x270F9FB30]();
}

uint64_t CipherMLError.errorDescription.getter()
{
  uint64_t v1 = type metadata accessor for HE.SecurityLevel();
  uint64_t v58 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v3 = (char *)&v57 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for HE.Scheme();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AspireHeEncryptionParameters(0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for CipherMLError();
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (uint64_t *)((char *)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of CipherMLError(v0, (uint64_t)v13);
  unint64_t v14 = 0xD000000000000025;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v19 = *v13;
      uint64_t v20 = (void *)v13[1];
      uint64_t v21 = v13[2];
      uint64_t v22 = (void *)v13[3];
      uint64_t v24 = v13[4];
      uint64_t v23 = (void *)v13[5];
      v61[0] = 0;
      v61[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(69);
      v25._countAndFlagsBits = 0xD00000000000001BLL;
      v25._object = (void *)0x8000000249E94A80;
      String.append(_:)(v25);
      v26._countAndFlagsBits = v19;
      v26._object = v20;
      String.append(_:)(v26);
      swift_bridgeObjectRelease();
      v27._countAndFlagsBits = 0xD00000000000001CLL;
      v27._object = (void *)0x8000000249E94AA0;
      String.append(_:)(v27);
      v28._countAndFlagsBits = v21;
      v28._object = v22;
      String.append(_:)(v28);
      swift_bridgeObjectRelease();
      v29._countAndFlagsBits = 0x2720646E612027;
      v29._object = (void *)0xE700000000000000;
      String.append(_:)(v29);
      v30._countAndFlagsBits = v24;
      v30._object = v23;
      String.append(_:)(v30);
      goto LABEL_13;
    case 2u:
      uint64_t v15 = *v13;
      uint64_t v16 = (void *)v13[1];
      v61[0] = 0;
      v61[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(18);
      swift_bridgeObjectRelease();
      unint64_t v17 = 0x2064696C61766E69;
      unint64_t v31 = 0xEF272070756F7267;
      goto LABEL_7;
    case 3u:
      uint64_t v15 = *v13;
      uint64_t v16 = (void *)v13[1];
      v61[0] = 0;
      v61[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(23);
      swift_bridgeObjectRelease();
      unint64_t v17 = 0xD000000000000014;
      uint64_t v18 = "invalidPecMetadata '";
      goto LABEL_6;
    case 4u:
      uint64_t v32 = *v13;
      uint64_t v33 = v13[1];
      v61[0] = 0;
      v61[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(40);
      swift_bridgeObjectRelease();
      v61[0] = 0xD000000000000014;
      v61[1] = 0x8000000249E94820;
      uint64_t v59 = v32;
      v34._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v34);
      swift_bridgeObjectRelease();
      unint64_t v35 = 0xD000000000000010;
      unint64_t v36 = 0x8000000249E94840;
      goto LABEL_10;
    case 5u:
      uint64_t v37 = *v13;
      uint64_t v33 = v13[1];
      v61[0] = 0;
      v61[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(66);
      v38._countAndFlagsBits = 0xD000000000000029;
      v38._object = (void *)0x8000000249E94540;
      String.append(_:)(v38);
      uint64_t v59 = v37;
      v39._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v39);
      swift_bridgeObjectRelease();
      unint64_t v36 = 0x8000000249E94570;
      unint64_t v35 = 0xD000000000000015;
LABEL_10:
      String.append(_:)(*(Swift::String *)&v35);
      uint64_t v59 = v33;
      v40._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v40);
      swift_bridgeObjectRelease();
      return v61[0];
    case 6u:
      uint64_t v15 = *v13;
      uint64_t v16 = (void *)v13[1];
      v61[0] = 0;
      v61[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(24);
      swift_bridgeObjectRelease();
      v61[0] = 0xD000000000000015;
      v61[1] = 0x8000000249E94770;
      goto LABEL_12;
    case 7u:
      uint64_t v43 = *v13;
      unsigned int v44 = (void *)v13[1];
      v61[0] = 0;
      v61[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(17);
      swift_bridgeObjectRelease();
      strcpy((char *)v61, "server error (");
      HIBYTE(v61[1]) = -18;
      v45._countAndFlagsBits = v43;
      v45._object = v44;
      String.append(_:)(v45);
      swift_bridgeObjectRelease();
      goto LABEL_17;
    case 8u:
      outlined init with take of AspireHeEncryptionParameters((uint64_t)v13, (uint64_t)v10);
      v61[0] = 0;
      v61[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(47);
      swift_bridgeObjectRelease();
      v61[0] = 0xD00000000000002DLL;
      v61[1] = 0x8000000249E94680;
      lazy protocol witness table accessor for type AspireHeEncryptionParameters and conformance AspireHeEncryptionParameters((unint64_t *)&lazy protocol witness table cache variable for type AspireHeEncryptionParameters and conformance AspireHeEncryptionParameters, (void (*)(uint64_t))type metadata accessor for AspireHeEncryptionParameters);
      Swift::String v46 = Message.textFormatString()();
      String.append(_:)(v46);
      swift_bridgeObjectRelease();
      unint64_t v14 = v61[0];
      outlined destroy of AspireHeEncryptionParameters((uint64_t)v10, type metadata accessor for AspireHeEncryptionParameters);
      return v14;
    case 9u:
      uint64_t v47 = *v13;
      char v48 = *((unsigned char *)v13 + 8);
      v61[0] = 0;
      v61[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(33);
      v49._countAndFlagsBits = 0xD00000000000001ELL;
      v49._object = (void *)0x8000000249E94660;
      String.append(_:)(v49);
      uint64_t v59 = v47;
      char v60 = v48;
      _print_unlocked<A, B>(_:_:)();
LABEL_17:
      uint64_t v42 = 41;
      goto LABEL_18;
    case 0xAu:
      (*(void (**)(char *, uint64_t *, uint64_t))(v5 + 32))(v7, v13, v4);
      v61[0] = 0;
      v61[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(26);
      v51._countAndFlagsBits = 0xD000000000000017;
      v51._object = (void *)0x8000000249E94640;
      String.append(_:)(v51);
      _print_unlocked<A, B>(_:_:)();
      v52._countAndFlagsBits = 41;
      v52._object = (void *)0xE100000000000000;
      String.append(_:)(v52);
      unint64_t v14 = v61[0];
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      return v14;
    case 0xBu:
      uint64_t v53 = v58;
      (*(void (**)(char *, uint64_t *, uint64_t))(v58 + 32))(v3, v13, v1);
      v61[0] = 0;
      v61[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(31);
      v54._countAndFlagsBits = 0xD00000000000001CLL;
      v54._object = (void *)0x8000000249E945D0;
      String.append(_:)(v54);
      _print_unlocked<A, B>(_:_:)();
      v55._countAndFlagsBits = 41;
      v55._object = (void *)0xE100000000000000;
      String.append(_:)(v55);
      unint64_t v14 = v61[0];
      (*(void (**)(char *, uint64_t))(v53 + 8))(v3, v1);
      return v14;
    case 0xCu:
      return v14;
    case 0xDu:
      return 0xD000000000000012;
    case 0xEu:
      return 0xD000000000000026;
    case 0xFu:
    case 0x11u:
    case 0x1Cu:
      return 0xD000000000000015;
    case 0x10u:
      return 0xD000000000000010;
    case 0x12u:
      return 0xD000000000000014;
    case 0x13u:
      return 0xD000000000000012;
    case 0x14u:
      return 0xD000000000000024;
    case 0x15u:
      return 0xD00000000000001ALL;
    case 0x16u:
      return 0xD000000000000019;
    case 0x17u:
      return 0x2064696C61766E69;
    case 0x18u:
      return 0xD000000000000017;
    case 0x19u:
      return 0xD00000000000001CLL;
    case 0x1Au:
      return 0xD000000000000010;
    case 0x1Bu:
      return 0xD000000000000019;
    case 0x1Du:
      return 0xD000000000000027;
    case 0x1Eu:
      return 0xD000000000000017;
    case 0x1Fu:
      return 0xD00000000000001ELL;
    case 0x20u:
      return 0xD000000000000012;
    case 0x21u:
      return 0xD000000000000018;
    case 0x22u:
      return 0x20676E697373696DLL;
    case 0x23u:
      return 0xD00000000000001CLL;
    case 0x24u:
      return 0x6C706D6920746F6ELL;
    case 0x25u:
      return 0xD00000000000001ALL;
    case 0x26u:
      return 0xD000000000000018;
    case 0x27u:
      return 0xD000000000000022;
    case 0x28u:
      return 0xD00000000000001DLL;
    case 0x29u:
      return 0xD000000000000020;
    case 0x2Au:
      return 0xD000000000000019;
    default:
      uint64_t v15 = *v13;
      uint64_t v16 = (void *)v13[1];
      v61[0] = 0;
      v61[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(48);
      swift_bridgeObjectRelease();
      unint64_t v17 = 0xD00000000000002DLL;
      uint64_t v18 = "conflicting network configuration for group '";
LABEL_6:
      unint64_t v31 = (unint64_t)(v18 - 32) | 0x8000000000000000;
LABEL_7:
      v61[0] = v17;
      v61[1] = v31;
LABEL_12:
      v41._countAndFlagsBits = v15;
      v41._object = v16;
      String.append(_:)(v41);
LABEL_13:
      swift_bridgeObjectRelease();
      uint64_t v42 = 39;
LABEL_18:
      unint64_t v50 = 0xE100000000000000;
      String.append(_:)(*(Swift::String *)&v42);
      return v61[0];
  }
}

uint64_t protocol witness for LocalizedError.failureReason.getter in conformance CipherMLError()
{
  return MEMORY[0x270EEE930]();
}

uint64_t protocol witness for LocalizedError.recoverySuggestion.getter in conformance CipherMLError()
{
  return MEMORY[0x270EEE950]();
}

uint64_t protocol witness for LocalizedError.helpAnchor.getter in conformance CipherMLError()
{
  return MEMORY[0x270EEE920]();
}

unint64_t specialized _dictionaryUpCast<A, B, C, D>(_:)(uint64_t a1)
{
  uint64_t v1 = a1;
  if (*(void *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
  }
  uint64_t v32 = v1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(v1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(v1 + 64);
  int64_t v31 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = &v37;
  uint64_t v7 = &v39;
  unint64_t result = swift_bridgeObjectRetain();
  int64_t i = 0;
  uint64_t v10 = MEMORY[0x263F8EE58] + 8;
  uint64_t v11 = MEMORY[0x263F8D310];
  if (v5) {
    goto LABEL_10;
  }
LABEL_11:
  int64_t v20 = i + 1;
  if (__OFADD__(i, 1)) {
    goto LABEL_35;
  }
  if (v20 >= v31) {
    goto LABEL_32;
  }
  unint64_t v21 = *(void *)(v32 + 8 * v20);
  int64_t v22 = i + 1;
  if (!v21)
  {
    int64_t v22 = i + 2;
    if (i + 2 >= v31) {
      goto LABEL_32;
    }
    unint64_t v21 = *(void *)(v32 + 8 * v22);
    if (!v21)
    {
      int64_t v22 = i + 3;
      if (i + 3 >= v31) {
        goto LABEL_32;
      }
      unint64_t v21 = *(void *)(v32 + 8 * v22);
      if (!v21)
      {
        int64_t v22 = i + 4;
        if (i + 4 >= v31) {
          goto LABEL_32;
        }
        unint64_t v21 = *(void *)(v32 + 8 * v22);
        if (!v21)
        {
          int64_t v23 = i + 5;
          if (i + 5 < v31)
          {
            unint64_t v21 = *(void *)(v32 + 8 * v23);
            if (v21)
            {
              int64_t v22 = i + 5;
              goto LABEL_26;
            }
            while (1)
            {
              int64_t v22 = v23 + 1;
              if (__OFADD__(v23, 1)) {
                goto LABEL_36;
              }
              if (v22 >= v31) {
                break;
              }
              unint64_t v21 = *(void *)(v32 + 8 * v22);
              ++v23;
              if (v21) {
                goto LABEL_26;
              }
            }
          }
LABEL_32:
          outlined consume of [String : String].Iterator._Variant();
          return (unint64_t)v2;
        }
      }
    }
  }
LABEL_26:
  uint64_t v34 = (v21 - 1) & v21;
  unint64_t v19 = __clz(__rbit64(v21)) + (v22 << 6);
  for (i = v22; ; unint64_t v19 = __clz(__rbit64(v5)) | (i << 6))
  {
    uint64_t v24 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v19);
    uint64_t v35 = *v24;
    uint64_t v36 = v24[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    outlined init with take of Any(v6, v7);
    outlined init with take of Any(v7, v40);
    outlined init with take of Any(v40, &v38);
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v35, v36);
    unint64_t v25 = result;
    if (v26)
    {
      int64_t v33 = i;
      uint64_t v12 = v7;
      uint64_t v13 = v6;
      uint64_t v14 = v1;
      uint64_t v15 = v11;
      uint64_t v16 = v10;
      unint64_t v17 = (uint64_t *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      *unint64_t v17 = v35;
      v17[1] = v36;
      uint64_t v10 = v16;
      uint64_t v11 = v15;
      uint64_t v1 = v14;
      uint64_t v6 = v13;
      uint64_t v7 = v12;
      int64_t i = v33;
      uint64_t v18 = (_OWORD *)(v2[7] + 32 * v25);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
      unint64_t result = (unint64_t)outlined init with take of Any(&v38, v18);
      unint64_t v5 = v34;
      if (!v34) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    if (v2[2] >= v2[3]) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    Swift::String v27 = (uint64_t *)(v2[6] + 16 * result);
    *Swift::String v27 = v35;
    v27[1] = v36;
    unint64_t result = (unint64_t)outlined init with take of Any(&v38, (_OWORD *)(v2[7] + 32 * result));
    uint64_t v28 = v2[2];
    BOOL v29 = __OFADD__(v28, 1);
    uint64_t v30 = v28 + 1;
    if (v29) {
      goto LABEL_34;
    }
    v2[2] = v30;
    unint64_t v5 = v34;
    if (!v34) {
      goto LABEL_11;
    }
LABEL_10:
    uint64_t v34 = (v5 - 1) & v5;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t specialized static CipherMLError.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v143 = (uint64_t *)a1;
  uint64_t v144 = (char *)a2;
  uint64_t v2 = type metadata accessor for HE.SecurityLevel();
  uint64_t v136 = *(void *)(v2 - 8);
  uint64_t v137 = v2;
  MEMORY[0x270FA5388](v2);
  uint64_t v133 = (char *)&v131 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for HE.Scheme();
  uint64_t v134 = *(void *)(v4 - 8);
  uint64_t v135 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v132 = (char *)&v131 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for AspireHeEncryptionParameters(0);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v131 = (uint64_t)&v131 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CipherMLError();
  uint64_t v9 = MEMORY[0x270FA5388](v8);
  uint64_t v142 = (uint64_t)&v131 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v141 = (uint64_t)&v131 - v12;
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v139 = (uint64_t *)((char *)&v131 - v14);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v140 = (uint64_t)&v131 - v16;
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  uint64_t v138 = (uint64_t *)((char *)&v131 - v18);
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  unint64_t v21 = (uint64_t *)((char *)&v131 - v20);
  uint64_t v22 = MEMORY[0x270FA5388](v19);
  uint64_t v24 = (uint64_t *)((char *)&v131 - v23);
  uint64_t v25 = MEMORY[0x270FA5388](v22);
  Swift::String v27 = (uint64_t *)((char *)&v131 - v26);
  uint64_t v28 = MEMORY[0x270FA5388](v25);
  uint64_t v30 = (uint64_t *)((char *)&v131 - v29);
  uint64_t v31 = MEMORY[0x270FA5388](v28);
  int64_t v33 = (uint64_t *)((char *)&v131 - v32);
  uint64_t v34 = MEMORY[0x270FA5388](v31);
  uint64_t v36 = (uint64_t *)((char *)&v131 - v35);
  MEMORY[0x270FA5388](v34);
  long long v38 = (uint64_t *)((char *)&v131 - v37);
  uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CipherMLError, CipherMLError));
  uint64_t v40 = MEMORY[0x270FA5388](v39 - 8);
  uint64_t v42 = (char *)&v131 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = (uint64_t)&v42[*(int *)(v40 + 56)];
  outlined init with copy of CipherMLError((uint64_t)v143, (uint64_t)v42);
  uint64_t v143 = (uint64_t *)v43;
  outlined init with copy of CipherMLError((uint64_t)v144, v43);
  uint64_t v144 = v42;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      outlined init with copy of CipherMLError((uint64_t)v144, (uint64_t)v36);
      uint64_t v52 = *v36;
      uint64_t v51 = v36[1];
      uint64_t v54 = v36[2];
      uint64_t v53 = v36[3];
      uint64_t v56 = v36[4];
      uint64_t v55 = v36[5];
      uint64_t v57 = v143;
      if (swift_getEnumCaseMultiPayload() != 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v44 = (uint64_t)v144;
        goto LABEL_115;
      }
      uint64_t v58 = *v57;
      uint64_t v59 = v57[1];
      uint64_t v60 = v57[2];
      uint64_t v61 = v57[3];
      uint64_t v62 = v57[4];
      uint64_t v63 = v57[5];
      uint64_t v142 = v62;
      if (v52 == v58 && v51 == v59)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v128 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v128 & 1) == 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_131;
        }
      }
      if (v54 != v60 || v53 != v61)
      {
        char v129 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v129) {
          goto LABEL_125;
        }
LABEL_131:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined destroy of AspireHeEncryptionParameters((uint64_t)v144, (uint64_t (*)(void))type metadata accessor for CipherMLError);
        goto LABEL_116;
      }
      swift_bridgeObjectRelease_n();
LABEL_125:
      if (v56 == v142 && v55 == v63)
      {
        swift_bridgeObjectRelease_n();
        uint64_t v124 = (uint64_t)v144;
        goto LABEL_109;
      }
      char v130 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v124 = (uint64_t)v144;
      if ((v130 & 1) == 0)
      {
        outlined destroy of AspireHeEncryptionParameters((uint64_t)v144, (uint64_t (*)(void))type metadata accessor for CipherMLError);
        goto LABEL_116;
      }
LABEL_109:
      outlined destroy of AspireHeEncryptionParameters(v124, (uint64_t (*)(void))type metadata accessor for CipherMLError);
      char v73 = 1;
      return v73 & 1;
    case 2u:
      uint64_t v44 = (uint64_t)v144;
      outlined init with copy of CipherMLError((uint64_t)v144, (uint64_t)v33);
      uint64_t v65 = *v33;
      uint64_t v64 = v33[1];
      int v66 = v143;
      if (swift_getEnumCaseMultiPayload() == 2) {
        goto LABEL_12;
      }
      goto LABEL_18;
    case 3u:
      uint64_t v44 = (uint64_t)v144;
      outlined init with copy of CipherMLError((uint64_t)v144, (uint64_t)v30);
      uint64_t v65 = *v30;
      uint64_t v64 = v30[1];
      int v66 = v143;
      if (swift_getEnumCaseMultiPayload() != 3) {
        goto LABEL_18;
      }
      goto LABEL_12;
    case 4u:
      uint64_t v44 = (uint64_t)v144;
      outlined init with copy of CipherMLError((uint64_t)v144, (uint64_t)v27);
      uint64_t v70 = v27[1];
      uint64_t v71 = v143;
      if (swift_getEnumCaseMultiPayload() != 4) {
        goto LABEL_115;
      }
      uint64_t v72 = *v27;
      goto LABEL_23;
    case 5u:
      uint64_t v44 = (uint64_t)v144;
      outlined init with copy of CipherMLError((uint64_t)v144, (uint64_t)v24);
      uint64_t v70 = v24[1];
      uint64_t v71 = v143;
      if (swift_getEnumCaseMultiPayload() != 5) {
        goto LABEL_115;
      }
      uint64_t v72 = *v24;
LABEL_23:
      if (v72 != *v71) {
        goto LABEL_123;
      }
      char v73 = v70 == v71[1];
      goto LABEL_31;
    case 6u:
      uint64_t v44 = (uint64_t)v144;
      outlined init with copy of CipherMLError((uint64_t)v144, (uint64_t)v21);
      uint64_t v65 = *v21;
      uint64_t v64 = v21[1];
      int v66 = v143;
      if (swift_getEnumCaseMultiPayload() != 6) {
        goto LABEL_18;
      }
      goto LABEL_12;
    case 7u:
      uint64_t v44 = (uint64_t)v144;
      uint64_t v74 = v138;
      outlined init with copy of CipherMLError((uint64_t)v144, (uint64_t)v138);
      uint64_t v65 = *v74;
      uint64_t v64 = v74[1];
      int v66 = v143;
      if (swift_getEnumCaseMultiPayload() != 7) {
        goto LABEL_18;
      }
LABEL_12:
      uint64_t v67 = *v66;
      uint64_t v68 = v66[1];
      if (v65 == v67 && v64 == v68) {
        goto LABEL_14;
      }
      char v69 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v69 & 1) == 0) {
        goto LABEL_123;
      }
      goto LABEL_108;
    case 8u:
      uint64_t v44 = (uint64_t)v144;
      uint64_t v75 = v140;
      outlined init with copy of CipherMLError((uint64_t)v144, v140);
      uint64_t v76 = (uint64_t)v143;
      if (swift_getEnumCaseMultiPayload() != 8)
      {
        outlined destroy of AspireHeEncryptionParameters(v75, type metadata accessor for AspireHeEncryptionParameters);
        goto LABEL_115;
      }
      uint64_t v77 = v131;
      outlined init with take of AspireHeEncryptionParameters(v76, v131);
      char v73 = static AspireHeEncryptionParameters.== infix(_:_:)(v75, v77);
      outlined destroy of AspireHeEncryptionParameters(v77, type metadata accessor for AspireHeEncryptionParameters);
      outlined destroy of AspireHeEncryptionParameters(v75, type metadata accessor for AspireHeEncryptionParameters);
LABEL_31:
      outlined destroy of AspireHeEncryptionParameters(v44, (uint64_t (*)(void))type metadata accessor for CipherMLError);
      return v73 & 1;
    case 9u:
      uint64_t v44 = (uint64_t)v144;
      int64_t v78 = v139;
      outlined init with copy of CipherMLError((uint64_t)v144, (uint64_t)v139);
      uint64_t v79 = *v78;
      uint64_t v80 = (uint64_t)v143;
      if (swift_getEnumCaseMultiPayload() != 9) {
        goto LABEL_115;
      }
      uint64_t v81 = *(void *)v80;
      if (*(unsigned char *)(v80 + 8) != 1)
      {
        if (v79 == v81) {
          goto LABEL_108;
        }
        goto LABEL_123;
      }
      if (!v81)
      {
        if (v79) {
          goto LABEL_123;
        }
        goto LABEL_108;
      }
      if (v81 == 1)
      {
        if (v79 == 1) {
          goto LABEL_108;
        }
      }
      else if (v79 == 2)
      {
        goto LABEL_108;
      }
      goto LABEL_123;
    case 0xAu:
      uint64_t v44 = (uint64_t)v144;
      uint64_t v82 = v141;
      outlined init with copy of CipherMLError((uint64_t)v144, v141);
      uint64_t v83 = (uint64_t)v143;
      if (swift_getEnumCaseMultiPayload() == 10)
      {
        uint64_t v85 = v134;
        uint64_t v84 = v135;
        Swift::String v86 = v132;
        (*(void (**)(char *, uint64_t, uint64_t))(v134 + 32))(v132, v83, v135);
        uint64_t v87 = (unint64_t *)&lazy protocol witness table cache variable for type HE.Scheme and conformance HE.Scheme;
        uint64_t v88 = (void (*)(uint64_t))MEMORY[0x263F38858];
        goto LABEL_42;
      }
      uint64_t v126 = v134;
      uint64_t v125 = v135;
      goto LABEL_114;
    case 0xBu:
      uint64_t v44 = (uint64_t)v144;
      uint64_t v82 = v142;
      outlined init with copy of CipherMLError((uint64_t)v144, v142);
      uint64_t v89 = (uint64_t)v143;
      if (swift_getEnumCaseMultiPayload() != 11)
      {
        uint64_t v126 = v136;
        uint64_t v125 = v137;
LABEL_114:
        (*(void (**)(uint64_t, uint64_t))(v126 + 8))(v82, v125);
        goto LABEL_115;
      }
      uint64_t v85 = v136;
      uint64_t v84 = v137;
      Swift::String v86 = v133;
      (*(void (**)(char *, uint64_t, uint64_t))(v136 + 32))(v133, v89, v137);
      uint64_t v87 = (unint64_t *)&lazy protocol witness table cache variable for type HE.SecurityLevel and conformance HE.SecurityLevel;
      uint64_t v88 = (void (*)(uint64_t))MEMORY[0x263F38800];
LABEL_42:
      lazy protocol witness table accessor for type AspireHeEncryptionParameters and conformance AspireHeEncryptionParameters(v87, v88);
      dispatch thunk of RawRepresentable.rawValue.getter();
      dispatch thunk of RawRepresentable.rawValue.getter();
      if (v147 == v145 && v148 == v146)
      {
        swift_bridgeObjectRelease_n();
        uint64_t v90 = *(void (**)(char *, uint64_t))(v85 + 8);
        v90(v86, v84);
        v90((char *)v82, v84);
        goto LABEL_108;
      }
      char v122 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v123 = *(void (**)(char *, uint64_t))(v85 + 8);
      v123(v86, v84);
      v123((char *)v82, v84);
      if (v122) {
        goto LABEL_108;
      }
      goto LABEL_123;
    case 0xCu:
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      uint64_t v44 = (uint64_t)v144;
      if (EnumCaseMultiPayload == 12) {
        goto LABEL_108;
      }
      goto LABEL_115;
    case 0xDu:
      int v92 = swift_getEnumCaseMultiPayload();
      uint64_t v44 = (uint64_t)v144;
      if (v92 == 13) {
        goto LABEL_108;
      }
      goto LABEL_115;
    case 0xEu:
      int v93 = swift_getEnumCaseMultiPayload();
      uint64_t v44 = (uint64_t)v144;
      if (v93 == 14) {
        goto LABEL_108;
      }
      goto LABEL_115;
    case 0xFu:
      int v94 = swift_getEnumCaseMultiPayload();
      uint64_t v44 = (uint64_t)v144;
      if (v94 == 15) {
        goto LABEL_108;
      }
      goto LABEL_115;
    case 0x10u:
      int v95 = swift_getEnumCaseMultiPayload();
      uint64_t v44 = (uint64_t)v144;
      if (v95 == 16) {
        goto LABEL_108;
      }
      goto LABEL_115;
    case 0x11u:
      int v96 = swift_getEnumCaseMultiPayload();
      uint64_t v44 = (uint64_t)v144;
      if (v96 == 17) {
        goto LABEL_108;
      }
      goto LABEL_115;
    case 0x12u:
      int v97 = swift_getEnumCaseMultiPayload();
      uint64_t v44 = (uint64_t)v144;
      if (v97 == 18) {
        goto LABEL_108;
      }
      goto LABEL_115;
    case 0x13u:
      int v98 = swift_getEnumCaseMultiPayload();
      uint64_t v44 = (uint64_t)v144;
      if (v98 == 19) {
        goto LABEL_108;
      }
      goto LABEL_115;
    case 0x14u:
      int v99 = swift_getEnumCaseMultiPayload();
      uint64_t v44 = (uint64_t)v144;
      if (v99 == 20) {
        goto LABEL_108;
      }
      goto LABEL_115;
    case 0x15u:
      int v100 = swift_getEnumCaseMultiPayload();
      uint64_t v44 = (uint64_t)v144;
      if (v100 == 21) {
        goto LABEL_108;
      }
      goto LABEL_115;
    case 0x16u:
      int v101 = swift_getEnumCaseMultiPayload();
      uint64_t v44 = (uint64_t)v144;
      if (v101 == 22) {
        goto LABEL_108;
      }
      goto LABEL_115;
    case 0x17u:
      int v102 = swift_getEnumCaseMultiPayload();
      uint64_t v44 = (uint64_t)v144;
      if (v102 == 23) {
        goto LABEL_108;
      }
      goto LABEL_115;
    case 0x18u:
      int v103 = swift_getEnumCaseMultiPayload();
      uint64_t v44 = (uint64_t)v144;
      if (v103 == 24) {
        goto LABEL_108;
      }
      goto LABEL_115;
    case 0x19u:
      int v104 = swift_getEnumCaseMultiPayload();
      uint64_t v44 = (uint64_t)v144;
      if (v104 == 25) {
        goto LABEL_108;
      }
      goto LABEL_115;
    case 0x1Au:
      int v105 = swift_getEnumCaseMultiPayload();
      uint64_t v44 = (uint64_t)v144;
      if (v105 == 26) {
        goto LABEL_108;
      }
      goto LABEL_115;
    case 0x1Bu:
      int v106 = swift_getEnumCaseMultiPayload();
      uint64_t v44 = (uint64_t)v144;
      if (v106 == 27) {
        goto LABEL_108;
      }
      goto LABEL_115;
    case 0x1Cu:
      int v107 = swift_getEnumCaseMultiPayload();
      uint64_t v44 = (uint64_t)v144;
      if (v107 == 28) {
        goto LABEL_108;
      }
      goto LABEL_115;
    case 0x1Du:
      int v108 = swift_getEnumCaseMultiPayload();
      uint64_t v44 = (uint64_t)v144;
      if (v108 == 29) {
        goto LABEL_108;
      }
      goto LABEL_115;
    case 0x1Eu:
      int v109 = swift_getEnumCaseMultiPayload();
      uint64_t v44 = (uint64_t)v144;
      if (v109 == 30) {
        goto LABEL_108;
      }
      goto LABEL_115;
    case 0x1Fu:
      int v110 = swift_getEnumCaseMultiPayload();
      uint64_t v44 = (uint64_t)v144;
      if (v110 == 31) {
        goto LABEL_108;
      }
      goto LABEL_115;
    case 0x20u:
      int v111 = swift_getEnumCaseMultiPayload();
      uint64_t v44 = (uint64_t)v144;
      if (v111 == 32) {
        goto LABEL_108;
      }
      goto LABEL_115;
    case 0x21u:
      int v112 = swift_getEnumCaseMultiPayload();
      uint64_t v44 = (uint64_t)v144;
      if (v112 == 33) {
        goto LABEL_108;
      }
      goto LABEL_115;
    case 0x22u:
      int v113 = swift_getEnumCaseMultiPayload();
      uint64_t v44 = (uint64_t)v144;
      if (v113 == 34) {
        goto LABEL_108;
      }
      goto LABEL_115;
    case 0x23u:
      int v114 = swift_getEnumCaseMultiPayload();
      uint64_t v44 = (uint64_t)v144;
      if (v114 == 35) {
        goto LABEL_108;
      }
      goto LABEL_115;
    case 0x24u:
      int v115 = swift_getEnumCaseMultiPayload();
      uint64_t v44 = (uint64_t)v144;
      if (v115 == 36) {
        goto LABEL_108;
      }
      goto LABEL_115;
    case 0x25u:
      int v116 = swift_getEnumCaseMultiPayload();
      uint64_t v44 = (uint64_t)v144;
      if (v116 == 37) {
        goto LABEL_108;
      }
      goto LABEL_115;
    case 0x26u:
      int v117 = swift_getEnumCaseMultiPayload();
      uint64_t v44 = (uint64_t)v144;
      if (v117 == 38) {
        goto LABEL_108;
      }
      goto LABEL_115;
    case 0x27u:
      int v118 = swift_getEnumCaseMultiPayload();
      uint64_t v44 = (uint64_t)v144;
      if (v118 == 39) {
        goto LABEL_108;
      }
      goto LABEL_115;
    case 0x28u:
      int v119 = swift_getEnumCaseMultiPayload();
      uint64_t v44 = (uint64_t)v144;
      if (v119 == 40) {
        goto LABEL_108;
      }
      goto LABEL_115;
    case 0x29u:
      int v120 = swift_getEnumCaseMultiPayload();
      uint64_t v44 = (uint64_t)v144;
      if (v120 == 41) {
        goto LABEL_108;
      }
      goto LABEL_115;
    case 0x2Au:
      int v121 = swift_getEnumCaseMultiPayload();
      uint64_t v44 = (uint64_t)v144;
      if (v121 == 42) {
        goto LABEL_108;
      }
      goto LABEL_115;
    default:
      uint64_t v44 = (uint64_t)v144;
      outlined init with copy of CipherMLError((uint64_t)v144, (uint64_t)v38);
      uint64_t v46 = *v38;
      uint64_t v45 = v38[1];
      uint64_t v47 = v143;
      if (swift_getEnumCaseMultiPayload())
      {
LABEL_18:
        swift_bridgeObjectRelease();
LABEL_115:
        outlined destroy of AMDPbHEConfig.OneOf_Config?(v44, &demangling cache variable for type metadata for (CipherMLError, CipherMLError));
        goto LABEL_116;
      }
      uint64_t v48 = *v47;
      uint64_t v49 = v47[1];
      if (v46 == v48 && v45 == v49)
      {
LABEL_14:
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v50 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v50 & 1) == 0)
        {
LABEL_123:
          outlined destroy of AspireHeEncryptionParameters(v44, (uint64_t (*)(void))type metadata accessor for CipherMLError);
LABEL_116:
          char v73 = 0;
          return v73 & 1;
        }
      }
LABEL_108:
      uint64_t v124 = v44;
      goto LABEL_109;
  }
}

uint64_t type metadata accessor for CipherMLError()
{
  uint64_t result = type metadata singleton initialization cache for CipherMLError;
  if (!type metadata singleton initialization cache for CipherMLError) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t outlined init with copy of CipherMLError(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CipherMLError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of AspireHeEncryptionParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AspireHeEncryptionParameters(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void specialized static CipherMLError.makeErrorConformToSecureCoding(error:)(void *a1)
{
  uint64_t v2 = (void *)_convertErrorToNSError(_:)();
  id v3 = objc_msgSend(v2, sel_userInfo);
  uint64_t v4 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v62 = (uint64_t)a1;
  uint64_t v63 = v4;
  id v5 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedError);
  if (!swift_dynamicCast())
  {
    *(void *)&long long v59 = 0;
    long long v57 = 0u;
    long long v58 = 0u;
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)&v57, &demangling cache variable for type metadata for LocalizedError?);
    specialized Dictionary._Variant.removeValue(forKey:)(0xD00000000000001ELL, 0x8000000249E94AC0, &v60);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)&v60, &demangling cache variable for type metadata for Any?);
    specialized Dictionary._Variant.removeValue(forKey:)(0xD000000000000020, 0x8000000249E94AE0, &v60);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)&v60, &demangling cache variable for type metadata for Any?);
    uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    specialized Dictionary._Variant.removeValue(forKey:)(v21, v22, &v60);
    swift_bridgeObjectRelease();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)&v60, &demangling cache variable for type metadata for Any?);
    uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    specialized Dictionary._Variant.removeValue(forKey:)(v23, v24, &v60);
    swift_bridgeObjectRelease();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)&v60, &demangling cache variable for type metadata for Any?);
    id v25 = objc_msgSend(v2, sel_userInfo);
    uint64_t v26 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    int64_t v27 = 0;
    uint64_t v56 = v26 + 64;
    uint64_t v28 = 1 << *(unsigned char *)(v26 + 32);
    uint64_t v29 = -1;
    if (v28 < 64) {
      uint64_t v29 = ~(-1 << v28);
    }
    unint64_t v30 = v29 & *(void *)(v26 + 64);
    uint64_t v31 = v63;
    int64_t v32 = (unint64_t)(v28 + 63) >> 6;
    while (!v30)
    {
      int64_t v38 = v27 + 1;
      if (__OFADD__(v27, 1))
      {
        __break(1u);
        return;
      }
      if (v38 >= v32)
      {
        int64_t v40 = v27;
      }
      else
      {
        unint64_t v39 = *(void *)(v56 + 8 * v38);
        if (v39) {
          goto LABEL_16;
        }
        int64_t v40 = v27 + 1;
        if (v27 + 2 < v32)
        {
          unint64_t v39 = *(void *)(v56 + 8 * (v27 + 2));
          if (v39)
          {
            int64_t v38 = v27 + 2;
            goto LABEL_16;
          }
          int64_t v40 = v27 + 2;
          if (v27 + 3 < v32)
          {
            unint64_t v39 = *(void *)(v56 + 8 * (v27 + 3));
            if (v39)
            {
              int64_t v38 = v27 + 3;
LABEL_16:
              unint64_t v30 = (v39 - 1) & v39;
              unint64_t v34 = __clz(__rbit64(v39)) + (v38 << 6);
              int64_t v27 = v38;
LABEL_12:
              uint64_t v35 = *(void *)(v26 + 56);
              uint64_t v36 = (void *)(*(void *)(v26 + 48) + 16 * v34);
              uint64_t v37 = v36[1];
              *(void *)&long long v57 = *v36;
              *((void *)&v57 + 1) = v37;
              outlined init with copy of Any(v35 + 32 * v34, (uint64_t)&v58);
              swift_bridgeObjectRetain();
              goto LABEL_19;
            }
            int64_t v38 = v27 + 4;
            int64_t v40 = v27 + 3;
            if (v27 + 4 < v32)
            {
              unint64_t v39 = *(void *)(v56 + 8 * v38);
              if (v39) {
                goto LABEL_16;
              }
              while (v32 - 5 != v27)
              {
                unint64_t v39 = *(void *)(v26 + 104 + 8 * v27++);
                if (v39)
                {
                  int64_t v38 = v27 + 4;
                  goto LABEL_16;
                }
              }
              int64_t v40 = v32 - 1;
            }
          }
        }
      }
      unint64_t v30 = 0;
      long long v58 = 0u;
      long long v59 = 0u;
      int64_t v27 = v40;
      long long v57 = 0u;
LABEL_19:
      outlined init with take of (key: String, value: Any)?((uint64_t)&v57, (uint64_t)&v60);
      uint64_t v41 = *((void *)&v60 + 1);
      if (!*((void *)&v60 + 1))
      {
        uint64_t v63 = v31;
        swift_release();
        id v47 = objc_msgSend(v2, sel_domain);
        uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v50 = v49;

        id v51 = objc_msgSend(v2, sel_code);
        id v52 = objc_allocWithZone(MEMORY[0x263F087E8]);
        uint64_t v53 = (void *)MEMORY[0x24C5B33F0](v48, v50);
        swift_bridgeObjectRelease();
        Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        objc_msgSend(v52, sel_initWithDomain_code_userInfo_, v53, v51, isa);

        return;
      }
      uint64_t v42 = v60;
      outlined init with take of Any(&v61, &v57);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSSecureCoding);
      if (swift_dynamicCast())
      {
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
      }
      else
      {
        uint64_t v55 = v2;
        swift_bridgeObjectRetain();
        unint64_t v43 = specialized __RawDictionaryStorage.find<A>(_:)(v42, v41);
        char v45 = v44;
        swift_bridgeObjectRelease();
        if (v45)
        {
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v62 = v31;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            specialized _NativeDictionary.copy()();
            uint64_t v31 = v62;
          }
          swift_bridgeObjectRelease();
          outlined init with take of Any((_OWORD *)(*(void *)(v31 + 56) + 32 * v43), &v57);
          specialized _NativeDictionary._delete(at:)(v43, v31);
          swift_bridgeObjectRelease();
        }
        else
        {
          long long v57 = 0u;
          long long v58 = 0u;
        }
        uint64_t v2 = v55;
        outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)&v57, &demangling cache variable for type metadata for Any?);
        swift_bridgeObjectRelease();
      }
    }
    unint64_t v33 = __clz(__rbit64(v30));
    v30 &= v30 - 1;
    unint64_t v34 = v33 | (v27 << 6);
    goto LABEL_12;
  }
  swift_bridgeObjectRelease();
  outlined init with take of _HasContiguousBytes(&v57, (uint64_t)&v60);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, String)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_249E85E40;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v7;
  __swift_project_boxed_opaque_existential_1(&v60, *((uint64_t *)&v61 + 1));
  uint64_t v8 = dispatch thunk of LocalizedError.errorDescription.getter();
  uint64_t v10 = 0x296C6C756E28;
  if (v9) {
    uint64_t v10 = v8;
  }
  unint64_t v11 = 0xE600000000000000;
  if (v9) {
    unint64_t v11 = v9;
  }
  *(void *)(inited + 48) = v10;
  *(void *)(inited + 56) = v11;
  unint64_t v12 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  id v13 = objc_msgSend(v2, sel_domain);
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v16 = v15;

  id v17 = objc_msgSend(v2, sel_code);
  specialized _dictionaryUpCast<A, B, C, D>(_:)(v12);
  swift_bridgeObjectRelease();
  id v18 = objc_allocWithZone(MEMORY[0x263F087E8]);
  uint64_t v19 = (void *)MEMORY[0x24C5B33F0](v14, v16);
  swift_bridgeObjectRelease();
  Class v20 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v18, sel_initWithDomain_code_userInfo_, v19, v17, v20);

  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v60);
}

uint64_t base witness table accessor for Error in CipherMLError()
{
  return lazy protocol witness table accessor for type AspireHeEncryptionParameters and conformance AspireHeEncryptionParameters((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
}

void *initializeBufferWithCopyOfBuffer for CipherMLError(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (void *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 2u:
      case 3u:
      case 6u:
      case 7u:
        uint64_t v7 = a2[1];
        *a1 = *a2;
        a1[1] = v7;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 1u:
        uint64_t v10 = a2[1];
        *a1 = *a2;
        a1[1] = v10;
        uint64_t v11 = a2[3];
        a1[2] = a2[2];
        a1[3] = v11;
        uint64_t v12 = a2[4];
        uint64_t v13 = a2[5];
        a1[4] = v12;
        a1[5] = v13;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 8u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        uint64_t v14 = a2[3];
        a1[2] = a2[2];
        a1[3] = v14;
        *((unsigned char *)a1 + 32) = *((unsigned char *)a2 + 32);
        a1[5] = a2[5];
        *((unsigned char *)a1 + 48) = *((unsigned char *)a2 + 48);
        a1[7] = a2[7];
        *((unsigned char *)a1 + 64) = *((unsigned char *)a2 + 64);
        uint64_t v15 = *(int *)(type metadata accessor for AspireHeEncryptionParameters(0) + 40);
        uint64_t v16 = (char *)a1 + v15;
        id v17 = (char *)a2 + v15;
        uint64_t v18 = type metadata accessor for UnknownStorage();
        uint64_t v19 = *(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16);
        swift_bridgeObjectRetain();
        v19(v16, v17, v18);
        swift_storeEnumTagMultiPayload();
        break;
      case 0xAu:
        uint64_t v20 = type metadata accessor for HE.Scheme();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v20 - 8) + 16))(a1, a2, v20);
        swift_storeEnumTagMultiPayload();
        break;
      case 0xBu:
        uint64_t v21 = type metadata accessor for HE.SecurityLevel();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v21 - 8) + 16))(a1, a2, v21);
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(v6 + 64));
        break;
    }
  }
  return a1;
}

uint64_t destroy for CipherMLError(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
    case 2:
    case 3:
    case 6:
    case 7:
      goto LABEL_2;
    case 1:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_2:
      return swift_bridgeObjectRelease();
    case 8:
      swift_bridgeObjectRelease();
      a1 += *(int *)(type metadata accessor for AspireHeEncryptionParameters(0) + 40);
      uint64_t v3 = type metadata accessor for UnknownStorage();
      goto LABEL_9;
    case 10:
      uint64_t v3 = type metadata accessor for HE.Scheme();
      goto LABEL_9;
    case 11:
      uint64_t v3 = type metadata accessor for HE.SecurityLevel();
LABEL_9:
      uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
      uint64_t result = v4(a1, v3);
      break;
    default:
      return result;
  }
  return result;
}

void *initializeWithCopy for CipherMLError(void *a1, void *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 2u:
    case 3u:
    case 6u:
    case 7u:
      uint64_t v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      swift_bridgeObjectRetain();
      goto LABEL_8;
    case 1u:
      uint64_t v7 = a2[1];
      *a1 = *a2;
      a1[1] = v7;
      uint64_t v8 = a2[3];
      a1[2] = a2[2];
      a1[3] = v8;
      uint64_t v9 = a2[4];
      uint64_t v10 = a2[5];
      a1[4] = v9;
      a1[5] = v10;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_8;
    case 8u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v11 = a2[3];
      a1[2] = a2[2];
      a1[3] = v11;
      *((unsigned char *)a1 + 32) = *((unsigned char *)a2 + 32);
      a1[5] = a2[5];
      *((unsigned char *)a1 + 48) = *((unsigned char *)a2 + 48);
      a1[7] = a2[7];
      *((unsigned char *)a1 + 64) = *((unsigned char *)a2 + 64);
      uint64_t v12 = *(int *)(type metadata accessor for AspireHeEncryptionParameters(0) + 40);
      uint64_t v13 = (char *)a1 + v12;
      uint64_t v14 = (char *)a2 + v12;
      uint64_t v15 = type metadata accessor for UnknownStorage();
      uint64_t v16 = *(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16);
      swift_bridgeObjectRetain();
      v16(v13, v14, v15);
      goto LABEL_8;
    case 0xAu:
      uint64_t v17 = type metadata accessor for HE.Scheme();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v17 - 8) + 16))(a1, a2, v17);
      goto LABEL_8;
    case 0xBu:
      uint64_t v18 = type metadata accessor for HE.SecurityLevel();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v18 - 8) + 16))(a1, a2, v18);
LABEL_8:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

void *assignWithCopy for CipherMLError(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of AspireHeEncryptionParameters((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for CipherMLError);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 2u:
      case 3u:
      case 6u:
      case 7u:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        goto LABEL_9;
      case 1u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        a1[4] = a2[4];
        a1[5] = a2[5];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_9;
      case 8u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        uint64_t v6 = a2[3];
        *((unsigned char *)a1 + 32) = *((unsigned char *)a2 + 32);
        a1[3] = v6;
        uint64_t v7 = a2[5];
        *((unsigned char *)a1 + 48) = *((unsigned char *)a2 + 48);
        a1[5] = v7;
        uint64_t v8 = a2[7];
        *((unsigned char *)a1 + 64) = *((unsigned char *)a2 + 64);
        a1[7] = v8;
        uint64_t v9 = *(int *)(type metadata accessor for AspireHeEncryptionParameters(0) + 40);
        uint64_t v10 = (char *)a1 + v9;
        uint64_t v11 = (char *)a2 + v9;
        uint64_t v12 = type metadata accessor for UnknownStorage();
        uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
        swift_bridgeObjectRetain();
        v13(v10, v11, v12);
        goto LABEL_9;
      case 0xAu:
        uint64_t v14 = type metadata accessor for HE.Scheme();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v14 - 8) + 16))(a1, a2, v14);
        goto LABEL_9;
      case 0xBu:
        uint64_t v15 = type metadata accessor for HE.SecurityLevel();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v15 - 8) + 16))(a1, a2, v15);
LABEL_9:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t outlined destroy of AspireHeEncryptionParameters(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void *initializeWithTake for CipherMLError(void *a1, void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 11:
      uint64_t v12 = type metadata accessor for HE.SecurityLevel();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 32))(a1, a2, v12);
      swift_storeEnumTagMultiPayload();
      break;
    case 10:
      uint64_t v13 = type metadata accessor for HE.Scheme();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v13 - 8) + 32))(a1, a2, v13);
      swift_storeEnumTagMultiPayload();
      break;
    case 8:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v7 = a2[3];
      a1[2] = a2[2];
      a1[3] = v7;
      *((unsigned char *)a1 + 32) = *((unsigned char *)a2 + 32);
      a1[5] = a2[5];
      *((unsigned char *)a1 + 48) = *((unsigned char *)a2 + 48);
      a1[7] = a2[7];
      *((unsigned char *)a1 + 64) = *((unsigned char *)a2 + 64);
      uint64_t v8 = *(int *)(type metadata accessor for AspireHeEncryptionParameters(0) + 40);
      uint64_t v9 = (char *)a1 + v8;
      uint64_t v10 = (char *)a2 + v8;
      uint64_t v11 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

void *assignWithTake for CipherMLError(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of AspireHeEncryptionParameters((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for CipherMLError);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 11:
        uint64_t v12 = type metadata accessor for HE.SecurityLevel();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 32))(a1, a2, v12);
        swift_storeEnumTagMultiPayload();
        break;
      case 10:
        uint64_t v13 = type metadata accessor for HE.Scheme();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v13 - 8) + 32))(a1, a2, v13);
        swift_storeEnumTagMultiPayload();
        break;
      case 8:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        uint64_t v7 = a2[3];
        a1[2] = a2[2];
        a1[3] = v7;
        *((unsigned char *)a1 + 32) = *((unsigned char *)a2 + 32);
        a1[5] = a2[5];
        *((unsigned char *)a1 + 48) = *((unsigned char *)a2 + 48);
        a1[7] = a2[7];
        *((unsigned char *)a1 + 64) = *((unsigned char *)a2 + 64);
        uint64_t v8 = *(int *)(type metadata accessor for AspireHeEncryptionParameters(0) + 40);
        uint64_t v9 = (char *)a1 + v8;
        uint64_t v10 = (char *)a2 + v8;
        uint64_t v11 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t type metadata completion function for CipherMLError()
{
  uint64_t result = type metadata accessor for AspireHeEncryptionParameters(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for HE.Scheme();
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for HE.SecurityLevel();
      if (v3 <= 0x3F)
      {
        swift_initEnumMetadataMultiPayload();
        return 0;
      }
    }
  }
  return result;
}

uint64_t outlined init with take of (key: String, value: Any)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: Any)?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

_OWORD *outlined init with take of Any(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t lazy protocol witness table accessor for type AspireHeEncryptionParameters and conformance AspireHeEncryptionParameters(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t Data.hexString.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for Data.Iterator();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = 0;
  unint64_t v18 = 0xE000000000000000;
  switch(a2 >> 62)
  {
    case 1uLL:
    case 2uLL:
      outlined copy of Data._Representation(a1, a2);
      outlined copy of Data._Representation(a1, a2);
      break;
    default:
      break;
  }
  Data.Iterator.init(_:at:)();
  outlined consume of Data._Representation(a1, a2);
  lazy protocol witness table accessor for type Data.Iterator and conformance Data.Iterator();
  dispatch thunk of IteratorProtocol.next()();
  if ((v16 & 1) == 0)
  {
    long long v14 = xmmword_249E85E40;
    uint64_t v8 = MEMORY[0x263F8E778];
    uint64_t v9 = MEMORY[0x263F8E7C0];
    do
    {
      char v10 = v15;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v11 = swift_allocObject();
      *(_OWORD *)(v11 + 16) = v14;
      *(void *)(v11 + 56) = v8;
      *(void *)(v11 + 64) = v9;
      *(unsigned char *)(v11 + 32) = v10;
      v12._countAndFlagsBits = String.init(format:_:)();
      String.append(_:)(v12);
      swift_bridgeObjectRelease();
      dispatch thunk of IteratorProtocol.next()();
    }
    while (v16 != 1);
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v17;
}

unint64_t lazy protocol witness table accessor for type Data.Iterator and conformance Data.Iterator()
{
  unint64_t result = lazy protocol witness table cache variable for type Data.Iterator and conformance Data.Iterator;
  if (!lazy protocol witness table cache variable for type Data.Iterator and conformance Data.Iterator)
  {
    type metadata accessor for Data.Iterator();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data.Iterator and conformance Data.Iterator);
  }
  return result;
}

uint64_t FixedWidthInteger.divCeil(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v9 = *(void *)(a3 + 8);
  uint64_t v76 = *(void *)(v9 + 24);
  uint64_t v81 = *(void *)(v76 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v79 = (char *)&v71 - v11;
  Swift::String v12 = *(char **)(a2 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v10);
  uint64_t v72 = (char *)&v71 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  char v73 = (char *)&v71 - v16;
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  uint64_t v75 = (char *)&v71 - v18;
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  uint64_t v77 = (char *)&v71 - v20;
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  uint64_t v23 = (char *)&v71 - v22;
  uint64_t v24 = MEMORY[0x270FA5388](v21);
  uint64_t v26 = (char *)&v71 - v25;
  MEMORY[0x270FA5388](v24);
  uint64_t v28 = (char *)&v71 - v27;
  AssociatedConformanceWitness = (void (*)(char *, uint64_t, uint64_t))*((void *)v12 + 2);
  uint64_t v85 = v12 + 16;
  AssociatedConformanceWitness((char *)&v71 - v27, a1, a2);
  char v29 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v82 = a1;
  uint64_t v83 = a4;
  if (v29)
  {
    if (dispatch thunk of BinaryInteger.bitWidth.getter() >= 64)
    {
      uint64_t v86 = 0;
      lazy protocol witness table accessor for type Int and conformance Int();
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      char v37 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v23 = (char *)*((void *)v12 + 1);
      ((void (*)(char *, uint64_t))v23)(v26, a2);
      ((void (*)(char *, uint64_t))v23)(v28, a2);
      if ((v37 & 1) == 0) {
        goto LABEL_18;
      }
    }
    else
    {
      uint64_t v30 = dispatch thunk of BinaryInteger._lowWord.getter();
      uint64_t v23 = (char *)*((void *)v12 + 1);
      ((void (*)(char *, uint64_t))v23)(v28, a2);
      if (v30) {
        goto LABEL_18;
      }
    }
    goto LABEL_16;
  }
  uint64_t v31 = v12;
  uint64_t v78 = v4;
  uint64_t v74 = v26;
  char v32 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v33 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if ((v32 & 1) == 0)
  {
    if (v33 < 64)
    {
      uint64_t v38 = dispatch thunk of BinaryInteger._lowWord.getter();
      uint64_t v23 = (char *)*((void *)v12 + 1);
      ((void (*)(char *, uint64_t))v23)(v28, a2);
      a1 = v82;
      uint64_t v26 = v74;
      uint64_t v5 = v78;
      if (v38) {
        goto LABEL_18;
      }
      goto LABEL_16;
    }
LABEL_15:
    uint64_t v86 = 0;
    lazy protocol witness table accessor for type Int and conformance Int();
    uint64_t v26 = v74;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    char v39 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v23 = (char *)*((void *)v12 + 1);
    ((void (*)(char *, uint64_t))v23)(v26, a2);
    ((void (*)(char *, uint64_t))v23)(v28, a2);
    a1 = v82;
    uint64_t v5 = v78;
    if ((v39 & 1) == 0) {
      goto LABEL_18;
    }
    goto LABEL_16;
  }
  if (v33 > 64) {
    goto LABEL_15;
  }
  swift_getAssociatedConformanceWitness();
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
  unint64_t v34 = v74;
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
  char v35 = dispatch thunk of static Comparable.>= infix(_:_:)();
  Swift::String v12 = (char *)*((void *)v12 + 1);
  ((void (*)(char *, uint64_t))v12)(v34, a2);
  AssociatedConformanceWitness(v23, (uint64_t)v28, a2);
  if (v35)
  {
    uint64_t v36 = dispatch thunk of BinaryInteger._lowWord.getter();
    ((void (*)(char *, uint64_t))v12)(v23, a2);
    ((void (*)(char *, uint64_t))v12)(v28, a2);
    a1 = v82;
    uint64_t v26 = v74;
    uint64_t v23 = v12;
    Swift::String v12 = v31;
    uint64_t v5 = v78;
    if (v36) {
      goto LABEL_18;
    }
LABEL_16:
    __break(1u);
  }
  ((void (*)(char *, uint64_t))v12)(v23, a2);
  ((void (*)(char *, uint64_t))v12)(v28, a2);
  a1 = v82;
  uint64_t v26 = v74;
  uint64_t v23 = v12;
  uint64_t v5 = v78;
LABEL_18:
  char v40 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v41 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if (v40)
  {
    if (v41 <= 64) {
      goto LABEL_20;
    }
LABEL_23:
    uint64_t v86 = 0;
    lazy protocol witness table accessor for type Int and conformance Int();
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    char v43 = dispatch thunk of static Comparable.< infix(_:_:)();
    ((void (*)(char *, uint64_t))v23)(v26, a2);
    if ((v43 & 1) == 0) {
      goto LABEL_27;
    }
LABEL_24:
    char v44 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v45 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if (v44)
    {
      if (v45 > 64) {
        goto LABEL_26;
      }
    }
    else if (v45 > 63)
    {
LABEL_26:
      uint64_t v86 = 0;
      lazy protocol witness table accessor for type Int and conformance Int();
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      char v46 = dispatch thunk of static Comparable.< infix(_:_:)();
      ((void (*)(char *, uint64_t))v23)(v26, a2);
      if ((v46 & 1) == 0) {
        goto LABEL_27;
      }
      goto LABEL_36;
    }
    AssociatedConformanceWitness(v26, a1, a2);
    uint64_t v50 = dispatch thunk of BinaryInteger._lowWord.getter();
    ((void (*)(char *, uint64_t))v23)(v26, a2);
    if (v50 <= 0) {
      goto LABEL_27;
    }
LABEL_36:
    uint64_t v74 = v23;
    uint64_t v78 = v5;
    uint64_t v85 = (char *)v9;
    id v51 = v26;
    AssociatedConformanceWitness = (void (*)(char *, uint64_t, uint64_t))swift_getAssociatedConformanceWitness();
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
    id v52 = v75;
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
    uint64_t v53 = v77;
    dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
    uint64_t v54 = v52;
    uint64_t v55 = (void (*)(char *, uint64_t))v74;
    ((void (*)(char *, uint64_t))v74)(v54, a2);
    dispatch thunk of static BinaryInteger./ infix(_:_:)();
    v55(v53, a2);
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
    dispatch thunk of static AdditiveArithmetic.+ infix(_:_:)();
    v55(v53, a2);
    return ((uint64_t (*)(char *, uint64_t))v55)(v51, a2);
  }
  if (v41 > 63) {
    goto LABEL_23;
  }
LABEL_20:
  AssociatedConformanceWitness(v26, v5, a2);
  uint64_t v42 = dispatch thunk of BinaryInteger._lowWord.getter();
  ((void (*)(char *, uint64_t))v23)(v26, a2);
  if (v42 > 0) {
    goto LABEL_24;
  }
LABEL_27:
  if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) == 0)
  {
    char v47 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v48 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if ((v47 & 1) == 0)
    {
      if (v48 >= 64) {
        return dispatch thunk of static BinaryInteger./ infix(_:_:)();
      }
      goto LABEL_38;
    }
    if (v48 <= 64)
    {
      swift_getAssociatedConformanceWitness();
      dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
      dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
      char v58 = dispatch thunk of static Comparable.< infix(_:_:)();
      ((void (*)(char *, uint64_t))v23)(v26, a2);
      long long v59 = v73;
      AssociatedConformanceWitness(v73, v5, a2);
      if (v58)
      {
        ((void (*)(char *, uint64_t))v23)(v59, a2);
      }
      else
      {
        uint64_t v60 = dispatch thunk of BinaryInteger._lowWord.getter();
        ((void (*)(char *, uint64_t))v23)(v59, a2);
        if ((v60 & 0x8000000000000000) == 0) {
          return dispatch thunk of static BinaryInteger./ infix(_:_:)();
        }
      }
      goto LABEL_43;
    }
LABEL_32:
    uint64_t v86 = 0;
    lazy protocol witness table accessor for type Int and conformance Int();
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    char v49 = dispatch thunk of static Comparable.< infix(_:_:)();
    ((void (*)(char *, uint64_t))v23)(v26, a2);
    if ((v49 & 1) == 0) {
      return dispatch thunk of static BinaryInteger./ infix(_:_:)();
    }
    goto LABEL_43;
  }
  if (dispatch thunk of BinaryInteger.bitWidth.getter() >= 64) {
    goto LABEL_32;
  }
LABEL_38:
  AssociatedConformanceWitness(v26, v5, a2);
  uint64_t v57 = dispatch thunk of BinaryInteger._lowWord.getter();
  ((void (*)(char *, uint64_t))v23)(v26, a2);
  if ((v57 & 0x8000000000000000) == 0) {
    return dispatch thunk of static BinaryInteger./ infix(_:_:)();
  }
LABEL_43:
  if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) == 0)
  {
    char v61 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v62 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if ((v61 & 1) == 0)
    {
      if (v62 < 64) {
        goto LABEL_51;
      }
      return dispatch thunk of static BinaryInteger./ infix(_:_:)();
    }
    if (v62 <= 64)
    {
      swift_getAssociatedConformanceWitness();
      dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
      dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
      char v68 = dispatch thunk of static Comparable.< infix(_:_:)();
      ((void (*)(char *, uint64_t))v23)(v26, a2);
      char v69 = v72;
      AssociatedConformanceWitness(v72, a1, a2);
      if (v68)
      {
        ((void (*)(char *, uint64_t))v23)(v69, a2);
      }
      else
      {
        uint64_t v70 = dispatch thunk of BinaryInteger._lowWord.getter();
        ((void (*)(char *, uint64_t))v23)(v69, a2);
        if ((v70 & 0x8000000000000000) == 0) {
          return dispatch thunk of static BinaryInteger./ infix(_:_:)();
        }
      }
      goto LABEL_53;
    }
LABEL_48:
    uint64_t v86 = 0;
    lazy protocol witness table accessor for type Int and conformance Int();
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    char v63 = dispatch thunk of static Comparable.< infix(_:_:)();
    ((void (*)(char *, uint64_t))v23)(v26, a2);
    if (v63) {
      goto LABEL_53;
    }
    return dispatch thunk of static BinaryInteger./ infix(_:_:)();
  }
  if (dispatch thunk of BinaryInteger.bitWidth.getter() >= 64) {
    goto LABEL_48;
  }
LABEL_51:
  AssociatedConformanceWitness(v26, a1, a2);
  uint64_t v64 = dispatch thunk of BinaryInteger._lowWord.getter();
  ((void (*)(char *, uint64_t))v23)(v26, a2);
  if ((v64 & 0x8000000000000000) == 0) {
    return dispatch thunk of static BinaryInteger./ infix(_:_:)();
  }
LABEL_53:
  AssociatedConformanceWitness = (void (*)(char *, uint64_t, uint64_t))swift_getAssociatedConformanceWitness();
  uint64_t v85 = (char *)v9;
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
  uint64_t v65 = v75;
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
  uint64_t v78 = *(void *)(v76 + 8);
  int v66 = v26;
  uint64_t v67 = v77;
  dispatch thunk of static AdditiveArithmetic.+ infix(_:_:)();
  ((void (*)(char *, uint64_t))v23)(v65, a2);
  dispatch thunk of static BinaryInteger./ infix(_:_:)();
  ((void (*)(char *, uint64_t))v23)(v67, a2);
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
  dispatch thunk of static AdditiveArithmetic.+ infix(_:_:)();
  ((void (*)(char *, uint64_t))v23)(v67, a2);
  return ((uint64_t (*)(char *, uint64_t))v23)(v66, a2);
}

unint64_t lazy protocol witness table accessor for type Int and conformance Int()
{
  unint64_t result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }
  return result;
}

uint64_t FixedWidthInteger.nextMultipleOf(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v44 = a4;
  uint64_t v42 = a3;
  uint64_t v45 = *(void *)(*(void *)(a3 + 8) + 24);
  uint64_t v40 = *(void *)(v45 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  v38[1] = (char *)v38 - v8;
  uint64_t v9 = *(void *)(a2 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v7);
  uint64_t v41 = (char *)v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  char v47 = (char *)v38 - v13;
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)v38 - v15;
  uint64_t v17 = MEMORY[0x270FA5388](v14);
  uint64_t v19 = (char *)v38 - v18;
  MEMORY[0x270FA5388](v17);
  uint64_t v21 = (char *)v38 - v20;
  uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  uint64_t v46 = a1;
  v22((char *)v38 - v20, a1, a2);
  uint64_t v48 = v19;
  uint64_t v43 = v4;
  v22(v19, v4, a2);
  LOBYTE(a1) = dispatch thunk of static BinaryInteger.isSigned.getter();
  char v49 = v21;
  uint64_t v23 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if ((a1 & 1) == 0) {
    goto LABEL_6;
  }
  if (v23 <= 64) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v50 = 0;
  lazy protocol witness table accessor for type Int and conformance Int();
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
  char v24 = dispatch thunk of static Comparable.< infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v16, a2);
  uint64_t v25 = v47;
  uint64_t v26 = (uint64_t)v48;
  v22(v47, (uint64_t)v48, a2);
  if ((v24 & 1) == 0)
  {
LABEL_4:
    uint64_t v27 = *(void (**)(char *, uint64_t))(v9 + 8);
    uint64_t v9 = (v9 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    goto LABEL_5;
  }
  while (1)
  {
    if (dispatch thunk of static BinaryInteger.isSigned.getter())
    {
      if (dispatch thunk of BinaryInteger.bitWidth.getter() >= 64)
      {
LABEL_13:
        uint64_t v50 = 0;
        lazy protocol witness table accessor for type Int and conformance Int();
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        char v31 = dispatch thunk of static Comparable.< infix(_:_:)();
        char v32 = *(void (**)(char *, uint64_t))(v9 + 8);
        v9 += 8;
        uint64_t v27 = v32;
        v32(v16, a2);
        v32(v25, a2);
        v32((char *)v26, a2);
        v32(v49, a2);
        if ((v31 & 1) == 0) {
          goto LABEL_17;
        }
        goto LABEL_20;
      }
      goto LABEL_16;
    }
    char v29 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v30 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if ((v29 & 1) == 0)
    {
      if (v30 >= 64) {
        goto LABEL_21;
      }
LABEL_16:
      uint64_t v33 = dispatch thunk of BinaryInteger._lowWord.getter();
      unint64_t v34 = *(void (**)(char *, uint64_t))(v9 + 8);
      v9 += 8;
      uint64_t v27 = v34;
      v34(v25, a2);
      v34((char *)v26, a2);
      v34(v49, a2);
      if ((v33 & 0x8000000000000000) == 0) {
        goto LABEL_17;
      }
      goto LABEL_20;
    }
    if (v30 > 64) {
      goto LABEL_13;
    }
    swift_getAssociatedConformanceWitness();
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
    LODWORD(v47) = dispatch thunk of static Comparable.< infix(_:_:)();
    uint64_t v26 = v9 + 8;
    uint64_t v27 = *(void (**)(char *, uint64_t))(v9 + 8);
    uint64_t v9 = (v9 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v27(v16, a2);
    uint64_t v36 = v41;
    v22(v41, (uint64_t)v25, a2);
    if ((v47 & 1) == 0) {
      break;
    }
    v27(v36, a2);
    uint64_t v26 = (uint64_t)v48;
LABEL_5:
    v27(v25, a2);
    v27((char *)v26, a2);
    uint64_t v23 = ((uint64_t (*)(char *, uint64_t))v27)(v49, a2);
    __break(1u);
LABEL_6:
    if (v23 > 63) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v28 = dispatch thunk of BinaryInteger._lowWord.getter();
    uint64_t v25 = v47;
    uint64_t v26 = (uint64_t)v48;
    v22(v47, (uint64_t)v48, a2);
    if (v28 <= 0) {
      goto LABEL_4;
    }
  }
  uint64_t v37 = dispatch thunk of BinaryInteger._lowWord.getter();
  v27(v36, a2);
  v27(v25, a2);
  v27(v48, a2);
  v27(v49, a2);
  if ((v37 & 0x8000000000000000) == 0) {
    goto LABEL_17;
  }
LABEL_20:
  __break(1u);
LABEL_21:
  uint64_t v27 = *(void (**)(char *, uint64_t))(v9 + 8);
  v27(v25, a2);
  v27((char *)v26, a2);
  v27(v49, a2);
LABEL_17:
  FixedWidthInteger.divCeil(_:)(v46, a2, v42, (uint64_t)v16);
  dispatch thunk of static Numeric.* infix(_:_:)();
  return ((uint64_t (*)(char *, uint64_t))v27)(v16, a2);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CipherML19SymmetricPirKeywordVG_10Foundation4DataVs5NeverOTg503_s8d42ML15RequestsManagerC10PIRContextV28decryptf24PIRResponses_20symmetricg24KeywordsSay10Foundation4j40VSgGSayAA17AspireApiResponseVG_SayAA0gJ7H60VGtKFAjQcfu_33_629df1417557ae7fb76f1d8e37ffce09AqJTf3nnnpk_nTf1cn_nTm(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    uint64_t v11 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v2 = v11;
    uint64_t v4 = (unint64_t *)(a1 + 40);
    do
    {
      uint64_t v5 = *(v4 - 1);
      unint64_t v6 = *v4;
      outlined copy of Data._Representation(v5, *v4);
      unint64_t v8 = *(void *)(v11 + 16);
      unint64_t v7 = *(void *)(v11 + 24);
      if (v8 >= v7 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
      }
      v4 += 4;
      *(void *)(v11 + 16) = v8 + 1;
      uint64_t v9 = v11 + 16 * v8;
      *(void *)(v9 + 32) = v5;
      *(void *)(v9 + 40) = v6;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySay10Foundation4DataVGSaySSGG_8CipherML16AspireApiRequestVsAE_pTg5015_s10Foundation4g4VSS8h4ML16jkl3Vs5C33_pIgggrzo_AC_SStAFsAG_pIegnrzr_TRAJSSAPsAE_pIgggrzo_Tf1cn_n(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, unint64_t, uint64_t, uint64_t), uint64_t a4)
{
  uint64_t v40 = a3;
  uint64_t v41 = a4;
  uint64_t v7 = type metadata accessor for AspireApiRequest(0);
  uint64_t v39 = *(void *)(v7 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v7 - 8);
  uint64_t v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v37 = (uint64_t)&v33 - v11;
  unint64_t v12 = *(void *)(a1 + 16);
  unint64_t v35 = *(void *)(a2 + 16);
  unint64_t v36 = v12;
  if (v35 >= v12) {
    int64_t v13 = v12;
  }
  else {
    int64_t v13 = v35;
  }
  uint64_t v43 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13, 0);
  uint64_t v14 = v43;
  uint64_t v38 = a1;
  uint64_t v42 = a2;
  int64_t v34 = v13;
  if (v13)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v15 = 0;
    int64_t v16 = v13;
    while (1)
    {
      uint64_t v18 = *(void *)(v38 + v15 + 32);
      unint64_t v17 = *(void *)(v38 + v15 + 40);
      uint64_t v19 = *(void *)(v42 + v15 + 32);
      uint64_t v20 = *(void *)(v42 + v15 + 40);
      outlined copy of Data._Representation(v18, v17);
      uint64_t result = swift_bridgeObjectRetain();
      if (!v20) {
        goto LABEL_27;
      }
      v40(v18, v17, v19, v20);
      if (v4)
      {
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of Data._Representation(v18, v17);
LABEL_24:
        swift_bridgeObjectRelease();
        return v14;
      }
      outlined consume of Data._Representation(v18, v17);
      swift_bridgeObjectRelease();
      uint64_t v43 = v14;
      unint64_t v23 = *(void *)(v14 + 16);
      unint64_t v22 = *(void *)(v14 + 24);
      if (v23 >= v22 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1);
        uint64_t v14 = v43;
      }
      *(void *)(v14 + 16) = v23 + 1;
      uint64_t result = outlined init with take of AspirePirSymmetricPirClientConfig((uint64_t)v10, v14+ ((*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80))+ *(void *)(v39 + 72) * v23, type metadata accessor for AspireApiRequest);
      v15 += 16;
      if (!--v16) {
        goto LABEL_13;
      }
    }
  }
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRetain();
LABEL_13:
  if (v36 > v35)
  {
    unint64_t v24 = v35 - v34;
    unint64_t v25 = v36 - v34;
    unint64_t v36 = v38 + 40;
    uint64_t v26 = 16 * v34;
    while (v25)
    {
      if (!v24) {
        goto LABEL_21;
      }
      uint64_t v27 = *(void *)(v36 + v26 - 8);
      unint64_t v28 = *(void *)(v36 + v26);
      uint64_t v29 = *(void *)(v42 + v26 + 32);
      uint64_t v30 = *(void *)(v42 + v26 + 40);
      outlined copy of Data._Representation(v27, v28);
      swift_bridgeObjectRetain();
      v40(v27, v28, v29, v30);
      if (v4)
      {
        outlined consume of Data._Representation(v27, v28);
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_24;
      }
      outlined consume of Data._Representation(v27, v28);
      swift_bridgeObjectRelease();
      uint64_t v43 = v14;
      unint64_t v32 = *(void *)(v14 + 16);
      unint64_t v31 = *(void *)(v14 + 24);
      if (v32 >= v31 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1);
        uint64_t v14 = v43;
      }
      *(void *)(v14 + 16) = v32 + 1;
      uint64_t result = outlined init with take of AspirePirSymmetricPirClientConfig(v37, v14+ ((*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80))+ *(void *)(v39 + 72) * v32, type metadata accessor for AspireApiRequest);
      --v24;
      v26 += 16;
      if (!--v25) {
        goto LABEL_21;
      }
    }
    __break(1u);
    __break(1u);
LABEL_27:
    __break(1u);
    return result;
  }
LABEL_21:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySay8CipherML17AspireApiResponseVGSay10Foundation4DataVGG_ANSgsAE_pTg503_s8f4ML17hij14V10Foundation4l7VAFSgs5C33_pIgngozo_AC_AFtAGsAH_pIegnrzr_TRAjnQsAE_pIgngozo_Tf1cn_n(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t), uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v72 = a3;
  uint64_t v73 = a4;
  uint64_t v8 = type metadata accessor for AspireApiResponse(0);
  uint64_t v74 = *(void *)(v8 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v8 - 8);
  uint64_t v11 = (char *)&v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v65 = (uint64_t)&v62 - v12;
  uint64_t v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireApiResponse, Data));
  uint64_t v13 = MEMORY[0x270FA5388](v71);
  uint64_t v67 = (uint64_t)&v62 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v64 = (uint64_t)&v62 - v16;
  MEMORY[0x270FA5388](v15);
  uint64_t v63 = (uint64_t)&v62 - v17;
  unint64_t v18 = *(void *)(a1 + 16);
  unint64_t v19 = *(void *)(a2 + 16);
  if (v19 >= v18) {
    int64_t v20 = *(void *)(a1 + 16);
  }
  else {
    int64_t v20 = *(void *)(a2 + 16);
  }
  uint64_t v76 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20, 0);
  int64_t v21 = v20;
  unint64_t v69 = v19;
  uint64_t v70 = a1;
  unint64_t v68 = v18;
  uint64_t v62 = a2;
  if (v20)
  {
    uint64_t v22 = v76;
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v24 = 0;
    unint64_t v25 = (unint64_t *)(a2 + 40);
    int v66 = v11;
    while (v18 != v24)
    {
      uint64_t result = outlined init with copy of UserIdentifier(a1+ ((*(unsigned __int8 *)(v74 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v74 + 80))+ *(void *)(v74 + 72) * v24, (uint64_t)v11, type metadata accessor for AspireApiResponse);
      if (v19 == v24) {
        goto LABEL_36;
      }
      int64_t v26 = v21;
      uint64_t v27 = *(v25 - 1);
      unint64_t v28 = *v25;
      uint64_t v29 = (uint64_t)v11;
      uint64_t v30 = v67;
      unint64_t v31 = (uint64_t *)(v67 + *(int *)(v71 + 48));
      outlined init with take of AspirePirSymmetricPirClientConfig(v29, v67, type metadata accessor for AspireApiResponse);
      *unint64_t v31 = v27;
      v31[1] = v28;
      uint64_t v32 = v30;
      outlined copy of Data._Representation(v27, v28);
      uint64_t v33 = v72(v30, v27, v28);
      uint64_t v75 = v5;
      if (v5)
      {
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return outlined destroy of AMDPbHEConfig.OneOf_Config?(v30, &demangling cache variable for type metadata for (AspireApiResponse, Data));
      }
      uint64_t v35 = v33;
      uint64_t v36 = v34;
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v32, &demangling cache variable for type metadata for (AspireApiResponse, Data));
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v22 + 16) + 1, 1);
        uint64_t v22 = v76;
      }
      int64_t v21 = v26;
      unint64_t v38 = *(void *)(v22 + 16);
      unint64_t v37 = *(void *)(v22 + 24);
      if (v38 >= v37 >> 1)
      {
        uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v37 > 1, v38 + 1, 1);
        int64_t v21 = v26;
        uint64_t v22 = v76;
      }
      ++v24;
      *(void *)(v22 + 16) = v38 + 1;
      uint64_t v39 = v22 + 16 * v38;
      *(void *)(v39 + 32) = v35;
      *(void *)(v39 + 40) = v36;
      v25 += 2;
      uint64_t v5 = v75;
      unint64_t v19 = v69;
      a1 = v70;
      unint64_t v18 = v68;
      uint64_t v11 = v66;
      if (v21 == v24) {
        goto LABEL_16;
      }
    }
    __break(1u);
LABEL_36:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
LABEL_16:
    uint64_t v75 = v5;
    if (v18 <= v19)
    {
LABEL_33:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v76;
    }
    if (v21 <= (uint64_t)v19) {
      uint64_t v40 = v19;
    }
    else {
      uint64_t v40 = v21;
    }
    uint64_t v67 = v40;
    uint64_t v41 = (unint64_t *)(v62 + 16 * v21 + 40);
    while (v18 != v21)
    {
      uint64_t v42 = v65;
      uint64_t result = outlined init with copy of UserIdentifier(a1+ ((*(unsigned __int8 *)(v74 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v74 + 80))+ *(void *)(v74 + 72) * v21, v65, type metadata accessor for AspireApiResponse);
      if (v69 == v21)
      {
        outlined destroy of AspirePirKeywordPirParameters(v42, type metadata accessor for AspireApiResponse);
        goto LABEL_33;
      }
      if (v67 == v21) {
        goto LABEL_38;
      }
      int64_t v43 = v21;
      uint64_t v44 = *(v41 - 1);
      unint64_t v45 = *v41;
      uint64_t v46 = v71;
      uint64_t v47 = v64;
      uint64_t v48 = (uint64_t *)(v64 + *(int *)(v71 + 48));
      outlined init with take of AspirePirSymmetricPirClientConfig(v42, v64, type metadata accessor for AspireApiResponse);
      *uint64_t v48 = v44;
      v48[1] = v45;
      uint64_t v49 = v47;
      uint64_t v50 = v63;
      outlined init with take of SymmetricPirClientConfig?(v49, v63, &demangling cache variable for type metadata for (AspireApiResponse, Data));
      id v51 = (uint64_t *)(v50 + *(int *)(v46 + 48));
      uint64_t v52 = *v51;
      unint64_t v53 = v51[1];
      outlined copy of Data._Representation(v44, v45);
      uint64_t v54 = v75;
      uint64_t v55 = v72(v50, v52, v53);
      uint64_t v57 = v56;
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v50, &demangling cache variable for type metadata for (AspireApiResponse, Data));
      uint64_t v75 = v54;
      if (v54)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return swift_release();
      }
      uint64_t v58 = v76;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v58 + 16) + 1, 1);
        uint64_t v58 = v76;
      }
      unint64_t v18 = v68;
      unint64_t v60 = *(void *)(v58 + 16);
      unint64_t v59 = *(void *)(v58 + 24);
      if (v60 >= v59 >> 1)
      {
        uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v59 > 1, v60 + 1, 1);
        uint64_t v58 = v76;
      }
      *(void *)(v58 + 16) = v60 + 1;
      uint64_t v61 = v58 + 16 * v60;
      int64_t v21 = v43 + 1;
      *(void *)(v61 + 32) = v55;
      *(void *)(v61 + 40) = v57;
      v41 += 2;
      a1 = v70;
      if (v18 == v43 + 1) {
        goto LABEL_33;
      }
    }
  }
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySay8CipherML19SymmetricPirKeywordVGSay10Foundation4DataVSgGG_AOsAE_pTg503_s8f4ML19hij14V10Foundation4l7VSgAGs5C33_pIgggozo_AC_AGtAGsAH_pIegnrzr_TRAj2OsAE_pIgggozo_Tf1cn_n(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, unint64_t, uint64_t, unint64_t, uint64_t, unint64_t), uint64_t a4)
{
  unint64_t v42 = *(void *)(a1 + 16);
  unint64_t v39 = *(void *)(a2 + 16);
  if (v39 >= v42) {
    int64_t v6 = *(void *)(a1 + 16);
  }
  else {
    int64_t v6 = *(void *)(a2 + 16);
  }
  uint64_t v55 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
  uint64_t v7 = v55;
  uint64_t v40 = a1;
  uint64_t v41 = a2;
  int64_t v38 = v6;
  if (v6)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v8 = (unint64_t *)(a1 + 56);
    uint64_t v9 = (unint64_t *)(a2 + 40);
    while (1)
    {
      int64_t v50 = v6;
      uint64_t v52 = v7;
      uint64_t v11 = *(v8 - 3);
      unint64_t v10 = *(v8 - 2);
      uint64_t v13 = *(v8 - 1);
      unint64_t v12 = *v8;
      uint64_t v14 = *(v9 - 1);
      unint64_t v15 = *v9;
      outlined copy of Data._Representation(v11, v10);
      outlined copy of Data._Representation(v13, v12);
      uint64_t result = outlined copy of Data?(v14, v15);
      if (v10 >> 60 == 15) {
        goto LABEL_26;
      }
      uint64_t v7 = a4;
      uint64_t v17 = a3(v11, v10, v13, v12, v14, v15);
      if (v54)
      {
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of Data._Representation(v11, v10);
        outlined consume of Data._Representation(v13, v12);
        outlined consume of Data?(v14, v15);
        return v7;
      }
      uint64_t v46 = v18;
      uint64_t v48 = v17;
      outlined consume of Data._Representation(v11, v10);
      outlined consume of Data._Representation(v13, v12);
      outlined consume of Data?(v14, v15);
      uint64_t v7 = v52;
      unint64_t v20 = *(void *)(v52 + 16);
      unint64_t v19 = *(void *)(v52 + 24);
      if (v20 >= v19 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
        uint64_t v7 = v52;
      }
      v8 += 4;
      v9 += 2;
      *(void *)(v7 + 16) = v20 + 1;
      uint64_t v21 = v7 + 16 * v20;
      *(void *)(v21 + 32) = v48;
      *(void *)(v21 + 40) = v46;
      int64_t v6 = v50 - 1;
      if (v50 == 1) {
        goto LABEL_13;
      }
    }
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
LABEL_13:
  if (v42 > v39)
  {
    unint64_t v22 = v39 - v38;
    unint64_t v23 = v42 - v38;
    uint64_t result = v41;
    uint64_t v24 = (unint64_t *)(v41 + 16 * v38 + 40);
    unint64_t v25 = (unint64_t *)(v40 + 32 * v38 + 56);
    while (v23)
    {
      if (!v22) {
        goto LABEL_21;
      }
      unint64_t v49 = v23;
      unint64_t v51 = v22;
      uint64_t v53 = v7;
      uint64_t v26 = *(v25 - 3);
      unint64_t v27 = *(v25 - 2);
      uint64_t v28 = *(v25 - 1);
      unint64_t v29 = *v25;
      uint64_t v30 = *(v24 - 1);
      unint64_t v31 = *v24;
      uint64_t v47 = v24;
      outlined copy of Data._Representation(v26, v27);
      outlined copy of Data._Representation(v28, v29);
      outlined copy of Data?(v30, v31);
      uint64_t v7 = a4;
      uint64_t v32 = a3(v26, v27, v28, v29, v30, v31);
      if (v54)
      {
        outlined consume of Data._Representation(v26, v27);
        outlined consume of Data._Representation(v28, v29);
        outlined consume of Data?(v30, v31);
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v7;
      }
      uint64_t v34 = v33;
      uint64_t v43 = v32;
      outlined consume of Data._Representation(v26, v27);
      outlined consume of Data._Representation(v28, v29);
      outlined consume of Data?(v30, v31);
      uint64_t v7 = v53;
      unint64_t v36 = *(void *)(v53 + 16);
      unint64_t v35 = *(void *)(v53 + 24);
      if (v36 >= v35 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v35 > 1, v36 + 1, 1);
        uint64_t v7 = v53;
      }
      *(void *)(v7 + 16) = v36 + 1;
      uint64_t v37 = v7 + 16 * v36;
      uint64_t result = v41;
      *(void *)(v37 + 32) = v43;
      *(void *)(v37 + 40) = v34;
      unint64_t v22 = v51 - 1;
      uint64_t v24 = v47 + 2;
      v25 += 4;
      unint64_t v23 = v49 - 1;
      if (v49 == 1) {
        goto LABEL_21;
      }
    }
    __break(1u);
    __break(1u);
LABEL_26:
    __break(1u);
    return result;
  }
LABEL_21:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t RequestsManager.PIRContext.useCase.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t RequestsManager.PIRContext.userId.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for RequestsManager.PIRContext();
  return outlined init with copy of UserIdentifier(v1 + *(int *)(v3 + 20), a1, (uint64_t (*)(void))type metadata accessor for UserIdentifier);
}

uint64_t type metadata accessor for RequestsManager.PIRContext()
{
  uint64_t result = type metadata singleton initialization cache for RequestsManager.PIRContext;
  if (!type metadata singleton initialization cache for RequestsManager.PIRContext) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t RequestsManager.PIRContext.config.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for RequestsManager.PIRContext();
  return outlined init with copy of UserIdentifier(v1 + *(int *)(v3 + 24), a1, type metadata accessor for AspireApiPIRConfig);
}

uint64_t RequestsManager.PIRContext.configID.getter()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for RequestsManager.PIRContext() + 28);
  uint64_t v2 = *(void *)v1;
  outlined copy of Data._Representation(*(void *)v1, *(void *)(v1 + 8));
  return v2;
}

uint64_t RequestsManager.PIRContext.secretKey.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for RequestsManager.PIRContext();
  return outlined init with copy of UserIdentifier(v1 + *(int *)(v3 + 32), a1, (uint64_t (*)(void))type metadata accessor for SecretKey);
}

uint64_t RequestsManager.PIRContext.cache.getter()
{
  return swift_unknownObjectRetain();
}

double RequestsManager.PIRContext.symmetricPirConfig()@<D0>(uint64_t a1@<X8>)
{
  uint64_t v63 = a1;
  uint64_t v2 = type metadata accessor for AspirePirSymmetricPirClientConfig(0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  uint64_t v62 = (char *)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v67 = (char *)&v61 - v6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirSymmetricPirClientConfig?);
  uint64_t v8 = MEMORY[0x270FA5388](v7 - 8);
  uint64_t v61 = (uint64_t)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v66 = (uint64_t)&v61 - v11;
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v61 - v12;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  uint64_t v15 = MEMORY[0x270FA5388](v14 - 8);
  uint64_t v64 = (uint64_t)&v61 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  uint64_t v65 = (uint64_t)&v61 - v18;
  MEMORY[0x270FA5388](v17);
  unint64_t v20 = (char *)&v61 - v19;
  uint64_t v21 = type metadata accessor for AspirePirKeywordPirParameters(0);
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = MEMORY[0x270FA5388](v21);
  unint64_t v68 = (char *)&v61 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = MEMORY[0x270FA5388](v23);
  unint64_t v27 = (char *)&v61 - v26;
  MEMORY[0x270FA5388](v25);
  unint64_t v29 = (char *)&v61 - v28;
  uint64_t v30 = v1 + *(int *)(type metadata accessor for RequestsManager.PIRContext() + 24);
  uint64_t v31 = *(int *)(type metadata accessor for AspireApiPIRConfig(0) + 20);
  uint64_t v72 = v30;
  uint64_t v69 = v31;
  uint64_t v32 = *(void *)(v30 + v31)
      + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__keywordPirParams;
  swift_beginAccess();
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v32, (uint64_t)v20, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  uint64_t v33 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48);
  uint64_t v73 = v22 + 48;
  uint64_t v71 = v33;
  if (v33((uint64_t)v20, 1, v21) == 1)
  {
    *(void *)unint64_t v29 = 0;
    v29[8] = 0;
    UnknownStorage.init()();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(&v29[*(int *)(v21 + 28)], 1, 1, v2);
    uint64_t v34 = &v29[*(int *)(v21 + 32)];
    uint64_t v35 = type metadata accessor for AspirePirPIRShardingFunction(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v34, 1, 1, v35);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v20, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  }
  else
  {
    outlined init with take of AspirePirSymmetricPirClientConfig((uint64_t)v20, (uint64_t)v29, type metadata accessor for AspirePirKeywordPirParameters);
  }
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)&v29[*(int *)(v21 + 28)], (uint64_t)v13, &demangling cache variable for type metadata for AspirePirSymmetricPirClientConfig?);
  uint64_t v74 = v3;
  unint64_t v36 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  uint64_t v37 = v2;
  uint64_t v70 = v36;
  int v38 = v36((uint64_t)v13, 1, v2);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v13, &demangling cache variable for type metadata for AspirePirSymmetricPirClientConfig?);
  outlined destroy of AspirePirKeywordPirParameters((uint64_t)v29, type metadata accessor for AspirePirKeywordPirParameters);
  if (v38 == 1) {
    goto LABEL_15;
  }
  uint64_t v39 = *(void *)(v72 + v69)
      + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__keywordPirParams;
  swift_beginAccess();
  uint64_t v40 = v65;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v39, v65, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  if (v71(v40, 1, v21) == 1)
  {
    *(void *)unint64_t v27 = 0;
    v27[8] = 0;
    UnknownStorage.init()();
    uint64_t v41 = v37;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v74 + 56))(&v27[*(int *)(v21 + 28)], 1, 1, v37);
    unint64_t v42 = &v27[*(int *)(v21 + 32)];
    uint64_t v43 = type metadata accessor for AspirePirPIRShardingFunction(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v43 - 8) + 56))(v42, 1, 1, v43);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v40, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  }
  else
  {
    outlined init with take of AspirePirSymmetricPirClientConfig(v40, (uint64_t)v27, type metadata accessor for AspirePirKeywordPirParameters);
    uint64_t v41 = v37;
  }
  uint64_t v44 = v66;
  uint64_t v45 = (uint64_t)v67;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)&v27[*(int *)(v21 + 28)], v66, &demangling cache variable for type metadata for AspirePirSymmetricPirClientConfig?);
  int v46 = v70(v44, 1, v41);
  uint64_t v47 = (uint64_t)v68;
  if (v46 == 1)
  {
    *(_OWORD *)uint64_t v45 = xmmword_249E85DF0;
    *(void *)(v45 + 16) = 0;
    *(unsigned char *)(v45 + 24) = 1;
    UnknownStorage.init()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v44, &demangling cache variable for type metadata for AspirePirSymmetricPirClientConfig?);
  }
  else
  {
    outlined init with take of AspirePirSymmetricPirClientConfig(v44, v45, type metadata accessor for AspirePirSymmetricPirClientConfig);
  }
  uint64_t v48 = v74;
  outlined destroy of AspirePirKeywordPirParameters((uint64_t)v27, type metadata accessor for AspirePirKeywordPirParameters);
  uint64_t v49 = *(void *)(v45 + 16);
  int v50 = *(unsigned __int8 *)(v45 + 24);
  outlined destroy of AspirePirKeywordPirParameters(v45, type metadata accessor for AspirePirSymmetricPirClientConfig);
  if (v50 == 1 && v49)
  {
    uint64_t v51 = *(void *)(v72 + v69)
        + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__keywordPirParams;
    swift_beginAccess();
    uint64_t v52 = v64;
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v51, v64, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
    if (v71(v52, 1, v21) == 1)
    {
      *(void *)uint64_t v47 = 0;
      *(unsigned char *)(v47 + 8) = 0;
      UnknownStorage.init()();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v48 + 56))(v47 + *(int *)(v21 + 28), 1, 1, v41);
      uint64_t v53 = v47 + *(int *)(v21 + 32);
      uint64_t v54 = type metadata accessor for AspirePirPIRShardingFunction(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v54 - 8) + 56))(v53, 1, 1, v54);
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v52, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
    }
    else
    {
      outlined init with take of AspirePirSymmetricPirClientConfig(v52, v47, type metadata accessor for AspirePirKeywordPirParameters);
    }
    uint64_t v56 = v63;
    uint64_t v57 = (uint64_t)v62;
    uint64_t v58 = v61;
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v47 + *(int *)(v21 + 28), v61, &demangling cache variable for type metadata for AspirePirSymmetricPirClientConfig?);
    if (v70(v58, 1, v41) == 1)
    {
      *(_OWORD *)uint64_t v57 = xmmword_249E85DF0;
      *(void *)(v57 + 16) = 0;
      *(unsigned char *)(v57 + 24) = 1;
      UnknownStorage.init()();
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v58, &demangling cache variable for type metadata for AspirePirSymmetricPirClientConfig?);
    }
    else
    {
      outlined init with take of AspirePirSymmetricPirClientConfig(v58, v57, type metadata accessor for AspirePirSymmetricPirClientConfig);
    }
    outlined destroy of AspirePirKeywordPirParameters(v47, type metadata accessor for AspirePirKeywordPirParameters);
    uint64_t v59 = *(void *)v57;
    unint64_t v60 = *(void *)(v57 + 8);
    outlined copy of Data._Representation(*(void *)v57, v60);
    outlined destroy of AspirePirKeywordPirParameters(v57, type metadata accessor for AspirePirSymmetricPirClientConfig);
    *(void *)uint64_t v56 = v59;
    *(void *)(v56 + 8) = v60;
    *(void *)&double result = 16;
    *(_OWORD *)(v56 + 16) = xmmword_249E88010;
    *(_OWORD *)(v56 + 32) = xmmword_249E88020;
  }
  else
  {
LABEL_15:
    type metadata accessor for CipherMLError();
    _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
  }
  return result;
}

unint64_t RequestsManager.PIRContext.constructPIRClient(keyword:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = v3;
  uint64_t v29 = a3;
  uint64_t v8 = type metadata accessor for AspireApiPIRConfig(0);
  uint64_t v9 = MEMORY[0x270FA5388](v8 - 8);
  uint64_t v28 = (uint64_t)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v27 - v11;
  uint64_t v13 = type metadata accessor for SecretKey();
  uint64_t v14 = MEMORY[0x270FA5388](v13 - 8);
  uint64_t v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v27 - v17;
  uint64_t v19 = (int *)type metadata accessor for RequestsManager.PIRContext();
  uint64_t v20 = v3 + v19[6];
  unint64_t result = AspireApiPIRConfig.shardIndex(for:)(a1, a2);
  if (!v4)
  {
    uint64_t v22 = v19[8];
    unint64_t v27 = result;
    outlined init with copy of UserIdentifier(v5 + v22, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for SecretKey);
    outlined init with copy of UserIdentifier(v20, (uint64_t)v12, type metadata accessor for AspireApiPIRConfig);
    uint64_t v23 = (uint64_t *)(v5 + v19[7]);
    uint64_t v24 = *v23;
    unint64_t v25 = v23[1];
    outlined init with copy of UserIdentifier((uint64_t)v18, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for SecretKey);
    uint64_t v26 = v28;
    outlined init with copy of UserIdentifier((uint64_t)v12, v28, type metadata accessor for AspireApiPIRConfig);
    outlined copy of Data._Representation(v24, v25);
    KeywordPIRClient.init(secretKey:config:configID:shardLabel:)((uint64_t)v16, v26, v24, v25, v27, 0, 1, v29);
    outlined destroy of AspirePirKeywordPirParameters((uint64_t)v12, type metadata accessor for AspireApiPIRConfig);
    return outlined destroy of AspirePirKeywordPirParameters((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for SecretKey);
  }
  return result;
}

uint64_t RequestsManager.PIRContext.constructPIRClient(shardId:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v22 = a3;
  uint64_t v23 = a1;
  uint64_t v5 = type metadata accessor for AspireApiPIRConfig(0);
  uint64_t v6 = MEMORY[0x270FA5388](v5 - 8);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v22 - v9;
  uint64_t v11 = type metadata accessor for SecretKey();
  uint64_t v12 = MEMORY[0x270FA5388](v11 - 8);
  uint64_t v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v22 - v15;
  uint64_t v17 = (int *)type metadata accessor for RequestsManager.PIRContext();
  outlined init with copy of UserIdentifier(v3 + v17[8], (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for SecretKey);
  outlined init with copy of UserIdentifier(v3 + v17[6], (uint64_t)v10, type metadata accessor for AspireApiPIRConfig);
  uint64_t v18 = (uint64_t *)(v3 + v17[7]);
  uint64_t v19 = *v18;
  unint64_t v20 = v18[1];
  outlined init with copy of UserIdentifier((uint64_t)v16, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for SecretKey);
  outlined init with copy of UserIdentifier((uint64_t)v10, (uint64_t)v8, type metadata accessor for AspireApiPIRConfig);
  outlined copy of Data._Representation(v19, v20);
  swift_bridgeObjectRetain();
  KeywordPIRClient.init(secretKey:config:configID:shardLabel:)((uint64_t)v14, (uint64_t)v8, v19, v20, v23, a2, 0, v22);
  outlined destroy of AspirePirKeywordPirParameters((uint64_t)v10, type metadata accessor for AspireApiPIRConfig);
  return outlined destroy of AspirePirKeywordPirParameters((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for SecretKey);
}

uint64_t RequestsManager.PIRContext.prepareDataRequests(keywords:shardIds:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(a2 + 16);
  if (v6)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    if (v6 == v8)
    {
      MEMORY[0x270FA5388](a1);
      uint64_t v16 = v2;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v4 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySay10Foundation4DataVGSaySSGG_8CipherML16AspireApiRequestVsAE_pTg5015_s10Foundation4g4VSS8h4ML16jkl3Vs5C33_pIgggrzo_AC_SStAFsAG_pIegnrzr_TRAJSSAPsAE_pIgggrzo_Tf1cn_n(a1, a2, (void (*)(uint64_t, unint64_t, uint64_t, uint64_t))partial apply for closure #2 in RequestsManager.PIRContext.prepareDataRequests(keywords:shardIds:), (uint64_t)v15);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      if (one-time initialization token for daemon != -1) {
        swift_once();
      }
      uint64_t v10 = type metadata accessor for Logger();
      __swift_project_value_buffer(v10, (uint64_t)static Logger.daemon);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v11 = Logger.logObject.getter();
      os_log_type_t v12 = static os_log_type_t.error.getter();
      uint64_t v4 = v12;
      if (os_log_type_enabled(v11, v12))
      {
        uint64_t v13 = swift_slowAlloc();
        *(_DWORD *)uint64_t v13 = 134349312;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v13 + 12) = 2050;
        uint64_t v17 = v8;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_249C3F000, v11, (os_log_type_t)v4, "shardIds (length %{public}ld must be empty or match keywords.count %{public}ld.", (uint8_t *)v13, 0x16u);
        MEMORY[0x24C5B4790](v13, -1, -1);
      }
      else
      {

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      type metadata accessor for CipherMLError();
      _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
      swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
    }
  }
  else
  {
    MEMORY[0x270FA5388](a1);
    uint64_t v16 = v2;
    uint64_t v9 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation4DataVG_8CipherML16AspireApiRequestVsAE_pTg5((void (*)(void *, uint64_t *))partial apply for closure #1 in RequestsManager.PIRContext.prepareDataRequests(keywords:shardIds:), (uint64_t)v15, a1);
    if (!v3) {
      return v9;
    }
  }
  return v4;
}

unint64_t closure #1 in RequestsManager.PIRContext.prepareDataRequests(keywords:shardIds:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v7 = type metadata accessor for AspireApiPIRRequest(0);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for KeywordPIRClient();
  MEMORY[0x270FA5388](v10 - 8);
  os_log_type_t v12 = (char *)v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t result = RequestsManager.PIRContext.constructPIRClient(keyword:)(*(void *)a1, *(void *)(a1 + 8), (uint64_t)v12);
  if (v3)
  {
    *a3 = v3;
  }
  else
  {
    KeywordPIRClient.constructPIRRequest(with:)((uint64_t)v9);
    uint64_t v14 = type metadata accessor for AspireApiRequest(0);
    MEMORY[0x270FA5388](v14);
    v15[-2] = a2;
    v15[-1] = v9;
    _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_1(&lazy protocol witness table cache variable for type AspireApiRequest and conformance AspireApiRequest, (void (*)(uint64_t))type metadata accessor for AspireApiRequest);
    static Message.with(_:)();
    outlined destroy of AspirePirKeywordPirParameters((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for KeywordPIRClient);
    return outlined destroy of AspirePirKeywordPirParameters((uint64_t)v9, type metadata accessor for AspireApiPIRRequest);
  }
  return result;
}

uint64_t closure #2 in RequestsManager.PIRContext.prepareDataRequests(keywords:shardIds:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = type metadata accessor for AspireApiPIRRequest(0);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for KeywordPIRClient();
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = RequestsManager.PIRContext.constructPIRClient(shardId:)(a3, a4, (uint64_t)v14);
  if (!v5)
  {
    KeywordPIRClient.constructPIRRequest(with:)((uint64_t)v11);
    uint64_t v16 = type metadata accessor for AspireApiRequest(0);
    MEMORY[0x270FA5388](v16);
    v17[-2] = a5;
    v17[-1] = v11;
    _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_1(&lazy protocol witness table cache variable for type AspireApiRequest and conformance AspireApiRequest, (void (*)(uint64_t))type metadata accessor for AspireApiRequest);
    static Message.with(_:)();
    outlined destroy of AspirePirKeywordPirParameters((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for KeywordPIRClient);
    return outlined destroy of AspirePirKeywordPirParameters((uint64_t)v11, type metadata accessor for AspireApiPIRRequest);
  }
  return result;
}

uint64_t closure #1 in closure #1 in RequestsManager.PIRContext.prepareDataRequests(keywords:shardIds:)(void *a1, uint64_t *a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v8 = *a2;
  uint64_t v7 = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *a1 = v8;
  a1[1] = v7;
  uint64_t v9 = (uint64_t)a1 + *(int *)(type metadata accessor for AspireApiRequest(0) + 20);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v9, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
  outlined init with copy of UserIdentifier(a3, v9, a4);
  uint64_t v10 = type metadata accessor for AspireApiRequest.OneOf_Request(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 0, 1, v10);
}

uint64_t RequestsManager.PIRContext.decryptKeywordPIRResponses(_:for:)(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v4 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySay8CipherML17AspireApiResponseVGSay10Foundation4DataVGG_ANSgsAE_pTg503_s8f4ML17hij14V10Foundation4l7VAFSgs5C33_pIgngozo_AC_AFtAGsAH_pIegnrzr_TRAjnQsAE_pIgngozo_Tf1cn_n(a1, a2, (uint64_t (*)(uint64_t, uint64_t, unint64_t))partial apply for closure #1 in RequestsManager.PIRContext.decryptKeywordPIRResponses(_:for:), (uint64_t)&v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t closure #1 in RequestsManager.PIRContext.decryptKeywordPIRResponses(_:for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for KeywordPIRClient();
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for AspireApiPIRResponse(0);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v15 = (void *)((char *)v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v12, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  uint64_t v16 = type metadata accessor for AspireApiResponse.OneOf_Response(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48))(v12, 1, v16) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v12, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
LABEL_5:
    a3 = type metadata accessor for CipherMLError();
    _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    return a3;
  }
  if (swift_getEnumCaseMultiPayload())
  {
    outlined destroy of AspirePirKeywordPirParameters((uint64_t)v12, type metadata accessor for AspireApiResponse.OneOf_Response);
    goto LABEL_5;
  }
  outlined init with take of AspirePirSymmetricPirClientConfig((uint64_t)v12, (uint64_t)v15, type metadata accessor for AspireApiPIRResponse);
  RequestsManager.PIRContext.constructPIRClient(keyword:)(a2, a3, (uint64_t)v9);
  if (!v3)
  {
    a3 = KeywordPIRClient.decryptPIRResponse(_:keyword:)(v15, a2, a3);
    outlined destroy of AspirePirKeywordPirParameters((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for KeywordPIRClient);
  }
  outlined destroy of AspirePirKeywordPirParameters((uint64_t)v15, type metadata accessor for AspireApiPIRResponse);
  return a3;
}

uint64_t RequestsManager.PIRContext.decryptSymmetricPIRResponses(_:symmetricPirKeywords:)(uint64_t a1, uint64_t a2)
{
  uint64_t v42 = a2;
  uint64_t v5 = type metadata accessor for PIR.SymmetricPIRClient();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for SymmetricPIRClient();
  uint64_t v10 = ((uint64_t (*)(uint64_t))MEMORY[0x270FA5388])(v9);
  uint64_t v12 = (char *)v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)v31 - v13;
  RequestsManager.PIRContext.symmetricPirConfig()((uint64_t)v37);
  if (!v3)
  {
    uint64_t v32 = v12;
    unint64_t v36 = v8;
    uint64_t v33 = v5;
    uint64_t v34 = v14;
    uint64_t v35 = v6;
    uint64_t v15 = v37[0];
    unint64_t v16 = v37[1];
    outlined init with take of SymmetricPirClientConfig?((uint64_t)v37, (uint64_t)v38, &demangling cache variable for type metadata for SymmetricPirClientConfig?);
    if (*((void *)&v38[0] + 1) >> 60 == 15)
    {
      type metadata accessor for CipherMLError();
      _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
      swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
    }
    else
    {
      long long v39 = v38[0];
      long long v40 = v38[1];
      long long v41 = v38[2];
      uint64_t v17 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CipherML19SymmetricPirKeywordVG_10Foundation4DataVs5NeverOTg503_s8d42ML15RequestsManagerC10PIRContextV28decryptf24PIRResponses_20symmetricg24KeywordsSay10Foundation4j40VSgGSayAA17AspireApiResponseVG_SayAA0gJ7H60VGtKFAjQcfu_33_629df1417557ae7fb76f1d8e37ffce09AqJTf3nnnpk_nTf1cn_nTm(v42);
      v31[1] = v31;
      MEMORY[0x270FA5388](v17);
      v31[-2] = v2;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v18 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySay8CipherML17AspireApiResponseVGSay10Foundation4DataVGG_ANSgsAE_pTg503_s8f4ML17hij14V10Foundation4l7VAFSgs5C33_pIgngozo_AC_AFtAGsAH_pIegnrzr_TRAjnQsAE_pIgngozo_Tf1cn_n(a1, v17, (uint64_t (*)(uint64_t, uint64_t, unint64_t))closure #1 in RequestsManager.PIRContext.decryptKeywordPIRResponses(_:for:)partial apply, (uint64_t)&v31[-4]);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      outlined copy of Data._Representation(v15, v16);
      outlined retain of SymmetricPirClientConfig((uint64_t)&v39);
      uint64_t v19 = v36;
      PIR.SymmetricPIRClient.init(serverPublicKey:)();
      uint64_t v20 = (uint64_t)v32;
      (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v32, v19, v33);
      a1 = v9;
      uint64_t v21 = (_OWORD *)(v20 + *(int *)(v9 + 20));
      long long v22 = v40;
      *uint64_t v21 = v39;
      v21[1] = v22;
      v21[2] = v41;
      uint64_t v23 = (uint64_t)v34;
      uint64_t v24 = outlined init with take of AspirePirSymmetricPirClientConfig(v20, (uint64_t)v34, (uint64_t (*)(void))type metadata accessor for SymmetricPIRClient);
      uint64_t v25 = *(void *)(v18 + 16);
      uint64_t v26 = *(void *)(v42 + 16);
      if (v25 == v26)
      {
        uint64_t v27 = v42;
        *(double *)&long long v28 = MEMORY[0x270FA5388](v24);
        *(_OWORD *)&v31[-2] = v28;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        a1 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySay8CipherML19SymmetricPirKeywordVGSay10Foundation4DataVSgGG_AOsAE_pTg503_s8f4ML19hij14V10Foundation4l7VSgAGs5C33_pIgggozo_AC_AGtAGsAH_pIegnrzr_TRAj2OsAE_pIgggozo_Tf1cn_n(v27, v18, partial apply for closure #1 in SymmetricPIRClient.decryptResponses(symmetricPirKeywords:encryptedResponses:), (uint64_t)&v31[-4]);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        type metadata accessor for CipherMLError();
        _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
        swift_allocError();
        *uint64_t v29 = v25;
        v29[1] = v26;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
      }
      outlined destroy of AspirePirKeywordPirParameters(v23, (uint64_t (*)(void))type metadata accessor for SymmetricPIRClient);
      outlined release of SymmetricPirClientConfig?((uint64_t)v37);
      swift_bridgeObjectRelease();
    }
  }
  return a1;
}

uint64_t RequestsManager.PIRContext.requestOPRFData(for:networkManager:)(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  void v3[5] = v2;
  v3[3] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  void v3[6] = swift_task_alloc();
  v3[7] = *(void *)(type metadata accessor for AspireApiResponse(0) - 8);
  v3[8] = swift_task_alloc();
  v3[9] = *(void *)(type metadata accessor for AspireApiOPRFResponse(0) - 8);
  v3[10] = swift_task_alloc();
  v3[11] = swift_task_alloc();
  type metadata accessor for AspireApiResponses(0);
  v3[12] = swift_task_alloc();
  return MEMORY[0x270FA2498](RequestsManager.PIRContext.requestOPRFData(for:networkManager:), 0, 0);
}

uint64_t RequestsManager.PIRContext.requestOPRFData(for:networkManager:)()
{
  uint64_t v1 = (void *)v0[4];
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[3];
  uint64_t v4 = swift_task_alloc();
  *(void *)(v4 + 16) = v2;
  uint64_t v5 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay16CryptoKitPrivate3PIRO14BlindedKeywordVG_8CipherML16AspireApiRequestVs5NeverOTg5((void (*)(uint64_t))partial apply for closure #1 in RequestsManager.PIRContext.requestOPRFData(for:networkManager:), v4, v3);
  v0[13] = v5;
  swift_task_dealloc();
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v6);
  uint64_t v8 = v2 + *(int *)(type metadata accessor for RequestsManager.PIRContext() + 20);
  uint64_t v9 = *(int *)(type metadata accessor for UserIdentifier() + 20);
  uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 + 32) + **(int **)(v7 + 32));
  uint64_t v10 = v8 + v9;
  uint64_t v11 = (void *)swift_task_alloc();
  v0[14] = v11;
  *uint64_t v11 = v0;
  v11[1] = RequestsManager.PIRContext.requestOPRFData(for:networkManager:);
  uint64_t v12 = v0[12];
  return v14(v12, v5, v10, v6, v7);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 120) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0) {
    uint64_t v2 = RequestsManager.PIRContext.requestOPRFData(for:networkManager:);
  }
  else {
    uint64_t v2 = RequestsManager.PIRContext.requestOPRFData(for:networkManager:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(void);
  uint64_t (*v24)(uint64_t);
  uint64_t v25;
  uint64_t v26;

  uint64_t v1 = v0[12];
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 16);
  uint64_t v4 = MEMORY[0x263F8EE78];
  if (v3)
  {
    uint64_t v5 = v0[9];
    uint64_t v6 = v0[7];
    uint64_t v25 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    uint64_t v7 = v2 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    uint64_t v8 = *(void *)(v6 + 72);
    while (1)
    {
      uint64_t v9 = v0[8];
      uint64_t v10 = v0[6];
      outlined init with copy of UserIdentifier(v7, v9, type metadata accessor for AspireApiResponse);
      outlined init with copy of AMDPbHEConfig.OneOf_Config?(v9, v10, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
      uint64_t v11 = type metadata accessor for AspireApiResponse.OneOf_Response(0);
      uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v10, 1, v11);
      uint64_t v13 = v0[6];
      if (v12 == 1)
      {
        outlined destroy of AMDPbHEConfig.OneOf_Config?(v0[6], &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
        goto LABEL_13;
      }
      if (swift_getEnumCaseMultiPayload() != 2) {
        break;
      }
      uint64_t v15 = v0[10];
      uint64_t v14 = v0[11];
      unint64_t v16 = v0[8];
      outlined init with take of AspirePirSymmetricPirClientConfig(v13, v15, type metadata accessor for AspireApiOPRFResponse);
      outlined init with take of AspirePirSymmetricPirClientConfig(v15, v14, type metadata accessor for AspireApiOPRFResponse);
      outlined destroy of AspirePirKeywordPirParameters(v16, type metadata accessor for AspireApiResponse);
      uint64_t v4 = v25;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v25 + 16) + 1, 1);
        uint64_t v4 = v25;
      }
      uint64_t v18 = *(void *)(v4 + 16);
      uint64_t v17 = *(void *)(v4 + 24);
      if (v18 >= v17 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
        uint64_t v4 = v25;
      }
      uint64_t v19 = v0[11];
      *(void *)(v4 + 16) = v18 + 1;
      outlined init with take of AspirePirSymmetricPirClientConfig(v19, v4+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(void *)(v5 + 72) * v18, type metadata accessor for AspireApiOPRFResponse);
      v7 += v8;
      if (!--v3)
      {
        swift_bridgeObjectRelease();
        uint64_t v1 = v0[12];
        goto LABEL_16;
      }
    }
    outlined destroy of AspirePirKeywordPirParameters(v13, type metadata accessor for AspireApiResponse.OneOf_Response);
LABEL_13:
    uint64_t v20 = v0[12];
    uint64_t v21 = v0[8];
    type metadata accessor for CipherMLError();
    _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    outlined destroy of AspirePirKeywordPirParameters(v21, type metadata accessor for AspireApiResponse);
    swift_release();
    swift_bridgeObjectRelease();
    outlined destroy of AspirePirKeywordPirParameters(v20, type metadata accessor for AspireApiResponses);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    long long v22 = (uint64_t (*)(void))v0[1];
    return v22();
  }
  else
  {
LABEL_16:
    outlined destroy of AspirePirKeywordPirParameters(v1, type metadata accessor for AspireApiResponses);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v24 = (uint64_t (*)(uint64_t))v0[1];
    return v24(v4);
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in RequestsManager.PIRContext.requestOPRFData(for:networkManager:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AspireApiOPRFRequest(0);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = a1;
  uint64_t v12 = a2;
  _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_1(&lazy protocol witness table cache variable for type AspireApiOPRFRequest and conformance AspireApiOPRFRequest, (void (*)(uint64_t))type metadata accessor for AspireApiOPRFRequest);
  static Message.with(_:)();
  type metadata accessor for AspireApiRequest(0);
  uint64_t v9 = a2;
  uint64_t v10 = v6;
  _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_1(&lazy protocol witness table cache variable for type AspireApiRequest and conformance AspireApiRequest, (void (*)(uint64_t))type metadata accessor for AspireApiRequest);
  static Message.with(_:)();
  return outlined destroy of AspirePirKeywordPirParameters((uint64_t)v6, type metadata accessor for AspireApiOPRFRequest);
}

uint64_t closure #1 in closure #1 in RequestsManager.PIRContext.requestOPRFData(for:networkManager:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = PIR.BlindedKeyword.blindedElement.getter();
  uint64_t v7 = v6;
  outlined consume of Data._Representation(*a1, a1[1]);
  *a1 = v5;
  a1[1] = v7;
  uint64_t v8 = (uint64_t *)(a3 + *(int *)(type metadata accessor for RequestsManager.PIRContext() + 28));
  uint64_t v9 = *v8;
  unint64_t v10 = v8[1];
  uint64_t v11 = a1[2];
  unint64_t v12 = a1[3];
  outlined copy of Data._Representation(*v8, v10);
  uint64_t result = outlined consume of Data._Representation(v11, v12);
  a1[2] = v9;
  a1[3] = v10;
  return result;
}

uint64_t RequestsManager.PIRContext.requestData(missingKeywords:availableResults:allKeywords:requests:networkManager:symmetricPirKeywords:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[7] = a6;
  v7[8] = v6;
  v7[5] = a4;
  v7[6] = a5;
  v7[3] = a2;
  v7[4] = a3;
  v7[2] = a1;
  type metadata accessor for AspireApiResponses(0);
  v7[9] = swift_task_alloc();
  return MEMORY[0x270FA2498](RequestsManager.PIRContext.requestData(missingKeywords:availableResults:allKeywords:requests:networkManager:symmetricPirKeywords:), 0, 0);
}

uint64_t RequestsManager.PIRContext.requestData(missingKeywords:availableResults:allKeywords:requests:networkManager:symmetricPirKeywords:)()
{
  uint64_t v1 = v0[8];
  uint64_t v2 = (void *)v0[6];
  uint64_t v3 = v2[3];
  uint64_t v4 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v3);
  uint64_t v5 = type metadata accessor for RequestsManager.PIRContext();
  v0[10] = v5;
  uint64_t v6 = v1 + *(int *)(v5 + 20);
  uint64_t v7 = *(int *)(type metadata accessor for UserIdentifier() + 20);
  uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 + 32) + **(int **)(v4 + 32));
  uint64_t v8 = v6 + v7;
  uint64_t v9 = (void *)swift_task_alloc();
  v0[11] = v9;
  *uint64_t v9 = v0;
  v9[1] = RequestsManager.PIRContext.requestData(missingKeywords:availableResults:allKeywords:requests:networkManager:symmetricPirKeywords:);
  uint64_t v10 = v0[9];
  uint64_t v11 = v0[5];
  return v13(v10, v11, v8, v3, v4);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 96) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = RequestsManager.PIRContext.requestData(missingKeywords:availableResults:allKeywords:requests:networkManager:symmetricPirKeywords:);
  }
  else {
    uint64_t v2 = RequestsManager.PIRContext.requestData(missingKeywords:availableResults:allKeywords:requests:networkManager:symmetricPirKeywords:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void);
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  unint64_t v16;
  uint64_t v17;
  long long v18;
  void *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t ObjectType;
  char isUniquelyReferenced_nonNull_native;
  char v25;
  unint64_t v26;
  uint64_t v27;
  BOOL v28;
  char v29;
  char v30;
  long long v31;
  long long v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  unint64_t *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t (*v51)(uint64_t);
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(void, unint64_t, void, unint64_t, uint64_t, uint64_t);
  long long v59;
  long long v60;
  uint64_t v61;
  uint64_t v62;

  uint64_t v1 = v0[12];
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[7];
  uint64_t v4 = *(void *)v0[9];
  if (v3)
  {
    uint64_t v5 = swift_bridgeObjectRetain();
    uint64_t v6 = RequestsManager.PIRContext.decryptSymmetricPIRResponses(_:symmetricPirKeywords:)(v5, v3);
    if (v1)
    {
      uint64_t v7 = v0[9];
LABEL_6:
      outlined destroy of AspirePirKeywordPirParameters(v7, type metadata accessor for AspireApiResponses);
      swift_bridgeObjectRelease();
      swift_task_dealloc();
      uint64_t v11 = (uint64_t (*)(void))v0[1];
      return v11();
    }
    uint64_t v13 = v6;
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v8 = v0[2];
    uint64_t v9 = swift_task_alloc();
    *(void *)(v9 + 16) = v2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v10 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySay8CipherML17AspireApiResponseVGSay10Foundation4DataVGG_ANSgsAE_pTg503_s8f4ML17hij14V10Foundation4l7VAFSgs5C33_pIgngozo_AC_AFtAGsAH_pIegnrzr_TRAjnQsAE_pIgngozo_Tf1cn_n(v4, v8, (uint64_t (*)(uint64_t, uint64_t, unint64_t))closure #1 in RequestsManager.PIRContext.decryptKeywordPIRResponses(_:for:)partial apply, v9);
    if (v1)
    {
      uint64_t v7 = v0[9];
      swift_bridgeObjectRelease();
      swift_task_dealloc();
      goto LABEL_6;
    }
    uint64_t v13 = v10;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
  }
  uint64_t v14 = v0[2];
  uint64_t v56 = *(void *)(v14 + 16);
  if (v56)
  {
    uint64_t v15 = (void *)v0[3];
    uint64_t v54 = v14 + 32;
    uint64_t v55 = v0[10];
    uint64_t v57 = *(void *)(v13 + 16);
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
    unint64_t v16 = 0;
    uint64_t v52 = v13;
    uint64_t v53 = v0;
    while (1)
    {
      if (v57 == v16)
      {
LABEL_31:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_33;
      }
      if (v16 >= *(void *)(v13 + 16))
      {
        __break(1u);
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
        return result;
      }
      uint64_t v18 = *(_OWORD *)(v54 + 16 * v16);
      uint64_t v19 = (void *)(v0[8] + *(int *)(v55 + 36));
      uint64_t v20 = *(void *)(v54 + 16 * v16 + 8);
      uint64_t v21 = *(void *)(v13 + 16 * v16 + 40);
      uint64_t v59 = v18;
      unint64_t v60 = *(_OWORD *)(v13 + 16 * v16 + 32);
      if (*v19)
      {
        long long v22 = v19[1];
        uint64_t ObjectType = swift_getObjectType();
        uint64_t v58 = *(void (**)(void, unint64_t, void, unint64_t, uint64_t, uint64_t))(v22 + 48);
        outlined copy of Data._Representation(v59, v20);
        outlined copy of Data?(v60, v21);
        outlined copy of Data._Representation(v59, v20);
        outlined copy of Data?(v60, v21);
        v58(v60, v21, v59, v20, ObjectType, v22);
      }
      else
      {
        outlined copy of Data._Representation(v18, v20);
        outlined copy of Data?(v60, v21);
      }
      outlined copy of Data._Representation(v59, v20);
      outlined copy of Data?(v60, v21);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(v59, v20);
      uint64_t v27 = v15[2];
      long long v28 = (v25 & 1) == 0;
      uint64_t result = v27 + v28;
      if (__OFADD__(v27, v28)) {
        goto LABEL_51;
      }
      uint64_t v29 = v25;
      if (v15[3] >= result)
      {
        uint64_t v31 = v59;
        uint64_t v32 = v60;
        if (isUniquelyReferenced_nonNull_native)
        {
          if (v25) {
            goto LABEL_13;
          }
        }
        else
        {
          uint64_t result = (uint64_t)specialized _NativeDictionary.copy()();
          uint64_t v31 = v59;
          uint64_t v32 = v60;
          if (v29) {
            goto LABEL_13;
          }
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, isUniquelyReferenced_nonNull_native);
        uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v59, v20);
        if ((v29 & 1) != (v30 & 1))
        {
          return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        }
        uint64_t v26 = result;
        uint64_t v31 = v59;
        uint64_t v32 = v60;
        if (v29)
        {
LABEL_13:
          uint64_t v17 = v15[7] + 16 * v26;
          outlined consume of Data?(*(void *)v17, *(void *)(v17 + 8));
          *(void *)uint64_t v17 = v60;
          *(void *)(v17 + 8) = v21;
          goto LABEL_14;
        }
      }
      v15[(v26 >> 6) + 8] |= 1 << v26;
      uint64_t v33 = 16 * v26;
      *(_OWORD *)(v15[6] + v33) = v31;
      *(_OWORD *)(v15[7] + v33) = v32;
      uint64_t v34 = v15[2];
      uint64_t v35 = __OFADD__(v34, 1);
      unint64_t v36 = v34 + 1;
      if (v35) {
        goto LABEL_52;
      }
      void v15[2] = v36;
      outlined copy of Data._Representation(v59, v20);
LABEL_14:
      ++v16;
      swift_bridgeObjectRelease();
      outlined consume of Data._Representation(v59, v20);
      outlined consume of Data._Representation(v59, v20);
      uint64_t result = outlined consume of Data?(v60, v21);
      uint64_t v13 = v52;
      uint64_t v0 = v53;
      if (v56 == v16) {
        goto LABEL_31;
      }
    }
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v15 = (void *)v0[3];
LABEL_33:
  uint64_t v37 = v0[4];
  int v38 = *(void *)(v37 + 16);
  long long v39 = MEMORY[0x263F8EE78];
  if (v38)
  {
    uint64_t v61 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v38, 0);
    long long v39 = v61;
    long long v40 = (unint64_t *)(v37 + 40);
    do
    {
      if (v15[2])
      {
        long long v41 = *(v40 - 1);
        uint64_t v42 = *v40;
        outlined copy of Data._Representation(v41, *v40);
        outlined copy of Data._Representation(v41, v42);
        uint64_t v43 = specialized __RawDictionaryStorage.find<A>(_:)(v41, v42);
        if (v44)
        {
          uint64_t v45 = (uint64_t *)(v15[7] + 16 * v43);
          int v46 = *v45;
          uint64_t v47 = v45[1];
          outlined copy of Data?(*v45, v47);
        }
        else
        {
          int v46 = 0;
          uint64_t v47 = 0xF000000000000000;
        }
        outlined consume of Data._Representation(v41, v42);
        outlined consume of Data._Representation(v41, v42);
      }
      else
      {
        int v46 = 0;
        uint64_t v47 = 0xF000000000000000;
      }
      uint64_t v49 = *(void *)(v61 + 16);
      uint64_t v48 = *(void *)(v61 + 24);
      if (v49 >= v48 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v48 > 1, v49 + 1, 1);
      }
      v40 += 2;
      *(void *)(v61 + 16) = v49 + 1;
      int v50 = v61 + 16 * v49;
      *(void *)(v50 + 32) = v46;
      *(void *)(v50 + 40) = v47;
      --v38;
    }
    while (v38);
  }
  outlined destroy of AspirePirKeywordPirParameters(v0[9], type metadata accessor for AspireApiResponses);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v51 = (uint64_t (*)(uint64_t))v0[1];
  return v51(v39);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t RequestsManager.PIRContext.init(useCase:userId:config:configID:secretKey:cache:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10)
{
  *a9 = a1;
  a9[1] = a2;
  uint64_t v17 = (int *)type metadata accessor for RequestsManager.PIRContext();
  outlined init with take of AspirePirSymmetricPirClientConfig(a3, (uint64_t)a9 + v17[5], (uint64_t (*)(void))type metadata accessor for UserIdentifier);
  outlined init with take of AspirePirSymmetricPirClientConfig(a4, (uint64_t)a9 + v17[6], type metadata accessor for AspireApiPIRConfig);
  uint64_t v18 = (void *)((char *)a9 + v17[7]);
  *uint64_t v18 = a5;
  v18[1] = a6;
  uint64_t result = outlined init with take of AspirePirSymmetricPirClientConfig(a7, (uint64_t)a9 + v17[8], (uint64_t (*)(void))type metadata accessor for SecretKey);
  uint64_t v20 = (void *)((char *)a9 + v17[9]);
  *uint64_t v20 = a8;
  v20[1] = a10;
  return result;
}

uint64_t RequestsManager.CachedAndMissingKeywords.missingKeywords.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t RequestsManager.CachedAndMissingKeywords.missingShardIds.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t RequestsManager.setPIRConfig(config:context:)(uint64_t a1, uint64_t a2)
{
  v3[19] = a2;
  v3[20] = v2;
  v3[18] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  v3[21] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for AspireHeEncryptionParameters(0);
  v3[22] = v4;
  v3[23] = *(void *)(v4 - 8);
  v3[24] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  v3[25] = swift_task_alloc();
  v3[26] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  v3[27] = v5;
  v3[28] = *(void *)(v5 - 8);
  v3[29] = swift_task_alloc();
  v3[30] = swift_task_alloc();
  v3[31] = type metadata accessor for AspireApiKeyStatus(0);
  v3[32] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiConfig?);
  v3[33] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
  v3[34] = swift_task_alloc();
  v3[35] = type metadata accessor for AspireApiPIRConfig(0);
  v3[36] = swift_task_alloc();
  v3[37] = swift_task_alloc();
  type metadata accessor for BinaryDecodingOptions();
  v3[38] = swift_task_alloc();
  v3[39] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for AspireApiConfig(0);
  v3[40] = v6;
  v3[41] = *(void *)(v6 - 8);
  v3[42] = swift_task_alloc();
  return MEMORY[0x270FA2498](RequestsManager.setPIRConfig(config:context:), 0, 0);
}

{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v9;

  uint64_t v6 = *v3;
  *(void *)(*v3 + 400) = v2;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v2)
  {
    swift_bridgeObjectRelease();
    uint64_t v7 = RequestsManager.setPIRConfig(config:context:);
  }
  else
  {
    *(void *)(v6 + 408) = a2;
    *(void *)(v6 + 416) = a1;
    swift_bridgeObjectRelease();
    uint64_t v7 = RequestsManager.setPIRConfig(config:context:);
  }
  return MEMORY[0x270FA2498](v7, 0, 0);
}

uint64_t RequestsManager.setPIRConfig(config:context:)()
{
  uint64_t v1 = *(void **)(v0 + 144);
  id v2 = objc_msgSend(**(id **)(v0 + 152), sel_useCase);
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;

  *(void *)(v0 + 344) = v3;
  *(void *)(v0 + 352) = v5;
  id v6 = objc_msgSend(v1, sel_serializedPIRConfig);
  uint64_t v7 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;

  *(void *)(v0 + 104) = v7;
  *(void *)(v0 + 112) = v9;
  BinaryDecodingOptions.init()();
  _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_1(&lazy protocol witness table cache variable for type AspireApiConfig and conformance AspireApiConfig, (void (*)(uint64_t))type metadata accessor for AspireApiConfig);
  Message.init<A>(serializedBytes:extensions:partial:options:)();
  *(void *)(v0 + 360) = 0;
  uint64_t v10 = *(void *)(v0 + 272);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(*(void *)(v0 + 336), v10, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
  uint64_t v11 = type metadata accessor for AspireApiConfig.OneOf_Config(0);
  int v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v10, 1, v11);
  uint64_t v13 = *(void *)(v0 + 272);
  if (v12 == 1)
  {
    swift_bridgeObjectRelease();
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v13, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
LABEL_5:
    if (one-time initialization token for framework != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Logger.framework);
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl(&dword_249C3F000, v15, v16, "CMLPIRConfig is missing pirConfig.", v17, 2u);
      MEMORY[0x24C5B4790](v17, -1, -1);
    }
    uint64_t v18 = *(void *)(v0 + 336);

    type metadata accessor for CipherMLError();
    _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    outlined destroy of AspirePirKeywordPirParameters(v18, type metadata accessor for AspireApiConfig);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v19 = *(uint64_t (**)(void))(v0 + 8);
    return v19();
  }
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_bridgeObjectRelease();
    outlined destroy of AspirePirKeywordPirParameters(v13, type metadata accessor for AspireApiConfig.OneOf_Config);
    goto LABEL_5;
  }
  uint64_t v22 = *(void *)(v0 + 328);
  uint64_t v21 = *(void *)(v0 + 336);
  uint64_t v23 = *(void *)(v0 + 320);
  uint64_t v24 = *(void *)(v0 + 264);
  uint64_t v25 = *(void *)(v0 + 160);
  outlined init with take of AspirePirSymmetricPirClientConfig(v13, *(void *)(v0 + 296), type metadata accessor for AspireApiPIRConfig);
  uint64_t v26 = *(void *)(v25 + 16);
  *(void *)(v0 + 368) = v26;
  outlined init with copy of UserIdentifier(v21, v24, type metadata accessor for AspireApiConfig);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v22 + 56))(v24, 0, 1, v23);
  return MEMORY[0x270FA2498](RequestsManager.setPIRConfig(config:context:), v26, 0);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  uint64_t v1 = v0[45];
  ConfigCache.set(name:value:)(v0[43], v0[44], v0[33]);
  v0[47] = v1;
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v0[33], &demangling cache variable for type metadata for AspireApiConfig?);
  if (v1)
  {
    swift_bridgeObjectRelease();
    id v2 = RequestsManager.setPIRConfig(config:context:);
  }
  else
  {
    id v2 = RequestsManager.setPIRConfig(config:context:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t);
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(void);
  char *v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id *v44;
  id v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  BOOL v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  os_log_t log;
  NSObject *loga;
  uint64_t v81;
  os_log_type_t type[8];
  os_log_type_t typea;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _OWORD v87[2];
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;

  uint64_t v89 = v0;
  uint64_t v1 = *(void *)(v0 + 376);
  id v2 = objc_msgSend(*(id *)(v0 + 144), sel_serializedKeyStatus);
  uint64_t v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;

  *(void *)(v0 + 88) = v3;
  *(void *)(v0 + 96) = v5;
  uint64_t v88 = 0;
  memset(v87, 0, sizeof(v87));
  BinaryDecodingOptions.init()();
  _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_1(&lazy protocol witness table cache variable for type AspireApiKeyStatus and conformance AspireApiKeyStatus, (void (*)(uint64_t))type metadata accessor for AspireApiKeyStatus);
  Message.init<A>(serializedBytes:extensions:partial:options:)();
  if (v1)
  {
    id v6 = *(void *)(v0 + 336);
    uint64_t v7 = *(void *)(v0 + 296);
    swift_bridgeObjectRelease();
    uint64_t v22 = v7;
LABEL_6:
    outlined destroy of AspirePirKeywordPirParameters(v22, type metadata accessor for AspireApiPIRConfig);
    outlined destroy of AspirePirKeywordPirParameters(v6, type metadata accessor for AspireApiConfig);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v23 = *(uint64_t (**)(void))(v0 + 8);
    return v23();
  }
  uint64_t v9 = *(void *)(v0 + 248);
  uint64_t v8 = *(void *)(v0 + 256);
  uint64_t v11 = *(void *)(v0 + 216);
  uint64_t v10 = *(void *)(v0 + 224);
  int v12 = *(void *)(v0 + 208);
  log = *(os_log_t *)(v0 + 280);
  *(void *)type = SHIDWORD(log[2].isa);
  uint64_t v84 = *(void *)(v0 + 296);
  uint64_t v13 = (uint64_t *)(*(void *)(v84 + *(void *)type)
                  + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__evaluationKeyConfigHash);
  swift_beginAccess();
  uint64_t v14 = *v13;
  uint64_t v15 = v13[1];
  os_log_type_t v16 = v8 + *(int *)(v9 + 24);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v16, v12, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  uint64_t v18 = v17(v12, 1, v11);
  uint64_t v19 = *(void *)(v0 + 240);
  uint64_t v81 = v16;
  if (v18 == 1)
  {
    uint64_t v20 = *(void *)(v0 + 216);
    uint64_t v21 = *(void *)(v0 + 184);
    uint64_t v76 = *(void *)(v0 + 176);
    uint64_t v78 = *(void *)(v0 + 208);
    *(void *)uint64_t v19 = MEMORY[0x263F8EE78];
    *(unsigned char *)(v19 + 8) = 0;
    outlined copy of Data._Representation(v14, v15);
    UnknownStorage.init()();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v21 + 56))(v19 + *(int *)(v20 + 28), 1, 1, v76);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v78, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  }
  else
  {
    outlined init with take of AspirePirSymmetricPirClientConfig(*(void *)(v0 + 208), v19, type metadata accessor for AspireHeEvaluationKeyConfig);
    outlined copy of Data._Representation(v14, v15);
  }
  uint64_t v25 = specialized Message.hash()();
  uint64_t v27 = v26;
  outlined destroy of AspirePirKeywordPirParameters(*(void *)(v0 + 240), type metadata accessor for AspireHeEvaluationKeyConfig);
  long long v28 = specialized static Data.== infix(_:_:)(v14, v15, (uint64_t)v25, v27);
  outlined consume of Data._Representation((uint64_t)v25, v27);
  outlined consume of Data._Representation(v14, v15);
  if ((v28 & 1) == 0)
  {
    unint64_t v36 = *(void *)(v0 + 216);
    uint64_t v37 = *(void *)(v0 + 200);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v81, v37, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
    int v38 = v17(v37, 1, v36);
    long long v39 = *(void *)(v0 + 232);
    if (v38 == 1)
    {
      long long v40 = *(void *)(v0 + 216);
      long long v41 = *(void *)(v0 + 200);
      uint64_t v43 = *(void *)(v0 + 176);
      uint64_t v42 = *(void *)(v0 + 184);
      *(void *)long long v39 = MEMORY[0x263F8EE78];
      *(unsigned char *)(v39 + 8) = 0;
      UnknownStorage.init()();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v42 + 56))(v39 + *(int *)(v40 + 28), 1, 1, v43);
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v41, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
    }
    else
    {
      outlined init with take of AspirePirSymmetricPirClientConfig(*(void *)(v0 + 200), *(void *)(v0 + 232), type metadata accessor for AspireHeEvaluationKeyConfig);
    }
    int v50 = specialized Message.hash()();
    uint64_t v52 = v51;
    outlined destroy of AspirePirKeywordPirParameters(*(void *)(v0 + 232), type metadata accessor for AspireHeEvaluationKeyConfig);
    uint64_t v86 = Data.hexString.getter((uint64_t)v50, v52);
    uint64_t v54 = v53;
    outlined consume of Data._Representation((uint64_t)v50, v52);
    if (one-time initialization token for framework != -1) {
      swift_once();
    }
    uint64_t v56 = *(void *)(v0 + 288);
    uint64_t v55 = *(void *)(v0 + 296);
    uint64_t v57 = type metadata accessor for Logger();
    __swift_project_value_buffer(v57, (uint64_t)static Logger.framework);
    outlined init with copy of UserIdentifier(v55, v56, type metadata accessor for AspireApiPIRConfig);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v58 = Logger.logObject.getter();
    uint64_t v59 = static os_log_type_t.error.getter();
    unint64_t v60 = os_log_type_enabled(v58, v59);
    uint64_t v61 = *(void *)(v0 + 352);
    if (v60)
    {
      uint64_t v77 = *(void *)(v0 + 344);
      uint64_t v62 = *(void *)(v0 + 288);
      uint64_t v63 = swift_slowAlloc();
      uint64_t v85 = swift_slowAlloc();
      *(void *)&v87[0] = v85;
      *(_DWORD *)uint64_t v63 = 136446722;
      typea = v59;
      uint64_t v64 = (uint64_t *)(*(void *)(v62 + SHIDWORD(log[2].isa))
                      + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__evaluationKeyConfigHash);
      swift_beginAccess();
      uint64_t v66 = *v64;
      uint64_t v65 = v64[1];
      outlined copy of Data._Representation(v66, v65);
      loga = v58;
      uint64_t v67 = Data.hexString.getter(v66, v65);
      uint64_t v69 = v68;
      outlined consume of Data._Representation(v66, v65);
      *(void *)(v0 + 136) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v67, v69, (uint64_t *)v87);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of AspirePirKeywordPirParameters(v62, type metadata accessor for AspireApiPIRConfig);
      *(_WORD *)(v63 + 12) = 2082;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 120) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v77, v61, (uint64_t *)v87);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v63 + 22) = 2082;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 128) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v86, v54, (uint64_t *)v87);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_249C3F000, loga, typea, "Invalid PIR config hash '%{public}s' for useCase '%{public}s', expected: '%{public}s'", (uint8_t *)v63, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x24C5B4790](v85, -1, -1);
      MEMORY[0x24C5B4790](v63, -1, -1);
    }
    else
    {
      outlined destroy of AspirePirKeywordPirParameters(*(void *)(v0 + 288), type metadata accessor for AspireApiPIRConfig);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    id v6 = *(void *)(v0 + 336);
    uint64_t v70 = *(void *)(v0 + 296);
    uint64_t v71 = *(void *)(v0 + 256);
    type metadata accessor for CipherMLError();
    _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    outlined destroy of AspirePirKeywordPirParameters(v71, type metadata accessor for AspireApiKeyStatus);
    uint64_t v22 = v70;
    goto LABEL_6;
  }
  uint64_t v29 = *(void *)(v0 + 176);
  uint64_t v30 = *(void *)(v0 + 184);
  uint64_t v31 = *(void *)(v0 + 168);
  uint64_t v32 = *(void *)(v84 + *(void *)type)
      + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__encryptionParameters;
  swift_beginAccess();
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v32, v31, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  uint64_t v33 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v30 + 48))(v31, 1, v29);
  uint64_t v34 = *(void *)(v0 + 192);
  if (v33 == 1)
  {
    uint64_t v35 = *(void *)(v0 + 168);
    *(void *)uint64_t v34 = 0;
    *(void *)(v34 + 8) = 0;
    *(void *)(v34 + 16) = MEMORY[0x263F8EE78];
    *(void *)(v34 + 24) = 0;
    *(unsigned char *)(v34 + 32) = 1;
    *(void *)(v34 + 40) = 0;
    *(unsigned char *)(v34 + 48) = 1;
    *(void *)(v34 + 56) = 0;
    *(unsigned char *)(v34 + 64) = 1;
    UnknownStorage.init()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v35, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  }
  else
  {
    outlined init with take of AspirePirSymmetricPirClientConfig(*(void *)(v0 + 168), v34, type metadata accessor for AspireHeEncryptionParameters);
  }
  RequestsManager.validateConfig(useCase:keyStatus:encryptionParams:)(*(void *)(v0 + 344), *(void *)(v0 + 352), *(void *)(v0 + 256), *(void *)(v0 + 192));
  uint64_t v44 = *(id **)(v0 + 152);
  outlined destroy of AspirePirKeywordPirParameters(*(void *)(v0 + 192), type metadata accessor for AspireHeEncryptionParameters);
  uint64_t v45 = objc_msgSend(*v44, sel_sourceApplicationBundleIdentifier);
  if (v45)
  {
    int v46 = v45;
    uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v49 = v48;
  }
  else
  {
    uint64_t v47 = 0;
    uint64_t v49 = 0;
  }
  *(void *)(v0 + 384) = v49;
  uint64_t v72 = (void *)swift_task_alloc();
  *(void *)(v0 + 392) = v72;
  char *v72 = v0;
  v72[1] = RequestsManager.setPIRConfig(config:context:);
  uint64_t v74 = *(void *)(v0 + 344);
  uint64_t v73 = *(void *)(v0 + 352);
  uint64_t v75 = *(void *)(v0 + 256);
  return RequestsManager.rotateKeysOffline(useCase:keyStatus:networkDelegation:)(v74, v73, v75, v47, v49);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  uint64_t v1 = v0[42];
  id v2 = v0[37];
  outlined destroy of AspirePirKeywordPirParameters(v0[32], type metadata accessor for AspireApiKeyStatus);
  outlined destroy of AspirePirKeywordPirParameters(v2, type metadata accessor for AspireApiPIRConfig);
  outlined destroy of AspirePirKeywordPirParameters(v1, type metadata accessor for AspireApiConfig);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  uint64_t v5 = v0[51];
  uint64_t v4 = v0[52];
  return v3(v4, v5);
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = v0[42];
  outlined destroy of AspirePirKeywordPirParameters(v0[37], type metadata accessor for AspireApiPIRConfig);
  outlined destroy of AspirePirKeywordPirParameters(v1, type metadata accessor for AspireApiConfig);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v1 = v0[42];
  id v2 = v0[37];
  outlined destroy of AspirePirKeywordPirParameters(v0[32], type metadata accessor for AspireApiKeyStatus);
  outlined destroy of AspirePirKeywordPirParameters(v2, type metadata accessor for AspireApiPIRConfig);
  outlined destroy of AspirePirKeywordPirParameters(v1, type metadata accessor for AspireApiConfig);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t RequestsManager.generateEvaluationKey(config:pirContext:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v28 = a3;
  uint64_t v29 = a2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v30 = (uint64_t)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v7 = type metadata accessor for AspireApiKeyStatus(0);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v14 = objc_msgSend(a1, sel_serializedKeyStatus);
  uint64_t v15 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v17 = v16;

  uint64_t v34 = v15;
  uint64_t v35 = v17;
  uint64_t v33 = 0;
  long long v31 = 0u;
  long long v32 = 0u;
  BinaryDecodingOptions.init()();
  _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_1(&lazy protocol witness table cache variable for type AspireApiKeyStatus and conformance AspireApiKeyStatus, (void (*)(uint64_t))type metadata accessor for AspireApiKeyStatus);
  uint64_t v18 = v36;
  uint64_t result = Message.init<A>(serializedBytes:extensions:partial:options:)();
  if (!v18)
  {
    uint64_t v20 = v28;
    uint64_t v21 = v29;
    uint64_t v22 = (uint64_t)&v9[*(int *)(v7 + 24)];
    uint64_t v23 = v30;
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v22, v30, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v23, 1, v10) == 1)
    {
      *(void *)uint64_t v13 = MEMORY[0x263F8EE78];
      v13[8] = 0;
      UnknownStorage.init()();
      uint64_t v24 = &v13[*(int *)(v10 + 28)];
      uint64_t v25 = type metadata accessor for AspireHeEncryptionParameters(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v24, 1, 1, v25);
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v23, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
    }
    else
    {
      outlined init with take of AspirePirSymmetricPirClientConfig(v23, (uint64_t)v13, type metadata accessor for AspireHeEvaluationKeyConfig);
    }
    outlined destroy of AspirePirKeywordPirParameters((uint64_t)v9, type metadata accessor for AspireApiKeyStatus);
    uint64_t v26 = type metadata accessor for RequestsManager.PIRContext();
    generateEvaluationKey(secretKey:config:)(v21 + *(int *)(v26 + 32), (uint64_t)v13, v20);
    return outlined destroy of AspirePirKeywordPirParameters((uint64_t)v13, type metadata accessor for AspireHeEvaluationKeyConfig);
  }
  return result;
}

uint64_t RequestsManager.generateEvaluationKey(config:context:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[3] = a2;
  v4[4] = v3;
  v4[2] = a1;
  type metadata accessor for RequestsManager.PIRContext();
  uint64_t v6 = swift_task_alloc();
  v4[5] = v6;
  uint64_t v7 = (void *)swift_task_alloc();
  void v4[6] = v7;
  *uint64_t v7 = v4;
  v7[1] = RequestsManager.generateEvaluationKey(config:context:);
  return RequestsManager.loadContext(requestContext:allowingKeyRotation:)(v6, a3, 1);
}

uint64_t RequestsManager.generateEvaluationKey(config:context:)()
{
  *(void *)(*(void *)v1 + 56) = v0;
  swift_task_dealloc();
  if (v0) {
    id v2 = RequestsManager.generateEvaluationKey(config:context:);
  }
  else {
    id v2 = RequestsManager.generateEvaluationKey(config:context:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void *)(v0 + 40);
  RequestsManager.generateEvaluationKey(config:pirContext:)(*(void **)(v0 + 24), v1, *(void *)(v0 + 16));
  outlined destroy of AspirePirKeywordPirParameters(v1, (uint64_t (*)(void))type metadata accessor for RequestsManager.PIRContext);
  swift_task_dealloc();
  id v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t RequestsManager.loadContext(requestContext:allowingKeyRotation:)(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v4 + 168) = a2;
  *(void *)(v4 + 176) = v3;
  *(unsigned char *)(v4 + 552) = a3;
  *(void *)(v4 + 160) = a1;
  uint64_t v5 = type metadata accessor for SecretKey();
  *(void *)(v4 + 184) = v5;
  *(void *)(v4 + 192) = *(void *)(v5 - 8);
  *(void *)(v4 + 200) = swift_task_alloc();
  uint64_t v6 = type metadata accessor for UserIdentifier();
  *(void *)(v4 + 208) = v6;
  *(void *)(v4 + 216) = *(void *)(v6 - 8);
  *(void *)(v4 + 224) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecretKey?);
  *(void *)(v4 + 232) = swift_task_alloc();
  *(void *)(v4 + 240) = swift_task_alloc();
  *(void *)(v4 + 248) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserIdentifier?);
  *(void *)(v4 + 256) = swift_task_alloc();
  *(void *)(v4 + 264) = swift_task_alloc();
  *(void *)(v4 + 272) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
  *(void *)(v4 + 280) = swift_task_alloc();
  *(void *)(v4 + 288) = type metadata accessor for AspireApiPIRConfig(0);
  *(void *)(v4 + 296) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for AspireApiConfig(0);
  *(void *)(v4 + 304) = v7;
  *(void *)(v4 + 312) = *(void *)(v7 - 8);
  *(void *)(v4 + 320) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiConfig?);
  *(void *)(v4 + 328) = swift_task_alloc();
  *(void *)(v4 + 336) = swift_task_alloc();
  return MEMORY[0x270FA2498](RequestsManager.loadContext(requestContext:allowingKeyRotation:), 0, 0);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  *(void *)(v4 + 88) = a2;
  *(void *)(v4 + 96) = v3;
  *(unsigned char *)(v4 + 560) = a3;
  *(void *)(v4 + 80) = a1;
  uint64_t v5 = type metadata accessor for HE.SerializedSecretKey();
  *(void *)(v4 + 104) = v5;
  *(void *)(v4 + 112) = *(void *)(v5 - 8);
  *(void *)(v4 + 120) = swift_task_alloc();
  uint64_t v6 = type metadata accessor for PEC.SimilarityClient();
  *(void *)(v4 + 128) = v6;
  *(void *)(v4 + 136) = *(void *)(v6 - 8);
  *(void *)(v4 + 144) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for PEC.SimilarityClientConfig();
  *(void *)(v4 + 152) = v7;
  *(void *)(v4 + 160) = *(void *)(v7 - 8);
  *(void *)(v4 + 168) = swift_task_alloc();
  *(void *)(v4 + 176) = swift_task_alloc();
  *(void *)(v4 + 184) = type metadata accessor for SimilarityClient();
  *(void *)(v4 + 192) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for SecretKey();
  *(void *)(v4 + 200) = v8;
  *(void *)(v4 + 208) = *(void *)(v8 - 8);
  *(void *)(v4 + 216) = swift_task_alloc();
  *(void *)(v4 + 224) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for UserIdentifier();
  *(void *)(v4 + 232) = v9;
  *(void *)(v4 + 240) = *(void *)(v9 - 8);
  *(void *)(v4 + 248) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecretKey?);
  *(void *)(v4 + 256) = swift_task_alloc();
  *(void *)(v4 + 264) = swift_task_alloc();
  *(void *)(v4 + 272) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserIdentifier?);
  *(void *)(v4 + 280) = swift_task_alloc();
  *(void *)(v4 + 288) = swift_task_alloc();
  *(void *)(v4 + 296) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
  *(void *)(v4 + 304) = swift_task_alloc();
  type metadata accessor for AspireApiPECConfig(0);
  *(void *)(v4 + 312) = swift_task_alloc();
  *(void *)(v4 + 320) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for AspireApiConfig(0);
  *(void *)(v4 + 328) = v10;
  *(void *)(v4 + 336) = *(void *)(v10 - 8);
  *(void *)(v4 + 344) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiConfig?);
  *(void *)(v4 + 352) = swift_task_alloc();
  *(void *)(v4 + 360) = swift_task_alloc();
  return MEMORY[0x270FA2498](RequestsManager.loadContext(requestContext:allowingKeyRotation:), 0, 0);
}

uint64_t RequestsManager.loadContext(requestContext:allowingKeyRotation:)()
{
  uint64_t v1 = **(void ***)(v0 + 168);
  id v2 = objc_msgSend(v1, sel_useCase);
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;

  *(void *)(v0 + 344) = v3;
  *(void *)(v0 + 352) = v5;
  id v6 = objc_msgSend(v1, sel_sourceApplicationBundleIdentifier);
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v10 = v9;
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(void *)(v0 + 176);
  *(void *)(v0 + 360) = RequestsManager.keyRotation(for:)(v8, v10);
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)(v11 + 40);
  *(void *)(v0 + 368) = v12;
  return MEMORY[0x270FA2498](RequestsManager.loadContext(requestContext:allowingKeyRotation:), v12, 0);
}

{
  uint64_t v0;
  uint64_t v2;

  ActiveUseCaseTracker.markActive(useCase:active:)(*(void *)(v0 + 344), *(void *)(v0 + 352), 1);
  swift_release();
  return MEMORY[0x270FA2498](RequestsManager.loadContext(requestContext:allowingKeyRotation:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;

  uint64_t v1 = *(void *)(*(void *)(v0 + 176) + 16);
  *(void *)(v0 + 376) = v1;
  return MEMORY[0x270FA2498](RequestsManager.loadContext(requestContext:allowingKeyRotation:), v1, 0);
}

{
  uint64_t *v0;
  uint64_t v2;

  ConfigCache.subscript.getter(v0[43], v0[44], v0[42]);
  return MEMORY[0x270FA2498](RequestsManager.loadContext(requestContext:allowingKeyRotation:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  unsigned int (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  BOOL v20;
  unint64_t v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  BOOL v38;
  unint64_t v39;
  uint64_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t (*v45)(void);
  uint64_t v46;
  long long v47;
  long long v48;
  long long v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56[2];
  uint64_t v57;
  uint64_t v58;

  uint64_t v57 = v0;
  uint64_t v1 = *(void *)(v0 + 336);
  id v2 = *(void *)(v0 + 304);
  uint64_t v3 = *(unsigned __int8 *)(v0 + 552);
  uint64_t v4 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 312) + 48);
  if (v4(v1, 1, v2) == 1 && v3 != 0)
  {
    if (one-time initialization token for framework != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Logger.framework);
    swift_bridgeObjectRetain_n();
    uint64_t v18 = Logger.logObject.getter();
    uint64_t v19 = static os_log_type_t.info.getter();
    uint64_t v20 = os_log_type_enabled(v18, v19);
    uint64_t v21 = *(void *)(v0 + 352);
    if (v20)
    {
      uint64_t v22 = *(void *)(v0 + 344);
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      v56[0] = v24;
      *(_DWORD *)uint64_t v23 = 136446210;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 152) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v21, v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_249C3F000, v18, v19, "No dynamic configuration for use-case '%{public}s'. Running rotation task", v23, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C5B4790](v24, -1, -1);
      MEMORY[0x24C5B4790](v23, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v34 = *(void *)(v0 + 360);
    return MEMORY[0x270FA2498](RequestsManager.loadContext(requestContext:allowingKeyRotation:), v34, 0);
  }
  id v6 = *(void *)(v0 + 328);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1, v6, &demangling cache variable for type metadata for AspireApiConfig?);
  uint64_t v7 = v4(v6, 1, v2);
  uint64_t v8 = *(void *)(v0 + 328);
  if (v7 == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v8, &demangling cache variable for type metadata for AspireApiConfig?);
    if (one-time initialization token for framework != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Logger.framework);
    swift_bridgeObjectRetain();
    uint64_t v10 = Logger.logObject.getter();
    uint64_t v11 = static os_log_type_t.error.getter();
    uint64_t v12 = os_log_type_enabled(v10, v11);
    uint64_t v13 = *(void *)(v0 + 352);
    if (v12)
    {
      uint64_t v14 = *(void *)(v0 + 344);
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v16 = swift_slowAlloc();
      v56[0] = v16;
      *(_DWORD *)uint64_t v15 = 136446210;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 144) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v13, v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_249C3F000, v10, v11, "No dynamic configuration for use-case '%{public}s'", v15, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C5B4790](v16, -1, -1);
      MEMORY[0x24C5B4790](v15, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    type metadata accessor for CipherMLError();
    _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    swift_release();
LABEL_31:
    outlined destroy of AMDPbHEConfig.OneOf_Config?(*(void *)(v0 + 336), &demangling cache variable for type metadata for AspireApiConfig?);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v45 = *(uint64_t (**)(void))(v0 + 8);
    return v45();
  }
  uint64_t v25 = *(void *)(v0 + 320);
  uint64_t v26 = *(void *)(v0 + 304);
  uint64_t v27 = *(void *)(v0 + 280);
  outlined init with take of AspirePirSymmetricPirClientConfig(v8, v25, type metadata accessor for AspireApiConfig);
  uint64_t v28 = (uint64_t *)(v25 + *(int *)(v26 + 20));
  uint64_t v29 = *v28;
  *(void *)(v0 + 424) = *v28;
  uint64_t v30 = v28[1];
  *(void *)(v0 + 432) = v30;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v25, v27, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
  long long v31 = type metadata accessor for AspireApiConfig.OneOf_Config(0);
  long long v32 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 48))(v27, 1, v31);
  uint64_t v33 = *(void *)(v0 + 280);
  if (v32 == 1)
  {
    outlined copy of Data._Representation(v29, v30);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v33, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
LABEL_25:
    if (one-time initialization token for framework != -1) {
      swift_once();
    }
    uint64_t v35 = type metadata accessor for Logger();
    __swift_project_value_buffer(v35, (uint64_t)static Logger.framework);
    swift_bridgeObjectRetain();
    uint64_t v36 = Logger.logObject.getter();
    uint64_t v37 = static os_log_type_t.error.getter();
    int v38 = os_log_type_enabled(v36, v37);
    long long v39 = *(void *)(v0 + 352);
    if (v38)
    {
      long long v40 = *(void *)(v0 + 344);
      uint64_t v55 = v29;
      long long v41 = (uint8_t *)swift_slowAlloc();
      uint64_t v42 = swift_slowAlloc();
      v56[0] = v42;
      *(_DWORD *)long long v41 = 136446210;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 96) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v39, v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_249C3F000, v36, v37, "Did not find PIR config for PIR use-case '%{public}s.'", v41, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C5B4790](v42, -1, -1);
      uint64_t v43 = v41;
      uint64_t v29 = v55;
      MEMORY[0x24C5B4790](v43, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v44 = *(void *)(v0 + 320);
    type metadata accessor for CipherMLError();
    _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    swift_release();
    outlined consume of Data._Representation(v29, v30);
    outlined destroy of AspirePirKeywordPirParameters(v44, type metadata accessor for AspireApiConfig);
    goto LABEL_31;
  }
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined copy of Data._Representation(v29, v30);
    outlined destroy of AspirePirKeywordPirParameters(v33, type metadata accessor for AspireApiConfig.OneOf_Config);
    goto LABEL_25;
  }
  int v46 = *(void *)(v0 + 168);
  outlined init with take of AspirePirSymmetricPirClientConfig(v33, *(void *)(v0 + 296), type metadata accessor for AspireApiPIRConfig);
  uint64_t v47 = *(_OWORD *)(v46 + 24);
  uint64_t v48 = *(_OWORD *)(v46 + 40);
  uint64_t v49 = *(_OWORD *)(v46 + 8);
  *(void *)(v0 + 64) = *(void *)(v46 + 56);
  *(_OWORD *)(v0 + 32) = v47;
  *(_OWORD *)(v0 + 48) = v48;
  *(_OWORD *)(v0 + 16) = v49;
  outlined copy of Data._Representation(v29, v30);
  int v50 = (void *)swift_task_alloc();
  *(void *)(v0 + 440) = v50;
  *int v50 = v0;
  v50[1] = RequestsManager.loadContext(requestContext:allowingKeyRotation:);
  uint64_t v51 = *(void *)(v0 + 344);
  uint64_t v52 = *(void *)(v0 + 352);
  uint64_t v53 = *(void *)(v0 + 296);
  return RequestsManager.validate(config:static:useCase:)(v53, v0 + 16, v51, v52);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  uint64_t v1 = v0[44];
  id v2 = v0[45];
  uint64_t v3 = v0[43];
  uint64_t v4 = (void *)swift_allocObject();
  v0[48] = v4;
  v4[2] = v2;
  v4[3] = v3;
  v4[4] = v1;
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized Coordinator.run(key:_:)
                                                                           + async function pointer to specialized Coordinator.run(key:_:));
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v5 = (void *)swift_task_alloc();
  v0[49] = v5;
  char *v5 = v0;
  v5[1] = RequestsManager.loadContext(requestContext:allowingKeyRotation:);
  id v6 = v0[43];
  uint64_t v7 = v0[44];
  return v9((uint64_t)v9, v6, v7, (uint64_t)&closure #1 in KeyRotation.runWithCoordinator(useCase:)partial apply, (uint64_t)v4);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  id v2 = *v1;
  *(void *)(*v1 + 400) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 360);
  swift_release();
  if (v0) {
    uint64_t v4 = RequestsManager.loadContext(requestContext:allowingKeyRotation:);
  }
  else {
    uint64_t v4 = RequestsManager.loadContext(requestContext:allowingKeyRotation:);
  }
  return MEMORY[0x270FA2498](v4, v3, 0);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  swift_bridgeObjectRelease();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[51] = v1;
  *uint64_t v1 = v0;
  v1[1] = RequestsManager.loadContext(requestContext:allowingKeyRotation:);
  id v2 = v0[21];
  uint64_t v3 = v0[20];
  return RequestsManager.loadContext(requestContext:allowingKeyRotation:)(v3, v2, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 416) = v0;
  swift_task_dealloc();
  if (v0) {
    id v2 = RequestsManager.loadContext(requestContext:allowingKeyRotation:);
  }
  else {
    id v2 = RequestsManager.loadContext(requestContext:allowingKeyRotation:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v1;

  swift_bridgeObjectRelease();
  return MEMORY[0x270FA2498](RequestsManager.loadContext(requestContext:allowingKeyRotation:), 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  outlined destroy of AMDPbHEConfig.OneOf_Config?(*(void *)(v0 + 336), &demangling cache variable for type metadata for AspireApiConfig?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  outlined destroy of AMDPbHEConfig.OneOf_Config?(*(void *)(v0 + 336), &demangling cache variable for type metadata for AspireApiConfig?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x270FA2498](RequestsManager.loadContext(requestContext:allowingKeyRotation:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;

  uint64_t v1 = v0[33];
  id v2 = v0[26];
  uint64_t v3 = v0[27];
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v0[34], v1, &demangling cache variable for type metadata for UserIdentifier?);
  uint64_t v4 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  v0[60] = v4;
  v0[61] = (v3 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
  if (v4(v1, 1, v2) == 1)
  {
    uint64_t v5 = v0[31];
    id v6 = v0[23];
    uint64_t v7 = v0[24];
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v0[33], &demangling cache variable for type metadata for UserIdentifier?);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(v5, 1, 1, v6);
  }
  else
  {
    uint64_t v9 = v0[36];
    uint64_t v8 = v0[37];
    uint64_t v10 = v0[33];
    uint64_t v11 = *(void *)(v10 + *(int *)(v0[26] + 24));
    swift_bridgeObjectRetain();
    outlined destroy of AspirePirKeywordPirParameters(v10, (uint64_t (*)(void))type metadata accessor for UserIdentifier);
    uint64_t v12 = *(void *)(v8 + *(int *)(v9 + 20))
        + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__evaluationKeyConfigHash;
    swift_beginAccess();
    uint64_t v14 = *(void *)v12;
    uint64_t v13 = *(void *)(v12 + 8);
    if (*(void *)(v11 + 16))
    {
      outlined copy of Data._Representation(*(void *)v12, *(void *)(v12 + 8));
      uint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(v14, v13);
      uint64_t v16 = v0[31];
      uint64_t v17 = v0[23];
      uint64_t v18 = v0[24];
      if (v19)
      {
        outlined init with copy of UserIdentifier(*(void *)(v11 + 56) + *(void *)(v18 + 72) * v15, v0[31], (uint64_t (*)(void))type metadata accessor for SecretKey);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v18 + 56))(v16, 0, 1, v17);
      }
      else
      {
        (*(void (**)(void, uint64_t, uint64_t, uint64_t))(v18 + 56))(v0[31], 1, 1, v17);
      }
    }
    else
    {
      (*(void (**)(void, uint64_t, uint64_t, void))(v0[24] + 56))(v0[31], 1, 1, v0[23]);
      outlined copy of Data._Representation(v14, v13);
    }
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(v14, v13);
  }
  uint64_t v20 = (void *)swift_task_alloc();
  v0[62] = v20;
  *uint64_t v20 = v0;
  v20[1] = RequestsManager.loadContext(requestContext:allowingKeyRotation:);
  uint64_t v22 = v0[57];
  uint64_t v21 = v0[58];
  return KeyRotation.areKeysExpired(groupName:)(v22, v21);
}

{
  uint64_t v0;
  unsigned char *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  BOOL v18;
  unint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  os_log_type_t v35;
  BOOL v36;
  unint64_t v37;
  uint64_t v38;
  uint8_t *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(void);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  int *v57;
  void *v58;
  uint64_t *v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68[2];
  uint64_t v69;
  uint64_t v70;

  uint64_t v69 = v0;
  uint64_t v1 = (unsigned char *)(v0 + 552);
  uint64_t v3 = *(void *)(v0 + 240);
  id v2 = *(void *)(v0 + 248);
  uint64_t v4 = (*(uint64_t (**)(void, uint64_t, void))(v0 + 480))(*(void *)(v0 + 272), 1, *(void *)(v0 + 208));
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v2, v3, &demangling cache variable for type metadata for SecretKey?);
  uint64_t v5 = *(void *)(v0 + 240);
  if (v4 == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(*(void *)(v0 + 240), &demangling cache variable for type metadata for SecretKey?);
  }
  else
  {
    id v6 = (*(uint64_t (**)(void, uint64_t, void))(*(void *)(v0 + 192) + 48))(*(void *)(v0 + 240), 1, *(void *)(v0 + 184));
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v5, &demangling cache variable for type metadata for SecretKey?);
    if (v6 != 1)
    {
      if ((*(unsigned char *)(v0 + 554) & 1) == 0) {
        goto LABEL_17;
      }
      if (*v1 == 1) {
        goto LABEL_5;
      }
      goto LABEL_13;
    }
  }
  if (*v1)
  {
LABEL_5:
    if (one-time initialization token for framework != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.framework);
    swift_bridgeObjectRetain_n();
    uint64_t v8 = Logger.logObject.getter();
    uint64_t v9 = static os_log_type_t.error.getter();
    uint64_t v10 = os_log_type_enabled(v8, v9);
    uint64_t v11 = *(void *)(v0 + 352);
    if (v10)
    {
      uint64_t v12 = *(void *)(v0 + 344);
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      v68[0] = v14;
      *(_DWORD *)uint64_t v13 = 136446210;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 136) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v11, v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_249C3F000, v8, v9, "No userId or secretKey for use-case '%{public}s'. Running rotation task'", v13, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C5B4790](v14, -1, -1);
      MEMORY[0x24C5B4790](v13, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v28 = *(void *)(v0 + 360);
    return MEMORY[0x270FA2498](RequestsManager.loadContext(requestContext:allowingKeyRotation:), v28, 0);
  }
  if ((*(unsigned char *)(v0 + 554) & 1) == 0)
  {
LABEL_17:
    uint64_t v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 480);
    uint64_t v23 = *(void *)(v0 + 256);
    uint64_t v24 = *(void *)(v0 + 208);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(*(void *)(v0 + 272), v23, &demangling cache variable for type metadata for UserIdentifier?);
    uint64_t v25 = v22(v23, 1, v24);
    uint64_t v26 = *(void *)(v0 + 256);
    if (v25 == 1)
    {
      uint64_t v27 = &demangling cache variable for type metadata for UserIdentifier?;
    }
    else
    {
      uint64_t v29 = *(void *)(v0 + 248);
      uint64_t v30 = *(void *)(v0 + 232);
      long long v32 = *(void *)(v0 + 184);
      long long v31 = *(void *)(v0 + 192);
      outlined init with take of AspirePirSymmetricPirClientConfig(v26, *(void *)(v0 + 224), (uint64_t (*)(void))type metadata accessor for UserIdentifier);
      outlined init with copy of AMDPbHEConfig.OneOf_Config?(v29, v30, &demangling cache variable for type metadata for SecretKey?);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v31 + 48))(v30, 1, v32) != 1)
      {
        uint64_t v63 = *(void *)(v0 + 352);
        uint64_t v64 = *(void *)(v0 + 424);
        uint64_t v62 = *(void *)(v0 + 344);
        uint64_t v48 = *(void *)(v0 + 320);
        uint64_t v49 = *(void *)(v0 + 296);
        uint64_t v65 = *(void *)(v0 + 272);
        uint64_t v67 = *(void *)(v0 + 432);
        int v50 = *(void *)(v0 + 248);
        uint64_t v51 = *(void *)(v0 + 224);
        uint64_t v52 = *(void *)(v0 + 200);
        uint64_t v54 = *(void **)(v0 + 160);
        uint64_t v53 = *(void *)(v0 + 168);
        outlined init with take of AspirePirSymmetricPirClientConfig(*(void *)(v0 + 232), v52, (uint64_t (*)(void))type metadata accessor for SecretKey);
        uint64_t v55 = specialized RequestsManager.loadCache(requestContext:)(v53);
        uint64_t v61 = v56;
        swift_release();
        outlined destroy of AMDPbHEConfig.OneOf_Config?(v50, &demangling cache variable for type metadata for SecretKey?);
        outlined destroy of AspirePirKeywordPirParameters(v48, type metadata accessor for AspireApiConfig);
        uint64_t v57 = (int *)type metadata accessor for RequestsManager.PIRContext();
        outlined init with take of AspirePirSymmetricPirClientConfig(v51, (uint64_t)v54 + v57[5], (uint64_t (*)(void))type metadata accessor for UserIdentifier);
        outlined init with take of AspirePirSymmetricPirClientConfig(v49, (uint64_t)v54 + v57[6], type metadata accessor for AspireApiPIRConfig);
        outlined init with take of AspirePirSymmetricPirClientConfig(v52, (uint64_t)v54 + v57[8], (uint64_t (*)(void))type metadata accessor for SecretKey);
        *uint64_t v54 = v62;
        v54[1] = v63;
        uint64_t v58 = (void *)((char *)v54 + v57[7]);
        *uint64_t v58 = v64;
        v58[1] = v67;
        uint64_t v59 = (void *)((char *)v54 + v57[9]);
        *uint64_t v59 = v55;
        v59[1] = v61;
        outlined destroy of AMDPbHEConfig.OneOf_Config?(v65, &demangling cache variable for type metadata for UserIdentifier?);
        outlined destroy of AMDPbHEConfig.OneOf_Config?(*(void *)(v0 + 336), &demangling cache variable for type metadata for AspireApiConfig?);
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        uint64_t v47 = *(uint64_t (**)(void))(v0 + 8);
        goto LABEL_31;
      }
      uint64_t v33 = *(void *)(v0 + 232);
      outlined destroy of AspirePirKeywordPirParameters(*(void *)(v0 + 224), (uint64_t (*)(void))type metadata accessor for UserIdentifier);
      uint64_t v27 = &demangling cache variable for type metadata for SecretKey?;
      uint64_t v26 = v33;
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v26, v27);
    if (one-time initialization token for framework != -1) {
      swift_once();
    }
    uint64_t v34 = type metadata accessor for Logger();
    __swift_project_value_buffer(v34, (uint64_t)static Logger.framework);
    swift_bridgeObjectRetain();
    uint64_t v16 = Logger.logObject.getter();
    uint64_t v35 = static os_log_type_t.error.getter();
    uint64_t v36 = os_log_type_enabled(v16, v35);
    uint64_t v37 = *(void *)(v0 + 352);
    if (v36)
    {
      int v38 = *(void *)(v0 + 344);
      long long v39 = (uint8_t *)swift_slowAlloc();
      long long v40 = swift_slowAlloc();
      v68[0] = v40;
      *(_DWORD *)long long v39 = 136446210;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 120) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v37, v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_249C3F000, v16, v35, "No key for use-case '%{public}s'", v39, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C5B4790](v40, -1, -1);
      MEMORY[0x24C5B4790](v39, -1, -1);

      goto LABEL_30;
    }
LABEL_29:

    swift_bridgeObjectRelease_n();
    goto LABEL_30;
  }
LABEL_13:
  if (one-time initialization token for framework != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Logger.framework);
  swift_bridgeObjectRetain();
  uint64_t v16 = Logger.logObject.getter();
  uint64_t v17 = static os_log_type_t.error.getter();
  uint64_t v18 = os_log_type_enabled(v16, v17);
  uint64_t v19 = *(void *)(v0 + 352);
  if (!v18) {
    goto LABEL_29;
  }
  uint64_t v66 = *(void *)(v0 + 344);
  uint64_t v20 = (uint8_t *)swift_slowAlloc();
  uint64_t v21 = swift_slowAlloc();
  v68[0] = v21;
  *(_DWORD *)uint64_t v20 = 136446210;
  swift_bridgeObjectRetain();
  *(void *)(v0 + 128) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v66, v19, v68);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease_n();
  _os_log_impl(&dword_249C3F000, v16, v17, "Key expired for use-case '%{public}s'", v20, 0xCu);
  swift_arrayDestroy();
  MEMORY[0x24C5B4790](v21, -1, -1);
  MEMORY[0x24C5B4790](v20, -1, -1);

LABEL_30:
  uint64_t v42 = *(void *)(v0 + 424);
  long long v41 = *(void *)(v0 + 432);
  uint64_t v43 = *(void *)(v0 + 320);
  uint64_t v44 = *(void *)(v0 + 296);
  uint64_t v45 = *(void *)(v0 + 272);
  int v46 = *(void *)(v0 + 248);
  type metadata accessor for CipherMLError();
  _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
  swift_allocError();
  swift_storeEnumTagMultiPayload();
  swift_willThrow();
  swift_release();
  outlined consume of Data._Representation(v42, v41);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v46, &demangling cache variable for type metadata for SecretKey?);
  outlined destroy of AspirePirKeywordPirParameters(v44, type metadata accessor for AspireApiPIRConfig);
  outlined destroy of AspirePirKeywordPirParameters(v43, type metadata accessor for AspireApiConfig);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v45, &demangling cache variable for type metadata for UserIdentifier?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(*(void *)(v0 + 336), &demangling cache variable for type metadata for AspireApiConfig?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v47 = *(uint64_t (**)(void))(v0 + 8);
LABEL_31:
  return v47();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  uint64_t v1 = v0[44];
  id v2 = v0[45];
  uint64_t v3 = v0[43];
  uint64_t v4 = (void *)swift_allocObject();
  v0[64] = v4;
  v4[2] = v2;
  v4[3] = v3;
  v4[4] = v1;
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized Coordinator.run(key:_:)
                                                                           + async function pointer to specialized Coordinator.run(key:_:));
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v5 = (void *)swift_task_alloc();
  v0[65] = v5;
  char *v5 = v0;
  v5[1] = RequestsManager.loadContext(requestContext:allowingKeyRotation:);
  id v6 = v0[43];
  uint64_t v7 = v0[44];
  return v9((uint64_t)v9, v6, v7, (uint64_t)&async function pointer to partial apply for closure #1 in KeyRotation.runWithCoordinator(useCase:), (uint64_t)v4);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  id v2 = *v1;
  *(void *)(*v1 + 528) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 360);
  swift_release();
  if (v0) {
    uint64_t v4 = RequestsManager.loadContext(requestContext:allowingKeyRotation:);
  }
  else {
    uint64_t v4 = RequestsManager.loadContext(requestContext:allowingKeyRotation:);
  }
  return MEMORY[0x270FA2498](v4, v3, 0);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  swift_bridgeObjectRelease();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[67] = v1;
  *uint64_t v1 = v0;
  v1[1] = RequestsManager.loadContext(requestContext:allowingKeyRotation:);
  id v2 = v0[21];
  uint64_t v3 = v0[20];
  return RequestsManager.loadContext(requestContext:allowingKeyRotation:)(v3, v2, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 544) = v0;
  swift_task_dealloc();
  if (v0) {
    id v2 = RequestsManager.loadContext(requestContext:allowingKeyRotation:);
  }
  else {
    id v2 = RequestsManager.loadContext(requestContext:allowingKeyRotation:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v1;

  swift_bridgeObjectRelease();
  return MEMORY[0x270FA2498](RequestsManager.loadContext(requestContext:allowingKeyRotation:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  uint64_t v1 = v0[53];
  id v2 = v0[54];
  uint64_t v3 = v0[40];
  uint64_t v4 = v0[37];
  uint64_t v5 = v0[34];
  id v6 = v0[31];
  swift_release();
  outlined consume of Data._Representation(v1, v2);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v6, &demangling cache variable for type metadata for SecretKey?);
  outlined destroy of AspirePirKeywordPirParameters(v4, type metadata accessor for AspireApiPIRConfig);
  outlined destroy of AspirePirKeywordPirParameters(v3, type metadata accessor for AspireApiConfig);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v5, &demangling cache variable for type metadata for UserIdentifier?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v0[42], &demangling cache variable for type metadata for AspireApiConfig?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

{
  void *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  uint64_t v1 = v0[53];
  id v2 = v0[54];
  uint64_t v3 = v0[40];
  uint64_t v4 = v0[37];
  uint64_t v5 = v0[34];
  id v6 = v0[31];
  swift_release();
  outlined consume of Data._Representation(v1, v2);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v6, &demangling cache variable for type metadata for SecretKey?);
  outlined destroy of AspirePirKeywordPirParameters(v4, type metadata accessor for AspireApiPIRConfig);
  outlined destroy of AspirePirKeywordPirParameters(v3, type metadata accessor for AspireApiConfig);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v5, &demangling cache variable for type metadata for UserIdentifier?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v0[42], &demangling cache variable for type metadata for AspireApiConfig?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  outlined destroy of AMDPbHEConfig.OneOf_Config?(*(void *)(v0 + 336), &demangling cache variable for type metadata for AspireApiConfig?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  void *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  uint64_t v1 = v0[53];
  id v2 = v0[54];
  uint64_t v3 = v0[40];
  uint64_t v4 = v0[37];
  swift_release();
  outlined consume of Data._Representation(v1, v2);
  outlined destroy of AspirePirKeywordPirParameters(v4, type metadata accessor for AspireApiPIRConfig);
  outlined destroy of AspirePirKeywordPirParameters(v3, type metadata accessor for AspireApiConfig);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v0[42], &demangling cache variable for type metadata for AspireApiConfig?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

{
  void *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  uint64_t v1 = v0[53];
  id v2 = v0[54];
  uint64_t v3 = v0[40];
  uint64_t v4 = v0[37];
  uint64_t v5 = v0[34];
  id v6 = v0[31];
  swift_release();
  outlined consume of Data._Representation(v1, v2);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v6, &demangling cache variable for type metadata for SecretKey?);
  outlined destroy of AspirePirKeywordPirParameters(v4, type metadata accessor for AspireApiPIRConfig);
  outlined destroy of AspirePirKeywordPirParameters(v3, type metadata accessor for AspireApiConfig);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v5, &demangling cache variable for type metadata for UserIdentifier?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v0[42], &demangling cache variable for type metadata for AspireApiConfig?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

{
  void *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  uint64_t v1 = v0[53];
  id v2 = v0[54];
  uint64_t v3 = v0[40];
  uint64_t v4 = v0[37];
  uint64_t v5 = v0[34];
  id v6 = v0[31];
  swift_release();
  outlined consume of Data._Representation(v1, v2);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v6, &demangling cache variable for type metadata for SecretKey?);
  outlined destroy of AspirePirKeywordPirParameters(v4, type metadata accessor for AspireApiPIRConfig);
  outlined destroy of AspirePirKeywordPirParameters(v3, type metadata accessor for AspireApiConfig);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v5, &demangling cache variable for type metadata for UserIdentifier?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v0[42], &demangling cache variable for type metadata for AspireApiConfig?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  uint64_t v1 = **(void ***)(v0 + 88);
  id v2 = objc_msgSend(v1, sel_useCase);
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;

  *(void *)(v0 + 368) = v3;
  *(void *)(v0 + 376) = v5;
  id v6 = objc_msgSend(v1, sel_sourceApplicationBundleIdentifier);
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v10 = v9;
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(void *)(v0 + 96);
  *(void *)(v0 + 384) = RequestsManager.keyRotation(for:)(v8, v10);
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)(v11 + 40);
  *(void *)(v0 + 392) = v12;
  return MEMORY[0x270FA2498](RequestsManager.loadContext(requestContext:allowingKeyRotation:), v12, 0);
}

{
  uint64_t v0;
  uint64_t v2;

  ActiveUseCaseTracker.markActive(useCase:active:)(*(void *)(v0 + 368), *(void *)(v0 + 376), 1);
  swift_release();
  return MEMORY[0x270FA2498](RequestsManager.loadContext(requestContext:allowingKeyRotation:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;

  uint64_t v1 = *(void *)(*(void *)(v0 + 96) + 16);
  *(void *)(v0 + 400) = v1;
  return MEMORY[0x270FA2498](RequestsManager.loadContext(requestContext:allowingKeyRotation:), v1, 0);
}

{
  uint64_t *v0;
  uint64_t v2;

  ConfigCache.subscript.getter(v0[46], v0[47], v0[45]);
  return MEMORY[0x270FA2498](RequestsManager.loadContext(requestContext:allowingKeyRotation:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  unsigned int (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  BOOL v20;
  unint64_t v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  BOOL v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint8_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  os_unfair_lock_s *v54;
  os_unfair_lock_s *v55;
  os_unfair_lock_s *v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  BOOL v60;
  unint64_t v61;
  uint64_t v62;
  uint8_t *v63;
  uint64_t v64;
  uint8_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t ObjectType;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  NSObject *v83;
  os_log_type_t v84;
  BOOL v85;
  unint64_t v86;
  uint8_t *v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t (*v91)(void);
  uint64_t v93;
  uint64_t v94;
  uint64_t (*v95)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v96;
  uint64_t v97;
  uint64_t v98[2];
  uint64_t v99;
  uint64_t v100;

  int v99 = v0;
  uint64_t v1 = *(void *)(v0 + 360);
  id v2 = *(void *)(v0 + 328);
  uint64_t v3 = *(unsigned __int8 *)(v0 + 560);
  uint64_t v4 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 336) + 48);
  if (v4(v1, 1, v2) == 1 && v3 != 0)
  {
    if (one-time initialization token for framework != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Logger.framework);
    swift_bridgeObjectRetain_n();
    uint64_t v18 = Logger.logObject.getter();
    uint64_t v19 = static os_log_type_t.info.getter();
    uint64_t v20 = os_log_type_enabled(v18, v19);
    uint64_t v21 = *(void *)(v0 + 376);
    if (v20)
    {
      uint64_t v22 = *(void *)(v0 + 368);
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      v98[0] = v24;
      *(_DWORD *)uint64_t v23 = 136446210;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 72) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v21, v98);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_249C3F000, v18, v19, "No dynamic configuration for use-case '%{public}s'. Running rotation task", v23, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C5B4790](v24, -1, -1);
      MEMORY[0x24C5B4790](v23, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v34 = *(void *)(v0 + 384);
    return MEMORY[0x270FA2498](RequestsManager.loadContext(requestContext:allowingKeyRotation:), v34, 0);
  }
  id v6 = *(void *)(v0 + 352);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1, v6, &demangling cache variable for type metadata for AspireApiConfig?);
  uint64_t v7 = v4(v6, 1, v2);
  uint64_t v8 = *(void *)(v0 + 352);
  if (v7 == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v8, &demangling cache variable for type metadata for AspireApiConfig?);
    if (one-time initialization token for framework != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Logger.framework);
    swift_bridgeObjectRetain();
    uint64_t v10 = Logger.logObject.getter();
    uint64_t v11 = static os_log_type_t.error.getter();
    uint64_t v12 = os_log_type_enabled(v10, v11);
    uint64_t v13 = *(void *)(v0 + 376);
    if (v12)
    {
      uint64_t v14 = *(void *)(v0 + 368);
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v16 = swift_slowAlloc();
      v98[0] = v16;
      *(_DWORD *)uint64_t v15 = 136446210;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v13, v98);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_249C3F000, v10, v11, "No dynamic configuration for use-case '%{public}s'", v15, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C5B4790](v16, -1, -1);
      MEMORY[0x24C5B4790](v15, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v35 = *(void *)(v0 + 360);
    type metadata accessor for CipherMLError();
    _s8CipherML15AspireApiConfigVAC21InternalSwiftProtobuf7MessageAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    swift_release();
    goto LABEL_54;
  }
  uint64_t v25 = *(void *)(v0 + 344);
  uint64_t v26 = *(void *)(v0 + 328);
  uint64_t v27 = *(void *)(v0 + 304);
  outlined init with take of AspireApiPECConfig(v8, v25, type metadata accessor for AspireApiConfig);
  uint64_t v28 = (uint64_t *)(v25 + *(int *)(v26 + 20));
  uint64_t v29 = *v28;
  *(void *)(v0 + 448) = *v28;
  uint64_t v30 = v28[1];
  *(void *)(v0 + 456) = v30;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v25, v27, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
  long long v31 = type metadata accessor for AspireApiConfig.OneOf_Config(0);
  long long v32 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 48))(v27, 1, v31);
  uint64_t v33 = *(void *)(v0 + 304);
  if (v32 == 1)
  {
    outlined copy of Data._Representation(v29, v30);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v33, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
LABEL_26:
    if (one-time initialization token for framework != -1) {
      swift_once();
    }
    long long v40 = type metadata accessor for Logger();
    __swift_project_value_buffer(v40, (uint64_t)static Logger.framework);
    swift_bridgeObjectRetain();
    long long v41 = Logger.logObject.getter();
    uint64_t v42 = static os_log_type_t.error.getter();
    uint64_t v43 = os_log_type_enabled(v41, v42);
    uint64_t v44 = *(void *)(v0 + 376);
    if (v43)
    {
      uint64_t v45 = v30;
      int v46 = *(void *)(v0 + 368);
      uint64_t v47 = (uint8_t *)swift_slowAlloc();
      int v93 = v29;
      uint64_t v48 = swift_slowAlloc();
      v98[0] = v48;
      *(_DWORD *)uint64_t v47 = 136446210;
      swift_bridgeObjectRetain();
      uint64_t v49 = v46;
      uint64_t v30 = v45;
      *(void *)(v0 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v49, v44, v98);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_249C3F000, v41, v42, "Did not find PEC config for PEC use-case '%{public}s.'", v47, 0xCu);
      swift_arrayDestroy();
      int v50 = v48;
      uint64_t v29 = v93;
      MEMORY[0x24C5B4790](v50, -1, -1);
      MEMORY[0x24C5B4790](v47, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v35 = *(void *)(v0 + 360);
    uint64_t v51 = *(void *)(v0 + 344);
    type metadata accessor for CipherMLError();
    _s8CipherML15AspireApiConfigVAC21InternalSwiftProtobuf7MessageAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    swift_release();
    outlined consume of Data._Representation(v29, v30);
    uint64_t v52 = v51;
    goto LABEL_53;
  }
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined copy of Data._Representation(v29, v30);
    outlined destroy of RequestsManager.PECContext(v33, type metadata accessor for AspireApiConfig.OneOf_Config);
    goto LABEL_26;
  }
  uint64_t v37 = *(void *)(v0 + 368);
  uint64_t v36 = *(void *)(v0 + 376);
  int v38 = *(void *)(v0 + 320);
  outlined init with take of AspireApiPECConfig(v33, v38, type metadata accessor for AspireApiPECConfig);
  outlined copy of Data._Representation(v29, v30);
  specialized RequestsManager.validate(config:static:useCase:)(v38, v37, v36);
  if ((v39 & 1) == 0)
  {
    if (one-time initialization token for framework != -1) {
      swift_once();
    }
    uint64_t v57 = type metadata accessor for Logger();
    __swift_project_value_buffer(v57, (uint64_t)static Logger.framework);
    swift_bridgeObjectRetain();
    uint64_t v58 = Logger.logObject.getter();
    uint64_t v59 = static os_log_type_t.error.getter();
    unint64_t v60 = os_log_type_enabled(v58, v59);
    uint64_t v61 = *(void *)(v0 + 376);
    uint64_t v62 = v29;
    if (v60)
    {
      int v94 = *(void *)(v0 + 368);
      int v96 = v30;
      uint64_t v63 = (uint8_t *)swift_slowAlloc();
      uint64_t v64 = swift_slowAlloc();
      v98[0] = v64;
      *(_DWORD *)uint64_t v63 = 136446210;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 32) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v94, v61, v98);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_249C3F000, v58, v59, "Dynamic configuration is invalid for use-case '%{public}s'", v63, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C5B4790](v64, -1, -1);
      uint64_t v65 = v63;
      uint64_t v30 = v96;
      MEMORY[0x24C5B4790](v65, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v35 = *(void *)(v0 + 360);
    uint64_t v66 = *(void *)(v0 + 344);
    uint64_t v67 = *(void *)(v0 + 320);
    type metadata accessor for CipherMLError();
    _s8CipherML15AspireApiConfigVAC21InternalSwiftProtobuf7MessageAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    swift_release();
    unint64_t v68 = v62;
    goto LABEL_52;
  }
  uint64_t v53 = v29;
  uint64_t v54 = *(os_unfair_lock_s **)(*(void *)(v0 + 96) + 48);
  uint64_t v55 = v54 + 4;
  uint64_t v56 = v54 + 6;
  os_unfair_lock_lock(v54 + 6);
  closure #1 in OSAllocatedUnfairLock<A>.current.getter(v55, v98);
  os_unfair_lock_unlock(v56);
  uint64_t v69 = *(void *)(v98[0] + 48);
  swift_bridgeObjectRetain();
  swift_release();
  if (!*(void *)(v69 + 16))
  {
LABEL_46:
    swift_bridgeObjectRelease();
    if (one-time initialization token for framework != -1) {
      swift_once();
    }
    uint64_t v82 = type metadata accessor for Logger();
    __swift_project_value_buffer(v82, (uint64_t)static Logger.framework);
    swift_bridgeObjectRetain();
    uint64_t v83 = Logger.logObject.getter();
    uint64_t v84 = static os_log_type_t.error.getter();
    uint64_t v85 = os_log_type_enabled(v83, v84);
    uint64_t v86 = *(void *)(v0 + 376);
    if (v85)
    {
      int v97 = *(void *)(v0 + 368);
      uint64_t v87 = (uint8_t *)swift_slowAlloc();
      uint64_t v88 = v30;
      uint64_t v89 = swift_slowAlloc();
      v98[0] = v89;
      *(_DWORD *)uint64_t v87 = 136446210;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 40) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v97, v86, v98);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_249C3F000, v83, v84, "No group associated with use-case '%{public}s'", v87, 0xCu);
      swift_arrayDestroy();
      uint64_t v90 = v89;
      uint64_t v30 = v88;
      MEMORY[0x24C5B4790](v90, -1, -1);
      MEMORY[0x24C5B4790](v87, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v35 = *(void *)(v0 + 360);
    uint64_t v66 = *(void *)(v0 + 344);
    uint64_t v67 = *(void *)(v0 + 320);
    type metadata accessor for CipherMLError();
    _s8CipherML15AspireApiConfigVAC21InternalSwiftProtobuf7MessageAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    swift_release();
    unint64_t v68 = v53;
LABEL_52:
    outlined consume of Data._Representation(v68, v30);
    outlined destroy of RequestsManager.PECContext(v67, type metadata accessor for AspireApiPECConfig);
    uint64_t v52 = v66;
LABEL_53:
    outlined destroy of RequestsManager.PECContext(v52, type metadata accessor for AspireApiConfig);
LABEL_54:
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v35, &demangling cache variable for type metadata for AspireApiConfig?);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v91 = *(uint64_t (**)(void))(v0 + 8);
    return v91();
  }
  uint64_t v71 = *(void *)(v0 + 368);
  uint64_t v70 = *(void *)(v0 + 376);
  swift_bridgeObjectRetain();
  uint64_t v72 = specialized __RawDictionaryStorage.find<A>(_:)(v71, v70);
  if ((v73 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_46;
  }
  uint64_t v74 = *(void *)(v0 + 96);
  uint64_t v75 = (uint64_t *)(*(void *)(v69 + 56) + 16 * v72);
  uint64_t v76 = *v75;
  *(void *)(v0 + 464) = *v75;
  uint64_t v77 = v75[1];
  *(void *)(v0 + 472) = v77;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v78 = *(void *)(v74 + 32);
  uint64_t ObjectType = swift_getObjectType();
  int v95 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v78 + 8) + **(int **)(v78 + 8));
  uint64_t v80 = (void *)swift_task_alloc();
  *(void *)(v0 + 480) = v80;
  char *v80 = v0;
  v80[1] = RequestsManager.loadContext(requestContext:allowingKeyRotation:);
  uint64_t v81 = *(void *)(v0 + 296);
  return v95(v81, v76, v77, ObjectType, v78);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  uint64_t v1 = v0[47];
  id v2 = v0[48];
  uint64_t v3 = v0[46];
  uint64_t v4 = (void *)swift_allocObject();
  v0[51] = v4;
  v4[2] = v2;
  v4[3] = v3;
  v4[4] = v1;
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized Coordinator.run(key:_:)
                                                                           + async function pointer to specialized Coordinator.run(key:_:));
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v5 = (void *)swift_task_alloc();
  v0[52] = v5;
  char *v5 = v0;
  v5[1] = RequestsManager.loadContext(requestContext:allowingKeyRotation:);
  id v6 = v0[46];
  uint64_t v7 = v0[47];
  return v9((uint64_t)v9, v6, v7, (uint64_t)&closure #1 in KeyRotation.runWithCoordinator(useCase:)partial apply, (uint64_t)v4);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  id v2 = *v1;
  *(void *)(*v1 + 424) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 384);
  swift_release();
  if (v0) {
    uint64_t v4 = RequestsManager.loadContext(requestContext:allowingKeyRotation:);
  }
  else {
    uint64_t v4 = RequestsManager.loadContext(requestContext:allowingKeyRotation:);
  }
  return MEMORY[0x270FA2498](v4, v3, 0);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  swift_bridgeObjectRelease();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[54] = v1;
  *uint64_t v1 = v0;
  v1[1] = RequestsManager.loadContext(requestContext:allowingKeyRotation:);
  id v2 = v0[11];
  uint64_t v3 = v0[10];
  return RequestsManager.loadContext(requestContext:allowingKeyRotation:)(v3, v2, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 440) = v0;
  swift_task_dealloc();
  if (v0) {
    id v2 = RequestsManager.loadContext(requestContext:allowingKeyRotation:);
  }
  else {
    id v2 = RequestsManager.loadContext(requestContext:allowingKeyRotation:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v1;

  swift_bridgeObjectRelease();
  return MEMORY[0x270FA2498](RequestsManager.loadContext(requestContext:allowingKeyRotation:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void *)(v0 + 360);
  swift_release();
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v1, &demangling cache variable for type metadata for AspireApiConfig?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void *)(v0 + 360);
  swift_release();
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v1, &demangling cache variable for type metadata for AspireApiConfig?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x270FA2498](RequestsManager.loadContext(requestContext:allowingKeyRotation:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  uint64_t v1 = v0[36];
  id v2 = v0[29];
  uint64_t v3 = v0[30];
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v0[37], v1, &demangling cache variable for type metadata for UserIdentifier?);
  uint64_t v4 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  v0[61] = v4;
  v0[62] = (v3 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
  if (v4(v1, 1, v2) == 1)
  {
    uint64_t v5 = v0[34];
    id v6 = v0[25];
    uint64_t v7 = v0[26];
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v0[36], &demangling cache variable for type metadata for UserIdentifier?);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(v5, 1, 1, v6);
  }
  else
  {
    uint64_t v8 = v0[40];
    uint64_t v9 = v0[36];
    uint64_t v10 = *(void *)(v9 + *(int *)(v0[29] + 24));
    swift_bridgeObjectRetain();
    outlined destroy of RequestsManager.PECContext(v9, (uint64_t (*)(void))type metadata accessor for UserIdentifier);
    uint64_t v12 = *(void *)(v8 + 32);
    uint64_t v11 = *(void *)(v8 + 40);
    if (*(void *)(v10 + 16))
    {
      outlined copy of Data._Representation(*(void *)(v8 + 32), *(void *)(v8 + 40));
      uint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(v12, v11);
      uint64_t v14 = v0[34];
      uint64_t v15 = v0[25];
      uint64_t v16 = v0[26];
      if (v17)
      {
        outlined init with copy of AspireApiConfig(*(void *)(v10 + 56) + *(void *)(v16 + 72) * v13, v0[34], (uint64_t (*)(void))type metadata accessor for SecretKey);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v16 + 56))(v14, 0, 1, v15);
      }
      else
      {
        (*(void (**)(void, uint64_t, uint64_t, uint64_t))(v16 + 56))(v0[34], 1, 1, v15);
      }
    }
    else
    {
      (*(void (**)(void, uint64_t, uint64_t, void))(v0[26] + 56))(v0[34], 1, 1, v0[25]);
      outlined copy of Data._Representation(v12, v11);
    }
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(v12, v11);
  }
  uint64_t v18 = (void *)swift_task_alloc();
  v0[63] = v18;
  *uint64_t v18 = v0;
  v18[1] = RequestsManager.loadContext(requestContext:allowingKeyRotation:);
  uint64_t v20 = v0[58];
  uint64_t v19 = v0[59];
  return KeyRotation.areKeysExpired(groupName:)(v20, v19);
}

{
  uint64_t v0;
  unsigned char *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  BOOL v18;
  unint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  BOOL v37;
  unint64_t v38;
  uint64_t v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)(void);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int *v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  void *v79;
  uint64_t v80;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95[2];
  uint64_t v96;
  uint64_t v97;

  int v96 = v0;
  uint64_t v1 = (unsigned char *)(v0 + 560);
  uint64_t v3 = *(void *)(v0 + 264);
  id v2 = *(void *)(v0 + 272);
  uint64_t v4 = (*(uint64_t (**)(void, uint64_t, void))(v0 + 488))(*(void *)(v0 + 296), 1, *(void *)(v0 + 232));
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v2, v3, &demangling cache variable for type metadata for SecretKey?);
  uint64_t v5 = *(void *)(v0 + 264);
  if (v4 == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(*(void *)(v0 + 264), &demangling cache variable for type metadata for SecretKey?);
  }
  else
  {
    id v6 = (*(uint64_t (**)(void, uint64_t, void))(*(void *)(v0 + 208) + 48))(*(void *)(v0 + 264), 1, *(void *)(v0 + 200));
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v5, &demangling cache variable for type metadata for SecretKey?);
    if (v6 != 1)
    {
      if ((*(unsigned char *)(v0 + 561) & 1) == 0) {
        goto LABEL_17;
      }
      if (*v1 == 1) {
        goto LABEL_5;
      }
LABEL_13:
      if (one-time initialization token for framework != -1) {
        swift_once();
      }
      uint64_t v15 = type metadata accessor for Logger();
      __swift_project_value_buffer(v15, (uint64_t)static Logger.framework);
      swift_bridgeObjectRetain();
      uint64_t v16 = Logger.logObject.getter();
      uint64_t v17 = static os_log_type_t.error.getter();
      uint64_t v18 = os_log_type_enabled(v16, v17);
      uint64_t v19 = *(void *)(v0 + 376);
      if (v18)
      {
        int v93 = *(void *)(v0 + 368);
        uint64_t v20 = (uint8_t *)swift_slowAlloc();
        uint64_t v21 = swift_slowAlloc();
        v95[0] = v21;
        *(_DWORD *)uint64_t v20 = 136446210;
        swift_bridgeObjectRetain();
        *(void *)(v0 + 56) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v93, v19, v95);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_249C3F000, v16, v17, "Key expired for use-case '%{public}s'", v20, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x24C5B4790](v21, -1, -1);
        MEMORY[0x24C5B4790](v20, -1, -1);
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      uint64_t v42 = *(void *)(v0 + 448);
      uint64_t v90 = *(void *)(v0 + 456);
      uint64_t v43 = *(void *)(v0 + 360);
      uint64_t v44 = *(void *)(v0 + 344);
      uint64_t v45 = *(void *)(v0 + 320);
      int v46 = *(void *)(v0 + 296);
      uint64_t v47 = *(void *)(v0 + 272);
      type metadata accessor for CipherMLError();
      _s8CipherML15AspireApiConfigVAC21InternalSwiftProtobuf7MessageAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
      swift_allocError();
      swift_storeEnumTagMultiPayload();
      uint64_t v48 = v44;
      swift_willThrow();
      swift_release();
      uint64_t v49 = v42;
      int v50 = v43;
      uint64_t v51 = v46;
      outlined consume of Data._Representation(v49, v90);
      goto LABEL_33;
    }
  }
  if (*v1)
  {
LABEL_5:
    if (one-time initialization token for framework != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.framework);
    swift_bridgeObjectRetain_n();
    uint64_t v8 = Logger.logObject.getter();
    uint64_t v9 = static os_log_type_t.error.getter();
    uint64_t v10 = os_log_type_enabled(v8, v9);
    uint64_t v11 = *(void *)(v0 + 376);
    if (v10)
    {
      uint64_t v12 = *(void *)(v0 + 368);
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      v95[0] = v14;
      *(_DWORD *)uint64_t v13 = 136446210;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v11, v95);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_249C3F000, v8, v9, "No userId or secretKey for use-case '%{public}s'. Running rotation task'", v13, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C5B4790](v14, -1, -1);
      MEMORY[0x24C5B4790](v13, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v28 = *(void *)(v0 + 384);
    return MEMORY[0x270FA2498](RequestsManager.loadContext(requestContext:allowingKeyRotation:), v28, 0);
  }
  if (*(unsigned char *)(v0 + 561)) {
    goto LABEL_13;
  }
LABEL_17:
  uint64_t v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 488);
  uint64_t v23 = *(void *)(v0 + 280);
  uint64_t v24 = *(void *)(v0 + 232);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(*(void *)(v0 + 296), v23, &demangling cache variable for type metadata for UserIdentifier?);
  uint64_t v25 = v22(v23, 1, v24);
  uint64_t v26 = *(void *)(v0 + 280);
  if (v25 == 1)
  {
    uint64_t v27 = &demangling cache variable for type metadata for UserIdentifier?;
LABEL_25:
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v26, v27);
    if (one-time initialization token for framework != -1) {
      swift_once();
    }
    uint64_t v34 = type metadata accessor for Logger();
    __swift_project_value_buffer(v34, (uint64_t)static Logger.framework);
    swift_bridgeObjectRetain();
    uint64_t v35 = Logger.logObject.getter();
    uint64_t v36 = static os_log_type_t.error.getter();
    uint64_t v37 = os_log_type_enabled(v35, v36);
    int v38 = *(void *)(v0 + 376);
    if (v37)
    {
      long long v39 = *(void *)(v0 + 368);
      long long v40 = (uint8_t *)swift_slowAlloc();
      long long v41 = swift_slowAlloc();
      v95[0] = v41;
      *(_DWORD *)long long v40 = 136446210;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 48) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v38, v95);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_249C3F000, v35, v36, "No key for use-case '%{public}s'", v40, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C5B4790](v41, -1, -1);
      MEMORY[0x24C5B4790](v40, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v52 = *(void *)(v0 + 448);
    uint64_t v91 = *(void *)(v0 + 456);
    int v50 = *(void *)(v0 + 360);
    uint64_t v53 = *(void *)(v0 + 344);
    uint64_t v45 = *(void *)(v0 + 320);
    uint64_t v51 = *(void *)(v0 + 296);
    uint64_t v47 = *(void *)(v0 + 272);
    type metadata accessor for CipherMLError();
    _s8CipherML15AspireApiConfigVAC21InternalSwiftProtobuf7MessageAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
    swift_allocError();
    uint64_t v48 = v53;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    swift_release();
    outlined consume of Data._Representation(v52, v91);
    goto LABEL_33;
  }
  uint64_t v29 = *(void *)(v0 + 272);
  uint64_t v30 = *(void *)(v0 + 256);
  long long v32 = *(void *)(v0 + 200);
  long long v31 = *(void *)(v0 + 208);
  outlined init with take of AspireApiPECConfig(v26, *(void *)(v0 + 248), (uint64_t (*)(void))type metadata accessor for UserIdentifier);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v29, v30, &demangling cache variable for type metadata for SecretKey?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v31 + 48))(v30, 1, v32) == 1)
  {
    uint64_t v33 = *(void *)(v0 + 256);
    outlined destroy of RequestsManager.PECContext(*(void *)(v0 + 248), (uint64_t (*)(void))type metadata accessor for UserIdentifier);
    uint64_t v27 = &demangling cache variable for type metadata for SecretKey?;
    uint64_t v26 = v33;
    goto LABEL_25;
  }
  uint64_t v55 = *(void *)(v0 + 512);
  uint64_t v56 = *(void *)(v0 + 312);
  uint64_t v57 = *(void *)(v0 + 320);
  uint64_t v59 = *(void *)(v0 + 216);
  uint64_t v58 = *(void *)(v0 + 224);
  unint64_t v60 = *(void *)(v0 + 176);
  outlined init with take of AspireApiPECConfig(*(void *)(v0 + 256), v58, (uint64_t (*)(void))type metadata accessor for SecretKey);
  outlined init with copy of AspireApiConfig(v58, v59, (uint64_t (*)(void))type metadata accessor for SecretKey);
  outlined init with copy of AspireApiConfig(v57, v56, type metadata accessor for AspireApiPECConfig);
  AspireApiPECConfig.cryptokit()(v60);
  if (!v55)
  {
    uint64_t v63 = *(void *)(v0 + 216);
    uint64_t v64 = *(void *)(v0 + 200);
    uint64_t v66 = *(void *)(v0 + 112);
    uint64_t v65 = *(void *)(v0 + 120);
    uint64_t v67 = *(void *)(v0 + 104);
    (*(void (**)(void, void, void))(*(void *)(v0 + 160) + 16))(*(void *)(v0 + 168), *(void *)(v0 + 176), *(void *)(v0 + 152));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v66 + 16))(v65, v63 + *(int *)(v64 + 20), v67);
    PEC.SimilarityClient.init(config:secretKey:)();
    unint64_t v68 = *(void *)(v0 + 448);
    uint64_t v69 = *(void *)(v0 + 456);
    uint64_t v89 = *(void *)(v0 + 368);
    int v92 = *(void *)(v0 + 376);
    int v94 = *(void *)(v0 + 360);
    uint64_t v72 = *(void *)(v0 + 312);
    uint64_t v85 = *(void *)(v0 + 320);
    uint64_t v86 = *(void *)(v0 + 344);
    uint64_t v84 = *(void *)(v0 + 272);
    uint64_t v87 = *(void *)(v0 + 248);
    uint64_t v88 = *(void *)(v0 + 296);
    uint64_t v73 = *(void *)(v0 + 216);
    uint64_t v75 = *(int **)(v0 + 184);
    uint64_t v74 = *(void *)(v0 + 192);
    uint64_t v76 = *(void *)(v0 + 136);
    uint64_t v82 = *(void *)(v0 + 144);
    uint64_t v83 = *(void *)(v0 + 224);
    uint64_t v77 = *(void *)(v0 + 128);
    uint64_t v78 = *(void **)(v0 + 80);
    (*(void (**)(void, void))(*(void *)(v0 + 160) + 8))(*(void *)(v0 + 176), *(void *)(v0 + 152));
    outlined init with take of AspireApiPECConfig(v73, v74, (uint64_t (*)(void))type metadata accessor for SecretKey);
    outlined init with take of AspireApiPECConfig(v72, v74 + v75[5], type metadata accessor for AspireApiPECConfig);
    uint64_t v79 = (void *)(v74 + v75[6]);
    *uint64_t v79 = v68;
    v79[1] = v69;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v76 + 32))(v74 + v75[7], v82, v77);
    swift_release();
    outlined destroy of RequestsManager.PECContext(v83, (uint64_t (*)(void))type metadata accessor for SecretKey);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v84, &demangling cache variable for type metadata for SecretKey?);
    outlined destroy of RequestsManager.PECContext(v85, type metadata accessor for AspireApiPECConfig);
    outlined destroy of RequestsManager.PECContext(v86, type metadata accessor for AspireApiConfig);
    uint64_t v80 = type metadata accessor for RequestsManager.PECContext();
    outlined init with take of AspireApiPECConfig(v87, (uint64_t)v78 + *(int *)(v80 + 20), (uint64_t (*)(void))type metadata accessor for UserIdentifier);
    outlined init with take of AspireApiPECConfig(v74, (uint64_t)v78 + *(int *)(v80 + 24), (uint64_t (*)(void))type metadata accessor for SimilarityClient);
    *uint64_t v78 = v89;
    v78[1] = v92;
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v88, &demangling cache variable for type metadata for UserIdentifier?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v94, &demangling cache variable for type metadata for AspireApiConfig?);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v54 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_34;
  }
  uint64_t v61 = *(void *)(v0 + 312);
  uint64_t v62 = *(void *)(v0 + 216);
  outlined consume of Data._Representation(*(void *)(v0 + 448), *(void *)(v0 + 456));
  outlined destroy of RequestsManager.PECContext(v61, type metadata accessor for AspireApiPECConfig);
  outlined destroy of RequestsManager.PECContext(v62, (uint64_t (*)(void))type metadata accessor for SecretKey);
  int v50 = *(void *)(v0 + 360);
  uint64_t v48 = *(void *)(v0 + 344);
  uint64_t v45 = *(void *)(v0 + 320);
  uint64_t v51 = *(void *)(v0 + 296);
  uint64_t v47 = *(void *)(v0 + 272);
  uint64_t v70 = *(void *)(v0 + 248);
  uint64_t v71 = *(void *)(v0 + 224);
  swift_bridgeObjectRelease();
  swift_release();
  outlined destroy of RequestsManager.PECContext(v71, (uint64_t (*)(void))type metadata accessor for SecretKey);
  outlined destroy of RequestsManager.PECContext(v70, (uint64_t (*)(void))type metadata accessor for UserIdentifier);
LABEL_33:
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v47, &demangling cache variable for type metadata for SecretKey?);
  outlined destroy of RequestsManager.PECContext(v45, type metadata accessor for AspireApiPECConfig);
  outlined destroy of RequestsManager.PECContext(v48, type metadata accessor for AspireApiConfig);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v51, &demangling cache variable for type metadata for UserIdentifier?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v50, &demangling cache variable for type metadata for AspireApiConfig?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v54 = *(uint64_t (**)(void))(v0 + 8);
LABEL_34:
  return v54();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  uint64_t v1 = v0[47];
  id v2 = v0[48];
  uint64_t v3 = v0[46];
  uint64_t v4 = (void *)swift_allocObject();
  v0[65] = v4;
  v4[2] = v2;
  v4[3] = v3;
  v4[4] = v1;
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized Coordinator.run(key:_:)
                                                                           + async function pointer to specialized Coordinator.run(key:_:));
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v5 = (void *)swift_task_alloc();
  v0[66] = v5;
  char *v5 = v0;
  v5[1] = RequestsManager.loadContext(requestContext:allowingKeyRotation:);
  id v6 = v0[46];
  uint64_t v7 = v0[47];
  return v9((uint64_t)v9, v6, v7, (uint64_t)&async function pointer to partial apply for closure #1 in KeyRotation.runWithCoordinator(useCase:), (uint64_t)v4);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  id v2 = *v1;
  *(void *)(*v1 + 536) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 384);
  swift_release();
  if (v0) {
    uint64_t v4 = RequestsManager.loadContext(requestContext:allowingKeyRotation:);
  }
  else {
    uint64_t v4 = RequestsManager.loadContext(requestContext:allowingKeyRotation:);
  }
  return MEMORY[0x270FA2498](v4, v3, 0);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  swift_bridgeObjectRelease();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[68] = v1;
  *uint64_t v1 = v0;
  v1[1] = RequestsManager.loadContext(requestContext:allowingKeyRotation:);
  id v2 = v0[11];
  uint64_t v3 = v0[10];
  return RequestsManager.loadContext(requestContext:allowingKeyRotation:)(v3, v2, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 552) = v0;
  swift_task_dealloc();
  if (v0) {
    id v2 = RequestsManager.loadContext(requestContext:allowingKeyRotation:);
  }
  else {
    id v2 = RequestsManager.loadContext(requestContext:allowingKeyRotation:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v1;

  swift_bridgeObjectRelease();
  return MEMORY[0x270FA2498](RequestsManager.loadContext(requestContext:allowingKeyRotation:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;

  uint64_t v1 = v0[56];
  id v2 = v0[57];
  uint64_t v3 = v0[45];
  uint64_t v4 = v0[43];
  uint64_t v5 = v0[40];
  id v6 = v0[37];
  uint64_t v7 = v0[34];
  swift_release();
  outlined consume of Data._Representation(v1, v2);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v7, &demangling cache variable for type metadata for SecretKey?);
  outlined destroy of RequestsManager.PECContext(v5, type metadata accessor for AspireApiPECConfig);
  outlined destroy of RequestsManager.PECContext(v4, type metadata accessor for AspireApiConfig);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v6, &demangling cache variable for type metadata for UserIdentifier?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v3, &demangling cache variable for type metadata for AspireApiConfig?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

{
  void *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;

  uint64_t v1 = v0[56];
  id v2 = v0[57];
  uint64_t v3 = v0[45];
  uint64_t v4 = v0[43];
  uint64_t v5 = v0[40];
  id v6 = v0[37];
  uint64_t v7 = v0[34];
  swift_release();
  outlined consume of Data._Representation(v1, v2);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v7, &demangling cache variable for type metadata for SecretKey?);
  outlined destroy of RequestsManager.PECContext(v5, type metadata accessor for AspireApiPECConfig);
  outlined destroy of RequestsManager.PECContext(v4, type metadata accessor for AspireApiConfig);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v6, &demangling cache variable for type metadata for UserIdentifier?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v3, &demangling cache variable for type metadata for AspireApiConfig?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void *)(v0 + 360);
  swift_release();
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v1, &demangling cache variable for type metadata for AspireApiConfig?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

{
  void *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;

  uint64_t v1 = v0[56];
  id v2 = v0[57];
  uint64_t v3 = v0[45];
  uint64_t v4 = v0[43];
  uint64_t v5 = v0[40];
  id v6 = v0[37];
  uint64_t v7 = v0[34];
  swift_release();
  outlined consume of Data._Representation(v1, v2);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v7, &demangling cache variable for type metadata for SecretKey?);
  outlined destroy of RequestsManager.PECContext(v5, type metadata accessor for AspireApiPECConfig);
  outlined destroy of RequestsManager.PECContext(v4, type metadata accessor for AspireApiConfig);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v6, &demangling cache variable for type metadata for UserIdentifier?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v3, &demangling cache variable for type metadata for AspireApiConfig?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

{
  void *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;

  uint64_t v1 = v0[56];
  id v2 = v0[57];
  uint64_t v3 = v0[45];
  uint64_t v4 = v0[43];
  uint64_t v5 = v0[40];
  id v6 = v0[37];
  uint64_t v7 = v0[34];
  swift_release();
  outlined consume of Data._Representation(v1, v2);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v7, &demangling cache variable for type metadata for SecretKey?);
  outlined destroy of RequestsManager.PECContext(v5, type metadata accessor for AspireApiPECConfig);
  outlined destroy of RequestsManager.PECContext(v4, type metadata accessor for AspireApiConfig);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v6, &demangling cache variable for type metadata for UserIdentifier?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v3, &demangling cache variable for type metadata for AspireApiConfig?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t RequestsManager.loadContext(requestContext:allowingKeyRotation:)(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 448) = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_bridgeObjectRelease();
    uint64_t v5 = RequestsManager.loadContext(requestContext:allowingKeyRotation:);
  }
  else
  {
    *(unsigned char *)(v4 + 553) = a1 & 1;
    uint64_t v5 = RequestsManager.loadContext(requestContext:allowingKeyRotation:);
  }
  return MEMORY[0x270FA2498](v5, 0, 0);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v3 = *v2;
  *(unsigned char *)(v3 + 554) = a1;
  *(void *)(v3 + 504) = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v1)
  {
    swift_bridgeObjectRelease();
    uint64_t v4 = RequestsManager.loadContext(requestContext:allowingKeyRotation:);
  }
  else
  {
    uint64_t v4 = RequestsManager.loadContext(requestContext:allowingKeyRotation:);
  }
  return MEMORY[0x270FA2498](v4, 0, 0);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v3 = *v2;
  *(unsigned char *)(v3 + 561) = a1;
  *(void *)(v3 + 512) = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v1)
  {
    swift_bridgeObjectRelease();
    uint64_t v4 = RequestsManager.loadContext(requestContext:allowingKeyRotation:);
  }
  else
  {
    uint64_t v4 = RequestsManager.loadContext(requestContext:allowingKeyRotation:);
  }
  return MEMORY[0x270FA2498](v4, 0, 0);
}

void RequestsManager.loadContext(requestContext:allowingKeyRotation:)()
{
  uint64_t v41 = v0;
  if (*(unsigned char *)(v0 + 553) == 1)
  {
    uint64_t v1 = *(void *)(v0 + 448);
    id v2 = *(os_unfair_lock_s **)(*(void *)(v0 + 176) + 48);
    uint64_t v3 = v2 + 4;
    uint64_t v4 = v2 + 6;
    os_unfair_lock_lock(v2 + 6);
    closure #1 in OSAllocatedUnfairLock<A>.current.getter(v3, v40);
    os_unfair_lock_unlock(v4);
    if (v1) {
      return;
    }
    uint64_t v13 = *(void *)(v40[0] + 48);
    swift_bridgeObjectRetain();
    swift_release();
    if (*(void *)(v13 + 16))
    {
      uint64_t v15 = *(void *)(v0 + 344);
      uint64_t v14 = *(void *)(v0 + 352);
      swift_bridgeObjectRetain();
      uint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(v15, v14);
      if (v17)
      {
        uint64_t v18 = *(void *)(v0 + 176);
        uint64_t v19 = (uint64_t *)(*(void *)(v13 + 56) + 16 * v16);
        uint64_t v20 = *v19;
        *(void *)(v0 + 456) = *v19;
        uint64_t v21 = v19[1];
        *(void *)(v0 + 464) = v21;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v22 = *(void *)(v18 + 32);
        uint64_t ObjectType = swift_getObjectType();
        long long v39 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v22 + 8)
                                                                               + **(int **)(v22 + 8));
        uint64_t v24 = (void *)swift_task_alloc();
        *(void *)(v0 + 472) = v24;
        *uint64_t v24 = v0;
        v24[1] = RequestsManager.loadContext(requestContext:allowingKeyRotation:);
        uint64_t v25 = *(void *)(v0 + 272);
        v39(v25, v20, v21, ObjectType, v22);
        return;
      }
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    if (one-time initialization token for framework != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    __swift_project_value_buffer(v26, (uint64_t)static Logger.framework);
    swift_bridgeObjectRetain();
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.error.getter();
    BOOL v29 = os_log_type_enabled(v27, v28);
    unint64_t v30 = *(void *)(v0 + 352);
    if (v29)
    {
      uint64_t v31 = *(void *)(v0 + 344);
      long long v32 = (uint8_t *)swift_slowAlloc();
      uint64_t v33 = swift_slowAlloc();
      v40[0] = v33;
      *(_DWORD *)long long v32 = 136446210;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 112) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v30, v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_249C3F000, v27, v28, "No group associated with use-case '%{public}s'", v32, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C5B4790](v33, -1, -1);
      MEMORY[0x24C5B4790](v32, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
  else
  {
    if (one-time initialization token for framework != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.framework);
    swift_bridgeObjectRetain();
    id v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    BOOL v8 = os_log_type_enabled(v6, v7);
    unint64_t v9 = *(void *)(v0 + 352);
    if (v8)
    {
      uint64_t v10 = *(void *)(v0 + 344);
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      v40[0] = v12;
      *(_DWORD *)uint64_t v11 = 136446210;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 104) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v9, v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_249C3F000, v6, v7, "Dynamic configuration is invalid for use-case '%{public}s'", v11, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C5B4790](v12, -1, -1);
      MEMORY[0x24C5B4790](v11, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
  uint64_t v35 = *(void *)(v0 + 424);
  unint64_t v34 = *(void *)(v0 + 432);
  uint64_t v36 = *(void *)(v0 + 320);
  uint64_t v37 = *(void *)(v0 + 296);
  type metadata accessor for CipherMLError();
  _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
  swift_allocError();
  swift_storeEnumTagMultiPayload();
  swift_willThrow();
  swift_release();
  outlined consume of Data._Representation(v35, v34);
  outlined destroy of AspirePirKeywordPirParameters(v37, type metadata accessor for AspireApiPIRConfig);
  outlined destroy of AspirePirKeywordPirParameters(v36, type metadata accessor for AspireApiConfig);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(*(void *)(v0 + 336), &demangling cache variable for type metadata for AspireApiConfig?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  int v38 = *(void (**)(void))(v0 + 8);
  v38();
}

uint64_t RequestsManager.requestData(index:context:)()
{
  return MEMORY[0x270FA2498](RequestsManager.requestData(index:context:), 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  type metadata accessor for CipherMLError();
  _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
  swift_allocError();
  swift_storeEnumTagMultiPayload();
  swift_willThrow();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t RequestsManager.requestData(indices:context:)()
{
  return MEMORY[0x270FA2498](RequestsManager.requestData(index:context:), 0, 0);
}

uint64_t RequestsManager.constructPIRRequest(index:context:)()
{
  return MEMORY[0x270FA2498](RequestsManager.constructPIRRequest(index:context:), 0, 0);
}

uint64_t RequestsManager.constructPIRBatchRequest(indices:context:)()
{
  return MEMORY[0x270FA2498](RequestsManager.constructPIRRequest(index:context:), 0, 0);
}

uint64_t RequestsManager.decryptPIRResponse(encryptedResponse:index:context:)()
{
  return MEMORY[0x270FA2498](RequestsManager.constructPIRRequest(index:context:), 0, 0);
}

uint64_t RequestsManager.decryptPIRBatchResponse(encryptedResponse:indices:context:)()
{
  return MEMORY[0x270FA2498](RequestsManager.constructPIRRequest(index:context:), 0, 0);
}

uint64_t RequestsManager.requestData(keywords:context:shardIds:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[11] = a2;
  v3[12] = a3;
  v3[10] = a1;
  v3[13] = type metadata accessor for RequestsManager.PIRContext();
  uint64_t v5 = swift_task_alloc();
  v3[14] = v5;
  id v6 = (void *)swift_task_alloc();
  v3[15] = v6;
  *id v6 = v3;
  v6[1] = RequestsManager.requestData(keywords:context:shardIds:);
  return RequestsManager.loadContext(requestContext:allowingKeyRotation:)(v5, a2, 1);
}

uint64_t RequestsManager.requestData(keywords:context:shardIds:)()
{
  *(void *)(*(void *)v1 + 128) = v0;
  swift_task_dealloc();
  if (v0) {
    id v2 = RequestsManager.requestData(keywords:context:shardIds:);
  }
  else {
    id v2 = RequestsManager.requestData(keywords:context:shardIds:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t);
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v27;

  uint64_t v1 = v0[10];
  id v2 = v0[16];
  uint64_t v3 = v0[12];
  uint64_t v4 = (uint64_t *)(v0[14] + *(int *)(v0[13] + 36));
  uint64_t v5 = *v4;
  id v6 = v4[1];
  swift_unknownObjectRetain();
  os_log_type_t v7 = specialized static RequestsManager.cachedAndMissingKeywordsInBatch(keywords:shardIds:cache:)(v1, v3, v5, v6);
  v0[17] = v7;
  v0[18] = v8;
  v0[19] = v9;
  if (v2)
  {
    outlined destroy of AspirePirKeywordPirParameters(v0[14], (uint64_t (*)(void))type metadata accessor for RequestsManager.PIRContext);
    swift_unknownObjectRelease();
    swift_task_dealloc();
    uint64_t v10 = (uint64_t (*)(void))v0[1];
    return v10();
  }
  else
  {
    uint64_t v12 = v7;
    uint64_t v13 = v8;
    uint64_t v14 = v9;
    swift_unknownObjectRelease();
    if (one-time initialization token for framework != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Logger.framework);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v16 = Logger.logObject.getter();
    char v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = swift_slowAlloc();
      *(_DWORD *)uint64_t v18 = 134349312;
      v0[8] = *(void *)(v12 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v18 + 12) = 2050;
      v0[9] = *(void *)(v13 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_249C3F000, v16, v17, "Cached: %{public}ld / Missing: %{public}ld", (uint8_t *)v18, 0x16u);
      MEMORY[0x24C5B4790](v18, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }

    if (*(void *)(v13 + 16))
    {
      specialized RequestContext.networkManager()(&demangling cache variable for type metadata for RequestContext<StaticPIRParameters>, (uint64_t)(v0 + 2));
      uint64_t v26 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized RequestsManager.generateData(keywords:networkManager:context:cachedAndMissing:)
                                                                                         + async function pointer to specialized RequestsManager.generateData(keywords:networkManager:context:cachedAndMissing:));
      uint64_t v23 = (void *)swift_task_alloc();
      v0[20] = v23;
      uint64_t *v23 = v0;
      v23[1] = RequestsManager.requestData(keywords:context:shardIds:);
      uint64_t v24 = v0[14];
      uint64_t v25 = v0[10];
      return v26(v25, (uint64_t)(v0 + 2), v24, v12, v13, v14);
    }
    else
    {
      uint64_t v19 = v0[14];
      uint64_t v20 = v0[10];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v21 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation4DataVG_AHSgs5NeverOTg5161_s8CipherML15RequestsManagerC11requestData8keywords7context8shardIdsSay10Foundation0F0VSgGSayAJG_AA14RequestContextVyAA19StaticPIRParametersVGSaySSGtYaKFAkJXEfU_0H2ML0jK0C24CachedAndMissingKeywordsVTf1cn_nTf4ngX_nTm(v20, v12);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      outlined destroy of AspirePirKeywordPirParameters(v19, (uint64_t (*)(void))type metadata accessor for RequestsManager.PIRContext);
      swift_task_dealloc();
      uint64_t v22 = (uint64_t (*)(uint64_t))v0[1];
      return v22(v21);
    }
  }
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v5;

  uint64_t v1 = v0[14];
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 2));
  outlined destroy of AspirePirKeywordPirParameters(v1, (uint64_t (*)(void))type metadata accessor for RequestsManager.PIRContext);
  id v2 = v0[22];
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(uint64_t))v0[1];
  return v3(v2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void *)(v0 + 112);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  outlined destroy of AspirePirKeywordPirParameters(v1, (uint64_t (*)(void))type metadata accessor for RequestsManager.PIRContext);
  swift_task_dealloc();
  id v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t RequestsManager.requestData(keywords:context:shardIds:)(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 168) = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v1)
  {
    uint64_t v5 = RequestsManager.requestData(keywords:context:shardIds:);
  }
  else
  {
    *(void *)(v4 + 176) = a1;
    uint64_t v5 = RequestsManager.requestData(keywords:context:shardIds:);
  }
  return MEMORY[0x270FA2498](v5, 0, 0);
}

uint64_t specialized RequestContext.networkManager()@<X0>(uint64_t a1@<X8>)
{
  return specialized RequestContext.networkManager()(&demangling cache variable for type metadata for RequestContext<StaticPECParameters>, a1);
}

uint64_t specialized RequestContext.networkManager()@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for NetworkConfig(0);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for NetworkManagerConfig(0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(a1);
  outlined init with copy of UserIdentifier((uint64_t)v2 + *(int *)(v11 + 32), (uint64_t)v7, type metadata accessor for NetworkConfig);
  id v12 = objc_msgSend(*v2, sel_sourceApplicationBundleIdentifier);
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v16 = v15;
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t v16 = 0;
  }
  outlined init with take of AspirePirSymmetricPirClientConfig((uint64_t)v7, (uint64_t)v10, type metadata accessor for NetworkConfig);
  char v17 = (uint64_t *)&v10[*(int *)(v8 + 20)];
  *char v17 = v14;
  v17[1] = v16;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  (*(void (**)(void *__return_ptr, char *))(*(void *)static NetworkManagerHelper.shared + 96))(v21, v10);
  outlined destroy of AspirePirKeywordPirParameters((uint64_t)v10, type metadata accessor for NetworkManagerConfig);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21, (uint64_t)&v19, &demangling cache variable for type metadata for NetworkManager?);
  if (v20)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21, &demangling cache variable for type metadata for NetworkManager?);
    return outlined init with take of _HasContiguousBytes(&v19, a2);
  }
  else
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)&v19, &demangling cache variable for type metadata for NetworkManager?);
    type metadata accessor for CipherMLError();
    _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21, &demangling cache variable for type metadata for NetworkManager?);
  }
}

uint64_t RequestsManager.generateData(keywords:networkManager:context:cachedAndMissing:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized RequestsManager.generateData(keywords:networkManager:context:cachedAndMissing:)
                                                                                     + async function pointer to specialized RequestsManager.generateData(keywords:networkManager:context:cachedAndMissing:));
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v13;
  *uint64_t v13 = v6;
  v13[1] = RequestsManager.generateData(keywords:networkManager:context:cachedAndMissing:);
  return v15(a1, a2, a3, a4, a5, a6);
}

uint64_t RequestsManager.generateData(keywords:networkManager:context:cachedAndMissing:)(uint64_t a1)
{
  uint64_t v7 = *v2;
  uint64_t v4 = swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v7 + 8);
  if (!v1) {
    uint64_t v4 = a1;
  }
  return v5(v4);
}

uint64_t RequestsManager.generateSymmetricPirKeywords(_:networkManager:context:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized RequestsManager.generateSymmetricPirKeywords(_:networkManager:context:)
                                                         + async function pointer to specialized RequestsManager.generateSymmetricPirKeywords(_:networkManager:context:));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = RequestsManager.generateSymmetricPirKeywords(_:networkManager:context:);
  return v9(a1, a2, a3);
}

uint64_t RequestsManager.requestDataWithAsyncResponse(keywords:context:)(uint64_t a1, uint64_t a2)
{
  v3[8] = a2;
  v3[9] = v2;
  v3[7] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v3[10] = swift_task_alloc();
  uint64_t v5 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestContext<StaticPIRParameters>)
                 - 8);
  v3[11] = v5;
  v3[12] = *(void *)(v5 + 64);
  v3[13] = swift_task_alloc();
  v3[14] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for UUID();
  v3[15] = v6;
  v3[16] = *(void *)(v6 - 8);
  v3[17] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for RequestsManager.PIRContext();
  v3[18] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v3[19] = v8;
  v3[20] = *(void *)(v8 + 64);
  v3[21] = swift_task_alloc();
  uint64_t v9 = swift_task_alloc();
  v3[22] = v9;
  uint64_t v10 = (void *)swift_task_alloc();
  v3[23] = v10;
  *uint64_t v10 = v3;
  v10[1] = RequestsManager.requestDataWithAsyncResponse(keywords:context:);
  return RequestsManager.loadContext(requestContext:allowingKeyRotation:)(v9, a2, 1);
}

uint64_t RequestsManager.requestDataWithAsyncResponse(keywords:context:)()
{
  *(void *)(*(void *)v1 + 192) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = RequestsManager.requestDataWithAsyncResponse(keywords:context:);
  }
  else {
    uint64_t v2 = RequestsManager.requestDataWithAsyncResponse(keywords:context:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  BOOL v11;
  id *v12;
  uint64_t v13;
  id v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(void);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  void *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t (*v61)(uint64_t, unint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74[2];
  void *v75;
  uint64_t v76;

  uint64_t v75 = v0;
  uint64_t v1 = v0[16];
  uint64_t v2 = v0[17];
  uint64_t v3 = v0[15];
  UUID.init()();
  uint64_t v73 = UUID.uuidString.getter();
  uint64_t v5 = v4;
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v3);
  if (one-time initialization token for framework != -1) {
    swift_once();
  }
  uint64_t v6 = v0[14];
  uint64_t v7 = v0[8];
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.framework);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v7, v6, &demangling cache variable for type metadata for RequestContext<StaticPIRParameters>);
  swift_bridgeObjectRetain_n();
  uint64_t v9 = Logger.logObject.getter();
  uint64_t v10 = static os_log_type_t.default.getter();
  uint64_t v11 = os_log_type_enabled(v9, v10);
  uint64_t v12 = (id *)v0[14];
  if (v11)
  {
    uint64_t v13 = swift_slowAlloc();
    uint64_t v69 = swift_slowAlloc();
    v74[0] = v69;
    *(_DWORD *)uint64_t v13 = 136446466;
    uint64_t v14 = objc_msgSend(*v12, sel_useCase);
    uint64_t v15 = v5;
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v18 = v17;

    long long v19 = v16;
    uint64_t v5 = v15;
    v0[5] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v18, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v12, &demangling cache variable for type metadata for RequestContext<StaticPIRParameters>);
    *(_WORD *)(v13 + 12) = 2082;
    swift_bridgeObjectRetain();
    v0[6] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v73, v15, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_249C3F000, v9, v10, "Async response is requested for '%{public}s', uuid: %{public}s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x24C5B4790](v69, -1, -1);
    MEMORY[0x24C5B4790](v13, -1, -1);
  }
  else
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v0[14], &demangling cache variable for type metadata for RequestContext<StaticPIRParameters>);
    swift_bridgeObjectRelease_n();
  }

  uint64_t v20 = v0[24];
  uint64_t v21 = v0[7];
  uint64_t v22 = (uint64_t *)(v0[22] + *(int *)(v0[18] + 36));
  uint64_t v24 = *v22;
  uint64_t v23 = v22[1];
  swift_unknownObjectRetain();
  uint64_t v25 = specialized static RequestsManager.cachedAndMissingKeywordsInBatch(keywords:shardIds:cache:)(v21, MEMORY[0x263F8EE78], v24, v23);
  if (v20)
  {
    outlined destroy of AspirePirKeywordPirParameters(v0[22], (uint64_t (*)(void))type metadata accessor for RequestsManager.PIRContext);
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    os_log_type_t v28 = (uint64_t (*)(void))v0[1];
    return v28();
  }
  else
  {
    unint64_t v30 = v25;
    uint64_t v31 = v26;
    long long v32 = v27;
    swift_unknownObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v33 = Logger.logObject.getter();
    unint64_t v34 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v33, (os_log_type_t)v34))
    {
      uint64_t v35 = swift_slowAlloc();
      *(_DWORD *)uint64_t v35 = 134218240;
      v0[3] = *(void *)(v30 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v35 + 12) = 2048;
      v0[4] = *(void *)(v31 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_249C3F000, v33, (os_log_type_t)v34, "Cached: %ld / Missing: %ld", (uint8_t *)v35, 0x16u);
      MEMORY[0x24C5B4790](v35, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }

    if (*(void *)(v31 + 16))
    {
      uint64_t v36 = v0[21];
      uint64_t v66 = v36;
      uint64_t v67 = v0[19];
      uint64_t v37 = v0[13];
      uint64_t v65 = v37;
      uint64_t v62 = v0[22];
      uint64_t v63 = v0[12];
      int v38 = v0[10];
      long long v39 = v0[11];
      long long v40 = v0[8];
      uint64_t v72 = v0[9];
      uint64_t v70 = v0[20];
      uint64_t v71 = v0[7];
      uint64_t v41 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56))(v38, 1, 1, v41);
      outlined init with copy of AMDPbHEConfig.OneOf_Config?(v40, v37, &demangling cache variable for type metadata for RequestContext<StaticPIRParameters>);
      outlined init with copy of UserIdentifier(v62, v36, (uint64_t (*)(void))type metadata accessor for RequestsManager.PIRContext);
      uint64_t v42 = (*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80);
      uint64_t v43 = (v63 + v42 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v44 = (v43 + 23) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v45 = (v44 + 15) & 0xFFFFFFFFFFFFFFF8;
      int v46 = *(unsigned __int8 *)(v67 + 80);
      unint64_t v68 = v32;
      uint64_t v64 = v30;
      uint64_t v47 = v5;
      uint64_t v48 = (v46 + v45 + 8) & ~v46;
      uint64_t v49 = v31;
      int v50 = (v70 + v48 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v51 = (void *)swift_allocObject();
      v51[2] = 0;
      v51[3] = 0;
      outlined init with take of SymmetricPirClientConfig?(v65, (uint64_t)v51 + v42, &demangling cache variable for type metadata for RequestContext<StaticPIRParameters>);
      uint64_t v52 = (void *)((char *)v51 + v43);
      *uint64_t v52 = v73;
      v52[1] = v47;
      *(void *)((char *)v51 + v44) = v72;
      *(void *)((char *)v51 + v45) = v71;
      uint64_t v53 = (uint64_t)v51 + v48;
      uint64_t v5 = v47;
      outlined init with take of AspirePirSymmetricPirClientConfig(v66, v53, (uint64_t (*)(void))type metadata accessor for RequestsManager.PIRContext);
      uint64_t v54 = (void *)((char *)v51 + v50);
      *uint64_t v54 = v64;
      v54[1] = v49;
      v54[2] = v68;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      uint64_t v55 = &async function pointer to partial apply for closure #3 in RequestsManager.requestDataWithAsyncResponse(keywords:context:);
    }
    else
    {
      uint64_t v56 = v0[10];
      uint64_t v57 = v0[7];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v58 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation4DataVG_AHSgs5NeverOTg5161_s8CipherML15RequestsManagerC11requestData8keywords7context8shardIdsSay10Foundation0F0VSgGSayAJG_AA14RequestContextVyAA19StaticPIRParametersVGSaySSGtYaKFAkJXEfU_0H2ML0jK0C24CachedAndMissingKeywordsVTf1cn_nTf4ngX_nTm(v57, v30);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      uint64_t v59 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v59 - 8) + 56))(v56, 1, 1, v59);
      uint64_t v51 = (void *)swift_allocObject();
      v51[2] = 0;
      v51[3] = 0;
      v51[4] = v58;
      void v51[5] = v57;
      v51[6] = v73;
      v51[7] = v5;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v55 = &async function pointer to partial apply for closure #2 in RequestsManager.requestDataWithAsyncResponse(keywords:context:);
    }
    unint64_t v60 = v0[22];
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v0[10], (uint64_t)v55, (uint64_t)v51);
    swift_release();
    outlined destroy of AspirePirKeywordPirParameters(v60, (uint64_t (*)(void))type metadata accessor for RequestsManager.PIRContext);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v61 = (uint64_t (*)(uint64_t, unint64_t))v0[1];
    return v61(v73, v5);
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #2 in RequestsManager.requestDataWithAsyncResponse(keywords:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[5] = a6;
  v7[6] = a7;
  v7[3] = a4;
  v7[4] = a5;
  return MEMORY[0x270FA2498](closure #2 in RequestsManager.requestDataWithAsyncResponse(keywords:context:), 0, 0);
}

uint64_t closure #2 in RequestsManager.requestDataWithAsyncResponse(keywords:context:)()
{
  BOOL v29 = v0;
  v28[1] = *MEMORY[0x263EF8340];
  uint64_t v1 = v0[3];
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    v28[0] = MEMORY[0x263F8EE78];
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v3 = (unint64_t *)(v1 + 40);
    do
    {
      unint64_t v4 = *v3;
      if (*v3 >> 60 == 15)
      {
        objc_msgSend(objc_allocWithZone(MEMORY[0x263EFF9D0]), sel_init);
      }
      else
      {
        uint64_t v5 = *(v3 - 1);
        outlined copy of Data._Representation(v5, *v3);
        Data._bridgeToObjectiveC()();
        outlined consume of Data?(v5, v4);
      }
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v3 += 2;
      --v2;
    }
    while (v2);
  }
  uint64_t v7 = v0[5];
  uint64_t v6 = v0[6];
  uint64_t v8 = self;
  type metadata accessor for NSObject();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  Class v10 = Array._bridgeToObjectiveC()().super.isa;
  uint64_t v11 = (void *)MEMORY[0x24C5B33F0](v7, v6);
  v0[2] = 0;
  id v12 = objc_msgSend(v8, sel_sendReplyForBatchPIR_requestError_keywords_uuid_error_, isa, 0, v10, v11, v0 + 2);

  uint64_t v13 = (void *)v0[2];
  if (v13)
  {
    id v14 = v13;

    swift_willThrow();
    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v15 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }
  if (one-time initialization token for framework != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Logger.framework);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  char v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  BOOL v19 = os_log_type_enabled(v17, v18);
  unint64_t v20 = v0[6];
  if (v19)
  {
    uint64_t v21 = v0[5];
    uint64_t v22 = swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    v28[0] = v27;
    *(_DWORD *)uint64_t v22 = 136446466;
    swift_bridgeObjectRetain();
    v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v20, v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v22 + 12) = 2082;
    v0[2] = v15;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable : Any]?);
    uint64_t v23 = String.init<A>(describing:)();
    v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_249C3F000, v17, v18, "Notified AMD for '%{public}s', response: %{public}s", (uint8_t *)v22, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x24C5B4790](v27, -1, -1);
    MEMORY[0x24C5B4790](v22, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }

  uint64_t v25 = (uint64_t (*)(void))v0[1];
  return v25();
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  outlined destroy of AMDPbHEConfig.OneOf_Config?(a1, &demangling cache variable for type metadata for TaskPriority?);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t closure #3 in RequestsManager.requestDataWithAsyncResponse(keywords:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 192) = v12;
  *(void *)(v8 + 200) = v13;
  *(_OWORD *)(v8 + 176) = v11;
  *(void *)(v8 + 160) = a6;
  *(void *)(v8 + 168) = a8;
  *(void *)(v8 + 144) = a4;
  *(void *)(v8 + 152) = a5;
  return MEMORY[0x270FA2498](closure #3 in RequestsManager.requestDataWithAsyncResponse(keywords:context:), 0, 0);
}

uint64_t closure #3 in RequestsManager.requestDataWithAsyncResponse(keywords:context:)()
{
  os_log_type_t v18 = v0;
  v17[1] = *MEMORY[0x263EF8340];
  specialized RequestContext.networkManager()(&demangling cache variable for type metadata for RequestContext<StaticPIRParameters>, (uint64_t)(v0 + 2));
  if (one-time initialization token for framework != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[26] = __swift_project_value_buffer(v1, (uint64_t)static Logger.framework);
  swift_bridgeObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  unint64_t v5 = v0[20];
  if (v4)
  {
    uint64_t v16 = v0[19];
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    v17[0] = v7;
    *(_DWORD *)uint64_t v6 = 136446210;
    swift_bridgeObjectRetain();
    v0[17] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v5, v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_249C3F000, v2, v3, "Async response request '%{public}s' has started", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5B4790](v7, -1, -1);
    MEMORY[0x24C5B4790](v6, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v8 = async function pointer to specialized RequestsManager.generateData(keywords:networkManager:context:cachedAndMissing:);
  uint64_t v9 = (void *)swift_task_alloc();
  v0[27] = v9;
  *uint64_t v9 = v0;
  v9[1] = closure #3 in RequestsManager.requestDataWithAsyncResponse(keywords:context:);
  uint64_t v10 = v0[24];
  uint64_t v11 = v0[25];
  uint64_t v12 = v0[22];
  uint64_t v13 = v0[23];
  uint64_t v14 = v0[21];
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized RequestsManager.generateData(keywords:networkManager:context:cachedAndMissing:)
                                                                                       + v8))(v14, (uint64_t)(v0 + 2), v12, v13, v10, v11);
}

{
  void *v0;
  NSObject *v1;
  os_log_type_t v2;
  unint64_t v3;
  uint64_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  Class isa;
  Class v16;
  void *v17;
  id v18;
  void *v19;
  id v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  BOOL v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t (*v31)(void);
  uint64_t v33[2];
  void *v34;
  uint64_t v35;

  unint64_t v34 = v0;
  v33[1] = *MEMORY[0x263EF8340];
  swift_bridgeObjectRetain_n();
  uint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    BOOL v4 = v0[19];
    os_log_type_t v3 = v0[20];
    unint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    v33[0] = v6;
    *(_DWORD *)unint64_t v5 = 136446210;
    swift_bridgeObjectRetain();
    v0[16] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_249C3F000, v1, v2, "Async response request '%{public}s' has finished", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5B4790](v6, -1, -1);
    MEMORY[0x24C5B4790](v5, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v7 = v0[28];
  uint64_t v8 = *(void *)(v7 + 16);
  if (v8)
  {
    v33[0] = MEMORY[0x263F8EE78];
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v9 = (unint64_t *)(v7 + 40);
    do
    {
      uint64_t v10 = *v9;
      if (*v9 >> 60 == 15)
      {
        objc_msgSend(objc_allocWithZone(MEMORY[0x263EFF9D0]), sel_init);
      }
      else
      {
        uint64_t v11 = *(v9 - 1);
        outlined copy of Data._Representation(v11, *v9);
        Data._bridgeToObjectiveC()();
        outlined consume of Data?(v11, v10);
      }
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v9 += 2;
      --v8;
    }
    while (v8);
  }
  swift_bridgeObjectRelease();
  uint64_t v12 = v0[20];
  uint64_t v13 = v0[19];
  uint64_t v14 = self;
  type metadata accessor for NSObject();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v16 = Array._bridgeToObjectiveC()().super.isa;
  char v17 = (void *)MEMORY[0x24C5B33F0](v13, v12);
  v0[12] = 0;
  os_log_type_t v18 = objc_msgSend(v14, sel_sendReplyForBatchPIR_requestError_keywords_uuid_error_, isa, 0, v16, v17, v0 + 12);

  uint64_t v19 = (void *)v0[12];
  if (v19)
  {
    unint64_t v20 = v19;

    swift_willThrow();
    uint64_t v21 = 0;
  }
  else
  {
    uint64_t v21 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  uint64_t v22 = Logger.logObject.getter();
  uint64_t v23 = static os_log_type_t.default.getter();
  unint64_t v24 = os_log_type_enabled(v22, v23);
  uint64_t v25 = v0[20];
  if (v24)
  {
    uint64_t v26 = v0[19];
    uint64_t v27 = swift_slowAlloc();
    os_log_type_t v28 = swift_slowAlloc();
    v33[0] = v28;
    *(_DWORD *)uint64_t v27 = 136446466;
    swift_bridgeObjectRetain();
    v0[13] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v25, v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v27 + 12) = 2082;
    v0[14] = v21;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable : Any]?);
    BOOL v29 = String.init<A>(describing:)();
    v0[15] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_249C3F000, v22, v23, "Notified AMD for '%{public}s', response: %{public}s", (uint8_t *)v27, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x24C5B4790](v28, -1, -1);
    MEMORY[0x24C5B4790](v27, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 2));
  uint64_t v31 = (uint64_t (*)(void))v0[1];
  return v31();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  Class isa;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  NSObject *v14;
  os_log_type_t v15;
  BOOL v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t (*v24)(void);
  void *v26;
  uint64_t v27;
  uint64_t v28[2];
  uint64_t v29;
  uint64_t v30;

  BOOL v29 = v0;
  v28[1] = *MEMORY[0x263EF8340];
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  uint64_t v1 = *(void **)(v0 + 232);
  uint64_t v2 = *(void *)(v0 + 160);
  os_log_type_t v3 = *(void *)(v0 + 152);
  BOOL v4 = self;
  unint64_t v5 = (void *)_convertErrorToNSError(_:)();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  uint64_t v7 = (void *)MEMORY[0x24C5B33F0](v3, v2);
  *(void *)(v0 + 56) = 0;
  uint64_t v8 = objc_msgSend(v4, sel_sendReplyForBatchPIR_requestError_keywords_uuid_error_, 0, v5, isa, v7, v0 + 56);

  if (*(void *)(v0 + 56))
  {
    uint64_t v9 = *(id *)(v0 + 56);

    swift_willThrow();
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v10 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }
  if (one-time initialization token for framework != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Logger.framework);
  swift_bridgeObjectRetain();
  uint64_t v12 = v1;
  swift_bridgeObjectRetain();
  uint64_t v13 = v1;
  swift_bridgeObjectRetain();
  uint64_t v14 = Logger.logObject.getter();
  uint64_t v15 = static os_log_type_t.error.getter();
  uint64_t v16 = os_log_type_enabled(v14, v15);
  char v17 = *(void *)(v0 + 160);
  if (v16)
  {
    os_log_type_t v18 = *(void *)(v0 + 152);
    uint64_t v19 = swift_slowAlloc();
    uint64_t v26 = (void *)swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    v28[0] = v27;
    *(_DWORD *)uint64_t v19 = 136446722;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v17, v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v19 + 12) = 2082;
    *(void *)(v0 + 72) = v10;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable : Any]?);
    unint64_t v20 = String.init<A>(describing:)();
    *(void *)(v0 + 80) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v19 + 22) = 2114;
    uint64_t v22 = v1;
    uint64_t v23 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 88) = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    char *v26 = v23;

    _os_log_impl(&dword_249C3F000, v14, v15, "Async response request '%{public}s' has failed, notified AMD: %{public}s, error: %{public}@", (uint8_t *)v19, 0x20u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x24C5B4790](v26, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x24C5B4790](v27, -1, -1);
    MEMORY[0x24C5B4790](v19, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  unint64_t v24 = *(uint64_t (**)(void))(v0 + 8);
  return v24();
}

uint64_t closure #3 in RequestsManager.requestDataWithAsyncResponse(keywords:context:)(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 224) = a1;
  *(void *)(v3 + 232) = v1;
  swift_task_dealloc();
  if (v1) {
    BOOL v4 = closure #3 in RequestsManager.requestDataWithAsyncResponse(keywords:context:);
  }
  else {
    BOOL v4 = closure #3 in RequestsManager.requestDataWithAsyncResponse(keywords:context:);
  }
  return MEMORY[0x270FA2498](v4, 0, 0);
}

uint64_t RequestsManager.removeCachedKeywords(keywords:context:)(uint64_t a1, uint64_t a2)
{
  v2[2] = a1;
  v2[3] = type metadata accessor for RequestsManager.PIRContext();
  uint64_t v4 = swift_task_alloc();
  v2[4] = v4;
  unint64_t v5 = (void *)swift_task_alloc();
  v2[5] = v5;
  void *v5 = v2;
  v5[1] = RequestsManager.removeCachedKeywords(keywords:context:);
  return RequestsManager.loadContext(requestContext:allowingKeyRotation:)(v4, a2, 0);
}

uint64_t RequestsManager.removeCachedKeywords(keywords:context:)()
{
  *(void *)(*(void *)v1 + 48) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = RequestsManager.removeCachedKeywords(keywords:context:);
  }
  else {
    uint64_t v2 = RequestsManager.removeCachedKeywords(keywords:context:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t ObjectType;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t (*v9)(void);
  uint64_t (*v11)(uint64_t);
  uint64_t v12;

  uint64_t v1 = v0[4];
  uint64_t v2 = (void *)(v1 + *(int *)(v0[3] + 36));
  if (*v2)
  {
    uint64_t v3 = v0[6];
    uint64_t v4 = v0[2];
    unint64_t v5 = v2[1];
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
    swift_unknownObjectRetain();
    uint64_t v8 = v7(v4, ObjectType, v5);
    swift_unknownObjectRelease();
    uint64_t v1 = v0[4];
    if (v3)
    {
      outlined destroy of AspirePirKeywordPirParameters(v0[4], (uint64_t (*)(void))type metadata accessor for RequestsManager.PIRContext);
      swift_task_dealloc();
      uint64_t v9 = (uint64_t (*)(void))v0[1];
      return v9();
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  outlined destroy of AspirePirKeywordPirParameters(v1, (uint64_t (*)(void))type metadata accessor for RequestsManager.PIRContext);
  swift_task_dealloc();
  uint64_t v11 = (uint64_t (*)(uint64_t))v0[1];
  return v11(v8);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t RequestsManager.constructPIRRequest(keyword:shardId:pirContext:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  if (!a4)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Data>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_249E85E40;
    *(void *)(inited + 32) = a1;
    *(void *)(inited + 40) = a2;
    outlined copy of Data._Representation(a1, a2);
    uint64_t v16 = RequestsManager.PIRContext.prepareDataRequests(keywords:shardIds:)(inited, MEMORY[0x263F8EE78]);
    swift_setDeallocating();
    uint64_t result = swift_arrayDestroy();
    if (v5) {
      return result;
    }
    if (*(void *)(v16 + 16))
    {
      uint64_t v17 = *(void *)(type metadata accessor for AspireApiRequest(0) - 8);
      outlined init with copy of UserIdentifier(v16 + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80)), a5, type metadata accessor for AspireApiRequest);
      return swift_bridgeObjectRelease();
    }
LABEL_11:
    __break(1u);
    return result;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Data>);
  uint64_t v10 = swift_initStackObject();
  *(_OWORD *)(v10 + 16) = xmmword_249E85E40;
  *(void *)(v10 + 32) = a1;
  *(void *)(v10 + 40) = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v11 = swift_initStackObject();
  *(_OWORD *)(v11 + 16) = xmmword_249E85E40;
  *(void *)(v11 + 32) = a3;
  *(void *)(v11 + 40) = a4;
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(a1, a2);
  uint64_t v12 = RequestsManager.PIRContext.prepareDataRequests(keywords:shardIds:)(v10, v11);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_setDeallocating();
  uint64_t result = swift_arrayDestroy();
  if (v5) {
    return result;
  }
  if (!*(void *)(v12 + 16))
  {
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v14 = *(void *)(type metadata accessor for AspireApiRequest(0) - 8);
  outlined init with copy of UserIdentifier(v12 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80)), a5, type metadata accessor for AspireApiRequest);
  return swift_bridgeObjectRelease();
}

uint64_t RequestsManager.constructPIRRequest(keyword:withEvaluationKey:shardId:config:context:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v9 + 56) = a7;
  *(void *)(v9 + 64) = v8;
  *(void *)(v9 + 40) = a5;
  *(void *)(v9 + 48) = a6;
  *(unsigned char *)(v9 + 144) = a4;
  *(void *)(v9 + 24) = a2;
  *(void *)(v9 + 32) = a3;
  *(void *)(v9 + 16) = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
  *(void *)(v9 + 72) = swift_task_alloc();
  *(void *)(v9 + 80) = type metadata accessor for AspireApiPIRRequest(0);
  *(void *)(v9 + 88) = swift_task_alloc();
  uint64_t v11 = type metadata accessor for AspireApiEvaluationKey(0);
  *(void *)(v9 + 96) = v11;
  *(void *)(v9 + 104) = *(void *)(v11 - 8);
  *(void *)(v9 + 112) = swift_task_alloc();
  type metadata accessor for RequestsManager.PIRContext();
  uint64_t v12 = swift_task_alloc();
  *(void *)(v9 + 120) = v12;
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v9 + 128) = v13;
  *uint64_t v13 = v9;
  v13[1] = RequestsManager.constructPIRRequest(keyword:withEvaluationKey:shardId:config:context:);
  return RequestsManager.loadContext(requestContext:allowingKeyRotation:)(v12, a8, 0);
}

uint64_t RequestsManager.constructPIRRequest(keyword:withEvaluationKey:shardId:config:context:)()
{
  *(void *)(*(void *)v1 + 136) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = RequestsManager.constructPIRRequest(keyword:withEvaluationKey:shardId:config:context:);
  }
  else {
    uint64_t v2 = RequestsManager.constructPIRRequest(keyword:withEvaluationKey:shardId:config:context:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(void);
  uint64_t v25;

  uint64_t v1 = *(void *)(v0 + 136);
  RequestsManager.constructPIRRequest(keyword:shardId:pirContext:)(*(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 16));
  if (!v1 && *(unsigned char *)(v0 + 144) == 1)
  {
    RequestsManager.generateEvaluationKey(config:pirContext:)(*(void **)(v0 + 56), *(void *)(v0 + 120), *(void *)(v0 + 112));
    uint64_t v2 = *(void *)(v0 + 72);
    uint64_t v3 = *(void *)(v0 + 16);
    uint64_t v4 = v3 + *(int *)(type metadata accessor for AspireApiRequest(0) + 20);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v4, v2, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
    uint64_t v5 = type metadata accessor for AspireApiRequest.OneOf_Request(0);
    uint64_t v6 = *(void *)(v5 - 8);
    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v2, 1, v5);
    uint64_t v8 = *(void *)(v0 + 72);
    if (v7 == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?(*(void *)(v0 + 72), &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
    }
    else
    {
      if (!swift_getEnumCaseMultiPayload())
      {
        outlined init with take of AspirePirSymmetricPirClientConfig(v8, *(void *)(v0 + 88), type metadata accessor for AspireApiPIRRequest);
        goto LABEL_9;
      }
      outlined destroy of AspirePirKeywordPirParameters(v8, type metadata accessor for AspireApiRequest.OneOf_Request);
    }
    uint64_t v9 = *(void *)(v0 + 96);
    uint64_t v10 = *(void *)(v0 + 104);
    uint64_t v12 = *(int **)(v0 + 80);
    uint64_t v11 = *(void *)(v0 + 88);
    *(_DWORD *)uint64_t v11 = 0;
    *(_OWORD *)(v11 + 8) = xmmword_249E85DF0;
    UnknownStorage.init()();
    uint64_t v13 = v11 + v12[7];
    uint64_t v14 = type metadata accessor for AspirePirEncryptedIndices(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
    uint64_t v15 = v11 + v12[8];
    uint64_t v16 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v15, 1, 1, v16);
    uint64_t v17 = (void *)(v11 + v12[9]);
    *uint64_t v17 = 0;
    v17[1] = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(v11 + v12[10], 1, 1, v9);
LABEL_9:
    uint64_t v19 = *(void *)(v0 + 104);
    os_log_type_t v18 = *(void *)(v0 + 112);
    uint64_t v21 = *(void *)(v0 + 88);
    unint64_t v20 = *(void *)(v0 + 96);
    uint64_t v22 = v21 + *(int *)(*(void *)(v0 + 80) + 40);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v22, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
    outlined init with take of AspirePirSymmetricPirClientConfig(v18, v22, type metadata accessor for AspireApiEvaluationKey);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v19 + 56))(v22, 0, 1, v20);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v4, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
    outlined init with take of AspirePirSymmetricPirClientConfig(v21, v4, type metadata accessor for AspireApiPIRRequest);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
  }
  outlined destroy of AspirePirKeywordPirParameters(*(void *)(v0 + 120), (uint64_t (*)(void))type metadata accessor for RequestsManager.PIRContext);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v23 = *(uint64_t (**)(void))(v0 + 8);
  return v23();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t RequestsManager.constructPIRBatchRequest(keywords:shardIds:context:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[2] = a1;
  v3[3] = a2;
  v3[4] = type metadata accessor for AspireApiRequests(0);
  void v3[5] = swift_task_alloc();
  type metadata accessor for RequestsManager.PIRContext();
  uint64_t v5 = swift_task_alloc();
  void v3[6] = v5;
  uint64_t v6 = (void *)swift_task_alloc();
  v3[7] = v6;
  *uint64_t v6 = v3;
  v6[1] = RequestsManager.constructPIRBatchRequest(keywords:shardIds:context:);
  return RequestsManager.loadContext(requestContext:allowingKeyRotation:)(v5, a3, 0);
}

uint64_t RequestsManager.constructPIRBatchRequest(keywords:shardIds:context:)()
{
  *(void *)(*(void *)v1 + 64) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = RequestsManager.constructPIRBatchRequest(keywords:shardIds:context:);
  }
  else {
    uint64_t v2 = RequestsManager.constructPIRBatchRequest(keywords:shardIds:context:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  uint64_t v11;

  uint64_t v1 = v0[8];
  uint64_t v2 = RequestsManager.PIRContext.prepareDataRequests(keywords:shardIds:)(v0[2], v0[3]);
  if (v1)
  {
    outlined destroy of AspirePirKeywordPirParameters(v0[6], (uint64_t (*)(void))type metadata accessor for RequestsManager.PIRContext);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = (uint64_t (*)(void))v0[1];
    return v6();
  }
  else
  {
    *(void *)(swift_task_alloc() + 16) = v2;
    _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_1(&lazy protocol witness table cache variable for type AspireApiRequests and conformance AspireApiRequests, (void (*)(uint64_t))type metadata accessor for AspireApiRequests);
    static Message.with(_:)();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    uint64_t v3 = Message.serializedData(partial:)();
    uint64_t v5 = v0[6];
    uint64_t v8 = v3;
    uint64_t v9 = v4;
    outlined destroy of AspirePirKeywordPirParameters(v0[5], type metadata accessor for AspireApiRequests);
    outlined destroy of AspirePirKeywordPirParameters(v5, (uint64_t (*)(void))type metadata accessor for RequestsManager.PIRContext);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
    return v10(v8, v9);
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

char *RequestsManager.decryptPIRServiceResponse(serviceResponse:keyword:context:shardId:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return specialized RequestsManager.decryptPIRServiceResponse(serviceResponse:keyword:context:shardId:)(a1, a2, a3, a4, a5, a6);
}

uint64_t RequestsManager.decryptPIRResponse(encryptedResponse:keyword:context:shardId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v8[10] = a7;
  v8[11] = v7;
  v8[8] = a5;
  v8[9] = a6;
  v8[6] = a3;
  v8[7] = a4;
  v8[4] = a1;
  v8[5] = a2;
  type metadata accessor for RequestsManager.PIRContext();
  v8[12] = swift_task_alloc();
  type metadata accessor for BinaryDecodingOptions();
  v8[13] = swift_task_alloc();
  v8[14] = type metadata accessor for AspireApiResponse(0);
  v8[15] = swift_task_alloc();
  return MEMORY[0x270FA2498](RequestsManager.decryptPIRResponse(encryptedResponse:keyword:context:shardId:), 0, 0);
}

uint64_t RequestsManager.decryptPIRResponse(encryptedResponse:keyword:context:shardId:)()
{
  uint64_t v1 = v0[4];
  v0[2] = v1;
  unint64_t v2 = v0[5];
  v0[3] = v2;
  outlined copy of Data._Representation(v1, v2);
  BinaryDecodingOptions.init()();
  _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_1(&lazy protocol witness table cache variable for type AspireApiResponse and conformance AspireApiResponse, (void (*)(uint64_t))type metadata accessor for AspireApiResponse);
  Message.init<A>(serializedBytes:extensions:partial:options:)();
  uint64_t v3 = (void *)swift_task_alloc();
  v0[16] = v3;
  *uint64_t v3 = v0;
  v3[1] = RequestsManager.decryptPIRResponse(encryptedResponse:keyword:context:shardId:);
  uint64_t v4 = v0[12];
  uint64_t v5 = v0[8];
  return RequestsManager.loadContext(requestContext:allowingKeyRotation:)(v4, v5, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 136) = v0;
  swift_task_dealloc();
  if (v0) {
    unint64_t v2 = RequestsManager.decryptPIRResponse(encryptedResponse:keyword:context:shardId:);
  }
  else {
    unint64_t v2 = RequestsManager.decryptPIRResponse(encryptedResponse:keyword:context:shardId:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t);
  uint64_t v9;

  uint64_t v1 = v0[17];
  uint64_t v3 = specialized RequestsManager.decryptPIRServiceResponse(serviceResponse:keyword:context:shardId:)(v0[15], v0[6], v0[7], v0[12], v0[9], v0[10]);
  uint64_t v4 = v0[15];
  if (v1)
  {
    outlined destroy of AspirePirKeywordPirParameters(v0[12], (uint64_t (*)(void))type metadata accessor for RequestsManager.PIRContext);
    outlined destroy of AspirePirKeywordPirParameters(v4, type metadata accessor for AspireApiResponse);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = (uint64_t (*)(void))v0[1];
    return v5();
  }
  else
  {
    uint64_t v7 = v2;
    outlined destroy of AspirePirKeywordPirParameters(v0[12], (uint64_t (*)(void))type metadata accessor for RequestsManager.PIRContext);
    outlined destroy of AspirePirKeywordPirParameters(v4, type metadata accessor for AspireApiResponse);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = (uint64_t (*)(char *, uint64_t))v0[1];
    return v8(v3, v7);
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  outlined destroy of AspirePirKeywordPirParameters(*(void *)(v0 + 120), type metadata accessor for AspireApiResponse);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t RequestsManager.decryptPIRBatchResponse(encryptedResponses:keywords:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[8] = a3;
  v5[9] = v4;
  v5[6] = a1;
  v5[7] = a2;
  type metadata accessor for BinaryDecodingOptions();
  v5[10] = swift_task_alloc();
  v5[11] = type metadata accessor for AspireApiResponses(0);
  v5[12] = swift_task_alloc();
  type metadata accessor for RequestsManager.PIRContext();
  uint64_t v7 = swift_task_alloc();
  v5[13] = v7;
  uint64_t v8 = (void *)swift_task_alloc();
  v5[14] = v8;
  *uint64_t v8 = v5;
  v8[1] = RequestsManager.decryptPIRBatchResponse(encryptedResponses:keywords:context:);
  return RequestsManager.loadContext(requestContext:allowingKeyRotation:)(v7, a4, 0);
}

uint64_t RequestsManager.decryptPIRBatchResponse(encryptedResponses:keywords:context:)()
{
  *(void *)(*(void *)v1 + 120) = v0;
  swift_task_dealloc();
  if (v0) {
    unint64_t v2 = RequestsManager.decryptPIRBatchResponse(encryptedResponses:keywords:context:);
  }
  else {
    unint64_t v2 = RequestsManager.decryptPIRBatchResponse(encryptedResponses:keywords:context:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(void);
  uint64_t v25;
  uint64_t (*v26)(uint64_t);
  uint64_t v27;

  uint64_t v1 = v0[6];
  v0[2] = v1;
  unint64_t v2 = v0[15];
  uint64_t v3 = v0[7];
  v0[3] = v3;
  outlined copy of Data._Representation(v1, v3);
  BinaryDecodingOptions.init()();
  _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_1(&lazy protocol witness table cache variable for type AspireApiResponses and conformance AspireApiResponses, (void (*)(uint64_t))type metadata accessor for AspireApiResponses);
  Message.init<A>(serializedBytes:extensions:partial:options:)();
  if (v2)
  {
    uint64_t v4 = v0[13];
LABEL_11:
    outlined destroy of AspirePirKeywordPirParameters(v4, (uint64_t (*)(void))type metadata accessor for RequestsManager.PIRContext);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v23 = (uint64_t (*)(void))v0[1];
    return v23();
  }
  uint64_t v5 = (uint64_t *)v0[12];
  uint64_t v6 = v0[8];
  uint64_t v7 = *v5;
  uint64_t v8 = *(void *)(*v5 + 16);
  uint64_t v9 = *(void *)(v6 + 16);
  if (v8 != v9)
  {
    uint64_t v16 = one-time initialization token for daemon;
    swift_bridgeObjectRetain();
    if (v16 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Logger.daemon);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    os_log_type_t v18 = Logger.logObject.getter();
    uint64_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      unint64_t v20 = swift_slowAlloc();
      *(_DWORD *)unint64_t v20 = 134349312;
      swift_bridgeObjectRelease();
      v0[4] = v8;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v20 + 12) = 2050;
      swift_bridgeObjectRelease();
      v0[5] = v9;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_249C3F000, v18, v19, "    encryptedResponses.count '%{public}ld'     does not equal keywords.count '%{public}ld'", (uint8_t *)v20, 0x16u);
      MEMORY[0x24C5B4790](v20, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }

    uint64_t v22 = v0[12];
    uint64_t v21 = v0[13];
    type metadata accessor for CipherMLError();
    _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    outlined destroy of AspirePirKeywordPirParameters(v22, type metadata accessor for AspireApiResponses);
    uint64_t v4 = v21;
    goto LABEL_11;
  }
  uint64_t v10 = v0[13];
  uint64_t v11 = v0[9];
  uint64_t v12 = swift_task_alloc();
  *(void *)(v12 + 16) = v11;
  *(void *)(v12 + 24) = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v13 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySay8CipherML17AspireApiResponseVGSay10Foundation4DataVGG_ANSgsAE_pTg503_s8f4ML17hij14V10Foundation4l7VAFSgs5C33_pIgngozo_AC_AFtAGsAH_pIegnrzr_TRAjnQsAE_pIgngozo_Tf1cn_n(v7, v6, (uint64_t (*)(uint64_t, uint64_t, unint64_t))partial apply for closure #1 in RequestsManager.decryptPIRBatchResponse(encryptedResponses:keywords:context:), v12);
  uint64_t v15 = v0[12];
  uint64_t v14 = v0[13];
  uint64_t v25 = v13;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of AspirePirKeywordPirParameters(v15, type metadata accessor for AspireApiResponses);
  outlined destroy of AspirePirKeywordPirParameters(v14, (uint64_t (*)(void))type metadata accessor for RequestsManager.PIRContext);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v26 = (uint64_t (*)(uint64_t))v0[1];
  return v26(v25);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t RequestsManager.requestData(latitude:longitude:context:)()
{
  return MEMORY[0x270FA2498](RequestsManager.constructPIRRequest(index:context:), 0, 0);
}

uint64_t RequestsManager.constructPIRRequest(latitude:longitude:context:)()
{
  return MEMORY[0x270FA2498](RequestsManager.constructPIRRequest(index:context:), 0, 0);
}

uint64_t RequestsManager.decryptPIRResponse(encryptedResponse:latitude:longitude:context:)()
{
  return MEMORY[0x270FA2498](RequestsManager.constructPIRRequest(index:context:), 0, 0);
}

void closure #1 in RequestsManager.loadCache(requestContext:)(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  if ((*(unsigned char *)(a1 + 24) & 1) == 0)
  {
    uint64_t v5 = *(void *)(a1 + 16);
    if (*(unsigned char *)(a1 + 40) == 1)
    {
      if (one-time initialization token for defaultCacheEntryMinutesToLive != -1) {
        swift_once();
      }
      uint64_t v6 = &static StaticPIRParameters.defaultCacheEntryMinutesToLive;
    }
    else
    {
      uint64_t v6 = (uint64_t *)(a1 + 32);
    }
    uint64_t v7 = *v6;
    id v8 = objc_msgSend(*(id *)a1, sel_useCase);
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v11 = v10;

    type metadata accessor for SqliteCache();
    swift_allocObject();
    uint64_t v12 = SqliteCache.init(useCase:cacheElementCount:cacheEntryMinutesToLive:getCurrentDate:)(v9, v11, v5, v7, (void (*)(uint64_t))closure #1 in default argument 4 of RequestsManager.init(configCache:keyStorage:activeUseCaseTracker:allowList:currentTime:), 0);
    if (!v2)
    {
      *a2 = v12;
      a2[1] = (uint64_t)&protocol witness table for SqliteCache;
      return;
    }
    if (one-time initialization token for daemon != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.daemon);
    id v14 = v2;
    id v15 = v2;
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      os_log_type_t v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v19 = (void *)swift_slowAlloc();
      *(_DWORD *)os_log_type_t v18 = 138412290;
      id v20 = v2;
      uint64_t v21 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v19 = v21;

      _os_log_impl(&dword_249C3F000, v16, v17, "Failed to initialize cache: %@", v18, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x24C5B4790](v19, -1, -1);
      MEMORY[0x24C5B4790](v18, -1, -1);
    }
    else
    {
    }
  }
  *a2 = 0;
  a2[1] = 0;
}

uint64_t partial apply for closure #2 in RequestsManager.PIRContext.prepareDataRequests(keywords:shardIds:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return closure #2 in RequestsManager.PIRContext.prepareDataRequests(keywords:shardIds:)(a1, a2, a3, a4, *(void *)(v4 + 16));
}

unint64_t partial apply for closure #1 in RequestsManager.PIRContext.prepareDataRequests(keywords:shardIds:)(uint64_t a1, void *a2)
{
  return closure #1 in RequestsManager.PIRContext.prepareDataRequests(keywords:shardIds:)(a1, *(void *)(v2 + 16), a2);
}

uint64_t partial apply for closure #1 in RequestsManager.PIRContext.decryptKeywordPIRResponses(_:for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return closure #1 in RequestsManager.PIRContext.decryptKeywordPIRResponses(_:for:)(a1, a2, a3);
}

uint64_t outlined release of SymmetricPirClientConfig?(uint64_t a1)
{
  return a1;
}

uint64_t outlined retain of SymmetricPirClientConfig(uint64_t a1)
{
  return a1;
}

uint64_t partial apply for closure #1 in SymmetricPIRClient.decryptResponses(symmetricPirKeywords:encryptedResponses:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  return closure #1 in SymmetricPIRClient.decryptResponses(symmetricPirKeywords:encryptedResponses:)(a1, a2, a3, a4, a5, a6, *(void *)(v6 + 16), *(void *)(v6 + 24));
}

uint64_t partial apply for closure #1 in RequestsManager.PIRContext.requestOPRFData(for:networkManager:)(uint64_t a1)
{
  return closure #1 in RequestsManager.PIRContext.requestOPRFData(for:networkManager:)(a1, *(void *)(v1 + 16));
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  char v42 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v41 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  long long v39 = v2;
  int64_t v40 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v40) {
      break;
    }
    unint64_t v24 = (void *)(v5 + 64);
    unint64_t v25 = *(void *)(v41 + 8 * v23);
    ++v13;
    if (!v25)
    {
      int64_t v13 = v23 + 1;
      if (v23 + 1 >= v40) {
        goto LABEL_33;
      }
      unint64_t v25 = *(void *)(v41 + 8 * v13);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v39;
          if ((v42 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v25 = *(void *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v13 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v40) {
              goto LABEL_33;
            }
            unint64_t v25 = *(void *)(v41 + 8 * v13);
            ++v26;
            if (v25) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v26;
      }
    }
LABEL_30:
    unint64_t v10 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    uint64_t v31 = 16 * v22;
    long long v32 = (uint64_t *)(*(void *)(v5 + 48) + v31);
    uint64_t v34 = *v32;
    uint64_t v33 = v32[1];
    uint64_t v35 = (uint64_t *)(*(void *)(v5 + 56) + v31);
    uint64_t v36 = *v35;
    uint64_t v37 = v35[1];
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v29 = v16 == v28;
        if (v16 == v28) {
          unint64_t v16 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      unint64_t v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = 16 * v17;
    uint64_t v19 = (void *)(*(void *)(v7 + 48) + v18);
    void *v19 = v34;
    v19[1] = v33;
    id v20 = (void *)(*(void *)(v7 + 56) + v18);
    *id v20 = v36;
    v20[1] = v37;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v39;
  unint64_t v24 = (void *)(v5 + 64);
  if ((v42 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v38 = 1 << *(unsigned char *)(v5 + 32);
  if (v38 >= 64) {
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v24 = -1 << v38;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  Swift::Int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  void *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t *v43;
  int64_t v44;
  void *v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  int64_t v49;
  uint64_t v50;
  uint64_t v51;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, UseCase>);
  uint64_t v47 = a2;
  uint64_t v51 = static _DictionaryStorage.resize(original:capacity:move:)();
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v6 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v45 = (void *)(v5 + 64);
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  else {
    uint64_t v7 = -1;
  }
  uint64_t v8 = v7 & *(void *)(v5 + 64);
  uint64_t v43 = v2;
  uint64_t v44 = (unint64_t)(v6 + 63) >> 6;
  uint64_t v9 = v51 + 64;
  uint64_t result = swift_retain();
  uint64_t v11 = 0;
  int v46 = v5;
  while (1)
  {
    if (v8)
    {
      uint64_t v48 = (v8 - 1) & v8;
      uint64_t v49 = v11;
      unint64_t v21 = __clz(__rbit64(v8)) | (v11 << 6);
      goto LABEL_31;
    }
    unint64_t v22 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v44) {
      break;
    }
    int64_t v23 = v45;
    unint64_t v24 = v45[v22];
    unint64_t v25 = v11 + 1;
    if (!v24)
    {
      unint64_t v25 = v11 + 2;
      if (v11 + 2 >= v44) {
        goto LABEL_33;
      }
      unint64_t v24 = v45[v25];
      if (!v24)
      {
        int64_t v26 = v11 + 3;
        if (v11 + 3 >= v44)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v43;
          if ((v47 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = v45[v26];
        if (!v24)
        {
          while (1)
          {
            unint64_t v25 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_42;
            }
            if (v25 >= v44) {
              goto LABEL_33;
            }
            unint64_t v24 = v45[v25];
            ++v26;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        unint64_t v25 = v11 + 3;
      }
    }
LABEL_30:
    uint64_t v48 = (v24 - 1) & v24;
    uint64_t v49 = v25;
    unint64_t v21 = __clz(__rbit64(v24)) + (v25 << 6);
LABEL_31:
    uint64_t v31 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    long long v32 = v31[1];
    int v50 = *v31;
    uint64_t v33 = *(void *)(v5 + 56) + (v21 << 6);
    uint64_t v34 = *(void *)v33;
    uint64_t v35 = *(void *)(v33 + 8);
    uint64_t v36 = *(void *)(v33 + 16);
    uint64_t v37 = *(void *)(v33 + 24);
    long long v39 = *(void *)(v33 + 32);
    uint64_t v38 = *(void *)(v33 + 40);
    int64_t v40 = *(void *)(v33 + 48);
    uint64_t v41 = *(unsigned __int8 *)(v33 + 56);
    if ((v47 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      outlined copy of UseCase(v34, v35, v36, v37, v39, v38, v40, v41);
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t v12 = Hasher._finalize()();
    int64_t v13 = -1 << *(unsigned char *)(v51 + 32);
    uint64_t v14 = v12 & ~v13;
    unint64_t v15 = v14 >> 6;
    if (((-1 << v14) & ~*(void *)(v9 + 8 * (v14 >> 6))) != 0)
    {
      unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v9 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      uint64_t v18 = v40;
      unint64_t v17 = v34;
      uint64_t result = v41;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v13) >> 6;
      uint64_t v18 = v40;
      unint64_t v17 = v34;
      uint64_t result = v41;
      do
      {
        if (++v15 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v29 = v15 == v28;
        if (v15 == v28) {
          unint64_t v15 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v9 + 8 * v15);
      }
      while (v30 == -1);
      unint64_t v16 = __clz(__rbit64(~v30)) + (v15 << 6);
    }
    *(void *)(v9 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    uint64_t v19 = (void *)(*(void *)(v51 + 48) + 16 * v16);
    void *v19 = v50;
    v19[1] = v32;
    id v20 = *(void *)(v51 + 56) + (v16 << 6);
    *(void *)id v20 = v17;
    *(void *)(v20 + 8) = v35;
    *(void *)(v20 + 16) = v36;
    *(void *)(v20 + 24) = v37;
    *(void *)(v20 + 32) = v39;
    *(void *)(v20 + 40) = v38;
    *(void *)(v20 + 48) = v18;
    *(unsigned char *)(v20 + 56) = result;
    ++*(void *)(v51 + 16);
    uint64_t v5 = v46;
    uint64_t v8 = v48;
    uint64_t v11 = v49;
  }
  swift_release();
  uint64_t v3 = v43;
  int64_t v23 = v45;
  if ((v47 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  char v42 = 1 << *(unsigned char *)(v5 + 32);
  if (v42 >= 64) {
    bzero(v23, ((unint64_t)(v42 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    uint64_t *v23 = -1 << v42;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v51;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  char v36;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, [String]>);
  uint64_t v36 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      uint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      id v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    unint64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34) {
      break;
    }
    unint64_t v22 = (void *)(v5 + 64);
    int64_t v23 = *(void *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v34) {
        goto LABEL_33;
      }
      int64_t v23 = *(void *)(v35 + 8 * v13);
      if (!v23)
      {
        unint64_t v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        int64_t v23 = *(void *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v34) {
              goto LABEL_33;
            }
            int64_t v23 = *(void *)(v35 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    id v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    BOOL v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    long long v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v25 = 0;
      int64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        char v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        unint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *uint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  unint64_t v22 = (void *)(v5 + 64);
  if ((v36 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  long long v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  long long v32;
  uint64_t v33;
  long long v34;
  long long v35;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Data, Data?>);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v9 = (void *)(v5 + 64);
    if (v8 < 64) {
      unint64_t v10 = ~(-1 << v8);
    }
    else {
      unint64_t v10 = -1;
    }
    uint64_t v11 = v10 & *(void *)(v5 + 64);
    uint64_t v12 = (unint64_t)(v8 + 63) >> 6;
    int64_t v13 = v6 + 64;
    uint64_t result = swift_retain();
    unint64_t v15 = 0;
    while (1)
    {
      if (v11)
      {
        unint64_t v22 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        int64_t v23 = v22 | (v15 << 6);
      }
      else
      {
        unint64_t v24 = v15 + 1;
        if (__OFADD__(v15, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v24 >= v12) {
          goto LABEL_33;
        }
        unint64_t v25 = v9[v24];
        ++v15;
        if (!v25)
        {
          unint64_t v15 = v24 + 1;
          if (v24 + 1 >= v12) {
            goto LABEL_33;
          }
          unint64_t v25 = v9[v15];
          if (!v25)
          {
            int64_t v26 = v24 + 2;
            if (v26 >= v12)
            {
LABEL_33:
              swift_release();
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_40;
              }
              uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
              if (v33 >= 64) {
                bzero((void *)(v5 + 64), ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v9 = -1 << v33;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v25 = v9[v26];
            if (!v25)
            {
              while (1)
              {
                unint64_t v15 = v26 + 1;
                if (__OFADD__(v26, 1)) {
                  goto LABEL_42;
                }
                if (v15 >= v12) {
                  goto LABEL_33;
                }
                unint64_t v25 = v9[v15];
                ++v26;
                if (v25) {
                  goto LABEL_30;
                }
              }
            }
            unint64_t v15 = v26;
          }
        }
LABEL_30:
        uint64_t v11 = (v25 - 1) & v25;
        int64_t v23 = __clz(__rbit64(v25)) + (v15 << 6);
      }
      uint64_t v31 = 16 * v23;
      long long v32 = *(_OWORD *)(*(void *)(v5 + 48) + v31);
      uint64_t v34 = *(_OWORD *)(*(void *)(v5 + 56) + v31);
      uint64_t v35 = v32;
      if ((a2 & 1) == 0)
      {
        outlined copy of Data._Representation(v32, *((unint64_t *)&v32 + 1));
        outlined copy of Data?(v34, *((unint64_t *)&v34 + 1));
      }
      Hasher.init(_seed:)();
      Data.hash(into:)();
      uint64_t result = Hasher._finalize()();
      unint64_t v16 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v17 = result & ~v16;
      uint64_t v18 = v17 >> 6;
      if (((-1 << v17) & ~*(void *)(v13 + 8 * (v17 >> 6))) != 0)
      {
        uint64_t v19 = __clz(__rbit64((-1 << v17) & ~*(void *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
        id v20 = v35;
      }
      else
      {
        char v27 = 0;
        unint64_t v28 = (unint64_t)(63 - v16) >> 6;
        id v20 = v35;
        do
        {
          if (++v18 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v29 = v18 == v28;
          if (v18 == v28) {
            uint64_t v18 = 0;
          }
          v27 |= v29;
          uint64_t v30 = *(void *)(v13 + 8 * v18);
        }
        while (v30 == -1);
        uint64_t v19 = __clz(__rbit64(~v30)) + (v18 << 6);
      }
      *(void *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      unint64_t v21 = 16 * v19;
      *(_OWORD *)(*(void *)(v7 + 48) + v21) = v20;
      *(_OWORD *)(*(void *)(v7 + 56) + v21) = v34;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  char v36;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Task<(), Error>>);
  uint64_t v36 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      uint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      id v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    unint64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34) {
      break;
    }
    unint64_t v22 = (void *)(v5 + 64);
    int64_t v23 = *(void *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v34) {
        goto LABEL_33;
      }
      int64_t v23 = *(void *)(v35 + 8 * v13);
      if (!v23)
      {
        unint64_t v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        int64_t v23 = *(void *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v34) {
              goto LABEL_33;
            }
            int64_t v23 = *(void *)(v35 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    id v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    BOOL v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    long long v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_retain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v25 = 0;
      int64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        char v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        unint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *uint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  unint64_t v22 = (void *)(v5 + 64);
  if ((v36 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, NSObject>);
  uint64_t v38 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v35 = v2;
  uint64_t v36 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      uint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      id v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    unint64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v36) {
      break;
    }
    unint64_t v22 = (void *)(v5 + 64);
    int64_t v23 = *(void *)(v37 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v36) {
        goto LABEL_33;
      }
      int64_t v23 = *(void *)(v37 + 8 * v13);
      if (!v23)
      {
        unint64_t v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v35;
          if ((v38 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        int64_t v23 = *(void *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v36) {
              goto LABEL_33;
            }
            int64_t v23 = *(void *)(v37 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    id v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    BOOL v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    long long v32 = *(void **)(*(void *)(v5 + 56) + 8 * v20);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      uint64_t v33 = v32;
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v25 = 0;
      int64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        char v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        unint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *uint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v35;
  unint64_t v22 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v22 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  long long v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  void *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  long long v34;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Data, [TokenCache.CachedToken]>);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  long long v32 = v2;
  uint64_t v33 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  uint64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      id v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    unint64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11) {
      break;
    }
    int64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v33 + 8 * v22);
    ++v14;
    if (!v24)
    {
      uint64_t v14 = v22 + 1;
      if (v22 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v33 + 8 * v14);
      if (!v24)
      {
        unint64_t v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v32;
          if ((a2 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v33 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            uint64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v11) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v33 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        uint64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = *(void *)(*(void *)(v5 + 56) + 8 * v21);
    uint64_t v34 = *(_OWORD *)(*(void *)(v5 + 48) + 16 * v21);
    if ((a2 & 1) == 0)
    {
      outlined copy of Data._Representation(v34, *(void *)(*(void *)(v5 + 48) + 16 * v21 + 8));
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    Data.hash(into:)();
    uint64_t result = Hasher._finalize()();
    unint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      uint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      uint64_t v19 = v34;
    }
    else
    {
      int64_t v26 = 0;
      char v27 = (unint64_t)(63 - v15) >> 6;
      uint64_t v19 = v34;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        unint64_t v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        BOOL v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      uint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    *(_OWORD *)(*(void *)(v7 + 48) + 16 * v18) = v19;
    *(void *)(*(void *)(v7 + 56) + 8 * v18) = v30;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v32;
  int64_t v23 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v31 = 1 << *(unsigned char *)(v5 + 32);
  if (v31 >= 64) {
    bzero(v23, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    uint64_t *v23 = -1 << v31;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char v9;
  uint64_t result;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  void *v37;
  uint64_t v38;

  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
  uint64_t v38 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt64, AspireHeSerializedKeySwitchKey>);
  uint64_t v9 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = result;
  if (*(void *)(v8 + 16))
  {
    uint64_t v35 = v3;
    uint64_t v12 = 0;
    int64_t v13 = *(void *)(v8 + 64);
    uint64_t v37 = (void *)(v8 + 64);
    uint64_t v14 = 1 << *(unsigned char *)(v8 + 32);
    if (v14 < 64) {
      unint64_t v15 = ~(-1 << v14);
    }
    else {
      unint64_t v15 = -1;
    }
    unint64_t v16 = v15 & v13;
    uint64_t v36 = (unint64_t)(v14 + 63) >> 6;
    unint64_t v17 = result + 64;
    while (1)
    {
      if (v16)
      {
        uint64_t v19 = __clz(__rbit64(v16));
        v16 &= v16 - 1;
        id v20 = v19 | (v12 << 6);
      }
      else
      {
        unint64_t v21 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        uint64_t result = (uint64_t)v37;
        if (v21 >= v36) {
          goto LABEL_34;
        }
        unint64_t v22 = v37[v21];
        ++v12;
        if (!v22)
        {
          uint64_t v12 = v21 + 1;
          if (v21 + 1 >= v36) {
            goto LABEL_34;
          }
          unint64_t v22 = v37[v12];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v36)
            {
LABEL_34:
              if ((v9 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v35;
                goto LABEL_41;
              }
              uint64_t v34 = 1 << *(unsigned char *)(v8 + 32);
              if (v34 >= 64) {
                bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v37 = -1 << v34;
              }
              uint64_t v3 = v35;
              *(void *)(v8 + 16) = 0;
              break;
            }
            unint64_t v22 = v37[v23];
            if (!v22)
            {
              while (1)
              {
                uint64_t v12 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_43;
                }
                if (v12 >= v36) {
                  goto LABEL_34;
                }
                unint64_t v22 = v37[v12];
                ++v23;
                if (v22) {
                  goto LABEL_21;
                }
              }
            }
            uint64_t v12 = v23;
          }
        }
LABEL_21:
        unint64_t v16 = (v22 - 1) & v22;
        id v20 = __clz(__rbit64(v22)) + (v12 << 6);
      }
      unint64_t v24 = *(void *)(*(void *)(v8 + 48) + 8 * v20);
      unint64_t v25 = *(void *)(v38 + 72);
      int64_t v26 = *(void *)(v8 + 56) + v25 * v20;
      if (v9) {
        outlined init with take of AspirePirSymmetricPirClientConfig(v26, (uint64_t)v7, type metadata accessor for AspireHeSerializedKeySwitchKey);
      }
      else {
        outlined init with copy of UserIdentifier(v26, (uint64_t)v7, type metadata accessor for AspireHeSerializedKeySwitchKey);
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      char v27 = -1 << *(unsigned char *)(v11 + 32);
      unint64_t v28 = result & ~v27;
      BOOL v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v17 + 8 * (v28 >> 6))) != 0)
      {
        uint64_t v18 = __clz(__rbit64((-1 << v28) & ~*(void *)(v17 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v30 = 0;
        uint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          long long v32 = v29 == v31;
          if (v29 == v31) {
            BOOL v29 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v17 + 8 * v29);
        }
        while (v33 == -1);
        uint64_t v18 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v17 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      *(void *)(*(void *)(v11 + 48) + 8 * v18) = v24;
      uint64_t result = outlined init with take of AspirePirSymmetricPirClientConfig((uint64_t)v7, *(void *)(v11 + 56) + v25 * v18, type metadata accessor for AspireHeSerializedKeySwitchKey);
      ++*(void *)(v11 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_41:
  *uint64_t v3 = v11;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  long long v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  void *v39;
  uint64_t v40;
  long long v41;

  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for SecretKey();
  int64_t v40 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Data, SecretKey>);
  uint64_t v9 = a2;
  unint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v10;
  if (*(void *)(v8 + 16))
  {
    uint64_t v37 = v2;
    uint64_t v12 = 1 << *(unsigned char *)(v8 + 32);
    int64_t v13 = *(void *)(v8 + 64);
    long long v39 = (void *)(v8 + 64);
    if (v12 < 64) {
      uint64_t v14 = ~(-1 << v12);
    }
    else {
      uint64_t v14 = -1;
    }
    unint64_t v15 = v14 & v13;
    uint64_t v38 = (unint64_t)(v12 + 63) >> 6;
    unint64_t v16 = v10 + 64;
    uint64_t result = swift_retain();
    uint64_t v18 = 0;
    while (1)
    {
      if (v15)
      {
        unint64_t v21 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        unint64_t v22 = v21 | (v18 << 6);
      }
      else
      {
        int64_t v23 = v18 + 1;
        if (__OFADD__(v18, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v23 >= v38) {
          goto LABEL_34;
        }
        unint64_t v24 = v39[v23];
        ++v18;
        if (!v24)
        {
          uint64_t v18 = v23 + 1;
          if (v23 + 1 >= v38) {
            goto LABEL_34;
          }
          unint64_t v24 = v39[v18];
          if (!v24)
          {
            unint64_t v25 = v23 + 2;
            if (v25 >= v38)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v37;
              if (v9)
              {
                uint64_t v36 = 1 << *(unsigned char *)(v8 + 32);
                if (v36 >= 64) {
                  bzero(v39, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *long long v39 = -1 << v36;
                }
                *(void *)(v8 + 16) = 0;
              }
              break;
            }
            unint64_t v24 = v39[v25];
            if (!v24)
            {
              while (1)
              {
                uint64_t v18 = v25 + 1;
                if (__OFADD__(v25, 1)) {
                  goto LABEL_41;
                }
                if (v18 >= v38) {
                  goto LABEL_34;
                }
                unint64_t v24 = v39[v18];
                ++v25;
                if (v24) {
                  goto LABEL_21;
                }
              }
            }
            uint64_t v18 = v25;
          }
        }
LABEL_21:
        unint64_t v15 = (v24 - 1) & v24;
        unint64_t v22 = __clz(__rbit64(v24)) + (v18 << 6);
      }
      int64_t v26 = *(void *)(v40 + 72);
      char v27 = *(void *)(v8 + 56) + v26 * v22;
      unint64_t v28 = *(void *)(*(void *)(v8 + 48) + 16 * v22 + 8);
      uint64_t v41 = *(_OWORD *)(*(void *)(v8 + 48) + 16 * v22);
      if (v9)
      {
        outlined init with take of AspirePirSymmetricPirClientConfig(v27, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for SecretKey);
      }
      else
      {
        outlined init with copy of UserIdentifier(v27, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for SecretKey);
        outlined copy of Data._Representation(v41, v28);
      }
      Hasher.init(_seed:)();
      Data.hash(into:)();
      uint64_t result = Hasher._finalize()();
      BOOL v29 = -1 << *(unsigned char *)(v11 + 32);
      uint64_t v30 = result & ~v29;
      uint64_t v31 = v30 >> 6;
      if (((-1 << v30) & ~*(void *)(v16 + 8 * (v30 >> 6))) != 0)
      {
        uint64_t v19 = __clz(__rbit64((-1 << v30) & ~*(void *)(v16 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
        id v20 = v41;
      }
      else
      {
        long long v32 = 0;
        uint64_t v33 = (unint64_t)(63 - v29) >> 6;
        id v20 = v41;
        do
        {
          if (++v31 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          uint64_t v34 = v31 == v33;
          if (v31 == v33) {
            uint64_t v31 = 0;
          }
          v32 |= v34;
          uint64_t v35 = *(void *)(v16 + 8 * v31);
        }
        while (v35 == -1);
        uint64_t v19 = __clz(__rbit64(~v35)) + (v31 << 6);
      }
      *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      *(_OWORD *)(*(void *)(v11 + 48) + 16 * v19) = v20;
      uint64_t result = outlined init with take of AspirePirSymmetricPirClientConfig((uint64_t)v7, *(void *)(v11 + 56) + v26 * v19, (uint64_t (*)(void))type metadata accessor for SecretKey);
      ++*(void *)(v11 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v11;
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v49 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v49 - 8);
  MEMORY[0x270FA5388](v49);
  uint64_t v48 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Date>);
  int v47 = a2;
  uint64_t v8 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16)) {
    goto LABEL_41;
  }
  uint64_t v10 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v11 = *(void *)(v7 + 64);
  uint64_t v44 = (void *)(v7 + 64);
  if (v10 < 64) {
    uint64_t v12 = ~(-1 << v10);
  }
  else {
    uint64_t v12 = -1;
  }
  unint64_t v13 = v12 & v11;
  char v42 = v2;
  int64_t v43 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v45 = (void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  uint64_t v46 = v5;
  uint64_t v14 = (void (**)(char *, uint64_t, uint64_t))(v5 + 32);
  uint64_t v15 = v8 + 64;
  uint64_t result = swift_retain();
  int64_t v17 = 0;
  while (1)
  {
    if (v13)
    {
      unint64_t v20 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v21 = v20 | (v17 << 6);
      goto LABEL_22;
    }
    int64_t v22 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v43) {
      break;
    }
    int64_t v23 = v44;
    unint64_t v24 = v44[v22];
    ++v17;
    if (!v24)
    {
      int64_t v17 = v22 + 1;
      if (v22 + 1 >= v43) {
        goto LABEL_34;
      }
      unint64_t v24 = v44[v17];
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v43)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v42;
          if ((v47 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v24 = v44[v25];
        if (!v24)
        {
          while (1)
          {
            int64_t v17 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_43;
            }
            if (v17 >= v43) {
              goto LABEL_34;
            }
            unint64_t v24 = v44[v17];
            ++v25;
            if (v24) {
              goto LABEL_21;
            }
          }
        }
        int64_t v17 = v25;
      }
    }
LABEL_21:
    unint64_t v13 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v17 << 6);
LABEL_22:
    uint64_t v26 = *(void *)(v7 + 56);
    uint64_t v27 = v7;
    unint64_t v28 = (uint64_t *)(*(void *)(v7 + 48) + 16 * v21);
    uint64_t v29 = *v28;
    uint64_t v30 = v28[1];
    uint64_t v31 = *(void *)(v46 + 72);
    uint64_t v32 = v26 + v31 * v21;
    if (v47)
    {
      (*v14)(v48, v32, v49);
    }
    else
    {
      (*v45)(v48, v32, v49);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v33 = -1 << *(unsigned char *)(v9 + 32);
    unint64_t v34 = result & ~v33;
    unint64_t v35 = v34 >> 6;
    if (((-1 << v34) & ~*(void *)(v15 + 8 * (v34 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v34) & ~*(void *)(v15 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v36 = 0;
      unint64_t v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v38 = v35 == v37;
        if (v35 == v37) {
          unint64_t v35 = 0;
        }
        v36 |= v38;
        uint64_t v39 = *(void *)(v15 + 8 * v35);
      }
      while (v39 == -1);
      unint64_t v18 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t v19 = (void *)(*(void *)(v9 + 48) + 16 * v18);
    void *v19 = v29;
    v19[1] = v30;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v14)(*(void *)(v9 + 56) + v31 * v18, v48, v49);
    ++*(void *)(v9 + 16);
    uint64_t v7 = v27;
  }
  swift_release();
  uint64_t v3 = v42;
  int64_t v23 = v44;
  if ((v47 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v40 = 1 << *(unsigned char *)(v7 + 32);
  if (v40 >= 64) {
    bzero(v23, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v23 = -1 << v40;
  }
  *(void *)(v7 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v9;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  void *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  void *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  void *v41;
  uint64_t v42;
  int v43;

  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for UseCaseGroup();
  char v42 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, UseCaseGroup>);
  int64_t v43 = a2;
  uint64_t v9 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16)) {
    goto LABEL_41;
  }
  uint64_t v11 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v12 = *(void *)(v8 + 64);
  uint64_t v41 = (void *)(v8 + 64);
  if (v11 < 64) {
    unint64_t v13 = ~(-1 << v11);
  }
  else {
    unint64_t v13 = -1;
  }
  uint64_t v14 = v13 & v12;
  uint64_t v39 = v2;
  uint64_t v40 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v15 = v9 + 64;
  uint64_t result = swift_retain();
  int64_t v17 = 0;
  while (1)
  {
    if (v14)
    {
      unint64_t v20 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v21 = v20 | (v17 << 6);
      goto LABEL_22;
    }
    int64_t v22 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v40) {
      break;
    }
    int64_t v23 = v41;
    unint64_t v24 = v41[v22];
    ++v17;
    if (!v24)
    {
      int64_t v17 = v22 + 1;
      if (v22 + 1 >= v40) {
        goto LABEL_34;
      }
      unint64_t v24 = v41[v17];
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v40)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v39;
          if ((v43 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v24 = v41[v25];
        if (!v24)
        {
          while (1)
          {
            int64_t v17 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_43;
            }
            if (v17 >= v40) {
              goto LABEL_34;
            }
            unint64_t v24 = v41[v17];
            ++v25;
            if (v24) {
              goto LABEL_21;
            }
          }
        }
        int64_t v17 = v25;
      }
    }
LABEL_21:
    uint64_t v14 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v17 << 6);
LABEL_22:
    uint64_t v26 = (uint64_t *)(*(void *)(v8 + 48) + 16 * v21);
    unint64_t v28 = *v26;
    uint64_t v27 = v26[1];
    uint64_t v29 = *(void *)(v42 + 72);
    uint64_t v30 = *(void *)(v8 + 56) + v29 * v21;
    if (v43)
    {
      outlined init with take of AspirePirSymmetricPirClientConfig(v30, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
    }
    else
    {
      outlined init with copy of UserIdentifier(v30, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v31 = -1 << *(unsigned char *)(v10 + 32);
    uint64_t v32 = result & ~v31;
    uint64_t v33 = v32 >> 6;
    if (((-1 << v32) & ~*(void *)(v15 + 8 * (v32 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v32) & ~*(void *)(v15 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v34 = 0;
      unint64_t v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        char v36 = v33 == v35;
        if (v33 == v35) {
          uint64_t v33 = 0;
        }
        v34 |= v36;
        unint64_t v37 = *(void *)(v15 + 8 * v33);
      }
      while (v37 == -1);
      unint64_t v18 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t v19 = (void *)(*(void *)(v10 + 48) + 16 * v18);
    void *v19 = v28;
    v19[1] = v27;
    uint64_t result = outlined init with take of AspirePirSymmetricPirClientConfig((uint64_t)v7, *(void *)(v10 + 56) + v29 * v18, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
    ++*(void *)(v10 + 16);
  }
  swift_release();
  uint64_t v3 = v39;
  int64_t v23 = v41;
  if ((v43 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  BOOL v38 = 1 << *(unsigned char *)(v8 + 32);
  if (v38 >= 64) {
    bzero(v23, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v23 = -1 << v38;
  }
  *(void *)(v8 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v10;
  return result;
}

void *specialized _NativeDictionary.copy()()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      int64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v26 - 1) & v26;
    unint64_t v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    int64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    unint64_t v20 = (uint64_t *)(*(void *)(v2 + 56) + v16);
    uint64_t v21 = *v20;
    uint64_t v22 = v20[1];
    int64_t v23 = (void *)(*(void *)(v4 + 48) + v16);
    void *v23 = v19;
    v23[1] = v18;
    unint64_t v24 = (void *)(*(void *)(v4 + 56) + v16);
    *unint64_t v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v27 = v25 + 2;
  if (v27 >= v13) {
    goto LABEL_26;
  }
  unint64_t v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    int64_t v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *result;
  unint64_t v5;
  BOOL v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  void *v27;
  unint64_t v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t *v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, UseCase>);
  uint64_t v33 = v0;
  uint64_t v1 = *v0;
  uint64_t v2 = static _DictionaryStorage.copy(original:)();
  uint64_t v3 = v2;
  if (!*(void *)(v1 + 16))
  {
LABEL_26:
    uint64_t v32 = v3;
    uint64_t result = (void *)swift_release();
    uint64_t *v33 = v32;
    return result;
  }
  uint64_t result = (void *)(v2 + 64);
  uint64_t v5 = (unint64_t)((1 << *(unsigned char *)(v3 + 32)) + 63) >> 6;
  uint64_t v6 = v3 != v1 || (unint64_t)result >= v1 + 64 + 8 * v5;
  unint64_t v37 = v3;
  if (v6)
  {
    uint64_t result = memmove(result, (const void *)(v1 + 64), 8 * v5);
    uint64_t v3 = v37;
  }
  unint64_t v35 = v1 + 64;
  char v36 = v1;
  unint64_t v7 = 0;
  *(void *)(v3 + 16) = *(void *)(v1 + 16);
  uint64_t v8 = 1 << *(unsigned char *)(v1 + 32);
  int64_t v9 = -1;
  if (v8 < 64) {
    int64_t v9 = ~(-1 << v8);
  }
  uint64_t v10 = v9 & *(void *)(v1 + 64);
  unint64_t v34 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      uint64_t v11 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v12 = v11 | (v7 << 6);
      int64_t v13 = v36;
      uint64_t v3 = v37;
      goto LABEL_12;
    }
    uint64_t v29 = v7 + 1;
    int64_t v13 = v36;
    uint64_t v3 = v37;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v29 >= v34) {
      goto LABEL_26;
    }
    uint64_t v30 = *(void *)(v35 + 8 * v29);
    ++v7;
    if (!v30)
    {
      unint64_t v7 = v29 + 1;
      if (v29 + 1 >= v34) {
        goto LABEL_26;
      }
      uint64_t v30 = *(void *)(v35 + 8 * v7);
      if (!v30) {
        break;
      }
    }
LABEL_25:
    uint64_t v10 = (v30 - 1) & v30;
    unint64_t v12 = __clz(__rbit64(v30)) + (v7 << 6);
LABEL_12:
    unint64_t v14 = 16 * v12;
    unint64_t v15 = *(void *)(v13 + 56);
    uint64_t v16 = (void *)(*(void *)(v13 + 48) + 16 * v12);
    int64_t v17 = v16[1];
    uint64_t v18 = v12 << 6;
    uint64_t v19 = *(void *)(v15 + v18);
    unint64_t v20 = *(void *)(v15 + v18 + 8);
    uint64_t v21 = *(void *)(v15 + v18 + 16);
    uint64_t v22 = *(void *)(v15 + v18 + 24);
    int64_t v23 = *(void *)(v15 + v18 + 32);
    unint64_t v24 = *(void *)(v15 + v18 + 40);
    int64_t v25 = *(void *)(v15 + v18 + 48);
    unint64_t v26 = *(unsigned char *)(v15 + v18 + 56);
    int64_t v27 = (void *)(*(void *)(v3 + 48) + v14);
    *int64_t v27 = *v16;
    v27[1] = v17;
    unint64_t v28 = *(void *)(v3 + 56) + v18;
    *(void *)unint64_t v28 = v19;
    *(void *)(v28 + 8) = v20;
    *(void *)(v28 + 16) = v21;
    *(void *)(v28 + 24) = v22;
    *(void *)(v28 + 32) = v23;
    *(void *)(v28 + 40) = v24;
    *(void *)(v28 + 48) = v25;
    *(unsigned char *)(v28 + 56) = v26;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)outlined copy of UseCase(v19, v20, v21, v22, v23, v24, v25, v26);
  }
  uint64_t v31 = v29 + 2;
  if (v31 >= v34) {
    goto LABEL_26;
  }
  uint64_t v30 = *(void *)(v35 + 8 * v31);
  if (v30)
  {
    unint64_t v7 = v31;
    goto LABEL_25;
  }
  while (1)
  {
    unint64_t v7 = v31 + 1;
    if (__OFADD__(v31, 1)) {
      break;
    }
    if (v7 >= v34) {
      goto LABEL_26;
    }
    uint64_t v30 = *(void *)(v35 + 8 * v7);
    ++v31;
    if (v30) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, [String]>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    int64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      int64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    int64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    unint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  unint64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  int64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  _OWORD v26[2];

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_28:
    *uint64_t v1 = v4;
    return result;
  }
  int64_t v25 = v1;
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    int64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      int64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    int64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    unint64_t v20 = 32 * v15;
    outlined init with copy of Any(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = v19;
    v21[1] = v18;
    outlined init with take of Any(v26, (_OWORD *)(*(void *)(v4 + 56) + v20));
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  unint64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v25;
    goto LABEL_28;
  }
  int64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  long long v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  long long v21;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Data, Data?>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    uint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      uint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    int64_t v17 = *(_OWORD *)(*(void *)(v2 + 48) + v16);
    uint64_t v21 = *(_OWORD *)(*(void *)(v2 + 56) + v16);
    *(_OWORD *)(*(void *)(v4 + 48) + v16) = v17;
    *(_OWORD *)(*(void *)(v4 + 56) + v16) = v21;
    outlined copy of Data._Representation(v17, *((unint64_t *)&v17 + 1));
    uint64_t result = (void *)outlined copy of Data?(v21, *((unint64_t *)&v21 + 1));
  }
  unint64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  uint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  unint64_t v35 = type metadata accessor for Date();
  uint64_t v1 = *(void *)(v35 - 8);
  MEMORY[0x270FA5388](v35);
  uint64_t v3 = (char *)&v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Date>);
  uint64_t v30 = v0;
  uint64_t v4 = *v0;
  uint64_t v5 = static _DictionaryStorage.copy(original:)();
  uint64_t v6 = *(void *)(v4 + 16);
  char v36 = v5;
  if (!v6)
  {
    uint64_t result = (void *)swift_release();
    unint64_t v28 = v36;
    int64_t v27 = v30;
LABEL_25:
    *int64_t v27 = v28;
    return result;
  }
  unint64_t v7 = v5;
  uint64_t result = (void *)(v5 + 64);
  int64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v4 || (unint64_t)result >= v4 + 64 + 8 * v9)
  {
    uint64_t result = memmove(result, (const void *)(v4 + 64), 8 * v9);
    unint64_t v7 = v36;
  }
  uint64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v4 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v4 + 32);
  unint64_t v12 = -1;
  if (v11 < 64) {
    unint64_t v12 = ~(-1 << v11);
  }
  int64_t v13 = v12 & *(void *)(v4 + 64);
  uint64_t v31 = v4 + 64;
  uint64_t v32 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v33 = v1 + 32;
  unint64_t v34 = v1 + 16;
  unint64_t v14 = v35;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      uint64_t v16 = v15 | (v10 << 6);
      goto LABEL_9;
    }
    unint64_t v24 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v24 >= v32) {
      goto LABEL_23;
    }
    int64_t v25 = *(void *)(v31 + 8 * v24);
    ++v10;
    if (!v25)
    {
      uint64_t v10 = v24 + 1;
      if (v24 + 1 >= v32) {
        goto LABEL_23;
      }
      int64_t v25 = *(void *)(v31 + 8 * v10);
      if (!v25) {
        break;
      }
    }
LABEL_22:
    int64_t v13 = (v25 - 1) & v25;
    uint64_t v16 = __clz(__rbit64(v25)) + (v10 << 6);
LABEL_9:
    int64_t v17 = 16 * v16;
    uint64_t v18 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v16);
    uint64_t v19 = *v18;
    unint64_t v20 = v18[1];
    uint64_t v21 = *(void *)(v1 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v3, *(void *)(v4 + 56) + v21, v14);
    uint64_t v22 = v36;
    int64_t v23 = (void *)(*(void *)(v36 + 48) + v17);
    void *v23 = v19;
    v23[1] = v20;
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(void *)(v22 + 56) + v21, v3, v14);
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  unint64_t v26 = v24 + 2;
  if (v26 >= v32)
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    int64_t v27 = v30;
    unint64_t v28 = v36;
    goto LABEL_25;
  }
  int64_t v25 = *(void *)(v31 + 8 * v26);
  if (v25)
  {
    uint64_t v10 = v26;
    goto LABEL_22;
  }
  while (1)
  {
    uint64_t v10 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v10 >= v32) {
      goto LABEL_23;
    }
    int64_t v25 = *(void *)(v31 + 8 * v10);
    ++v26;
    if (v25) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Task<(), Error>>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    int64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      int64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    int64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    unint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_retain();
  }
  unint64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  int64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;

  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UseCaseGroup();
  uint64_t v29 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, UseCaseGroup>);
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  unint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_25:
    *uint64_t v1 = v7;
    return result;
  }
  int64_t v27 = v1;
  uint64_t result = (void *)(v6 + 64);
  int64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    uint64_t result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  unint64_t v28 = v5 + 64;
  uint64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  unint64_t v12 = -1;
  if (v11 < 64) {
    unint64_t v12 = ~(-1 << v11);
  }
  int64_t v13 = v12 & *(void *)(v5 + 64);
  unint64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      uint64_t v16 = v15 | (v10 << 6);
      goto LABEL_9;
    }
    int64_t v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v23 >= v14) {
      goto LABEL_23;
    }
    unint64_t v24 = *(void *)(v28 + 8 * v23);
    ++v10;
    if (!v24)
    {
      uint64_t v10 = v23 + 1;
      if (v23 + 1 >= v14) {
        goto LABEL_23;
      }
      unint64_t v24 = *(void *)(v28 + 8 * v10);
      if (!v24) {
        break;
      }
    }
LABEL_22:
    int64_t v13 = (v24 - 1) & v24;
    uint64_t v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_9:
    int64_t v17 = 16 * v16;
    uint64_t v18 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v16);
    uint64_t v19 = *v18;
    unint64_t v20 = v18[1];
    uint64_t v21 = *(void *)(v29 + 72) * v16;
    outlined init with copy of UserIdentifier(*(void *)(v5 + 56) + v21, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
    uint64_t v22 = (void *)(*(void *)(v7 + 48) + v17);
    *uint64_t v22 = v19;
    v22[1] = v20;
    outlined init with take of AspirePirSymmetricPirClientConfig((uint64_t)v4, *(void *)(v7 + 56) + v21, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v14)
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v27;
    goto LABEL_25;
  }
  unint64_t v24 = *(void *)(v28 + 8 * v25);
  if (v24)
  {
    uint64_t v10 = v25;
    goto LABEL_22;
  }
  while (1)
  {
    uint64_t v10 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_23;
    }
    unint64_t v24 = *(void *)(v28 + 8 * v10);
    ++v25;
    if (v24) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  long long v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Data, [TokenCache.CachedToken]>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    unint64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    uint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      uint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    int64_t v17 = *(void *)(*(void *)(v2 + 56) + 8 * v15);
    uint64_t v18 = 16 * v15;
    uint64_t v19 = *(_OWORD *)(*(void *)(v2 + 48) + v18);
    *(_OWORD *)(*(void *)(v4 + 48) + v18) = v19;
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
    outlined copy of Data._Representation(v19, *((unint64_t *)&v19 + 1));
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  uint64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  uint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t *v24;
  uint64_t v25;

  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
  int64_t v25 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt64, AspireHeSerializedKeySwitchKey>);
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  unint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_25:
    *uint64_t v1 = v7;
    return result;
  }
  unint64_t v24 = v1;
  uint64_t result = (void *)(v6 + 64);
  int64_t v9 = v5 + 64;
  uint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v9 + 8 * v10) {
    uint64_t result = memmove(result, (const void *)(v5 + 64), 8 * v10);
  }
  uint64_t v11 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  unint64_t v12 = 1 << *(unsigned char *)(v5 + 32);
  int64_t v13 = -1;
  if (v12 < 64) {
    int64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v5 + 64);
  unint64_t v15 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      uint64_t v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      int64_t v17 = v16 | (v11 << 6);
      goto LABEL_9;
    }
    uint64_t v21 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v21 >= v15) {
      goto LABEL_23;
    }
    uint64_t v22 = *(void *)(v9 + 8 * v21);
    ++v11;
    if (!v22)
    {
      uint64_t v11 = v21 + 1;
      if (v21 + 1 >= v15) {
        goto LABEL_23;
      }
      uint64_t v22 = *(void *)(v9 + 8 * v11);
      if (!v22) {
        break;
      }
    }
LABEL_22:
    unint64_t v14 = (v22 - 1) & v22;
    int64_t v17 = __clz(__rbit64(v22)) + (v11 << 6);
LABEL_9:
    uint64_t v18 = 8 * v17;
    uint64_t v19 = *(void *)(*(void *)(v5 + 48) + 8 * v17);
    unint64_t v20 = *(void *)(v25 + 72) * v17;
    outlined init with copy of UserIdentifier(*(void *)(v5 + 56) + v20, (uint64_t)v4, type metadata accessor for AspireHeSerializedKeySwitchKey);
    *(void *)(*(void *)(v7 + 48) + v18) = v19;
    uint64_t result = (void *)outlined init with take of AspirePirSymmetricPirClientConfig((uint64_t)v4, *(void *)(v7 + 56) + v20, type metadata accessor for AspireHeSerializedKeySwitchKey);
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v15)
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v24;
    goto LABEL_25;
  }
  uint64_t v22 = *(void *)(v9 + 8 * v23);
  if (v22)
  {
    uint64_t v11 = v23;
    goto LABEL_22;
  }
  while (1)
  {
    uint64_t v11 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v11 >= v15) {
      goto LABEL_23;
    }
    uint64_t v22 = *(void *)(v9 + 8 * v11);
    ++v23;
    if (v22) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;

  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for SecretKey();
  uint64_t v29 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Data, SecretKey>);
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  unint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_25:
    *uint64_t v1 = v7;
    return result;
  }
  int64_t v27 = v1;
  uint64_t result = (void *)(v6 + 64);
  int64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    uint64_t result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  unint64_t v28 = v5 + 64;
  uint64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  unint64_t v12 = -1;
  if (v11 < 64) {
    unint64_t v12 = ~(-1 << v11);
  }
  int64_t v13 = v12 & *(void *)(v5 + 64);
  unint64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      uint64_t v16 = v15 | (v10 << 6);
      goto LABEL_9;
    }
    int64_t v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v23 >= v14) {
      goto LABEL_23;
    }
    unint64_t v24 = *(void *)(v28 + 8 * v23);
    ++v10;
    if (!v24)
    {
      uint64_t v10 = v23 + 1;
      if (v23 + 1 >= v14) {
        goto LABEL_23;
      }
      unint64_t v24 = *(void *)(v28 + 8 * v10);
      if (!v24) {
        break;
      }
    }
LABEL_22:
    int64_t v13 = (v24 - 1) & v24;
    uint64_t v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_9:
    int64_t v17 = 16 * v16;
    uint64_t v18 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v16);
    uint64_t v19 = *v18;
    unint64_t v20 = v18[1];
    uint64_t v21 = *(void *)(v29 + 72) * v16;
    outlined init with copy of UserIdentifier(*(void *)(v5 + 56) + v21, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for SecretKey);
    uint64_t v22 = (uint64_t *)(*(void *)(v7 + 48) + v17);
    *uint64_t v22 = v19;
    v22[1] = v20;
    outlined init with take of AspirePirSymmetricPirClientConfig((uint64_t)v4, *(void *)(v7 + 56) + v21, (uint64_t (*)(void))type metadata accessor for SecretKey);
    uint64_t result = (void *)outlined copy of Data._Representation(v19, v20);
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v14)
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v27;
    goto LABEL_25;
  }
  unint64_t v24 = *(void *)(v28 + 8 * v25);
  if (v24)
  {
    uint64_t v10 = v25;
    goto LABEL_22;
  }
  while (1)
  {
    uint64_t v10 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_23;
    }
    unint64_t v24 = *(void *)(v28 + 8 * v10);
    ++v25;
    if (v24) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

id specialized _NativeDictionary.copy()()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, NSObject>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    int64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    unint64_t v20 = *(void **)(*(void *)(v2 + 56) + v19);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    id result = v20;
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation4DataVG_AHSgs5NeverOTg5161_s8CipherML15RequestsManagerC11requestData8keywords7context8shardIdsSay10Foundation0F0VSgGSayAJG_AA14RequestContextVyAA19StaticPIRParametersVGSaySSGtYaKFAkJXEfU_0H2ML0jK0C24CachedAndMissingKeywordsVTf1cn_nTf4ngX_nTm(uint64_t a1, uint64_t a2)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = MEMORY[0x263F8EE78];
  if (v2)
  {
    uint64_t v18 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    uint64_t v3 = v18;
    uint64_t v6 = (unint64_t *)(a1 + 40);
    do
    {
      if (*(void *)(a2 + 16))
      {
        uint64_t v7 = *(v6 - 1);
        unint64_t v8 = *v6;
        outlined copy of Data._Representation(v7, *v6);
        outlined copy of Data._Representation(v7, v8);
        uint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v8);
        if (v10)
        {
          uint64_t v11 = (uint64_t *)(*(void *)(a2 + 56) + 16 * v9);
          uint64_t v12 = *v11;
          unint64_t v13 = v11[1];
          outlined copy of Data?(*v11, v13);
        }
        else
        {
          uint64_t v12 = 0;
          unint64_t v13 = 0xF000000000000000;
        }
        outlined consume of Data._Representation(v7, v8);
        outlined consume of Data._Representation(v7, v8);
      }
      else
      {
        uint64_t v12 = 0;
        unint64_t v13 = 0xF000000000000000;
      }
      unint64_t v15 = *(void *)(v18 + 16);
      unint64_t v14 = *(void *)(v18 + 24);
      if (v15 >= v14 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
      }
      v6 += 2;
      *(void *)(v18 + 16) = v15 + 1;
      uint64_t v16 = v18 + 16 * v15;
      *(void *)(v16 + 32) = v12;
      *(void *)(v16 + 40) = v13;
      --v2;
    }
    while (v2);
  }
  return v3;
}

uint64_t specialized static Data.== infix(_:_:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v8) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
        JUMPOUT(0x249CD6F8CLL);
      }
      uint64_t v8 = (int)v8;
LABEL_6:
      switch(a4 >> 62)
      {
        case 1uLL:
          LODWORD(v12) = HIDWORD(a3) - a3;
          if (__OFSUB__(HIDWORD(a3), a3)) {
            goto LABEL_27;
          }
          uint64_t v12 = (int)v12;
LABEL_11:
          if (v8 == v12)
          {
            if (v8 < 1)
            {
              char v17 = 1;
            }
            else
            {
              switch(a2 >> 62)
              {
                case 1uLL:
                  if (a1 >> 32 < (int)a1) {
                    goto LABEL_29;
                  }
                  outlined copy of Data._Representation(a3, a4);
                  outlined copy of Data._Representation(a1, a2);
                  char v17 = specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)a1, a1 >> 32, a2 & 0x3FFFFFFFFFFFFFFFLL, a3, a4);
                  outlined consume of Data._Representation(a3, a4);
                  uint64_t v18 = a1;
                  unint64_t v19 = a2;
                  break;
                case 2uLL:
                  uint64_t v20 = a2 & 0x3FFFFFFFFFFFFFFFLL;
                  uint64_t v21 = *(void *)(a1 + 16);
                  uint64_t v22 = *(void *)(a1 + 24);
                  outlined copy of Data._Representation(a3, a4);
                  swift_retain();
                  swift_retain();
                  char v17 = specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v21, v22, v20, a3, a4);
                  outlined consume of Data._Representation(a3, a4);
                  swift_release();
                  swift_release();
                  return v17 & 1;
                case 3uLL:
                  outlined copy of Data._Representation(a3, a4);
                  uint64_t v16 = 0;
                  uint64_t v15 = 0;
                  goto LABEL_22;
                default:
                  outlined copy of Data._Representation(a3, a4);
                  uint64_t v15 = a2 & 0xFFFFFFFFFFFFFFLL;
                  uint64_t v16 = a1;
LABEL_22:
                  char v17 = specialized Data.InlineData.withUnsafeBytes<A>(_:)(v16, v15, a3, a4);
                  uint64_t v18 = a3;
                  unint64_t v19 = a4;
                  break;
              }
              outlined consume of Data._Representation(v18, v19);
            }
          }
          else
          {
            char v17 = 0;
          }
          return v17 & 1;
        case 2uLL:
          uint64_t v14 = *(void *)(a3 + 16);
          uint64_t v13 = *(void *)(a3 + 24);
          BOOL v11 = __OFSUB__(v13, v14);
          uint64_t v12 = v13 - v14;
          if (!v11) {
            goto LABEL_11;
          }
          goto LABEL_28;
        case 3uLL:
          char v17 = v8 == 0;
          return v17 & 1;
        default:
          uint64_t v12 = BYTE6(a4);
          goto LABEL_11;
      }
    case 2uLL:
      uint64_t v10 = *(void *)(a1 + 16);
      uint64_t v9 = *(void *)(a1 + 24);
      BOOL v11 = __OFSUB__(v9, v10);
      uint64_t v8 = v9 - v10;
      if (!v11) {
        goto LABEL_6;
      }
      goto LABEL_26;
    case 3uLL:
      goto LABEL_6;
    default:
      uint64_t v8 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t specialized static RequestsManager.cachedAndMissingKeywordsInBatch(keywords:shardIds:cache:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2;
  uint64_t v5 = a1;
  uint64_t v6 = *(void *)(a2 + 16);
  if (v6 && v6 != *(void *)(a1 + 16))
  {
    if (one-time initialization token for daemon != -1) {
      goto LABEL_65;
    }
    goto LABEL_31;
  }
  if (!a3)
  {
    uint64_t v83 = (void *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return (uint64_t)v83;
  }
  swift_unknownObjectRetain();
  unint64_t v7 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  uint64_t v8 = *(void *)(v5 + 16);
  uint64_t v75 = v5;
  uint64_t v83 = (void *)v7;
  if (v6)
  {
    if (v8)
    {
      uint64_t v74 = *(uint64_t (**)(unint64_t, unint64_t, uint64_t, uint64_t))(a4 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v9 = 0;
      uint64_t v86 = (void *)MEMORY[0x263F8EE78];
      uint64_t v80 = (void *)MEMORY[0x263F8EE78];
      uint64_t v73 = v4;
      do
      {
        if (!v6) {
          break;
        }
        uint64_t v78 = v6;
        *(_OWORD *)uint64_t v84 = *(_OWORD *)(v5 + v9 + 32);
        uint64_t v12 = v4 + v9;
        uint64_t v14 = *(void *)(v4 + v9 + 32);
        uint64_t v13 = *(void *)(v12 + 40);
        uint64_t ObjectType = swift_getObjectType();
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v84[0], v84[1]);
        uint64_t v16 = v74(v84[0], v84[1], ObjectType, a4);
        if (v17 >> 60 == 11)
        {
          outlined copy of Data._Representation(v84[0], v84[1]);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v86 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v86[2] + 1, 1, v86);
          }
          uint64_t v5 = v75;
          unint64_t v19 = v86[2];
          unint64_t v18 = v86[3];
          if (v19 >= v18 >> 1) {
            uint64_t v86 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v18 > 1), v19 + 1, 1, v86);
          }
          v86[2] = v19 + 1;
          *(_OWORD *)&v86[2 * v19 + 4] = *(_OWORD *)v84;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v80 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v80[2] + 1, 1, v80);
          }
          unint64_t v21 = v80[2];
          unint64_t v20 = v80[3];
          if (v21 >= v20 >> 1) {
            uint64_t v80 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v20 > 1), v21 + 1, 1, v80);
          }
          v80[2] = v21 + 1;
          uint64_t v22 = &v80[2 * v21];
          v22[4] = v14;
          v22[5] = v13;
          outlined consume of Data._Representation(v84[0], v84[1]);
        }
        else
        {
          uint64_t v23 = v16;
          unint64_t v24 = v17;
          swift_bridgeObjectRelease();
          outlined copy of Data._Representation(v84[0], v84[1]);
          uint64_t v25 = v23;
          unint64_t v76 = v24;
          outlined copy of Data??(v23, v24);
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          unint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(v84[0], v84[1]);
          uint64_t v29 = v83[2];
          BOOL v30 = (v27 & 1) == 0;
          uint64_t v31 = v29 + v30;
          if (__OFADD__(v29, v30)) {
            goto LABEL_62;
          }
          char v32 = v27;
          if (v83[3] >= v31)
          {
            if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
              specialized _NativeDictionary.copy()();
            }
          }
          else
          {
            specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v31, isUniquelyReferenced_nonNull_native);
            uint64_t v33 = specialized __RawDictionaryStorage.find<A>(_:)(v84[0], v84[1]);
            if ((v32 & 1) != (v34 & 1)) {
              goto LABEL_66;
            }
            unint64_t v28 = v33;
          }
          if (v32)
          {
            uint64_t v10 = v83[7] + 16 * v28;
            outlined consume of Data?(*(void *)v10, *(void *)(v10 + 8));
            unint64_t v11 = v76;
            *(void *)uint64_t v10 = v25;
            *(void *)(v10 + 8) = v76;
          }
          else
          {
            v83[(v28 >> 6) + 8] |= 1 << v28;
            *(_OWORD *)(v83[6] + 16 * v28) = *(_OWORD *)v84;
            unint64_t v35 = (uint64_t *)(v83[7] + 16 * v28);
            *unint64_t v35 = v23;
            v35[1] = v76;
            uint64_t v36 = v83[2];
            BOOL v37 = __OFADD__(v36, 1);
            uint64_t v38 = v36 + 1;
            if (v37) {
              goto LABEL_64;
            }
            v83[2] = v38;
            outlined copy of Data._Representation(v84[0], v84[1]);
            unint64_t v11 = v76;
          }
          swift_bridgeObjectRelease();
          outlined consume of Data._Representation(v84[0], v84[1]);
          outlined consume of Data._Representation(v84[0], v84[1]);
          outlined consume of Data??(v25, v11);
          uint64_t v5 = v75;
        }
        uint64_t v4 = v73;
        v9 += 16;
        uint64_t v6 = v78 - 1;
        --v8;
      }
      while (v8);
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)v83;
    }
    goto LABEL_56;
  }
  if (!v8)
  {
LABEL_56:
    swift_unknownObjectRelease();
    return (uint64_t)v83;
  }
  uint64_t v43 = swift_getObjectType();
  uint64_t v44 = a4 + 40;
  uint64_t v81 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(a4 + 40);
  swift_bridgeObjectRetain();
  uint64_t v45 = (unint64_t *)(v5 + 40);
  uint64_t v87 = (void *)MEMORY[0x263F8EE78];
  uint64_t v77 = v43;
  while (1)
  {
    uint64_t v48 = *(v45 - 1);
    unint64_t v49 = *v45;
    outlined copy of Data._Representation(v48, *v45);
    uint64_t v50 = v81(v48, v49, v43, a4);
    unint64_t v52 = v51;
    outlined copy of Data._Representation(v48, v49);
    if (v52 >> 60 == 11)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v87 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v87[2] + 1, 1, v87);
      }
      unint64_t v54 = v87[2];
      unint64_t v53 = v87[3];
      if (v54 >= v53 >> 1) {
        uint64_t v87 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v53 > 1), v54 + 1, 1, v87);
      }
      v87[2] = v54 + 1;
      uint64_t v55 = &v87[2 * v54];
      v55[4] = v48;
      v55[5] = v49;
      outlined consume of Data._Representation(v48, v49);
      goto LABEL_39;
    }
    uint64_t v79 = v8;
    uint64_t v56 = v44;
    uint64_t v57 = v50;
    unint64_t v85 = v52;
    outlined copy of Data??(v50, v52);
    char v58 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v60 = specialized __RawDictionaryStorage.find<A>(_:)(v48, v49);
    uint64_t v61 = v83[2];
    BOOL v62 = (v59 & 1) == 0;
    uint64_t v63 = v61 + v62;
    if (__OFADD__(v61, v62)) {
      break;
    }
    char v64 = v59;
    if (v83[3] >= v63)
    {
      if ((v58 & 1) == 0) {
        specialized _NativeDictionary.copy()();
      }
      uint64_t v67 = v57;
      uint64_t v44 = v56;
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v63, v58);
      uint64_t v65 = specialized __RawDictionaryStorage.find<A>(_:)(v48, v49);
      if ((v64 & 1) != (v66 & 1))
      {
LABEL_66:
        uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
        return result;
      }
      unint64_t v60 = v65;
      uint64_t v44 = v56;
      uint64_t v67 = v57;
    }
    uint64_t v8 = v79;
    if (v64)
    {
      uint64_t v46 = v83[7] + 16 * v60;
      outlined consume of Data?(*(void *)v46, *(void *)(v46 + 8));
      unint64_t v47 = v85;
      *(void *)uint64_t v46 = v67;
      *(void *)(v46 + 8) = v85;
    }
    else
    {
      v83[(v60 >> 6) + 8] |= 1 << v60;
      unint64_t v68 = (uint64_t *)(v83[6] + 16 * v60);
      *unint64_t v68 = v48;
      v68[1] = v49;
      uint64_t v69 = (uint64_t *)(v83[7] + 16 * v60);
      *uint64_t v69 = v67;
      v69[1] = v85;
      uint64_t v70 = v83[2];
      BOOL v37 = __OFADD__(v70, 1);
      uint64_t v71 = v70 + 1;
      if (v37) {
        goto LABEL_63;
      }
      v83[2] = v71;
      outlined copy of Data._Representation(v48, v49);
      unint64_t v47 = v85;
    }
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(v48, v49);
    outlined consume of Data._Representation(v48, v49);
    outlined consume of Data??(v67, v47);
    uint64_t v43 = v77;
LABEL_39:
    v45 += 2;
    if (!--v8)
    {
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)v83;
    }
  }
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  __break(1u);
LABEL_65:
  swift_once();
LABEL_31:
  uint64_t v39 = type metadata accessor for Logger();
  __swift_project_value_buffer(v39, (uint64_t)static Logger.daemon);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v40 = Logger.logObject.getter();
  os_log_type_t v41 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v40, v41))
  {
    uint64_t v42 = swift_slowAlloc();
    *(_DWORD *)uint64_t v42 = 134349312;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v42 + 12) = 2050;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_249C3F000, v40, v41, "shardIds (length %{public}ld must be empty or match keywords.count %{public}ld.", (uint8_t *)v42, 0x16u);
    MEMORY[0x24C5B4790](v42, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for CipherMLError();
  _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
  swift_allocError();
  swift_storeEnumTagMultiPayload();
  return swift_willThrow();
}

uint64_t specialized RequestsManager.loadCache(requestContext:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for OSSignpostID();
  uint64_t v32 = *(void *)(v2 - 8);
  uint64_t v33 = v2;
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestContext<StaticPIRParameters>);
  MEMORY[0x270FA5388](v5 - 8);
  unint64_t v7 = (id *)((char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = type metadata accessor for OSSignposter();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  unint64_t v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for daemon != -1) {
    swift_once();
  }
  uint64_t v12 = __swift_project_value_buffer(v8, (uint64_t)static OSSignposter.daemon);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v12, v8);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v7, &demangling cache variable for type metadata for RequestContext<StaticPIRParameters>);
  static OSSignpostID.exclusive.getter();
  uint64_t v31 = v8;
  uint64_t v13 = (uint8_t *)swift_slowAlloc();
  uint64_t v14 = swift_slowAlloc();
  uint64_t v30 = v14;
  *(_DWORD *)uint64_t v13 = 136315138;
  uint64_t v35 = v14;
  uint64_t v15 = v11;
  uint64_t v16 = v9;
  id v17 = objc_msgSend(*v7, sel_useCase);
  uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v29 = a1;
  unint64_t v20 = v19;

  uint64_t v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v20, &v35);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v7, &demangling cache variable for type metadata for RequestContext<StaticPIRParameters>);
  unint64_t v21 = OSSignposter.logHandle.getter();
  os_signpost_type_t v22 = static os_signpost_type_t.begin.getter();
  os_signpost_id_t v23 = OSSignpostID.rawValue.getter();
  _os_signpost_emit_with_name_impl(&dword_249C3F000, v21, v22, v23, "LRUCache: init", "%s", v13, 0xCu);
  closure #1 in RequestsManager.loadCache(requestContext:)(v29, &v34);
  LOBYTE(v17) = static os_signpost_type_t.end.getter();
  os_signpost_id_t v24 = OSSignpostID.rawValue.getter();
  _os_signpost_emit_with_name_impl(&dword_249C3F000, v21, (os_signpost_type_t)v17, v24, "LRUCache: init", "%s", v13, 0xCu);

  uint64_t v25 = v34;
  uint64_t v26 = v30;
  swift_arrayDestroy();
  MEMORY[0x24C5B4790](v26, -1, -1);
  MEMORY[0x24C5B4790](v13, -1, -1);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v4, v33);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v15, v31);
  return v25;
}

uint64_t specialized RequestsManager.generateSymmetricPirKeywords(_:networkManager:context:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[22] = a2;
  v3[23] = a3;
  v3[21] = a1;
  uint64_t v4 = type metadata accessor for PIR.SymmetricPIRClient();
  v3[24] = v4;
  v3[25] = *(void *)(v4 - 8);
  v3[26] = swift_task_alloc();
  v3[27] = type metadata accessor for SymmetricPIRClient();
  v3[28] = swift_task_alloc();
  v3[29] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized RequestsManager.generateSymmetricPirKeywords(_:networkManager:context:), 0, 0);
}

uint64_t specialized RequestsManager.generateSymmetricPirKeywords(_:networkManager:context:)()
{
  RequestsManager.PIRContext.symmetricPirConfig()(v0 + 112);
  uint64_t v1 = *(void *)(v0 + 112);
  unint64_t v2 = *(void *)(v0 + 120);
  outlined init with take of SymmetricPirClientConfig?(v0 + 112, v0 + 64, &demangling cache variable for type metadata for SymmetricPirClientConfig?);
  if (*(void *)(v0 + 72) >> 60 == 15)
  {
    type metadata accessor for CipherMLError();
    _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
    return v13();
  }
  else
  {
    long long v3 = *(_OWORD *)(v0 + 80);
    *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 64);
    *(_OWORD *)(v0 + 32) = v3;
    *(_OWORD *)(v0 + 48) = *(_OWORD *)(v0 + 96);
    outlined copy of Data._Representation(v1, v2);
    outlined retain of SymmetricPirClientConfig(v0 + 16);
    PIR.SymmetricPIRClient.init(serverPublicKey:)();
    uint64_t v5 = *(void *)(v0 + 224);
    uint64_t v4 = *(void *)(v0 + 232);
    uint64_t v6 = *(void *)(v0 + 216);
    uint64_t v7 = *(void *)(v0 + 168);
    (*(void (**)(uint64_t, void, void))(*(void *)(v0 + 200) + 32))(v5, *(void *)(v0 + 208), *(void *)(v0 + 192));
    uint64_t v8 = (_OWORD *)(v5 + *(int *)(v6 + 20));
    long long v9 = *(_OWORD *)(v0 + 16);
    long long v10 = *(_OWORD *)(v0 + 48);
    v8[1] = *(_OWORD *)(v0 + 32);
    v8[2] = v10;
    *uint64_t v8 = v9;
    outlined init with take of AspirePirSymmetricPirClientConfig(v5, v4, (uint64_t (*)(void))type metadata accessor for SymmetricPIRClient);
    uint64_t v11 = swift_task_alloc();
    *(void *)(v11 + 16) = v4;
    uint64_t v12 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation4DataVG_16CryptoKitPrivate3PIRO14BlindedKeywordVsAE_pTg5((void (*)(void *, uint64_t *))partial apply for closure #1 in SymmetricPIRClient.blind(keywords:), v11, v7);
    *(void *)(v0 + 240) = v12;
    uint64_t v15 = v12;
    swift_task_dealloc();
    uint64_t v16 = (void *)swift_task_alloc();
    *(void *)(v0 + 248) = v16;
    *uint64_t v16 = v0;
    v16[1] = specialized RequestsManager.generateSymmetricPirKeywords(_:networkManager:context:);
    uint64_t v17 = *(void *)(v0 + 176);
    return RequestsManager.PIRContext.requestOPRFData(for:networkManager:)(v15, v17);
  }
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t);
  uint64_t v15;

  uint64_t v1 = v0[32];
  unint64_t v2 = v0[33];
  uint64_t v4 = v0[29];
  long long v3 = v0[30];
  uint64_t v5 = swift_task_alloc();
  *(void *)(v5 + 16) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v6 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySay16CryptoKitPrivate3PIRO14BlindedKeywordVGSay8CipherML21AspireApiOPRFResponseVGG_10Foundation4DataVsAE_pTg504_s16fg14Private3PIRO14jk2V8l4ML21nop14V10Foundation4r3Vs5C33_pIgnnozo_AE_AHtAKsAL_pIegnrzr_TRAlpUsAE_pIgnnozo_Tf1cn_n(v3, v1, (uint64_t (*)(uint64_t, uint64_t))partial apply for closure #1 in SymmetricPIRClient.validateThenHash(blindedKeywords:oprfResponses:), v5);
  if (v2)
  {
    uint64_t v7 = v0[29];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    outlined destroy of AspirePirKeywordPirParameters(v7, (uint64_t (*)(void))type metadata accessor for SymmetricPIRClient);
    outlined release of SymmetricPirClientConfig?((uint64_t)(v0 + 14));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
  else
  {
    long long v10 = v6;
    uint64_t v11 = v0[29];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    uint64_t v12 = swift_task_alloc();
    *(void *)(v12 + 16) = v11;
    uint64_t v13 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation4DataVG_8CipherML19SymmetricPirKeywordVs5NeverOTg5((void (*)(long long *__return_ptr, void *))partial apply for closure #2 in SymmetricPIRClient.validateThenHash(blindedKeywords:oprfResponses:), v12, v10);
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    outlined destroy of AspirePirKeywordPirParameters(v11, (uint64_t (*)(void))type metadata accessor for SymmetricPIRClient);
    outlined release of SymmetricPirClientConfig?((uint64_t)(v0 + 14));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v14 = (uint64_t (*)(uint64_t))v0[1];
    return v14(v13);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void *)(v0 + 232);
  outlined release of SymmetricPirClientConfig?(v0 + 112);
  outlined destroy of AspirePirKeywordPirParameters(v1, (uint64_t (*)(void))type metadata accessor for SymmetricPIRClient);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t specialized RequestsManager.generateSymmetricPirKeywords(_:networkManager:context:)(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 256) = a1;
  *(void *)(v3 + 264) = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_bridgeObjectRelease();
    uint64_t v4 = specialized RequestsManager.generateSymmetricPirKeywords(_:networkManager:context:);
  }
  else
  {
    uint64_t v4 = specialized RequestsManager.generateSymmetricPirKeywords(_:networkManager:context:);
  }
  return MEMORY[0x270FA2498](v4, 0, 0);
}

uint64_t specialized RequestsManager.generateData(keywords:networkManager:context:cachedAndMissing:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[10] = a5;
  v6[11] = a6;
  v6[8] = a3;
  v6[9] = a4;
  v6[6] = a1;
  v6[7] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirSymmetricPirClientConfig?);
  v6[12] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  v6[13] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for AspirePirKeywordPirParameters(0);
  v6[14] = v7;
  v6[15] = *(void *)(v7 - 8);
  v6[16] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized RequestsManager.generateData(keywords:networkManager:context:cachedAndMissing:), 0, 0);
}

uint64_t specialized RequestsManager.generateData(keywords:networkManager:context:cachedAndMissing:)()
{
  uint64_t v1 = v0[14];
  uint64_t v2 = v0[15];
  uint64_t v3 = v0[13];
  uint64_t v4 = v0[8];
  uint64_t v5 = v4 + *(int *)(type metadata accessor for RequestsManager.PIRContext() + 24);
  uint64_t v6 = *(void *)(v5 + *(int *)(type metadata accessor for AspireApiPIRConfig(0) + 20))
     + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__keywordPirParams;
  swift_beginAccess();
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v6, v3, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  int v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1);
  uint64_t v8 = v0[16];
  if (v7 == 1)
  {
    uint64_t v9 = v0[13];
    uint64_t v10 = v0[14];
    *(void *)uint64_t v8 = 0;
    *(unsigned char *)(v8 + 8) = 0;
    UnknownStorage.init()();
    uint64_t v11 = v8 + *(int *)(v10 + 28);
    uint64_t v12 = type metadata accessor for AspirePirSymmetricPirClientConfig(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
    uint64_t v13 = v8 + *(int *)(v10 + 32);
    uint64_t v14 = type metadata accessor for AspirePirPIRShardingFunction(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v9, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  }
  else
  {
    outlined init with take of AspirePirSymmetricPirClientConfig(v0[13], v0[16], type metadata accessor for AspirePirKeywordPirParameters);
  }
  uint64_t v15 = v0[16];
  uint64_t v16 = v0[12];
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v15 + *(int *)(v0[14] + 28), v16, &demangling cache variable for type metadata for AspirePirSymmetricPirClientConfig?);
  uint64_t v17 = type metadata accessor for AspirePirSymmetricPirClientConfig(0);
  int v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 48))(v16, 1, v17);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v16, &demangling cache variable for type metadata for AspirePirSymmetricPirClientConfig?);
  outlined destroy of AspirePirKeywordPirParameters(v15, type metadata accessor for AspirePirKeywordPirParameters);
  if (v18 == 1)
  {
    uint64_t v24 = RequestsManager.PIRContext.prepareDataRequests(keywords:shardIds:)(v0[10], v0[11]);
    v0[20] = v24;
    v0[21] = 0;
    uint64_t v25 = (void *)swift_task_alloc();
    v0[22] = v25;
    void *v25 = v0;
    v25[1] = specialized RequestsManager.generateData(keywords:networkManager:context:cachedAndMissing:);
    uint64_t v26 = v0[9];
    uint64_t v27 = v0[10];
    uint64_t v28 = v0[7];
    uint64_t v29 = v0[6];
    return RequestsManager.PIRContext.requestData(missingKeywords:availableResults:allKeywords:requests:networkManager:symmetricPirKeywords:)(v27, v26, v29, v24, v28, 0);
  }
  else
  {
    uint64_t v30 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized RequestsManager.generateSymmetricPirKeywords(_:networkManager:context:)
                                                            + async function pointer to specialized RequestsManager.generateSymmetricPirKeywords(_:networkManager:context:));
    unint64_t v19 = (void *)swift_task_alloc();
    v0[17] = v19;
    void *v19 = v0;
    v19[1] = specialized RequestsManager.generateData(keywords:networkManager:context:cachedAndMissing:);
    uint64_t v20 = v0[10];
    uint64_t v21 = v0[7];
    uint64_t v22 = v0[8];
    return v30(v20, v21, v22);
  }
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  uint64_t v1 = v0[19];
  uint64_t v2 = v0[11];
  uint64_t v3 = swift_bridgeObjectRetain();
  uint64_t v4 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CipherML19SymmetricPirKeywordVG_10Foundation4DataVs5NeverOTg503_s8d42ML15RequestsManagerC10PIRContextV28decryptf24PIRResponses_20symmetricg24KeywordsSay10Foundation4j40VSgGSayAA17AspireApiResponseVG_SayAA0gJ7H60VGtKFAjQcfu_33_629df1417557ae7fb76f1d8e37ffce09AqJTf3nnnpk_nTf1cn_nTm(v3);
  swift_bridgeObjectRelease();
  uint64_t v5 = RequestsManager.PIRContext.prepareDataRequests(keywords:shardIds:)(v4, v2);
  uint64_t v6 = v0[18];
  if (v1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    int v7 = (uint64_t (*)(void))v0[1];
    return v7();
  }
  else
  {
    uint64_t v9 = v5;
    swift_bridgeObjectRelease();
    v0[20] = v9;
    v0[21] = v6;
    uint64_t v10 = (void *)swift_task_alloc();
    v0[22] = v10;
    *uint64_t v10 = v0;
    v10[1] = specialized RequestsManager.generateData(keywords:networkManager:context:cachedAndMissing:);
    uint64_t v11 = v0[9];
    uint64_t v12 = v0[10];
    uint64_t v13 = v0[7];
    uint64_t v14 = v0[6];
    return RequestsManager.PIRContext.requestData(missingKeywords:availableResults:allKeywords:requests:networkManager:symmetricPirKeywords:)(v12, v11, v14, v9, v13, v6);
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t specialized RequestsManager.generateData(keywords:networkManager:context:cachedAndMissing:)(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[18] = a1;
  v3[19] = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v3[1];
    return v4();
  }
  else
  {
    return MEMORY[0x270FA2498](specialized RequestsManager.generateData(keywords:networkManager:context:cachedAndMissing:), 0, 0);
  }
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v7;

  uint64_t v4 = *v2;
  *(void *)(v4 + 184) = v1;
  swift_task_dealloc();
  if (v1)
  {
    return MEMORY[0x270FA2498](specialized RequestsManager.generateData(keywords:networkManager:context:cachedAndMissing:), 0, 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = *(uint64_t (**)(uint64_t))(v4 + 8);
    return v5(a1);
  }
}

uint64_t sub_249CD8E18()
{
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestContext<StaticPIRParameters>)
             - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = *(void *)(*(void *)v1 + 64);
  uint64_t v5 = (int *)type metadata accessor for RequestsManager.PIRContext();
  uint64_t v6 = *(unsigned __int8 *)(*((void *)v5 - 1) + 80);
  uint64_t v28 = *(void *)(*((void *)v5 - 1) + 64);
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  uint64_t v7 = v0 + v3 + v1[10];
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v7, 2, v8))
  {
    uint64_t v26 = v4;
    uint64_t v9 = type metadata accessor for URL();
    uint64_t v10 = *(void *)(v9 - 8);
    uint64_t v25 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    v25(v7, v9);
    uint64_t v11 = v7 + *(int *)(v8 + 48);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v11, 1, v9)) {
      v25(v11, v9);
    }
    uint64_t v12 = (uint64_t *)(v7 + *(int *)(v8 + 64));
    unint64_t v13 = v12[1];
    uint64_t v4 = v26;
    if (v13 >> 60 != 15) {
      outlined consume of Data._Representation(*v12, v13);
    }
  }
  unint64_t v14 = (v6 + ((((((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v6;
  uint64_t v27 = v2 | v6 | 7;
  type metadata accessor for NetworkConfig(0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v15 = v0 + v14 + v5[5];
  uint64_t v16 = type metadata accessor for Date();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(v15, v16);
  unint64_t v17 = v15 + *(int *)(type metadata accessor for UserIdentifier() + 20);
  uint64_t v18 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(v17, v18);
  swift_bridgeObjectRelease();
  unint64_t v19 = v0 + v14 + v5[6];
  uint64_t v20 = type metadata accessor for UnknownStorage();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v20 - 8) + 8))(v19, v20);
  type metadata accessor for AspireApiPIRConfig(0);
  swift_release();
  outlined consume of Data._Representation(*(void *)(v0 + v14 + v5[7]), *(void *)(v0 + v14 + v5[7] + 8));
  uint64_t v21 = v5[8];
  unint64_t v22 = v0 + v14 + v21 + *(int *)(type metadata accessor for SecretKey() + 20);
  uint64_t v23 = type metadata accessor for HE.SerializedSecretKey();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v23 - 8) + 8))(v22, v23);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, ((v28 + v14 + 7) & 0xFFFFFFFFFFFFFFF8) + 24, v27);
}

uint64_t partial apply for closure #3 in RequestsManager.requestDataWithAsyncResponse(keywords:context:)()
{
  uint64_t v2 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestContext<StaticPIRParameters>)
                 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = (((v4 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)(type metadata accessor for RequestsManager.PIRContext() - 8);
  unint64_t v7 = (*(unsigned __int8 *)(v6 + 80) + v5 + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = v0 + v3;
  uint64_t v9 = (uint64_t *)(v0 + v4);
  uint64_t v10 = *(void *)(v0 + v5);
  uint64_t v11 = *v9;
  uint64_t v12 = v9[1];
  uint64_t v13 = v0 + v7;
  unint64_t v14 = (long long *)(v0 + ((*(void *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v15 = *((void *)v14 + 2);
  uint64_t v16 = swift_task_alloc();
  long long v17 = *v14;
  *(void *)(v1 + 16) = v16;
  *(void *)uint64_t v16 = v1;
  *(void *)(v16 + 8) = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  *(void *)(v16 + 200) = v15;
  *(_OWORD *)(v16 + 184) = v17;
  *(void *)(v16 + 168) = v10;
  *(void *)(v16 + 176) = v13;
  *(void *)(v16 + 152) = v11;
  *(void *)(v16 + 160) = v12;
  *(void *)(v16 + 144) = v8;
  return MEMORY[0x270FA2498](closure #3 in RequestsManager.requestDataWithAsyncResponse(keywords:context:), 0, 0);
}

uint64_t sub_249CD9428()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 64, 7);
}

uint64_t partial apply for closure #2 in RequestsManager.requestDataWithAsyncResponse(keywords:context:)()
{
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = *(void *)(v0 + 56);
  uint64_t v4 = swift_task_alloc();
  long long v5 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + 16) = v4;
  *(void *)uint64_t v4 = v1;
  *(void *)(v4 + 8) = protocol witness for NetworkManager.uploadKeys(evaluationKeys:userId:) in conformance AspireNetworkManager;
  *(void *)(v4 + 40) = v2;
  *(void *)(v4 + 48) = v3;
  *(_OWORD *)(v4 + 24) = v5;
  return MEMORY[0x270FA2498](closure #2 in RequestsManager.requestDataWithAsyncResponse(keywords:context:), 0, 0);
}

char *specialized RequestsManager.decryptPIRServiceResponse(serviceResponse:keyword:context:shardId:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v29 = a5;
  uint64_t v31 = a6;
  uint64_t v9 = type metadata accessor for KeywordPIRClient();
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  unint64_t v14 = (char *)&v27 - v13;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  MEMORY[0x270FA5388](v15 - 8);
  long long v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for AspireApiPIRResponse(0);
  MEMORY[0x270FA5388](v18 - 8);
  uint64_t v20 = (uint64_t *)((char *)&v27 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v17, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  uint64_t v21 = type metadata accessor for AspireApiResponse.OneOf_Response(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 48))(v17, 1, v21) != 1)
  {
    uint64_t v22 = v31;
    uint64_t v28 = a2;
    if (swift_getEnumCaseMultiPayload())
    {
      outlined destroy of AspirePirKeywordPirParameters((uint64_t)v17, type metadata accessor for AspireApiResponse.OneOf_Response);
      goto LABEL_5;
    }
    outlined init with take of AspirePirSymmetricPirClientConfig((uint64_t)v17, (uint64_t)v20, type metadata accessor for AspireApiPIRResponse);
    if (v22)
    {
      uint64_t v24 = v30;
      RequestsManager.PIRContext.constructPIRClient(shardId:)(v29, v22, (uint64_t)v11);
      if (!v24)
      {
        uint64_t v25 = v28;
LABEL_12:
        outlined init with take of AspirePirSymmetricPirClientConfig((uint64_t)v11, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for KeywordPIRClient);
        long long v17 = (char *)KeywordPIRClient.decryptPIRResponse(_:keyword:)(v20, v25, a3);
        outlined destroy of AspirePirKeywordPirParameters((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for KeywordPIRClient);
        outlined destroy of AspirePirKeywordPirParameters((uint64_t)v20, type metadata accessor for AspireApiPIRResponse);
        return v17;
      }
    }
    else
    {
      uint64_t v25 = v28;
      uint64_t v26 = v30;
      RequestsManager.PIRContext.constructPIRClient(keyword:)(v28, a3, (uint64_t)v11);
      if (!v26) {
        goto LABEL_12;
      }
    }
    outlined destroy of AspirePirKeywordPirParameters((uint64_t)v20, type metadata accessor for AspireApiPIRResponse);
    return v17;
  }
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v17, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
LABEL_5:
  long long v17 = (char *)type metadata accessor for CipherMLError();
  _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
  swift_allocError();
  swift_storeEnumTagMultiPayload();
  swift_willThrow();
  return v17;
}

char *partial apply for closure #1 in RequestsManager.decryptPIRBatchResponse(encryptedResponses:keywords:context:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return specialized RequestsManager.decryptPIRServiceResponse(serviceResponse:keyword:context:shardId:)(a1, a2, a3, *(void *)(v3 + 24), 0, 0);
}

uint64_t *initializeBufferWithCopyOfBuffer for RequestsManager.PIRContext(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v36 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v36 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Date();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = type metadata accessor for UserIdentifier();
    uint64_t v14 = *(int *)(v13 + 20);
    uint64_t v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    uint64_t v17 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16))(v15, v16, v17);
    *(void *)&v9[*(int *)(v13 + 24)] = *(void *)&v10[*(int *)(v13 + 24)];
    uint64_t v18 = a3[6];
    uint64_t v19 = (char *)v4 + v18;
    uint64_t v20 = (char *)a2 + v18;
    uint64_t v21 = type metadata accessor for UnknownStorage();
    uint64_t v22 = *(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16);
    swift_bridgeObjectRetain();
    v22(v19, v20, v21);
    uint64_t v23 = type metadata accessor for AspireApiPIRConfig(0);
    *(void *)&v19[*(int *)(v23 + 20)] = *(void *)&v20[*(int *)(v23 + 20)];
    uint64_t v24 = a3[7];
    uint64_t v25 = (uint64_t *)((char *)v4 + v24);
    uint64_t v26 = (uint64_t *)((char *)a2 + v24);
    uint64_t v27 = *v26;
    unint64_t v28 = v26[1];
    swift_retain();
    outlined copy of Data._Representation(v27, v28);
    uint64_t *v25 = v27;
    v25[1] = v28;
    uint64_t v29 = a3[8];
    uint64_t v30 = (char *)v4 + v29;
    uint64_t v31 = (char *)a2 + v29;
    *(uint64_t *)((char *)v4 + v29) = *(uint64_t *)((char *)a2 + v29);
    uint64_t v32 = *(int *)(type metadata accessor for SecretKey() + 20);
    uint64_t v33 = &v30[v32];
    uint64_t v34 = &v31[v32];
    uint64_t v35 = type metadata accessor for HE.SerializedSecretKey();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 16))(v33, v34, v35);
    *(_OWORD *)((char *)v4 + a3[9]) = *(_OWORD *)((char *)a2 + a3[9]);
    swift_unknownObjectRetain();
  }
  return v4;
}

uint64_t destroy for RequestsManager.PIRContext(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = v4 + *(int *)(type metadata accessor for UserIdentifier() + 20);
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();
  uint64_t v8 = a1 + a2[6];
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  type metadata accessor for AspireApiPIRConfig(0);
  swift_release();
  outlined consume of Data._Representation(*(void *)(a1 + a2[7]), *(void *)(a1 + a2[7] + 8));
  uint64_t v10 = a1 + a2[8];
  uint64_t v11 = v10 + *(int *)(type metadata accessor for SecretKey() + 20);
  uint64_t v12 = type metadata accessor for HE.SerializedSecretKey();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  return swift_unknownObjectRelease();
}

void *initializeWithCopy for RequestsManager.PIRContext(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  uint64_t v12 = type metadata accessor for UserIdentifier();
  uint64_t v13 = *(int *)(v12 + 20);
  uint64_t v14 = &v8[v13];
  uint64_t v15 = &v9[v13];
  uint64_t v16 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
  *(void *)&v8[*(int *)(v12 + 24)] = *(void *)&v9[*(int *)(v12 + 24)];
  uint64_t v17 = a3[6];
  uint64_t v18 = (char *)a1 + v17;
  uint64_t v19 = (char *)a2 + v17;
  uint64_t v20 = type metadata accessor for UnknownStorage();
  uint64_t v21 = *(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16);
  swift_bridgeObjectRetain();
  v21(v18, v19, v20);
  uint64_t v22 = type metadata accessor for AspireApiPIRConfig(0);
  *(void *)&v18[*(int *)(v22 + 20)] = *(void *)&v19[*(int *)(v22 + 20)];
  uint64_t v23 = a3[7];
  uint64_t v24 = (void *)((char *)a1 + v23);
  uint64_t v25 = (void *)((char *)a2 + v23);
  uint64_t v26 = *v25;
  unint64_t v27 = v25[1];
  swift_retain();
  outlined copy of Data._Representation(v26, v27);
  *uint64_t v24 = v26;
  v24[1] = v27;
  uint64_t v28 = a3[8];
  uint64_t v29 = (char *)a1 + v28;
  uint64_t v30 = (char *)a2 + v28;
  *(void *)((char *)a1 + v28) = *(void *)((char *)a2 + v28);
  uint64_t v31 = *(int *)(type metadata accessor for SecretKey() + 20);
  uint64_t v32 = &v29[v31];
  uint64_t v33 = &v30[v31];
  uint64_t v34 = type metadata accessor for HE.SerializedSecretKey();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 16))(v32, v33, v34);
  *(_OWORD *)((char *)a1 + a3[9]) = *(_OWORD *)((char *)a2 + a3[9]);
  swift_unknownObjectRetain();
  return a1;
}

void *assignWithCopy for RequestsManager.PIRContext(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = type metadata accessor for UserIdentifier();
  uint64_t v11 = *(int *)(v10 + 20);
  uint64_t v12 = &v7[v11];
  uint64_t v13 = &v8[v11];
  uint64_t v14 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 24))(v12, v13, v14);
  *(void *)&v7[*(int *)(v10 + 24)] = *(void *)&v8[*(int *)(v10 + 24)];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v15 = a3[6];
  uint64_t v16 = (char *)a1 + v15;
  uint64_t v17 = (char *)a2 + v15;
  uint64_t v18 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 24))(v16, v17, v18);
  uint64_t v19 = type metadata accessor for AspireApiPIRConfig(0);
  *(void *)&v16[*(int *)(v19 + 20)] = *(void *)&v17[*(int *)(v19 + 20)];
  swift_retain();
  swift_release();
  uint64_t v20 = a3[7];
  uint64_t v21 = (void *)((char *)a1 + v20);
  uint64_t v22 = (void *)((char *)a2 + v20);
  uint64_t v23 = *v22;
  unint64_t v24 = v22[1];
  outlined copy of Data._Representation(*v22, v24);
  uint64_t v25 = *v21;
  unint64_t v26 = v21[1];
  *uint64_t v21 = v23;
  v21[1] = v24;
  outlined consume of Data._Representation(v25, v26);
  uint64_t v27 = a3[8];
  uint64_t v28 = (char *)a1 + v27;
  uint64_t v29 = (char *)a2 + v27;
  *(void *)((char *)a1 + v27) = *(void *)((char *)a2 + v27);
  uint64_t v30 = *(int *)(type metadata accessor for SecretKey() + 20);
  uint64_t v31 = &v28[v30];
  uint64_t v32 = &v29[v30];
  uint64_t v33 = type metadata accessor for HE.SerializedSecretKey();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v33 - 8) + 24))(v31, v32, v33);
  uint64_t v34 = a3[9];
  uint64_t v35 = (void *)((char *)a1 + v34);
  uint64_t v36 = (void *)((char *)a2 + v34);
  uint64_t v37 = v36[1];
  *uint64_t v35 = *v36;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  v35[1] = v37;
  return a1;
}

_OWORD *initializeWithTake for RequestsManager.PIRContext(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = type metadata accessor for UserIdentifier();
  uint64_t v11 = *(int *)(v10 + 20);
  uint64_t v12 = &v7[v11];
  uint64_t v13 = &v8[v11];
  uint64_t v14 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
  *(void *)&v7[*(int *)(v10 + 24)] = *(void *)&v8[*(int *)(v10 + 24)];
  uint64_t v15 = a3[6];
  uint64_t v16 = (char *)a1 + v15;
  uint64_t v17 = (char *)a2 + v15;
  uint64_t v18 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v16, v17, v18);
  uint64_t v19 = type metadata accessor for AspireApiPIRConfig(0);
  *(void *)&v16[*(int *)(v19 + 20)] = *(void *)&v17[*(int *)(v19 + 20)];
  uint64_t v20 = a3[8];
  *(_OWORD *)((char *)a1 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
  uint64_t v21 = (char *)a1 + v20;
  uint64_t v22 = (char *)a2 + v20;
  *(void *)((char *)a1 + v20) = *(void *)((char *)a2 + v20);
  uint64_t v23 = *(int *)(type metadata accessor for SecretKey() + 20);
  unint64_t v24 = &v21[v23];
  uint64_t v25 = &v22[v23];
  uint64_t v26 = type metadata accessor for HE.SerializedSecretKey();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 32))(v24, v25, v26);
  *(_OWORD *)((char *)a1 + a3[9]) = *(_OWORD *)((char *)a2 + a3[9]);
  return a1;
}

void *assignWithTake for RequestsManager.PIRContext(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = type metadata accessor for UserIdentifier();
  uint64_t v12 = *(int *)(v11 + 20);
  uint64_t v13 = &v8[v12];
  uint64_t v14 = &v9[v12];
  uint64_t v15 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 40))(v13, v14, v15);
  *(void *)&v8[*(int *)(v11 + 24)] = *(void *)&v9[*(int *)(v11 + 24)];
  swift_bridgeObjectRelease();
  uint64_t v16 = a3[6];
  uint64_t v17 = (char *)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  uint64_t v19 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 40))(v17, v18, v19);
  uint64_t v20 = type metadata accessor for AspireApiPIRConfig(0);
  *(void *)&v17[*(int *)(v20 + 20)] = *(void *)&v18[*(int *)(v20 + 20)];
  swift_release();
  uint64_t v21 = a3[7];
  uint64_t v22 = *(void *)((char *)a1 + v21);
  unint64_t v23 = *(void *)((char *)a1 + v21 + 8);
  *(_OWORD *)((char *)a1 + v21) = *(_OWORD *)((char *)a2 + v21);
  outlined consume of Data._Representation(v22, v23);
  uint64_t v24 = a3[8];
  uint64_t v25 = (char *)a1 + v24;
  uint64_t v26 = (char *)a2 + v24;
  *(void *)((char *)a1 + v24) = *(void *)((char *)a2 + v24);
  uint64_t v27 = *(int *)(type metadata accessor for SecretKey() + 20);
  uint64_t v28 = &v25[v27];
  uint64_t v29 = &v26[v27];
  uint64_t v30 = type metadata accessor for HE.SerializedSecretKey();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 40))(v28, v29, v30);
  uint64_t v31 = a3[9];
  uint64_t v32 = (void *)((char *)a1 + v31);
  uint64_t v33 = (void *)((char *)a2 + v31);
  uint64_t v34 = v33[1];
  *uint64_t v32 = *v33;
  swift_unknownObjectRelease();
  v32[1] = v34;
  return a1;
}

uint64_t getEnumTagSinglePayload for RequestsManager.PIRContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_249CDA4F4);
}

uint64_t sub_249CDA4F4(uint64_t a1, uint64_t a2, int *a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  uint64_t v8 = type metadata accessor for UserIdentifier();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a2)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a3[5];
LABEL_9:
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
    return v13(a1 + v11, a2, v9);
  }
  uint64_t v12 = type metadata accessor for AspireApiPIRConfig(0);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a2)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a3[6];
    goto LABEL_9;
  }
  uint64_t v14 = type metadata accessor for SecretKey();
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
  uint64_t v16 = v14;
  uint64_t v17 = a1 + a3[8];
  return v15(v17, a2, v16);
}

uint64_t storeEnumTagSinglePayload for RequestsManager.PIRContext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_249CDA680);
}

uint64_t sub_249CDA680(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
    return result;
  }
  uint64_t v8 = type metadata accessor for UserIdentifier();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[5];
LABEL_7:
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return v13(v5 + v11, a2, a2, v9);
  }
  uint64_t v12 = type metadata accessor for AspireApiPIRConfig(0);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a3)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a4[6];
    goto LABEL_7;
  }
  uint64_t v14 = type metadata accessor for SecretKey();
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
  uint64_t v16 = v14;
  uint64_t v17 = v5 + a4[8];
  return v15(v17, a2, a2, v16);
}

uint64_t type metadata completion function for RequestsManager.PIRContext()
{
  uint64_t result = type metadata accessor for UserIdentifier();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for AspireApiPIRConfig(319);
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for SecretKey();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t destroy for RequestsManager.CachedAndMissingKeywords()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeBufferWithCopyOfBuffer for RequestsManager.CachedAndMissingKeywords(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for RequestsManager.CachedAndMissingKeywords(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for RequestsManager.CachedAndMissingKeywords(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for RequestsManager.CachedAndMissingKeywords(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RequestsManager.CachedAndMissingKeywords(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RequestsManager.CachedAndMissingKeywords()
{
  return &type metadata for RequestsManager.CachedAndMissingKeywords;
}

unint64_t type metadata accessor for NSObject()
{
  unint64_t result = lazy cache variable for type metadata for NSObject;
  if (!lazy cache variable for type metadata for NSObject)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  }
  return result;
}

uint64_t sub_249CDAB50()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TA(uint64_t a1)
{
  unint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu
                                              + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu);
  return v6(a1, v4);
}

uint64_t partial apply for closure #1 in SymmetricPIRClient.blind(keywords:)(uint64_t a1, void *a2)
{
  return closure #1 in SymmetricPIRClient.blind(keywords:)(a1, *(void *)(v2 + 16), a2);
}

uint64_t partial apply for closure #1 in SymmetricPIRClient.validateThenHash(blindedKeywords:oprfResponses:)()
{
  return closure #1 in SymmetricPIRClient.validateThenHash(blindedKeywords:oprfResponses:)();
}

double partial apply for closure #2 in SymmetricPIRClient.validateThenHash(blindedKeywords:oprfResponses:)@<D0>(uint64_t *a1@<X0>, __n128 *a2@<X8>)
{
  *(void *)&double result = closure #2 in SymmetricPIRClient.validateThenHash(blindedKeywords:oprfResponses:)(a1, *(void *)(v2 + 16), a2).n128_u64[0];
  return result;
}

uint64_t outlined copy of Data??(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 11) {
    return outlined copy of Data?(a1, a2);
  }
  return a1;
}

uint64_t outlined consume of Data??(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 11) {
    return outlined consume of Data?(a1, a2);
  }
  return a1;
}

uint64_t partial apply for closure #1 in KeyRotation.runWithCoordinator(useCase:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return closure #1 in KeyRotation.runWithCoordinator(useCase:)(a1, v4, v5, v6);
}

uint64_t objectdestroy_51Tm()
{
  swift_release();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t closure #1 in KeyRotation.runWithCoordinator(useCase:)partial apply(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = protocol witness for NetworkManager.uploadKeys(evaluationKeys:userId:) in conformance AspireNetworkManager;
  return closure #1 in KeyRotation.runWithCoordinator(useCase:)(a1, v4, v5, v6);
}

uint64_t partial apply for closure #1 in closure #1 in RequestsManager.PIRContext.requestOPRFData(for:networkManager:)(uint64_t *a1)
{
  return closure #1 in closure #1 in RequestsManager.PIRContext.requestOPRFData(for:networkManager:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t partial apply for closure #2 in closure #1 in RequestsManager.PIRContext.requestOPRFData(for:networkManager:)(void *a1)
{
  return closure #1 in closure #1 in RequestsManager.PIRContext.prepareDataRequests(keywords:shardIds:)(a1, *(uint64_t **)(v1 + 16), *(void *)(v1 + 24), type metadata accessor for AspireApiOPRFRequest);
}

uint64_t _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_1(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with take of SymmetricPirClientConfig?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t partial apply for closure #1 in closure #1 in RequestsManager.PIRContext.prepareDataRequests(keywords:shardIds:)(void *a1)
{
  return closure #1 in closure #1 in RequestsManager.PIRContext.prepareDataRequests(keywords:shardIds:)(a1, *(uint64_t **)(v1 + 16), *(void *)(v1 + 24), type metadata accessor for AspireApiPIRRequest);
}

uint64_t outlined destroy of AspirePirKeywordPirParameters(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with copy of UserIdentifier(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with take of AspirePirSymmetricPirClientConfig(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t closure #1 in RequestsManager.PIRContext.decryptKeywordPIRResponses(_:for:)partial apply(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return partial apply for closure #1 in RequestsManager.PIRContext.decryptKeywordPIRResponses(_:for:)(a1, a2, a3);
}

uint64_t partial apply for closure #1 in closure #2 in RequestsManager.PIRContext.prepareDataRequests(keywords:shardIds:)(void *a1)
{
  return partial apply for closure #1 in closure #1 in RequestsManager.PIRContext.prepareDataRequests(keywords:shardIds:)(a1);
}

void NetworkManagerType.hash(into:)(uint64_t a1)
{
  uint64_t v34 = a1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v29 - v6;
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v29 - v13;
  uint64_t v15 = type metadata accessor for NetworkManagerType(0);
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v17 = (char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of NetworkManagerType(v1, (uint64_t)v17, type metadata accessor for NetworkManagerType);
  uint64_t v18 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
  int v19 = (*(uint64_t (**)(char *, uint64_t, int *))(*((void *)v18 - 1) + 48))(v17, 2, v18);
  if (v19)
  {
    if (v19 == 1) {
      Swift::UInt v20 = 0;
    }
    else {
      Swift::UInt v20 = 2;
    }
    Hasher._combine(_:)(v20);
  }
  else
  {
    uint64_t v21 = &v17[v18[12]];
    uint64_t v22 = &v17[v18[16]];
    uint64_t v23 = *(void *)v22;
    unint64_t v31 = *((void *)v22 + 1);
    uint64_t v32 = v23;
    int v30 = v17[v18[20]];
    uint64_t v29 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    v29(v14, v17, v8);
    uint64_t v24 = (uint64_t)v21;
    uint64_t v25 = v9;
    outlined init with take of SymmetricPirClientConfig?(v24, (uint64_t)v7, &demangling cache variable for type metadata for URL?);
    Hasher._combine(_:)(1uLL);
    lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
    uint64_t v33 = v14;
    dispatch thunk of Hashable.hash(into:)();
    uint64_t v26 = (uint64_t)v7;
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v7, (uint64_t)v4, &demangling cache variable for type metadata for URL?);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v4, 1, v8) == 1)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      v29(v11, v4, v8);
      Hasher._combine(_:)(1u);
      dispatch thunk of Hashable.hash(into:)();
      (*(void (**)(char *, uint64_t))(v25 + 8))(v11, v8);
    }
    unint64_t v28 = v31;
    uint64_t v27 = v32;
    if (v31 >> 60 == 15)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      outlined copy of Data._Representation(v27, v28);
      Data.hash(into:)();
      outlined consume of Data?(v27, v28);
    }
    Hasher._combine(_:)(v30);
    outlined consume of Data?(v27, v28);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v26, &demangling cache variable for type metadata for URL?);
    (*(void (**)(char *, uint64_t))(v25 + 8))(v33, v8);
  }
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance NetworkManagerType.AmsCodingKeys()
{
  return 0;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance NetworkManagerType.AmsCodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = 1;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance NetworkManagerType.AmsCodingKeys()
{
  return 0;
}

void protocol witness for CodingKey.init(intValue:) in conformance NetworkManagerType.AmsCodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NetworkManagerType.AmsCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type NetworkManagerType.AmsCodingKeys and conformance NetworkManagerType.AmsCodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NetworkManagerType.AmsCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type NetworkManagerType.AmsCodingKeys and conformance NetworkManagerType.AmsCodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance NetworkManagerType.AspireCodingKeys()
{
  unint64_t result = 0x746E696F70646E65;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x726575737369;
      break;
    case 2:
      unint64_t result = 0xD000000000000013;
      break;
    case 3:
      unint64_t result = 0xD000000000000016;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance NetworkManagerType.AspireCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized NetworkManagerType.AspireCodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance NetworkManagerType.AspireCodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NetworkManagerType.AspireCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type NetworkManagerType.AspireCodingKeys and conformance NetworkManagerType.AspireCodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NetworkManagerType.AspireCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type NetworkManagerType.AspireCodingKeys and conformance NetworkManagerType.AspireCodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance NetworkManagerType.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NetworkManagerType.AspireCodingKeys()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance NetworkManagerType.CodingKeys()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NetworkManagerType.AspireCodingKeys()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance NetworkManagerType.CodingKeys()
{
  uint64_t v1 = 0x657269707361;
  if (*v0 != 1) {
    uint64_t v1 = 0x656E696C66666FLL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 7564641;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance NetworkManagerType.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized NetworkManagerType.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance NetworkManagerType.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NetworkManagerType.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type NetworkManagerType.CodingKeys and conformance NetworkManagerType.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NetworkManagerType.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type NetworkManagerType.CodingKeys and conformance NetworkManagerType.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NetworkManagerType.OfflineCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type NetworkManagerType.OfflineCodingKeys and conformance NetworkManagerType.OfflineCodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NetworkManagerType.OfflineCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type NetworkManagerType.OfflineCodingKeys and conformance NetworkManagerType.OfflineCodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t NetworkManagerType.encode(to:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NetworkManagerType.OfflineCodingKeys>);
  uint64_t v39 = *(void *)(v2 - 8);
  uint64_t v40 = v2;
  MEMORY[0x270FA5388](v2);
  uint64_t v38 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NetworkManagerType.AspireCodingKeys>);
  uint64_t v37 = *(void *)(v45 - 8);
  MEMORY[0x270FA5388](v45);
  uint64_t v44 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v43 = (uint64_t)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v41 = *(void *)(v7 - 8);
  uint64_t v42 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NetworkManagerType.AmsCodingKeys>);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for NetworkManagerType(0);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NetworkManagerType.CodingKeys>);
  uint64_t v46 = *(void *)(v17 - 8);
  uint64_t v47 = v17;
  MEMORY[0x270FA5388](v17);
  int v19 = (char *)&v36 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NetworkManagerType.CodingKeys and conformance NetworkManagerType.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of NetworkManagerType(v49, (uint64_t)v16, type metadata accessor for NetworkManagerType);
  Swift::UInt v20 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
  int v21 = (*(uint64_t (**)(char *, uint64_t, int *))(*((void *)v20 - 1) + 48))(v16, 2, v20);
  if (v21)
  {
    if (v21 == 1)
    {
      LOBYTE(v50) = 0;
      lazy protocol witness table accessor for type NetworkManagerType.AmsCodingKeys and conformance NetworkManagerType.AmsCodingKeys();
      uint64_t v22 = v47;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    }
    else
    {
      LOBYTE(v50) = 2;
      lazy protocol witness table accessor for type NetworkManagerType.OfflineCodingKeys and conformance NetworkManagerType.OfflineCodingKeys();
      unint64_t v28 = v38;
      uint64_t v22 = v47;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v28, v40);
    }
    return (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v19, v22);
  }
  else
  {
    uint64_t v23 = (uint64_t)&v16[v20[12]];
    uint64_t v24 = (uint64_t *)&v16[v20[16]];
    uint64_t v25 = *v24;
    unint64_t v49 = v24[1];
    LODWORD(v40) = v16[v20[20]];
    (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v9, v16, v42);
    outlined init with take of SymmetricPirClientConfig?(v23, v43, &demangling cache variable for type metadata for URL?);
    LOBYTE(v50) = 1;
    lazy protocol witness table accessor for type NetworkManagerType.AspireCodingKeys and conformance NetworkManagerType.AspireCodingKeys();
    uint64_t v26 = v47;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    LOBYTE(v50) = 0;
    lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
    uint64_t v27 = v48;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    if (v27)
    {
      outlined consume of Data?(v25, v49);
      (*(void (**)(char *, uint64_t))(v37 + 8))(v44, v45);
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v43, &demangling cache variable for type metadata for URL?);
      (*(void (**)(char *, uint64_t))(v41 + 8))(v9, v42);
    }
    else
    {
      uint64_t v30 = v25;
      unint64_t v31 = v49;
      LOBYTE(v50) = 1;
      uint64_t v32 = v42;
      KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
      uint64_t v48 = (char *)v30;
      uint64_t v50 = v30;
      unint64_t v51 = v31;
      char v52 = 2;
      lazy protocol witness table accessor for type Data and conformance Data();
      KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
      LOBYTE(v50) = 3;
      KeyedEncodingContainer.encode(_:forKey:)();
      uint64_t v33 = v41;
      uint64_t v48 = v9;
      uint64_t v34 = v37;
      uint64_t v35 = v43;
      outlined consume of Data?(v30, v31);
      (*(void (**)(char *, uint64_t))(v34 + 8))(v44, v45);
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v35, &demangling cache variable for type metadata for URL?);
      (*(void (**)(char *, uint64_t))(v33 + 8))(v48, v32);
    }
    return (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v19, v26);
  }
}

Swift::Int NetworkManagerType.hashValue.getter()
{
  Hasher.init(_seed:)();
  NetworkManagerType.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t NetworkManagerType.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v50 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NetworkManagerType.OfflineCodingKeys>);
  uint64_t v47 = *(void *)(v3 - 8);
  uint64_t v48 = v3;
  MEMORY[0x270FA5388](v3);
  unint64_t v53 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NetworkManagerType.AspireCodingKeys>);
  uint64_t v44 = *(void *)(v49 - 8);
  MEMORY[0x270FA5388](v49);
  char v52 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NetworkManagerType.AmsCodingKeys>);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v45 = v6;
  uint64_t v46 = v7;
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NetworkManagerType.CodingKeys>);
  uint64_t v51 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for NetworkManagerType(0);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v42 - v17;
  uint64_t v19 = a1[3];
  unint64_t v54 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v19);
  lazy protocol witness table accessor for type NetworkManagerType.CodingKeys and conformance NetworkManagerType.CodingKeys();
  uint64_t v20 = (uint64_t)v55;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v20) {
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v54);
  }
  uint64_t v21 = v13;
  uint64_t v22 = v52;
  uint64_t v23 = v53;
  uint64_t v43 = v15;
  uint64_t v55 = v18;
  uint64_t v24 = KeyedDecodingContainer.allKeys.getter();
  uint64_t v25 = (char *)v24;
  if (*(void *)(v24 + 16) != 1)
  {
    uint64_t v27 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v29 = v28;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v29 = v21;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v27 - 8) + 104))(v29, *MEMORY[0x263F8DCB0], v27);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v51 + 8))(v12, v10);
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v54);
  }
  if (!*(unsigned char *)(v24 + 32))
  {
    char v56 = 0;
    lazy protocol witness table accessor for type NetworkManagerType.AmsCodingKeys and conformance NetworkManagerType.AmsCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v46 + 8))(v9, v45);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v51 + 8))(v12, v10);
    uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
    uint64_t v41 = (uint64_t)v55;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v55, 1, 2, v32);
    goto LABEL_10;
  }
  if (*(unsigned char *)(v24 + 32) == 1)
  {
    char v61 = 1;
    lazy protocol witness table accessor for type NetworkManagerType.AspireCodingKeys and conformance NetworkManagerType.AspireCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    type metadata accessor for URL();
    char v60 = 0;
    lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v26 = v51;
    unint64_t v53 = v25;
    uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
    uint64_t v36 = &v43[*(int *)(v35 + 48)];
    char v59 = 1;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v48 = (uint64_t)v36;
    uint64_t v37 = v35;
    char v58 = 2;
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    char v57 = 3;
    char v38 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v39 = *(int *)(v35 + 80);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v22, v49);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v26 + 8))(v12, v10);
    uint64_t v40 = (uint64_t)v43;
    v43[v39] = v38 & 1;
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v40, 0, 2, v37);
    uint64_t v41 = (uint64_t)v55;
    outlined init with take of NetworkManagerType(v40, (uint64_t)v55, type metadata accessor for NetworkManagerType);
LABEL_10:
    uint64_t v34 = (uint64_t)v54;
    uint64_t v31 = v50;
    goto LABEL_11;
  }
  char v62 = 2;
  lazy protocol witness table accessor for type NetworkManagerType.OfflineCodingKeys and conformance NetworkManagerType.OfflineCodingKeys();
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  uint64_t v31 = v50;
  (*(void (**)(char *, uint64_t))(v47 + 8))(v23, v48);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v51 + 8))(v12, v10);
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
  uint64_t v41 = (uint64_t)v55;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v55, 2, 2, v33);
  uint64_t v34 = (uint64_t)v54;
LABEL_11:
  outlined init with take of NetworkManagerType(v41, v31, type metadata accessor for NetworkManagerType);
  return __swift_destroy_boxed_opaque_existential_1Tm(v34);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NetworkManagerType()
{
  Hasher.init(_seed:)();
  NetworkManagerType.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NetworkManagerType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance NetworkManagerType(a1, a2, a3, (void (*)(unsigned char *))NetworkManagerType.hash(into:));
}

uint64_t protocol witness for Decodable.init(from:) in conformance NetworkManagerType@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return NetworkManagerType.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NetworkManagerType(void *a1)
{
  return NetworkManagerType.encode(to:)(a1);
}

uint64_t NetworkConfig.type.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of NetworkManagerType(v1, a1, type metadata accessor for NetworkManagerType);
}

uint64_t NetworkConfig.secondaryIdentifier.getter()
{
  return NetworkConfig.secondaryIdentifier.getter(type metadata accessor for NetworkConfig);
}

void NetworkConfig.hash(into:)(uint64_t a1)
{
  NetworkManagerType.hash(into:)(a1);
  if (*(void *)(v1 + *(int *)(type metadata accessor for NetworkConfig(0) + 20) + 8))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance NetworkConfig.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance NetworkConfig.CodingKeys()
{
  if (*v0) {
    return 0xD000000000000013;
  }
  else {
    return 1701869940;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance NetworkConfig.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized NetworkConfig.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance NetworkConfig.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NetworkConfig.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type NetworkConfig.CodingKeys and conformance NetworkConfig.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NetworkConfig.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type NetworkConfig.CodingKeys and conformance NetworkConfig.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t NetworkConfig.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NetworkConfig.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NetworkConfig.CodingKeys and conformance NetworkConfig.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  type metadata accessor for NetworkManagerType(0);
  lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type NetworkManagerType and conformance NetworkManagerType, (void (*)(uint64_t))type metadata accessor for NetworkManagerType);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for NetworkConfig(0);
    v8[14] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int NetworkConfig.hashValue.getter()
{
  Hasher.init(_seed:)();
  NetworkManagerType.hash(into:)((uint64_t)v2);
  if (*(void *)(v0 + *(int *)(type metadata accessor for NetworkConfig(0) + 20) + 8))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

uint64_t NetworkConfig.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v23 = a2;
  uint64_t v4 = type metadata accessor for NetworkManagerType(0);
  MEMORY[0x270FA5388](v4);
  uint64_t v25 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NetworkConfig.CodingKeys>);
  uint64_t v24 = *(void *)(v26 - 8);
  MEMORY[0x270FA5388](v26);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for NetworkConfig(0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NetworkConfig.CodingKeys and conformance NetworkConfig.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  }
  uint64_t v22 = v8;
  uint64_t v11 = (uint64_t)v10;
  uint64_t v12 = v24;
  char v28 = 0;
  lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type NetworkManagerType and conformance NetworkManagerType, (void (*)(uint64_t))type metadata accessor for NetworkManagerType);
  uint64_t v14 = (uint64_t)v25;
  uint64_t v13 = v26;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  outlined init with take of NetworkManagerType(v14, v11, type metadata accessor for NetworkManagerType);
  char v27 = 1;
  uint64_t v15 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v17 = v16;
  (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v13);
  uint64_t v18 = v23;
  uint64_t v19 = (uint64_t *)(v11 + *(int *)(v22 + 20));
  uint64_t *v19 = v15;
  v19[1] = v17;
  outlined init with copy of NetworkManagerType(v11, v18, type metadata accessor for NetworkConfig);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  return outlined destroy of NetworkManagerType(v11, type metadata accessor for NetworkConfig);
}

uint64_t NetworkConfig.init(type:secondaryIdentifier:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return NetworkConfig.init(type:secondaryIdentifier:)(a1, a2, a3, type metadata accessor for NetworkManagerType, type metadata accessor for NetworkConfig, a4);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NetworkConfig(uint64_t a1)
{
  Hasher.init(_seed:)();
  NetworkManagerType.hash(into:)((uint64_t)v4);
  if (*(void *)(v1 + *(int *)(a1 + 20) + 8))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance NetworkConfig(uint64_t a1, uint64_t a2)
{
  NetworkManagerType.hash(into:)(a1);
  if (*(void *)(v2 + *(int *)(a2 + 20) + 8))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NetworkConfig(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  NetworkManagerType.hash(into:)((uint64_t)v5);
  if (*(void *)(v2 + *(int *)(a2 + 20) + 8))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance NetworkConfig@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return NetworkConfig.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NetworkConfig(void *a1)
{
  return NetworkConfig.encode(to:)(a1);
}

uint64_t NetworkManagerConfig.config.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of NetworkManagerType(v1, a1, type metadata accessor for NetworkConfig);
}

uint64_t NetworkManagerConfig.delegation.getter()
{
  return NetworkConfig.secondaryIdentifier.getter(type metadata accessor for NetworkManagerConfig);
}

uint64_t NetworkConfig.secondaryIdentifier.getter(uint64_t (*a1)(void))
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1(0) + 20));
  swift_bridgeObjectRetain();
  return v2;
}

void NetworkManagerConfig.hash(into:)(uint64_t a1)
{
  NetworkManagerType.hash(into:)(a1);
  if (*(void *)(v1 + *(int *)(type metadata accessor for NetworkConfig(0) + 20) + 8))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  if (*(void *)(v1 + *(int *)(type metadata accessor for NetworkManagerConfig(0) + 20) + 8))
  {
    Hasher._combine(_:)(1uLL);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance NetworkManagerConfig.CodingKeys()
{
  if (*v0) {
    return 0x69746167656C6564;
  }
  else {
    return 0x6769666E6F63;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance NetworkManagerConfig.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized NetworkManagerConfig.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NetworkManagerConfig.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type NetworkManagerConfig.CodingKeys and conformance NetworkManagerConfig.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NetworkManagerConfig.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type NetworkManagerConfig.CodingKeys and conformance NetworkManagerConfig.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t NetworkManagerConfig.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NetworkManagerConfig.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NetworkManagerConfig.CodingKeys and conformance NetworkManagerConfig.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v11) = 0;
  type metadata accessor for NetworkConfig(0);
  lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type NetworkConfig and conformance NetworkConfig, (void (*)(uint64_t))type metadata accessor for NetworkConfig);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    long long v11 = *(_OWORD *)(v3 + *(int *)(type metadata accessor for NetworkManagerConfig(0) + 20));
    v10[15] = 1;
    lazy protocol witness table accessor for type NetworkDelegationConfig and conformance NetworkDelegationConfig();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int NetworkManagerConfig.hashValue.getter()
{
  Hasher.init(_seed:)();
  NetworkManagerType.hash(into:)((uint64_t)v2);
  if (*(void *)(v0 + *(int *)(type metadata accessor for NetworkConfig(0) + 20) + 8))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  if (*(void *)(v0 + *(int *)(type metadata accessor for NetworkManagerConfig(0) + 20) + 8))
  {
    Hasher._combine(_:)(1uLL);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

uint64_t NetworkManagerConfig.init(config:delegation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return NetworkConfig.init(type:secondaryIdentifier:)(a1, a2, a3, type metadata accessor for NetworkConfig, type metadata accessor for NetworkManagerConfig, a4);
}

uint64_t NetworkConfig.init(type:secondaryIdentifier:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(void)@<X3>, uint64_t (*a5)(void)@<X4>, uint64_t a6@<X8>)
{
  outlined init with take of NetworkManagerType(a1, a6, a4);
  uint64_t result = a5(0);
  long long v11 = (void *)(a6 + *(int *)(result + 20));
  *long long v11 = a2;
  v11[1] = a3;
  return result;
}

uint64_t NetworkManagerConfig.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v16 = a2;
  uint64_t v4 = type metadata accessor for NetworkConfig(0);
  MEMORY[0x270FA5388](v4);
  uint64_t v19 = (uint64_t)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NetworkManagerConfig.CodingKeys>);
  uint64_t v17 = *(void *)(v6 - 8);
  uint64_t v18 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for NetworkManagerConfig(0);
  MEMORY[0x270FA5388](v9);
  long long v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NetworkManagerConfig.CodingKeys and conformance NetworkManagerConfig.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  }
  uint64_t v12 = (uint64_t)v11;
  uint64_t v13 = v17;
  LOBYTE(v20) = 0;
  lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type NetworkConfig and conformance NetworkConfig, (void (*)(uint64_t))type metadata accessor for NetworkConfig);
  uint64_t v14 = v18;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  outlined init with take of NetworkManagerType(v19, v12, type metadata accessor for NetworkConfig);
  char v21 = 1;
  lazy protocol witness table accessor for type NetworkDelegationConfig and conformance NetworkDelegationConfig();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v8, v14);
  *(_OWORD *)(v12 + *(int *)(v9 + 20)) = v20;
  outlined init with copy of NetworkManagerType(v12, v16, type metadata accessor for NetworkManagerConfig);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  return outlined destroy of NetworkManagerType(v12, type metadata accessor for NetworkManagerConfig);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NetworkManagerConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance NetworkManagerType(a1, a2, a3, (void (*)(unsigned char *))NetworkManagerConfig.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NetworkManagerType(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned char *))
{
  Hasher.init(_seed:)();
  a4(v6);
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance NetworkManagerConfig@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return NetworkManagerConfig.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NetworkManagerConfig(void *a1)
{
  return NetworkManagerConfig.encode(to:)(a1);
}

uint64_t one-time initialization function for shared()
{
  type metadata accessor for NetworkManagerHelper();
  uint64_t v0 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InMemoryLRUCache<NetworkManagerConfig, NetworkManager>);
  uint64_t v1 = (void *)swift_allocObject();
  type metadata accessor for NetworkManagerConfig(0);
  v1[4] = 0;
  v1[3] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InMemoryLRUCache<NetworkManagerConfig, NetworkManager>.LinkedListNode);
  lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type NetworkManagerConfig and conformance NetworkManagerConfig, (void (*)(uint64_t))type metadata accessor for NetworkManagerConfig);
  v1[2] = Dictionary.init(minimumCapacity:)();
  swift_beginAccess();
  v1[3] = 0;
  swift_release();
  v1[5] = 15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<InMemoryLRUCache<NetworkManagerConfig, NetworkManager>, os_unfair_lock_s>);
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 24) = 0;
  *(void *)(result + 16) = v1;
  *(void *)(v0 + 16) = result;
  static NetworkManagerHelper.shared = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  uint64_t v0 = type metadata accessor for URL();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for tokenCacheFile != -1) {
    swift_once();
  }
  uint64_t v4 = __swift_project_value_buffer(v0, (uint64_t)static CacheDirectory.tokenCacheFile);
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v4, v0);
  uint64_t result = specialized TokenCache.__allocating_init(file:currentDate:)((uint64_t)v3, (uint64_t)closure #1 in default argument 1 of TokenCache.init(file:currentDate:), 0);
  static TokenCache.shared = result;
  return result;
}

uint64_t NetworkManagerHelper.__allocating_init(cacheSize:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InMemoryLRUCache<NetworkManagerConfig, NetworkManager>);
  uint64_t v3 = (void *)swift_allocObject();
  type metadata accessor for NetworkManagerConfig(0);
  v3[4] = 0;
  v3[3] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InMemoryLRUCache<NetworkManagerConfig, NetworkManager>.LinkedListNode);
  lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type NetworkManagerConfig and conformance NetworkManagerConfig, (void (*)(uint64_t))type metadata accessor for NetworkManagerConfig);
  v3[2] = Dictionary.init(minimumCapacity:)();
  swift_beginAccess();
  v3[3] = 0;
  swift_release();
  void v3[5] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<InMemoryLRUCache<NetworkManagerConfig, NetworkManager>, os_unfair_lock_s>);
  uint64_t v4 = swift_allocObject();
  *(_DWORD *)(v4 + 24) = 0;
  *(void *)(v4 + 16) = v3;
  *(void *)(v2 + 16) = v4;
  return v2;
}

uint64_t *NetworkManagerHelper.shared.unsafeMutableAddressor()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  return &static NetworkManagerHelper.shared;
}

uint64_t static NetworkManagerHelper.shared.getter()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  return swift_retain();
}

uint64_t NetworkManagerHelper.cacheLock.getter()
{
  return swift_retain();
}

uint64_t NetworkManagerHelper.init(cacheSize:)(uint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InMemoryLRUCache<NetworkManagerConfig, NetworkManager>);
  uint64_t v3 = (void *)swift_allocObject();
  type metadata accessor for NetworkManagerConfig(0);
  v3[4] = 0;
  v3[3] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InMemoryLRUCache<NetworkManagerConfig, NetworkManager>.LinkedListNode);
  lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type NetworkManagerConfig and conformance NetworkManagerConfig, (void (*)(uint64_t))type metadata accessor for NetworkManagerConfig);
  v3[2] = Dictionary.init(minimumCapacity:)();
  swift_beginAccess();
  v3[3] = 0;
  swift_release();
  void v3[5] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<InMemoryLRUCache<NetworkManagerConfig, NetworkManager>, os_unfair_lock_s>);
  uint64_t v4 = swift_allocObject();
  *(_DWORD *)(v4 + 24) = 0;
  *(void *)(v4 + 16) = v3;
  *(void *)(v1 + 16) = v4;
  return v1;
}

uint64_t static NetworkManagerHelper.networkManager(managerConfig:)(uint64_t a1)
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)static NetworkManagerHelper.shared + 96))(a1);
}

uint64_t static NetworkManagerHelper.createNetworkManager(managerConfig:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  char v60 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v56 = (uint64_t)&v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v57 = (uint64_t)&v51 - v6;
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v51 - v8;
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v51 - v15;
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v51 - v18;
  uint64_t v20 = type metadata accessor for NetworkManagerType(0);
  MEMORY[0x270FA5388](v20 - 8);
  uint64_t v22 = (char *)&v51 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for NetworkConfig(0);
  MEMORY[0x270FA5388](v23);
  uint64_t v25 = (char *)&v51 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of NetworkManagerType(a1, (uint64_t)v25, type metadata accessor for NetworkConfig);
  uint64_t v26 = (uint64_t *)(a1 + *(int *)(type metadata accessor for NetworkManagerConfig(0) + 20));
  uint64_t v28 = *v26;
  uint64_t v27 = v26[1];
  uint64_t v58 = v28;
  uint64_t v59 = v27;
  outlined init with copy of NetworkManagerType(a1, (uint64_t)v22, type metadata accessor for NetworkManagerType);
  uint64_t v29 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
  int v30 = (*(uint64_t (**)(char *, uint64_t, int *))(*((void *)v29 - 1) + 48))(v22, 2, v29);
  if (!v30)
  {
    uint64_t v39 = (uint64_t)&v22[v29[12]];
    uint64_t v40 = (uint64_t *)&v22[v29[16]];
    uint64_t v41 = *v40;
    unint64_t v53 = v40[1];
    uint64_t v54 = v41;
    int v55 = v22[v29[20]];
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v16, v22, v10);
    uint64_t v42 = v57;
    outlined init with take of SymmetricPirClientConfig?(v39, v57, &demangling cache variable for type metadata for URL?);
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v13, v16, v10);
    uint64_t v43 = v56;
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v42, v56, &demangling cache variable for type metadata for URL?);
    uint64_t v44 = (uint64_t *)&v25[*(int *)(v23 + 20)];
    unint64_t v45 = v44[1];
    uint64_t v52 = *v44;
    uint64_t v46 = type metadata accessor for AspireNetworkManager();
    uint64_t v47 = v60;
    v60[3] = v46;
    v47[4] = (uint64_t)&protocol witness table for AspireNetworkManager;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v47);
    swift_bridgeObjectRetain();
    uint64_t v49 = v59;
    swift_bridgeObjectRetain();
    AspireNetworkManager.init(endpointUrl:issuerUrl:authenticationToken:networkDelegationConfig:privacyProxyFailClosed:secondaryIdentifier:)((uint64_t)v13, v43, v54, v53, v58, v49, v55, v52, (uint64_t)boxed_opaque_existential_1, v45);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v42, &demangling cache variable for type metadata for URL?);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
    return outlined destroy of NetworkManagerType((uint64_t)v25, type metadata accessor for NetworkConfig);
  }
  if (v30 == 1)
  {
    uint64_t v31 = (uint64_t *)&v25[*(int *)(v23 + 20)];
    uint64_t v32 = *v31;
    unint64_t v33 = v31[1];
    swift_bridgeObjectRetain();
    uint64_t v34 = v59;
    swift_bridgeObjectRetain();
    URL.init(string:)();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10);
    if (result != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v19, v9, v10);
      uint64_t v36 = type metadata accessor for AMSNetworking();
      swift_allocObject();
      uint64_t v37 = AMSNetworking.init(networkDelegationConfig:secondaryIdentifier:baseURL:)(v58, v34, v32, v33, (uint64_t)v19);
      char v38 = v60;
      v60[3] = v36;
      v38[4] = (uint64_t)&protocol witness table for AMSNetworking;
      uint64_t *v38 = v37;
      return outlined destroy of NetworkManagerType((uint64_t)v25, type metadata accessor for NetworkConfig);
    }
    __break(1u);
  }
  else
  {
    uint64_t result = outlined destroy of NetworkManagerType((uint64_t)v25, type metadata accessor for NetworkConfig);
    uint64_t v50 = v60;
    *(_OWORD *)char v60 = 0u;
    *((_OWORD *)v50 + 1) = 0u;
    v50[4] = 0;
  }
  return result;
}

uint64_t NetworkManagerHelper.networkManager(managerConfig:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for NetworkManagerConfig(0);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = &v13[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = *(os_unfair_lock_s **)(v2 + 16);
  uint64_t v14 = a1;
  uint64_t v9 = v8 + 4;
  uint64_t v10 = v8 + 6;
  os_unfair_lock_lock(v8 + 6);
  partial apply for closure #1 in NetworkManagerHelper.networkManager(managerConfig:)((uint64_t)v9);
  os_unfair_lock_unlock(v10);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v17, (uint64_t)&v15, &demangling cache variable for type metadata for NetworkManager?);
  if (v16)
  {
    outlined init with take of _HasContiguousBytes(&v15, a2);
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v17, &demangling cache variable for type metadata for NetworkManager?);
  }
  else
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)&v15, &demangling cache variable for type metadata for NetworkManager?);
    type metadata accessor for NetworkManagerHelper();
    static NetworkManagerHelper.createNetworkManager(managerConfig:)(a1, (uint64_t *)&v15);
    outlined assign with take of NetworkManager?((uint64_t)&v15, (uint64_t)v17);
    os_unfair_lock_lock(v10);
    uint64_t v12 = *(void *)&v9->_os_unfair_lock_opaque;
    outlined init with copy of NetworkManagerType(a1, (uint64_t)v7, type metadata accessor for NetworkManagerConfig);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v17, (uint64_t)&v15, &demangling cache variable for type metadata for NetworkManager?);
    (*(void (**)(long long *, unsigned char *))(*(void *)v12 + 248))(&v15, v7);
    os_unfair_lock_unlock(v10);
    return outlined init with take of SymmetricPirClientConfig?((uint64_t)v17, a2, &demangling cache variable for type metadata for NetworkManager?);
  }
}

uint64_t NetworkManagerHelper.deinit()
{
  swift_release();
  return v0;
}

uint64_t NetworkManagerHelper.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t specialized static NetworkManagerConfig.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((specialized static NetworkManagerType.== infix(_:_:)(a1, a2) & 1) == 0) {
    return 0;
  }
  uint64_t v4 = *(int *)(type metadata accessor for NetworkConfig(0) + 20);
  uint64_t v5 = (void *)(a1 + v4);
  uint64_t v6 = *(void *)(a1 + v4 + 8);
  uint64_t v7 = (void *)(a2 + v4);
  uint64_t v8 = v7[1];
  if (!v6)
  {
    if (v8) {
      return 0;
    }
    goto LABEL_11;
  }
  if (!v8) {
    return 0;
  }
  BOOL v9 = *v5 == *v7 && v6 == v8;
  if (v9 || (v10 = _stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t result = 0, (v10 & 1) != 0))
  {
LABEL_11:
    uint64_t v12 = *(int *)(type metadata accessor for NetworkManagerConfig(0) + 20);
    uint64_t v13 = (void *)(a1 + v12);
    uint64_t v14 = *(void *)(a1 + v12 + 8);
    long long v15 = (void *)(a2 + v12);
    uint64_t v16 = v15[1];
    if (v14)
    {
      if (v16)
      {
        BOOL v17 = *v13 == *v15 && v14 == v16;
        if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          return 1;
        }
      }
    }
    else if (!v16)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t specialized static NetworkManagerType.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v82 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL?, URL?));
  MEMORY[0x270FA5388](v82);
  uint64_t v83 = (uint64_t)&v65 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v81 = (uint64_t)&v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v84 = (uint64_t)&v65 - v8;
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v65 - v10;
  uint64_t v12 = type metadata accessor for URL();
  uint64_t v85 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v65 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  BOOL v17 = (char *)&v65 - v16;
  uint64_t v18 = type metadata accessor for NetworkManagerType(0);
  MEMORY[0x270FA5388](v18 - 8);
  uint64_t v20 = (char *)&v65 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NetworkManagerType, NetworkManagerType));
  MEMORY[0x270FA5388](v21 - 8);
  uint64_t v24 = (char *)&v65 + *(int *)(v23 + 56) - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = a1;
  uint64_t v26 = (char *)&v65 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of NetworkManagerType(v25, (uint64_t)v26, type metadata accessor for NetworkManagerType);
  outlined init with copy of NetworkManagerType(a2, (uint64_t)v24, type metadata accessor for NetworkManagerType);
  uint64_t v27 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
  uint64_t v28 = *(uint64_t (**)(char *, uint64_t, int *))(*((void *)v27 - 1) + 48);
  int v29 = v28(v26, 2, v27);
  if (v29)
  {
    if (v29 == 1)
    {
      if (v28(v24, 2, v27) != 1) {
        goto LABEL_9;
      }
LABEL_8:
      outlined destroy of NetworkManagerType((uint64_t)v26, type metadata accessor for NetworkManagerType);
      return 1;
    }
    if (v28(v24, 2, v27) == 2) {
      goto LABEL_8;
    }
LABEL_9:
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v26, &demangling cache variable for type metadata for (NetworkManagerType, NetworkManagerType));
    return 0;
  }
  uint64_t v75 = v14;
  unint64_t v76 = v17;
  uint64_t v77 = v11;
  uint64_t v78 = v26;
  uint64_t v80 = v12;
  outlined init with copy of NetworkManagerType((uint64_t)v26, (uint64_t)v20, type metadata accessor for NetworkManagerType);
  uint64_t v30 = v27[12];
  uint64_t v79 = &v20[v30];
  uint64_t v31 = v27[16];
  uint64_t v32 = *(void *)&v20[v31];
  unint64_t v33 = *(void *)&v20[v31 + 8];
  uint64_t v34 = v27[20];
  int v74 = v20[v34];
  if (v28(v24, 2, v27))
  {
    outlined consume of Data?(v32, v33);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v79, &demangling cache variable for type metadata for URL?);
    (*(void (**)(char *, uint64_t))(v85 + 8))(v20, v80);
    uint64_t v26 = v78;
    goto LABEL_9;
  }
  unint64_t v72 = v33;
  uint64_t v73 = v32;
  uint64_t v36 = (uint64_t)&v24[v30];
  uint64_t v37 = *(void *)&v24[v31];
  unint64_t v38 = *(void *)&v24[v31 + 8];
  int v68 = v24[v34];
  uint64_t v39 = v85;
  uint64_t v40 = *(void (**)(char *, uint64_t, uint64_t))(v85 + 32);
  uint64_t v41 = v76;
  uint64_t v42 = v80;
  uint64_t v70 = v85 + 32;
  uint64_t v71 = v37;
  uint64_t v69 = v40;
  v40(v76, (uint64_t)v24, v80);
  uint64_t v43 = (uint64_t)v77;
  outlined init with take of SymmetricPirClientConfig?((uint64_t)v79, (uint64_t)v77, &demangling cache variable for type metadata for URL?);
  uint64_t v44 = v84;
  unint64_t v45 = v41;
  outlined init with take of SymmetricPirClientConfig?(v36, v84, &demangling cache variable for type metadata for URL?);
  LOBYTE(v36) = MEMORY[0x24C5B21A0](v20, v41);
  uint64_t v46 = *(void (**)(char *, uint64_t))(v39 + 8);
  v46(v20, v42);
  if ((v36 & 1) == 0)
  {
    outlined consume of Data?(v71, v38);
    outlined consume of Data?(v73, v72);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v44, &demangling cache variable for type metadata for URL?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v43, &demangling cache variable for type metadata for URL?);
    v46(v45, v42);
LABEL_20:
    outlined destroy of NetworkManagerType((uint64_t)v78, type metadata accessor for NetworkManagerType);
    return 0;
  }
  uint64_t v79 = (char *)(v39 + 8);
  char v66 = v46;
  unint64_t v67 = v38;
  uint64_t v47 = v83;
  uint64_t v48 = v83 + *(int *)(v82 + 48);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v43, v83, &demangling cache variable for type metadata for URL?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v44, v48, &demangling cache variable for type metadata for URL?);
  uint64_t v49 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v39 + 48);
  int v50 = v49(v47, 1, v42);
  uint64_t v51 = v73;
  if (v50 == 1)
  {
    int v52 = v49(v48, 1, v42);
    unint64_t v53 = v66;
    uint64_t v54 = v42;
    if (v52 == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v47, &demangling cache variable for type metadata for URL?);
      unint64_t v55 = v67;
      uint64_t v56 = v71;
      goto LABEL_22;
    }
    goto LABEL_18;
  }
  uint64_t v57 = v81;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v47, v81, &demangling cache variable for type metadata for URL?);
  uint64_t v54 = v42;
  if (v49(v48, 1, v42) == 1)
  {
    unint64_t v53 = v66;
    v66((char *)v57, v42);
LABEL_18:
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v47, &demangling cache variable for type metadata for (URL?, URL?));
    unint64_t v55 = v67;
    uint64_t v56 = v71;
LABEL_19:
    outlined consume of Data?(v56, v55);
    outlined consume of Data?(v51, v72);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v84, &demangling cache variable for type metadata for URL?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v77, &demangling cache variable for type metadata for URL?);
    v53(v76, v54);
    goto LABEL_20;
  }
  uint64_t v58 = v75;
  v69(v75, v48, v42);
  lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
  char v59 = dispatch thunk of static Equatable.== infix(_:_:)();
  unint64_t v53 = v66;
  v66(v58, v42);
  v53((char *)v57, v42);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v47, &demangling cache variable for type metadata for URL?);
  unint64_t v55 = v67;
  uint64_t v56 = v71;
  if ((v59 & 1) == 0) {
    goto LABEL_19;
  }
LABEL_22:
  unint64_t v60 = v72;
  uint64_t v61 = (uint64_t)v77;
  if (v72 >> 60 != 15)
  {
    if (v55 >> 60 != 15)
    {
      outlined copy of Data?(v56, v55);
      outlined copy of Data?(v51, v60);
      char v63 = specialized static Data.== infix(_:_:)(v51, v60, v56, v55);
      outlined consume of Data?(v56, v55);
      outlined consume of Data?(v56, v55);
      outlined consume of Data?(v51, v60);
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v84, &demangling cache variable for type metadata for URL?);
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v61, &demangling cache variable for type metadata for URL?);
      v53(v76, v54);
      outlined consume of Data?(v51, v60);
      uint64_t v62 = (uint64_t)v78;
      if (v63) {
        goto LABEL_29;
      }
LABEL_30:
      outlined destroy of NetworkManagerType(v62, type metadata accessor for NetworkManagerType);
      return 0;
    }
    outlined copy of Data._Representation(v51, v72);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v84, &demangling cache variable for type metadata for URL?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v61, &demangling cache variable for type metadata for URL?);
    v53(v76, v54);
    outlined consume of Data?(v51, v60);
LABEL_27:
    outlined consume of Data?(v51, v60);
    outlined consume of Data?(v56, v55);
    uint64_t v62 = (uint64_t)v78;
    goto LABEL_30;
  }
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v84, &demangling cache variable for type metadata for URL?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v61, &demangling cache variable for type metadata for URL?);
  v53(v76, v54);
  if (v55 >> 60 != 15) {
    goto LABEL_27;
  }
  outlined consume of Data?(v51, v60);
  uint64_t v62 = (uint64_t)v78;
LABEL_29:
  int v64 = v74 ^ v68;
  outlined destroy of NetworkManagerType(v62, type metadata accessor for NetworkManagerType);
  return v64 ^ 1u;
}

uint64_t specialized static NetworkConfig.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (specialized static NetworkManagerType.== infix(_:_:)(a1, a2))
  {
    uint64_t v4 = *(int *)(type metadata accessor for NetworkConfig(0) + 20);
    uint64_t v5 = (void *)(a1 + v4);
    uint64_t v6 = *(void *)(a1 + v4 + 8);
    uint64_t v7 = (void *)(a2 + v4);
    uint64_t v8 = v7[1];
    if (v6)
    {
      if (v8)
      {
        BOOL v9 = *v5 == *v7 && v6 == v8;
        if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          return 1;
        }
      }
    }
    else if (!v8)
    {
      return 1;
    }
  }
  return 0;
}

unint64_t specialized static NetworkManagerHelper.inQaEnvironment()()
{
  id v0 = objc_allocWithZone(MEMORY[0x263EFFA40]);
  uint64_t v1 = (void *)MEMORY[0x24C5B33F0](0xD00000000000001ALL, 0x8000000249E94BD0);
  unint64_t v2 = (unint64_t)objc_msgSend(v0, sel_initWithSuiteName_, v1);

  if (v2)
  {
    uint64_t v3 = (void *)MEMORY[0x24C5B33F0](7761509, 0xE300000000000000);
    id v4 = objc_msgSend((id)v2, sel_objectForKey_, v3);

    if (v4)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v6, 0, sizeof(v6));
    }
    outlined init with take of SymmetricPirClientConfig?((uint64_t)v6, (uint64_t)&v7, &demangling cache variable for type metadata for Any?);
    unint64_t v2 = *((void *)&v8 + 1) != 0;
  }
  else
  {
    long long v7 = 0u;
    long long v8 = 0u;
  }
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)&v7, &demangling cache variable for type metadata for Any?);
  return v2;
}

void specialized static NetworkManagerHelper.configureSecondaryIdentifier(configuration:secondaryIdentifier:)(void *a1, uint64_t a2, unint64_t a3)
{
  if (a3)
  {
    swift_bridgeObjectRetain();
    if (specialized static NetworkManagerHelper.inQaEnvironment()())
    {
      if (one-time initialization token for networking != -1) {
        swift_once();
      }
      uint64_t v6 = type metadata accessor for Logger();
      __swift_project_value_buffer(v6, (uint64_t)static Logger.networking);
      swift_bridgeObjectRetain();
      long long v7 = Logger.logObject.getter();
      os_log_type_t v8 = static os_log_type_t.info.getter();
      if (!os_log_type_enabled(v7, v8))
      {

        swift_bridgeObjectRelease_n();
        return;
      }
      BOOL v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      uint64_t v16 = v10;
      *(_DWORD *)BOOL v9 = 136446210;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_249C3F000, v7, v8, "Skipping setting secondaryIdentifier = %{public}s because we are in a QA environment", v9, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C5B4790](v10, -1, -1);
      MEMORY[0x24C5B4790](v9, -1, -1);
    }
    else
    {
      if (one-time initialization token for networking != -1) {
        swift_once();
      }
      uint64_t v11 = type metadata accessor for Logger();
      __swift_project_value_buffer(v11, (uint64_t)static Logger.networking);
      swift_bridgeObjectRetain_n();
      uint64_t v12 = Logger.logObject.getter();
      os_log_type_t v13 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v12, v13))
      {
        uint64_t v14 = (uint8_t *)swift_slowAlloc();
        uint64_t v15 = swift_slowAlloc();
        uint64_t v16 = v15;
        *(_DWORD *)uint64_t v14 = 136446210;
        swift_bridgeObjectRetain();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, &v16);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_249C3F000, v12, v13, "Setting secondaryIdentifier %{public}s", v14, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x24C5B4790](v15, -1, -1);
        MEMORY[0x24C5B4790](v14, -1, -1);
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      long long v7 = MEMORY[0x24C5B33F0](a2, a3);
      swift_bridgeObjectRelease();
      objc_msgSend(a1, sel_set_sourceApplicationSecondaryIdentifier_, v7);
    }
  }
}

uint64_t type metadata accessor for NetworkManagerType(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for NetworkManagerType);
}

unint64_t lazy protocol witness table accessor for type NetworkManagerType.CodingKeys and conformance NetworkManagerType.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type NetworkManagerType.CodingKeys and conformance NetworkManagerType.CodingKeys;
  if (!lazy protocol witness table cache variable for type NetworkManagerType.CodingKeys and conformance NetworkManagerType.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkManagerType.CodingKeys and conformance NetworkManagerType.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NetworkManagerType.CodingKeys and conformance NetworkManagerType.CodingKeys;
  if (!lazy protocol witness table cache variable for type NetworkManagerType.CodingKeys and conformance NetworkManagerType.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkManagerType.CodingKeys and conformance NetworkManagerType.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NetworkManagerType.CodingKeys and conformance NetworkManagerType.CodingKeys;
  if (!lazy protocol witness table cache variable for type NetworkManagerType.CodingKeys and conformance NetworkManagerType.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkManagerType.CodingKeys and conformance NetworkManagerType.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NetworkManagerType.CodingKeys and conformance NetworkManagerType.CodingKeys;
  if (!lazy protocol witness table cache variable for type NetworkManagerType.CodingKeys and conformance NetworkManagerType.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkManagerType.CodingKeys and conformance NetworkManagerType.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NetworkManagerType.OfflineCodingKeys and conformance NetworkManagerType.OfflineCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type NetworkManagerType.OfflineCodingKeys and conformance NetworkManagerType.OfflineCodingKeys;
  if (!lazy protocol witness table cache variable for type NetworkManagerType.OfflineCodingKeys and conformance NetworkManagerType.OfflineCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkManagerType.OfflineCodingKeys and conformance NetworkManagerType.OfflineCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NetworkManagerType.OfflineCodingKeys and conformance NetworkManagerType.OfflineCodingKeys;
  if (!lazy protocol witness table cache variable for type NetworkManagerType.OfflineCodingKeys and conformance NetworkManagerType.OfflineCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkManagerType.OfflineCodingKeys and conformance NetworkManagerType.OfflineCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NetworkManagerType.OfflineCodingKeys and conformance NetworkManagerType.OfflineCodingKeys;
  if (!lazy protocol witness table cache variable for type NetworkManagerType.OfflineCodingKeys and conformance NetworkManagerType.OfflineCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkManagerType.OfflineCodingKeys and conformance NetworkManagerType.OfflineCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NetworkManagerType.AspireCodingKeys and conformance NetworkManagerType.AspireCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type NetworkManagerType.AspireCodingKeys and conformance NetworkManagerType.AspireCodingKeys;
  if (!lazy protocol witness table cache variable for type NetworkManagerType.AspireCodingKeys and conformance NetworkManagerType.AspireCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkManagerType.AspireCodingKeys and conformance NetworkManagerType.AspireCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NetworkManagerType.AspireCodingKeys and conformance NetworkManagerType.AspireCodingKeys;
  if (!lazy protocol witness table cache variable for type NetworkManagerType.AspireCodingKeys and conformance NetworkManagerType.AspireCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkManagerType.AspireCodingKeys and conformance NetworkManagerType.AspireCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NetworkManagerType.AspireCodingKeys and conformance NetworkManagerType.AspireCodingKeys;
  if (!lazy protocol witness table cache variable for type NetworkManagerType.AspireCodingKeys and conformance NetworkManagerType.AspireCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkManagerType.AspireCodingKeys and conformance NetworkManagerType.AspireCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NetworkManagerType.AspireCodingKeys and conformance NetworkManagerType.AspireCodingKeys;
  if (!lazy protocol witness table cache variable for type NetworkManagerType.AspireCodingKeys and conformance NetworkManagerType.AspireCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkManagerType.AspireCodingKeys and conformance NetworkManagerType.AspireCodingKeys);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type URL and conformance URL(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Data and conformance Data()
{
  unint64_t result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NetworkManagerType.AmsCodingKeys and conformance NetworkManagerType.AmsCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type NetworkManagerType.AmsCodingKeys and conformance NetworkManagerType.AmsCodingKeys;
  if (!lazy protocol witness table cache variable for type NetworkManagerType.AmsCodingKeys and conformance NetworkManagerType.AmsCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkManagerType.AmsCodingKeys and conformance NetworkManagerType.AmsCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NetworkManagerType.AmsCodingKeys and conformance NetworkManagerType.AmsCodingKeys;
  if (!lazy protocol witness table cache variable for type NetworkManagerType.AmsCodingKeys and conformance NetworkManagerType.AmsCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkManagerType.AmsCodingKeys and conformance NetworkManagerType.AmsCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NetworkManagerType.AmsCodingKeys and conformance NetworkManagerType.AmsCodingKeys;
  if (!lazy protocol witness table cache variable for type NetworkManagerType.AmsCodingKeys and conformance NetworkManagerType.AmsCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkManagerType.AmsCodingKeys and conformance NetworkManagerType.AmsCodingKeys);
  }
  return result;
}

uint64_t type metadata accessor for NetworkConfig(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, type metadata singleton initialization cache for NetworkConfig);
}

unint64_t lazy protocol witness table accessor for type NetworkConfig.CodingKeys and conformance NetworkConfig.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type NetworkConfig.CodingKeys and conformance NetworkConfig.CodingKeys;
  if (!lazy protocol witness table cache variable for type NetworkConfig.CodingKeys and conformance NetworkConfig.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkConfig.CodingKeys and conformance NetworkConfig.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NetworkConfig.CodingKeys and conformance NetworkConfig.CodingKeys;
  if (!lazy protocol witness table cache variable for type NetworkConfig.CodingKeys and conformance NetworkConfig.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkConfig.CodingKeys and conformance NetworkConfig.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NetworkConfig.CodingKeys and conformance NetworkConfig.CodingKeys;
  if (!lazy protocol witness table cache variable for type NetworkConfig.CodingKeys and conformance NetworkConfig.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkConfig.CodingKeys and conformance NetworkConfig.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NetworkConfig.CodingKeys and conformance NetworkConfig.CodingKeys;
  if (!lazy protocol witness table cache variable for type NetworkConfig.CodingKeys and conformance NetworkConfig.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkConfig.CodingKeys and conformance NetworkConfig.CodingKeys);
  }
  return result;
}

uint64_t outlined init with copy of NetworkManagerType(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of NetworkManagerType(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t type metadata accessor for NetworkManagerConfig(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for NetworkManagerConfig);
}

unint64_t lazy protocol witness table accessor for type NetworkManagerConfig.CodingKeys and conformance NetworkManagerConfig.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type NetworkManagerConfig.CodingKeys and conformance NetworkManagerConfig.CodingKeys;
  if (!lazy protocol witness table cache variable for type NetworkManagerConfig.CodingKeys and conformance NetworkManagerConfig.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkManagerConfig.CodingKeys and conformance NetworkManagerConfig.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NetworkManagerConfig.CodingKeys and conformance NetworkManagerConfig.CodingKeys;
  if (!lazy protocol witness table cache variable for type NetworkManagerConfig.CodingKeys and conformance NetworkManagerConfig.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkManagerConfig.CodingKeys and conformance NetworkManagerConfig.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NetworkManagerConfig.CodingKeys and conformance NetworkManagerConfig.CodingKeys;
  if (!lazy protocol witness table cache variable for type NetworkManagerConfig.CodingKeys and conformance NetworkManagerConfig.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkManagerConfig.CodingKeys and conformance NetworkManagerConfig.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NetworkManagerConfig.CodingKeys and conformance NetworkManagerConfig.CodingKeys;
  if (!lazy protocol witness table cache variable for type NetworkManagerConfig.CodingKeys and conformance NetworkManagerConfig.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkManagerConfig.CodingKeys and conformance NetworkManagerConfig.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NetworkDelegationConfig and conformance NetworkDelegationConfig()
{
  unint64_t result = lazy protocol witness table cache variable for type NetworkDelegationConfig and conformance NetworkDelegationConfig;
  if (!lazy protocol witness table cache variable for type NetworkDelegationConfig and conformance NetworkDelegationConfig)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkDelegationConfig and conformance NetworkDelegationConfig);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NetworkDelegationConfig and conformance NetworkDelegationConfig;
  if (!lazy protocol witness table cache variable for type NetworkDelegationConfig and conformance NetworkDelegationConfig)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkDelegationConfig and conformance NetworkDelegationConfig);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NetworkDelegationConfig and conformance NetworkDelegationConfig;
  if (!lazy protocol witness table cache variable for type NetworkDelegationConfig and conformance NetworkDelegationConfig)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkDelegationConfig and conformance NetworkDelegationConfig);
  }
  return result;
}

uint64_t outlined init with take of NetworkManagerType(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t partial apply for closure #1 in NetworkManagerHelper.networkManager(managerConfig:)(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 240))(*(void *)(v1 + 16));
}

uint64_t type metadata accessor for NetworkManagerHelper()
{
  return self;
}

uint64_t outlined assign with take of NetworkManager?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NetworkManager?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t base witness table accessor for Equatable in NetworkManagerType()
{
  return lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type NetworkManagerType and conformance NetworkManagerType, (void (*)(uint64_t))type metadata accessor for NetworkManagerType);
}

uint64_t base witness table accessor for Equatable in NetworkConfig()
{
  return lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type NetworkConfig and conformance NetworkConfig, (void (*)(uint64_t))type metadata accessor for NetworkConfig);
}

uint64_t base witness table accessor for Equatable in NetworkManagerConfig()
{
  return lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type NetworkManagerConfig and conformance NetworkManagerConfig, (void (*)(uint64_t))type metadata accessor for NetworkManagerConfig);
}

uint64_t dispatch thunk of NetworkManager.networkDelegationConfig.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of NetworkManager.fetchConfigs(useCases:userId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  os_log_type_t v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a5 + 16) + **(int **)(a5 + 16));
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v11;
  *uint64_t v11 = v5;
  v11[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return v13(a1, a2, a3, a4, a5);
}

uint64_t dispatch thunk of NetworkManager.uploadKeys(evaluationKeys:userId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a4 + 24) + **(int **)(a4 + 24));
  BOOL v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *BOOL v9 = v4;
  v9[1] = protocol witness for NetworkManager.uploadKeys(evaluationKeys:userId:) in conformance AspireNetworkManager;
  return v11(a1, a2, a3, a4);
}

uint64_t dispatch thunk of NetworkManager.queries(requests:userId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  os_log_type_t v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a5 + 32) + **(int **)(a5 + 32));
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v11;
  *uint64_t v11 = v5;
  v11[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return v13(a1, a2, a3, a4, a5);
}

uint64_t dispatch thunk of NetworkManager.cancel()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t *initializeBufferWithCopyOfBuffer for NetworkManagerType(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    long long v7 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
    uint64_t v8 = *((void *)v7 - 1);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, int *))(v8 + 48))(a2, 2, v7))
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      uint64_t v10 = type metadata accessor for URL();
      uint64_t v11 = *(void *)(v10 - 8);
      uint64_t v12 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v11 + 16);
      v12(a1, a2, v10);
      uint64_t v13 = v7[12];
      uint64_t v14 = (char *)a1 + v13;
      uint64_t v15 = (char *)a2 + v13;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))((char *)a2 + v13, 1, v10))
      {
        uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
        memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
      }
      else
      {
        v12((uint64_t *)v14, (uint64_t *)v15, v10);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v14, 0, 1, v10);
      }
      uint64_t v17 = v7[16];
      uint64_t v18 = (char *)a1 + v17;
      uint64_t v19 = (char *)a2 + v17;
      unint64_t v20 = *((void *)v19 + 1);
      if (v20 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
      }
      else
      {
        uint64_t v21 = *(void *)v19;
        outlined copy of Data._Representation(*(void *)v19, *((void *)v19 + 1));
        *(void *)uint64_t v18 = v21;
        *((void *)v18 + 1) = v20;
      }
      *((unsigned char *)a1 + v7[20]) = *((unsigned char *)a2 + v7[20]);
      (*(void (**)(uint64_t *, void, uint64_t, int *))(v8 + 56))(a1, 0, 2, v7);
    }
  }
  return a1;
}

uint64_t destroy for NetworkManagerType(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(a1, 2, v2);
  if (!result)
  {
    uint64_t v4 = type metadata accessor for URL();
    uint64_t v5 = *(void *)(v4 - 8);
    uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
    v6(a1, v4);
    uint64_t v7 = a1 + *(int *)(v2 + 48);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v7, 1, v4);
    if (!result) {
      uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v6)(v7, v4);
    }
    uint64_t v8 = (uint64_t *)(a1 + *(int *)(v2 + 64));
    unint64_t v9 = v8[1];
    if (v9 >> 60 != 15)
    {
      uint64_t v10 = *v8;
      return outlined consume of Data._Representation(v10, v9);
    }
  }
  return result;
}

char *initializeWithCopy for NetworkManagerType(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
  uint64_t v7 = *((void *)v6 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v7 + 48))(a2, 2, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v8 = type metadata accessor for URL();
    uint64_t v9 = *(void *)(v8 - 8);
    uint64_t v10 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
    v10(a1, a2, v8);
    uint64_t v11 = v6[12];
    uint64_t v12 = &a1[v11];
    uint64_t v13 = &a2[v11];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a2[v11], 1, v8))
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(v12, v13, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      v10(v12, v13, v8);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v12, 0, 1, v8);
    }
    uint64_t v15 = v6[16];
    uint64_t v16 = &a1[v15];
    uint64_t v17 = &a2[v15];
    unint64_t v18 = *((void *)v17 + 1);
    if (v18 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
    }
    else
    {
      uint64_t v19 = *(void *)v17;
      outlined copy of Data._Representation(*(void *)v17, *((void *)v17 + 1));
      *(void *)uint64_t v16 = v19;
      *((void *)v16 + 1) = v18;
    }
    a1[v6[20]] = a2[v6[20]];
    (*(void (**)(char *, void, uint64_t, int *))(v7 + 56))(a1, 0, 2, v6);
  }
  return a1;
}

char *assignWithCopy for NetworkManagerType(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, int *))(v7 + 48);
  int v9 = v8(a1, 2, v6);
  int v10 = v8(a2, 2, v6);
  if (!v9)
  {
    if (v10)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)a1, &demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
      goto LABEL_7;
    }
    uint64_t v18 = type metadata accessor for URL();
    uint64_t v19 = *(void *)(v18 - 8);
    unint64_t v20 = *(void (**)(char *, char *, uint64_t))(v19 + 24);
    v20(a1, a2, v18);
    uint64_t v21 = v6[12];
    uint64_t v22 = &a2[v21];
    uint64_t v42 = &a1[v21];
    uint64_t v23 = *(uint64_t (**)(void))(v19 + 48);
    int v24 = v23();
    int v25 = ((uint64_t (*)(char *, uint64_t, uint64_t))v23)(v22, 1, v18);
    if (v24)
    {
      if (v25)
      {
        size_t v26 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?)
                                    - 8)
                        + 64);
        uint64_t v27 = v42;
LABEL_18:
        memcpy(v27, v22, v26);
        goto LABEL_21;
      }
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v42, v22, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v42, 0, 1, v18);
    }
    else
    {
      if (v25)
      {
        (*(void (**)(char *, uint64_t))(v19 + 8))(v42, v18);
        size_t v26 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?)
                                    - 8)
                        + 64);
        uint64_t v27 = v42;
        goto LABEL_18;
      }
      v20(v42, v22, v18);
    }
LABEL_21:
    uint64_t v33 = v6[16];
    uint64_t v34 = (uint64_t *)&a1[v33];
    uint64_t v35 = (uint64_t *)&a2[v33];
    unint64_t v36 = *(void *)&a2[v33 + 8];
    if (*(void *)&a1[v33 + 8] >> 60 == 15)
    {
      if (v36 >> 60 != 15)
      {
        uint64_t v37 = *v35;
        outlined copy of Data._Representation(v37, v36);
        *uint64_t v34 = v37;
        v34[1] = v36;
LABEL_28:
        a1[v6[20]] = a2[v6[20]];
        return a1;
      }
    }
    else
    {
      if (v36 >> 60 != 15)
      {
        uint64_t v38 = *v35;
        outlined copy of Data._Representation(v38, v36);
        uint64_t v39 = *v34;
        unint64_t v40 = v34[1];
        *uint64_t v34 = v38;
        v34[1] = v36;
        outlined consume of Data._Representation(v39, v40);
        goto LABEL_28;
      }
      outlined destroy of Data((uint64_t)v34);
    }
    *(_OWORD *)uint64_t v34 = *(_OWORD *)v35;
    goto LABEL_28;
  }
  if (v10)
  {
LABEL_7:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
  v13(a1, a2, v11);
  uint64_t v14 = v6[12];
  uint64_t v15 = &a1[v14];
  uint64_t v16 = &a2[v14];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(&a2[v14], 1, v11))
  {
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    v13(v15, v16, v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v15, 0, 1, v11);
  }
  uint64_t v28 = v6[16];
  int v29 = &a1[v28];
  uint64_t v30 = &a2[v28];
  unint64_t v31 = *((void *)v30 + 1);
  if (v31 >> 60 == 15)
  {
    *(_OWORD *)int v29 = *(_OWORD *)v30;
  }
  else
  {
    uint64_t v32 = *(void *)v30;
    outlined copy of Data._Representation(*(void *)v30, *((void *)v30 + 1));
    *(void *)int v29 = v32;
    *((void *)v29 + 1) = v31;
  }
  a1[v6[20]] = a2[v6[20]];
  (*(void (**)(char *, void, uint64_t, int *))(v7 + 56))(a1, 0, 2, v6);
  return a1;
}

char *initializeWithTake for NetworkManagerType(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
  uint64_t v7 = *((void *)v6 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v7 + 48))(a2, 2, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v8 = type metadata accessor for URL();
    uint64_t v9 = *(void *)(v8 - 8);
    int v10 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    v10(a1, a2, v8);
    uint64_t v11 = v6[12];
    uint64_t v12 = &a1[v11];
    uint64_t v13 = &a2[v11];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a2[v11], 1, v8))
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(v12, v13, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      v10(v12, v13, v8);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v12, 0, 1, v8);
    }
    *(_OWORD *)&a1[v6[16]] = *(_OWORD *)&a2[v6[16]];
    a1[v6[20]] = a2[v6[20]];
    (*(void (**)(char *, void, uint64_t, int *))(v7 + 56))(a1, 0, 2, v6);
  }
  return a1;
}

char *assignWithTake for NetworkManagerType(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, int *))(v7 + 48);
  int v9 = v8(a1, 2, v6);
  int v10 = v8(a2, 2, v6);
  if (!v9)
  {
    if (v10)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)a1, &demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
      goto LABEL_7;
    }
    uint64_t v18 = type metadata accessor for URL();
    uint64_t v19 = *(void *)(v18 - 8);
    unint64_t v20 = *(void (**)(char *, char *, uint64_t))(v19 + 40);
    v20(a1, a2, v18);
    uint64_t v21 = v6[12];
    uint64_t v22 = &a2[v21];
    uint64_t v35 = &a1[v21];
    uint64_t v23 = *(uint64_t (**)(void))(v19 + 48);
    int v24 = v23();
    int v25 = ((uint64_t (*)(char *, uint64_t, uint64_t))v23)(v22, 1, v18);
    if (v24)
    {
      if (v25)
      {
        size_t v26 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?)
                                    - 8)
                        + 64);
        uint64_t v27 = v35;
LABEL_15:
        memcpy(v27, v22, v26);
        goto LABEL_18;
      }
      (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v35, v22, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v35, 0, 1, v18);
    }
    else
    {
      if (v25)
      {
        (*(void (**)(char *, uint64_t))(v19 + 8))(v35, v18);
        size_t v26 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?)
                                    - 8)
                        + 64);
        uint64_t v27 = v35;
        goto LABEL_15;
      }
      v20(v35, v22, v18);
    }
LABEL_18:
    uint64_t v28 = v6[16];
    int v29 = (uint64_t *)&a1[v28];
    uint64_t v30 = (uint64_t *)&a2[v28];
    unint64_t v31 = *(void *)&a1[v28 + 8];
    if (v31 >> 60 != 15)
    {
      unint64_t v32 = v30[1];
      if (v32 >> 60 != 15)
      {
        uint64_t v33 = *v29;
        *int v29 = *v30;
        v29[1] = v32;
        outlined consume of Data._Representation(v33, v31);
        goto LABEL_23;
      }
      outlined destroy of Data((uint64_t)v29);
    }
    *(_OWORD *)int v29 = *(_OWORD *)v30;
LABEL_23:
    a1[v6[20]] = a2[v6[20]];
    return a1;
  }
  if (v10)
  {
LABEL_7:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
  v13(a1, a2, v11);
  uint64_t v14 = v6[12];
  uint64_t v15 = &a1[v14];
  uint64_t v16 = &a2[v14];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(&a2[v14], 1, v11))
  {
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    v13(v15, v16, v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v15, 0, 1, v11);
  }
  *(_OWORD *)&a1[v6[16]] = *(_OWORD *)&a2[v6[16]];
  a1[v6[20]] = a2[v6[20]];
  (*(void (**)(char *, void, uint64_t, int *))(v7 + 56))(a1, 0, 2, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for NetworkManagerType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_249CE1544);
}

uint64_t sub_249CE1544(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
  unsigned int v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 3) {
    return v5 - 2;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for NetworkManagerType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_249CE15C8);
}

uint64_t sub_249CE15C8(uint64_t a1, int a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = (a2 + 2);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
  return v7(a1, v5, a3, v6);
}

uint64_t getEnumTag for NetworkManagerType(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48);
  return v3(a1, 2, v2);
}

uint64_t destructiveInjectEnumTag for NetworkManagerType(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(a1, a2, 2, v4);
}

void type metadata completion function for NetworkManagerType()
{
  type metadata accessor for URL();
  if (v0 <= 0x3F)
  {
    type metadata accessor for URL?();
    if (v1 <= 0x3F)
    {
      swift_getTupleTypeLayout();
      swift_initEnumMetadataSinglePayload();
    }
  }
}

void type metadata accessor for URL?()
{
  if (!lazy cache variable for type metadata for URL?)
  {
    type metadata accessor for URL();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for URL?);
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for NetworkConfig(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
    uint64_t v8 = *((void *)v7 - 1);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, int *))(v8 + 48))(a2, 2, v7))
    {
      uint64_t v9 = type metadata accessor for NetworkManagerType(0);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      uint64_t v11 = type metadata accessor for URL();
      uint64_t v12 = *(void *)(v11 - 8);
      uint64_t v13 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v12 + 16);
      v13(a1, a2, v11);
      uint64_t v14 = v7[12];
      __dst = (char *)a1 + v14;
      uint64_t v15 = (char *)a2 + v14;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))((char *)a2 + v14, 1, v11))
      {
        uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
        memcpy(__dst, v15, *(void *)(*(void *)(v16 - 8) + 64));
      }
      else
      {
        v13((uint64_t *)__dst, (uint64_t *)v15, v11);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(__dst, 0, 1, v11);
      }
      uint64_t v17 = v7[16];
      uint64_t v18 = (char *)a1 + v17;
      uint64_t v19 = (char *)a2 + v17;
      unint64_t v20 = *((void *)v19 + 1);
      if (v20 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
      }
      else
      {
        uint64_t v21 = *(void *)v19;
        outlined copy of Data._Representation(*(void *)v19, *((void *)v19 + 1));
        *(void *)uint64_t v18 = v21;
        *((void *)v18 + 1) = v20;
      }
      *((unsigned char *)a1 + v7[20]) = *((unsigned char *)a2 + v7[20]);
      (*(void (**)(uint64_t *, void, uint64_t, int *))(v8 + 56))(a1, 0, 2, v7);
    }
    uint64_t v22 = *(int *)(a3 + 20);
    uint64_t v23 = (uint64_t *)((char *)a1 + v22);
    int v24 = (uint64_t *)((char *)a2 + v22);
    uint64_t v25 = v24[1];
    void *v23 = *v24;
    v23[1] = v25;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for NetworkConfig(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(a1, 2, v2))
  {
    uint64_t v3 = type metadata accessor for URL();
    uint64_t v4 = *(void *)(v3 - 8);
    int v5 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
    v5(a1, v3);
    uint64_t v6 = a1 + *(int *)(v2 + 48);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v6, 1, v3)) {
      v5(v6, v3);
    }
    uint64_t v7 = (uint64_t *)(a1 + *(int *)(v2 + 64));
    unint64_t v8 = v7[1];
    if (v8 >> 60 != 15) {
      outlined consume of Data._Representation(*v7, v8);
    }
  }
  return swift_bridgeObjectRelease();
}

char *initializeWithCopy for NetworkConfig(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
  uint64_t v7 = *((void *)v6 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v7 + 48))(a2, 2, v6))
  {
    uint64_t v8 = type metadata accessor for NetworkManagerType(0);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    uint64_t v26 = a3;
    uint64_t v9 = type metadata accessor for URL();
    uint64_t v10 = *(void *)(v9 - 8);
    uint64_t v11 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
    v11(a1, a2, v9);
    uint64_t v12 = v6[12];
    uint64_t v13 = &a1[v12];
    uint64_t v14 = &a2[v12];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(&a2[v12], 1, v9))
    {
      uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      v11(v13, v14, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v13, 0, 1, v9);
    }
    uint64_t v16 = v6[16];
    uint64_t v17 = &a1[v16];
    uint64_t v18 = &a2[v16];
    unint64_t v19 = *((void *)v18 + 1);
    if (v19 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
    }
    else
    {
      uint64_t v20 = *(void *)v18;
      outlined copy of Data._Representation(*(void *)v18, *((void *)v18 + 1));
      *(void *)uint64_t v17 = v20;
      *((void *)v17 + 1) = v19;
    }
    a3 = v26;
    a1[v6[20]] = a2[v6[20]];
    (*(void (**)(char *, void, uint64_t, int *))(v7 + 56))(a1, 0, 2, v6);
  }
  uint64_t v21 = *(int *)(a3 + 20);
  uint64_t v22 = &a1[v21];
  uint64_t v23 = &a2[v21];
  uint64_t v24 = *((void *)v23 + 1);
  *(void *)uint64_t v22 = *(void *)v23;
  *((void *)v22 + 1) = v24;
  swift_bridgeObjectRetain();
  return a1;
}

char *assignWithCopy for NetworkConfig(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, int *))(v7 + 48);
  int v9 = v8(a1, 2, v6);
  int v10 = v8(a2, 2, v6);
  if (!v9)
  {
    if (v10)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)a1, &demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
      goto LABEL_7;
    }
    uint64_t v48 = a3;
    uint64_t v19 = type metadata accessor for URL();
    uint64_t v20 = *(void *)(v19 - 8);
    uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v20 + 24);
    v21(a1, a2, v19);
    uint64_t v22 = v6[12];
    uint64_t v23 = &a2[v22];
    uint64_t v46 = &a1[v22];
    uint64_t v24 = *(uint64_t (**)(void))(v20 + 48);
    int v25 = v24();
    int v26 = ((uint64_t (*)(char *, uint64_t, uint64_t))v24)(v23, 1, v19);
    if (v25)
    {
      if (v26)
      {
        size_t v27 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?)
                                    - 8)
                        + 64);
        uint64_t v28 = v46;
LABEL_18:
        memcpy(v28, v23, v27);
        goto LABEL_21;
      }
      (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v46, v23, v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v46, 0, 1, v19);
    }
    else
    {
      if (v26)
      {
        (*(void (**)(char *, uint64_t))(v20 + 8))(v46, v19);
        size_t v27 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?)
                                    - 8)
                        + 64);
        uint64_t v28 = v46;
        goto LABEL_18;
      }
      v21(v46, v23, v19);
    }
LABEL_21:
    uint64_t v34 = v6[16];
    uint64_t v35 = (uint64_t *)&a1[v34];
    unint64_t v36 = (uint64_t *)&a2[v34];
    unint64_t v37 = *(void *)&a2[v34 + 8];
    if (*(void *)&a1[v34 + 8] >> 60 == 15)
    {
      if (v37 >> 60 != 15)
      {
        uint64_t v38 = *v36;
        outlined copy of Data._Representation(*v36, v37);
        *uint64_t v35 = v38;
        v35[1] = v37;
LABEL_28:
        a3 = v48;
        a1[v6[20]] = a2[v6[20]];
        goto LABEL_29;
      }
    }
    else
    {
      if (v37 >> 60 != 15)
      {
        uint64_t v39 = *v36;
        outlined copy of Data._Representation(*v36, v37);
        uint64_t v40 = *v35;
        unint64_t v41 = v35[1];
        *uint64_t v35 = v39;
        v35[1] = v37;
        outlined consume of Data._Representation(v40, v41);
        goto LABEL_28;
      }
      outlined destroy of Data((uint64_t)v35);
    }
    *(_OWORD *)uint64_t v35 = *(_OWORD *)v36;
    goto LABEL_28;
  }
  if (v10)
  {
LABEL_7:
    uint64_t v18 = type metadata accessor for NetworkManagerType(0);
    memcpy(a1, a2, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_29;
  }
  uint64_t v47 = a3;
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
  v13(a1, a2, v11);
  uint64_t v14 = v6[12];
  uint64_t v15 = &a1[v14];
  uint64_t v16 = &a2[v14];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(&a2[v14], 1, v11))
  {
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    v13(v15, v16, v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v15, 0, 1, v11);
  }
  uint64_t v29 = v6[16];
  uint64_t v30 = &a1[v29];
  unint64_t v31 = &a2[v29];
  unint64_t v32 = *((void *)v31 + 1);
  a3 = v47;
  if (v32 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v30 = *(_OWORD *)v31;
  }
  else
  {
    uint64_t v33 = *(void *)v31;
    outlined copy of Data._Representation(*(void *)v31, *((void *)v31 + 1));
    *(void *)uint64_t v30 = v33;
    *((void *)v30 + 1) = v32;
  }
  a1[v6[20]] = a2[v6[20]];
  (*(void (**)(char *, void, uint64_t, int *))(v7 + 56))(a1, 0, 2, v6);
LABEL_29:
  uint64_t v42 = *(int *)(a3 + 20);
  uint64_t v43 = &a1[v42];
  uint64_t v44 = &a2[v42];
  *(void *)uint64_t v43 = *(void *)v44;
  *((void *)v43 + 1) = *((void *)v44 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

char *initializeWithTake for NetworkConfig(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
  uint64_t v7 = *((void *)v6 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v7 + 48))(a2, 2, v6))
  {
    uint64_t v8 = type metadata accessor for NetworkManagerType(0);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    uint64_t v9 = type metadata accessor for URL();
    uint64_t v10 = *(void *)(v9 - 8);
    uint64_t v11 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
    v11(a1, a2, v9);
    uint64_t v12 = v6[12];
    uint64_t v13 = &a1[v12];
    uint64_t v14 = &a2[v12];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(&a2[v12], 1, v9))
    {
      uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      v11(v13, v14, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v13, 0, 1, v9);
    }
    *(_OWORD *)&a1[v6[16]] = *(_OWORD *)&a2[v6[16]];
    a1[v6[20]] = a2[v6[20]];
    (*(void (**)(char *, void, uint64_t, int *))(v7 + 56))(a1, 0, 2, v6);
  }
  *(_OWORD *)&a1[*(int *)(a3 + 20)] = *(_OWORD *)&a2[*(int *)(a3 + 20)];
  return a1;
}

char *assignWithTake for NetworkConfig(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = *(uint64_t (**)(unsigned char *, uint64_t, int *))(v7 + 48);
  int v9 = v8(a1, 2, v6);
  int v10 = v8(a2, 2, v6);
  if (!v9)
  {
    if (v10)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)a1, &demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
      goto LABEL_7;
    }
    uint64_t v43 = a3;
    uint64_t v19 = type metadata accessor for URL();
    uint64_t v20 = *(void *)(v19 - 8);
    uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v20 + 40);
    v21(a1, a2, v19);
    uint64_t v22 = v6[12];
    uint64_t v23 = &a2[v22];
    unint64_t v41 = &a1[v22];
    uint64_t v24 = *(uint64_t (**)(void))(v20 + 48);
    int v25 = v24();
    int v26 = ((uint64_t (*)(char *, uint64_t, uint64_t))v24)(v23, 1, v19);
    if (v25)
    {
      if (v26)
      {
        size_t v27 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?)
                                    - 8)
                        + 64);
        uint64_t v28 = v41;
LABEL_15:
        memcpy(v28, v23, v27);
        goto LABEL_18;
      }
      (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v41, v23, v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v41, 0, 1, v19);
    }
    else
    {
      if (v26)
      {
        (*(void (**)(char *, uint64_t))(v20 + 8))(v41, v19);
        size_t v27 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?)
                                    - 8)
                        + 64);
        uint64_t v28 = v41;
        goto LABEL_15;
      }
      v21(v41, v23, v19);
    }
LABEL_18:
    a3 = v43;
    uint64_t v29 = v6[16];
    uint64_t v30 = (uint64_t *)&a1[v29];
    unint64_t v31 = (uint64_t *)&a2[v29];
    unint64_t v32 = *(void *)&a1[v29 + 8];
    if (v32 >> 60 != 15)
    {
      unint64_t v33 = v31[1];
      if (v33 >> 60 != 15)
      {
        uint64_t v34 = *v30;
        *uint64_t v30 = *v31;
        v30[1] = v33;
        outlined consume of Data._Representation(v34, v32);
        goto LABEL_23;
      }
      outlined destroy of Data((uint64_t)v30);
    }
    *(_OWORD *)uint64_t v30 = *(_OWORD *)v31;
LABEL_23:
    a1[v6[20]] = a2[v6[20]];
    goto LABEL_24;
  }
  if (v10)
  {
LABEL_7:
    uint64_t v18 = type metadata accessor for NetworkManagerType(0);
    memcpy(a1, a2, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_24;
  }
  uint64_t v42 = a3;
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
  v13(a1, a2, v11);
  uint64_t v14 = v6[12];
  uint64_t v15 = &a1[v14];
  uint64_t v16 = &a2[v14];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(&a2[v14], 1, v11))
  {
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    v13(v15, v16, v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v15, 0, 1, v11);
  }
  *(_OWORD *)&a1[v6[16]] = *(_OWORD *)&a2[v6[16]];
  a1[v6[20]] = a2[v6[20]];
  (*(void (**)(char *, void, uint64_t, int *))(v7 + 56))(a1, 0, 2, v6);
  a3 = v42;
LABEL_24:
  uint64_t v35 = *(int *)(a3 + 20);
  unint64_t v36 = &a1[v35];
  unint64_t v37 = (uint64_t *)&a2[v35];
  uint64_t v39 = *v37;
  uint64_t v38 = v37[1];
  *(void *)unint64_t v36 = v39;
  *((void *)v36 + 1) = v38;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for NetworkConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_249CE2AEC);
}

uint64_t sub_249CE2AEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_5Tm(a1, a2, a3, type metadata accessor for NetworkManagerType);
}

uint64_t storeEnumTagSinglePayload for NetworkConfig(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_249CE2B18);
}

uint64_t sub_249CE2B18(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_6Tm(a1, a2, a3, a4, type metadata accessor for NetworkManagerType);
}

uint64_t type metadata completion function for NetworkConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for NetworkConfig(a1, a2, a3, type metadata accessor for NetworkManagerType);
}

uint64_t *initializeBufferWithCopyOfBuffer for NetworkManagerConfig(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
    uint64_t v8 = *((void *)v7 - 1);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, int *))(v8 + 48))(a2, 2, v7))
    {
      uint64_t v9 = type metadata accessor for NetworkManagerType(0);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      uint64_t v11 = type metadata accessor for URL();
      uint64_t v12 = *(void *)(v11 - 8);
      uint64_t v13 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v12 + 16);
      v13(a1, a2, v11);
      uint64_t v14 = v7[12];
      __dst = (char *)a1 + v14;
      uint64_t v15 = (char *)a2 + v14;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))((char *)a2 + v14, 1, v11))
      {
        uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
        memcpy(__dst, v15, *(void *)(*(void *)(v16 - 8) + 64));
      }
      else
      {
        v13((uint64_t *)__dst, (uint64_t *)v15, v11);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(__dst, 0, 1, v11);
      }
      uint64_t v17 = v7[16];
      uint64_t v18 = (char *)a1 + v17;
      uint64_t v19 = (char *)a2 + v17;
      unint64_t v20 = *((void *)v19 + 1);
      if (v20 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
      }
      else
      {
        uint64_t v21 = *(void *)v19;
        outlined copy of Data._Representation(*(void *)v19, *((void *)v19 + 1));
        *(void *)uint64_t v18 = v21;
        *((void *)v18 + 1) = v20;
      }
      *((unsigned char *)a1 + v7[20]) = *((unsigned char *)a2 + v7[20]);
      (*(void (**)(uint64_t *, void, uint64_t, int *))(v8 + 56))(a1, 0, 2, v7);
    }
    uint64_t v22 = *(int *)(type metadata accessor for NetworkConfig(0) + 20);
    uint64_t v23 = (uint64_t *)((char *)a1 + v22);
    uint64_t v24 = (uint64_t *)((char *)a2 + v22);
    uint64_t v25 = v24[1];
    void *v23 = *v24;
    v23[1] = v25;
    uint64_t v26 = *(int *)(a3 + 20);
    size_t v27 = (uint64_t *)((char *)a1 + v26);
    uint64_t v28 = (uint64_t *)((char *)a2 + v26);
    uint64_t v29 = v28[1];
    *size_t v27 = *v28;
    v27[1] = v29;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for NetworkManagerConfig(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(a1, 2, v2))
  {
    uint64_t v3 = type metadata accessor for URL();
    uint64_t v4 = *(void *)(v3 - 8);
    int v5 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
    v5(a1, v3);
    uint64_t v6 = a1 + *(int *)(v2 + 48);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v6, 1, v3)) {
      v5(v6, v3);
    }
    uint64_t v7 = (uint64_t *)(a1 + *(int *)(v2 + 64));
    unint64_t v8 = v7[1];
    if (v8 >> 60 != 15) {
      outlined consume of Data._Representation(*v7, v8);
    }
  }
  type metadata accessor for NetworkConfig(0);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

char *initializeWithCopy for NetworkManagerConfig(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
  uint64_t v7 = *((void *)v6 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v7 + 48))(a2, 2, v6))
  {
    uint64_t v8 = type metadata accessor for NetworkManagerType(0);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    uint64_t v30 = a3;
    uint64_t v9 = type metadata accessor for URL();
    uint64_t v10 = *(void *)(v9 - 8);
    uint64_t v11 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
    v11(a1, a2, v9);
    uint64_t v12 = v6[12];
    uint64_t v13 = &a1[v12];
    uint64_t v14 = &a2[v12];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(&a2[v12], 1, v9))
    {
      uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      v11(v13, v14, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v13, 0, 1, v9);
    }
    uint64_t v16 = v6[16];
    uint64_t v17 = &a1[v16];
    uint64_t v18 = &a2[v16];
    unint64_t v19 = *((void *)v18 + 1);
    if (v19 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
    }
    else
    {
      uint64_t v20 = *(void *)v18;
      outlined copy of Data._Representation(*(void *)v18, *((void *)v18 + 1));
      *(void *)uint64_t v17 = v20;
      *((void *)v17 + 1) = v19;
    }
    a3 = v30;
    a1[v6[20]] = a2[v6[20]];
    (*(void (**)(char *, void, uint64_t, int *))(v7 + 56))(a1, 0, 2, v6);
  }
  uint64_t v21 = *(int *)(type metadata accessor for NetworkConfig(0) + 20);
  uint64_t v22 = &a1[v21];
  uint64_t v23 = &a2[v21];
  uint64_t v24 = *((void *)v23 + 1);
  *(void *)uint64_t v22 = *(void *)v23;
  *((void *)v22 + 1) = v24;
  uint64_t v25 = *(int *)(a3 + 20);
  uint64_t v26 = &a1[v25];
  size_t v27 = &a2[v25];
  uint64_t v28 = *((void *)v27 + 1);
  *(void *)uint64_t v26 = *(void *)v27;
  *((void *)v26 + 1) = v28;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

char *assignWithCopy for NetworkManagerConfig(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, int *))(v7 + 48);
  int v9 = v8(a1, 2, v6);
  int v10 = v8(a2, 2, v6);
  if (!v9)
  {
    if (v10)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)a1, &demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
      goto LABEL_7;
    }
    uint64_t v51 = a3;
    uint64_t v19 = type metadata accessor for URL();
    uint64_t v20 = *(void *)(v19 - 8);
    uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v20 + 24);
    v21(a1, a2, v19);
    uint64_t v22 = v6[12];
    uint64_t v23 = &a2[v22];
    uint64_t v49 = &a1[v22];
    uint64_t v24 = *(uint64_t (**)(void))(v20 + 48);
    int v25 = v24();
    int v26 = ((uint64_t (*)(char *, uint64_t, uint64_t))v24)(v23, 1, v19);
    if (v25)
    {
      if (v26)
      {
        size_t v27 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?)
                                    - 8)
                        + 64);
        uint64_t v28 = v49;
LABEL_18:
        memcpy(v28, v23, v27);
        goto LABEL_21;
      }
      (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v49, v23, v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v49, 0, 1, v19);
    }
    else
    {
      if (v26)
      {
        (*(void (**)(char *, uint64_t))(v20 + 8))(v49, v19);
        size_t v27 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?)
                                    - 8)
                        + 64);
        uint64_t v28 = v49;
        goto LABEL_18;
      }
      v21(v49, v23, v19);
    }
LABEL_21:
    uint64_t v34 = v6[16];
    uint64_t v35 = (uint64_t *)&a1[v34];
    unint64_t v36 = (uint64_t *)&a2[v34];
    unint64_t v37 = *(void *)&a2[v34 + 8];
    if (*(void *)&a1[v34 + 8] >> 60 == 15)
    {
      if (v37 >> 60 != 15)
      {
        uint64_t v38 = *v36;
        outlined copy of Data._Representation(*v36, v37);
        *uint64_t v35 = v38;
        v35[1] = v37;
LABEL_28:
        a3 = v51;
        a1[v6[20]] = a2[v6[20]];
        goto LABEL_29;
      }
    }
    else
    {
      if (v37 >> 60 != 15)
      {
        uint64_t v39 = *v36;
        outlined copy of Data._Representation(*v36, v37);
        uint64_t v40 = *v35;
        unint64_t v41 = v35[1];
        *uint64_t v35 = v39;
        v35[1] = v37;
        outlined consume of Data._Representation(v40, v41);
        goto LABEL_28;
      }
      outlined destroy of Data((uint64_t)v35);
    }
    *(_OWORD *)uint64_t v35 = *(_OWORD *)v36;
    goto LABEL_28;
  }
  if (v10)
  {
LABEL_7:
    uint64_t v18 = type metadata accessor for NetworkManagerType(0);
    memcpy(a1, a2, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_29;
  }
  uint64_t v50 = a3;
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
  v13(a1, a2, v11);
  uint64_t v14 = v6[12];
  uint64_t v15 = &a1[v14];
  uint64_t v16 = &a2[v14];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(&a2[v14], 1, v11))
  {
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    v13(v15, v16, v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v15, 0, 1, v11);
  }
  uint64_t v29 = v6[16];
  uint64_t v30 = &a1[v29];
  unint64_t v31 = &a2[v29];
  unint64_t v32 = *((void *)v31 + 1);
  a3 = v50;
  if (v32 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v30 = *(_OWORD *)v31;
  }
  else
  {
    uint64_t v33 = *(void *)v31;
    outlined copy of Data._Representation(*(void *)v31, *((void *)v31 + 1));
    *(void *)uint64_t v30 = v33;
    *((void *)v30 + 1) = v32;
  }
  a1[v6[20]] = a2[v6[20]];
  (*(void (**)(char *, void, uint64_t, int *))(v7 + 56))(a1, 0, 2, v6);
LABEL_29:
  uint64_t v42 = *(int *)(type metadata accessor for NetworkConfig(0) + 20);
  uint64_t v43 = &a1[v42];
  uint64_t v44 = &a2[v42];
  *(void *)uint64_t v43 = *(void *)v44;
  *((void *)v43 + 1) = *((void *)v44 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v45 = *(int *)(a3 + 20);
  uint64_t v46 = &a1[v45];
  uint64_t v47 = &a2[v45];
  *(void *)uint64_t v46 = *(void *)v47;
  *((void *)v46 + 1) = *((void *)v47 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

char *initializeWithTake for NetworkManagerConfig(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
  uint64_t v7 = *((void *)v6 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v7 + 48))(a2, 2, v6))
  {
    uint64_t v8 = type metadata accessor for NetworkManagerType(0);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    uint64_t v9 = type metadata accessor for URL();
    uint64_t v10 = *(void *)(v9 - 8);
    uint64_t v11 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
    v11(a1, a2, v9);
    uint64_t v12 = v6[12];
    uint64_t v13 = &a1[v12];
    uint64_t v14 = &a2[v12];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(&a2[v12], 1, v9))
    {
      uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      v11(v13, v14, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v13, 0, 1, v9);
    }
    *(_OWORD *)&a1[v6[16]] = *(_OWORD *)&a2[v6[16]];
    a1[v6[20]] = a2[v6[20]];
    (*(void (**)(char *, void, uint64_t, int *))(v7 + 56))(a1, 0, 2, v6);
  }
  uint64_t v16 = type metadata accessor for NetworkConfig(0);
  *(_OWORD *)&a1[*(int *)(v16 + 20)] = *(_OWORD *)&a2[*(int *)(v16 + 20)];
  *(_OWORD *)&a1[*(int *)(a3 + 20)] = *(_OWORD *)&a2[*(int *)(a3 + 20)];
  return a1;
}

char *assignWithTake for NetworkManagerConfig(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = *(uint64_t (**)(unsigned char *, uint64_t, int *))(v7 + 48);
  int v9 = v8(a1, 2, v6);
  int v10 = v8(a2, 2, v6);
  if (!v9)
  {
    if (v10)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)a1, &demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
      goto LABEL_7;
    }
    uint64_t v48 = a3;
    uint64_t v19 = type metadata accessor for URL();
    uint64_t v20 = *(void *)(v19 - 8);
    uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v20 + 40);
    v21(a1, a2, v19);
    uint64_t v22 = v6[12];
    uint64_t v23 = &a2[v22];
    uint64_t v46 = &a1[v22];
    uint64_t v24 = *(uint64_t (**)(void))(v20 + 48);
    int v25 = v24();
    int v26 = ((uint64_t (*)(char *, uint64_t, uint64_t))v24)(v23, 1, v19);
    if (v25)
    {
      if (v26)
      {
        size_t v27 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?)
                                    - 8)
                        + 64);
        uint64_t v28 = v46;
LABEL_15:
        memcpy(v28, v23, v27);
        goto LABEL_18;
      }
      (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v46, v23, v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v46, 0, 1, v19);
    }
    else
    {
      if (v26)
      {
        (*(void (**)(char *, uint64_t))(v20 + 8))(v46, v19);
        size_t v27 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?)
                                    - 8)
                        + 64);
        uint64_t v28 = v46;
        goto LABEL_15;
      }
      v21(v46, v23, v19);
    }
LABEL_18:
    a3 = v48;
    uint64_t v29 = v6[16];
    uint64_t v30 = (uint64_t *)&a1[v29];
    unint64_t v31 = (uint64_t *)&a2[v29];
    unint64_t v32 = *(void *)&a1[v29 + 8];
    if (v32 >> 60 != 15)
    {
      unint64_t v33 = v31[1];
      if (v33 >> 60 != 15)
      {
        uint64_t v34 = *v30;
        *uint64_t v30 = *v31;
        v30[1] = v33;
        outlined consume of Data._Representation(v34, v32);
        goto LABEL_23;
      }
      outlined destroy of Data((uint64_t)v30);
    }
    *(_OWORD *)uint64_t v30 = *(_OWORD *)v31;
LABEL_23:
    a1[v6[20]] = a2[v6[20]];
    goto LABEL_24;
  }
  if (v10)
  {
LABEL_7:
    uint64_t v18 = type metadata accessor for NetworkManagerType(0);
    memcpy(a1, a2, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_24;
  }
  uint64_t v47 = a3;
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
  v13(a1, a2, v11);
  uint64_t v14 = v6[12];
  uint64_t v15 = &a1[v14];
  uint64_t v16 = &a2[v14];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(&a2[v14], 1, v11))
  {
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    v13(v15, v16, v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v15, 0, 1, v11);
  }
  *(_OWORD *)&a1[v6[16]] = *(_OWORD *)&a2[v6[16]];
  a1[v6[20]] = a2[v6[20]];
  (*(void (**)(char *, void, uint64_t, int *))(v7 + 56))(a1, 0, 2, v6);
  a3 = v47;
LABEL_24:
  uint64_t v35 = *(int *)(type metadata accessor for NetworkConfig(0) + 20);
  unint64_t v36 = &a1[v35];
  unint64_t v37 = (uint64_t *)&a2[v35];
  uint64_t v39 = *v37;
  uint64_t v38 = v37[1];
  *(void *)unint64_t v36 = v39;
  *((void *)v36 + 1) = v38;
  swift_bridgeObjectRelease();
  uint64_t v40 = *(int *)(a3 + 20);
  unint64_t v41 = &a1[v40];
  uint64_t v42 = (uint64_t *)&a2[v40];
  uint64_t v44 = *v42;
  uint64_t v43 = v42[1];
  *(void *)unint64_t v41 = v44;
  *((void *)v41 + 1) = v43;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for NetworkManagerConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_249CE3E8C);
}

uint64_t sub_249CE3E8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_5Tm(a1, a2, a3, type metadata accessor for NetworkConfig);
}

uint64_t __swift_get_extra_inhabitant_index_5Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v7 = a4(0);
  uint64_t v8 = *(void *)(v7 - 8);
  if (*(_DWORD *)(v8 + 84) == a2)
  {
    int v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    return v9(a1, a2, v7);
  }
  else
  {
    unint64_t v11 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v11 >= 0xFFFFFFFF) {
      LODWORD(v11) = -1;
    }
    int v12 = v11 - 1;
    if (v12 < 0) {
      int v12 = -1;
    }
    return (v12 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for NetworkManagerConfig(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_249CE3F8C);
}

uint64_t sub_249CE3F8C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_6Tm(a1, a2, a3, a4, type metadata accessor for NetworkConfig);
}

uint64_t __swift_store_extra_inhabitant_index_6Tm(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t result = a5(0);
  uint64_t v10 = *(void *)(result - 8);
  if (*(_DWORD *)(v10 + 84) == a3)
  {
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return v11(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = a2;
  }
  return result;
}

uint64_t type metadata completion function for NetworkManagerConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for NetworkConfig(a1, a2, a3, type metadata accessor for NetworkConfig);
}

uint64_t type metadata completion function for NetworkConfig(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t result = a4(319);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t method lookup function for NetworkManagerHelper(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for NetworkManagerHelper);
}

uint64_t dispatch thunk of NetworkManagerHelper.__allocating_init(cacheSize:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of NetworkManagerHelper.networkManager(managerConfig:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  *uint64_t result = *a2;
  return result;
}

void *type metadata accessor for NetworkManagerConfig.CodingKeys()
{
  return &unk_26FDD2170;
}

uint64_t getEnumTagSinglePayload for NetworkManagerConfig.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for NetworkManagerConfig.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x249CE42ECLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t getEnumTag for NetworkConfig.CodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *destructiveInjectEnumTag for NetworkConfig.CodingKeys(unsigned char *result, char a2)
{
  *uint64_t result = a2 & 1;
  return result;
}

void *type metadata accessor for NetworkConfig.CodingKeys()
{
  return &unk_26FDD1428;
}

uint64_t getEnumTagSinglePayload for NetworkManagerType.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for NetworkManagerType.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x249CE4494);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

unsigned char *destructiveInjectEnumTag for NetworkManagerType.CodingKeys(unsigned char *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

void *type metadata accessor for NetworkManagerType.CodingKeys()
{
  return &unk_26FDD1A30;
}

void *type metadata accessor for NetworkManagerType.AmsCodingKeys()
{
  return &unk_26FDD1AC0;
}

uint64_t getEnumTagSinglePayload for NetworkManagerType.AspireCodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for NetworkManagerType.AspireCodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x249CE4640);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

void *type metadata accessor for NetworkManagerType.AspireCodingKeys()
{
  return &unk_26FDD1AE0;
}

void *type metadata accessor for NetworkManagerType.OfflineCodingKeys()
{
  return &unk_26FDD1B70;
}

uint64_t specialized NetworkManagerType.AspireCodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x746E696F70646E65 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x726575737369 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x8000000249E94B70 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x8000000249E94B90)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t specialized NetworkManagerType.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 7564641 && a2 == 0xE300000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x657269707361 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656E696C66666FLL && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t specialized NetworkConfig.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1701869940 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x8000000249E94BB0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t specialized NetworkManagerConfig.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6769666E6F63 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x69746167656C6564 && a2 == 0xEA00000000006E6FLL)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

void *TimeConstants.second.unsafeMutableAddressor()
{
  return &static TimeConstants.second;
}

double static TimeConstants.second.getter()
{
  return 1.0;
}

void *TimeConstants.minute.unsafeMutableAddressor()
{
  return &static TimeConstants.minute;
}

double static TimeConstants.minute.getter()
{
  return 60.0;
}

void *TimeConstants.hour.unsafeMutableAddressor()
{
  return &static TimeConstants.hour;
}

double static TimeConstants.hour.getter()
{
  return 3600.0;
}

void *TimeConstants.day.unsafeMutableAddressor()
{
  return &static TimeConstants.day;
}

double static TimeConstants.day.getter()
{
  return 86400.0;
}

ValueMetadata *type metadata accessor for TimeConstants()
{
  return &type metadata for TimeConstants;
}

void static Telemetry.reportErrorToServer(useCase:identifier:method:error:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v14 = (void *)MEMORY[0x24C5B33F0](0xD00000000000001BLL, 0x8000000249E94BF0);
  uint64_t v15 = (void *)swift_allocObject();
  void v15[2] = a1;
  v15[3] = a2;
  v15[4] = a3;
  v15[5] = a4;
  v15[6] = a5;
  v15[7] = a6;
  v15[8] = a7;
  v18[4] = partial apply for closure #1 in static Telemetry.reportErrorToServer(useCase:identifier:method:error:);
  v18[5] = v15;
  v18[0] = MEMORY[0x263EF8330];
  v18[1] = 1107296256;
  void v18[2] = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
  v18[3] = &block_descriptor_0;
  uint64_t v16 = _Block_copy(v18);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v17 = a7;
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v16);
}

unint64_t closure #1 in static Telemetry.reportErrorToServer(useCase:identifier:method:error:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, NSObject)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_249E85E10;
  *(void *)(inited + 32) = 0x65736143657375;
  *(void *)(inited + 40) = 0xE700000000000000;
  *(void *)(inited + 48) = MEMORY[0x24C5B33F0](a1, a2);
  *(void *)(inited + 56) = 0xD000000000000021;
  *(void *)(inited + 64) = 0x8000000249E94CF0;
  if (a4)
  {
    unint64_t v13 = a4;
  }
  else
  {
    a3 = 1701736270;
    unint64_t v13 = 0xE400000000000000;
  }
  swift_bridgeObjectRetain();
  uint64_t v14 = MEMORY[0x24C5B33F0](a3, v13);
  swift_bridgeObjectRelease();
  *(void *)(inited + 72) = v14;
  *(void *)(inited + 80) = 0x646F6874656DLL;
  *(void *)(inited + 88) = 0xE600000000000000;
  *(void *)(inited + 96) = MEMORY[0x24C5B33F0](a5, a6);
  unint64_t v15 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  specialized static Telemetry.prepareErrorForReporting(error:)();
  uint64_t v17 = v16;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v21 = v15;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v17, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, &v21);
  unint64_t v19 = v21;
  swift_bridgeObjectRelease();
  return v19;
}

uint64_t sub_249CE542C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 72, 7);
}

unint64_t partial apply for closure #1 in static Telemetry.reportErrorToServer(useCase:identifier:method:error:)()
{
  return closure #1 in static Telemetry.reportErrorToServer(useCase:identifier:method:error:)(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56));
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

void static Telemetry.reportKeyRotationEvent(groupName:keyStatuses:activeUseCases:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8 = (void *)MEMORY[0x24C5B33F0](0xD000000000000021, 0x8000000249E94C30);
  int v9 = (void *)swift_allocObject();
  v9[2] = a1;
  v9[3] = a2;
  v9[4] = a3;
  v9[5] = a4;
  v11[4] = partial apply for closure #1 in static Telemetry.reportKeyRotationEvent(groupName:keyStatuses:activeUseCases:);
  v11[5] = v9;
  v11[0] = MEMORY[0x263EF8330];
  v11[1] = 1107296256;
  void v11[2] = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
  v11[3] = &block_descriptor_6_0;
  uint64_t v10 = _Block_copy(v11);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v10);
}

unint64_t closure #1 in static Telemetry.reportKeyRotationEvent(groupName:keyStatuses:activeUseCases:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AspireApiKeyStatus(0);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6 - 8);
  int v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, NSObject)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_249E85E10;
  *(void *)(inited + 32) = 0x6D614E70756F7267;
  *(void *)(inited + 40) = 0xE900000000000065;
  *(void *)(inited + 48) = MEMORY[0x24C5B33F0](a1, a2);
  strcpy((char *)(inited + 56), "keyTimestamp");
  *(unsigned char *)(inited + 69) = 0;
  *(_WORD *)(inited + 70) = -5120;
  uint64_t v11 = *(void *)(a3 + 16);
  uint64_t v12 = MEMORY[0x263F8EE78];
  if (v11)
  {
    int v26 = (void *)MEMORY[0x263F8EE78];
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v13 = a3 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    uint64_t v14 = *(void *)(v7 + 72);
    do
    {
      _s8CipherML18AspireApiKeyStatusVWOcTm_0(v13, (uint64_t)v9, type metadata accessor for AspireApiKeyStatus);
      UInt64._bridgeToObjectiveC()();
      outlined destroy of AspireApiKeyStatus((uint64_t)v9);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v13 += v14;
      --v11;
    }
    while (v11);
  }
  type metadata accessor for NSNumber(0, &lazy cache variable for type metadata for NSNumber);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  *(void *)(inited + 72) = isa;
  strcpy((char *)(inited + 80), "activeUseCase");
  *(_WORD *)(inited + 94) = -4864;
  uint64_t v16 = swift_bridgeObjectRetain();
  uint64_t v17 = specialized _copyCollectionToContiguousArray<A>(_:)(v16);
  swift_bridgeObjectRelease();
  int v26 = v17;
  specialized MutableCollection<>.sort(by:)((uint64_t *)&v26);
  uint64_t v18 = (uint64_t)v26;
  uint64_t v19 = v26[2];
  if (v19)
  {
    int v26 = (void *)v12;
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v20 = (uint64_t *)(v18 + 40);
    do
    {
      uint64_t v21 = *(v20 - 1);
      uint64_t v22 = *v20;
      swift_bridgeObjectRetain();
      MEMORY[0x24C5B33F0](v21, v22);
      swift_bridgeObjectRelease();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v20 += 2;
      --v19;
    }
    while (v19);
  }
  swift_release();
  type metadata accessor for NSNumber(0, &lazy cache variable for type metadata for NSString);
  Class v23 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  *(void *)(inited + 96) = v23;
  return specialized Dictionary.init(dictionaryLiteral:)(inited);
}

uint64_t sub_249CE59A4()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 48, 7);
}

unint64_t partial apply for closure #1 in static Telemetry.reportKeyRotationEvent(groupName:keyStatuses:activeUseCases:)()
{
  return closure #1 in static Telemetry.reportKeyRotationEvent(groupName:keyStatuses:activeUseCases:)(v0[2], v0[3], v0[4]);
}

ValueMetadata *type metadata accessor for Telemetry()
{
  return &type metadata for Telemetry;
}

uint64_t outlined destroy of AspireApiKeyStatus(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AspireApiKeyStatus(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  swift_bridgeObjectRetain();
  swift_retain();
  specialized LazyMapSequence.Iterator.next()();
  if (!v8) {
    goto LABEL_23;
  }
  uint64_t v10 = v7;
  uint64_t v11 = v8;
  uint64_t v54 = v9;
  uint64_t v12 = (void *)*a5;
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v8);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  char v18 = v13;
  if (v12[3] >= v17)
  {
    if (a4)
    {
      uint64_t v21 = (void *)*a5;
      if (v13) {
        goto LABEL_9;
      }
    }
    else
    {
      specialized _NativeDictionary.copy()();
      uint64_t v21 = (void *)*a5;
      if (v18) {
        goto LABEL_9;
      }
    }
LABEL_11:
    v21[(v14 >> 6) + 8] |= 1 << v14;
    uint64_t v25 = (uint64_t *)(v21[6] + 16 * v14);
    uint64_t *v25 = v10;
    v25[1] = v11;
    *(void *)(v21[7] + 8 * v14) = v54;
    uint64_t v26 = v21[2];
    BOOL v27 = __OFADD__(v26, 1);
    uint64_t v28 = v26 + 1;
    if (v27)
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    v21[2] = v28;
LABEL_13:
    specialized LazyMapSequence.Iterator.next()();
    if (v30)
    {
      uint64_t v32 = v29;
      uint64_t v33 = v30;
      uint64_t v34 = v31;
      do
      {
        unint64_t v41 = (void *)*a5;
        unint64_t v42 = specialized __RawDictionaryStorage.find<A>(_:)(v32, v33);
        uint64_t v44 = v41[2];
        BOOL v45 = (v43 & 1) == 0;
        BOOL v27 = __OFADD__(v44, v45);
        uint64_t v46 = v44 + v45;
        if (v27) {
          goto LABEL_24;
        }
        char v47 = v43;
        if (v41[3] < v46)
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v46, 1);
          unint64_t v42 = specialized __RawDictionaryStorage.find<A>(_:)(v32, v33);
          if ((v47 & 1) != (v48 & 1)) {
            goto LABEL_26;
          }
        }
        uint64_t v49 = (void *)*a5;
        if (v47)
        {
          uint64_t v35 = 8 * v42;
          id v36 = *(id *)(v49[7] + 8 * v42);
          swift_bridgeObjectRelease();

          uint64_t v37 = v49[7];
          *(void *)(v37 + v35) = v36;
        }
        else
        {
          v49[(v42 >> 6) + 8] |= 1 << v42;
          uint64_t v50 = (uint64_t *)(v49[6] + 16 * v42);
          *uint64_t v50 = v32;
          v50[1] = v33;
          *(void *)(v49[7] + 8 * v42) = v34;
          uint64_t v51 = v49[2];
          BOOL v27 = __OFADD__(v51, 1);
          uint64_t v52 = v51 + 1;
          if (v27) {
            goto LABEL_25;
          }
          v49[2] = v52;
        }
        specialized LazyMapSequence.Iterator.next()();
        uint64_t v32 = v38;
        uint64_t v33 = v39;
        uint64_t v34 = v40;
      }
      while (v39);
    }
LABEL_23:
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of [String : String].Iterator._Variant();
    return swift_release();
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a4 & 1);
  uint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v11);
  if ((v18 & 1) == (v20 & 1))
  {
    unint64_t v14 = v19;
    uint64_t v21 = (void *)*a5;
    if ((v18 & 1) == 0) {
      goto LABEL_11;
    }
LABEL_9:
    uint64_t v22 = 8 * v14;
    id v23 = *(id *)(v21[7] + 8 * v14);
    swift_bridgeObjectRelease();

    uint64_t v24 = v21[7];
    *(void *)(v24 + v22) = v23;
    goto LABEL_13;
  }
LABEL_26:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

Swift::Int specialized MutableCollection<>.sort(by:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
  }
  uint64_t v3 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  Swift::Int result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
  return result;
}

Swift::Int specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_152;
    }
    if (v3) {
      return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v3, 1, a1);
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_160;
  }
  Swift::Int v105 = result;
  int v102 = a1;
  if (v3 < 2)
  {
    uint64_t v8 = MEMORY[0x263F8EE78];
    __dst = (char *)(MEMORY[0x263F8EE78] + 32);
    if (v3 != 1)
    {
      unint64_t v12 = *(void *)(MEMORY[0x263F8EE78] + 16);
      uint64_t v11 = (char *)MEMORY[0x263F8EE78];
LABEL_118:
      int v94 = v11;
      uint64_t v104 = v8;
      if (v12 >= 2)
      {
        uint64_t v95 = *v102;
        do
        {
          unint64_t v96 = v12 - 2;
          if (v12 < 2) {
            goto LABEL_147;
          }
          if (!v95) {
            goto LABEL_159;
          }
          int v97 = v94;
          uint64_t v98 = *(void *)&v94[16 * v96 + 32];
          uint64_t v99 = *(void *)&v94[16 * v12 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v95 + 16 * v98), (char *)(v95 + 16 * *(void *)&v94[16 * v12 + 16]), v95 + 16 * v99, __dst);
          if (v1) {
            break;
          }
          if (v99 < v98) {
            goto LABEL_148;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            int v97 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v97);
          }
          if (v96 >= *((void *)v97 + 2)) {
            goto LABEL_149;
          }
          int v100 = &v97[16 * v96 + 32];
          *(void *)int v100 = v98;
          *((void *)v100 + 1) = v99;
          unint64_t v101 = *((void *)v97 + 2);
          if (v12 > v101) {
            goto LABEL_150;
          }
          memmove(&v97[16 * v12 + 16], &v97[16 * v12 + 32], 16 * (v101 - v12));
          int v94 = v97;
          *((void *)v97 + 2) = v101 - 1;
          unint64_t v12 = v101 - 1;
        }
        while (v101 > 2);
      }
LABEL_115:
      swift_bridgeObjectRelease();
      *(void *)(v104 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v104 = MEMORY[0x263F8EE78];
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v7 + 16) = v6;
    uint64_t v104 = v7;
    __dst = (char *)(v7 + 32);
  }
  Swift::Int v9 = 0;
  uint64_t v10 = *a1;
  uint64_t v103 = v10 + 8;
  uint64_t v11 = (char *)MEMORY[0x263F8EE78];
  Swift::Int v106 = v3;
  while (1)
  {
    Swift::Int v13 = v9++;
    if (v9 >= v3) {
      goto LABEL_46;
    }
    unint64_t v14 = (uint64_t *)(v10 + 16 * v9);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    uint64_t v17 = (void *)(v10 + 16 * v13);
    if (v15 == *v17 && v16 == v17[1])
    {
      Swift::Int v20 = v13 + 2;
      if (v13 + 2 >= v3) {
        goto LABEL_45;
      }
      int v19 = 0;
    }
    else
    {
      int v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
      Swift::Int v20 = v13 + 2;
      if (v13 + 2 >= v3) {
        goto LABEL_36;
      }
    }
    uint64_t v21 = (void *)(v103 + 16 * v20);
    do
    {
      id v23 = (void *)(v10 + 16 * v9);
      if (*(v21 - 1) == *v23 && *v21 == v23[1])
      {
        if (v19) {
          goto LABEL_37;
        }
      }
      else if ((v19 ^ _stringCompareWithSmolCheck(_:_:expecting:)()))
      {
        goto LABEL_36;
      }
      v21 += 2;
      Swift::Int v22 = v20 + 1;
      Swift::Int v9 = v20;
      Swift::Int v20 = v22;
    }
    while (v22 < v3);
    Swift::Int v20 = v22;
LABEL_36:
    Swift::Int v9 = v20;
    if (v19)
    {
LABEL_37:
      if (v20 < v13) {
        goto LABEL_155;
      }
      if (v13 < v20)
      {
        uint64_t v25 = 16 * v20;
        uint64_t v26 = 16 * v13;
        Swift::Int v27 = v20;
        Swift::Int v28 = v13;
        do
        {
          if (v28 != --v27)
          {
            if (!v10) {
              goto LABEL_158;
            }
            uint64_t v29 = v10 + v25;
            uint64_t v30 = *(void *)(v10 + v26);
            uint64_t v31 = *(void *)(v10 + v26 + 8);
            *(_OWORD *)(v10 + v26) = *(_OWORD *)(v10 + v25 - 16);
            *(void *)(v29 - 16) = v30;
            *(void *)(v29 - 8) = v31;
          }
          ++v28;
          v25 -= 16;
          v26 += 16;
        }
        while (v28 < v27);
      }
LABEL_45:
      Swift::Int v9 = v20;
    }
LABEL_46:
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13)) {
        goto LABEL_151;
      }
      if (v9 - v13 < v105) {
        break;
      }
    }
LABEL_67:
    if (v9 < v13) {
      goto LABEL_146;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v11 + 2) + 1, 1, v11);
    }
    unint64_t v41 = *((void *)v11 + 2);
    unint64_t v40 = *((void *)v11 + 3);
    unint64_t v12 = v41 + 1;
    if (v41 >= v40 >> 1) {
      uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v40 > 1), v41 + 1, 1, v11);
    }
    *((void *)v11 + 2) = v12;
    unint64_t v42 = v11 + 32;
    char v43 = &v11[16 * v41 + 32];
    *(void *)char v43 = v13;
    *((void *)v43 + 1) = v9;
    if (v41)
    {
      Swift::Int v107 = v9;
      while (1)
      {
        unint64_t v44 = v12 - 1;
        if (v12 >= 4)
        {
          uint64_t v49 = &v42[16 * v12];
          uint64_t v50 = *((void *)v49 - 8);
          uint64_t v51 = *((void *)v49 - 7);
          BOOL v55 = __OFSUB__(v51, v50);
          uint64_t v52 = v51 - v50;
          if (v55) {
            goto LABEL_135;
          }
          uint64_t v54 = *((void *)v49 - 6);
          uint64_t v53 = *((void *)v49 - 5);
          BOOL v55 = __OFSUB__(v53, v54);
          uint64_t v47 = v53 - v54;
          char v48 = v55;
          if (v55) {
            goto LABEL_136;
          }
          unint64_t v56 = v12 - 2;
          uint64_t v57 = &v42[16 * v12 - 32];
          uint64_t v59 = *(void *)v57;
          uint64_t v58 = *((void *)v57 + 1);
          BOOL v55 = __OFSUB__(v58, v59);
          uint64_t v60 = v58 - v59;
          if (v55) {
            goto LABEL_138;
          }
          BOOL v55 = __OFADD__(v47, v60);
          uint64_t v61 = v47 + v60;
          if (v55) {
            goto LABEL_141;
          }
          if (v61 >= v52)
          {
            uint64_t v79 = &v42[16 * v44];
            uint64_t v81 = *(void *)v79;
            uint64_t v80 = *((void *)v79 + 1);
            BOOL v55 = __OFSUB__(v80, v81);
            uint64_t v82 = v80 - v81;
            if (v55) {
              goto LABEL_145;
            }
            BOOL v72 = v47 < v82;
            goto LABEL_105;
          }
        }
        else
        {
          if (v12 != 3)
          {
            uint64_t v73 = *((void *)v11 + 4);
            uint64_t v74 = *((void *)v11 + 5);
            BOOL v55 = __OFSUB__(v74, v73);
            uint64_t v66 = v74 - v73;
            char v67 = v55;
            goto LABEL_99;
          }
          uint64_t v46 = *((void *)v11 + 4);
          uint64_t v45 = *((void *)v11 + 5);
          BOOL v55 = __OFSUB__(v45, v46);
          uint64_t v47 = v45 - v46;
          char v48 = v55;
        }
        if (v48) {
          goto LABEL_137;
        }
        unint64_t v56 = v12 - 2;
        uint64_t v62 = &v42[16 * v12 - 32];
        uint64_t v64 = *(void *)v62;
        uint64_t v63 = *((void *)v62 + 1);
        BOOL v65 = __OFSUB__(v63, v64);
        uint64_t v66 = v63 - v64;
        char v67 = v65;
        if (v65) {
          goto LABEL_140;
        }
        int v68 = &v42[16 * v44];
        uint64_t v70 = *(void *)v68;
        uint64_t v69 = *((void *)v68 + 1);
        BOOL v55 = __OFSUB__(v69, v70);
        uint64_t v71 = v69 - v70;
        if (v55) {
          goto LABEL_143;
        }
        if (__OFADD__(v66, v71)) {
          goto LABEL_144;
        }
        if (v66 + v71 >= v47)
        {
          BOOL v72 = v47 < v71;
LABEL_105:
          if (v72) {
            unint64_t v44 = v56;
          }
          goto LABEL_107;
        }
LABEL_99:
        if (v67) {
          goto LABEL_139;
        }
        uint64_t v75 = &v42[16 * v44];
        uint64_t v77 = *(void *)v75;
        uint64_t v76 = *((void *)v75 + 1);
        BOOL v55 = __OFSUB__(v76, v77);
        uint64_t v78 = v76 - v77;
        if (v55) {
          goto LABEL_142;
        }
        if (v78 < v66) {
          goto LABEL_15;
        }
LABEL_107:
        unint64_t v83 = v44 - 1;
        if (v44 - 1 >= v12)
        {
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }
        uint64_t v84 = v10;
        if (!v10) {
          goto LABEL_157;
        }
        uint64_t v85 = v11;
        uint64_t v86 = &v42[16 * v83];
        uint64_t v87 = *(void *)v86;
        uint64_t v88 = v42;
        unint64_t v89 = v44;
        uint64_t v90 = &v42[16 * v44];
        uint64_t v91 = *((void *)v90 + 1);
        uint64_t v92 = v84;
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v84 + 16 * *(void *)v86), (char *)(v84 + 16 * *(void *)v90), v84 + 16 * v91, __dst);
        if (v1) {
          goto LABEL_115;
        }
        if (v91 < v87) {
          goto LABEL_132;
        }
        if (v89 > *((void *)v85 + 2)) {
          goto LABEL_133;
        }
        *(void *)uint64_t v86 = v87;
        *(void *)&v88[16 * v83 + 8] = v91;
        unint64_t v93 = *((void *)v85 + 2);
        if (v89 >= v93) {
          goto LABEL_134;
        }
        uint64_t v11 = v85;
        unint64_t v12 = v93 - 1;
        memmove(v90, v90 + 16, 16 * (v93 - 1 - v89));
        unint64_t v42 = v88;
        *((void *)v85 + 2) = v93 - 1;
        uint64_t v10 = v92;
        Swift::Int v9 = v107;
        if (v93 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v12 = 1;
LABEL_15:
    Swift::Int v3 = v106;
    if (v9 >= v106)
    {
      uint64_t v8 = v104;
      goto LABEL_118;
    }
  }
  if (__OFADD__(v13, v105)) {
    goto LABEL_153;
  }
  if (v13 + v105 >= v3) {
    Swift::Int v32 = v3;
  }
  else {
    Swift::Int v32 = v13 + v105;
  }
  if (v32 >= v13)
  {
    if (v9 != v32)
    {
      uint64_t v33 = (void *)(v10 + 16 * v9);
      do
      {
        uint64_t v34 = (uint64_t *)(v10 + 16 * v9);
        uint64_t v35 = *v34;
        uint64_t v36 = v34[1];
        Swift::Int v37 = v13;
        uint64_t v38 = v33;
        do
        {
          BOOL v39 = v35 == *(v38 - 2) && v36 == *(v38 - 1);
          if (v39 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
            break;
          }
          if (!v10) {
            goto LABEL_156;
          }
          uint64_t v35 = *v38;
          uint64_t v36 = v38[1];
          *(_OWORD *)uint64_t v38 = *((_OWORD *)v38 - 1);
          *(v38 - 1) = v36;
          *(v38 - 2) = v35;
          v38 -= 2;
          ++v37;
        }
        while (v9 != v37);
        ++v9;
        v33 += 2;
      }
      while (v9 != v32);
      Swift::Int v9 = v32;
    }
    goto LABEL_67;
  }
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v6 = result;
    uint64_t v7 = *a4;
    uint64_t v8 = *a4 + 16 * a3;
LABEL_5:
    Swift::Int v9 = (uint64_t *)(v7 + 16 * v4);
    Swift::Int result = *v9;
    uint64_t v10 = v9[1];
    uint64_t v11 = v6;
    unint64_t v12 = (uint64_t *)v8;
    while (1)
    {
      BOOL v13 = result == *(v12 - 2) && v10 == *(v12 - 1);
      if (v13 || (Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 16;
        if (v4 == a2) {
          return result;
        }
        goto LABEL_5;
      }
      if (!v7) {
        break;
      }
      Swift::Int result = *v12;
      uint64_t v10 = v12[1];
      *(_OWORD *)unint64_t v12 = *((_OWORD *)v12 - 1);
      *(v12 - 1) = v10;
      *(v12 - 2) = result;
      v12 -= 2;
      if (v4 == ++v11) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(char *__src, char *a2, unint64_t a3, char *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = a2 - __src + 15;
  if (a2 - __src >= 0) {
    int64_t v9 = a2 - __src;
  }
  uint64_t v10 = v9 >> 4;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 15;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v12 = a3 - (void)a2;
  }
  uint64_t v13 = v12 >> 4;
  Swift::Int v27 = __src;
  uint64_t v26 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[16 * v13] <= __dst) {
        memmove(__dst, a2, 16 * v13);
      }
      uint64_t v17 = &v4[16 * v13];
      uint64_t v25 = v17;
      Swift::Int v27 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        char v18 = (char *)(a3 - 16);
        int v19 = v6;
        while (1)
        {
          Swift::Int v20 = v18 + 16;
          uint64_t v21 = *((void *)v19 - 2);
          uint64_t v22 = *((void *)v19 - 1);
          v19 -= 16;
          BOOL v23 = *((void *)v17 - 2) == v21 && *((void *)v17 - 1) == v22;
          if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          {
            uint64_t v25 = v17 - 16;
            if (v20 < v17 || v18 >= v17 || v20 != v17) {
              *(_OWORD *)char v18 = *((_OWORD *)v17 - 1);
            }
            int v19 = v6;
            v17 -= 16;
            if (v6 <= v7) {
              goto LABEL_50;
            }
          }
          else
          {
            if (v20 != v6 || v18 >= v6) {
              *(_OWORD *)char v18 = *(_OWORD *)v19;
            }
            Swift::Int v27 = v19;
            if (v19 <= v7) {
              goto LABEL_50;
            }
          }
          v18 -= 16;
          uint64_t v6 = v19;
          if (v17 <= v4) {
            goto LABEL_50;
          }
        }
      }
      goto LABEL_50;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[16 * v10] <= __dst) {
      memmove(__dst, __src, 16 * v10);
    }
    unint64_t v14 = &v4[16 * v10];
    uint64_t v25 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      do
      {
        BOOL v15 = *(void *)v6 == *(void *)v4 && *((void *)v6 + 1) == *((void *)v4 + 1);
        if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          if (v7 != v4) {
            *(_OWORD *)uint64_t v7 = *(_OWORD *)v4;
          }
          v4 += 16;
          uint64_t v26 = v4;
          uint64_t v16 = v6;
        }
        else
        {
          uint64_t v16 = v6 + 16;
          if (v7 < v6 || v7 >= v16 || v7 != v6) {
            *(_OWORD *)uint64_t v7 = *(_OWORD *)v6;
          }
        }
        v7 += 16;
        if (v4 >= v14) {
          break;
        }
        uint64_t v6 = v16;
      }
      while ((unint64_t)v16 < a3);
      Swift::Int v27 = v7;
    }
LABEL_50:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v27, (const void **)&v26, &v25);
    return 1;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Range<Int>>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  int64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      int64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
      uint64_t v10 = (char *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 29;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * (v12 >> 2);
      uint64_t v13 = v10 + 32;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (char *)MEMORY[0x263F8EE78];
      uint64_t v13 = (char *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 32]) {
          memmove(v13, a4 + 32, 4 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(void **a1, const void **a2, void *a3)
{
  Swift::Int v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 15;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -16)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7])
    {
      return (char *)memmove(result, v3, 16 * v7);
    }
  }
  return result;
}

id specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1[1];
  id v4 = (id)a1[2];
  *a2 = *a1;
  a2[1] = v2;
  a2[2] = v4;
  swift_bridgeObjectRetain();
  return v4;
}

void specialized LazyMapSequence.Iterator.next()()
{
  void (*v11)(uint64_t *__return_ptr, void *);
  id v12;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  uint64_t v19;
  void v20[3];

  uint64_t v1 = *v0;
  int64_t v3 = v0[3];
  unint64_t v2 = v0[4];
  int64_t v4 = v3;
  if (v2)
  {
    uint64_t v5 = (v2 - 1) & v2;
    unint64_t v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    uint64_t v7 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v6);
    uint64_t v8 = *v7;
    uint64_t v9 = v7[1];
    uint64_t v10 = *(void **)(*(void *)(v1 + 56) + 8 * v6);
    v0[3] = v4;
    v0[4] = v5;
    int64_t v11 = (void (*)(uint64_t *__return_ptr, void *))v0[5];
    v20[0] = v8;
    v20[1] = v9;
    void v20[2] = v10;
    swift_bridgeObjectRetain();
    uint64_t v12 = v10;
    v11(&v19, v20);

    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v13 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    unint64_t v14 = (unint64_t)(v0[2] + 64) >> 6;
    if (v13 < v14)
    {
      BOOL v15 = v0[1];
      uint64_t v16 = *(void *)(v15 + 8 * v13);
      if (v16)
      {
LABEL_7:
        uint64_t v5 = (v16 - 1) & v16;
        unint64_t v6 = __clz(__rbit64(v16)) + (v13 << 6);
        int64_t v4 = v13;
        goto LABEL_3;
      }
      uint64_t v17 = v3 + 2;
      int64_t v4 = v3 + 1;
      if (v3 + 2 < v14)
      {
        uint64_t v16 = *(void *)(v15 + 8 * v17);
        if (v16)
        {
LABEL_10:
          uint64_t v13 = v17;
          goto LABEL_7;
        }
        int64_t v4 = v3 + 2;
        if (v3 + 3 < v14)
        {
          uint64_t v16 = *(void *)(v15 + 8 * (v3 + 3));
          if (v16)
          {
            uint64_t v13 = v3 + 3;
            goto LABEL_7;
          }
          uint64_t v17 = v3 + 4;
          int64_t v4 = v3 + 3;
          if (v3 + 4 < v14)
          {
            uint64_t v16 = *(void *)(v15 + 8 * v17);
            if (v16) {
              goto LABEL_10;
            }
            uint64_t v13 = v3 + 5;
            int64_t v4 = v3 + 4;
            if (v3 + 5 < v14)
            {
              uint64_t v16 = *(void *)(v15 + 8 * v13);
              if (v16) {
                goto LABEL_7;
              }
              int64_t v4 = v14 - 1;
              char v18 = v3 + 6;
              while (v14 != v18)
              {
                uint64_t v16 = *(void *)(v15 + 8 * v18++);
                if (v16)
                {
                  uint64_t v13 = v18 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    v0[3] = v4;
    v0[4] = 0;
  }
}

uint64_t specialized LazyMapSequence.Iterator.next()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v45 = a1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: UseCaseGroup));
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: UseCaseGroup)?);
  uint64_t v7 = MEMORY[0x270FA5388](v6 - 8);
  uint64_t v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  int64_t v11 = (char **)((char *)&v40 - v10);
  uint64_t v13 = *v1;
  uint64_t v12 = v1[1];
  uint64_t v15 = v1[2];
  int64_t v14 = v1[3];
  int64_t v16 = v14;
  unint64_t v17 = v1[4];
  unint64_t v40 = v5;
  if (v17)
  {
    char v43 = v9;
    int64_t v44 = v14;
    uint64_t v41 = v15;
    uint64_t v42 = v12;
    uint64_t v18 = v2;
    uint64_t v19 = (v17 - 1) & v17;
    unint64_t v20 = __clz(__rbit64(v17)) | (v14 << 6);
LABEL_3:
    uint64_t v21 = *(void *)(v13 + 56);
    uint64_t v22 = (uint64_t *)(*(void *)(v13 + 48) + 16 * v20);
    uint64_t v23 = v13;
    uint64_t v25 = *v22;
    uint64_t v24 = v22[1];
    uint64_t v26 = v21 + *(void *)(*(void *)(type metadata accessor for UseCaseGroup() - 8) + 72) * v20;
    uint64_t v2 = v18;
    _s8CipherML18AspireApiKeyStatusVWOcTm_0(v26, (uint64_t)v11 + *(int *)(v18 + 48), (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
    *int64_t v11 = v25;
    v11[1] = v24;
    (*(void (**)(void *, void, uint64_t, uint64_t))(v3 + 56))(v11, 0, 1, v18);
    uint64_t v13 = v23;
    swift_bridgeObjectRetain();
    uint64_t v12 = v42;
    uint64_t v9 = v43;
    uint64_t v15 = v41;
    goto LABEL_25;
  }
  int64_t v27 = v14 + 1;
  if (__OFADD__(v14, 1))
  {
    __break(1u);
LABEL_23:
    int64_t v16 = v10;
    goto LABEL_24;
  }
  int64_t v28 = (unint64_t)(v15 + 64) >> 6;
  if (v27 < v28)
  {
    unint64_t v29 = *(void *)(v12 + 8 * v27);
    if (v29)
    {
LABEL_7:
      uint64_t v41 = v15;
      uint64_t v42 = v12;
      char v43 = v9;
      int64_t v44 = v27;
      uint64_t v18 = v2;
      uint64_t v19 = (v29 - 1) & v29;
      unint64_t v20 = __clz(__rbit64(v29)) + (v27 << 6);
      goto LABEL_3;
    }
    int64_t v30 = v14 + 2;
    int64_t v16 = v14 + 1;
    if (v14 + 2 < v28)
    {
      unint64_t v29 = *(void *)(v12 + 8 * v30);
      if (v29)
      {
LABEL_10:
        int64_t v27 = v30;
        goto LABEL_7;
      }
      int64_t v16 = v14 + 2;
      if (v14 + 3 < v28)
      {
        unint64_t v29 = *(void *)(v12 + 8 * (v14 + 3));
        if (v29)
        {
          int64_t v27 = v14 + 3;
          goto LABEL_7;
        }
        int64_t v30 = v14 + 4;
        int64_t v16 = v14 + 3;
        if (v14 + 4 < v28)
        {
          unint64_t v29 = *(void *)(v12 + 8 * v30);
          if (v29) {
            goto LABEL_10;
          }
          int64_t v27 = v14 + 5;
          int64_t v16 = v14 + 4;
          if (v14 + 5 < v28)
          {
            unint64_t v29 = *(void *)(v12 + 8 * v27);
            if (v29) {
              goto LABEL_7;
            }
            int64_t v10 = v28 - 1;
            uint64_t v31 = v14 + 6;
            while (v28 != v31)
            {
              unint64_t v29 = *(void *)(v12 + 8 * v31++);
              if (v29)
              {
                int64_t v27 = v31 - 1;
                goto LABEL_7;
              }
            }
            goto LABEL_23;
          }
        }
      }
    }
  }
LABEL_24:
  int64_t v44 = v16;
  (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v11, 1, 1, v2);
  uint64_t v19 = 0;
LABEL_25:
  *uint64_t v1 = v13;
  v1[1] = v12;
  int64_t v32 = v44;
  v1[2] = v15;
  v1[3] = v32;
  v1[4] = v19;
  uint64_t v33 = (void (*)(uint64_t))v1[5];
  outlined init with take of SymmetricPirClientConfig?((uint64_t)v11, (uint64_t)v9, &demangling cache variable for type metadata for (key: String, value: UseCaseGroup)?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v9, 1, v2) == 1)
  {
    uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, UseCaseGroup));
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v45, 1, 1, v34);
  }
  else
  {
    uint64_t v36 = (uint64_t)v9;
    uint64_t v37 = (uint64_t)v40;
    outlined init with take of SymmetricPirClientConfig?(v36, (uint64_t)v40, &demangling cache variable for type metadata for (key: String, value: UseCaseGroup));
    uint64_t v38 = v45;
    v33(v37);
    outlined destroy of (key: String, value: UseCaseGroup)(v37);
    uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, UseCaseGroup));
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v38, 0, 1, v39);
  }
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t type metadata accessor for NSNumber(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

void specialized static Telemetry.prepareErrorForReporting(error:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, NSObject)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_249E85E10;
  *(void *)(inited + 32) = 0x6E69616D6F64;
  *(void *)(inited + 40) = 0xE600000000000000;
  uint64_t v1 = (void *)_convertErrorToNSError(_:)();
  id v2 = objc_msgSend(v1, sel_domain);

  if (v2)
  {
    *(void *)(inited + 48) = v2;
    *(void *)(inited + 56) = 1701080931;
    *(void *)(inited + 64) = 0xE400000000000000;
    uint64_t v3 = (void *)_convertErrorToNSError(_:)();
    objc_msgSend(v3, sel_code);

    *(NSNumber *)(inited + 72) = Int._bridgeToObjectiveC()();
    *(void *)(inited + 80) = 0x7470697263736564;
    *(void *)(inited + 88) = 0xEB000000006E6F69;
    swift_getErrorValue();
    uint64_t v4 = Error.localizedDescription.getter();
    uint64_t v5 = MEMORY[0x24C5B33F0](v4);
    swift_bridgeObjectRelease();
    *(void *)(inited + 96) = v5;
    specialized Dictionary.init(dictionaryLiteral:)(inited);
  }
  else
  {
    __break(1u);
  }
}

uint64_t _s8CipherML18AspireApiKeyStatusVWOcTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of (key: String, value: UseCaseGroup)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: UseCaseGroup));
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t Sequence.asyncForEach(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  uint64_t v5[2] = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5[7] = AssociatedTypeWitness;
  v5[8] = *(void *)(AssociatedTypeWitness - 8);
  v5[9] = swift_task_alloc();
  type metadata accessor for Optional();
  v5[10] = swift_task_alloc();
  v5[11] = *(void *)(a3 - 8);
  v5[12] = swift_task_alloc();
  uint64_t v8 = swift_getAssociatedTypeWitness();
  v5[13] = v8;
  v5[14] = *(void *)(v8 - 8);
  v5[15] = swift_task_alloc();
  return MEMORY[0x270FA2498](Sequence.asyncForEach(_:), 0, 0);
}

uint64_t Sequence.asyncForEach(_:)()
{
  (*(void (**)(void, void, void))(v0[11] + 16))(v0[12], v0[6], v0[4]);
  dispatch thunk of Sequence.makeIterator()();
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[7];
  uint64_t v3 = v0[8];
  swift_getAssociatedConformanceWitness();
  dispatch thunk of IteratorProtocol.next()();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(void, void))(v0[14] + 8))(v0[15], v0[13]);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
  else
  {
    uint64_t v6 = (int *)v0[2];
    (*(void (**)(void, void, void))(v0[8] + 32))(v0[9], v0[10], v0[7]);
    uint64_t v9 = (uint64_t (*)(uint64_t))((char *)v6 + *v6);
    uint64_t v7 = (void *)swift_task_alloc();
    v0[16] = v7;
    *uint64_t v7 = v0;
    v7[1] = Sequence.asyncForEach(_:);
    uint64_t v8 = v0[9];
    return v9(v8);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 136) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = Sequence.asyncForEach(_:);
  }
  else {
    uint64_t v2 = Sequence.asyncForEach(_:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  int *v6;
  void *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;

  (*(void (**)(void, void))(v0[8] + 8))(v0[9], v0[7]);
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[7];
  uint64_t v3 = v0[8];
  swift_getAssociatedConformanceWitness();
  dispatch thunk of IteratorProtocol.next()();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(void, void))(v0[14] + 8))(v0[15], v0[13]);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
  else
  {
    uint64_t v6 = (int *)v0[2];
    (*(void (**)(void, void, void))(v0[8] + 32))(v0[9], v0[10], v0[7]);
    uint64_t v9 = (uint64_t (*)(uint64_t))((char *)v6 + *v6);
    uint64_t v7 = (void *)swift_task_alloc();
    v0[16] = v7;
    *uint64_t v7 = v0;
    v7[1] = Sequence.asyncForEach(_:);
    uint64_t v8 = v0[9];
    return v9(v8);
  }
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v2 = v0[14];
  uint64_t v1 = v0[15];
  uint64_t v3 = v0[13];
  (*(void (**)(void, void))(v0[8] + 8))(v0[9], v0[7]);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t Sequence.asyncMap<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[7] = a5;
  v6[8] = v5;
  v6[5] = a3;
  v6[6] = a4;
  v6[3] = a1;
  v6[4] = a2;
  v6[9] = swift_task_alloc();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6[10] = AssociatedTypeWitness;
  v6[11] = *(void *)(AssociatedTypeWitness - 8);
  v6[12] = swift_task_alloc();
  type metadata accessor for Optional();
  v6[13] = swift_task_alloc();
  v6[14] = *(void *)(a3 - 8);
  v6[15] = swift_task_alloc();
  uint64_t v9 = swift_getAssociatedTypeWitness();
  v6[16] = v9;
  v6[17] = *(void *)(v9 - 8);
  v6[18] = swift_task_alloc();
  return MEMORY[0x270FA2498](Sequence.asyncMap<A>(_:), 0, 0);
}

uint64_t Sequence.asyncMap<A>(_:)()
{
  uint64_t v2 = v0[14];
  uint64_t v1 = v0[15];
  uint64_t v3 = v0[8];
  uint64_t v4 = v0[5];
  v0[2] = static Array._allocateUninitialized(_:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v3, v4);
  dispatch thunk of Sequence.makeIterator()();
  uint64_t v5 = v0[13];
  uint64_t v6 = v0[10];
  uint64_t v7 = v0[11];
  swift_getAssociatedConformanceWitness();
  dispatch thunk of IteratorProtocol.next()();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    (*(void (**)(void, void))(v0[17] + 8))(v0[18], v0[16]);
    uint64_t v8 = v0[2];
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = (uint64_t (*)(uint64_t))v0[1];
    return v9(v8);
  }
  else
  {
    uint64_t v11 = (int *)v0[3];
    (*(void (**)(void, void, void))(v0[11] + 32))(v0[12], v0[13], v0[10]);
    uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t))((char *)v11 + *v11);
    uint64_t v12 = (void *)swift_task_alloc();
    v0[19] = v12;
    *uint64_t v12 = v0;
    v12[1] = Sequence.asyncMap<A>(_:);
    uint64_t v13 = v0[12];
    uint64_t v14 = v0[9];
    return v15(v14, v13);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 160) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = Sequence.asyncMap<A>(_:);
  }
  else
  {
    uint64_t v2 = Sequence.asyncMap<A>(_:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  int *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  uint64_t v15;

  uint64_t v2 = v0[11];
  uint64_t v1 = v0[12];
  uint64_t v3 = v0[10];
  type metadata accessor for Array();
  Array.append(_:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v4 = v0[13];
  uint64_t v5 = v0[10];
  uint64_t v6 = v0[11];
  swift_getAssociatedConformanceWitness();
  dispatch thunk of IteratorProtocol.next()();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    (*(void (**)(void, void))(v0[17] + 8))(v0[18], v0[16]);
    uint64_t v7 = v0[2];
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = (uint64_t (*)(uint64_t))v0[1];
    return v8(v7);
  }
  else
  {
    uint64_t v10 = (int *)v0[3];
    (*(void (**)(void, void, void))(v0[11] + 32))(v0[12], v0[13], v0[10]);
    uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t))((char *)v10 + *v10);
    uint64_t v11 = (void *)swift_task_alloc();
    v0[19] = v11;
    *uint64_t v11 = v0;
    v11[1] = Sequence.asyncMap<A>(_:);
    uint64_t v12 = v0[12];
    uint64_t v13 = v0[9];
    return v14(v13, v12);
  }
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v2 = v0[17];
  uint64_t v1 = v0[18];
  uint64_t v3 = v0[16];
  (*(void (**)(void, void))(v0[11] + 8))(v0[12], v0[10]);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t Sequence.asyncCompactMap<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[7] = a5;
  v6[8] = v5;
  v6[5] = a3;
  v6[6] = a4;
  v6[3] = a1;
  v6[4] = a2;
  uint64_t v9 = type metadata accessor for Optional();
  v6[9] = v9;
  v6[10] = *(void *)(v9 - 8);
  v6[11] = swift_task_alloc();
  v6[12] = *(void *)(a4 - 8);
  v6[13] = swift_task_alloc();
  v6[14] = swift_task_alloc();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6[15] = AssociatedTypeWitness;
  v6[16] = *(void *)(AssociatedTypeWitness - 8);
  v6[17] = swift_task_alloc();
  type metadata accessor for Optional();
  v6[18] = swift_task_alloc();
  v6[19] = *(void *)(a3 - 8);
  v6[20] = swift_task_alloc();
  uint64_t v11 = swift_getAssociatedTypeWitness();
  v6[21] = v11;
  v6[22] = *(void *)(v11 - 8);
  v6[23] = swift_task_alloc();
  return MEMORY[0x270FA2498](Sequence.asyncCompactMap<A>(_:), 0, 0);
}

uint64_t Sequence.asyncCompactMap<A>(_:)()
{
  uint64_t v2 = v0[19];
  uint64_t v1 = v0[20];
  uint64_t v3 = v0[8];
  uint64_t v4 = v0[5];
  v0[2] = static Array._allocateUninitialized(_:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v3, v4);
  dispatch thunk of Sequence.makeIterator()();
  uint64_t v5 = v0[18];
  uint64_t v6 = v0[15];
  uint64_t v7 = v0[16];
  swift_getAssociatedConformanceWitness();
  dispatch thunk of IteratorProtocol.next()();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    (*(void (**)(void, void))(v0[22] + 8))(v0[23], v0[21]);
    uint64_t v8 = v0[2];
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = (uint64_t (*)(uint64_t))v0[1];
    return v9(v8);
  }
  else
  {
    uint64_t v11 = (int *)v0[3];
    (*(void (**)(void, void, void))(v0[16] + 32))(v0[17], v0[18], v0[15]);
    uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t))((char *)v11 + *v11);
    uint64_t v12 = (void *)swift_task_alloc();
    v0[24] = v12;
    *uint64_t v12 = v0;
    v12[1] = Sequence.asyncCompactMap<A>(_:);
    uint64_t v13 = v0[17];
    uint64_t v14 = v0[11];
    return v15(v14, v13);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 200) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = Sequence.asyncCompactMap<A>(_:);
  }
  else
  {
    uint64_t v2 = Sequence.asyncCompactMap<A>(_:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t);
  int *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t);
  uint64_t v23;

  uint64_t v1 = v0[11];
  uint64_t v2 = v0[12];
  uint64_t v3 = v0[6];
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3);
  uint64_t v6 = v0[16];
  uint64_t v5 = v0[17];
  uint64_t v7 = v0[15];
  if (v4 == 1)
  {
    uint64_t v8 = v0[9];
    uint64_t v9 = v0[10];
    (*(void (**)(void, void))(v6 + 8))(v0[17], v0[15]);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v1, v8);
  }
  else
  {
    uint64_t v11 = v0[13];
    uint64_t v10 = v0[14];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v10, v1, v3);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v11, v10, v3);
    type metadata accessor for Array();
    Array.append(_:)();
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v10, v3);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  }
  uint64_t v12 = v0[18];
  uint64_t v13 = v0[15];
  uint64_t v14 = v0[16];
  swift_getAssociatedConformanceWitness();
  dispatch thunk of IteratorProtocol.next()();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    (*(void (**)(void, void))(v0[22] + 8))(v0[23], v0[21]);
    uint64_t v15 = v0[2];
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v16 = (uint64_t (*)(uint64_t))v0[1];
    return v16(v15);
  }
  else
  {
    uint64_t v18 = (int *)v0[3];
    (*(void (**)(void, void, void))(v0[16] + 32))(v0[17], v0[18], v0[15]);
    uint64_t v22 = (uint64_t (*)(uint64_t, uint64_t))((char *)v18 + *v18);
    uint64_t v19 = (void *)swift_task_alloc();
    v0[24] = v19;
    char *v19 = v0;
    v19[1] = Sequence.asyncCompactMap<A>(_:);
    unint64_t v20 = v0[17];
    uint64_t v21 = v0[11];
    return v22(v21, v20);
  }
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v2 = v0[22];
  uint64_t v1 = v0[23];
  uint64_t v3 = v0[21];
  (*(void (**)(void, void))(v0[16] + 8))(v0[17], v0[15]);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for Data.Iterator();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = (void *)MEMORY[0x263F8EE78];
  switch(a2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_12;
      }
      uint64_t v9 = HIDWORD(a1) - (int)a1;
LABEL_6:
      if (v9)
      {
        if (v9 >= 1)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
          uint64_t v8 = (void *)swift_allocObject();
          size_t v12 = _swift_stdlib_malloc_size(v8);
          v8[2] = v9;
          v8[3] = 2 * v12 - 64;
        }
        outlined copy of Data._Representation(a1, a2);
        uint64_t v13 = Data._copyContents(initializing:)();
        outlined consume of Data._Representation(a1, a2);
        (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
        if (v13 != v9)
        {
          __break(1u);
LABEL_12:
          __break(1u);
LABEL_13:
          __break(1u);
          JUMPOUT(0x249CE8EACLL);
        }
      }
      return v8;
    case 2uLL:
      uint64_t v11 = *(void *)(a1 + 16);
      uint64_t v10 = *(void *)(a1 + 24);
      uint64_t v9 = v10 - v11;
      if (!__OFSUB__(v10, v11)) {
        goto LABEL_6;
      }
      goto LABEL_13;
    case 3uLL:
      return v8;
    default:
      uint64_t v9 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t specialized Sequence.asyncCompactMap<A>(_:)(uint64_t a1, uint64_t a2)
{
  v2[5] = a1;
  void v2[6] = a2;
  v2[7] = type metadata accessor for AspireApiPIRConfig(0);
  v2[8] = swift_task_alloc();
  type metadata accessor for AspireApiPECConfig(0);
  v2[9] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
  v2[10] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiConfig?);
  v2[11] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized Sequence.asyncCompactMap<A>(_:), 0, 0);
}

uint64_t specialized Sequence.asyncCompactMap<A>(_:)()
{
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = *(void *)(v0 + 48);
  char v3 = *(unsigned char *)(v1 + 32);
  *(unsigned char *)(v0 + 176) = v3;
  uint64_t v4 = -1;
  uint64_t v5 = -1 << v3;
  if (-(-1 << v3) < 64) {
    uint64_t v4 = ~(-1 << -(char)(-1 << v3));
  }
  unint64_t v6 = v4 & *(void *)(v1 + 56);
  *(void *)(v0 + 96) = MEMORY[0x263F8EE78];
  uint64_t v7 = (void *)swift_bridgeObjectRetain();
  if (v6)
  {
    uint64_t v8 = 0;
    unint64_t v9 = __clz(__rbit64(v6));
    uint64_t v10 = (v6 - 1) & v6;
LABEL_5:
    *(void *)(v0 + 104) = v8;
    *(void *)(v0 + 112) = v10;
    uint64_t v11 = (void *)(v7[6] + 16 * v9);
    *(void *)(v0 + 120) = *v11;
    *(void *)(v0 + 128) = v11[1];
    swift_bridgeObjectRetain();
    return MEMORY[0x270FA2498](specialized Sequence.asyncCompactMap<A>(_:), v2, 0);
  }
  unint64_t v12 = 63 - v5;
  if ((unint64_t)(63 - v5) > 0x7F)
  {
    unint64_t v13 = v7[8];
    if (v13)
    {
      uint64_t v8 = 1;
LABEL_11:
      uint64_t v10 = (v13 - 1) & v13;
      unint64_t v9 = __clz(__rbit64(v13)) + (v8 << 6);
      goto LABEL_5;
    }
    if (v12 >= 0xC0)
    {
      unint64_t v13 = v7[9];
      if (v13)
      {
        uint64_t v8 = 2;
        goto LABEL_11;
      }
      if (v12 >= 0x100)
      {
        unint64_t v13 = v7[10];
        if (v13)
        {
          uint64_t v8 = 3;
          goto LABEL_11;
        }
        if (v12 >= 0x140)
        {
          unint64_t v13 = v7[11];
          if (v13)
          {
            uint64_t v8 = 4;
            goto LABEL_11;
          }
          if (v12 >= 0x180)
          {
            unint64_t v13 = v7[12];
            if (v13)
            {
              uint64_t v8 = 5;
              goto LABEL_11;
            }
            uint64_t v14 = 0;
            uint64_t v15 = v12 >> 6;
            if (v12 >> 6 <= 6) {
              uint64_t v15 = 6;
            }
            uint64_t v16 = v15 - 6;
            while (v16 != v14)
            {
              unint64_t v13 = v7[v14++ + 13];
              if (v13)
              {
                uint64_t v8 = v14 + 5;
                goto LABEL_11;
              }
            }
          }
        }
      }
    }
  }
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v17 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v18 = *(void *)(v0 + 96);
  return v17(v18);
}

{
  uint64_t v0;
  uint64_t v1;

  uint64_t v1 = *(void *)(*(void *)(v0 + 48) + 112);
  *(void *)(v0 + 136) = v1;
  return MEMORY[0x270FA2498](specialized Sequence.asyncCompactMap<A>(_:), v1, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = v0[6];
  ConfigCache.subscript.getter(v0[15], v0[16], v0[11]);
  return MEMORY[0x270FA2498](specialized Sequence.asyncCompactMap<A>(_:), v1, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v18;

  uint64_t v1 = v0[11];
  uint64_t v2 = type metadata accessor for AspireApiConfig(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    outlined destroy of AspireApiConfig?(v1);
    char v3 = specialized Sequence.asyncCompactMap<A>(_:);
  }
  else
  {
    uint64_t v4 = v0[10];
    outlined init with copy of AspireApiConfig.OneOf_Config?(v1, v4);
    uint64_t v5 = type metadata accessor for AspireApiConfig.OneOf_Config(0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5) == 1)
    {
      outlined destroy of AspireApiConfig(v0[11], type metadata accessor for AspireApiConfig);
      char v3 = specialized Sequence.asyncCompactMap<A>(_:);
    }
    else
    {
      unint64_t v6 = v0[10];
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v7 = v0[11];
        uint64_t v8 = v0[9];
        outlined init with take of AspireApiPIRConfig(v6, v8, type metadata accessor for AspireApiPECConfig);
        unint64_t v9 = *(void *)(v8 + 32);
        v0[18] = v9;
        uint64_t v10 = *(void *)(v8 + 40);
        v0[19] = v10;
        outlined copy of Data._Representation(v9, v10);
        outlined destroy of AspireApiConfig(v8, type metadata accessor for AspireApiPECConfig);
        outlined destroy of AspireApiConfig(v7, type metadata accessor for AspireApiConfig);
        char v3 = specialized Sequence.asyncCompactMap<A>(_:);
      }
      else
      {
        uint64_t v11 = v0[11];
        unint64_t v13 = v0[7];
        unint64_t v12 = v0[8];
        outlined init with take of AspireApiPIRConfig(v6, v12, type metadata accessor for AspireApiPIRConfig);
        uint64_t v14 = (uint64_t *)(*(void *)(v12 + *(int *)(v13 + 20))
                        + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__evaluationKeyConfigHash);
        swift_beginAccess();
        uint64_t v15 = *v14;
        v0[20] = *v14;
        uint64_t v16 = v14[1];
        v0[21] = v16;
        outlined copy of Data._Representation(v15, v16);
        outlined destroy of AspireApiConfig(v12, type metadata accessor for AspireApiPIRConfig);
        outlined destroy of AspireApiConfig(v11, type metadata accessor for AspireApiConfig);
        char v3 = specialized Sequence.asyncCompactMap<A>(_:);
      }
    }
  }
  return MEMORY[0x270FA2498](v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)();
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  int64_t v10;
  int64_t v11;
  char *v12;
  unint64_t v13;
  int64_t v14;
  uint64_t (*v15)(uint64_t);
  uint64_t v16;
  uint64_t v18;

  uint64_t v1 = (uint64_t (*)())swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(v0 + 104);
  uint64_t v5 = *(void *)(v0 + 112);
  if (v5)
  {
    unint64_t v6 = (v5 - 1) & v5;
    uint64_t v7 = __clz(__rbit64(v5)) | (v4 << 6);
    uint64_t v1 = *(uint64_t (**)())(v0 + 40);
    goto LABEL_3;
  }
  uint64_t v10 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v11 = (unint64_t)((1 << *(unsigned char *)(v0 + 176)) + 63) >> 6;
  uint64_t v1 = *(uint64_t (**)())(v0 + 40);
  if (v10 < v11)
  {
    unint64_t v12 = (char *)v1 + 56;
    unint64_t v13 = *((void *)v1 + v10 + 7);
    ++v4;
    if (v13)
    {
LABEL_9:
      unint64_t v6 = (v13 - 1) & v13;
      uint64_t v7 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_3:
      *(void *)(v0 + 104) = v4;
      *(void *)(v0 + 112) = v6;
      uint64_t v8 = *(void *)(v0 + 48);
      unint64_t v9 = (void *)(*((void *)v1 + 6) + 16 * v7);
      *(void *)(v0 + 120) = *v9;
      *(void *)(v0 + 128) = v9[1];
      swift_bridgeObjectRetain();
      uint64_t v1 = specialized Sequence.asyncCompactMap<A>(_:);
      uint64_t v2 = v8;
      char v3 = 0;
      return MEMORY[0x270FA2498](v1, v2, v3);
    }
    uint64_t v4 = v10 + 1;
    if (v10 + 1 < v11)
    {
      unint64_t v13 = *(void *)&v12[8 * v4];
      if (v13) {
        goto LABEL_9;
      }
      uint64_t v4 = v10 + 2;
      if (v10 + 2 < v11)
      {
        unint64_t v13 = *(void *)&v12[8 * v4];
        if (v13) {
          goto LABEL_9;
        }
        uint64_t v4 = v10 + 3;
        if (v10 + 3 < v11)
        {
          unint64_t v13 = *(void *)&v12[8 * v4];
          if (v13) {
            goto LABEL_9;
          }
          uint64_t v14 = v10 + 4;
          if (v14 < v11)
          {
            unint64_t v13 = *(void *)&v12[8 * v14];
            if (v13)
            {
              uint64_t v4 = v14;
              goto LABEL_9;
            }
            while (1)
            {
              uint64_t v4 = v14 + 1;
              if (__OFADD__(v14, 1)) {
                break;
              }
              if (v4 >= v11) {
                goto LABEL_22;
              }
              unint64_t v13 = *(void *)&v12[8 * v4];
              ++v14;
              if (v13) {
                goto LABEL_9;
              }
            }
LABEL_26:
            __break(1u);
            return MEMORY[0x270FA2498](v1, v2, v3);
          }
        }
      }
    }
  }
LABEL_22:
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v15 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v16 = *(void *)(v0 + 96);
  return v15(v16);
}

{
  uint64_t v0;
  char isUniquelyReferenced_nonNull_native;
  void *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  int64_t v14;
  int64_t v15;
  char *v16;
  unint64_t v17;
  int64_t v18;
  uint64_t (*v19)(uint64_t);
  uint64_t v20;
  long long v22;
  uint64_t v23;

  uint64_t v22 = *(_OWORD *)(v0 + 144);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v2 = *(void **)(v0 + 96);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2[2] + 1, 1, *(void **)(v0 + 96));
  }
  uint64_t v4 = v2[2];
  char v3 = v2[3];
  if (v4 >= v3 >> 1) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v3 > 1), v4 + 1, 1, v2);
  }
  v2[2] = v4 + 1;
  *(_OWORD *)&v2[2 * v4 + 4] = v22;
  uint64_t v5 = (uint64_t (*)())swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(v0 + 104);
  unint64_t v9 = *(void *)(v0 + 112);
  *(void *)(v0 + 96) = v2;
  if (v9)
  {
    uint64_t v10 = (v9 - 1) & v9;
    uint64_t v11 = __clz(__rbit64(v9)) | (v8 << 6);
    uint64_t v5 = *(uint64_t (**)())(v0 + 40);
    goto LABEL_7;
  }
  uint64_t v14 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_30;
  }
  uint64_t v15 = (unint64_t)((1 << *(unsigned char *)(v0 + 176)) + 63) >> 6;
  uint64_t v5 = *(uint64_t (**)())(v0 + 40);
  if (v14 < v15)
  {
    uint64_t v16 = (char *)v5 + 56;
    unint64_t v17 = *((void *)v5 + v14 + 7);
    ++v8;
    if (v17)
    {
LABEL_13:
      uint64_t v10 = (v17 - 1) & v17;
      uint64_t v11 = __clz(__rbit64(v17)) + (v8 << 6);
LABEL_7:
      *(void *)(v0 + 104) = v8;
      *(void *)(v0 + 112) = v10;
      unint64_t v12 = *(void *)(v0 + 48);
      unint64_t v13 = (void *)(*((void *)v5 + 6) + 16 * v11);
      *(void *)(v0 + 120) = *v13;
      *(void *)(v0 + 128) = v13[1];
      swift_bridgeObjectRetain();
      uint64_t v5 = specialized Sequence.asyncCompactMap<A>(_:);
      unint64_t v6 = v12;
      uint64_t v7 = 0;
      return MEMORY[0x270FA2498](v5, v6, v7);
    }
    uint64_t v8 = v14 + 1;
    if (v14 + 1 < v15)
    {
      unint64_t v17 = *(void *)&v16[8 * v8];
      if (v17) {
        goto LABEL_13;
      }
      uint64_t v8 = v14 + 2;
      if (v14 + 2 < v15)
      {
        unint64_t v17 = *(void *)&v16[8 * v8];
        if (v17) {
          goto LABEL_13;
        }
        uint64_t v8 = v14 + 3;
        if (v14 + 3 < v15)
        {
          unint64_t v17 = *(void *)&v16[8 * v8];
          if (v17) {
            goto LABEL_13;
          }
          uint64_t v18 = v14 + 4;
          if (v18 < v15)
          {
            unint64_t v17 = *(void *)&v16[8 * v18];
            if (v17)
            {
              uint64_t v8 = v18;
              goto LABEL_13;
            }
            while (1)
            {
              uint64_t v8 = v18 + 1;
              if (__OFADD__(v18, 1)) {
                break;
              }
              if (v8 >= v15) {
                goto LABEL_26;
              }
              unint64_t v17 = *(void *)&v16[8 * v8];
              ++v18;
              if (v17) {
                goto LABEL_13;
              }
            }
LABEL_30:
            __break(1u);
            return MEMORY[0x270FA2498](v5, v6, v7);
          }
        }
      }
    }
  }
LABEL_26:
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v19 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v20 = *(void *)(v0 + 96);
  return v19(v20);
}

{
  uint64_t v0;
  char isUniquelyReferenced_nonNull_native;
  void *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  int64_t v14;
  int64_t v15;
  char *v16;
  unint64_t v17;
  int64_t v18;
  uint64_t (*v19)(uint64_t);
  uint64_t v20;
  long long v22;
  uint64_t v23;

  uint64_t v22 = *(_OWORD *)(v0 + 160);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v2 = *(void **)(v0 + 96);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2[2] + 1, 1, *(void **)(v0 + 96));
  }
  uint64_t v4 = v2[2];
  char v3 = v2[3];
  if (v4 >= v3 >> 1) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v3 > 1), v4 + 1, 1, v2);
  }
  v2[2] = v4 + 1;
  *(_OWORD *)&v2[2 * v4 + 4] = v22;
  uint64_t v5 = (uint64_t (*)())swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(v0 + 104);
  unint64_t v9 = *(void *)(v0 + 112);
  *(void *)(v0 + 96) = v2;
  if (v9)
  {
    uint64_t v10 = (v9 - 1) & v9;
    uint64_t v11 = __clz(__rbit64(v9)) | (v8 << 6);
    uint64_t v5 = *(uint64_t (**)())(v0 + 40);
    goto LABEL_7;
  }
  uint64_t v14 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_30;
  }
  uint64_t v15 = (unint64_t)((1 << *(unsigned char *)(v0 + 176)) + 63) >> 6;
  uint64_t v5 = *(uint64_t (**)())(v0 + 40);
  if (v14 < v15)
  {
    uint64_t v16 = (char *)v5 + 56;
    unint64_t v17 = *((void *)v5 + v14 + 7);
    ++v8;
    if (v17)
    {
LABEL_13:
      uint64_t v10 = (v17 - 1) & v17;
      uint64_t v11 = __clz(__rbit64(v17)) + (v8 << 6);
LABEL_7:
      *(void *)(v0 + 104) = v8;
      *(void *)(v0 + 112) = v10;
      unint64_t v12 = *(void *)(v0 + 48);
      unint64_t v13 = (void *)(*((void *)v5 + 6) + 16 * v11);
      *(void *)(v0 + 120) = *v13;
      *(void *)(v0 + 128) = v13[1];
      swift_bridgeObjectRetain();
      uint64_t v5 = specialized Sequence.asyncCompactMap<A>(_:);
      unint64_t v6 = v12;
      uint64_t v7 = 0;
      return MEMORY[0x270FA2498](v5, v6, v7);
    }
    uint64_t v8 = v14 + 1;
    if (v14 + 1 < v15)
    {
      unint64_t v17 = *(void *)&v16[8 * v8];
      if (v17) {
        goto LABEL_13;
      }
      uint64_t v8 = v14 + 2;
      if (v14 + 2 < v15)
      {
        unint64_t v17 = *(void *)&v16[8 * v8];
        if (v17) {
          goto LABEL_13;
        }
        uint64_t v8 = v14 + 3;
        if (v14 + 3 < v15)
        {
          unint64_t v17 = *(void *)&v16[8 * v8];
          if (v17) {
            goto LABEL_13;
          }
          uint64_t v18 = v14 + 4;
          if (v18 < v15)
          {
            unint64_t v17 = *(void *)&v16[8 * v18];
            if (v17)
            {
              uint64_t v8 = v18;
              goto LABEL_13;
            }
            while (1)
            {
              uint64_t v8 = v18 + 1;
              if (__OFADD__(v18, 1)) {
                break;
              }
              if (v8 >= v15) {
                goto LABEL_26;
              }
              unint64_t v17 = *(void *)&v16[8 * v8];
              ++v18;
              if (v17) {
                goto LABEL_13;
              }
            }
LABEL_30:
            __break(1u);
            return MEMORY[0x270FA2498](v5, v6, v7);
          }
        }
      }
    }
  }
LABEL_26:
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v19 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v20 = *(void *)(v0 + 96);
  return v19(v20);
}

uint64_t specialized Sequence.asyncMap<A>(_:)(uint64_t a1, uint64_t a2)
{
  v2[2] = a1;
  v2[3] = a2;
  uint64_t v3 = type metadata accessor for Data.Iterator();
  v2[4] = v3;
  v2[5] = *(void *)(v3 - 8);
  void v2[6] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiConfig?);
  v2[7] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized Sequence.asyncMap<A>(_:), 0, 0);
}

uint64_t specialized Sequence.asyncMap<A>(_:)()
{
  uint64_t v1 = (void *)v0[2];
  uint64_t v2 = v1[2];
  v0[8] = v2;
  if (v2)
  {
    uint64_t v3 = *(void *)(v0[3] + 112);
    uint64_t v4 = MEMORY[0x263F8EE78];
    v0[10] = 0;
    v0[11] = v4;
    v0[9] = v3;
    v0[12] = v1[4];
    v0[13] = v1[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return MEMORY[0x270FA2498](specialized Sequence.asyncMap<A>(_:), v3, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = (uint64_t (*)(uint64_t))v0[1];
    uint64_t v6 = MEMORY[0x263F8EE78];
    return v5(v6);
  }
}

{
  void *v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = v0[3];
  ConfigCache.subscript.getter(v0[12], v0[13], v0[7]);
  return MEMORY[0x270FA2498](specialized Sequence.asyncMap<A>(_:), v1, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  uint64_t v1 = v0[7];
  uint64_t v2 = type metadata accessor for AspireApiConfig(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    outlined destroy of AspireApiConfig?(v1);
    uint64_t v3 = 0;
    uint64_t v4 = 0xC000000000000000;
LABEL_11:
    outlined consume of Data._Representation(v3, v4);
    unint64_t v9 = (void *)MEMORY[0x263F8EE78];
  }
  else
  {
    uint64_t v5 = (uint64_t *)(v1 + *(int *)(v2 + 20));
    uint64_t v3 = *v5;
    uint64_t v4 = v5[1];
    outlined copy of Data._Representation(*v5, v4);
    outlined destroy of AspireApiConfig(v1, type metadata accessor for AspireApiConfig);
    switch(v4 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v3), v3)) {
          goto LABEL_19;
        }
        uint64_t v6 = HIDWORD(v3) - (int)v3;
LABEL_8:
        if (!v6) {
          goto LABEL_11;
        }
        if (v6 < 1)
        {
          unint64_t v9 = (void *)MEMORY[0x263F8EE78];
        }
        else
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
          unint64_t v9 = (void *)swift_allocObject();
          uint64_t v10 = _swift_stdlib_malloc_size(v9);
          v9[2] = v6;
          v9[3] = 2 * v10 - 64;
        }
        unint64_t v12 = v0[5];
        uint64_t v11 = v0[6];
        unint64_t v13 = v0[4];
        outlined copy of Data._Representation(v3, v4);
        uint64_t v14 = Data._copyContents(initializing:)();
        outlined consume of Data._Representation(v3, v4);
        (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
        if (v14 != v6)
        {
          __break(1u);
LABEL_19:
          __break(1u);
LABEL_20:
          __break(1u);
          JUMPOUT(0x249CEA090);
        }
        outlined consume of Data._Representation(v3, v4);
        break;
      case 2uLL:
        uint64_t v8 = *(void *)(v3 + 16);
        uint64_t v7 = *(void *)(v3 + 24);
        uint64_t v6 = v7 - v8;
        if (!__OFSUB__(v7, v8)) {
          goto LABEL_8;
        }
        goto LABEL_20;
      case 3uLL:
        goto LABEL_11;
      default:
        uint64_t v6 = BYTE6(v4);
        goto LABEL_8;
    }
  }
  v0[14] = v9;
  swift_bridgeObjectRetain();
  return MEMORY[0x270FA2498](specialized Sequence.asyncMap<A>(_:), 0, 0);
}

{
  uint64_t v0;
  char isUniquelyReferenced_nonNull_native;
  void *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  long long v9;
  uint64_t (*v10)(void *);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v2 = *(void **)(v0 + 88);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2[2] + 1, 1, *(void **)(v0 + 88));
  }
  uint64_t v4 = v2[2];
  uint64_t v3 = v2[3];
  if (v4 >= v3 >> 1) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v3 > 1), v4 + 1, 1, v2);
  }
  uint64_t v5 = *(void *)(v0 + 96);
  uint64_t v6 = *(void *)(v0 + 64);
  uint64_t v7 = *(void *)(v0 + 80) + 1;
  uint64_t v8 = &v2[3 * v4];
  unint64_t v9 = *(_OWORD *)(v0 + 104);
  v2[2] = v4 + 1;
  v8[4] = v5;
  *(_OWORD *)(v8 + 5) = v9;
  swift_bridgeObjectRelease();
  if (v7 == v6)
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = *(uint64_t (**)(void *))(v0 + 8);
    return v10(v2);
  }
  else
  {
    unint64_t v12 = *(void *)(v0 + 72);
    unint64_t v13 = *(void *)(v0 + 80) + 1;
    *(void *)(v0 + 80) = v13;
    *(void *)(v0 + 88) = v2;
    uint64_t v14 = *(void *)(v0 + 16) + 16 * v13;
    *(void *)(v0 + 96) = *(void *)(v14 + 32);
    *(void *)(v0 + 104) = *(void *)(v14 + 40);
    swift_bridgeObjectRetain();
    return MEMORY[0x270FA2498](specialized Sequence.asyncMap<A>(_:), v12, 0);
  }
}

uint64_t outlined destroy of AspireApiConfig?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiConfig?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of AspireApiConfig.OneOf_Config?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of AspireApiPIRConfig(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of AspireApiConfig(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t *StaticPIRParameters.defaultCacheEntryMinutesToLive.unsafeMutableAddressor()
{
  if (one-time initialization token for defaultCacheEntryMinutesToLive != -1) {
    swift_once();
  }
  return &static StaticPIRParameters.defaultCacheEntryMinutesToLive;
}

CipherML::StaticPIRParameters::CodingKeys_optional __swiftcall StaticPIRParameters.CodingKeys.init(stringValue:)(Swift::String stringValue)
{
  object = stringValue._object;
  v2._countAndFlagsBits = stringValue._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of StaticPIRParameters.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4) {
    return (CipherML::StaticPIRParameters::CodingKeys_optional)4;
  }
  else {
    return (CipherML::StaticPIRParameters::CodingKeys_optional)v3;
  }
}

CipherML::StaticPIRParameters::CodingKeys_optional __swiftcall StaticPIRParameters.CodingKeys.init(intValue:)(Swift::Int intValue)
{
  return (CipherML::StaticPIRParameters::CodingKeys_optional)4;
}

uint64_t StaticPIRParameters.CodingKeys.intValue.getter()
{
  return 0;
}

unint64_t StaticPIRParameters.CodingKeys.rawValue.getter(char a1)
{
  unint64_t result = 0x647261685378616DLL;
  switch(a1)
  {
    case 1:
    case 3:
      unint64_t result = 0xD000000000000011;
      break;
    case 2:
      unint64_t result = 0xD000000000000017;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t StaticPIRParameters.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0x647261685378616DLL;
  switch(a1)
  {
    case 1:
    case 3:
      unint64_t result = 0xD000000000000011;
      break;
    case 2:
      unint64_t result = 0xD000000000000017;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance StaticPIRParameters.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance StaticPIRParameters.CodingKeys(a1, a2, a3, a4, (uint64_t (*)(uint64_t))StaticPIRParameters.CodingKeys.rawValue.getter);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance StaticPIRParameters.CodingKeys(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance StaticPIRParameters.CodingKeys(a1, a2, (void (*)(uint64_t))StaticPIRParameters.CodingKeys.rawValue.getter);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance StaticPIRParameters.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable.hash(into:) in conformance StaticPIRParameters.CodingKeys(a1, a2, a3, (void (*)(void))StaticPIRParameters.CodingKeys.rawValue.getter);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance StaticPIRParameters.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance StaticPIRParameters.CodingKeys(a1, a2, a3, (void (*)(uint64_t))StaticPIRParameters.CodingKeys.rawValue.getter);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance StaticPIRParameters.CodingKeys@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized StaticPIRParameters.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance StaticPIRParameters.CodingKeys@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = StaticPIRParameters.CodingKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance StaticPIRParameters.CodingKeys()
{
  return StaticPIRParameters.CodingKeys.stringValue.getter(*v0);
}

unint64_t protocol witness for CodingKey.init(stringValue:) in conformance StaticPIRParameters.CodingKeys@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized StaticPIRParameters.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance StaticPIRParameters.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type StaticPIRParameters.CodingKeys and conformance StaticPIRParameters.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance StaticPIRParameters.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type StaticPIRParameters.CodingKeys and conformance StaticPIRParameters.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

void one-time initialization function for defaultCacheEntryMinutesToLive()
{
  static StaticPIRParameters.defaultCacheEntryMinutesToLive = 10080;
}

uint64_t static StaticPIRParameters.defaultCacheEntryMinutesToLive.getter()
{
  return static StaticPIRParameters.defaultCacheEntryMinutesToLive.getter(&one-time initialization token for defaultCacheEntryMinutesToLive, (uint64_t)&static StaticPIRParameters.defaultCacheEntryMinutesToLive);
}

void one-time initialization function for maximumCacheEntryMinutesToLive()
{
  static StaticPIRParameters.maximumCacheEntryMinutesToLive = 20160;
}

uint64_t *StaticPIRParameters.maximumCacheEntryMinutesToLive.unsafeMutableAddressor()
{
  if (one-time initialization token for maximumCacheEntryMinutesToLive != -1) {
    swift_once();
  }
  return &static StaticPIRParameters.maximumCacheEntryMinutesToLive;
}

uint64_t static StaticPIRParameters.maximumCacheEntryMinutesToLive.getter()
{
  return static StaticPIRParameters.defaultCacheEntryMinutesToLive.getter(&one-time initialization token for maximumCacheEntryMinutesToLive, (uint64_t)&static StaticPIRParameters.maximumCacheEntryMinutesToLive);
}

uint64_t static StaticPIRParameters.defaultCacheEntryMinutesToLive.getter(void *a1, uint64_t a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  return *(void *)a2;
}

uint64_t StaticPIRParameters.maxShards.getter()
{
  return *(void *)v0;
}

uint64_t StaticPIRParameters.cacheElementCount.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t StaticPIRParameters.cacheEntryMinutesToLive.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t StaticPIRParameters.shardingDependsOn.getter()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> StaticPIRParameters.init(maxShards:cacheElementCount:cacheEntryMinutesToLive:shardingDependsOn:)(CipherML::StaticPIRParameters *__return_ptr retstr, Swift::Int maxShards, Swift::Int_optional cacheElementCount, Swift::Int_optional cacheEntryMinutesToLive, Swift::String_optional shardingDependsOn)
{
  object = shardingDependsOn.value._object;
  uint64_t countAndFlagsBits = shardingDependsOn.value._countAndFlagsBits;
  Swift::Int value = cacheEntryMinutesToLive.value;
  Swift::Int v9 = cacheElementCount.value;
  BOOL is_nil = cacheElementCount.is_nil;
  BOOL v13 = cacheEntryMinutesToLive.is_nil;
  specialized static StaticPIRParameters.validateCacheParams(cacheElementCount:cacheEntryMinutesToLive:)(cacheElementCount.value, cacheElementCount.is_nil, cacheEntryMinutesToLive.value, cacheEntryMinutesToLive.is_nil);
  if (v5)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    retstr->maxShards = maxShards;
    retstr->cacheElementCount.Swift::Int value = v9;
    retstr->cacheElementCount.BOOL is_nil = is_nil;
    retstr->cacheEntryMinutesToLive.Swift::Int value = value;
    retstr->cacheEntryMinutesToLive.BOOL is_nil = v13;
    retstr->shardingDependsOn.value._uint64_t countAndFlagsBits = countAndFlagsBits;
    retstr->shardingDependsOn.value._object = object;
  }
}

void static StaticPIRParameters.validateCacheParams(cacheElementCount:cacheEntryMinutesToLive:)(uint64_t a1, char a2, uint64_t a3, char a4)
{
}

uint64_t StaticPIRParameters.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<StaticPIRParameters.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type StaticPIRParameters.CodingKeys and conformance StaticPIRParameters.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[12] = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance StaticPIRParameters(void *a1)
{
  return StaticPIRParameters.encode(to:)(a1);
}

double StaticPIRParameters.init(from:)@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  specialized StaticPIRParameters.init(from:)(a1, (uint64_t *)v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    double result = *(double *)&v7;
    *(_OWORD *)(a2 + 32) = v7;
    *(void *)(a2 + 48) = v8;
  }
  return result;
}

double protocol witness for Decodable.init(from:) in conformance StaticPIRParameters@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  specialized StaticPIRParameters.init(from:)(a1, (uint64_t *)v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    double result = *(double *)&v7;
    *(_OWORD *)(a2 + 32) = v7;
    *(void *)(a2 + 48) = v8;
  }
  return result;
}

double PECDPParameters.successCount.getter()
{
  return *(double *)v0;
}

double PECDPParameters.successProbability.getter()
{
  return *(double *)(v0 + 8);
}

uint64_t PECDPParameters.maxQueryCountPerDpInterval.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t PECDPParameters.maxFakesPerQuery.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t PECDPParameters.maxTrials.getter()
{
  return *(void *)(v0 + 32);
}

BOOL static PECDPParameters.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return *(double *)a1 == *(double *)a2
      && *(double *)(a1 + 8) == *(double *)(a2 + 8)
      && *(void *)(a1 + 16) == *(void *)(a2 + 16)
      && *(void *)(a1 + 24) == *(void *)(a2 + 24)
      && *(void *)(a1 + 32) == *(void *)(a2 + 32);
}

unint64_t PECDPParameters.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0x4373736563637573;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000012;
      break;
    case 2:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 3:
      unint64_t result = 0xD000000000000010;
      break;
    case 4:
      unint64_t result = 0x6C6169725478616DLL;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance PECDPParameters.CodingKeys()
{
  return PECDPParameters.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PECDPParameters.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized PECDPParameters.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance PECDPParameters.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 5;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PECDPParameters.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PECDPParameters.CodingKeys and conformance PECDPParameters.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PECDPParameters.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PECDPParameters.CodingKeys and conformance PECDPParameters.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t PECDPParameters.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PECDPParameters.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PECDPParameters.CodingKeys and conformance PECDPParameters.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[12] = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[11] = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

double PECDPParameters.init(from:)@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  specialized PECDPParameters.init(from:)(a1, v6);
  if (!v2)
  {
    double result = *(double *)v6;
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(void *)(a2 + 32) = v7;
  }
  return result;
}

void __swiftcall PECDPParameters.init(successCount:successProbability:maxQueryCountPerDpInterval:maxFakesPerQuery:maxTrials:)(CipherML::PECDPParameters *__return_ptr retstr, Swift::Double successCount, Swift::Double successProbability, Swift::Int maxQueryCountPerDpInterval, Swift::Int maxFakesPerQuery, Swift::Int maxTrials)
{
  retstr->successCount = successCount;
  retstr->successProbability = successProbability;
  retstr->maxQueryCountPerDpInterval = maxQueryCountPerDpInterval;
  retstr->maxFakesPerQuery = maxFakesPerQuery;
  retstr->maxTrials = maxTrials;
}

double protocol witness for Decodable.init(from:) in conformance PECDPParameters@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  specialized PECDPParameters.init(from:)(a1, v6);
  if (!v2)
  {
    double result = *(double *)v6;
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(void *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PECDPParameters(void *a1)
{
  return PECDPParameters.encode(to:)(a1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance PECDPParameters(uint64_t a1, uint64_t a2)
{
  return *(double *)a1 == *(double *)a2
      && *(double *)(a1 + 8) == *(double *)(a2 + 8)
      && *(void *)(a1 + 16) == *(void *)(a2 + 16)
      && *(void *)(a1 + 24) == *(void *)(a2 + 24)
      && *(void *)(a1 + 32) == *(void *)(a2 + 32);
}

__n128 StaticPECParameters.differentialPrivacyParameters.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 32);
  char v3 = *(unsigned char *)(v1 + 40);
  __n128 result = *(__n128 *)v1;
  long long v5 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v5;
  *(void *)(a1 + 32) = v2;
  *(unsigned char *)(a1 + 40) = v3;
  return result;
}

void __swiftcall StaticPECParameters.init(differentialPrivacyParameters:)(CipherML::StaticPECParameters *__return_ptr retstr, CipherML::PECDPParameters_optional *differentialPrivacyParameters)
{
  outlined init with take of PECDPParameters?((uint64_t)differentialPrivacyParameters, (uint64_t)v6);
  Swift::Int v3 = v7;
  Swift::Bool v4 = v8;
  long long v5 = v6[1];
  *(_OWORD *)&retstr->differentialPrivacyParameters.value.successCount = v6[0];
  *(_OWORD *)&retstr->differentialPrivacyParameters.value.maxQueryCountPerDpInterval = v5;
  retstr->differentialPrivacyParameters.value.maxTrials = v3;
  retstr->differentialPrivacyParameters.BOOL is_nil = v4;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance StaticPECParameters.CodingKeys()
{
  return 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance StaticPECParameters.CodingKeys()
{
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance StaticPECParameters.CodingKeys()
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance StaticPECParameters.CodingKeys()
{
  return Hasher._finalize()();
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance StaticPECParameters.CodingKeys()
{
  return 0xD00000000000001DLL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance StaticPECParameters.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized StaticPECParameters.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance StaticPECParameters.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type StaticPECParameters.CodingKeys and conformance StaticPECParameters.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance StaticPECParameters.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type StaticPECParameters.CodingKeys and conformance StaticPECParameters.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t StaticPECParameters.encode(to:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<StaticPECParameters.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  Swift::Int v7 = &v9[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type StaticPECParameters.CodingKeys and conformance StaticPECParameters.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with take of PECDPParameters?(v2, (uint64_t)v10);
  outlined init with take of PECDPParameters?((uint64_t)v10, (uint64_t)v9);
  lazy protocol witness table accessor for type PECDPParameters and conformance PECDPParameters();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
}

double StaticPECParameters.init(from:)@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  specialized StaticPECParameters.init(from:)(a1, (uint64_t)&v6);
  if (!v2)
  {
    long long v5 = v7[0];
    *a2 = v6;
    a2[1] = v5;
    double result = *(double *)((char *)v7 + 9);
    *(_OWORD *)((char *)a2 + 25) = *(_OWORD *)((char *)v7 + 9);
  }
  return result;
}

double protocol witness for Decodable.init(from:) in conformance StaticPECParameters@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  specialized StaticPECParameters.init(from:)(a1, (uint64_t)&v6);
  if (!v2)
  {
    long long v5 = v7[0];
    *a2 = v6;
    a2[1] = v5;
    double result = *(double *)((char *)v7 + 9);
    *(_OWORD *)((char *)a2 + 25) = *(_OWORD *)((char *)v7 + 9);
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance StaticPECParameters(void *a1)
{
  return StaticPECParameters.encode(to:)(a1);
}

CipherML::UseCaseGroup::CodingKeys_optional __swiftcall UseCaseGroup.CodingKeys.init(stringValue:)(Swift::String stringValue)
{
  object = stringValue._object;
  v2._uint64_t countAndFlagsBits = stringValue._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of UseCaseGroup.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 6) {
    return (CipherML::UseCaseGroup::CodingKeys_optional)6;
  }
  else {
    return (CipherML::UseCaseGroup::CodingKeys_optional)v3;
  }
}

CipherML::UseCaseGroup::CodingKeys_optional __swiftcall UseCaseGroup.CodingKeys.init(intValue:)(Swift::Int intValue)
{
  return (CipherML::UseCaseGroup::CodingKeys_optional)6;
}

uint64_t UseCaseGroup.CodingKeys.intValue.getter()
{
  return 0;
}

unint64_t UseCaseGroup.CodingKeys.rawValue.getter(char a1)
{
  unint64_t result = 0x7974697275636573;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000014;
      break;
    case 2:
      unint64_t result = 0xD000000000000022;
      break;
    case 3:
      unint64_t result = 0xD000000000000025;
      break;
    case 4:
      unint64_t result = 0x7365736143657375;
      break;
    case 5:
      unint64_t result = 0x436B726F7774656ELL;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t UseCaseGroup.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0x7974697275636573;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000014;
      break;
    case 2:
      unint64_t result = 0xD000000000000022;
      break;
    case 3:
      unint64_t result = 0xD000000000000025;
      break;
    case 4:
      unint64_t result = 0x7365736143657375;
      break;
    case 5:
      unint64_t result = 0x436B726F7774656ELL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance UseCaseGroup.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance StaticPIRParameters.CodingKeys(a1, a2, a3, a4, (uint64_t (*)(uint64_t))UseCaseGroup.CodingKeys.rawValue.getter);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance StaticPIRParameters.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v6 = *a2;
  uint64_t v7 = a5(*a1);
  uint64_t v9 = v8;
  if (v7 == a5(v6) && v9 == v10) {
    char v12 = 1;
  }
  else {
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v12 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance UseCaseGroup.CodingKeys(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance StaticPIRParameters.CodingKeys(a1, a2, (void (*)(uint64_t))UseCaseGroup.CodingKeys.rawValue.getter);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance StaticPIRParameters.CodingKeys(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v5 = *v3;
  Hasher.init(_seed:)();
  a3(v5);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance UseCaseGroup.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable.hash(into:) in conformance StaticPIRParameters.CodingKeys(a1, a2, a3, (void (*)(void))UseCaseGroup.CodingKeys.rawValue.getter);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance StaticPIRParameters.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  a4(*v4);
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance UseCaseGroup.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance StaticPIRParameters.CodingKeys(a1, a2, a3, (void (*)(uint64_t))UseCaseGroup.CodingKeys.rawValue.getter);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance StaticPIRParameters.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v6 = *v4;
  Hasher.init(_seed:)();
  a4(v6);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance UseCaseGroup.CodingKeys@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized UseCaseGroup.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance UseCaseGroup.CodingKeys@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = UseCaseGroup.CodingKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance UseCaseGroup.CodingKeys()
{
  return UseCaseGroup.CodingKeys.stringValue.getter(*v0);
}

unint64_t protocol witness for CodingKey.init(stringValue:) in conformance UseCaseGroup.CodingKeys@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized UseCaseGroup.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance UseCaseGroup.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 6;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance UseCaseGroup.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type UseCaseGroup.CodingKeys and conformance UseCaseGroup.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance UseCaseGroup.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type UseCaseGroup.CodingKeys and conformance UseCaseGroup.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

void *UseCaseGroup.minutesPer30Days.unsafeMutableAddressor()
{
  return &static UseCaseGroup.minutesPer30Days;
}

uint64_t static UseCaseGroup.minutesPer30Days.getter()
{
  return 43200;
}

uint64_t UseCaseGroup.securityLevel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for HE.SecurityLevel();
  unint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);
  return v4(a1, v1, v3);
}

uint64_t UseCaseGroup.keyExpirationMinutes.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for UseCaseGroup() + 20));
}

uint64_t UseCaseGroup.keyRotationBeforeExpirationMinutes.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for UseCaseGroup() + 24));
}

uint64_t UseCaseGroup.keyRotationIgnoreMissingEvaluationKey.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for UseCaseGroup() + 28));
}

uint64_t UseCaseGroup.useCases.getter()
{
  type metadata accessor for UseCaseGroup();
  return swift_bridgeObjectRetain();
}

uint64_t UseCaseGroup.networkConfig.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for UseCaseGroup();
  return outlined init with copy of NetworkConfig(v1 + *(int *)(v3 + 36), a1, type metadata accessor for NetworkConfig);
}

uint64_t UseCaseGroup.managesOwnNetworking.getter()
{
  uint64_t v1 = type metadata accessor for NetworkManagerType(0);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = v0 + *(int *)(type metadata accessor for UseCaseGroup() + 36);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v3, 2, 2, v5);
  LOBYTE(v4) = specialized static NetworkManagerType.== infix(_:_:)(v4, (uint64_t)v3);
  _s8CipherML18NetworkManagerTypeOWOhTm_0((uint64_t)v3, type metadata accessor for NetworkManagerType);
  return v4 & 1;
}

uint64_t UseCaseGroup.init(useCases:networkConfig:keyExpirationMinutes:keyRotationBeforeExpirationMinutes:keyRotationIgnoreMissingEvaluationKey:securityLevel:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v15 = type metadata accessor for NetworkManagerType(0);
  MEMORY[0x270FA5388](v15 - 8);
  unint64_t v17 = (char *)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a3 & 0x8000000000000000) != 0 || (a4 & 0x8000000000000000) != 0 || a3 < a4)
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for framework != -1) {
      swift_once();
    }
    uint64_t v28 = type metadata accessor for Logger();
    __swift_project_value_buffer(v28, (uint64_t)static Logger.framework);
    unint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = a6;
      uint64_t v32 = swift_slowAlloc();
      *(_DWORD *)uint64_t v32 = 134349312;
      unint64_t v43 = a3;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v32 + 12) = 2050;
      unint64_t v43 = a3;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_249C3F000, v29, v30, "Invalid keyExpirationMinutes '%{public}ld' or 'keyExpirationMinutes %{public}ld'", (uint8_t *)v32, 0x16u);
      uint64_t v33 = v32;
      a6 = v31;
      MEMORY[0x24C5B4790](v33, -1, -1);
    }

    goto LABEL_19;
  }
  uint64_t v41 = a6;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v17, 2, 2, v18);
  char v19 = specialized static NetworkManagerType.== infix(_:_:)(a2, (uint64_t)v17);
  _s8CipherML18NetworkManagerTypeOWOhTm_0((uint64_t)v17, type metadata accessor for NetworkManagerType);
  if ((v19 & 1) == 0 && a3 > 0xA8C0)
  {
    if (one-time initialization token for framework != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)static Logger.framework);
    swift_bridgeObjectRetain();
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = swift_slowAlloc();
      uint64_t v40 = swift_slowAlloc();
      unint64_t v43 = v40;
      *(_DWORD *)uint64_t v23 = 134349570;
      uint64_t v42 = a3;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v23 + 12) = 2082;
      swift_bridgeObjectRetain();
      uint64_t v24 = Dictionary.description.getter();
      unint64_t v26 = v25;
      swift_bridgeObjectRelease();
      uint64_t v42 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v26, (uint64_t *)&v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v23 + 22) = 2050;
      uint64_t v42 = 43200;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_249C3F000, v21, v22, "Invalid keyExpirationMinutes '%{public}ld'\nfor self-managed networking usecases '%{public}s'.\nMust be <= %{public}ld", (uint8_t *)v23, 0x20u);
      uint64_t v27 = v40;
      swift_arrayDestroy();
      MEMORY[0x24C5B4790](v27, -1, -1);
      MEMORY[0x24C5B4790](v23, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    a6 = v41;
LABEL_19:
    type metadata accessor for CipherMLError();
    _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    goto LABEL_20;
  }
  a6 = v41;
  specialized static UseCaseGroup.validate(useCases:networkConfig:keyExpirationMinutes:keyRotationBeforeExpirationMinutes:securityLevel:)(a1, a2, a3, a4);
  if (v7)
  {
    swift_bridgeObjectRelease();
LABEL_20:
    uint64_t v34 = type metadata accessor for HE.SecurityLevel();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v34 - 8) + 8))(a6, v34);
    return _s8CipherML18NetworkManagerTypeOWOhTm_0(a2, type metadata accessor for NetworkConfig);
  }
  uint64_t v36 = a6;
  uint64_t v37 = (int *)type metadata accessor for UseCaseGroup();
  *(void *)(a7 + v37[5]) = a3;
  *(void *)(a7 + v37[6]) = a4;
  *(unsigned char *)(a7 + v37[7]) = a5 & 1;
  *(void *)(a7 + v37[8]) = a1;
  uint64_t v38 = type metadata accessor for HE.SecurityLevel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 32))(a7, v36, v38);
  return outlined init with take of NetworkConfig(a2, a7 + v37[9]);
}

uint64_t static UseCaseGroup.validate(useCases:networkConfig:keyExpirationMinutes:keyRotationBeforeExpirationMinutes:securityLevel:)(uint64_t a1, uint64_t a2, unint64_t a3, int64_t a4)
{
  return specialized static UseCaseGroup.validate(useCases:networkConfig:keyExpirationMinutes:keyRotationBeforeExpirationMinutes:securityLevel:)(a1, a2, a3, a4);
}

uint64_t UseCaseGroup.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<UseCaseGroup.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type UseCaseGroup.CodingKeys and conformance UseCaseGroup.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v16 = 0;
  type metadata accessor for HE.SecurityLevel();
  _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_2(&lazy protocol witness table cache variable for type HE.SecurityLevel and conformance HE.SecurityLevel, MEMORY[0x263F38800]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v9 = type metadata accessor for UseCaseGroup();
    char v15 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v14 = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v13 = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    uint64_t v12 = *(void *)(v3 + *(int *)(v9 + 32));
    v11[15] = 4;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : UseCase]);
    lazy protocol witness table accessor for type [String : UseCase] and conformance <> [A : B](&lazy protocol witness table cache variable for type [String : UseCase] and conformance <> [A : B], (void (*)(void))lazy protocol witness table accessor for type UseCase and conformance UseCase);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v11[14] = 5;
    type metadata accessor for NetworkConfig(0);
    _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_2(&lazy protocol witness table cache variable for type NetworkConfig and conformance NetworkConfig, (void (*)(uint64_t))type metadata accessor for NetworkConfig);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance UseCaseGroup(void *a1)
{
  return UseCaseGroup.encode(to:)(a1);
}

uint64_t UseCaseGroup.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v30 = a2;
  uint64_t v31 = type metadata accessor for NetworkConfig(0);
  MEMORY[0x270FA5388](v31);
  uint64_t v32 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for HE.SecurityLevel();
  uint64_t v33 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  unint64_t v35 = (unint64_t)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<UseCaseGroup.CodingKeys>);
  uint64_t v34 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = (int *)type metadata accessor for UseCaseGroup();
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type UseCaseGroup.CodingKeys and conformance UseCaseGroup.CodingKeys();
  uint64_t v12 = (uint64_t)v36;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v12) {
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  }
  uint64_t v36 = a1;
  char v13 = v11;
  uint64_t v14 = v33;
  char v43 = 0;
  _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_2(&lazy protocol witness table cache variable for type HE.SecurityLevel and conformance HE.SecurityLevel, MEMORY[0x263F38800]);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v15 = v6;
  uint64_t v16 = (uint64_t)v13;
  (*(void (**)(char *, unint64_t, uint64_t))(v14 + 32))(v13, v35, v4);
  char v42 = 1;
  uint64_t v17 = KeyedDecodingContainer.decode(_:forKey:)();
  *(void *)&v13[v9[5]] = v17;
  char v41 = 2;
  unint64_t v18 = v17;
  uint64_t v19 = KeyedDecodingContainer.decode(_:forKey:)();
  unint64_t v35 = v18;
  *(void *)(v16 + v9[6]) = v19;
  char v40 = 3;
  int64_t v21 = v19;
  char v22 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int64_t v29 = v21;
  *(unsigned char *)(v16 + v9[7]) = v22 & 1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : UseCase]);
  char v39 = 4;
  lazy protocol witness table accessor for type [String : UseCase] and conformance <> [A : B](&lazy protocol witness table cache variable for type [String : UseCase] and conformance <> [A : B], (void (*)(void))lazy protocol witness table accessor for type UseCase and conformance UseCase);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v23 = v8;
  uint64_t v24 = v37;
  *(void *)(v16 + v9[8]) = v37;
  char v38 = 5;
  _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_2(&lazy protocol witness table cache variable for type NetworkConfig and conformance NetworkConfig, (void (*)(uint64_t))type metadata accessor for NetworkConfig);
  uint64_t v25 = v24;
  swift_bridgeObjectRetain();
  uint64_t v26 = (uint64_t)v32;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v31 = (uint64_t)v23;
  uint64_t v27 = v16 + v9[9];
  outlined init with take of NetworkConfig(v26, v27);
  specialized static UseCaseGroup.validate(useCases:networkConfig:keyExpirationMinutes:keyRotationBeforeExpirationMinutes:securityLevel:)(v25, v27, v35, v29);
  (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v31, v15);
  swift_bridgeObjectRelease();
  outlined init with copy of NetworkConfig(v16, v30, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v36);
  return _s8CipherML18NetworkManagerTypeOWOhTm_0(v16, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
}

uint64_t protocol witness for Decodable.init(from:) in conformance UseCaseGroup@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return UseCaseGroup.init(from:)(a1, a2);
}

unint64_t specialized StaticPIRParameters.CodingKeys.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of StaticPIRParameters.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4) {
    return 4;
  }
  else {
    return v3;
  }
}

void specialized static StaticPIRParameters.validateCacheParams(cacheElementCount:cacheEntryMinutesToLive:)(uint64_t a1, char a2, uint64_t a3, char a4)
{
  if (a2)
  {
    if (a4)
    {
      if (one-time initialization token for defaultCacheEntryMinutesToLive != -1) {
        swift_once();
      }
      a3 = static StaticPIRParameters.defaultCacheEntryMinutesToLive;
    }
  }
  else if (a4)
  {
    if (one-time initialization token for framework != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.framework);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      MEMORY[0x24C5B4790](v8, -1, -1);
    }

LABEL_20:
    type metadata accessor for CipherMLError();
    _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    return;
  }
  if (one-time initialization token for maximumCacheEntryMinutesToLive != -1) {
    swift_once();
  }
  if (static StaticPIRParameters.maximumCacheEntryMinutesToLive < a3)
  {
    if (one-time initialization token for framework != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Logger.framework);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 134349312;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v12 + 12) = 2048;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_249C3F000, v10, v11, "Invalid cacheEntryMinutesToLive '%{public}ld'. Must be <= %ld", (uint8_t *)v12, 0x16u);
      MEMORY[0x24C5B4790](v12, -1, -1);
    }

    goto LABEL_20;
  }
}

unint64_t lazy protocol witness table accessor for type StaticPIRParameters.CodingKeys and conformance StaticPIRParameters.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticPIRParameters.CodingKeys and conformance StaticPIRParameters.CodingKeys;
  if (!lazy protocol witness table cache variable for type StaticPIRParameters.CodingKeys and conformance StaticPIRParameters.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticPIRParameters.CodingKeys and conformance StaticPIRParameters.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type StaticPIRParameters.CodingKeys and conformance StaticPIRParameters.CodingKeys;
  if (!lazy protocol witness table cache variable for type StaticPIRParameters.CodingKeys and conformance StaticPIRParameters.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticPIRParameters.CodingKeys and conformance StaticPIRParameters.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type StaticPIRParameters.CodingKeys and conformance StaticPIRParameters.CodingKeys;
  if (!lazy protocol witness table cache variable for type StaticPIRParameters.CodingKeys and conformance StaticPIRParameters.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticPIRParameters.CodingKeys and conformance StaticPIRParameters.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type StaticPIRParameters.CodingKeys and conformance StaticPIRParameters.CodingKeys;
  if (!lazy protocol witness table cache variable for type StaticPIRParameters.CodingKeys and conformance StaticPIRParameters.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticPIRParameters.CodingKeys and conformance StaticPIRParameters.CodingKeys);
  }
  return result;
}

uint64_t specialized StaticPIRParameters.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<StaticPIRParameters.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type StaticPIRParameters.CodingKeys and conformance StaticPIRParameters.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  }
  LOBYTE(v25) = 0;
  uint64_t v24 = KeyedDecodingContainer.decode(_:forKey:)();
  char v10 = 1;
  LOBYTE(v25) = 1;
  char v11 = KeyedDecodingContainer.contains(_:)();
  if (v11)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int?);
    char v28 = 1;
    lazy protocol witness table accessor for type String? and conformance <A> A?(&lazy protocol witness table cache variable for type Int? and conformance <A> A?, &demangling cache variable for type metadata for Int?);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v23 = v25;
    char v10 = v26;
  }
  else
  {
    uint64_t v23 = 0;
  }
  LOBYTE(v25) = 2;
  char v12 = KeyedDecodingContainer.contains(_:)();
  char v22 = a2;
  if (v12)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int?);
    char v28 = 2;
    lazy protocol witness table accessor for type String? and conformance <A> A?(&lazy protocol witness table cache variable for type Int? and conformance <A> A?, &demangling cache variable for type metadata for Int?);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v21 = v25;
    int v13 = v26;
  }
  else
  {
    uint64_t v21 = 0;
    int v13 = 1;
  }
  int v27 = v13;
  LOBYTE(v25) = 3;
  if (KeyedDecodingContainer.contains(_:)())
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
    char v28 = 3;
    lazy protocol witness table accessor for type String? and conformance <A> A?(&lazy protocol witness table cache variable for type String? and conformance <A> A?, &demangling cache variable for type metadata for String?);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v19 = v25;
    uint64_t v20 = v26;
  }
  else
  {
    uint64_t v19 = 0;
    uint64_t v20 = 0;
  }
  uint64_t v14 = v23;
  uint64_t v15 = v21;
  char v16 = v27;
  specialized static StaticPIRParameters.validateCacheParams(cacheElementCount:cacheEntryMinutesToLive:)(v23, v10, v21, v27);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  uint64_t v17 = v22;
  *char v22 = v24;
  v17[1] = v14;
  *((unsigned char *)v17 + 16) = v10;
  v17[3] = v15;
  *((unsigned char *)v17 + 32) = v16;
  uint64_t v18 = v20;
  v17[5] = v19;
  v17[6] = v18;
  return result;
}

unint64_t lazy protocol witness table accessor for type PECDPParameters.CodingKeys and conformance PECDPParameters.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PECDPParameters.CodingKeys and conformance PECDPParameters.CodingKeys;
  if (!lazy protocol witness table cache variable for type PECDPParameters.CodingKeys and conformance PECDPParameters.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PECDPParameters.CodingKeys and conformance PECDPParameters.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PECDPParameters.CodingKeys and conformance PECDPParameters.CodingKeys;
  if (!lazy protocol witness table cache variable for type PECDPParameters.CodingKeys and conformance PECDPParameters.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PECDPParameters.CodingKeys and conformance PECDPParameters.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PECDPParameters.CodingKeys and conformance PECDPParameters.CodingKeys;
  if (!lazy protocol witness table cache variable for type PECDPParameters.CodingKeys and conformance PECDPParameters.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PECDPParameters.CodingKeys and conformance PECDPParameters.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PECDPParameters.CodingKeys and conformance PECDPParameters.CodingKeys;
  if (!lazy protocol witness table cache variable for type PECDPParameters.CodingKeys and conformance PECDPParameters.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PECDPParameters.CodingKeys and conformance PECDPParameters.CodingKeys);
  }
  return result;
}

uint64_t specialized PECDPParameters.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x4373736563637573 && a2 == 0xEC000000746E756FLL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x8000000249E94D20 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD00000000000001ALL && a2 == 0x8000000249E94D40 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x8000000249E94D60 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6C6169725478616DLL && a2 == 0xE900000000000073)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

uint64_t specialized PECDPParameters.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PECDPParameters.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PECDPParameters.CodingKeys and conformance PECDPParameters.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  }
  char v22 = 0;
  KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v10 = v9;
  char v21 = 1;
  KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v12 = v11;
  char v20 = 2;
  uint64_t v13 = KeyedDecodingContainer.decode(_:forKey:)();
  char v19 = 3;
  uint64_t v14 = KeyedDecodingContainer.decode(_:forKey:)();
  char v18 = 4;
  uint64_t v15 = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  *a2 = v10;
  a2[1] = v12;
  a2[2] = v13;
  a2[3] = v14;
  a2[4] = v15;
  return result;
}

uint64_t outlined init with take of PECDPParameters?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PECDPParameters?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type StaticPECParameters.CodingKeys and conformance StaticPECParameters.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticPECParameters.CodingKeys and conformance StaticPECParameters.CodingKeys;
  if (!lazy protocol witness table cache variable for type StaticPECParameters.CodingKeys and conformance StaticPECParameters.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticPECParameters.CodingKeys and conformance StaticPECParameters.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type StaticPECParameters.CodingKeys and conformance StaticPECParameters.CodingKeys;
  if (!lazy protocol witness table cache variable for type StaticPECParameters.CodingKeys and conformance StaticPECParameters.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticPECParameters.CodingKeys and conformance StaticPECParameters.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type StaticPECParameters.CodingKeys and conformance StaticPECParameters.CodingKeys;
  if (!lazy protocol witness table cache variable for type StaticPECParameters.CodingKeys and conformance StaticPECParameters.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticPECParameters.CodingKeys and conformance StaticPECParameters.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type StaticPECParameters.CodingKeys and conformance StaticPECParameters.CodingKeys;
  if (!lazy protocol witness table cache variable for type StaticPECParameters.CodingKeys and conformance StaticPECParameters.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticPECParameters.CodingKeys and conformance StaticPECParameters.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PECDPParameters and conformance PECDPParameters()
{
  unint64_t result = lazy protocol witness table cache variable for type PECDPParameters and conformance PECDPParameters;
  if (!lazy protocol witness table cache variable for type PECDPParameters and conformance PECDPParameters)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PECDPParameters and conformance PECDPParameters);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PECDPParameters and conformance PECDPParameters;
  if (!lazy protocol witness table cache variable for type PECDPParameters and conformance PECDPParameters)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PECDPParameters and conformance PECDPParameters);
  }
  return result;
}

uint64_t specialized StaticPECParameters.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD00000000000001DLL && a2 == 0x8000000249E94D80)
  {
    swift_bridgeObjectRelease();
    char v2 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v2 = v3 ^ 1;
  }
  return v2 & 1;
}

uint64_t specialized StaticPECParameters.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<StaticPECParameters.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type StaticPECParameters.CodingKeys and conformance StaticPECParameters.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  }
  lazy protocol witness table accessor for type PECDPParameters and conformance PECDPParameters();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  long long v13 = v16;
  long long v14 = v15;
  uint64_t v9 = v17;
  char v10 = v18;
  uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  long long v12 = v13;
  *(_OWORD *)a2 = v14;
  *(_OWORD *)(a2 + 16) = v12;
  *(void *)(a2 + 32) = v9;
  *(unsigned char *)(a2 + 40) = v10;
  return result;
}

unint64_t specialized UseCaseGroup.CodingKeys.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of UseCaseGroup.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 6) {
    return 6;
  }
  else {
    return v3;
  }
}

uint64_t type metadata accessor for UseCaseGroup()
{
  uint64_t result = type metadata singleton initialization cache for UseCaseGroup;
  if (!type metadata singleton initialization cache for UseCaseGroup) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t specialized static UseCaseGroup.validate(useCases:networkConfig:keyExpirationMinutes:keyRotationBeforeExpirationMinutes:securityLevel:)(uint64_t a1, uint64_t a2, unint64_t a3, int64_t a4)
{
  uint64_t v8 = type metadata accessor for NetworkManagerType(0);
  MEMORY[0x270FA5388](v8 - 8);
  char v10 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a3 & 0x8000000000000000) != 0 || a4 < 0 || (uint64_t)a3 < a4)
  {
    if (one-time initialization token for framework != -1) {
LABEL_46:
    }
      swift_once();
    uint64_t v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)static Logger.framework);
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = swift_slowAlloc();
      *(_DWORD *)uint64_t v25 = 134349312;
      unint64_t v64 = a3;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v25 + 12) = 2050;
      unint64_t v64 = a3;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_249C3F000, v23, v24, "Invalid keyExpirationMinutes '%{public}ld' or 'keyExpirationMinutes %{public}ld'", (uint8_t *)v25, 0x16u);
      MEMORY[0x24C5B4790](v25, -1, -1);
    }

    goto LABEL_13;
  }
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
  long long v12 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
  v12(v10, 2, 2, v11);
  char v13 = specialized static NetworkManagerType.== infix(_:_:)(a2, (uint64_t)v10);
  _s8CipherML18NetworkManagerTypeOWOhTm_0((uint64_t)v10, type metadata accessor for NetworkManagerType);
  if ((v13 & 1) == 0 && a3 > 0xA8C0)
  {
    if (one-time initialization token for framework != -1) {
      goto LABEL_48;
    }
    goto LABEL_7;
  }
  v12(v10, 2, 2, v11);
  a3 = specialized static NetworkManagerType.== infix(_:_:)(a2, (uint64_t)v10);
  uint64_t result = _s8CipherML18NetworkManagerTypeOWOhTm_0((uint64_t)v10, type metadata accessor for NetworkManagerType);
  if (a3)
  {
    int64_t v27 = 0;
    uint64_t v28 = a1 + 64;
    uint64_t v29 = 1 << *(unsigned char *)(a1 + 32);
    uint64_t v30 = -1;
    if (v29 < 64) {
      uint64_t v30 = ~(-1 << v29);
    }
    unint64_t v31 = v30 & *(void *)(a1 + 64);
    int64_t v32 = (unint64_t)(v29 + 63) >> 6;
    while (1)
    {
      if (v31)
      {
        unint64_t v33 = __clz(__rbit64(v31));
        v31 &= v31 - 1;
        unint64_t v34 = v33 | (v27 << 6);
      }
      else
      {
        int64_t v35 = v27 + 1;
        if (__OFADD__(v27, 1))
        {
          __break(1u);
          goto LABEL_46;
        }
        if (v35 >= v32) {
          return result;
        }
        unint64_t v36 = *(void *)(v28 + 8 * v35);
        ++v27;
        if (!v36)
        {
          int64_t v27 = v35 + 1;
          if (v35 + 1 >= v32) {
            return result;
          }
          unint64_t v36 = *(void *)(v28 + 8 * v27);
          if (!v36)
          {
            int64_t v27 = v35 + 2;
            if (v35 + 2 >= v32) {
              return result;
            }
            unint64_t v36 = *(void *)(v28 + 8 * v27);
            if (!v36)
            {
              int64_t v37 = v35 + 3;
              if (v37 >= v32) {
                return result;
              }
              unint64_t v36 = *(void *)(v28 + 8 * v37);
              if (!v36)
              {
                while (1)
                {
                  int64_t v27 = v37 + 1;
                  if (__OFADD__(v37, 1)) {
                    break;
                  }
                  if (v27 >= v32) {
                    return result;
                  }
                  unint64_t v36 = *(void *)(v28 + 8 * v27);
                  ++v37;
                  if (v36) {
                    goto LABEL_34;
                  }
                }
                __break(1u);
LABEL_48:
                swift_once();
LABEL_7:
                uint64_t v14 = type metadata accessor for Logger();
                __swift_project_value_buffer(v14, (uint64_t)static Logger.framework);
                swift_bridgeObjectRetain_n();
                long long v15 = Logger.logObject.getter();
                os_log_type_t v16 = static os_log_type_t.error.getter();
                if (os_log_type_enabled(v15, v16))
                {
                  uint64_t v17 = swift_slowAlloc();
                  uint64_t v18 = swift_slowAlloc();
                  unint64_t v64 = v18;
                  *(_DWORD *)uint64_t v17 = 134349570;
                  uint64_t v63 = a3;
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  *(_WORD *)(v17 + 12) = 2082;
                  swift_bridgeObjectRetain();
                  uint64_t v19 = Dictionary.description.getter();
                  unint64_t v21 = v20;
                  swift_bridgeObjectRelease();
                  uint64_t v63 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v21, (uint64_t *)&v64);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  swift_bridgeObjectRelease_n();
                  swift_bridgeObjectRelease();
                  *(_WORD *)(v17 + 22) = 2050;
                  uint64_t v63 = 43200;
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  _os_log_impl(&dword_249C3F000, v15, v16, "Invalid keyExpirationMinutes '%{public}ld' for self-managed networking usecases\n'%{public}s'. Must be <= %{public}ld", (uint8_t *)v17, 0x20u);
                  swift_arrayDestroy();
                  MEMORY[0x24C5B4790](v18, -1, -1);
                  MEMORY[0x24C5B4790](v17, -1, -1);
                }
                else
                {

                  swift_bridgeObjectRelease_n();
                }
LABEL_13:
                type metadata accessor for CipherMLError();
                _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
                swift_allocError();
                swift_storeEnumTagMultiPayload();
                return swift_willThrow();
              }
              int64_t v27 = v37;
            }
          }
        }
LABEL_34:
        unint64_t v31 = (v36 - 1) & v36;
        unint64_t v34 = __clz(__rbit64(v36)) + (v27 << 6);
      }
      unint64_t v38 = *(void *)(a1 + 56) + (v34 << 6);
      if (*(unsigned char *)(v38 + 56) == 1)
      {
        a3 = *(void *)(v38 + 32);
        uint64_t v39 = *(void *)(v38 + 16);
        if ((v39 & 1) == 0 || (a3 & 1) == 0)
        {
          char v40 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v34);
          unint64_t v41 = v40[1];
          uint64_t v60 = *v40;
          uint64_t v43 = *(void *)v38;
          uint64_t v42 = *(void *)(v38 + 8);
          uint64_t v44 = *(void *)(v38 + 24);
          uint64_t v45 = *(void *)(v38 + 40);
          uint64_t v46 = *(void *)(v38 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v61 = v42;
          uint64_t v62 = v43;
          outlined copy of UseCase(v43, v42, v39, v44, a3, v45, v46, 1);
          if (one-time initialization token for framework != -1) {
            swift_once();
          }
          uint64_t v47 = type metadata accessor for Logger();
          __swift_project_value_buffer(v47, (uint64_t)static Logger.framework);
          swift_bridgeObjectRetain();
          char v48 = Logger.logObject.getter();
          os_log_type_t v49 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v48, v49))
          {
            uint64_t v50 = swift_slowAlloc();
            uint64_t v57 = v44;
            uint64_t v51 = (uint8_t *)v50;
            uint64_t v52 = swift_slowAlloc();
            uint64_t v58 = v46;
            uint64_t v53 = v52;
            unint64_t v64 = v52;
            uint64_t v59 = v45;
            *(_DWORD *)uint64_t v51 = 136446210;
            unint64_t v56 = v51 + 4;
            swift_bridgeObjectRetain();
            uint64_t v63 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v60, v41, (uint64_t *)&v64);
            uint64_t v45 = v59;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl(&dword_249C3F000, v48, v49, "Invalid use case '%{public}s'\nfor self-managed networking use case group.\nMust have no cache.", v51, 0xCu);
            swift_arrayDestroy();
            uint64_t v54 = v53;
            uint64_t v46 = v58;
            MEMORY[0x24C5B4790](v54, -1, -1);
            BOOL v55 = v51;
            uint64_t v44 = v57;
            MEMORY[0x24C5B4790](v55, -1, -1);
          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
          type metadata accessor for CipherMLError();
          _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (void (*)(uint64_t))type metadata accessor for CipherMLError);
          swift_allocError();
          swift_storeEnumTagMultiPayload();
          swift_willThrow();
          outlined consume of UseCase(v62, v61, v39, v44, a3, v45, v46, 1);
          return swift_release();
        }
      }
    }
  }
  return result;
}

uint64_t outlined init with take of NetworkConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NetworkConfig(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type UseCaseGroup.CodingKeys and conformance UseCaseGroup.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type UseCaseGroup.CodingKeys and conformance UseCaseGroup.CodingKeys;
  if (!lazy protocol witness table cache variable for type UseCaseGroup.CodingKeys and conformance UseCaseGroup.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UseCaseGroup.CodingKeys and conformance UseCaseGroup.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type UseCaseGroup.CodingKeys and conformance UseCaseGroup.CodingKeys;
  if (!lazy protocol witness table cache variable for type UseCaseGroup.CodingKeys and conformance UseCaseGroup.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UseCaseGroup.CodingKeys and conformance UseCaseGroup.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type UseCaseGroup.CodingKeys and conformance UseCaseGroup.CodingKeys;
  if (!lazy protocol witness table cache variable for type UseCaseGroup.CodingKeys and conformance UseCaseGroup.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UseCaseGroup.CodingKeys and conformance UseCaseGroup.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type UseCaseGroup.CodingKeys and conformance UseCaseGroup.CodingKeys;
  if (!lazy protocol witness table cache variable for type UseCaseGroup.CodingKeys and conformance UseCaseGroup.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UseCaseGroup.CodingKeys and conformance UseCaseGroup.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UseCase and conformance UseCase()
{
  unint64_t result = lazy protocol witness table cache variable for type UseCase and conformance UseCase;
  if (!lazy protocol witness table cache variable for type UseCase and conformance UseCase)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UseCase and conformance UseCase);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type UseCase and conformance UseCase;
  if (!lazy protocol witness table cache variable for type UseCase and conformance UseCase)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UseCase and conformance UseCase);
  }
  return result;
}

uint64_t _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_2(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with copy of NetworkConfig(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t _s8CipherML18NetworkManagerTypeOWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t destroy for UseCase(uint64_t a1)
{
  return outlined consume of UseCase(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(unsigned char *)(a1 + 56));
}

uint64_t initializeWithCopy for UseCase(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  char v10 = *(unsigned char *)(a2 + 56);
  outlined copy of UseCase(*(void *)a2, v4, v5, v6, v7, v8, v9, v10);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(unsigned char *)(a1 + 56) = v10;
  return a1;
}

uint64_t assignWithCopy for UseCase(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  char v10 = *(unsigned char *)(a2 + 56);
  outlined copy of UseCase(*(void *)a2, v4, v5, v6, v7, v8, v9, v10);
  uint64_t v11 = *(void *)a1;
  uint64_t v12 = *(void *)(a1 + 8);
  uint64_t v13 = *(void *)(a1 + 16);
  uint64_t v14 = *(void *)(a1 + 24);
  uint64_t v15 = *(void *)(a1 + 32);
  uint64_t v16 = *(void *)(a1 + 40);
  uint64_t v17 = *(void *)(a1 + 48);
  char v18 = *(unsigned char *)(a1 + 56);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(unsigned char *)(a1 + 56) = v10;
  outlined consume of UseCase(v11, v12, v13, v14, v15, v16, v17, v18);
  return a1;
}

__n128 __swift_memcpy57_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for UseCase(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 48);
  char v4 = *(unsigned char *)(a2 + 56);
  uint64_t v5 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 48);
  char v12 = *(unsigned char *)(a1 + 56);
  long long v13 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v13;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = v3;
  *(unsigned char *)(a1 + 56) = v4;
  outlined consume of UseCase(v5, v7, v6, v8, v9, v10, v11, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for UseCase(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 57)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 56);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for UseCase(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 56) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 57) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 57) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 56) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for UseCase(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 56);
}

uint64_t destructiveInjectEnumTag for UseCase(uint64_t result, char a2)
{
  *(unsigned char *)(result + 56) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for UseCase()
{
  return &type metadata for UseCase;
}

uint64_t destroy for StaticPIRParameters()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for StaticPIRParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for StaticPIRParameters(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for StaticPIRParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for StaticPIRParameters(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 56)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 48);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for StaticPIRParameters(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 56) = 0;
    }
    if (a2) {
      *(void *)(result + 48) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for StaticPIRParameters()
{
  return &type metadata for StaticPIRParameters;
}

unsigned char *storeEnumTagSinglePayload for StaticPIRParameters.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *__n128 result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x249CEED44);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for StaticPIRParameters.CodingKeys()
{
  return &type metadata for StaticPIRParameters.CodingKeys;
}

uint64_t initializeBufferWithCopyOfBuffer for PECDPParameters(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for PECDPParameters(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}