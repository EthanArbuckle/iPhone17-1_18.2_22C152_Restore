uint64_t specialized static AspireApiEvaluationKeys.== infix(_:_:)(char *a1, char *a2, uint64_t (*a3)(void, void, double), uint64_t (*a4)(void))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  char v18;
  void (*v19)(char *, uint64_t);
  uint64_t v21;

  v8 = type metadata accessor for UnknownStorage();
  v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x270FA5388](v12);
  v15 = (char *)&v21 - v14;
  if (a3(*(void *)a1, *(void *)a2, v13))
  {
    v16 = a4(0);
    v17 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
    v17(v15, &a1[*(int *)(v16 + 20)], v8);
    v17(v11, &a2[*(int *)(v16 + 20)], v8);
    _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    v18 = dispatch thunk of static Equatable.== infix(_:_:)();
    v19 = *(void (**)(char *, uint64_t))(v9 + 8);
    v19(v11, v8);
    v19(v15, v8);
  }
  else
  {
    v18 = 0;
  }
  return v18 & 1;
}

uint64_t specialized static AspireApiRequest.== infix(_:_:)(char *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v43 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  v42 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  v41 = (char *)&v38 - v7;
  uint64_t v8 = type metadata accessor for AspireApiRequest.OneOf_Request(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v40 = (uint64_t)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireApiRequest.OneOf_Request?, AspireApiRequest.OneOf_Request?));
  MEMORY[0x270FA5388](v11);
  v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
  MEMORY[0x270FA5388](v14 - 8);
  v16 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  v19 = (char *)&v38 - v18;
  MEMORY[0x270FA5388](v20);
  v22 = (char *)&v38 - v21;
  uint64_t v23 = *(void *)a1;
  uint64_t v24 = *((void *)a1 + 1);
  v44 = a1;
  v45 = a2;
  if (v23 == *(void *)a2 && v24 == *((void *)a2 + 1)
    || (char v25 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    uint64_t v39 = v4;
    uint64_t v26 = type metadata accessor for AspireApiRequest(0);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)&v44[*(int *)(v26 + 20)], (uint64_t)v22, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)&v45[*(int *)(v26 + 20)], (uint64_t)v19, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
    uint64_t v27 = (uint64_t)&v13[*(int *)(v11 + 48)];
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v22, (uint64_t)v13, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v19, v27, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
    v28 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    if (v28((uint64_t)v13, 1, v8) == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v19, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v22, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
      if (v28(v27, 1, v8) == 1)
      {
        outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v13, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
LABEL_11:
        uint64_t v31 = v43;
        v32 = *(void (**)(char *, char *, uint64_t))(v43 + 16);
        v33 = v41;
        uint64_t v34 = v39;
        v32(v41, &v44[*(int *)(v26 + 24)], v39);
        v35 = v42;
        v32(v42, &v45[*(int *)(v26 + 24)], v34);
        _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
        char v25 = dispatch thunk of static Equatable.== infix(_:_:)();
        v36 = *(void (**)(char *, uint64_t))(v31 + 8);
        v36(v35, v34);
        v36(v33, v34);
        return v25 & 1;
      }
    }
    else
    {
      outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v13, (uint64_t)v16, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
      if (v28(v27, 1, v8) != 1)
      {
        uint64_t v29 = v40;
        outlined init with take of AspireApiEvaluationKeyMetadata(v27, v40, type metadata accessor for AspireApiRequest.OneOf_Request);
        char v30 = specialized static AspireApiRequest.OneOf_Request.== infix(_:_:)((uint64_t)v16, v29);
        _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0(v29, type metadata accessor for AspireApiRequest.OneOf_Request);
        outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v19, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
        outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v22, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
        _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v16, type metadata accessor for AspireApiRequest.OneOf_Request);
        outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v13, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
        if (v30) {
          goto LABEL_11;
        }
LABEL_12:
        char v25 = 0;
        return v25 & 1;
      }
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v19, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v22, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
      _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v16, type metadata accessor for AspireApiRequest.OneOf_Request);
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v13, &demangling cache variable for type metadata for (AspireApiRequest.OneOf_Request?, AspireApiRequest.OneOf_Request?));
    goto LABEL_12;
  }
  return v25 & 1;
}

uint64_t specialized static AspireApiPIRRequest.== infix(_:_:)(_DWORD *a1, _DWORD *a2)
{
  uint64_t v106 = type metadata accessor for UnknownStorage();
  uint64_t v97 = *(void *)(v106 - 8);
  MEMORY[0x270FA5388](v106);
  v96 = (char *)&v89 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  v95 = (char *)&v89 - v6;
  uint64_t v99 = type metadata accessor for AspireApiEvaluationKey(0);
  uint64_t v102 = *(void *)(v99 - 8);
  MEMORY[0x270FA5388](v99);
  uint64_t v94 = (uint64_t)&v89 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v98 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireApiEvaluationKey?, AspireApiEvaluationKey?));
  MEMORY[0x270FA5388](v98);
  v103 = (char *)&v89 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKey?);
  MEMORY[0x270FA5388](v9 - 8);
  v101 = (char *)&v89 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v104 = (uint64_t)&v89 - v12;
  MEMORY[0x270FA5388](v13);
  v100 = (char *)&v89 - v14;
  uint64_t v113 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  uint64_t v110 = *(void *)(v113 - 8);
  MEMORY[0x270FA5388](v113);
  v105 = (uint64_t *)((char *)&v89 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v109 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireApiEvaluationKeyMetadata?, AspireApiEvaluationKeyMetadata?));
  MEMORY[0x270FA5388](v109);
  uint64_t v17 = (char *)&v89 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  MEMORY[0x270FA5388](v18 - 8);
  v107 = (uint64_t *)((char *)&v89 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v20);
  uint64_t v111 = (uint64_t)&v89 - v21;
  MEMORY[0x270FA5388](v22);
  uint64_t v112 = (uint64_t)&v89 - v23;
  uint64_t v24 = type metadata accessor for AspirePirEncryptedIndices(0);
  uint64_t v25 = *(void *)(v24 - 8);
  MEMORY[0x270FA5388](v24);
  v108 = (uint64_t *)((char *)&v89 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspirePirEncryptedIndices?, AspirePirEncryptedIndices?));
  MEMORY[0x270FA5388](v27);
  uint64_t v29 = (char *)&v89 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  MEMORY[0x270FA5388](v30 - 8);
  v32 = (uint64_t *)((char *)&v89 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v33);
  v35 = (char *)&v89 - v34;
  MEMORY[0x270FA5388](v36);
  uint64_t v38 = (char *)&v89 - v37;
  if (*a1 != *a2) {
    goto LABEL_33;
  }
  v93 = v17;
  uint64_t v39 = type metadata accessor for AspireApiPIRRequest(0);
  uint64_t v40 = *(int *)(v39 + 28);
  v90 = a1;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)a1 + v40, (uint64_t)v38, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  v92 = (int *)v39;
  uint64_t v41 = *(int *)(v39 + 28);
  v91 = a2;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)a2 + v41, (uint64_t)v35, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  uint64_t v42 = (uint64_t)&v29[*(int *)(v27 + 48)];
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v38, (uint64_t)v29, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v35, v42, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  uint64_t v43 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48);
  if (v43((uint64_t)v29, 1, v24) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v35, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v38, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
    if (v43(v42, 1, v24) == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v29, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
      goto LABEL_5;
    }
LABEL_17:
    v64 = &demangling cache variable for type metadata for (AspirePirEncryptedIndices?, AspirePirEncryptedIndices?);
    uint64_t v65 = (uint64_t)v29;
LABEL_32:
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v65, v64);
    goto LABEL_33;
  }
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v29, (uint64_t)v32, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  if (v43(v42, 1, v24) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v35, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v38, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v32, type metadata accessor for AspirePirEncryptedIndices);
    goto LABEL_17;
  }
  v66 = v108;
  outlined init with take of AspireApiEvaluationKeyMetadata(v42, (uint64_t)v108, type metadata accessor for AspirePirEncryptedIndices);
  if ((specialized static Array<A>.== infix(_:_:)(*v32, *v66) & 1) == 0 || v32[1] != v66[1])
  {
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v66, type metadata accessor for AspirePirEncryptedIndices);
    v68 = &demangling cache variable for type metadata for AspirePirEncryptedIndices?;
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v35, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v38, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v32, type metadata accessor for AspirePirEncryptedIndices);
    uint64_t v65 = (uint64_t)v29;
    goto LABEL_31;
  }
  _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
  char v67 = dispatch thunk of static Equatable.== infix(_:_:)();
  _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v66, type metadata accessor for AspirePirEncryptedIndices);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v35, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v38, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v32, type metadata accessor for AspirePirEncryptedIndices);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v29, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  if ((v67 & 1) == 0) {
    goto LABEL_33;
  }
LABEL_5:
  v44 = v92;
  v45 = v90;
  uint64_t v46 = v112;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v90 + v92[8], v112, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  v47 = v91;
  uint64_t v48 = v111;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v91 + v44[8], v111, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  uint64_t v49 = (uint64_t)v93;
  uint64_t v50 = (uint64_t)&v93[*(int *)(v109 + 48)];
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v46, (uint64_t)v93, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v48, v50, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  v51 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v110 + 48);
  uint64_t v52 = v113;
  if (v51(v49, 1, v113) != 1)
  {
    uint64_t v69 = v49;
    v70 = v107;
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v69, (uint64_t)v107, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
    if (v51(v50, 1, v52) == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v48, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v46, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
      _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v70, type metadata accessor for AspireApiEvaluationKeyMetadata);
      goto LABEL_25;
    }
    v71 = v105;
    outlined init with take of AspireApiEvaluationKeyMetadata(v50, (uint64_t)v105, type metadata accessor for AspireApiEvaluationKeyMetadata);
    if (*v70 == *v71 && (specialized static Data.== infix(_:_:)(v70[1], v70[2], v71[1], v71[2]) & 1) != 0)
    {
      _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
      char v72 = dispatch thunk of static Equatable.== infix(_:_:)();
      _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v71, type metadata accessor for AspireApiEvaluationKeyMetadata);
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v48, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v46, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
      _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v70, type metadata accessor for AspireApiEvaluationKeyMetadata);
      v44 = v92;
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v93, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
      if ((v72 & 1) == 0) {
        goto LABEL_33;
      }
      goto LABEL_8;
    }
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v71, type metadata accessor for AspireApiEvaluationKeyMetadata);
    v68 = &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?;
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v48, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v46, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v70, type metadata accessor for AspireApiEvaluationKeyMetadata);
    uint64_t v65 = (uint64_t)v93;
LABEL_31:
    v64 = v68;
    goto LABEL_32;
  }
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v48, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v46, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  if (v51(v50, 1, v52) != 1)
  {
LABEL_25:
    v64 = &demangling cache variable for type metadata for (AspireApiEvaluationKeyMetadata?, AspireApiEvaluationKeyMetadata?);
    uint64_t v65 = (uint64_t)v93;
    goto LABEL_32;
  }
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v93, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
LABEL_8:
  if ((specialized static Data.== infix(_:_:)(*((void *)v45 + 1), *((void *)v45 + 2), *((void *)v47 + 1), *((void *)v47 + 2)) & 1) == 0)goto LABEL_33; {
  uint64_t v53 = v44[9];
  }
  v54 = (void *)((char *)v45 + v53);
  uint64_t v55 = *(void *)((char *)v45 + v53 + 8);
  v56 = (void *)((char *)v47 + v53);
  uint64_t v57 = v56[1];
  if (!v55)
  {
    uint64_t v59 = v102;
    uint64_t v58 = (uint64_t)v103;
    uint64_t v61 = (uint64_t)v100;
    uint64_t v60 = (uint64_t)v101;
    uint64_t v62 = v104;
    if (v57) {
      goto LABEL_33;
    }
    goto LABEL_36;
  }
  uint64_t v59 = v102;
  uint64_t v58 = (uint64_t)v103;
  uint64_t v61 = (uint64_t)v100;
  uint64_t v60 = (uint64_t)v101;
  uint64_t v62 = v104;
  if (!v57)
  {
LABEL_33:
    char v63 = 0;
    return v63 & 1;
  }
  if (*v54 == *v56 && v55 == v57 || (char v63 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
LABEL_36:
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v45 + v44[10], v61, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v47 + v44[10], v62, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
    uint64_t v74 = v58 + *(int *)(v98 + 48);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v61, v58, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v62, v74, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
    uint64_t v75 = v62;
    v76 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v59 + 48);
    uint64_t v77 = v99;
    if (v76(v58, 1, v99) == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v75, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v61, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
      if (v76(v74, 1, v77) == 1)
      {
        outlined destroy of AMDPbHEConfig.OneOf_Config?(v58, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
LABEL_43:
        v80 = v92;
        uint64_t v81 = (uint64_t)v45 + v92[6];
        uint64_t v82 = v97;
        v83 = *(void (**)(char *, uint64_t, uint64_t))(v97 + 16);
        v84 = v95;
        uint64_t v85 = v106;
        v83(v95, v81, v106);
        uint64_t v86 = (uint64_t)v47 + v80[6];
        v87 = v96;
        v83(v96, v86, v85);
        _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
        char v63 = dispatch thunk of static Equatable.== infix(_:_:)();
        v88 = *(void (**)(char *, uint64_t))(v82 + 8);
        v88(v87, v85);
        v88(v84, v85);
        return v63 & 1;
      }
    }
    else
    {
      outlined init with copy of AMDPbHEConfig.OneOf_Config?(v58, v60, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
      if (v76(v74, 1, v77) != 1)
      {
        uint64_t v78 = v94;
        outlined init with take of AspireApiEvaluationKeyMetadata(v74, v94, type metadata accessor for AspireApiEvaluationKey);
        char v79 = specialized static AspireApiEvaluationKey.== infix(_:_:)(v60, v78);
        _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0(v78, type metadata accessor for AspireApiEvaluationKey);
        outlined destroy of AMDPbHEConfig.OneOf_Config?(v104, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
        outlined destroy of AMDPbHEConfig.OneOf_Config?(v61, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
        _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0(v60, type metadata accessor for AspireApiEvaluationKey);
        outlined destroy of AMDPbHEConfig.OneOf_Config?(v58, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
        if (v79) {
          goto LABEL_43;
        }
        goto LABEL_33;
      }
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v104, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v61, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
      _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0(v60, type metadata accessor for AspireApiEvaluationKey);
    }
    v64 = &demangling cache variable for type metadata for (AspireApiEvaluationKey?, AspireApiEvaluationKey?);
    uint64_t v65 = v58;
    goto LABEL_32;
  }
  return v63 & 1;
}

uint64_t specialized static AspireApiRequest.OneOf_Request.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v35 = a2;
  uint64_t v33 = type metadata accessor for AspireApiOPRFRequest(0);
  MEMORY[0x270FA5388](v33);
  uint64_t v34 = (uint64_t)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for AspireApiPECRequest(0);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (uint64_t *)((char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = type metadata accessor for AspireApiPIRRequest(0);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (_DWORD *)((char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = type metadata accessor for AspireApiRequest.OneOf_Request(0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (uint64_t *)((char *)&v32 - v14);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (_DWORD *)((char *)&v32 - v17);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireApiRequest.OneOf_Request, AspireApiRequest.OneOf_Request));
  MEMORY[0x270FA5388](v19 - 8);
  uint64_t v21 = (char *)&v32 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = (uint64_t)&v21[*(int *)(v22 + 56)];
  outlined init with copy of AspireHeEvaluationKeyConfig(a1, (uint64_t)v21, type metadata accessor for AspireApiRequest.OneOf_Request);
  outlined init with copy of AspireHeEvaluationKeyConfig(v35, v23, type metadata accessor for AspireApiRequest.OneOf_Request);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    outlined init with copy of AspireHeEvaluationKeyConfig((uint64_t)v21, (uint64_t)v18, type metadata accessor for AspireApiRequest.OneOf_Request);
    if (!swift_getEnumCaseMultiPayload())
    {
      outlined init with take of AspireApiEvaluationKeyMetadata(v23, (uint64_t)v9, type metadata accessor for AspireApiPIRRequest);
      char v25 = specialized static AspireApiPIRRequest.== infix(_:_:)(v18, v9);
      _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v9, type metadata accessor for AspireApiPIRRequest);
      uint64_t v26 = (uint64_t)v18;
      uint64_t v27 = type metadata accessor for AspireApiPIRRequest;
      goto LABEL_18;
    }
    uint64_t v28 = type metadata accessor for AspireApiPIRRequest;
    uint64_t v29 = (uint64_t)v18;
    goto LABEL_14;
  }
  if (EnumCaseMultiPayload == 1)
  {
    outlined init with copy of AspireHeEvaluationKeyConfig((uint64_t)v21, (uint64_t)v15, type metadata accessor for AspireApiRequest.OneOf_Request);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined init with take of AspireApiEvaluationKeyMetadata(v23, (uint64_t)v6, type metadata accessor for AspireApiPECRequest);
      char v25 = specialized static AspireApiPECRequest.== infix(_:_:)(v15, v6);
      _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v6, type metadata accessor for AspireApiPECRequest);
      uint64_t v26 = (uint64_t)v15;
      uint64_t v27 = type metadata accessor for AspireApiPECRequest;
LABEL_18:
      _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0(v26, v27);
      _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v21, type metadata accessor for AspireApiRequest.OneOf_Request);
      return v25 & 1;
    }
    uint64_t v28 = type metadata accessor for AspireApiPECRequest;
    uint64_t v29 = (uint64_t)v15;
    goto LABEL_14;
  }
  outlined init with copy of AspireHeEvaluationKeyConfig((uint64_t)v21, (uint64_t)v12, type metadata accessor for AspireApiRequest.OneOf_Request);
  if (swift_getEnumCaseMultiPayload() != 2)
  {
    uint64_t v28 = type metadata accessor for AspireApiOPRFRequest;
    uint64_t v29 = (uint64_t)v12;
LABEL_14:
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0(v29, v28);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21, &demangling cache variable for type metadata for (AspireApiRequest.OneOf_Request, AspireApiRequest.OneOf_Request));
LABEL_16:
    char v25 = 0;
    return v25 & 1;
  }
  uint64_t v30 = v34;
  outlined init with take of AspireApiEvaluationKeyMetadata(v23, v34, type metadata accessor for AspireApiOPRFRequest);
  if ((specialized static Data.== infix(_:_:)(*(void *)v12, *((void *)v12 + 1), *(void *)v30, *(void *)(v30 + 8)) & 1) == 0|| (specialized static Data.== infix(_:_:)(*((void *)v12 + 2), *((void *)v12 + 3), *(void *)(v30 + 16), *(void *)(v30 + 24)) & 1) == 0|| (type metadata accessor for UnknownStorage(), _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]), (dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0))
  {
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0(v30, type metadata accessor for AspireApiOPRFRequest);
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v12, type metadata accessor for AspireApiOPRFRequest);
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v21, type metadata accessor for AspireApiRequest.OneOf_Request);
    goto LABEL_16;
  }
  _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0(v30, type metadata accessor for AspireApiOPRFRequest);
  _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v12, type metadata accessor for AspireApiOPRFRequest);
  _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v21, type metadata accessor for AspireApiRequest.OneOf_Request);
  char v25 = 1;
  return v25 & 1;
}

uint64_t specialized static AspireApiConfig.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v44 = *(void *)(v4 - 8);
  uint64_t v45 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v43 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v42 = (char *)&v41 - v7;
  uint64_t v8 = type metadata accessor for AspireApiConfig.OneOf_Config(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v48 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireApiConfig.OneOf_Config?, AspireApiConfig.OneOf_Config?));
  uint64_t v12 = v11 - 8;
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v17 = (char *)&v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)&v41 - v19;
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = (char *)&v41 - v22;
  uint64_t v46 = a1;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)&v41 - v22, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
  uint64_t v47 = a2;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a2, (uint64_t)v20, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
  uint64_t v24 = (uint64_t)&v14[*(int *)(v12 + 56)];
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v23, (uint64_t)v14, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v20, v24, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
  char v25 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v25((uint64_t)v14, 1, v8) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v20, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v23, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
    if (v25(v24, 1, v8) == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v14, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v26 = (uint64_t)v48;
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v14, (uint64_t)v17, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
    if (v25(v24, 1, v8) != 1)
    {
      uint64_t v28 = v26;
      outlined init with take of AspireApiEvaluationKeyMetadata(v24, v26, type metadata accessor for AspireApiConfig.OneOf_Config);
      char v29 = specialized static AspireApiConfig.OneOf_Config.== infix(_:_:)((uint64_t)v17, v26);
      _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0(v28, type metadata accessor for AspireApiConfig.OneOf_Config);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v20, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v23, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
      _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v17, type metadata accessor for AspireApiConfig.OneOf_Config);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v14, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
      if ((v29 & 1) == 0)
      {
LABEL_10:
        char v27 = 0;
        return v27 & 1;
      }
LABEL_8:
      uint64_t v30 = (int *)type metadata accessor for AspireApiConfig(0);
      uint64_t v31 = v46;
      uint64_t v32 = v47;
      if ((specialized static Data.== infix(_:_:)(*(void *)(v46 + v30[5]), *(void *)(v46 + v30[5] + 8), *(void *)(v47 + v30[5]), *(void *)(v47 + v30[5] + 8)) & 1) != 0&& *(unsigned __int8 *)(v31 + v30[6]) == *(unsigned __int8 *)(v32 + v30[6]))
      {
        uint64_t v34 = v44;
        uint64_t v33 = v45;
        uint64_t v35 = *(void (**)(char *, uint64_t, uint64_t))(v44 + 16);
        uint64_t v36 = v42;
        v35(v42, v31 + v30[7], v45);
        uint64_t v37 = v32 + v30[7];
        uint64_t v38 = v43;
        v35(v43, v37, v33);
        _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
        char v27 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v39 = *(void (**)(char *, uint64_t))(v34 + 8);
        v39(v38, v33);
        v39(v36, v33);
        return v27 & 1;
      }
      goto LABEL_10;
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v20, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v23, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v17, type metadata accessor for AspireApiConfig.OneOf_Config);
  }
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v14, &demangling cache variable for type metadata for (AspireApiConfig.OneOf_Config?, AspireApiConfig.OneOf_Config?));
  char v27 = 0;
  return v27 & 1;
}

uint64_t specialized static AspireApiPIRConfig.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v19 - v9;
  uint64_t v11 = *(int *)(type metadata accessor for AspireApiPIRConfig(0) + 20);
  uint64_t v12 = *(void *)(a1 + v11);
  uint64_t v13 = *(void *)(a2 + v11);
  if (v12 == v13
    || (swift_retain(),
        swift_retain(),
        BOOL v14 = closure #1 in static AspireApiPIRConfig.== infix(_:_:)(v12, v13),
        swift_release(),
        swift_release(),
        v14))
  {
    uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v15(v10, a1, v4);
    v15(v7, a2, v4);
    _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    char v16 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v17 = *(void (**)(char *, uint64_t))(v5 + 8);
    v17(v7, v4);
    v17(v10, v4);
  }
  else
  {
    char v16 = 0;
  }
  return v16 & 1;
}

uint64_t specialized static AspireApiConfig.OneOf_Config.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AspireApiPECConfig(0);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (uint64_t *)((char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = type metadata accessor for AspireApiPIRConfig(0);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for AspireApiConfig.OneOf_Config(0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (uint64_t *)((char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v27 - v14;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireApiConfig.OneOf_Config, AspireApiConfig.OneOf_Config));
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v18 = (char *)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = (uint64_t)&v18[*(int *)(v19 + 56)];
  outlined init with copy of AspireHeEvaluationKeyConfig(a1, (uint64_t)v18, type metadata accessor for AspireApiConfig.OneOf_Config);
  outlined init with copy of AspireHeEvaluationKeyConfig(a2, v20, type metadata accessor for AspireApiConfig.OneOf_Config);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with copy of AspireHeEvaluationKeyConfig((uint64_t)v18, (uint64_t)v12, type metadata accessor for AspireApiConfig.OneOf_Config);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined init with take of AspireApiEvaluationKeyMetadata(v20, (uint64_t)v6, type metadata accessor for AspireApiPECConfig);
      char v21 = specialized static AspireApiPECConfig.== infix(_:_:)(v12, v6);
      _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v6, type metadata accessor for AspireApiPECConfig);
      uint64_t v22 = (uint64_t)v12;
      uint64_t v23 = type metadata accessor for AspireApiPECConfig;
LABEL_9:
      _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0(v22, v23);
      _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v18, type metadata accessor for AspireApiConfig.OneOf_Config);
      return v21 & 1;
    }
    uint64_t v24 = type metadata accessor for AspireApiPECConfig;
    uint64_t v25 = (uint64_t)v12;
  }
  else
  {
    outlined init with copy of AspireHeEvaluationKeyConfig((uint64_t)v18, (uint64_t)v15, type metadata accessor for AspireApiConfig.OneOf_Config);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      outlined init with take of AspireApiEvaluationKeyMetadata(v20, (uint64_t)v9, type metadata accessor for AspireApiPIRConfig);
      char v21 = specialized static AspireApiPIRConfig.== infix(_:_:)((uint64_t)v15, (uint64_t)v9);
      _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v9, type metadata accessor for AspireApiPIRConfig);
      uint64_t v22 = (uint64_t)v15;
      uint64_t v23 = type metadata accessor for AspireApiPIRConfig;
      goto LABEL_9;
    }
    uint64_t v24 = type metadata accessor for AspireApiPIRConfig;
    uint64_t v25 = (uint64_t)v15;
  }
  _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0(v25, v24);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v18, &demangling cache variable for type metadata for (AspireApiConfig.OneOf_Config, AspireApiConfig.OneOf_Config));
  char v21 = 0;
  return v21 & 1;
}

uint64_t type metadata accessor for AspireApiConfigResponse(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireApiConfigResponse);
}

uint64_t type metadata accessor for AspireApiResponses(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireApiResponses);
}

uint64_t type metadata accessor for AspireApiOPRFRequest(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireApiOPRFRequest);
}

uint64_t type metadata accessor for AspireApiResponse.OneOf_Response(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireApiResponse.OneOf_Response);
}

uint64_t type metadata accessor for AspireApiPIRResponse(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireApiPIRResponse);
}

uint64_t type metadata accessor for AspireApiPECResponse(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireApiPECResponse);
}

uint64_t type metadata accessor for AspireApiOPRFResponse(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireApiOPRFResponse);
}

uint64_t type metadata accessor for AspireApiResponse(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireApiResponse);
}

uint64_t type metadata accessor for AspireApiPIRConfig._StorageClass(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireApiPIRConfig._StorageClass);
}

uint64_t type metadata accessor for AspireApiPECShardResponse(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireApiPECShardResponse);
}

uint64_t type metadata accessor for AspireApiEmpty(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireApiEmpty);
}

uint64_t _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspireApiEmpty()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiEmpty and conformance AspireApiEmpty, (void (*)(uint64_t))type metadata accessor for AspireApiEmpty);
}

uint64_t base witness table accessor for Message in AspireApiEmpty()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiEmpty and conformance AspireApiEmpty, (void (*)(uint64_t))type metadata accessor for AspireApiEmpty);
}

uint64_t base witness table accessor for Hashable in AspireApiEmpty()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiEmpty and conformance AspireApiEmpty, (void (*)(uint64_t))type metadata accessor for AspireApiEmpty);
}

uint64_t base witness table accessor for Equatable in AspireApiEmpty()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiEmpty and conformance AspireApiEmpty, (void (*)(uint64_t))type metadata accessor for AspireApiEmpty);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspireApiEvaluationKeyMetadata()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiEvaluationKeyMetadata and conformance AspireApiEvaluationKeyMetadata, (void (*)(uint64_t))type metadata accessor for AspireApiEvaluationKeyMetadata);
}

uint64_t base witness table accessor for Message in AspireApiEvaluationKeyMetadata()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiEvaluationKeyMetadata and conformance AspireApiEvaluationKeyMetadata, (void (*)(uint64_t))type metadata accessor for AspireApiEvaluationKeyMetadata);
}

uint64_t base witness table accessor for Hashable in AspireApiEvaluationKeyMetadata()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiEvaluationKeyMetadata and conformance AspireApiEvaluationKeyMetadata, (void (*)(uint64_t))type metadata accessor for AspireApiEvaluationKeyMetadata);
}

uint64_t base witness table accessor for Equatable in AspireApiEvaluationKeyMetadata()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiEvaluationKeyMetadata and conformance AspireApiEvaluationKeyMetadata, (void (*)(uint64_t))type metadata accessor for AspireApiEvaluationKeyMetadata);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspireApiKeyStatus()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiKeyStatus and conformance AspireApiKeyStatus, (void (*)(uint64_t))type metadata accessor for AspireApiKeyStatus);
}

uint64_t base witness table accessor for Message in AspireApiKeyStatus()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiKeyStatus and conformance AspireApiKeyStatus, (void (*)(uint64_t))type metadata accessor for AspireApiKeyStatus);
}

uint64_t base witness table accessor for Hashable in AspireApiKeyStatus()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiKeyStatus and conformance AspireApiKeyStatus, (void (*)(uint64_t))type metadata accessor for AspireApiKeyStatus);
}

uint64_t base witness table accessor for Equatable in AspireApiKeyStatus()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiKeyStatus and conformance AspireApiKeyStatus, (void (*)(uint64_t))type metadata accessor for AspireApiKeyStatus);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspireApiEvaluationKeys()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiEvaluationKeys and conformance AspireApiEvaluationKeys, (void (*)(uint64_t))type metadata accessor for AspireApiEvaluationKeys);
}

uint64_t base witness table accessor for Message in AspireApiEvaluationKeys()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiEvaluationKeys and conformance AspireApiEvaluationKeys, (void (*)(uint64_t))type metadata accessor for AspireApiEvaluationKeys);
}

uint64_t base witness table accessor for Hashable in AspireApiEvaluationKeys()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiEvaluationKeys and conformance AspireApiEvaluationKeys, (void (*)(uint64_t))type metadata accessor for AspireApiEvaluationKeys);
}

uint64_t base witness table accessor for Equatable in AspireApiEvaluationKeys()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiEvaluationKeys and conformance AspireApiEvaluationKeys, (void (*)(uint64_t))type metadata accessor for AspireApiEvaluationKeys);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspireApiEvaluationKey()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiEvaluationKey and conformance AspireApiEvaluationKey, (void (*)(uint64_t))type metadata accessor for AspireApiEvaluationKey);
}

uint64_t base witness table accessor for Message in AspireApiEvaluationKey()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiEvaluationKey and conformance AspireApiEvaluationKey, (void (*)(uint64_t))type metadata accessor for AspireApiEvaluationKey);
}

uint64_t base witness table accessor for Hashable in AspireApiEvaluationKey()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiEvaluationKey and conformance AspireApiEvaluationKey, (void (*)(uint64_t))type metadata accessor for AspireApiEvaluationKey);
}

uint64_t base witness table accessor for Equatable in AspireApiEvaluationKey()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiEvaluationKey and conformance AspireApiEvaluationKey, (void (*)(uint64_t))type metadata accessor for AspireApiEvaluationKey);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspireApiConfigRequest()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiConfigRequest and conformance AspireApiConfigRequest, (void (*)(uint64_t))type metadata accessor for AspireApiConfigRequest);
}

uint64_t base witness table accessor for Message in AspireApiConfigRequest()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiConfigRequest and conformance AspireApiConfigRequest, (void (*)(uint64_t))type metadata accessor for AspireApiConfigRequest);
}

uint64_t base witness table accessor for Hashable in AspireApiConfigRequest()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiConfigRequest and conformance AspireApiConfigRequest, (void (*)(uint64_t))type metadata accessor for AspireApiConfigRequest);
}

uint64_t base witness table accessor for Equatable in AspireApiConfigRequest()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiConfigRequest and conformance AspireApiConfigRequest, (void (*)(uint64_t))type metadata accessor for AspireApiConfigRequest);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspireApiConfig()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiConfig and conformance AspireApiConfig, (void (*)(uint64_t))type metadata accessor for AspireApiConfig);
}

uint64_t base witness table accessor for Message in AspireApiConfig()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiConfig and conformance AspireApiConfig, (void (*)(uint64_t))type metadata accessor for AspireApiConfig);
}

uint64_t base witness table accessor for Hashable in AspireApiConfig()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiConfig and conformance AspireApiConfig, (void (*)(uint64_t))type metadata accessor for AspireApiConfig);
}

uint64_t base witness table accessor for Equatable in AspireApiConfig()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiConfig and conformance AspireApiConfig, (void (*)(uint64_t))type metadata accessor for AspireApiConfig);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspireApiConfigResponse()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiConfigResponse and conformance AspireApiConfigResponse, (void (*)(uint64_t))type metadata accessor for AspireApiConfigResponse);
}

uint64_t base witness table accessor for Message in AspireApiConfigResponse()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiConfigResponse and conformance AspireApiConfigResponse, (void (*)(uint64_t))type metadata accessor for AspireApiConfigResponse);
}

uint64_t base witness table accessor for Hashable in AspireApiConfigResponse()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiConfigResponse and conformance AspireApiConfigResponse, (void (*)(uint64_t))type metadata accessor for AspireApiConfigResponse);
}

uint64_t base witness table accessor for Equatable in AspireApiConfigResponse()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiConfigResponse and conformance AspireApiConfigResponse, (void (*)(uint64_t))type metadata accessor for AspireApiConfigResponse);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspireApiRequests()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiRequests and conformance AspireApiRequests, (void (*)(uint64_t))type metadata accessor for AspireApiRequests);
}

uint64_t base witness table accessor for Message in AspireApiRequests()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiRequests and conformance AspireApiRequests, (void (*)(uint64_t))type metadata accessor for AspireApiRequests);
}

uint64_t base witness table accessor for Hashable in AspireApiRequests()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiRequests and conformance AspireApiRequests, (void (*)(uint64_t))type metadata accessor for AspireApiRequests);
}

uint64_t base witness table accessor for Equatable in AspireApiRequests()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiRequests and conformance AspireApiRequests, (void (*)(uint64_t))type metadata accessor for AspireApiRequests);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspireApiResponses()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiResponses and conformance AspireApiResponses, (void (*)(uint64_t))type metadata accessor for AspireApiResponses);
}

uint64_t base witness table accessor for Message in AspireApiResponses()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiResponses and conformance AspireApiResponses, (void (*)(uint64_t))type metadata accessor for AspireApiResponses);
}

uint64_t base witness table accessor for Hashable in AspireApiResponses()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiResponses and conformance AspireApiResponses, (void (*)(uint64_t))type metadata accessor for AspireApiResponses);
}

uint64_t base witness table accessor for Equatable in AspireApiResponses()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiResponses and conformance AspireApiResponses, (void (*)(uint64_t))type metadata accessor for AspireApiResponses);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspireApiRequest()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiRequest and conformance AspireApiRequest, (void (*)(uint64_t))type metadata accessor for AspireApiRequest);
}

uint64_t base witness table accessor for Message in AspireApiRequest()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiRequest and conformance AspireApiRequest, (void (*)(uint64_t))type metadata accessor for AspireApiRequest);
}

uint64_t base witness table accessor for Hashable in AspireApiRequest()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiRequest and conformance AspireApiRequest, (void (*)(uint64_t))type metadata accessor for AspireApiRequest);
}

uint64_t base witness table accessor for Equatable in AspireApiRequest()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiRequest and conformance AspireApiRequest, (void (*)(uint64_t))type metadata accessor for AspireApiRequest);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspireApiResponse()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiResponse and conformance AspireApiResponse, (void (*)(uint64_t))type metadata accessor for AspireApiResponse);
}

uint64_t base witness table accessor for Message in AspireApiResponse()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiResponse and conformance AspireApiResponse, (void (*)(uint64_t))type metadata accessor for AspireApiResponse);
}

uint64_t base witness table accessor for Hashable in AspireApiResponse()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiResponse and conformance AspireApiResponse, (void (*)(uint64_t))type metadata accessor for AspireApiResponse);
}

uint64_t base witness table accessor for Equatable in AspireApiResponse()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiResponse and conformance AspireApiResponse, (void (*)(uint64_t))type metadata accessor for AspireApiResponse);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspireApiPIRShardConfig()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiPIRShardConfig and conformance AspireApiPIRShardConfig, (void (*)(uint64_t))type metadata accessor for AspireApiPIRShardConfig);
}

uint64_t base witness table accessor for Message in AspireApiPIRShardConfig()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiPIRShardConfig and conformance AspireApiPIRShardConfig, (void (*)(uint64_t))type metadata accessor for AspireApiPIRShardConfig);
}

uint64_t base witness table accessor for Hashable in AspireApiPIRShardConfig()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiPIRShardConfig and conformance AspireApiPIRShardConfig, (void (*)(uint64_t))type metadata accessor for AspireApiPIRShardConfig);
}

uint64_t base witness table accessor for Equatable in AspireApiPIRShardConfig()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiPIRShardConfig and conformance AspireApiPIRShardConfig, (void (*)(uint64_t))type metadata accessor for AspireApiPIRShardConfig);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspireApiPIRConfig()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiPIRConfig and conformance AspireApiPIRConfig, (void (*)(uint64_t))type metadata accessor for AspireApiPIRConfig);
}

uint64_t base witness table accessor for Message in AspireApiPIRConfig()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiPIRConfig and conformance AspireApiPIRConfig, (void (*)(uint64_t))type metadata accessor for AspireApiPIRConfig);
}

uint64_t base witness table accessor for Hashable in AspireApiPIRConfig()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiPIRConfig and conformance AspireApiPIRConfig, (void (*)(uint64_t))type metadata accessor for AspireApiPIRConfig);
}

uint64_t base witness table accessor for Equatable in AspireApiPIRConfig()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiPIRConfig and conformance AspireApiPIRConfig, (void (*)(uint64_t))type metadata accessor for AspireApiPIRConfig);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspireApiPIRShardConfigs()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiPIRShardConfigs and conformance AspireApiPIRShardConfigs, (void (*)(uint64_t))type metadata accessor for AspireApiPIRShardConfigs);
}

uint64_t base witness table accessor for Message in AspireApiPIRShardConfigs()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiPIRShardConfigs and conformance AspireApiPIRShardConfigs, (void (*)(uint64_t))type metadata accessor for AspireApiPIRShardConfigs);
}

uint64_t base witness table accessor for Hashable in AspireApiPIRShardConfigs()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiPIRShardConfigs and conformance AspireApiPIRShardConfigs, (void (*)(uint64_t))type metadata accessor for AspireApiPIRShardConfigs);
}

uint64_t base witness table accessor for Equatable in AspireApiPIRShardConfigs()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiPIRShardConfigs and conformance AspireApiPIRShardConfigs, (void (*)(uint64_t))type metadata accessor for AspireApiPIRShardConfigs);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspireApiPIRFixedShardConfig()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiPIRFixedShardConfig and conformance AspireApiPIRFixedShardConfig, (void (*)(uint64_t))type metadata accessor for AspireApiPIRFixedShardConfig);
}

uint64_t base witness table accessor for Message in AspireApiPIRFixedShardConfig()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiPIRFixedShardConfig and conformance AspireApiPIRFixedShardConfig, (void (*)(uint64_t))type metadata accessor for AspireApiPIRFixedShardConfig);
}

uint64_t base witness table accessor for Hashable in AspireApiPIRFixedShardConfig()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiPIRFixedShardConfig and conformance AspireApiPIRFixedShardConfig, (void (*)(uint64_t))type metadata accessor for AspireApiPIRFixedShardConfig);
}

uint64_t base witness table accessor for Equatable in AspireApiPIRFixedShardConfig()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiPIRFixedShardConfig and conformance AspireApiPIRFixedShardConfig, (void (*)(uint64_t))type metadata accessor for AspireApiPIRFixedShardConfig);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspireApiPIRRequest()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiPIRRequest and conformance AspireApiPIRRequest, (void (*)(uint64_t))type metadata accessor for AspireApiPIRRequest);
}

uint64_t base witness table accessor for Message in AspireApiPIRRequest()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiPIRRequest and conformance AspireApiPIRRequest, (void (*)(uint64_t))type metadata accessor for AspireApiPIRRequest);
}

uint64_t base witness table accessor for Hashable in AspireApiPIRRequest()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiPIRRequest and conformance AspireApiPIRRequest, (void (*)(uint64_t))type metadata accessor for AspireApiPIRRequest);
}

uint64_t base witness table accessor for Equatable in AspireApiPIRRequest()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiPIRRequest and conformance AspireApiPIRRequest, (void (*)(uint64_t))type metadata accessor for AspireApiPIRRequest);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspireApiPIRResponse()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiPIRResponse and conformance AspireApiPIRResponse, (void (*)(uint64_t))type metadata accessor for AspireApiPIRResponse);
}

uint64_t base witness table accessor for Message in AspireApiPIRResponse()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiPIRResponse and conformance AspireApiPIRResponse, (void (*)(uint64_t))type metadata accessor for AspireApiPIRResponse);
}

uint64_t base witness table accessor for Hashable in AspireApiPIRResponse()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiPIRResponse and conformance AspireApiPIRResponse, (void (*)(uint64_t))type metadata accessor for AspireApiPIRResponse);
}

uint64_t base witness table accessor for Equatable in AspireApiPIRResponse()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiPIRResponse and conformance AspireApiPIRResponse, (void (*)(uint64_t))type metadata accessor for AspireApiPIRResponse);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspireApiPECConfig()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiPECConfig and conformance AspireApiPECConfig, (void (*)(uint64_t))type metadata accessor for AspireApiPECConfig);
}

uint64_t base witness table accessor for Message in AspireApiPECConfig()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiPECConfig and conformance AspireApiPECConfig, (void (*)(uint64_t))type metadata accessor for AspireApiPECConfig);
}

uint64_t base witness table accessor for Hashable in AspireApiPECConfig()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiPECConfig and conformance AspireApiPECConfig, (void (*)(uint64_t))type metadata accessor for AspireApiPECConfig);
}

uint64_t base witness table accessor for Equatable in AspireApiPECConfig()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiPECConfig and conformance AspireApiPECConfig, (void (*)(uint64_t))type metadata accessor for AspireApiPECConfig);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspireApiPECRequest()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiPECRequest and conformance AspireApiPECRequest, (void (*)(uint64_t))type metadata accessor for AspireApiPECRequest);
}

uint64_t base witness table accessor for Message in AspireApiPECRequest()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiPECRequest and conformance AspireApiPECRequest, (void (*)(uint64_t))type metadata accessor for AspireApiPECRequest);
}

uint64_t base witness table accessor for Hashable in AspireApiPECRequest()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiPECRequest and conformance AspireApiPECRequest, (void (*)(uint64_t))type metadata accessor for AspireApiPECRequest);
}

uint64_t base witness table accessor for Equatable in AspireApiPECRequest()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiPECRequest and conformance AspireApiPECRequest, (void (*)(uint64_t))type metadata accessor for AspireApiPECRequest);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspireApiPECShardResponse()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiPECShardResponse and conformance AspireApiPECShardResponse, (void (*)(uint64_t))type metadata accessor for AspireApiPECShardResponse);
}

uint64_t base witness table accessor for Message in AspireApiPECShardResponse()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiPECShardResponse and conformance AspireApiPECShardResponse, (void (*)(uint64_t))type metadata accessor for AspireApiPECShardResponse);
}

uint64_t base witness table accessor for Hashable in AspireApiPECShardResponse()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiPECShardResponse and conformance AspireApiPECShardResponse, (void (*)(uint64_t))type metadata accessor for AspireApiPECShardResponse);
}

uint64_t base witness table accessor for Equatable in AspireApiPECShardResponse()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiPECShardResponse and conformance AspireApiPECShardResponse, (void (*)(uint64_t))type metadata accessor for AspireApiPECShardResponse);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspireApiPECResponse()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiPECResponse and conformance AspireApiPECResponse, (void (*)(uint64_t))type metadata accessor for AspireApiPECResponse);
}

uint64_t base witness table accessor for Message in AspireApiPECResponse()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiPECResponse and conformance AspireApiPECResponse, (void (*)(uint64_t))type metadata accessor for AspireApiPECResponse);
}

uint64_t base witness table accessor for Hashable in AspireApiPECResponse()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiPECResponse and conformance AspireApiPECResponse, (void (*)(uint64_t))type metadata accessor for AspireApiPECResponse);
}

uint64_t base witness table accessor for Equatable in AspireApiPECResponse()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiPECResponse and conformance AspireApiPECResponse, (void (*)(uint64_t))type metadata accessor for AspireApiPECResponse);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspireApiOPRFRequest()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiOPRFRequest and conformance AspireApiOPRFRequest, (void (*)(uint64_t))type metadata accessor for AspireApiOPRFRequest);
}

uint64_t base witness table accessor for Message in AspireApiOPRFRequest()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiOPRFRequest and conformance AspireApiOPRFRequest, (void (*)(uint64_t))type metadata accessor for AspireApiOPRFRequest);
}

uint64_t base witness table accessor for Hashable in AspireApiOPRFRequest()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiOPRFRequest and conformance AspireApiOPRFRequest, (void (*)(uint64_t))type metadata accessor for AspireApiOPRFRequest);
}

uint64_t base witness table accessor for Equatable in AspireApiOPRFRequest()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiOPRFRequest and conformance AspireApiOPRFRequest, (void (*)(uint64_t))type metadata accessor for AspireApiOPRFRequest);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspireApiOPRFResponse()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiOPRFResponse and conformance AspireApiOPRFResponse, (void (*)(uint64_t))type metadata accessor for AspireApiOPRFResponse);
}

uint64_t base witness table accessor for Message in AspireApiOPRFResponse()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiOPRFResponse and conformance AspireApiOPRFResponse, (void (*)(uint64_t))type metadata accessor for AspireApiOPRFResponse);
}

uint64_t base witness table accessor for Hashable in AspireApiOPRFResponse()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiOPRFResponse and conformance AspireApiOPRFResponse, (void (*)(uint64_t))type metadata accessor for AspireApiOPRFResponse);
}

uint64_t base witness table accessor for Equatable in AspireApiOPRFResponse()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_0(&lazy protocol witness table cache variable for type AspireApiOPRFResponse and conformance AspireApiOPRFResponse, (void (*)(uint64_t))type metadata accessor for AspireApiOPRFResponse);
}

uint64_t sub_249DAF668@<X0>(uint64_t a1@<X8>)
{
  return AspireApiConfig.pirConfig.getter(a1);
}

uint64_t sub_249DAF68C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AspireApiConfig.pirConfig : AspireApiConfig(a1, a2, a3, a4, type metadata accessor for AspireApiPIRConfig, type metadata accessor for AspireApiPIRConfig, type metadata accessor for AspireApiPIRConfig);
}

uint64_t sub_249DAF6E4@<X0>(uint64_t a1@<X8>)
{
  return AspireApiConfig.pecConfig.getter(a1);
}

uint64_t sub_249DAF708(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AspireApiConfig.pirConfig : AspireApiConfig(a1, a2, a3, a4, type metadata accessor for AspireApiPECConfig, type metadata accessor for AspireApiPECConfig, type metadata accessor for AspireApiPECConfig);
}

uint64_t sub_249DAF760@<X0>(uint64_t a1@<X8>)
{
  return AspireApiRequest.pirRequest.getter(a1);
}

uint64_t sub_249DAF784(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AspireApiRequest.pirRequest : AspireApiRequest(a1, a2, a3, a4, type metadata accessor for AspireApiPIRRequest, type metadata accessor for AspireApiPIRRequest, type metadata accessor for AspireApiPIRRequest);
}

uint64_t sub_249DAF7DC@<X0>(uint64_t a1@<X8>)
{
  return AspireApiRequest.pecRequest.getter(a1);
}

uint64_t sub_249DAF800(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AspireApiRequest.pirRequest : AspireApiRequest(a1, a2, a3, a4, type metadata accessor for AspireApiPECRequest, type metadata accessor for AspireApiPECRequest, type metadata accessor for AspireApiPECRequest);
}

uint64_t sub_249DAF858@<X0>(_OWORD *a1@<X8>)
{
  return AspireApiRequest.oprfRequest.getter(a1);
}

uint64_t sub_249DAF87C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AspireApiRequest.pirRequest : AspireApiRequest(a1, a2, a3, a4, type metadata accessor for AspireApiOPRFRequest, type metadata accessor for AspireApiOPRFRequest, type metadata accessor for AspireApiOPRFRequest);
}

uint64_t sub_249DAF8E4@<X0>(_OWORD *a1@<X8>)
{
  return AspireApiResponse.oprfResponse.getter(a1);
}

uint64_t sub_249DAF914@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = type metadata accessor for AspireApiPIRShardConfig(0);
  *a2 = *(unsigned char *)(a1 + *(int *)(result + 36)) & 1;
  return result;
}

uint64_t sub_249DAF950(char *a1, uint64_t a2)
{
  char v3 = *a1;
  uint64_t result = type metadata accessor for AspireApiPIRShardConfig(0);
  *(unsigned char *)(a2 + *(int *)(result + 36)) = v3;
  return result;
}

uint64_t sub_249DAF984@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = type metadata accessor for AspireApiPIRShardConfig(0);
  uint64_t v5 = (uint64_t *)(a1 + *(int *)(result + 40));
  if (*((unsigned char *)v5 + 8)) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = *v5;
  }
  *a2 = v6;
  return result;
}

uint64_t sub_249DAF9CC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t result = type metadata accessor for AspireApiPIRShardConfig(0);
  uint64_t v5 = a2 + *(int *)(result + 40);
  *(void *)uint64_t v5 = v3;
  *(unsigned char *)(v5 + 8) = 0;
  return result;
}

uint64_t sub_249DAFA08@<X0>(uint64_t a1@<X8>)
{
  return AspireApiPIRConfig.encryptionParameters.getter(a1);
}

uint64_t sub_249DAFA2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AspireApiPIRConfig.encryptionParameters : AspireApiPIRConfig(a1, a2, a3, a4, type metadata accessor for AspireHeEncryptionParameters, type metadata accessor for AspireHeEncryptionParameters, (uint64_t (*)(char *))AspireApiPIRConfig.encryptionParameters.setter);
}

uint64_t sub_249DAFA8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AspireApiPIRConfig.encryptionParameters : AspireApiPIRConfig(a1, a2, a3, a4, type metadata accessor for AspirePirKeywordPirParameters, type metadata accessor for AspirePirKeywordPirParameters, (uint64_t (*)(char *))AspireApiPIRConfig.keywordPirParams.setter);
}

uint64_t sub_249DAFAE8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (void *)(*(void *)(a1 + *(int *)(type metadata accessor for AspireApiPIRConfig(0) + 20))
                + OBJC_IVAR____TtCV8CipherML18AspireApiPIRConfigP33_351ADCB9EF95974A4082A7633DADB2C713_StorageClass__batchSize);
  uint64_t result = swift_beginAccess();
  *a2 = *v3;
  return result;
}

uint64_t sub_249DAFB5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AspireApiPIRConfig.encryptionParameters : AspireApiPIRConfig(a1, a2, a3, a4, type metadata accessor for AspirePirBatchPirParameters, type metadata accessor for AspirePirBatchPirParameters, (uint64_t (*)(char *))AspireApiPIRConfig.batchPirParams.setter);
}

uint64_t sub_249DAFBB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AspireApiPIRConfig.encryptionParameters : AspireApiPIRConfig(a1, a2, a3, a4, type metadata accessor for AspireApiPIRShardConfigs, type metadata accessor for AspireApiPIRShardConfigs, (uint64_t (*)(char *))AspireApiPIRConfig.pirShardConfigs.setter);
}

uint64_t sub_249DAFC10@<X0>(void *a1@<X8>)
{
  return AspireApiPIRFixedShardConfig.shardConfig.getter(a1);
}

uint64_t sub_249DAFC40@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return key path getter for AspireApiPIRRequest.evaluationKeyMetadata : AspireApiPIRRequest(a1, (uint64_t (*)(void, double))type metadata accessor for AspireApiPIRRequest, a2);
}

uint64_t sub_249DAFC6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AspireApiPIRRequest.evaluationKeyMetadata : AspireApiPIRRequest(a1, a2, a3, a4, type metadata accessor for AspireApiPIRRequest);
}

uint64_t sub_249DAFCA8@<X0>(uint64_t a1@<X8>)
{
  return AspireApiPECConfig.encryptionParameters.getter(a1);
}

uint64_t sub_249DAFCD8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return key path getter for AspireApiPIRRequest.evaluationKeyMetadata : AspireApiPIRRequest(a1, (uint64_t (*)(void, double))type metadata accessor for AspireApiPECRequest, a2);
}

uint64_t sub_249DAFD04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AspireApiPIRRequest.evaluationKeyMetadata : AspireApiPIRRequest(a1, a2, a3, a4, type metadata accessor for AspireApiPECRequest);
}

uint64_t getEnumTagSinglePayload for AspireApiEmpty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_249DAFD4C);
}

uint64_t sub_249DAFD4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);
  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for AspireApiEmpty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_249DAFDCC);
}

uint64_t sub_249DAFDCC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(a1, a2, a2, v4);
}

uint64_t getEnumTagSinglePayload for AspireApiEvaluationKeyMetadata(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_249DAFE50);
}

uint64_t sub_249DAFE50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 16) >> 60;
    if (((4 * v4) & 0xC) != 0) {
      return 16 - ((4 * v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for AspireApiEvaluationKeyMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_249DAFF20);
}

uint64_t sub_249DAFF20(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 24);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for AspireApiEvaluationKeyMetadata()
{
  return type metadata completion function for AMDPbHEConfigsReply();
}

uint64_t *initializeBufferWithCopyOfBuffer for AspireApiKeyStatus(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    uint64_t v7 = *(int *)(a3 + 20);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for UnknownStorage();
    uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
    v11(v8, v9, v10);
    uint64_t v12 = *(int *)(a3 + 24);
    uint64_t v13 = (char *)v4 + v12;
    uint64_t v14 = (char *)a2 + v12;
    uint64_t v15 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
    uint64_t v16 = *(void *)(v15 - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
      memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      *(void *)uint64_t v13 = *(void *)v14;
      v13[8] = v14[8];
      uint64_t v19 = *(int *)(v15 + 24);
      uint64_t v20 = &v13[v19];
      char v21 = &v14[v19];
      swift_bridgeObjectRetain();
      v11(v20, v21, v10);
      uint64_t v22 = *(int *)(v15 + 28);
      uint64_t v23 = &v13[v22];
      uint64_t v24 = &v14[v22];
      uint64_t v25 = type metadata accessor for AspireHeEncryptionParameters(0);
      uint64_t v32 = *(void *)(v25 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v32 + 48))(v24, 1, v25))
      {
        uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
        memcpy(v23, v24, *(void *)(*(void *)(v26 - 8) + 64));
      }
      else
      {
        *uint64_t v23 = *v24;
        uint64_t v27 = *((void *)v24 + 3);
        *((void *)v23 + 2) = *((void *)v24 + 2);
        *((void *)v23 + 3) = v27;
        *((unsigned char *)v23 + 32) = *((unsigned char *)v24 + 32);
        *((void *)v23 + 5) = *((void *)v24 + 5);
        *((unsigned char *)v23 + 48) = *((unsigned char *)v24 + 48);
        *((void *)v23 + 7) = *((void *)v24 + 7);
        *((unsigned char *)v23 + 64) = *((unsigned char *)v24 + 64);
        uint64_t v28 = *(int *)(v25 + 40);
        uint64_t v31 = (char *)v23 + v28;
        char v29 = (char *)v24 + v28;
        swift_bridgeObjectRetain();
        v11(v31, v29, v10);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v32 + 56))(v23, 0, 1, v25);
      }
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
  }
  return v4;
}

uint64_t destroy for AspireApiKeyStatus(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v12(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 24);
  uint64_t v7 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7);
  if (!result)
  {
    swift_bridgeObjectRelease();
    v12(v6 + *(int *)(v7 + 24), v5);
    uint64_t v9 = v6 + *(int *)(v7 + 28);
    uint64_t v10 = type metadata accessor for AspireHeEncryptionParameters(0);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v9, 1, v10);
    if (!result)
    {
      swift_bridgeObjectRelease();
      uint64_t v11 = v9 + *(int *)(v10 + 40);
      return ((uint64_t (*)(uint64_t, uint64_t))v12)(v11, v5);
    }
  }
  return result;
}

void *initializeWithCopy for AspireApiKeyStatus(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    *(void *)uint64_t v12 = *(void *)v13;
    v12[8] = v13[8];
    uint64_t v17 = *(int *)(v14 + 24);
    uint64_t v18 = &v12[v17];
    uint64_t v19 = &v13[v17];
    swift_bridgeObjectRetain();
    v10(v18, v19, v9);
    uint64_t v20 = *(int *)(v14 + 28);
    char v21 = &v12[v20];
    uint64_t v22 = &v13[v20];
    uint64_t v23 = type metadata accessor for AspireHeEncryptionParameters(0);
    uint64_t v30 = *(void *)(v23 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v30 + 48))(v22, 1, v23))
    {
      uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      memcpy(v21, v22, *(void *)(*(void *)(v24 - 8) + 64));
    }
    else
    {
      *char v21 = *v22;
      uint64_t v25 = *((void *)v22 + 3);
      *((void *)v21 + 2) = *((void *)v22 + 2);
      *((void *)v21 + 3) = v25;
      *((unsigned char *)v21 + 32) = *((unsigned char *)v22 + 32);
      *((void *)v21 + 5) = *((void *)v22 + 5);
      *((unsigned char *)v21 + 48) = *((unsigned char *)v22 + 48);
      *((void *)v21 + 7) = *((void *)v22 + 7);
      *((unsigned char *)v21 + 64) = *((unsigned char *)v22 + 64);
      uint64_t v26 = *(int *)(v23 + 40);
      char v29 = (char *)v21 + v26;
      uint64_t v27 = (char *)v22 + v26;
      swift_bridgeObjectRetain();
      v10(v29, v27, v9);
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v30 + 56))(v21, 0, 1, v23);
    }
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

void *assignWithCopy for AspireApiKeyStatus(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v55 = *(void *)(v9 - 8);
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(v55 + 24);
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v57 = a1;
  uint64_t v12 = (uint64_t)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  LODWORD(v8) = v16(v12, 1, v14);
  int v17 = v16((uint64_t)v13, 1, v14);
  if (!v8)
  {
    if (!v17)
    {
      *(void *)uint64_t v12 = *(void *)v13;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(unsigned char *)(v12 + 8) = v13[8];
      v10((char *)(v12 + *(int *)(v14 + 24)), &v13[*(int *)(v14 + 24)], v9);
      uint64_t v31 = *(int *)(v14 + 28);
      uint64_t v32 = v12 + v31;
      uint64_t v33 = &v13[v31];
      uint64_t v34 = type metadata accessor for AspireHeEncryptionParameters(0);
      uint64_t v35 = *(void *)(v34 - 8);
      uint64_t v36 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v35 + 48);
      int v37 = v36(v32, 1, v34);
      int v38 = v36((uint64_t)v33, 1, v34);
      if (v37)
      {
        if (!v38)
        {
          *(void *)uint64_t v32 = *(void *)v33;
          *(void *)(v32 + 8) = *((void *)v33 + 1);
          *(void *)(v32 + 16) = *((void *)v33 + 2);
          uint64_t v39 = *((void *)v33 + 3);
          *(unsigned char *)(v32 + 32) = v33[32];
          *(void *)(v32 + 24) = v39;
          uint64_t v40 = *((void *)v33 + 5);
          *(unsigned char *)(v32 + 48) = v33[48];
          *(void *)(v32 + 40) = v40;
          uint64_t v41 = *((void *)v33 + 7);
          *(unsigned char *)(v32 + 64) = v33[64];
          *(void *)(v32 + 56) = v41;
          uint64_t v42 = *(int *)(v34 + 40);
          uint64_t v43 = v32 + v42;
          uint64_t v44 = &v33[v42];
          uint64_t v45 = *(void (**)(uint64_t, char *, uint64_t))(v55 + 16);
          swift_bridgeObjectRetain();
          v45(v43, v44, v9);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
          return v57;
        }
      }
      else
      {
        if (!v38)
        {
          *(void *)uint64_t v32 = *(void *)v33;
          *(void *)(v32 + 8) = *((void *)v33 + 1);
          *(void *)(v32 + 16) = *((void *)v33 + 2);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          uint64_t v52 = *((void *)v33 + 3);
          *(unsigned char *)(v32 + 32) = v33[32];
          *(void *)(v32 + 24) = v52;
          uint64_t v53 = *((void *)v33 + 5);
          *(unsigned char *)(v32 + 48) = v33[48];
          *(void *)(v32 + 40) = v53;
          uint64_t v54 = *((void *)v33 + 7);
          *(unsigned char *)(v32 + 64) = v33[64];
          *(void *)(v32 + 56) = v54;
          v10((char *)(v32 + *(int *)(v34 + 40)), &v33[*(int *)(v34 + 40)], v9);
          return v57;
        }
        _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0(v32, type metadata accessor for AspireHeEncryptionParameters);
      }
      size_t v28 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?)
                                  - 8)
                      + 64);
      char v29 = (void *)v32;
      uint64_t v30 = v33;
      goto LABEL_8;
    }
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0(v12, type metadata accessor for AspireHeEvaluationKeyConfig);
LABEL_7:
    size_t v28 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?)
                                - 8)
                    + 64);
    char v29 = (void *)v12;
    uint64_t v30 = v13;
LABEL_8:
    memcpy(v29, v30, v28);
    return v57;
  }
  if (v17) {
    goto LABEL_7;
  }
  *(void *)uint64_t v12 = *(void *)v13;
  *(unsigned char *)(v12 + 8) = v13[8];
  uint64_t v18 = *(int *)(v14 + 24);
  uint64_t v19 = v12 + v18;
  uint64_t v20 = &v13[v18];
  char v21 = *(void (**)(uint64_t, char *, uint64_t))(v55 + 16);
  swift_bridgeObjectRetain();
  v21(v19, v20, v9);
  uint64_t v22 = *(int *)(v14 + 28);
  uint64_t v23 = (void *)(v12 + v22);
  uint64_t v24 = &v13[v22];
  uint64_t v25 = type metadata accessor for AspireHeEncryptionParameters(0);
  uint64_t v26 = *(void *)(v25 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
  {
    uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64));
  }
  else
  {
    *uint64_t v23 = *(void *)v24;
    v23[1] = *((void *)v24 + 1);
    v23[2] = *((void *)v24 + 2);
    uint64_t v46 = *((void *)v24 + 3);
    *((unsigned char *)v23 + 32) = v24[32];
    v23[3] = v46;
    uint64_t v47 = *((void *)v24 + 5);
    *((unsigned char *)v23 + 48) = v24[48];
    v23[5] = v47;
    uint64_t v48 = *((void *)v24 + 7);
    *((unsigned char *)v23 + 64) = v24[64];
    v23[7] = v48;
    uint64_t v49 = *(int *)(v25 + 40);
    v56 = (char *)v23 + v49;
    uint64_t v50 = &v24[v49];
    swift_bridgeObjectRetain();
    v21((uint64_t)v56, v50, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  return v57;
}

void *initializeWithTake for AspireApiKeyStatus(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    *(void *)uint64_t v12 = *(void *)v13;
    v12[8] = v13[8];
    v10(&v12[*(int *)(v14 + 24)], &v13[*(int *)(v14 + 24)], v9);
    uint64_t v17 = *(int *)(v14 + 28);
    uint64_t v18 = &v12[v17];
    uint64_t v19 = &v13[v17];
    uint64_t v20 = type metadata accessor for AspireHeEncryptionParameters(0);
    uint64_t v24 = *(void *)(v20 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v24 + 48))(v19, 1, v20))
    {
      uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      memcpy(v18, v19, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      *uint64_t v18 = *v19;
      uint64_t v22 = *((void *)v19 + 3);
      *((void *)v18 + 2) = *((void *)v19 + 2);
      *((void *)v18 + 3) = v22;
      *((unsigned char *)v18 + 32) = *((unsigned char *)v19 + 32);
      *((void *)v18 + 5) = *((void *)v19 + 5);
      *((unsigned char *)v18 + 48) = *((unsigned char *)v19 + 48);
      *((void *)v18 + 7) = *((void *)v19 + 7);
      *((unsigned char *)v18 + 64) = *((unsigned char *)v19 + 64);
      v10((char *)v18 + *(int *)(v20 + 40), (char *)v19 + *(int *)(v20 + 40), v9);
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v24 + 56))(v18, 0, 1, v20);
    }
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

void *assignWithTake for AspireApiKeyStatus(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v39 = *(void *)(v9 - 8);
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(v39 + 40);
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v40 = a1;
  uint64_t v12 = (uint64_t)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  LODWORD(v8) = v16(v12, 1, v14);
  int v17 = v16((uint64_t)v13, 1, v14);
  if (!v8)
  {
    if (!v17)
    {
      *(void *)uint64_t v12 = *(void *)v13;
      swift_bridgeObjectRelease();
      *(unsigned char *)(v12 + 8) = v13[8];
      v10((char *)(v12 + *(int *)(v14 + 24)), &v13[*(int *)(v14 + 24)], v9);
      uint64_t v28 = *(int *)(v14 + 28);
      uint64_t v29 = v12 + v28;
      uint64_t v30 = &v13[v28];
      uint64_t v31 = type metadata accessor for AspireHeEncryptionParameters(0);
      uint64_t v32 = *(void *)(v31 - 8);
      uint64_t v33 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v32 + 48);
      int v34 = v33(v29, 1, v31);
      int v35 = v33((uint64_t)v30, 1, v31);
      if (v34)
      {
        if (!v35)
        {
          *(_OWORD *)uint64_t v29 = *(_OWORD *)v30;
          uint64_t v36 = *((void *)v30 + 3);
          *(void *)(v29 + 16) = *((void *)v30 + 2);
          *(void *)(v29 + 24) = v36;
          *(unsigned char *)(v29 + 32) = v30[32];
          *(unsigned char *)(v29 + 48) = v30[48];
          *(void *)(v29 + 40) = *((void *)v30 + 5);
          *(void *)(v29 + 56) = *((void *)v30 + 7);
          *(unsigned char *)(v29 + 64) = v30[64];
          (*(void (**)(uint64_t, char *, uint64_t))(v39 + 32))(v29 + *(int *)(v31 + 40), &v30[*(int *)(v31 + 40)], v9);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
          return v40;
        }
      }
      else
      {
        if (!v35)
        {
          *(_OWORD *)uint64_t v29 = *(_OWORD *)v30;
          *(void *)(v29 + 16) = *((void *)v30 + 2);
          swift_bridgeObjectRelease();
          *(void *)(v29 + 24) = *((void *)v30 + 3);
          *(unsigned char *)(v29 + 32) = v30[32];
          *(void *)(v29 + 40) = *((void *)v30 + 5);
          *(unsigned char *)(v29 + 48) = v30[48];
          *(void *)(v29 + 56) = *((void *)v30 + 7);
          *(unsigned char *)(v29 + 64) = v30[64];
          v10((char *)(v29 + *(int *)(v31 + 40)), &v30[*(int *)(v31 + 40)], v9);
          return v40;
        }
        _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0(v29, type metadata accessor for AspireHeEncryptionParameters);
      }
      size_t v25 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?)
                                  - 8)
                      + 64);
      uint64_t v26 = (void *)v29;
      uint64_t v27 = v30;
      goto LABEL_8;
    }
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0(v12, type metadata accessor for AspireHeEvaluationKeyConfig);
LABEL_7:
    size_t v25 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?)
                                - 8)
                    + 64);
    uint64_t v26 = (void *)v12;
    uint64_t v27 = v13;
LABEL_8:
    memcpy(v26, v27, v25);
    return v40;
  }
  if (v17) {
    goto LABEL_7;
  }
  *(void *)uint64_t v12 = *(void *)v13;
  *(unsigned char *)(v12 + 8) = v13[8];
  uint64_t v18 = *(void (**)(uint64_t, char *, uint64_t))(v39 + 32);
  v18(v12 + *(int *)(v14 + 24), &v13[*(int *)(v14 + 24)], v9);
  uint64_t v19 = *(int *)(v14 + 28);
  uint64_t v20 = (_OWORD *)(v12 + v19);
  uint64_t v21 = &v13[v19];
  uint64_t v22 = type metadata accessor for AspireHeEncryptionParameters(0);
  uint64_t v23 = *(void *)(v22 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
  {
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
  }
  else
  {
    *uint64_t v20 = *(_OWORD *)v21;
    uint64_t v37 = *((void *)v21 + 3);
    *((void *)v20 + 2) = *((void *)v21 + 2);
    *((void *)v20 + 3) = v37;
    *((unsigned char *)v20 + 32) = v21[32];
    *((void *)v20 + 5) = *((void *)v21 + 5);
    *((unsigned char *)v20 + 48) = v21[48];
    *((void *)v20 + 7) = *((void *)v21 + 7);
    *((unsigned char *)v20 + 64) = v21[64];
    v18((uint64_t)v20 + *(int *)(v22 + 40), &v21[*(int *)(v22 + 40)], v9);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  return v40;
}

uint64_t getEnumTagSinglePayload for AspireApiKeyStatus(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_249DB140C);
}

uint64_t sub_249DB140C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_71Tm(a1, a2, a3, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
}

uint64_t storeEnumTagSinglePayload for AspireApiKeyStatus(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_249DB142C);
}

uint64_t sub_249DB142C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_72Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
}

void type metadata completion function for AspireApiKeyStatus(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t getEnumTagSinglePayload for AspireApiEvaluationKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_56Tm_3);
}

uint64_t storeEnumTagSinglePayload for AspireApiEvaluationKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_57Tm_3);
}

uint64_t *initializeBufferWithCopyOfBuffer for AspireApiEvaluationKey(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    uint64_t v9 = *(int *)(a3 + 20);
    uint64_t v10 = (uint64_t *)((char *)a1 + v9);
    uint64_t v11 = (uint64_t *)((char *)a2 + v9);
    uint64_t v12 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
    uint64_t v13 = *(void *)(v12 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      uint64_t v65 = a1;
      uint64_t v16 = v11[1];
      *uint64_t v10 = *v11;
      uint64_t v17 = v7;
      uint64_t v18 = v8;
      unint64_t v19 = v11[2];
      outlined copy of Data._Representation(v16, v19);
      v10[1] = v16;
      v10[2] = v19;
      uint64_t v8 = v18;
      uint64_t v7 = v17;
      a1 = v65;
      v8((void *)((char *)v10 + *(int *)(v12 + 24)), (void *)((char *)v11 + *(int *)(v12 + 24)), v7);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    uint64_t v20 = *(int *)(a3 + 24);
    uint64_t v21 = (char *)a1 + v20;
    uint64_t v22 = (char *)a2 + v20;
    uint64_t v23 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
    uint64_t v24 = *(void *)(v23 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
    {
      uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
      memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
    }
    else
    {
      uint64_t v64 = v24;
      v8((uint64_t *)v21, (uint64_t *)v22, v7);
      uint64_t v26 = *(int *)(v23 + 20);
      uint64_t v27 = &v21[v26];
      uint64_t v28 = &v22[v26];
      uint64_t v29 = type metadata accessor for AspireHeSerializedGaloisKey(0);
      uint64_t v30 = *(void *)(v29 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
      {
        uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
        memcpy(v27, v28, *(void *)(*(void *)(v31 - 8) + 64));
      }
      else
      {
        *(void *)uint64_t v27 = *(void *)v28;
        uint64_t v32 = *(int *)(v29 + 20);
        uint64_t v62 = v8;
        uint64_t v33 = &v27[v32];
        int v34 = &v28[v32];
        swift_bridgeObjectRetain();
        int v35 = v33;
        uint64_t v8 = v62;
        v62((uint64_t *)v35, (uint64_t *)v34, v7);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
      }
      uint64_t v36 = *(int *)(v23 + 24);
      uint64_t v37 = &v21[v36];
      int v38 = &v22[v36];
      uint64_t v39 = type metadata accessor for AspireHeSerializedRelinKey(0);
      uint64_t v40 = *(void *)(v39 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39))
      {
        uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
        memcpy(v37, v38, *(void *)(*(void *)(v41 - 8) + 64));
      }
      else
      {
        uint64_t v66 = v40;
        v8((uint64_t *)v37, (uint64_t *)v38, v7);
        uint64_t v42 = *(int *)(v39 + 20);
        uint64_t v43 = &v37[v42];
        char v63 = (void (*)(char *, char *, uint64_t))v8;
        uint64_t v44 = &v38[v42];
        uint64_t v45 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
        uint64_t v46 = *(void *)(v45 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v44, 1, v45))
        {
          uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
          memcpy(v43, v44, *(void *)(*(void *)(v47 - 8) + 64));
          uint64_t v48 = v66;
        }
        else
        {
          uint64_t v59 = v46;
          v63(v43, v44, v7);
          uint64_t v60 = v45;
          uint64_t v61 = v43;
          uint64_t v49 = *(int *)(v45 + 20);
          uint64_t v50 = &v43[v49];
          v51 = &v44[v49];
          uint64_t v52 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
          uint64_t v53 = *(void *)(v52 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48))(v51, 1, v52))
          {
            uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
            memcpy(v50, v51, *(void *)(*(void *)(v54 - 8) + 64));
          }
          else
          {
            *(void *)uint64_t v50 = *(void *)v51;
            uint64_t v55 = *(int *)(v52 + 20);
            uint64_t v58 = &v50[v55];
            v56 = &v51[v55];
            swift_bridgeObjectRetain();
            v63(v58, v56, v7);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v53 + 56))(v50, 0, 1, v52);
          }
          uint64_t v48 = v66;
          (*(void (**)(char *, void, uint64_t, uint64_t))(v59 + 56))(v61, 0, 1, v60);
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v48 + 56))(v37, 0, 1, v39);
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v64 + 56))(v21, 0, 1, v23);
    }
  }
  return a1;
}

uint64_t destroy for AspireApiEvaluationKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  unint64_t v19 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v19(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6))
  {
    outlined consume of Data._Representation(*(void *)(v5 + 8), *(void *)(v5 + 16));
    v19(v5 + *(int *)(v6 + 24), v4);
  }
  uint64_t v7 = a1 + *(int *)(a2 + 24);
  uint64_t v8 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v7, 1, v8);
  if (!result)
  {
    v19(v7, v4);
    uint64_t v10 = v7 + *(int *)(v8 + 20);
    uint64_t v11 = type metadata accessor for AspireHeSerializedGaloisKey(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v10, 1, v11))
    {
      swift_bridgeObjectRelease();
      v19(v10 + *(int *)(v11 + 20), v4);
    }
    uint64_t v12 = v7 + *(int *)(v8 + 24);
    uint64_t v13 = type metadata accessor for AspireHeSerializedRelinKey(0);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v12, 1, v13);
    if (!result)
    {
      v19(v12, v4);
      uint64_t v14 = v12 + *(int *)(v13 + 20);
      uint64_t v15 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48))(v14, 1, v15);
      if (!result)
      {
        v19(v14, v4);
        uint64_t v16 = v14 + *(int *)(v15 + 20);
        uint64_t v17 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 48))(v16, 1, v17);
        if (!result)
        {
          swift_bridgeObjectRelease();
          uint64_t v18 = v16 + *(int *)(v17 + 20);
          return ((uint64_t (*)(uint64_t, uint64_t))v19)(v18, v4);
        }
      }
    }
  }
  return result;
}

uint64_t initializeWithCopy for AspireApiEvaluationKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  uint64_t v11 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    uint64_t v63 = v6;
    uint64_t v14 = v10[1];
    *uint64_t v9 = *v10;
    uint64_t v15 = a1;
    uint64_t v16 = v7;
    unint64_t v17 = v10[2];
    outlined copy of Data._Representation(v14, v17);
    v9[1] = v14;
    v9[2] = v17;
    uint64_t v7 = v16;
    a1 = v15;
    uint64_t v6 = v63;
    v7((uint64_t)v9 + *(int *)(v11 + 24), (uint64_t)v10 + *(int *)(v11 + 24), v63);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  uint64_t v18 = *(int *)(a3 + 24);
  unint64_t v19 = (char *)(a1 + v18);
  uint64_t v20 = (char *)(a2 + v18);
  uint64_t v21 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  uint64_t v22 = *(void *)(v21 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
    memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    uint64_t v62 = v22;
    v7((uint64_t)v19, (uint64_t)v20, v6);
    uint64_t v24 = *(int *)(v21 + 20);
    uint64_t v25 = &v19[v24];
    uint64_t v26 = &v20[v24];
    uint64_t v27 = type metadata accessor for AspireHeSerializedGaloisKey(0);
    uint64_t v28 = *(void *)(v27 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
    {
      uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
      memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
    }
    else
    {
      *(void *)uint64_t v25 = *(void *)v26;
      uint64_t v30 = *(int *)(v27 + 20);
      uint64_t v60 = v7;
      uint64_t v31 = &v25[v30];
      uint64_t v32 = &v26[v30];
      swift_bridgeObjectRetain();
      uint64_t v33 = v31;
      uint64_t v7 = v60;
      v60((uint64_t)v33, (uint64_t)v32, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
    }
    uint64_t v34 = *(int *)(v21 + 24);
    int v35 = &v19[v34];
    uint64_t v36 = &v20[v34];
    uint64_t v37 = type metadata accessor for AspireHeSerializedRelinKey(0);
    uint64_t v38 = *(void *)(v37 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
    {
      uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
      memcpy(v35, v36, *(void *)(*(void *)(v39 - 8) + 64));
    }
    else
    {
      uint64_t v64 = v38;
      v7((uint64_t)v35, (uint64_t)v36, v6);
      uint64_t v40 = *(int *)(v37 + 20);
      uint64_t v41 = &v35[v40];
      uint64_t v61 = (void (*)(char *, char *, uint64_t))v7;
      uint64_t v42 = &v36[v40];
      uint64_t v43 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
      uint64_t v44 = *(void *)(v43 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v42, 1, v43))
      {
        uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
        memcpy(v41, v42, *(void *)(*(void *)(v45 - 8) + 64));
        uint64_t v46 = v64;
      }
      else
      {
        uint64_t v57 = v44;
        v61(v41, v42, v6);
        uint64_t v58 = v43;
        uint64_t v59 = v41;
        uint64_t v47 = *(int *)(v43 + 20);
        uint64_t v48 = &v41[v47];
        uint64_t v49 = &v42[v47];
        uint64_t v50 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
        uint64_t v51 = *(void *)(v50 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48))(v49, 1, v50))
        {
          uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
          memcpy(v48, v49, *(void *)(*(void *)(v52 - 8) + 64));
        }
        else
        {
          *(void *)uint64_t v48 = *(void *)v49;
          uint64_t v53 = *(int *)(v50 + 20);
          v56 = &v48[v53];
          uint64_t v54 = &v49[v53];
          swift_bridgeObjectRetain();
          v61(v56, v54, v6);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v51 + 56))(v48, 0, 1, v50);
        }
        uint64_t v46 = v64;
        (*(void (**)(char *, void, uint64_t, uint64_t))(v57 + 56))(v59, 0, 1, v58);
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v46 + 56))(v35, 0, 1, v37);
    }
    (*(void (**)(char *, void, uint64_t, uint64_t))(v62 + 56))(v19, 0, 1, v21);
  }
  return a1;
}

uint64_t assignWithCopy for AspireApiEvaluationKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v134 = *(void *)(v6 - 8);
  v135 = *(void (**)(uint64_t, uint64_t, uint64_t))(v134 + 24);
  v135(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v138 = a1;
  uint64_t v8 = (char *)(a1 + v7);
  uint64_t v9 = (char *)(a2 + v7);
  uint64_t v10 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      *(void *)uint64_t v8 = *(void *)v9;
      uint64_t v15 = *((void *)v9 + 1);
      unint64_t v16 = *((void *)v9 + 2);
      outlined copy of Data._Representation(v15, v16);
      *((void *)v8 + 1) = v15;
      *((void *)v8 + 2) = v16;
      (*(void (**)(char *, char *, uint64_t))(v134 + 16))(&v8[*(int *)(v10 + 24)], &v9[*(int *)(v10 + 24)], v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
LABEL_7:
      uint64_t v18 = (void (*)(char *, char *, uint64_t))v135;
      uint64_t v19 = v138;
      goto LABEL_8;
    }
LABEL_6:
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
    memcpy(v8, v9, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  if (v14)
  {
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v8, type metadata accessor for AspireApiEvaluationKeyMetadata);
    goto LABEL_6;
  }
  *(void *)uint64_t v8 = *(void *)v9;
  uint64_t v39 = *((void *)v9 + 1);
  unint64_t v40 = *((void *)v9 + 2);
  outlined copy of Data._Representation(v39, v40);
  uint64_t v41 = *((void *)v8 + 1);
  unint64_t v42 = *((void *)v8 + 2);
  *((void *)v8 + 1) = v39;
  *((void *)v8 + 2) = v40;
  outlined consume of Data._Representation(v41, v42);
  uint64_t v18 = (void (*)(char *, char *, uint64_t))v135;
  v135((uint64_t)&v8[*(int *)(v10 + 24)], (uint64_t)&v9[*(int *)(v10 + 24)], v6);
  uint64_t v19 = v138;
LABEL_8:
  uint64_t v20 = *(int *)(a3 + 24);
  uint64_t v21 = (char *)(v19 + v20);
  uint64_t v22 = (char *)(a2 + v20);
  uint64_t v23 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v24 + 48);
  int v26 = v25(v21, 1, v23);
  int v27 = v25(v22, 1, v23);
  if (v26)
  {
    if (!v27)
    {
      uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v134 + 16);
      v28(v21, v22, v6);
      uint64_t v29 = *(int *)(v23 + 20);
      uint64_t v30 = &v21[v29];
      uint64_t v31 = &v22[v29];
      uint64_t v32 = type metadata accessor for AspireHeSerializedGaloisKey(0);
      uint64_t v33 = *(void *)(v32 - 8);
      uint64_t v130 = v6;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
      {
        uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
        memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64));
      }
      else
      {
        *(void *)uint64_t v30 = *(void *)v31;
        uint64_t v52 = *(int *)(v32 + 20);
        v131 = &v30[v52];
        uint64_t v53 = &v31[v52];
        swift_bridgeObjectRetain();
        v28(v131, v53, v6);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
      }
      uint64_t v54 = *(int *)(v23 + 24);
      uint64_t v55 = &v21[v54];
      v56 = &v22[v54];
      uint64_t v57 = type metadata accessor for AspireHeSerializedRelinKey(0);
      uint64_t v58 = *(void *)(v57 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48))(v56, 1, v57))
      {
        uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
        memcpy(v55, v56, *(void *)(*(void *)(v59 - 8) + 64));
        uint64_t v19 = v138;
      }
      else
      {
        v132 = v28;
        v28(v55, v56, v6);
        uint64_t v60 = *(int *)(v57 + 20);
        uint64_t v61 = &v55[v60];
        uint64_t v62 = &v56[v60];
        uint64_t v63 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
        uint64_t v64 = *(void *)(v63 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48))(v62, 1, v63))
        {
          uint64_t v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
          memcpy(v61, v62, *(void *)(*(void *)(v65 - 8) + 64));
        }
        else
        {
          v132(v61, v62, v130);
          uint64_t v80 = *(int *)(v63 + 20);
          __src = v61;
          v124 = &v61[v80];
          uint64_t v81 = &v62[v80];
          uint64_t v82 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
          uint64_t v123 = *(void *)(v82 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v123 + 48))(v81, 1, v82))
          {
            uint64_t v83 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
            memcpy(v124, v81, *(void *)(*(void *)(v83 - 8) + 64));
          }
          else
          {
            *(void *)v124 = *(void *)v81;
            uint64_t v97 = *(int *)(v82 + 20);
            v122 = &v124[v97];
            v126 = &v81[v97];
            swift_bridgeObjectRetain();
            v132(v122, v126, v130);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v123 + 56))(v124, 0, 1, v82);
          }
          (*(void (**)(char *, void, uint64_t, uint64_t))(v64 + 56))(__src, 0, 1, v63);
        }
        uint64_t v19 = v138;
        (*(void (**)(char *, void, uint64_t, uint64_t))(v58 + 56))(v55, 0, 1, v57);
      }
      goto LABEL_48;
    }
    goto LABEL_14;
  }
  if (v27)
  {
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v21, type metadata accessor for AspireHeSerializedEvaluationKey);
LABEL_14:
    int v35 = &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?;
LABEL_15:
    size_t v36 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(v35) - 8) + 64);
    uint64_t v37 = v21;
    uint64_t v38 = v22;
LABEL_16:
    memcpy(v37, v38, v36);
    return v19;
  }
  v18(v21, v22, v6);
  uint64_t v43 = *(int *)(v23 + 20);
  uint64_t v44 = &v21[v43];
  uint64_t v45 = &v22[v43];
  uint64_t v46 = type metadata accessor for AspireHeSerializedGaloisKey(0);
  uint64_t v47 = *(void *)(v46 - 8);
  uint64_t v48 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v47 + 48);
  v125 = v44;
  LODWORD(v44) = v48(v44, 1, v46);
  int v49 = v48(v45, 1, v46);
  if (v44)
  {
    if (v49)
    {
      size_t v50 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?)
                                  - 8)
                      + 64);
      uint64_t v51 = v125;
LABEL_28:
      memcpy(v51, v45, v50);
      goto LABEL_30;
    }
    void *v125 = *(void *)v45;
    uint64_t v66 = *(int *)(v46 + 20);
    char v67 = (char *)v125 + v66;
    v68 = &v45[v66];
    __srca = *(void (**)(char *, char *, uint64_t))(v134 + 16);
    swift_bridgeObjectRetain();
    __srca(v67, v68, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v47 + 56))(v125, 0, 1, v46);
  }
  else
  {
    if (v49)
    {
      _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v125, type metadata accessor for AspireHeSerializedGaloisKey);
      size_t v50 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?)
                                  - 8)
                      + 64);
      uint64_t v51 = v125;
      goto LABEL_28;
    }
    void *v125 = *(void *)v45;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v135((uint64_t)v125 + *(int *)(v46 + 20), (uint64_t)&v45[*(int *)(v46 + 20)], v6);
  }
LABEL_30:
  uint64_t v69 = *(int *)(v23 + 24);
  v21 += v69;
  v70 = &v22[v69];
  uint64_t v23 = type metadata accessor for AspireHeSerializedRelinKey(0);
  uint64_t v24 = *(void *)(v23 - 8);
  v71 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v24 + 48);
  int v72 = v71(v21, 1, v23);
  int v73 = v71(v70, 1, v23);
  uint64_t v19 = v138;
  if (v72)
  {
    if (!v73)
    {
      v136 = *(void (**)(char *, char *, uint64_t))(v134 + 16);
      v136(v21, v70, v6);
      uint64_t v74 = *(int *)(v23 + 20);
      uint64_t v75 = &v21[v74];
      v76 = &v70[v74];
      uint64_t v77 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
      uint64_t v78 = *(void *)(v77 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v78 + 48))(v76, 1, v77))
      {
        uint64_t v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
        memcpy(v75, v76, *(void *)(*(void *)(v79 - 8) + 64));
      }
      else
      {
        v136(v75, v76, v6);
        uint64_t v91 = *(int *)(v77 + 20);
        v133 = v75;
        v92 = &v75[v91];
        v93 = &v76[v91];
        uint64_t v94 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
        uint64_t v95 = *(void *)(v94 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v95 + 48))(v93, 1, v94))
        {
          uint64_t v96 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
          memcpy(v92, v93, *(void *)(*(void *)(v96 - 8) + 64));
        }
        else
        {
          *(void *)v92 = *(void *)v93;
          uint64_t v106 = *(int *)(v94 + 20);
          __srcb = &v92[v106];
          v107 = &v93[v106];
          swift_bridgeObjectRetain();
          v136(__srcb, v107, v6);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v95 + 56))(v92, 0, 1, v94);
        }
        uint64_t v19 = v138;
        (*(void (**)(char *, void, uint64_t, uint64_t))(v78 + 56))(v133, 0, 1, v77);
      }
LABEL_48:
      (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
      return v19;
    }
    goto LABEL_36;
  }
  if (v73)
  {
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v21, type metadata accessor for AspireHeSerializedRelinKey);
LABEL_36:
    size_t v36 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?)
                                - 8)
                    + 64);
    uint64_t v37 = v21;
    uint64_t v38 = v70;
    goto LABEL_16;
  }
  v135((uint64_t)v21, (uint64_t)v70, v6);
  uint64_t v84 = *(int *)(v23 + 20);
  v21 += v84;
  uint64_t v22 = &v70[v84];
  uint64_t v85 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
  uint64_t v86 = *(void *)(v85 - 8);
  v87 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v86 + 48);
  int v88 = v87(v21, 1, v85);
  int v89 = v87(v22, 1, v85);
  if (!v88)
  {
    uint64_t v19 = v138;
    if (!v89)
    {
      v135((uint64_t)v21, (uint64_t)v22, v6);
      uint64_t v108 = *(int *)(v85 + 20);
      uint64_t v109 = &v21[v108];
      uint64_t v110 = &v22[v108];
      uint64_t v111 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
      uint64_t v112 = *(void *)(v111 - 8);
      uint64_t v113 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v112 + 48);
      int v114 = v113(v109, 1, v111);
      int v115 = v113(v110, 1, v111);
      if (v114)
      {
        if (!v115)
        {
          *(void *)uint64_t v109 = *(void *)v110;
          uint64_t v116 = *(int *)(v111 + 20);
          v117 = &v109[v116];
          v118 = &v110[v116];
          v119 = *(void (**)(char *, char *, uint64_t))(v134 + 16);
          swift_bridgeObjectRetain();
          v119(v117, v118, v6);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v112 + 56))(v109, 0, 1, v111);
          return v19;
        }
      }
      else
      {
        if (!v115)
        {
          *(void *)uint64_t v109 = *(void *)v110;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          v135((uint64_t)&v109[*(int *)(v111 + 20)], (uint64_t)&v110[*(int *)(v111 + 20)], v6);
          return v19;
        }
        _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v109, type metadata accessor for AspireHeSerializedCiphertextVec);
      }
      size_t v36 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?)
                                  - 8)
                      + 64);
      uint64_t v37 = v109;
      uint64_t v38 = v110;
      goto LABEL_16;
    }
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v21, type metadata accessor for AspireHeSerializedKeySwitchKey);
    int v35 = &demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?;
    goto LABEL_15;
  }
  if (v89)
  {
    uint64_t v90 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
    memcpy(v21, v22, *(void *)(*(void *)(v90 - 8) + 64));
    return v138;
  }
  else
  {
    uint64_t v99 = *(void (**)(char *, char *, uint64_t))(v134 + 16);
    v99(v21, v22, v6);
    uint64_t v100 = *(int *)(v85 + 20);
    v101 = &v21[v100];
    uint64_t v102 = &v22[v100];
    uint64_t v103 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
    uint64_t v104 = *(void *)(v103 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v104 + 48))(v102, 1, v103))
    {
      uint64_t v105 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
      memcpy(v101, v102, *(void *)(*(void *)(v105 - 8) + 64));
    }
    else
    {
      *(void *)v101 = *(void *)v102;
      uint64_t v120 = *(int *)(v103 + 20);
      v137 = &v101[v120];
      v121 = &v102[v120];
      swift_bridgeObjectRetain();
      v99(v137, v121, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v104 + 56))(v101, 0, 1, v103);
    }
    (*(void (**)(char *, void, uint64_t, uint64_t))(v86 + 56))(v21, 0, 1, v85);
    return v138;
  }
}

uint64_t initializeWithTake for AspireApiEvaluationKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  uint64_t v11 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    *uint64_t v9 = *v10;
    *(_OWORD *)(v9 + 1) = *(_OWORD *)(v10 + 1);
    v7((uint64_t)v9 + *(int *)(v11 + 24), (uint64_t)v10 + *(int *)(v11 + 24), v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  uint64_t v14 = *(int *)(a3 + 24);
  uint64_t v15 = (char *)(a1 + v14);
  unint64_t v16 = (char *)(a2 + v14);
  uint64_t v17 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  uint64_t v18 = *(void *)(v17 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
  {
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
    memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    uint64_t v51 = v18;
    v7((uint64_t)v15, (uint64_t)v16, v6);
    uint64_t v20 = *(int *)(v17 + 20);
    uint64_t v52 = v15;
    uint64_t v21 = &v15[v20];
    uint64_t v22 = &v16[v20];
    uint64_t v23 = type metadata accessor for AspireHeSerializedGaloisKey(0);
    uint64_t v24 = *(void *)(v23 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
    {
      uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
      memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
    }
    else
    {
      *(void *)uint64_t v21 = *(void *)v22;
      v7((uint64_t)&v21[*(int *)(v23 + 20)], (uint64_t)&v22[*(int *)(v23 + 20)], v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
    }
    int v26 = v52;
    uint64_t v27 = *(int *)(v17 + 24);
    uint64_t v28 = &v52[v27];
    uint64_t v29 = &v16[v27];
    uint64_t v30 = type metadata accessor for AspireHeSerializedRelinKey(0);
    uint64_t v31 = *(void *)(v30 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
    {
      uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
      memcpy(v28, v29, *(void *)(*(void *)(v32 - 8) + 64));
    }
    else
    {
      uint64_t v49 = v31;
      v7((uint64_t)v28, (uint64_t)v29, v6);
      uint64_t v33 = *(int *)(v30 + 20);
      uint64_t v48 = v28;
      __dst = &v28[v33];
      uint64_t v34 = &v29[v33];
      uint64_t v35 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
      uint64_t v36 = *(void *)(v35 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
      {
        uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
        memcpy(__dst, v34, *(void *)(*(void *)(v37 - 8) + 64));
        uint64_t v39 = v48;
        uint64_t v38 = v49;
      }
      else
      {
        v7((uint64_t)__dst, (uint64_t)v34, v6);
        uint64_t v47 = v35;
        uint64_t v40 = *(int *)(v35 + 20);
        uint64_t v46 = &__dst[v40];
        uint64_t v41 = &v34[v40];
        uint64_t v42 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
        uint64_t v43 = *(void *)(v42 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
        {
          uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
          memcpy(v46, v41, *(void *)(*(void *)(v44 - 8) + 64));
        }
        else
        {
          *(void *)uint64_t v46 = *(void *)v41;
          v7((uint64_t)&v46[*(int *)(v42 + 20)], (uint64_t)&v41[*(int *)(v42 + 20)], v6);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v43 + 56))(v46, 0, 1, v42);
        }
        uint64_t v39 = v48;
        uint64_t v38 = v49;
        (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(__dst, 0, 1, v47);
        int v26 = v52;
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v38 + 56))(v39, 0, 1, v30);
    }
    (*(void (**)(char *, void, uint64_t, uint64_t))(v51 + 56))(v26, 0, 1, v17);
  }
  return a1;
}

uint64_t assignWithTake for AspireApiEvaluationKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v118 = *(void *)(v6 - 8);
  uint64_t v119 = v6;
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v118 + 40);
  v7(a1, a2);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v120 = a1;
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  uint64_t v11 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  int v14 = v13(v9, 1, v11);
  int v15 = v13(v10, 1, v11);
  if (v14)
  {
    if (!v15)
    {
      *uint64_t v9 = *v10;
      *(_OWORD *)(v9 + 1) = *(_OWORD *)(v10 + 1);
      (*(void (**)(char *, char *, uint64_t))(v118 + 32))((char *)v9 + *(int *)(v11 + 24), (char *)v10 + *(int *)(v11 + 24), v119);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
LABEL_7:
      uint64_t v17 = v120;
      uint64_t v18 = (void (*)(char *, char *, uint64_t))v7;
      goto LABEL_8;
    }
LABEL_6:
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
    memcpy(v9, v10, *(void *)(*(void *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  if (v15)
  {
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v9, type metadata accessor for AspireApiEvaluationKeyMetadata);
    goto LABEL_6;
  }
  uint64_t v38 = v10[2];
  uint64_t v39 = v9[1];
  unint64_t v40 = v9[2];
  *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
  v9[2] = v38;
  outlined consume of Data._Representation(v39, v40);
  uint64_t v18 = (void (*)(char *, char *, uint64_t))v7;
  ((void (*)(char *, char *, uint64_t))v7)((char *)v9 + *(int *)(v11 + 24), (char *)v10 + *(int *)(v11 + 24), v119);
  uint64_t v17 = v120;
LABEL_8:
  uint64_t v19 = *(int *)(a3 + 24);
  uint64_t v20 = (char *)(v17 + v19);
  uint64_t v21 = (char *)(a2 + v19);
  uint64_t v22 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  uint64_t v23 = *(void **)(v22 - 8);
  uint64_t v24 = (uint64_t (*)(char *, uint64_t, uint64_t))v23[6];
  int v25 = v24(v20, 1, v22);
  int v26 = v24(v21, 1, v22);
  if (!v25)
  {
    if (v26)
    {
      _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v20, type metadata accessor for AspireHeSerializedEvaluationKey);
      goto LABEL_14;
    }
    v18(v20, v21, v119);
    uint64_t v41 = *(int *)(v22 + 20);
    uint64_t v42 = &v20[v41];
    uint64_t v43 = &v21[v41];
    uint64_t v44 = type metadata accessor for AspireHeSerializedGaloisKey(0);
    uint64_t v45 = *(void *)(v44 - 8);
    uint64_t v46 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v45 + 48);
    int v114 = v42;
    LODWORD(v42) = v46(v42, 1, v44);
    int v47 = v46(v43, 1, v44);
    if (v42)
    {
      if (v47)
      {
        size_t v48 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?)
                                    - 8)
                        + 64);
        uint64_t v49 = v114;
LABEL_28:
        memcpy(v49, v43, v48);
        uint64_t v63 = v118;
        uint64_t v62 = v119;
        goto LABEL_33;
      }
      *int v114 = *(void *)v43;
      uint64_t v63 = v118;
      uint64_t v62 = v119;
      (*(void (**)(char *, char *, uint64_t))(v118 + 32))((char *)v114 + *(int *)(v44 + 20), &v43[*(int *)(v44 + 20)], v119);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v45 + 56))(v114, 0, 1, v44);
    }
    else
    {
      if (v47)
      {
        _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v114, type metadata accessor for AspireHeSerializedGaloisKey);
        size_t v48 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?)
                                    - 8)
                        + 64);
        uint64_t v49 = v114;
        goto LABEL_28;
      }
      *int v114 = *(void *)v43;
      swift_bridgeObjectRelease();
      uint64_t v62 = v119;
      ((void (*)(char *, char *, uint64_t))v7)((char *)v114 + *(int *)(v44 + 20), &v43[*(int *)(v44 + 20)], v119);
      uint64_t v63 = v118;
    }
LABEL_33:
    uint64_t v68 = *(int *)(v22 + 24);
    uint64_t v69 = (uint64_t)&v20[v68];
    v70 = &v21[v68];
    uint64_t v71 = type metadata accessor for AspireHeSerializedRelinKey(0);
    uint64_t v72 = *(void *)(v71 - 8);
    int v73 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v72 + 48);
    int v74 = v73(v69, 1, v71);
    int v75 = v73((uint64_t)v70, 1, v71);
    if (v74)
    {
      uint64_t v17 = v120;
      if (!v75)
      {
        v76 = *(void (**)(uint64_t, char *, uint64_t))(v63 + 32);
        v76(v69, v70, v62);
        uint64_t v77 = *(int *)(v71 + 20);
        uint64_t v78 = (char *)(v69 + v77);
        uint64_t v79 = &v70[v77];
        uint64_t v80 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
        uint64_t v81 = *(void *)(v80 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v81 + 48))(v79, 1, v80))
        {
          uint64_t v82 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
          memcpy(v78, v79, *(void *)(*(void *)(v82 - 8) + 64));
          uint64_t v17 = v120;
        }
        else
        {
          v76((uint64_t)v78, v79, v62);
          uint64_t v91 = *(int *)(v80 + 20);
          v117 = &v78[v91];
          v92 = &v79[v91];
          uint64_t v93 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
          uint64_t v94 = *(void *)(v93 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v94 + 48))(v92, 1, v93))
          {
            uint64_t v95 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
            memcpy(v117, v92, *(void *)(*(void *)(v95 - 8) + 64));
          }
          else
          {
            *(void *)v117 = *(void *)v92;
            v76((uint64_t)&v117[*(int *)(v93 + 20)], &v92[*(int *)(v93 + 20)], v119);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v94 + 56))(v117, 0, 1, v93);
          }
          uint64_t v17 = v120;
          (*(void (**)(char *, void, uint64_t, uint64_t))(v81 + 56))(v78, 0, 1, v80);
        }
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v72 + 56))(v69, 0, 1, v71);
        return v17;
      }
    }
    else
    {
      uint64_t v17 = v120;
      if (!v75)
      {
        ((void (*)(uint64_t, char *, uint64_t))v7)(v69, v70, v62);
        uint64_t v83 = *(int *)(v71 + 20);
        uint64_t v20 = (char *)(v69 + v83);
        uint64_t v21 = &v70[v83];
        uint64_t v84 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
        uint64_t v85 = *(void *)(v84 - 8);
        uint64_t v86 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v85 + 48);
        int v87 = v86(v20, 1, v84);
        int v88 = v86(v21, 1, v84);
        if (v87)
        {
          if (v88)
          {
            uint64_t v89 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
            memcpy(v20, v21, *(void *)(*(void *)(v89 - 8) + 64));
            return v120;
          }
          else
          {
            uint64_t v96 = *(void (**)(char *, char *, uint64_t))(v63 + 32);
            v96(v20, v21, v62);
            uint64_t v97 = *(int *)(v84 + 20);
            uint64_t v98 = &v20[v97];
            uint64_t v99 = &v21[v97];
            uint64_t v100 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
            uint64_t v101 = v62;
            uint64_t v102 = *(void *)(v100 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v102 + 48))(v99, 1, v100))
            {
              uint64_t v103 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
              memcpy(v98, v99, *(void *)(*(void *)(v103 - 8) + 64));
            }
            else
            {
              *(void *)uint64_t v98 = *(void *)v99;
              v96(&v98[*(int *)(v100 + 20)], &v99[*(int *)(v100 + 20)], v101);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v102 + 56))(v98, 0, 1, v100);
            }
            (*(void (**)(char *, void, uint64_t, uint64_t))(v85 + 56))(v20, 0, 1, v84);
            return v120;
          }
        }
        uint64_t v17 = v120;
        if (!v88)
        {
          ((void (*)(char *, char *, uint64_t))v7)(v20, v21, v62);
          uint64_t v104 = *(int *)(v84 + 20);
          uint64_t v105 = &v20[v104];
          uint64_t v106 = &v21[v104];
          uint64_t v107 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
          uint64_t v108 = *(void *)(v107 - 8);
          uint64_t v109 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v108 + 48);
          int v110 = v109(v105, 1, v107);
          int v111 = v109(v106, 1, v107);
          if (v110)
          {
            uint64_t v17 = v120;
            if (!v111)
            {
              *(void *)uint64_t v105 = *(void *)v106;
              (*(void (**)(char *, char *, uint64_t))(v63 + 32))(&v105[*(int *)(v107 + 20)], &v106[*(int *)(v107 + 20)], v62);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v108 + 56))(v105, 0, 1, v107);
              return v17;
            }
          }
          else
          {
            uint64_t v17 = v120;
            if (!v111)
            {
              *(void *)uint64_t v105 = *(void *)v106;
              swift_bridgeObjectRelease();
              ((void (*)(char *, char *, uint64_t))v7)(&v105[*(int *)(v107 + 20)], &v106[*(int *)(v107 + 20)], v62);
              return v17;
            }
            _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v105, type metadata accessor for AspireHeSerializedCiphertextVec);
          }
          size_t v35 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?)
                                      - 8)
                          + 64);
          uint64_t v36 = v105;
          uint64_t v37 = v106;
          goto LABEL_16;
        }
        _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v20, type metadata accessor for AspireHeSerializedKeySwitchKey);
        uint64_t v34 = &demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?;
        goto LABEL_15;
      }
      _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0(v69, type metadata accessor for AspireHeSerializedRelinKey);
    }
    size_t v35 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?)
                                - 8)
                    + 64);
    uint64_t v36 = (void *)v69;
    uint64_t v37 = v70;
    goto LABEL_16;
  }
  if (v26)
  {
LABEL_14:
    uint64_t v34 = &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?;
LABEL_15:
    size_t v35 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(v34) - 8) + 64);
    uint64_t v36 = v20;
    uint64_t v37 = v21;
LABEL_16:
    memcpy(v36, v37, v35);
    return v17;
  }
  uint64_t v116 = (void (**)(void *, void, uint64_t, uint64_t))v23;
  uint64_t v27 = *(void (**)(char *, char *, uint64_t))(v118 + 32);
  v27(v20, v21, v119);
  uint64_t v28 = *(int *)(v22 + 20);
  uint64_t v29 = &v20[v28];
  uint64_t v30 = &v21[v28];
  uint64_t v31 = type metadata accessor for AspireHeSerializedGaloisKey(0);
  uint64_t v32 = *(void *)(v31 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
  {
    uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
    memcpy(v29, v30, *(void *)(*(void *)(v33 - 8) + 64));
  }
  else
  {
    *(void *)uint64_t v29 = *(void *)v30;
    v27(&v29[*(int *)(v31 + 20)], &v30[*(int *)(v31 + 20)], v119);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
  }
  uint64_t v50 = *(int *)(v22 + 24);
  uint64_t v51 = &v20[v50];
  uint64_t v52 = &v21[v50];
  uint64_t v53 = type metadata accessor for AspireHeSerializedRelinKey(0);
  uint64_t v54 = *(void *)(v53 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48))(v52, 1, v53))
  {
    uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
    memcpy(v51, v52, *(void *)(*(void *)(v55 - 8) + 64));
  }
  else
  {
    v27(v51, v52, v119);
    uint64_t v56 = *(int *)(v53 + 20);
    uint64_t v57 = &v51[v56];
    uint64_t v58 = &v52[v56];
    uint64_t v59 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
    uint64_t v60 = *(void *)(v59 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v60 + 48))(v58, 1, v59))
    {
      uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
      memcpy(v57, v58, *(void *)(*(void *)(v61 - 8) + 64));
    }
    else
    {
      v27(v57, v58, v119);
      uint64_t v64 = *(int *)(v59 + 20);
      int v115 = v57;
      __dst = &v57[v64];
      uint64_t v65 = &v58[v64];
      uint64_t v66 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
      uint64_t v112 = *(void *)(v66 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v112 + 48))(v65, 1, v66))
      {
        uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
        memcpy(__dst, v65, *(void *)(*(void *)(v67 - 8) + 64));
      }
      else
      {
        *(void *)__dst = *(void *)v65;
        v27(&__dst[*(int *)(v66 + 20)], &v65[*(int *)(v66 + 20)], v119);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v112 + 56))(__dst, 0, 1, v66);
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v60 + 56))(v115, 0, 1, v59);
    }
    (*(void (**)(char *, void, uint64_t, uint64_t))(v54 + 56))(v51, 0, 1, v53);
  }
  uint64_t v17 = v120;
  v116[7](v20, 0, 1, v22);
  return v17;
}

uint64_t getEnumTagSinglePayload for AspireApiEvaluationKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_249DB4A0C);
}

uint64_t sub_249DB4A0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  int v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
  uint64_t v16 = v14;
  uint64_t v17 = a1 + *(int *)(a3 + 24);
  return v15(v17, a2, v16);
}

uint64_t storeEnumTagSinglePayload for AspireApiEvaluationKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_249DB4B74);
}

uint64_t sub_249DB4B74(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_5:
    return v11(v12, a2, a2, v10);
  }
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  uint64_t v14 = *(void *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_5;
  }
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56);
  uint64_t v18 = v16;
  uint64_t v19 = a1 + *(int *)(a4 + 24);
  return v17(v19, a2, a2, v18);
}

void type metadata completion function for AspireApiEvaluationKey()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for AspireHeEvaluationKeyConfig?(319, &lazy cache variable for type metadata for AspireApiEvaluationKeyMetadata?, (void (*)(uint64_t))type metadata accessor for AspireApiEvaluationKeyMetadata);
    if (v1 <= 0x3F)
    {
      type metadata accessor for AspireHeEvaluationKeyConfig?(319, &lazy cache variable for type metadata for AspireHeSerializedEvaluationKey?, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedEvaluationKey);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

void type metadata accessor for AspireHeEvaluationKeyConfig?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t getEnumTagSinglePayload for AspireApiConfigRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_80Tm);
}

uint64_t storeEnumTagSinglePayload for AspireApiConfigRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_81Tm);
}

uint64_t *initializeBufferWithCopyOfBuffer for AspireApiConfig(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for AspireApiConfig.OneOf_Config(0);
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v55 = v8;
        *a1 = *a2;
        *((_DWORD *)a1 + 2) = *((_DWORD *)a2 + 2);
        a1[2] = a2[2];
        *((unsigned char *)a1 + 24) = *((unsigned char *)a2 + 24);
        uint64_t v11 = a2[4];
        unint64_t v12 = a2[5];
        outlined copy of Data._Representation(v11, v12);
        a1[4] = v11;
        a1[5] = v12;
        a1[6] = a2[6];
        uint64_t v13 = type metadata accessor for AspireApiPECConfig(0);
        uint64_t v14 = *(int *)(v13 + 36);
        uint64_t v52 = (char *)a1 + v14;
        int v15 = (char *)a2 + v14;
        uint64_t v16 = type metadata accessor for UnknownStorage();
        uint64_t v17 = *(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16);
        swift_bridgeObjectRetain();
        uint64_t v51 = v16;
        v17(v52, v15, v16);
        uint64_t v18 = v17;
        uint64_t v53 = v13;
        uint64_t v19 = *(int *)(v13 + 40);
        uint64_t v20 = (_OWORD *)((char *)a1 + v19);
        uint64_t v21 = (_OWORD *)((char *)a2 + v19);
        uint64_t v22 = type metadata accessor for AspireHeEncryptionParameters(0);
        uint64_t v23 = *(void *)(v22 - 8);
        uint64_t v50 = v17;
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
        {
          uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
          memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
        }
        else
        {
          *uint64_t v20 = *v21;
          uint64_t v27 = *((void *)v21 + 3);
          *((void *)v20 + 2) = *((void *)v21 + 2);
          *((void *)v20 + 3) = v27;
          *((unsigned char *)v20 + 32) = *((unsigned char *)v21 + 32);
          *((void *)v20 + 5) = *((void *)v21 + 5);
          *((unsigned char *)v20 + 48) = *((unsigned char *)v21 + 48);
          *((void *)v20 + 7) = *((void *)v21 + 7);
          *((unsigned char *)v20 + 64) = *((unsigned char *)v21 + 64);
          uint64_t v28 = *(int *)(v22 + 40);
          uint64_t v29 = (char *)v20 + v28;
          uint64_t v30 = (char *)v21 + v28;
          swift_bridgeObjectRetain();
          v18(v29, v30, v51);
          (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
        }
        uint64_t v31 = *(int *)(v53 + 44);
        uint64_t v32 = (char *)a1 + v31;
        uint64_t v33 = (char *)a2 + v31;
        uint64_t v34 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
        uint64_t v35 = *(void *)(v34 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
        {
          uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
          memcpy(v32, v33, *(void *)(*(void *)(v36 - 8) + 64));
        }
        else
        {
          uint64_t v54 = v35;
          uint64_t v37 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
          uint64_t v38 = *(void *)(v37 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v33, 1, v37))
          {
            uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
            memcpy(v32, v33, *(void *)(*(void *)(v39 - 8) + 64));
          }
          else
          {
            swift_getEnumCaseMultiPayload();
            v50(v32, v33, v51);
            swift_storeEnumTagMultiPayload();
            (*(void (**)(char *, void, uint64_t, uint64_t))(v38 + 56))(v32, 0, 1, v37);
          }
          v50(&v32[*(int *)(v34 + 20)], &v33[*(int *)(v34 + 20)], v51);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v54 + 56))(v32, 0, 1, v34);
        }
        swift_storeEnumTagMultiPayload();
        uint64_t v8 = v55;
      }
      else
      {
        uint64_t v25 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v25 - 8) + 16))(a1, a2, v25);
        uint64_t v26 = type metadata accessor for AspireApiPIRConfig(0);
        *(uint64_t *)((char *)a1 + *(int *)(v26 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v26 + 20));
        swift_retain();
        swift_storeEnumTagMultiPayload();
      }
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    uint64_t v40 = a3[5];
    uint64_t v41 = (uint64_t *)((char *)a1 + v40);
    uint64_t v42 = (uint64_t *)((char *)a2 + v40);
    uint64_t v43 = *v42;
    unint64_t v44 = v42[1];
    outlined copy of Data._Representation(*v42, v44);
    uint64_t *v41 = v43;
    v41[1] = v44;
    uint64_t v45 = a3[7];
    *((unsigned char *)a1 + a3[6]) = *((unsigned char *)a2 + a3[6]);
    uint64_t v46 = (char *)a1 + v45;
    int v47 = (char *)a2 + v45;
    uint64_t v48 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v48 - 8) + 16))(v46, v47, v48);
  }
  return a1;
}

uint64_t destroy for AspireApiConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AspireApiConfig.OneOf_Config(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, 1, v4))
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined consume of Data._Representation(*(void *)(a1 + 32), *(void *)(a1 + 40));
      swift_bridgeObjectRelease();
      int v5 = (int *)type metadata accessor for AspireApiPECConfig(0);
      uint64_t v6 = a1 + v5[9];
      uint64_t v7 = type metadata accessor for UnknownStorage();
      uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
      v8(v6, v7);
      uint64_t v9 = a1 + v5[10];
      uint64_t v10 = type metadata accessor for AspireHeEncryptionParameters(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v9, 1, v10))
      {
        swift_bridgeObjectRelease();
        v8(v9 + *(int *)(v10 + 40), v7);
      }
      uint64_t v11 = a1 + v5[11];
      uint64_t v12 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48))(v11, 1, v12))
      {
        uint64_t v13 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v11, 1, v13)
          && swift_getEnumCaseMultiPayload() <= 2)
        {
          v8(v11, v7);
        }
        v8(v11 + *(int *)(v12 + 20), v7);
      }
    }
    else
    {
      uint64_t v14 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(a1, v14);
      type metadata accessor for AspireApiPIRConfig(0);
      swift_release();
    }
  }
  outlined consume of Data._Representation(*(void *)(a1 + *(int *)(a2 + 20)), *(void *)(a1 + *(int *)(a2 + 20) + 8));
  uint64_t v15 = a1 + *(int *)(a2 + 28);
  uint64_t v16 = type metadata accessor for UnknownStorage();
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8);
  return v17(v15, v16);
}

void *initializeWithCopy for AspireApiConfig(void *a1, void *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AspireApiConfig.OneOf_Config(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v51 = v7;
      *a1 = *a2;
      *((_DWORD *)a1 + 2) = *((_DWORD *)a2 + 2);
      a1[2] = a2[2];
      *((unsigned char *)a1 + 24) = *((unsigned char *)a2 + 24);
      uint64_t v9 = a2[4];
      unint64_t v10 = a2[5];
      outlined copy of Data._Representation(v9, v10);
      a1[4] = v9;
      a1[5] = v10;
      a1[6] = a2[6];
      uint64_t v11 = type metadata accessor for AspireApiPECConfig(0);
      uint64_t v12 = *(int *)(v11 + 36);
      uint64_t v49 = (char *)a1 + v12;
      uint64_t v13 = (char *)a2 + v12;
      uint64_t v14 = type metadata accessor for UnknownStorage();
      uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16);
      swift_bridgeObjectRetain();
      int v47 = v15;
      uint64_t v48 = v14;
      v15(v49, v13, v14);
      uint64_t v50 = v11;
      uint64_t v16 = *(int *)(v11 + 40);
      uint64_t v17 = (_OWORD *)((char *)a1 + v16);
      uint64_t v18 = (_OWORD *)((char *)a2 + v16);
      uint64_t v19 = type metadata accessor for AspireHeEncryptionParameters(0);
      uint64_t v20 = *(void *)(v19 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
      {
        uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
        memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
      }
      else
      {
        *uint64_t v17 = *v18;
        uint64_t v24 = *((void *)v18 + 3);
        *((void *)v17 + 2) = *((void *)v18 + 2);
        *((void *)v17 + 3) = v24;
        *((unsigned char *)v17 + 32) = *((unsigned char *)v18 + 32);
        *((void *)v17 + 5) = *((void *)v18 + 5);
        *((unsigned char *)v17 + 48) = *((unsigned char *)v18 + 48);
        *((void *)v17 + 7) = *((void *)v18 + 7);
        *((unsigned char *)v17 + 64) = *((unsigned char *)v18 + 64);
        uint64_t v25 = *(int *)(v19 + 40);
        uint64_t v26 = (char *)v17 + v25;
        uint64_t v27 = (char *)v18 + v25;
        swift_bridgeObjectRetain();
        v15(v26, v27, v48);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      }
      uint64_t v28 = *(int *)(v50 + 44);
      uint64_t v29 = (char *)a1 + v28;
      uint64_t v30 = (char *)a2 + v28;
      uint64_t v31 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
      uint64_t v32 = *(void *)(v31 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
      {
        uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
        memcpy(v29, v30, *(void *)(*(void *)(v33 - 8) + 64));
      }
      else
      {
        uint64_t v34 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
        uint64_t v35 = *(void *)(v34 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v30, 1, v34))
        {
          uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
          memcpy(v29, v30, *(void *)(*(void *)(v36 - 8) + 64));
        }
        else
        {
          swift_getEnumCaseMultiPayload();
          v47(v29, v30, v48);
          swift_storeEnumTagMultiPayload();
          (*(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(v29, 0, 1, v34);
        }
        v47(&v29[*(int *)(v31 + 20)], &v30[*(int *)(v31 + 20)], v48);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
      }
      swift_storeEnumTagMultiPayload();
      uint64_t v7 = v51;
    }
    else
    {
      uint64_t v22 = type metadata accessor for UnknownStorage();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v22 - 8) + 16))(a1, a2, v22);
      uint64_t v23 = type metadata accessor for AspireApiPIRConfig(0);
      *(void *)((char *)a1 + *(int *)(v23 + 20)) = *(void *)((char *)a2 + *(int *)(v23 + 20));
      swift_retain();
      swift_storeEnumTagMultiPayload();
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v37 = a3[5];
  uint64_t v38 = (void *)((char *)a1 + v37);
  uint64_t v39 = (void *)((char *)a2 + v37);
  uint64_t v40 = *v39;
  unint64_t v41 = v39[1];
  outlined copy of Data._Representation(*v39, v41);
  *uint64_t v38 = v40;
  v38[1] = v41;
  uint64_t v42 = a3[7];
  *((unsigned char *)a1 + a3[6]) = *((unsigned char *)a2 + a3[6]);
  uint64_t v43 = (char *)a1 + v42;
  unint64_t v44 = (char *)a2 + v42;
  uint64_t v45 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v45 - 8) + 16))(v43, v44, v45);
  return a1;
}

uint64_t assignWithCopy for AspireApiConfig(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AspireApiConfig.OneOf_Config(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        int v88 = a3;
        uint64_t v90 = v7;
        *(void *)a1 = *(void *)a2;
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
        uint64_t v11 = *(void *)(a2 + 16);
        *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
        *(void *)(a1 + 16) = v11;
        uint64_t v12 = *(void *)(a2 + 32);
        unint64_t v13 = *(void *)(a2 + 40);
        outlined copy of Data._Representation(v12, v13);
        *(void *)(a1 + 32) = v12;
        *(void *)(a1 + 40) = v13;
        *(void *)(a1 + 48) = *(void *)(a2 + 48);
        uint64_t v14 = type metadata accessor for AspireApiPECConfig(0);
        uint64_t v15 = *(int *)(v14 + 36);
        uint64_t v16 = a1 + v15;
        uint64_t v17 = a2 + v15;
        uint64_t v18 = type metadata accessor for UnknownStorage();
        uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16);
        swift_bridgeObjectRetain();
        v19(v16, v17, v18);
        uint64_t v92 = v14;
        uint64_t v20 = *(int *)(v14 + 40);
        uint64_t v21 = (void *)(a1 + v20);
        uint64_t v22 = (void *)(a2 + v20);
        uint64_t v23 = type metadata accessor for AspireHeEncryptionParameters(0);
        uint64_t v24 = *(void *)(v23 - 8);
        uint64_t v87 = v18;
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
        {
          uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
          memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
        }
        else
        {
          *uint64_t v21 = *v22;
          v21[1] = v22[1];
          v21[2] = v22[2];
          uint64_t v43 = v22[3];
          *((unsigned char *)v21 + 32) = *((unsigned char *)v22 + 32);
          v21[3] = v43;
          uint64_t v44 = v22[5];
          *((unsigned char *)v21 + 48) = *((unsigned char *)v22 + 48);
          v21[5] = v44;
          uint64_t v45 = v22[7];
          *((unsigned char *)v21 + 64) = *((unsigned char *)v22 + 64);
          v21[7] = v45;
          uint64_t v46 = *(int *)(v23 + 40);
          int v47 = (char *)v21 + v46;
          uint64_t v48 = (char *)v22 + v46;
          swift_bridgeObjectRetain();
          v19((uint64_t)v47, (uint64_t)v48, v18);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
        }
        a3 = v88;
        uint64_t v49 = *(int *)(v92 + 44);
        uint64_t v50 = (char *)(a1 + v49);
        uint64_t v51 = (char *)(a2 + v49);
        uint64_t v52 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
        uint64_t v53 = *(void *)(v52 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48))(v51, 1, v52))
        {
          uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
          memcpy(v50, v51, *(void *)(*(void *)(v54 - 8) + 64));
        }
        else
        {
          uint64_t v95 = v53;
          uint64_t v57 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
          uint64_t v58 = *(void *)(v57 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48))(v51, 1, v57))
          {
            uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
            memcpy(v50, v51, *(void *)(*(void *)(v59 - 8) + 64));
          }
          else
          {
            swift_getEnumCaseMultiPayload();
            v19((uint64_t)v50, (uint64_t)v51, v87);
            swift_storeEnumTagMultiPayload();
            (*(void (**)(char *, void, uint64_t, uint64_t))(v58 + 56))(v50, 0, 1, v57);
          }
          v19((uint64_t)&v50[*(int *)(v52 + 20)], (uint64_t)&v51[*(int *)(v52 + 20)], v87);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v95 + 56))(v50, 0, 1, v52);
        }
        uint64_t v7 = v90;
      }
      else
      {
        uint64_t v41 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 16))(a1, a2, v41);
        uint64_t v42 = type metadata accessor for AspireApiPIRConfig(0);
        *(void *)(a1 + *(int *)(v42 + 20)) = *(void *)(a2 + *(int *)(v42 + 20));
        swift_retain();
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_27;
    }
LABEL_8:
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
    memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v26 - 8) + 64));
    goto LABEL_27;
  }
  if (v10)
  {
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0(a1, type metadata accessor for AspireApiConfig.OneOf_Config);
    goto LABEL_8;
  }
  if (a1 != a2)
  {
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0(a1, type metadata accessor for AspireApiConfig.OneOf_Config);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *(void *)a1 = *(void *)a2;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
      uint64_t v27 = *(void *)(a2 + 16);
      *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
      *(void *)(a1 + 16) = v27;
      uint64_t v28 = *(void *)(a2 + 32);
      unint64_t v29 = *(void *)(a2 + 40);
      outlined copy of Data._Representation(v28, v29);
      *(void *)(a1 + 32) = v28;
      *(void *)(a1 + 40) = v29;
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      uint64_t v30 = type metadata accessor for AspireApiPECConfig(0);
      uint64_t v31 = *(int *)(v30 + 36);
      uint64_t v93 = (char *)(a1 + v31);
      uint64_t v32 = (char *)(a2 + v31);
      uint64_t v33 = type metadata accessor for UnknownStorage();
      uint64_t v34 = *(void (**)(char *, char *, uint64_t))(*(void *)(v33 - 8) + 16);
      swift_bridgeObjectRetain();
      uint64_t v89 = v34;
      uint64_t v91 = v33;
      v34(v93, v32, v33);
      uint64_t v94 = v30;
      uint64_t v35 = *(int *)(v30 + 40);
      uint64_t v36 = (void *)(a1 + v35);
      uint64_t v37 = (void *)(a2 + v35);
      uint64_t v38 = type metadata accessor for AspireHeEncryptionParameters(0);
      uint64_t v39 = *(void *)(v38 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38))
      {
        uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
        memcpy(v36, v37, *(void *)(*(void *)(v40 - 8) + 64));
      }
      else
      {
        *uint64_t v36 = *v37;
        v36[1] = v37[1];
        v36[2] = v37[2];
        uint64_t v60 = v37[3];
        *((unsigned char *)v36 + 32) = *((unsigned char *)v37 + 32);
        v36[3] = v60;
        uint64_t v61 = v37[5];
        *((unsigned char *)v36 + 48) = *((unsigned char *)v37 + 48);
        v36[5] = v61;
        uint64_t v62 = v37[7];
        *((unsigned char *)v36 + 64) = *((unsigned char *)v37 + 64);
        v36[7] = v62;
        uint64_t v63 = *(int *)(v38 + 40);
        uint64_t v64 = (char *)v36 + v63;
        uint64_t v65 = (char *)v37 + v63;
        swift_bridgeObjectRetain();
        v34(v64, v65, v91);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
      }
      uint64_t v66 = *(int *)(v94 + 44);
      uint64_t v67 = (char *)(a1 + v66);
      uint64_t v68 = (char *)(a2 + v66);
      uint64_t v69 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
      uint64_t v70 = *(void *)(v69 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v70 + 48))(v68, 1, v69))
      {
        uint64_t v71 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
        memcpy(v67, v68, *(void *)(*(void *)(v71 - 8) + 64));
      }
      else
      {
        uint64_t v84 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
        uint64_t v85 = *(void *)(v84 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v85 + 48))(v68, 1, v84))
        {
          uint64_t v86 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
          memcpy(v67, v68, *(void *)(*(void *)(v86 - 8) + 64));
        }
        else
        {
          swift_getEnumCaseMultiPayload();
          v89(v67, v68, v91);
          swift_storeEnumTagMultiPayload();
          (*(void (**)(char *, void, uint64_t, uint64_t))(v85 + 56))(v67, 0, 1, v84);
        }
        v89(&v67[*(int *)(v69 + 20)], &v68[*(int *)(v69 + 20)], v91);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v70 + 56))(v67, 0, 1, v69);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      uint64_t v55 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v55 - 8) + 16))(a1, a2, v55);
      uint64_t v56 = type metadata accessor for AspireApiPIRConfig(0);
      *(void *)(a1 + *(int *)(v56 + 20)) = *(void *)(a2 + *(int *)(v56 + 20));
      swift_retain();
      swift_storeEnumTagMultiPayload();
    }
  }
LABEL_27:
  uint64_t v72 = a3[5];
  int v73 = (uint64_t *)(a1 + v72);
  int v74 = (uint64_t *)(a2 + v72);
  uint64_t v75 = *v74;
  unint64_t v76 = v74[1];
  outlined copy of Data._Representation(*v74, v76);
  uint64_t v77 = *v73;
  unint64_t v78 = v73[1];
  *int v73 = v75;
  v73[1] = v76;
  outlined consume of Data._Representation(v77, v78);
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  uint64_t v79 = a3[7];
  uint64_t v80 = a1 + v79;
  uint64_t v81 = a2 + v79;
  uint64_t v82 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v82 - 8) + 24))(v80, v81, v82);
  return a1;
}

void *initializeWithTake for AspireApiConfig(void *a1, void *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AspireApiConfig.OneOf_Config(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v42 = v7;
      *a1 = *a2;
      *((_DWORD *)a1 + 2) = *((_DWORD *)a2 + 2);
      a1[2] = a2[2];
      *((unsigned char *)a1 + 24) = *((unsigned char *)a2 + 24);
      *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
      a1[6] = a2[6];
      uint64_t v9 = type metadata accessor for AspireApiPECConfig(0);
      uint64_t v10 = *(int *)(v9 + 36);
      uint64_t v11 = (char *)a1 + v10;
      uint64_t v12 = (char *)a2 + v10;
      uint64_t v13 = type metadata accessor for UnknownStorage();
      uint64_t v14 = (void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32);
      uint64_t v40 = *v14;
      (*v14)(v11, v12, v13);
      uint64_t v41 = v9;
      uint64_t v15 = *(int *)(v9 + 40);
      uint64_t v16 = (_OWORD *)((char *)a1 + v15);
      uint64_t v17 = (_OWORD *)((char *)a2 + v15);
      uint64_t v18 = type metadata accessor for AspireHeEncryptionParameters(0);
      uint64_t v19 = *(void *)(v18 - 8);
      uint64_t v39 = v13;
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
      {
        uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
        memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
      }
      else
      {
        _OWORD *v16 = *v17;
        uint64_t v23 = *((void *)v17 + 3);
        *((void *)v16 + 2) = *((void *)v17 + 2);
        *((void *)v16 + 3) = v23;
        *((unsigned char *)v16 + 32) = *((unsigned char *)v17 + 32);
        *((void *)v16 + 5) = *((void *)v17 + 5);
        *((unsigned char *)v16 + 48) = *((unsigned char *)v17 + 48);
        *((void *)v16 + 7) = *((void *)v17 + 7);
        *((unsigned char *)v16 + 64) = *((unsigned char *)v17 + 64);
        v40((char *)v16 + *(int *)(v18 + 40), (char *)v17 + *(int *)(v18 + 40), v13);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      }
      uint64_t v24 = *(int *)(v41 + 44);
      uint64_t v25 = (char *)a1 + v24;
      uint64_t v26 = (char *)a2 + v24;
      uint64_t v27 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
      uint64_t v28 = *(void *)(v27 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
      {
        uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
        memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
      }
      else
      {
        uint64_t v30 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
        uint64_t v31 = *(void *)(v30 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v26, 1, v30))
        {
          uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
          memcpy(v25, v26, *(void *)(*(void *)(v32 - 8) + 64));
        }
        else
        {
          swift_getEnumCaseMultiPayload();
          v40(v25, v26, v39);
          swift_storeEnumTagMultiPayload();
          (*(void (**)(char *, void, uint64_t, uint64_t))(v31 + 56))(v25, 0, 1, v30);
        }
        v40(&v25[*(int *)(v27 + 20)], &v26[*(int *)(v27 + 20)], v39);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
      }
      swift_storeEnumTagMultiPayload();
      uint64_t v7 = v42;
    }
    else
    {
      uint64_t v21 = type metadata accessor for UnknownStorage();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v21 - 8) + 32))(a1, a2, v21);
      uint64_t v22 = type metadata accessor for AspireApiPIRConfig(0);
      *(void *)((char *)a1 + *(int *)(v22 + 20)) = *(void *)((char *)a2 + *(int *)(v22 + 20));
      swift_storeEnumTagMultiPayload();
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v33 = a3[6];
  *(_OWORD *)((char *)a1 + a3[5]) = *(_OWORD *)((char *)a2 + a3[5]);
  *((unsigned char *)a1 + v33) = *((unsigned char *)a2 + v33);
  uint64_t v34 = a3[7];
  uint64_t v35 = (char *)a1 + v34;
  uint64_t v36 = (char *)a2 + v34;
  uint64_t v37 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 32))(v35, v36, v37);
  return a1;
}

uint64_t assignWithTake for AspireApiConfig(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AspireApiConfig.OneOf_Config(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v72 = v7;
        *(void *)a1 = *(void *)a2;
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(void *)(a1 + 48) = *(void *)(a2 + 48);
        uint64_t v11 = type metadata accessor for AspireApiPECConfig(0);
        uint64_t v12 = *(int *)(v11 + 36);
        uint64_t v13 = a1 + v12;
        uint64_t v14 = a2 + v12;
        uint64_t v15 = type metadata accessor for UnknownStorage();
        uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 32);
        v16(v13, v14, v15);
        uint64_t v69 = v11;
        uint64_t v17 = *(int *)(v11 + 40);
        uint64_t v18 = (_OWORD *)(a1 + v17);
        uint64_t v19 = (_OWORD *)(a2 + v17);
        uint64_t v20 = type metadata accessor for AspireHeEncryptionParameters(0);
        uint64_t v21 = *(void *)(v20 - 8);
        uint64_t v67 = v15;
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
        {
          uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
          memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
        }
        else
        {
          *uint64_t v18 = *v19;
          uint64_t v38 = *((void *)v19 + 3);
          *((void *)v18 + 2) = *((void *)v19 + 2);
          *((void *)v18 + 3) = v38;
          *((unsigned char *)v18 + 32) = *((unsigned char *)v19 + 32);
          *((void *)v18 + 5) = *((void *)v19 + 5);
          *((unsigned char *)v18 + 48) = *((unsigned char *)v19 + 48);
          *((void *)v18 + 7) = *((void *)v19 + 7);
          *((unsigned char *)v18 + 64) = *((unsigned char *)v19 + 64);
          v16((uint64_t)v18 + *(int *)(v20 + 40), (uint64_t)v19 + *(int *)(v20 + 40), v15);
          (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
        }
        uint64_t v39 = *(int *)(v69 + 44);
        uint64_t v40 = (char *)(a1 + v39);
        uint64_t v41 = (char *)(a2 + v39);
        uint64_t v42 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
        uint64_t v43 = *(void *)(v42 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
        {
          uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
          memcpy(v40, v41, *(void *)(*(void *)(v44 - 8) + 64));
        }
        else
        {
          uint64_t v71 = v43;
          uint64_t v47 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
          uint64_t v48 = *(void *)(v47 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v41, 1, v47))
          {
            uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
            memcpy(v40, v41, *(void *)(*(void *)(v49 - 8) + 64));
          }
          else
          {
            swift_getEnumCaseMultiPayload();
            v16((uint64_t)v40, (uint64_t)v41, v67);
            swift_storeEnumTagMultiPayload();
            (*(void (**)(char *, void, uint64_t, uint64_t))(v48 + 56))(v40, 0, 1, v47);
          }
          v16((uint64_t)&v40[*(int *)(v42 + 20)], (uint64_t)&v41[*(int *)(v42 + 20)], v67);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v71 + 56))(v40, 0, 1, v42);
        }
        uint64_t v7 = v72;
      }
      else
      {
        uint64_t v36 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 32))(a1, a2, v36);
        uint64_t v37 = type metadata accessor for AspireApiPIRConfig(0);
        *(void *)(a1 + *(int *)(v37 + 20)) = *(void *)(a2 + *(int *)(v37 + 20));
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_27;
    }
LABEL_8:
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
    memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v23 - 8) + 64));
    goto LABEL_27;
  }
  if (v10)
  {
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0(a1, type metadata accessor for AspireApiConfig.OneOf_Config);
    goto LABEL_8;
  }
  if (a1 != a2)
  {
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0(a1, type metadata accessor for AspireApiConfig.OneOf_Config);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *(void *)a1 = *(void *)a2;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      uint64_t v24 = type metadata accessor for AspireApiPECConfig(0);
      uint64_t v25 = *(int *)(v24 + 36);
      uint64_t v26 = a1 + v25;
      uint64_t v27 = a2 + v25;
      uint64_t v28 = type metadata accessor for UnknownStorage();
      uint64_t v29 = (void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 32);
      uint64_t v70 = *v29;
      (*v29)(v26, v27, v28);
      uint64_t v73 = v24;
      uint64_t v30 = *(int *)(v24 + 40);
      uint64_t v31 = (_OWORD *)(a1 + v30);
      uint64_t v32 = (_OWORD *)(a2 + v30);
      uint64_t v33 = type metadata accessor for AspireHeEncryptionParameters(0);
      uint64_t v34 = *(void *)(v33 - 8);
      uint64_t v68 = v28;
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
      {
        uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
        memcpy(v31, v32, *(void *)(*(void *)(v35 - 8) + 64));
      }
      else
      {
        *uint64_t v31 = *v32;
        uint64_t v50 = *((void *)v32 + 3);
        *((void *)v31 + 2) = *((void *)v32 + 2);
        *((void *)v31 + 3) = v50;
        *((unsigned char *)v31 + 32) = *((unsigned char *)v32 + 32);
        *((void *)v31 + 5) = *((void *)v32 + 5);
        *((unsigned char *)v31 + 48) = *((unsigned char *)v32 + 48);
        *((void *)v31 + 7) = *((void *)v32 + 7);
        *((unsigned char *)v31 + 64) = *((unsigned char *)v32 + 64);
        v70((uint64_t)v31 + *(int *)(v33 + 40), (uint64_t)v32 + *(int *)(v33 + 40), v28);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
      }
      uint64_t v51 = *(int *)(v73 + 44);
      uint64_t v52 = (char *)(a1 + v51);
      uint64_t v53 = (char *)(a2 + v51);
      uint64_t v54 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
      uint64_t v55 = *(void *)(v54 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v53, 1, v54))
      {
        uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
        memcpy(v52, v53, *(void *)(*(void *)(v56 - 8) + 64));
      }
      else
      {
        uint64_t v65 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
        uint64_t v74 = *(void *)(v65 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v74 + 48))(v53, 1, v65))
        {
          uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
          memcpy(v52, v53, *(void *)(*(void *)(v66 - 8) + 64));
        }
        else
        {
          swift_getEnumCaseMultiPayload();
          v70((uint64_t)v52, (uint64_t)v53, v68);
          swift_storeEnumTagMultiPayload();
          (*(void (**)(char *, void, uint64_t, uint64_t))(v74 + 56))(v52, 0, 1, v65);
        }
        v70((uint64_t)&v52[*(int *)(v54 + 20)], (uint64_t)&v53[*(int *)(v54 + 20)], v68);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v55 + 56))(v52, 0, 1, v54);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      uint64_t v45 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 32))(a1, a2, v45);
      uint64_t v46 = type metadata accessor for AspireApiPIRConfig(0);
      *(void *)(a1 + *(int *)(v46 + 20)) = *(void *)(a2 + *(int *)(v46 + 20));
      swift_storeEnumTagMultiPayload();
    }
  }
LABEL_27:
  uint64_t v57 = a3[5];
  uint64_t v58 = *(void *)(a1 + v57);
  unint64_t v59 = *(void *)(a1 + v57 + 8);
  *(_OWORD *)(a1 + v57) = *(_OWORD *)(a2 + v57);
  outlined consume of Data._Representation(v58, v59);
  uint64_t v60 = a3[7];
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  uint64_t v61 = a1 + v60;
  uint64_t v62 = a2 + v60;
  uint64_t v63 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v63 - 8) + 40))(v61, v62, v63);
  return a1;
}

uint64_t getEnumTagSinglePayload for AspireApiConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_249DB7848);
}

uint64_t sub_249DB7848(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else if (a2 == 254)
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24));
    if (v10 >= 2) {
      return ((v10 + 2147483646) & 0x7FFFFFFF) + 1;
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a3 + 28);
    return v12(v14, a2, v13);
  }
}

uint64_t storeEnumTagSinglePayload for AspireApiConfig(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_249DB7998);
}

uint64_t sub_249DB7998(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else if (a3 == 254)
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 24)) = a2 + 1;
  }
  else
  {
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a4 + 28);
    return v12(v14, a2, a2, v13);
  }
  return result;
}

void type metadata completion function for AspireApiConfig()
{
  type metadata accessor for AspireHeEvaluationKeyConfig?(319, &lazy cache variable for type metadata for AspireApiConfig.OneOf_Config?, (void (*)(uint64_t))type metadata accessor for AspireApiConfig.OneOf_Config);
  if (v0 <= 0x3F)
  {
    type metadata accessor for UnknownStorage();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t initializeBufferWithCopyOfBuffer for AspireApiConfig.OneOf_Config(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *(void *)a1 = *a2;
    a1 = v20 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *(void *)a1 = *a2;
      *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
      *(void *)(a1 + 16) = a2[2];
      *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
      uint64_t v6 = a2[4];
      unint64_t v7 = a2[5];
      outlined copy of Data._Representation(v6, v7);
      *(void *)(a1 + 32) = v6;
      *(void *)(a1 + 40) = v7;
      *(void *)(a1 + 48) = a2[6];
      uint64_t v8 = (int *)type metadata accessor for AspireApiPECConfig(0);
      uint64_t v9 = v8[9];
      uint64_t v10 = a1 + v9;
      uint64_t v11 = (uint64_t)a2 + v9;
      uint64_t v12 = type metadata accessor for UnknownStorage();
      uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16);
      swift_bridgeObjectRetain();
      uint64_t v38 = v12;
      v13(v10, v11, v12);
      uint64_t v14 = v8[10];
      uint64_t v15 = (_OWORD *)(a1 + v14);
      uint64_t v16 = (_OWORD *)((char *)a2 + v14);
      uint64_t v17 = type metadata accessor for AspireHeEncryptionParameters(0);
      uint64_t v18 = *(void *)(v17 - 8);
      uint64_t v37 = (void (*)(char *, char *, uint64_t))v13;
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
      {
        uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
        memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
      }
      else
      {
        *uint64_t v15 = *v16;
        uint64_t v23 = *((void *)v16 + 3);
        *((void *)v15 + 2) = *((void *)v16 + 2);
        *((void *)v15 + 3) = v23;
        *((unsigned char *)v15 + 32) = *((unsigned char *)v16 + 32);
        *((void *)v15 + 5) = *((void *)v16 + 5);
        *((unsigned char *)v15 + 48) = *((unsigned char *)v16 + 48);
        *((void *)v15 + 7) = *((void *)v16 + 7);
        *((unsigned char *)v15 + 64) = *((unsigned char *)v16 + 64);
        uint64_t v24 = *(int *)(v17 + 40);
        uint64_t v36 = (char *)v15 + v24;
        uint64_t v25 = (char *)v16 + v24;
        swift_bridgeObjectRetain();
        v13((uint64_t)v36, (uint64_t)v25, v38);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      }
      uint64_t v26 = v8[11];
      uint64_t v27 = (char *)(a1 + v26);
      uint64_t v28 = (char *)a2 + v26;
      uint64_t v29 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
      uint64_t v30 = *(void *)(v29 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
      {
        uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
        memcpy(v27, v28, *(void *)(*(void *)(v31 - 8) + 64));
      }
      else
      {
        uint64_t v32 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
        uint64_t v33 = *(void *)(v32 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v28, 1, v32))
        {
          uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
          memcpy(v27, v28, *(void *)(*(void *)(v34 - 8) + 64));
        }
        else
        {
          swift_getEnumCaseMultiPayload();
          v37(v27, v28, v38);
          swift_storeEnumTagMultiPayload();
          (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(v27, 0, 1, v32);
        }
        v37(&v27[*(int *)(v29 + 20)], &v28[*(int *)(v29 + 20)], v38);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
      }
    }
    else
    {
      uint64_t v21 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v21 - 8) + 16))(a1, a2, v21);
      uint64_t v22 = type metadata accessor for AspireApiPIRConfig(0);
      *(void *)(a1 + *(int *)(v22 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v22 + 20));
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for AspireApiConfig.OneOf_Config(uint64_t a1)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined consume of Data._Representation(*(void *)(a1 + 32), *(void *)(a1 + 40));
    swift_bridgeObjectRelease();
    unint64_t v2 = (int *)type metadata accessor for AspireApiPECConfig(0);
    uint64_t v3 = a1 + v2[9];
    uint64_t v4 = type metadata accessor for UnknownStorage();
    uint64_t v13 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
    v13(v3, v4);
    uint64_t v5 = a1 + v2[10];
    uint64_t v6 = type metadata accessor for AspireHeEncryptionParameters(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6))
    {
      swift_bridgeObjectRelease();
      v13(v5 + *(int *)(v6 + 40), v4);
    }
    uint64_t v7 = a1 + v2[11];
    uint64_t v8 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v7, 1, v8);
    if (!result)
    {
      uint64_t v11 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v7, 1, v11)
        && swift_getEnumCaseMultiPayload() <= 2)
      {
        v13(v7, v4);
      }
      uint64_t v12 = v7 + *(int *)(v8 + 20);
      return ((uint64_t (*)(uint64_t, uint64_t))v13)(v12, v4);
    }
  }
  else
  {
    uint64_t v10 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(a1, v10);
    type metadata accessor for AspireApiPIRConfig(0);
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for AspireApiConfig.OneOf_Config(uint64_t a1, uint64_t a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *(void *)a1 = *(void *)a2;
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
    uint64_t v4 = *(void *)(a2 + 32);
    unint64_t v5 = *(void *)(a2 + 40);
    outlined copy of Data._Representation(v4, v5);
    *(void *)(a1 + 32) = v4;
    *(void *)(a1 + 40) = v5;
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    uint64_t v6 = (int *)type metadata accessor for AspireApiPECConfig(0);
    uint64_t v7 = v6[9];
    uint64_t v8 = a1 + v7;
    uint64_t v9 = a2 + v7;
    uint64_t v10 = type metadata accessor for UnknownStorage();
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    v11(v8, v9, v10);
    uint64_t v12 = v6[10];
    uint64_t v13 = (_OWORD *)(a1 + v12);
    uint64_t v14 = (_OWORD *)(a2 + v12);
    uint64_t v15 = type metadata accessor for AspireHeEncryptionParameters(0);
    uint64_t v16 = *(void *)(v15 - 8);
    uint64_t v36 = (void (*)(char *, char *, uint64_t))v11;
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      _OWORD *v13 = *v14;
      uint64_t v20 = *((void *)v14 + 3);
      *((void *)v13 + 2) = *((void *)v14 + 2);
      *((void *)v13 + 3) = v20;
      *((unsigned char *)v13 + 32) = *((unsigned char *)v14 + 32);
      *((void *)v13 + 5) = *((void *)v14 + 5);
      *((unsigned char *)v13 + 48) = *((unsigned char *)v14 + 48);
      *((void *)v13 + 7) = *((void *)v14 + 7);
      *((unsigned char *)v13 + 64) = *((unsigned char *)v14 + 64);
      uint64_t v21 = *(int *)(v15 + 40);
      uint64_t v35 = v10;
      uint64_t v22 = (char *)v13 + v21;
      uint64_t v23 = (char *)v14 + v21;
      swift_bridgeObjectRetain();
      uint64_t v24 = v22;
      uint64_t v10 = v35;
      v11((uint64_t)v24, (uint64_t)v23, v35);
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
    uint64_t v25 = v6[11];
    uint64_t v26 = (char *)(a1 + v25);
    uint64_t v27 = (char *)(a2 + v25);
    uint64_t v28 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
    uint64_t v29 = *(void *)(v28 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
    {
      uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
      memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64));
    }
    else
    {
      uint64_t v31 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
      uint64_t v32 = *(void *)(v31 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v27, 1, v31))
      {
        uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
        memcpy(v26, v27, *(void *)(*(void *)(v33 - 8) + 64));
      }
      else
      {
        swift_getEnumCaseMultiPayload();
        v36(v26, v27, v10);
        swift_storeEnumTagMultiPayload();
        (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(v26, 0, 1, v31);
      }
      v36(&v26[*(int *)(v28 + 20)], &v27[*(int *)(v28 + 20)], v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
    }
  }
  else
  {
    uint64_t v18 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16))(a1, a2, v18);
    uint64_t v19 = type metadata accessor for AspireApiPIRConfig(0);
    *(void *)(a1 + *(int *)(v19 + 20)) = *(void *)(a2 + *(int *)(v19 + 20));
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for AspireApiConfig.OneOf_Config(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0(a1, type metadata accessor for AspireApiConfig.OneOf_Config);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *(void *)a1 = *(void *)a2;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
      uint64_t v4 = *(void *)(a2 + 16);
      *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
      *(void *)(a1 + 16) = v4;
      uint64_t v5 = *(void *)(a2 + 32);
      unint64_t v6 = *(void *)(a2 + 40);
      outlined copy of Data._Representation(v5, v6);
      *(void *)(a1 + 32) = v5;
      *(void *)(a1 + 40) = v6;
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      uint64_t v7 = (int *)type metadata accessor for AspireApiPECConfig(0);
      uint64_t v8 = v7[9];
      uint64_t v9 = a1 + v8;
      uint64_t v10 = a2 + v8;
      uint64_t v11 = type metadata accessor for UnknownStorage();
      uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
      swift_bridgeObjectRetain();
      v12(v9, v10, v11);
      uint64_t v13 = v7[10];
      uint64_t v14 = (void *)(a1 + v13);
      uint64_t v15 = (void *)(a2 + v13);
      uint64_t v16 = type metadata accessor for AspireHeEncryptionParameters(0);
      uint64_t v17 = *(void *)(v16 - 8);
      uint64_t v39 = (void (*)(char *, char *, uint64_t))v12;
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
      {
        uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
        memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
      }
      else
      {
        *uint64_t v14 = *v15;
        v14[1] = v15[1];
        v14[2] = v15[2];
        uint64_t v21 = v15[3];
        *((unsigned char *)v14 + 32) = *((unsigned char *)v15 + 32);
        v14[3] = v21;
        uint64_t v22 = v15[5];
        *((unsigned char *)v14 + 48) = *((unsigned char *)v15 + 48);
        v14[5] = v22;
        uint64_t v23 = v15[7];
        *((unsigned char *)v14 + 64) = *((unsigned char *)v15 + 64);
        v14[7] = v23;
        uint64_t v24 = *(int *)(v16 + 40);
        uint64_t v38 = v11;
        uint64_t v25 = (char *)v14 + v24;
        uint64_t v26 = (char *)v15 + v24;
        swift_bridgeObjectRetain();
        uint64_t v27 = v25;
        uint64_t v11 = v38;
        v12((uint64_t)v27, (uint64_t)v26, v38);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
      }
      uint64_t v28 = v7[11];
      uint64_t v29 = (char *)(a1 + v28);
      uint64_t v30 = (char *)(a2 + v28);
      uint64_t v31 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
      uint64_t v32 = *(void *)(v31 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
      {
        uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
        memcpy(v29, v30, *(void *)(*(void *)(v33 - 8) + 64));
      }
      else
      {
        uint64_t v34 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
        uint64_t v35 = *(void *)(v34 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v30, 1, v34))
        {
          uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
          memcpy(v29, v30, *(void *)(*(void *)(v36 - 8) + 64));
        }
        else
        {
          swift_getEnumCaseMultiPayload();
          v39(v29, v30, v11);
          swift_storeEnumTagMultiPayload();
          (*(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(v29, 0, 1, v34);
        }
        v39(&v29[*(int *)(v31 + 20)], &v30[*(int *)(v31 + 20)], v11);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
      }
    }
    else
    {
      uint64_t v19 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16))(a1, a2, v19);
      uint64_t v20 = type metadata accessor for AspireApiPIRConfig(0);
      *(void *)(a1 + *(int *)(v20 + 20)) = *(void *)(a2 + *(int *)(v20 + 20));
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t initializeWithTake for AspireApiConfig.OneOf_Config(uint64_t a1, uint64_t a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *(void *)a1 = *(void *)a2;
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    uint64_t v4 = (int *)type metadata accessor for AspireApiPECConfig(0);
    uint64_t v5 = v4[9];
    uint64_t v6 = a1 + v5;
    uint64_t v7 = a2 + v5;
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32);
    v9(v6, v7, v8);
    uint64_t v10 = v4[10];
    uint64_t v11 = (_OWORD *)(a1 + v10);
    uint64_t v12 = (_OWORD *)(a2 + v10);
    uint64_t v13 = type metadata accessor for AspireHeEncryptionParameters(0);
    uint64_t v14 = *(void *)(v13 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
    {
      uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      *uint64_t v11 = *v12;
      uint64_t v18 = *((void *)v12 + 3);
      *((void *)v11 + 2) = *((void *)v12 + 2);
      *((void *)v11 + 3) = v18;
      *((unsigned char *)v11 + 32) = *((unsigned char *)v12 + 32);
      *((void *)v11 + 5) = *((void *)v12 + 5);
      *((unsigned char *)v11 + 48) = *((unsigned char *)v12 + 48);
      *((void *)v11 + 7) = *((void *)v12 + 7);
      *((unsigned char *)v11 + 64) = *((unsigned char *)v12 + 64);
      v9((uint64_t)v11 + *(int *)(v13 + 40), (uint64_t)v12 + *(int *)(v13 + 40), v8);
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
    }
    uint64_t v19 = v4[11];
    uint64_t v20 = (char *)(a1 + v19);
    uint64_t v21 = (char *)(a2 + v19);
    uint64_t v22 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
    uint64_t v23 = *(void *)(v22 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
    {
      uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
      memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
    }
    else
    {
      uint64_t v25 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
      uint64_t v26 = *(void *)(v25 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v21, 1, v25))
      {
        uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
        memcpy(v20, v21, *(void *)(*(void *)(v27 - 8) + 64));
      }
      else
      {
        swift_getEnumCaseMultiPayload();
        v9((uint64_t)v20, (uint64_t)v21, v8);
        swift_storeEnumTagMultiPayload();
        (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v20, 0, 1, v25);
      }
      v9((uint64_t)&v20[*(int *)(v22 + 20)], (uint64_t)&v21[*(int *)(v22 + 20)], v8);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
    }
  }
  else
  {
    uint64_t v16 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 32))(a1, a2, v16);
    uint64_t v17 = type metadata accessor for AspireApiPIRConfig(0);
    *(void *)(a1 + *(int *)(v17 + 20)) = *(void *)(a2 + *(int *)(v17 + 20));
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithTake for AspireApiConfig.OneOf_Config(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0(a1, type metadata accessor for AspireApiConfig.OneOf_Config);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *(void *)a1 = *(void *)a2;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      uint64_t v4 = (int *)type metadata accessor for AspireApiPECConfig(0);
      uint64_t v5 = v4[9];
      uint64_t v6 = a1 + v5;
      uint64_t v7 = a2 + v5;
      uint64_t v8 = type metadata accessor for UnknownStorage();
      uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32);
      v9(v6, v7, v8);
      uint64_t v10 = v4[10];
      uint64_t v11 = (_OWORD *)(a1 + v10);
      uint64_t v12 = (_OWORD *)(a2 + v10);
      uint64_t v13 = type metadata accessor for AspireHeEncryptionParameters(0);
      uint64_t v14 = *(void *)(v13 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
      {
        uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
        memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
      }
      else
      {
        *uint64_t v11 = *v12;
        uint64_t v18 = *((void *)v12 + 3);
        *((void *)v11 + 2) = *((void *)v12 + 2);
        *((void *)v11 + 3) = v18;
        *((unsigned char *)v11 + 32) = *((unsigned char *)v12 + 32);
        *((void *)v11 + 5) = *((void *)v12 + 5);
        *((unsigned char *)v11 + 48) = *((unsigned char *)v12 + 48);
        *((void *)v11 + 7) = *((void *)v12 + 7);
        *((unsigned char *)v11 + 64) = *((unsigned char *)v12 + 64);
        v9((uint64_t)v11 + *(int *)(v13 + 40), (uint64_t)v12 + *(int *)(v13 + 40), v8);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      }
      uint64_t v19 = v4[11];
      uint64_t v20 = (char *)(a1 + v19);
      uint64_t v21 = (char *)(a2 + v19);
      uint64_t v22 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
      uint64_t v23 = *(void *)(v22 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
      {
        uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
        memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
      }
      else
      {
        uint64_t v25 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
        uint64_t v26 = *(void *)(v25 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v21, 1, v25))
        {
          uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
          memcpy(v20, v21, *(void *)(*(void *)(v27 - 8) + 64));
        }
        else
        {
          swift_getEnumCaseMultiPayload();
          v9((uint64_t)v20, (uint64_t)v21, v8);
          swift_storeEnumTagMultiPayload();
          (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v20, 0, 1, v25);
        }
        v9((uint64_t)&v20[*(int *)(v22 + 20)], (uint64_t)&v21[*(int *)(v22 + 20)], v8);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
      }
    }
    else
    {
      uint64_t v16 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 32))(a1, a2, v16);
      uint64_t v17 = type metadata accessor for AspireApiPIRConfig(0);
      *(void *)(a1 + *(int *)(v17 + 20)) = *(void *)(a2 + *(int *)(v17 + 20));
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata completion function for AspireApiConfig.OneOf_Config()
{
  uint64_t result = type metadata accessor for AspireApiPIRConfig(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for AspireApiPECConfig(319);
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AspireApiConfigResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_249DB95E8);
}

uint64_t __swift_get_extra_inhabitant_index_80Tm(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for AspireApiConfigResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_249DB96B0);
}

void *__swift_store_extra_inhabitant_index_81Tm(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 24);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AspireApiRequests(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_56Tm_4);
}

uint64_t storeEnumTagSinglePayload for AspireApiRequests(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_57Tm_4);
}

uint64_t getEnumTagSinglePayload for AspireApiResponses(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_56Tm_5);
}

uint64_t storeEnumTagSinglePayload for AspireApiResponses(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_57Tm_5);
}

void *initializeBufferWithCopyOfBuffer for AspireApiRequest(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) == 0)
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (void *)((char *)a1 + v8);
    uint64_t v10 = (void *)((char *)a2 + v8);
    uint64_t v11 = type metadata accessor for AspireApiRequest.OneOf_Request(0);
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v11))
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
      memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
LABEL_62:
      uint64_t v170 = *(int *)(a3 + 24);
      v171 = (char *)v4 + v170;
      v172 = (char *)a2 + v170;
      uint64_t v173 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v173 - 8) + 16))(v171, v172, v173);
      return v4;
    }
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v32 = *v10;
      unint64_t v33 = v10[1];
      outlined copy of Data._Representation(*v10, v33);
      *uint64_t v9 = v32;
      v9[1] = v33;
      uint64_t v34 = v10[2];
      unint64_t v35 = v10[3];
      outlined copy of Data._Representation(v34, v35);
      v9[2] = v34;
      v9[3] = v35;
      uint64_t v36 = *(int *)(type metadata accessor for AspireApiOPRFRequest(0) + 24);
      uint64_t v37 = (char *)v9 + v36;
      uint64_t v38 = (char *)v10 + v36;
      uint64_t v39 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v39 - 8) + 16))(v37, v38, v39);
LABEL_61:
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      goto LABEL_62;
    }
    v218 = v9;
    uint64_t v216 = v12;
    uint64_t v217 = v11;
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v17 = v10[1];
      *uint64_t v9 = *v10;
      v9[1] = v17;
      uint64_t v18 = v10[2];
      unint64_t v19 = v10[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v18, v19);
      v9[2] = v18;
      v9[3] = v19;
      uint64_t v20 = type metadata accessor for AspireApiPECRequest(0);
      uint64_t v21 = *(int *)(v20 + 28);
      uint64_t v22 = (char *)v9 + v21;
      uint64_t v23 = (char *)v10 + v21;
      uint64_t v24 = type metadata accessor for UnknownStorage();
      uint64_t v25 = *(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 16);
      v25(v22, v23, v24);
      uint64_t v211 = v20;
      uint64_t v26 = *(int *)(v20 + 32);
      uint64_t v27 = (uint64_t *)((char *)v9 + v26);
      uint64_t v28 = (uint64_t *)((char *)v10 + v26);
      uint64_t v29 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
      v191 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v29 - 8) + 48);
      v208 = v25;
      uint64_t v209 = v24;
      __dst = *(void **)(v29 - 8);
      if (v191((char *)v28, 1, v29))
      {
        uint64_t v30 = v29;
        uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
        memcpy(v27, v28, *(void *)(*(void *)(v31 - 8) + 64));
      }
      else
      {
        uint64_t v53 = v28[1];
        *uint64_t v27 = *v28;
        uint64_t v188 = v29;
        unint64_t v54 = v28[2];
        outlined copy of Data._Representation(v53, v54);
        v27[1] = v53;
        v27[2] = v54;
        v25((char *)v27 + *(int *)(v188 + 24), (char *)v28 + *(int *)(v188 + 24), v24);
        uint64_t v30 = v188;
        (*((void (**)(void *, void, uint64_t, uint64_t))__dst + 7))(v27, 0, 1, v188);
      }
      uint64_t v55 = *(int *)(v211 + 36);
      uint64_t v9 = v218;
      uint64_t v56 = (char *)v218 + v55;
      uint64_t v57 = (char *)v10 + v55;
      uint64_t v58 = type metadata accessor for AspireApiEvaluationKey(0);
      uint64_t v59 = *(void *)(v58 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v59 + 48))(v57, 1, v58))
      {
        uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKey?);
        memcpy(v56, v57, *(void *)(*(void *)(v60 - 8) + 64));
LABEL_23:
        uint64_t v12 = v216;
        uint64_t v11 = v217;
        goto LABEL_61;
      }
      uint64_t v189 = v59;
      v208(v56, v57, v209);
      uint64_t v213 = v58;
      uint64_t v69 = *(int *)(v58 + 20);
      uint64_t v70 = &v56[v69];
      uint64_t v71 = &v57[v69];
      if (v191(&v57[v69], 1, v30))
      {
        uint64_t v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
        memcpy(v70, v71, *(void *)(*(void *)(v72 - 8) + 64));
      }
      else
      {
        v196 = v56;
        uint64_t v90 = *((void *)v71 + 1);
        *(void *)uint64_t v70 = *(void *)v71;
        unint64_t v91 = *((void *)v71 + 2);
        outlined copy of Data._Representation(v90, v91);
        *((void *)v70 + 1) = v90;
        *((void *)v70 + 2) = v91;
        uint64_t v56 = v196;
        v208(&v70[*(int *)(v30 + 24)], &v71[*(int *)(v30 + 24)], v209);
        (*((void (**)(char *, void, uint64_t, uint64_t))__dst + 7))(v70, 0, 1, v30);
      }
      uint64_t v92 = *(int *)(v213 + 24);
      uint64_t v93 = &v56[v92];
      uint64_t v94 = &v57[v92];
      uint64_t v95 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
      uint64_t v96 = *(void *)(v95 - 8);
      uint64_t v9 = v218;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v96 + 48))(v94, 1, v95))
      {
        uint64_t v97 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
        memcpy(v93, v94, *(void *)(*(void *)(v97 - 8) + 64));
        uint64_t v98 = v189;
        uint64_t v99 = v213;
      }
      else
      {
        uint64_t v187 = v96;
        v198 = v56;
        v208(v93, v94, v209);
        uint64_t v193 = v95;
        uint64_t v109 = *(int *)(v95 + 20);
        __dstb = v93;
        int v110 = &v93[v109];
        int v111 = &v94[v109];
        uint64_t v112 = type metadata accessor for AspireHeSerializedGaloisKey(0);
        uint64_t v113 = *(void *)(v112 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v113 + 48))(v111, 1, v112))
        {
          uint64_t v114 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
          memcpy(v110, v111, *(void *)(*(void *)(v114 - 8) + 64));
        }
        else
        {
          *(void *)int v110 = *(void *)v111;
          uint64_t v120 = *(int *)(v112 + 20);
          v121 = &v110[v120];
          v122 = &v111[v120];
          swift_bridgeObjectRetain();
          v208(v121, v122, v209);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v113 + 56))(v110, 0, 1, v112);
        }
        uint64_t v123 = v193;
        uint64_t v124 = *(int *)(v193 + 24);
        v125 = &__dstb[v124];
        v126 = &v94[v124];
        uint64_t v127 = type metadata accessor for AspireHeSerializedRelinKey(0);
        uint64_t v128 = *(void *)(v127 - 8);
        uint64_t v9 = v218;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v128 + 48))(v126, 1, v127))
        {
          uint64_t v129 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
          memcpy(v125, v126, *(void *)(*(void *)(v129 - 8) + 64));
          uint64_t v98 = v189;
          uint64_t v99 = v213;
          uint64_t v130 = __dstb;
        }
        else
        {
          uint64_t v180 = v128;
          v208(v125, v126, v209);
          uint64_t v182 = v127;
          v184 = v125;
          uint64_t v141 = *(int *)(v127 + 20);
          v142 = &v125[v141];
          v143 = &v126[v141];
          uint64_t v144 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
          uint64_t v145 = *(void *)(v144 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v145 + 48))(v143, 1, v144))
          {
            uint64_t v146 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
            memcpy(v142, v143, *(void *)(*(void *)(v146 - 8) + 64));
            uint64_t v9 = v218;
            uint64_t v99 = v213;
            uint64_t v130 = __dstb;
            uint64_t v147 = v182;
          }
          else
          {
            uint64_t v176 = v145;
            v208(v142, v143, v209);
            uint64_t v155 = *(int *)(v144 + 20);
            v178 = v142;
            v156 = &v142[v155];
            v157 = &v143[v155];
            uint64_t v158 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
            uint64_t v159 = *(void *)(v158 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v159 + 48))(v157, 1, v158))
            {
              uint64_t v160 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
              memcpy(v156, v157, *(void *)(*(void *)(v160 - 8) + 64));
            }
            else
            {
              *(void *)v156 = *(void *)v157;
              uint64_t v166 = *(int *)(v158 + 20);
              v175 = &v156[v166];
              v167 = &v157[v166];
              swift_bridgeObjectRetain();
              v208(v175, v167, v209);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v159 + 56))(v156, 0, 1, v158);
            }
            uint64_t v99 = v213;
            uint64_t v130 = __dstb;
            uint64_t v147 = v182;
            (*(void (**)(char *, void, uint64_t, uint64_t))(v176 + 56))(v178, 0, 1, v144);
            uint64_t v9 = v218;
            uint64_t v123 = v193;
          }
          (*(void (**)(char *, void, uint64_t, uint64_t))(v180 + 56))(v184, 0, 1, v147);
          uint64_t v98 = v189;
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v187 + 56))(v130, 0, 1, v123);
        uint64_t v56 = v198;
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v98 + 56))(v56, 0, 1, v99);
    }
    else
    {
      *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
      uint64_t v40 = v10[1];
      unint64_t v41 = v10[2];
      outlined copy of Data._Representation(v40, v41);
      v9[1] = v40;
      v9[2] = v41;
      uint64_t v42 = type metadata accessor for AspireApiPIRRequest(0);
      uint64_t v43 = *(int *)(v42 + 24);
      uint64_t v44 = (char *)v9 + v43;
      uint64_t v45 = (char *)v10 + v43;
      uint64_t v215 = type metadata accessor for UnknownStorage();
      uint64_t v46 = *(void (**)(char *, char *, uint64_t))(*(void *)(v215 - 8) + 16);
      v46(v44, v45, v215);
      v212 = (int *)v42;
      uint64_t v47 = *(int *)(v42 + 28);
      uint64_t v48 = (uint64_t *)((char *)v9 + v47);
      uint64_t v49 = (uint64_t *)((char *)v10 + v47);
      uint64_t v50 = type metadata accessor for AspirePirEncryptedIndices(0);
      uint64_t v51 = *(void *)(v50 - 8);
      v210 = v46;
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v51 + 48))(v49, 1, v50))
      {
        uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
        memcpy(v48, v49, *(void *)(*(void *)(v52 - 8) + 64));
      }
      else
      {
        uint64_t v61 = v49[1];
        *uint64_t v48 = *v49;
        v48[1] = v61;
        uint64_t v62 = *(int *)(v50 + 24);
        v205 = (char *)v48 + v62;
        uint64_t v63 = (char *)v49 + v62;
        swift_bridgeObjectRetain();
        v46(v205, v63, v215);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v51 + 56))(v48, 0, 1, v50);
      }
      uint64_t v64 = v212[8];
      uint64_t v65 = (uint64_t *)((char *)v218 + v64);
      uint64_t v66 = (uint64_t *)((char *)v10 + v64);
      uint64_t v67 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
      v195 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v67 - 8) + 48);
      __dsta = (int *)v67;
      uint64_t v206 = *(void *)(v67 - 8);
      if (v195((char *)v66, 1, v67))
      {
        uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
        memcpy(v65, v66, *(void *)(*(void *)(v68 - 8) + 64));
      }
      else
      {
        uint64_t v73 = v66[1];
        *uint64_t v65 = *v66;
        unint64_t v74 = v66[2];
        outlined copy of Data._Representation(v73, v74);
        v65[1] = v73;
        v65[2] = v74;
        v210((char *)v65 + *(int *)(v67 + 24), (char *)v66 + *(int *)(v67 + 24), v215);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v206 + 56))(v65, 0, 1, v67);
      }
      uint64_t v75 = v212[9];
      unint64_t v76 = (uint64_t *)((char *)v218 + v75);
      uint64_t v77 = (uint64_t *)((char *)v10 + v75);
      uint64_t v78 = v77[1];
      void *v76 = *v77;
      v76[1] = v78;
      uint64_t v79 = v212[10];
      uint64_t v80 = (char *)v218 + v79;
      uint64_t v81 = (char *)v10 + v79;
      uint64_t v82 = type metadata accessor for AspireApiEvaluationKey(0);
      uint64_t v83 = *(void *)(v82 - 8);
      uint64_t v84 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v83 + 48);
      swift_bridgeObjectRetain();
      if (v84(v81, 1, v82))
      {
        uint64_t v85 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKey?);
        memcpy(v80, v81, *(void *)(*(void *)(v85 - 8) + 64));
        uint64_t v9 = v218;
        goto LABEL_23;
      }
      uint64_t v186 = v83;
      v210(v80, v81, v215);
      uint64_t v214 = v82;
      uint64_t v86 = *(int *)(v82 + 20);
      v190 = v80;
      uint64_t v87 = &v80[v86];
      int v88 = &v81[v86];
      if (v195(&v81[v86], 1, (uint64_t)__dsta))
      {
        uint64_t v89 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
        memcpy(v87, v88, *(void *)(*(void *)(v89 - 8) + 64));
      }
      else
      {
        uint64_t v100 = *((void *)v88 + 1);
        *(void *)uint64_t v87 = *(void *)v88;
        unint64_t v192 = *((void *)v88 + 2);
        uint64_t v197 = v100;
        outlined copy of Data._Representation(v100, v192);
        *((void *)v87 + 1) = v197;
        *((void *)v87 + 2) = v192;
        v210(&v87[__dsta[6]], &v88[__dsta[6]], v215);
        (*(void (**)(char *, void, uint64_t, int *))(v206 + 56))(v87, 0, 1, __dsta);
      }
      uint64_t v101 = *(int *)(v214 + 24);
      uint64_t v102 = v190;
      uint64_t v103 = &v190[v101];
      uint64_t v104 = &v81[v101];
      uint64_t v105 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
      uint64_t v106 = *(void *)(v105 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v106 + 48))(v104, 1, v105))
      {
        uint64_t v107 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
        memcpy(v103, v104, *(void *)(*(void *)(v107 - 8) + 64));
        uint64_t v108 = v214;
      }
      else
      {
        uint64_t v199 = v106;
        v210(v103, v104, v215);
        uint64_t v115 = *(int *)(v105 + 20);
        __dstc = &v103[v115];
        uint64_t v207 = v105;
        uint64_t v116 = &v104[v115];
        uint64_t v117 = type metadata accessor for AspireHeSerializedGaloisKey(0);
        uint64_t v118 = *(void *)(v117 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v118 + 48))(v116, 1, v117))
        {
          uint64_t v119 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
          memcpy(__dstc, v116, *(void *)(*(void *)(v119 - 8) + 64));
        }
        else
        {
          *(void *)__dstc = *(void *)v116;
          uint64_t v131 = *(int *)(v117 + 20);
          v132 = &__dstc[v131];
          v133 = &v116[v131];
          swift_bridgeObjectRetain();
          v210(v132, v133, v215);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v118 + 56))(__dstc, 0, 1, v117);
        }
        uint64_t v134 = v207;
        uint64_t v135 = *(int *)(v207 + 24);
        __dstd = v103;
        v136 = &v103[v135];
        v137 = &v104[v135];
        uint64_t v138 = type metadata accessor for AspireHeSerializedRelinKey(0);
        uint64_t v139 = *(void *)(v138 - 8);
        uint64_t v102 = v190;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v139 + 48))(v137, 1, v138))
        {
          uint64_t v140 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
          memcpy(v136, v137, *(void *)(*(void *)(v140 - 8) + 64));
          uint64_t v108 = v214;
          uint64_t v83 = v186;
        }
        else
        {
          uint64_t v183 = v139;
          v210(v136, v137, v215);
          uint64_t v185 = v138;
          uint64_t v148 = *(int *)(v138 + 20);
          v194 = v136;
          v149 = &v136[v148];
          v150 = &v137[v148];
          uint64_t v151 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
          uint64_t v152 = *(void *)(v151 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v152 + 48))(v150, 1, v151))
          {
            uint64_t v153 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
            memcpy(v149, v150, *(void *)(*(void *)(v153 - 8) + 64));
            uint64_t v83 = v186;
            uint64_t v102 = v190;
            uint64_t v108 = v214;
            uint64_t v134 = v207;
            uint64_t v154 = v185;
          }
          else
          {
            v210(v149, v150, v215);
            uint64_t v161 = *(int *)(v151 + 20);
            v181 = v149;
            v162 = &v149[v161];
            v163 = &v150[v161];
            uint64_t v164 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
            uint64_t v179 = *(void *)(v164 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v179 + 48))(v163, 1, v164))
            {
              uint64_t v165 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
              memcpy(v162, v163, *(void *)(*(void *)(v165 - 8) + 64));
            }
            else
            {
              *(void *)v162 = *(void *)v163;
              uint64_t v168 = *(int *)(v164 + 20);
              v177 = &v162[v168];
              v169 = &v163[v168];
              swift_bridgeObjectRetain();
              v210(v177, v169, v215);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v179 + 56))(v162, 0, 1, v164);
            }
            uint64_t v83 = v186;
            uint64_t v102 = v190;
            uint64_t v108 = v214;
            uint64_t v134 = v207;
            uint64_t v154 = v185;
            (*(void (**)(char *, void, uint64_t, uint64_t))(v152 + 56))(v181, 0, 1, v151);
          }
          (*(void (**)(char *, void, uint64_t, uint64_t))(v183 + 56))(v194, 0, 1, v154);
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v199 + 56))(__dstd, 0, 1, v134);
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v83 + 56))(v102, 0, 1, v108);
      uint64_t v9 = v218;
    }
    uint64_t v12 = v216;
    uint64_t v11 = v217;
    goto LABEL_61;
  }
  uint64_t v15 = *a2;
  *uint64_t v4 = *a2;
  uint64_t v4 = (void *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
  swift_retain();
  return v4;
}

uint64_t destroy for AspireApiRequest(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for AspireApiRequest.OneOf_Request(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5)) {
    goto LABEL_2;
  }
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      outlined consume of Data._Representation(*(void *)v4, *(void *)(v4 + 8));
      outlined consume of Data._Representation(*(void *)(v4 + 16), *(void *)(v4 + 24));
      uint64_t v24 = v4 + *(int *)(type metadata accessor for AspireApiOPRFRequest(0) + 24);
      uint64_t v25 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v25 - 8) + 8))(v24, v25);
      break;
    case 1:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of Data._Representation(*(void *)(v4 + 16), *(void *)(v4 + 24));
      uint64_t v26 = (int *)type metadata accessor for AspireApiPECRequest(0);
      uint64_t v27 = v4 + v26[7];
      uint64_t v13 = type metadata accessor for UnknownStorage();
      uint64_t v28 = (void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8);
      uint64_t v44 = *v28;
      (*v28)(v27, v13);
      uint64_t v29 = v4 + v26[8];
      uint64_t v30 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
      uint64_t v31 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 48);
      if (!v31(v29, 1, v30))
      {
        outlined consume of Data._Representation(*(void *)(v29 + 8), *(void *)(v29 + 16));
        v44(v29 + *(int *)(v30 + 24), v13);
      }
      uint64_t v20 = v4 + v26[9];
      uint64_t v32 = type metadata accessor for AspireApiEvaluationKey(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 48))(v20, 1, v32))
      {
        v44(v20, v13);
        uint64_t v33 = v20 + *(int *)(v32 + 20);
        if (!v31(v33, 1, v30))
        {
          outlined consume of Data._Representation(*(void *)(v33 + 8), *(void *)(v33 + 16));
          v44(v33 + *(int *)(v30 + 24), v13);
        }
        uint64_t v23 = *(int *)(v32 + 24);
        goto LABEL_23;
      }
      break;
    case 0:
      outlined consume of Data._Representation(*(void *)(v4 + 8), *(void *)(v4 + 16));
      uint64_t v11 = (int *)type metadata accessor for AspireApiPIRRequest(0);
      uint64_t v12 = v4 + v11[6];
      uint64_t v13 = type metadata accessor for UnknownStorage();
      uint64_t v14 = (void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8);
      uint64_t v44 = *v14;
      (*v14)(v12, v13);
      uint64_t v15 = v4 + v11[7];
      uint64_t v16 = type metadata accessor for AspirePirEncryptedIndices(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48))(v15, 1, v16))
      {
        swift_bridgeObjectRelease();
        v44(v15 + *(int *)(v16 + 24), v13);
      }
      uint64_t v17 = v4 + v11[8];
      uint64_t v18 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
      unint64_t v19 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 48);
      if (!v19(v17, 1, v18))
      {
        outlined consume of Data._Representation(*(void *)(v17 + 8), *(void *)(v17 + 16));
        v44(v17 + *(int *)(v18 + 24), v13);
      }
      swift_bridgeObjectRelease();
      uint64_t v20 = v4 + v11[10];
      uint64_t v21 = type metadata accessor for AspireApiEvaluationKey(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 48))(v20, 1, v21))
      {
        v44(v20, v13);
        uint64_t v22 = v20 + *(int *)(v21 + 20);
        if (!v19(v22, 1, v18))
        {
          outlined consume of Data._Representation(*(void *)(v22 + 8), *(void *)(v22 + 16));
          v44(v22 + *(int *)(v18 + 24), v13);
        }
        uint64_t v23 = *(int *)(v21 + 24);
LABEL_23:
        uint64_t v34 = v20 + v23;
        uint64_t v35 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 48))(v34, 1, v35))
        {
          v44(v34, v13);
          uint64_t v36 = v34 + *(int *)(v35 + 20);
          uint64_t v37 = type metadata accessor for AspireHeSerializedGaloisKey(0);
          if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 48))(v36, 1, v37))
          {
            swift_bridgeObjectRelease();
            v44(v36 + *(int *)(v37 + 20), v13);
          }
          uint64_t v38 = v34 + *(int *)(v35 + 24);
          uint64_t v39 = type metadata accessor for AspireHeSerializedRelinKey(0);
          if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 48))(v38, 1, v39))
          {
            v44(v38, v13);
            uint64_t v40 = v38 + *(int *)(v39 + 20);
            uint64_t v41 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
            if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 48))(v40, 1, v41))
            {
              v44(v40, v13);
              uint64_t v42 = v40 + *(int *)(v41 + 20);
              uint64_t v43 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
              if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v43 - 8) + 48))(v42, 1, v43))
              {
                swift_bridgeObjectRelease();
                v44(v42 + *(int *)(v43 + 20), v13);
              }
            }
          }
        }
      }
      break;
  }
LABEL_2:
  uint64_t v6 = a1 + *(int *)(a2 + 24);
  uint64_t v7 = type metadata accessor for UnknownStorage();
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  return v8(v6, v7);
}

void *initializeWithCopy for AspireApiRequest(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v5 = a1;
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)((char *)a1 + v7);
  uint64_t v9 = (void *)((char *)a2 + v7);
  uint64_t v10 = type metadata accessor for AspireApiRequest.OneOf_Request(0);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain();
  if (v12(v9, 1, v10))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
    memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v31 = *v9;
      unint64_t v32 = v9[1];
      outlined copy of Data._Representation(*v9, v32);
      *uint64_t v8 = v31;
      v8[1] = v32;
      uint64_t v33 = v9[2];
      unint64_t v34 = v9[3];
      outlined copy of Data._Representation(v33, v34);
      v8[2] = v33;
      v8[3] = v34;
      uint64_t v35 = *(int *)(type metadata accessor for AspireApiOPRFRequest(0) + 24);
      uint64_t v36 = (char *)v8 + v35;
      uint64_t v37 = (char *)v9 + v35;
      uint64_t v38 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v38 - 8) + 16))(v36, v37, v38);
    }
    else
    {
      uint64_t v211 = v10;
      uint64_t v212 = v11;
      uint64_t v210 = v3;
      uint64_t v213 = v8;
      if (EnumCaseMultiPayload == 1)
      {
        v208 = v5;
        uint64_t v15 = v9[1];
        *uint64_t v8 = *v9;
        v8[1] = v15;
        uint64_t v16 = v9[2];
        unint64_t v17 = v9[3];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v16, v17);
        v8[2] = v16;
        v8[3] = v17;
        uint64_t v18 = type metadata accessor for AspireApiPECRequest(0);
        uint64_t v19 = *(int *)(v18 + 28);
        uint64_t v20 = (char *)v8 + v19;
        uint64_t v21 = (char *)v9 + v19;
        uint64_t v22 = v8;
        uint64_t v23 = type metadata accessor for UnknownStorage();
        uint64_t v24 = *(void (**)(void))(*(void *)(v23 - 8) + 16);
        ((void (*)(char *, char *, uint64_t))v24)(v20, v21, v23);
        uint64_t v205 = v18;
        uint64_t v25 = *(int *)(v18 + 32);
        uint64_t v26 = (uint64_t *)((char *)v22 + v25);
        uint64_t v27 = (uint64_t *)((char *)v9 + v25);
        uint64_t v28 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
        uint64_t v29 = *(void *)(v28 - 8);
        __dst = *(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48);
        uint64_t v197 = v23;
        uint64_t v201 = v28;
        v203 = v24;
        uint64_t v185 = v29;
        if (__dst((char *)v27, 1, v28))
        {
          uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
          memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64));
        }
        else
        {
          uint64_t v54 = v27[1];
          *uint64_t v26 = *v27;
          unint64_t v55 = v27[2];
          outlined copy of Data._Representation(v54, v55);
          v26[1] = v54;
          v26[2] = v55;
          ((void (*)(char *, char *, uint64_t))v24)((char *)v26 + *(int *)(v201 + 24), (char *)v27 + *(int *)(v201 + 24), v23);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v201);
        }
        uint64_t v56 = *(int *)(v205 + 36);
        uint64_t v8 = v213;
        uint64_t v57 = (char *)v213 + v56;
        uint64_t v58 = (char *)v9 + v56;
        uint64_t v59 = type metadata accessor for AspireApiEvaluationKey(0);
        uint64_t v60 = *(void *)(v59 - 8);
        uint64_t v11 = v212;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v60 + 48))(v58, 1, v59))
        {
          uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKey?);
          memcpy(v57, v58, *(void *)(*(void *)(v61 - 8) + 64));
          uint64_t v3 = v210;
          uint64_t v10 = v211;
        }
        else
        {
          uint64_t v183 = v60;
          ((void (*)(char *, char *, uint64_t))v203)(v57, v58, v197);
          uint64_t v207 = v59;
          uint64_t v70 = *(int *)(v59 + 20);
          uint64_t v71 = &v57[v70];
          uint64_t v72 = &v58[v70];
          if (__dst(&v58[v70], 1, v201))
          {
            uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
            memcpy(v71, v72, *(void *)(*(void *)(v73 - 8) + 64));
          }
          else
          {
            uint64_t v91 = *((void *)v72 + 1);
            *(void *)uint64_t v71 = *(void *)v72;
            unint64_t v92 = *((void *)v72 + 2);
            outlined copy of Data._Representation(v91, v92);
            *((void *)v71 + 1) = v91;
            *((void *)v71 + 2) = v92;
            uint64_t v5 = v208;
            ((void (*)(char *, char *, uint64_t))v203)(&v71[*(int *)(v201 + 24)], &v72[*(int *)(v201 + 24)], v197);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v185 + 56))(v71, 0, 1, v201);
          }
          uint64_t v10 = v211;
          uint64_t v11 = v212;
          uint64_t v8 = v213;
          uint64_t v93 = *(int *)(v207 + 24);
          v202 = v57;
          uint64_t v94 = &v57[v93];
          uint64_t v95 = &v58[v93];
          uint64_t v96 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
          uint64_t v97 = *(void *)(v96 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v97 + 48))(v95, 1, v96))
          {
            uint64_t v98 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
            memcpy(v94, v95, *(void *)(*(void *)(v98 - 8) + 64));
            uint64_t v99 = v202;
          }
          else
          {
            uint64_t v195 = v97;
            ((void (*)(char *, char *, uint64_t))v203)(v94, v95, v197);
            uint64_t v110 = *(int *)(v96 + 20);
            __dstb = &v94[v110];
            int v111 = &v95[v110];
            uint64_t v112 = type metadata accessor for AspireHeSerializedGaloisKey(0);
            uint64_t v113 = *(void *)(v112 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v113 + 48))(v111, 1, v112))
            {
              uint64_t v114 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
              memcpy(__dstb, v111, *(void *)(*(void *)(v114 - 8) + 64));
            }
            else
            {
              *(void *)__dstb = *(void *)v111;
              uint64_t v121 = *(int *)(v112 + 20);
              uint64_t v186 = &__dstb[v121];
              uint64_t v180 = v96;
              v122 = v94;
              uint64_t v123 = &v111[v121];
              swift_bridgeObjectRetain();
              uint64_t v124 = v123;
              uint64_t v94 = v122;
              uint64_t v96 = v180;
              ((void (*)(char *, char *, uint64_t))v203)(v186, v124, v197);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v113 + 56))(__dstb, 0, 1, v112);
            }
            uint64_t v10 = v211;
            uint64_t v11 = v212;
            uint64_t v8 = v213;
            uint64_t v125 = v195;
            uint64_t v126 = *(int *)(v96 + 24);
            __dstd = &v94[v126];
            uint64_t v127 = &v95[v126];
            uint64_t v128 = type metadata accessor for AspireHeSerializedRelinKey(0);
            uint64_t v187 = *(void *)(v128 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v187 + 48))(v127, 1, v128))
            {
              uint64_t v129 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
              memcpy(__dstd, v127, *(void *)(*(void *)(v129 - 8) + 64));
              uint64_t v60 = v183;
            }
            else
            {
              v178 = v94;
              v203();
              uint64_t v176 = v128;
              uint64_t v139 = *(int *)(v128 + 20);
              uint64_t v140 = &__dstd[v139];
              uint64_t v141 = &v127[v139];
              uint64_t v142 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
              uint64_t v143 = *(void *)(v142 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v143 + 48))(v141, 1, v142))
              {
                uint64_t v144 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
                memcpy(v140, v141, *(void *)(*(void *)(v144 - 8) + 64));
                uint64_t v11 = v212;
                uint64_t v8 = v213;
                uint64_t v145 = __dstd;
                uint64_t v125 = v195;
              }
              else
              {
                uint64_t v181 = v96;
                ((void (*)(char *, char *, uint64_t))v203)(v140, v141, v197);
                uint64_t v152 = *(int *)(v142 + 20);
                v174 = v140;
                uint64_t v153 = &v140[v152];
                uint64_t v154 = &v141[v152];
                uint64_t v155 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
                uint64_t v156 = *(void *)(v155 - 8);
                if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v156 + 48))(v154, 1, v155))
                {
                  uint64_t v157 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                  memcpy(v153, v154, *(void *)(*(void *)(v157 - 8) + 64));
                }
                else
                {
                  *(void *)uint64_t v153 = *(void *)v154;
                  uint64_t v163 = *(int *)(v155 + 20);
                  v172 = &v153[v163];
                  uint64_t v164 = &v154[v163];
                  swift_bridgeObjectRetain();
                  ((void (*)(char *, char *, uint64_t))v203)(v172, v164, v197);
                  (*(void (**)(char *, void, uint64_t, uint64_t))(v156 + 56))(v153, 0, 1, v155);
                }
                uint64_t v10 = v211;
                uint64_t v8 = v213;
                uint64_t v5 = v208;
                uint64_t v145 = __dstd;
                uint64_t v125 = v195;
                (*(void (**)(char *, void, uint64_t, uint64_t))(v143 + 56))(v174, 0, 1, v142);
                uint64_t v11 = v212;
                uint64_t v96 = v181;
              }
              (*(void (**)(char *, void, uint64_t, uint64_t))(v187 + 56))(v145, 0, 1, v176);
              uint64_t v60 = v183;
              uint64_t v94 = v178;
            }
            (*(void (**)(char *, void, uint64_t, uint64_t))(v125 + 56))(v94, 0, 1, v96);
            uint64_t v99 = v202;
          }
          (*(void (**)(char *, void, uint64_t, uint64_t))(v60 + 56))(v99, 0, 1, v207);
          uint64_t v3 = v210;
        }
      }
      else
      {
        *(_DWORD *)uint64_t v8 = *(_DWORD *)v9;
        uint64_t v39 = v9[1];
        unint64_t v40 = v9[2];
        outlined copy of Data._Representation(v39, v40);
        v8[1] = v39;
        v8[2] = v40;
        uint64_t v41 = (int *)type metadata accessor for AspireApiPIRRequest(0);
        uint64_t v42 = v41[6];
        uint64_t v43 = (char *)v8 + v42;
        uint64_t v44 = (char *)v9 + v42;
        uint64_t v45 = type metadata accessor for UnknownStorage();
        uint64_t v46 = v8;
        uint64_t v47 = *(void (**)(char *, char *, uint64_t))(*(void *)(v45 - 8) + 16);
        v47(v43, v44, v45);
        uint64_t v48 = v41[7];
        uint64_t v49 = (uint64_t *)((char *)v46 + v48);
        uint64_t v50 = (uint64_t *)((char *)v9 + v48);
        uint64_t v51 = type metadata accessor for AspirePirEncryptedIndices(0);
        uint64_t v52 = *(void *)(v51 - 8);
        v204 = v47;
        uint64_t v206 = v45;
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v52 + 48))(v50, 1, v51))
        {
          uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
          memcpy(v49, v50, *(void *)(*(void *)(v53 - 8) + 64));
        }
        else
        {
          uint64_t v62 = v50[1];
          *uint64_t v49 = *v50;
          v49[1] = v62;
          uint64_t v63 = *(int *)(v51 + 24);
          v198 = (char *)v49 + v63;
          uint64_t v64 = (char *)v50 + v63;
          swift_bridgeObjectRetain();
          v47(v198, v64, v45);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v52 + 56))(v49, 0, 1, v51);
        }
        uint64_t v65 = v41[8];
        uint64_t v8 = v213;
        uint64_t v66 = (uint64_t *)((char *)v213 + v65);
        uint64_t v67 = (uint64_t *)((char *)v9 + v65);
        uint64_t v68 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
        __dsta = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v68 - 8) + 48);
        uint64_t v194 = v68;
        uint64_t v199 = *(void *)(v68 - 8);
        if (__dsta((char *)v67, 1, v68))
        {
          uint64_t v69 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
          memcpy(v66, v67, *(void *)(*(void *)(v69 - 8) + 64));
        }
        else
        {
          uint64_t v74 = v67[1];
          void *v66 = *v67;
          unint64_t v75 = v67[2];
          outlined copy of Data._Representation(v74, v75);
          v66[1] = v74;
          v66[2] = v75;
          v204((char *)v66 + *(int *)(v68 + 24), (char *)v67 + *(int *)(v68 + 24), v206);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v199 + 56))(v66, 0, 1, v68);
        }
        uint64_t v76 = v41[9];
        uint64_t v77 = (uint64_t *)((char *)v213 + v76);
        uint64_t v78 = (uint64_t *)((char *)v9 + v76);
        uint64_t v79 = v78[1];
        *uint64_t v77 = *v78;
        v77[1] = v79;
        uint64_t v80 = v41[10];
        uint64_t v81 = (char *)v213 + v80;
        uint64_t v82 = (char *)v9 + v80;
        uint64_t v83 = type metadata accessor for AspireApiEvaluationKey(0);
        uint64_t v84 = *(void *)(v83 - 8);
        uint64_t v85 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v84 + 48);
        swift_bridgeObjectRetain();
        if (v85(v82, 1, v83))
        {
          uint64_t v86 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKey?);
          memcpy(v81, v82, *(void *)(*(void *)(v86 - 8) + 64));
          uint64_t v3 = v210;
          uint64_t v10 = v211;
          uint64_t v11 = v212;
        }
        else
        {
          uint64_t v179 = v84;
          v204(v81, v82, v206);
          uint64_t v182 = v83;
          v184 = v81;
          uint64_t v87 = *(int *)(v83 + 20);
          int v88 = &v81[v87];
          uint64_t v89 = &v82[v87];
          if (__dsta(&v82[v87], 1, v194))
          {
            uint64_t v90 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
            memcpy(v88, v89, *(void *)(*(void *)(v90 - 8) + 64));
          }
          else
          {
            uint64_t v100 = *((void *)v89 + 1);
            *(void *)int v88 = *(void *)v89;
            unint64_t v101 = *((void *)v89 + 2);
            outlined copy of Data._Representation(v100, v101);
            *((void *)v88 + 1) = v100;
            *((void *)v88 + 2) = v101;
            uint64_t v8 = v213;
            v204(&v88[*(int *)(v194 + 24)], &v89[*(int *)(v194 + 24)], v206);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v199 + 56))(v88, 0, 1, v194);
          }
          uint64_t v3 = v210;
          uint64_t v10 = v211;
          uint64_t v102 = *(int *)(v83 + 24);
          uint64_t v103 = &v184[v102];
          uint64_t v104 = &v82[v102];
          uint64_t v105 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
          uint64_t v106 = *(unsigned int (***)(const void *, uint64_t, uint64_t))(v105 - 8);
          if (v106[6](v104, 1, v105))
          {
            uint64_t v107 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
            memcpy(v103, v104, *(void *)(*(void *)(v107 - 8) + 64));
            uint64_t v109 = v179;
            uint64_t v108 = v182;
          }
          else
          {
            __dstc = v106;
            v204(v103, v104, v206);
            uint64_t v196 = v105;
            v200 = v103;
            uint64_t v115 = *(int *)(v105 + 20);
            uint64_t v116 = &v103[v115];
            uint64_t v117 = &v104[v115];
            uint64_t v118 = type metadata accessor for AspireHeSerializedGaloisKey(0);
            uint64_t v119 = *(void *)(v118 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v119 + 48))(v117, 1, v118))
            {
              uint64_t v120 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
              memcpy(v116, v117, *(void *)(*(void *)(v120 - 8) + 64));
            }
            else
            {
              *(void *)uint64_t v116 = *(void *)v117;
              uint64_t v130 = *(int *)(v118 + 20);
              uint64_t v131 = &v116[v130];
              v132 = &v117[v130];
              swift_bridgeObjectRetain();
              v204(v131, v132, v206);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v119 + 56))(v116, 0, 1, v118);
            }
            uint64_t v3 = v210;
            uint64_t v10 = v211;
            uint64_t v133 = *(int *)(v196 + 24);
            uint64_t v134 = &v200[v133];
            uint64_t v135 = &v104[v133];
            uint64_t v136 = type metadata accessor for AspireHeSerializedRelinKey(0);
            uint64_t v137 = *(void *)(v136 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v137 + 48))(v135, 1, v136))
            {
              uint64_t v138 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
              memcpy(v134, v135, *(void *)(*(void *)(v138 - 8) + 64));
              uint64_t v109 = v179;
              uint64_t v108 = v182;
            }
            else
            {
              v204(v134, v135, v206);
              uint64_t v188 = v136;
              uint64_t v146 = *(int *)(v136 + 20);
              uint64_t v209 = v134;
              uint64_t v147 = &v134[v146];
              uint64_t v148 = &v135[v146];
              uint64_t v149 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
              uint64_t v150 = *(void *)(v149 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v150 + 48))(v148, 1, v149))
              {
                uint64_t v151 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
                memcpy(v147, v148, *(void *)(*(void *)(v151 - 8) + 64));
                uint64_t v10 = v211;
                uint64_t v109 = v179;
                uint64_t v108 = v182;
              }
              else
              {
                v204(v147, v148, v206);
                uint64_t v158 = *(int *)(v149 + 20);
                v177 = v147;
                uint64_t v159 = &v147[v158];
                uint64_t v160 = &v148[v158];
                uint64_t v161 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
                uint64_t v175 = *(void *)(v161 - 8);
                if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v175 + 48))(v160, 1, v161))
                {
                  uint64_t v162 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                  memcpy(v159, v160, *(void *)(*(void *)(v162 - 8) + 64));
                }
                else
                {
                  *(void *)uint64_t v159 = *(void *)v160;
                  uint64_t v165 = *(int *)(v161 + 20);
                  uint64_t v173 = &v159[v165];
                  uint64_t v166 = &v160[v165];
                  swift_bridgeObjectRetain();
                  v204(v173, v166, v206);
                  (*(void (**)(char *, void, uint64_t, uint64_t))(v175 + 56))(v159, 0, 1, v161);
                }
                uint64_t v3 = v210;
                uint64_t v10 = v211;
                uint64_t v109 = v179;
                uint64_t v108 = v182;
                (*(void (**)(char *, void, uint64_t, uint64_t))(v150 + 56))(v177, 0, 1, v149);
              }
              (*(void (**)(char *, void, uint64_t, uint64_t))(v137 + 56))(v209, 0, 1, v188);
            }
            ((void (*)(char *, void, uint64_t, uint64_t))__dstc[7])(v200, 0, 1, v196);
          }
          (*(void (**)(char *, void, uint64_t, uint64_t))(v109 + 56))(v184, 0, 1, v108);
          uint64_t v11 = v212;
        }
      }
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v167 = *(int *)(v3 + 24);
  uint64_t v168 = (char *)v5 + v167;
  v169 = (char *)a2 + v167;
  uint64_t v170 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v170 - 8) + 16))(v168, v169, v170);
  return v5;
}

void *assignWithCopy for AspireApiRequest(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2;
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (void *)((char *)a1 + v6);
  uint64_t v8 = (void *)((char *)v4 + v6);
  uint64_t v9 = type metadata accessor for AspireApiRequest.OneOf_Request(0);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2)
      {
        uint64_t v50 = v10;
        uint64_t v51 = *v8;
        unint64_t v52 = v8[1];
        outlined copy of Data._Representation(*v8, v52);
        *uint64_t v7 = v51;
        v7[1] = v52;
        uint64_t v53 = v8[2];
        unint64_t v54 = v8[3];
        outlined copy of Data._Representation(v53, v54);
        v7[2] = v53;
        v7[3] = v54;
        uint64_t v55 = *(int *)(type metadata accessor for AspireApiOPRFRequest(0) + 24);
        uint64_t v56 = (char *)v7 + v55;
        uint64_t v57 = (char *)v8 + v55;
        uint64_t v58 = type metadata accessor for UnknownStorage();
        uint64_t v59 = v57;
        uint64_t v60 = v50;
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v58 - 8) + 16))(v56, v59, v58);
      }
      else
      {
        v417 = v4;
        uint64_t v419 = v9;
        uint64_t v420 = a3;
        uint64_t v414 = v10;
        v413 = v7;
        if (EnumCaseMultiPayload == 1)
        {
          *uint64_t v7 = *v8;
          v7[1] = v8[1];
          uint64_t v15 = v8[2];
          unint64_t v16 = v8[3];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          outlined copy of Data._Representation(v15, v16);
          v7[2] = v15;
          v7[3] = v16;
          unint64_t v17 = (int *)type metadata accessor for AspireApiPECRequest(0);
          uint64_t v18 = v17[7];
          uint64_t v19 = (char *)v7 + v18;
          uint64_t v20 = (char *)v8 + v18;
          uint64_t v21 = type metadata accessor for UnknownStorage();
          uint64_t v22 = v7;
          uint64_t v23 = (void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16);
          uint64_t v24 = v19;
          uint64_t v25 = (void *)v21;
          uint64_t v26 = v20;
          uint64_t v27 = *v23;
          (*v23)(v24, v26, v21);
          uint64_t v28 = v17[8];
          uint64_t v29 = (uint64_t *)((char *)v22 + v28);
          uint64_t v30 = (uint64_t *)((char *)v8 + v28);
          uint64_t v31 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
          uint64_t v32 = *(void *)(v31 - 8);
          v383 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48);
          v396 = v25;
          v406 = (void (*)(char *, char *, void *))v27;
          uint64_t v375 = v32;
          if (v383((char *)v30, 1, v31))
          {
            uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
            memcpy(v29, v30, *(void *)(*(void *)(v33 - 8) + 64));
          }
          else
          {
            *uint64_t v29 = *v30;
            uint64_t v76 = v30[1];
            unint64_t v77 = v30[2];
            outlined copy of Data._Representation(v76, v77);
            v29[1] = v76;
            v29[2] = v77;
            v406((char *)v29 + *(int *)(v31 + 24), (char *)v30 + *(int *)(v31 + 24), v396);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
          }
          uint64_t v78 = v17[9];
          uint64_t v7 = v413;
          uint64_t v79 = (char *)v413 + v78;
          uint64_t v80 = (char *)v8 + v78;
          uint64_t v81 = type metadata accessor for AspireApiEvaluationKey(0);
          uint64_t v82 = *(unsigned int (***)(const void *, uint64_t, uint64_t))(v81 - 8);
          a3 = v420;
          uint64_t v60 = v414;
          if (v82[6](v80, 1, v81))
          {
            uint64_t v83 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKey?);
            memcpy(v79, v80, *(void *)(*(void *)(v83 - 8) + 64));
            uint64_t v4 = v417;
            uint64_t v9 = v419;
          }
          else
          {
            __dst = v82;
            v406(v79, v80, v396);
            uint64_t v366 = v81;
            uint64_t v114 = *(int *)(v81 + 20);
            uint64_t v115 = &v79[v114];
            uint64_t v116 = &v80[v114];
            if (v383(&v80[v114], 1, v31))
            {
              uint64_t v117 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
              memcpy(v115, v116, *(void *)(*(void *)(v117 - 8) + 64));
            }
            else
            {
              *(void *)uint64_t v115 = *(void *)v116;
              uint64_t v151 = v79;
              uint64_t v152 = *((void *)v116 + 1);
              unint64_t v153 = *((void *)v116 + 2);
              outlined copy of Data._Representation(v152, v153);
              *((void *)v115 + 1) = v152;
              *((void *)v115 + 2) = v153;
              uint64_t v79 = v151;
              uint64_t v60 = v414;
              v406(&v115[*(int *)(v31 + 24)], &v116[*(int *)(v31 + 24)], v396);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v375 + 56))(v115, 0, 1, v31);
            }
            uint64_t v154 = v81;
            uint64_t v155 = *(int *)(v81 + 24);
            uint64_t v156 = &v79[v155];
            uint64_t v157 = &v80[v155];
            uint64_t v158 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
            uint64_t v387 = *(void *)(v158 - 8);
            a3 = v420;
            uint64_t v159 = __dst;
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v387 + 48))(v157, 1, v158))
            {
              uint64_t v160 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
              memcpy(v156, v157, *(void *)(*(void *)(v160 - 8) + 64));
              uint64_t v4 = v417;
              uint64_t v9 = v419;
            }
            else
            {
              v358 = v79;
              v406(v156, v157, v396);
              uint64_t v380 = v158;
              uint64_t v188 = *(int *)(v158 + 20);
              v362 = v156;
              uint64_t v189 = &v156[v188];
              v190 = &v157[v188];
              uint64_t v191 = type metadata accessor for AspireHeSerializedGaloisKey(0);
              uint64_t v192 = *(void *)(v191 - 8);
              v351 = v157;
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v192 + 48))(v190, 1, v191))
              {
                uint64_t v193 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
                memcpy(v189, v190, *(void *)(*(void *)(v193 - 8) + 64));
              }
              else
              {
                *(void *)uint64_t v189 = *(void *)v190;
                uint64_t v214 = *(int *)(v191 + 20);
                uint64_t v215 = &v189[v214];
                uint64_t v216 = &v190[v214];
                swift_bridgeObjectRetain();
                uint64_t v217 = v216;
                uint64_t v60 = v414;
                v406(v215, v217, v396);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v192 + 56))(v189, 0, 1, v191);
              }
              uint64_t v218 = *(int *)(v380 + 24);
              v219 = &v362[v218];
              v220 = &v351[v218];
              uint64_t v221 = type metadata accessor for AspireHeSerializedRelinKey(0);
              uint64_t v222 = *(void *)(v221 - 8);
              uint64_t v9 = v419;
              a3 = v420;
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v222 + 48))(v220, 1, v221))
              {
                uint64_t v223 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
                memcpy(v219, v220, *(void *)(*(void *)(v223 - 8) + 64));
                uint64_t v4 = v417;
                uint64_t v154 = v366;
                uint64_t v159 = __dst;
                v224 = v362;
              }
              else
              {
                v406(v219, v220, v396);
                uint64_t v348 = v221;
                v353 = v219;
                uint64_t v252 = *(int *)(v221 + 20);
                v253 = &v219[v252];
                v254 = &v220[v252];
                uint64_t v255 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
                uint64_t v256 = *(void *)(v255 - 8);
                uint64_t v4 = v417;
                if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v256 + 48))(v254, 1, v255))
                {
                  uint64_t v257 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
                  memcpy(v253, v254, *(void *)(*(void *)(v257 - 8) + 64));
                  uint64_t v9 = v419;
                  a3 = v420;
                  uint64_t v154 = v366;
                  uint64_t v159 = __dst;
                  v224 = v362;
                }
                else
                {
                  v406(v253, v254, v396);
                  uint64_t v281 = *(int *)(v255 + 20);
                  v345 = v253;
                  v282 = &v253[v281];
                  v283 = &v254[v281];
                  uint64_t v284 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
                  uint64_t v285 = *(void *)(v284 - 8);
                  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v285 + 48))(v283, 1, v284))
                  {
                    uint64_t v286 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                    memcpy(v282, v283, *(void *)(*(void *)(v286 - 8) + 64));
                  }
                  else
                  {
                    *(void *)v282 = *(void *)v283;
                    uint64_t v319 = *(int *)(v284 + 20);
                    v343 = &v282[v319];
                    v320 = &v283[v319];
                    swift_bridgeObjectRetain();
                    v406(v343, v320, v396);
                    (*(void (**)(char *, void, uint64_t, uint64_t))(v285 + 56))(v282, 0, 1, v284);
                  }
                  uint64_t v60 = v414;
                  uint64_t v4 = v417;
                  v224 = v362;
                  (*(void (**)(char *, void, uint64_t, uint64_t))(v256 + 56))(v345, 0, 1, v255);
                  uint64_t v9 = v419;
                  a3 = v420;
                  uint64_t v154 = v366;
                  uint64_t v159 = __dst;
                }
                (*(void (**)(char *, void, uint64_t, uint64_t))(v222 + 56))(v353, 0, 1, v348);
              }
              (*(void (**)(char *, void, uint64_t, uint64_t))(v387 + 56))(v224, 0, 1, v380);
              uint64_t v79 = v358;
            }
            ((void (*)(char *, void, uint64_t, uint64_t))v159[7])(v79, 0, 1, v154);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v7 = *(_DWORD *)v8;
          uint64_t v61 = v8[1];
          unint64_t v62 = v8[2];
          outlined copy of Data._Representation(v61, v62);
          v7[1] = v61;
          v7[2] = v62;
          uint64_t v63 = type metadata accessor for AspireApiPIRRequest(0);
          uint64_t v64 = *(int *)(v63 + 24);
          uint64_t v65 = (char *)v7 + v64;
          uint64_t v66 = (char *)v8 + v64;
          uint64_t v67 = type metadata accessor for UnknownStorage();
          uint64_t v68 = v7;
          uint64_t v69 = *(void (**)(char *, char *, uint64_t))(*(void *)(v67 - 8) + 16);
          v69(v65, v66, v67);
          v407 = (int *)v63;
          uint64_t v70 = *(int *)(v63 + 28);
          uint64_t v71 = (uint64_t *)((char *)v68 + v70);
          uint64_t v72 = (uint64_t *)((char *)v8 + v70);
          uint64_t v73 = type metadata accessor for AspirePirEncryptedIndices(0);
          uint64_t v74 = *(void *)(v73 - 8);
          v398 = (void *)v67;
          v392 = (void (*)(char *, char *, void *))v69;
          if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v74 + 48))(v72, 1, v73))
          {
            uint64_t v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
            memcpy(v71, v72, *(void *)(*(void *)(v75 - 8) + 64));
          }
          else
          {
            void *v71 = *v72;
            v71[1] = v72[1];
            uint64_t v106 = *(int *)(v73 + 24);
            v385 = (char *)v71 + v106;
            uint64_t v107 = (char *)v72 + v106;
            swift_bridgeObjectRetain();
            v69(v385, v107, v67);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v74 + 56))(v71, 0, 1, v73);
          }
          uint64_t v108 = v407[8];
          uint64_t v7 = v413;
          uint64_t v109 = (uint64_t *)((char *)v413 + v108);
          uint64_t v110 = (uint64_t *)((char *)v8 + v108);
          uint64_t v111 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
          uint64_t v112 = *(void *)(v111 - 8);
          v376 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v112 + 48);
          uint64_t v386 = v111;
          uint64_t v365 = v112;
          if (v376((char *)v110, 1, v111))
          {
            uint64_t v113 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
            memcpy(v109, v110, *(void *)(*(void *)(v113 - 8) + 64));
          }
          else
          {
            *uint64_t v109 = *v110;
            uint64_t v118 = v110[1];
            unint64_t v119 = v110[2];
            outlined copy of Data._Representation(v118, v119);
            v109[1] = v118;
            v109[2] = v119;
            v392((char *)v109 + *(int *)(v111 + 24), (char *)v110 + *(int *)(v111 + 24), v398);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v112 + 56))(v109, 0, 1, v111);
          }
          uint64_t v120 = v407[9];
          uint64_t v121 = (uint64_t *)((char *)v413 + v120);
          v122 = (uint64_t *)((char *)v8 + v120);
          void *v121 = *v122;
          v121[1] = v122[1];
          uint64_t v123 = v407[10];
          uint64_t v124 = (char *)v413 + v123;
          uint64_t v125 = (char *)v8 + v123;
          uint64_t v126 = type metadata accessor for AspireApiEvaluationKey(0);
          uint64_t v127 = *(void *)(v126 - 8);
          uint64_t v128 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v127 + 48);
          swift_bridgeObjectRetain();
          uint64_t v9 = v419;
          if (v128(v125, 1, v126))
          {
            uint64_t v129 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKey?);
            memcpy(v124, v125, *(void *)(*(void *)(v129 - 8) + 64));
            uint64_t v60 = v414;
            uint64_t v4 = v417;
            a3 = v420;
          }
          else
          {
            uint64_t v357 = v127;
            uint64_t v130 = v392;
            v392(v124, v125, v398);
            uint64_t v409 = v126;
            uint64_t v131 = *(int *)(v126 + 20);
            v361 = v124;
            v132 = &v124[v131];
            uint64_t v133 = &v125[v131];
            if (v376(&v125[v131], 1, v386))
            {
              uint64_t v134 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
              memcpy(v132, v133, *(void *)(*(void *)(v134 - 8) + 64));
            }
            else
            {
              *(void *)v132 = *(void *)v133;
              uint64_t v161 = *((void *)v133 + 1);
              unint64_t v162 = *((void *)v133 + 2);
              outlined copy of Data._Representation(v161, v162);
              *((void *)v132 + 1) = v161;
              *((void *)v132 + 2) = v162;
              uint64_t v130 = v392;
              uint64_t v7 = v413;
              v392(&v132[*(int *)(v386 + 24)], &v133[*(int *)(v386 + 24)], v398);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v365 + 56))(v132, 0, 1, v386);
            }
            uint64_t v163 = *(int *)(v126 + 24);
            uint64_t v164 = v361;
            uint64_t v165 = &v361[v163];
            uint64_t v166 = &v125[v163];
            uint64_t v167 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
            uint64_t v168 = *(void *)(v167 - 8);
            uint64_t v9 = v419;
            uint64_t v60 = v414;
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v168 + 48))(v166, 1, v167))
            {
              uint64_t v169 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
              memcpy(v165, v166, *(void *)(*(void *)(v169 - 8) + 64));
              uint64_t v4 = v417;
              a3 = v420;
              uint64_t v170 = v357;
              uint64_t v171 = v409;
            }
            else
            {
              uint64_t v367 = v168;
              v130(v165, v166, v398);
              uint64_t v381 = v167;
              v388 = v165;
              uint64_t v194 = *(int *)(v167 + 20);
              __dstb = &v165[v194];
              uint64_t v195 = &v166[v194];
              uint64_t v196 = type metadata accessor for AspireHeSerializedGaloisKey(0);
              uint64_t v197 = *(void *)(v196 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v197 + 48))(v195, 1, v196))
              {
                uint64_t v198 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
                memcpy(__dstb, v195, *(void *)(*(void *)(v198 - 8) + 64));
              }
              else
              {
                *(void *)__dstb = *(void *)v195;
                uint64_t v225 = *(int *)(v196 + 20);
                v352 = &__dstb[v225];
                v226 = &v195[v225];
                swift_bridgeObjectRetain();
                v227 = v226;
                uint64_t v60 = v414;
                v130(v352, v227, v398);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v197 + 56))(__dstb, 0, 1, v196);
              }
              uint64_t v171 = v409;
              uint64_t v228 = *(int *)(v381 + 24);
              v229 = &v388[v228];
              v230 = &v166[v228];
              uint64_t v231 = type metadata accessor for AspireHeSerializedRelinKey(0);
              uint64_t v232 = *(void *)(v231 - 8);
              uint64_t v9 = v419;
              a3 = v420;
              uint64_t v7 = v413;
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v232 + 48))(v230, 1, v231))
              {
                uint64_t v233 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
                memcpy(v229, v230, *(void *)(*(void *)(v233 - 8) + 64));
                uint64_t v4 = v417;
                uint64_t v164 = v361;
                uint64_t v234 = v367;
              }
              else
              {
                uint64_t v349 = v232;
                v392(v229, v230, v398);
                uint64_t v354 = v231;
                uint64_t v258 = *(int *)(v231 + 20);
                __dstd = v229;
                v259 = &v229[v258];
                v260 = &v230[v258];
                uint64_t v261 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
                uint64_t v262 = *(void *)(v261 - 8);
                uint64_t v4 = v417;
                if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v262 + 48))(v260, 1, v261))
                {
                  uint64_t v263 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
                  memcpy(v259, v260, *(void *)(*(void *)(v263 - 8) + 64));
                  uint64_t v9 = v419;
                  a3 = v420;
                  uint64_t v164 = v361;
                  uint64_t v234 = v367;
                  uint64_t v171 = v409;
                  uint64_t v264 = v349;
                }
                else
                {
                  v392(v259, v260, v398);
                  uint64_t v287 = *(int *)(v261 + 20);
                  v346 = v259;
                  v288 = &v259[v287];
                  v289 = &v260[v287];
                  uint64_t v290 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
                  uint64_t v291 = *(void *)(v290 - 8);
                  uint64_t v264 = v232;
                  uint64_t v234 = v367;
                  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v291 + 48))(v289, 1, v290))
                  {
                    uint64_t v292 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                    memcpy(v288, v289, *(void *)(*(void *)(v292 - 8) + 64));
                  }
                  else
                  {
                    *(void *)v288 = *(void *)v289;
                    uint64_t v321 = *(int *)(v290 + 20);
                    v344 = &v288[v321];
                    v322 = &v289[v321];
                    swift_bridgeObjectRetain();
                    v392(v344, v322, v398);
                    (*(void (**)(char *, void, uint64_t, uint64_t))(v291 + 56))(v288, 0, 1, v290);
                  }
                  uint64_t v60 = v414;
                  uint64_t v4 = v417;
                  (*(void (**)(char *, void, uint64_t, uint64_t))(v262 + 56))(v346, 0, 1, v261);
                  uint64_t v9 = v419;
                  a3 = v420;
                  uint64_t v164 = v361;
                  uint64_t v171 = v409;
                }
                (*(void (**)(char *, void, uint64_t, uint64_t))(v264 + 56))(__dstd, 0, 1, v354);
              }
              (*(void (**)(char *, void, uint64_t, uint64_t))(v234 + 56))(v388, 0, 1, v381);
              uint64_t v170 = v357;
            }
            (*(void (**)(char *, void, uint64_t, uint64_t))(v170 + 56))(v164, 0, 1, v171);
          }
        }
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v60 + 56))(v7, 0, 1, v9);
      goto LABEL_102;
    }
LABEL_9:
    uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
    memcpy(v7, v8, *(void *)(*(void *)(v34 - 8) + 64));
    goto LABEL_102;
  }
  if (v13)
  {
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v7, type metadata accessor for AspireApiRequest.OneOf_Request);
    goto LABEL_9;
  }
  if (a1 != v4)
  {
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v7, type metadata accessor for AspireApiRequest.OneOf_Request);
    int v35 = swift_getEnumCaseMultiPayload();
    if (v35 == 2)
    {
      uint64_t v84 = *v8;
      unint64_t v85 = v8[1];
      outlined copy of Data._Representation(*v8, v85);
      *uint64_t v7 = v84;
      v7[1] = v85;
      uint64_t v86 = v8[2];
      unint64_t v87 = v8[3];
      outlined copy of Data._Representation(v86, v87);
      v7[2] = v86;
      v7[3] = v87;
      uint64_t v88 = *(int *)(type metadata accessor for AspireApiOPRFRequest(0) + 24);
      uint64_t v89 = (char *)v7 + v88;
      uint64_t v90 = (char *)v8 + v88;
      uint64_t v91 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v91 - 8) + 16))(v89, v90, v91);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      v418 = v4;
      uint64_t v421 = a3;
      if (v35 == 1)
      {
        *uint64_t v7 = *v8;
        v7[1] = v8[1];
        uint64_t v36 = v8[2];
        unint64_t v37 = v8[3];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v36, v37);
        v7[2] = v36;
        v7[3] = v37;
        uint64_t v38 = type metadata accessor for AspireApiPECRequest(0);
        uint64_t v39 = *(int *)(v38 + 28);
        unint64_t v40 = (char *)v7 + v39;
        uint64_t v41 = (char *)v8 + v39;
        uint64_t v42 = type metadata accessor for UnknownStorage();
        uint64_t v43 = *(void (**)(char *, char *, uint64_t))(*(void *)(v42 - 8) + 16);
        v43(v40, v41, v42);
        uint64_t v415 = v38;
        uint64_t v44 = *(int *)(v38 + 32);
        uint64_t v45 = (uint64_t *)((char *)v7 + v44);
        uint64_t v46 = (uint64_t *)((char *)v8 + v44);
        uint64_t v47 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
        v384 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v47 - 8) + 48);
        v411 = v43;
        v397 = *(void **)(v47 - 8);
        uint64_t v404 = v42;
        if (v384((char *)v46, 1, v47))
        {
          uint64_t v48 = v47;
          uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
          memcpy(v45, v46, *(void *)(*(void *)(v49 - 8) + 64));
        }
        else
        {
          void *v45 = *v46;
          uint64_t v377 = v47;
          uint64_t v136 = v46[1];
          unint64_t v135 = v46[2];
          outlined copy of Data._Representation(v136, v135);
          v45[1] = v136;
          v45[2] = v135;
          v43((char *)v45 + *(int *)(v377 + 24), (char *)v46 + *(int *)(v377 + 24), v42);
          uint64_t v48 = v377;
          (*((void (**)(void *, void, uint64_t, uint64_t))v397 + 7))(v45, 0, 1, v377);
        }
        uint64_t v137 = *(int *)(v415 + 36);
        uint64_t v138 = (char *)v7 + v137;
        uint64_t v139 = (char *)v8 + v137;
        uint64_t v140 = type metadata accessor for AspireApiEvaluationKey(0);
        uint64_t v141 = *(unsigned int (***)(const void *, uint64_t, uint64_t))(v140 - 8);
        a3 = v421;
        if (v141[6](v139, 1, v140))
        {
          uint64_t v142 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKey?);
          memcpy(v138, v139, *(void *)(*(void *)(v142 - 8) + 64));
          uint64_t v4 = v418;
        }
        else
        {
          __dsta = v141;
          v43(v138, v139, v404);
          uint64_t v379 = v140;
          uint64_t v172 = *(int *)(v140 + 20);
          v416 = v138;
          uint64_t v173 = &v138[v172];
          v174 = &v139[v172];
          if (v384(&v139[v172], 1, v48))
          {
            uint64_t v175 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
            memcpy(v173, v174, *(void *)(*(void *)(v175 - 8) + 64));
          }
          else
          {
            *(void *)uint64_t v173 = *(void *)v174;
            uint64_t v204 = *((void *)v174 + 1);
            unint64_t v203 = *((void *)v174 + 2);
            outlined copy of Data._Representation(v204, v203);
            *((void *)v173 + 1) = v204;
            *((void *)v173 + 2) = v203;
            v43(&v173[*(int *)(v48 + 24)], &v174[*(int *)(v48 + 24)], v404);
            (*((void (**)(char *, void, uint64_t, uint64_t))v397 + 7))(v173, 0, 1, v48);
          }
          uint64_t v206 = v141;
          uint64_t v205 = v379;
          uint64_t v207 = *(int *)(v379 + 24);
          v208 = v416;
          uint64_t v209 = &v416[v207];
          uint64_t v210 = &v139[v207];
          uint64_t v211 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
          uint64_t v212 = *(void *)(v211 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v212 + 48))(v210, 1, v211))
          {
            uint64_t v213 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
            memcpy(v209, v210, *(void *)(*(void *)(v213 - 8) + 64));
            uint64_t v4 = v418;
            a3 = v421;
          }
          else
          {
            uint64_t v389 = v212;
            v411(v209, v210, v404);
            v401 = (int *)v211;
            uint64_t v245 = *(int *)(v211 + 20);
            v246 = &v209[v245];
            v247 = &v210[v245];
            uint64_t v248 = type metadata accessor for AspireHeSerializedGaloisKey(0);
            uint64_t v249 = *(void *)(v248 - 8);
            v394 = v209;
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v249 + 48))(v247, 1, v248))
            {
              uint64_t v250 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
              memcpy(v246, v247, *(void *)(*(void *)(v250 - 8) + 64));
              v251 = v411;
            }
            else
            {
              *(void *)v246 = *(void *)v247;
              uint64_t v270 = *(int *)(v248 + 20);
              v271 = &v246[v270];
              v272 = &v247[v270];
              swift_bridgeObjectRetain();
              v273 = v271;
              uint64_t v209 = v394;
              v251 = v411;
              v411(v273, v272, v404);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v249 + 56))(v246, 0, 1, v248);
            }
            uint64_t v274 = v401[6];
            v275 = &v209[v274];
            v276 = &v210[v274];
            uint64_t v277 = type metadata accessor for AspireHeSerializedRelinKey(0);
            uint64_t v278 = *(void *)(v277 - 8);
            uint64_t v4 = v418;
            uint64_t v206 = __dsta;
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v278 + 48))(v276, 1, v277))
            {
              uint64_t v279 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
              memcpy(v275, v276, *(void *)(*(void *)(v279 - 8) + 64));
              a3 = v421;
              v208 = v416;
              uint64_t v205 = v379;
              v280 = v401;
            }
            else
            {
              uint64_t v359 = v278;
              v251(v275, v276, v404);
              uint64_t v363 = v277;
              v369 = v275;
              uint64_t v306 = *(int *)(v277 + 20);
              v307 = &v275[v306];
              v308 = &v276[v306];
              uint64_t v309 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
              uint64_t v310 = *(void *)(v309 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v310 + 48))(v308, 1, v309))
              {
                uint64_t v311 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
                memcpy(v307, v308, *(void *)(*(void *)(v311 - 8) + 64));
                a3 = v421;
                v208 = v416;
                uint64_t v205 = v379;
                v280 = v401;
                uint64_t v312 = v359;
              }
              else
              {
                v251(v307, v308, v404);
                uint64_t v350 = v309;
                v355 = v307;
                uint64_t v328 = *(int *)(v309 + 20);
                v329 = &v307[v328];
                v330 = &v308[v328];
                uint64_t v331 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
                uint64_t v332 = *(void *)(v331 - 8);
                if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v332 + 48))(v330, 1, v331))
                {
                  uint64_t v333 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                  memcpy(v329, v330, *(void *)(*(void *)(v333 - 8) + 64));
                }
                else
                {
                  *(void *)v329 = *(void *)v330;
                  uint64_t v339 = *(int *)(v331 + 20);
                  v347 = &v329[v339];
                  v340 = &v330[v339];
                  swift_bridgeObjectRetain();
                  v251(v347, v340, v404);
                  (*(void (**)(char *, void, uint64_t, uint64_t))(v332 + 56))(v329, 0, 1, v331);
                }
                uint64_t v4 = v418;
                uint64_t v312 = v359;
                (*(void (**)(char *, void, uint64_t, uint64_t))(v310 + 56))(v355, 0, 1, v350);
                a3 = v421;
                v208 = v416;
                uint64_t v205 = v379;
                v280 = v401;
              }
              (*(void (**)(char *, void, uint64_t, uint64_t))(v312 + 56))(v369, 0, 1, v363);
            }
            (*(void (**)(char *, void, uint64_t, int *))(v389 + 56))(v394, 0, 1, v280);
          }
          ((void (*)(char *, void, uint64_t, uint64_t))v206[7])(v208, 0, 1, v205);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v7 = *(_DWORD *)v8;
        uint64_t v92 = v8[1];
        unint64_t v93 = v8[2];
        outlined copy of Data._Representation(v92, v93);
        v7[1] = v92;
        v7[2] = v93;
        uint64_t v94 = type metadata accessor for AspireApiPIRRequest(0);
        uint64_t v95 = *(int *)(v94 + 24);
        uint64_t v96 = (char *)v7 + v95;
        uint64_t v97 = (char *)v8 + v95;
        uint64_t v98 = type metadata accessor for UnknownStorage();
        uint64_t v99 = *(void (**)(char *, char *, uint64_t))(*(void *)(v98 - 8) + 16);
        v99(v96, v97, v98);
        v408 = (int *)v94;
        uint64_t v100 = *(int *)(v94 + 28);
        unint64_t v101 = (uint64_t *)((char *)v7 + v100);
        uint64_t v102 = (uint64_t *)((char *)v8 + v100);
        uint64_t v103 = type metadata accessor for AspirePirEncryptedIndices(0);
        uint64_t v104 = *(void *)(v103 - 8);
        v412 = v99;
        uint64_t v405 = v98;
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v104 + 48))(v102, 1, v103))
        {
          uint64_t v105 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
          memcpy(v101, v102, *(void *)(*(void *)(v105 - 8) + 64));
        }
        else
        {
          void *v101 = *v102;
          v101[1] = v102[1];
          uint64_t v143 = *(int *)(v103 + 24);
          v399 = (char *)v101 + v143;
          uint64_t v144 = (char *)v102 + v143;
          swift_bridgeObjectRetain();
          v99(v399, v144, v98);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v104 + 56))(v101, 0, 1, v103);
        }
        uint64_t v145 = v408[8];
        uint64_t v146 = (uint64_t *)((char *)v7 + v145);
        uint64_t v147 = (uint64_t *)((char *)v8 + v145);
        uint64_t v148 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
        uint64_t v149 = *(void *)(v148 - 8);
        v393 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v149 + 48);
        a3 = v421;
        v400 = (int *)v148;
        uint64_t v378 = v149;
        if (v393((char *)v147, 1, v148))
        {
          uint64_t v150 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
          memcpy(v146, v147, *(void *)(*(void *)(v150 - 8) + 64));
        }
        else
        {
          *uint64_t v146 = *v147;
          uint64_t v177 = v147[1];
          unint64_t v176 = v147[2];
          outlined copy of Data._Representation(v177, v176);
          v146[1] = v177;
          v146[2] = v176;
          a3 = v421;
          v412((char *)v146 + *(int *)(v148 + 24), (char *)v147 + *(int *)(v148 + 24), v405);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v149 + 56))(v146, 0, 1, v148);
        }
        uint64_t v178 = v408[9];
        uint64_t v179 = (uint64_t *)((char *)v7 + v178);
        uint64_t v180 = (uint64_t *)((char *)v8 + v178);
        *uint64_t v179 = *v180;
        v179[1] = v180[1];
        uint64_t v181 = v408[10];
        uint64_t v182 = (char *)v7 + v181;
        uint64_t v183 = (char *)v8 + v181;
        uint64_t v184 = type metadata accessor for AspireApiEvaluationKey(0);
        uint64_t v185 = *(void *)(v184 - 8);
        uint64_t v186 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v185 + 48);
        swift_bridgeObjectRetain();
        if (v186(v183, 1, v184))
        {
          uint64_t v187 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKey?);
          memcpy(v182, v183, *(void *)(*(void *)(v187 - 8) + 64));
          uint64_t v4 = v418;
        }
        else
        {
          uint64_t v368 = v185;
          v412(v182, v183, v405);
          __dstc = (int *)v184;
          uint64_t v199 = *(int *)(v184 + 20);
          v410 = v182;
          v200 = &v182[v199];
          uint64_t v201 = &v183[v199];
          if (v393(&v183[v199], 1, (uint64_t)v400))
          {
            uint64_t v202 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
            memcpy(v200, v201, *(void *)(*(void *)(v202 - 8) + 64));
          }
          else
          {
            *(void *)v200 = *(void *)v201;
            uint64_t v236 = *((void *)v201 + 1);
            unint64_t v235 = *((void *)v201 + 2);
            outlined copy of Data._Representation(v236, v235);
            *((void *)v200 + 1) = v236;
            *((void *)v200 + 2) = v235;
            v412(&v200[v400[6]], &v201[v400[6]], v405);
            (*(void (**)(char *, void, uint64_t, int *))(v378 + 56))(v200, 0, 1, v400);
          }
          v237 = __dstc;
          uint64_t v238 = __dstc[6];
          v239 = &v182[v238];
          v240 = &v183[v238];
          uint64_t v241 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
          uint64_t v242 = *(void *)(v241 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v242 + 48))(v240, 1, v241))
          {
            uint64_t v243 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
            memcpy(v239, v240, *(void *)(*(void *)(v243 - 8) + 64));
            uint64_t v4 = v418;
            a3 = v421;
            uint64_t v244 = v368;
          }
          else
          {
            uint64_t v395 = v242;
            v412(v239, v240, v405);
            uint64_t v265 = *(int *)(v241 + 20);
            v402 = &v239[v265];
            v266 = &v240[v265];
            uint64_t v267 = type metadata accessor for AspireHeSerializedGaloisKey(0);
            uint64_t v268 = *(void *)(v267 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v268 + 48))(v266, 1, v267))
            {
              uint64_t v269 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
              memcpy(v402, v266, *(void *)(*(void *)(v269 - 8) + 64));
            }
            else
            {
              *(void *)v402 = *(void *)v266;
              uint64_t v293 = *(int *)(v267 + 20);
              uint64_t v390 = v241;
              v294 = v239;
              v295 = &v402[v293];
              v296 = &v266[v293];
              swift_bridgeObjectRetain();
              v297 = v295;
              v239 = v294;
              uint64_t v241 = v390;
              v412(v297, v296, v405);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v268 + 56))(v402, 0, 1, v267);
            }
            uint64_t v298 = *(int *)(v241 + 24);
            v403 = v239;
            v299 = &v239[v298];
            v300 = &v240[v298];
            uint64_t v301 = type metadata accessor for AspireHeSerializedRelinKey(0);
            uint64_t v302 = *(void *)(v301 - 8);
            uint64_t v4 = v418;
            uint64_t v182 = v410;
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v302 + 48))(v300, 1, v301))
            {
              uint64_t v303 = v241;
              uint64_t v304 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
              memcpy(v299, v300, *(void *)(*(void *)(v304 - 8) + 64));
              a3 = v421;
              uint64_t v244 = v368;
              uint64_t v305 = v395;
            }
            else
            {
              v412(v299, v300, v405);
              uint64_t v382 = v301;
              v391 = v299;
              uint64_t v313 = *(int *)(v301 + 20);
              v314 = &v299[v313];
              v315 = &v300[v313];
              uint64_t v316 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
              uint64_t v317 = *(void *)(v316 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v317 + 48))(v315, 1, v316))
              {
                uint64_t v303 = v241;
                uint64_t v318 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
                memcpy(v314, v315, *(void *)(*(void *)(v318 - 8) + 64));
                a3 = v421;
                uint64_t v182 = v410;
                uint64_t v244 = v368;
              }
              else
              {
                uint64_t v303 = v241;
                v412(v314, v315, v405);
                uint64_t v334 = *(int *)(v316 + 20);
                v364 = v314;
                v335 = &v314[v334];
                v336 = &v315[v334];
                uint64_t v337 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
                uint64_t v360 = *(void *)(v337 - 8);
                if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v360 + 48))(v336, 1, v337))
                {
                  uint64_t v338 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                  memcpy(v335, v336, *(void *)(*(void *)(v338 - 8) + 64));
                }
                else
                {
                  *(void *)v335 = *(void *)v336;
                  uint64_t v341 = *(int *)(v337 + 20);
                  v356 = &v335[v341];
                  v342 = &v336[v341];
                  swift_bridgeObjectRetain();
                  v412(v356, v342, v405);
                  (*(void (**)(char *, void, uint64_t, uint64_t))(v360 + 56))(v335, 0, 1, v337);
                }
                uint64_t v4 = v418;
                uint64_t v244 = v368;
                (*(void (**)(char *, void, uint64_t, uint64_t))(v317 + 56))(v364, 0, 1, v316);
                a3 = v421;
                uint64_t v182 = v410;
              }
              uint64_t v305 = v395;
              (*(void (**)(char *, void, uint64_t, uint64_t))(v302 + 56))(v391, 0, 1, v382);
            }
            (*(void (**)(char *, void, uint64_t, uint64_t))(v305 + 56))(v403, 0, 1, v303);
            v237 = __dstc;
          }
          (*(void (**)(char *, void, uint64_t, int *))(v244 + 56))(v182, 0, 1, v237);
        }
      }
      swift_storeEnumTagMultiPayload();
    }
  }
LABEL_102:
  uint64_t v323 = *(int *)(a3 + 24);
  v324 = (char *)a1 + v323;
  v325 = (char *)v4 + v323;
  uint64_t v326 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v326 - 8) + 24))(v324, v325, v326);
  return a1;
}

_OWORD *initializeWithTake for AspireApiRequest(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a2;
  uint64_t v5 = a1;
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (_OWORD *)((char *)a1 + v6);
  uint64_t v8 = (_OWORD *)((char *)a2 + v6);
  uint64_t v9 = type metadata accessor for AspireApiRequest.OneOf_Request(0);
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      long long v26 = v8[1];
      *uint64_t v7 = *v8;
      v7[1] = v26;
      uint64_t v27 = *(int *)(type metadata accessor for AspireApiOPRFRequest(0) + 24);
      uint64_t v28 = (char *)v7 + v27;
      uint64_t v29 = (char *)v8 + v27;
      uint64_t v30 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 32))(v28, v29, v30);
    }
    else
    {
      uint64_t v177 = v10;
      uint64_t v178 = v3;
      uint64_t v179 = v4;
      uint64_t v180 = v9;
      if (EnumCaseMultiPayload == 1)
      {
        v174 = v5;
        long long v13 = v8[1];
        *uint64_t v7 = *v8;
        v7[1] = v13;
        uint64_t v14 = (int *)type metadata accessor for AspireApiPECRequest(0);
        uint64_t v15 = v14[7];
        unint64_t v16 = (char *)v7 + v15;
        unint64_t v17 = (char *)v8 + v15;
        uint64_t v18 = type metadata accessor for UnknownStorage();
        uint64_t v19 = *(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32);
        v19(v16, v17, v18);
        uint64_t v20 = v14[8];
        uint64_t v21 = (void *)((char *)v7 + v20);
        uint64_t v22 = (void *)((char *)v8 + v20);
        uint64_t v23 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
        uint64_t v24 = *(void *)(v23 - 8);
        uint64_t v161 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48);
        uint64_t v169 = v18;
        uint64_t v172 = v19;
        uint64_t v165 = v23;
        if (v161((char *)v22, 1, v23))
        {
          uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
          memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
        }
        else
        {
          *uint64_t v21 = *v22;
          *(_OWORD *)(v21 + 1) = *(_OWORD *)(v22 + 1);
          v19((char *)v21 + *(int *)(v23 + 24), (char *)v22 + *(int *)(v23 + 24), v18);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
        }
        uint64_t v43 = v14[9];
        uint64_t v44 = (char *)v7 + v43;
        uint64_t v45 = (char *)v8 + v43;
        uint64_t v46 = type metadata accessor for AspireApiEvaluationKey(0);
        uint64_t v47 = *(void *)(v46 - 8);
        uint64_t v5 = v174;
        uint64_t v4 = v179;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46))
        {
          uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKey?);
          memcpy(v44, v45, *(void *)(*(void *)(v48 - 8) + 64));
          uint64_t v10 = v177;
          uint64_t v3 = v178;
        }
        else
        {
          uint64_t v155 = v47;
          v172(v44, v45, v169);
          uint64_t v56 = *(int *)(v46 + 20);
          uint64_t v157 = v44;
          uint64_t v57 = &v44[v56];
          uint64_t v58 = &v45[v56];
          if (v161(&v45[v56], 1, v165))
          {
            uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
            memcpy(v57, v58, *(void *)(*(void *)(v59 - 8) + 64));
          }
          else
          {
            *(void *)uint64_t v57 = *(void *)v58;
            *(_OWORD *)(v57 + 8) = *(_OWORD *)(v58 + 8);
            v172(&v57[*(int *)(v165 + 24)], &v58[*(int *)(v165 + 24)], v169);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v57, 0, 1, v165);
          }
          uint64_t v166 = v46;
          uint64_t v73 = *(int *)(v46 + 24);
          uint64_t v74 = &v157[v73];
          uint64_t v75 = &v45[v73];
          uint64_t v76 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
          uint64_t v77 = *(void *)(v76 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v77 + 48))(v75, 1, v76))
          {
            uint64_t v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
            memcpy(v74, v75, *(void *)(*(void *)(v78 - 8) + 64));
            uint64_t v80 = v155;
            uint64_t v79 = v157;
            uint64_t v5 = v174;
            uint64_t v81 = v166;
          }
          else
          {
            uint64_t v153 = v77;
            v172(v74, v75, v169);
            uint64_t v160 = v74;
            uint64_t v163 = v76;
            uint64_t v89 = *(int *)(v76 + 20);
            uint64_t v90 = &v74[v89];
            uint64_t v91 = &v75[v89];
            uint64_t v92 = type metadata accessor for AspireHeSerializedGaloisKey(0);
            uint64_t v93 = *(void *)(v92 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v93 + 48))(v91, 1, v92))
            {
              uint64_t v94 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
              memcpy(v90, v91, *(void *)(*(void *)(v94 - 8) + 64));
            }
            else
            {
              *(void *)uint64_t v90 = *(void *)v91;
              v172(&v90[*(int *)(v92 + 20)], &v91[*(int *)(v92 + 20)], v169);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v93 + 56))(v90, 0, 1, v92);
            }
            uint64_t v5 = v174;
            uint64_t v4 = v179;
            unint64_t v101 = v160;
            uint64_t v81 = v166;
            uint64_t v102 = *(int *)(v163 + 24);
            uint64_t v103 = &v160[v102];
            uint64_t v104 = &v75[v102];
            uint64_t v105 = type metadata accessor for AspireHeSerializedRelinKey(0);
            uint64_t v106 = *(void *)(v105 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v106 + 48))(v104, 1, v105))
            {
              uint64_t v107 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
              memcpy(v103, v104, *(void *)(*(void *)(v107 - 8) + 64));
            }
            else
            {
              uint64_t v168 = v106;
              v172(v103, v104, v169);
              uint64_t v176 = v105;
              uint64_t v117 = *(int *)(v105 + 20);
              uint64_t v118 = &v103[v117];
              unint64_t v119 = &v104[v117];
              uint64_t v120 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
              uint64_t v121 = *(void *)(v120 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v121 + 48))(v119, 1, v120))
              {
                uint64_t v122 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
                memcpy(v118, v119, *(void *)(*(void *)(v122 - 8) + 64));
                unint64_t v101 = v160;
                uint64_t v123 = v168;
              }
              else
              {
                uint64_t v148 = v121;
                v172(v118, v119, v169);
                uint64_t v150 = v120;
                uint64_t v152 = v118;
                uint64_t v131 = *(int *)(v120 + 20);
                v132 = &v118[v131];
                uint64_t v133 = &v119[v131];
                uint64_t v134 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
                uint64_t v135 = *(void *)(v134 - 8);
                if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v135 + 48))(v133, 1, v134))
                {
                  uint64_t v136 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                  memcpy(v132, v133, *(void *)(*(void *)(v136 - 8) + 64));
                }
                else
                {
                  *(void *)v132 = *(void *)v133;
                  v172(&v132[*(int *)(v134 + 20)], &v133[*(int *)(v134 + 20)], v169);
                  (*(void (**)(char *, void, uint64_t, uint64_t))(v135 + 56))(v132, 0, 1, v134);
                }
                unint64_t v101 = v160;
                uint64_t v123 = v168;
                (*(void (**)(char *, void, uint64_t, uint64_t))(v148 + 56))(v152, 0, 1, v150);
              }
              (*(void (**)(char *, void, uint64_t, uint64_t))(v123 + 56))(v103, 0, 1, v176);
            }
            uint64_t v80 = v155;
            (*(void (**)(char *, void, uint64_t, uint64_t))(v153 + 56))(v101, 0, 1, v163);
            uint64_t v79 = v157;
          }
          (*(void (**)(char *, void, uint64_t, uint64_t))(v80 + 56))(v79, 0, 1, v81);
          uint64_t v10 = v177;
          uint64_t v3 = v178;
        }
      }
      else
      {
        *(_DWORD *)uint64_t v7 = *(_DWORD *)v8;
        *(_OWORD *)((char *)v7 + 8) = *(_OWORD *)((char *)v8 + 8);
        uint64_t v31 = (int *)type metadata accessor for AspireApiPIRRequest(0);
        uint64_t v32 = v31[6];
        uint64_t v33 = (char *)v7 + v32;
        uint64_t v34 = (char *)v8 + v32;
        uint64_t v35 = type metadata accessor for UnknownStorage();
        uint64_t v36 = *(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 32);
        v36(v33, v34, v35);
        uint64_t v37 = v31[7];
        uint64_t v38 = (_OWORD *)((char *)v7 + v37);
        uint64_t v39 = (_OWORD *)((char *)v8 + v37);
        uint64_t v40 = type metadata accessor for AspirePirEncryptedIndices(0);
        uint64_t v41 = *(void *)(v40 - 8);
        uint64_t v173 = v35;
        uint64_t v175 = v36;
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
        {
          uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
          memcpy(v38, v39, *(void *)(*(void *)(v42 - 8) + 64));
        }
        else
        {
          *uint64_t v38 = *v39;
          v36((char *)v38 + *(int *)(v40 + 24), (char *)v39 + *(int *)(v40 + 24), v35);
          (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
        }
        uint64_t v49 = v31[8];
        uint64_t v50 = (void *)((char *)v7 + v49);
        uint64_t v51 = (void *)((char *)v8 + v49);
        uint64_t v52 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
        uint64_t v53 = *(void *)(v52 - 8);
        uint64_t v170 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48);
        uint64_t v4 = v179;
        uint64_t v9 = v180;
        uint64_t v162 = v53;
        if (v170((char *)v51, 1, v52))
        {
          uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
          memcpy(v50, v51, *(void *)(*(void *)(v54 - 8) + 64));
          uint64_t v55 = v175;
        }
        else
        {
          *uint64_t v50 = *v51;
          *(_OWORD *)(v50 + 1) = *(_OWORD *)(v51 + 1);
          uint64_t v60 = *(int *)(v52 + 24);
          uint64_t v61 = (char *)v51 + v60;
          uint64_t v55 = v175;
          v175((char *)v50 + v60, v61, v173);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v53 + 56))(v50, 0, 1, v52);
        }
        *(_OWORD *)((char *)v7 + v31[9]) = *(_OWORD *)((char *)v8 + v31[9]);
        uint64_t v62 = v31[10];
        uint64_t v63 = (char *)v7 + v62;
        uint64_t v64 = (char *)v8 + v62;
        uint64_t v65 = type metadata accessor for AspireApiEvaluationKey(0);
        uint64_t v66 = *(void *)(v65 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v64, 1, v65))
        {
          uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKey?);
          memcpy(v63, v64, *(void *)(*(void *)(v67 - 8) + 64));
          uint64_t v10 = v177;
          uint64_t v3 = v178;
        }
        else
        {
          uint64_t v156 = v66;
          v55(v63, v64, v173);
          uint64_t v158 = v65;
          uint64_t v159 = v63;
          uint64_t v68 = *(int *)(v65 + 20);
          uint64_t v69 = v55;
          uint64_t v70 = &v63[v68];
          uint64_t v71 = &v64[v68];
          if (v170(&v64[v68], 1, v52))
          {
            uint64_t v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
            memcpy(v70, v71, *(void *)(*(void *)(v72 - 8) + 64));
          }
          else
          {
            *(void *)uint64_t v70 = *(void *)v71;
            *(_OWORD *)(v70 + 8) = *(_OWORD *)(v71 + 8);
            v69(&v70[*(int *)(v52 + 24)], &v71[*(int *)(v52 + 24)], v173);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v162 + 56))(v70, 0, 1, v52);
          }
          uint64_t v9 = v180;
          uint64_t v82 = v158;
          uint64_t v83 = *(int *)(v158 + 24);
          uint64_t v84 = &v159[v83];
          unint64_t v85 = &v64[v83];
          uint64_t v86 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
          uint64_t v87 = *(void *)(v86 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v87 + 48))(v85, 1, v86))
          {
            uint64_t v88 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
            memcpy(v84, v85, *(void *)(*(void *)(v88 - 8) + 64));
            uint64_t v10 = v177;
            uint64_t v3 = v178;
          }
          else
          {
            v175(v84, v85, v173);
            uint64_t v167 = v84;
            uint64_t v171 = v86;
            uint64_t v95 = *(int *)(v86 + 20);
            uint64_t v96 = &v84[v95];
            uint64_t v97 = &v85[v95];
            uint64_t v98 = type metadata accessor for AspireHeSerializedGaloisKey(0);
            uint64_t v99 = *(void *)(v98 - 8);
            uint64_t v164 = v87;
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v99 + 48))(v97, 1, v98))
            {
              uint64_t v100 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
              memcpy(v96, v97, *(void *)(*(void *)(v100 - 8) + 64));
            }
            else
            {
              *(void *)uint64_t v96 = *(void *)v97;
              v175(&v96[*(int *)(v98 + 20)], &v97[*(int *)(v98 + 20)], v173);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v99 + 56))(v96, 0, 1, v98);
            }
            uint64_t v4 = v179;
            uint64_t v9 = v180;
            uint64_t v108 = v167;
            uint64_t v109 = *(int *)(v171 + 24);
            uint64_t v110 = &v167[v109];
            uint64_t v111 = &v85[v109];
            uint64_t v112 = type metadata accessor for AspireHeSerializedRelinKey(0);
            uint64_t v113 = *(void *)(v112 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v113 + 48))(v111, 1, v112))
            {
              uint64_t v114 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
              memcpy(v110, v111, *(void *)(*(void *)(v114 - 8) + 64));
              uint64_t v66 = v156;
              uint64_t v82 = v158;
              uint64_t v115 = v164;
              uint64_t v116 = v171;
            }
            else
            {
              uint64_t v151 = v113;
              v175(v110, v111, v173);
              uint64_t v124 = *(int *)(v112 + 20);
              uint64_t v154 = v110;
              uint64_t v125 = &v110[v124];
              uint64_t v126 = &v111[v124];
              uint64_t v127 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
              uint64_t v128 = *(void *)(v127 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v128 + 48))(v126, 1, v127))
              {
                uint64_t v129 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
                memcpy(v125, v126, *(void *)(*(void *)(v129 - 8) + 64));
                uint64_t v116 = v171;
                uint64_t v130 = v112;
                uint64_t v115 = v164;
              }
              else
              {
                v175(v125, v126, v173);
                uint64_t v137 = *(int *)(v127 + 20);
                __dst = &v125[v137];
                uint64_t v138 = &v126[v137];
                uint64_t v139 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
                uint64_t v146 = *(void *)(v139 - 8);
                uint64_t v149 = v125;
                if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v146 + 48))(v138, 1, v139))
                {
                  uint64_t v140 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                  memcpy(__dst, v138, *(void *)(*(void *)(v140 - 8) + 64));
                }
                else
                {
                  *(void *)__dst = *(void *)v138;
                  v175(&__dst[*(int *)(v139 + 20)], &v138[*(int *)(v139 + 20)], v173);
                  (*(void (**)(char *, void, uint64_t, uint64_t))(v146 + 56))(__dst, 0, 1, v139);
                }
                uint64_t v116 = v171;
                uint64_t v130 = v112;
                uint64_t v115 = v164;
                (*(void (**)(char *, void, uint64_t, uint64_t))(v128 + 56))(v149, 0, 1, v127);
              }
              (*(void (**)(char *, void, uint64_t, uint64_t))(v151 + 56))(v154, 0, 1, v130);
              uint64_t v66 = v156;
              uint64_t v82 = v158;
              uint64_t v108 = v167;
            }
            (*(void (**)(char *, void, uint64_t, uint64_t))(v115 + 56))(v108, 0, 1, v116);
            uint64_t v10 = v177;
            uint64_t v3 = v178;
          }
          (*(void (**)(char *, void, uint64_t, uint64_t))(v66 + 56))(v159, 0, 1, v82);
        }
      }
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v141 = *(int *)(v3 + 24);
  uint64_t v142 = (char *)v5 + v141;
  uint64_t v143 = (char *)v4 + v141;
  uint64_t v144 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v144 - 8) + 32))(v142, v143, v144);
  return v5;
}

void *assignWithTake for AspireApiRequest(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2;
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (_OWORD *)((char *)a1 + v7);
  uint64_t v9 = (_OWORD *)((char *)v4 + v7);
  uint64_t v10 = type metadata accessor for AspireApiRequest.OneOf_Request(0);
  uint64_t v11 = *(void *)(v10 - 8);
  int v12 = *(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2)
      {
        long long v46 = v9[1];
        *uint64_t v8 = *v9;
        v8[1] = v46;
        uint64_t v47 = *(int *)(type metadata accessor for AspireApiOPRFRequest(0) + 24);
        uint64_t v48 = (char *)v8 + v47;
        uint64_t v49 = (char *)v9 + v47;
        uint64_t v50 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v50 - 8) + 32))(v48, v49, v50);
      }
      else
      {
        uint64_t v346 = a3;
        uint64_t v348 = v10;
        v344 = v4;
        v345 = v8;
        if (EnumCaseMultiPayload == 1)
        {
          long long v16 = v9[1];
          *uint64_t v8 = *v9;
          v8[1] = v16;
          unint64_t v17 = (int *)type metadata accessor for AspireApiPECRequest(0);
          uint64_t v18 = v17[7];
          uint64_t v19 = (char *)v8 + v18;
          uint64_t v20 = (char *)v9 + v18;
          uint64_t v21 = type metadata accessor for UnknownStorage();
          uint64_t v22 = (void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 32);
          v340 = *v22;
          (*v22)(v19, v20, v21);
          uint64_t v23 = v17[8];
          uint64_t v24 = (void *)((char *)v8 + v23);
          uint64_t v25 = (void *)((char *)v9 + v23);
          uint64_t v26 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
          uint64_t v27 = *(void *)(v26 - 8);
          uint64_t v313 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48);
          uint64_t v327 = v21;
          __dst = (int *)v26;
          uint64_t v308 = v27;
          if (v313((char *)v25, 1, v26))
          {
            uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
            memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
            uint64_t v29 = v340;
          }
          else
          {
            *uint64_t v24 = *v25;
            *(_OWORD *)(v24 + 1) = *(_OWORD *)(v25 + 1);
            uint64_t v64 = v21;
            uint64_t v29 = v340;
            v340((char *)v24 + *(int *)(v26 + 24), (char *)v25 + *(int *)(v26 + 24), v64);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
          }
          uint64_t v65 = v17[9];
          uint64_t v66 = (char *)v345 + v65;
          uint64_t v67 = (char *)v9 + v65;
          uint64_t v68 = type metadata accessor for AspireApiEvaluationKey(0);
          uint64_t v69 = *(unsigned int (***)(const void *, uint64_t, uint64_t))(v68 - 8);
          uint64_t v10 = v348;
          uint64_t v4 = v344;
          if (v69[6](v67, 1, v68))
          {
            uint64_t v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKey?);
            memcpy(v66, v67, *(void *)(*(void *)(v70 - 8) + 64));
            uint64_t v8 = v345;
            a3 = v346;
          }
          else
          {
            uint64_t v303 = v69;
            v29(v66, v67, v327);
            uint64_t v94 = *(int *)(v68 + 20);
            uint64_t v338 = v66;
            uint64_t v95 = &v66[v94];
            uint64_t v96 = &v67[v94];
            if (v313(&v67[v94], 1, (uint64_t)__dst))
            {
              uint64_t v97 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
              memcpy(v95, v96, *(void *)(*(void *)(v97 - 8) + 64));
            }
            else
            {
              *(void *)uint64_t v95 = *(void *)v96;
              *(_OWORD *)(v95 + 8) = *(_OWORD *)(v96 + 8);
              v29(&v95[__dst[6]], &v96[__dst[6]], v327);
              (*(void (**)(char *, void, uint64_t, int *))(v308 + 56))(v95, 0, 1, __dst);
            }
            uint64_t v122 = *(int *)(v68 + 24);
            uint64_t v123 = v338;
            uint64_t v124 = v68;
            uint64_t v125 = &v338[v122];
            uint64_t v126 = &v67[v122];
            uint64_t v127 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
            uint64_t v128 = *(void *)(v127 - 8);
            uint64_t v10 = v348;
            uint64_t v300 = v124;
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v128 + 48))(v126, 1, v127))
            {
              uint64_t v129 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
              memcpy(v125, v126, *(void *)(*(void *)(v129 - 8) + 64));
              uint64_t v8 = v345;
              a3 = v346;
              uint64_t v130 = v303;
              uint64_t v4 = v344;
            }
            else
            {
              uint64_t v310 = v128;
              v340(v125, v126, v327);
              uint64_t v315 = v127;
              __dstd = v125;
              uint64_t v152 = *(int *)(v127 + 20);
              uint64_t v153 = &v125[v152];
              uint64_t v154 = &v126[v152];
              uint64_t v155 = type metadata accessor for AspireHeSerializedGaloisKey(0);
              uint64_t v156 = *(void *)(v155 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v156 + 48))(v154, 1, v155))
              {
                uint64_t v157 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
                memcpy(v153, v154, *(void *)(*(void *)(v157 - 8) + 64));
              }
              else
              {
                *(void *)uint64_t v153 = *(void *)v154;
                v340(&v153[*(int *)(v155 + 20)], &v154[*(int *)(v155 + 20)], v327);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v156 + 56))(v153, 0, 1, v155);
              }
              uint64_t v177 = *(int *)(v315 + 24);
              uint64_t v178 = &__dstd[v177];
              uint64_t v179 = &v126[v177];
              uint64_t v180 = type metadata accessor for AspireHeSerializedRelinKey(0);
              uint64_t v296 = *(void *)(v180 - 8);
              uint64_t v130 = v303;
              uint64_t v181 = v128;
              uint64_t v4 = v344;
              uint64_t v8 = v345;
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v296 + 48))(v179, 1, v180))
              {
                uint64_t v182 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
                memcpy(v178, v179, *(void *)(*(void *)(v182 - 8) + 64));
                a3 = v346;
                uint64_t v123 = v338;
              }
              else
              {
                v340(v178, v179, v327);
                v288 = (void *)v180;
                uint64_t v292 = v178;
                uint64_t v202 = *(int *)(v180 + 20);
                unint64_t v203 = &v178[v202];
                uint64_t v204 = &v179[v202];
                uint64_t v205 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
                uint64_t v206 = *(void *)(v205 - 8);
                if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v206 + 48))(v204, 1, v205))
                {
                  uint64_t v207 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
                  memcpy(v203, v204, *(void *)(*(void *)(v207 - 8) + 64));
                  uint64_t v8 = v345;
                  a3 = v346;
                  uint64_t v123 = v338;
                  uint64_t v130 = v303;
                  uint64_t v181 = v310;
                  uint64_t v208 = v296;
                }
                else
                {
                  v340(v203, v204, v327);
                  uint64_t v231 = *(int *)(v205 + 20);
                  uint64_t v281 = v203;
                  uint64_t v285 = &v203[v231];
                  uint64_t v232 = &v204[v231];
                  uint64_t v233 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
                  uint64_t v234 = *(void *)(v233 - 8);
                  __src = v232;
                  int v235 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v234 + 48))(v232, 1, v233);
                  uint64_t v208 = v296;
                  if (v235)
                  {
                    uint64_t v236 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                    memcpy(v285, __src, *(void *)(*(void *)(v236 - 8) + 64));
                  }
                  else
                  {
                    *(void *)uint64_t v285 = *(void *)__src;
                    v340(&v285[*(int *)(v233 + 20)], &__src[*(int *)(v233 + 20)], v327);
                    (*(void (**)(char *, void, uint64_t, uint64_t))(v234 + 56))(v285, 0, 1, v233);
                  }
                  uint64_t v8 = v345;
                  a3 = v346;
                  uint64_t v123 = v338;
                  uint64_t v181 = v310;
                  (*(void (**)(char *, void, uint64_t, uint64_t))(v206 + 56))(v281, 0, 1, v205);
                  uint64_t v130 = v303;
                }
                (*(void (**)(char *, void, uint64_t, void *))(v208 + 56))(v292, 0, 1, v288);
              }
              (*(void (**)(char *, void, uint64_t, uint64_t))(v181 + 56))(__dstd, 0, 1, v315);
              uint64_t v10 = v348;
            }
            ((void (*)(char *, void, uint64_t, uint64_t))v130[7])(v123, 0, 1, v300);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v8 = *(_DWORD *)v9;
          *(_OWORD *)((char *)v8 + 8) = *(_OWORD *)((char *)v9 + 8);
          uint64_t v51 = (int *)type metadata accessor for AspireApiPIRRequest(0);
          uint64_t v52 = v51[6];
          uint64_t v53 = (char *)v8 + v52;
          uint64_t v54 = (char *)v9 + v52;
          uint64_t v55 = type metadata accessor for UnknownStorage();
          uint64_t v56 = v8;
          uint64_t v57 = *(void (**)(char *, char *, uint64_t))(*(void *)(v55 - 8) + 32);
          v57(v53, v54, v55);
          uint64_t v58 = v51[7];
          uint64_t v59 = (_OWORD *)((char *)v56 + v58);
          uint64_t v60 = (_OWORD *)((char *)v9 + v58);
          uint64_t v61 = type metadata accessor for AspirePirEncryptedIndices(0);
          uint64_t v62 = *(void *)(v61 - 8);
          __dstb = v57;
          uint64_t v328 = v55;
          if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v62 + 48))(v60, 1, v61))
          {
            uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
            memcpy(v59, v60, *(void *)(*(void *)(v63 - 8) + 64));
          }
          else
          {
            *uint64_t v59 = *v60;
            v57((char *)v59 + *(int *)(v61 + 24), (char *)v60 + *(int *)(v61 + 24), v55);
            (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v62 + 56))(v59, 0, 1, v61);
          }
          uint64_t v333 = v51;
          uint64_t v88 = v51[8];
          uint64_t v8 = v345;
          uint64_t v89 = (void *)((char *)v345 + v88);
          uint64_t v90 = (void *)((char *)v9 + v88);
          uint64_t v91 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
          uint64_t v92 = *(void *)(v91 - 8);
          v314 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v92 + 48);
          uint64_t v4 = v344;
          uint64_t v302 = (void (**)(char *, void, uint64_t, uint64_t))v92;
          if (v314((char *)v90, 1, v91))
          {
            uint64_t v93 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
            memcpy(v89, v90, *(void *)(*(void *)(v93 - 8) + 64));
          }
          else
          {
            *uint64_t v89 = *v90;
            *(_OWORD *)(v89 + 1) = *(_OWORD *)(v90 + 1);
            __dstb((char *)v89 + *(int *)(v91 + 24), (char *)v90 + *(int *)(v91 + 24), v328);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v92 + 56))(v89, 0, 1, v91);
          }
          *(_OWORD *)((char *)v345 + v333[9]) = *(_OWORD *)((char *)v9 + v333[9]);
          uint64_t v98 = v333[10];
          uint64_t v99 = (char *)v345 + v98;
          uint64_t v100 = (char *)v9 + v98;
          uint64_t v101 = type metadata accessor for AspireApiEvaluationKey(0);
          uint64_t v102 = *(void *)(v101 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v102 + 48))(v100, 1, v101))
          {
            uint64_t v103 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKey?);
            memcpy(v99, v100, *(void *)(*(void *)(v103 - 8) + 64));
            a3 = v346;
            uint64_t v10 = v348;
          }
          else
          {
            uint64_t v299 = v102;
            __dstb(v99, v100, v328);
            uint64_t v334 = v101;
            uint64_t v104 = *(int *)(v101 + 20);
            v295 = v99;
            uint64_t v105 = &v99[v104];
            uint64_t v106 = &v100[v104];
            if (v314(&v100[v104], 1, v91))
            {
              uint64_t v107 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
              memcpy(v105, v106, *(void *)(*(void *)(v107 - 8) + 64));
            }
            else
            {
              *(void *)uint64_t v105 = *(void *)v106;
              *(_OWORD *)(v105 + 8) = *(_OWORD *)(v106 + 8);
              __dstb(&v105[*(int *)(v91 + 24)], &v106[*(int *)(v91 + 24)], v328);
              v302[7](v105, 0, 1, v91);
            }
            uint64_t v131 = *(int *)(v101 + 24);
            v132 = v295;
            uint64_t v133 = &v295[v131];
            uint64_t v134 = &v100[v131];
            uint64_t v135 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
            uint64_t v136 = *(unsigned int (***)(const void *, uint64_t, uint64_t))(v135 - 8);
            uint64_t v137 = v299;
            if (v136[6](v134, 1, v135))
            {
              uint64_t v138 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
              memcpy(v133, v134, *(void *)(*(void *)(v138 - 8) + 64));
              a3 = v346;
              uint64_t v10 = v348;
              uint64_t v4 = v344;
              uint64_t v139 = v334;
            }
            else
            {
              uint64_t v305 = v136;
              __dstb(v133, v134, v328);
              uint64_t v311 = v135;
              uint64_t v316 = v133;
              uint64_t v158 = *(int *)(v135 + 20);
              uint64_t v159 = &v133[v158];
              uint64_t v160 = &v134[v158];
              uint64_t v161 = type metadata accessor for AspireHeSerializedGaloisKey(0);
              uint64_t v162 = *(void *)(v161 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v162 + 48))(v160, 1, v161))
              {
                uint64_t v163 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
                memcpy(v159, v160, *(void *)(*(void *)(v163 - 8) + 64));
              }
              else
              {
                *(void *)uint64_t v159 = *(void *)v160;
                __dstb(&v159[*(int *)(v161 + 20)], &v160[*(int *)(v161 + 20)], v328);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v162 + 56))(v159, 0, 1, v161);
              }
              uint64_t v183 = *(int *)(v311 + 24);
              uint64_t v184 = &v316[v183];
              uint64_t v185 = &v134[v183];
              uint64_t v186 = type metadata accessor for AspireHeSerializedRelinKey(0);
              uint64_t v187 = *(unsigned int (***)(const void *, uint64_t, uint64_t))(v186 - 8);
              uint64_t v10 = v348;
              uint64_t v4 = v344;
              if (v187[6](v185, 1, v186))
              {
                uint64_t v188 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
                memcpy(v184, v185, *(void *)(*(void *)(v188 - 8) + 64));
                a3 = v346;
                v132 = v295;
                uint64_t v139 = v334;
              }
              else
              {
                uint64_t v284 = v187;
                __dstb(v184, v185, v328);
                v289 = (void *)v186;
                uint64_t v293 = v184;
                uint64_t v209 = *(int *)(v186 + 20);
                uint64_t v210 = &v184[v209];
                uint64_t v211 = &v185[v209];
                uint64_t v212 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
                uint64_t v213 = *(void *)(v212 - 8);
                if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v213 + 48))(v211, 1, v212))
                {
                  uint64_t v214 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
                  memcpy(v210, v211, *(void *)(*(void *)(v214 - 8) + 64));
                  a3 = v346;
                  uint64_t v10 = v348;
                  v132 = v295;
                  uint64_t v139 = v334;
                  uint64_t v215 = v284;
                }
                else
                {
                  __dstb(v210, v211, v328);
                  uint64_t v237 = *(int *)(v212 + 20);
                  __srca = v210;
                  v282 = &v210[v237];
                  uint64_t v238 = &v211[v237];
                  uint64_t v239 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
                  uint64_t v240 = *(void *)(v239 - 8);
                  uint64_t v241 = v238;
                  int v242 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v240 + 48))(v238, 1, v239);
                  uint64_t v215 = v284;
                  if (v242)
                  {
                    uint64_t v243 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                    memcpy(v282, v241, *(void *)(*(void *)(v243 - 8) + 64));
                  }
                  else
                  {
                    *(void *)v282 = *(void *)v241;
                    __dstb(&v282[*(int *)(v239 + 20)], &v241[*(int *)(v239 + 20)], v328);
                    (*(void (**)(char *, void, uint64_t, uint64_t))(v240 + 56))(v282, 0, 1, v239);
                  }
                  a3 = v346;
                  v132 = v295;
                  uint64_t v139 = v334;
                  (*(void (**)(char *, void, uint64_t, uint64_t))(v213 + 56))(__srca, 0, 1, v212);
                  uint64_t v10 = v348;
                }
                ((void (*)(char *, void, uint64_t, void *))v215[7])(v293, 0, 1, v289);
              }
              ((void (*)(char *, void, uint64_t, uint64_t))v305[7])(v316, 0, 1, v311);
              uint64_t v137 = v299;
            }
            (*(void (**)(char *, void, uint64_t, uint64_t))(v137 + 56))(v132, 0, 1, v139);
          }
        }
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_102;
    }
LABEL_9:
    uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
    memcpy(v8, v9, *(void *)(*(void *)(v30 - 8) + 64));
    goto LABEL_102;
  }
  if (v14)
  {
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v8, type metadata accessor for AspireApiRequest.OneOf_Request);
    goto LABEL_9;
  }
  if (a1 != v4)
  {
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v8, type metadata accessor for AspireApiRequest.OneOf_Request);
    int v31 = swift_getEnumCaseMultiPayload();
    if (v31 == 2)
    {
      long long v71 = v9[1];
      *uint64_t v8 = *v9;
      v8[1] = v71;
      uint64_t v72 = *(int *)(type metadata accessor for AspireApiOPRFRequest(0) + 24);
      uint64_t v73 = (char *)v8 + v72;
      uint64_t v74 = (char *)v9 + v72;
      uint64_t v75 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v75 - 8) + 32))(v73, v74, v75);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      uint64_t v347 = a3;
      if (v31 == 1)
      {
        long long v32 = v9[1];
        *uint64_t v8 = *v9;
        v8[1] = v32;
        uint64_t v33 = type metadata accessor for AspireApiPECRequest(0);
        uint64_t v34 = *(int *)(v33 + 28);
        uint64_t v35 = (char *)v8 + v34;
        uint64_t v36 = (char *)v9 + v34;
        uint64_t v37 = type metadata accessor for UnknownStorage();
        uint64_t v38 = (void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 32);
        v342 = *v38;
        (*v38)(v35, v36, v37);
        uint64_t v341 = v33;
        uint64_t v39 = *(int *)(v33 + 32);
        uint64_t v40 = (void *)((char *)v8 + v39);
        uint64_t v41 = (void *)((char *)v9 + v39);
        uint64_t v42 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
        uint64_t v43 = *(void *)(v42 - 8);
        __dsta = *(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48);
        uint64_t v336 = v37;
        if (__dsta((char *)v41, 1, v42))
        {
          uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
          memcpy(v40, v41, *(void *)(*(void *)(v44 - 8) + 64));
          uint64_t v45 = v342;
        }
        else
        {
          *uint64_t v40 = *v41;
          *(_OWORD *)(v40 + 1) = *(_OWORD *)(v41 + 1);
          uint64_t v108 = v37;
          uint64_t v45 = v342;
          v342((char *)v40 + *(int *)(v42 + 24), (char *)v41 + *(int *)(v42 + 24), v108);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
        }
        uint64_t v109 = *(int *)(v341 + 36);
        uint64_t v110 = (char *)v8 + v109;
        uint64_t v111 = (char *)v9 + v109;
        uint64_t v112 = type metadata accessor for AspireApiEvaluationKey(0);
        uint64_t v113 = *(unsigned int (***)(const void *, uint64_t, uint64_t))(v112 - 8);
        if (v113[6](v111, 1, v112))
        {
          uint64_t v114 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKey?);
          memcpy(v110, v111, *(void *)(*(void *)(v114 - 8) + 64));
          a3 = v347;
        }
        else
        {
          uint64_t v304 = v113;
          v45(v110, v111, v336);
          uint64_t v140 = *(int *)(v112 + 20);
          uint64_t v309 = v110;
          uint64_t v141 = &v110[v140];
          uint64_t v142 = &v111[v140];
          if (__dsta(&v111[v140], 1, v42))
          {
            uint64_t v143 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
            memcpy(v141, v142, *(void *)(*(void *)(v143 - 8) + 64));
          }
          else
          {
            *(void *)uint64_t v141 = *(void *)v142;
            *(_OWORD *)(v141 + 8) = *(_OWORD *)(v142 + 8);
            v45(&v141[*(int *)(v42 + 24)], &v142[*(int *)(v42 + 24)], v336);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v43 + 56))(v141, 0, 1, v42);
          }
          uint64_t v169 = *(int *)(v112 + 24);
          uint64_t v170 = v309;
          uint64_t v171 = &v309[v169];
          uint64_t v172 = &v111[v169];
          uint64_t v173 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
          uint64_t v174 = *(void *)(v173 - 8);
          uint64_t v175 = v304;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v174 + 48))(v172, 1, v173))
          {
            uint64_t v176 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
            memcpy(v171, v172, *(void *)(*(void *)(v176 - 8) + 64));
            a3 = v347;
          }
          else
          {
            uint64_t v301 = v174;
            v342(v171, v172, v336);
            uint64_t v197 = *(int *)(v173 + 20);
            uint64_t v318 = v171;
            __dste = &v171[v197];
            uint64_t v330 = v173;
            uint64_t v198 = &v172[v197];
            uint64_t v199 = type metadata accessor for AspireHeSerializedGaloisKey(0);
            uint64_t v200 = *(void *)(v199 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v200 + 48))(v198, 1, v199))
            {
              uint64_t v201 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
              memcpy(__dste, v198, *(void *)(*(void *)(v201 - 8) + 64));
            }
            else
            {
              *(void *)__dste = *(void *)v198;
              v342(&__dste[*(int *)(v199 + 20)], &v198[*(int *)(v199 + 20)], v336);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v200 + 56))(__dste, 0, 1, v199);
            }
            uint64_t v223 = *(int *)(v330 + 24);
            v224 = v171;
            uint64_t v225 = &v171[v223];
            v226 = &v172[v223];
            uint64_t v227 = type metadata accessor for AspireHeSerializedRelinKey(0);
            uint64_t v228 = *(void *)(v227 - 8);
            a3 = v347;
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v228 + 48))(v226, 1, v227))
            {
              uint64_t v229 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
              memcpy(v225, v226, *(void *)(*(void *)(v229 - 8) + 64));
              uint64_t v230 = v301;
            }
            else
            {
              v342(v225, v226, v336);
              uint64_t v297 = v227;
              uint64_t v250 = *(int *)(v227 + 20);
              __dstg = v225;
              v251 = &v225[v250];
              uint64_t v252 = &v226[v250];
              uint64_t v253 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
              uint64_t v254 = *(void *)(v253 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v254 + 48))(v252, 1, v253))
              {
                uint64_t v255 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
                memcpy(v251, v252, *(void *)(*(void *)(v255 - 8) + 64));
                a3 = v347;
                uint64_t v256 = v228;
                uint64_t v230 = v301;
              }
              else
              {
                v342(v251, v252, v336);
                uint64_t v269 = *(int *)(v253 + 20);
                uint64_t v286 = v251;
                uint64_t v290 = &v251[v269];
                uint64_t v270 = &v252[v269];
                uint64_t v271 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
                uint64_t v272 = *(void *)(v271 - 8);
                v283 = v270;
                int v273 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v272 + 48))(v270, 1, v271);
                uint64_t v256 = v228;
                uint64_t v230 = v301;
                if (v273)
                {
                  uint64_t v274 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                  memcpy(v290, v283, *(void *)(*(void *)(v274 - 8) + 64));
                }
                else
                {
                  *(void *)uint64_t v290 = *(void *)v283;
                  v342(&v290[*(int *)(v271 + 20)], &v283[*(int *)(v271 + 20)], v336);
                  (*(void (**)(char *, void, uint64_t, uint64_t))(v272 + 56))(v290, 0, 1, v271);
                }
                a3 = v347;
                (*(void (**)(char *, void, uint64_t, uint64_t))(v254 + 56))(v286, 0, 1, v253);
                v224 = v318;
              }
              (*(void (**)(char *, void, uint64_t, uint64_t))(v256 + 56))(__dstg, 0, 1, v297);
            }
            (*(void (**)(char *, void, uint64_t, uint64_t))(v230 + 56))(v224, 0, 1, v330);
            uint64_t v175 = v304;
            uint64_t v170 = v309;
          }
          ((void (*)(char *, void, uint64_t, uint64_t))v175[7])(v170, 0, 1, v112);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v8 = *(_DWORD *)v9;
        *(_OWORD *)((char *)v8 + 8) = *(_OWORD *)((char *)v9 + 8);
        uint64_t v76 = type metadata accessor for AspireApiPIRRequest(0);
        uint64_t v77 = *(int *)(v76 + 24);
        uint64_t v78 = (char *)v8 + v77;
        uint64_t v79 = (char *)v9 + v77;
        uint64_t v80 = type metadata accessor for UnknownStorage();
        uint64_t v81 = (void (**)(char *, char *, uint64_t))(*(void *)(v80 - 8) + 32);
        uint64_t v337 = *v81;
        (*v81)(v78, v79, v80);
        uint64_t v332 = (int *)v76;
        uint64_t v82 = *(int *)(v76 + 28);
        uint64_t v83 = (_OWORD *)((char *)v8 + v82);
        uint64_t v84 = (_OWORD *)((char *)v9 + v82);
        uint64_t v85 = type metadata accessor for AspirePirEncryptedIndices(0);
        uint64_t v86 = *(void *)(v85 - 8);
        uint64_t v343 = v80;
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v86 + 48))(v84, 1, v85))
        {
          uint64_t v87 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
          memcpy(v83, v84, *(void *)(*(void *)(v87 - 8) + 64));
        }
        else
        {
          *uint64_t v83 = *v84;
          v337((char *)v83 + *(int *)(v85 + 24), (char *)v84 + *(int *)(v85 + 24), v80);
          (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v86 + 56))(v83, 0, 1, v85);
        }
        uint64_t v115 = v332[8];
        uint64_t v116 = (void *)((char *)v8 + v115);
        uint64_t v117 = (void *)((char *)v9 + v115);
        uint64_t v118 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
        uint64_t v119 = *(void *)(v118 - 8);
        v329 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v119 + 48);
        __dstc = (void (**)(char *, void, uint64_t, uint64_t))v119;
        if (v329((char *)v117, 1, v118))
        {
          uint64_t v120 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
          memcpy(v116, v117, *(void *)(*(void *)(v120 - 8) + 64));
          uint64_t v121 = v80;
        }
        else
        {
          *uint64_t v116 = *v117;
          *(_OWORD *)(v116 + 1) = *(_OWORD *)(v117 + 1);
          uint64_t v144 = *(int *)(v118 + 24);
          uint64_t v145 = (char *)v117 + v144;
          uint64_t v121 = v80;
          v337((char *)v116 + v144, v145, v80);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v119 + 56))(v116, 0, 1, v118);
        }
        *(_OWORD *)((char *)v8 + v332[9]) = *(_OWORD *)((char *)v9 + v332[9]);
        uint64_t v146 = v332[10];
        uint64_t v147 = (char *)v8 + v146;
        uint64_t v148 = (char *)v9 + v146;
        uint64_t v149 = type metadata accessor for AspireApiEvaluationKey(0);
        uint64_t v150 = *(void *)(v149 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v150 + 48))(v148, 1, v149))
        {
          uint64_t v151 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKey?);
          memcpy(v147, v148, *(void *)(*(void *)(v151 - 8) + 64));
          a3 = v347;
        }
        else
        {
          uint64_t v312 = v150;
          v337(v147, v148, v121);
          uint64_t v335 = v149;
          uint64_t v164 = *(int *)(v149 + 20);
          uint64_t v165 = v121;
          uint64_t v317 = v147;
          uint64_t v166 = &v147[v164];
          uint64_t v167 = &v148[v164];
          if (v329(&v148[v164], 1, v118))
          {
            uint64_t v168 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
            memcpy(v166, v167, *(void *)(*(void *)(v168 - 8) + 64));
          }
          else
          {
            *(void *)uint64_t v166 = *(void *)v167;
            *(_OWORD *)(v166 + 8) = *(_OWORD *)(v167 + 8);
            v337(&v166[*(int *)(v118 + 24)], &v167[*(int *)(v118 + 24)], v165);
            __dstc[7](v166, 0, 1, v118);
          }
          uint64_t v189 = *(int *)(v149 + 24);
          v190 = v317;
          uint64_t v191 = &v317[v189];
          uint64_t v192 = &v148[v189];
          uint64_t v193 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
          uint64_t v194 = *(unsigned int (***)(const void *, uint64_t, uint64_t))(v193 - 8);
          if (v194[6](v192, 1, v193))
          {
            uint64_t v195 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
            memcpy(v191, v192, *(void *)(*(void *)(v195 - 8) + 64));
            a3 = v347;
            uint64_t v196 = v149;
          }
          else
          {
            __dstf = v194;
            uint64_t v216 = v337;
            v337(v191, v192, v343);
            uint64_t v331 = v193;
            uint64_t v217 = *(int *)(v193 + 20);
            uint64_t v339 = v191;
            uint64_t v306 = &v191[v217];
            uint64_t v218 = &v192[v217];
            uint64_t v219 = type metadata accessor for AspireHeSerializedGaloisKey(0);
            uint64_t v220 = *(void *)(v219 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v220 + 48))(v218, 1, v219))
            {
              uint64_t v221 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
              memcpy(v306, v218, *(void *)(*(void *)(v221 - 8) + 64));
            }
            else
            {
              *(void *)uint64_t v306 = *(void *)v218;
              v216(&v306[*(int *)(v219 + 20)], &v218[*(int *)(v219 + 20)], v343);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v220 + 56))(v306, 0, 1, v219);
            }
            uint64_t v222 = v216;
            uint64_t v244 = *(int *)(v331 + 24);
            uint64_t v245 = &v339[v244];
            v246 = &v192[v244];
            uint64_t v247 = type metadata accessor for AspireHeSerializedRelinKey(0);
            uint64_t v248 = *(void *)(v247 - 8);
            a3 = v347;
            v190 = v317;
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v248 + 48))(v246, 1, v247))
            {
              uint64_t v249 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
              memcpy(v245, v246, *(void *)(*(void *)(v249 - 8) + 64));
              uint64_t v196 = v335;
            }
            else
            {
              uint64_t v298 = v248;
              v222(v245, v246, v343);
              v307 = v245;
              uint64_t v257 = *(int *)(v247 + 20);
              uint64_t v258 = &v245[v257];
              v259 = &v246[v257];
              uint64_t v260 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
              uint64_t v261 = *(void *)(v260 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v261 + 48))(v259, 1, v260))
              {
                uint64_t v262 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
                memcpy(v258, v259, *(void *)(*(void *)(v262 - 8) + 64));
                a3 = v347;
                uint64_t v196 = v335;
                uint64_t v263 = v298;
              }
              else
              {
                v222(v258, v259, v343);
                uint64_t v275 = *(int *)(v260 + 20);
                uint64_t v291 = &v258[v275];
                v294 = v258;
                v276 = &v259[v275];
                uint64_t v277 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
                uint64_t v287 = *(void (***)(char *, void, uint64_t, uint64_t))(v277 - 8);
                if (((unsigned int (*)(char *, uint64_t, uint64_t))v287[6])(v276, 1, v277))
                {
                  uint64_t v278 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                  memcpy(v291, v276, *(void *)(*(void *)(v278 - 8) + 64));
                }
                else
                {
                  *(void *)uint64_t v291 = *(void *)v276;
                  v222(&v291[*(int *)(v277 + 20)], &v276[*(int *)(v277 + 20)], v343);
                  v287[7](v291, 0, 1, v277);
                }
                a3 = v347;
                uint64_t v196 = v335;
                uint64_t v263 = v298;
                (*(void (**)(char *, void, uint64_t, uint64_t))(v261 + 56))(v294, 0, 1, v260);
              }
              (*(void (**)(char *, void, uint64_t, uint64_t))(v263 + 56))(v307, 0, 1, v247);
            }
            ((void (*)(char *, void, uint64_t, uint64_t))__dstf[7])(v339, 0, 1, v331);
          }
          (*(void (**)(char *, void, uint64_t, uint64_t))(v312 + 56))(v190, 0, 1, v196);
        }
      }
      swift_storeEnumTagMultiPayload();
    }
  }
LABEL_102:
  uint64_t v264 = *(int *)(a3 + 24);
  uint64_t v265 = (char *)a1 + v264;
  v266 = (char *)v4 + v264;
  uint64_t v267 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v267 - 8) + 40))(v265, v266, v267);
  return a1;
}

uint64_t getEnumTagSinglePayload for AspireApiRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_249DC2648);
}

uint64_t sub_249DC2648(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 20);
      int v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = type metadata accessor for UnknownStorage();
      int v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 24);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t storeEnumTagSinglePayload for AspireApiRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_249DC278C);
}

uint64_t sub_249DC278C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 20);
      int v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = type metadata accessor for UnknownStorage();
      int v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 24);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void type metadata completion function for AspireApiRequest()
{
  type metadata accessor for AspireHeEvaluationKeyConfig?(319, &lazy cache variable for type metadata for AspireApiRequest.OneOf_Request?, (void (*)(uint64_t))type metadata accessor for AspireApiRequest.OneOf_Request);
  if (v0 <= 0x3F)
  {
    type metadata accessor for UnknownStorage();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for AspireApiRequest.OneOf_Request(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v23 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v23 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v24 = *a2;
      unint64_t v25 = a2[1];
      outlined copy of Data._Representation(*a2, v25);
      *a1 = v24;
      a1[1] = v25;
      uint64_t v26 = a2[2];
      unint64_t v27 = a2[3];
      outlined copy of Data._Representation(v26, v27);
      a1[2] = v26;
      a1[3] = v27;
      uint64_t v28 = *(int *)(type metadata accessor for AspireApiOPRFRequest(0) + 24);
      uint64_t v29 = (char *)a1 + v28;
      uint64_t v30 = (char *)a2 + v28;
      uint64_t v31 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 16))(v29, v30, v31);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v7 = a2[1];
      *a1 = *a2;
      a1[1] = v7;
      uint64_t v8 = a2[2];
      unint64_t v9 = a2[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v8, v9);
      a1[2] = v8;
      a1[3] = v9;
      uint64_t v10 = type metadata accessor for AspireApiPECRequest(0);
      uint64_t v11 = *(int *)(v10 + 28);
      int v12 = (char *)a1 + v11;
      uint64_t v13 = (char *)a2 + v11;
      uint64_t v14 = type metadata accessor for UnknownStorage();
      uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16);
      v15(v12, v13, v14);
      uint64_t v201 = a1;
      __dst = (int *)v10;
      uint64_t v16 = *(int *)(v10 + 32);
      unint64_t v17 = (uint64_t *)((char *)a1 + v16);
      uint64_t v18 = (uint64_t *)((char *)a2 + v16);
      uint64_t v19 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
      uint64_t v20 = *(void *)(v19 - 8);
      uint64_t v191 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48);
      uint64_t v195 = v19;
      if (v191((char *)v18, 1, v19))
      {
        uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
        memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
        uint64_t v22 = v15;
      }
      else
      {
        uint64_t v186 = v14;
        uint64_t v46 = v18[1];
        *unint64_t v17 = *v18;
        unint64_t v47 = v18[2];
        outlined copy of Data._Representation(v46, v47);
        v17[1] = v46;
        v17[2] = v47;
        uint64_t v14 = v186;
        v15((char *)v17 + *(int *)(v19 + 24), (char *)v18 + *(int *)(v19 + 24), v186);
        uint64_t v22 = v15;
        (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      }
      a1 = v201;
      uint64_t v48 = __dst[9];
      __dstb = (char *)v201 + v48;
      uint64_t v49 = (char *)a2 + v48;
      uint64_t v50 = type metadata accessor for AspireApiEvaluationKey(0);
      uint64_t v51 = *(void *)(v50 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48))(v49, 1, v50))
      {
        uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKey?);
        memcpy(__dstb, v49, *(void *)(*(void *)(v52 - 8) + 64));
      }
      else
      {
        uint64_t v179 = v51;
        uint64_t v181 = v20;
        uint64_t v63 = v22;
        v22(__dstb, v49, v14);
        uint64_t v184 = v50;
        uint64_t v64 = *(int *)(v50 + 20);
        uint64_t v65 = &__dstb[v64];
        uint64_t v66 = v14;
        uint64_t v67 = &v49[v64];
        if (v191(&v49[v64], 1, v195))
        {
          uint64_t v68 = v22;
          uint64_t v69 = v66;
          uint64_t v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
          memcpy(v65, v67, *(void *)(*(void *)(v70 - 8) + 64));
        }
        else
        {
          uint64_t v91 = *((void *)v67 + 1);
          *(void *)uint64_t v65 = *(void *)v67;
          unint64_t v92 = *((void *)v67 + 2);
          outlined copy of Data._Representation(v91, v92);
          *((void *)v65 + 1) = v91;
          *((void *)v65 + 2) = v92;
          uint64_t v69 = v66;
          uint64_t v68 = v63;
          v63(&v65[*(int *)(v195 + 24)], &v67[*(int *)(v195 + 24)], v66);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v181 + 56))(v65, 0, 1, v195);
        }
        uint64_t v93 = v184;
        a1 = v201;
        uint64_t v94 = *(int *)(v184 + 24);
        uint64_t v95 = &__dstb[v94];
        uint64_t v96 = &v49[v94];
        uint64_t v97 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
        uint64_t v98 = *(void *)(v97 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v98 + 48))(v96, 1, v97))
        {
          uint64_t v99 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
          memcpy(v95, v96, *(void *)(*(void *)(v99 - 8) + 64));
          uint64_t v100 = v179;
        }
        else
        {
          uint64_t v198 = v98;
          uint64_t v110 = v68;
          v68(v95, v96, v69);
          uint64_t v111 = *(int *)(v97 + 20);
          uint64_t v202 = v95;
          uint64_t v112 = &v95[v111];
          uint64_t v113 = &v96[v111];
          uint64_t v114 = type metadata accessor for AspireHeSerializedGaloisKey(0);
          uint64_t v115 = *(void *)(v114 - 8);
          uint64_t v188 = v69;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v115 + 48))(v113, 1, v114))
          {
            uint64_t v116 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
            memcpy(v112, v113, *(void *)(*(void *)(v116 - 8) + 64));
          }
          else
          {
            *(void *)uint64_t v112 = *(void *)v113;
            uint64_t v124 = *(int *)(v114 + 20);
            uint64_t v193 = &v112[v124];
            uint64_t v125 = &v113[v124];
            swift_bridgeObjectRetain();
            v110(v193, v125, v69);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v115 + 56))(v112, 0, 1, v114);
          }
          uint64_t v126 = v202;
          uint64_t v127 = *(int *)(v97 + 24);
          uint64_t v128 = &v202[v127];
          uint64_t v129 = &v96[v127];
          uint64_t v130 = type metadata accessor for AspireHeSerializedRelinKey(0);
          uint64_t v131 = *(void *)(v130 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v131 + 48))(v129, 1, v130))
          {
            uint64_t v132 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
            memcpy(v128, v129, *(void *)(*(void *)(v132 - 8) + 64));
            uint64_t v100 = v179;
            uint64_t v93 = v184;
          }
          else
          {
            uint64_t v183 = v110;
            v110(v128, v129, v188);
            uint64_t v142 = *(int *)(v130 + 20);
            uint64_t v143 = &v128[v142];
            uint64_t v144 = &v129[v142];
            uint64_t v145 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
            uint64_t v146 = *(void *)(v145 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v146 + 48))(v144, 1, v145))
            {
              uint64_t v147 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
              memcpy(v143, v144, *(void *)(*(void *)(v147 - 8) + 64));
              uint64_t v93 = v184;
              uint64_t v126 = v202;
            }
            else
            {
              v110(v143, v144, v188);
              uint64_t v178 = v145;
              uint64_t v156 = *(int *)(v145 + 20);
              uint64_t v194 = v143;
              uint64_t v157 = &v143[v156];
              uint64_t v158 = &v144[v156];
              uint64_t v159 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
              uint64_t v160 = *(void *)(v159 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v160 + 48))(v158, 1, v159))
              {
                uint64_t v161 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                memcpy(v157, v158, *(void *)(*(void *)(v161 - 8) + 64));
              }
              else
              {
                *(void *)uint64_t v157 = *(void *)v158;
                uint64_t v168 = *(int *)(v159 + 20);
                uint64_t v176 = &v157[v168];
                uint64_t v169 = &v158[v168];
                swift_bridgeObjectRetain();
                v183(v176, v169, v188);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v160 + 56))(v157, 0, 1, v159);
              }
              uint64_t v93 = v184;
              uint64_t v126 = v202;
              (*(void (**)(char *, void, uint64_t, uint64_t))(v146 + 56))(v194, 0, 1, v178);
            }
            (*(void (**)(char *, void, uint64_t, uint64_t))(v131 + 56))(v128, 0, 1, v130);
            uint64_t v100 = v179;
          }
          (*(void (**)(char *, void, uint64_t, uint64_t))(v198 + 56))(v126, 0, 1, v97);
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v100 + 56))(__dstb, 0, 1, v93);
      }
    }
    else
    {
      *(_DWORD *)a1 = *(_DWORD *)a2;
      uint64_t v32 = a2[1];
      unint64_t v33 = a2[2];
      outlined copy of Data._Representation(v32, v33);
      a1[1] = v32;
      a1[2] = v33;
      uint64_t v34 = (int *)type metadata accessor for AspireApiPIRRequest(0);
      uint64_t v35 = v34[6];
      uint64_t v36 = (char *)a1 + v35;
      uint64_t v37 = (char *)a2 + v35;
      uint64_t v38 = type metadata accessor for UnknownStorage();
      uint64_t v39 = *(void (**)(char *, char *, uint64_t))(*(void *)(v38 - 8) + 16);
      v39(v36, v37, v38);
      uint64_t v40 = v34[7];
      uint64_t v41 = (uint64_t *)((char *)a1 + v40);
      uint64_t v42 = (uint64_t *)((char *)a2 + v40);
      uint64_t v43 = type metadata accessor for AspirePirEncryptedIndices(0);
      uint64_t v44 = *(void *)(v43 - 8);
      __dsta = v39;
      uint64_t v200 = v38;
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v44 + 48))(v42, 1, v43))
      {
        uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
        memcpy(v41, v42, *(void *)(*(void *)(v45 - 8) + 64));
      }
      else
      {
        uint64_t v53 = v42[1];
        void *v41 = *v42;
        v41[1] = v53;
        uint64_t v54 = *(int *)(v43 + 24);
        uint64_t v196 = (char *)v41 + v54;
        uint64_t v55 = (char *)v42 + v54;
        swift_bridgeObjectRetain();
        v39(v196, v55, v38);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v44 + 56))(v41, 0, 1, v43);
      }
      uint64_t v56 = v34[8];
      uint64_t v57 = (uint64_t *)((char *)a1 + v56);
      uint64_t v58 = (uint64_t *)((char *)a2 + v56);
      uint64_t v59 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
      uint64_t v60 = *(void *)(v59 - 8);
      uint64_t v197 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v60 + 48);
      uint64_t v187 = v60;
      if (v197((char *)v58, 1, v59))
      {
        uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
        memcpy(v57, v58, *(void *)(*(void *)(v61 - 8) + 64));
        uint64_t v62 = __dsta;
      }
      else
      {
        uint64_t v71 = v58[1];
        *uint64_t v57 = *v58;
        unint64_t v72 = v58[2];
        outlined copy of Data._Representation(v71, v72);
        v57[1] = v71;
        v57[2] = v72;
        uint64_t v62 = __dsta;
        __dsta((char *)v57 + *(int *)(v59 + 24), (char *)v58 + *(int *)(v59 + 24), v200);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v60 + 56))(v57, 0, 1, v59);
      }
      uint64_t v73 = v34[9];
      uint64_t v74 = (uint64_t *)((char *)a1 + v73);
      uint64_t v75 = (uint64_t *)((char *)a2 + v73);
      uint64_t v76 = v75[1];
      *uint64_t v74 = *v75;
      v74[1] = v76;
      uint64_t v77 = v34[10];
      uint64_t v78 = (char *)a1 + v77;
      uint64_t v79 = (char *)a2 + v77;
      uint64_t v80 = type metadata accessor for AspireApiEvaluationKey(0);
      uint64_t v81 = *(void *)(v80 - 8);
      uint64_t v82 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v81 + 48);
      swift_bridgeObjectRetain();
      if (v82(v79, 1, v80))
      {
        uint64_t v83 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKey?);
        memcpy(v78, v79, *(void *)(*(void *)(v83 - 8) + 64));
      }
      else
      {
        uint64_t v180 = v81;
        uint64_t v84 = v200;
        v62(v78, v79, v200);
        uint64_t v182 = v80;
        uint64_t v185 = v78;
        uint64_t v85 = *(int *)(v80 + 20);
        uint64_t v86 = &v78[v85];
        uint64_t v87 = &v79[v85];
        if (v197(&v79[v85], 1, v59))
        {
          uint64_t v88 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
          memcpy(v86, v87, *(void *)(*(void *)(v88 - 8) + 64));
          uint64_t v89 = v80;
          uint64_t v90 = v185;
        }
        else
        {
          uint64_t v101 = *((void *)v87 + 1);
          *(void *)uint64_t v86 = *(void *)v87;
          unint64_t v102 = *((void *)v87 + 2);
          outlined copy of Data._Representation(v101, v102);
          *((void *)v86 + 1) = v101;
          *((void *)v86 + 2) = v102;
          uint64_t v84 = v200;
          v62(&v86[*(int *)(v59 + 24)], &v87[*(int *)(v59 + 24)], v200);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v187 + 56))(v86, 0, 1, v59);
          uint64_t v89 = v182;
          uint64_t v90 = v185;
        }
        uint64_t v103 = *(int *)(v89 + 24);
        uint64_t v104 = &v90[v103];
        uint64_t v105 = &v79[v103];
        uint64_t v106 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
        uint64_t v107 = *(void *)(v106 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v107 + 48))(v105, 1, v106))
        {
          uint64_t v108 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
          memcpy(v104, v105, *(void *)(*(void *)(v108 - 8) + 64));
          uint64_t v109 = v180;
        }
        else
        {
          uint64_t v192 = v107;
          v62(v104, v105, v84);
          uint64_t v117 = *(int *)(v106 + 20);
          uint64_t v199 = v104;
          uint64_t v118 = &v104[v117];
          uint64_t v119 = &v105[v117];
          uint64_t v120 = type metadata accessor for AspireHeSerializedGaloisKey(0);
          uint64_t v121 = v62;
          uint64_t v122 = *(void *)(v120 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v122 + 48))(v119, 1, v120))
          {
            uint64_t v123 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
            memcpy(v118, v119, *(void *)(*(void *)(v123 - 8) + 64));
          }
          else
          {
            *(void *)uint64_t v118 = *(void *)v119;
            uint64_t v133 = *(int *)(v120 + 20);
            uint64_t v189 = &v118[v133];
            uint64_t v134 = &v119[v133];
            swift_bridgeObjectRetain();
            v121(v189, v134, v84);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v122 + 56))(v118, 0, 1, v120);
          }
          uint64_t v89 = v182;
          uint64_t v135 = *(int *)(v106 + 24);
          uint64_t v136 = &v199[v135];
          uint64_t v137 = &v105[v135];
          uint64_t v138 = type metadata accessor for AspireHeSerializedRelinKey(0);
          uint64_t v139 = *(void *)(v138 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v139 + 48))(v137, 1, v138))
          {
            uint64_t v140 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
            memcpy(v136, v137, *(void *)(*(void *)(v140 - 8) + 64));
            uint64_t v90 = v185;
            uint64_t v109 = v180;
            uint64_t v141 = v199;
          }
          else
          {
            uint64_t v190 = v139;
            __dsta(v136, v137, v200);
            uint64_t v148 = *(int *)(v138 + 20);
            uint64_t v177 = v136;
            uint64_t v149 = &v136[v148];
            uint64_t v150 = &v137[v148];
            uint64_t v151 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
            uint64_t v152 = *(void *)(v151 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v152 + 48))(v150, 1, v151))
            {
              uint64_t v153 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
              memcpy(v149, v150, *(void *)(*(void *)(v153 - 8) + 64));
              uint64_t v154 = v177;
              uint64_t v109 = v180;
              uint64_t v141 = v199;
              uint64_t v155 = v190;
            }
            else
            {
              __dsta(v149, v150, v200);
              uint64_t v174 = v151;
              uint64_t v175 = v149;
              uint64_t v162 = *(int *)(v151 + 20);
              uint64_t v163 = &v149[v162];
              uint64_t v164 = &v150[v162];
              uint64_t v165 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
              uint64_t v166 = *(void *)(v165 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v166 + 48))(v164, 1, v165))
              {
                uint64_t v167 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                memcpy(v163, v164, *(void *)(*(void *)(v167 - 8) + 64));
              }
              else
              {
                *(void *)uint64_t v163 = *(void *)v164;
                uint64_t v170 = *(int *)(v165 + 20);
                uint64_t v173 = &v163[v170];
                uint64_t v171 = &v164[v170];
                swift_bridgeObjectRetain();
                __dsta(v173, v171, v200);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v166 + 56))(v163, 0, 1, v165);
              }
              uint64_t v154 = v177;
              uint64_t v109 = v180;
              uint64_t v141 = v199;
              uint64_t v155 = v190;
              (*(void (**)(char *, void, uint64_t, uint64_t))(v152 + 56))(v175, 0, 1, v174);
            }
            (*(void (**)(char *, void, uint64_t, uint64_t))(v155 + 56))(v154, 0, 1, v138);
            uint64_t v90 = v185;
          }
          (*(void (**)(char *, void, uint64_t, uint64_t))(v192 + 56))(v141, 0, 1, v106);
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v109 + 56))(v90, 0, 1, v89);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for AspireApiRequest.OneOf_Request(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch(result)
  {
    case 2:
      outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
      outlined consume of Data._Representation(*(void *)(a1 + 16), *(void *)(a1 + 24));
      uint64_t v15 = a1 + *(int *)(type metadata accessor for AspireApiOPRFRequest(0) + 24);
      uint64_t v16 = type metadata accessor for UnknownStorage();
      unint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8);
      uint64_t v18 = v16;
      uint64_t v19 = v15;
      goto LABEL_13;
    case 1:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of Data._Representation(*(void *)(a1 + 16), *(void *)(a1 + 24));
      uint64_t v20 = (int *)type metadata accessor for AspireApiPECRequest(0);
      uint64_t v21 = a1 + v20[7];
      uint64_t v5 = type metadata accessor for UnknownStorage();
      uint64_t v37 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
      v37(v21, v5);
      uint64_t v22 = a1 + v20[8];
      uint64_t v23 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
      uint64_t v24 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 48);
      if (!v24(v22, 1, v23))
      {
        outlined consume of Data._Representation(*(void *)(v22 + 8), *(void *)(v22 + 16));
        v37(v22 + *(int *)(v23 + 24), v5);
      }
      uint64_t v11 = a1 + v20[9];
      uint64_t v25 = type metadata accessor for AspireApiEvaluationKey(0);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 48))(v11, 1, v25);
      if (!result)
      {
        v37(v11, v5);
        uint64_t v26 = v11 + *(int *)(v25 + 20);
        if (!v24(v26, 1, v23))
        {
          outlined consume of Data._Representation(*(void *)(v26 + 8), *(void *)(v26 + 16));
          v37(v26 + *(int *)(v23 + 24), v5);
        }
        uint64_t v14 = *(int *)(v25 + 24);
        goto LABEL_22;
      }
      break;
    case 0:
      outlined consume of Data._Representation(*(void *)(a1 + 8), *(void *)(a1 + 16));
      uint64_t v3 = (int *)type metadata accessor for AspireApiPIRRequest(0);
      uint64_t v4 = a1 + v3[6];
      uint64_t v5 = type metadata accessor for UnknownStorage();
      uint64_t v37 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
      v37(v4, v5);
      uint64_t v6 = a1 + v3[7];
      uint64_t v7 = type metadata accessor for AspirePirEncryptedIndices(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7))
      {
        swift_bridgeObjectRelease();
        v37(v6 + *(int *)(v7 + 24), v5);
      }
      uint64_t v8 = a1 + v3[8];
      uint64_t v9 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
      uint64_t v10 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48);
      if (!v10(v8, 1, v9))
      {
        outlined consume of Data._Representation(*(void *)(v8 + 8), *(void *)(v8 + 16));
        v37(v8 + *(int *)(v9 + 24), v5);
      }
      swift_bridgeObjectRelease();
      uint64_t v11 = a1 + v3[10];
      uint64_t v12 = type metadata accessor for AspireApiEvaluationKey(0);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48))(v11, 1, v12);
      if (!result)
      {
        v37(v11, v5);
        uint64_t v13 = v11 + *(int *)(v12 + 20);
        if (!v10(v13, 1, v9))
        {
          outlined consume of Data._Representation(*(void *)(v13 + 8), *(void *)(v13 + 16));
          v37(v13 + *(int *)(v9 + 24), v5);
        }
        uint64_t v14 = *(int *)(v12 + 24);
LABEL_22:
        uint64_t v27 = v11 + v14;
        uint64_t v28 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 48))(v27, 1, v28);
        if (result) {
          return result;
        }
        v37(v27, v5);
        uint64_t v29 = v27 + *(int *)(v28 + 20);
        uint64_t v30 = type metadata accessor for AspireHeSerializedGaloisKey(0);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 48))(v29, 1, v30))
        {
          swift_bridgeObjectRelease();
          v37(v29 + *(int *)(v30 + 20), v5);
        }
        uint64_t v31 = v27 + *(int *)(v28 + 24);
        uint64_t v32 = type metadata accessor for AspireHeSerializedRelinKey(0);
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 48))(v31, 1, v32);
        if (result) {
          return result;
        }
        v37(v31, v5);
        uint64_t v33 = v31 + *(int *)(v32 + 20);
        uint64_t v34 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 48))(v33, 1, v34);
        if (result) {
          return result;
        }
        v37(v33, v5);
        uint64_t v35 = v33 + *(int *)(v34 + 20);
        uint64_t v36 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 48))(v35, 1, v36);
        if (result) {
          return result;
        }
        swift_bridgeObjectRelease();
        uint64_t v19 = v35 + *(int *)(v36 + 20);
        uint64_t v18 = v5;
        unint64_t v17 = (uint64_t (*)(uint64_t, uint64_t))v37;
LABEL_13:
        return v17(v19, v18);
      }
      break;
  }
  return result;
}

uint64_t *initializeWithCopy for AspireApiRequest.OneOf_Request(uint64_t *a1, uint64_t *a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v21 = *a2;
    unint64_t v22 = a2[1];
    outlined copy of Data._Representation(*a2, v22);
    *a1 = v21;
    a1[1] = v22;
    uint64_t v23 = a2[2];
    unint64_t v24 = a2[3];
    outlined copy of Data._Representation(v23, v24);
    a1[2] = v23;
    a1[3] = v24;
    uint64_t v25 = *(int *)(type metadata accessor for AspireApiOPRFRequest(0) + 24);
    uint64_t v26 = (char *)a1 + v25;
    uint64_t v27 = (char *)a2 + v25;
    uint64_t v28 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 16))(v26, v27, v28);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    uint64_t v4 = a2[1];
    *a1 = *a2;
    a1[1] = v4;
    uint64_t v5 = a2[2];
    unint64_t v6 = a2[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v5, v6);
    a1[2] = v5;
    a1[3] = v6;
    uint64_t v7 = (int *)type metadata accessor for AspireApiPECRequest(0);
    uint64_t v8 = v7[7];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    uint64_t v13 = v9;
    uint64_t v14 = v11;
    v12(v13, v10, v11);
    uint64_t v15 = v7[8];
    uint64_t v16 = (uint64_t *)((char *)a1 + v15);
    unint64_t v17 = (uint64_t *)((char *)a2 + v15);
    uint64_t v18 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
    uint64_t v19 = *(void *)(v18 - 8);
    uint64_t v184 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
    uint64_t v188 = v12;
    uint64_t v177 = v19;
    if (v184((char *)v17, 1, v18))
    {
      uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
      memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
    }
    else
    {
      uint64_t v180 = v14;
      uint64_t v43 = v17[1];
      void *v16 = *v17;
      unint64_t v44 = v17[2];
      outlined copy of Data._Representation(v43, v44);
      v16[1] = v43;
      v16[2] = v44;
      uint64_t v14 = v180;
      v12((char *)v16 + *(int *)(v18 + 24), (char *)v17 + *(int *)(v18 + 24), v180);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
    }
    uint64_t v45 = v7[9];
    uint64_t v191 = (char *)a1 + v45;
    uint64_t v46 = (char *)a2 + v45;
    uint64_t v47 = type metadata accessor for AspireApiEvaluationKey(0);
    uint64_t v48 = *(unsigned int (***)(char *, uint64_t, uint64_t))(v47 - 8);
    if (v48[6](v46, 1, v47))
    {
      size_t v49 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKey?)
                                  - 8)
                      + 64);
      uint64_t v50 = v191;
LABEL_19:
      memcpy(v50, v46, v49);
      goto LABEL_56;
    }
    v12(v191, v46, v14);
    uint64_t v61 = *(int *)(v47 + 20);
    uint64_t v62 = &v191[v61];
    uint64_t v63 = &v46[v61];
    if (v184(&v46[v61], 1, v18))
    {
      uint64_t v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
      memcpy(v62, v63, *(void *)(*(void *)(v64 - 8) + 64));
    }
    else
    {
      uint64_t v181 = v14;
      uint64_t v81 = *((void *)v63 + 1);
      *(void *)uint64_t v62 = *(void *)v63;
      uint64_t v82 = v48;
      unint64_t v83 = *((void *)v63 + 2);
      outlined copy of Data._Representation(v81, v83);
      *((void *)v62 + 1) = v81;
      *((void *)v62 + 2) = v83;
      uint64_t v14 = v181;
      uint64_t v48 = v82;
      v12(&v62[*(int *)(v18 + 24)], &v63[*(int *)(v18 + 24)], v181);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v177 + 56))(v62, 0, 1, v18);
    }
    uint64_t v84 = *(int *)(v47 + 24);
    uint64_t v85 = &v191[v84];
    uint64_t v86 = &v46[v84];
    uint64_t v87 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
    uint64_t v88 = *(void *)(v87 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v88 + 48))(v86, 1, v87))
    {
      uint64_t v89 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
      memcpy(v85, v86, *(void *)(*(void *)(v89 - 8) + 64));
    }
    else
    {
      uint64_t v179 = v88;
      v12(v85, v86, v14);
      uint64_t v99 = *(int *)(v87 + 20);
      uint64_t v186 = v85;
      __dst = &v85[v99];
      uint64_t v100 = &v86[v99];
      uint64_t v101 = type metadata accessor for AspireHeSerializedGaloisKey(0);
      uint64_t v102 = *(void *)(v101 - 8);
      uint64_t v182 = v14;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v102 + 48))(v100, 1, v101))
      {
        uint64_t v103 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
        memcpy(__dst, v100, *(void *)(*(void *)(v103 - 8) + 64));
      }
      else
      {
        uint64_t v171 = v48;
        *(void *)__dst = *(void *)v100;
        uint64_t v109 = *(int *)(v101 + 20);
        uint64_t v165 = &__dst[v109];
        uint64_t v110 = &v100[v109];
        swift_bridgeObjectRetain();
        uint64_t v111 = v110;
        uint64_t v48 = v171;
        v12(v165, v111, v14);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v102 + 56))(__dst, 0, 1, v101);
      }
      uint64_t v112 = v186;
      uint64_t v113 = *(int *)(v87 + 24);
      uint64_t v114 = &v186[v113];
      uint64_t v115 = &v86[v113];
      uint64_t v116 = type metadata accessor for AspireHeSerializedRelinKey(0);
      uint64_t v117 = *(void *)(v116 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v117 + 48))(v115, 1, v116))
      {
        uint64_t v118 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
        memcpy(v114, v115, *(void *)(*(void *)(v118 - 8) + 64));
        uint64_t v119 = v179;
      }
      else
      {
        v12(v114, v115, v182);
        uint64_t v131 = *(int *)(v116 + 20);
        __dstb = v114;
        uint64_t v132 = &v114[v131];
        uint64_t v133 = &v115[v131];
        uint64_t v134 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
        uint64_t v135 = *(void *)(v134 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v135 + 48))(v133, 1, v134))
        {
          uint64_t v136 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
          memcpy(v132, v133, *(void *)(*(void *)(v136 - 8) + 64));
          uint64_t v119 = v179;
        }
        else
        {
          v12(v132, v133, v182);
          uint64_t v166 = v134;
          uint64_t v169 = v132;
          uint64_t v144 = *(int *)(v134 + 20);
          uint64_t v145 = &v132[v144];
          uint64_t v146 = &v133[v144];
          uint64_t v147 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
          uint64_t v148 = *(void *)(v147 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v148 + 48))(v146, 1, v147))
          {
            uint64_t v149 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
            memcpy(v145, v146, *(void *)(*(void *)(v149 - 8) + 64));
          }
          else
          {
            *(void *)uint64_t v145 = *(void *)v146;
            uint64_t v156 = *(int *)(v147 + 20);
            uint64_t v164 = &v145[v156];
            uint64_t v173 = v48;
            uint64_t v157 = &v146[v156];
            swift_bridgeObjectRetain();
            uint64_t v158 = v157;
            uint64_t v48 = v173;
            v188(v164, v158, v182);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v148 + 56))(v145, 0, 1, v147);
          }
          uint64_t v119 = v179;
          (*(void (**)(char *, void, uint64_t, uint64_t))(v135 + 56))(v169, 0, 1, v166);
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v117 + 56))(__dstb, 0, 1, v116);
        uint64_t v112 = v186;
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v119 + 56))(v112, 0, 1, v87);
    }
    ((void (*)(char *, void, uint64_t, uint64_t))v48[7])(v191, 0, 1, v47);
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    uint64_t v29 = a2[1];
    unint64_t v30 = a2[2];
    outlined copy of Data._Representation(v29, v30);
    a1[1] = v29;
    a1[2] = v30;
    uint64_t v31 = (int *)type metadata accessor for AspireApiPIRRequest(0);
    uint64_t v32 = v31[6];
    uint64_t v33 = (char *)a1 + v32;
    uint64_t v34 = (char *)a2 + v32;
    uint64_t v35 = type metadata accessor for UnknownStorage();
    uint64_t v36 = *(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 16);
    v36(v33, v34, v35);
    uint64_t v37 = v31[7];
    uint64_t v38 = (uint64_t *)((char *)a1 + v37);
    uint64_t v39 = (uint64_t *)((char *)a2 + v37);
    uint64_t v40 = type metadata accessor for AspirePirEncryptedIndices(0);
    uint64_t v41 = *(void *)(v40 - 8);
    uint64_t v189 = v35;
    uint64_t v190 = v36;
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
    {
      uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
      memcpy(v38, v39, *(void *)(*(void *)(v42 - 8) + 64));
    }
    else
    {
      uint64_t v51 = v39[1];
      *uint64_t v38 = *v39;
      v38[1] = v51;
      uint64_t v52 = *(int *)(v40 + 24);
      uint64_t v53 = (char *)v38 + v52;
      uint64_t v54 = (char *)v39 + v52;
      swift_bridgeObjectRetain();
      v190(v53, v54, v35);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
    }
    uint64_t v55 = v31[8];
    uint64_t v56 = (uint64_t *)((char *)a1 + v55);
    uint64_t v57 = (uint64_t *)((char *)a2 + v55);
    uint64_t v58 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
    uint64_t v59 = *(void *)(v58 - 8);
    uint64_t v185 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v59 + 48);
    if (v185((char *)v57, 1, v58))
    {
      uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
      memcpy(v56, v57, *(void *)(*(void *)(v60 - 8) + 64));
    }
    else
    {
      uint64_t v65 = v57[1];
      void *v56 = *v57;
      unint64_t v66 = v57[2];
      outlined copy of Data._Representation(v65, v66);
      v56[1] = v65;
      v56[2] = v66;
      v190((char *)v56 + *(int *)(v58 + 24), (char *)v57 + *(int *)(v58 + 24), v35);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v59 + 56))(v56, 0, 1, v58);
    }
    uint64_t v67 = v31[9];
    uint64_t v68 = (uint64_t *)((char *)a1 + v67);
    uint64_t v69 = (uint64_t *)((char *)a2 + v67);
    uint64_t v70 = v69[1];
    void *v68 = *v69;
    v68[1] = v70;
    uint64_t v71 = v31[10];
    unint64_t v72 = (char *)a1 + v71;
    uint64_t v46 = (char *)a2 + v71;
    uint64_t v73 = type metadata accessor for AspireApiEvaluationKey(0);
    uint64_t v74 = *(void *)(v73 - 8);
    uint64_t v75 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v74 + 48);
    swift_bridgeObjectRetain();
    if (v75(v46, 1, v73))
    {
      size_t v49 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKey?)
                                  - 8)
                      + 64);
      uint64_t v50 = v72;
      goto LABEL_19;
    }
    uint64_t v178 = v74;
    uint64_t v76 = v189;
    v190(v72, v46, v189);
    uint64_t v77 = *(int *)(v73 + 20);
    uint64_t v78 = &v72[v77];
    uint64_t v79 = &v46[v77];
    if (v185(&v46[v77], 1, v58))
    {
      uint64_t v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
      memcpy(v78, v79, *(void *)(*(void *)(v80 - 8) + 64));
    }
    else
    {
      uint64_t v90 = *((void *)v79 + 1);
      *(void *)uint64_t v78 = *(void *)v79;
      unint64_t v91 = *((void *)v79 + 2);
      outlined copy of Data._Representation(v90, v91);
      *((void *)v78 + 1) = v90;
      *((void *)v78 + 2) = v91;
      uint64_t v76 = v189;
      v190(&v78[*(int *)(v58 + 24)], &v79[*(int *)(v58 + 24)], v189);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v59 + 56))(v78, 0, 1, v58);
    }
    uint64_t v92 = *(int *)(v73 + 24);
    uint64_t v93 = &v72[v92];
    uint64_t v94 = &v46[v92];
    uint64_t v95 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
    uint64_t v96 = *(unsigned int (***)(const void *, uint64_t, uint64_t))(v95 - 8);
    if (v96[6](v94, 1, v95))
    {
      uint64_t v97 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
      memcpy(v93, v94, *(void *)(*(void *)(v97 - 8) + 64));
      uint64_t v98 = v178;
    }
    else
    {
      __dsta = v96;
      uint64_t v183 = v72;
      v190(v93, v94, v76);
      uint64_t v104 = *(int *)(v95 + 20);
      uint64_t v170 = &v93[v104];
      uint64_t v105 = &v94[v104];
      uint64_t v106 = type metadata accessor for AspireHeSerializedGaloisKey(0);
      uint64_t v107 = *(void *)(v106 - 8);
      uint64_t v187 = v93;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v107 + 48))(v105, 1, v106))
      {
        uint64_t v108 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
        memcpy(v170, v105, *(void *)(*(void *)(v108 - 8) + 64));
      }
      else
      {
        *(void *)uint64_t v170 = *(void *)v105;
        uint64_t v120 = *(int *)(v106 + 20);
        uint64_t v121 = &v170[v120];
        uint64_t v122 = &v105[v120];
        swift_bridgeObjectRetain();
        uint64_t v123 = v121;
        uint64_t v93 = v187;
        v190(v123, v122, v189);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v107 + 56))(v170, 0, 1, v106);
      }
      unint64_t v72 = v183;
      uint64_t v124 = *(int *)(v95 + 24);
      uint64_t v125 = &v93[v124];
      uint64_t v126 = &v94[v124];
      uint64_t v127 = type metadata accessor for AspireHeSerializedRelinKey(0);
      uint64_t v128 = *(void *)(v127 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v128 + 48))(v126, 1, v127))
      {
        uint64_t v129 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
        memcpy(v125, v126, *(void *)(*(void *)(v129 - 8) + 64));
        uint64_t v130 = __dsta;
        uint64_t v98 = v178;
      }
      else
      {
        uint64_t v168 = v128;
        v190(v125, v126, v189);
        uint64_t v137 = *(int *)(v127 + 20);
        uint64_t v172 = v125;
        uint64_t v138 = &v125[v137];
        uint64_t v139 = &v126[v137];
        uint64_t v140 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
        uint64_t v141 = *(void *)(v140 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v141 + 48))(v139, 1, v140))
        {
          uint64_t v142 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
          memcpy(v138, v139, *(void *)(*(void *)(v142 - 8) + 64));
          uint64_t v98 = v178;
          unint64_t v72 = v183;
          uint64_t v130 = __dsta;
          uint64_t v143 = v128;
        }
        else
        {
          uint64_t v163 = v141;
          v190(v138, v139, v189);
          uint64_t v167 = v138;
          uint64_t v150 = *(int *)(v140 + 20);
          uint64_t v151 = &v138[v150];
          uint64_t v152 = &v139[v150];
          uint64_t v153 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
          uint64_t v154 = *(void *)(v153 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v154 + 48))(v152, 1, v153))
          {
            uint64_t v155 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
            memcpy(v151, v152, *(void *)(*(void *)(v155 - 8) + 64));
          }
          else
          {
            *(void *)uint64_t v151 = *(void *)v152;
            uint64_t v159 = *(int *)(v153 + 20);
            uint64_t v160 = &v151[v159];
            uint64_t v161 = &v152[v159];
            swift_bridgeObjectRetain();
            v190(v160, v161, v189);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v154 + 56))(v151, 0, 1, v153);
          }
          uint64_t v130 = __dsta;
          uint64_t v98 = v178;
          uint64_t v143 = v168;
          (*(void (**)(char *, void, uint64_t, uint64_t))(v163 + 56))(v167, 0, 1, v140);
          unint64_t v72 = v183;
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v143 + 56))(v172, 0, 1, v127);
      }
      ((void (*)(char *, void, uint64_t, uint64_t))v130[7])(v187, 0, 1, v95);
    }
    (*(void (**)(char *, void, uint64_t, uint64_t))(v98 + 56))(v72, 0, 1, v73);
  }
LABEL_56:
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *assignWithCopy for AspireApiRequest.OneOf_Request(uint64_t a1, uint64_t *a2)
{
  unint64_t v2 = (void *)a1;
  if ((uint64_t *)a1 != a2)
  {
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0(a1, type metadata accessor for AspireApiRequest.OneOf_Request);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v20 = *a2;
      unint64_t v21 = a2[1];
      outlined copy of Data._Representation(*a2, v21);
      *unint64_t v2 = v20;
      v2[1] = v21;
      uint64_t v22 = a2[2];
      unint64_t v23 = a2[3];
      outlined copy of Data._Representation(v22, v23);
      v2[2] = v22;
      v2[3] = v23;
      uint64_t v24 = *(int *)(type metadata accessor for AspireApiOPRFRequest(0) + 24);
      uint64_t v25 = (char *)v2 + v24;
      uint64_t v26 = (char *)a2 + v24;
      uint64_t v27 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 16))(v25, v26, v27);
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        *unint64_t v2 = *a2;
        v2[1] = a2[1];
        uint64_t v5 = a2[2];
        unint64_t v6 = a2[3];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v5, v6);
        v2[2] = v5;
        v2[3] = v6;
        uint64_t v7 = type metadata accessor for AspireApiPECRequest(0);
        uint64_t v8 = *(int *)(v7 + 28);
        uint64_t v9 = (char *)v2 + v8;
        uint64_t v10 = (char *)a2 + v8;
        uint64_t v11 = type metadata accessor for UnknownStorage();
        uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
        v12(v9, v10, v11);
        uint64_t v192 = v7;
        uint64_t v194 = v2;
        uint64_t v13 = *(int *)(v7 + 32);
        uint64_t v14 = (void *)((char *)v2 + v13);
        uint64_t v15 = (uint64_t *)((char *)a2 + v13);
        uint64_t v16 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
        uint64_t v17 = *(void *)(v16 - 8);
        uint64_t v180 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
        uint64_t v184 = v16;
        uint64_t v187 = v12;
        if (v180((char *)v15, 1, v16))
        {
          uint64_t v18 = v11;
          uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
          memcpy(v14, v15, *(void *)(*(void *)(v19 - 8) + 64));
        }
        else
        {
          *uint64_t v14 = *v15;
          uint64_t v42 = v15[1];
          unint64_t v43 = v15[2];
          outlined copy of Data._Representation(v42, v43);
          v14[1] = v42;
          v14[2] = v43;
          uint64_t v18 = v11;
          v12((char *)v14 + *(int *)(v16 + 24), (char *)v15 + *(int *)(v16 + 24), v11);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
        }
        uint64_t v44 = *(int *)(v192 + 36);
        uint64_t v45 = (char *)v2 + v44;
        uint64_t v46 = (char *)a2 + v44;
        uint64_t v47 = type metadata accessor for AspireApiEvaluationKey(0);
        uint64_t v48 = *(void *)(v47 - 8);
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v46, 1, v47))
        {
          uint64_t v59 = v18;
          v12(v45, v46, v18);
          uint64_t v193 = v47;
          uint64_t v60 = *(int *)(v47 + 20);
          uint64_t v61 = &v45[v60];
          uint64_t v62 = &v46[v60];
          if (v180(&v46[v60], 1, v184))
          {
            uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
            memcpy(v61, v62, *(void *)(*(void *)(v63 - 8) + 64));
          }
          else
          {
            *(void *)uint64_t v61 = *(void *)v62;
            uint64_t v78 = v45;
            uint64_t v79 = *((void *)v62 + 1);
            unint64_t v80 = *((void *)v62 + 2);
            outlined copy of Data._Representation(v79, v80);
            *((void *)v61 + 1) = v79;
            *((void *)v61 + 2) = v80;
            uint64_t v45 = v78;
            uint64_t v18 = v59;
            v12(&v61[*(int *)(v184 + 24)], &v62[*(int *)(v184 + 24)], v59);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v61, 0, 1, v184);
          }
          uint64_t v81 = v193;
          uint64_t v82 = *(int *)(v193 + 24);
          unint64_t v83 = &v45[v82];
          uint64_t v84 = &v46[v82];
          uint64_t v85 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
          uint64_t v86 = *(void *)(v85 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v86 + 48))(v84, 1, v85))
          {
            uint64_t v87 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
            memcpy(v83, v84, *(void *)(*(void *)(v87 - 8) + 64));
            unint64_t v2 = v194;
          }
          else
          {
            uint64_t v179 = v86;
            uint64_t v96 = v18;
            v187(v83, v84, v18);
            uint64_t v182 = v85;
            uint64_t v185 = v83;
            uint64_t v97 = *(int *)(v85 + 20);
            uint64_t v98 = &v83[v97];
            uint64_t v99 = &v84[v97];
            uint64_t v100 = type metadata accessor for AspireHeSerializedGaloisKey(0);
            uint64_t v101 = *(void *)(v100 - 8);
            uint64_t v191 = v48;
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v101 + 48))(v99, 1, v100))
            {
              uint64_t v102 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
              memcpy(v98, v99, *(void *)(*(void *)(v102 - 8) + 64));
            }
            else
            {
              *(void *)uint64_t v98 = *(void *)v99;
              uint64_t v109 = *(int *)(v100 + 20);
              uint64_t v110 = v98;
              uint64_t v111 = &v98[v109];
              uint64_t v176 = v45;
              uint64_t v112 = &v99[v109];
              swift_bridgeObjectRetain();
              uint64_t v113 = v112;
              uint64_t v45 = v176;
              v187(v111, v113, v96);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v101 + 56))(v110, 0, 1, v100);
            }
            uint64_t v114 = v96;
            unint64_t v2 = v194;
            uint64_t v115 = *(int *)(v182 + 24);
            uint64_t v116 = &v185[v115];
            uint64_t v117 = &v84[v115];
            uint64_t v118 = type metadata accessor for AspireHeSerializedRelinKey(0);
            uint64_t v119 = *(void *)(v118 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v119 + 48))(v117, 1, v118))
            {
              uint64_t v120 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
              memcpy(v116, v117, *(void *)(*(void *)(v120 - 8) + 64));
              uint64_t v48 = v191;
              uint64_t v81 = v193;
              uint64_t v122 = v182;
              uint64_t v121 = v185;
            }
            else
            {
              uint64_t v170 = v119;
              v187(v116, v117, v96);
              uint64_t v133 = *(int *)(v118 + 20);
              uint64_t v173 = v116;
              uint64_t v134 = &v116[v133];
              uint64_t v135 = &v117[v133];
              uint64_t v136 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
              uint64_t v137 = *(void *)(v136 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v137 + 48))(v135, 1, v136))
              {
                uint64_t v138 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
                memcpy(v134, v135, *(void *)(*(void *)(v138 - 8) + 64));
                uint64_t v81 = v193;
                unint64_t v2 = v194;
                uint64_t v122 = v182;
                uint64_t v121 = v185;
              }
              else
              {
                v187(v134, v135, v114);
                uint64_t v166 = v114;
                uint64_t v168 = v136;
                uint64_t v146 = *(int *)(v136 + 20);
                uint64_t v147 = &v134[v146];
                uint64_t v148 = &v135[v146];
                uint64_t v149 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
                uint64_t v150 = *(void *)(v149 - 8);
                if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v150 + 48))(v148, 1, v149))
                {
                  uint64_t v151 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                  memcpy(v147, v148, *(void *)(*(void *)(v151 - 8) + 64));
                }
                else
                {
                  *(void *)uint64_t v147 = *(void *)v148;
                  uint64_t v158 = *(int *)(v149 + 20);
                  uint64_t v165 = &v147[v158];
                  uint64_t v177 = v45;
                  uint64_t v159 = &v148[v158];
                  swift_bridgeObjectRetain();
                  uint64_t v160 = v159;
                  uint64_t v45 = v177;
                  v187(v165, v160, v166);
                  (*(void (**)(char *, void, uint64_t, uint64_t))(v150 + 56))(v147, 0, 1, v149);
                }
                unint64_t v2 = v194;
                uint64_t v122 = v182;
                (*(void (**)(char *, void, uint64_t, uint64_t))(v137 + 56))(v134, 0, 1, v168);
                uint64_t v81 = v193;
                uint64_t v121 = v185;
              }
              (*(void (**)(char *, void, uint64_t, uint64_t))(v170 + 56))(v173, 0, 1, v118);
              uint64_t v48 = v191;
            }
            (*(void (**)(char *, void, uint64_t, uint64_t))(v179 + 56))(v121, 0, 1, v122);
          }
          (*(void (**)(char *, void, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v81);
          goto LABEL_55;
        }
      }
      else
      {
        *(_DWORD *)unint64_t v2 = *(_DWORD *)a2;
        uint64_t v28 = a2[1];
        unint64_t v29 = a2[2];
        outlined copy of Data._Representation(v28, v29);
        v2[1] = v28;
        v2[2] = v29;
        unint64_t v30 = (int *)type metadata accessor for AspireApiPIRRequest(0);
        uint64_t v31 = v30[6];
        uint64_t v32 = (char *)v2 + v31;
        uint64_t v33 = (char *)a2 + v31;
        uint64_t v34 = type metadata accessor for UnknownStorage();
        uint64_t v35 = *(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 16);
        v35(v32, v33, v34);
        uint64_t v36 = v30[7];
        uint64_t v37 = (void *)((char *)v2 + v36);
        uint64_t v38 = (uint64_t *)((char *)a2 + v36);
        uint64_t v39 = type metadata accessor for AspirePirEncryptedIndices(0);
        uint64_t v40 = *(void *)(v39 - 8);
        uint64_t v195 = v35;
        uint64_t v190 = v34;
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39))
        {
          uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
          memcpy(v37, v38, *(void *)(*(void *)(v41 - 8) + 64));
        }
        else
        {
          *uint64_t v37 = *v38;
          v37[1] = v38[1];
          uint64_t v50 = *(int *)(v39 + 24);
          uint64_t v51 = (char *)v37 + v50;
          uint64_t v52 = (char *)v38 + v50;
          swift_bridgeObjectRetain();
          v195(v51, v52, v34);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
        }
        uint64_t v53 = v30[8];
        uint64_t v54 = (void *)((char *)v2 + v53);
        uint64_t v55 = (uint64_t *)((char *)a2 + v53);
        uint64_t v56 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
        uint64_t v57 = *(void *)(v56 - 8);
        uint64_t v188 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48);
        uint64_t v181 = v57;
        if (v188((char *)v55, 1, v56))
        {
          uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
          memcpy(v54, v55, *(void *)(*(void *)(v58 - 8) + 64));
        }
        else
        {
          void *v54 = *v55;
          uint64_t v65 = v55[1];
          unint64_t v64 = v55[2];
          outlined copy of Data._Representation(v65, v64);
          v54[1] = v65;
          v54[2] = v64;
          v195((char *)v54 + *(int *)(v56 + 24), (char *)v55 + *(int *)(v56 + 24), v34);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v57 + 56))(v54, 0, 1, v56);
        }
        uint64_t v66 = v30[9];
        uint64_t v67 = (void *)((char *)v2 + v66);
        uint64_t v68 = (uint64_t *)((char *)a2 + v66);
        *uint64_t v67 = *v68;
        v67[1] = v68[1];
        uint64_t v69 = v30[10];
        uint64_t v45 = (char *)v2 + v69;
        uint64_t v46 = (char *)a2 + v69;
        uint64_t v70 = type metadata accessor for AspireApiEvaluationKey(0);
        uint64_t v71 = *(void *)(v70 - 8);
        unint64_t v72 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v71 + 48);
        swift_bridgeObjectRetain();
        if (!v72(v46, 1, v70))
        {
          uint64_t v73 = v190;
          v195(v45, v46, v190);
          uint64_t v178 = v70;
          uint64_t v74 = *(int *)(v70 + 20);
          uint64_t v75 = &v45[v74];
          uint64_t v76 = &v46[v74];
          if (v188(&v46[v74], 1, v56))
          {
            uint64_t v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
            memcpy(v75, v76, *(void *)(*(void *)(v77 - 8) + 64));
          }
          else
          {
            *(void *)uint64_t v75 = *(void *)v76;
            uint64_t v88 = *((void *)v76 + 1);
            unint64_t v89 = *((void *)v76 + 2);
            outlined copy of Data._Representation(v88, v89);
            *((void *)v75 + 1) = v88;
            *((void *)v75 + 2) = v89;
            uint64_t v73 = v190;
            v195(&v75[*(int *)(v56 + 24)], &v76[*(int *)(v56 + 24)], v190);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v181 + 56))(v75, 0, 1, v56);
          }
          uint64_t v90 = *(int *)(v70 + 24);
          unint64_t v91 = &v45[v90];
          uint64_t v92 = &v46[v90];
          uint64_t v93 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
          uint64_t v94 = *(void *)(v93 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v94 + 48))(v92, 1, v93))
          {
            uint64_t v95 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
            memcpy(v91, v92, *(void *)(*(void *)(v95 - 8) + 64));
          }
          else
          {
            uint64_t v175 = v94;
            uint64_t v183 = v71;
            uint64_t v186 = v45;
            v195(v91, v92, v73);
            uint64_t v103 = *(int *)(v93 + 20);
            uint64_t v189 = v91;
            uint64_t v104 = &v91[v103];
            uint64_t v105 = &v92[v103];
            uint64_t v106 = type metadata accessor for AspireHeSerializedGaloisKey(0);
            uint64_t v107 = *(void *)(v106 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v107 + 48))(v105, 1, v106))
            {
              uint64_t v108 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
              memcpy(v104, v105, *(void *)(*(void *)(v108 - 8) + 64));
            }
            else
            {
              *(void *)uint64_t v104 = *(void *)v105;
              uint64_t v123 = *(int *)(v106 + 20);
              uint64_t v172 = &v104[v123];
              uint64_t v124 = &v105[v123];
              swift_bridgeObjectRetain();
              v195(v172, v124, v73);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v107 + 56))(v104, 0, 1, v106);
            }
            uint64_t v71 = v183;
            uint64_t v70 = v178;
            uint64_t v125 = *(int *)(v93 + 24);
            uint64_t v126 = &v189[v125];
            uint64_t v127 = &v92[v125];
            uint64_t v128 = type metadata accessor for AspireHeSerializedRelinKey(0);
            uint64_t v129 = *(void *)(v128 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v129 + 48))(v127, 1, v128))
            {
              uint64_t v130 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
              memcpy(v126, v127, *(void *)(*(void *)(v130 - 8) + 64));
              uint64_t v131 = v189;
              uint64_t v132 = v175;
            }
            else
            {
              uint64_t v171 = v129;
              v195(v126, v127, v190);
              uint64_t v139 = *(int *)(v128 + 20);
              uint64_t v174 = v126;
              uint64_t v140 = &v126[v139];
              uint64_t v141 = &v127[v139];
              uint64_t v142 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
              uint64_t v143 = *(void *)(v142 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v143 + 48))(v141, 1, v142))
              {
                uint64_t v144 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
                memcpy(v140, v141, *(void *)(*(void *)(v144 - 8) + 64));
                uint64_t v71 = v183;
                uint64_t v145 = v174;
                uint64_t v132 = v175;
              }
              else
              {
                v195(v140, v141, v190);
                uint64_t v167 = v142;
                uint64_t v169 = v140;
                uint64_t v152 = *(int *)(v142 + 20);
                uint64_t v153 = &v140[v152];
                uint64_t v154 = &v141[v152];
                uint64_t v155 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
                uint64_t v156 = *(void *)(v155 - 8);
                if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v156 + 48))(v154, 1, v155))
                {
                  uint64_t v157 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                  memcpy(v153, v154, *(void *)(*(void *)(v157 - 8) + 64));
                }
                else
                {
                  *(void *)uint64_t v153 = *(void *)v154;
                  uint64_t v161 = *(int *)(v155 + 20);
                  uint64_t v164 = &v153[v161];
                  uint64_t v162 = &v154[v161];
                  swift_bridgeObjectRetain();
                  v195(v164, v162, v190);
                  (*(void (**)(char *, void, uint64_t, uint64_t))(v156 + 56))(v153, 0, 1, v155);
                }
                uint64_t v45 = v186;
                uint64_t v145 = v174;
                uint64_t v132 = v175;
                (*(void (**)(char *, void, uint64_t, uint64_t))(v143 + 56))(v169, 0, 1, v167);
                uint64_t v71 = v183;
              }
              (*(void (**)(char *, void, uint64_t, uint64_t))(v171 + 56))(v145, 0, 1, v128);
              uint64_t v131 = v189;
            }
            (*(void (**)(char *, void, uint64_t, uint64_t))(v132 + 56))(v131, 0, 1, v93);
          }
          (*(void (**)(char *, void, uint64_t, uint64_t))(v71 + 56))(v45, 0, 1, v70);
          goto LABEL_55;
        }
      }
      uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKey?);
      memcpy(v45, v46, *(void *)(*(void *)(v49 - 8) + 64));
    }
LABEL_55:
    swift_storeEnumTagMultiPayload();
  }
  return v2;
}

_OWORD *initializeWithTake for AspireApiRequest.OneOf_Request(_OWORD *a1, _OWORD *a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    long long v18 = a2[1];
    *a1 = *a2;
    a1[1] = v18;
    uint64_t v19 = *(int *)(type metadata accessor for AspireApiOPRFRequest(0) + 24);
    uint64_t v20 = (char *)a1 + v19;
    unint64_t v21 = (char *)a2 + v19;
    uint64_t v22 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 32))(v20, v21, v22);
  }
  else
  {
    uint64_t v152 = a1;
    if (EnumCaseMultiPayload == 1)
    {
      long long v5 = a2[1];
      *a1 = *a2;
      a1[1] = v5;
      unint64_t v6 = (int *)type metadata accessor for AspireApiPECRequest(0);
      uint64_t v7 = v6[7];
      uint64_t v8 = (char *)a1 + v7;
      uint64_t v9 = (char *)a2 + v7;
      uint64_t v10 = type metadata accessor for UnknownStorage();
      uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32);
      v11(v8, v9, v10);
      uint64_t v12 = v6[8];
      uint64_t v13 = (void *)((char *)a1 + v12);
      uint64_t v14 = (void *)((char *)a2 + v12);
      uint64_t v15 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
      uint64_t v16 = *(void *)(v15 - 8);
      uint64_t v146 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
      uint64_t v148 = v10;
      uint64_t v150 = v11;
      if (v146((char *)v14, 1, v15))
      {
        uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
        memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
      }
      else
      {
        void *v13 = *v14;
        *(_OWORD *)(v13 + 1) = *(_OWORD *)(v14 + 1);
        v11((char *)v13 + *(int *)(v15 + 24), (char *)v14 + *(int *)(v15 + 24), v10);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      }
      uint64_t v35 = v6[9];
      uint64_t v36 = (char *)a1 + v35;
      uint64_t v37 = (char *)a2 + v35;
      uint64_t v38 = type metadata accessor for AspireApiEvaluationKey(0);
      uint64_t v39 = *(void *)(v38 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38))
      {
        uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKey?);
        memcpy(v36, v37, *(void *)(*(void *)(v40 - 8) + 64));
      }
      else
      {
        uint64_t v142 = v39;
        v11(v36, v37, v10);
        uint64_t v48 = *(int *)(v38 + 20);
        uint64_t v49 = &v36[v48];
        uint64_t v50 = &v37[v48];
        if (v146(&v37[v48], 1, v15))
        {
          uint64_t v51 = v10;
          uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
          memcpy(v49, v50, *(void *)(*(void *)(v52 - 8) + 64));
        }
        else
        {
          *(void *)uint64_t v49 = *(void *)v50;
          *(_OWORD *)(v49 + 8) = *(_OWORD *)(v50 + 8);
          uint64_t v51 = v10;
          v11(&v49[*(int *)(v15 + 24)], &v50[*(int *)(v15 + 24)], v10);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v49, 0, 1, v15);
        }
        uint64_t v64 = v142;
        uint64_t v65 = *(int *)(v38 + 24);
        uint64_t v66 = &v36[v65];
        uint64_t v67 = &v37[v65];
        uint64_t v68 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
        uint64_t v69 = *(void *)(v68 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v69 + 48))(v67, 1, v68))
        {
          uint64_t v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
          memcpy(v66, v67, *(void *)(*(void *)(v70 - 8) + 64));
          a1 = v152;
        }
        else
        {
          uint64_t v139 = v69;
          v150(v66, v67, v51);
          uint64_t v147 = v68;
          uint64_t v78 = *(int *)(v68 + 20);
          uint64_t v79 = v66;
          unint64_t v80 = &v66[v78];
          uint64_t v81 = &v67[v78];
          uint64_t v82 = type metadata accessor for AspireHeSerializedGaloisKey(0);
          uint64_t v83 = *(void *)(v82 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v83 + 48))(v81, 1, v82))
          {
            uint64_t v84 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
            memcpy(v80, v81, *(void *)(*(void *)(v84 - 8) + 64));
          }
          else
          {
            *(void *)unint64_t v80 = *(void *)v81;
            v150(&v80[*(int *)(v82 + 20)], &v81[*(int *)(v82 + 20)], v51);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v83 + 56))(v80, 0, 1, v82);
          }
          unint64_t v91 = v79;
          a1 = v152;
          uint64_t v92 = *(int *)(v147 + 24);
          uint64_t v93 = &v79[v92];
          uint64_t v94 = &v67[v92];
          uint64_t v95 = type metadata accessor for AspireHeSerializedRelinKey(0);
          uint64_t v96 = *(void *)(v95 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v96 + 48))(v94, 1, v95))
          {
            uint64_t v97 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
            memcpy(v93, v94, *(void *)(*(void *)(v97 - 8) + 64));
            uint64_t v64 = v142;
          }
          else
          {
            uint64_t v135 = v79;
            uint64_t v138 = v96;
            v150(v93, v94, v10);
            uint64_t v105 = *(int *)(v95 + 20);
            uint64_t v106 = &v93[v105];
            uint64_t v107 = &v94[v105];
            uint64_t v108 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
            uint64_t v109 = *(void *)(v108 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v109 + 48))(v107, 1, v108))
            {
              uint64_t v110 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
              memcpy(v106, v107, *(void *)(*(void *)(v110 - 8) + 64));
              uint64_t v64 = v142;
              unint64_t v91 = v135;
              uint64_t v111 = v138;
            }
            else
            {
              v150(v106, v107, v148);
              uint64_t v131 = v108;
              uint64_t v133 = v106;
              uint64_t v118 = *(int *)(v108 + 20);
              uint64_t v119 = &v106[v118];
              uint64_t v120 = &v107[v118];
              uint64_t v121 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
              uint64_t v122 = *(void *)(v121 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v122 + 48))(v120, 1, v121))
              {
                uint64_t v123 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                memcpy(v119, v120, *(void *)(*(void *)(v123 - 8) + 64));
              }
              else
              {
                *(void *)uint64_t v119 = *(void *)v120;
                v150(&v119[*(int *)(v121 + 20)], &v120[*(int *)(v121 + 20)], v148);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v122 + 56))(v119, 0, 1, v121);
              }
              uint64_t v64 = v142;
              unint64_t v91 = v135;
              uint64_t v111 = v138;
              (*(void (**)(char *, void, uint64_t, uint64_t))(v109 + 56))(v133, 0, 1, v131);
            }
            (*(void (**)(char *, void, uint64_t, uint64_t))(v111 + 56))(v93, 0, 1, v95);
          }
          (*(void (**)(char *, void, uint64_t, uint64_t))(v139 + 56))(v91, 0, 1, v147);
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v64 + 56))(v36, 0, 1, v38);
      }
    }
    else
    {
      *(_DWORD *)a1 = *(_DWORD *)a2;
      *(_OWORD *)((char *)a1 + 8) = *(_OWORD *)((char *)a2 + 8);
      unint64_t v23 = (int *)type metadata accessor for AspireApiPIRRequest(0);
      uint64_t v24 = v23[6];
      uint64_t v25 = (char *)a1 + v24;
      uint64_t v26 = (char *)a2 + v24;
      uint64_t v27 = type metadata accessor for UnknownStorage();
      uint64_t v28 = *(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 32);
      v28(v25, v26, v27);
      uint64_t v29 = v23[7];
      unint64_t v30 = (_OWORD *)((char *)a1 + v29);
      uint64_t v31 = (_OWORD *)((char *)a2 + v29);
      uint64_t v32 = type metadata accessor for AspirePirEncryptedIndices(0);
      uint64_t v33 = *(void *)(v32 - 8);
      uint64_t v149 = v27;
      uint64_t v151 = v28;
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
      {
        uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
        memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64));
      }
      else
      {
        *unint64_t v30 = *v31;
        v28((char *)v30 + *(int *)(v32 + 24), (char *)v31 + *(int *)(v32 + 24), v27);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
      }
      uint64_t v41 = v23[8];
      uint64_t v42 = (void *)((char *)a1 + v41);
      unint64_t v43 = (void *)((char *)a2 + v41);
      uint64_t v44 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
      uint64_t v45 = *(void *)(v44 - 8);
      uint64_t v46 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48);
      uint64_t v144 = v45;
      if (v46((char *)v43, 1, v44))
      {
        uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
        memcpy(v42, v43, *(void *)(*(void *)(v47 - 8) + 64));
      }
      else
      {
        void *v42 = *v43;
        *(_OWORD *)(v42 + 1) = *(_OWORD *)(v43 + 1);
        v151((char *)v42 + *(int *)(v44 + 24), (char *)v43 + *(int *)(v44 + 24), v27);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v45 + 56))(v42, 0, 1, v44);
      }
      *(_OWORD *)((char *)a1 + v23[9]) = *(_OWORD *)((char *)a2 + v23[9]);
      uint64_t v53 = v23[10];
      uint64_t v54 = (char *)a1 + v53;
      uint64_t v55 = (char *)a2 + v53;
      uint64_t v56 = type metadata accessor for AspireApiEvaluationKey(0);
      uint64_t v57 = *(void *)(v56 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48))(v55, 1, v56))
      {
        uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKey?);
        memcpy(v54, v55, *(void *)(*(void *)(v58 - 8) + 64));
      }
      else
      {
        uint64_t v141 = v57;
        v151(v54, v55, v27);
        uint64_t v59 = *(int *)(v56 + 20);
        uint64_t v143 = v54;
        uint64_t v60 = &v54[v59];
        uint64_t v61 = &v55[v59];
        if (v46(&v55[v59], 1, v44))
        {
          uint64_t v62 = v151;
          uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
          memcpy(v60, v61, *(void *)(*(void *)(v63 - 8) + 64));
        }
        else
        {
          *(void *)uint64_t v60 = *(void *)v61;
          *(_OWORD *)(v60 + 8) = *(_OWORD *)(v61 + 8);
          uint64_t v62 = v151;
          v151(&v60[*(int *)(v44 + 24)], &v61[*(int *)(v44 + 24)], v149);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v144 + 56))(v60, 0, 1, v44);
        }
        uint64_t v71 = *(int *)(v56 + 24);
        unint64_t v72 = &v54[v71];
        uint64_t v73 = &v55[v71];
        uint64_t v74 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
        uint64_t v75 = *(void *)(v74 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v75 + 48))(v73, 1, v74))
        {
          uint64_t v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
          memcpy(v72, v73, *(void *)(*(void *)(v76 - 8) + 64));
          uint64_t v77 = v57;
        }
        else
        {
          uint64_t v137 = v75;
          v62(v72, v73, v149);
          uint64_t v145 = v74;
          uint64_t v85 = *(int *)(v74 + 20);
          uint64_t v140 = v72;
          uint64_t v86 = &v72[v85];
          uint64_t v87 = &v73[v85];
          uint64_t v88 = type metadata accessor for AspireHeSerializedGaloisKey(0);
          uint64_t v89 = *(void *)(v88 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v89 + 48))(v87, 1, v88))
          {
            uint64_t v90 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
            memcpy(v86, v87, *(void *)(*(void *)(v90 - 8) + 64));
          }
          else
          {
            *(void *)uint64_t v86 = *(void *)v87;
            v62(&v86[*(int *)(v88 + 20)], &v87[*(int *)(v88 + 20)], v149);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v89 + 56))(v86, 0, 1, v88);
          }
          uint64_t v54 = v143;
          uint64_t v98 = *(int *)(v145 + 24);
          uint64_t v99 = &v140[v98];
          uint64_t v100 = &v73[v98];
          uint64_t v101 = type metadata accessor for AspireHeSerializedRelinKey(0);
          uint64_t v102 = *(void *)(v101 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v102 + 48))(v100, 1, v101))
          {
            uint64_t v103 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
            memcpy(v99, v100, *(void *)(*(void *)(v103 - 8) + 64));
            uint64_t v104 = v140;
            uint64_t v77 = v141;
          }
          else
          {
            uint64_t v136 = v102;
            v151(v99, v100, v149);
            uint64_t v112 = *(int *)(v101 + 20);
            uint64_t v113 = &v99[v112];
            uint64_t v114 = &v100[v112];
            uint64_t v115 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
            uint64_t v116 = *(void *)(v115 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v116 + 48))(v114, 1, v115))
            {
              uint64_t v117 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
              memcpy(v113, v114, *(void *)(*(void *)(v117 - 8) + 64));
              uint64_t v77 = v57;
              uint64_t v54 = v143;
              uint64_t v104 = v140;
            }
            else
            {
              v151(v113, v114, v149);
              uint64_t v132 = v115;
              uint64_t v134 = v113;
              uint64_t v124 = *(int *)(v115 + 20);
              uint64_t v125 = &v113[v124];
              uint64_t v126 = &v114[v124];
              uint64_t v127 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
              uint64_t v128 = *(void *)(v127 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v128 + 48))(v126, 1, v127))
              {
                uint64_t v129 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                memcpy(v125, v126, *(void *)(*(void *)(v129 - 8) + 64));
              }
              else
              {
                *(void *)uint64_t v125 = *(void *)v126;
                v151(&v125[*(int *)(v127 + 20)], &v126[*(int *)(v127 + 20)], v149);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v128 + 56))(v125, 0, 1, v127);
              }
              uint64_t v104 = v140;
              uint64_t v77 = v141;
              (*(void (**)(char *, void, uint64_t, uint64_t))(v116 + 56))(v134, 0, 1, v132);
              uint64_t v54 = v143;
            }
            (*(void (**)(char *, void, uint64_t, uint64_t))(v136 + 56))(v99, 0, 1, v101);
          }
          (*(void (**)(char *, void, uint64_t, uint64_t))(v137 + 56))(v104, 0, 1, v145);
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v77 + 56))(v54, 0, 1, v56);
      }
    }
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_OWORD *assignWithTake for AspireApiRequest.OneOf_Request(_OWORD *a1, _OWORD *a2)
{
  if (a1 != a2)
  {
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)a1, type metadata accessor for AspireApiRequest.OneOf_Request);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      long long v18 = a2[1];
      *a1 = *a2;
      a1[1] = v18;
      uint64_t v19 = *(int *)(type metadata accessor for AspireApiOPRFRequest(0) + 24);
      uint64_t v20 = (char *)a1 + v19;
      unint64_t v21 = (char *)a2 + v19;
      uint64_t v22 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 32))(v20, v21, v22);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      long long v5 = a2[1];
      *a1 = *a2;
      a1[1] = v5;
      uint64_t v6 = type metadata accessor for AspireApiPECRequest(0);
      uint64_t v7 = *(int *)(v6 + 28);
      uint64_t v8 = (char *)a1 + v7;
      uint64_t v9 = (char *)a2 + v7;
      uint64_t v10 = type metadata accessor for UnknownStorage();
      uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32);
      v11(v8, v9, v10);
      uint64_t v154 = v6;
      uint64_t v12 = *(int *)(v6 + 32);
      uint64_t v13 = (void *)((char *)a1 + v12);
      uint64_t v14 = (void *)((char *)a2 + v12);
      uint64_t v15 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
      uint64_t v16 = *(void *)(v15 - 8);
      uint64_t v146 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
      uint64_t v150 = v11;
      uint64_t v152 = v10;
      if (v146((char *)v14, 1, v15))
      {
        uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
        memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
      }
      else
      {
        void *v13 = *v14;
        *(_OWORD *)(v13 + 1) = *(_OWORD *)(v14 + 1);
        v11((char *)v13 + *(int *)(v15 + 24), (char *)v14 + *(int *)(v15 + 24), v10);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      }
      uint64_t v35 = *(int *)(v154 + 36);
      uint64_t v36 = (char *)a1 + v35;
      uint64_t v37 = (char *)a2 + v35;
      uint64_t v38 = type metadata accessor for AspireApiEvaluationKey(0);
      uint64_t v39 = *(void *)(v38 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38))
      {
        uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKey?);
        memcpy(v36, v37, *(void *)(*(void *)(v40 - 8) + 64));
      }
      else
      {
        uint64_t v142 = v39;
        v150(v36, v37, v10);
        uint64_t v47 = *(int *)(v38 + 20);
        uint64_t v144 = v36;
        uint64_t v48 = &v36[v47];
        uint64_t v49 = &v37[v47];
        if (v146(&v37[v47], 1, v15))
        {
          uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
          memcpy(v48, v49, *(void *)(*(void *)(v50 - 8) + 64));
        }
        else
        {
          *(void *)uint64_t v48 = *(void *)v49;
          *(_OWORD *)(v48 + 8) = *(_OWORD *)(v49 + 8);
          v150(&v48[*(int *)(v15 + 24)], &v49[*(int *)(v15 + 24)], v10);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v48, 0, 1, v15);
        }
        uint64_t v62 = v142;
        uint64_t v63 = *(int *)(v38 + 24);
        uint64_t v64 = &v144[v63];
        uint64_t v65 = &v37[v63];
        uint64_t v66 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
        uint64_t v67 = *(void *)(v66 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v67 + 48))(v65, 1, v66))
        {
          uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
          memcpy(v64, v65, *(void *)(*(void *)(v68 - 8) + 64));
        }
        else
        {
          v150(v64, v65, v152);
          uint64_t v139 = v66;
          uint64_t v77 = *(int *)(v66 + 20);
          uint64_t v148 = v64;
          uint64_t v78 = &v64[v77];
          uint64_t v79 = &v65[v77];
          uint64_t v80 = type metadata accessor for AspireHeSerializedGaloisKey(0);
          uint64_t v81 = *(void *)(v80 - 8);
          uint64_t v137 = v67;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v81 + 48))(v79, 1, v80))
          {
            uint64_t v82 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
            memcpy(v78, v79, *(void *)(*(void *)(v82 - 8) + 64));
          }
          else
          {
            *(void *)uint64_t v78 = *(void *)v79;
            v150(&v78[*(int *)(v80 + 20)], &v79[*(int *)(v80 + 20)], v152);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v81 + 56))(v78, 0, 1, v80);
          }
          uint64_t v89 = *(int *)(v139 + 24);
          uint64_t v90 = &v148[v89];
          unint64_t v91 = &v65[v89];
          uint64_t v92 = type metadata accessor for AspireHeSerializedRelinKey(0);
          uint64_t v93 = *(void *)(v92 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v93 + 48))(v91, 1, v92))
          {
            uint64_t v94 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
            memcpy(v90, v91, *(void *)(*(void *)(v94 - 8) + 64));
            uint64_t v62 = v142;
            uint64_t v95 = v148;
            uint64_t v96 = v139;
          }
          else
          {
            v150(v90, v91, v152);
            uint64_t v104 = *(int *)(v92 + 20);
            uint64_t v105 = &v90[v104];
            uint64_t v106 = &v91[v104];
            uint64_t v107 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
            uint64_t v108 = *(void *)(v107 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v108 + 48))(v106, 1, v107))
            {
              uint64_t v109 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
              memcpy(v105, v106, *(void *)(*(void *)(v109 - 8) + 64));
              uint64_t v62 = v142;
              uint64_t v95 = v148;
              uint64_t v67 = v137;
            }
            else
            {
              uint64_t v133 = v108;
              v150(v105, v106, v152);
              uint64_t v135 = v107;
              uint64_t v117 = *(int *)(v107 + 20);
              __dst = &v105[v117];
              uint64_t v118 = &v106[v117];
              uint64_t v119 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
              uint64_t v120 = *(void *)(v119 - 8);
              uint64_t v121 = v118;
              int v122 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v120 + 48))(v118, 1, v119);
              uint64_t v123 = v105;
              if (v122)
              {
                uint64_t v124 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                memcpy(__dst, v121, *(void *)(*(void *)(v124 - 8) + 64));
              }
              else
              {
                *(void *)__dst = *(void *)v121;
                v150(&__dst[*(int *)(v119 + 20)], &v121[*(int *)(v119 + 20)], v152);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v120 + 56))(__dst, 0, 1, v119);
              }
              uint64_t v62 = v142;
              uint64_t v95 = v148;
              uint64_t v67 = v137;
              (*(void (**)(char *, void, uint64_t, uint64_t))(v133 + 56))(v123, 0, 1, v135);
            }
            (*(void (**)(char *, void, uint64_t, uint64_t))(v93 + 56))(v90, 0, 1, v92);
            uint64_t v96 = v139;
          }
          (*(void (**)(char *, void, uint64_t, uint64_t))(v67 + 56))(v95, 0, 1, v96);
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v62 + 56))(v144, 0, 1, v38);
      }
    }
    else
    {
      *(_DWORD *)a1 = *(_DWORD *)a2;
      *(_OWORD *)((char *)a1 + 8) = *(_OWORD *)((char *)a2 + 8);
      unint64_t v23 = (int *)type metadata accessor for AspireApiPIRRequest(0);
      uint64_t v24 = v23[6];
      uint64_t v25 = (char *)a1 + v24;
      uint64_t v26 = (char *)a2 + v24;
      uint64_t v27 = type metadata accessor for UnknownStorage();
      uint64_t v28 = *(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 32);
      v28(v25, v26, v27);
      uint64_t v29 = v23[7];
      unint64_t v30 = (_OWORD *)((char *)a1 + v29);
      uint64_t v31 = (_OWORD *)((char *)a2 + v29);
      uint64_t v32 = type metadata accessor for AspirePirEncryptedIndices(0);
      uint64_t v33 = *(void *)(v32 - 8);
      uint64_t v151 = v27;
      uint64_t v153 = v28;
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
      {
        uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
        memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64));
      }
      else
      {
        *unint64_t v30 = *v31;
        v28((char *)v30 + *(int *)(v32 + 24), (char *)v31 + *(int *)(v32 + 24), v27);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
      }
      uint64_t v41 = v23[8];
      uint64_t v42 = (void *)((char *)a1 + v41);
      unint64_t v43 = (void *)((char *)a2 + v41);
      uint64_t v44 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
      uint64_t v45 = *(void *)(v44 - 8);
      uint64_t v147 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48);
      if (v147((char *)v43, 1, v44))
      {
        uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
        memcpy(v42, v43, *(void *)(*(void *)(v46 - 8) + 64));
      }
      else
      {
        void *v42 = *v43;
        *(_OWORD *)(v42 + 1) = *(_OWORD *)(v43 + 1);
        v153((char *)v42 + *(int *)(v44 + 24), (char *)v43 + *(int *)(v44 + 24), v27);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v45 + 56))(v42, 0, 1, v44);
      }
      *(_OWORD *)((char *)a1 + v23[9]) = *(_OWORD *)((char *)a2 + v23[9]);
      uint64_t v51 = v23[10];
      uint64_t v52 = (char *)a1 + v51;
      uint64_t v53 = (char *)a2 + v51;
      uint64_t v54 = type metadata accessor for AspireApiEvaluationKey(0);
      uint64_t v55 = *(void *)(v54 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v53, 1, v54))
      {
        uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKey?);
        memcpy(v52, v53, *(void *)(*(void *)(v56 - 8) + 64));
      }
      else
      {
        uint64_t v143 = v55;
        v153(v52, v53, v27);
        uint64_t v57 = *(int *)(v54 + 20);
        uint64_t v145 = v52;
        uint64_t v58 = &v52[v57];
        uint64_t v59 = &v53[v57];
        if (v147(&v53[v57], 1, v44))
        {
          uint64_t v60 = v153;
          uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
          memcpy(v58, v59, *(void *)(*(void *)(v61 - 8) + 64));
        }
        else
        {
          *(void *)uint64_t v58 = *(void *)v59;
          *(_OWORD *)(v58 + 8) = *(_OWORD *)(v59 + 8);
          uint64_t v60 = v153;
          v153(&v58[*(int *)(v44 + 24)], &v59[*(int *)(v44 + 24)], v151);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v45 + 56))(v58, 0, 1, v44);
        }
        uint64_t v69 = v145;
        uint64_t v70 = *(int *)(v54 + 24);
        uint64_t v71 = &v145[v70];
        unint64_t v72 = &v53[v70];
        uint64_t v73 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
        uint64_t v74 = *(void *)(v73 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v74 + 48))(v72, 1, v73))
        {
          uint64_t v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
          memcpy(v71, v72, *(void *)(*(void *)(v75 - 8) + 64));
          uint64_t v76 = v55;
        }
        else
        {
          uint64_t v140 = v74;
          v60(v71, v72, v151);
          uint64_t v141 = v73;
          uint64_t v83 = *(int *)(v73 + 20);
          uint64_t v149 = v71;
          uint64_t v84 = &v71[v83];
          uint64_t v85 = &v72[v83];
          uint64_t v86 = type metadata accessor for AspireHeSerializedGaloisKey(0);
          uint64_t v87 = *(void *)(v86 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v87 + 48))(v85, 1, v86))
          {
            uint64_t v88 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
            memcpy(v84, v85, *(void *)(*(void *)(v88 - 8) + 64));
          }
          else
          {
            *(void *)uint64_t v84 = *(void *)v85;
            v60(&v84[*(int *)(v86 + 20)], &v85[*(int *)(v86 + 20)], v151);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v87 + 56))(v84, 0, 1, v86);
          }
          uint64_t v69 = v145;
          uint64_t v97 = *(int *)(v141 + 24);
          uint64_t v98 = &v149[v97];
          uint64_t v99 = &v72[v97];
          uint64_t v100 = type metadata accessor for AspireHeSerializedRelinKey(0);
          uint64_t v101 = *(void *)(v100 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v101 + 48))(v99, 1, v100))
          {
            uint64_t v102 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
            memcpy(v98, v99, *(void *)(*(void *)(v102 - 8) + 64));
            uint64_t v103 = v141;
            uint64_t v76 = v143;
          }
          else
          {
            uint64_t v138 = v101;
            v153(v98, v99, v151);
            uint64_t v110 = *(int *)(v100 + 20);
            uint64_t v111 = &v98[v110];
            uint64_t v112 = &v99[v110];
            uint64_t v113 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
            uint64_t v114 = *(void *)(v113 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v114 + 48))(v112, 1, v113))
            {
              uint64_t v115 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
              memcpy(v111, v112, *(void *)(*(void *)(v115 - 8) + 64));
              uint64_t v103 = v141;
              uint64_t v76 = v143;
              uint64_t v69 = v145;
              uint64_t v116 = v138;
            }
            else
            {
              v153(v111, v112, v151);
              uint64_t v134 = v113;
              uint64_t v136 = v111;
              uint64_t v125 = *(int *)(v113 + 20);
              uint64_t v126 = &v111[v125];
              uint64_t v127 = &v112[v125];
              uint64_t v128 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
              uint64_t v129 = *(void *)(v128 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v129 + 48))(v127, 1, v128))
              {
                uint64_t v130 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                memcpy(v126, v127, *(void *)(*(void *)(v130 - 8) + 64));
              }
              else
              {
                *(void *)uint64_t v126 = *(void *)v127;
                v153(&v126[*(int *)(v128 + 20)], &v127[*(int *)(v128 + 20)], v151);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v129 + 56))(v126, 0, 1, v128);
              }
              uint64_t v76 = v55;
              uint64_t v69 = v145;
              uint64_t v103 = v141;
              uint64_t v116 = v138;
              (*(void (**)(char *, void, uint64_t, uint64_t))(v114 + 56))(v136, 0, 1, v134);
            }
            (*(void (**)(char *, void, uint64_t, uint64_t))(v116 + 56))(v98, 0, 1, v100);
          }
          (*(void (**)(char *, void, uint64_t, uint64_t))(v140 + 56))(v149, 0, 1, v103);
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v76 + 56))(v69, 0, 1, v54);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata completion function for AspireApiRequest.OneOf_Request(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for AspireApiRequest.OneOf_Request(a1, a2, a3, type metadata accessor for AspireApiPIRRequest, type metadata accessor for AspireApiPECRequest, type metadata accessor for AspireApiOPRFRequest);
}

uint64_t *initializeBufferWithCopyOfBuffer for AspireApiResponse(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for AspireApiResponse.OneOf_Response(0);
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2)
      {
        uint64_t v13 = *a2;
        unint64_t v14 = a2[1];
        outlined copy of Data._Representation(*a2, v14);
        *a1 = v13;
        a1[1] = v14;
        uint64_t v15 = a2[2];
        unint64_t v16 = a2[3];
        outlined copy of Data._Representation(v15, v16);
        a1[2] = v15;
        a1[3] = v16;
        uint64_t v17 = *(int *)(type metadata accessor for AspireApiOPRFResponse(0) + 24);
        long long v18 = (char *)a1 + v17;
        uint64_t v19 = (char *)a2 + v17;
        uint64_t v20 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16))(v18, v19, v20);
      }
      else
      {
        *a1 = *a2;
        if (EnumCaseMultiPayload == 1) {
          uint64_t v12 = type metadata accessor for AspireApiPECResponse(0);
        }
        else {
          uint64_t v12 = type metadata accessor for AspireApiPIRResponse(0);
        }
        uint64_t v21 = *(int *)(v12 + 20);
        uint64_t v29 = (char *)a2 + v21;
        unint64_t v30 = (char *)a1 + v21;
        uint64_t v22 = type metadata accessor for UnknownStorage();
        unint64_t v23 = *(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 16);
        swift_bridgeObjectRetain();
        v23(v30, v29, v22);
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    uint64_t v24 = *(int *)(a3 + 20);
    uint64_t v25 = (char *)a1 + v24;
    uint64_t v26 = (char *)a2 + v24;
    uint64_t v27 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 16))(v25, v26, v27);
  }
  return a1;
}

uint64_t destroy for AspireApiResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AspireApiResponse.OneOf_Response(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, 1, v4))
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
      outlined consume of Data._Representation(*(void *)(a1 + 16), *(void *)(a1 + 24));
      uint64_t v7 = *(int *)(type metadata accessor for AspireApiOPRFResponse(0) + 24);
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        swift_bridgeObjectRelease();
        uint64_t v6 = type metadata accessor for AspireApiPECResponse(0);
      }
      else
      {
        if (EnumCaseMultiPayload) {
          goto LABEL_10;
        }
        swift_bridgeObjectRelease();
        uint64_t v6 = type metadata accessor for AspireApiPIRResponse(0);
      }
      uint64_t v7 = *(int *)(v6 + 20);
    }
    uint64_t v8 = a1 + v7;
    uint64_t v9 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  }
LABEL_10:
  uint64_t v10 = a1 + *(int *)(a2 + 20);
  uint64_t v11 = type metadata accessor for UnknownStorage();
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8);
  return v12(v10, v11);
}

uint64_t *initializeWithCopy for AspireApiResponse(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AspireApiResponse.OneOf_Response(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v11 = *a2;
      unint64_t v12 = a2[1];
      outlined copy of Data._Representation(*a2, v12);
      *a1 = v11;
      a1[1] = v12;
      uint64_t v13 = a2[2];
      unint64_t v14 = a2[3];
      outlined copy of Data._Representation(v13, v14);
      a1[2] = v13;
      a1[3] = v14;
      uint64_t v15 = *(int *)(type metadata accessor for AspireApiOPRFResponse(0) + 24);
      unint64_t v16 = (char *)a1 + v15;
      uint64_t v17 = (char *)a2 + v15;
      uint64_t v18 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
    }
    else
    {
      *a1 = *a2;
      if (EnumCaseMultiPayload == 1) {
        uint64_t v10 = type metadata accessor for AspireApiPECResponse(0);
      }
      else {
        uint64_t v10 = type metadata accessor for AspireApiPIRResponse(0);
      }
      uint64_t v19 = *(int *)(v10 + 20);
      uint64_t v27 = (char *)a2 + v19;
      uint64_t v28 = (char *)a1 + v19;
      uint64_t v20 = type metadata accessor for UnknownStorage();
      uint64_t v21 = *(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16);
      swift_bridgeObjectRetain();
      v21(v28, v27, v20);
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v22 = *(int *)(a3 + 20);
  unint64_t v23 = (char *)a1 + v22;
  uint64_t v24 = (char *)a2 + v22;
  uint64_t v25 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 16))(v23, v24, v25);
  return a1;
}

uint64_t *assignWithCopy for AspireApiResponse(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AspireApiResponse.OneOf_Response(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2)
      {
        uint64_t v20 = *a2;
        unint64_t v21 = a2[1];
        outlined copy of Data._Representation(*a2, v21);
        *a1 = v20;
        a1[1] = v21;
        uint64_t v22 = a2[2];
        unint64_t v23 = a2[3];
        outlined copy of Data._Representation(v22, v23);
        a1[2] = v22;
        a1[3] = v23;
        uint64_t v24 = *(int *)(type metadata accessor for AspireApiOPRFResponse(0) + 24);
        uint64_t v25 = (char *)a1 + v24;
        uint64_t v26 = (char *)a2 + v24;
        uint64_t v27 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 16))(v25, v26, v27);
      }
      else
      {
        *a1 = *a2;
        if (EnumCaseMultiPayload == 1) {
          uint64_t v12 = type metadata accessor for AspireApiPECResponse(0);
        }
        else {
          uint64_t v12 = type metadata accessor for AspireApiPIRResponse(0);
        }
        uint64_t v28 = *(int *)(v12 + 20);
        uint64_t v44 = (char *)a2 + v28;
        uint64_t v45 = (char *)a1 + v28;
        uint64_t v29 = type metadata accessor for UnknownStorage();
        unint64_t v30 = *(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 16);
        swift_bridgeObjectRetain();
        v30(v45, v44, v29);
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_18;
    }
LABEL_8:
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
    memcpy(a1, a2, *(void *)(*(void *)(v13 - 8) + 64));
    goto LABEL_18;
  }
  if (v10)
  {
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)a1, type metadata accessor for AspireApiResponse.OneOf_Response);
    goto LABEL_8;
  }
  if (a1 != a2)
  {
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)a1, type metadata accessor for AspireApiResponse.OneOf_Response);
    int v14 = swift_getEnumCaseMultiPayload();
    if (v14 == 2)
    {
      uint64_t v36 = *a2;
      unint64_t v37 = a2[1];
      outlined copy of Data._Representation(*a2, v37);
      *a1 = v36;
      a1[1] = v37;
      uint64_t v38 = a2[2];
      unint64_t v39 = a2[3];
      outlined copy of Data._Representation(v38, v39);
      a1[2] = v38;
      a1[3] = v39;
      uint64_t v40 = *(int *)(type metadata accessor for AspireApiOPRFResponse(0) + 24);
      uint64_t v41 = (char *)a1 + v40;
      uint64_t v42 = (char *)a2 + v40;
      uint64_t v43 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v43 - 8) + 16))(v41, v42, v43);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      *a1 = *a2;
      if (v14 == 1) {
        uint64_t v15 = *(int *)(type metadata accessor for AspireApiPECResponse(0) + 20);
      }
      else {
        uint64_t v15 = *(int *)(type metadata accessor for AspireApiPIRResponse(0) + 20);
      }
      unint64_t v16 = (char *)a1 + v15;
      uint64_t v17 = (char *)a2 + v15;
      uint64_t v18 = type metadata accessor for UnknownStorage();
      uint64_t v19 = *(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16);
      swift_bridgeObjectRetain();
      v19(v16, v17, v18);
      swift_storeEnumTagMultiPayload();
    }
  }
LABEL_18:
  uint64_t v31 = *(int *)(a3 + 20);
  uint64_t v32 = (char *)a1 + v31;
  uint64_t v33 = (char *)a2 + v31;
  uint64_t v34 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 24))(v32, v33, v34);
  return a1;
}

_OWORD *initializeWithTake for AspireApiResponse(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AspireApiResponse.OneOf_Response(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      long long v14 = a2[1];
      *a1 = *a2;
      a1[1] = v14;
      uint64_t v15 = *(int *)(type metadata accessor for AspireApiOPRFResponse(0) + 24);
      unint64_t v16 = (char *)a1 + v15;
      uint64_t v17 = (char *)a2 + v15;
      uint64_t v18 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v16, v17, v18);
    }
    else
    {
      *(void *)a1 = *(void *)a2;
      if (EnumCaseMultiPayload == 1) {
        uint64_t v10 = *(int *)(type metadata accessor for AspireApiPECResponse(0) + 20);
      }
      else {
        uint64_t v10 = *(int *)(type metadata accessor for AspireApiPIRResponse(0) + 20);
      }
      uint64_t v11 = (char *)a1 + v10;
      uint64_t v12 = (char *)a2 + v10;
      uint64_t v13 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v19 = *(int *)(a3 + 20);
  uint64_t v20 = (char *)a1 + v19;
  unint64_t v21 = (char *)a2 + v19;
  uint64_t v22 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 32))(v20, v21, v22);
  return a1;
}

_OWORD *assignWithTake for AspireApiResponse(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AspireApiResponse.OneOf_Response(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2)
      {
        long long v22 = a2[1];
        *a1 = *a2;
        a1[1] = v22;
        uint64_t v23 = *(int *)(type metadata accessor for AspireApiOPRFResponse(0) + 24);
        uint64_t v24 = (char *)a1 + v23;
        uint64_t v25 = (char *)a2 + v23;
        uint64_t v26 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 32))(v24, v25, v26);
      }
      else
      {
        *(void *)a1 = *(void *)a2;
        if (EnumCaseMultiPayload == 1) {
          uint64_t v12 = *(int *)(type metadata accessor for AspireApiPECResponse(0) + 20);
        }
        else {
          uint64_t v12 = *(int *)(type metadata accessor for AspireApiPIRResponse(0) + 20);
        }
        uint64_t v13 = (char *)a1 + v12;
        long long v14 = (char *)a2 + v12;
        uint64_t v15 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32))(v13, v14, v15);
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_18;
    }
LABEL_9:
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
    memcpy(a1, a2, *(void *)(*(void *)(v16 - 8) + 64));
    goto LABEL_18;
  }
  if (v10)
  {
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)a1, type metadata accessor for AspireApiResponse.OneOf_Response);
    goto LABEL_9;
  }
  if (a1 != a2)
  {
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)a1, type metadata accessor for AspireApiResponse.OneOf_Response);
    int v17 = swift_getEnumCaseMultiPayload();
    if (v17 == 2)
    {
      long long v32 = a2[1];
      *a1 = *a2;
      a1[1] = v32;
      uint64_t v33 = *(int *)(type metadata accessor for AspireApiOPRFResponse(0) + 24);
      uint64_t v34 = (char *)a1 + v33;
      uint64_t v35 = (char *)a2 + v33;
      uint64_t v36 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v36 - 8) + 32))(v34, v35, v36);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      *(void *)a1 = *(void *)a2;
      if (v17 == 1) {
        uint64_t v18 = *(int *)(type metadata accessor for AspireApiPECResponse(0) + 20);
      }
      else {
        uint64_t v18 = *(int *)(type metadata accessor for AspireApiPIRResponse(0) + 20);
      }
      uint64_t v19 = (char *)a1 + v18;
      uint64_t v20 = (char *)a2 + v18;
      uint64_t v21 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 32))(v19, v20, v21);
      swift_storeEnumTagMultiPayload();
    }
  }
LABEL_18:
  uint64_t v27 = *(int *)(a3 + 20);
  uint64_t v28 = (char *)a1 + v27;
  uint64_t v29 = (char *)a2 + v27;
  uint64_t v30 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 40))(v28, v29, v30);
  return a1;
}

uint64_t getEnumTagSinglePayload for AspireApiResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_249DC9E48);
}

uint64_t sub_249DC9E48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_40Tm(a1, a2, a3, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
}

uint64_t storeEnumTagSinglePayload for AspireApiResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_249DC9E68);
}

uint64_t sub_249DC9E68(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_41Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
}

void type metadata completion function for AspireApiResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t *initializeBufferWithCopyOfBuffer for AspireApiResponse.OneOf_Response(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v13 = *a2;
      unint64_t v14 = a2[1];
      outlined copy of Data._Representation(*a2, v14);
      *a1 = v13;
      a1[1] = v14;
      uint64_t v15 = a2[2];
      unint64_t v16 = a2[3];
      outlined copy of Data._Representation(v15, v16);
      a1[2] = v15;
      a1[3] = v16;
      uint64_t v17 = *(int *)(type metadata accessor for AspireApiOPRFResponse(0) + 24);
      uint64_t v18 = (char *)a1 + v17;
      uint64_t v19 = (char *)a2 + v17;
      uint64_t v20 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16))(v18, v19, v20);
    }
    else
    {
      *a1 = *a2;
      if (EnumCaseMultiPayload == 1) {
        uint64_t v7 = *(int *)(type metadata accessor for AspireApiPECResponse(0) + 20);
      }
      else {
        uint64_t v7 = *(int *)(type metadata accessor for AspireApiPIRResponse(0) + 20);
      }
      uint64_t v8 = (char *)a1 + v7;
      int v9 = (char *)a2 + v7;
      uint64_t v10 = type metadata accessor for UnknownStorage();
      uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
      swift_bridgeObjectRetain();
      v11(v8, v9, v10);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for AspireApiResponse.OneOf_Response(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 2)
  {
    outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
    outlined consume of Data._Representation(*(void *)(a1 + 16), *(void *)(a1 + 24));
    uint64_t v4 = *(int *)(type metadata accessor for AspireApiOPRFResponse(0) + 24);
  }
  else
  {
    if (result == 1)
    {
      swift_bridgeObjectRelease();
      uint64_t v3 = type metadata accessor for AspireApiPECResponse(0);
    }
    else
    {
      if (result) {
        return result;
      }
      swift_bridgeObjectRelease();
      uint64_t v3 = type metadata accessor for AspireApiPIRResponse(0);
    }
    uint64_t v4 = *(int *)(v3 + 20);
  }
  uint64_t v5 = a1 + v4;
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
  return v7(v5, v6);
}

uint64_t *initializeWithCopy for AspireApiResponse.OneOf_Response(uint64_t *a1, uint64_t *a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v6 = *a2;
    unint64_t v7 = a2[1];
    outlined copy of Data._Representation(*a2, v7);
    *a1 = v6;
    a1[1] = v7;
    uint64_t v8 = a2[2];
    unint64_t v9 = a2[3];
    outlined copy of Data._Representation(v8, v9);
    a1[2] = v8;
    a1[3] = v9;
    uint64_t v10 = *(int *)(type metadata accessor for AspireApiOPRFResponse(0) + 24);
    uint64_t v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    uint64_t v13 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
  }
  else
  {
    *a1 = *a2;
    if (EnumCaseMultiPayload == 1) {
      uint64_t v5 = type metadata accessor for AspireApiPECResponse(0);
    }
    else {
      uint64_t v5 = type metadata accessor for AspireApiPIRResponse(0);
    }
    uint64_t v14 = *(int *)(v5 + 20);
    uint64_t v15 = (char *)a1 + v14;
    unint64_t v16 = (char *)a2 + v14;
    uint64_t v17 = type metadata accessor for UnknownStorage();
    uint64_t v18 = *(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16);
    swift_bridgeObjectRetain();
    v18(v15, v16, v17);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t *assignWithCopy for AspireApiResponse.OneOf_Response(uint64_t *a1, uint64_t *a2)
{
  if (a1 != a2)
  {
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)a1, type metadata accessor for AspireApiResponse.OneOf_Response);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v6 = *a2;
      unint64_t v7 = a2[1];
      outlined copy of Data._Representation(*a2, v7);
      *a1 = v6;
      a1[1] = v7;
      uint64_t v8 = a2[2];
      unint64_t v9 = a2[3];
      outlined copy of Data._Representation(v8, v9);
      a1[2] = v8;
      a1[3] = v9;
      uint64_t v10 = *(int *)(type metadata accessor for AspireApiOPRFResponse(0) + 24);
      uint64_t v11 = (char *)a1 + v10;
      uint64_t v12 = (char *)a2 + v10;
      uint64_t v13 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
    }
    else
    {
      *a1 = *a2;
      if (EnumCaseMultiPayload == 1) {
        uint64_t v5 = type metadata accessor for AspireApiPECResponse(0);
      }
      else {
        uint64_t v5 = type metadata accessor for AspireApiPIRResponse(0);
      }
      uint64_t v14 = *(int *)(v5 + 20);
      uint64_t v15 = (char *)a1 + v14;
      unint64_t v16 = (char *)a2 + v14;
      uint64_t v17 = type metadata accessor for UnknownStorage();
      uint64_t v18 = *(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16);
      swift_bridgeObjectRetain();
      v18(v15, v16, v17);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_OWORD *initializeWithTake for AspireApiResponse.OneOf_Response(_OWORD *a1, _OWORD *a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    long long v9 = a2[1];
    *a1 = *a2;
    a1[1] = v9;
    uint64_t v10 = *(int *)(type metadata accessor for AspireApiOPRFResponse(0) + 24);
    uint64_t v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    uint64_t v13 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
  }
  else
  {
    *(void *)a1 = *(void *)a2;
    if (EnumCaseMultiPayload == 1) {
      uint64_t v5 = *(int *)(type metadata accessor for AspireApiPECResponse(0) + 20);
    }
    else {
      uint64_t v5 = *(int *)(type metadata accessor for AspireApiPIRResponse(0) + 20);
    }
    uint64_t v6 = (char *)a1 + v5;
    unint64_t v7 = (char *)a2 + v5;
    uint64_t v8 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_OWORD *assignWithTake for AspireApiResponse.OneOf_Response(_OWORD *a1, _OWORD *a2)
{
  if (a1 != a2)
  {
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)a1, type metadata accessor for AspireApiResponse.OneOf_Response);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      long long v9 = a2[1];
      *a1 = *a2;
      a1[1] = v9;
      uint64_t v10 = *(int *)(type metadata accessor for AspireApiOPRFResponse(0) + 24);
      uint64_t v11 = (char *)a1 + v10;
      uint64_t v12 = (char *)a2 + v10;
      uint64_t v13 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
    }
    else
    {
      *(void *)a1 = *(void *)a2;
      if (EnumCaseMultiPayload == 1) {
        uint64_t v5 = *(int *)(type metadata accessor for AspireApiPECResponse(0) + 20);
      }
      else {
        uint64_t v5 = *(int *)(type metadata accessor for AspireApiPIRResponse(0) + 20);
      }
      uint64_t v6 = (char *)a1 + v5;
      unint64_t v7 = (char *)a2 + v5;
      uint64_t v8 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata completion function for AspireApiResponse.OneOf_Response(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for AspireApiRequest.OneOf_Request(a1, a2, a3, type metadata accessor for AspireApiPIRResponse, type metadata accessor for AspireApiPECResponse, type metadata accessor for AspireApiOPRFResponse);
}

uint64_t type metadata completion function for AspireApiRequest.OneOf_Request(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t), uint64_t (*a6)(uint64_t))
{
  uint64_t result = a4(319);
  if (v9 <= 0x3F)
  {
    uint64_t result = a5(319);
    if (v10 <= 0x3F)
    {
      uint64_t result = a6(319);
      if (v11 <= 0x3F)
      {
        swift_initEnumMetadataMultiPayload();
        return 0;
      }
    }
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for AspireApiPIRShardConfig(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = a2[2];
    uint64_t v7 = a3[7];
    uint64_t v8 = (char *)a1 + v7;
    unint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for UnknownStorage();
    unint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    v11(v8, v9, v10);
    uint64_t v12 = a3[8];
    uint64_t v13 = a3[9];
    uint64_t v14 = (void *)((char *)v4 + v12);
    uint64_t v15 = (void *)((char *)a2 + v12);
    uint64_t v16 = v15[1];
    *uint64_t v14 = *v15;
    v14[1] = v16;
    *((unsigned char *)v4 + v13) = *((unsigned char *)a2 + v13);
    uint64_t v17 = a3[10];
    uint64_t v18 = (char *)v4 + v17;
    uint64_t v19 = (char *)a2 + v17;
    v18[8] = v19[8];
    *(void *)uint64_t v18 = *(void *)v19;
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for AspireApiPIRShardConfig(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AspireApiPIRShardConfig(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = a3[7];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  uint64_t v11 = a3[8];
  uint64_t v12 = a3[9];
  uint64_t v13 = (void *)(a1 + v11);
  uint64_t v14 = (void *)(a2 + v11);
  uint64_t v15 = v14[1];
  void *v13 = *v14;
  v13[1] = v15;
  *(unsigned char *)(a1 + v12) = *(unsigned char *)(a2 + v12);
  uint64_t v16 = a3[10];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  *(unsigned char *)(v17 + 8) = *(unsigned char *)(v18 + 8);
  *(void *)uint64_t v17 = *(void *)v18;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for AspireApiPIRShardConfig(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[7];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = a3[8];
  uint64_t v11 = (void *)((char *)a1 + v10);
  uint64_t v12 = (void *)((char *)a2 + v10);
  *uint64_t v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
  uint64_t v13 = a3[10];
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  uint64_t v16 = *(void *)v15;
  v14[8] = v15[8];
  *(void *)uint64_t v14 = v16;
  return a1;
}

uint64_t initializeWithTake for AspireApiPIRShardConfig(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = a3[7];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[9];
  *(_OWORD *)(a1 + a3[8]) = *(_OWORD *)(a2 + a3[8]);
  *(unsigned char *)(a1 + v10) = *(unsigned char *)(a2 + v10);
  uint64_t v11 = a3[10];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  *(void *)uint64_t v12 = *(void *)v13;
  *(unsigned char *)(v12 + 8) = *(unsigned char *)(v13 + 8);
  return a1;
}

uint64_t assignWithTake for AspireApiPIRShardConfig(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[7];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = a3[8];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (uint64_t *)(a2 + v10);
  uint64_t v14 = *v12;
  uint64_t v13 = v12[1];
  *uint64_t v11 = v14;
  v11[1] = v13;
  swift_bridgeObjectRelease();
  uint64_t v15 = a3[10];
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  *(void *)uint64_t v16 = *(void *)v17;
  *(unsigned char *)(v16 + 8) = *(unsigned char *)(v17 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for AspireApiPIRShardConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_249DCAE88);
}

uint64_t sub_249DCAE88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 28);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for AspireApiPIRShardConfig(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_249DCAF4C);
}

uint64_t sub_249DCAF4C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 16) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 28);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for AspireApiPIRShardConfig()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AspireApiPIRConfig(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
  }
  swift_retain();
  return a1;
}

uint64_t destroy for AspireApiPIRConfig(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return swift_release();
}

uint64_t initializeWithCopy for AspireApiPIRConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AspireApiPIRConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for AspireApiPIRConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for AspireApiPIRConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AspireApiPIRConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_249DCB41C);
}

uint64_t sub_249DCB41C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for AspireApiPIRConfig(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_249DCB4F0);
}

uint64_t sub_249DCB4F0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata completion function for AspireApiPIRConfig()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AspireApiPIRShardConfigs(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for AspireApiPIRShardConfigs.OneOf_ShardConfigs(0);
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiPIRShardConfigs.OneOf_ShardConfigs?);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      *(_DWORD *)a1 = *(_DWORD *)a2;
      uint64_t v11 = type metadata accessor for AspireApiPIRFixedShardConfig(0);
      uint64_t v12 = *(int *)(v11 + 20);
      uint64_t v13 = (char *)a1 + v12;
      uint64_t v14 = (char *)a2 + v12;
      uint64_t v15 = type metadata accessor for UnknownStorage();
      uint64_t v38 = *(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16);
      v38(v13, v14, v15);
      uint64_t v16 = *(int *)(v11 + 24);
      uint64_t v17 = (uint64_t *)((char *)a1 + v16);
      uint64_t v18 = (uint64_t *)((char *)a2 + v16);
      uint64_t v19 = (int *)type metadata accessor for AspireApiPIRShardConfig(0);
      uint64_t v20 = *((void *)v19 - 1);
      if ((*(unsigned int (**)(void *, uint64_t, int *))(v20 + 48))(v18, 1, v19))
      {
        uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiPIRShardConfig?);
        memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
      }
      else
      {
        *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
        v17[2] = v18[2];
        uint64_t v22 = v19[7];
        uint64_t v36 = (char *)v18 + v22;
        unint64_t v37 = (char *)v17 + v22;
        swift_bridgeObjectRetain();
        v38(v37, v36, v15);
        uint64_t v23 = v19[8];
        uint64_t v24 = (void *)((char *)v17 + v23);
        uint64_t v25 = (void *)((char *)v18 + v23);
        uint64_t v26 = v25[1];
        *uint64_t v24 = *v25;
        v24[1] = v26;
        *((unsigned char *)v17 + v19[9]) = *((unsigned char *)v18 + v19[9]);
        uint64_t v27 = v19[10];
        uint64_t v28 = (char *)v17 + v27;
        uint64_t v29 = (char *)v18 + v27;
        v28[8] = v29[8];
        *(void *)uint64_t v28 = *(void *)v29;
        uint64_t v30 = *(void (**)(void *, void, uint64_t, int *))(v20 + 56);
        swift_bridgeObjectRetain();
        v30(v17, 0, 1, v19);
      }
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    uint64_t v31 = *(int *)(a3 + 20);
    long long v32 = (char *)a1 + v31;
    uint64_t v33 = (char *)a2 + v31;
    uint64_t v34 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 16))(v32, v33, v34);
  }
  return a1;
}

uint64_t destroy for AspireApiPIRShardConfigs(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AspireApiPIRShardConfigs.OneOf_ShardConfigs(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, 1, v4))
  {
    uint64_t v5 = type metadata accessor for AspireApiPIRFixedShardConfig(0);
    uint64_t v6 = a1 + *(int *)(v5 + 20);
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
    v8(v6, v7);
    uint64_t v9 = a1 + *(int *)(v5 + 24);
    uint64_t v10 = type metadata accessor for AspireApiPIRShardConfig(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v9, 1, v10))
    {
      swift_bridgeObjectRelease();
      v8(v9 + *(int *)(v10 + 28), v7);
      swift_bridgeObjectRelease();
    }
  }
  uint64_t v11 = a1 + *(int *)(a2 + 20);
  uint64_t v12 = type metadata accessor for UnknownStorage();
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8);
  return v13(v11, v12);
}

_DWORD *initializeWithCopy for AspireApiPIRShardConfigs(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AspireApiPIRShardConfigs.OneOf_ShardConfigs(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiPIRShardConfigs.OneOf_ShardConfigs?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    uint64_t v38 = a3;
    *a1 = *a2;
    uint64_t v9 = type metadata accessor for AspireApiPIRFixedShardConfig(0);
    uint64_t v10 = *(int *)(v9 + 20);
    uint64_t v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    uint64_t v13 = type metadata accessor for UnknownStorage();
    uint64_t v14 = (void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16);
    unint64_t v37 = *v14;
    (*v14)(v11, v12, v13);
    uint64_t v15 = *(int *)(v9 + 24);
    uint64_t v16 = (void *)((char *)a1 + v15);
    uint64_t v17 = (void *)((char *)a2 + v15);
    uint64_t v18 = (int *)type metadata accessor for AspireApiPIRShardConfig(0);
    uint64_t v19 = *((void *)v18 - 1);
    if ((*(unsigned int (**)(void *, uint64_t, int *))(v19 + 48))(v17, 1, v18))
    {
      uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiPIRShardConfig?);
      memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
    }
    else
    {
      *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
      v16[2] = v17[2];
      uint64_t v21 = v18[7];
      uint64_t v35 = (char *)v17 + v21;
      uint64_t v36 = (char *)v16 + v21;
      swift_bridgeObjectRetain();
      v37(v36, v35, v13);
      uint64_t v22 = v18[8];
      uint64_t v23 = (void *)((char *)v16 + v22);
      uint64_t v24 = (void *)((char *)v17 + v22);
      uint64_t v25 = v24[1];
      *uint64_t v23 = *v24;
      v23[1] = v25;
      *((unsigned char *)v16 + v18[9]) = *((unsigned char *)v17 + v18[9]);
      uint64_t v26 = v18[10];
      uint64_t v27 = (char *)v16 + v26;
      uint64_t v28 = (char *)v17 + v26;
      v27[8] = v28[8];
      *(void *)uint64_t v27 = *(void *)v28;
      uint64_t v29 = *(void (**)(void *, void, uint64_t, int *))(v19 + 56);
      swift_bridgeObjectRetain();
      v29(v16, 0, 1, v18);
    }
    (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
    a3 = v38;
  }
  uint64_t v30 = *(int *)(a3 + 20);
  uint64_t v31 = (char *)a1 + v30;
  long long v32 = (char *)a2 + v30;
  uint64_t v33 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v33 - 8) + 16))(v31, v32, v33);
  return a1;
}

char *assignWithCopy for AspireApiPIRShardConfigs(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AspireApiPIRShardConfigs.OneOf_ShardConfigs(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      uint64_t v80 = a3;
      *(_DWORD *)a1 = *(_DWORD *)a2;
      uint64_t v11 = type metadata accessor for AspireApiPIRFixedShardConfig(0);
      uint64_t v12 = *(int *)(v11 + 20);
      uint64_t v13 = &a1[v12];
      uint64_t v14 = &a2[v12];
      uint64_t v15 = type metadata accessor for UnknownStorage();
      uint64_t v16 = (void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16);
      uint64_t v78 = *v16;
      (*v16)(v13, v14, v15);
      uint64_t v17 = *(int *)(v11 + 24);
      uint64_t v18 = &a1[v17];
      uint64_t v19 = &a2[v17];
      uint64_t v20 = (int *)type metadata accessor for AspireApiPIRShardConfig(0);
      uint64_t v21 = *((void *)v20 - 1);
      if ((*(unsigned int (**)(char *, uint64_t, int *))(v21 + 48))(v19, 1, v20))
      {
        uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiPIRShardConfig?);
        memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
      }
      else
      {
        *(void *)uint64_t v18 = *(void *)v19;
        *((void *)v18 + 1) = *((void *)v19 + 1);
        *((void *)v18 + 2) = *((void *)v19 + 2);
        uint64_t v40 = v20[7];
        uint64_t v75 = &v19[v40];
        uint64_t v77 = &v18[v40];
        swift_bridgeObjectRetain();
        v78(v77, v75, v15);
        uint64_t v41 = v20[8];
        uint64_t v42 = &v18[v41];
        uint64_t v43 = &v19[v41];
        char *v42 = *v43;
        v42[1] = v43[1];
        v18[v20[9]] = v19[v20[9]];
        uint64_t v44 = v20[10];
        uint64_t v45 = &v18[v44];
        uint64_t v46 = &v19[v44];
        char v47 = v46[8];
        *(void *)uint64_t v45 = *(void *)v46;
        v45[8] = v47;
        uint64_t v48 = *(void (**)(void *, void, uint64_t, int *))(v21 + 56);
        swift_bridgeObjectRetain();
        v48(v18, 0, 1, v20);
      }
      a3 = v80;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_15;
    }
    goto LABEL_7;
  }
  if (v10)
  {
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)a1, type metadata accessor for AspireApiPIRShardConfigs.OneOf_ShardConfigs);
LABEL_7:
    size_t v23 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiPIRShardConfigs.OneOf_ShardConfigs?)
                                - 8)
                    + 64);
    uint64_t v24 = a1;
    uint64_t v25 = a2;
LABEL_8:
    memcpy(v24, v25, v23);
    goto LABEL_15;
  }
  uint64_t v81 = a3;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v26 = type metadata accessor for AspireApiPIRFixedShardConfig(0);
  uint64_t v27 = *(int *)(v26 + 20);
  uint64_t v28 = &a1[v27];
  uint64_t v29 = &a2[v27];
  uint64_t v30 = type metadata accessor for UnknownStorage();
  uint64_t v74 = *(void *)(v30 - 8);
  uint64_t v31 = *(void (**)(char *, char *))(v74 + 24);
  uint64_t v79 = v30;
  v31(v28, v29);
  uint64_t v32 = *(int *)(v26 + 24);
  uint64_t v33 = &a1[v32];
  uint64_t v34 = &a2[v32];
  uint64_t v35 = (int *)type metadata accessor for AspireApiPIRShardConfig(0);
  uint64_t v76 = *((void *)v35 - 1);
  uint64_t v36 = *(uint64_t (**)(void *, uint64_t, int *))(v76 + 48);
  int v37 = v36(v33, 1, v35);
  int v38 = v36(v34, 1, v35);
  if (!v37)
  {
    uint64_t v54 = (void (*)(char *, char *, uint64_t))v31;
    a3 = v81;
    if (!v38)
    {
      *(void *)uint64_t v33 = *(void *)v34;
      *((void *)v33 + 1) = *((void *)v34 + 1);
      *((void *)v33 + 2) = *((void *)v34 + 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v54(&v33[v35[7]], &v34[v35[7]], v79);
      uint64_t v67 = v35[8];
      uint64_t v68 = &v33[v67];
      uint64_t v69 = &v34[v67];
      *(void *)uint64_t v68 = *(void *)v69;
      *((void *)v68 + 1) = *((void *)v69 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v33[v35[9]] = v34[v35[9]];
      uint64_t v70 = v35[10];
      uint64_t v71 = &v33[v70];
      unint64_t v72 = &v34[v70];
      uint64_t v73 = *(void *)v72;
      v71[8] = v72[8];
      *(void *)uint64_t v71 = v73;
      goto LABEL_15;
    }
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v33, type metadata accessor for AspireApiPIRShardConfig);
    size_t v23 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiPIRShardConfig?)
                                - 8)
                    + 64);
    uint64_t v24 = v33;
    uint64_t v25 = v34;
    goto LABEL_8;
  }
  if (v38)
  {
    uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiPIRShardConfig?);
    memcpy(v33, v34, *(void *)(*(void *)(v39 - 8) + 64));
  }
  else
  {
    *(void *)uint64_t v33 = *(void *)v34;
    *((void *)v33 + 1) = *((void *)v34 + 1);
    *((void *)v33 + 2) = *((void *)v34 + 2);
    uint64_t v55 = v35[7];
    uint64_t v56 = &v33[v55];
    uint64_t v57 = &v34[v55];
    uint64_t v58 = *(void (**)(char *, char *, uint64_t))(v74 + 16);
    swift_bridgeObjectRetain();
    v58(v56, v57, v79);
    uint64_t v59 = v35[8];
    uint64_t v60 = &v33[v59];
    uint64_t v61 = &v34[v59];
    *(void *)uint64_t v60 = *(void *)v61;
    *((void *)v60 + 1) = *((void *)v61 + 1);
    v33[v35[9]] = v34[v35[9]];
    uint64_t v62 = v35[10];
    uint64_t v63 = &v33[v62];
    uint64_t v64 = &v34[v62];
    char v65 = v64[8];
    *(void *)uint64_t v63 = *(void *)v64;
    v63[8] = v65;
    uint64_t v66 = *(void (**)(void *, void, uint64_t, int *))(v76 + 56);
    swift_bridgeObjectRetain();
    v66(v33, 0, 1, v35);
  }
  a3 = v81;
LABEL_15:
  uint64_t v49 = *(int *)(a3 + 20);
  uint64_t v50 = &a1[v49];
  uint64_t v51 = &a2[v49];
  uint64_t v52 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v52 - 8) + 24))(v50, v51, v52);
  return a1;
}

_DWORD *initializeWithTake for AspireApiPIRShardConfigs(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AspireApiPIRShardConfigs.OneOf_ShardConfigs(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiPIRShardConfigs.OneOf_ShardConfigs?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    uint64_t v30 = a3;
    *a1 = *a2;
    uint64_t v9 = type metadata accessor for AspireApiPIRFixedShardConfig(0);
    uint64_t v10 = *(int *)(v9 + 20);
    uint64_t v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    uint64_t v13 = type metadata accessor for UnknownStorage();
    uint64_t v14 = (void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32);
    uint64_t v29 = *v14;
    (*v14)(v11, v12, v13);
    uint64_t v15 = *(int *)(v9 + 24);
    uint64_t v16 = (void *)((char *)a1 + v15);
    uint64_t v17 = (void *)((char *)a2 + v15);
    uint64_t v18 = (int *)type metadata accessor for AspireApiPIRShardConfig(0);
    uint64_t v19 = *((void *)v18 - 1);
    if ((*(unsigned int (**)(void *, uint64_t, int *))(v19 + 48))(v17, 1, v18))
    {
      uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiPIRShardConfig?);
      memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
    }
    else
    {
      *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
      v16[2] = v17[2];
      v29((char *)v16 + v18[7], (char *)v17 + v18[7], v13);
      *(_OWORD *)((char *)v16 + v18[8]) = *(_OWORD *)((char *)v17 + v18[8]);
      *((unsigned char *)v16 + v18[9]) = *((unsigned char *)v17 + v18[9]);
      uint64_t v21 = v18[10];
      uint64_t v22 = (char *)v16 + v21;
      size_t v23 = (char *)v17 + v21;
      *(void *)uint64_t v22 = *(void *)v23;
      v22[8] = v23[8];
      (*(void (**)(void *, void, uint64_t, int *))(v19 + 56))(v16, 0, 1, v18);
    }
    (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
    a3 = v30;
  }
  uint64_t v24 = *(int *)(a3 + 20);
  uint64_t v25 = (char *)a1 + v24;
  uint64_t v26 = (char *)a2 + v24;
  uint64_t v27 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 32))(v25, v26, v27);
  return a1;
}

_DWORD *assignWithTake for AspireApiPIRShardConfigs(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AspireApiPIRShardConfigs.OneOf_ShardConfigs(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      uint64_t v63 = a3;
      *a1 = *a2;
      uint64_t v26 = type metadata accessor for AspireApiPIRFixedShardConfig(0);
      uint64_t v27 = *(int *)(v26 + 20);
      uint64_t v28 = (char *)a1 + v27;
      uint64_t v29 = (char *)a2 + v27;
      uint64_t v30 = type metadata accessor for UnknownStorage();
      uint64_t v59 = *(void *)(v30 - 8);
      uint64_t v61 = v30;
      uint64_t v31 = *(void (**)(char *, char *))(v59 + 40);
      v31(v28, v29);
      uint64_t v32 = *(int *)(v26 + 24);
      uint64_t v33 = (uint64_t)a1 + v32;
      uint64_t v34 = (char *)a2 + v32;
      uint64_t v35 = (int *)type metadata accessor for AspireApiPIRShardConfig(0);
      uint64_t v58 = *((void *)v35 - 1);
      uint64_t v36 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v58 + 48);
      int v37 = v36(v33, 1, v35);
      int v38 = v36((uint64_t)v34, 1, v35);
      if (v37)
      {
        a3 = v63;
        if (!v38)
        {
          *(_OWORD *)uint64_t v33 = *(_OWORD *)v34;
          *(void *)(v33 + 16) = *((void *)v34 + 2);
          (*(void (**)(uint64_t, char *, uint64_t))(v59 + 32))(v33 + v35[7], &v34[v35[7]], v61);
          *(_OWORD *)(v33 + v35[8]) = *(_OWORD *)&v34[v35[8]];
          *(unsigned char *)(v33 + v35[9]) = v34[v35[9]];
          uint64_t v39 = v35[10];
          uint64_t v40 = v33 + v39;
          uint64_t v41 = &v34[v39];
          *(void *)uint64_t v40 = *(void *)v41;
          *(unsigned char *)(v40 + 8) = v41[8];
          (*(void (**)(uint64_t, void, uint64_t, int *))(v58 + 56))(v33, 0, 1, v35);
          goto LABEL_14;
        }
      }
      else
      {
        a3 = v63;
        if (!v38)
        {
          *(_OWORD *)uint64_t v33 = *(_OWORD *)v34;
          *(void *)(v33 + 16) = *((void *)v34 + 2);
          swift_bridgeObjectRelease();
          ((void (*)(uint64_t, char *, uint64_t))v31)(v33 + v35[7], &v34[v35[7]], v61);
          uint64_t v50 = v35[8];
          uint64_t v51 = (void *)(v33 + v50);
          uint64_t v52 = &v34[v50];
          uint64_t v54 = *(void *)v52;
          uint64_t v53 = *((void *)v52 + 1);
          void *v51 = v54;
          v51[1] = v53;
          swift_bridgeObjectRelease();
          *(unsigned char *)(v33 + v35[9]) = v34[v35[9]];
          uint64_t v55 = v35[10];
          uint64_t v56 = v33 + v55;
          uint64_t v57 = &v34[v55];
          *(void *)uint64_t v56 = *(void *)v57;
          *(unsigned char *)(v56 + 8) = v57[8];
          goto LABEL_14;
        }
        _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0(v33, type metadata accessor for AspireApiPIRShardConfig);
      }
      size_t v23 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiPIRShardConfig?)
                                  - 8)
                      + 64);
      uint64_t v24 = (void *)v33;
      uint64_t v25 = v34;
      goto LABEL_8;
    }
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)a1, type metadata accessor for AspireApiPIRShardConfigs.OneOf_ShardConfigs);
LABEL_7:
    size_t v23 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiPIRShardConfigs.OneOf_ShardConfigs?)
                                - 8)
                    + 64);
    uint64_t v24 = a1;
    uint64_t v25 = a2;
LABEL_8:
    memcpy(v24, v25, v23);
    goto LABEL_14;
  }
  if (v10) {
    goto LABEL_7;
  }
  uint64_t v62 = a3;
  *a1 = *a2;
  uint64_t v11 = type metadata accessor for AspireApiPIRFixedShardConfig(0);
  uint64_t v12 = *(int *)(v11 + 20);
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = type metadata accessor for UnknownStorage();
  uint64_t v16 = (void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32);
  uint64_t v60 = *v16;
  (*v16)(v13, v14, v15);
  uint64_t v17 = *(int *)(v11 + 24);
  uint64_t v18 = (void *)((char *)a1 + v17);
  uint64_t v19 = (void *)((char *)a2 + v17);
  uint64_t v20 = (int *)type metadata accessor for AspireApiPIRShardConfig(0);
  uint64_t v21 = *((void *)v20 - 1);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v21 + 48))(v19, 1, v20))
  {
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiPIRShardConfig?);
    memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
    v18[2] = v19[2];
    v60((char *)v18 + v20[7], (char *)v19 + v20[7], v15);
    *(_OWORD *)((char *)v18 + v20[8]) = *(_OWORD *)((char *)v19 + v20[8]);
    *((unsigned char *)v18 + v20[9]) = *((unsigned char *)v19 + v20[9]);
    uint64_t v42 = v20[10];
    uint64_t v43 = (char *)v18 + v42;
    uint64_t v44 = (char *)v19 + v42;
    *(void *)uint64_t v43 = *(void *)v44;
    v43[8] = v44[8];
    (*(void (**)(void *, void, uint64_t, int *))(v21 + 56))(v18, 0, 1, v20);
  }
  a3 = v62;
  (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_14:
  uint64_t v45 = *(int *)(a3 + 20);
  uint64_t v46 = (char *)a1 + v45;
  char v47 = (char *)a2 + v45;
  uint64_t v48 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v48 - 8) + 40))(v46, v47, v48);
  return a1;
}

uint64_t getEnumTagSinglePayload for AspireApiPIRShardConfigs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_249DCCCC0);
}

uint64_t sub_249DCCCC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_40Tm(a1, a2, a3, &demangling cache variable for type metadata for AspireApiPIRShardConfigs.OneOf_ShardConfigs?);
}

uint64_t storeEnumTagSinglePayload for AspireApiPIRShardConfigs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_249DCCCE0);
}

uint64_t sub_249DCCCE0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_41Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for AspireApiPIRShardConfigs.OneOf_ShardConfigs?);
}

void type metadata completion function for AspireApiPIRShardConfigs(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void type metadata completion function for AspireApiResponse(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, void (*a5)(uint64_t))
{
  type metadata accessor for AspireHeEvaluationKeyConfig?(319, a4, a5);
  if (v5 <= 0x3F)
  {
    type metadata accessor for UnknownStorage();
    if (v6 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for AspireApiPIRShardConfigs.OneOf_ShardConfigs(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    uint64_t v6 = type metadata accessor for AspireApiPIRFixedShardConfig(0);
    uint64_t v7 = *(int *)(v6 + 20);
    uint64_t v8 = (char *)v4 + v7;
    int v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for UnknownStorage();
    uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
    v11(v8, v9, v10);
    uint64_t v12 = *(int *)(v6 + 24);
    uint64_t v13 = (uint64_t *)((char *)v4 + v12);
    uint64_t v14 = (uint64_t *)((char *)a2 + v12);
    uint64_t v15 = (int *)type metadata accessor for AspireApiPIRShardConfig(0);
    uint64_t v16 = *((void *)v15 - 1);
    if ((*(unsigned int (**)(void *, uint64_t, int *))(v16 + 48))(v14, 1, v15))
    {
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiPIRShardConfig?);
      memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
      v13[2] = v14[2];
      uint64_t v19 = v15[7];
      uint64_t v20 = (char *)v13 + v19;
      uint64_t v21 = (char *)v14 + v19;
      swift_bridgeObjectRetain();
      v11(v20, v21, v10);
      uint64_t v22 = v15[8];
      size_t v23 = (void *)((char *)v13 + v22);
      uint64_t v24 = (void *)((char *)v14 + v22);
      uint64_t v25 = v24[1];
      *size_t v23 = *v24;
      v23[1] = v25;
      *((unsigned char *)v13 + v15[9]) = *((unsigned char *)v14 + v15[9]);
      uint64_t v26 = v15[10];
      uint64_t v27 = (char *)v13 + v26;
      uint64_t v28 = (char *)v14 + v26;
      v27[8] = v28[8];
      *(void *)uint64_t v27 = *(void *)v28;
      uint64_t v29 = *(void (**)(void *, void, uint64_t, int *))(v16 + 56);
      swift_bridgeObjectRetain();
      v29(v13, 0, 1, v15);
    }
  }
  return v4;
}

uint64_t destroy for AspireApiPIRShardConfigs.OneOf_ShardConfigs(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AspireApiPIRFixedShardConfig(0);
  uint64_t v3 = a1 + *(int *)(v2 + 20);
  uint64_t v4 = type metadata accessor for UnknownStorage();
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v5(v3, v4);
  uint64_t v6 = a1 + *(int *)(v2 + 24);
  uint64_t v7 = type metadata accessor for AspireApiPIRShardConfig(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7);
  if (!result)
  {
    swift_bridgeObjectRelease();
    v5(v6 + *(int *)(v7 + 28), v4);
    return swift_bridgeObjectRelease();
  }
  return result;
}

_DWORD *initializeWithCopy for AspireApiPIRShardConfigs.OneOf_ShardConfigs(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  uint64_t v4 = type metadata accessor for AspireApiPIRFixedShardConfig(0);
  uint64_t v5 = *(int *)(v4 + 20);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  int v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16);
  v9(v6, v7, v8);
  uint64_t v10 = *(int *)(v4 + 24);
  uint64_t v11 = (void *)((char *)a1 + v10);
  uint64_t v12 = (void *)((char *)a2 + v10);
  uint64_t v13 = (int *)type metadata accessor for AspireApiPIRShardConfig(0);
  uint64_t v14 = *((void *)v13 - 1);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v14 + 48))(v12, 1, v13))
  {
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiPIRShardConfig?);
    memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
    v11[2] = v12[2];
    uint64_t v16 = v13[7];
    uint64_t v17 = (char *)v11 + v16;
    uint64_t v18 = (char *)v12 + v16;
    swift_bridgeObjectRetain();
    v9(v17, v18, v8);
    uint64_t v19 = v13[8];
    uint64_t v20 = (void *)((char *)v11 + v19);
    uint64_t v21 = (void *)((char *)v12 + v19);
    uint64_t v22 = v21[1];
    *uint64_t v20 = *v21;
    v20[1] = v22;
    *((unsigned char *)v11 + v13[9]) = *((unsigned char *)v12 + v13[9]);
    uint64_t v23 = v13[10];
    uint64_t v24 = (char *)v11 + v23;
    uint64_t v25 = (char *)v12 + v23;
    v24[8] = v25[8];
    *(void *)uint64_t v24 = *(void *)v25;
    uint64_t v26 = *(void (**)(void *, void, uint64_t, int *))(v14 + 56);
    swift_bridgeObjectRetain();
    v26(v11, 0, 1, v13);
  }
  return a1;
}

_DWORD *assignWithCopy for AspireApiPIRShardConfigs.OneOf_ShardConfigs(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  uint64_t v4 = type metadata accessor for AspireApiPIRFixedShardConfig(0);
  uint64_t v5 = *(int *)(v4 + 20);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void (**)(char *, char *))(v9 + 24);
  uint64_t v39 = v8;
  v10(v6, v7);
  uint64_t v11 = *(int *)(v4 + 24);
  uint64_t v40 = a1;
  uint64_t v12 = (void *)((char *)a1 + v11);
  uint64_t v13 = (void *)((char *)a2 + v11);
  uint64_t v14 = (int *)type metadata accessor for AspireApiPIRShardConfig(0);
  uint64_t v15 = *((void *)v14 - 1);
  uint64_t v16 = *(uint64_t (**)(void *, uint64_t, int *))(v15 + 48);
  LODWORD(v7) = v16(v12, 1, v14);
  int v17 = v16(v13, 1, v14);
  if (!v7)
  {
    if (!v17)
    {
      *uint64_t v12 = *v13;
      v12[1] = v13[1];
      v12[2] = v13[2];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      ((void (*)(char *, char *, uint64_t))v10)((char *)v12 + v14[7], (char *)v13 + v14[7], v39);
      uint64_t v32 = v14[8];
      uint64_t v33 = (void *)((char *)v12 + v32);
      uint64_t v34 = (void *)((char *)v13 + v32);
      void *v33 = *v34;
      v33[1] = v34[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((unsigned char *)v12 + v14[9]) = *((unsigned char *)v13 + v14[9]);
      uint64_t v35 = v14[10];
      uint64_t v36 = (char *)v12 + v35;
      int v37 = (char *)v13 + v35;
      uint64_t v38 = *(void *)v37;
      v36[8] = v37[8];
      *(void *)uint64_t v36 = v38;
      return v40;
    }
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v12, type metadata accessor for AspireApiPIRShardConfig);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiPIRShardConfig?);
    memcpy(v12, v13, *(void *)(*(void *)(v30 - 8) + 64));
    return v40;
  }
  *uint64_t v12 = *v13;
  v12[1] = v13[1];
  v12[2] = v13[2];
  uint64_t v18 = v14[7];
  uint64_t v19 = (char *)v12 + v18;
  uint64_t v20 = (char *)v13 + v18;
  uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
  swift_bridgeObjectRetain();
  v21(v19, v20, v39);
  uint64_t v22 = v14[8];
  uint64_t v23 = (void *)((char *)v12 + v22);
  uint64_t v24 = (void *)((char *)v13 + v22);
  *uint64_t v23 = *v24;
  v23[1] = v24[1];
  *((unsigned char *)v12 + v14[9]) = *((unsigned char *)v13 + v14[9]);
  uint64_t v25 = v14[10];
  uint64_t v26 = (char *)v12 + v25;
  uint64_t v27 = (char *)v13 + v25;
  char v28 = v27[8];
  *(void *)uint64_t v26 = *(void *)v27;
  v26[8] = v28;
  uint64_t v29 = *(void (**)(void *, void, uint64_t, int *))(v15 + 56);
  swift_bridgeObjectRetain();
  v29(v12, 0, 1, v14);
  return v40;
}

_DWORD *initializeWithTake for AspireApiPIRShardConfigs.OneOf_ShardConfigs(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  uint64_t v4 = type metadata accessor for AspireApiPIRFixedShardConfig(0);
  uint64_t v5 = *(int *)(v4 + 20);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32);
  v9(v6, v7, v8);
  uint64_t v10 = *(int *)(v4 + 24);
  uint64_t v11 = (void *)((char *)a1 + v10);
  uint64_t v12 = (void *)((char *)a2 + v10);
  uint64_t v13 = (int *)type metadata accessor for AspireApiPIRShardConfig(0);
  uint64_t v14 = *((void *)v13 - 1);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v14 + 48))(v12, 1, v13))
  {
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiPIRShardConfig?);
    memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
    v11[2] = v12[2];
    v9((char *)v11 + v13[7], (char *)v12 + v13[7], v8);
    *(_OWORD *)((char *)v11 + v13[8]) = *(_OWORD *)((char *)v12 + v13[8]);
    *((unsigned char *)v11 + v13[9]) = *((unsigned char *)v12 + v13[9]);
    uint64_t v16 = v13[10];
    int v17 = (char *)v11 + v16;
    uint64_t v18 = (char *)v12 + v16;
    *(void *)int v17 = *(void *)v18;
    v17[8] = v18[8];
    (*(void (**)(void *, void, uint64_t, int *))(v14 + 56))(v11, 0, 1, v13);
  }
  return a1;
}

_DWORD *assignWithTake for AspireApiPIRShardConfigs.OneOf_ShardConfigs(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  uint64_t v4 = type metadata accessor for AspireApiPIRFixedShardConfig(0);
  uint64_t v5 = *(int *)(v4 + 20);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void (**)(char *, char *))(v9 + 40);
  uint64_t v31 = v8;
  v10(v6, v7);
  uint64_t v11 = *(int *)(v4 + 24);
  uint64_t v32 = a1;
  uint64_t v12 = (void *)((char *)a1 + v11);
  uint64_t v13 = (void *)((char *)a2 + v11);
  uint64_t v14 = (int *)type metadata accessor for AspireApiPIRShardConfig(0);
  uint64_t v15 = *((void *)v14 - 1);
  uint64_t v16 = *(uint64_t (**)(void *, uint64_t, int *))(v15 + 48);
  LODWORD(v7) = v16(v12, 1, v14);
  int v17 = v16(v13, 1, v14);
  if (!v7)
  {
    if (!v17)
    {
      *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
      v12[2] = v13[2];
      swift_bridgeObjectRelease();
      ((void (*)(char *, char *, uint64_t))v10)((char *)v12 + v14[7], (char *)v13 + v14[7], v31);
      uint64_t v23 = v14[8];
      uint64_t v24 = (void *)((char *)v12 + v23);
      uint64_t v25 = (void *)((char *)v13 + v23);
      uint64_t v27 = *v25;
      uint64_t v26 = v25[1];
      *uint64_t v24 = v27;
      v24[1] = v26;
      swift_bridgeObjectRelease();
      *((unsigned char *)v12 + v14[9]) = *((unsigned char *)v13 + v14[9]);
      uint64_t v28 = v14[10];
      uint64_t v29 = (char *)v12 + v28;
      uint64_t v30 = (char *)v13 + v28;
      *(void *)uint64_t v29 = *(void *)v30;
      v29[8] = v30[8];
      return v32;
    }
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v12, type metadata accessor for AspireApiPIRShardConfig);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiPIRShardConfig?);
    memcpy(v12, v13, *(void *)(*(void *)(v21 - 8) + 64));
    return v32;
  }
  *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
  v12[2] = v13[2];
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))((char *)v12 + v14[7], (char *)v13 + v14[7], v31);
  *(_OWORD *)((char *)v12 + v14[8]) = *(_OWORD *)((char *)v13 + v14[8]);
  *((unsigned char *)v12 + v14[9]) = *((unsigned char *)v13 + v14[9]);
  uint64_t v18 = v14[10];
  uint64_t v19 = (char *)v12 + v18;
  uint64_t v20 = (char *)v13 + v18;
  *(void *)uint64_t v19 = *(void *)v20;
  v19[8] = v20[8];
  (*(void (**)(void *, void, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
  return v32;
}

uint64_t getEnumTagSinglePayload for AspireApiPIRShardConfigs.OneOf_ShardConfigs(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AspireApiPIRFixedShardConfig(0);
  return MEMORY[0x270FA0340](a1, a2, v4, sub_249DCDA94);
}

uint64_t sub_249DCDA94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_71Tm(a1, a2, a3, &demangling cache variable for type metadata for AspireApiPIRShardConfig?);
}

uint64_t storeEnumTagSinglePayload for AspireApiPIRShardConfigs.OneOf_ShardConfigs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AspireApiPIRFixedShardConfig(0);
  return MEMORY[0x270FA0580](a1, a2, a3, v6, sub_249DCDB08);
}

uint64_t sub_249DCDB08(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_72Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for AspireApiPIRShardConfig?);
}

uint64_t type metadata completion function for AspireApiPIRShardConfigs.OneOf_ShardConfigs(uint64_t a1)
{
  uint64_t result = type metadata accessor for AspireApiPIRFixedShardConfig(319);
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(result - 8);
    swift_initEnumMetadataSingleCase();
    uint64_t result = 0;
    *(_DWORD *)(*(void *)(a1 - 8) + 84) = *(_DWORD *)(v4 + 84);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AspireApiPIRFixedShardConfig(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    uint64_t v7 = *(int *)(a3 + 20);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for UnknownStorage();
    uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
    v11(v8, v9, v10);
    uint64_t v12 = *(int *)(a3 + 24);
    uint64_t v13 = (uint64_t *)((char *)v4 + v12);
    uint64_t v14 = (uint64_t *)((char *)a2 + v12);
    uint64_t v15 = (int *)type metadata accessor for AspireApiPIRShardConfig(0);
    uint64_t v16 = *((void *)v15 - 1);
    if ((*(unsigned int (**)(void *, uint64_t, int *))(v16 + 48))(v14, 1, v15))
    {
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiPIRShardConfig?);
      memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
      v13[2] = v14[2];
      uint64_t v19 = v15[7];
      uint64_t v20 = (char *)v13 + v19;
      uint64_t v21 = (char *)v14 + v19;
      swift_bridgeObjectRetain();
      v11(v20, v21, v10);
      uint64_t v22 = v15[8];
      uint64_t v23 = (void *)((char *)v13 + v22);
      uint64_t v24 = (void *)((char *)v14 + v22);
      uint64_t v25 = v24[1];
      *uint64_t v23 = *v24;
      v23[1] = v25;
      *((unsigned char *)v13 + v15[9]) = *((unsigned char *)v14 + v15[9]);
      uint64_t v26 = v15[10];
      uint64_t v27 = (char *)v13 + v26;
      uint64_t v28 = (char *)v14 + v26;
      v27[8] = v28[8];
      *(void *)uint64_t v27 = *(void *)v28;
      uint64_t v29 = *(void (**)(void *, void, uint64_t, int *))(v16 + 56);
      swift_bridgeObjectRetain();
      v29(v13, 0, 1, v15);
    }
  }
  return v4;
}

uint64_t destroy for AspireApiPIRFixedShardConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v6(v4, v5);
  uint64_t v7 = a1 + *(int *)(a2 + 24);
  uint64_t v8 = type metadata accessor for AspireApiPIRShardConfig(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v7, 1, v8);
  if (!result)
  {
    swift_bridgeObjectRelease();
    v6(v7 + *(int *)(v8 + 28), v5);
    return swift_bridgeObjectRelease();
  }
  return result;
}

_DWORD *initializeWithCopy for AspireApiPIRFixedShardConfig(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (void *)((char *)a1 + v11);
  uint64_t v13 = (void *)((char *)a2 + v11);
  uint64_t v14 = (int *)type metadata accessor for AspireApiPIRShardConfig(0);
  uint64_t v15 = *((void *)v14 - 1);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiPIRShardConfig?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
    v12[2] = v13[2];
    uint64_t v17 = v14[7];
    uint64_t v18 = (char *)v12 + v17;
    uint64_t v19 = (char *)v13 + v17;
    swift_bridgeObjectRetain();
    v10(v18, v19, v9);
    uint64_t v20 = v14[8];
    uint64_t v21 = (void *)((char *)v12 + v20);
    uint64_t v22 = (void *)((char *)v13 + v20);
    uint64_t v23 = v22[1];
    *uint64_t v21 = *v22;
    v21[1] = v23;
    *((unsigned char *)v12 + v14[9]) = *((unsigned char *)v13 + v14[9]);
    uint64_t v24 = v14[10];
    uint64_t v25 = (char *)v12 + v24;
    uint64_t v26 = (char *)v13 + v24;
    v25[8] = v26[8];
    *(void *)uint64_t v25 = *(void *)v26;
    uint64_t v27 = *(void (**)(void *, void, uint64_t, int *))(v15 + 56);
    swift_bridgeObjectRetain();
    v27(v12, 0, 1, v14);
  }
  return a1;
}

_DWORD *assignWithCopy for AspireApiPIRFixedShardConfig(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void (**)(char *, char *))(v10 + 24);
  uint64_t v40 = v9;
  v11(v7, v8);
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v41 = a1;
  uint64_t v13 = (void *)((char *)a1 + v12);
  uint64_t v14 = (void *)((char *)a2 + v12);
  uint64_t v15 = (int *)type metadata accessor for AspireApiPIRShardConfig(0);
  uint64_t v16 = *((void *)v15 - 1);
  uint64_t v17 = *(uint64_t (**)(void *, uint64_t, int *))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, v15);
  int v18 = v17(v14, 1, v15);
  if (!v8)
  {
    if (!v18)
    {
      void *v13 = *v14;
      v13[1] = v14[1];
      v13[2] = v14[2];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      ((void (*)(char *, char *, uint64_t))v11)((char *)v13 + v15[7], (char *)v14 + v15[7], v40);
      uint64_t v33 = v15[8];
      uint64_t v34 = (void *)((char *)v13 + v33);
      uint64_t v35 = (void *)((char *)v14 + v33);
      *uint64_t v34 = *v35;
      v34[1] = v35[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((unsigned char *)v13 + v15[9]) = *((unsigned char *)v14 + v15[9]);
      uint64_t v36 = v15[10];
      int v37 = (char *)v13 + v36;
      uint64_t v38 = (char *)v14 + v36;
      uint64_t v39 = *(void *)v38;
      v37[8] = v38[8];
      *(void *)int v37 = v39;
      return v41;
    }
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v13, type metadata accessor for AspireApiPIRShardConfig);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiPIRShardConfig?);
    memcpy(v13, v14, *(void *)(*(void *)(v31 - 8) + 64));
    return v41;
  }
  void *v13 = *v14;
  v13[1] = v14[1];
  v13[2] = v14[2];
  uint64_t v19 = v15[7];
  uint64_t v20 = (char *)v13 + v19;
  uint64_t v21 = (char *)v14 + v19;
  uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  swift_bridgeObjectRetain();
  v22(v20, v21, v40);
  uint64_t v23 = v15[8];
  uint64_t v24 = (void *)((char *)v13 + v23);
  uint64_t v25 = (void *)((char *)v14 + v23);
  *uint64_t v24 = *v25;
  v24[1] = v25[1];
  *((unsigned char *)v13 + v15[9]) = *((unsigned char *)v14 + v15[9]);
  uint64_t v26 = v15[10];
  uint64_t v27 = (char *)v13 + v26;
  uint64_t v28 = (char *)v14 + v26;
  char v29 = v28[8];
  *(void *)uint64_t v27 = *(void *)v28;
  v27[8] = v29;
  uint64_t v30 = *(void (**)(void *, void, uint64_t, int *))(v16 + 56);
  swift_bridgeObjectRetain();
  v30(v13, 0, 1, v15);
  return v41;
}

_DWORD *initializeWithTake for AspireApiPIRFixedShardConfig(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (void *)((char *)a1 + v11);
  uint64_t v13 = (void *)((char *)a2 + v11);
  uint64_t v14 = (int *)type metadata accessor for AspireApiPIRShardConfig(0);
  uint64_t v15 = *((void *)v14 - 1);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiPIRShardConfig?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
    v12[2] = v13[2];
    v10((char *)v12 + v14[7], (char *)v13 + v14[7], v9);
    *(_OWORD *)((char *)v12 + v14[8]) = *(_OWORD *)((char *)v13 + v14[8]);
    *((unsigned char *)v12 + v14[9]) = *((unsigned char *)v13 + v14[9]);
    uint64_t v17 = v14[10];
    int v18 = (char *)v12 + v17;
    uint64_t v19 = (char *)v13 + v17;
    *(void *)int v18 = *(void *)v19;
    v18[8] = v19[8];
    (*(void (**)(void *, void, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

_DWORD *assignWithTake for AspireApiPIRFixedShardConfig(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void (**)(char *, char *))(v10 + 40);
  uint64_t v32 = v9;
  v11(v7, v8);
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v33 = a1;
  uint64_t v13 = (void *)((char *)a1 + v12);
  uint64_t v14 = (void *)((char *)a2 + v12);
  uint64_t v15 = (int *)type metadata accessor for AspireApiPIRShardConfig(0);
  uint64_t v16 = *((void *)v15 - 1);
  uint64_t v17 = *(uint64_t (**)(void *, uint64_t, int *))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, v15);
  int v18 = v17(v14, 1, v15);
  if (!v8)
  {
    if (!v18)
    {
      *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
      v13[2] = v14[2];
      swift_bridgeObjectRelease();
      ((void (*)(char *, char *, uint64_t))v11)((char *)v13 + v15[7], (char *)v14 + v15[7], v32);
      uint64_t v24 = v15[8];
      uint64_t v25 = (void *)((char *)v13 + v24);
      uint64_t v26 = (void *)((char *)v14 + v24);
      uint64_t v28 = *v26;
      uint64_t v27 = v26[1];
      *uint64_t v25 = v28;
      v25[1] = v27;
      swift_bridgeObjectRelease();
      *((unsigned char *)v13 + v15[9]) = *((unsigned char *)v14 + v15[9]);
      uint64_t v29 = v15[10];
      uint64_t v30 = (char *)v13 + v29;
      uint64_t v31 = (char *)v14 + v29;
      *(void *)uint64_t v30 = *(void *)v31;
      v30[8] = v31[8];
      return v33;
    }
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v13, type metadata accessor for AspireApiPIRShardConfig);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiPIRShardConfig?);
    memcpy(v13, v14, *(void *)(*(void *)(v22 - 8) + 64));
    return v33;
  }
  *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
  v13[2] = v14[2];
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))((char *)v13 + v15[7], (char *)v14 + v15[7], v32);
  *(_OWORD *)((char *)v13 + v15[8]) = *(_OWORD *)((char *)v14 + v15[8]);
  *((unsigned char *)v13 + v15[9]) = *((unsigned char *)v14 + v15[9]);
  uint64_t v19 = v15[10];
  uint64_t v20 = (char *)v13 + v19;
  uint64_t v21 = (char *)v14 + v19;
  *(void *)uint64_t v20 = *(void *)v21;
  v20[8] = v21[8];
  (*(void (**)(void *, void, uint64_t, int *))(v16 + 56))(v13, 0, 1, v15);
  return v33;
}

uint64_t getEnumTagSinglePayload for AspireApiPIRFixedShardConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_249DCE800);
}

uint64_t sub_249DCE800(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_71Tm(a1, a2, a3, &demangling cache variable for type metadata for AspireApiPIRShardConfig?);
}

uint64_t __swift_get_extra_inhabitant_index_71Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a2)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    return v12(v11, a2, v10);
  }
  else
  {
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(a4);
    uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
    uint64_t v16 = v14;
    uint64_t v17 = a1 + *(int *)(a3 + 24);
    return v15(v17, a2, v16);
  }
}

uint64_t storeEnumTagSinglePayload for AspireApiPIRFixedShardConfig(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_249DCE920);
}

uint64_t sub_249DCE920(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_72Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for AspireApiPIRShardConfig?);
}

uint64_t __swift_store_extra_inhabitant_index_72Tm(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void *)(v10 - 8);
  if (*(_DWORD *)(v11 + 84) == a3)
  {
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a4 + 20);
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
    return v14(v13, a2, a2, v12);
  }
  else
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(a5);
    uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56);
    uint64_t v18 = v16;
    uint64_t v19 = a1 + *(int *)(a4 + 24);
    return v17(v19, a2, a2, v18);
  }
}

void type metadata completion function for AspireApiPIRFixedShardConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void type metadata completion function for AspireApiKeyStatus(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5, void (*a6)(uint64_t))
{
  type metadata accessor for UnknownStorage();
  if (v8 <= 0x3F)
  {
    type metadata accessor for AspireHeEvaluationKeyConfig?(319, a5, a6);
    if (v9 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for AspireApiPIRRequest(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v21 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    uint64_t v7 = a2[1];
    unint64_t v8 = a2[2];
    outlined copy of Data._Representation(v7, v8);
    v4[1] = v7;
    v4[2] = v8;
    uint64_t v9 = a3[6];
    uint64_t v10 = (char *)v4 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for UnknownStorage();
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    v13(v10, v11, v12);
    uint64_t v14 = a3[7];
    uint64_t v15 = (uint64_t *)((char *)v4 + v14);
    uint64_t v16 = (uint64_t *)((char *)a2 + v14);
    uint64_t v17 = type metadata accessor for AspirePirEncryptedIndices(0);
    uint64_t v18 = *(void *)(v17 - 8);
    uint64_t v105 = v13;
    uint64_t v107 = v4;
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
      memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      uint64_t v22 = v16[1];
      *uint64_t v15 = *v16;
      v15[1] = v22;
      uint64_t v23 = *(int *)(v17 + 24);
      uint64_t v24 = (char *)v15 + v23;
      uint64_t v25 = (char *)v16 + v23;
      swift_bridgeObjectRetain();
      uint64_t v26 = v24;
      uint64_t v4 = v107;
      v13(v26, v25, v12);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
    uint64_t v106 = v12;
    uint64_t v27 = a3[8];
    uint64_t v28 = (uint64_t *)((char *)v4 + v27);
    uint64_t v29 = (uint64_t *)((char *)a2 + v27);
    uint64_t v30 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
    uint64_t v31 = *(void *)(v30 - 8);
    uint64_t v103 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48);
    uint64_t v100 = v31;
    if (v103((char *)v29, 1, v30))
    {
      uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
      memcpy(v28, v29, *(void *)(*(void *)(v32 - 8) + 64));
    }
    else
    {
      uint64_t v33 = v4;
      uint64_t v34 = v29[1];
      *uint64_t v28 = *v29;
      unint64_t v35 = v29[2];
      outlined copy of Data._Representation(v34, v35);
      v28[1] = v34;
      v28[2] = v35;
      uint64_t v4 = v33;
      v105((char *)v28 + *(int *)(v30 + 24), (char *)v29 + *(int *)(v30 + 24), v106);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
    }
    uint64_t v36 = a3[9];
    uint64_t v37 = a3[10];
    uint64_t v38 = (uint64_t *)((char *)v4 + v36);
    uint64_t v39 = (uint64_t *)((char *)a2 + v36);
    uint64_t v40 = v39[1];
    *uint64_t v38 = *v39;
    v38[1] = v40;
    uint64_t v41 = (char *)v4 + v37;
    uint64_t v42 = (char *)a2 + v37;
    uint64_t v43 = type metadata accessor for AspireApiEvaluationKey(0);
    uint64_t v44 = *(void *)(v43 - 8);
    uint64_t v45 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48);
    swift_bridgeObjectRetain();
    if (v45(v42, 1, v43))
    {
      uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKey?);
      memcpy(v41, v42, *(void *)(*(void *)(v46 - 8) + 64));
      return v107;
    }
    else
    {
      uint64_t v47 = v106;
      v105(v41, v42, v106);
      uint64_t v48 = *(int *)(v43 + 20);
      uint64_t v99 = v41;
      uint64_t v49 = &v41[v48];
      uint64_t v50 = &v42[v48];
      if (v103(&v42[v48], 1, v30))
      {
        uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
        memcpy(v49, v50, *(void *)(*(void *)(v51 - 8) + 64));
      }
      else
      {
        uint64_t v52 = *((void *)v50 + 1);
        *(void *)uint64_t v49 = *(void *)v50;
        unint64_t v53 = *((void *)v50 + 2);
        outlined copy of Data._Representation(v52, v53);
        *((void *)v49 + 1) = v52;
        *((void *)v49 + 2) = v53;
        uint64_t v47 = v106;
        v105(&v49[*(int *)(v30 + 24)], &v50[*(int *)(v30 + 24)], v106);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v100 + 56))(v49, 0, 1, v30);
      }
      uint64_t v54 = *(int *)(v43 + 24);
      uint64_t v55 = &v41[v54];
      uint64_t v56 = &v42[v54];
      uint64_t v57 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
      uint64_t v58 = *(void *)(v57 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48))(v56, 1, v57))
      {
        uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
        memcpy(v55, v56, *(void *)(*(void *)(v59 - 8) + 64));
        uint64_t v21 = v107;
      }
      else
      {
        uint64_t v104 = v58;
        v105(v55, v56, v47);
        uint64_t v60 = *(int *)(v57 + 20);
        uint64_t v61 = &v55[v60];
        uint64_t v62 = &v56[v60];
        uint64_t v63 = type metadata accessor for AspireHeSerializedGaloisKey(0);
        uint64_t v64 = *(void *)(v63 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48))(v62, 1, v63))
        {
          uint64_t v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
          memcpy(v61, v62, *(void *)(*(void *)(v65 - 8) + 64));
          uint64_t v66 = v106;
        }
        else
        {
          *(void *)uint64_t v61 = *(void *)v62;
          uint64_t v67 = *(int *)(v63 + 20);
          uint64_t v101 = &v61[v67];
          uint64_t v68 = &v62[v67];
          swift_bridgeObjectRetain();
          uint64_t v69 = v68;
          uint64_t v66 = v106;
          v105(v101, v69, v106);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v64 + 56))(v61, 0, 1, v63);
        }
        uint64_t v70 = *(int *)(v57 + 24);
        uint64_t v71 = &v55[v70];
        unint64_t v72 = &v56[v70];
        uint64_t v73 = type metadata accessor for AspireHeSerializedRelinKey(0);
        uint64_t v74 = *(void *)(v73 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v74 + 48))(v72, 1, v73))
        {
          uint64_t v75 = v55;
          uint64_t v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
          memcpy(v71, v72, *(void *)(*(void *)(v76 - 8) + 64));
          uint64_t v21 = v107;
        }
        else
        {
          uint64_t v102 = v74;
          v105(v71, v72, v66);
          uint64_t v77 = *(int *)(v73 + 20);
          uint64_t v78 = &v71[v77];
          uint64_t v79 = &v72[v77];
          uint64_t v80 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
          uint64_t v81 = *(void *)(v80 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v81 + 48))(v79, 1, v80))
          {
            uint64_t v75 = v55;
            uint64_t v82 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
            memcpy(v78, v79, *(void *)(*(void *)(v82 - 8) + 64));
            uint64_t v83 = v102;
          }
          else
          {
            v105(v78, v79, v106);
            uint64_t v84 = *(int *)(v80 + 20);
            uint64_t v98 = &v78[v84];
            uint64_t v85 = &v79[v84];
            uint64_t v86 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
            uint64_t v93 = *(void *)(v86 - 8);
            uint64_t v96 = v85;
            uint64_t v87 = v85;
            uint64_t v88 = v86;
            uint64_t v94 = v81;
            uint64_t v95 = v78;
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v93 + 48))(v87, 1, v86))
            {
              uint64_t v89 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
              memcpy(v98, v96, *(void *)(*(void *)(v89 - 8) + 64));
            }
            else
            {
              *(void *)uint64_t v98 = *v96;
              uint64_t v90 = *(int *)(v88 + 20);
              unint64_t v91 = &v98[v90];
              uint64_t v97 = (char *)v96 + v90;
              swift_bridgeObjectRetain();
              v105(v91, v97, v106);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v93 + 56))(v98, 0, 1, v88);
            }
            uint64_t v83 = v102;
            uint64_t v75 = v55;
            (*(void (**)(char *, void, uint64_t, uint64_t))(v94 + 56))(v95, 0, 1, v80);
          }
          (*(void (**)(char *, void, uint64_t, uint64_t))(v83 + 56))(v71, 0, 1, v73);
          uint64_t v21 = v107;
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v104 + 56))(v75, 0, 1, v57);
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v44 + 56))(v99, 0, 1, v43);
    }
  }
  return v21;
}

uint64_t destroy for AspireApiPIRRequest(uint64_t a1, int *a2)
{
  outlined consume of Data._Representation(*(void *)(a1 + 8), *(void *)(a1 + 16));
  uint64_t v4 = a1 + a2[6];
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v26 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v26(v4, v5);
  uint64_t v6 = a1 + a2[7];
  uint64_t v7 = type metadata accessor for AspirePirEncryptedIndices(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7))
  {
    swift_bridgeObjectRelease();
    v26(v6 + *(int *)(v7 + 24), v5);
  }
  uint64_t v8 = a1 + a2[8];
  uint64_t v9 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  uint64_t v10 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48);
  if (!v10(v8, 1, v9))
  {
    outlined consume of Data._Representation(*(void *)(v8 + 8), *(void *)(v8 + 16));
    v26(v8 + *(int *)(v9 + 24), v5);
  }
  swift_bridgeObjectRelease();
  uint64_t v11 = a1 + a2[10];
  uint64_t v12 = type metadata accessor for AspireApiEvaluationKey(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48))(v11, 1, v12);
  if (!result)
  {
    v26(v11, v5);
    uint64_t v14 = v11 + *(int *)(v12 + 20);
    if (!v10(v14, 1, v9))
    {
      outlined consume of Data._Representation(*(void *)(v14 + 8), *(void *)(v14 + 16));
      v26(v14 + *(int *)(v9 + 24), v5);
    }
    uint64_t v15 = v11 + *(int *)(v12 + 24);
    uint64_t v16 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48))(v15, 1, v16);
    if (!result)
    {
      v26(v15, v5);
      uint64_t v17 = v15 + *(int *)(v16 + 20);
      uint64_t v18 = type metadata accessor for AspireHeSerializedGaloisKey(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 48))(v17, 1, v18))
      {
        swift_bridgeObjectRelease();
        v26(v17 + *(int *)(v18 + 20), v5);
      }
      uint64_t v19 = v15 + *(int *)(v16 + 24);
      uint64_t v20 = type metadata accessor for AspireHeSerializedRelinKey(0);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 48))(v19, 1, v20);
      if (!result)
      {
        v26(v19, v5);
        uint64_t v21 = v19 + *(int *)(v20 + 20);
        uint64_t v22 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 48))(v21, 1, v22);
        if (!result)
        {
          v26(v21, v5);
          uint64_t v23 = v21 + *(int *)(v22 + 20);
          uint64_t v24 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 48))(v23, 1, v24);
          if (!result)
          {
            swift_bridgeObjectRelease();
            uint64_t v25 = v23 + *(int *)(v24 + 20);
            return ((uint64_t (*)(uint64_t, uint64_t))v26)(v25, v5);
          }
        }
      }
    }
  }
  return result;
}

uint64_t initializeWithCopy for AspireApiPIRRequest(uint64_t a1, uint64_t a2, int *a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  unint64_t v7 = *(void *)(a2 + 16);
  outlined copy of Data._Representation(v6, v7);
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = v7;
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
  v12(v9, v10, v11);
  uint64_t v13 = a3[7];
  uint64_t v99 = a1;
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (void *)(a2 + v13);
  uint64_t v16 = type metadata accessor for AspirePirEncryptedIndices(0);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v97 = (void (*)(char *, char *, uint64_t))v12;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    uint64_t v19 = v15[1];
    *uint64_t v14 = *v15;
    v14[1] = v19;
    uint64_t v20 = *(int *)(v16 + 24);
    uint64_t v21 = (char *)v14 + v20;
    uint64_t v22 = (char *)v15 + v20;
    swift_bridgeObjectRetain();
    v12((uint64_t)v21, (uint64_t)v22, v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  uint64_t v98 = v11;
  uint64_t v23 = a3[8];
  uint64_t v24 = v99;
  uint64_t v25 = (void *)(v99 + v23);
  uint64_t v26 = (void *)(a2 + v23);
  uint64_t v27 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v95 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48);
  uint64_t v92 = v28;
  if (v95((char *)v26, 1, v27))
  {
    uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
    memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
  }
  else
  {
    uint64_t v30 = v26[1];
    *uint64_t v25 = *v26;
    unint64_t v31 = v26[2];
    outlined copy of Data._Representation(v30, v31);
    v25[1] = v30;
    v25[2] = v31;
    v97((char *)v25 + *(int *)(v27 + 24), (char *)v26 + *(int *)(v27 + 24), v98);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
  }
  uint64_t v32 = a3[9];
  uint64_t v33 = a3[10];
  uint64_t v34 = (void *)(v99 + v32);
  unint64_t v35 = (void *)(a2 + v32);
  uint64_t v36 = v35[1];
  *uint64_t v34 = *v35;
  v34[1] = v36;
  uint64_t v37 = (char *)(v99 + v33);
  uint64_t v38 = (char *)(a2 + v33);
  uint64_t v39 = type metadata accessor for AspireApiEvaluationKey(0);
  uint64_t v40 = *(void *)(v39 - 8);
  uint64_t v41 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48);
  swift_bridgeObjectRetain();
  if (v41(v38, 1, v39))
  {
    uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKey?);
    memcpy(v37, v38, *(void *)(*(void *)(v42 - 8) + 64));
  }
  else
  {
    uint64_t v90 = v40;
    uint64_t v43 = v98;
    v97(v37, v38, v98);
    uint64_t v91 = v39;
    uint64_t v44 = *(int *)(v39 + 20);
    uint64_t v45 = &v37[v44];
    uint64_t v46 = &v38[v44];
    if (v95(&v38[v44], 1, v27))
    {
      uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
      memcpy(v45, v46, *(void *)(*(void *)(v47 - 8) + 64));
    }
    else
    {
      uint64_t v48 = *((void *)v46 + 1);
      *(void *)uint64_t v45 = *(void *)v46;
      unint64_t v49 = *((void *)v46 + 2);
      outlined copy of Data._Representation(v48, v49);
      *((void *)v45 + 1) = v48;
      *((void *)v45 + 2) = v49;
      uint64_t v43 = v98;
      v97(&v45[*(int *)(v27 + 24)], &v46[*(int *)(v27 + 24)], v98);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v92 + 56))(v45, 0, 1, v27);
    }
    uint64_t v24 = v99;
    uint64_t v50 = v91;
    uint64_t v51 = *(int *)(v91 + 24);
    uint64_t v52 = &v37[v51];
    unint64_t v53 = &v38[v51];
    uint64_t v54 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
    uint64_t v55 = *(void *)(v54 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v53, 1, v54))
    {
      uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
      memcpy(v52, v53, *(void *)(*(void *)(v56 - 8) + 64));
      uint64_t v57 = v90;
    }
    else
    {
      uint64_t v96 = v55;
      v97(v52, v53, v43);
      uint64_t v58 = *(int *)(v54 + 20);
      uint64_t v100 = v52;
      uint64_t v59 = &v52[v58];
      uint64_t v60 = &v53[v58];
      uint64_t v61 = type metadata accessor for AspireHeSerializedGaloisKey(0);
      uint64_t v62 = *(void *)(v61 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48))(v60, 1, v61))
      {
        uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
        memcpy(v59, v60, *(void *)(*(void *)(v63 - 8) + 64));
      }
      else
      {
        *(void *)uint64_t v59 = *(void *)v60;
        uint64_t v64 = *(int *)(v61 + 20);
        uint64_t v93 = &v59[v64];
        uint64_t v65 = &v60[v64];
        swift_bridgeObjectRetain();
        v97(v93, v65, v43);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v62 + 56))(v59, 0, 1, v61);
      }
      uint64_t v66 = *(int *)(v54 + 24);
      uint64_t v67 = &v100[v66];
      uint64_t v68 = &v53[v66];
      uint64_t v69 = type metadata accessor for AspireHeSerializedRelinKey(0);
      uint64_t v70 = *(void *)(v69 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v70 + 48))(v68, 1, v69))
      {
        uint64_t v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
        memcpy(v67, v68, *(void *)(*(void *)(v71 - 8) + 64));
      }
      else
      {
        uint64_t v94 = v70;
        v97(v67, v68, v43);
        uint64_t v72 = *(int *)(v69 + 20);
        uint64_t v73 = &v67[v72];
        uint64_t v74 = &v68[v72];
        uint64_t v75 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
        uint64_t v76 = *(void *)(v75 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v76 + 48))(v74, 1, v75))
        {
          uint64_t v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
          memcpy(v73, v74, *(void *)(*(void *)(v77 - 8) + 64));
          uint64_t v78 = v94;
        }
        else
        {
          v97(v73, v74, v98);
          uint64_t v79 = *(int *)(v75 + 20);
          uint64_t v89 = v73;
          uint64_t v80 = &v73[v79];
          uint64_t v81 = &v74[v79];
          uint64_t v82 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
          uint64_t v88 = *(void *)(v82 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v88 + 48))(v81, 1, v82))
          {
            uint64_t v83 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
            memcpy(v80, v81, *(void *)(*(void *)(v83 - 8) + 64));
          }
          else
          {
            *(void *)uint64_t v80 = *(void *)v81;
            uint64_t v84 = *(int *)(v82 + 20);
            uint64_t v87 = &v80[v84];
            uint64_t v85 = &v81[v84];
            swift_bridgeObjectRetain();
            v97(v87, v85, v98);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v88 + 56))(v80, 0, 1, v82);
          }
          uint64_t v78 = v94;
          (*(void (**)(char *, void, uint64_t, uint64_t))(v76 + 56))(v89, 0, 1, v75);
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v78 + 56))(v67, 0, 1, v69);
      }
      uint64_t v57 = v90;
      uint64_t v50 = v91;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v96 + 56))(v100, 0, 1, v54);
    }
    (*(void (**)(char *, void, uint64_t, uint64_t))(v57 + 56))(v37, 0, 1, v50);
  }
  return v24;
}

uint64_t assignWithCopy for AspireApiPIRRequest(uint64_t a1, uint64_t a2, int *a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  unint64_t v7 = *(void *)(a2 + 16);
  outlined copy of Data._Representation(v6, v7);
  uint64_t v8 = *(void *)(a1 + 8);
  unint64_t v9 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = v7;
  outlined consume of Data._Representation(v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage();
  __dstc = (void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 24);
  uint64_t v232 = *(void *)(v13 - 8);
  uint64_t v225 = *__dstc;
  (*__dstc)(v11, v12, v13);
  uint64_t v14 = a3[7];
  uint64_t v237 = a1;
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (void *)(a2 + v14);
  uint64_t v17 = type metadata accessor for AspirePirEncryptedIndices(0);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v18 + 48);
  int v20 = v19(v15, 1, v17);
  int v21 = v19(v16, 1, v17);
  uint64_t v236 = v13;
  if (v20)
  {
    if (!v21)
    {
      *uint64_t v15 = *v16;
      v15[1] = v16[1];
      uint64_t v22 = *(int *)(v17 + 24);
      uint64_t v23 = (char *)v15 + v22;
      uint64_t v24 = (char *)v16 + v22;
      uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v232 + 16);
      swift_bridgeObjectRetain();
      v25(v23, v24, v13);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v21)
  {
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v15, type metadata accessor for AspirePirEncryptedIndices);
LABEL_6:
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
    memcpy(v15, v16, *(void *)(*(void *)(v26 - 8) + 64));
    goto LABEL_7;
  }
  *uint64_t v15 = *v16;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v15[1] = v16[1];
  v225((uint64_t)v15 + *(int *)(v17 + 24), (uint64_t)v16 + *(int *)(v17 + 24), v13);
LABEL_7:
  uint64_t v27 = a3[8];
  uint64_t v28 = (char *)(v237 + v27);
  uint64_t v29 = (char *)(a2 + v27);
  uint64_t v30 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  uint64_t v31 = *(void *)(v30 - 8);
  uint64_t v32 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v31 + 48);
  int v33 = v32(v28, 1, v30);
  int v34 = v32(v29, 1, v30);
  uint64_t v221 = v31;
  if (v33)
  {
    if (!v34)
    {
      *(void *)uint64_t v28 = *(void *)v29;
      uint64_t v35 = *((void *)v29 + 1);
      unint64_t v36 = *((void *)v29 + 2);
      outlined copy of Data._Representation(v35, v36);
      *((void *)v28 + 1) = v35;
      *((void *)v28 + 2) = v36;
      (*(void (**)(char *, char *, uint64_t))(v232 + 16))(&v28[*(int *)(v30 + 24)], &v29[*(int *)(v30 + 24)], v236);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v34)
  {
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v28, type metadata accessor for AspireApiEvaluationKeyMetadata);
LABEL_12:
    uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
    memcpy(v28, v29, *(void *)(*(void *)(v37 - 8) + 64));
    goto LABEL_13;
  }
  *(void *)uint64_t v28 = *(void *)v29;
  uint64_t v59 = *((void *)v29 + 1);
  unint64_t v60 = *((void *)v29 + 2);
  outlined copy of Data._Representation(v59, v60);
  uint64_t v61 = *((void *)v28 + 1);
  unint64_t v62 = *((void *)v28 + 2);
  *((void *)v28 + 1) = v59;
  *((void *)v28 + 2) = v60;
  outlined consume of Data._Representation(v61, v62);
  v225((uint64_t)&v28[*(int *)(v30 + 24)], (uint64_t)&v29[*(int *)(v30 + 24)], v236);
LABEL_13:
  uint64_t v38 = a3[9];
  uint64_t v39 = (void *)(v237 + v38);
  uint64_t v40 = (void *)(a2 + v38);
  *uint64_t v39 = *v40;
  v39[1] = v40[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v41 = a3[10];
  uint64_t v42 = v237 + v41;
  uint64_t v43 = (char *)(a2 + v41);
  uint64_t v44 = type metadata accessor for AspireApiEvaluationKey(0);
  uint64_t v45 = *(void *)(v44 - 8);
  uint64_t v46 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v45 + 48);
  int v47 = v46(v42, 1, v44);
  int v48 = v46((uint64_t)v43, 1, v44);
  if (!v47)
  {
    if (v48)
    {
      _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0(v42, type metadata accessor for AspireApiEvaluationKey);
      goto LABEL_19;
    }
    v225(v42, (uint64_t)v43, v236);
    uint64_t v63 = *(int *)(v44 + 20);
    uint64_t v64 = (char *)(v42 + v63);
    uint64_t v65 = &v43[v63];
    int v66 = v32((char *)(v42 + v63), 1, v30);
    int v67 = v32(v65, 1, v30);
    if (v66)
    {
      if (!v67)
      {
        *(void *)uint64_t v64 = *(void *)v65;
        uint64_t v69 = *((void *)v65 + 1);
        unint64_t v68 = *((void *)v65 + 2);
        outlined copy of Data._Representation(v69, v68);
        *((void *)v64 + 1) = v69;
        *((void *)v64 + 2) = v68;
        uint64_t v70 = v236;
        (*(void (**)(char *, char *, uint64_t))(v232 + 16))(&v64[*(int *)(v30 + 24)], &v65[*(int *)(v30 + 24)], v236);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v221 + 56))(v64, 0, 1, v30);
LABEL_35:
        uint64_t v87 = v225;
        goto LABEL_36;
      }
    }
    else
    {
      if (!v67)
      {
        *(void *)uint64_t v64 = *(void *)v65;
        uint64_t v119 = *((void *)v65 + 1);
        unint64_t v118 = *((void *)v65 + 2);
        outlined copy of Data._Representation(v119, v118);
        uint64_t v120 = *((void *)v64 + 1);
        unint64_t v121 = *((void *)v64 + 2);
        *((void *)v64 + 1) = v119;
        *((void *)v64 + 2) = v118;
        outlined consume of Data._Representation(v120, v121);
        uint64_t v122 = *(int *)(v30 + 24);
        uint64_t v123 = &v65[v122];
        uint64_t v70 = v236;
        uint64_t v87 = v225;
        v225((uint64_t)&v64[v122], (uint64_t)v123, v236);
LABEL_36:
        uint64_t v88 = *(int *)(v44 + 24);
        v42 += v88;
        uint64_t v89 = &v43[v88];
        uint64_t v90 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
        uint64_t v91 = *(void **)(v90 - 8);
        uint64_t v92 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v91[6];
        int v93 = v92(v42, 1, v90);
        int v94 = v92((uint64_t)v89, 1, v90);
        if (v93)
        {
          if (!v94)
          {
            __dsta = (void (**)(uint64_t, void, uint64_t, uint64_t))v91;
            uint64_t v95 = *(void (**)(uint64_t, char *, uint64_t))(v232 + 16);
            v95(v42, v89, v70);
            uint64_t v96 = *(int *)(v90 + 20);
            uint64_t v97 = (void *)(v42 + v96);
            uint64_t v98 = &v89[v96];
            uint64_t v99 = type metadata accessor for AspireHeSerializedGaloisKey(0);
            uint64_t v100 = *(void *)(v99 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v100 + 48))(v98, 1, v99))
            {
              uint64_t v101 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
              memcpy(v97, v98, *(void *)(*(void *)(v101 - 8) + 64));
            }
            else
            {
              *uint64_t v97 = *(void *)v98;
              uint64_t v136 = *(int *)(v99 + 20);
              uint64_t v234 = (char *)v97 + v136;
              uint64_t v137 = &v98[v136];
              swift_bridgeObjectRetain();
              v95((uint64_t)v234, v137, v70);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v100 + 56))(v97, 0, 1, v99);
            }
            uint64_t v138 = *(int *)(v90 + 24);
            uint64_t v139 = (char *)(v42 + v138);
            uint64_t v140 = &v89[v138];
            uint64_t v141 = type metadata accessor for AspireHeSerializedRelinKey(0);
            uint64_t v142 = *(void *)(v141 - 8);
            uint64_t v143 = __dsta;
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v142 + 48))(v140, 1, v141))
            {
              uint64_t v144 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
              memcpy(v139, v140, *(void *)(*(void *)(v144 - 8) + 64));
            }
            else
            {
              v95((uint64_t)v139, v140, v236);
              uint64_t v149 = *(int *)(v141 + 20);
              uint64_t v150 = &v139[v149];
              uint64_t v151 = &v140[v149];
              uint64_t v152 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
              uint64_t v153 = *(void *)(v152 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v153 + 48))(v151, 1, v152))
              {
                uint64_t v154 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
                memcpy(v150, v151, *(void *)(*(void *)(v154 - 8) + 64));
                uint64_t v143 = __dsta;
              }
              else
              {
                v95((uint64_t)v150, v151, v236);
                uint64_t v174 = *(int *)(v152 + 20);
                uint64_t v223 = v150;
                uint64_t v218 = &v150[v174];
                uint64_t v175 = &v151[v174];
                uint64_t v176 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
                uint64_t v216 = *(void *)(v176 - 8);
                if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v216 + 48))(v175, 1, v176))
                {
                  uint64_t v177 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                  memcpy(v218, v175, *(void *)(*(void *)(v177 - 8) + 64));
                }
                else
                {
                  *(void *)uint64_t v218 = *(void *)v175;
                  uint64_t v193 = *(int *)(v176 + 20);
                  uint64_t v214 = &v218[v193];
                  uint64_t v220 = &v175[v193];
                  swift_bridgeObjectRetain();
                  v95((uint64_t)v214, v220, v236);
                  (*(void (**)(char *, void, uint64_t, uint64_t))(v216 + 56))(v218, 0, 1, v176);
                }
                uint64_t v143 = __dsta;
                (*(void (**)(char *, void, uint64_t, uint64_t))(v153 + 56))(v223, 0, 1, v152);
              }
              (*(void (**)(char *, void, uint64_t, uint64_t))(v142 + 56))(v139, 0, 1, v141);
            }
            v143[7](v42, 0, 1, v90);
            return v237;
          }
          goto LABEL_42;
        }
        if (v94)
        {
          _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0(v42, type metadata accessor for AspireHeSerializedEvaluationKey);
LABEL_42:
          uint64_t v102 = &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?;
LABEL_43:
          size_t v56 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(v102) - 8) + 64);
          uint64_t v57 = (void *)v42;
          uint64_t v58 = v89;
          goto LABEL_21;
        }
        v87(v42, (uint64_t)v89, v70);
        uint64_t v124 = *(int *)(v90 + 20);
        uint64_t v125 = (char *)(v42 + v124);
        uint64_t v126 = &v89[v124];
        uint64_t v127 = type metadata accessor for AspireHeSerializedGaloisKey(0);
        uint64_t v128 = *(void *)(v127 - 8);
        uint64_t v129 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v128 + 48);
        int v130 = v129(v125, 1, v127);
        int v131 = v129(v126, 1, v127);
        if (v130)
        {
          if (!v131)
          {
            *(void *)uint64_t v125 = *(void *)v126;
            uint64_t v132 = *(int *)(v127 + 20);
            uint64_t v133 = &v125[v132];
            uint64_t v134 = &v126[v132];
            uint64_t v135 = *(void (**)(char *, char *, uint64_t))(v232 + 16);
            swift_bridgeObjectRetain();
            v135(v133, v134, v236);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v128 + 56))(v125, 0, 1, v127);
LABEL_63:
            uint64_t v156 = v225;
            goto LABEL_64;
          }
        }
        else
        {
          if (!v131)
          {
            *(void *)uint64_t v125 = *(void *)v126;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            uint64_t v156 = v225;
            v225((uint64_t)&v125[*(int *)(v127 + 20)], (uint64_t)&v126[*(int *)(v127 + 20)], v236);
LABEL_64:
            uint64_t v157 = *(int *)(v90 + 24);
            v42 += v157;
            uint64_t v43 = &v89[v157];
            uint64_t v158 = type metadata accessor for AspireHeSerializedRelinKey(0);
            uint64_t v159 = *(void *)(v158 - 8);
            uint64_t v160 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v159 + 48);
            int v161 = v160(v42, 1, v158);
            int v162 = v160((uint64_t)v43, 1, v158);
            if (v161)
            {
              if (!v162)
              {
                uint64_t v163 = *(void (**)(uint64_t, char *, uint64_t))(v232 + 16);
                v163(v42, v43, v236);
                uint64_t v164 = *(int *)(v158 + 20);
                uint64_t v165 = (char *)(v42 + v164);
                uint64_t v166 = &v43[v164];
                uint64_t v167 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
                uint64_t v168 = *(void *)(v167 - 8);
                if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v168 + 48))(v166, 1, v167))
                {
                  v163((uint64_t)v165, v166, v236);
                  uint64_t v188 = *(int *)(v167 + 20);
                  uint64_t v227 = v165;
                  __dstb = &v165[v188];
                  uint64_t v189 = &v166[v188];
                  uint64_t v190 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
                  uint64_t v191 = *(void *)(v190 - 8);
                  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v191 + 48))(v189, 1, v190))
                  {
                    uint64_t v192 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                    memcpy(__dstb, v189, *(void *)(*(void *)(v192 - 8) + 64));
                  }
                  else
                  {
                    *(void *)__dstb = *(void *)v189;
                    uint64_t v194 = *(int *)(v190 + 20);
                    v224 = &__dstb[v194];
                    uint64_t v195 = &v189[v194];
                    swift_bridgeObjectRetain();
                    v163((uint64_t)v224, v195, v236);
                    (*(void (**)(char *, void, uint64_t, uint64_t))(v191 + 56))(__dstb, 0, 1, v190);
                  }
                  (*(void (**)(char *, void, uint64_t, uint64_t))(v168 + 56))(v227, 0, 1, v167);
                  goto LABEL_96;
                }
                size_t v169 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?)
                                             - 8)
                                 + 64);
                uint64_t v170 = v165;
                uint64_t v171 = v166;
                goto LABEL_68;
              }
            }
            else
            {
              if (!v162)
              {
                v156(v42, (uint64_t)v43, v236);
                uint64_t v178 = *(int *)(v158 + 20);
                v42 += v178;
                uint64_t v89 = &v43[v178];
                uint64_t v158 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
                uint64_t v159 = *(void *)(v158 - 8);
                uint64_t v179 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v159 + 48);
                int v180 = v179(v42, 1, v158);
                int v181 = v179((uint64_t)v89, 1, v158);
                if (v180)
                {
                  if (!v181)
                  {
                    uint64_t v182 = *(void (**)(uint64_t, char *, uint64_t))(v232 + 16);
                    v182(v42, v89, v236);
                    uint64_t v183 = *(int *)(v158 + 20);
                    uint64_t v184 = (void *)(v42 + v183);
                    uint64_t v185 = &v89[v183];
                    uint64_t v186 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
                    uint64_t v187 = *(void *)(v186 - 8);
                    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v187 + 48))(v185, 1, v186))
                    {
                      void *v184 = *(void *)v185;
                      uint64_t v208 = *(int *)(v186 + 20);
                      int v235 = (char *)v184 + v208;
                      uint64_t v209 = &v185[v208];
                      swift_bridgeObjectRetain();
                      v182((uint64_t)v235, v209, v236);
                      (*(void (**)(void *, void, uint64_t, uint64_t))(v187 + 56))(v184, 0, 1, v186);
                      goto LABEL_96;
                    }
                    size_t v169 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?)
                                                 - 8)
                                     + 64);
                    uint64_t v170 = v184;
                    uint64_t v171 = v185;
LABEL_68:
                    memcpy(v170, v171, v169);
LABEL_96:
                    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v159 + 56))(v42, 0, 1, v158);
                    return v237;
                  }
                }
                else
                {
                  if (!v181)
                  {
                    v225(v42, (uint64_t)v89, v236);
                    uint64_t v196 = *(int *)(v158 + 20);
                    uint64_t v197 = (char *)(v42 + v196);
                    uint64_t v198 = &v89[v196];
                    uint64_t v199 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
                    uint64_t v200 = *(void *)(v199 - 8);
                    uint64_t v201 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v200 + 48);
                    int v202 = v201(v197, 1, v199);
                    int v203 = v201(v198, 1, v199);
                    if (v202)
                    {
                      if (!v203)
                      {
                        *(void *)uint64_t v197 = *(void *)v198;
                        uint64_t v204 = *(int *)(v199 + 20);
                        uint64_t v205 = &v197[v204];
                        uint64_t v206 = &v198[v204];
                        uint64_t v207 = *(void (**)(char *, char *, uint64_t))(v232 + 16);
                        swift_bridgeObjectRetain();
                        v207(v205, v206, v236);
                        (*(void (**)(char *, void, uint64_t, uint64_t))(v200 + 56))(v197, 0, 1, v199);
                        return v237;
                      }
                    }
                    else
                    {
                      if (!v203)
                      {
                        *(void *)uint64_t v197 = *(void *)v198;
                        swift_bridgeObjectRetain();
                        swift_bridgeObjectRelease();
                        v225((uint64_t)&v197[*(int *)(v199 + 20)], (uint64_t)&v198[*(int *)(v199 + 20)], v236);
                        return v237;
                      }
                      _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v197, type metadata accessor for AspireHeSerializedCiphertextVec);
                    }
                    size_t v56 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?)
                                                - 8)
                                    + 64);
                    uint64_t v57 = v197;
                    uint64_t v58 = v198;
                    goto LABEL_21;
                  }
                  _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0(v42, type metadata accessor for AspireHeSerializedKeySwitchKey);
                }
                uint64_t v102 = &demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?;
                goto LABEL_43;
              }
              _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0(v42, type metadata accessor for AspireHeSerializedRelinKey);
            }
            uint64_t v55 = &demangling cache variable for type metadata for AspireHeSerializedRelinKey?;
            goto LABEL_20;
          }
          _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v125, type metadata accessor for AspireHeSerializedGaloisKey);
        }
        uint64_t v155 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
        memcpy(v125, v126, *(void *)(*(void *)(v155 - 8) + 64));
        goto LABEL_63;
      }
      _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v64, type metadata accessor for AspireApiEvaluationKeyMetadata);
    }
    uint64_t v86 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
    memcpy(v64, v65, *(void *)(*(void *)(v86 - 8) + 64));
    uint64_t v70 = v236;
    goto LABEL_35;
  }
  if (v48)
  {
LABEL_19:
    uint64_t v55 = &demangling cache variable for type metadata for AspireApiEvaluationKey?;
LABEL_20:
    size_t v56 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(v55) - 8) + 64);
    uint64_t v57 = (void *)v42;
    uint64_t v58 = v43;
LABEL_21:
    memcpy(v57, v58, v56);
    return v237;
  }
  uint64_t v226 = v45;
  unint64_t v49 = (char *)v42;
  uint64_t v50 = *(void (**)(char *, char *, uint64_t))(v232 + 16);
  v50(v49, v43, v236);
  uint64_t v51 = *(int *)(v44 + 20);
  __dst = v49;
  uint64_t v52 = &v49[v51];
  unint64_t v53 = &v43[v51];
  if (v32(&v43[v51], 1, v30))
  {
    uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
    memcpy(v52, v53, *(void *)(*(void *)(v54 - 8) + 64));
  }
  else
  {
    *(void *)uint64_t v52 = *(void *)v53;
    uint64_t v71 = *((void *)v53 + 1);
    unint64_t v72 = *((void *)v53 + 2);
    outlined copy of Data._Representation(v71, v72);
    *((void *)v52 + 1) = v71;
    *((void *)v52 + 2) = v72;
    v50(&v52[*(int *)(v30 + 24)], &v53[*(int *)(v30 + 24)], v236);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v221 + 56))(v52, 0, 1, v30);
  }
  uint64_t v73 = *(int *)(v44 + 24);
  uint64_t v74 = &__dst[v73];
  uint64_t v75 = &v43[v73];
  uint64_t v76 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  uint64_t v77 = *(void *)(v76 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v77 + 48))(v75, 1, v76))
  {
    uint64_t v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
    memcpy(v74, v75, *(void *)(*(void *)(v78 - 8) + 64));
    uint64_t v79 = __dst;
  }
  else
  {
    uint64_t v219 = v77;
    v50(v74, v75, v236);
    uint64_t v80 = *(int *)(v76 + 20);
    uint64_t v222 = v74;
    uint64_t v81 = &v74[v80];
    uint64_t v82 = &v75[v80];
    uint64_t v83 = type metadata accessor for AspireHeSerializedGaloisKey(0);
    uint64_t v84 = *(void *)(v83 - 8);
    uint64_t v217 = v50;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v84 + 48))(v82, 1, v83))
    {
      uint64_t v85 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
      memcpy(v81, v82, *(void *)(*(void *)(v85 - 8) + 64));
    }
    else
    {
      *(void *)uint64_t v81 = *(void *)v82;
      uint64_t v103 = *(int *)(v83 + 20);
      uint64_t v233 = &v81[v103];
      uint64_t v104 = &v82[v103];
      swift_bridgeObjectRetain();
      v50(v233, v104, v236);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v84 + 56))(v81, 0, 1, v83);
    }
    uint64_t v105 = *(int *)(v76 + 24);
    uint64_t v106 = &v222[v105];
    uint64_t v107 = &v75[v105];
    uint64_t v108 = type metadata accessor for AspireHeSerializedRelinKey(0);
    uint64_t v109 = *(void *)(v108 - 8);
    uint64_t v79 = __dst;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v109 + 48))(v107, 1, v108))
    {
      uint64_t v110 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
      memcpy(v106, v107, *(void *)(*(void *)(v110 - 8) + 64));
      uint64_t v111 = v222;
    }
    else
    {
      v217(v106, v107, v236);
      uint64_t v112 = *(int *)(v108 + 20);
      uint64_t v113 = &v106[v112];
      uint64_t v114 = &v107[v112];
      uint64_t v115 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
      uint64_t v116 = *(void *)(v115 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v116 + 48))(v114, 1, v115))
      {
        uint64_t v117 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
        memcpy(v113, v114, *(void *)(*(void *)(v117 - 8) + 64));
        uint64_t v45 = v226;
      }
      else
      {
        v217(v113, v114, v236);
        uint64_t v145 = *(int *)(v115 + 20);
        uint64_t v215 = v113;
        uint64_t v212 = &v113[v145];
        uint64_t v146 = &v114[v145];
        uint64_t v147 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
        uint64_t v211 = *(void *)(v147 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v211 + 48))(v146, 1, v147))
        {
          uint64_t v148 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
          memcpy(v212, v146, *(void *)(*(void *)(v148 - 8) + 64));
        }
        else
        {
          *(void *)uint64_t v212 = *(void *)v146;
          uint64_t v172 = *(int *)(v147 + 20);
          uint64_t v210 = &v212[v172];
          uint64_t v213 = &v146[v172];
          swift_bridgeObjectRetain();
          v217(v210, v213, v236);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v211 + 56))(v212, 0, 1, v147);
        }
        uint64_t v45 = v226;
        (*(void (**)(char *, void, uint64_t, uint64_t))(v116 + 56))(v215, 0, 1, v115);
      }
      uint64_t v77 = v219;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v109 + 56))(v106, 0, 1, v108);
      uint64_t v111 = v222;
    }
    (*(void (**)(char *, void, uint64_t, uint64_t))(v77 + 56))(v111, 0, 1, v76);
  }
  (*(void (**)(char *, void, uint64_t, uint64_t))(v45 + 56))(v79, 0, 1, v44);
  return v237;
}

uint64_t initializeWithTake for AspireApiPIRRequest(uint64_t a1, uint64_t a2, int *a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v6 = a3[6];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = a3[7];
  uint64_t v12 = (_OWORD *)(a1 + v11);
  uint64_t v13 = (_OWORD *)(a2 + v11);
  uint64_t v14 = type metadata accessor for AspirePirEncryptedIndices(0);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v76 = (void (*)(char *, char *, uint64_t))v10;
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    *uint64_t v12 = *v13;
    v10((uint64_t)v12 + *(int *)(v14 + 24), (uint64_t)v13 + *(int *)(v14 + 24), v9);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  uint64_t v17 = a3[8];
  uint64_t v18 = (void *)(a1 + v17);
  uint64_t v19 = (void *)(a2 + v17);
  uint64_t v20 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
  if (v22((char *)v19, 1, v20))
  {
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
    memcpy(v18, v19, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    *uint64_t v18 = *v19;
    *(_OWORD *)(v18 + 1) = *(_OWORD *)(v19 + 1);
    v76((char *)v18 + *(int *)(v20 + 24), (char *)v19 + *(int *)(v20 + 24), v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  uint64_t v24 = a3[10];
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  uint64_t v25 = (char *)(a1 + v24);
  uint64_t v26 = (char *)(a2 + v24);
  uint64_t v27 = type metadata accessor for AspireApiEvaluationKey(0);
  uint64_t v28 = *(void *)(v27 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
  {
    uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKey?);
    memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
  }
  else
  {
    v76(v25, v26, v9);
    uint64_t v74 = v27;
    uint64_t v75 = v25;
    uint64_t v30 = *(int *)(v27 + 20);
    uint64_t v31 = &v25[v30];
    uint64_t v32 = v9;
    int v33 = &v26[v30];
    if (v22(&v26[v30], 1, v20))
    {
      uint64_t v34 = v32;
      uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
      memcpy(v31, v33, *(void *)(*(void *)(v35 - 8) + 64));
    }
    else
    {
      *(void *)uint64_t v31 = *(void *)v33;
      *(_OWORD *)(v31 + 8) = *(_OWORD *)(v33 + 8);
      uint64_t v34 = v32;
      v76(&v31[*(int *)(v20 + 24)], &v33[*(int *)(v20 + 24)], v32);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v31, 0, 1, v20);
    }
    uint64_t v37 = v74;
    unint64_t v36 = v75;
    uint64_t v38 = *(int *)(v74 + 24);
    uint64_t v39 = &v75[v38];
    uint64_t v40 = &v26[v38];
    uint64_t v41 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
    uint64_t v42 = *(void *)(v41 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41))
    {
      uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
      memcpy(v39, v40, *(void *)(*(void *)(v43 - 8) + 64));
    }
    else
    {
      uint64_t v72 = v42;
      v76(v39, v40, v34);
      uint64_t v44 = *(int *)(v41 + 20);
      uint64_t v73 = v39;
      uint64_t v45 = &v39[v44];
      uint64_t v46 = &v40[v44];
      uint64_t v47 = type metadata accessor for AspireHeSerializedGaloisKey(0);
      uint64_t v48 = *(void *)(v47 - 8);
      uint64_t v71 = v34;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v46, 1, v47))
      {
        uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
        memcpy(v45, v46, *(void *)(*(void *)(v49 - 8) + 64));
      }
      else
      {
        *(void *)uint64_t v45 = *(void *)v46;
        v76(&v45[*(int *)(v47 + 20)], &v46[*(int *)(v47 + 20)], v34);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
      }
      uint64_t v50 = *(int *)(v41 + 24);
      uint64_t v51 = &v73[v50];
      uint64_t v52 = &v40[v50];
      uint64_t v53 = type metadata accessor for AspireHeSerializedRelinKey(0);
      uint64_t v54 = *(void *)(v53 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48))(v52, 1, v53))
      {
        uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
        memcpy(v51, v52, *(void *)(*(void *)(v55 - 8) + 64));
        uint64_t v37 = v74;
        unint64_t v36 = v75;
      }
      else
      {
        v76(v51, v52, v34);
        uint64_t v56 = *(int *)(v53 + 20);
        uint64_t v57 = &v51[v56];
        uint64_t v58 = &v52[v56];
        uint64_t v59 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
        uint64_t v60 = *(void *)(v59 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v60 + 48))(v58, 1, v59))
        {
          uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
          memcpy(v57, v58, *(void *)(*(void *)(v61 - 8) + 64));
        }
        else
        {
          v76(v57, v58, v71);
          uint64_t v69 = v59;
          uint64_t v70 = v57;
          uint64_t v62 = *(int *)(v59 + 20);
          uint64_t v63 = &v57[v62];
          uint64_t v64 = &v58[v62];
          uint64_t v65 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
          uint64_t v68 = *(void *)(v65 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v68 + 48))(v64, 1, v65))
          {
            uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
            memcpy(v63, v64, *(void *)(*(void *)(v66 - 8) + 64));
          }
          else
          {
            *(void *)uint64_t v63 = *(void *)v64;
            v76(&v63[*(int *)(v65 + 20)], &v64[*(int *)(v65 + 20)], v71);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v68 + 56))(v63, 0, 1, v65);
          }
          (*(void (**)(char *, void, uint64_t, uint64_t))(v60 + 56))(v70, 0, 1, v69);
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v54 + 56))(v51, 0, 1, v53);
        uint64_t v37 = v74;
        unint64_t v36 = v75;
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v72 + 56))(v73, 0, 1, v41);
    }
    (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v36, 0, 1, v37);
  }
  return a1;
}

uint64_t assignWithTake for AspireApiPIRRequest(uint64_t a1, uint64_t a2, int *a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = *(void *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  outlined consume of Data._Representation(v6, v7);
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  __srcb = (void **)(*(void *)(v11 - 8) + 40);
  __dst = (void (*)(char *, char *, uint64_t))*__srcb;
  uint64_t v203 = *(void *)(v11 - 8);
  ((void (*)(uint64_t, uint64_t, uint64_t))*__srcb)(v9, v10, v11);
  uint64_t v12 = a3[7];
  uint64_t v205 = a1;
  uint64_t v13 = (char *)(a1 + v12);
  uint64_t v14 = (char *)(a2 + v12);
  uint64_t v15 = type metadata accessor for AspirePirEncryptedIndices(0);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v13, 1, v15);
  int v19 = v17(v14, 1, v15);
  uint64_t v198 = v11;
  if (v18)
  {
    if (!v19)
    {
      *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
      (*(void (**)(char *, char *, uint64_t))(v203 + 32))(&v13[*(int *)(v15 + 24)], &v14[*(int *)(v15 + 24)], v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
LABEL_7:
      uint64_t v21 = __dst;
      goto LABEL_8;
    }
LABEL_6:
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
    memcpy(v13, v14, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  if (v19)
  {
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v13, type metadata accessor for AspirePirEncryptedIndices);
    goto LABEL_6;
  }
  *(void *)uint64_t v13 = *(void *)v14;
  swift_bridgeObjectRelease();
  *((void *)v13 + 1) = *((void *)v14 + 1);
  uint64_t v53 = v11;
  uint64_t v21 = __dst;
  __dst(&v13[*(int *)(v15 + 24)], &v14[*(int *)(v15 + 24)], v53);
LABEL_8:
  uint64_t v22 = a3[8];
  uint64_t v23 = (void *)(v205 + v22);
  uint64_t v24 = (void *)(a2 + v22);
  uint64_t v25 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v27 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48);
  unsigned int v28 = v27((char *)v23, 1, v25);
  uint64_t v192 = v27;
  unsigned int v29 = v27((char *)v24, 1, v25);
  uint64_t v189 = v26;
  if (v28)
  {
    if (!v29)
    {
      *uint64_t v23 = *v24;
      *(_OWORD *)(v23 + 1) = *(_OWORD *)(v24 + 1);
      (*(void (**)(char *, char *, uint64_t))(v203 + 32))((char *)v23 + *(int *)(v25 + 24), (char *)v24 + *(int *)(v25 + 24), v198);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (v29)
  {
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v23, type metadata accessor for AspireApiEvaluationKeyMetadata);
LABEL_13:
    uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
    memcpy(v23, v24, *(void *)(*(void *)(v30 - 8) + 64));
    goto LABEL_14;
  }
  uint64_t v54 = v24[2];
  uint64_t v55 = v23[1];
  unint64_t v56 = v23[2];
  *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
  v23[2] = v54;
  outlined consume of Data._Representation(v55, v56);
  v21((char *)v23 + *(int *)(v25 + 24), (char *)v24 + *(int *)(v25 + 24), v198);
LABEL_14:
  uint64_t v31 = a3[9];
  uint64_t v32 = (void *)(v205 + v31);
  int v33 = (uint64_t *)(a2 + v31);
  uint64_t v35 = *v33;
  uint64_t v34 = v33[1];
  void *v32 = v35;
  v32[1] = v34;
  swift_bridgeObjectRelease();
  uint64_t v36 = a3[10];
  uint64_t v37 = v205 + v36;
  uint64_t v38 = (char *)(a2 + v36);
  uint64_t v39 = type metadata accessor for AspireApiEvaluationKey(0);
  uint64_t v40 = *(void **)(v39 - 8);
  uint64_t v41 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v40[6];
  int v42 = v41(v37, 1, v39);
  int v43 = v41((uint64_t)v38, 1, v39);
  if (v42)
  {
    if (!v43)
    {
      __dsta = (void (**)(uint64_t, void, uint64_t, uint64_t))v40;
      uint64_t v44 = *(void (**)(uint64_t, char *, uint64_t))(v203 + 32);
      v44(v37, v38, v198);
      uint64_t v45 = *(int *)(v39 + 20);
      uint64_t v46 = (void *)(v37 + v45);
      uint64_t v47 = &v38[v45];
      __src = (void (*)(char *, char *, uint64_t))v44;
      if (v192(&v38[v45], 1, v25))
      {
        uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
        memcpy(v46, v47, *(void *)(*(void *)(v48 - 8) + 64));
      }
      else
      {
        *uint64_t v46 = *(void *)v47;
        *(_OWORD *)(v46 + 1) = *(_OWORD *)(v47 + 8);
        v44((uint64_t)v46 + *(int *)(v25 + 24), &v47[*(int *)(v25 + 24)], v198);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v189 + 56))(v46, 0, 1, v25);
      }
      uint64_t v63 = *(int *)(v39 + 24);
      uint64_t v64 = (char *)(v37 + v63);
      uint64_t v65 = &v38[v63];
      uint64_t v66 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
      uint64_t v67 = *(void *)(v66 - 8);
      uint64_t v68 = __dsta;
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v67 + 48))(v65, 1, v66))
      {
        uint64_t v187 = v67;
        __src(v64, v65, v198);
        uint64_t v190 = v66;
        uint64_t v71 = *(int *)(v66 + 20);
        uint64_t v72 = &v64[v71];
        uint64_t v73 = &v65[v71];
        uint64_t v74 = type metadata accessor for AspireHeSerializedGaloisKey(0);
        uint64_t v75 = *(void *)(v74 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v75 + 48))(v73, 1, v74))
        {
          uint64_t v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
          memcpy(v72, v73, *(void *)(*(void *)(v76 - 8) + 64));
        }
        else
        {
          *(void *)uint64_t v72 = *(void *)v73;
          __src(&v72[*(int *)(v74 + 20)], &v73[*(int *)(v74 + 20)], v198);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v75 + 56))(v72, 0, 1, v74);
        }
        uint64_t v93 = v190;
        uint64_t v92 = v64;
        uint64_t v94 = *(int *)(v190 + 24);
        uint64_t v95 = &v64[v94];
        uint64_t v96 = &v65[v94];
        uint64_t v97 = type metadata accessor for AspireHeSerializedRelinKey(0);
        uint64_t v98 = *(void *)(v97 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v98 + 48))(v96, 1, v97))
        {
          uint64_t v99 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
          memcpy(v95, v96, *(void *)(*(void *)(v99 - 8) + 64));
        }
        else
        {
          uint64_t v186 = v98;
          __src(v95, v96, v198);
          uint64_t v100 = *(int *)(v97 + 20);
          uint64_t v101 = &v95[v100];
          uint64_t v102 = &v96[v100];
          uint64_t v103 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
          uint64_t v104 = *(void *)(v103 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v104 + 48))(v102, 1, v103))
          {
            uint64_t v105 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
            memcpy(v101, v102, *(void *)(*(void *)(v105 - 8) + 64));
            uint64_t v93 = v190;
            uint64_t v92 = v64;
            uint64_t v106 = v186;
          }
          else
          {
            uint64_t v183 = v104;
            __src(v101, v102, v198);
            uint64_t v184 = v103;
            uint64_t v185 = v101;
            uint64_t v124 = *(int *)(v103 + 20);
            uint64_t v125 = &v101[v124];
            uint64_t v126 = &v102[v124];
            uint64_t v127 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
            uint64_t v128 = *(void *)(v127 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v128 + 48))(v126, 1, v127))
            {
              uint64_t v129 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
              memcpy(v125, v126, *(void *)(*(void *)(v129 - 8) + 64));
            }
            else
            {
              *(void *)uint64_t v125 = *(void *)v126;
              __src(&v125[*(int *)(v127 + 20)], &v126[*(int *)(v127 + 20)], v198);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v128 + 56))(v125, 0, 1, v127);
            }
            uint64_t v93 = v190;
            uint64_t v92 = v64;
            uint64_t v106 = v186;
            (*(void (**)(char *, void, uint64_t, uint64_t))(v183 + 56))(v185, 0, 1, v184);
          }
          (*(void (**)(char *, void, uint64_t, uint64_t))(v106 + 56))(v95, 0, 1, v97);
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v187 + 56))(v92, 0, 1, v93);
        goto LABEL_77;
      }
      size_t v69 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?)
                                  - 8)
                      + 64);
      uint64_t v70 = v64;
      goto LABEL_31;
    }
    goto LABEL_20;
  }
  if (!v43)
  {
    v21((char *)v37, v38, v198);
    uint64_t v57 = *(int *)(v39 + 20);
    uint64_t v58 = (void *)(v37 + v57);
    uint64_t v59 = &v38[v57];
    unsigned int v60 = v192((char *)(v37 + v57), 1, v25);
    unsigned int v61 = v192(v59, 1, v25);
    if (v60)
    {
      if (!v61)
      {
        *uint64_t v58 = *(void *)v59;
        *(_OWORD *)(v58 + 1) = *(_OWORD *)(v59 + 8);
        uint64_t v62 = v198;
        (*(void (**)(char *, char *, uint64_t))(v203 + 32))((char *)v58 + *(int *)(v25 + 24), &v59[*(int *)(v25 + 24)], v198);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v189 + 56))(v58, 0, 1, v25);
        goto LABEL_37;
      }
    }
    else
    {
      if (!v61)
      {
        uint64_t v107 = *((void *)v59 + 2);
        uint64_t v108 = v58[1];
        unint64_t v109 = v58[2];
        *(_OWORD *)uint64_t v58 = *(_OWORD *)v59;
        v58[2] = v107;
        outlined consume of Data._Representation(v108, v109);
        uint64_t v62 = v198;
        __dst((char *)v58 + *(int *)(v25 + 24), &v59[*(int *)(v25 + 24)], v198);
LABEL_37:
        uint64_t v78 = *(int *)(v39 + 24);
        v37 += v78;
        uint64_t v79 = &v38[v78];
        uint64_t v39 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
        uint64_t v80 = *(void **)(v39 - 8);
        uint64_t v81 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v80[6];
        int v82 = v81(v37, 1, v39);
        int v83 = v81((uint64_t)v79, 1, v39);
        if (v82)
        {
          if (!v83)
          {
            __dstb = (void (**)(uint64_t, void, uint64_t, uint64_t))v80;
            uint64_t v84 = *(void (**)(uint64_t, char *, uint64_t))(v203 + 32);
            v84(v37, v79, v62);
            uint64_t v85 = *(int *)(v39 + 20);
            uint64_t v86 = (void *)(v37 + v85);
            uint64_t v87 = &v79[v85];
            uint64_t v88 = type metadata accessor for AspireHeSerializedGaloisKey(0);
            uint64_t v89 = *(void *)(v88 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v89 + 48))(v87, 1, v88))
            {
              uint64_t v90 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
              memcpy(v86, v87, *(void *)(*(void *)(v90 - 8) + 64));
            }
            else
            {
              *uint64_t v86 = *(void *)v87;
              v84((uint64_t)v86 + *(int *)(v88 + 20), &v87[*(int *)(v88 + 20)], v62);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v89 + 56))(v86, 0, 1, v88);
            }
            uint64_t v119 = (void (*)(char *, char *, uint64_t))v84;
            uint64_t v120 = *(int *)(v39 + 24);
            unint64_t v121 = (char *)(v37 + v120);
            uint64_t v65 = &v79[v120];
            uint64_t v122 = type metadata accessor for AspireHeSerializedRelinKey(0);
            uint64_t v123 = *(unsigned int (***)(const void *, uint64_t, uint64_t))(v122 - 8);
            uint64_t v68 = __dstb;
            if (!v123[6](v65, 1, v122))
            {
              __srca = v123;
              v119(v121, v65, v62);
              uint64_t v130 = *(int *)(v122 + 20);
              int v131 = &v121[v130];
              uint64_t v132 = &v65[v130];
              uint64_t v133 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
              uint64_t v134 = *(void *)(v133 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v134 + 48))(v132, 1, v133))
              {
                uint64_t v135 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
                memcpy(v131, v132, *(void *)(*(void *)(v135 - 8) + 64));
                uint64_t v136 = __srca;
              }
              else
              {
                uint64_t v188 = v134;
                v119(v131, v132, v198);
                uint64_t v191 = v133;
                uint64_t v193 = v131;
                uint64_t v155 = *(int *)(v133 + 20);
                uint64_t v156 = &v131[v155];
                uint64_t v157 = &v132[v155];
                uint64_t v158 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
                uint64_t v159 = *(void *)(v158 - 8);
                if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v159 + 48))(v157, 1, v158))
                {
                  uint64_t v160 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                  memcpy(v156, v157, *(void *)(*(void *)(v160 - 8) + 64));
                }
                else
                {
                  *(void *)uint64_t v156 = *(void *)v157;
                  v119(&v156[*(int *)(v158 + 20)], &v157[*(int *)(v158 + 20)], v198);
                  (*(void (**)(char *, void, uint64_t, uint64_t))(v159 + 56))(v156, 0, 1, v158);
                }
                uint64_t v136 = __srca;
                (*(void (**)(char *, void, uint64_t, uint64_t))(v188 + 56))(v193, 0, 1, v191);
              }
              ((void (*)(char *, void, uint64_t, uint64_t))v136[7])(v121, 0, 1, v122);
              goto LABEL_77;
            }
            size_t v69 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?)
                                        - 8)
                            + 64);
            uint64_t v70 = v121;
LABEL_31:
            memcpy(v70, v65, v69);
LABEL_77:
            v68[7](v37, 0, 1, v39);
            return v205;
          }
          goto LABEL_43;
        }
        if (v83)
        {
          _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0(v37, type metadata accessor for AspireHeSerializedEvaluationKey);
LABEL_43:
          uint64_t v91 = &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?;
LABEL_44:
          size_t v50 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(v91) - 8) + 64);
          uint64_t v51 = (void *)v37;
          uint64_t v52 = v79;
          goto LABEL_22;
        }
        __dst((char *)v37, v79, v62);
        uint64_t v110 = *(int *)(v39 + 20);
        uint64_t v111 = (char *)(v37 + v110);
        uint64_t v112 = &v79[v110];
        uint64_t v113 = type metadata accessor for AspireHeSerializedGaloisKey(0);
        uint64_t v114 = *(void *)(v113 - 8);
        uint64_t v115 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v114 + 48);
        int v116 = v115(v111, 1, v113);
        int v117 = v115(v112, 1, v113);
        if (v116)
        {
          if (!v117)
          {
            *(void *)uint64_t v111 = *(void *)v112;
            uint64_t v118 = v198;
            (*(void (**)(char *, char *, uint64_t))(v203 + 32))(&v111[*(int *)(v113 + 20)], &v112[*(int *)(v113 + 20)], v198);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v114 + 56))(v111, 0, 1, v113);
LABEL_64:
            uint64_t v138 = (void (*)(uint64_t, char *, uint64_t))__dst;
            goto LABEL_65;
          }
        }
        else
        {
          if (!v117)
          {
            *(void *)uint64_t v111 = *(void *)v112;
            swift_bridgeObjectRelease();
            uint64_t v118 = v198;
            uint64_t v138 = (void (*)(uint64_t, char *, uint64_t))__dst;
            __dst(&v111[*(int *)(v113 + 20)], &v112[*(int *)(v113 + 20)], v198);
LABEL_65:
            uint64_t v139 = *(int *)(v39 + 24);
            v37 += v139;
            uint64_t v38 = &v79[v139];
            uint64_t v140 = type metadata accessor for AspireHeSerializedRelinKey(0);
            uint64_t v141 = *(void *)(v140 - 8);
            uint64_t v142 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v141 + 48);
            int v143 = v142(v37, 1, v140);
            int v144 = v142((uint64_t)v38, 1, v140);
            if (v143)
            {
              if (!v144)
              {
                uint64_t v145 = *(void (**)(uint64_t, char *, uint64_t))(v203 + 32);
                v145(v37, v38, v118);
                uint64_t v146 = *(int *)(v140 + 20);
                uint64_t v147 = (char *)(v37 + v146);
                uint64_t v148 = &v38[v146];
                uint64_t v149 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
                uint64_t v150 = *(void *)(v149 - 8);
                if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v150 + 48))(v148, 1, v149))
                {
                  v145((uint64_t)v147, v148, v118);
                  uint64_t v171 = *(int *)(v149 + 20);
                  __dstc = &v147[v171];
                  uint64_t v204 = v147;
                  uint64_t v172 = &v148[v171];
                  uint64_t v173 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
                  uint64_t v194 = *(void *)(v173 - 8);
                  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v194 + 48))(v172, 1, v173))
                  {
                    uint64_t v174 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                    memcpy(__dstc, v172, *(void *)(*(void *)(v174 - 8) + 64));
                  }
                  else
                  {
                    *(void *)__dstc = *(void *)v172;
                    v145((uint64_t)&__dstc[*(int *)(v173 + 20)], &v172[*(int *)(v173 + 20)], v118);
                    (*(void (**)(char *, void, uint64_t, uint64_t))(v194 + 56))(__dstc, 0, 1, v173);
                  }
                  (*(void (**)(char *, void, uint64_t, uint64_t))(v150 + 56))(v204, 0, 1, v149);
                  goto LABEL_96;
                }
                size_t v151 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?)
                                             - 8)
                                 + 64);
                uint64_t v152 = v147;
                uint64_t v153 = v148;
                goto LABEL_69;
              }
            }
            else
            {
              if (!v144)
              {
                v138(v37, v38, v118);
                uint64_t v161 = *(int *)(v140 + 20);
                v37 += v161;
                uint64_t v79 = &v38[v161];
                uint64_t v140 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
                uint64_t v141 = *(void *)(v140 - 8);
                int v162 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v141 + 48);
                int v163 = v162(v37, 1, v140);
                int v164 = v162((uint64_t)v79, 1, v140);
                if (v163)
                {
                  if (!v164)
                  {
                    uint64_t v165 = *(void (**)(uint64_t, char *, uint64_t))(v203 + 32);
                    v165(v37, v79, v118);
                    uint64_t v166 = *(int *)(v140 + 20);
                    uint64_t v167 = (void *)(v37 + v166);
                    uint64_t v168 = &v79[v166];
                    uint64_t v169 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
                    uint64_t v170 = *(void *)(v169 - 8);
                    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v170 + 48))(v168, 1, v169))
                    {
                      void *v167 = *(void *)v168;
                      v165((uint64_t)v167 + *(int *)(v169 + 20), &v168[*(int *)(v169 + 20)], v118);
                      (*(void (**)(void *, void, uint64_t, uint64_t))(v170 + 56))(v167, 0, 1, v169);
                      goto LABEL_96;
                    }
                    size_t v151 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?)
                                                 - 8)
                                     + 64);
                    uint64_t v152 = v167;
                    uint64_t v153 = v168;
LABEL_69:
                    memcpy(v152, v153, v151);
LABEL_96:
                    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v141 + 56))(v37, 0, 1, v140);
                    return v205;
                  }
                }
                else
                {
                  if (!v164)
                  {
                    v138(v37, v79, v118);
                    uint64_t v175 = *(int *)(v140 + 20);
                    uint64_t v176 = (char *)(v37 + v175);
                    uint64_t v177 = &v79[v175];
                    uint64_t v178 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
                    uint64_t v179 = *(void *)(v178 - 8);
                    int v180 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v179 + 48);
                    int v181 = v180(v176, 1, v178);
                    int v182 = v180(v177, 1, v178);
                    if (v181)
                    {
                      if (!v182)
                      {
                        *(void *)uint64_t v176 = *(void *)v177;
                        (*(void (**)(char *, char *, uint64_t))(v203 + 32))(&v176[*(int *)(v178 + 20)], &v177[*(int *)(v178 + 20)], v118);
                        (*(void (**)(char *, void, uint64_t, uint64_t))(v179 + 56))(v176, 0, 1, v178);
                        return v205;
                      }
                    }
                    else
                    {
                      if (!v182)
                      {
                        *(void *)uint64_t v176 = *(void *)v177;
                        swift_bridgeObjectRelease();
                        v138((uint64_t)&v176[*(int *)(v178 + 20)], &v177[*(int *)(v178 + 20)], v118);
                        return v205;
                      }
                      _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v176, type metadata accessor for AspireHeSerializedCiphertextVec);
                    }
                    size_t v50 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?)
                                                - 8)
                                    + 64);
                    uint64_t v51 = v176;
                    uint64_t v52 = v177;
                    goto LABEL_22;
                  }
                  _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0(v37, type metadata accessor for AspireHeSerializedKeySwitchKey);
                }
                uint64_t v91 = &demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?;
                goto LABEL_44;
              }
              _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0(v37, type metadata accessor for AspireHeSerializedRelinKey);
            }
            uint64_t v49 = &demangling cache variable for type metadata for AspireHeSerializedRelinKey?;
            goto LABEL_21;
          }
          _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v111, type metadata accessor for AspireHeSerializedGaloisKey);
        }
        uint64_t v137 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
        memcpy(v111, v112, *(void *)(*(void *)(v137 - 8) + 64));
        uint64_t v118 = v198;
        goto LABEL_64;
      }
      _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v58, type metadata accessor for AspireApiEvaluationKeyMetadata);
    }
    uint64_t v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
    memcpy(v58, v59, *(void *)(*(void *)(v77 - 8) + 64));
    uint64_t v62 = v198;
    goto LABEL_37;
  }
  _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0(v37, type metadata accessor for AspireApiEvaluationKey);
LABEL_20:
  uint64_t v49 = &demangling cache variable for type metadata for AspireApiEvaluationKey?;
LABEL_21:
  size_t v50 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(v49) - 8) + 64);
  uint64_t v51 = (void *)v37;
  uint64_t v52 = v38;
LABEL_22:
  memcpy(v51, v52, v50);
  return v205;
}

uint64_t getEnumTagSinglePayload for AspireApiPIRRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_249DD3C40);
}

uint64_t sub_249DD3C40(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84) == a2)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)(v6 - 8);
    uint64_t v9 = a3[6];
LABEL_7:
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    return v12(a1 + v9, a2, v7);
  }
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  if (*(_DWORD *)(*(void *)(v10 - 8) + 84) == a2)
  {
    uint64_t v7 = v10;
    uint64_t v8 = *(void *)(v10 - 8);
    uint64_t v9 = a3[7];
    goto LABEL_7;
  }
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  if (*(_DWORD *)(*(void *)(v11 - 8) + 84) == a2)
  {
    uint64_t v7 = v11;
    uint64_t v8 = *(void *)(v11 - 8);
    uint64_t v9 = a3[8];
    goto LABEL_7;
  }
  if (a2 == 2147483646)
  {
    unint64_t v14 = *(void *)(a1 + a3[9] + 8);
    if (v14 >= 0xFFFFFFFF) {
      LODWORD(v14) = -1;
    }
    int v15 = v14 - 1;
    if (v15 < 0) {
      int v15 = -1;
    }
    return (v15 + 1);
  }
  else
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKey?);
    uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48);
    uint64_t v18 = v16;
    uint64_t v19 = a1 + a3[10];
    return v17(v19, a2, v18);
  }
}

uint64_t storeEnumTagSinglePayload for AspireApiPIRRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_249DD3E38);
}

uint64_t sub_249DD3E38(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = type metadata accessor for UnknownStorage();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[6];
LABEL_7:
    unint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return v14(a1 + v11, a2, a2, v9);
  }
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a3)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a4[7];
    goto LABEL_7;
  }
  uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  if (*(_DWORD *)(*(void *)(result - 8) + 84) == a3)
  {
    uint64_t v9 = result;
    uint64_t v10 = *(void *)(result - 8);
    uint64_t v11 = a4[8];
    goto LABEL_7;
  }
  if (a3 == 2147483646)
  {
    *(void *)(a1 + a4[9] + 8) = a2;
  }
  else
  {
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKey?);
    uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
    uint64_t v17 = v15;
    uint64_t v18 = a1 + a4[10];
    return v16(v18, a2, a2, v17);
  }
  return result;
}

void type metadata completion function for AspireApiPIRRequest()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for AspireHeEvaluationKeyConfig?(319, &lazy cache variable for type metadata for AspirePirEncryptedIndices?, (void (*)(uint64_t))type metadata accessor for AspirePirEncryptedIndices);
    if (v1 <= 0x3F)
    {
      type metadata accessor for AspireHeEvaluationKeyConfig?(319, &lazy cache variable for type metadata for AspireApiEvaluationKeyMetadata?, (void (*)(uint64_t))type metadata accessor for AspireApiEvaluationKeyMetadata);
      if (v2 <= 0x3F)
      {
        type metadata accessor for AspireHeEvaluationKeyConfig?(319, &lazy cache variable for type metadata for AspireApiEvaluationKey?, (void (*)(uint64_t))type metadata accessor for AspireApiEvaluationKey);
        if (v3 <= 0x3F) {
          swift_initStructMetadata();
        }
      }
    }
  }
}

uint64_t getEnumTagSinglePayload for AspireApiPIRResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_56Tm_6);
}

uint64_t storeEnumTagSinglePayload for AspireApiPIRResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_57Tm_6);
}

void *initializeBufferWithCopyOfBuffer for AspireApiPECConfig(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(void *)a1 = *a2;
    *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
    *(void *)(a1 + 16) = a2[2];
    *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
    uint64_t v7 = a2[4];
    unint64_t v8 = a2[5];
    outlined copy of Data._Representation(v7, v8);
    v4[4] = v7;
    v4[5] = v8;
    v4[6] = a2[6];
    uint64_t v9 = a3[9];
    uint64_t v10 = (char *)v4 + v9;
    uint64_t v11 = (uint64_t)a2 + v9;
    uint64_t v12 = type metadata accessor for UnknownStorage();
    uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    v13(v10, v11, v12);
    uint64_t v14 = a3[10];
    uint64_t v15 = (_OWORD *)((char *)v4 + v14);
    uint64_t v16 = (_OWORD *)((char *)a2 + v14);
    uint64_t v17 = type metadata accessor for AspireHeEncryptionParameters(0);
    uint64_t v18 = *(void *)(v17 - 8);
    uint64_t v35 = (void (*)(char *, char *, uint64_t))v13;
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      *uint64_t v15 = *v16;
      uint64_t v21 = *((void *)v16 + 3);
      *((void *)v15 + 2) = *((void *)v16 + 2);
      *((void *)v15 + 3) = v21;
      *((unsigned char *)v15 + 32) = *((unsigned char *)v16 + 32);
      *((void *)v15 + 5) = *((void *)v16 + 5);
      *((unsigned char *)v15 + 48) = *((unsigned char *)v16 + 48);
      *((void *)v15 + 7) = *((void *)v16 + 7);
      *((unsigned char *)v15 + 64) = *((unsigned char *)v16 + 64);
      uint64_t v22 = *(int *)(v17 + 40);
      uint64_t v23 = (char *)v15 + v22;
      uint64_t v24 = (char *)v16 + v22;
      swift_bridgeObjectRetain();
      v13(v23, (uint64_t)v24, v12);
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
    uint64_t v25 = a3[11];
    uint64_t v26 = (char *)v4 + v25;
    uint64_t v27 = (char *)a2 + v25;
    uint64_t v28 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
    uint64_t v29 = *(void *)(v28 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
    {
      uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
      memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64));
    }
    else
    {
      uint64_t v31 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
      uint64_t v32 = *(void *)(v31 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v27, 1, v31))
      {
        uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
        memcpy(v26, v27, *(void *)(*(void *)(v33 - 8) + 64));
      }
      else
      {
        swift_getEnumCaseMultiPayload();
        v35(v26, v27, v12);
        swift_storeEnumTagMultiPayload();
        (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(v26, 0, 1, v31);
      }
      v35(&v26[*(int *)(v28 + 20)], &v27[*(int *)(v28 + 20)], v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
    }
  }
  return v4;
}

uint64_t destroy for AspireApiPECConfig(uint64_t a1, int *a2)
{
  outlined consume of Data._Representation(*(void *)(a1 + 32), *(void *)(a1 + 40));
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[9];
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v13 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v13(v4, v5);
  uint64_t v6 = a1 + a2[10];
  uint64_t v7 = type metadata accessor for AspireHeEncryptionParameters(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7))
  {
    swift_bridgeObjectRelease();
    v13(v6 + *(int *)(v7 + 40), v5);
  }
  uint64_t v8 = a1 + a2[11];
  uint64_t v9 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9);
  if (!result)
  {
    uint64_t v11 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v8, 1, v11)
      && swift_getEnumCaseMultiPayload() <= 2)
    {
      v13(v8, v5);
    }
    uint64_t v12 = v8 + *(int *)(v9 + 20);
    return ((uint64_t (*)(uint64_t, uint64_t))v13)(v12, v5);
  }
  return result;
}

uint64_t initializeWithCopy for AspireApiPECConfig(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 32);
  unint64_t v7 = *(void *)(a2 + 40);
  outlined copy of Data._Representation(v6, v7);
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v8 = a3[9];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  v12(v9, v10, v11);
  uint64_t v13 = a3[10];
  uint64_t v14 = (_OWORD *)(a1 + v13);
  uint64_t v15 = (_OWORD *)(a2 + v13);
  uint64_t v16 = type metadata accessor for AspireHeEncryptionParameters(0);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v33 = (void (*)(char *, char *, uint64_t))v12;
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    *uint64_t v14 = *v15;
    uint64_t v19 = *((void *)v15 + 3);
    *((void *)v14 + 2) = *((void *)v15 + 2);
    *((void *)v14 + 3) = v19;
    *((unsigned char *)v14 + 32) = *((unsigned char *)v15 + 32);
    *((void *)v14 + 5) = *((void *)v15 + 5);
    *((unsigned char *)v14 + 48) = *((unsigned char *)v15 + 48);
    *((void *)v14 + 7) = *((void *)v15 + 7);
    *((unsigned char *)v14 + 64) = *((unsigned char *)v15 + 64);
    uint64_t v20 = *(int *)(v16 + 40);
    uint64_t v21 = (char *)v14 + v20;
    uint64_t v22 = (char *)v15 + v20;
    swift_bridgeObjectRetain();
    v12((uint64_t)v21, (uint64_t)v22, v11);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  uint64_t v23 = a3[11];
  uint64_t v24 = (char *)(a1 + v23);
  uint64_t v25 = (char *)(a2 + v23);
  uint64_t v26 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  uint64_t v27 = *(void *)(v26 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
  {
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
  }
  else
  {
    uint64_t v29 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
    uint64_t v30 = *(void *)(v29 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v25, 1, v29))
    {
      uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
      memcpy(v24, v25, *(void *)(*(void *)(v31 - 8) + 64));
    }
    else
    {
      swift_getEnumCaseMultiPayload();
      v33(v24, v25, v11);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(v24, 0, 1, v29);
    }
    v33(&v24[*(int *)(v26 + 20)], &v25[*(int *)(v26 + 20)], v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  }
  return a1;
}

uint64_t assignWithCopy for AspireApiPECConfig(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = v6;
  uint64_t v7 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  outlined copy of Data._Representation(v7, v8);
  uint64_t v9 = *(void *)(a1 + 32);
  unint64_t v10 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  outlined consume of Data._Representation(v9, v10);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v11 = a3[9];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for UnknownStorage();
  uint64_t v56 = *(void *)(v14 - 8);
  uint64_t v57 = v14;
  uint64_t v55 = *(void (**)(uint64_t, uint64_t))(v56 + 24);
  v55(v12, v13);
  uint64_t v15 = a3[10];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = type metadata accessor for AspireHeEncryptionParameters(0);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 48);
  int v21 = v20(v16, 1, v18);
  int v22 = v20(v17, 1, v18);
  if (v21)
  {
    if (!v22)
    {
      *(void *)uint64_t v16 = *(void *)v17;
      *(void *)(v16 + 8) = *(void *)(v17 + 8);
      *(void *)(v16 + 16) = *(void *)(v17 + 16);
      uint64_t v23 = *(void *)(v17 + 24);
      *(unsigned char *)(v16 + 32) = *(unsigned char *)(v17 + 32);
      *(void *)(v16 + 24) = v23;
      uint64_t v24 = *(void *)(v17 + 40);
      *(unsigned char *)(v16 + 48) = *(unsigned char *)(v17 + 48);
      *(void *)(v16 + 40) = v24;
      uint64_t v25 = *(void *)(v17 + 56);
      *(unsigned char *)(v16 + 64) = *(unsigned char *)(v17 + 64);
      *(void *)(v16 + 56) = v25;
      uint64_t v26 = *(int *)(v18 + 40);
      uint64_t v27 = v16 + v26;
      uint64_t v28 = v17 + v26;
      uint64_t v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(v56 + 16);
      swift_bridgeObjectRetain();
      v29(v27, v28, v57);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v22)
  {
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0(v16, type metadata accessor for AspireHeEncryptionParameters);
LABEL_6:
    uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    memcpy((void *)v16, (const void *)v17, *(void *)(*(void *)(v30 - 8) + 64));
    goto LABEL_7;
  }
  *(void *)uint64_t v16 = *(void *)v17;
  *(void *)(v16 + 8) = *(void *)(v17 + 8);
  *(void *)(v16 + 16) = *(void *)(v17 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v43 = *(void *)(v17 + 24);
  *(unsigned char *)(v16 + 32) = *(unsigned char *)(v17 + 32);
  *(void *)(v16 + 24) = v43;
  uint64_t v44 = *(void *)(v17 + 40);
  *(unsigned char *)(v16 + 48) = *(unsigned char *)(v17 + 48);
  *(void *)(v16 + 40) = v44;
  uint64_t v45 = *(void *)(v17 + 56);
  *(unsigned char *)(v16 + 64) = *(unsigned char *)(v17 + 64);
  *(void *)(v16 + 56) = v45;
  ((void (*)(uint64_t, uint64_t, uint64_t))v55)(v16 + *(int *)(v18 + 40), v17 + *(int *)(v18 + 40), v57);
LABEL_7:
  uint64_t v31 = a3[11];
  uint64_t v32 = (char *)(a1 + v31);
  uint64_t v33 = (char *)(a2 + v31);
  uint64_t v34 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  uint64_t v35 = *(void *)(v34 - 8);
  uint64_t v36 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v35 + 48);
  int v37 = v36(v32, 1, v34);
  int v38 = v36(v33, 1, v34);
  if (!v37)
  {
    if (v38)
    {
      _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v32, type metadata accessor for AspireSimilarityPlaintextPacking);
      goto LABEL_13;
    }
    uint64_t v46 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
    uint64_t v47 = *(void *)(v46 - 8);
    uint64_t v48 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v47 + 48);
    int v49 = v48(v32, 1, v46);
    int v50 = v48(v33, 1, v46);
    if (v49)
    {
      if (!v50)
      {
        swift_getEnumCaseMultiPayload();
        uint64_t v51 = v57;
        (*(void (**)(char *, char *, uint64_t))(v56 + 16))(v32, v33, v57);
        swift_storeEnumTagMultiPayload();
        (*(void (**)(char *, void, uint64_t, uint64_t))(v47 + 56))(v32, 0, 1, v46);
LABEL_23:
        ((void (*)(char *, char *, uint64_t))v55)(&v32[*(int *)(v34 + 20)], &v33[*(int *)(v34 + 20)], v51);
        return a1;
      }
    }
    else
    {
      if (!v50)
      {
        uint64_t v51 = v57;
        if (a1 != a2)
        {
          _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v32, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
          swift_getEnumCaseMultiPayload();
          (*(void (**)(char *, char *, uint64_t))(v56 + 16))(v32, v33, v57);
          swift_storeEnumTagMultiPayload();
        }
        goto LABEL_23;
      }
      _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v32, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
    }
    uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
    memcpy(v32, v33, *(void *)(*(void *)(v53 - 8) + 64));
    uint64_t v51 = v57;
    goto LABEL_23;
  }
  if (v38)
  {
LABEL_13:
    uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    memcpy(v32, v33, *(void *)(*(void *)(v42 - 8) + 64));
    return a1;
  }
  uint64_t v39 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
  uint64_t v40 = *(void *)(v39 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v33, 1, v39))
  {
    uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
    memcpy(v32, v33, *(void *)(*(void *)(v41 - 8) + 64));
    (*(void (**)(char *, char *, uint64_t))(v56 + 16))(&v32[*(int *)(v34 + 20)], &v33[*(int *)(v34 + 20)], v57);
  }
  else
  {
    swift_getEnumCaseMultiPayload();
    uint64_t v52 = *(void (**)(char *, char *, uint64_t))(v56 + 16);
    v52(v32, v33, v57);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, void, uint64_t, uint64_t))(v40 + 56))(v32, 0, 1, v39);
    v52(&v32[*(int *)(v34 + 20)], &v33[*(int *)(v34 + 20)], v57);
  }
  (*(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
  return a1;
}

uint64_t initializeWithTake for AspireApiPECConfig(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  long long v6 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v7 = a3[9];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(_OWORD *)(a1 + 32) = v6;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  uint64_t v12 = a3[10];
  uint64_t v13 = (_OWORD *)(a1 + v12);
  uint64_t v14 = (_OWORD *)(a2 + v12);
  uint64_t v15 = type metadata accessor for AspireHeEncryptionParameters(0);
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    _OWORD *v13 = *v14;
    uint64_t v18 = *((void *)v14 + 3);
    *((void *)v13 + 2) = *((void *)v14 + 2);
    *((void *)v13 + 3) = v18;
    *((unsigned char *)v13 + 32) = *((unsigned char *)v14 + 32);
    *((void *)v13 + 5) = *((void *)v14 + 5);
    *((unsigned char *)v13 + 48) = *((unsigned char *)v14 + 48);
    *((void *)v13 + 7) = *((void *)v14 + 7);
    *((unsigned char *)v13 + 64) = *((unsigned char *)v14 + 64);
    v11((uint64_t)v13 + *(int *)(v15 + 40), (uint64_t)v14 + *(int *)(v15 + 40), v10);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  uint64_t v19 = a3[11];
  uint64_t v20 = (char *)(a1 + v19);
  int v21 = (char *)(a2 + v19);
  uint64_t v22 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  uint64_t v23 = *(void *)(v22 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
  {
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
  }
  else
  {
    uint64_t v25 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
    uint64_t v26 = *(void *)(v25 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v21, 1, v25))
    {
      uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
      memcpy(v20, v21, *(void *)(*(void *)(v27 - 8) + 64));
    }
    else
    {
      swift_getEnumCaseMultiPayload();
      v11((uint64_t)v20, (uint64_t)v21, v10);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v20, 0, 1, v25);
    }
    v11((uint64_t)&v20[*(int *)(v22 + 20)], (uint64_t)&v21[*(int *)(v22 + 20)], v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  }
  return a1;
}

uint64_t assignWithTake for AspireApiPECConfig(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v6 = *(void *)(a1 + 32);
  unint64_t v7 = *(void *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  outlined consume of Data._Representation(v6, v7);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  uint64_t v8 = a3[9];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  uint64_t v44 = *(void *)(v11 - 8);
  uint64_t v45 = v11;
  uint64_t v43 = *(void (**)(uint64_t, uint64_t))(v44 + 40);
  v43(v9, v10);
  uint64_t v12 = a3[10];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = type metadata accessor for AspireHeEncryptionParameters(0);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v13, 1, v15);
  int v19 = v17(v14, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
      uint64_t v20 = *(void *)(v14 + 24);
      *(void *)(v13 + 16) = *(void *)(v14 + 16);
      *(void *)(v13 + 24) = v20;
      *(unsigned char *)(v13 + 32) = *(unsigned char *)(v14 + 32);
      *(unsigned char *)(v13 + 48) = *(unsigned char *)(v14 + 48);
      *(void *)(v13 + 40) = *(void *)(v14 + 40);
      *(void *)(v13 + 56) = *(void *)(v14 + 56);
      *(unsigned char *)(v13 + 64) = *(unsigned char *)(v14 + 64);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 32))(v13 + *(int *)(v15 + 40), v14 + *(int *)(v15 + 40), v45);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0(v13, type metadata accessor for AspireHeEncryptionParameters);
LABEL_6:
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    memcpy((void *)v13, (const void *)v14, *(void *)(*(void *)(v21 - 8) + 64));
    goto LABEL_7;
  }
  *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
  *(void *)(v13 + 16) = *(void *)(v14 + 16);
  swift_bridgeObjectRelease();
  *(void *)(v13 + 24) = *(void *)(v14 + 24);
  *(unsigned char *)(v13 + 32) = *(unsigned char *)(v14 + 32);
  *(void *)(v13 + 40) = *(void *)(v14 + 40);
  *(unsigned char *)(v13 + 48) = *(unsigned char *)(v14 + 48);
  *(void *)(v13 + 56) = *(void *)(v14 + 56);
  *(unsigned char *)(v13 + 64) = *(unsigned char *)(v14 + 64);
  ((void (*)(uint64_t, uint64_t, uint64_t))v43)(v13 + *(int *)(v15 + 40), v14 + *(int *)(v15 + 40), v45);
LABEL_7:
  uint64_t v22 = a3[11];
  uint64_t v23 = (char *)(a1 + v22);
  uint64_t v24 = (char *)(a2 + v22);
  uint64_t v25 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v27 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v26 + 48);
  int v28 = v27(v23, 1, v25);
  int v29 = v27(v24, 1, v25);
  if (!v28)
  {
    if (v29)
    {
      _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v23, type metadata accessor for AspireSimilarityPlaintextPacking);
      goto LABEL_13;
    }
    uint64_t v34 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
    uint64_t v35 = *(void *)(v34 - 8);
    uint64_t v36 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v35 + 48);
    int v37 = v36(v23, 1, v34);
    int v38 = v36(v24, 1, v34);
    if (v37)
    {
      if (!v38)
      {
        swift_getEnumCaseMultiPayload();
        uint64_t v39 = v45;
        (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v23, v24, v45);
        swift_storeEnumTagMultiPayload();
        (*(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(v23, 0, 1, v34);
LABEL_23:
        ((void (*)(char *, char *, uint64_t))v43)(&v23[*(int *)(v25 + 20)], &v24[*(int *)(v25 + 20)], v39);
        return a1;
      }
    }
    else
    {
      if (!v38)
      {
        uint64_t v39 = v45;
        if (a1 != a2)
        {
          _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v23, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
          swift_getEnumCaseMultiPayload();
          (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v23, v24, v45);
          swift_storeEnumTagMultiPayload();
        }
        goto LABEL_23;
      }
      _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v23, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
    }
    uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
    memcpy(v23, v24, *(void *)(*(void *)(v41 - 8) + 64));
    uint64_t v39 = v45;
    goto LABEL_23;
  }
  if (v29)
  {
LABEL_13:
    uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    memcpy(v23, v24, *(void *)(*(void *)(v33 - 8) + 64));
    return a1;
  }
  uint64_t v30 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
  uint64_t v31 = *(void *)(v30 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v24, 1, v30))
  {
    uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
    memcpy(v23, v24, *(void *)(*(void *)(v32 - 8) + 64));
    (*(void (**)(char *, char *, uint64_t))(v44 + 32))(&v23[*(int *)(v25 + 20)], &v24[*(int *)(v25 + 20)], v45);
  }
  else
  {
    swift_getEnumCaseMultiPayload();
    uint64_t v40 = *(void (**)(char *, char *, uint64_t))(v44 + 32);
    v40(v23, v24, v45);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, void, uint64_t, uint64_t))(v31 + 56))(v23, 0, 1, v30);
    v40(&v23[*(int *)(v25 + 20)], &v24[*(int *)(v25 + 20)], v45);
  }
  (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
  return a1;
}

uint64_t getEnumTagSinglePayload for AspireApiPECConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_249DD5EB0);
}

uint64_t sub_249DD5EB0(uint64_t a1, uint64_t a2, int *a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 48);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  uint64_t v8 = type metadata accessor for UnknownStorage();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a2)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a3[9];
LABEL_9:
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
    return v13(a1 + v11, a2, v9);
  }
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a2)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a3[10];
    goto LABEL_9;
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
  uint64_t v16 = v14;
  uint64_t v17 = a1 + a3[11];
  return v15(v17, a2, v16);
}

uint64_t storeEnumTagSinglePayload for AspireApiPECConfig(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_249DD6044);
}

uint64_t sub_249DD6044(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 48) = (a2 - 1);
    return result;
  }
  uint64_t v8 = type metadata accessor for UnknownStorage();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[9];
LABEL_7:
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return v13(v5 + v11, a2, a2, v9);
  }
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a3)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a4[10];
    goto LABEL_7;
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
  uint64_t v16 = v14;
  uint64_t v17 = v5 + a4[11];
  return v15(v17, a2, a2, v16);
}

void type metadata completion function for AspireApiPECConfig()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for AspireHeEvaluationKeyConfig?(319, &lazy cache variable for type metadata for AspireHeEncryptionParameters?, (void (*)(uint64_t))type metadata accessor for AspireHeEncryptionParameters);
    if (v1 <= 0x3F)
    {
      type metadata accessor for AspireHeEvaluationKeyConfig?(319, &lazy cache variable for type metadata for AspireSimilarityPlaintextPacking?, (void (*)(uint64_t))type metadata accessor for AspireSimilarityPlaintextPacking);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for AspireApiPECRequest(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v4 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v5 = *a2;
  uint64_t v87 = a1;
  *a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v87 = (uint64_t *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v8 = a2[2];
    a1[1] = a2[1];
    unint64_t v9 = a2[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v8, v9);
    v87[2] = v8;
    v87[3] = v9;
    uint64_t v10 = a3[7];
    uint64_t v11 = (char *)v87 + v10;
    uint64_t v12 = (char *)a2 + v10;
    uint64_t v13 = type metadata accessor for UnknownStorage();
    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16);
    v14(v11, v12, v13);
    uint64_t v15 = a3[8];
    uint64_t v16 = (uint64_t *)((char *)v87 + v15);
    uint64_t v17 = (uint64_t *)((char *)a2 + v15);
    uint64_t v18 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
    uint64_t v19 = *(void *)(v18 - 8);
    int v83 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
    uint64_t v86 = v14;
    uint64_t v79 = v19;
    if (v83((char *)v17, 1, v18))
    {
      uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
      memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
    }
    else
    {
      uint64_t v81 = v13;
      uint64_t v21 = v17[1];
      void *v16 = *v17;
      uint64_t v22 = v19;
      unint64_t v23 = v17[2];
      outlined copy of Data._Representation(v21, v23);
      v16[1] = v21;
      v16[2] = v23;
      uint64_t v13 = v81;
      v86((char *)v16 + *(int *)(v18 + 24), (char *)v17 + *(int *)(v18 + 24), v81);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v22 + 56))(v16, 0, 1, v18);
    }
    uint64_t v24 = a3[9];
    uint64_t v25 = (char *)v87 + v24;
    uint64_t v26 = (char *)a2 + v24;
    uint64_t v27 = type metadata accessor for AspireApiEvaluationKey(0);
    uint64_t v28 = *(void *)(v27 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
    {
      uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKey?);
      memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
    }
    else
    {
      v86(v25, v26, v13);
      uint64_t v30 = *(int *)(v27 + 20);
      uint64_t v78 = v25;
      uint64_t v31 = &v25[v30];
      uint64_t v32 = v13;
      uint64_t v33 = &v26[v30];
      uint64_t v82 = v32;
      if (v83(&v26[v30], 1, v18))
      {
        uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
        memcpy(v31, v33, *(void *)(*(void *)(v34 - 8) + 64));
      }
      else
      {
        uint64_t v84 = v28;
        uint64_t v35 = *((void *)v33 + 1);
        *(void *)uint64_t v31 = *(void *)v33;
        unint64_t v36 = *((void *)v33 + 2);
        outlined copy of Data._Representation(v35, v36);
        *((void *)v31 + 1) = v35;
        *((void *)v31 + 2) = v36;
        uint64_t v28 = v84;
        v86(&v31[*(int *)(v18 + 24)], &v33[*(int *)(v18 + 24)], v32);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v79 + 56))(v31, 0, 1, v18);
      }
      int v37 = v78;
      uint64_t v38 = *(int *)(v27 + 24);
      uint64_t v39 = &v78[v38];
      uint64_t v40 = &v26[v38];
      uint64_t v41 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
      uint64_t v42 = *(void *)(v41 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41))
      {
        uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
        memcpy(v39, v40, *(void *)(*(void *)(v43 - 8) + 64));
      }
      else
      {
        uint64_t v77 = v42;
        uint64_t v85 = v28;
        v86(v39, v40, v82);
        uint64_t v44 = *(int *)(v41 + 20);
        uint64_t v80 = v39;
        uint64_t v45 = &v39[v44];
        uint64_t v46 = &v40[v44];
        uint64_t v47 = type metadata accessor for AspireHeSerializedGaloisKey(0);
        uint64_t v48 = *(void *)(v47 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v46, 1, v47))
        {
          uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
          memcpy(v45, v46, *(void *)(*(void *)(v49 - 8) + 64));
        }
        else
        {
          *(void *)uint64_t v45 = *(void *)v46;
          uint64_t v50 = *(int *)(v47 + 20);
          uint64_t v75 = &v45[v50];
          uint64_t v51 = &v46[v50];
          swift_bridgeObjectRetain();
          v86(v75, v51, v82);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
        }
        uint64_t v28 = v85;
        uint64_t v52 = v80;
        uint64_t v53 = *(int *)(v41 + 24);
        uint64_t v54 = &v80[v53];
        uint64_t v55 = &v40[v53];
        uint64_t v56 = type metadata accessor for AspireHeSerializedRelinKey(0);
        uint64_t v57 = *(void *)(v56 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48))(v55, 1, v56))
        {
          uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
          memcpy(v54, v55, *(void *)(*(void *)(v58 - 8) + 64));
          int v37 = v78;
        }
        else
        {
          v86(v54, v55, v82);
          uint64_t v59 = *(int *)(v56 + 20);
          unsigned int v60 = &v54[v59];
          unsigned int v61 = &v55[v59];
          uint64_t v62 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
          uint64_t v63 = *(void *)(v62 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v63 + 48))(v61, 1, v62))
          {
            uint64_t v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
            memcpy(v60, v61, *(void *)(*(void *)(v64 - 8) + 64));
            uint64_t v28 = v85;
            int v37 = v78;
          }
          else
          {
            v86(v60, v61, v82);
            uint64_t v65 = *(int *)(v62 + 20);
            uint64_t v73 = v60;
            uint64_t v74 = &v60[v65];
            uint64_t v66 = &v61[v65];
            uint64_t v67 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
            uint64_t v72 = *(void *)(v67 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v72 + 48))(v66, 1, v67))
            {
              uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
              memcpy(v74, v66, *(void *)(*(void *)(v68 - 8) + 64));
            }
            else
            {
              *(void *)uint64_t v74 = *(void *)v66;
              uint64_t v69 = *(int *)(v67 + 20);
              uint64_t v71 = &v74[v69];
              uint64_t v76 = &v66[v69];
              swift_bridgeObjectRetain();
              v86(v71, v76, v82);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v72 + 56))(v74, 0, 1, v67);
            }
            uint64_t v28 = v85;
            int v37 = v78;
            (*(void (**)(char *, void, uint64_t, uint64_t))(v63 + 56))(v73, 0, 1, v62);
          }
          (*(void (**)(char *, void, uint64_t, uint64_t))(v57 + 56))(v54, 0, 1, v56);
          uint64_t v52 = v80;
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v77 + 56))(v52, 0, 1, v41);
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v37, 0, 1, v27);
    }
  }
  return v87;
}

uint64_t destroy for AspireApiPECRequest(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(*(void *)(a1 + 16), *(void *)(a1 + 24));
  uint64_t v4 = a1 + a2[7];
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v24 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v24(v4, v5);
  uint64_t v6 = a1 + a2[8];
  uint64_t v7 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  uint64_t v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48);
  if (!v8(v6, 1, v7))
  {
    outlined consume of Data._Representation(*(void *)(v6 + 8), *(void *)(v6 + 16));
    v24(v6 + *(int *)(v7 + 24), v5);
  }
  uint64_t v9 = a1 + a2[9];
  uint64_t v10 = type metadata accessor for AspireApiEvaluationKey(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v9, 1, v10);
  if (!result)
  {
    v24(v9, v5);
    uint64_t v12 = v9 + *(int *)(v10 + 20);
    if (!v8(v12, 1, v7))
    {
      outlined consume of Data._Representation(*(void *)(v12 + 8), *(void *)(v12 + 16));
      v24(v12 + *(int *)(v7 + 24), v5);
    }
    uint64_t v13 = v9 + *(int *)(v10 + 24);
    uint64_t v14 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48))(v13, 1, v14);
    if (!result)
    {
      v24(v13, v5);
      uint64_t v15 = v13 + *(int *)(v14 + 20);
      uint64_t v16 = type metadata accessor for AspireHeSerializedGaloisKey(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48))(v15, 1, v16))
      {
        swift_bridgeObjectRelease();
        v24(v15 + *(int *)(v16 + 20), v5);
      }
      uint64_t v17 = v13 + *(int *)(v14 + 24);
      uint64_t v18 = type metadata accessor for AspireHeSerializedRelinKey(0);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 48))(v17, 1, v18);
      if (!result)
      {
        v24(v17, v5);
        uint64_t v19 = v17 + *(int *)(v18 + 20);
        uint64_t v20 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 48))(v19, 1, v20);
        if (!result)
        {
          v24(v19, v5);
          uint64_t v21 = v19 + *(int *)(v20 + 20);
          uint64_t v22 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 48))(v21, 1, v22);
          if (!result)
          {
            swift_bridgeObjectRelease();
            uint64_t v23 = v21 + *(int *)(v22 + 20);
            return ((uint64_t (*)(uint64_t, uint64_t))v24)(v23, v5);
          }
        }
      }
    }
  }
  return result;
}

void *initializeWithCopy for AspireApiPECRequest(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1;
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a2[2];
  unint64_t v8 = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(v7, v8);
  v5[2] = v7;
  v5[3] = v8;
  uint64_t v9 = *(int *)(a3 + 28);
  uint64_t v10 = (char *)v5 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for UnknownStorage();
  uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
  v13(v10, v11, v12);
  uint64_t v97 = a3;
  uint64_t v14 = *(int *)(a3 + 32);
  uint64_t v15 = (void *)((char *)v5 + v14);
  uint64_t v16 = (void *)((char *)a2 + v14);
  uint64_t v17 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v94 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
  uint64_t v95 = v17;
  if (v94((char *)v16, 1, v17))
  {
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
    memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    uint64_t v88 = v12;
    uint64_t v20 = v16[1];
    *uint64_t v15 = *v16;
    uint64_t v91 = v5;
    unint64_t v21 = v16[2];
    outlined copy of Data._Representation(v20, v21);
    v15[1] = v20;
    v15[2] = v21;
    uint64_t v12 = v88;
    uint64_t v5 = v91;
    v13((char *)v15 + *(int *)(v17 + 24), (char *)v16 + *(int *)(v17 + 24), v88);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  }
  uint64_t v22 = v13;
  uint64_t v23 = *(int *)(v97 + 36);
  uint64_t v24 = (char *)v5 + v23;
  uint64_t v25 = (char *)a2 + v23;
  uint64_t v26 = type metadata accessor for AspireApiEvaluationKey(0);
  uint64_t v27 = *(void *)(v26 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
  {
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKey?);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
  }
  else
  {
    uint64_t v92 = v18;
    uint64_t v87 = v27;
    v22(v24, v25, v12);
    uint64_t v90 = v26;
    uint64_t v29 = *(int *)(v26 + 20);
    uint64_t v98 = v24;
    uint64_t v30 = v22;
    uint64_t v31 = &v24[v29];
    uint64_t v32 = v12;
    uint64_t v33 = &v25[v29];
    uint64_t v86 = v30;
    if (v94(&v25[v29], 1, v95))
    {
      uint64_t v34 = v32;
      uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
      memcpy(v31, v33, *(void *)(*(void *)(v35 - 8) + 64));
    }
    else
    {
      unint64_t v36 = v5;
      uint64_t v37 = *((void *)v33 + 1);
      *(void *)uint64_t v31 = *(void *)v33;
      unint64_t v38 = *((void *)v33 + 2);
      outlined copy of Data._Representation(v37, v38);
      *((void *)v31 + 1) = v37;
      *((void *)v31 + 2) = v38;
      uint64_t v5 = v36;
      uint64_t v34 = v32;
      v30(&v31[*(int *)(v95 + 24)], &v33[*(int *)(v95 + 24)], v32);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v92 + 56))(v31, 0, 1, v95);
    }
    uint64_t v39 = v98;
    uint64_t v40 = v90;
    uint64_t v41 = *(int *)(v90 + 24);
    uint64_t v42 = &v98[v41];
    uint64_t v43 = &v25[v41];
    uint64_t v44 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
    uint64_t v45 = *(void *)(v44 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44))
    {
      uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
      memcpy(v42, v43, *(void *)(*(void *)(v46 - 8) + 64));
      uint64_t v47 = v87;
    }
    else
    {
      uint64_t v93 = v5;
      uint64_t v48 = v42;
      uint64_t v49 = v42;
      uint64_t v50 = v34;
      v86(v48, v43, v34);
      uint64_t v51 = *(int *)(v44 + 20);
      uint64_t v96 = v49;
      uint64_t v52 = &v49[v51];
      uint64_t v53 = &v43[v51];
      uint64_t v54 = type metadata accessor for AspireHeSerializedGaloisKey(0);
      uint64_t v55 = *(void *)(v54 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v53, 1, v54))
      {
        uint64_t v56 = v50;
        uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
        memcpy(v52, v53, *(void *)(*(void *)(v57 - 8) + 64));
      }
      else
      {
        *(void *)uint64_t v52 = *(void *)v53;
        uint64_t v58 = *(int *)(v54 + 20);
        uint64_t v59 = &v52[v58];
        unsigned int v60 = &v53[v58];
        swift_bridgeObjectRetain();
        unsigned int v61 = v59;
        uint64_t v56 = v50;
        v86(v61, v60, v50);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v55 + 56))(v52, 0, 1, v54);
      }
      uint64_t v40 = v90;
      uint64_t v5 = v93;
      uint64_t v62 = v96;
      uint64_t v63 = *(int *)(v44 + 24);
      uint64_t v64 = &v96[v63];
      uint64_t v65 = &v43[v63];
      uint64_t v66 = type metadata accessor for AspireHeSerializedRelinKey(0);
      uint64_t v67 = *(void *)(v66 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v67 + 48))(v65, 1, v66))
      {
        uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
        memcpy(v64, v65, *(void *)(*(void *)(v68 - 8) + 64));
        uint64_t v47 = v87;
        uint64_t v39 = v98;
      }
      else
      {
        uint64_t v89 = v56;
        v86(v64, v65, v56);
        uint64_t v69 = *(int *)(v66 + 20);
        uint64_t v70 = &v64[v69];
        uint64_t v71 = &v65[v69];
        uint64_t v72 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
        uint64_t v73 = *(void *)(v72 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v73 + 48))(v71, 1, v72))
        {
          uint64_t v74 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
          memcpy(v70, v71, *(void *)(*(void *)(v74 - 8) + 64));
          uint64_t v5 = v93;
          uint64_t v47 = v87;
          uint64_t v39 = v98;
        }
        else
        {
          v86(v70, v71, v89);
          uint64_t v75 = *(int *)(v72 + 20);
          uint64_t v85 = v70;
          int v83 = &v70[v75];
          uint64_t v76 = &v71[v75];
          uint64_t v77 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
          uint64_t v82 = *(void *)(v77 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v82 + 48))(v76, 1, v77))
          {
            uint64_t v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
            memcpy(v83, v76, *(void *)(*(void *)(v78 - 8) + 64));
          }
          else
          {
            *(void *)int v83 = *(void *)v76;
            uint64_t v79 = *(int *)(v77 + 20);
            uint64_t v81 = &v83[v79];
            uint64_t v84 = &v76[v79];
            swift_bridgeObjectRetain();
            v86(v81, v84, v89);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v82 + 56))(v83, 0, 1, v77);
          }
          uint64_t v5 = v93;
          uint64_t v39 = v98;
          (*(void (**)(char *, void, uint64_t, uint64_t))(v73 + 56))(v85, 0, 1, v72);
          uint64_t v47 = v87;
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v67 + 56))(v64, 0, 1, v66);
        uint64_t v62 = v96;
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v45 + 56))(v62, 0, 1, v44);
    }
    (*(void (**)(char *, void, uint64_t, uint64_t))(v47 + 56))(v39, 0, 1, v40);
  }
  return v5;
}

void *assignWithCopy for AspireApiPECRequest(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[2];
  unint64_t v7 = a2[3];
  outlined copy of Data._Representation(v6, v7);
  uint64_t v8 = a1[2];
  unint64_t v9 = a1[3];
  a1[2] = v6;
  a1[3] = v7;
  outlined consume of Data._Representation(v8, v9);
  uint64_t v10 = a3[7];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v217 = v13;
  __dst = *(void (**)(char *, char *))(v14 + 24);
  __dst(v11, v12);
  uint64_t v15 = a3[8];
  uint64_t v218 = a1;
  uint64_t v16 = (char *)a1 + v15;
  uint64_t v17 = (char *)a2 + v15;
  uint64_t v18 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48);
  int v21 = v20(v16, 1, v18);
  int v22 = v20(v17, 1, v18);
  uint64_t v215 = v14;
  if (v21)
  {
    if (!v22)
    {
      *(void *)uint64_t v16 = *(void *)v17;
      uint64_t v23 = *((void *)v17 + 1);
      unint64_t v24 = *((void *)v17 + 2);
      outlined copy of Data._Representation(v23, v24);
      *((void *)v16 + 1) = v23;
      *((void *)v16 + 2) = v24;
      (*(void (**)(char *, char *, uint64_t))(v215 + 16))(&v16[*(int *)(v18 + 24)], &v17[*(int *)(v18 + 24)], v217);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v22)
  {
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v16, type metadata accessor for AspireApiEvaluationKeyMetadata);
LABEL_6:
    uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
    memcpy(v16, v17, *(void *)(*(void *)(v25 - 8) + 64));
    goto LABEL_7;
  }
  *(void *)uint64_t v16 = *(void *)v17;
  uint64_t v43 = *((void *)v17 + 1);
  unint64_t v44 = *((void *)v17 + 2);
  outlined copy of Data._Representation(v43, v44);
  uint64_t v45 = *((void *)v16 + 1);
  unint64_t v46 = *((void *)v16 + 2);
  *((void *)v16 + 1) = v43;
  *((void *)v16 + 2) = v44;
  outlined consume of Data._Representation(v45, v46);
  ((void (*)(char *, char *, uint64_t))__dst)(&v16[*(int *)(v18 + 24)], &v17[*(int *)(v18 + 24)], v217);
LABEL_7:
  uint64_t v26 = a3[9];
  uint64_t v27 = (uint64_t)v218 + v26;
  uint64_t v28 = (char *)a2 + v26;
  uint64_t v29 = type metadata accessor for AspireApiEvaluationKey(0);
  uint64_t v205 = *(void **)(v29 - 8);
  uint64_t v30 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v205[6];
  int v31 = v30(v27, 1, v29);
  int v32 = v30((uint64_t)v28, 1, v29);
  if (v31)
  {
    if (!v32)
    {
      uint64_t v33 = (int *)v29;
      uint64_t v34 = *(void (**)(uint64_t, char *, uint64_t))(v215 + 16);
      v34(v27, v28, v217);
      __dsta = v33;
      uint64_t v35 = v33[5];
      uint64_t v203 = v27;
      unint64_t v36 = (void *)(v27 + v35);
      uint64_t v37 = &v28[v35];
      if (v20(&v28[v35], 1, v18))
      {
        uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
        memcpy(v36, v37, *(void *)(*(void *)(v38 - 8) + 64));
      }
      else
      {
        *unint64_t v36 = *(void *)v37;
        uint64_t v55 = *((void *)v37 + 1);
        unint64_t v56 = *((void *)v37 + 2);
        outlined copy of Data._Representation(v55, v56);
        v36[1] = v55;
        v36[2] = v56;
        v34((uint64_t)v36 + *(int *)(v18 + 24), &v37[*(int *)(v18 + 24)], v217);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v36, 0, 1, v18);
      }
      uint64_t v57 = __dsta[6];
      uint64_t v58 = (char *)(v27 + v57);
      uint64_t v59 = &v28[v57];
      uint64_t v60 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
      uint64_t v61 = *(void *)(v60 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v61 + 48))(v59, 1, v60))
      {
        uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
        memcpy(v58, v59, *(void *)(*(void *)(v62 - 8) + 64));
        uint64_t v63 = (uint64_t)__dsta;
        uint64_t v64 = (void (**)(uint64_t, void, uint64_t, uint64_t))v205;
      }
      else
      {
        uint64_t v201 = v61;
        uint64_t v65 = v217;
        v34((uint64_t)v58, v59, v217);
        uint64_t v66 = *(int *)(v60 + 20);
        uint64_t v208 = v58;
        uint64_t v67 = &v58[v66];
        uint64_t v68 = &v59[v66];
        uint64_t v69 = type metadata accessor for AspireHeSerializedGaloisKey(0);
        uint64_t v70 = *(void *)(v69 - 8);
        uint64_t v199 = (void (*)(char *, char *, uint64_t))v34;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v70 + 48))(v68, 1, v69))
        {
          uint64_t v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
          memcpy(v67, v68, *(void *)(*(void *)(v71 - 8) + 64));
        }
        else
        {
          *(void *)uint64_t v67 = *(void *)v68;
          uint64_t v87 = *(int *)(v69 + 20);
          uint64_t v88 = &v67[v87];
          uint64_t v89 = &v68[v87];
          swift_bridgeObjectRetain();
          uint64_t v90 = v88;
          uint64_t v65 = v217;
          v34((uint64_t)v90, v89, v217);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v70 + 56))(v67, 0, 1, v69);
        }
        uint64_t v91 = *(int *)(v60 + 24);
        uint64_t v92 = &v208[v91];
        uint64_t v93 = &v59[v91];
        uint64_t v94 = type metadata accessor for AspireHeSerializedRelinKey(0);
        uint64_t v95 = *(void *)(v94 - 8);
        uint64_t v63 = (uint64_t)__dsta;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v95 + 48))(v93, 1, v94))
        {
          uint64_t v96 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
          memcpy(v92, v93, *(void *)(*(void *)(v96 - 8) + 64));
          uint64_t v97 = v208;
        }
        else
        {
          v199(v92, v93, v65);
          uint64_t v98 = *(int *)(v94 + 20);
          uint64_t v99 = &v92[v98];
          uint64_t v100 = &v93[v98];
          uint64_t v101 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
          uint64_t v102 = *(void *)(v101 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v102 + 48))(v100, 1, v101))
          {
            uint64_t v103 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
            memcpy(v99, v100, *(void *)(*(void *)(v103 - 8) + 64));
            uint64_t v27 = v203;
          }
          else
          {
            v199(v99, v100, v65);
            uint64_t v129 = *(int *)(v101 + 20);
            uint64_t v198 = v99;
            uint64_t v196 = &v99[v129];
            uint64_t v130 = &v100[v129];
            uint64_t v131 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
            uint64_t v132 = *(void *)(v131 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v132 + 48))(v130, 1, v131))
            {
              uint64_t v133 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
              memcpy(v196, v130, *(void *)(*(void *)(v133 - 8) + 64));
            }
            else
            {
              *(void *)uint64_t v196 = *(void *)v130;
              uint64_t v157 = *(int *)(v131 + 20);
              uint64_t v195 = &v196[v157];
              uint64_t v197 = &v130[v157];
              swift_bridgeObjectRetain();
              v199(v195, v197, v217);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v132 + 56))(v196, 0, 1, v131);
            }
            uint64_t v27 = v203;
            (*(void (**)(char *, void, uint64_t, uint64_t))(v102 + 56))(v198, 0, 1, v101);
          }
          uint64_t v61 = v201;
          (*(void (**)(char *, void, uint64_t, uint64_t))(v95 + 56))(v92, 0, 1, v94);
          uint64_t v97 = v208;
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v61 + 56))(v97, 0, 1, v60);
        uint64_t v64 = (void (**)(uint64_t, void, uint64_t, uint64_t))v205;
      }
LABEL_82:
      v64[7](v27, 0, 1, v63);
      return v218;
    }
    goto LABEL_13;
  }
  if (!v32)
  {
    ((void (*)(uint64_t, char *, uint64_t))__dst)(v27, v28, v217);
    uint64_t v47 = *(int *)(v29 + 20);
    uint64_t v48 = (char *)(v27 + v47);
    uint64_t v49 = &v28[v47];
    int v50 = v20((char *)(v27 + v47), 1, v18);
    int v51 = v20(v49, 1, v18);
    if (v50)
    {
      if (!v51)
      {
        *(void *)uint64_t v48 = *(void *)v49;
        uint64_t v53 = *((void *)v49 + 1);
        unint64_t v52 = *((void *)v49 + 2);
        outlined copy of Data._Representation(v53, v52);
        *((void *)v48 + 1) = v53;
        *((void *)v48 + 2) = v52;
        uint64_t v54 = v215;
        (*(void (**)(char *, char *, uint64_t))(v215 + 16))(&v48[*(int *)(v18 + 24)], &v49[*(int *)(v18 + 24)], v217);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v48, 0, 1, v18);
        goto LABEL_29;
      }
    }
    else
    {
      if (!v51)
      {
        *(void *)uint64_t v48 = *(void *)v49;
        uint64_t v105 = *((void *)v49 + 1);
        unint64_t v104 = *((void *)v49 + 2);
        outlined copy of Data._Representation(v105, v104);
        uint64_t v106 = *((void *)v48 + 1);
        unint64_t v107 = *((void *)v48 + 2);
        *((void *)v48 + 1) = v105;
        *((void *)v48 + 2) = v104;
        outlined consume of Data._Representation(v106, v107);
        ((void (*)(char *, char *, uint64_t))__dst)(&v48[*(int *)(v18 + 24)], &v49[*(int *)(v18 + 24)], v217);
        goto LABEL_28;
      }
      _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v48, type metadata accessor for AspireApiEvaluationKeyMetadata);
    }
    uint64_t v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
    memcpy(v48, v49, *(void *)(*(void *)(v72 - 8) + 64));
LABEL_28:
    uint64_t v54 = v215;
LABEL_29:
    uint64_t v73 = *(int *)(v29 + 24);
    v27 += v73;
    uint64_t v74 = &v28[v73];
    uint64_t v63 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
    uint64_t v75 = *(void **)(v63 - 8);
    uint64_t v76 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v75[6];
    int v77 = v76(v27, 1, v63);
    int v78 = v76((uint64_t)v74, 1, v63);
    if (v77)
    {
      if (!v78)
      {
        __dstb = (void (**)(uint64_t, void, uint64_t, uint64_t))v75;
        uint64_t v79 = *(void (**)(uint64_t, char *, uint64_t))(v54 + 16);
        v79(v27, v74, v217);
        uint64_t v80 = *(int *)(v63 + 20);
        uint64_t v81 = (void *)(v27 + v80);
        uint64_t v82 = &v74[v80];
        uint64_t v83 = type metadata accessor for AspireHeSerializedGaloisKey(0);
        uint64_t v84 = *(void *)(v83 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v84 + 48))(v82, 1, v83))
        {
          uint64_t v85 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
          memcpy(v81, v82, *(void *)(*(void *)(v85 - 8) + 64));
        }
        else
        {
          *uint64_t v81 = *(void *)v82;
          uint64_t v120 = *(int *)(v83 + 20);
          unint64_t v121 = (char *)v81 + v120;
          uint64_t v122 = &v82[v120];
          swift_bridgeObjectRetain();
          v79((uint64_t)v121, v122, v217);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v84 + 56))(v81, 0, 1, v83);
        }
        uint64_t v123 = *(int *)(v63 + 24);
        uint64_t v124 = (char *)(v27 + v123);
        uint64_t v125 = &v74[v123];
        uint64_t v126 = type metadata accessor for AspireHeSerializedRelinKey(0);
        uint64_t v127 = *(void *)(v126 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v127 + 48))(v125, 1, v126))
        {
          uint64_t v128 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
          memcpy(v124, v125, *(void *)(*(void *)(v128 - 8) + 64));
        }
        else
        {
          v79((uint64_t)v124, v125, v217);
          uint64_t v134 = *(int *)(v126 + 20);
          uint64_t v135 = &v124[v134];
          uint64_t v136 = &v125[v134];
          uint64_t v137 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
          uint64_t v138 = *(void *)(v137 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v138 + 48))(v136, 1, v137))
          {
            uint64_t v139 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
            memcpy(v135, v136, *(void *)(*(void *)(v139 - 8) + 64));
          }
          else
          {
            v79((uint64_t)v135, v136, v217);
            uint64_t v158 = *(int *)(v137 + 20);
            uint64_t v209 = v135;
            uint64_t v204 = &v135[v158];
            uint64_t v159 = &v136[v158];
            uint64_t v160 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
            uint64_t v202 = *(void *)(v160 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v202 + 48))(v159, 1, v160))
            {
              uint64_t v161 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
              memcpy(v204, v159, *(void *)(*(void *)(v161 - 8) + 64));
            }
            else
            {
              *(void *)uint64_t v204 = *(void *)v159;
              uint64_t v177 = *(int *)(v160 + 20);
              uint64_t v200 = &v204[v177];
              uint64_t v206 = &v159[v177];
              swift_bridgeObjectRetain();
              v79((uint64_t)v200, v206, v217);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v202 + 56))(v204, 0, 1, v160);
            }
            (*(void (**)(char *, void, uint64_t, uint64_t))(v138 + 56))(v209, 0, 1, v137);
          }
          (*(void (**)(char *, void, uint64_t, uint64_t))(v127 + 56))(v124, 0, 1, v126);
        }
        uint64_t v64 = __dstb;
        goto LABEL_82;
      }
      goto LABEL_35;
    }
    if (v78)
    {
      _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0(v27, type metadata accessor for AspireHeSerializedEvaluationKey);
LABEL_35:
      uint64_t v86 = &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?;
LABEL_36:
      size_t v40 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(v86) - 8) + 64);
      uint64_t v41 = (void *)v27;
      uint64_t v42 = v74;
      goto LABEL_15;
    }
    ((void (*)(uint64_t, char *, uint64_t))__dst)(v27, v74, v217);
    uint64_t v108 = *(int *)(v63 + 20);
    unint64_t v109 = (char *)(v27 + v108);
    uint64_t v110 = &v74[v108];
    uint64_t v111 = type metadata accessor for AspireHeSerializedGaloisKey(0);
    uint64_t v112 = *(void *)(v111 - 8);
    uint64_t v113 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v112 + 48);
    int v114 = v113(v109, 1, v111);
    int v115 = v113(v110, 1, v111);
    if (v114)
    {
      if (!v115)
      {
        *(void *)unint64_t v109 = *(void *)v110;
        uint64_t v116 = *(int *)(v111 + 20);
        int v117 = &v109[v116];
        uint64_t v118 = &v110[v116];
        uint64_t v119 = *(void (**)(char *, char *, uint64_t))(v215 + 16);
        swift_bridgeObjectRetain();
        v119(v117, v118, v217);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v112 + 56))(v109, 0, 1, v111);
LABEL_56:
        uint64_t v141 = (void (*)(uint64_t, char *, uint64_t))__dst;
        goto LABEL_57;
      }
    }
    else
    {
      if (!v115)
      {
        *(void *)unint64_t v109 = *(void *)v110;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v141 = (void (*)(uint64_t, char *, uint64_t))__dst;
        ((void (*)(char *, char *, uint64_t))__dst)(&v109[*(int *)(v111 + 20)], &v110[*(int *)(v111 + 20)], v217);
LABEL_57:
        uint64_t v142 = *(int *)(v63 + 24);
        v27 += v142;
        uint64_t v28 = &v74[v142];
        uint64_t v143 = type metadata accessor for AspireHeSerializedRelinKey(0);
        uint64_t v144 = *(void *)(v143 - 8);
        uint64_t v145 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v144 + 48);
        int v146 = v145(v27, 1, v143);
        int v147 = v145((uint64_t)v28, 1, v143);
        if (v146)
        {
          if (!v147)
          {
            uint64_t v148 = *(void (**)(uint64_t, char *, uint64_t))(v215 + 16);
            v148(v27, v28, v217);
            uint64_t v149 = *(int *)(v143 + 20);
            uint64_t v150 = (char *)(v27 + v149);
            size_t v151 = &v28[v149];
            uint64_t v152 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
            uint64_t v153 = *(void *)(v152 - 8);
            if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v153 + 48))(v151, 1, v152))
            {
              v148((uint64_t)v150, v151, v217);
              uint64_t v172 = *(int *)(v152 + 20);
              uint64_t v210 = v150;
              __dstc = &v150[v172];
              uint64_t v173 = &v151[v172];
              uint64_t v174 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
              uint64_t v175 = *(void *)(v174 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v175 + 48))(v173, 1, v174))
              {
                uint64_t v176 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                memcpy(__dstc, v173, *(void *)(*(void *)(v176 - 8) + 64));
              }
              else
              {
                *(void *)__dstc = *(void *)v173;
                uint64_t v179 = *(int *)(v174 + 20);
                uint64_t v207 = &__dstc[v179];
                int v180 = &v173[v179];
                swift_bridgeObjectRetain();
                v148((uint64_t)v207, v180, v217);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v175 + 56))(__dstc, 0, 1, v174);
              }
              (*(void (**)(char *, void, uint64_t, uint64_t))(v153 + 56))(v210, 0, 1, v152);
              goto LABEL_89;
            }
            size_t v154 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?)
                                         - 8)
                             + 64);
            uint64_t v155 = v150;
            uint64_t v156 = v151;
            goto LABEL_61;
          }
        }
        else
        {
          if (!v147)
          {
            v141(v27, v28, v217);
            uint64_t v162 = *(int *)(v143 + 20);
            v27 += v162;
            uint64_t v74 = &v28[v162];
            uint64_t v143 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
            uint64_t v144 = *(void *)(v143 - 8);
            int v163 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v144 + 48);
            int v164 = v163(v27, 1, v143);
            int v165 = v163((uint64_t)v74, 1, v143);
            if (v164)
            {
              if (!v165)
              {
                uint64_t v166 = *(void (**)(uint64_t, char *, uint64_t))(v215 + 16);
                v166(v27, v74, v217);
                uint64_t v167 = *(int *)(v143 + 20);
                uint64_t v168 = (void *)(v27 + v167);
                uint64_t v169 = &v74[v167];
                uint64_t v170 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
                uint64_t v171 = *(void *)(v170 - 8);
                if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v171 + 48))(v169, 1, v170))
                {
                  *uint64_t v168 = *(void *)v169;
                  uint64_t v193 = *(int *)(v170 + 20);
                  uint64_t v216 = (char *)v168 + v193;
                  uint64_t v194 = &v169[v193];
                  swift_bridgeObjectRetain();
                  v166((uint64_t)v216, v194, v217);
                  (*(void (**)(void *, void, uint64_t, uint64_t))(v171 + 56))(v168, 0, 1, v170);
                  goto LABEL_89;
                }
                size_t v154 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?)
                                             - 8)
                                 + 64);
                uint64_t v155 = v168;
                uint64_t v156 = v169;
LABEL_61:
                memcpy(v155, v156, v154);
LABEL_89:
                (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v144 + 56))(v27, 0, 1, v143);
                return v218;
              }
            }
            else
            {
              if (!v165)
              {
                v141(v27, v74, v217);
                uint64_t v181 = *(int *)(v143 + 20);
                int v182 = (char *)(v27 + v181);
                uint64_t v183 = &v74[v181];
                uint64_t v184 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
                uint64_t v185 = *(void *)(v184 - 8);
                uint64_t v186 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v185 + 48);
                int v187 = v186(v182, 1, v184);
                int v188 = v186(v183, 1, v184);
                if (v187)
                {
                  if (!v188)
                  {
                    *(void *)int v182 = *(void *)v183;
                    uint64_t v189 = *(int *)(v184 + 20);
                    uint64_t v190 = &v182[v189];
                    uint64_t v191 = &v183[v189];
                    uint64_t v192 = *(void (**)(char *, char *, uint64_t))(v215 + 16);
                    swift_bridgeObjectRetain();
                    v192(v190, v191, v217);
                    (*(void (**)(char *, void, uint64_t, uint64_t))(v185 + 56))(v182, 0, 1, v184);
                    return v218;
                  }
                }
                else
                {
                  if (!v188)
                  {
                    *(void *)int v182 = *(void *)v183;
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRelease();
                    v141((uint64_t)&v182[*(int *)(v184 + 20)], &v183[*(int *)(v184 + 20)], v217);
                    return v218;
                  }
                  _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v182, type metadata accessor for AspireHeSerializedCiphertextVec);
                }
                size_t v40 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?)
                                            - 8)
                                + 64);
                uint64_t v41 = v182;
                uint64_t v42 = v183;
                goto LABEL_15;
              }
              _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0(v27, type metadata accessor for AspireHeSerializedKeySwitchKey);
            }
            uint64_t v86 = &demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?;
            goto LABEL_36;
          }
          _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0(v27, type metadata accessor for AspireHeSerializedRelinKey);
        }
        uint64_t v39 = &demangling cache variable for type metadata for AspireHeSerializedRelinKey?;
        goto LABEL_14;
      }
      _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v109, type metadata accessor for AspireHeSerializedGaloisKey);
    }
    uint64_t v140 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
    memcpy(v109, v110, *(void *)(*(void *)(v140 - 8) + 64));
    goto LABEL_56;
  }
  _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0(v27, type metadata accessor for AspireApiEvaluationKey);
LABEL_13:
  uint64_t v39 = &demangling cache variable for type metadata for AspireApiEvaluationKey?;
LABEL_14:
  size_t v40 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(v39) - 8) + 64);
  uint64_t v41 = (void *)v27;
  uint64_t v42 = v28;
LABEL_15:
  memcpy(v41, v42, v40);
  return v218;
}

_OWORD *initializeWithTake for AspireApiPECRequest(_OWORD *a1, _OWORD *a2, int *a3)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[7];
  uint64_t v8 = (char *)a1 + v7;
  unint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  uint64_t v12 = a3[8];
  uint64_t v74 = a1;
  uint64_t v13 = (void *)((char *)a1 + v12);
  uint64_t v14 = (void *)((char *)a2 + v12);
  uint64_t v15 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v71 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
  uint64_t v73 = v11;
  if (v71((char *)v14, 1, v15))
  {
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    void *v13 = *v14;
    *(_OWORD *)(v13 + 1) = *(_OWORD *)(v14 + 1);
    v11((char *)v13 + *(int *)(v15 + 24), (char *)v14 + *(int *)(v15 + 24), v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  uint64_t v18 = a3[9];
  uint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = (char *)a2 + v18;
  uint64_t v21 = type metadata accessor for AspireApiEvaluationKey(0);
  uint64_t v22 = *(void *)(v21 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKey?);
    memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    uint64_t v69 = v22;
    v11(v19, v20, v10);
    uint64_t v24 = *(int *)(v21 + 20);
    uint64_t v70 = v19;
    uint64_t v25 = &v19[v24];
    uint64_t v26 = v10;
    uint64_t v27 = &v20[v24];
    if (v71(&v20[v24], 1, v15))
    {
      uint64_t v28 = v26;
      uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
      memcpy(v25, v27, *(void *)(*(void *)(v29 - 8) + 64));
    }
    else
    {
      *(void *)uint64_t v25 = *(void *)v27;
      *(_OWORD *)(v25 + 8) = *(_OWORD *)(v27 + 8);
      uint64_t v28 = v26;
      v11(&v25[*(int *)(v15 + 24)], &v27[*(int *)(v15 + 24)], v26);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v25, 0, 1, v15);
    }
    uint64_t v30 = v70;
    uint64_t v31 = *(int *)(v21 + 24);
    int v32 = &v70[v31];
    uint64_t v33 = &v20[v31];
    uint64_t v34 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
    uint64_t v35 = *(void *)(v34 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
    {
      uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
      memcpy(v32, v33, *(void *)(*(void *)(v36 - 8) + 64));
      uint64_t v37 = v69;
    }
    else
    {
      uint64_t v68 = v35;
      uint64_t v72 = v21;
      uint64_t v38 = v28;
      v73(v32, v33, v28);
      uint64_t v39 = *(int *)(v34 + 20);
      size_t v40 = &v32[v39];
      uint64_t v41 = &v33[v39];
      uint64_t v42 = type metadata accessor for AspireHeSerializedGaloisKey(0);
      uint64_t v43 = *(void *)(v42 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
      {
        uint64_t v44 = v38;
        uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
        memcpy(v40, v41, *(void *)(*(void *)(v45 - 8) + 64));
      }
      else
      {
        *(void *)size_t v40 = *(void *)v41;
        uint64_t v44 = v38;
        v73(&v40[*(int *)(v42 + 20)], &v41[*(int *)(v42 + 20)], v38);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
      }
      uint64_t v21 = v72;
      uint64_t v46 = *(int *)(v34 + 24);
      uint64_t v47 = &v32[v46];
      uint64_t v48 = &v33[v46];
      uint64_t v49 = type metadata accessor for AspireHeSerializedRelinKey(0);
      uint64_t v50 = *(void *)(v49 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48))(v48, 1, v49))
      {
        uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
        memcpy(v47, v48, *(void *)(*(void *)(v51 - 8) + 64));
        uint64_t v37 = v69;
        uint64_t v30 = v70;
      }
      else
      {
        uint64_t v52 = v44;
        v73(v47, v48, v44);
        uint64_t v53 = *(int *)(v49 + 20);
        uint64_t v54 = &v47[v53];
        uint64_t v55 = &v48[v53];
        uint64_t v56 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
        uint64_t v57 = *(void *)(v56 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48))(v55, 1, v56))
        {
          uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
          memcpy(v54, v55, *(void *)(*(void *)(v58 - 8) + 64));
          uint64_t v30 = v70;
          uint64_t v21 = v72;
        }
        else
        {
          v73(v54, v55, v52);
          uint64_t v67 = v56;
          uint64_t v59 = *(int *)(v56 + 20);
          uint64_t v65 = &v54[v59];
          uint64_t v60 = &v55[v59];
          uint64_t v61 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
          uint64_t v64 = *(void *)(v61 - 8);
          uint64_t v66 = v54;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48))(v60, 1, v61))
          {
            uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
            memcpy(v65, v60, *(void *)(*(void *)(v62 - 8) + 64));
          }
          else
          {
            *(void *)uint64_t v65 = *(void *)v60;
            v73(&v65[*(int *)(v61 + 20)], &v60[*(int *)(v61 + 20)], v52);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v64 + 56))(v65, 0, 1, v61);
          }
          uint64_t v30 = v70;
          uint64_t v21 = v72;
          (*(void (**)(char *, void, uint64_t, uint64_t))(v57 + 56))(v66, 0, 1, v67);
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v50 + 56))(v47, 0, 1, v49);
        uint64_t v37 = v69;
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v68 + 56))(v32, 0, 1, v34);
    }
    (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(v30, 0, 1, v21);
  }
  return v74;
}

void *assignWithTake for AspireApiPECRequest(void *a1, uint64_t a2, int *a3)
{
  *a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  a1[1] = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  uint64_t v6 = a1[2];
  unint64_t v7 = a1[3];
  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 16);
  outlined consume of Data._Representation(v6, v7);
  uint64_t v8 = a3[7];
  unint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  uint64_t v178 = *(void *)(v11 - 8);
  uint64_t v180 = v11;
  uint64_t v171 = *(void (**)(char *, uint64_t))(v178 + 40);
  v171(v9, v10);
  uint64_t v12 = a3[8];
  uint64_t v13 = (void *)((char *)a1 + v12);
  uint64_t v14 = (void *)(a2 + v12);
  uint64_t v15 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  __dst = *(void **)(v15 - 8);
  uint64_t v16 = (uint64_t (*)(char *, uint64_t, uint64_t))__dst[6];
  int v17 = v16((char *)v13, 1, v15);
  int v18 = v16((char *)v14, 1, v15);
  if (v17)
  {
    if (!v18)
    {
      void *v13 = *v14;
      *(_OWORD *)(v13 + 1) = *(_OWORD *)(v14 + 1);
      (*(void (**)(char *, char *, uint64_t))(v178 + 32))((char *)v13 + *(int *)(v15 + 24), (char *)v14 + *(int *)(v15 + 24), v180);
      ((void (*)(void *, void, uint64_t, uint64_t))__dst[7])(v13, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v18)
  {
    _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v13, type metadata accessor for AspireApiEvaluationKeyMetadata);
LABEL_6:
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
    memcpy(v13, v14, *(void *)(*(void *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v35 = v14[2];
  uint64_t v36 = v13[1];
  unint64_t v37 = v13[2];
  *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
  v13[2] = v35;
  outlined consume of Data._Representation(v36, v37);
  ((void (*)(char *, char *, uint64_t))v171)((char *)v13 + *(int *)(v15 + 24), (char *)v14 + *(int *)(v15 + 24), v180);
LABEL_7:
  uint64_t v20 = a3[9];
  uint64_t v181 = a1;
  uint64_t v21 = (char *)a1 + v20;
  uint64_t v22 = (char *)(a2 + v20);
  uint64_t v23 = type metadata accessor for AspireApiEvaluationKey(0);
  uint64_t v169 = *(void *)(v23 - 8);
  uint64_t v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v169 + 48);
  int v25 = v24(v21, 1, v23);
  int v26 = v24(v22, 1, v23);
  if (!v25)
  {
    if (v26)
    {
      _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v21, type metadata accessor for AspireApiEvaluationKey);
      goto LABEL_13;
    }
    ((void (*)(char *, char *, uint64_t))v171)(v21, v22, v180);
    uint64_t v38 = *(int *)(v23 + 20);
    uint64_t v39 = &v21[v38];
    size_t v40 = &v22[v38];
    int v41 = v16(&v21[v38], 1, v15);
    int v42 = v16(v40, 1, v15);
    if (v41)
    {
      if (!v42)
      {
        *(void *)uint64_t v39 = *(void *)v40;
        *(_OWORD *)(v39 + 8) = *(_OWORD *)(v40 + 8);
        (*(void (**)(char *, char *, uint64_t))(v178 + 32))(&v39[*(int *)(v15 + 24)], &v40[*(int *)(v15 + 24)], v180);
        ((void (*)(char *, void, uint64_t, uint64_t))__dst[7])(v39, 0, 1, v15);
        goto LABEL_26;
      }
    }
    else
    {
      if (!v42)
      {
        uint64_t v88 = *((void *)v40 + 2);
        uint64_t v89 = *((void *)v39 + 1);
        unint64_t v90 = *((void *)v39 + 2);
        *(_OWORD *)uint64_t v39 = *(_OWORD *)v40;
        *((void *)v39 + 2) = v88;
        outlined consume of Data._Representation(v89, v90);
        ((void (*)(char *, char *, uint64_t))v171)(&v39[*(int *)(v15 + 24)], &v40[*(int *)(v15 + 24)], v180);
LABEL_26:
        uint64_t v34 = v181;
        uint64_t v58 = *(int *)(v23 + 24);
        uint64_t v59 = &v21[v58];
        uint64_t v60 = &v22[v58];
        uint64_t v61 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
        uint64_t v62 = *(void **)(v61 - 8);
        uint64_t v63 = (uint64_t (*)(char *, uint64_t, uint64_t))v62[6];
        int v64 = v63(v59, 1, v61);
        int v65 = v63(v60, 1, v61);
        if (v64)
        {
          if (!v65)
          {
            __dstb = (void (**)(void *, void, uint64_t, uint64_t))v62;
            uint64_t v66 = *(void (**)(char *, char *, uint64_t))(v178 + 32);
            v66(v59, v60, v180);
            uint64_t v67 = *(int *)(v61 + 20);
            uint64_t v68 = &v59[v67];
            uint64_t v69 = &v60[v67];
            uint64_t v70 = type metadata accessor for AspireHeSerializedGaloisKey(0);
            uint64_t v71 = *(void *)(v70 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v71 + 48))(v69, 1, v70))
            {
              uint64_t v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
              memcpy(v68, v69, *(void *)(*(void *)(v72 - 8) + 64));
            }
            else
            {
              *(void *)uint64_t v68 = *(void *)v69;
              v66(&v68[*(int *)(v70 + 20)], &v69[*(int *)(v70 + 20)], v180);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v71 + 56))(v68, 0, 1, v70);
            }
            uint64_t v99 = v66;
            uint64_t v100 = *(int *)(v61 + 24);
            uint64_t v101 = &v59[v100];
            uint64_t v102 = &v60[v100];
            uint64_t v103 = type metadata accessor for AspireHeSerializedRelinKey(0);
            uint64_t v104 = *(void *)(v103 - 8);
            uint64_t v34 = v181;
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v104 + 48))(v102, 1, v103))
            {
              uint64_t v105 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
              memcpy(v101, v102, *(void *)(*(void *)(v105 - 8) + 64));
            }
            else
            {
              v66(v101, v102, v180);
              uint64_t v110 = *(int *)(v103 + 20);
              uint64_t v111 = &v101[v110];
              uint64_t v112 = &v102[v110];
              uint64_t v113 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
              uint64_t v114 = *(void *)(v113 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v114 + 48))(v112, 1, v113))
              {
                uint64_t v115 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
                memcpy(v111, v112, *(void *)(*(void *)(v115 - 8) + 64));
              }
              else
              {
                v99(v111, v112, v180);
                uint64_t v136 = *(int *)(v113 + 20);
                uint64_t v170 = &v111[v136];
                uint64_t v173 = v111;
                uint64_t v137 = &v112[v136];
                uint64_t v138 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
                uint64_t v167 = *(void *)(v138 - 8);
                if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v167 + 48))(v137, 1, v138))
                {
                  uint64_t v139 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                  memcpy(v170, v137, *(void *)(*(void *)(v139 - 8) + 64));
                }
                else
                {
                  *(void *)uint64_t v170 = *(void *)v137;
                  v99(&v170[*(int *)(v138 + 20)], &v137[*(int *)(v138 + 20)], v180);
                  (*(void (**)(char *, void, uint64_t, uint64_t))(v167 + 56))(v170, 0, 1, v138);
                }
                (*(void (**)(char *, void, uint64_t, uint64_t))(v114 + 56))(v173, 0, 1, v113);
              }
              uint64_t v34 = v181;
              (*(void (**)(char *, void, uint64_t, uint64_t))(v104 + 56))(v101, 0, 1, v103);
            }
            __dstb[7](v59, 0, 1, v61);
            return v34;
          }
          goto LABEL_32;
        }
        if (v65)
        {
          _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v59, type metadata accessor for AspireHeSerializedEvaluationKey);
LABEL_32:
          uint64_t v73 = &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?;
LABEL_33:
          uint64_t v74 = __swift_instantiateConcreteTypeFromMangledName(v73);
          memcpy(v59, v60, *(void *)(*(void *)(v74 - 8) + 64));
          return v34;
        }
        ((void (*)(char *, char *, uint64_t))v171)(v59, v60, v180);
        uint64_t v91 = *(int *)(v61 + 20);
        uint64_t v92 = &v59[v91];
        uint64_t v93 = &v60[v91];
        uint64_t v94 = type metadata accessor for AspireHeSerializedGaloisKey(0);
        uint64_t v95 = *(void *)(v94 - 8);
        uint64_t v96 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v95 + 48);
        int v97 = v96(v92, 1, v94);
        int v98 = v96(v93, 1, v94);
        if (v97)
        {
          if (!v98)
          {
            *(void *)uint64_t v92 = *(void *)v93;
            (*(void (**)(char *, char *, uint64_t))(v178 + 32))(&v92[*(int *)(v94 + 20)], &v93[*(int *)(v94 + 20)], v180);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v95 + 56))(v92, 0, 1, v94);
LABEL_53:
            uint64_t v34 = v181;
            int v117 = (void (*)(char *, char *, uint64_t))v171;
            goto LABEL_54;
          }
        }
        else
        {
          if (!v98)
          {
            *(void *)uint64_t v92 = *(void *)v93;
            swift_bridgeObjectRelease();
            int v117 = (void (*)(char *, char *, uint64_t))v171;
            ((void (*)(char *, char *, uint64_t))v171)(&v92[*(int *)(v94 + 20)], &v93[*(int *)(v94 + 20)], v180);
            uint64_t v34 = v181;
LABEL_54:
            uint64_t v118 = *(int *)(v61 + 24);
            v59 += v118;
            uint64_t v119 = &v60[v118];
            uint64_t v120 = type metadata accessor for AspireHeSerializedRelinKey(0);
            uint64_t v121 = *(void *)(v120 - 8);
            uint64_t v122 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v121 + 48);
            int v123 = v122(v59, 1, v120);
            int v124 = v122(v119, 1, v120);
            if (v123)
            {
              if (!v124)
              {
                uint64_t v125 = *(void (**)(char *, char *, uint64_t))(v178 + 32);
                v125(v59, v119, v180);
                uint64_t v126 = *(int *)(v120 + 20);
                uint64_t v127 = &v59[v126];
                uint64_t v128 = &v119[v126];
                uint64_t v129 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
                uint64_t v130 = *(void *)(v129 - 8);
                if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v130 + 48))(v128, 1, v129))
                {
                  v125(v127, v128, v180);
                  uint64_t v149 = *(int *)(v129 + 20);
                  __dstc = &v127[v149];
                  uint64_t v179 = v127;
                  uint64_t v150 = &v128[v149];
                  uint64_t v151 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
                  uint64_t v152 = *(void *)(v151 - 8);
                  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v152 + 48))(v150, 1, v151))
                  {
                    uint64_t v153 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                    memcpy(__dstc, v150, *(void *)(*(void *)(v153 - 8) + 64));
                  }
                  else
                  {
                    *(void *)__dstc = *(void *)v150;
                    v125(&__dstc[*(int *)(v151 + 20)], &v150[*(int *)(v151 + 20)], v180);
                    (*(void (**)(char *, void, uint64_t, uint64_t))(v152 + 56))(__dstc, 0, 1, v151);
                  }
                  uint64_t v34 = v181;
                  (*(void (**)(char *, void, uint64_t, uint64_t))(v130 + 56))(v179, 0, 1, v129);
                  goto LABEL_86;
                }
                size_t v131 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?)
                                             - 8)
                                 + 64);
                uint64_t v132 = v127;
                uint64_t v133 = v128;
                goto LABEL_58;
              }
            }
            else
            {
              if (!v124)
              {
                v117(v59, v119, v180);
                uint64_t v140 = *(int *)(v120 + 20);
                v59 += v140;
                uint64_t v60 = &v119[v140];
                uint64_t v120 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
                uint64_t v121 = *(void *)(v120 - 8);
                uint64_t v141 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v121 + 48);
                int v142 = v141(v59, 1, v120);
                int v143 = v141(v60, 1, v120);
                if (v142)
                {
                  if (!v143)
                  {
                    int v182 = *(void (**)(char *, char *, uint64_t))(v178 + 32);
                    v182(v59, v60, v180);
                    uint64_t v144 = *(int *)(v120 + 20);
                    uint64_t v145 = &v59[v144];
                    int v146 = &v60[v144];
                    uint64_t v147 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
                    uint64_t v148 = *(void *)(v147 - 8);
                    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v148 + 48))(v146, 1, v147))
                    {
                      *(void *)uint64_t v145 = *(void *)v146;
                      v182(&v145[*(int *)(v147 + 20)], &v146[*(int *)(v147 + 20)], v180);
                      (*(void (**)(char *, void, uint64_t, uint64_t))(v148 + 56))(v145, 0, 1, v147);
                      goto LABEL_86;
                    }
                    size_t v131 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?)
                                                 - 8)
                                     + 64);
                    uint64_t v132 = v145;
                    uint64_t v133 = v146;
LABEL_58:
                    memcpy(v132, v133, v131);
LABEL_86:
                    (*(void (**)(char *, void, uint64_t, uint64_t))(v121 + 56))(v59, 0, 1, v120);
                    return v34;
                  }
                }
                else
                {
                  if (!v143)
                  {
                    v117(v59, v60, v180);
                    uint64_t v154 = *(int *)(v120 + 20);
                    uint64_t v155 = &v59[v154];
                    uint64_t v156 = &v60[v154];
                    uint64_t v157 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
                    uint64_t v158 = *(void *)(v157 - 8);
                    uint64_t v159 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v158 + 48);
                    int v160 = v159(v155, 1, v157);
                    int v161 = v159(v156, 1, v157);
                    if (v160)
                    {
                      if (!v161)
                      {
                        *(void *)uint64_t v155 = *(void *)v156;
                        (*(void (**)(char *, char *, uint64_t))(v178 + 32))(&v155[*(int *)(v157 + 20)], &v156[*(int *)(v157 + 20)], v180);
                        (*(void (**)(char *, void, uint64_t, uint64_t))(v158 + 56))(v155, 0, 1, v157);
                        return v34;
                      }
                    }
                    else
                    {
                      if (!v161)
                      {
                        *(void *)uint64_t v155 = *(void *)v156;
                        swift_bridgeObjectRelease();
                        v117(&v155[*(int *)(v157 + 20)], &v156[*(int *)(v157 + 20)], v180);
                        return v34;
                      }
                      _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v155, type metadata accessor for AspireHeSerializedCiphertextVec);
                    }
                    uint64_t v162 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                    memcpy(v155, v156, *(void *)(*(void *)(v162 - 8) + 64));
                    return v34;
                  }
                  _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v59, type metadata accessor for AspireHeSerializedKeySwitchKey);
                }
                uint64_t v73 = &demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?;
                goto LABEL_33;
              }
              _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v59, type metadata accessor for AspireHeSerializedRelinKey);
            }
            uint64_t v134 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
            memcpy(v59, v119, *(void *)(*(void *)(v134 - 8) + 64));
            return v34;
          }
          _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v92, type metadata accessor for AspireHeSerializedGaloisKey);
        }
        uint64_t v116 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
        memcpy(v92, v93, *(void *)(*(void *)(v116 - 8) + 64));
        goto LABEL_53;
      }
      _s8CipherML16AspireApiRequestV06OneOf_E0OWOhTm_0((uint64_t)v39, type metadata accessor for AspireApiEvaluationKeyMetadata);
    }
    uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
    memcpy(v39, v40, *(void *)(*(void *)(v57 - 8) + 64));
    goto LABEL_26;
  }
  if (v26)
  {
LABEL_13:
    uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKey?);
    memcpy(v21, v22, *(void *)(*(void *)(v33 - 8) + 64));
    return a1;
  }
  uint64_t v27 = v21;
  uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v178 + 32);
  v28(v27, v22, v180);
  uint64_t v29 = *(int *)(v23 + 20);
  uint64_t v172 = v27;
  uint64_t v30 = &v27[v29];
  uint64_t v31 = &v22[v29];
  if (v16(&v22[v29], 1, v15))
  {
    uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
    memcpy(v30, v31, *(void *)(*(void *)(v32 - 8) + 64));
  }
  else
  {
    *(void *)uint64_t v30 = *(void *)v31;
    *(_OWORD *)(v30 + 8) = *(_OWORD *)(v31 + 8);
    v28(&v30[*(int *)(v15 + 24)], &v31[*(int *)(v15 + 24)], v180);
    ((void (*)(char *, void, uint64_t, uint64_t))__dst[7])(v30, 0, 1, v15);
  }
  uint64_t v43 = *(int *)(v23 + 24);
  uint64_t v44 = &v172[v43];
  uint64_t v45 = &v22[v43];
  uint64_t v46 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  uint64_t v47 = *(void *)(v46 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46))
  {
    uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
    memcpy(v44, v45, *(void *)(*(void *)(v48 - 8) + 64));
    uint64_t v34 = v181;
    uint64_t v50 = v169;
    uint64_t v49 = v172;
  }
  else
  {
    uint64_t v168 = v47;
    v28(v44, v45, v180);
    uint64_t v51 = *(int *)(v46 + 20);
    __dsta = v44;
    uint64_t v52 = &v44[v51];
    uint64_t v53 = &v45[v51];
    uint64_t v54 = type metadata accessor for AspireHeSerializedGaloisKey(0);
    uint64_t v55 = *(void *)(v54 - 8);
    uint64_t v166 = v28;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v53, 1, v54))
    {
      uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
      memcpy(v52, v53, *(void *)(*(void *)(v56 - 8) + 64));
    }
    else
    {
      *(void *)uint64_t v52 = *(void *)v53;
      v28(&v52[*(int *)(v54 + 20)], &v53[*(int *)(v54 + 20)], v180);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v55 + 56))(v52, 0, 1, v54);
    }
    uint64_t v75 = *(int *)(v46 + 24);
    uint64_t v76 = __dsta;
    int v77 = &__dsta[v75];
    int v78 = &v45[v75];
    uint64_t v79 = type metadata accessor for AspireHeSerializedRelinKey(0);
    uint64_t v80 = *(void *)(v79 - 8);
    uint64_t v34 = v181;
    uint64_t v49 = v172;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v80 + 48))(v78, 1, v79))
    {
      uint64_t v81 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
      memcpy(v77, v78, *(void *)(*(void *)(v81 - 8) + 64));
      uint64_t v50 = v169;
    }
    else
    {
      v166(v77, v78, v180);
      uint64_t v82 = *(int *)(v79 + 20);
      uint64_t v83 = &v77[v82];
      uint64_t v84 = &v78[v82];
      uint64_t v85 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
      uint64_t v86 = *(void *)(v85 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v86 + 48))(v84, 1, v85))
      {
        uint64_t v87 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
        memcpy(v83, v84, *(void *)(*(void *)(v87 - 8) + 64));
        uint64_t v34 = v181;
        uint64_t v50 = v169;
        uint64_t v76 = __dsta;
      }
      else
      {
        v166(v83, v84, v180);
        uint64_t v106 = *(int *)(v85 + 20);
        int v165 = v83;
        int v164 = &v83[v106];
        unint64_t v107 = &v84[v106];
        uint64_t v108 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
        uint64_t v163 = *(void *)(v108 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v163 + 48))(v107, 1, v108))
        {
          uint64_t v109 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
          memcpy(v164, v107, *(void *)(*(void *)(v109 - 8) + 64));
        }
        else
        {
          *(void *)int v164 = *(void *)v107;
          v166(&v164[*(int *)(v108 + 20)], &v107[*(int *)(v108 + 20)], v180);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v163 + 56))(v164, 0, 1, v108);
        }
        uint64_t v34 = v181;
        uint64_t v76 = __dsta;
        (*(void (**)(char *, void, uint64_t, uint64_t))(v86 + 56))(v165, 0, 1, v85);
        uint64_t v50 = v169;
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v80 + 56))(v77, 0, 1, v79);
    }
    (*(void (**)(char *, void, uint64_t, uint64_t))(v168 + 56))(v76, 0, 1, v46);
  }
  (*(void (**)(char *, void, uint64_t, uint64_t))(v50 + 56))(v49, 0, 1, v23);
  return v34;
}

uint64_t getEnumTagSinglePayload for AspireApiPECRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_249DDAEC8);
}

uint64_t sub_249DDAEC8(char *a1, uint64_t a2, int *a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  uint64_t v8 = type metadata accessor for UnknownStorage();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a2)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a3[7];
LABEL_9:
    uint64_t v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
    return v13(&a1[v11], a2, v9);
  }
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a2)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a3[8];
    goto LABEL_9;
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKey?);
  uint64_t v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
  uint64_t v16 = v14;
  int v17 = &a1[a3[9]];
  return v15(v17, a2, v16);
}

uint64_t storeEnumTagSinglePayload for AspireApiPECRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_249DDB05C);
}

char *sub_249DDB05C(char *result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)uint64_t result = (a2 - 1);
    return result;
  }
  uint64_t v8 = type metadata accessor for UnknownStorage();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[7];
LABEL_7:
    uint64_t v13 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return (char *)v13(&v5[v11], a2, a2, v9);
  }
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a3)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a4[8];
    goto LABEL_7;
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKey?);
  uint64_t v15 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
  uint64_t v16 = v14;
  int v17 = &v5[a4[9]];
  return (char *)v15(v17, a2, a2, v16);
}

void type metadata completion function for AspireApiPECRequest()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for AspireHeEvaluationKeyConfig?(319, &lazy cache variable for type metadata for AspireApiEvaluationKeyMetadata?, (void (*)(uint64_t))type metadata accessor for AspireApiEvaluationKeyMetadata);
    if (v1 <= 0x3F)
    {
      type metadata accessor for AspireHeEvaluationKeyConfig?(319, &lazy cache variable for type metadata for AspireApiEvaluationKey?, (void (*)(uint64_t))type metadata accessor for AspireApiEvaluationKey);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for AspireApiPECShardResponse(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a1;
    uint64_t v6 = a2[2];
    a1[1] = a2[1];
    a1[2] = v6;
    uint64_t v7 = *(int *)(a3 + 28);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for UnknownStorage();
    uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11(v8, v9, v10);
  }
  return v5;
}

uint64_t destroy for AspireApiPECShardResponse(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

void *initializeWithCopy for AspireApiPECShardResponse(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  uint64_t v5 = *(int *)(a3 + 28);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

void *assignWithCopy for AspireApiPECShardResponse(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

void *assignWithTake for AspireApiPECShardResponse(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for AspireApiPECShardResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_249DDB6FC);
}

uint64_t sub_249DDB6FC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 28);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for AspireApiPECShardResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_249DDB7C0);
}

void *sub_249DDB7C0(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 28);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for AspireApiPECShardResponse()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AspireApiPECResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_56Tm_7);
}

uint64_t storeEnumTagSinglePayload for AspireApiPECResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_57Tm_7);
}

uint64_t getEnumTagSinglePayload for AspireApiOPRFRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_137Tm);
}

uint64_t storeEnumTagSinglePayload for AspireApiOPRFRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_138Tm);
}

uint64_t type metadata completion function for AspireApiOPRFRequest()
{
  return type metadata completion function for AMDPbHEConfigsReply();
}

uint64_t *initializeBufferWithCopyOfBuffer for AspireApiOPRFRequest(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    outlined copy of Data._Representation(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = a2[2];
    unint64_t v10 = a2[3];
    outlined copy of Data._Representation(v9, v10);
    a1[2] = v9;
    a1[3] = v10;
    uint64_t v11 = *(int *)(a3 + 24);
    uint64_t v12 = (char *)a1 + v11;
    uint64_t v13 = (char *)a2 + v11;
    uint64_t v14 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
  }
  return a1;
}

uint64_t destroy for AspireApiOPRFRequest(uint64_t a1, uint64_t a2)
{
  outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
  outlined consume of Data._Representation(*(void *)(a1 + 16), *(void *)(a1 + 24));
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

uint64_t *initializeWithCopy for AspireApiOPRFRequest(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  outlined copy of Data._Representation(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  outlined copy of Data._Representation(v8, v9);
  a1[2] = v8;
  a1[3] = v9;
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
  return a1;
}

uint64_t *assignWithCopy for AspireApiOPRFRequest(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  outlined copy of Data._Representation(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  outlined consume of Data._Representation(v8, v9);
  uint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  outlined copy of Data._Representation(v10, v11);
  uint64_t v12 = a1[2];
  unint64_t v13 = a1[3];
  a1[2] = v10;
  a1[3] = v11;
  outlined consume of Data._Representation(v12, v13);
  uint64_t v14 = *(int *)(a3 + 24);
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 24))(v15, v16, v17);
  return a1;
}

_OWORD *initializeWithTake for AspireApiOPRFRequest(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = (char *)a1 + v5;
  unint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t *assignWithTake for AspireApiOPRFRequest(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  outlined consume of Data._Representation(v6, v7);
  uint64_t v8 = a1[2];
  unint64_t v9 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  outlined consume of Data._Representation(v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  unint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 40))(v11, v12, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for AspireApiOPRFResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_249DDBDA8);
}

uint64_t __swift_get_extra_inhabitant_index_137Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 8) >> 60;
    if (((4 * v4) & 0xC) != 0) {
      return 16 - ((4 * v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for AspireApiOPRFResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_249DDBE7C);
}

void *__swift_store_extra_inhabitant_index_138Tm(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *uint64_t result = 0;
    result[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 24);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t ObjC metadata update function for AspireApiPIRConfig._StorageClass()
{
  return type metadata accessor for AspireApiPIRConfig._StorageClass(0);
}

void type metadata completion function for AspireApiPIRConfig._StorageClass()
{
  type metadata accessor for AspireHeEvaluationKeyConfig?(319, &lazy cache variable for type metadata for AspireHeEncryptionParameters?, (void (*)(uint64_t))type metadata accessor for AspireHeEncryptionParameters);
  if (v0 <= 0x3F)
  {
    type metadata accessor for AspireHeEvaluationKeyConfig?(319, &lazy cache variable for type metadata for AspirePirKeywordPirParameters?, (void (*)(uint64_t))type metadata accessor for AspirePirKeywordPirParameters);
    if (v1 <= 0x3F)
    {
      type metadata accessor for AspireHeEvaluationKeyConfig?(319, &lazy cache variable for type metadata for AspirePirBatchPirParameters?, (void (*)(uint64_t))type metadata accessor for AspirePirBatchPirParameters);
      if (v2 <= 0x3F)
      {
        type metadata accessor for AspireHeEvaluationKeyConfig?(319, &lazy cache variable for type metadata for AspireApiPIRShardConfigs?, (void (*)(uint64_t))type metadata accessor for AspireApiPIRShardConfigs);
        if (v3 <= 0x3F) {
          swift_updateClassMetadata2();
        }
      }
    }
  }
}

uint64_t AspirePirKeywordPirParameters.init()@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 0;
  uint64_t v2 = type metadata accessor for AspirePirKeywordPirParameters(0);
  UnknownStorage.init()();
  uint64_t v3 = a1 + *(int *)(v2 + 28);
  uint64_t v4 = type metadata accessor for AspirePirSymmetricPirClientConfig(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  uint64_t v5 = a1 + *(int *)(v2 + 32);
  uint64_t v6 = type metadata accessor for AspirePirPIRShardingFunction(0);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
  return v7(v5, 1, 1, v6);
}

uint64_t type metadata accessor for AspirePirKeywordPirParameters(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspirePirKeywordPirParameters);
}

uint64_t type metadata accessor for AspirePirSymmetricPirClientConfig(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspirePirSymmetricPirClientConfig);
}

uint64_t type metadata accessor for AspirePirPIRShardingFunction(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspirePirPIRShardingFunction);
}

uint64_t AspirePirEncryptedIndices.init()@<X0>(void *a1@<X8>)
{
  *a1 = MEMORY[0x263F8EE78];
  a1[1] = 0;
  type metadata accessor for AspirePirEncryptedIndices(0);
  return UnknownStorage.init()();
}

uint64_t type metadata accessor for AspirePirEncryptedIndices(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspirePirEncryptedIndices);
}

uint64_t AspirePirKeywordPirParameters.shardingFunction.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPIRShardingFunction?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for AspirePirKeywordPirParameters(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + *(int *)(v6 + 32), (uint64_t)v5, &demangling cache variable for type metadata for AspirePirPIRShardingFunction?);
  uint64_t v7 = type metadata accessor for AspirePirPIRShardingFunction(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of AspirePirPIRShardingFunction((uint64_t)v5, a1, type metadata accessor for AspirePirPIRShardingFunction);
  }
  uint64_t v8 = type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(a1, 1, 1, v8);
  UnknownStorage.init()();
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspirePirPIRShardingFunction?);
}

BOOL AspirePirKeywordPirParameters.hasShardingFunction.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPIRShardingFunction?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for AspirePirKeywordPirParameters(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v0 + *(int *)(v4 + 32), (uint64_t)v3, &demangling cache variable for type metadata for AspirePirPIRShardingFunction?);
  uint64_t v5 = type metadata accessor for AspirePirPIRShardingFunction(0);
  BOOL v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v3, &demangling cache variable for type metadata for AspirePirPIRShardingFunction?);
  return v6;
}

BOOL AspirePirKeywordPirParameters.hasSymmetricPirClientConfig.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirSymmetricPirClientConfig?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for AspirePirKeywordPirParameters(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v0 + *(int *)(v4 + 28), (uint64_t)v3, &demangling cache variable for type metadata for AspirePirSymmetricPirClientConfig?);
  uint64_t v5 = type metadata accessor for AspirePirSymmetricPirClientConfig(0);
  BOOL v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v3, &demangling cache variable for type metadata for AspirePirSymmetricPirClientConfig?);
  return v6;
}

uint64_t AspirePirKeywordPirParameters.symmetricPirClientConfig.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirSymmetricPirClientConfig?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for AspirePirKeywordPirParameters(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + *(int *)(v6 + 28), (uint64_t)v5, &demangling cache variable for type metadata for AspirePirSymmetricPirClientConfig?);
  uint64_t v7 = type metadata accessor for AspirePirSymmetricPirClientConfig(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of AspirePirPIRShardingFunction((uint64_t)v5, a1, type metadata accessor for AspirePirSymmetricPirClientConfig);
  }
  *(_OWORD *)a1 = xmmword_249E85DF0;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 1;
  UnknownStorage.init()();
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspirePirSymmetricPirClientConfig?);
}

uint64_t AspirePirPirParameters.encryptionParameters.setter(uint64_t a1)
{
  return AspirePirPirParameters.encryptionParameters.setter(a1, &demangling cache variable for type metadata for AspireHeEncryptionParameters?, type metadata accessor for AspireHeEncryptionParameters, type metadata accessor for AspireHeEncryptionParameters, &OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__encryptionParameters);
}

uint64_t AspirePirPirParameters.numEntries.setter(uint64_t a1)
{
  return AspirePirPirParameters.numEntries.setter(a1, &OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__numEntries);
}

uint64_t AspirePirPirParameters.entrySize.setter(uint64_t a1)
{
  return AspirePirPirParameters.numEntries.setter(a1, &OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__entrySize);
}

uint64_t AspirePirPirParameters.numEntries.setter(uint64_t a1, void *a2)
{
  uint64_t v5 = *(int *)(type metadata accessor for AspirePirPirParameters(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirParameters._StorageClass(0);
    swift_allocObject();
    uint64_t v6 = swift_retain();
    *(void *)(v2 + v5) = AspirePirPirParameters._StorageClass.init(copying:)(v6);
    swift_release();
  }
  uint64_t v7 = (void *)(*(void *)(v2 + v5) + *a2);
  uint64_t result = swift_beginAccess();
  *uint64_t v7 = a1;
  return result;
}

uint64_t AspirePirPirParameters.dimensions.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for AspirePirPirParameters(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirParameters._StorageClass(0);
    swift_allocObject();
    uint64_t v4 = swift_retain();
    *(void *)(v1 + v3) = AspirePirPirParameters._StorageClass.init(copying:)(v4);
    swift_release();
  }
  uint64_t v5 = (void *)(*(void *)(v1 + v3)
                + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__dimensions);
  swift_beginAccess();
  *uint64_t v5 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t AspirePirPirParameters.algorithm.setter(uint64_t *a1)
{
  return AspirePirPirParameters.algorithm.setter(a1, &OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__algorithm);
}

uint64_t AspirePirBatchPirParameters.init()@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = MEMORY[0x263F8EE78];
  a1[3] = 0;
  type metadata accessor for AspirePirBatchPirParameters(0);
  return UnknownStorage.init()();
}

unint64_t AspirePirPirAlgorithm.init(rawValue:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = result < 3;
  *(unsigned char *)(a2 + 9) = 0;
  return result;
}

uint64_t AspirePirPirAlgorithm.rawValue.getter()
{
  return *(void *)v0;
}

uint64_t static AspirePirPirAlgorithm.allCases.getter()
{
  return static AMDPbHE_APICode.allCases.getter(&one-time initialization token for allCases);
}

unint64_t protocol witness for Enum.init(rawValue:) in conformance AspirePirPirAlgorithm@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = result < 3;
  *(unsigned char *)(a2 + 9) = 0;
  return result;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance AspirePirPirAlgorithm@<X0>(void *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance AMDPbHE_APICode(&one-time initialization token for allCases, &static AspirePirPirAlgorithm.allCases, a1);
}

void *protocol witness for RawRepresentable.init(rawValue:) in conformance AspirePirPirAlgorithm@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  BOOL v2 = *result >= 3uLL;
  *(void *)a2 = *result;
  char v3 = !v2;
  *(unsigned char *)(a2 + 8) = v3;
  *(unsigned char *)(a2 + 9) = 0;
  return result;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspirePirPirAlgorithm(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type AspirePirPirAlgorithm and conformance AspirePirPirAlgorithm();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

uint64_t static AspirePirKeyCompressionStrategy.allCases.getter()
{
  return static AMDPbHE_APICode.allCases.getter(&one-time initialization token for allCases);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance AspirePirKeyCompressionStrategy@<X0>(void *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance AMDPbHE_APICode(&one-time initialization token for allCases, &static AspirePirKeyCompressionStrategy.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspirePirKeyCompressionStrategy(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type AspirePirKeyCompressionStrategy and conformance AspirePirKeyCompressionStrategy();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

void AspirePirSymmetricPirConfigType.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
}

unint64_t AspirePirSymmetricPirConfigType.init(rawValue:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = result < 2;
  *(unsigned char *)(a2 + 9) = 0;
  return result;
}

uint64_t AspirePirSymmetricPirConfigType.rawValue.getter()
{
  if (v0[8]) {
    return *(void *)v0 != 0;
  }
  else {
    return *(void *)v0;
  }
}

uint64_t static AspirePirSymmetricPirConfigType.allCases.getter()
{
  return static AMDPbHE_APICode.allCases.getter(&one-time initialization token for allCases);
}

unint64_t protocol witness for Enum.init(rawValue:) in conformance AspirePirSymmetricPirConfigType@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = result < 2;
  *(unsigned char *)(a2 + 9) = 0;
  return result;
}

uint64_t protocol witness for Enum.rawValue.getter in conformance AspirePirSymmetricPirConfigType()
{
  if (v0[8]) {
    return *(void *)v0 != 0;
  }
  else {
    return *(void *)v0;
  }
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance AspirePirSymmetricPirConfigType@<X0>(void *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance AMDPbHE_APICode(&one-time initialization token for allCases, &static AspirePirSymmetricPirConfigType.allCases, a1);
}

void *protocol witness for RawRepresentable.init(rawValue:) in conformance AspirePirSymmetricPirConfigType@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  BOOL v2 = *result >= 2uLL;
  *(void *)a2 = *result;
  char v3 = !v2;
  *(unsigned char *)(a2 + 8) = v3;
  *(unsigned char *)(a2 + 9) = 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance AspirePirSymmetricPirConfigType(void *a1@<X8>)
{
  uint64_t v2 = *v1;
  if (*((unsigned char *)v1 + 8)) {
    uint64_t v2 = *v1 != 0;
  }
  *a1 = v2;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspirePirSymmetricPirConfigType(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type AspirePirSymmetricPirConfigType and conformance AspirePirSymmetricPirConfigType();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AspirePirSymmetricPirConfigType(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  if (*((unsigned char *)a1 + 8)) {
    uint64_t v2 = *a1 != 0;
  }
  uint64_t v3 = *a2 != 0;
  if (!*((unsigned char *)a2 + 8)) {
    uint64_t v3 = *a2;
  }
  return v2 == v3;
}

uint64_t AspirePirPirParameters.encryptionParameters.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for AspirePirPirParameters(0) + 20))
     + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__encryptionParameters;
  swift_beginAccess();
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v6, (uint64_t)v5, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  uint64_t v7 = type metadata accessor for AspireHeEncryptionParameters(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of AspirePirPIRShardingFunction((uint64_t)v5, a1, type metadata accessor for AspireHeEncryptionParameters);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 1;
  *(void *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 48) = 1;
  *(void *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 64) = 1;
  UnknownStorage.init()();
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
}

void (*AspirePirPirParameters.encryptionParameters.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for AspireHeEncryptionParameters(0);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for AspirePirPirParameters(0) + 20))
      + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__encryptionParameters;
  swift_beginAccess();
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v10, (uint64_t)v5, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *uint64_t v9 = 0;
    v9[1] = 0;
    v9[2] = MEMORY[0x263F8EE78];
    v9[3] = 0;
    *((unsigned char *)v9 + 32) = 1;
    v9[5] = 0;
    *((unsigned char *)v9 + 48) = 1;
    v9[7] = 0;
    *((unsigned char *)v9 + 64) = 1;
    UnknownStorage.init()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  }
  else
  {
    outlined init with take of AspirePirPIRShardingFunction((uint64_t)v5, (uint64_t)v9, type metadata accessor for AspireHeEncryptionParameters);
  }
  return AspirePirPirParameters.encryptionParameters.modify;
}

void AspirePirPirParameters.encryptionParameters.modify(uint64_t a1, char a2)
{
}

BOOL AspirePirPirParameters.hasEncryptionParameters.getter()
{
  return AspirePirPirParameters.hasEncryptionParameters.getter(&demangling cache variable for type metadata for AspireHeEncryptionParameters?, (uint64_t (*)(void, double))type metadata accessor for AspirePirPirParameters, &OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__encryptionParameters, type metadata accessor for AspireHeEncryptionParameters);
}

Swift::Void __swiftcall AspirePirPirParameters.clearEncryptionParameters()()
{
}

uint64_t AspirePirPirParameters.numEntries.getter()
{
  return AspirePirPirParameters.numEntries.getter(&OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__numEntries);
}

void (*AspirePirPirParameters.numEntries.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for AspirePirPirParameters(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = (void *)(*(void *)(v1 + v4)
                + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__numEntries);
  swift_beginAccess();
  v3[9] = *v5;
  return AspirePirPirParameters.numEntries.modify;
}

void AspirePirPirParameters.numEntries.modify(uint64_t *a1, char a2)
{
}

uint64_t AspirePirPirParameters.entrySize.getter()
{
  return AspirePirPirParameters.numEntries.getter(&OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__entrySize);
}

uint64_t AspirePirPirParameters.numEntries.getter(void *a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(type metadata accessor for AspirePirPirParameters(0) + 20)) + *a1;
  swift_beginAccess();
  return *(void *)v2;
}

uint64_t key path setter for AspirePirPirParameters.numEntries : AspirePirPirParameters(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v7 = *a1;
  uint64_t v8 = *(int *)(type metadata accessor for AspirePirPirParameters(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirParameters._StorageClass(0);
    swift_allocObject();
    uint64_t v9 = swift_retain();
    *(void *)(a2 + v8) = AspirePirPirParameters._StorageClass.init(copying:)(v9);
    swift_release();
  }
  uint64_t v10 = (void *)(*(void *)(a2 + v8) + *a5);
  uint64_t result = swift_beginAccess();
  *uint64_t v10 = v7;
  return result;
}

void (*AspirePirPirParameters.entrySize.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for AspirePirPirParameters(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = (void *)(*(void *)(v1 + v4)
                + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__entrySize);
  swift_beginAccess();
  v3[9] = *v5;
  return AspirePirPirParameters.entrySize.modify;
}

void AspirePirPirParameters.entrySize.modify(uint64_t *a1, char a2)
{
}

void AspirePirPirParameters.numEntries.modify(uint64_t *a1, char a2, void *a3)
{
  uint64_t v5 = *a1;
  uint64_t v6 = *(void *)(*a1 + 72);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v8 = *(int *)(v5 + 88);
    uint64_t v9 = *(void *)(v5 + 80);
    type metadata accessor for AspirePirPirParameters._StorageClass(0);
    swift_allocObject();
    uint64_t v10 = swift_retain();
    *(void *)(v9 + v8) = AspirePirPirParameters._StorageClass.init(copying:)(v10);
    swift_release();
  }
LABEL_4:
  uint64_t v11 = (void *)(*(void *)(*(void *)(v5 + 80) + *(int *)(v5 + 88)) + *a3);
  swift_beginAccess();
  *uint64_t v11 = v6;
  free((void *)v5);
}

uint64_t AspirePirPirParameters.dimensions.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t key path getter for AspirePirPirParameters.dimensions : AspirePirPirParameters@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (void *)(*(void *)(a1 + *(int *)(type metadata accessor for AspirePirPirParameters(0) + 20))
                + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__dimensions);
  swift_beginAccess();
  *a2 = *v3;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for AspirePirPirParameters.dimensions : AspirePirPirParameters(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(int *)(type metadata accessor for AspirePirPirParameters(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirParameters._StorageClass(0);
    swift_allocObject();
    uint64_t v5 = swift_retain();
    *(void *)(a2 + v4) = AspirePirPirParameters._StorageClass.init(copying:)(v5);
    swift_release();
  }
  uint64_t v6 = (void *)(*(void *)(a2 + v4)
                + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__dimensions);
  swift_beginAccess();
  *uint64_t v6 = v3;
  return swift_bridgeObjectRelease();
}

void (*AspirePirPirParameters.dimensions.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for AspirePirPirParameters(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = (void *)(*(void *)(v1 + v4)
                + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__dimensions);
  swift_beginAccess();
  v3[9] = *v5;
  swift_bridgeObjectRetain();
  return AspirePirPirParameters.dimensions.modify;
}

void AspirePirPirParameters.dimensions.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 72);
  if (a2)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v4 = *(int *)(v2 + 88);
      uint64_t v5 = *(void *)(v2 + 80);
      type metadata accessor for AspirePirPirParameters._StorageClass(0);
      swift_allocObject();
      uint64_t v6 = swift_retain();
      *(void *)(v5 + v4) = AspirePirPirParameters._StorageClass.init(copying:)(v6);
      swift_release();
    }
    uint64_t v7 = (void *)(*(void *)(*(void *)(v2 + 80) + *(int *)(v2 + 88))
                  + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__dimensions);
    swift_beginAccess();
    *uint64_t v7 = v3;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v8 = *(int *)(v2 + 88);
      uint64_t v9 = *(void *)(v2 + 80);
      type metadata accessor for AspirePirPirParameters._StorageClass(0);
      swift_allocObject();
      uint64_t v10 = swift_retain();
      *(void *)(v9 + v8) = AspirePirPirParameters._StorageClass.init(copying:)(v10);
      swift_release();
    }
    uint64_t v11 = (void *)(*(void *)(*(void *)(v2 + 80) + *(int *)(v2 + 88))
                   + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__dimensions);
    swift_beginAccess();
    *uint64_t v11 = v3;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

uint64_t AspirePirPirParameters.keywordPirParams.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for AspirePirPirParameters(0) + 20))
     + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__keywordPirParams;
  swift_beginAccess();
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v6, (uint64_t)v5, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  uint64_t v7 = type metadata accessor for AspirePirKeywordPirParameters(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of AspirePirPIRShardingFunction((uint64_t)v5, a1, type metadata accessor for AspirePirKeywordPirParameters);
  }
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 0;
  UnknownStorage.init()();
  uint64_t v8 = a1 + *(int *)(v7 + 28);
  uint64_t v9 = type metadata accessor for AspirePirSymmetricPirClientConfig(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  uint64_t v10 = a1 + *(int *)(v7 + 32);
  uint64_t v11 = type metadata accessor for AspirePirPIRShardingFunction(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
}

uint64_t key path getter for AspirePirPirParameters.keywordPirParams : AspirePirPirParameters@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(a1 + *(int *)(type metadata accessor for AspirePirPirParameters(0) + 20))
     + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__keywordPirParams;
  swift_beginAccess();
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v7, (uint64_t)v6, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  uint64_t v8 = type metadata accessor for AspirePirKeywordPirParameters(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v6, 1, v8) != 1) {
    return outlined init with take of AspirePirPIRShardingFunction((uint64_t)v6, a2, type metadata accessor for AspirePirKeywordPirParameters);
  }
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 0;
  UnknownStorage.init()();
  uint64_t v9 = a2 + *(int *)(v8 + 28);
  uint64_t v10 = type metadata accessor for AspirePirSymmetricPirClientConfig(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  uint64_t v11 = a2 + *(int *)(v8 + 32);
  uint64_t v12 = type metadata accessor for AspirePirPIRShardingFunction(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
}

uint64_t key path setter for AspirePirPirParameters.encryptionParameters : AspirePirPirParameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t (*a6)(void), uint64_t (*a7)(char *))
{
  uint64_t v10 = a5(0);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v14 - v11;
  outlined init with copy of AspireHeEncryptionParameters(a1, (uint64_t)&v14 - v11, a6);
  return a7(v12);
}

uint64_t AspirePirPirParameters.keywordPirParams.setter(uint64_t a1)
{
  return AspirePirPirParameters.encryptionParameters.setter(a1, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?, type metadata accessor for AspirePirKeywordPirParameters, type metadata accessor for AspirePirKeywordPirParameters, &OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__keywordPirParams);
}

void (*AspirePirPirParameters.keywordPirParams.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for AspirePirKeywordPirParameters(0);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for AspirePirPirParameters(0) + 20))
      + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__keywordPirParams;
  swift_beginAccess();
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v10, (uint64_t)v5, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *(void *)uint64_t v9 = 0;
    v9[8] = 0;
    UnknownStorage.init()();
    uint64_t v11 = &v9[*(int *)(v6 + 28)];
    uint64_t v12 = type metadata accessor for AspirePirSymmetricPirClientConfig(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
    uint64_t v13 = &v9[*(int *)(v6 + 32)];
    uint64_t v14 = type metadata accessor for AspirePirPIRShardingFunction(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  }
  else
  {
    outlined init with take of AspirePirPIRShardingFunction((uint64_t)v5, (uint64_t)v9, type metadata accessor for AspirePirKeywordPirParameters);
  }
  return AspirePirPirParameters.keywordPirParams.modify;
}

void AspirePirPirParameters.keywordPirParams.modify(uint64_t a1, char a2)
{
}

void AspirePirPirParameters.encryptionParameters.modify(uint64_t a1, char a2, void (*a3)(void *), uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t v6 = *(void **)a1;
  uint64_t v7 = *(void **)(*(void *)a1 + 40);
  size_t v8 = *(void **)(*(void *)a1 + 48);
  uint64_t v9 = *(void **)(*(void *)a1 + 32);
  if (a2)
  {
    outlined init with copy of AspireHeEncryptionParameters(*(void *)(*(void *)a1 + 48), (uint64_t)v7, a4);
    a3(v7);
    _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v8, a5);
  }
  else
  {
    a3(*(void **)(*(void *)a1 + 48));
  }
  free(v8);
  free(v7);
  free(v9);
  free(v6);
}

BOOL AspirePirPirParameters.hasKeywordPirParams.getter()
{
  return AspirePirPirParameters.hasEncryptionParameters.getter(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?, (uint64_t (*)(void, double))type metadata accessor for AspirePirPirParameters, &OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__keywordPirParams, type metadata accessor for AspirePirKeywordPirParameters);
}

BOOL AspirePirPirParameters.hasEncryptionParameters.getter(uint64_t *a1, uint64_t (*a2)(void, double), void *a3, uint64_t (*a4)(void))
{
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(a1);
  double v10 = MEMORY[0x270FA5388](v9 - 8);
  uint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)(v4 + *(int *)(a2(0, v10) + 20)) + *a3;
  swift_beginAccess();
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v13, (uint64_t)v12, a1);
  uint64_t v14 = a4(0);
  BOOL v15 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48))(v12, 1, v14) != 1;
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v12, a1);
  return v15;
}

Swift::Void __swiftcall AspirePirPirParameters.clearKeywordPirParams()()
{
}

uint64_t AspirePirPirParameters.clearEncryptionParameters()(uint64_t *a1, uint64_t (*a2)(void), void *a3)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(int *)(type metadata accessor for AspirePirPirParameters(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirParameters._StorageClass(0);
    swift_allocObject();
    uint64_t v11 = swift_retain();
    *(void *)(v3 + v10) = AspirePirPirParameters._StorageClass.init(copying:)(v11);
    swift_release();
  }
  uint64_t v12 = *(void *)(v3 + v10);
  uint64_t v13 = a2(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v9, 1, 1, v13);
  uint64_t v14 = v12 + *a3;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of AMDPbHEConfig.OneOf_Config?((uint64_t)v9, v14, a1);
  swift_endAccess();
  return swift_release();
}

uint64_t AspirePirPirParameters.algorithm.getter@<X0>(uint64_t a1@<X8>)
{
  return AspirePirPirParameters.algorithm.getter(&OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__algorithm, a1);
}

void (*AspirePirPirParameters.algorithm.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[11] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for AspirePirPirParameters(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__algorithm;
  swift_beginAccess();
  char v6 = *(unsigned char *)(v5 + 8);
  v3[9] = *(void *)v5;
  *((unsigned char *)v3 + 80) = v6;
  return AspirePirPirParameters.algorithm.modify;
}

void AspirePirPirParameters.algorithm.modify(uint64_t *a1, char a2)
{
}

uint64_t AspirePirPirParameters.batchSize.getter()
{
  return AspirePirPirParameters.numEntries.getter(&OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__batchSize);
}

uint64_t AspirePirPirParameters.batchSize.setter(uint64_t a1)
{
  return AspirePirPirParameters.numEntries.setter(a1, &OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__batchSize);
}

void (*AspirePirPirParameters.batchSize.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for AspirePirPirParameters(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = (void *)(*(void *)(v1 + v4)
                + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__batchSize);
  swift_beginAccess();
  v3[9] = *v5;
  return AspirePirPirParameters.batchSize.modify;
}

void AspirePirPirParameters.batchSize.modify(uint64_t *a1, char a2)
{
}

uint64_t AspirePirPirParameters.evaluationKeyConfig.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for AspirePirPirParameters(0) + 20))
     + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__evaluationKeyConfig;
  swift_beginAccess();
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v6, (uint64_t)v5, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  uint64_t v7 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of AspirePirPIRShardingFunction((uint64_t)v5, a1, type metadata accessor for AspireHeEvaluationKeyConfig);
  }
  *(void *)a1 = MEMORY[0x263F8EE78];
  *(unsigned char *)(a1 + 8) = 0;
  UnknownStorage.init()();
  uint64_t v8 = a1 + *(int *)(v7 + 28);
  uint64_t v9 = type metadata accessor for AspireHeEncryptionParameters(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
}

uint64_t key path getter for AspirePirPirParameters.evaluationKeyConfig : AspirePirPirParameters@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(a1 + *(int *)(type metadata accessor for AspirePirPirParameters(0) + 20))
     + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__evaluationKeyConfig;
  swift_beginAccess();
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v7, (uint64_t)v6, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  uint64_t v8 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v6, 1, v8) != 1) {
    return outlined init with take of AspirePirPIRShardingFunction((uint64_t)v6, a2, type metadata accessor for AspireHeEvaluationKeyConfig);
  }
  *(void *)a2 = MEMORY[0x263F8EE78];
  *(unsigned char *)(a2 + 8) = 0;
  UnknownStorage.init()();
  uint64_t v9 = a2 + *(int *)(v8 + 28);
  uint64_t v10 = type metadata accessor for AspireHeEncryptionParameters(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
}

uint64_t AspirePirPirParameters.evaluationKeyConfig.setter(uint64_t a1)
{
  return AspirePirPirParameters.encryptionParameters.setter(a1, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?, type metadata accessor for AspireHeEvaluationKeyConfig, type metadata accessor for AspireHeEvaluationKeyConfig, &OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__evaluationKeyConfig);
}

void (*AspirePirPirParameters.evaluationKeyConfig.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for AspirePirPirParameters(0) + 20))
      + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__evaluationKeyConfig;
  swift_beginAccess();
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v10, (uint64_t)v5, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *(void *)uint64_t v9 = MEMORY[0x263F8EE78];
    v9[8] = 0;
    UnknownStorage.init()();
    uint64_t v11 = &v9[*(int *)(v6 + 28)];
    uint64_t v12 = type metadata accessor for AspireHeEncryptionParameters(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  }
  else
  {
    outlined init with take of AspirePirPIRShardingFunction((uint64_t)v5, (uint64_t)v9, type metadata accessor for AspireHeEvaluationKeyConfig);
  }
  return AspirePirPirParameters.evaluationKeyConfig.modify;
}

void AspirePirPirParameters.evaluationKeyConfig.modify(uint64_t a1, char a2)
{
}

BOOL AspirePirPirParameters.hasEvaluationKeyConfig.getter()
{
  return AspirePirPirParameters.hasEncryptionParameters.getter(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?, (uint64_t (*)(void, double))type metadata accessor for AspirePirPirParameters, &OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__evaluationKeyConfig, type metadata accessor for AspireHeEvaluationKeyConfig);
}

Swift::Void __swiftcall AspirePirPirParameters.clearEvaluationKeyConfig()()
{
}

uint64_t AspirePirPirParameters.keyCompressionStrategy.getter@<X0>(uint64_t a1@<X8>)
{
  return AspirePirPirParameters.algorithm.getter(&OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__keyCompressionStrategy, a1);
}

uint64_t AspirePirPirParameters.algorithm.getter@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(v2 + *(int *)(type metadata accessor for AspirePirPirParameters(0) + 20)) + *a1;
  uint64_t result = swift_beginAccess();
  char v6 = *(unsigned char *)(v4 + 8);
  *(void *)a2 = *(void *)v4;
  *(unsigned char *)(a2 + 8) = v6;
  return result;
}

uint64_t key path getter for AspirePirPirParameters.algorithm : AspirePirPirParameters@<X0>(uint64_t a1@<X0>, void *a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(void *)(a1 + *(int *)(type metadata accessor for AspirePirPirParameters(0) + 20)) + *a2;
  uint64_t result = swift_beginAccess();
  char v6 = *(unsigned char *)(v4 + 8);
  *(void *)a3 = *(void *)v4;
  *(unsigned char *)(a3 + 8) = v6;
  return result;
}

uint64_t key path setter for AspirePirPirParameters.algorithm : AspirePirPirParameters(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v7 = *a1;
  char v8 = *((unsigned char *)a1 + 8);
  uint64_t v9 = *(int *)(type metadata accessor for AspirePirPirParameters(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirParameters._StorageClass(0);
    swift_allocObject();
    uint64_t v10 = swift_retain();
    *(void *)(a2 + v9) = AspirePirPirParameters._StorageClass.init(copying:)(v10);
    swift_release();
  }
  uint64_t v11 = *(void *)(a2 + v9) + *a5;
  uint64_t result = swift_beginAccess();
  *(void *)uint64_t v11 = v7;
  *(unsigned char *)(v11 + 8) = v8;
  return result;
}

uint64_t AspirePirPirParameters.keyCompressionStrategy.setter(uint64_t *a1)
{
  return AspirePirPirParameters.algorithm.setter(a1, &OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__keyCompressionStrategy);
}

uint64_t AspirePirPirParameters.algorithm.setter(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  char v5 = *((unsigned char *)a1 + 8);
  uint64_t v6 = *(int *)(type metadata accessor for AspirePirPirParameters(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirParameters._StorageClass(0);
    swift_allocObject();
    uint64_t v7 = swift_retain();
    *(void *)(v2 + v6) = AspirePirPirParameters._StorageClass.init(copying:)(v7);
    swift_release();
  }
  uint64_t v8 = *(void *)(v2 + v6) + *a2;
  uint64_t result = swift_beginAccess();
  *(void *)uint64_t v8 = v4;
  *(unsigned char *)(v8 + 8) = v5;
  return result;
}

void (*AspirePirPirParameters.keyCompressionStrategy.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[11] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for AspirePirPirParameters(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__keyCompressionStrategy;
  swift_beginAccess();
  char v6 = *(unsigned char *)(v5 + 8);
  v3[9] = *(void *)v5;
  *((unsigned char *)v3 + 80) = v6;
  return AspirePirPirParameters.keyCompressionStrategy.modify;
}

void AspirePirPirParameters.keyCompressionStrategy.modify(uint64_t *a1, char a2)
{
}

void AspirePirPirParameters.algorithm.modify(uint64_t *a1, char a2, void *a3)
{
  uint64_t v5 = *a1;
  uint64_t v6 = *(void *)(*a1 + 72);
  char v7 = *(unsigned char *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v9 = *(int *)(v5 + 84);
    uint64_t v10 = *(void *)(v5 + 88);
    type metadata accessor for AspirePirPirParameters._StorageClass(0);
    swift_allocObject();
    uint64_t v11 = swift_retain();
    *(void *)(v10 + v9) = AspirePirPirParameters._StorageClass.init(copying:)(v11);
    swift_release();
  }
LABEL_4:
  uint64_t v12 = *(void *)(*(void *)(v5 + 88) + *(int *)(v5 + 84)) + *a3;
  swift_beginAccess();
  *(void *)uint64_t v12 = v6;
  *(unsigned char *)(v12 + 8) = v7;
  free((void *)v5);
}

uint64_t AspirePirPirParameters.compressVectorizedPirResponse.getter()
{
  uint64_t v1 = (unsigned char *)(*(void *)(v0 + *(int *)(type metadata accessor for AspirePirPirParameters(0) + 20))
               + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__compressVectorizedPirResponse);
  swift_beginAccess();
  return *v1 & 1;
}

uint64_t key path setter for AspirePirPirParameters.compressVectorizedPirResponse : AspirePirPirParameters(char *a1, uint64_t a2)
{
  char v3 = *a1;
  uint64_t v4 = *(int *)(type metadata accessor for AspirePirPirParameters(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirParameters._StorageClass(0);
    swift_allocObject();
    uint64_t v5 = swift_retain();
    *(void *)(a2 + v4) = AspirePirPirParameters._StorageClass.init(copying:)(v5);
    swift_release();
  }
  uint64_t v6 = (unsigned char *)(*(void *)(a2 + v4)
               + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__compressVectorizedPirResponse);
  uint64_t result = swift_beginAccess();
  *uint64_t v6 = v3;
  return result;
}

uint64_t AspirePirPirParameters.compressVectorizedPirResponse.setter(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for AspirePirPirParameters(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirParameters._StorageClass(0);
    swift_allocObject();
    uint64_t v5 = swift_retain();
    *(void *)(v1 + v4) = AspirePirPirParameters._StorageClass.init(copying:)(v5);
    swift_release();
  }
  char v6 = a1 & 1;
  char v7 = (unsigned char *)(*(void *)(v2 + v4)
               + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__compressVectorizedPirResponse);
  uint64_t result = swift_beginAccess();
  *char v7 = v6;
  return result;
}

void (*AspirePirPirParameters.compressVectorizedPirResponse.modify(void *a1))(uint64_t *a1, char a2)
{
  char v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for AspirePirPirParameters(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__compressVectorizedPirResponse);
  swift_beginAccess();
  *((unsigned char *)v3 + 84) = *v5 & 1;
  return AspirePirPirParameters.compressVectorizedPirResponse.modify;
}

void AspirePirPirParameters.compressVectorizedPirResponse.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = *(unsigned char *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 80);
    uint64_t v7 = *(void *)(v3 + 72);
    type metadata accessor for AspirePirPirParameters._StorageClass(0);
    swift_allocObject();
    uint64_t v8 = swift_retain();
    *(void *)(v7 + v6) = AspirePirPirParameters._StorageClass.init(copying:)(v8);
    swift_release();
  }
LABEL_4:
  uint64_t v9 = (unsigned char *)(*(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80))
               + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__compressVectorizedPirResponse);
  swift_beginAccess();
  *uint64_t v9 = v4;
  free((void *)v3);
}

BOOL AspirePirPirParameters.hasCompressVectorizedPirResponse.getter()
{
  uint64_t v1 = (unsigned __int8 *)(*(void *)(v0 + *(int *)(type metadata accessor for AspirePirPirParameters(0) + 20))
                         + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__compressVectorizedPirResponse);
  swift_beginAccess();
  return *v1 != 2;
}

Swift::Void __swiftcall AspirePirPirParameters.clearCompressVectorizedPirResponse()()
{
  uint64_t v1 = *(int *)(type metadata accessor for AspirePirPirParameters(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirParameters._StorageClass(0);
    swift_allocObject();
    uint64_t v2 = swift_retain();
    *(void *)(v0 + v1) = AspirePirPirParameters._StorageClass.init(copying:)(v2);
    swift_release();
  }
  uint64_t v3 = (unsigned char *)(*(void *)(v0 + v1)
               + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__compressVectorizedPirResponse);
  swift_beginAccess();
  *uint64_t v3 = 2;
}

uint64_t AspirePirPirParameters.vectorizedPirInternalBatchingSize.getter()
{
  uint64_t v1 = (unsigned char *)(*(void *)(v0 + *(int *)(type metadata accessor for AspirePirPirParameters(0) + 20))
               + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__vectorizedPirInternalBatchingSize);
  swift_beginAccess();
  if (v1[8]) {
    return 0;
  }
  else {
    return *(void *)v1;
  }
}

uint64_t key path getter for AspirePirPirParameters.vectorizedPirInternalBatchingSize : AspirePirPirParameters@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + *(int *)(type metadata accessor for AspirePirPirParameters(0) + 20))
     + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__vectorizedPirInternalBatchingSize;
  uint64_t result = swift_beginAccess();
  uint64_t v5 = *(void *)v3;
  if (*(unsigned char *)(v3 + 8)) {
    uint64_t v5 = 0;
  }
  *a2 = v5;
  return result;
}

uint64_t key path setter for AspirePirPirParameters.vectorizedPirInternalBatchingSize : AspirePirPirParameters(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(int *)(type metadata accessor for AspirePirPirParameters(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirParameters._StorageClass(0);
    swift_allocObject();
    uint64_t v5 = swift_retain();
    *(void *)(a2 + v4) = AspirePirPirParameters._StorageClass.init(copying:)(v5);
    swift_release();
  }
  uint64_t v6 = *(void *)(a2 + v4)
     + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__vectorizedPirInternalBatchingSize;
  uint64_t result = swift_beginAccess();
  *(void *)uint64_t v6 = v3;
  *(unsigned char *)(v6 + 8) = 0;
  return result;
}

uint64_t AspirePirPirParameters.vectorizedPirInternalBatchingSize.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for AspirePirPirParameters(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirParameters._StorageClass(0);
    swift_allocObject();
    uint64_t v4 = swift_retain();
    *(void *)(v1 + v3) = AspirePirPirParameters._StorageClass.init(copying:)(v4);
    swift_release();
  }
  uint64_t v5 = *(void *)(v1 + v3)
     + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__vectorizedPirInternalBatchingSize;
  uint64_t result = swift_beginAccess();
  *(void *)uint64_t v5 = a1;
  *(unsigned char *)(v5 + 8) = 0;
  return result;
}

void (*AspirePirPirParameters.vectorizedPirInternalBatchingSize.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for AspirePirPirParameters(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__vectorizedPirInternalBatchingSize;
  swift_beginAccess();
  uint64_t v6 = *(void *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    uint64_t v6 = 0;
  }
  v3[9] = v6;
  return AspirePirPirParameters.vectorizedPirInternalBatchingSize.modify;
}

void AspirePirPirParameters.vectorizedPirInternalBatchingSize.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 72);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 88);
    uint64_t v7 = *(void *)(v3 + 80);
    type metadata accessor for AspirePirPirParameters._StorageClass(0);
    swift_allocObject();
    uint64_t v8 = swift_retain();
    *(void *)(v7 + v6) = AspirePirPirParameters._StorageClass.init(copying:)(v8);
    swift_release();
  }
LABEL_4:
  uint64_t v9 = *(void *)(*(void *)(v3 + 80) + *(int *)(v3 + 88))
     + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__vectorizedPirInternalBatchingSize;
  swift_beginAccess();
  *(void *)uint64_t v9 = v4;
  *(unsigned char *)(v9 + 8) = 0;
  free((void *)v3);
}

BOOL AspirePirPirParameters.hasVectorizedPirInternalBatchingSize.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for AspirePirPirParameters(0) + 20))
     + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__vectorizedPirInternalBatchingSize;
  swift_beginAccess();
  return (*(unsigned char *)(v1 + 8) & 1) == 0;
}

Swift::Void __swiftcall AspirePirPirParameters.clearVectorizedPirInternalBatchingSize()()
{
  uint64_t v1 = *(int *)(type metadata accessor for AspirePirPirParameters(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirParameters._StorageClass(0);
    swift_allocObject();
    uint64_t v2 = swift_retain();
    *(void *)(v0 + v1) = AspirePirPirParameters._StorageClass.init(copying:)(v2);
    swift_release();
  }
  uint64_t v3 = *(void *)(v0 + v1)
     + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__vectorizedPirInternalBatchingSize;
  swift_beginAccess();
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = 1;
}

uint64_t AspirePirPirParameters.batchPirParams.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirBatchPirParameters?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for AspirePirPirParameters(0) + 20))
     + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__batchPirParams;
  swift_beginAccess();
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v6, (uint64_t)v5, &demangling cache variable for type metadata for AspirePirBatchPirParameters?);
  uint64_t v7 = type metadata accessor for AspirePirBatchPirParameters(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of AspirePirPIRShardingFunction((uint64_t)v5, (uint64_t)a1, type metadata accessor for AspirePirBatchPirParameters);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = MEMORY[0x263F8EE78];
  a1[3] = 0;
  UnknownStorage.init()();
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspirePirBatchPirParameters?);
}

uint64_t key path getter for AspirePirPirParameters.batchPirParams : AspirePirPirParameters@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirBatchPirParameters?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(a1 + *(int *)(type metadata accessor for AspirePirPirParameters(0) + 20))
     + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__batchPirParams;
  swift_beginAccess();
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v7, (uint64_t)v6, &demangling cache variable for type metadata for AspirePirBatchPirParameters?);
  uint64_t v8 = type metadata accessor for AspirePirBatchPirParameters(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v6, 1, v8) != 1) {
    return outlined init with take of AspirePirPIRShardingFunction((uint64_t)v6, (uint64_t)a2, type metadata accessor for AspirePirBatchPirParameters);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = MEMORY[0x263F8EE78];
  a2[3] = 0;
  UnknownStorage.init()();
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspirePirBatchPirParameters?);
}

uint64_t AspirePirPirParameters.batchPirParams.setter(uint64_t a1)
{
  return AspirePirPirParameters.encryptionParameters.setter(a1, &demangling cache variable for type metadata for AspirePirBatchPirParameters?, type metadata accessor for AspirePirBatchPirParameters, type metadata accessor for AspirePirBatchPirParameters, &OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__batchPirParams);
}

uint64_t AspirePirPirParameters.encryptionParameters.setter(uint64_t a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t (*a4)(void), void *a5)
{
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(a2);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v23 - v15;
  uint64_t v17 = *(int *)(type metadata accessor for AspirePirPirParameters(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirParameters._StorageClass(0);
    swift_allocObject();
    uint64_t v23 = v13;
    uint64_t v18 = swift_retain();
    uint64_t v13 = v23;
    *(void *)(v5 + v17) = AspirePirPirParameters._StorageClass.init(copying:)(v18);
    swift_release();
  }
  uint64_t v19 = *(void *)(v5 + v17);
  outlined init with take of AspirePirPIRShardingFunction(a1, (uint64_t)v16, a3);
  uint64_t v20 = a4(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v16, 0, 1, v20);
  outlined init with take of SymmetricPirClientConfig?((uint64_t)v16, (uint64_t)v13, a2);
  uint64_t v21 = v19 + *a5;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of AMDPbHEConfig.OneOf_Config?((uint64_t)v13, v21, a2);
  swift_endAccess();
  return swift_release();
}

void (*AspirePirPirParameters.batchPirParams.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirBatchPirParameters?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for AspirePirBatchPirParameters(0);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for AspirePirPirParameters(0) + 20))
      + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__batchPirParams;
  swift_beginAccess();
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v10, (uint64_t)v5, &demangling cache variable for type metadata for AspirePirBatchPirParameters?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *uint64_t v9 = 0;
    v9[1] = 0;
    v9[2] = MEMORY[0x263F8EE78];
    v9[3] = 0;
    UnknownStorage.init()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspirePirBatchPirParameters?);
  }
  else
  {
    outlined init with take of AspirePirPIRShardingFunction((uint64_t)v5, (uint64_t)v9, type metadata accessor for AspirePirBatchPirParameters);
  }
  return AspirePirPirParameters.batchPirParams.modify;
}

void AspirePirPirParameters.batchPirParams.modify(uint64_t a1, char a2)
{
}

BOOL AspirePirPirParameters.hasBatchPirParams.getter()
{
  return AspirePirPirParameters.hasEncryptionParameters.getter(&demangling cache variable for type metadata for AspirePirBatchPirParameters?, (uint64_t (*)(void, double))type metadata accessor for AspirePirPirParameters, &OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__batchPirParams, type metadata accessor for AspirePirBatchPirParameters);
}

Swift::Void __swiftcall AspirePirPirParameters.clearBatchPirParams()()
{
}

uint64_t (*AspirePirPirParameters.unknownFields.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspirePirPirParameters.init()@<X0>(uint64_t a1@<X8>)
{
  return AspirePirPirParameters.init()(type metadata accessor for AspirePirPirParameters, &one-time initialization token for defaultInstance, &static AspirePirPirParameters._StorageClass.defaultInstance, a1);
}

double AspirePirCuckooTableConfig.expansionFactor.getter()
{
  return *(double *)v0;
}

void AspirePirCuckooTableConfig.expansionFactor.setter(double a1)
{
  *uint64_t v1 = a1;
}

uint64_t (*AspirePirCuckooTableConfig.expansionFactor.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t (*AspirePirCuckooTableConfig.numHashFunctions.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t (*AspirePirCuckooTableConfig.maxNumEvictions.modify())()
{
  return Repeated.subscript.readspecialized ;
}

double AspirePirCuckooTableConfig.targetLoadFactor.getter()
{
  return *(double *)(v0 + 24);
}

void AspirePirCuckooTableConfig.targetLoadFactor.setter(double a1)
{
  *(double *)(v1 + 24) = a1;
}

uint64_t (*AspirePirCuckooTableConfig.targetLoadFactor.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t (*AspirePirCuckooTableConfig.slotsPerBucket.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspirePirCuckooTableConfig.allowExpansion.getter()
{
  return *(unsigned __int8 *)(v0 + 40);
}

uint64_t AspirePirCuckooTableConfig.allowExpansion.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 40) = result;
  return result;
}

uint64_t (*AspirePirCuckooTableConfig.allowExpansion.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspirePirCuckooTableConfig.multipleTables.getter()
{
  return *(unsigned __int8 *)(v0 + 41);
}

uint64_t AspirePirCuckooTableConfig.multipleTables.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 41) = result;
  return result;
}

uint64_t (*AspirePirCuckooTableConfig.multipleTables.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspirePirCuckooTableConfig.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AspirePirCuckooTableConfig(0) + 44);
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t AspirePirCuckooTableConfig.unknownFields.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AspirePirCuckooTableConfig(0) + 44);
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);
  return v5(v3, a1, v4);
}

uint64_t (*AspirePirCuckooTableConfig.unknownFields.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspirePirCuckooTableConfig.init()@<X0>(_OWORD *a1@<X8>)
{
  *a1 = 0u;
  a1[1] = 0u;
  *(_OWORD *)((char *)a1 + 26) = 0u;
  return UnknownStorage.init()();
}

uint64_t AspirePirBatchKeywordPirConfig.cuckooConfig.getter@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for AspirePirBatchKeywordPirConfig(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + *(int *)(v6 + 40), (uint64_t)v5, &demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
  uint64_t v7 = type metadata accessor for AspirePirCuckooTableConfig(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of AspirePirPIRShardingFunction((uint64_t)v5, (uint64_t)a1, type metadata accessor for AspirePirCuckooTableConfig);
  }
  *(_OWORD *)((char *)a1 + 26) = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  UnknownStorage.init()();
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
}

uint64_t key path getter for AspirePirBatchKeywordPirConfig.cuckooConfig : AspirePirBatchKeywordPirConfig@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for AspirePirBatchKeywordPirConfig(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v7 + 40), (uint64_t)v6, &demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
  uint64_t v8 = type metadata accessor for AspirePirCuckooTableConfig(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v6, 1, v8) != 1) {
    return outlined init with take of AspirePirPIRShardingFunction((uint64_t)v6, (uint64_t)a2, type metadata accessor for AspirePirCuckooTableConfig);
  }
  *(_OWORD *)((char *)a2 + 26) = 0u;
  *a2 = 0u;
  a2[1] = 0u;
  UnknownStorage.init()();
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
}

uint64_t key path setter for AspirePirBatchKeywordPirConfig.cuckooConfig : AspirePirBatchKeywordPirConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AspirePirCuckooTableConfig(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AspireHeEncryptionParameters(a1, (uint64_t)v7, type metadata accessor for AspirePirCuckooTableConfig);
  uint64_t v8 = a2 + *(int *)(type metadata accessor for AspirePirBatchKeywordPirConfig(0) + 40);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v8, &demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
  outlined init with take of AspirePirPIRShardingFunction((uint64_t)v7, v8, type metadata accessor for AspirePirCuckooTableConfig);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

uint64_t AspirePirBatchKeywordPirConfig.cuckooConfig.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AspirePirBatchKeywordPirConfig(0) + 40);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v3, &demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
  outlined init with take of AspirePirPIRShardingFunction(a1, v3, type metadata accessor for AspirePirCuckooTableConfig);
  uint64_t v4 = type metadata accessor for AspirePirCuckooTableConfig(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(v3, 0, 1, v4);
}

void (*AspirePirBatchKeywordPirConfig.cuckooConfig.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for AspirePirCuckooTableConfig(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for AspirePirBatchKeywordPirConfig(0) + 40);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    *(_OWORD *)((char *)v10 + 26) = 0u;
    *uint64_t v10 = 0u;
    v10[1] = 0u;
    UnknownStorage.init()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
  }
  else
  {
    outlined init with take of AspirePirPIRShardingFunction((uint64_t)v5, (uint64_t)v10, type metadata accessor for AspirePirCuckooTableConfig);
  }
  return AspirePirBatchKeywordPirConfig.cuckooConfig.modify;
}

void AspirePirBatchKeywordPirConfig.cuckooConfig.modify(uint64_t a1, char a2)
{
}

BOOL AspirePirBatchKeywordPirConfig.hasCuckooConfig.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for AspirePirBatchKeywordPirConfig(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v0 + *(int *)(v4 + 40), (uint64_t)v3, &demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
  uint64_t v5 = type metadata accessor for AspirePirCuckooTableConfig(0);
  BOOL v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v3, &demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
  return v6;
}

Swift::Void __swiftcall AspirePirBatchKeywordPirConfig.clearCuckooConfig()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for AspirePirBatchKeywordPirConfig(0) + 40);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v1, &demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
  uint64_t v2 = type metadata accessor for AspirePirCuckooTableConfig(0);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);
  v3(v1, 1, 1, v2);
}

uint64_t (*AspirePirBatchKeywordPirConfig.batchSize.modify())()
{
  return Repeated.subscript.readspecialized ;
}

double AspirePirBatchKeywordPirConfig.targetLoadFactor.getter()
{
  return *(double *)(v0 + 8);
}

void AspirePirBatchKeywordPirConfig.targetLoadFactor.setter(double a1)
{
  *(double *)(v1 + 8) = a1;
}

uint64_t (*AspirePirBatchKeywordPirConfig.targetLoadFactor.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspirePirBatchKeywordPirConfig.numHashFunctions.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t AspirePirBatchKeywordPirConfig.numHashFunctions.setter(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t (*AspirePirBatchKeywordPirConfig.numHashFunctions.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t (*AspirePirBatchKeywordPirConfig.numPirDimensions.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspirePirBatchKeywordPirConfig.maxNumShards.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t AspirePirBatchKeywordPirConfig.maxNumShards.setter(uint64_t result)
{
  *(void *)(v1 + 32) = result;
  return result;
}

uint64_t (*AspirePirBatchKeywordPirConfig.maxNumShards.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspirePirBatchKeywordPirConfig.targetVpirInternalBatchSize.getter()
{
  uint64_t v1 = (unsigned char *)(v0 + *(int *)(type metadata accessor for AspirePirBatchKeywordPirConfig(0) + 44));
  if (v1[8]) {
    return 0;
  }
  else {
    return *(void *)v1;
  }
}

uint64_t AspirePirBatchKeywordPirConfig.targetVpirInternalBatchSize.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for AspirePirBatchKeywordPirConfig(0);
  uint64_t v4 = v1 + *(int *)(result + 44);
  *(void *)uint64_t v4 = a1;
  *(unsigned char *)(v4 + 8) = 0;
  return result;
}

uint64_t (*AspirePirBatchKeywordPirConfig.targetVpirInternalBatchSize.modify(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for AspirePirBatchKeywordPirConfig(0) + 44);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  if (*((unsigned char *)v4 + 8)) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *v4;
  }
  *(void *)a1 = v5;
  return AspireApiPIRShardConfig.vectorizedPirInternalBatchingSize.modify;
}

BOOL AspirePirBatchKeywordPirConfig.hasTargetVpirInternalBatchSize.getter()
{
  return (*(unsigned char *)(v0 + *(int *)(type metadata accessor for AspirePirBatchKeywordPirConfig(0) + 44) + 8) & 1) == 0;
}

Swift::Void __swiftcall AspirePirBatchKeywordPirConfig.clearTargetVpirInternalBatchSize()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for AspirePirBatchKeywordPirConfig(0) + 44);
  *(void *)uint64_t v1 = 0;
  *(unsigned char *)(v1 + 8) = 1;
}

uint64_t AspirePirBatchKeywordPirConfig.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AspirePirBatchKeywordPirConfig(0) + 36);
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t AspirePirBatchKeywordPirConfig.unknownFields.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AspirePirBatchKeywordPirConfig(0) + 36);
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);
  return v5(v3, a1, v4);
}

uint64_t (*AspirePirBatchKeywordPirConfig.unknownFields.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspirePirBatchKeywordPirConfig.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for AspirePirBatchKeywordPirConfig(0);
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 32) = 0;
  UnknownStorage.init()();
  uint64_t v3 = a1 + *(int *)(v2 + 40);
  uint64_t v4 = type metadata accessor for AspirePirCuckooTableConfig(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  uint64_t v6 = a1 + *(int *)(v2 + 44);
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  return result;
}

uint64_t AspirePirBatchPirParameters.numHashFunctions.getter()
{
  return *(void *)v0;
}

uint64_t AspirePirBatchPirParameters.numHashFunctions.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*AspirePirBatchPirParameters.numHashFunctions.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspirePirBatchPirParameters.numHashFunctionsPerBucket.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t AspirePirBatchPirParameters.numHashFunctionsPerBucket.setter(uint64_t result)
{
  *(void *)(v1 + 8) = result;
  return result;
}

uint64_t (*AspirePirBatchPirParameters.numHashFunctionsPerBucket.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspirePirBatchPirParameters.batchPirTableSize.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AspirePirBatchPirParameters.batchPirTableSize.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 16) = a1;
  return result;
}

uint64_t (*AspirePirBatchPirParameters.batchPirTableSize.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspirePirBatchPirParameters.numPirDbPerShard.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t AspirePirBatchPirParameters.numPirDbPerShard.setter(uint64_t result)
{
  *(void *)(v1 + 24) = result;
  return result;
}

uint64_t (*AspirePirBatchPirParameters.numPirDbPerShard.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspirePirBatchPirParameters.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AspirePirBatchPirParameters(0) + 32);
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t AspirePirBatchPirParameters.unknownFields.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AspirePirBatchPirParameters(0) + 32);
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);
  return v5(v3, a1, v4);
}

uint64_t (*AspirePirBatchPirParameters.unknownFields.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t (*AspirePirKeywordPirParameters.numHashFunctions.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspirePirKeywordPirParameters.multipleTables.getter()
{
  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t AspirePirKeywordPirParameters.multipleTables.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 8) = result;
  return result;
}

uint64_t (*AspirePirKeywordPirParameters.multipleTables.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t key path getter for AspirePirKeywordPirParameters.symmetricPirClientConfig : AspirePirKeywordPirParameters@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirSymmetricPirClientConfig?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for AspirePirKeywordPirParameters(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v7 + 28), (uint64_t)v6, &demangling cache variable for type metadata for AspirePirSymmetricPirClientConfig?);
  uint64_t v8 = type metadata accessor for AspirePirSymmetricPirClientConfig(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v6, 1, v8) != 1) {
    return outlined init with take of AspirePirPIRShardingFunction((uint64_t)v6, a2, type metadata accessor for AspirePirSymmetricPirClientConfig);
  }
  *(_OWORD *)a2 = xmmword_249E85DF0;
  *(void *)(a2 + 16) = 0;
  *(unsigned char *)(a2 + 24) = 1;
  UnknownStorage.init()();
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspirePirSymmetricPirClientConfig?);
}

uint64_t key path setter for AspirePirKeywordPirParameters.symmetricPirClientConfig : AspirePirKeywordPirParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AspirePirSymmetricPirClientConfig(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AspireHeEncryptionParameters(a1, (uint64_t)v7, type metadata accessor for AspirePirSymmetricPirClientConfig);
  uint64_t v8 = a2 + *(int *)(type metadata accessor for AspirePirKeywordPirParameters(0) + 28);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v8, &demangling cache variable for type metadata for AspirePirSymmetricPirClientConfig?);
  outlined init with take of AspirePirPIRShardingFunction((uint64_t)v7, v8, type metadata accessor for AspirePirSymmetricPirClientConfig);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

uint64_t AspirePirKeywordPirParameters.symmetricPirClientConfig.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AspirePirKeywordPirParameters(0) + 28);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v3, &demangling cache variable for type metadata for AspirePirSymmetricPirClientConfig?);
  outlined init with take of AspirePirPIRShardingFunction(a1, v3, type metadata accessor for AspirePirSymmetricPirClientConfig);
  uint64_t v4 = type metadata accessor for AspirePirSymmetricPirClientConfig(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(v3, 0, 1, v4);
}

uint64_t AspirePirSymmetricPirClientConfig.init()@<X0>(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_249E85DF0;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 1;
  type metadata accessor for AspirePirSymmetricPirClientConfig(0);
  return UnknownStorage.init()();
}

void (*AspirePirKeywordPirParameters.symmetricPirClientConfig.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirSymmetricPirClientConfig?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for AspirePirSymmetricPirClientConfig(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for AspirePirKeywordPirParameters(0) + 28);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for AspirePirSymmetricPirClientConfig?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    *(_OWORD *)uint64_t v10 = xmmword_249E85DF0;
    v10[2] = 0;
    *((unsigned char *)v10 + 24) = 1;
    UnknownStorage.init()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspirePirSymmetricPirClientConfig?);
  }
  else
  {
    outlined init with take of AspirePirPIRShardingFunction((uint64_t)v5, (uint64_t)v10, type metadata accessor for AspirePirSymmetricPirClientConfig);
  }
  return AspirePirKeywordPirParameters.symmetricPirClientConfig.modify;
}

void AspirePirKeywordPirParameters.symmetricPirClientConfig.modify(uint64_t a1, char a2)
{
}

Swift::Void __swiftcall AspirePirKeywordPirParameters.clearSymmetricPirClientConfig()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for AspirePirKeywordPirParameters(0) + 28);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v1, &demangling cache variable for type metadata for AspirePirSymmetricPirClientConfig?);
  uint64_t v2 = type metadata accessor for AspirePirSymmetricPirClientConfig(0);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);
  v3(v1, 1, 1, v2);
}

uint64_t key path getter for AspirePirKeywordPirParameters.shardingFunction : AspirePirKeywordPirParameters@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPIRShardingFunction?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for AspirePirKeywordPirParameters(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v7 + 32), (uint64_t)v6, &demangling cache variable for type metadata for AspirePirPIRShardingFunction?);
  uint64_t v8 = type metadata accessor for AspirePirPIRShardingFunction(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v6, 1, v8) != 1) {
    return outlined init with take of AspirePirPIRShardingFunction((uint64_t)v6, a2, type metadata accessor for AspirePirPIRShardingFunction);
  }
  uint64_t v9 = type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(a2, 1, 1, v9);
  UnknownStorage.init()();
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspirePirPIRShardingFunction?);
}

uint64_t key path setter for AspirePirKeywordPirParameters.shardingFunction : AspirePirKeywordPirParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AspirePirPIRShardingFunction(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AspireHeEncryptionParameters(a1, (uint64_t)v7, type metadata accessor for AspirePirPIRShardingFunction);
  uint64_t v8 = a2 + *(int *)(type metadata accessor for AspirePirKeywordPirParameters(0) + 32);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v8, &demangling cache variable for type metadata for AspirePirPIRShardingFunction?);
  outlined init with take of AspirePirPIRShardingFunction((uint64_t)v7, v8, type metadata accessor for AspirePirPIRShardingFunction);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

uint64_t AspirePirKeywordPirParameters.shardingFunction.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AspirePirKeywordPirParameters(0) + 32);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v3, &demangling cache variable for type metadata for AspirePirPIRShardingFunction?);
  outlined init with take of AspirePirPIRShardingFunction(a1, v3, type metadata accessor for AspirePirPIRShardingFunction);
  uint64_t v4 = type metadata accessor for AspirePirPIRShardingFunction(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(v3, 0, 1, v4);
}

uint64_t AspirePirPIRShardingFunction.init()@<X0>(uint64_t a1@<X8>)
{
  return AspirePirPIRShardingFunction.init()(type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function, (void (*)(void))type metadata accessor for AspirePirPIRShardingFunction, a1);
}

uint64_t type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspirePirPIRShardingFunction.OneOf_Function);
}

uint64_t outlined init with take of AspirePirPIRShardingFunction(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for AspirePirPirParameters(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspirePirPirParameters);
}

uint64_t type metadata accessor for AspirePirPirParameters._StorageClass(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspirePirPirParameters._StorageClass);
}

void (*AspirePirKeywordPirParameters.shardingFunction.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPIRShardingFunction?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for AspirePirPIRShardingFunction(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for AspirePirKeywordPirParameters(0) + 32);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for AspirePirPIRShardingFunction?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    uint64_t v12 = type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function(0);
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v10, 1, 1, v12);
    UnknownStorage.init()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspirePirPIRShardingFunction?);
  }
  else
  {
    outlined init with take of AspirePirPIRShardingFunction((uint64_t)v5, (uint64_t)v10, type metadata accessor for AspirePirPIRShardingFunction);
  }
  return AspirePirKeywordPirParameters.shardingFunction.modify;
}

void AspirePirKeywordPirParameters.shardingFunction.modify(uint64_t a1, char a2)
{
}

void AspirePirBatchKeywordPirConfig.cuckooConfig.modify(uint64_t a1, char a2, uint64_t *a3, uint64_t (*a4)(void), uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  uint64_t v8 = *(void **)a1;
  uint64_t v9 = *(int *)(*(void *)a1 + 48);
  uint64_t v10 = *(void **)(*(void *)a1 + 32);
  uint64_t v11 = *(void **)(*(void *)a1 + 40);
  uint64_t v12 = *(void *)(*(void *)a1 + 16);
  uint64_t v13 = *(void *)(*(void *)a1 + 24);
  uint64_t v14 = *(void **)(*(void *)a1 + 8);
  uint64_t v15 = **(void **)a1 + v9;
  if (a2)
  {
    outlined init with copy of AspireHeEncryptionParameters(*(void *)(*(void *)a1 + 40), (uint64_t)v10, a5);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v15, a3);
    outlined init with take of AspirePirPIRShardingFunction((uint64_t)v10, v15, a4);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(v15, 0, 1, v12);
    _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v11, a6);
  }
  else
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(**(void **)a1 + v9, a3);
    outlined init with take of AspirePirPIRShardingFunction((uint64_t)v11, v15, a4);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(v15, 0, 1, v12);
  }
  free(v11);
  free(v10);
  free(v14);
  free(v8);
}

Swift::Void __swiftcall AspirePirKeywordPirParameters.clearShardingFunction()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for AspirePirKeywordPirParameters(0) + 32);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v1, &demangling cache variable for type metadata for AspirePirPIRShardingFunction?);
  uint64_t v2 = type metadata accessor for AspirePirPIRShardingFunction(0);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);
  v3(v1, 1, 1, v2);
}

uint64_t AspirePirKeywordPirParameters.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AspirePirKeywordPirParameters.unknownFields.getter(type metadata accessor for AspirePirKeywordPirParameters, a1);
}

uint64_t AspirePirKeywordPirParameters.unknownFields.setter(uint64_t a1)
{
  return AspirePirKeywordPirParameters.unknownFields.setter(a1, type metadata accessor for AspirePirKeywordPirParameters);
}

uint64_t (*AspirePirKeywordPirParameters.unknownFields.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspirePirPIRShardingFunction.function.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1, a1, &demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
}

uint64_t AspirePirPIRShardingFunction.function.setter(uint64_t a1)
{
  return outlined assign with take of AMDPbHEConfig.OneOf_Config?(a1, v1, &demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
}

uint64_t (*AspirePirPIRShardingFunction.function.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspirePirPIRShardingFunction.sha256.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
  uint64_t v7 = type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
    return UnknownStorage.init()();
  }
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v6, type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function);
    return UnknownStorage.init()();
  }
  return outlined init with take of AspirePirPIRShardingFunction((uint64_t)v6, a1, type metadata accessor for AspirePirPIRShardingFunctionSHA256);
}

uint64_t key path getter for AspirePirPIRShardingFunction.sha256 : AspirePirPIRShardingFunction@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v6, &demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
  uint64_t v7 = type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
    return UnknownStorage.init()();
  }
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v6, type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function);
    return UnknownStorage.init()();
  }
  return outlined init with take of AspirePirPIRShardingFunction((uint64_t)v6, a2, type metadata accessor for AspirePirPIRShardingFunctionSHA256);
}

uint64_t key path setter for AspirePirPIRShardingFunction.sha256 : AspirePirPIRShardingFunction(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AspirePirPIRShardingFunctionSHA256(0);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AspireHeEncryptionParameters(a1, (uint64_t)v6, type metadata accessor for AspirePirPIRShardingFunctionSHA256);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(a2, &demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
  outlined init with take of AspirePirPIRShardingFunction((uint64_t)v6, a2, type metadata accessor for AspirePirPIRShardingFunctionSHA256);
  uint64_t v7 = type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(a2, 0, 1, v7);
}

uint64_t AspirePirPIRShardingFunction.sha256.setter(uint64_t a1)
{
  return AspirePirPIRShardingFunction.sha256.setter(a1, &demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?, type metadata accessor for AspirePirPIRShardingFunctionSHA256, type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function);
}

void (*AspirePirPIRShardingFunction.sha256.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v2 = v1;
  uint64_t v4 = malloc(0x30uLL);
  *a1 = v4;
  *uint64_t v4 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
  uint64_t v6 = malloc(*(void *)(*(void *)(v5 - 8) + 64));
  v4[1] = v6;
  size_t v7 = *(void *)(*(void *)(type metadata accessor for AspirePirPIRShardingFunctionSHA256(0) - 8) + 64);
  v4[2] = malloc(v7);
  uint64_t v8 = malloc(v7);
  v4[3] = v8;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
  uint64_t v9 = type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function(0);
  v4[4] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v4[5] = v10;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v6, 1, v9) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      outlined init with take of AspirePirPIRShardingFunction((uint64_t)v6, (uint64_t)v8, type metadata accessor for AspirePirPIRShardingFunctionSHA256);
      return AspirePirPIRShardingFunction.sha256.modify;
    }
    _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v6, type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function);
  }
  UnknownStorage.init()();
  return AspirePirPIRShardingFunction.sha256.modify;
}

void AspirePirPIRShardingFunction.sha256.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (*a1)[4];
  uint64_t v4 = (*a1)[5];
  uint64_t v5 = (void *)(*a1)[2];
  uint64_t v6 = (void *)(*a1)[3];
  uint64_t v8 = **a1;
  size_t v7 = (void *)(*a1)[1];
  if (a2)
  {
    outlined init with copy of AspireHeEncryptionParameters((*a1)[3], (uint64_t)v5, type metadata accessor for AspirePirPIRShardingFunctionSHA256);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v8, &demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
    outlined init with take of AspirePirPIRShardingFunction((uint64_t)v5, v8, type metadata accessor for AspirePirPIRShardingFunctionSHA256);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v8, 0, 1, v3);
    _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v6, type metadata accessor for AspirePirPIRShardingFunctionSHA256);
  }
  else
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(**a1, &demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
    outlined init with take of AspirePirPIRShardingFunction((uint64_t)v6, v8, type metadata accessor for AspirePirPIRShardingFunctionSHA256);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v8, 0, 1, v3);
  }
  free(v6);
  free(v5);
  free(v7);
  free(v2);
}

uint64_t AspirePirPIRShardingFunction.doubleMod.getter@<X0>(_DWORD *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
  uint64_t v7 = type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1) {
      return outlined init with take of AspirePirPIRShardingFunction((uint64_t)v6, (uint64_t)a1, type metadata accessor for AspirePirPIRShardingFunctionDoubleMod);
    }
    _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v6, type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function);
  }
  *a1 = 0;
  type metadata accessor for AspirePirPIRShardingFunctionDoubleMod(0);
  return UnknownStorage.init()();
}

uint64_t key path getter for AspirePirPIRShardingFunction.doubleMod : AspirePirPIRShardingFunction@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v6, &demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
  uint64_t v7 = type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1) {
      return outlined init with take of AspirePirPIRShardingFunction((uint64_t)v6, (uint64_t)a2, type metadata accessor for AspirePirPIRShardingFunctionDoubleMod);
    }
    _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v6, type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function);
  }
  *a2 = 0;
  type metadata accessor for AspirePirPIRShardingFunctionDoubleMod(0);
  return UnknownStorage.init()();
}

uint64_t key path setter for AspirePirPIRShardingFunction.doubleMod : AspirePirPIRShardingFunction(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AspirePirPIRShardingFunctionDoubleMod(0);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AspireHeEncryptionParameters(a1, (uint64_t)v6, type metadata accessor for AspirePirPIRShardingFunctionDoubleMod);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(a2, &demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
  outlined init with take of AspirePirPIRShardingFunction((uint64_t)v6, a2, type metadata accessor for AspirePirPIRShardingFunctionDoubleMod);
  uint64_t v7 = type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(a2, 0, 1, v7);
}

uint64_t AspirePirPIRShardingFunction.doubleMod.setter(uint64_t a1)
{
  return AspirePirPIRShardingFunction.sha256.setter(a1, &demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?, type metadata accessor for AspirePirPIRShardingFunctionDoubleMod, type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function);
}

uint64_t AspirePirPIRShardingFunctionDoubleMod.init()@<X0>(_DWORD *a1@<X8>)
{
  *a1 = 0;
  type metadata accessor for AspirePirPIRShardingFunctionDoubleMod(0);
  return UnknownStorage.init()();
}

void (*AspirePirPIRShardingFunction.doubleMod.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v2 = v1;
  uint64_t v4 = malloc(0x30uLL);
  *a1 = v4;
  *uint64_t v4 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
  uint64_t v6 = malloc(*(void *)(*(void *)(v5 - 8) + 64));
  v4[1] = v6;
  size_t v7 = *(void *)(*(void *)(type metadata accessor for AspirePirPIRShardingFunctionDoubleMod(0) - 8) + 64);
  v4[2] = malloc(v7);
  uint64_t v8 = malloc(v7);
  v4[3] = v8;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
  uint64_t v9 = type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function(0);
  v4[4] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v4[5] = v10;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v6, 1, v9) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
LABEL_6:
    *uint64_t v8 = 0;
    UnknownStorage.init()();
    return AspirePirPIRShardingFunction.doubleMod.modify;
  }
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v6, type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function);
    goto LABEL_6;
  }
  outlined init with take of AspirePirPIRShardingFunction((uint64_t)v6, (uint64_t)v8, type metadata accessor for AspirePirPIRShardingFunctionDoubleMod);
  return AspirePirPIRShardingFunction.doubleMod.modify;
}

void AspirePirPIRShardingFunction.doubleMod.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (*a1)[4];
  uint64_t v4 = (*a1)[5];
  uint64_t v5 = (void *)(*a1)[2];
  uint64_t v6 = (void *)(*a1)[3];
  uint64_t v8 = **a1;
  size_t v7 = (void *)(*a1)[1];
  if (a2)
  {
    outlined init with copy of AspireHeEncryptionParameters((*a1)[3], (uint64_t)v5, type metadata accessor for AspirePirPIRShardingFunctionDoubleMod);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v8, &demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
    outlined init with take of AspirePirPIRShardingFunction((uint64_t)v5, v8, type metadata accessor for AspirePirPIRShardingFunctionDoubleMod);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v8, 0, 1, v3);
    _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v6, type metadata accessor for AspirePirPIRShardingFunctionDoubleMod);
  }
  else
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(**a1, &demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
    outlined init with take of AspirePirPIRShardingFunction((uint64_t)v6, v8, type metadata accessor for AspirePirPIRShardingFunctionDoubleMod);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v8, 0, 1, v3);
  }
  free(v6);
  free(v5);
  free(v7);
  free(v2);
}

uint64_t AspirePirPIRShardingFunction.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AspirePirPIRShardingFunction.unknownFields.getter(type metadata accessor for AspirePirPIRShardingFunction, a1);
}

uint64_t AspirePirPIRShardingFunction.unknownFields.setter(uint64_t a1)
{
  return AspirePirPIRShardingFunction.unknownFields.setter(a1, type metadata accessor for AspirePirPIRShardingFunction);
}

uint64_t (*AspirePirPIRShardingFunction.unknownFields.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t static AspirePirPIRShardingFunctionSHA256.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  size_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v9 = MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v15 - v10;
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16);
  v12((char *)&v15 - v10, a1, v4, v9);
  ((void (*)(char *, uint64_t, uint64_t))v12)(v7, a2, v4);
  _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
  LOBYTE(a2) = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v13 = *(void (**)(char *, uint64_t))(v5 + 8);
  v13(v7, v4);
  v13(v11, v4);
  return a2 & 1;
}

uint64_t (*AspirePirPIRShardingFunctionSHA256.unknownFields.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t (*AspirePirPIRShardingFunctionDoubleMod.otherShardCount.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspirePirPIRShardingFunctionDoubleMod.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AspirePirPIRShardingFunction.unknownFields.getter(type metadata accessor for AspirePirPIRShardingFunctionDoubleMod, a1);
}

uint64_t AspirePirPIRShardingFunction.unknownFields.getter@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1(0) + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t AspirePirPIRShardingFunctionDoubleMod.unknownFields.setter(uint64_t a1)
{
  return AspirePirPIRShardingFunction.unknownFields.setter(a1, type metadata accessor for AspirePirPIRShardingFunctionDoubleMod);
}

uint64_t AspirePirPIRShardingFunction.unknownFields.setter(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = v2 + *(int *)(a2(0) + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t (*AspirePirPIRShardingFunctionDoubleMod.unknownFields.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspirePirEncryptedIndices.ciphertexts.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AspirePirEncryptedIndices.ciphertexts.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*AspirePirEncryptedIndices.ciphertexts.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t (*AspirePirEncryptedIndices.numPirCalls.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspirePirEncryptedIndices.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AspirePirKeywordPirParameters.unknownFields.getter(type metadata accessor for AspirePirEncryptedIndices, a1);
}

uint64_t AspirePirKeywordPirParameters.unknownFields.getter@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1(0) + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t AspirePirEncryptedIndices.unknownFields.setter(uint64_t a1)
{
  return AspirePirKeywordPirParameters.unknownFields.setter(a1, type metadata accessor for AspirePirEncryptedIndices);
}

uint64_t AspirePirKeywordPirParameters.unknownFields.setter(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = v2 + *(int *)(a2(0) + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t (*AspirePirEncryptedIndices.unknownFields.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t (*AspirePirSerializedKeywordDbRow.keyword.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspirePirSerializedKeywordDbRow.value.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  outlined copy of Data._Representation(v1, *(void *)(v0 + 24));
  return v1;
}

uint64_t AspirePirSerializedKeywordDbRow.value.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = outlined consume of Data._Representation(*(void *)(v2 + 16), *(void *)(v2 + 24));
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*AspirePirSerializedKeywordDbRow.value.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspirePirSerializedKeywordDbRow.shardID.getter()
{
  return AspirePirSerializedKeywordDbRow.shardID.getter(type metadata accessor for AspirePirSerializedKeywordDbRow);
}

uint64_t AspirePirSerializedKeywordDbRow.shardID.setter(uint64_t a1, uint64_t a2)
{
  return AspirePirSerializedKeywordDbRow.shardID.setter(a1, a2, type metadata accessor for AspirePirSerializedKeywordDbRow);
}

uint64_t (*AspirePirSerializedKeywordDbRow.shardID.modify(uint64_t a1))()
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for AspirePirSerializedKeywordDbRow(0) + 28);
  *(_DWORD *)(a1 + 24) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  unint64_t v5 = v4[1];
  if (v5)
  {
    uint64_t v6 = *v4;
    unint64_t v7 = v5;
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0xE000000000000000;
  }
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return AspireApiPIRShardConfig.shardID.modify;
}

BOOL AspirePirSerializedKeywordDbRow.hasShardID.getter()
{
  return AspirePirSerializedKeywordDbRow.hasShardID.getter(type metadata accessor for AspirePirSerializedKeywordDbRow);
}

Swift::Void __swiftcall AspirePirSerializedKeywordDbRow.clearShardID()()
{
}

uint64_t AspirePirSerializedKeywordDbRow.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AspirePirKeywordPirParameters.unknownFields.getter(type metadata accessor for AspirePirSerializedKeywordDbRow, a1);
}

uint64_t AspirePirSerializedKeywordDbRow.unknownFields.setter(uint64_t a1)
{
  return AspirePirKeywordPirParameters.unknownFields.setter(a1, type metadata accessor for AspirePirSerializedKeywordDbRow);
}

uint64_t (*AspirePirSerializedKeywordDbRow.unknownFields.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspirePirSerializedKeywordDbRow.init()@<X0>(_OWORD *a1@<X8>)
{
  *a1 = xmmword_249E85DF0;
  a1[1] = xmmword_249E85DF0;
  uint64_t v2 = type metadata accessor for AspirePirSerializedKeywordDbRow(0);
  uint64_t result = UnknownStorage.init()();
  uint64_t v4 = (void *)((char *)a1 + *(int *)(v2 + 28));
  *uint64_t v4 = 0;
  v4[1] = 0;
  return result;
}

uint64_t (*AspirePirSerializedKeywordDb.rows.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspirePirSerializedKeywordDb.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AspirePirPIRShardingFunction.unknownFields.getter(type metadata accessor for AspirePirSerializedKeywordDb, a1);
}

uint64_t AspirePirSerializedKeywordDb.unknownFields.setter(uint64_t a1)
{
  return AspirePirPIRShardingFunction.unknownFields.setter(a1, type metadata accessor for AspirePirSerializedKeywordDb);
}

uint64_t (*AspirePirSerializedKeywordDb.unknownFields.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspirePirSerializedKeywordDb.init()@<X0>(void *a1@<X8>)
{
  *a1 = MEMORY[0x263F8EE78];
  type metadata accessor for AspirePirSerializedKeywordDb(0);
  return UnknownStorage.init()();
}

uint64_t AspirePirPirPreprocessDbArgs.inputDatabase.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20));
  swift_beginAccess();
  if (*(void *)(v1 + 24)) {
    uint64_t v2 = *(void *)(v1 + 16);
  }
  else {
    uint64_t v2 = 0;
  }
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t key path getter for AspirePirPirPreprocessDbArgs.inputDatabase : AspirePirPirPreprocessDbArgs@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20));
  swift_beginAccess();
  if (*(void *)(v3 + 24))
  {
    uint64_t v4 = *(void *)(v3 + 16);
    unint64_t v5 = *(void *)(v3 + 24);
  }
  else
  {
    uint64_t v4 = 0;
    unint64_t v5 = 0xE000000000000000;
  }
  *a2 = v4;
  a2[1] = v5;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for AspirePirPirPreprocessDbArgs.inputDatabase : AspirePirPirPreprocessDbArgs(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    uint64_t v6 = swift_retain();
    *(void *)(a2 + v5) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v6);
    swift_release();
  }
  uint64_t v7 = *(void *)(a2 + v5);
  swift_beginAccess();
  *(void *)(v7 + 16) = v4;
  *(void *)(v7 + 24) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t AspirePirPirPreprocessDbArgs.inputDatabase.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    uint64_t v6 = swift_retain();
    *(void *)(v2 + v5) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v6);
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v5);
  swift_beginAccess();
  *(void *)(v7 + 16) = a1;
  *(void *)(v7 + 24) = a2;
  return swift_bridgeObjectRelease();
}

void (*AspirePirPirPreprocessDbArgs.inputDatabase.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  if (*(void *)(v5 + 24))
  {
    uint64_t v6 = *(void *)(v5 + 16);
    unint64_t v7 = *(void *)(v5 + 24);
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0xE000000000000000;
  }
  v3[9] = v6;
  v3[10] = v7;
  swift_bridgeObjectRetain();
  return AspirePirPirPreprocessDbArgs.inputDatabase.modify;
}

void AspirePirPirPreprocessDbArgs.inputDatabase.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 72);
  uint64_t v4 = *(void *)(*a1 + 80);
  if (a2)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v5 = *(int *)(v2 + 96);
      uint64_t v6 = *(void *)(v2 + 88);
      type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
      swift_allocObject();
      uint64_t v7 = swift_retain();
      *(void *)(v6 + v5) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v7);
      swift_release();
    }
    uint64_t v8 = *(void *)(*(void *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(void *)(v8 + 16) = v3;
    *(void *)(v8 + 24) = v4;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v9 = *(int *)(v2 + 96);
      uint64_t v10 = *(void *)(v2 + 88);
      type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
      swift_allocObject();
      uint64_t v11 = swift_retain();
      *(void *)(v10 + v9) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v11);
      swift_release();
    }
    uint64_t v12 = *(void *)(*(void *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(void *)(v12 + 16) = v3;
    *(void *)(v12 + 24) = v4;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

BOOL AspirePirPirPreprocessDbArgs.hasInputDatabase.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20));
  swift_beginAccess();
  return *(void *)(v1 + 24) != 0;
}

Swift::Void __swiftcall AspirePirPirPreprocessDbArgs.clearInputDatabase()()
{
  uint64_t v1 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    uint64_t v2 = swift_retain();
    *(void *)(v0 + v1) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v2);
    swift_release();
  }
  uint64_t v3 = *(void *)(v0 + v1);
  swift_beginAccess();
  *(void *)(v3 + 16) = 0;
  *(void *)(v3 + 24) = 0;
  swift_bridgeObjectRelease();
}

uint64_t AspirePirPirPreprocessDbArgs.valuesProtoPath.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20));
  swift_beginAccess();
  if (*(void *)(v1 + 40)) {
    uint64_t v2 = *(void *)(v1 + 32);
  }
  else {
    uint64_t v2 = 0;
  }
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t key path getter for AspirePirPirPreprocessDbArgs.valuesProtoPath : AspirePirPirPreprocessDbArgs@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20));
  swift_beginAccess();
  if (*(void *)(v3 + 40))
  {
    uint64_t v4 = *(void *)(v3 + 32);
    unint64_t v5 = *(void *)(v3 + 40);
  }
  else
  {
    uint64_t v4 = 0;
    unint64_t v5 = 0xE000000000000000;
  }
  *a2 = v4;
  a2[1] = v5;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for AspirePirPirPreprocessDbArgs.valuesProtoPath : AspirePirPirPreprocessDbArgs(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    uint64_t v6 = swift_retain();
    *(void *)(a2 + v5) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v6);
    swift_release();
  }
  uint64_t v7 = *(void *)(a2 + v5);
  swift_beginAccess();
  *(void *)(v7 + 32) = v4;
  *(void *)(v7 + 40) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t AspirePirPirPreprocessDbArgs.valuesProtoPath.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    uint64_t v6 = swift_retain();
    *(void *)(v2 + v5) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v6);
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v5);
  swift_beginAccess();
  *(void *)(v7 + 32) = a1;
  *(void *)(v7 + 40) = a2;
  return swift_bridgeObjectRelease();
}

void (*AspirePirPirPreprocessDbArgs.valuesProtoPath.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  if (*(void *)(v5 + 40))
  {
    uint64_t v6 = *(void *)(v5 + 32);
    unint64_t v7 = *(void *)(v5 + 40);
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0xE000000000000000;
  }
  v3[9] = v6;
  v3[10] = v7;
  swift_bridgeObjectRetain();
  return AspirePirPirPreprocessDbArgs.valuesProtoPath.modify;
}

void AspirePirPirPreprocessDbArgs.valuesProtoPath.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 72);
  uint64_t v4 = *(void *)(*a1 + 80);
  if (a2)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v5 = *(int *)(v2 + 96);
      uint64_t v6 = *(void *)(v2 + 88);
      type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
      swift_allocObject();
      uint64_t v7 = swift_retain();
      *(void *)(v6 + v5) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v7);
      swift_release();
    }
    uint64_t v8 = *(void *)(*(void *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(void *)(v8 + 32) = v3;
    *(void *)(v8 + 40) = v4;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v9 = *(int *)(v2 + 96);
      uint64_t v10 = *(void *)(v2 + 88);
      type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
      swift_allocObject();
      uint64_t v11 = swift_retain();
      *(void *)(v10 + v9) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v11);
      swift_release();
    }
    uint64_t v12 = *(void *)(*(void *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(void *)(v12 + 32) = v3;
    *(void *)(v12 + 40) = v4;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

BOOL AspirePirPirPreprocessDbArgs.hasValuesProtoPath.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20));
  swift_beginAccess();
  return *(void *)(v1 + 40) != 0;
}

Swift::Void __swiftcall AspirePirPirPreprocessDbArgs.clearValuesProtoPath()()
{
  uint64_t v1 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    uint64_t v2 = swift_retain();
    *(void *)(v0 + v1) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v2);
    swift_release();
  }
  uint64_t v3 = *(void *)(v0 + v1);
  swift_beginAccess();
  *(void *)(v3 + 32) = 0;
  *(void *)(v3 + 40) = 0;
  swift_bridgeObjectRelease();
}

uint64_t AspirePirPirPreprocessDbArgs.algorithm.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20));
  uint64_t result = swift_beginAccess();
  if (*(unsigned char *)(v3 + 57))
  {
    uint64_t v5 = 0;
    char v6 = 1;
  }
  else
  {
    uint64_t v5 = *(void *)(v3 + 48);
    char v6 = *(unsigned char *)(v3 + 56) & 1;
  }
  *(void *)a1 = v5;
  *(unsigned char *)(a1 + 8) = v6;
  return result;
}

uint64_t key path getter for AspirePirPirPreprocessDbArgs.algorithm : AspirePirPirPreprocessDbArgs@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20));
  uint64_t result = swift_beginAccess();
  uint64_t v5 = *(void *)(v3 + 48);
  char v6 = *(unsigned char *)(v3 + 56);
  char v7 = *(unsigned char *)(v3 + 57);
  if (v7) {
    uint64_t v5 = 0;
  }
  *(void *)a2 = v5;
  *(unsigned char *)(a2 + 8) = (v7 | v6) & 1;
  return result;
}

uint64_t key path setter for AspirePirPirPreprocessDbArgs.algorithm : AspirePirPirPreprocessDbArgs(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  char v4 = *((unsigned char *)a1 + 8);
  uint64_t v5 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    uint64_t v6 = swift_retain();
    *(void *)(a2 + v5) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v6);
    swift_release();
  }
  uint64_t v7 = *(void *)(a2 + v5);
  uint64_t result = swift_beginAccess();
  *(void *)(v7 + 48) = v3;
  *(unsigned char *)(v7 + 56) = v4;
  *(unsigned char *)(v7 + 57) = 0;
  return result;
}

uint64_t AspirePirPirPreprocessDbArgs.algorithm.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char v3 = *((unsigned char *)a1 + 8);
  uint64_t v4 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    uint64_t v5 = swift_retain();
    *(void *)(v1 + v4) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v5);
    swift_release();
  }
  uint64_t v6 = *(void *)(v1 + v4);
  uint64_t result = swift_beginAccess();
  *(void *)(v6 + 48) = v2;
  *(unsigned char *)(v6 + 56) = v3;
  *(unsigned char *)(v6 + 57) = 0;
  return result;
}

void (*AspirePirPirPreprocessDbArgs.algorithm.modify(void *a1))(uint64_t *a1, char a2)
{
  char v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[11] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  if (*(unsigned char *)(v5 + 57))
  {
    uint64_t v6 = 0;
    char v7 = 1;
  }
  else
  {
    uint64_t v6 = *(void *)(v5 + 48);
    char v7 = *(unsigned char *)(v5 + 56) & 1;
  }
  v3[9] = v6;
  *((unsigned char *)v3 + 80) = v7;
  return AspirePirPirPreprocessDbArgs.algorithm.modify;
}

void AspirePirPirPreprocessDbArgs.algorithm.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 72);
  char v5 = *(unsigned char *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 84);
    uint64_t v8 = *(void *)(v3 + 88);
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    uint64_t v9 = swift_retain();
    *(void *)(v8 + v7) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v9);
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 88) + *(int *)(v3 + 84));
  swift_beginAccess();
  *(void *)(v10 + 48) = v4;
  *(unsigned char *)(v10 + 56) = v5;
  *(unsigned char *)(v10 + 57) = 0;
  free((void *)v3);
}

BOOL AspirePirPirPreprocessDbArgs.hasAlgorithm.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20));
  swift_beginAccess();
  return (*(unsigned char *)(v1 + 57) & 1) == 0;
}

Swift::Void __swiftcall AspirePirPirPreprocessDbArgs.clearAlgorithm()()
{
  uint64_t v1 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    uint64_t v2 = swift_retain();
    *(void *)(v0 + v1) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v2);
    swift_release();
  }
  uint64_t v3 = *(void *)(v0 + v1);
  swift_beginAccess();
  *(void *)(v3 + 48) = 0;
  *(_WORD *)(v3 + 56) = 256;
}

uint64_t AspirePirPirPreprocessDbArgs.sharding.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20));
  uint64_t v4 = *(void *)(v3 + 64);
  uint64_t v5 = *(void *)(v3 + 72);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  char v6 = *(unsigned char *)(v3 + 80);
  *(unsigned char *)(a1 + 16) = v6;
  return outlined copy of AspirePirPirPreprocessDbArgs.OneOf_Sharding?(v4, v5, v6);
}

uint64_t key path setter for AspirePirPirPreprocessDbArgs.sharding : AspirePirPirPreprocessDbArgs(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  char v5 = *(unsigned char *)(a1 + 16);
  uint64_t v6 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  outlined copy of AspirePirPirPreprocessDbArgs.OneOf_Sharding?(v3, v4, v5);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    uint64_t v7 = swift_retain();
    *(void *)(a2 + v6) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v7);
    swift_release();
  }
  uint64_t v8 = *(void *)(a2 + v6);
  uint64_t v9 = *(void *)(v8 + 64);
  uint64_t v10 = *(void *)(v8 + 72);
  *(void *)(v8 + 64) = v3;
  *(void *)(v8 + 72) = v4;
  char v11 = *(unsigned char *)(v8 + 80);
  *(unsigned char *)(v8 + 80) = v5;
  return outlined consume of AspirePirPirPreprocessDbArgs.OneOf_Sharding?(v9, v10, v11);
}

uint64_t AspirePirPirPreprocessDbArgs.sharding.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  char v4 = *((unsigned char *)a1 + 16);
  uint64_t v5 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    uint64_t v6 = swift_retain();
    *(void *)(v1 + v5) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v6);
    swift_release();
  }
  uint64_t v7 = *(void *)(v1 + v5);
  uint64_t v8 = *(void *)(v7 + 64);
  uint64_t v9 = *(void *)(v7 + 72);
  *(void *)(v7 + 64) = v2;
  *(void *)(v7 + 72) = v3;
  char v10 = *(unsigned char *)(v7 + 80);
  *(unsigned char *)(v7 + 80) = v4;
  return outlined consume of AspirePirPirPreprocessDbArgs.OneOf_Sharding?(v8, v9, v10);
}

uint64_t (*AspirePirPirPreprocessDbArgs.sharding.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  *(_DWORD *)(a1 + 20) = v3;
  uint64_t v4 = *(void *)(v1 + v3);
  uint64_t v5 = *(void *)(v4 + 64);
  uint64_t v6 = *(void *)(v4 + 72);
  char v7 = *(unsigned char *)(v4 + 80);
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = v7;
  outlined copy of AspirePirPirPreprocessDbArgs.OneOf_Sharding?(v5, v6, v7);
  return AspirePirPirPreprocessDbArgs.sharding.modify;
}

uint64_t AspirePirPirPreprocessDbArgs.sharding.modify(uint64_t a1, char a2)
{
  uint64_t v3 = *(void *)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  char v4 = *(unsigned char *)(a1 + 16);
  uint64_t v5 = *(int *)(a1 + 20);
  uint64_t v6 = *(void *)(a1 + 24);
  if (a2)
  {
    outlined copy of AspirePirPirPreprocessDbArgs.OneOf_Sharding?(*(void *)a1, v2, v4);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
      swift_allocObject();
      uint64_t v7 = swift_retain();
      *(void *)(v6 + v5) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v7);
      swift_release();
    }
    uint64_t v8 = *(void *)(v6 + v5);
    uint64_t v9 = *(void *)(v8 + 64);
    uint64_t v10 = *(void *)(v8 + 72);
    *(void *)(v8 + 64) = v3;
    *(void *)(v8 + 72) = v2;
    char v11 = *(unsigned char *)(v8 + 80);
    *(unsigned char *)(v8 + 80) = v4;
    outlined consume of AspirePirPirPreprocessDbArgs.OneOf_Sharding?(v9, v10, v11);
    uint64_t v12 = v3;
    uint64_t v13 = v2;
    char v14 = v4;
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
      swift_allocObject();
      uint64_t v15 = swift_retain();
      *(void *)(v6 + v5) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v15);
      swift_release();
    }
    uint64_t v16 = *(void *)(v6 + v5);
    uint64_t v12 = *(void *)(v16 + 64);
    uint64_t v13 = *(void *)(v16 + 72);
    *(void *)(v16 + 64) = v3;
    *(void *)(v16 + 72) = v2;
    char v14 = *(unsigned char *)(v16 + 80);
    *(unsigned char *)(v16 + 80) = v4;
  }
  return outlined consume of AspirePirPirPreprocessDbArgs.OneOf_Sharding?(v12, v13, v14);
}

uint64_t AspirePirPirPreprocessDbArgs.numShards.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20));
  if (*(unsigned char *)(v1 + 80)) {
    return 0;
  }
  uint64_t v2 = *(void *)(v1 + 64);
  outlined copy of AspirePirPirPreprocessDbArgs.OneOf_Sharding(v2, *(void *)(v1 + 72), 0);
  return v2;
}

uint64_t key path getter for AspirePirPirPreprocessDbArgs.numShards : AspirePirPirPreprocessDbArgs@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result = type metadata accessor for AspirePirPirPreprocessDbArgs(0);
  uint64_t v5 = *(void *)(a1 + *(int *)(result + 20));
  if (*(unsigned char *)(v5 + 80))
  {
    LODWORD(v6) = 0;
  }
  else
  {
    uint64_t v6 = *(void *)(v5 + 64);
    uint64_t result = outlined copy of AspirePirPirPreprocessDbArgs.OneOf_Sharding(v6, *(void *)(v5 + 72), 0);
  }
  *a2 = v6;
  return result;
}

uint64_t AspirePirPirPreprocessDbArgs.numShards.setter(unsigned int a1)
{
  return AspirePirPirPreprocessDbArgs.numShards.setter(a1, 0);
}

uint64_t (*AspirePirPirPreprocessDbArgs.numShards.modify(uint64_t a1))(uint64_t *a1, uint64_t a2)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = *(void *)(v1 + v3);
  if (*(unsigned char *)(v4 + 80))
  {
    LODWORD(v5) = 0;
  }
  else
  {
    uint64_t v5 = *(void *)(v4 + 64);
    outlined copy of AspirePirPirPreprocessDbArgs.OneOf_Sharding(v5, *(void *)(v4 + 72), 0);
  }
  *(_DWORD *)(a1 + 8) = v5;
  return AspirePirPirPreprocessDbArgs.numShards.modify;
}

uint64_t AspirePirPirPreprocessDbArgs.numShards.modify(uint64_t *a1, uint64_t a2)
{
  return AspirePirPirPreprocessDbArgs.numShards.modify(a1, a2, 0);
}

uint64_t AspirePirPirPreprocessDbArgs.numEntriesPerShard.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20));
  if (*(unsigned char *)(v1 + 80) != 1) {
    return 0;
  }
  uint64_t v2 = *(void *)(v1 + 64);
  outlined copy of AspirePirPirPreprocessDbArgs.OneOf_Sharding(v2, *(void *)(v1 + 72), 1);
  return v2;
}

uint64_t key path getter for AspirePirPirPreprocessDbArgs.numEntriesPerShard : AspirePirPirPreprocessDbArgs@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result = type metadata accessor for AspirePirPirPreprocessDbArgs(0);
  uint64_t v5 = *(void *)(a1 + *(int *)(result + 20));
  if (*(unsigned char *)(v5 + 80) == 1)
  {
    uint64_t v6 = *(void *)(v5 + 64);
    uint64_t result = outlined copy of AspirePirPirPreprocessDbArgs.OneOf_Sharding(v6, *(void *)(v5 + 72), 1);
  }
  else
  {
    LODWORD(v6) = 0;
  }
  *a2 = v6;
  return result;
}

uint64_t AspirePirPirPreprocessDbArgs.numEntriesPerShard.setter(unsigned int a1)
{
  return AspirePirPirPreprocessDbArgs.numShards.setter(a1, 1);
}

uint64_t AspirePirPirPreprocessDbArgs.numShards.setter(unsigned int a1, char a2)
{
  uint64_t v5 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    uint64_t v6 = swift_retain();
    *(void *)(v2 + v5) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v6);
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v5);
  uint64_t v8 = *(void *)(v7 + 64);
  uint64_t v9 = *(void *)(v7 + 72);
  *(void *)(v7 + 64) = a1;
  *(void *)(v7 + 72) = 0;
  char v10 = *(unsigned char *)(v7 + 80);
  *(unsigned char *)(v7 + 80) = a2;
  return outlined consume of AspirePirPirPreprocessDbArgs.OneOf_Sharding?(v8, v9, v10);
}

uint64_t (*AspirePirPirPreprocessDbArgs.numEntriesPerShard.modify(uint64_t a1))(uint64_t *a1, uint64_t a2)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = *(void *)(v1 + v3);
  if (*(unsigned char *)(v4 + 80) == 1)
  {
    uint64_t v5 = *(void *)(v4 + 64);
    outlined copy of AspirePirPirPreprocessDbArgs.OneOf_Sharding(v5, *(void *)(v4 + 72), 1);
  }
  else
  {
    LODWORD(v5) = 0;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return AspirePirPirPreprocessDbArgs.numEntriesPerShard.modify;
}

uint64_t AspirePirPirPreprocessDbArgs.numEntriesPerShard.modify(uint64_t *a1, uint64_t a2)
{
  return AspirePirPirPreprocessDbArgs.numShards.modify(a1, a2, 1);
}

uint64_t AspirePirPirPreprocessDbArgs.numShards.modify(uint64_t *a1, uint64_t a2, char a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *((unsigned int *)a1 + 2);
  uint64_t v6 = *((int *)a1 + 3);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    uint64_t v7 = swift_retain();
    *(void *)(v4 + v6) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v7);
    swift_release();
  }
  uint64_t v8 = *(void *)(v4 + v6);
  uint64_t v9 = *(void *)(v8 + 64);
  uint64_t v10 = *(void *)(v8 + 72);
  *(void *)(v8 + 64) = v5;
  *(void *)(v8 + 72) = 0;
  char v11 = *(unsigned char *)(v8 + 80);
  *(unsigned char *)(v8 + 80) = a3;
  return outlined consume of AspirePirPirPreprocessDbArgs.OneOf_Sharding?(v9, v10, v11);
}

uint64_t AspirePirPirPreprocessDbArgs.shardID.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20));
  if (*(unsigned char *)(v1 + 80) != 2) {
    return 0;
  }
  uint64_t v2 = *(void *)(v1 + 64);
  outlined copy of AspirePirPirPreprocessDbArgs.OneOf_Sharding(v2, *(void *)(v1 + 72), 2);
  return v2;
}

uint64_t key path getter for AspirePirPirPreprocessDbArgs.shardID : AspirePirPirPreprocessDbArgs@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = type metadata accessor for AspirePirPirPreprocessDbArgs(0);
  uint64_t v5 = *(void *)(a1 + *(int *)(result + 20));
  if (*(unsigned char *)(v5 + 80) == 2)
  {
    uint64_t v7 = *(void *)(v5 + 64);
    uint64_t v6 = *(void *)(v5 + 72);
    uint64_t result = outlined copy of AspirePirPirPreprocessDbArgs.OneOf_Sharding(v7, v6, 2);
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0xE000000000000000;
  }
  *a2 = v7;
  a2[1] = v6;
  return result;
}

uint64_t AspirePirPirPreprocessDbArgs.shardID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    uint64_t v6 = swift_retain();
    *(void *)(v2 + v5) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v6);
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v5);
  uint64_t v8 = *(void *)(v7 + 64);
  uint64_t v9 = *(void *)(v7 + 72);
  *(void *)(v7 + 64) = a1;
  *(void *)(v7 + 72) = a2;
  char v10 = *(unsigned char *)(v7 + 80);
  *(unsigned char *)(v7 + 80) = 2;
  return outlined consume of AspirePirPirPreprocessDbArgs.OneOf_Sharding?(v8, v9, v10);
}

uint64_t (*AspirePirPirPreprocessDbArgs.shardID.modify(uint64_t a1))(uint64_t *a1, char a2)
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  *(_DWORD *)(a1 + 24) = v3;
  uint64_t v4 = *(void *)(v1 + v3);
  if (*(unsigned char *)(v4 + 80) == 2)
  {
    uint64_t v6 = *(void *)(v4 + 64);
    uint64_t v5 = *(void *)(v4 + 72);
    outlined copy of AspirePirPirPreprocessDbArgs.OneOf_Sharding(v6, v5, 2);
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0xE000000000000000;
  }
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v5;
  return AspirePirPirPreprocessDbArgs.shardID.modify;
}

uint64_t AspirePirPirPreprocessDbArgs.shardID.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v4 = *((int *)a1 + 6);
  uint64_t v5 = a1[2];
  if (a2)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
      swift_allocObject();
      uint64_t v6 = swift_retain();
      *(void *)(v5 + v4) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v6);
      swift_release();
    }
    uint64_t v7 = *(void *)(v5 + v4);
    uint64_t v8 = *(void *)(v7 + 64);
    uint64_t v9 = *(void *)(v7 + 72);
    *(void *)(v7 + 64) = v3;
    *(void *)(v7 + 72) = v2;
    char v10 = *(unsigned char *)(v7 + 80);
    *(unsigned char *)(v7 + 80) = 2;
    outlined consume of AspirePirPirPreprocessDbArgs.OneOf_Sharding?(v8, v9, v10);
    return swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
      swift_allocObject();
      uint64_t v12 = swift_retain();
      *(void *)(v5 + v4) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v12);
      swift_release();
    }
    uint64_t v13 = *(void *)(v5 + v4);
    uint64_t v14 = *(void *)(v13 + 64);
    uint64_t v15 = *(void *)(v13 + 72);
    *(void *)(v13 + 64) = v3;
    *(void *)(v13 + 72) = v2;
    char v16 = *(unsigned char *)(v13 + 80);
    *(unsigned char *)(v13 + 80) = 2;
    return outlined consume of AspirePirPirPreprocessDbArgs.OneOf_Sharding?(v14, v15, v16);
  }
}

uint64_t AspirePirPirPreprocessDbArgs.predefinedEncryptionParameters.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20));
  swift_beginAccess();
  if (*(void *)(v1 + 96)) {
    uint64_t v2 = *(void *)(v1 + 88);
  }
  else {
    uint64_t v2 = 0;
  }
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t key path getter for AspirePirPirPreprocessDbArgs.predefinedEncryptionParameters : AspirePirPirPreprocessDbArgs@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20));
  swift_beginAccess();
  if (*(void *)(v3 + 96))
  {
    uint64_t v4 = *(void *)(v3 + 88);
    unint64_t v5 = *(void *)(v3 + 96);
  }
  else
  {
    uint64_t v4 = 0;
    unint64_t v5 = 0xE000000000000000;
  }
  *a2 = v4;
  a2[1] = v5;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for AspirePirPirPreprocessDbArgs.predefinedEncryptionParameters : AspirePirPirPreprocessDbArgs(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    uint64_t v6 = swift_retain();
    *(void *)(a2 + v5) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v6);
    swift_release();
  }
  uint64_t v7 = *(void *)(a2 + v5);
  swift_beginAccess();
  *(void *)(v7 + 88) = v4;
  *(void *)(v7 + 96) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t AspirePirPirPreprocessDbArgs.predefinedEncryptionParameters.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    uint64_t v6 = swift_retain();
    *(void *)(v2 + v5) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v6);
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v5);
  swift_beginAccess();
  *(void *)(v7 + 88) = a1;
  *(void *)(v7 + 96) = a2;
  return swift_bridgeObjectRelease();
}

void (*AspirePirPirPreprocessDbArgs.predefinedEncryptionParameters.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  if (*(void *)(v5 + 96))
  {
    uint64_t v6 = *(void *)(v5 + 88);
    unint64_t v7 = *(void *)(v5 + 96);
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0xE000000000000000;
  }
  v3[9] = v6;
  v3[10] = v7;
  swift_bridgeObjectRetain();
  return AspirePirPirPreprocessDbArgs.predefinedEncryptionParameters.modify;
}

void AspirePirPirPreprocessDbArgs.predefinedEncryptionParameters.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 72);
  uint64_t v4 = *(void *)(*a1 + 80);
  if (a2)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v5 = *(int *)(v2 + 96);
      uint64_t v6 = *(void *)(v2 + 88);
      type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
      swift_allocObject();
      uint64_t v7 = swift_retain();
      *(void *)(v6 + v5) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v7);
      swift_release();
    }
    uint64_t v8 = *(void *)(*(void *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(void *)(v8 + 88) = v3;
    *(void *)(v8 + 96) = v4;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v9 = *(int *)(v2 + 96);
      uint64_t v10 = *(void *)(v2 + 88);
      type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
      swift_allocObject();
      uint64_t v11 = swift_retain();
      *(void *)(v10 + v9) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v11);
      swift_release();
    }
    uint64_t v12 = *(void *)(*(void *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(void *)(v12 + 88) = v3;
    *(void *)(v12 + 96) = v4;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

BOOL AspirePirPirPreprocessDbArgs.hasPredefinedEncryptionParameters.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20));
  swift_beginAccess();
  return *(void *)(v1 + 96) != 0;
}

Swift::Void __swiftcall AspirePirPirPreprocessDbArgs.clearPredefinedEncryptionParameters()()
{
  uint64_t v1 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    uint64_t v2 = swift_retain();
    *(void *)(v0 + v1) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v2);
    swift_release();
  }
  uint64_t v3 = *(void *)(v0 + v1);
  swift_beginAccess();
  *(void *)(v3 + 88) = 0;
  *(void *)(v3 + 96) = 0;
  swift_bridgeObjectRelease();
}

uint64_t AspirePirPirPreprocessDbArgs.heScheme.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20));
  uint64_t result = swift_beginAccess();
  if (*(unsigned char *)(v3 + 113))
  {
    uint64_t v5 = 0;
    char v6 = 1;
  }
  else
  {
    uint64_t v5 = *(void *)(v3 + 104);
    char v6 = *(unsigned char *)(v3 + 112) & 1;
  }
  *(void *)a1 = v5;
  *(unsigned char *)(a1 + 8) = v6;
  return result;
}

uint64_t key path getter for AspirePirPirPreprocessDbArgs.heScheme : AspirePirPirPreprocessDbArgs@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20));
  uint64_t result = swift_beginAccess();
  uint64_t v5 = *(void *)(v3 + 104);
  char v6 = *(unsigned char *)(v3 + 112);
  char v7 = *(unsigned char *)(v3 + 113);
  if (v7) {
    uint64_t v5 = 0;
  }
  *(void *)a2 = v5;
  *(unsigned char *)(a2 + 8) = (v7 | v6) & 1;
  return result;
}

uint64_t key path setter for AspirePirPirPreprocessDbArgs.heScheme : AspirePirPirPreprocessDbArgs(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  char v4 = *((unsigned char *)a1 + 8);
  uint64_t v5 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    uint64_t v6 = swift_retain();
    *(void *)(a2 + v5) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v6);
    swift_release();
  }
  uint64_t v7 = *(void *)(a2 + v5);
  uint64_t result = swift_beginAccess();
  *(void *)(v7 + 104) = v3;
  *(unsigned char *)(v7 + 112) = v4;
  *(unsigned char *)(v7 + 113) = 0;
  return result;
}

uint64_t AspirePirPirPreprocessDbArgs.heScheme.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char v3 = *((unsigned char *)a1 + 8);
  uint64_t v4 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    uint64_t v5 = swift_retain();
    *(void *)(v1 + v4) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v5);
    swift_release();
  }
  uint64_t v6 = *(void *)(v1 + v4);
  uint64_t result = swift_beginAccess();
  *(void *)(v6 + 104) = v2;
  *(unsigned char *)(v6 + 112) = v3;
  *(unsigned char *)(v6 + 113) = 0;
  return result;
}

void (*AspirePirPirPreprocessDbArgs.heScheme.modify(void *a1))(uint64_t *a1, char a2)
{
  char v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[11] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  if (*(unsigned char *)(v5 + 113))
  {
    uint64_t v6 = 0;
    char v7 = 1;
  }
  else
  {
    uint64_t v6 = *(void *)(v5 + 104);
    char v7 = *(unsigned char *)(v5 + 112) & 1;
  }
  v3[9] = v6;
  *((unsigned char *)v3 + 80) = v7;
  return AspirePirPirPreprocessDbArgs.heScheme.modify;
}

void AspirePirPirPreprocessDbArgs.heScheme.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 72);
  char v5 = *(unsigned char *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 84);
    uint64_t v8 = *(void *)(v3 + 88);
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    uint64_t v9 = swift_retain();
    *(void *)(v8 + v7) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v9);
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 88) + *(int *)(v3 + 84));
  swift_beginAccess();
  *(void *)(v10 + 104) = v4;
  *(unsigned char *)(v10 + 112) = v5;
  *(unsigned char *)(v10 + 113) = 0;
  free((void *)v3);
}

BOOL AspirePirPirPreprocessDbArgs.hasHeScheme.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20));
  swift_beginAccess();
  return (*(unsigned char *)(v1 + 113) & 1) == 0;
}

Swift::Void __swiftcall AspirePirPirPreprocessDbArgs.clearHeScheme()()
{
  uint64_t v1 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    uint64_t v2 = swift_retain();
    *(void *)(v0 + v1) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v2);
    swift_release();
  }
  uint64_t v3 = *(void *)(v0 + v1);
  swift_beginAccess();
  *(void *)(v3 + 104) = 0;
  *(_WORD *)(v3 + 112) = 256;
}

uint64_t AspirePirPirPreprocessDbArgs.outputDatabase.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20));
  swift_beginAccess();
  if (*(void *)(v1 + 128)) {
    uint64_t v2 = *(void *)(v1 + 120);
  }
  else {
    uint64_t v2 = 0;
  }
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t key path getter for AspirePirPirPreprocessDbArgs.outputDatabase : AspirePirPirPreprocessDbArgs@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20));
  swift_beginAccess();
  if (*(void *)(v3 + 128))
  {
    uint64_t v4 = *(void *)(v3 + 120);
    unint64_t v5 = *(void *)(v3 + 128);
  }
  else
  {
    uint64_t v4 = 0;
    unint64_t v5 = 0xE000000000000000;
  }
  *a2 = v4;
  a2[1] = v5;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for AspirePirPirPreprocessDbArgs.outputDatabase : AspirePirPirPreprocessDbArgs(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    uint64_t v6 = swift_retain();
    *(void *)(a2 + v5) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v6);
    swift_release();
  }
  uint64_t v7 = *(void *)(a2 + v5);
  swift_beginAccess();
  *(void *)(v7 + 120) = v4;
  *(void *)(v7 + 128) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t AspirePirPirPreprocessDbArgs.outputDatabase.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    uint64_t v6 = swift_retain();
    *(void *)(v2 + v5) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v6);
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v5);
  swift_beginAccess();
  *(void *)(v7 + 120) = a1;
  *(void *)(v7 + 128) = a2;
  return swift_bridgeObjectRelease();
}

void (*AspirePirPirPreprocessDbArgs.outputDatabase.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  if (*(void *)(v5 + 128))
  {
    uint64_t v6 = *(void *)(v5 + 120);
    unint64_t v7 = *(void *)(v5 + 128);
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0xE000000000000000;
  }
  v3[9] = v6;
  v3[10] = v7;
  swift_bridgeObjectRetain();
  return AspirePirPirPreprocessDbArgs.outputDatabase.modify;
}

void AspirePirPirPreprocessDbArgs.outputDatabase.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 72);
  uint64_t v4 = *(void *)(*a1 + 80);
  if (a2)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v5 = *(int *)(v2 + 96);
      uint64_t v6 = *(void *)(v2 + 88);
      type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
      swift_allocObject();
      uint64_t v7 = swift_retain();
      *(void *)(v6 + v5) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v7);
      swift_release();
    }
    uint64_t v8 = *(void *)(*(void *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(void *)(v8 + 120) = v3;
    *(void *)(v8 + 128) = v4;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v9 = *(int *)(v2 + 96);
      uint64_t v10 = *(void *)(v2 + 88);
      type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
      swift_allocObject();
      uint64_t v11 = swift_retain();
      *(void *)(v10 + v9) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v11);
      swift_release();
    }
    uint64_t v12 = *(void *)(*(void *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(void *)(v12 + 120) = v3;
    *(void *)(v12 + 128) = v4;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

BOOL AspirePirPirPreprocessDbArgs.hasOutputDatabase.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20));
  swift_beginAccess();
  return *(void *)(v1 + 128) != 0;
}

Swift::Void __swiftcall AspirePirPirPreprocessDbArgs.clearOutputDatabase()()
{
  uint64_t v1 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    uint64_t v2 = swift_retain();
    *(void *)(v0 + v1) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v2);
    swift_release();
  }
  uint64_t v3 = *(void *)(v0 + v1);
  swift_beginAccess();
  *(void *)(v3 + 120) = 0;
  *(void *)(v3 + 128) = 0;
  swift_bridgeObjectRelease();
}

uint64_t AspirePirPirPreprocessDbArgs.outputPirParameters.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20));
  swift_beginAccess();
  if (*(void *)(v1 + 144)) {
    uint64_t v2 = *(void *)(v1 + 136);
  }
  else {
    uint64_t v2 = 0;
  }
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t key path getter for AspirePirPirPreprocessDbArgs.outputPirParameters : AspirePirPirPreprocessDbArgs@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20));
  swift_beginAccess();
  if (*(void *)(v3 + 144))
  {
    uint64_t v4 = *(void *)(v3 + 136);
    unint64_t v5 = *(void *)(v3 + 144);
  }
  else
  {
    uint64_t v4 = 0;
    unint64_t v5 = 0xE000000000000000;
  }
  *a2 = v4;
  a2[1] = v5;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for AspirePirPirPreprocessDbArgs.outputPirParameters : AspirePirPirPreprocessDbArgs(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    uint64_t v6 = swift_retain();
    *(void *)(a2 + v5) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v6);
    swift_release();
  }
  uint64_t v7 = *(void *)(a2 + v5);
  swift_beginAccess();
  *(void *)(v7 + 136) = v4;
  *(void *)(v7 + 144) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t AspirePirPirPreprocessDbArgs.outputPirParameters.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    uint64_t v6 = swift_retain();
    *(void *)(v2 + v5) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v6);
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v5);
  swift_beginAccess();
  *(void *)(v7 + 136) = a1;
  *(void *)(v7 + 144) = a2;
  return swift_bridgeObjectRelease();
}

void (*AspirePirPirPreprocessDbArgs.outputPirParameters.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  if (*(void *)(v5 + 144))
  {
    uint64_t v6 = *(void *)(v5 + 136);
    unint64_t v7 = *(void *)(v5 + 144);
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0xE000000000000000;
  }
  v3[9] = v6;
  v3[10] = v7;
  swift_bridgeObjectRetain();
  return AspirePirPirPreprocessDbArgs.outputPirParameters.modify;
}

void AspirePirPirPreprocessDbArgs.outputPirParameters.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 72);
  uint64_t v4 = *(void *)(*a1 + 80);
  if (a2)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v5 = *(int *)(v2 + 96);
      uint64_t v6 = *(void *)(v2 + 88);
      type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
      swift_allocObject();
      uint64_t v7 = swift_retain();
      *(void *)(v6 + v5) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v7);
      swift_release();
    }
    uint64_t v8 = *(void *)(*(void *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(void *)(v8 + 136) = v3;
    *(void *)(v8 + 144) = v4;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v9 = *(int *)(v2 + 96);
      uint64_t v10 = *(void *)(v2 + 88);
      type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
      swift_allocObject();
      uint64_t v11 = swift_retain();
      *(void *)(v10 + v9) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v11);
      swift_release();
    }
    uint64_t v12 = *(void *)(*(void *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(void *)(v12 + 136) = v3;
    *(void *)(v12 + 144) = v4;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

BOOL AspirePirPirPreprocessDbArgs.hasOutputPirParameters.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20));
  swift_beginAccess();
  return *(void *)(v1 + 144) != 0;
}

Swift::Void __swiftcall AspirePirPirPreprocessDbArgs.clearOutputPirParameters()()
{
  uint64_t v1 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    uint64_t v2 = swift_retain();
    *(void *)(v0 + v1) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v2);
    swift_release();
  }
  uint64_t v3 = *(void *)(v0 + v1);
  swift_beginAccess();
  *(void *)(v3 + 136) = 0;
  *(void *)(v3 + 144) = 0;
  swift_bridgeObjectRelease();
}

uint64_t AspirePirPirPreprocessDbArgs.outputKeyConfig.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20));
  swift_beginAccess();
  if (*(void *)(v1 + 160)) {
    uint64_t v2 = *(void *)(v1 + 152);
  }
  else {
    uint64_t v2 = 0;
  }
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t key path getter for AspirePirPirPreprocessDbArgs.outputKeyConfig : AspirePirPirPreprocessDbArgs@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20));
  swift_beginAccess();
  if (*(void *)(v3 + 160))
  {
    uint64_t v4 = *(void *)(v3 + 152);
    unint64_t v5 = *(void *)(v3 + 160);
  }
  else
  {
    uint64_t v4 = 0;
    unint64_t v5 = 0xE000000000000000;
  }
  *a2 = v4;
  a2[1] = v5;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for AspirePirPirPreprocessDbArgs.outputKeyConfig : AspirePirPirPreprocessDbArgs(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    uint64_t v6 = swift_retain();
    *(void *)(a2 + v5) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v6);
    swift_release();
  }
  uint64_t v7 = *(void *)(a2 + v5);
  swift_beginAccess();
  *(void *)(v7 + 152) = v4;
  *(void *)(v7 + 160) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t AspirePirPirPreprocessDbArgs.outputKeyConfig.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    uint64_t v6 = swift_retain();
    *(void *)(v2 + v5) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v6);
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v5);
  swift_beginAccess();
  *(void *)(v7 + 152) = a1;
  *(void *)(v7 + 160) = a2;
  return swift_bridgeObjectRelease();
}

void (*AspirePirPirPreprocessDbArgs.outputKeyConfig.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  if (*(void *)(v5 + 160))
  {
    uint64_t v6 = *(void *)(v5 + 152);
    unint64_t v7 = *(void *)(v5 + 160);
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0xE000000000000000;
  }
  v3[9] = v6;
  v3[10] = v7;
  swift_bridgeObjectRetain();
  return AspirePirPirPreprocessDbArgs.outputKeyConfig.modify;
}

void AspirePirPirPreprocessDbArgs.outputKeyConfig.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 72);
  uint64_t v4 = *(void *)(*a1 + 80);
  if (a2)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v5 = *(int *)(v2 + 96);
      uint64_t v6 = *(void *)(v2 + 88);
      type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
      swift_allocObject();
      uint64_t v7 = swift_retain();
      *(void *)(v6 + v5) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v7);
      swift_release();
    }
    uint64_t v8 = *(void *)(*(void *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(void *)(v8 + 152) = v3;
    *(void *)(v8 + 160) = v4;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v9 = *(int *)(v2 + 96);
      uint64_t v10 = *(void *)(v2 + 88);
      type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
      swift_allocObject();
      uint64_t v11 = swift_retain();
      *(void *)(v10 + v9) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v11);
      swift_release();
    }
    uint64_t v12 = *(void *)(*(void *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(void *)(v12 + 152) = v3;
    *(void *)(v12 + 160) = v4;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

BOOL AspirePirPirPreprocessDbArgs.hasOutputKeyConfig.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20));
  swift_beginAccess();
  return *(void *)(v1 + 160) != 0;
}

Swift::Void __swiftcall AspirePirPirPreprocessDbArgs.clearOutputKeyConfig()()
{
  uint64_t v1 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    uint64_t v2 = swift_retain();
    *(void *)(v0 + v1) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v2);
    swift_release();
  }
  uint64_t v3 = *(void *)(v0 + v1);
  swift_beginAccess();
  *(void *)(v3 + 152) = 0;
  *(void *)(v3 + 160) = 0;
  swift_bridgeObjectRelease();
}

uint64_t AspirePirPirPreprocessDbArgs.keyCompressionStrategy.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20));
  uint64_t result = swift_beginAccess();
  if (*(unsigned char *)(v3 + 177))
  {
    uint64_t v5 = 0;
    char v6 = 1;
  }
  else
  {
    uint64_t v5 = *(void *)(v3 + 168);
    char v6 = *(unsigned char *)(v3 + 176) & 1;
  }
  *(void *)a1 = v5;
  *(unsigned char *)(a1 + 8) = v6;
  return result;
}

uint64_t key path getter for AspirePirPirPreprocessDbArgs.keyCompressionStrategy : AspirePirPirPreprocessDbArgs@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20));
  uint64_t result = swift_beginAccess();
  uint64_t v5 = *(void *)(v3 + 168);
  char v6 = *(unsigned char *)(v3 + 176);
  char v7 = *(unsigned char *)(v3 + 177);
  if (v7) {
    uint64_t v5 = 0;
  }
  *(void *)a2 = v5;
  *(unsigned char *)(a2 + 8) = (v7 | v6) & 1;
  return result;
}

uint64_t key path setter for AspirePirPirPreprocessDbArgs.keyCompressionStrategy : AspirePirPirPreprocessDbArgs(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  char v4 = *((unsigned char *)a1 + 8);
  uint64_t v5 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    uint64_t v6 = swift_retain();
    *(void *)(a2 + v5) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v6);
    swift_release();
  }
  uint64_t v7 = *(void *)(a2 + v5);
  uint64_t result = swift_beginAccess();
  *(void *)(v7 + 168) = v3;
  *(unsigned char *)(v7 + 176) = v4;
  *(unsigned char *)(v7 + 177) = 0;
  return result;
}

uint64_t AspirePirPirPreprocessDbArgs.keyCompressionStrategy.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char v3 = *((unsigned char *)a1 + 8);
  uint64_t v4 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    uint64_t v5 = swift_retain();
    *(void *)(v1 + v4) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v5);
    swift_release();
  }
  uint64_t v6 = *(void *)(v1 + v4);
  uint64_t result = swift_beginAccess();
  *(void *)(v6 + 168) = v2;
  *(unsigned char *)(v6 + 176) = v3;
  *(unsigned char *)(v6 + 177) = 0;
  return result;
}

void (*AspirePirPirPreprocessDbArgs.keyCompressionStrategy.modify(void *a1))(uint64_t *a1, char a2)
{
  char v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[11] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  if (*(unsigned char *)(v5 + 177))
  {
    uint64_t v6 = 0;
    char v7 = 1;
  }
  else
  {
    uint64_t v6 = *(void *)(v5 + 168);
    char v7 = *(unsigned char *)(v5 + 176) & 1;
  }
  v3[9] = v6;
  *((unsigned char *)v3 + 80) = v7;
  return AspirePirPirPreprocessDbArgs.keyCompressionStrategy.modify;
}

void AspirePirPirPreprocessDbArgs.keyCompressionStrategy.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 72);
  char v5 = *(unsigned char *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 84);
    uint64_t v8 = *(void *)(v3 + 88);
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    uint64_t v9 = swift_retain();
    *(void *)(v8 + v7) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v9);
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 88) + *(int *)(v3 + 84));
  swift_beginAccess();
  *(void *)(v10 + 168) = v4;
  *(unsigned char *)(v10 + 176) = v5;
  *(unsigned char *)(v10 + 177) = 0;
  free((void *)v3);
}

BOOL AspirePirPirPreprocessDbArgs.hasKeyCompressionStrategy.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20));
  swift_beginAccess();
  return (*(unsigned char *)(v1 + 177) & 1) == 0;
}

Swift::Void __swiftcall AspirePirPirPreprocessDbArgs.clearKeyCompressionStrategy()()
{
  uint64_t v1 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    uint64_t v2 = swift_retain();
    *(void *)(v0 + v1) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v2);
    swift_release();
  }
  uint64_t v3 = *(void *)(v0 + v1);
  swift_beginAccess();
  *(void *)(v3 + 168) = 0;
  *(_WORD *)(v3 + 176) = 256;
}

uint64_t AspirePirPirPreprocessDbArgs.splitLargeEntry.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20));
  swift_beginAccess();
  return *(unsigned char *)(v1 + 178) & 1;
}

uint64_t key path setter for AspirePirPirPreprocessDbArgs.splitLargeEntry : AspirePirPirPreprocessDbArgs(char *a1, uint64_t a2)
{
  char v3 = *a1;
  uint64_t v4 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    uint64_t v5 = swift_retain();
    *(void *)(a2 + v4) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v5);
    swift_release();
  }
  uint64_t v6 = *(void *)(a2 + v4);
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v6 + 178) = v3;
  return result;
}

uint64_t AspirePirPirPreprocessDbArgs.splitLargeEntry.setter(char a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    uint64_t v4 = swift_retain();
    *(void *)(v1 + v3) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v4);
    swift_release();
  }
  uint64_t v5 = *(void *)(v1 + v3);
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v5 + 178) = a1 & 1;
  return result;
}

void (*AspirePirPirPreprocessDbArgs.splitLargeEntry.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  *((unsigned char *)v3 + 84) = *(unsigned char *)(v5 + 178) & 1;
  return AspirePirPirPreprocessDbArgs.splitLargeEntry.modify;
}

void AspirePirPirPreprocessDbArgs.splitLargeEntry.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = *(unsigned char *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 80);
    uint64_t v7 = *(void *)(v3 + 72);
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    uint64_t v8 = swift_retain();
    *(void *)(v7 + v6) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v8);
    swift_release();
  }
LABEL_4:
  uint64_t v9 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80));
  swift_beginAccess();
  *(unsigned char *)(v9 + 178) = v4;
  free((void *)v3);
}

BOOL AspirePirPirPreprocessDbArgs.hasSplitLargeEntry.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20));
  swift_beginAccess();
  return *(unsigned char *)(v1 + 178) != 2;
}

Swift::Void __swiftcall AspirePirPirPreprocessDbArgs.clearSplitLargeEntry()()
{
  uint64_t v1 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    uint64_t v2 = swift_retain();
    *(void *)(v0 + v1) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v2);
    swift_release();
  }
  uint64_t v3 = *(void *)(v0 + v1);
  swift_beginAccess();
  *(unsigned char *)(v3 + 178) = 2;
}

uint64_t AspirePirPirPreprocessDbArgs.skipLargeEntrySize.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20));
  swift_beginAccess();
  if (*(unsigned char *)(v1 + 184)) {
    return 0;
  }
  else {
    return *(unsigned int *)(v1 + 180);
  }
}

uint64_t key path setter for AspirePirPirPreprocessDbArgs.skipLargeEntrySize : AspirePirPirPreprocessDbArgs(int *a1, uint64_t a2)
{
  int v3 = *a1;
  uint64_t v4 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    uint64_t v5 = swift_retain();
    *(void *)(a2 + v4) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v5);
    swift_release();
  }
  uint64_t v6 = *(void *)(a2 + v4);
  uint64_t result = swift_beginAccess();
  *(_DWORD *)(v6 + 180) = v3;
  *(unsigned char *)(v6 + 184) = 0;
  return result;
}

uint64_t AspirePirPirPreprocessDbArgs.skipLargeEntrySize.setter(int a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    uint64_t v4 = swift_retain();
    *(void *)(v1 + v3) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v4);
    swift_release();
  }
  uint64_t v5 = *(void *)(v1 + v3);
  uint64_t result = swift_beginAccess();
  *(_DWORD *)(v5 + 180) = a1;
  *(unsigned char *)(v5 + 184) = 0;
  return result;
}

void (*AspirePirPirPreprocessDbArgs.skipLargeEntrySize.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  int v6 = *(_DWORD *)(v5 + 180);
  if (*(unsigned char *)(v5 + 184)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return AspirePirPirPreprocessDbArgs.skipLargeEntrySize.modify;
}

void AspirePirPirPreprocessDbArgs.skipLargeEntrySize.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  int v4 = *(_DWORD *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 84);
    uint64_t v7 = *(void *)(v3 + 72);
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    uint64_t v8 = swift_retain();
    *(void *)(v7 + v6) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v8);
    swift_release();
  }
LABEL_4:
  uint64_t v9 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess();
  *(_DWORD *)(v9 + 180) = v4;
  *(unsigned char *)(v9 + 184) = 0;
  free((void *)v3);
}

BOOL AspirePirPirPreprocessDbArgs.hasSkipLargeEntrySize.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20));
  swift_beginAccess();
  return (*(unsigned char *)(v1 + 184) & 1) == 0;
}

Swift::Void __swiftcall AspirePirPirPreprocessDbArgs.clearSkipLargeEntrySize()()
{
  uint64_t v1 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    uint64_t v2 = swift_retain();
    *(void *)(v0 + v1) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v2);
    swift_release();
  }
  uint64_t v3 = *(void *)(v0 + v1);
  swift_beginAccess();
  *(_DWORD *)(v3 + 180) = 0;
  *(unsigned char *)(v3 + 184) = 1;
}

uint64_t AspirePirPirPreprocessDbArgs.unevenDimensions.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20));
  swift_beginAccess();
  return *(unsigned char *)(v1 + 185) & 1;
}

uint64_t key path setter for AspirePirPirPreprocessDbArgs.unevenDimensions : AspirePirPirPreprocessDbArgs(char *a1, uint64_t a2)
{
  char v3 = *a1;
  uint64_t v4 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    uint64_t v5 = swift_retain();
    *(void *)(a2 + v4) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v5);
    swift_release();
  }
  uint64_t v6 = *(void *)(a2 + v4);
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v6 + 185) = v3;
  return result;
}

uint64_t AspirePirPirPreprocessDbArgs.unevenDimensions.setter(char a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    uint64_t v4 = swift_retain();
    *(void *)(v1 + v3) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v4);
    swift_release();
  }
  uint64_t v5 = *(void *)(v1 + v3);
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v5 + 185) = a1 & 1;
  return result;
}

void (*AspirePirPirPreprocessDbArgs.unevenDimensions.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  *((unsigned char *)v3 + 84) = *(unsigned char *)(v5 + 185) & 1;
  return AspirePirPirPreprocessDbArgs.unevenDimensions.modify;
}

void AspirePirPirPreprocessDbArgs.unevenDimensions.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = *(unsigned char *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 80);
    uint64_t v7 = *(void *)(v3 + 72);
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    uint64_t v8 = swift_retain();
    *(void *)(v7 + v6) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v8);
    swift_release();
  }
LABEL_4:
  uint64_t v9 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80));
  swift_beginAccess();
  *(unsigned char *)(v9 + 185) = v4;
  free((void *)v3);
}

BOOL AspirePirPirPreprocessDbArgs.hasUnevenDimensions.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20));
  swift_beginAccess();
  return *(unsigned char *)(v1 + 185) != 2;
}

Swift::Void __swiftcall AspirePirPirPreprocessDbArgs.clearUnevenDimensions()()
{
  uint64_t v1 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    uint64_t v2 = swift_retain();
    *(void *)(v0 + v1) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v2);
    swift_release();
  }
  uint64_t v3 = *(void *)(v0 + v1);
  swift_beginAccess();
  *(unsigned char *)(v3 + 185) = 2;
}

uint64_t AspirePirPirPreprocessDbArgs.noValidate.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20));
  swift_beginAccess();
  return *(unsigned char *)(v1 + 186) & 1;
}

uint64_t key path setter for AspirePirPirPreprocessDbArgs.noValidate : AspirePirPirPreprocessDbArgs(char *a1, uint64_t a2)
{
  char v3 = *a1;
  uint64_t v4 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    uint64_t v5 = swift_retain();
    *(void *)(a2 + v4) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v5);
    swift_release();
  }
  uint64_t v6 = *(void *)(a2 + v4);
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v6 + 186) = v3;
  return result;
}

uint64_t AspirePirPirPreprocessDbArgs.noValidate.setter(char a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    uint64_t v4 = swift_retain();
    *(void *)(v1 + v3) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v4);
    swift_release();
  }
  uint64_t v5 = *(void *)(v1 + v3);
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v5 + 186) = a1 & 1;
  return result;
}

void (*AspirePirPirPreprocessDbArgs.noValidate.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  *((unsigned char *)v3 + 84) = *(unsigned char *)(v5 + 186) & 1;
  return AspirePirPirPreprocessDbArgs.noValidate.modify;
}

void AspirePirPirPreprocessDbArgs.noValidate.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = *(unsigned char *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 80);
    uint64_t v7 = *(void *)(v3 + 72);
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    uint64_t v8 = swift_retain();
    *(void *)(v7 + v6) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v8);
    swift_release();
  }
LABEL_4:
  uint64_t v9 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80));
  swift_beginAccess();
  *(unsigned char *)(v9 + 186) = v4;
  free((void *)v3);
}

BOOL AspirePirPirPreprocessDbArgs.hasNoValidate.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20));
  swift_beginAccess();
  return *(unsigned char *)(v1 + 186) != 2;
}

Swift::Void __swiftcall AspirePirPirPreprocessDbArgs.clearNoValidate()()
{
  uint64_t v1 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    uint64_t v2 = swift_retain();
    *(void *)(v0 + v1) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v2);
    swift_release();
  }
  uint64_t v3 = *(void *)(v0 + v1);
  swift_beginAccess();
  *(unsigned char *)(v3 + 186) = 2;
}

uint64_t AspirePirPirPreprocessDbArgs.command.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20))
     + OBJC_IVAR____TtCV8CipherML28AspirePirPirPreprocessDbArgsP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__command;
  swift_beginAccess();
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v6, (uint64_t)v5, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand?);
  uint64_t v7 = type metadata accessor for AspirePirPirPreprocessDbCommand(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of AspirePirPIRShardingFunction((uint64_t)v5, a1, type metadata accessor for AspirePirPirPreprocessDbCommand);
  }
  uint64_t v8 = type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(a1, 1, 1, v8);
  UnknownStorage.init()();
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand?);
}

uint64_t key path getter for AspirePirPirPreprocessDbArgs.command : AspirePirPirPreprocessDbArgs@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(a1 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20))
     + OBJC_IVAR____TtCV8CipherML28AspirePirPirPreprocessDbArgsP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__command;
  swift_beginAccess();
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v7, (uint64_t)v6, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand?);
  uint64_t v8 = type metadata accessor for AspirePirPirPreprocessDbCommand(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v6, 1, v8) != 1) {
    return outlined init with take of AspirePirPIRShardingFunction((uint64_t)v6, a2, type metadata accessor for AspirePirPirPreprocessDbCommand);
  }
  uint64_t v9 = type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(a2, 1, 1, v9);
  UnknownStorage.init()();
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand?);
}

uint64_t AspirePirPirPreprocessDbArgs.command.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v15 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    uint64_t v10 = swift_retain();
    *(void *)(v1 + v9) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v10);
    swift_release();
  }
  uint64_t v11 = *(void *)(v1 + v9);
  outlined init with take of AspirePirPIRShardingFunction(a1, (uint64_t)v8, type metadata accessor for AspirePirPirPreprocessDbCommand);
  uint64_t v12 = type metadata accessor for AspirePirPirPreprocessDbCommand(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v8, 0, 1, v12);
  outlined init with take of SymmetricPirClientConfig?((uint64_t)v8, (uint64_t)v5, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand?);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV8CipherML28AspirePirPirPreprocessDbArgsP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__command;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, v13, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand?);
  swift_endAccess();
  return swift_release();
}

uint64_t AspirePirPirPreprocessDbCommand.init()@<X0>(uint64_t a1@<X8>)
{
  return AspirePirPIRShardingFunction.init()(type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command, (void (*)(void))type metadata accessor for AspirePirPirPreprocessDbCommand, a1);
}

uint64_t AspirePirPIRShardingFunction.init()@<X0>(uint64_t (*a1)(void)@<X0>, void (*a2)(void)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(a3, 1, 1, v5);
  a2(0);
  return UnknownStorage.init()();
}

void (*AspirePirPirPreprocessDbArgs.command.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for AspirePirPirPreprocessDbCommand(0);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20))
      + OBJC_IVAR____TtCV8CipherML28AspirePirPirPreprocessDbArgsP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__command;
  swift_beginAccess();
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v10, (uint64_t)v5, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    uint64_t v11 = type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command(0);
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v9, 1, 1, v11);
    UnknownStorage.init()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand?);
  }
  else
  {
    outlined init with take of AspirePirPIRShardingFunction((uint64_t)v5, (uint64_t)v9, type metadata accessor for AspirePirPirPreprocessDbCommand);
  }
  return AspirePirPirPreprocessDbArgs.command.modify;
}

void AspirePirPirPreprocessDbArgs.command.modify(uint64_t a1, char a2)
{
}

BOOL AspirePirPirPreprocessDbArgs.hasCommand.getter()
{
  return AspirePirPirParameters.hasEncryptionParameters.getter(&demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand?, (uint64_t (*)(void, double))type metadata accessor for AspirePirPirPreprocessDbArgs, &OBJC_IVAR____TtCV8CipherML28AspirePirPirPreprocessDbArgsP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__command, type metadata accessor for AspirePirPirPreprocessDbCommand);
}

Swift::Void __swiftcall AspirePirPirPreprocessDbArgs.clearCommand()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    uint64_t v5 = swift_retain();
    *(void *)(v0 + v4) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v5);
    swift_release();
  }
  uint64_t v6 = *(void *)(v0 + v4);
  uint64_t v7 = type metadata accessor for AspirePirPirPreprocessDbCommand(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v3, 1, 1, v7);
  uint64_t v8 = v6
     + OBJC_IVAR____TtCV8CipherML28AspirePirPirPreprocessDbArgsP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__command;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of AMDPbHEConfig.OneOf_Config?((uint64_t)v3, v8, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand?);
  swift_endAccess();
  swift_release();
}

uint64_t (*AspirePirPirPreprocessDbArgs.unknownFields.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspirePirPirPreprocessDbArgs.init()@<X0>(uint64_t a1@<X8>)
{
  return AspirePirPirParameters.init()(type metadata accessor for AspirePirPirPreprocessDbArgs, &one-time initialization token for defaultInstance, &static AspirePirPirPreprocessDbArgs._StorageClass.defaultInstance, a1);
}

uint64_t AspirePirPirParameters.init()@<X0>(uint64_t (*a1)(void)@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  UnknownStorage.init()();
  uint64_t v8 = *(int *)(a1(0) + 20);
  if (*a2 != -1) {
    swift_once();
  }
  *(void *)(a4 + v8) = *a3;
  return swift_retain();
}

uint64_t AspirePirPirPreprocessDbCommand.command.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1, a1, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
}

uint64_t AspirePirPirPreprocessDbCommand.command.setter(uint64_t a1)
{
  return outlined assign with take of AMDPbHEConfig.OneOf_Config?(a1, v1, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
}

uint64_t (*AspirePirPirPreprocessDbCommand.command.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspirePirPirPreprocessDbCommand.keyword.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
  uint64_t v7 = type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
LABEL_5:
    uint64_t v8 = type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(a1, 1, 1, v8);
    uint64_t v9 = type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword(0);
    uint64_t result = UnknownStorage.init()();
    uint64_t v11 = (void *)(a1 + *(int *)(v9 + 24));
    *uint64_t v11 = 0;
    v11[1] = 0;
    uint64_t v12 = (void *)(a1 + *(int *)(v9 + 28));
    *uint64_t v12 = 0;
    v12[1] = 0;
    return result;
  }
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v6, type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command);
    goto LABEL_5;
  }
  return outlined init with take of AspirePirPIRShardingFunction((uint64_t)v6, a1, type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword);
}

uint64_t key path setter for AspirePirPirPreprocessDbCommand.keyword : AspirePirPirPreprocessDbCommand(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword(0);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AspireHeEncryptionParameters(a1, (uint64_t)v6, type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(a2, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
  outlined init with take of AspirePirPIRShardingFunction((uint64_t)v6, a2, type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword);
  uint64_t v7 = type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(a2, 0, 1, v7);
}

uint64_t AspirePirPirPreprocessDbCommand.keyword.setter(uint64_t a1)
{
  return AspirePirPIRShardingFunction.sha256.setter(a1, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?, type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword, type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command);
}

uint64_t AspirePirPirPreprocessDbCommand.Keyword.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(a1, 1, 1, v2);
  uint64_t v3 = type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword(0);
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = (void *)(a1 + *(int *)(v3 + 24));
  *uint64_t v5 = 0;
  v5[1] = 0;
  uint64_t v6 = (void *)(a1 + *(int *)(v3 + 28));
  *uint64_t v6 = 0;
  v6[1] = 0;
  return result;
}

void (*AspirePirPirPreprocessDbCommand.keyword.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v2 = v1;
  uint64_t v4 = malloc(0x30uLL);
  *a1 = v4;
  *uint64_t v4 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
  uint64_t v6 = malloc(*(void *)(*(void *)(v5 - 8) + 64));
  v4[1] = v6;
  uint64_t v7 = type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword(0);
  size_t v8 = *(void *)(*(void *)(v7 - 8) + 64);
  v4[2] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v4[3] = v9;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
  uint64_t v10 = type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command(0);
  v4[4] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v4[5] = v11;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48))(v6, 1, v10) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      outlined init with take of AspirePirPIRShardingFunction((uint64_t)v6, (uint64_t)v9, type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword);
      return AspirePirPirPreprocessDbCommand.keyword.modify;
    }
    _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v6, type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command);
  }
  uint64_t v12 = type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v9, 1, 1, v12);
  UnknownStorage.init()();
  uint64_t v13 = &v9[*(int *)(v7 + 24)];
  *(void *)uint64_t v13 = 0;
  *((void *)v13 + 1) = 0;
  uint64_t v14 = &v9[*(int *)(v7 + 28)];
  *(void *)uint64_t v14 = 0;
  *((void *)v14 + 1) = 0;
  return AspirePirPirPreprocessDbCommand.keyword.modify;
}

void AspirePirPirPreprocessDbCommand.keyword.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (*a1)[4];
  uint64_t v4 = (*a1)[5];
  uint64_t v5 = (void *)(*a1)[2];
  uint64_t v6 = (void *)(*a1)[3];
  uint64_t v8 = **a1;
  uint64_t v7 = (void *)(*a1)[1];
  if (a2)
  {
    outlined init with copy of AspireHeEncryptionParameters((*a1)[3], (uint64_t)v5, type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v8, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
    outlined init with take of AspirePirPIRShardingFunction((uint64_t)v5, v8, type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v8, 0, 1, v3);
    _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v6, type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword);
  }
  else
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(**a1, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
    outlined init with take of AspirePirPIRShardingFunction((uint64_t)v6, v8, type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v8, 0, 1, v3);
  }
  free(v6);
  free(v5);
  free(v7);
  free(v2);
}

uint64_t AspirePirPirPreprocessDbCommand.index.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
  uint64_t v7 = type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1) {
      return outlined init with take of AspirePirPIRShardingFunction((uint64_t)v6, (uint64_t)a1, type metadata accessor for AspirePirPirPreprocessDbCommand.Index);
    }
    _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v6, type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command);
  }
  *a1 = 0;
  type metadata accessor for AspirePirPirPreprocessDbCommand.Index(0);
  return UnknownStorage.init()();
}

uint64_t key path getter for AspirePirPirPreprocessDbCommand.index : AspirePirPirPreprocessDbCommand@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v6, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
  uint64_t v7 = type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1) {
      return outlined init with take of AspirePirPIRShardingFunction((uint64_t)v6, (uint64_t)a2, type metadata accessor for AspirePirPirPreprocessDbCommand.Index);
    }
    _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v6, type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command);
  }
  *a2 = 0;
  type metadata accessor for AspirePirPirPreprocessDbCommand.Index(0);
  return UnknownStorage.init()();
}

uint64_t key path setter for AspirePirPirPreprocessDbCommand.index : AspirePirPirPreprocessDbCommand(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AspirePirPirPreprocessDbCommand.Index(0);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AspireHeEncryptionParameters(a1, (uint64_t)v6, type metadata accessor for AspirePirPirPreprocessDbCommand.Index);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(a2, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
  outlined init with take of AspirePirPIRShardingFunction((uint64_t)v6, a2, type metadata accessor for AspirePirPirPreprocessDbCommand.Index);
  uint64_t v7 = type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(a2, 0, 1, v7);
}

uint64_t AspirePirPirPreprocessDbCommand.index.setter(uint64_t a1)
{
  return AspirePirPIRShardingFunction.sha256.setter(a1, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?, type metadata accessor for AspirePirPirPreprocessDbCommand.Index, type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command);
}

uint64_t AspirePirPirPreprocessDbCommand.Index.init()@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  type metadata accessor for AspirePirPirPreprocessDbCommand.Index(0);
  return UnknownStorage.init()();
}

void (*AspirePirPirPreprocessDbCommand.index.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v2 = v1;
  uint64_t v4 = malloc(0x30uLL);
  *a1 = v4;
  *uint64_t v4 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
  uint64_t v6 = malloc(*(void *)(*(void *)(v5 - 8) + 64));
  v4[1] = v6;
  size_t v7 = *(void *)(*(void *)(type metadata accessor for AspirePirPirPreprocessDbCommand.Index(0) - 8) + 64);
  v4[2] = malloc(v7);
  uint64_t v8 = malloc(v7);
  v4[3] = v8;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
  uint64_t v9 = type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command(0);
  v4[4] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v4[5] = v10;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v6, 1, v9) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
LABEL_6:
    *uint64_t v8 = 0;
    UnknownStorage.init()();
    return AspirePirPirPreprocessDbCommand.index.modify;
  }
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v6, type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command);
    goto LABEL_6;
  }
  outlined init with take of AspirePirPIRShardingFunction((uint64_t)v6, (uint64_t)v8, type metadata accessor for AspirePirPirPreprocessDbCommand.Index);
  return AspirePirPirPreprocessDbCommand.index.modify;
}

void AspirePirPirPreprocessDbCommand.index.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (*a1)[4];
  uint64_t v4 = (*a1)[5];
  uint64_t v5 = (void *)(*a1)[2];
  uint64_t v6 = (void *)(*a1)[3];
  uint64_t v8 = **a1;
  size_t v7 = (void *)(*a1)[1];
  if (a2)
  {
    outlined init with copy of AspireHeEncryptionParameters((*a1)[3], (uint64_t)v5, type metadata accessor for AspirePirPirPreprocessDbCommand.Index);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v8, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
    outlined init with take of AspirePirPIRShardingFunction((uint64_t)v5, v8, type metadata accessor for AspirePirPirPreprocessDbCommand.Index);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v8, 0, 1, v3);
    _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v6, type metadata accessor for AspirePirPirPreprocessDbCommand.Index);
  }
  else
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(**a1, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
    outlined init with take of AspirePirPIRShardingFunction((uint64_t)v6, v8, type metadata accessor for AspirePirPirPreprocessDbCommand.Index);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v8, 0, 1, v3);
  }
  free(v6);
  free(v5);
  free(v7);
  free(v2);
}

uint64_t AspirePirPirPreprocessDbCommand.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AspirePirPIRShardingFunction.unknownFields.getter(type metadata accessor for AspirePirPirPreprocessDbCommand, a1);
}

uint64_t AspirePirPirPreprocessDbCommand.unknownFields.setter(uint64_t a1)
{
  return AspirePirPIRShardingFunction.unknownFields.setter(a1, type metadata accessor for AspirePirPirPreprocessDbCommand);
}

uint64_t (*AspirePirPirPreprocessDbCommand.unknownFields.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspirePirPirPreprocessDbCommand.Index.numEntries.getter()
{
  return *v0;
}

uint64_t AspirePirPirPreprocessDbCommand.Index.numEntries.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*AspirePirPirPreprocessDbCommand.Index.numEntries.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspirePirPirPreprocessDbCommand.Index.entrySize.getter()
{
  return *(unsigned int *)(v0 + 4);
}

uint64_t AspirePirPirPreprocessDbCommand.Index.entrySize.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 4) = result;
  return result;
}

uint64_t (*AspirePirPirPreprocessDbCommand.Index.entrySize.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspirePirPirPreprocessDbCommand.Index.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AspirePirKeywordPirParameters.unknownFields.getter(type metadata accessor for AspirePirPirPreprocessDbCommand.Index, a1);
}

uint64_t AspirePirPirPreprocessDbCommand.Index.unknownFields.setter(uint64_t a1)
{
  return AspirePirKeywordPirParameters.unknownFields.setter(a1, type metadata accessor for AspirePirPirPreprocessDbCommand.Index);
}

uint64_t (*AspirePirPirPreprocessDbCommand.Index.unknownFields.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspirePirPirPreprocessDbCommand.Keyword.keyword.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword(0) + 24));
  if (v1[1]) {
    uint64_t v2 = *v1;
  }
  else {
    uint64_t v2 = 0;
  }
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t key path getter for AspirePirPirPreprocessDbCommand.Keyword.keyword : AspirePirPirPreprocessDbCommand.Keyword@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (uint64_t *)(a1 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword(0) + 24));
  unint64_t v4 = v3[1];
  if (v4)
  {
    uint64_t v5 = *v3;
    unint64_t v6 = v4;
  }
  else
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0xE000000000000000;
  }
  *a2 = v5;
  a2[1] = v6;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for AspirePirPirPreprocessDbCommand.Keyword.keyword : AspirePirPirPreprocessDbCommand.Keyword(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  unint64_t v4 = (void *)(a2 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword(0) + 24));
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *unint64_t v4 = v3;
  v4[1] = v2;
  return result;
}

uint64_t AspirePirPirPreprocessDbCommand.Keyword.keyword.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword(0) + 24));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*AspirePirPirPreprocessDbCommand.Keyword.keyword.modify(uint64_t a1))()
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword(0) + 24);
  *(_DWORD *)(a1 + 24) = v3;
  unint64_t v4 = (uint64_t *)(v1 + v3);
  unint64_t v5 = v4[1];
  if (v5)
  {
    uint64_t v6 = *v4;
    unint64_t v7 = v5;
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0xE000000000000000;
  }
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return AspireApiPIRShardConfig.shardID.modify;
}

BOOL AspirePirPirPreprocessDbCommand.Keyword.hasKeyword.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword(0) + 24) + 8) != 0;
}

Swift::Void __swiftcall AspirePirPirPreprocessDbCommand.Keyword.clearKeyword()()
{
  uint64_t v1 = (void *)(v0 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword(0) + 24));
  swift_bridgeObjectRelease();
  *uint64_t v1 = 0;
  v1[1] = 0;
}

uint64_t AspirePirPirPreprocessDbCommand.Keyword.value.getter()
{
  return AspirePirSerializedKeywordDbRow.shardID.getter(type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword);
}

uint64_t AspirePirSerializedKeywordDbRow.shardID.getter(uint64_t (*a1)(void))
{
  uint64_t v2 = (uint64_t *)(v1 + *(int *)(a1(0) + 28));
  if (v2[1]) {
    uint64_t v3 = *v2;
  }
  else {
    uint64_t v3 = 0;
  }
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t key path getter for AspirePirSerializedKeywordDbRow.shardID : AspirePirSerializedKeywordDbRow@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X3>, void *a3@<X8>)
{
  unint64_t v4 = (uint64_t *)(a1 + *(int *)(a2(0) + 28));
  unint64_t v5 = v4[1];
  if (v5)
  {
    uint64_t v6 = *v4;
    unint64_t v7 = v5;
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0xE000000000000000;
  }
  *a3 = v6;
  a3[1] = v7;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for AspirePirSerializedKeywordDbRow.shardID : AspirePirSerializedKeywordDbRow(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v6 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v7 = (void *)(a2 + *(int *)(a5(0) + 28));
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *unint64_t v7 = v6;
  v7[1] = v5;
  return result;
}

uint64_t AspirePirPirPreprocessDbCommand.Keyword.value.setter(uint64_t a1, uint64_t a2)
{
  return AspirePirSerializedKeywordDbRow.shardID.setter(a1, a2, type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword);
}

uint64_t AspirePirSerializedKeywordDbRow.shardID.setter(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v6 = (void *)(v3 + *(int *)(a3(0) + 28));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t (*AspirePirPirPreprocessDbCommand.Keyword.value.modify(uint64_t a1))()
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword(0) + 28);
  *(_DWORD *)(a1 + 24) = v3;
  unint64_t v4 = (uint64_t *)(v1 + v3);
  unint64_t v5 = v4[1];
  if (v5)
  {
    uint64_t v6 = *v4;
    unint64_t v7 = v5;
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0xE000000000000000;
  }
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return AspireApiPIRShardConfig.shardID.modify;
}

BOOL AspirePirPirPreprocessDbCommand.Keyword.hasValue.getter()
{
  return AspirePirSerializedKeywordDbRow.hasShardID.getter(type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword);
}

BOOL AspirePirSerializedKeywordDbRow.hasShardID.getter(uint64_t (*a1)(void))
{
  return *(void *)(v1 + *(int *)(a1(0) + 28) + 8) != 0;
}

Swift::Void __swiftcall AspirePirPirPreprocessDbCommand.Keyword.clearValue()()
{
}

uint64_t AspirePirSerializedKeywordDbRow.clearShardID()(uint64_t (*a1)(void))
{
  uint64_t v2 = (void *)(v1 + *(int *)(a1(0) + 28));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = 0;
  v2[1] = 0;
  return result;
}

uint64_t AspirePirPirPreprocessDbCommand.Keyword.config.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1, a1, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config?);
}

uint64_t AspirePirPirPreprocessDbCommand.Keyword.config.setter(uint64_t a1)
{
  return outlined assign with take of AMDPbHEConfig.OneOf_Config?(a1, v1, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config?);
}

uint64_t (*AspirePirPirPreprocessDbCommand.Keyword.config.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspirePirPirPreprocessDbCommand.Keyword.cuckooConfig.getter@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config?);
  uint64_t v7 = type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config?);
LABEL_5:
    type metadata accessor for AspirePirCuckooTableConfig(0);
    *a1 = 0u;
    a1[1] = 0u;
    *(_OWORD *)((char *)a1 + 26) = 0u;
    return UnknownStorage.init()();
  }
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v6, type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config);
    goto LABEL_5;
  }
  return outlined init with take of AspirePirPIRShardingFunction((uint64_t)v6, (uint64_t)a1, type metadata accessor for AspirePirCuckooTableConfig);
}

uint64_t key path setter for AspirePirPirPreprocessDbCommand.Keyword.cuckooConfig : AspirePirPirPreprocessDbCommand.Keyword(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AspirePirCuckooTableConfig(0);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AspireHeEncryptionParameters(a1, (uint64_t)v6, type metadata accessor for AspirePirCuckooTableConfig);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(a2, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config?);
  outlined init with take of AspirePirPIRShardingFunction((uint64_t)v6, a2, type metadata accessor for AspirePirCuckooTableConfig);
  uint64_t v7 = type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(a2, 0, 1, v7);
}

uint64_t AspirePirPirPreprocessDbCommand.Keyword.cuckooConfig.setter(uint64_t a1)
{
  return AspirePirPIRShardingFunction.sha256.setter(a1, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config?, type metadata accessor for AspirePirCuckooTableConfig, type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config);
}

void (*AspirePirPirPreprocessDbCommand.Keyword.cuckooConfig.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v2 = v1;
  uint64_t v4 = malloc(0x30uLL);
  *a1 = v4;
  *uint64_t v4 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config?);
  uint64_t v6 = malloc(*(void *)(*(void *)(v5 - 8) + 64));
  v4[1] = v6;
  size_t v7 = *(void *)(*(void *)(type metadata accessor for AspirePirCuckooTableConfig(0) - 8) + 64);
  v4[2] = malloc(v7);
  uint64_t v8 = malloc(v7);
  v4[3] = v8;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config?);
  uint64_t v9 = type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config(0);
  v4[4] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v4[5] = v10;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v6, 1, v9) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      outlined init with take of AspirePirPIRShardingFunction((uint64_t)v6, (uint64_t)v8, type metadata accessor for AspirePirCuckooTableConfig);
      return AspirePirPirPreprocessDbCommand.Keyword.cuckooConfig.modify;
    }
    _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v6, type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config);
  }
  *(_OWORD *)((char *)v8 + 26) = 0u;
  *uint64_t v8 = 0u;
  v8[1] = 0u;
  UnknownStorage.init()();
  return AspirePirPirPreprocessDbCommand.Keyword.cuckooConfig.modify;
}

void AspirePirPirPreprocessDbCommand.Keyword.cuckooConfig.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (*a1)[4];
  uint64_t v4 = (*a1)[5];
  uint64_t v5 = (void *)(*a1)[2];
  uint64_t v6 = (void *)(*a1)[3];
  uint64_t v8 = **a1;
  size_t v7 = (void *)(*a1)[1];
  if (a2)
  {
    outlined init with copy of AspireHeEncryptionParameters((*a1)[3], (uint64_t)v5, type metadata accessor for AspirePirCuckooTableConfig);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v8, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config?);
    outlined init with take of AspirePirPIRShardingFunction((uint64_t)v5, v8, type metadata accessor for AspirePirCuckooTableConfig);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v8, 0, 1, v3);
    _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v6, type metadata accessor for AspirePirCuckooTableConfig);
  }
  else
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(**a1, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config?);
    outlined init with take of AspirePirPIRShardingFunction((uint64_t)v6, v8, type metadata accessor for AspirePirCuckooTableConfig);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v8, 0, 1, v3);
  }
  free(v6);
  free(v5);
  free(v7);
  free(v2);
}

uint64_t AspirePirPirPreprocessDbCommand.Keyword.batchPirConfig.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config?);
  uint64_t v7 = type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1) {
      return outlined init with take of AspirePirPIRShardingFunction((uint64_t)v6, a1, type metadata accessor for AspirePirBatchKeywordPirConfig);
    }
    _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v6, type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config);
  }
  uint64_t v9 = type metadata accessor for AspirePirBatchKeywordPirConfig(0);
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 32) = 0;
  UnknownStorage.init()();
  uint64_t v10 = a1 + *(int *)(v9 + 40);
  uint64_t v11 = type metadata accessor for AspirePirCuckooTableConfig(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  uint64_t v12 = a1 + *(int *)(v9 + 44);
  *(void *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 8) = 1;
  return result;
}

uint64_t key path setter for AspirePirPirPreprocessDbCommand.Keyword.batchPirConfig : AspirePirPirPreprocessDbCommand.Keyword(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AspirePirBatchKeywordPirConfig(0);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AspireHeEncryptionParameters(a1, (uint64_t)v6, type metadata accessor for AspirePirBatchKeywordPirConfig);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(a2, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config?);
  outlined init with take of AspirePirPIRShardingFunction((uint64_t)v6, a2, type metadata accessor for AspirePirBatchKeywordPirConfig);
  uint64_t v7 = type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(a2, 0, 1, v7);
}

uint64_t AspirePirPirPreprocessDbCommand.Keyword.batchPirConfig.setter(uint64_t a1)
{
  return AspirePirPIRShardingFunction.sha256.setter(a1, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config?, type metadata accessor for AspirePirBatchKeywordPirConfig, type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config);
}

uint64_t AspirePirPIRShardingFunction.sha256.setter(uint64_t a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t (*a4)(void))
{
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v4, a2);
  outlined init with take of AspirePirPIRShardingFunction(a1, v4, a3);
  uint64_t v8 = a4(0);
  swift_storeEnumTagMultiPayload();
  uint64_t v9 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56);
  return v9(v4, 0, 1, v8);
}

void (*AspirePirPirPreprocessDbCommand.Keyword.batchPirConfig.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v2 = v1;
  uint64_t v4 = malloc(0x30uLL);
  *a1 = v4;
  *uint64_t v4 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config?);
  uint64_t v6 = malloc(*(void *)(*(void *)(v5 - 8) + 64));
  v4[1] = v6;
  uint64_t v7 = type metadata accessor for AspirePirBatchKeywordPirConfig(0);
  size_t v8 = *(void *)(*(void *)(v7 - 8) + 64);
  v4[2] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v4[3] = v9;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config?);
  uint64_t v10 = type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config(0);
  v4[4] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v4[5] = v11;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48))(v6, 1, v10) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config?);
LABEL_6:
    v9[4] = 0;
    *(_OWORD *)uint64_t v9 = 0u;
    *((_OWORD *)v9 + 1) = 0u;
    UnknownStorage.init()();
    uint64_t v12 = (char *)v9 + *(int *)(v7 + 40);
    uint64_t v13 = type metadata accessor for AspirePirCuckooTableConfig(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
    uint64_t v14 = (char *)v9 + *(int *)(v7 + 44);
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    return AspirePirPirPreprocessDbCommand.Keyword.batchPirConfig.modify;
  }
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v6, type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config);
    goto LABEL_6;
  }
  outlined init with take of AspirePirPIRShardingFunction((uint64_t)v6, (uint64_t)v9, type metadata accessor for AspirePirBatchKeywordPirConfig);
  return AspirePirPirPreprocessDbCommand.Keyword.batchPirConfig.modify;
}

void AspirePirPirPreprocessDbCommand.Keyword.batchPirConfig.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (*a1)[4];
  uint64_t v4 = (*a1)[5];
  uint64_t v5 = (void *)(*a1)[2];
  uint64_t v6 = (void *)(*a1)[3];
  uint64_t v8 = **a1;
  uint64_t v7 = (void *)(*a1)[1];
  if (a2)
  {
    outlined init with copy of AspireHeEncryptionParameters((*a1)[3], (uint64_t)v5, type metadata accessor for AspirePirBatchKeywordPirConfig);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v8, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config?);
    outlined init with take of AspirePirPIRShardingFunction((uint64_t)v5, v8, type metadata accessor for AspirePirBatchKeywordPirConfig);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v8, 0, 1, v3);
    _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v6, type metadata accessor for AspirePirBatchKeywordPirConfig);
  }
  else
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(**a1, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config?);
    outlined init with take of AspirePirPIRShardingFunction((uint64_t)v6, v8, type metadata accessor for AspirePirBatchKeywordPirConfig);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v8, 0, 1, v3);
  }
  free(v6);
  free(v5);
  free(v7);
  free(v2);
}

uint64_t AspirePirPirPreprocessDbCommand.Keyword.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AspirePirPIRShardingFunction.unknownFields.getter(type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword, a1);
}

uint64_t AspirePirPirPreprocessDbCommand.Keyword.unknownFields.setter(uint64_t a1)
{
  return AspirePirPIRShardingFunction.unknownFields.setter(a1, type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword);
}

uint64_t (*AspirePirPirPreprocessDbCommand.Keyword.unknownFields.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspirePirSymmetricPirClientConfig.serverPublicKey.getter()
{
  uint64_t v1 = *(void *)v0;
  outlined copy of Data._Representation(*(void *)v0, *(void *)(v0 + 8));
  return v1;
}

uint64_t AspirePirSymmetricPirClientConfig.serverPublicKey.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = outlined consume of Data._Representation(*(void *)v2, *(void *)(v2 + 8));
  *(void *)uint64_t v2 = a1;
  *(void *)(v2 + 8) = a2;
  return result;
}

uint64_t (*AspirePirSymmetricPirClientConfig.serverPublicKey.modify())()
{
  return Repeated.subscript.readspecialized ;
}

void AspirePirSymmetricPirClientConfig.configType.getter(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 24);
  *(void *)a1 = *(void *)(v1 + 16);
  *(unsigned char *)(a1 + 8) = v2;
}

uint64_t AspirePirSymmetricPirClientConfig.configType.setter(uint64_t result)
{
  char v2 = *(unsigned char *)(result + 8);
  *(void *)(v1 + 16) = *(void *)result;
  *(unsigned char *)(v1 + 24) = v2;
  return result;
}

uint64_t (*AspirePirSymmetricPirClientConfig.configType.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspirePirSymmetricPirClientConfig.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AspirePirKeywordPirParameters.unknownFields.getter(type metadata accessor for AspirePirSymmetricPirClientConfig, a1);
}

uint64_t AspirePirSymmetricPirClientConfig.unknownFields.setter(uint64_t a1)
{
  return AspirePirKeywordPirParameters.unknownFields.setter(a1, type metadata accessor for AspirePirSymmetricPirClientConfig);
}

uint64_t (*AspirePirSymmetricPirClientConfig.unknownFields.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t static AspirePirPirAlgorithm._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspirePirPirAlgorithm._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspirePirPirAlgorithm@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspirePirPirAlgorithm._protobuf_nameMap, a1);
}

uint64_t static AspirePirKeyCompressionStrategy._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspirePirKeyCompressionStrategy._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspirePirKeyCompressionStrategy@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspirePirKeyCompressionStrategy._protobuf_nameMap, a1);
}

uint64_t static AspirePirSymmetricPirConfigType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspirePirSymmetricPirConfigType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspirePirSymmetricPirConfigType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspirePirSymmetricPirConfigType._protobuf_nameMap, a1);
}

unint64_t static AspirePirPirParameters.protoMessageName.getter()
{
  return 0xD000000000000018;
}

uint64_t static AspirePirPirParameters._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspirePirPirParameters._protobuf_nameMap, a1);
}

uint64_t one-time initialization function for defaultInstance(uint64_t a1)
{
  return one-time initialization function for defaultInstance(a1, (void (*)(void))type metadata accessor for AspirePirPirParameters._StorageClass, AspirePirPirParameters._StorageClass.init(), &static AspirePirPirParameters._StorageClass.defaultInstance);
}

{
  return one-time initialization function for defaultInstance(a1, (void (*)(void))type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass, AspirePirPirPreprocessDbArgs._StorageClass.init(), &static AspirePirPirPreprocessDbArgs._StorageClass.defaultInstance);
}

uint64_t AspirePirPirParameters._StorageClass.init()()
{
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__encryptionParameters;
  uint64_t v2 = type metadata accessor for AspireHeEncryptionParameters(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  *(void *)(v0
            + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__numEntries) = 0;
  *(void *)(v0
            + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__entrySize) = 0;
  *(void *)(v0
            + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__dimensions) = MEMORY[0x263F8EE78];
  uint64_t v3 = v0
     + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__keywordPirParams;
  uint64_t v4 = type metadata accessor for AspirePirKeywordPirParameters(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  uint64_t v5 = v0
     + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__algorithm;
  *(void *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 8) = 1;
  *(void *)(v0
            + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__batchSize) = 0;
  uint64_t v6 = v0
     + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__evaluationKeyConfig;
  uint64_t v7 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  uint64_t v8 = v0
     + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__keyCompressionStrategy;
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__compressVectorizedPirResponse) = 2;
  uint64_t v9 = v0
     + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__vectorizedPirInternalBatchingSize;
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  uint64_t v10 = v0
      + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__batchPirParams;
  uint64_t v11 = type metadata accessor for AspirePirBatchPirParameters(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  return v0;
}

uint64_t AspirePirPirParameters._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirBatchPirParameters?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v66 = (uint64_t)&v57 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v65 = (uint64_t)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v60 = (uint64_t)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = v1
      + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__encryptionParameters;
  uint64_t v13 = type metadata accessor for AspireHeEncryptionParameters(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
  uint64_t v14 = (void *)(v1
                 + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__numEntries);
  *(void *)(v1
            + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__numEntries) = 0;
  uint64_t v15 = (void *)(v1
                 + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__entrySize);
  *(void *)(v1
            + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__entrySize) = 0;
  char v16 = (void *)(v1
                 + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__dimensions);
  *(void *)(v1
            + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__dimensions) = MEMORY[0x263F8EE78];
  uint64_t v17 = v1
      + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__keywordPirParams;
  uint64_t v57 = v1
      + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__keywordPirParams;
  uint64_t v18 = type metadata accessor for AspirePirKeywordPirParameters(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v17, 1, 1, v18);
  uint64_t v19 = v1
      + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__algorithm;
  *(void *)uint64_t v19 = 0;
  *(unsigned char *)(v19 + 8) = 1;
  uint64_t v58 = (void *)(v1
                 + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__batchSize);
  *(void *)(v1
            + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__batchSize) = 0;
  uint64_t v20 = v1
      + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__evaluationKeyConfig;
  uint64_t v59 = v1
      + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__evaluationKeyConfig;
  uint64_t v21 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v20, 1, 1, v21);
  uint64_t v22 = v1
      + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__keyCompressionStrategy;
  uint64_t v61 = v1
      + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__keyCompressionStrategy;
  *(void *)uint64_t v22 = 0;
  *(unsigned char *)(v22 + 8) = 1;
  uint64_t v23 = (unsigned char *)(v1
                + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__compressVectorizedPirResponse);
  *uint64_t v23 = 2;
  uint64_t v24 = v1
      + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__vectorizedPirInternalBatchingSize;
  uint64_t v62 = v23;
  uint64_t v63 = v24;
  *(void *)uint64_t v24 = 0;
  *(unsigned char *)(v24 + 8) = 1;
  uint64_t v25 = v1
      + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__batchPirParams;
  uint64_t v64 = v1
      + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__batchPirParams;
  uint64_t v26 = type metadata accessor for AspirePirBatchPirParameters(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v25, 1, 1, v26);
  uint64_t v27 = a1
      + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__encryptionParameters;
  swift_beginAccess();
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v27, (uint64_t)v11, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  swift_beginAccess();
  outlined assign with take of AMDPbHEConfig.OneOf_Config?((uint64_t)v11, v12, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  swift_endAccess();
  uint64_t v28 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__numEntries);
  swift_beginAccess();
  uint64_t v29 = *v28;
  swift_beginAccess();
  *uint64_t v14 = v29;
  uint64_t v30 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__entrySize);
  swift_beginAccess();
  uint64_t v31 = *v30;
  swift_beginAccess();
  *uint64_t v15 = v31;
  uint64_t v32 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__dimensions);
  swift_beginAccess();
  uint64_t v33 = *v32;
  swift_beginAccess();
  void *v16 = v33;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v34 = a1
      + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__keywordPirParams;
  swift_beginAccess();
  uint64_t v35 = v60;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v34, v60, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  uint64_t v36 = v57;
  swift_beginAccess();
  outlined assign with take of AMDPbHEConfig.OneOf_Config?(v35, v36, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  swift_endAccess();
  unint64_t v37 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__algorithm);
  swift_beginAccess();
  uint64_t v38 = *v37;
  LOBYTE(v37) = *((unsigned char *)v37 + 8);
  swift_beginAccess();
  *(void *)uint64_t v19 = v38;
  *(unsigned char *)(v19 + 8) = (_BYTE)v37;
  uint64_t v39 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__batchSize);
  swift_beginAccess();
  uint64_t v40 = *v39;
  int v41 = v58;
  swift_beginAccess();
  void *v41 = v40;
  uint64_t v42 = a1
      + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__evaluationKeyConfig;
  swift_beginAccess();
  uint64_t v43 = v65;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v42, v65, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  uint64_t v44 = v59;
  swift_beginAccess();
  outlined assign with take of AMDPbHEConfig.OneOf_Config?(v43, v44, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  swift_endAccess();
  uint64_t v45 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__keyCompressionStrategy);
  swift_beginAccess();
  uint64_t v46 = *v45;
  LOBYTE(v45) = *((unsigned char *)v45 + 8);
  uint64_t v47 = v61;
  swift_beginAccess();
  *(void *)uint64_t v47 = v46;
  *(unsigned char *)(v47 + 8) = (_BYTE)v45;
  uint64_t v48 = (unsigned char *)(a1
                + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__compressVectorizedPirResponse);
  swift_beginAccess();
  LOBYTE(v48) = *v48;
  uint64_t v49 = v62;
  swift_beginAccess();
  *uint64_t v49 = (_BYTE)v48;
  uint64_t v50 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__vectorizedPirInternalBatchingSize);
  swift_beginAccess();
  uint64_t v51 = *v50;
  LOBYTE(v50) = *((unsigned char *)v50 + 8);
  uint64_t v52 = v63;
  swift_beginAccess();
  *(void *)uint64_t v52 = v51;
  *(unsigned char *)(v52 + 8) = (_BYTE)v50;
  uint64_t v53 = a1
      + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__batchPirParams;
  swift_beginAccess();
  uint64_t v54 = v66;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v53, v66, &demangling cache variable for type metadata for AspirePirBatchPirParameters?);
  swift_release();
  uint64_t v55 = v64;
  swift_beginAccess();
  outlined assign with take of AMDPbHEConfig.OneOf_Config?(v54, v55, &demangling cache variable for type metadata for AspirePirBatchPirParameters?);
  swift_endAccess();
  return v1;
}

uint64_t type metadata accessor for AspirePirBatchPirParameters(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspirePirBatchPirParameters);
}

uint64_t outlined init with copy of AspireHeEncryptionParameters(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t _s8CipherML28AspireHeEncryptionParametersVWOhTm_2(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t type metadata accessor for AspirePirCuckooTableConfig(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspirePirCuckooTableConfig);
}

uint64_t type metadata accessor for AspirePirBatchKeywordPirConfig(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspirePirBatchKeywordPirConfig);
}

uint64_t type metadata accessor for AspirePirPIRShardingFunctionSHA256(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspirePirPIRShardingFunctionSHA256);
}

uint64_t type metadata accessor for AspirePirPIRShardingFunctionDoubleMod(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspirePirPIRShardingFunctionDoubleMod);
}

uint64_t AspirePirPirParameters._StorageClass.__deallocating_deinit()
{
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v0+ OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__encryptionParameters, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  swift_bridgeObjectRelease();
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v0+ OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__keywordPirParams, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v0+ OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__evaluationKeyConfig, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v0+ OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__batchPirParams, &demangling cache variable for type metadata for AspirePirBatchPirParameters?);
  return swift_deallocClassInstance();
}

uint64_t AspirePirPirParameters.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspirePirPirParameters.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for AspirePirPirParameters, (void (*)(void))type metadata accessor for AspirePirPirParameters._StorageClass, AspirePirPirParameters._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in AspirePirPirParameters.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in AspirePirPirParameters.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          closure #1 in closure #1 in AspirePirPirParameters.decodeMessage<A>(decoder:)();
          break;
        case 2:
          uint64_t v11 = (void (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F50680];
          uint64_t v12 = a2;
          uint64_t v13 = a1;
          uint64_t v14 = a3;
          uint64_t v15 = a4;
          char v16 = &OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__numEntries;
          goto LABEL_5;
        case 3:
          uint64_t v11 = (void (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F50680];
          uint64_t v12 = a2;
          uint64_t v13 = a1;
          uint64_t v14 = a3;
          uint64_t v15 = a4;
          char v16 = &OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__entrySize;
          goto LABEL_5;
        case 4:
          uint64_t v11 = (void (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F50640];
          uint64_t v12 = a2;
          uint64_t v13 = a1;
          uint64_t v14 = a3;
          uint64_t v15 = a4;
          char v16 = &OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__dimensions;
          goto LABEL_5;
        case 5:
          closure #5 in closure #1 in AspirePirPirParameters.decodeMessage<A>(decoder:)();
          break;
        case 6:
          uint64_t v17 = lazy protocol witness table accessor for type AspirePirPirAlgorithm and conformance AspirePirPirAlgorithm;
          uint64_t v18 = a2;
          uint64_t v19 = a1;
          uint64_t v20 = a3;
          uint64_t v21 = a4;
          uint64_t v22 = &OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__algorithm;
          goto LABEL_17;
        case 7:
          uint64_t v11 = (void (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F50680];
          uint64_t v12 = a2;
          uint64_t v13 = a1;
          uint64_t v14 = a3;
          uint64_t v15 = a4;
          char v16 = &OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__batchSize;
LABEL_5:
          closure #2 in closure #1 in AspirePirPirParameters.decodeMessage<A>(decoder:)(v12, v13, v14, v15, v16, v11);
          break;
        case 8:
          closure #8 in closure #1 in AspirePirPirParameters.decodeMessage<A>(decoder:)();
          break;
        case 9:
          uint64_t v17 = lazy protocol witness table accessor for type AspirePirKeyCompressionStrategy and conformance AspirePirKeyCompressionStrategy;
          uint64_t v18 = a2;
          uint64_t v19 = a1;
          uint64_t v20 = a3;
          uint64_t v21 = a4;
          uint64_t v22 = &OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__keyCompressionStrategy;
LABEL_17:
          closure #6 in closure #1 in AspirePirPirParameters.decodeMessage<A>(decoder:)(v18, v19, v20, v21, (uint64_t)v22, (void (*)(uint64_t))v17);
          break;
        case 10:
          closure #10 in closure #1 in AspirePirPirParameters.decodeMessage<A>(decoder:)();
          break;
        case 11:
          closure #11 in closure #1 in AspirePirPirParameters.decodeMessage<A>(decoder:)();
          break;
        case 12:
          closure #12 in closure #1 in AspirePirPirParameters.decodeMessage<A>(decoder:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #1 in closure #1 in AspirePirPirParameters.decodeMessage<A>(decoder:)()
{
  return swift_endAccess();
}

uint64_t closure #5 in closure #1 in AspirePirPirParameters.decodeMessage<A>(decoder:)()
{
  return swift_endAccess();
}

uint64_t closure #2 in closure #1 in AspirePirPirParameters.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void (*a6)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v9 = a2 + *a5;
  swift_beginAccess();
  a6(v9, a3, a4);
  return swift_endAccess();
}

uint64_t closure #8 in closure #1 in AspirePirPirParameters.decodeMessage<A>(decoder:)()
{
  return swift_endAccess();
}

uint64_t closure #6 in closure #1 in AspirePirPirParameters.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t))
{
  uint64_t v7 = swift_beginAccess();
  a6(v7);
  dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
  return swift_endAccess();
}

uint64_t closure #10 in closure #1 in AspirePirPirParameters.decodeMessage<A>(decoder:)()
{
  return swift_endAccess();
}

uint64_t closure #11 in closure #1 in AspirePirPirParameters.decodeMessage<A>(decoder:)()
{
  return swift_endAccess();
}

uint64_t closure #12 in closure #1 in AspirePirPirParameters.decodeMessage<A>(decoder:)()
{
  return swift_endAccess();
}

uint64_t AspirePirPirParameters.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspirePirPirParameters.traverse<A>(visitor:)(a1, a2, a3, (void (*)(void))type metadata accessor for AspirePirPirParameters, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in AspirePirPirParameters.traverse<A>(visitor:));
}

uint64_t closure #1 in AspirePirPirParameters.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = closure #1 in closure #1 in AspirePirPirParameters.traverse<A>(visitor:)(a1, a2, a3, a4);
  if (!v4)
  {
    char v10 = (void *)(a1
                   + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__numEntries);
    swift_beginAccess();
    if (*v10) {
      dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
    }
    uint64_t v11 = (void *)(a1
                   + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__entrySize);
    swift_beginAccess();
    if (*v11) {
      dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
    }
    uint64_t v12 = a1
        + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__dimensions;
    swift_beginAccess();
    if (*(void *)(*(void *)v12 + 16))
    {
      swift_bridgeObjectRetain();
      dispatch thunk of Visitor.visitPackedUInt64Field(value:fieldNumber:)();
      swift_bridgeObjectRelease();
    }
    closure #2 in closure #1 in AspirePirPirParameters.traverse<A>(visitor:)(a1, a2, a3, a4);
    uint64_t v13 = (void *)(a1
                   + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__algorithm);
    swift_beginAccess();
    if (*v13)
    {
      lazy protocol witness table accessor for type AspirePirPirAlgorithm and conformance AspirePirPirAlgorithm();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    uint64_t v14 = (void *)(a1
                   + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__batchSize);
    swift_beginAccess();
    if (*v14) {
      dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
    }
    closure #3 in closure #1 in AspirePirPirParameters.traverse<A>(visitor:)(a1, a2, a3, a4);
    uint64_t v15 = (void *)(a1
                   + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__keyCompressionStrategy);
    swift_beginAccess();
    if (*v15)
    {
      lazy protocol witness table accessor for type AspirePirKeyCompressionStrategy and conformance AspirePirKeyCompressionStrategy();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    closure #4 in closure #1 in AspirePirPirParameters.traverse<A>(visitor:)(a1);
    closure #5 in closure #1 in AspirePirPirParameters.traverse<A>(visitor:)(a1);
    return closure #6 in closure #1 in AspirePirPirParameters.traverse<A>(visitor:)(a1, a2, a3, a4);
  }
  return result;
}

uint64_t closure #1 in closure #1 in AspirePirPirParameters.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AspireHeEncryptionParameters(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__encryptionParameters;
  swift_beginAccess();
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v12, (uint64_t)v7, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v7, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  }
  outlined init with take of AspirePirPIRShardingFunction((uint64_t)v7, (uint64_t)v11, type metadata accessor for AspireHeEncryptionParameters);
  _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type AspireHeEncryptionParameters and conformance AspireHeEncryptionParameters, (void (*)(uint64_t))type metadata accessor for AspireHeEncryptionParameters);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v11, type metadata accessor for AspireHeEncryptionParameters);
}

uint64_t closure #2 in closure #1 in AspirePirPirParameters.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AspirePirKeywordPirParameters(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__keywordPirParams;
  swift_beginAccess();
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v12, (uint64_t)v7, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v7, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  }
  outlined init with take of AspirePirPIRShardingFunction((uint64_t)v7, (uint64_t)v11, type metadata accessor for AspirePirKeywordPirParameters);
  _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirKeywordPirParameters and conformance AspirePirKeywordPirParameters, (void (*)(uint64_t))type metadata accessor for AspirePirKeywordPirParameters);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v11, type metadata accessor for AspirePirKeywordPirParameters);
}

uint64_t closure #3 in closure #1 in AspirePirPirParameters.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__evaluationKeyConfig;
  swift_beginAccess();
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v12, (uint64_t)v7, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v7, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  }
  outlined init with take of AspirePirPIRShardingFunction((uint64_t)v7, (uint64_t)v11, type metadata accessor for AspireHeEvaluationKeyConfig);
  _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspireHeEvaluationKeyConfig and conformance AspireHeEvaluationKeyConfig, (void (*)(uint64_t))type metadata accessor for AspireHeEvaluationKeyConfig);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v11, type metadata accessor for AspireHeEvaluationKeyConfig);
}

uint64_t closure #4 in closure #1 in AspirePirPirParameters.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v1 = (unsigned char *)(a1
               + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__compressVectorizedPirResponse);
  uint64_t result = swift_beginAccess();
  if (*v1 != 2) {
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #5 in closure #1 in AspirePirPirParameters.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v1 = a1
     + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__vectorizedPirInternalBatchingSize;
  uint64_t result = swift_beginAccess();
  if ((*(unsigned char *)(v1 + 8) & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #6 in closure #1 in AspirePirPirParameters.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirBatchPirParameters?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AspirePirBatchPirParameters(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__batchPirParams;
  swift_beginAccess();
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v12, (uint64_t)v7, &demangling cache variable for type metadata for AspirePirBatchPirParameters?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v7, &demangling cache variable for type metadata for AspirePirBatchPirParameters?);
  }
  outlined init with take of AspirePirPIRShardingFunction((uint64_t)v7, (uint64_t)v11, type metadata accessor for AspirePirBatchPirParameters);
  _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirBatchPirParameters and conformance AspirePirBatchPirParameters, (void (*)(uint64_t))type metadata accessor for AspirePirBatchPirParameters);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v11, type metadata accessor for AspirePirBatchPirParameters);
}

uint64_t static AspirePirPirParameters.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static AspirePirPirPreprocessDbArgs.== infix(_:_:)(a1, a2, (uint64_t (*)(void, double))type metadata accessor for AspirePirPirParameters, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static AspirePirPirParameters.== infix(_:_:)) & 1;
}

BOOL closure #1 in static AspirePirPirParameters.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v138 = a2;
  uint64_t v3 = type metadata accessor for AspirePirBatchPirParameters(0);
  uint64_t v118 = *(void *)(v3 - 8);
  uint64_t v119 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v115 = (uint64_t)&v114 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v117 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspirePirBatchPirParameters?, AspirePirBatchPirParameters?));
  MEMORY[0x270FA5388](v117);
  uint64_t v120 = (uint64_t)&v114 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirBatchPirParameters?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v116 = (uint64_t)&v114 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v121 = (uint64_t)&v114 - v9;
  uint64_t v125 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  uint64_t v130 = *(void *)(v125 - 8);
  MEMORY[0x270FA5388](v125);
  uint64_t v122 = (uint64_t *)((char *)&v114 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v124 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireHeEvaluationKeyConfig?, AspireHeEvaluationKeyConfig?));
  MEMORY[0x270FA5388](v124);
  uint64_t v126 = (uint64_t)&v114 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  MEMORY[0x270FA5388](v12 - 8);
  int v123 = (uint64_t *)((char *)&v114 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v14);
  uint64_t v129 = (char *)&v114 - v15;
  uint64_t v16 = type metadata accessor for AspirePirKeywordPirParameters(0);
  uint64_t v132 = *(void *)(v16 - 8);
  uint64_t v133 = v16;
  MEMORY[0x270FA5388](v16);
  uint64_t v127 = (uint64_t)&v114 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v131 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspirePirKeywordPirParameters?, AspirePirKeywordPirParameters?));
  MEMORY[0x270FA5388](v131);
  uint64_t v134 = (uint64_t)&v114 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  MEMORY[0x270FA5388](v19 - 8);
  uint64_t v128 = (uint64_t)&v114 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  uint64_t v135 = (uint64_t)&v114 - v22;
  uint64_t v23 = type metadata accessor for AspireHeEncryptionParameters(0);
  uint64_t v24 = *(void *)(v23 - 8);
  MEMORY[0x270FA5388](v23);
  uint64_t v136 = (uint64_t)&v114 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireHeEncryptionParameters?, AspireHeEncryptionParameters?));
  uint64_t v27 = v26 - 8;
  MEMORY[0x270FA5388](v26);
  uint64_t v29 = (char *)&v114 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  MEMORY[0x270FA5388](v30 - 8);
  uint64_t v137 = (uint64_t)&v114 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v32);
  uint64_t v34 = (char *)&v114 - v33;
  uint64_t v35 = a1;
  uint64_t v36 = a1
      + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__encryptionParameters;
  swift_beginAccess();
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v36, (uint64_t)v34, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  uint64_t v37 = v138;
  uint64_t v38 = v138
      + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__encryptionParameters;
  swift_beginAccess();
  uint64_t v39 = (uint64_t)&v29[*(int *)(v27 + 56)];
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v34, (uint64_t)v29, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v38, v39, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  uint64_t v40 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48);
  if (v40((uint64_t)v29, 1, v23) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v34, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    uint64_t v41 = v37;
    uint64_t v42 = v35;
    if (v40(v39, 1, v23) == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v29, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      goto LABEL_9;
    }
LABEL_6:
    uint64_t v45 = &demangling cache variable for type metadata for (AspireHeEncryptionParameters?, AspireHeEncryptionParameters?);
    uint64_t v46 = (uint64_t)v29;
LABEL_7:
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v46, v45);
    goto LABEL_60;
  }
  uint64_t v43 = v35;
  uint64_t v44 = v137;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v29, v137, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  if (v40(v39, 1, v23) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v34, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    _s8CipherML28AspireHeEncryptionParametersVWOhTm_2(v44, type metadata accessor for AspireHeEncryptionParameters);
    goto LABEL_6;
  }
  uint64_t v47 = v136;
  outlined init with take of AspirePirPIRShardingFunction(v39, v136, type metadata accessor for AspireHeEncryptionParameters);
  uint64_t v42 = v43;
  swift_retain();
  uint64_t v41 = v37;
  swift_retain();
  char v48 = static AspireHeEncryptionParameters.== infix(_:_:)(v44, v47);
  _s8CipherML28AspireHeEncryptionParametersVWOhTm_2(v47, type metadata accessor for AspireHeEncryptionParameters);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v34, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  _s8CipherML28AspireHeEncryptionParametersVWOhTm_2(v44, type metadata accessor for AspireHeEncryptionParameters);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v29, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  if ((v48 & 1) == 0) {
    goto LABEL_60;
  }
LABEL_9:
  uint64_t v49 = (uint64_t *)(v42
                  + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__numEntries);
  swift_beginAccess();
  uint64_t v50 = *v49;
  uint64_t v51 = (void *)(v41
                 + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__numEntries);
  swift_beginAccess();
  if (v50 != *v51) {
    goto LABEL_60;
  }
  uint64_t v52 = (uint64_t *)(v42
                  + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__entrySize);
  swift_beginAccess();
  uint64_t v53 = *v52;
  uint64_t v54 = (void *)(v41
                 + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__entrySize);
  swift_beginAccess();
  if (v53 != *v54) {
    goto LABEL_60;
  }
  uint64_t v55 = (void **)(v42
                  + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__dimensions);
  swift_beginAccess();
  uint64_t v56 = *v55;
  uint64_t v57 = (void **)(v41
                  + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__dimensions);
  swift_beginAccess();
  if (!specialized static Array<A>.== infix(_:_:)(v56, *v57)) {
    goto LABEL_60;
  }
  uint64_t v58 = v42
      + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__keywordPirParams;
  swift_beginAccess();
  uint64_t v59 = v135;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v58, v135, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  uint64_t v60 = v41
      + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__keywordPirParams;
  swift_beginAccess();
  uint64_t v61 = v134;
  uint64_t v62 = v134 + *(int *)(v131 + 48);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v59, v134, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v60, v62, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  uint64_t v63 = v133;
  uint64_t v64 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v132 + 48);
  if (v64(v61, 1, v133) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v59, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
    int v65 = v64(v62, 1, v63);
    uint64_t v67 = (uint64_t)v129;
    uint64_t v66 = v130;
    if (v65 == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v61, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
      goto LABEL_19;
    }
    goto LABEL_17;
  }
  uint64_t v68 = v128;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v61, v128, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  int v69 = v64(v62, 1, v63);
  uint64_t v67 = (uint64_t)v129;
  uint64_t v66 = v130;
  if (v69 == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v135, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
    _s8CipherML28AspireHeEncryptionParametersVWOhTm_2(v68, type metadata accessor for AspirePirKeywordPirParameters);
LABEL_17:
    uint64_t v45 = &demangling cache variable for type metadata for (AspirePirKeywordPirParameters?, AspirePirKeywordPirParameters?);
    uint64_t v46 = v61;
    goto LABEL_7;
  }
  uint64_t v70 = v127;
  outlined init with take of AspirePirPIRShardingFunction(v62, v127, type metadata accessor for AspirePirKeywordPirParameters);
  char v71 = specialized static AspirePirKeywordPirParameters.== infix(_:_:)(v68);
  _s8CipherML28AspireHeEncryptionParametersVWOhTm_2(v70, type metadata accessor for AspirePirKeywordPirParameters);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v135, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  _s8CipherML28AspireHeEncryptionParametersVWOhTm_2(v68, type metadata accessor for AspirePirKeywordPirParameters);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v61, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  if ((v71 & 1) == 0) {
    goto LABEL_60;
  }
LABEL_19:
  uint64_t v72 = (uint64_t *)(v42
                  + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__algorithm);
  swift_beginAccess();
  uint64_t v73 = *v72;
  uint64_t v74 = (uint64_t *)(v41
                  + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__algorithm);
  swift_beginAccess();
  uint64_t v75 = *v74;
  if (*((unsigned char *)v74 + 8) == 1)
  {
    if (v75)
    {
      if (v75 == 1)
      {
        if (v73 != 1) {
          goto LABEL_60;
        }
      }
      else if (v73 != 2)
      {
        goto LABEL_60;
      }
    }
    else if (v73)
    {
      goto LABEL_60;
    }
  }
  else if (v73 != v75)
  {
    goto LABEL_60;
  }
  uint64_t v76 = (uint64_t *)(v42
                  + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__batchSize);
  swift_beginAccess();
  uint64_t v77 = *v76;
  int v78 = (void *)(v41
                 + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__batchSize);
  swift_beginAccess();
  if (v77 != *v78) {
    goto LABEL_60;
  }
  uint64_t v79 = v42
      + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__evaluationKeyConfig;
  swift_beginAccess();
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v79, v67, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  uint64_t v80 = v41
      + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__evaluationKeyConfig;
  swift_beginAccess();
  uint64_t v81 = v126;
  uint64_t v82 = v126 + *(int *)(v124 + 48);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v67, v126, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  uint64_t v83 = v80;
  uint64_t v84 = v81;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v83, v82, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  uint64_t v85 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v66 + 48);
  uint64_t v86 = v81;
  uint64_t v87 = v125;
  if (v85(v86, 1, v125) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v67, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
    if (v85(v82, 1, v87) == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v84, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
      goto LABEL_37;
    }
    goto LABEL_35;
  }
  uint64_t v88 = v123;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v84, (uint64_t)v123, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  if (v85(v82, 1, v87) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v67, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
    _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v88, type metadata accessor for AspireHeEvaluationKeyConfig);
LABEL_35:
    uint64_t v45 = &demangling cache variable for type metadata for (AspireHeEvaluationKeyConfig?, AspireHeEvaluationKeyConfig?);
    uint64_t v46 = v84;
    goto LABEL_7;
  }
  uint64_t v89 = v122;
  outlined init with take of AspirePirPIRShardingFunction(v82, (uint64_t)v122, type metadata accessor for AspireHeEvaluationKeyConfig);
  char v90 = specialized static AspireHeEvaluationKeyConfig.== infix(_:_:)(v88, v89);
  _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v89, type metadata accessor for AspireHeEvaluationKeyConfig);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v67, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v88, type metadata accessor for AspireHeEvaluationKeyConfig);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v84, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  if ((v90 & 1) == 0) {
    goto LABEL_60;
  }
LABEL_37:
  uint64_t v91 = (uint64_t *)(v42
                  + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__keyCompressionStrategy);
  swift_beginAccess();
  uint64_t v92 = *v91;
  uint64_t v93 = (uint64_t *)(v41
                  + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__keyCompressionStrategy);
  swift_beginAccess();
  uint64_t v94 = *v93;
  if (*((unsigned char *)v93 + 8) == 1)
  {
    if (v94)
    {
      if (v94 == 1)
      {
        if (v92 != 1) {
          goto LABEL_60;
        }
      }
      else if (v92 != 2)
      {
        goto LABEL_60;
      }
    }
    else if (v92)
    {
      goto LABEL_60;
    }
  }
  else if (v92 != v94)
  {
    goto LABEL_60;
  }
  uint64_t v95 = (unsigned __int8 *)(v42
                          + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__compressVectorizedPirResponse);
  swift_beginAccess();
  int v96 = *v95;
  int v97 = (unsigned __int8 *)(v41
                          + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__compressVectorizedPirResponse);
  swift_beginAccess();
  int v98 = *v97;
  if (v96 == 2)
  {
    if (v98 != 2) {
      goto LABEL_60;
    }
  }
  else if (v98 == 2 || ((((v98 & 1) == 0) ^ v96) & 1) == 0)
  {
    goto LABEL_60;
  }
  uint64_t v99 = (uint64_t *)(v42
                  + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__vectorizedPirInternalBatchingSize);
  swift_beginAccess();
  uint64_t v100 = *v99;
  char v101 = *((unsigned char *)v99 + 8);
  uint64_t v102 = v41
       + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__vectorizedPirInternalBatchingSize;
  swift_beginAccess();
  if (v101)
  {
    if (*(unsigned char *)(v102 + 8)) {
      goto LABEL_57;
    }
LABEL_60:
    swift_release();
    swift_release();
    return 0;
  }
  if ((*(unsigned char *)(v102 + 8) & 1) != 0 || v100 != *(void *)v102) {
    goto LABEL_60;
  }
LABEL_57:
  uint64_t v103 = v42
       + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__batchPirParams;
  swift_beginAccess();
  uint64_t v104 = v121;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v103, v121, &demangling cache variable for type metadata for AspirePirBatchPirParameters?);
  uint64_t v105 = v41
       + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__batchPirParams;
  swift_beginAccess();
  uint64_t v106 = v120;
  uint64_t v107 = v120 + *(int *)(v117 + 48);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v104, v120, &demangling cache variable for type metadata for AspirePirBatchPirParameters?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v105, v107, &demangling cache variable for type metadata for AspirePirBatchPirParameters?);
  uint64_t v108 = v119;
  uint64_t v109 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v118 + 48);
  if (v109(v106, 1, v119) != 1)
  {
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v106, v116, &demangling cache variable for type metadata for AspirePirBatchPirParameters?);
    if (v109(v107, 1, v108) == 1)
    {
      swift_release();
      swift_release();
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v121, &demangling cache variable for type metadata for AspirePirBatchPirParameters?);
      _s8CipherML28AspireHeEncryptionParametersVWOhTm_2(v116, type metadata accessor for AspirePirBatchPirParameters);
      uint64_t v106 = v120;
      goto LABEL_64;
    }
    uint64_t v111 = v115;
    outlined init with take of AspirePirPIRShardingFunction(v107, v115, type metadata accessor for AspirePirBatchPirParameters);
    uint64_t v112 = v116;
    char v113 = specialized static AspirePirBatchPirParameters.== infix(_:_:)(v116, v111);
    swift_release();
    swift_release();
    _s8CipherML28AspireHeEncryptionParametersVWOhTm_2(v111, type metadata accessor for AspirePirBatchPirParameters);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v121, &demangling cache variable for type metadata for AspirePirBatchPirParameters?);
    _s8CipherML28AspireHeEncryptionParametersVWOhTm_2(v112, type metadata accessor for AspirePirBatchPirParameters);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v120, &demangling cache variable for type metadata for AspirePirBatchPirParameters?);
    return (v113 & 1) != 0;
  }
  swift_release();
  swift_release();
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v121, &demangling cache variable for type metadata for AspirePirBatchPirParameters?);
  if (v109(v107, 1, v108) != 1)
  {
LABEL_64:
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v106, &demangling cache variable for type metadata for (AspirePirBatchPirParameters?, AspirePirBatchPirParameters?));
    return 0;
  }
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v106, &demangling cache variable for type metadata for AspirePirBatchPirParameters?);
  return 1;
}

Swift::Int AspirePirPirParameters.hashValue.getter()
{
  return AspirePirPirParameters.hashValue.getter((void (*)(void))type metadata accessor for AspirePirPirParameters, &lazy protocol witness table cache variable for type AspirePirPirParameters and conformance AspirePirPirParameters, (void (*)(uint64_t))type metadata accessor for AspirePirPirParameters);
}

uint64_t protocol witness for Message.init() in conformance AspirePirPirParameters@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance AspirePirPirParameters(a1, &one-time initialization token for defaultInstance, &static AspirePirPirParameters._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspirePirPirParameters()
{
  return 0xD000000000000018;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspirePirPirParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspirePirPirParameters.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspirePirPirParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspirePirPirParameters.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspirePirPirParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirPirParameters and conformance AspirePirPirParameters, (void (*)(uint64_t))type metadata accessor for AspirePirPirParameters);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspirePirPirParameters@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspirePirPirParameters._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspirePirPirParameters(uint64_t a1)
{
  uint64_t v2 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirPirParameters and conformance AspirePirPirParameters, (void (*)(uint64_t))type metadata accessor for AspirePirPirParameters);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspirePirPirParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirPirParameters and conformance AspirePirPirParameters, (void (*)(uint64_t))type metadata accessor for AspirePirPirParameters);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AspirePirPirParameters(uint64_t a1, uint64_t a2)
{
  return specialized static AspirePirPirPreprocessDbArgs.== infix(_:_:)(a1, a2, (uint64_t (*)(void, double))type metadata accessor for AspirePirPirParameters, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static AspirePirPirParameters.== infix(_:_:)) & 1;
}

unint64_t static AspirePirCuckooTableConfig.protoMessageName.getter()
{
  return 0xD00000000000001CLL;
}

uint64_t static AspirePirCuckooTableConfig._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspirePirCuckooTableConfig._protobuf_nameMap, a1);
}

uint64_t AspirePirCuckooTableConfig.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 4:
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          break;
        case 2:
        case 3:
        case 5:
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
          break;
        case 6:
        case 7:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t AspirePirCuckooTableConfig.traverse<A>(visitor:)()
{
  if (!*(void *)v0 || (uint64_t result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(), !v1))
  {
    if (!*(void *)(v0 + 8)
      || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v1))
    {
      if (!*(void *)(v0 + 16)
        || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v1))
      {
        if (!*(void *)(v0 + 24)
          || (uint64_t result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(), !v1))
        {
          if (!*(void *)(v0 + 32)
            || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v1))
          {
            if (*(unsigned char *)(v0 + 40) != 1
              || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
            {
              if (*(unsigned char *)(v0 + 41) != 1
                || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
              {
                type metadata accessor for AspirePirCuckooTableConfig(0);
                return UnknownStorage.traverse<A>(visitor:)();
              }
            }
          }
        }
      }
    }
  }
  return result;
}

Swift::Int AspirePirCuckooTableConfig.hashValue.getter()
{
  return AspirePirPirParameters.hashValue.getter((void (*)(void))type metadata accessor for AspirePirCuckooTableConfig, &lazy protocol witness table cache variable for type AspirePirCuckooTableConfig and conformance AspirePirCuckooTableConfig, (void (*)(uint64_t))type metadata accessor for AspirePirCuckooTableConfig);
}

uint64_t protocol witness for Message.init() in conformance AspirePirCuckooTableConfig@<X0>(_OWORD *a1@<X8>)
{
  *(_OWORD *)((char *)a1 + 26) = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspirePirCuckooTableConfig()
{
  return 0xD00000000000001CLL;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance AspirePirCuckooTableConfig@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 44);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance AspirePirCuckooTableConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 44);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance AspirePirCuckooTableConfig())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspirePirCuckooTableConfig()
{
  return AspirePirCuckooTableConfig.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspirePirCuckooTableConfig()
{
  return AspirePirCuckooTableConfig.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspirePirCuckooTableConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirCuckooTableConfig and conformance AspirePirCuckooTableConfig, (void (*)(uint64_t))type metadata accessor for AspirePirCuckooTableConfig);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspirePirCuckooTableConfig@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspirePirCuckooTableConfig._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspirePirCuckooTableConfig(uint64_t a1)
{
  uint64_t v2 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirCuckooTableConfig and conformance AspirePirCuckooTableConfig, (void (*)(uint64_t))type metadata accessor for AspirePirCuckooTableConfig);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspirePirCuckooTableConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirCuckooTableConfig and conformance AspirePirCuckooTableConfig, (void (*)(uint64_t))type metadata accessor for AspirePirCuckooTableConfig);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

unint64_t static AspirePirBatchKeywordPirConfig.protoMessageName.getter()
{
  return 0xD000000000000020;
}

uint64_t static AspirePirBatchKeywordPirConfig._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspirePirBatchKeywordPirConfig._protobuf_nameMap, a1);
}

uint64_t AspirePirBatchKeywordPirConfig.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          closure #1 in AspirePirBatchKeywordPirConfig.decodeMessage<A>(decoder:)();
          break;
        case 2:
        case 4:
        case 5:
        case 6:
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
          break;
        case 3:
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          break;
        case 7:
          type metadata accessor for AspirePirBatchKeywordPirConfig(0);
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #1 in AspirePirBatchKeywordPirConfig.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t AspirePirBatchKeywordPirConfig.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = closure #1 in AspirePirBatchKeywordPirConfig.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3);
  if (!v4)
  {
    if (*v3) {
      dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
    }
    if (v3[1]) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    if (v3[2]) {
      dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
    }
    if (v3[3]) {
      dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
    }
    if (v3[4]) {
      dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
    }
    closure #2 in AspirePirBatchKeywordPirConfig.traverse<A>(visitor:)((uint64_t)v3);
    type metadata accessor for AspirePirBatchKeywordPirConfig(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in AspirePirBatchKeywordPirConfig.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AspirePirCuckooTableConfig(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for AspirePirBatchKeywordPirConfig(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v12 + 40), (uint64_t)v7, &demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v7, &demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
  }
  outlined init with take of AspirePirPIRShardingFunction((uint64_t)v7, (uint64_t)v11, type metadata accessor for AspirePirCuckooTableConfig);
  _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirCuckooTableConfig and conformance AspirePirCuckooTableConfig, (void (*)(uint64_t))type metadata accessor for AspirePirCuckooTableConfig);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v11, type metadata accessor for AspirePirCuckooTableConfig);
}

uint64_t closure #2 in AspirePirBatchKeywordPirConfig.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = type metadata accessor for AspirePirBatchKeywordPirConfig(0);
  if ((*(unsigned char *)(a1 + *(int *)(result + 44) + 8) & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
  }
  return result;
}

Swift::Int AspirePirBatchKeywordPirConfig.hashValue.getter()
{
  return AspirePirPirParameters.hashValue.getter((void (*)(void))type metadata accessor for AspirePirBatchKeywordPirConfig, &lazy protocol witness table cache variable for type AspirePirBatchKeywordPirConfig and conformance AspirePirBatchKeywordPirConfig, (void (*)(uint64_t))type metadata accessor for AspirePirBatchKeywordPirConfig);
}

uint64_t protocol witness for Message.init() in conformance AspirePirBatchKeywordPirConfig@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  UnknownStorage.init()();
  uint64_t v4 = a2 + *(int *)(a1 + 40);
  uint64_t v5 = type metadata accessor for AspirePirCuckooTableConfig(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v7 = a2 + *(int *)(a1 + 44);
  *(void *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 8) = 1;
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspirePirBatchKeywordPirConfig()
{
  return 0xD000000000000020;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspirePirBatchKeywordPirConfig()
{
  return AspirePirBatchKeywordPirConfig.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspirePirBatchKeywordPirConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspirePirBatchKeywordPirConfig.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspirePirBatchKeywordPirConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirBatchKeywordPirConfig and conformance AspirePirBatchKeywordPirConfig, (void (*)(uint64_t))type metadata accessor for AspirePirBatchKeywordPirConfig);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspirePirBatchKeywordPirConfig@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspirePirBatchKeywordPirConfig._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspirePirBatchKeywordPirConfig(uint64_t a1)
{
  uint64_t v2 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirBatchKeywordPirConfig and conformance AspirePirBatchKeywordPirConfig, (void (*)(uint64_t))type metadata accessor for AspirePirBatchKeywordPirConfig);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspirePirBatchKeywordPirConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirBatchKeywordPirConfig and conformance AspirePirBatchKeywordPirConfig, (void (*)(uint64_t))type metadata accessor for AspirePirBatchKeywordPirConfig);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

unint64_t static AspirePirBatchPirParameters.protoMessageName.getter()
{
  return 0xD00000000000001DLL;
}

uint64_t static AspirePirBatchPirParameters._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspirePirBatchPirParameters._protobuf_nameMap, a1);
}

uint64_t AspirePirBatchPirParameters.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 4:
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
          break;
        case 3:
          dispatch thunk of Decoder.decodeRepeatedUInt64Field(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t AspirePirBatchPirParameters.traverse<A>(visitor:)()
{
  if (!*v0 || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v1))
  {
    if (!v0[1] || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v1))
    {
      if (!*(void *)(v0[2] + 16)
        || (uint64_t result = dispatch thunk of Visitor.visitPackedUInt64Field(value:fieldNumber:)(), !v1))
      {
        if (!v0[3] || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v1))
        {
          type metadata accessor for AspirePirBatchPirParameters(0);
          return UnknownStorage.traverse<A>(visitor:)();
        }
      }
    }
  }
  return result;
}

Swift::Int AspirePirBatchPirParameters.hashValue.getter()
{
  return AspirePirPirParameters.hashValue.getter((void (*)(void))type metadata accessor for AspirePirBatchPirParameters, &lazy protocol witness table cache variable for type AspirePirBatchPirParameters and conformance AspirePirBatchPirParameters, (void (*)(uint64_t))type metadata accessor for AspirePirBatchPirParameters);
}

uint64_t protocol witness for Message.init() in conformance AspirePirBatchPirParameters@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = MEMORY[0x263F8EE78];
  a1[3] = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspirePirBatchPirParameters()
{
  return 0xD00000000000001DLL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspirePirBatchPirParameters()
{
  return AspirePirBatchPirParameters.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspirePirBatchPirParameters()
{
  return AspirePirBatchPirParameters.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspirePirBatchPirParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirBatchPirParameters and conformance AspirePirBatchPirParameters, (void (*)(uint64_t))type metadata accessor for AspirePirBatchPirParameters);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspirePirBatchPirParameters@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspirePirBatchPirParameters._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspirePirBatchPirParameters(uint64_t a1)
{
  uint64_t v2 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirBatchPirParameters and conformance AspirePirBatchPirParameters, (void (*)(uint64_t))type metadata accessor for AspirePirBatchPirParameters);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspirePirBatchPirParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirBatchPirParameters and conformance AspirePirBatchPirParameters, (void (*)(uint64_t))type metadata accessor for AspirePirBatchPirParameters);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

unint64_t static AspirePirKeywordPirParameters.protoMessageName.getter()
{
  return 0xD00000000000001FLL;
}

uint64_t static AspirePirKeywordPirParameters._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspirePirKeywordPirParameters._protobuf_nameMap, a1);
}

uint64_t AspirePirKeywordPirParameters.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
          break;
        case 2:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        case 3:
          closure #3 in AspirePirKeywordPirParameters.decodeMessage<A>(decoder:)();
          break;
        case 4:
          closure #4 in AspirePirKeywordPirParameters.decodeMessage<A>(decoder:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #3 in AspirePirKeywordPirParameters.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t closure #4 in AspirePirKeywordPirParameters.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t AspirePirKeywordPirParameters.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)v3 || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v4))
  {
    if (*(unsigned char *)(v3 + 8) != 1
      || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v4))
    {
      uint64_t result = closure #1 in AspirePirKeywordPirParameters.traverse<A>(visitor:)(v3, a1, a2, a3);
      if (!v4)
      {
        closure #2 in AspirePirKeywordPirParameters.traverse<A>(visitor:)(v3, a1, a2, a3);
        closure #1 in AspirePirKeywordPirParameters.traverse<A>(visitor:)(v3, a1, a2, a3);
        type metadata accessor for AspirePirKeywordPirParameters(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

uint64_t closure #2 in AspirePirKeywordPirParameters.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPIRShardingFunction?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AspirePirPIRShardingFunction(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for AspirePirKeywordPirParameters(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v12 + 32), (uint64_t)v7, &demangling cache variable for type metadata for AspirePirPIRShardingFunction?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v7, &demangling cache variable for type metadata for AspirePirPIRShardingFunction?);
  }
  outlined init with take of AspirePirPIRShardingFunction((uint64_t)v7, (uint64_t)v11, type metadata accessor for AspirePirPIRShardingFunction);
  _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirPIRShardingFunction and conformance AspirePirPIRShardingFunction, (void (*)(uint64_t))type metadata accessor for AspirePirPIRShardingFunction);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v11, type metadata accessor for AspirePirPIRShardingFunction);
}

uint64_t closure #1 in AspirePirKeywordPirParameters.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[3] = a4;
  v14[1] = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirSymmetricPirClientConfig?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AspirePirSymmetricPirClientConfig(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for AspirePirKeywordPirParameters(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v12 + 28), (uint64_t)v7, &demangling cache variable for type metadata for AspirePirSymmetricPirClientConfig?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v7, &demangling cache variable for type metadata for AspirePirSymmetricPirClientConfig?);
  }
  outlined init with take of AspirePirPIRShardingFunction((uint64_t)v7, (uint64_t)v11, type metadata accessor for AspirePirSymmetricPirClientConfig);
  _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirSymmetricPirClientConfig and conformance AspirePirSymmetricPirClientConfig, (void (*)(uint64_t))type metadata accessor for AspirePirSymmetricPirClientConfig);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v11, type metadata accessor for AspirePirSymmetricPirClientConfig);
}

Swift::Int AspirePirKeywordPirParameters.hashValue.getter()
{
  return AspirePirPirParameters.hashValue.getter((void (*)(void))type metadata accessor for AspirePirKeywordPirParameters, &lazy protocol witness table cache variable for type AspirePirKeywordPirParameters and conformance AspirePirKeywordPirParameters, (void (*)(uint64_t))type metadata accessor for AspirePirKeywordPirParameters);
}

uint64_t protocol witness for Message.init() in conformance AspirePirKeywordPirParameters@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 0;
  UnknownStorage.init()();
  uint64_t v4 = a2 + *(int *)(a1 + 28);
  uint64_t v5 = type metadata accessor for AspirePirSymmetricPirClientConfig(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v6 = a2 + *(int *)(a1 + 32);
  uint64_t v7 = type metadata accessor for AspirePirPIRShardingFunction(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
  return v8(v6, 1, 1, v7);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspirePirKeywordPirParameters()
{
  return 0xD00000000000001FLL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspirePirKeywordPirParameters()
{
  return AspirePirKeywordPirParameters.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspirePirKeywordPirParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspirePirKeywordPirParameters.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspirePirKeywordPirParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirKeywordPirParameters and conformance AspirePirKeywordPirParameters, (void (*)(uint64_t))type metadata accessor for AspirePirKeywordPirParameters);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspirePirKeywordPirParameters@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspirePirKeywordPirParameters._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspirePirKeywordPirParameters(uint64_t a1)
{
  uint64_t v2 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirKeywordPirParameters and conformance AspirePirKeywordPirParameters, (void (*)(uint64_t))type metadata accessor for AspirePirKeywordPirParameters);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspirePirKeywordPirParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirKeywordPirParameters and conformance AspirePirKeywordPirParameters, (void (*)(uint64_t))type metadata accessor for AspirePirKeywordPirParameters);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

unint64_t static AspirePirPIRShardingFunction.protoMessageName.getter()
{
  return 0xD00000000000001ELL;
}

uint64_t static AspirePirPIRShardingFunction._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspirePirPIRShardingFunction._protobuf_nameMap, a1);
}

uint64_t AspirePirPIRShardingFunction.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspirePirPIRShardingFunction.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in AspirePirPIRShardingFunction.decodeMessage<A>(decoder:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #2 in AspirePirPIRShardingFunction.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in AspirePirPIRShardingFunction.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v50 = a4;
  uint64_t v48 = a2;
  uint64_t v49 = a3;
  uint64_t v5 = type metadata accessor for AspirePirPIRShardingFunctionSHA256(0);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v42 = (uint64_t)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v45 = (char *)&v38 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function(0);
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v38 - v18;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPIRShardingFunctionSHA256?);
  MEMORY[0x270FA5388](v20 - 8);
  uint64_t v43 = (uint64_t)&v38 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v23 = MEMORY[0x270FA5388](v22);
  uint64_t v25 = (char *)&v38 - v24;
  uint64_t v44 = v6;
  uint64_t v26 = *(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56);
  uint64_t v47 = v5;
  uint64_t v27 = v5;
  uint64_t v28 = v26;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t, double))v26)((char *)&v38 - v24, 1, 1, v27, v23);
  uint64_t v41 = a1;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v12, &demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
  uint64_t v40 = v14;
  int v29 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if (v29 == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v12, &demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
    uint64_t v30 = v13;
    uint64_t v31 = v47;
  }
  else
  {
    uint64_t v39 = v28;
    uint64_t v32 = (uint64_t)v45;
    outlined init with take of AspirePirPIRShardingFunction((uint64_t)v12, (uint64_t)v19, type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function);
    outlined init with take of AspirePirPIRShardingFunction((uint64_t)v19, (uint64_t)v16, type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function);
    uint64_t v30 = v13;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v16, type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function);
      uint64_t v31 = v47;
    }
    else
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v25, &demangling cache variable for type metadata for AspirePirPIRShardingFunctionSHA256?);
      outlined init with take of AspirePirPIRShardingFunction((uint64_t)v16, v32, type metadata accessor for AspirePirPIRShardingFunctionSHA256);
      outlined init with take of AspirePirPIRShardingFunction(v32, (uint64_t)v25, type metadata accessor for AspirePirPIRShardingFunctionSHA256);
      uint64_t v31 = v47;
      v39(v25, 0, 1, v47);
    }
  }
  uint64_t v33 = v46;
  _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirPIRShardingFunctionSHA256 and conformance AspirePirPIRShardingFunctionSHA256, (void (*)(uint64_t))type metadata accessor for AspirePirPIRShardingFunctionSHA256);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v33) {
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v25, &demangling cache variable for type metadata for AspirePirPIRShardingFunctionSHA256?);
  }
  uint64_t v35 = v43;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v25, v43, &demangling cache variable for type metadata for AspirePirPIRShardingFunctionSHA256?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v44 + 48))(v35, 1, v31) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v25, &demangling cache variable for type metadata for AspirePirPIRShardingFunctionSHA256?);
    return outlined destroy of AMDPbHEConfig.OneOf_Config?(v35, &demangling cache variable for type metadata for AspirePirPIRShardingFunctionSHA256?);
  }
  else
  {
    uint64_t v36 = v42;
    outlined init with take of AspirePirPIRShardingFunction(v35, v42, type metadata accessor for AspirePirPIRShardingFunctionSHA256);
    if (v29 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v25, &demangling cache variable for type metadata for AspirePirPIRShardingFunctionSHA256?);
    uint64_t v37 = v41;
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v41, &demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
    outlined init with take of AspirePirPIRShardingFunction(v36, v37, type metadata accessor for AspirePirPIRShardingFunctionSHA256);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v30);
  }
}

uint64_t closure #2 in AspirePirPIRShardingFunction.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v50 = a4;
  uint64_t v48 = a2;
  uint64_t v49 = a3;
  uint64_t v5 = type metadata accessor for AspirePirPIRShardingFunctionDoubleMod(0);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v42 = (uint64_t)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v45 = (char *)&v38 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function(0);
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v38 - v18;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPIRShardingFunctionDoubleMod?);
  MEMORY[0x270FA5388](v20 - 8);
  uint64_t v43 = (uint64_t)&v38 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v23 = MEMORY[0x270FA5388](v22);
  uint64_t v25 = (char *)&v38 - v24;
  uint64_t v44 = v6;
  uint64_t v26 = *(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56);
  uint64_t v47 = v5;
  uint64_t v27 = v5;
  uint64_t v28 = v26;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t, double))v26)((char *)&v38 - v24, 1, 1, v27, v23);
  uint64_t v41 = a1;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v12, &demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
  uint64_t v40 = v14;
  int v29 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if (v29 == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v12, &demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
    uint64_t v30 = v13;
  }
  else
  {
    uint64_t v39 = v28;
    uint64_t v31 = (uint64_t)v45;
    outlined init with take of AspirePirPIRShardingFunction((uint64_t)v12, (uint64_t)v19, type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function);
    outlined init with take of AspirePirPIRShardingFunction((uint64_t)v19, (uint64_t)v16, type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function);
    uint64_t v30 = v13;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v25, &demangling cache variable for type metadata for AspirePirPIRShardingFunctionDoubleMod?);
      outlined init with take of AspirePirPIRShardingFunction((uint64_t)v16, v31, type metadata accessor for AspirePirPIRShardingFunctionDoubleMod);
      outlined init with take of AspirePirPIRShardingFunction(v31, (uint64_t)v25, type metadata accessor for AspirePirPIRShardingFunctionDoubleMod);
      uint64_t v32 = v47;
      v39(v25, 0, 1, v47);
      goto LABEL_7;
    }
    _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v16, type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function);
  }
  uint64_t v32 = v47;
LABEL_7:
  uint64_t v33 = v46;
  _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirPIRShardingFunctionDoubleMod and conformance AspirePirPIRShardingFunctionDoubleMod, (void (*)(uint64_t))type metadata accessor for AspirePirPIRShardingFunctionDoubleMod);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v33) {
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v25, &demangling cache variable for type metadata for AspirePirPIRShardingFunctionDoubleMod?);
  }
  uint64_t v35 = v43;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v25, v43, &demangling cache variable for type metadata for AspirePirPIRShardingFunctionDoubleMod?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v44 + 48))(v35, 1, v32) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v25, &demangling cache variable for type metadata for AspirePirPIRShardingFunctionDoubleMod?);
    return outlined destroy of AMDPbHEConfig.OneOf_Config?(v35, &demangling cache variable for type metadata for AspirePirPIRShardingFunctionDoubleMod?);
  }
  else
  {
    uint64_t v36 = v42;
    outlined init with take of AspirePirPIRShardingFunction(v35, v42, type metadata accessor for AspirePirPIRShardingFunctionDoubleMod);
    if (v29 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v25, &demangling cache variable for type metadata for AspirePirPIRShardingFunctionDoubleMod?);
    uint64_t v37 = v41;
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v41, &demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
    outlined init with take of AspirePirPIRShardingFunction(v36, v37, type metadata accessor for AspirePirPIRShardingFunctionDoubleMod);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v30);
  }
}

uint64_t AspirePirPIRShardingFunction.traverse<A>(visitor:)()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v0, (uint64_t)v4, &demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
  uint64_t v5 = type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5) == 1) {
    goto LABEL_6;
  }
  if (swift_getEnumCaseMultiPayload() == 1) {
    closure #2 in AspirePirPIRShardingFunction.traverse<A>(visitor:)(v0);
  }
  else {
    closure #1 in AspirePirPIRShardingFunction.traverse<A>(visitor:)(v0);
  }
  uint64_t result = _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v4, type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function);
  if (!v1)
  {
LABEL_6:
    type metadata accessor for AspirePirPIRShardingFunction(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in AspirePirPIRShardingFunction.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for AspirePirPIRShardingFunctionSHA256(0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v4, &demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
  uint64_t v8 = type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v4, &demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined init with take of AspirePirPIRShardingFunction((uint64_t)v4, (uint64_t)v7, type metadata accessor for AspirePirPIRShardingFunctionSHA256);
    _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirPIRShardingFunctionSHA256 and conformance AspirePirPIRShardingFunctionSHA256, (void (*)(uint64_t))type metadata accessor for AspirePirPIRShardingFunctionSHA256);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v7, type metadata accessor for AspirePirPIRShardingFunctionSHA256);
  }
  uint64_t result = _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v4, type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function);
  __break(1u);
  return result;
}

uint64_t closure #2 in AspirePirPIRShardingFunction.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for AspirePirPIRShardingFunctionDoubleMod(0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v4, &demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
  uint64_t v8 = type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v4, &demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with take of AspirePirPIRShardingFunction((uint64_t)v4, (uint64_t)v7, type metadata accessor for AspirePirPIRShardingFunctionDoubleMod);
    _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirPIRShardingFunctionDoubleMod and conformance AspirePirPIRShardingFunctionDoubleMod, (void (*)(uint64_t))type metadata accessor for AspirePirPIRShardingFunctionDoubleMod);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v7, type metadata accessor for AspirePirPIRShardingFunctionDoubleMod);
  }
  uint64_t result = _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v4, type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function);
  __break(1u);
  return result;
}

Swift::Int AspirePirPIRShardingFunction.hashValue.getter()
{
  return AspirePirPirParameters.hashValue.getter((void (*)(void))type metadata accessor for AspirePirPIRShardingFunction, &lazy protocol witness table cache variable for type AspirePirPIRShardingFunction and conformance AspirePirPIRShardingFunction, (void (*)(uint64_t))type metadata accessor for AspirePirPIRShardingFunction);
}

uint64_t protocol witness for Message.init() in conformance AspirePirPIRShardingFunction@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Message.init() in conformance AspirePirPIRShardingFunction(type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function, a1);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspirePirPIRShardingFunction()
{
  return 0xD00000000000001ELL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspirePirPIRShardingFunction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspirePirPIRShardingFunction.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspirePirPIRShardingFunction()
{
  return AspirePirPIRShardingFunction.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspirePirPIRShardingFunction(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirPIRShardingFunction and conformance AspirePirPIRShardingFunction, (void (*)(uint64_t))type metadata accessor for AspirePirPIRShardingFunction);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspirePirPIRShardingFunction@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspirePirPIRShardingFunction._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspirePirPIRShardingFunction(uint64_t a1)
{
  uint64_t v2 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirPIRShardingFunction and conformance AspirePirPIRShardingFunction, (void (*)(uint64_t))type metadata accessor for AspirePirPIRShardingFunction);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspirePirPIRShardingFunction(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirPIRShardingFunction and conformance AspirePirPIRShardingFunction, (void (*)(uint64_t))type metadata accessor for AspirePirPIRShardingFunction);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

unint64_t static AspirePirPIRShardingFunctionSHA256.protoMessageName.getter()
{
  return 0xD000000000000024;
}

uint64_t static AspirePirPIRShardingFunctionSHA256._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspirePirPIRShardingFunctionSHA256._protobuf_nameMap, a1);
}

uint64_t AspirePirPIRShardingFunctionSHA256.decodeMessage<A>(decoder:)()
{
  do
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  while (!v0 && (v2 & 1) == 0);
  return result;
}

uint64_t AspirePirPIRShardingFunctionSHA256.traverse<A>(visitor:)()
{
  return UnknownStorage.traverse<A>(visitor:)();
}

Swift::Int AspirePirPIRShardingFunctionSHA256.hashValue.getter()
{
  return AspirePirPirParameters.hashValue.getter((void (*)(void))type metadata accessor for AspirePirPIRShardingFunctionSHA256, &lazy protocol witness table cache variable for type AspirePirPIRShardingFunctionSHA256 and conformance AspirePirPIRShardingFunctionSHA256, (void (*)(uint64_t))type metadata accessor for AspirePirPIRShardingFunctionSHA256);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspirePirPIRShardingFunctionSHA256()
{
  return 0xD000000000000024;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspirePirPIRShardingFunctionSHA256()
{
  return AspirePirPIRShardingFunctionSHA256.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspirePirPIRShardingFunctionSHA256()
{
  return AspirePirPIRShardingFunctionSHA256.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspirePirPIRShardingFunctionSHA256(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirPIRShardingFunctionSHA256 and conformance AspirePirPIRShardingFunctionSHA256, (void (*)(uint64_t))type metadata accessor for AspirePirPIRShardingFunctionSHA256);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspirePirPIRShardingFunctionSHA256@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspirePirPIRShardingFunctionSHA256._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspirePirPIRShardingFunctionSHA256(uint64_t a1)
{
  uint64_t v2 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirPIRShardingFunctionSHA256 and conformance AspirePirPIRShardingFunctionSHA256, (void (*)(uint64_t))type metadata accessor for AspirePirPIRShardingFunctionSHA256);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspirePirPIRShardingFunctionSHA256(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirPIRShardingFunctionSHA256 and conformance AspirePirPIRShardingFunctionSHA256, (void (*)(uint64_t))type metadata accessor for AspirePirPIRShardingFunctionSHA256);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AspirePirPIRShardingFunctionSHA256(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v9 = MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v15 - v10;
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16);
  v12((char *)&v15 - v10, a1, v4, v9);
  ((void (*)(char *, uint64_t, uint64_t))v12)(v7, a2, v4);
  _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
  LOBYTE(a2) = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v13 = *(void (**)(char *, uint64_t))(v5 + 8);
  v13(v7, v4);
  v13(v11, v4);
  return a2 & 1;
}

unint64_t static AspirePirPIRShardingFunctionDoubleMod.protoMessageName.getter()
{
  return 0xD000000000000027;
}

uint64_t static AspirePirPIRShardingFunctionDoubleMod._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspirePirPIRShardingFunctionDoubleMod._protobuf_nameMap, a1);
}

uint64_t AspirePirPIRShardingFunctionDoubleMod.decodeMessage<A>(decoder:)()
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0) {
      break;
    }
    if (result == 1) {
      dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
    }
  }
  return result;
}

uint64_t AspirePirPIRShardingFunctionDoubleMod.traverse<A>(visitor:)()
{
  if (!*v0 || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v1))
  {
    type metadata accessor for AspirePirPIRShardingFunctionDoubleMod(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int AspirePirPIRShardingFunctionDoubleMod.hashValue.getter()
{
  return AspirePirPirParameters.hashValue.getter((void (*)(void))type metadata accessor for AspirePirPIRShardingFunctionDoubleMod, &lazy protocol witness table cache variable for type AspirePirPIRShardingFunctionDoubleMod and conformance AspirePirPIRShardingFunctionDoubleMod, (void (*)(uint64_t))type metadata accessor for AspirePirPIRShardingFunctionDoubleMod);
}

uint64_t protocol witness for Message.init() in conformance AspirePirPIRShardingFunctionDoubleMod@<X0>(_DWORD *a1@<X8>)
{
  *a1 = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspirePirPIRShardingFunctionDoubleMod()
{
  return 0xD000000000000027;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspirePirPIRShardingFunctionDoubleMod()
{
  return AspirePirPIRShardingFunctionDoubleMod.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspirePirPIRShardingFunctionDoubleMod()
{
  return AspirePirPIRShardingFunctionDoubleMod.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspirePirPIRShardingFunctionDoubleMod(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirPIRShardingFunctionDoubleMod and conformance AspirePirPIRShardingFunctionDoubleMod, (void (*)(uint64_t))type metadata accessor for AspirePirPIRShardingFunctionDoubleMod);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspirePirPIRShardingFunctionDoubleMod@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspirePirPIRShardingFunctionDoubleMod._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspirePirPIRShardingFunctionDoubleMod(uint64_t a1)
{
  uint64_t v2 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirPIRShardingFunctionDoubleMod and conformance AspirePirPIRShardingFunctionDoubleMod, (void (*)(uint64_t))type metadata accessor for AspirePirPIRShardingFunctionDoubleMod);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspirePirPIRShardingFunctionDoubleMod(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirPIRShardingFunctionDoubleMod and conformance AspirePirPIRShardingFunctionDoubleMod, (void (*)(uint64_t))type metadata accessor for AspirePirPIRShardingFunctionDoubleMod);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

unint64_t static AspirePirEncryptedIndices.protoMessageName.getter()
{
  return 0xD00000000000001BLL;
}

uint64_t static AspirePirEncryptedIndices._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspirePirEncryptedIndices._protobuf_nameMap, a1);
}

uint64_t AspirePirEncryptedIndices.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
      }
      else if (result == 1)
      {
        type metadata accessor for AspireHeSerializedCiphertext(0);
        _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspireHeSerializedCiphertext and conformance AspireHeSerializedCiphertext, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedCiphertext);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t AspirePirEncryptedIndices.traverse<A>(visitor:)()
{
  if (!*(void *)(*v0 + 16)
    || (type metadata accessor for AspireHeSerializedCiphertext(0),
        _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspireHeSerializedCiphertext and conformance AspireHeSerializedCiphertext, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedCiphertext), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
  {
    if (!v0[1] || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v1))
    {
      type metadata accessor for AspirePirEncryptedIndices(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

Swift::Int AspirePirEncryptedIndices.hashValue.getter()
{
  return AspirePirPirParameters.hashValue.getter((void (*)(void))type metadata accessor for AspirePirEncryptedIndices, &lazy protocol witness table cache variable for type AspirePirEncryptedIndices and conformance AspirePirEncryptedIndices, (void (*)(uint64_t))type metadata accessor for AspirePirEncryptedIndices);
}

uint64_t protocol witness for Message.init() in conformance AspirePirEncryptedIndices@<X0>(void *a1@<X8>)
{
  *a1 = MEMORY[0x263F8EE78];
  a1[1] = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspirePirEncryptedIndices()
{
  return 0xD00000000000001BLL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspirePirEncryptedIndices()
{
  return AspirePirEncryptedIndices.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspirePirEncryptedIndices()
{
  return AspirePirEncryptedIndices.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspirePirEncryptedIndices(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirEncryptedIndices and conformance AspirePirEncryptedIndices, (void (*)(uint64_t))type metadata accessor for AspirePirEncryptedIndices);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspirePirEncryptedIndices@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspirePirEncryptedIndices._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspirePirEncryptedIndices(uint64_t a1)
{
  uint64_t v2 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirEncryptedIndices and conformance AspirePirEncryptedIndices, (void (*)(uint64_t))type metadata accessor for AspirePirEncryptedIndices);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspirePirEncryptedIndices(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirEncryptedIndices and conformance AspirePirEncryptedIndices, (void (*)(uint64_t))type metadata accessor for AspirePirEncryptedIndices);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

unint64_t static AspirePirSerializedKeywordDbRow.protoMessageName.getter()
{
  return 0xD000000000000021;
}

uint64_t static AspirePirSerializedKeywordDbRow._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspirePirSerializedKeywordDbRow._protobuf_nameMap, a1);
}

uint64_t AspirePirSerializedKeywordDbRow.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 3)
      {
        type metadata accessor for AspirePirSerializedKeywordDbRow(0);
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
      }
      else if (result == 2 || result == 1)
      {
        dispatch thunk of Decoder.decodeSingularBytesField(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t AspirePirSerializedKeywordDbRow.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  unint64_t v8 = v3[1];
  switch(v8 >> 62)
  {
    case 1uLL:
      if ((int)v7 != v7 >> 32) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 2uLL:
      if (*(void *)(v7 + 16) != *(void *)(v7 + 24)) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 3uLL:
      goto LABEL_8;
    default:
      if ((v8 & 0xFF000000000000) == 0) {
        goto LABEL_8;
      }
LABEL_7:
      uint64_t result = dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
      if (!v4)
      {
LABEL_8:
        uint64_t v11 = v3[2];
        unint64_t v12 = v3[3];
        switch(v12 >> 62)
        {
          case 1uLL:
            if ((int)v11 != v11 >> 32) {
              goto LABEL_14;
            }
            goto LABEL_15;
          case 2uLL:
            if (*(void *)(v11 + 16) != *(void *)(v11 + 24)) {
              goto LABEL_14;
            }
            goto LABEL_15;
          case 3uLL:
            goto LABEL_15;
          default:
            if ((v12 & 0xFF000000000000) == 0) {
              goto LABEL_15;
            }
LABEL_14:
            uint64_t result = dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
            if (!v4)
            {
LABEL_15:
              uint64_t result = closure #1 in AspirePirSerializedKeywordDbRow.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3, type metadata accessor for AspirePirSerializedKeywordDbRow);
              if (!v4)
              {
                type metadata accessor for AspirePirSerializedKeywordDbRow(0);
                uint64_t result = UnknownStorage.traverse<A>(visitor:)();
              }
            }
            break;
        }
      }
      return result;
  }
}

Swift::Int AspirePirSerializedKeywordDbRow.hashValue.getter()
{
  return AspirePirPirParameters.hashValue.getter((void (*)(void))type metadata accessor for AspirePirSerializedKeywordDbRow, &lazy protocol witness table cache variable for type AspirePirSerializedKeywordDbRow and conformance AspirePirSerializedKeywordDbRow, (void (*)(uint64_t))type metadata accessor for AspirePirSerializedKeywordDbRow);
}

uint64_t protocol witness for Message.init() in conformance AspirePirSerializedKeywordDbRow@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  *a2 = xmmword_249E85DF0;
  a2[1] = xmmword_249E85DF0;
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = (void *)((char *)a2 + *(int *)(a1 + 28));
  *uint64_t v5 = 0;
  v5[1] = 0;
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspirePirSerializedKeywordDbRow()
{
  return 0xD000000000000021;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspirePirSerializedKeywordDbRow()
{
  return AspirePirSerializedKeywordDbRow.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspirePirSerializedKeywordDbRow(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspirePirSerializedKeywordDbRow.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspirePirSerializedKeywordDbRow(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirSerializedKeywordDbRow and conformance AspirePirSerializedKeywordDbRow, (void (*)(uint64_t))type metadata accessor for AspirePirSerializedKeywordDbRow);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspirePirSerializedKeywordDbRow@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspirePirSerializedKeywordDbRow._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspirePirSerializedKeywordDbRow(uint64_t a1)
{
  uint64_t v2 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirSerializedKeywordDbRow and conformance AspirePirSerializedKeywordDbRow, (void (*)(uint64_t))type metadata accessor for AspirePirSerializedKeywordDbRow);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspirePirSerializedKeywordDbRow(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirSerializedKeywordDbRow and conformance AspirePirSerializedKeywordDbRow, (void (*)(uint64_t))type metadata accessor for AspirePirSerializedKeywordDbRow);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

unint64_t static AspirePirSerializedKeywordDb.protoMessageName.getter()
{
  return 0xD00000000000001ELL;
}

uint64_t static AspirePirSerializedKeywordDb._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspirePirSerializedKeywordDb._protobuf_nameMap, a1);
}

uint64_t AspirePirSerializedKeywordDb.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 1)
      {
        type metadata accessor for AspirePirSerializedKeywordDbRow(0);
        _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirSerializedKeywordDbRow and conformance AspirePirSerializedKeywordDbRow, (void (*)(uint64_t))type metadata accessor for AspirePirSerializedKeywordDbRow);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t AspirePirSerializedKeywordDb.traverse<A>(visitor:)()
{
  if (!*(void *)(*(void *)v0 + 16)
    || (type metadata accessor for AspirePirSerializedKeywordDbRow(0),
        _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirSerializedKeywordDbRow and conformance AspirePirSerializedKeywordDbRow, (void (*)(uint64_t))type metadata accessor for AspirePirSerializedKeywordDbRow), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
  {
    type metadata accessor for AspirePirSerializedKeywordDb(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int AspirePirSerializedKeywordDb.hashValue.getter()
{
  return AspirePirPirParameters.hashValue.getter((void (*)(void))type metadata accessor for AspirePirSerializedKeywordDb, &lazy protocol witness table cache variable for type AspirePirSerializedKeywordDb and conformance AspirePirSerializedKeywordDb, (void (*)(uint64_t))type metadata accessor for AspirePirSerializedKeywordDb);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspirePirSerializedKeywordDb()
{
  return 0xD00000000000001ELL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspirePirSerializedKeywordDb()
{
  return AspirePirSerializedKeywordDb.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspirePirSerializedKeywordDb()
{
  return AspirePirSerializedKeywordDb.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspirePirSerializedKeywordDb(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirSerializedKeywordDb and conformance AspirePirSerializedKeywordDb, (void (*)(uint64_t))type metadata accessor for AspirePirSerializedKeywordDb);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspirePirSerializedKeywordDb@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspirePirSerializedKeywordDb._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspirePirSerializedKeywordDb(uint64_t a1)
{
  uint64_t v2 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirSerializedKeywordDb and conformance AspirePirSerializedKeywordDb, (void (*)(uint64_t))type metadata accessor for AspirePirSerializedKeywordDb);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspirePirSerializedKeywordDb(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirSerializedKeywordDb and conformance AspirePirSerializedKeywordDb, (void (*)(uint64_t))type metadata accessor for AspirePirSerializedKeywordDb);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

unint64_t static AspirePirPirPreprocessDbArgs.protoMessageName.getter()
{
  return 0xD00000000000001ELL;
}

uint64_t static AspirePirPirPreprocessDbArgs._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspirePirPirPreprocessDbArgs._protobuf_nameMap, a1);
}

uint64_t one-time initialization function for defaultInstance(uint64_t a1, void (*a2)(void), uint64_t (*a3)(void), uint64_t *a4)
{
  a2(0);
  swift_allocObject();
  uint64_t result = a3();
  *a4 = result;
  return result;
}

uint64_t AspirePirPirPreprocessDbArgs._StorageClass.init()()
{
  *(_OWORD *)(v0 + 41) = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(unsigned char *)(v0 + 57) = 1;
  *(void *)(v0 + 64) = 0;
  *(void *)(v0 + 72) = 0;
  *(unsigned char *)(v0 + 80) = -1;
  *(void *)(v0 + 96) = 0;
  *(void *)(v0 + 104) = 0;
  *(void *)(v0 + 88) = 0;
  *(_WORD *)(v0 + 112) = 256;
  *(_OWORD *)(v0 + 120) = 0u;
  *(_OWORD *)(v0 + 136) = 0u;
  *(_OWORD *)(v0 + 152) = 0u;
  *(_OWORD *)(v0 + 161) = 0u;
  *(_WORD *)(v0 + 177) = 513;
  *(_DWORD *)(v0 + 180) = 0;
  *(unsigned char *)(v0 + 184) = 1;
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV8CipherML28AspirePirPirPreprocessDbArgsP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__command;
  *(_WORD *)(v0 + 185) = 514;
  uint64_t v2 = type metadata accessor for AspirePirPirPreprocessDbCommand(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  return v0;
}

uint64_t AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v49 = (uint64_t)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_OWORD *)(v1 + 41) = 0u;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  uint64_t v39 = v1 + 48;
  *(unsigned char *)(v1 + 57) = 1;
  *(void *)(v1 + 64) = 0;
  *(void *)(v1 + 72) = 0;
  *(unsigned char *)(v1 + 80) = -1;
  *(void *)(v1 + 96) = 0;
  *(void *)(v1 + 104) = 0;
  *(_WORD *)(v1 + 112) = 256;
  *(void *)(v1 + 88) = 0;
  *(_OWORD *)(v1 + 161) = 0u;
  *(_OWORD *)(v1 + 152) = 0u;
  uint64_t v42 = (void *)(v1 + 152);
  uint64_t v43 = v1 + 168;
  *(_OWORD *)(v1 + 136) = 0u;
  uint64_t v41 = (void *)(v1 + 136);
  *(_OWORD *)(v1 + 120) = 0u;
  uint64_t v40 = (void *)(v1 + 120);
  *(_WORD *)(v1 + 177) = 513;
  *(unsigned char *)(v1 + 184) = 1;
  *(_WORD *)(v1 + 185) = 514;
  uint64_t v46 = (unsigned char *)(v1 + 185);
  uint64_t v47 = v1 + 186;
  uint64_t v5 = v1
     + OBJC_IVAR____TtCV8CipherML28AspirePirPirPreprocessDbArgsP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__command;
  uint64_t v48 = v1
      + OBJC_IVAR____TtCV8CipherML28AspirePirPirPreprocessDbArgsP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__command;
  *(_DWORD *)(v1 + 180) = 0;
  uint64_t v44 = v1 + 178;
  uint64_t v45 = (_DWORD *)(v1 + 180);
  uint64_t v6 = type metadata accessor for AspirePirPirPreprocessDbCommand(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  swift_beginAccess();
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  swift_beginAccess();
  *(void *)(v1 + 16) = v7;
  *(void *)(v1 + 24) = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  swift_beginAccess();
  *(void *)(v1 + 32) = v9;
  *(void *)(v1 + 40) = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v11 = *(void *)(a1 + 48);
  LOBYTE(v10) = *(unsigned char *)(a1 + 56);
  char v12 = *(unsigned char *)(a1 + 57);
  swift_beginAccess();
  *(void *)(v1 + 48) = v11;
  *(unsigned char *)(v1 + 56) = v10;
  *(unsigned char *)(v1 + 57) = v12;
  uint64_t v13 = *(void *)(a1 + 64);
  uint64_t v14 = *(void *)(a1 + 72);
  uint64_t v15 = *(void *)(v1 + 64);
  uint64_t v16 = *(void *)(v1 + 72);
  char v17 = *(unsigned char *)(a1 + 80);
  *(void *)(v1 + 64) = v13;
  *(void *)(v1 + 72) = v14;
  char v18 = *(unsigned char *)(v1 + 80);
  *(unsigned char *)(v1 + 80) = v17;
  outlined copy of AspirePirPirPreprocessDbArgs.OneOf_Sharding?(v13, v14, v17);
  outlined consume of AspirePirPirPreprocessDbArgs.OneOf_Sharding?(v15, v16, v18);
  swift_beginAccess();
  uint64_t v19 = *(void *)(a1 + 88);
  uint64_t v20 = *(void *)(a1 + 96);
  swift_beginAccess();
  *(void *)(v1 + 88) = v19;
  *(void *)(v1 + 96) = v20;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v21 = *(void *)(a1 + 104);
  char v22 = *(unsigned char *)(a1 + 112);
  LOBYTE(v20) = *(unsigned char *)(a1 + 113);
  swift_beginAccess();
  *(void *)(v1 + 104) = v21;
  *(unsigned char *)(v1 + 112) = v22;
  *(unsigned char *)(v1 + 113) = v20;
  swift_beginAccess();
  uint64_t v23 = *(void *)(a1 + 120);
  uint64_t v24 = *(void *)(a1 + 128);
  uint64_t v25 = v40;
  swift_beginAccess();
  *uint64_t v25 = v23;
  *(void *)(v1 + 128) = v24;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v27 = *(void *)(a1 + 136);
  uint64_t v26 = *(void *)(a1 + 144);
  uint64_t v28 = v41;
  swift_beginAccess();
  *uint64_t v28 = v27;
  *(void *)(v1 + 144) = v26;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v30 = *(void *)(a1 + 152);
  uint64_t v29 = *(void *)(a1 + 160);
  uint64_t v31 = v42;
  swift_beginAccess();
  *uint64_t v31 = v30;
  *(void *)(v1 + 160) = v29;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v32 = *(void *)(a1 + 168);
  LOBYTE(v24) = *(unsigned char *)(a1 + 176);
  LOBYTE(v30) = *(unsigned char *)(a1 + 177);
  swift_beginAccess();
  *(void *)(v1 + 168) = v32;
  *(unsigned char *)(v1 + 176) = v24;
  *(unsigned char *)(v1 + 177) = v30;
  swift_beginAccess();
  LOBYTE(v32) = *(unsigned char *)(a1 + 178);
  swift_beginAccess();
  *(unsigned char *)(v1 + 178) = v32;
  swift_beginAccess();
  LODWORD(v32) = *(_DWORD *)(a1 + 180);
  LOBYTE(v24) = *(unsigned char *)(a1 + 184);
  uint64_t v33 = v45;
  swift_beginAccess();
  _DWORD *v33 = v32;
  *(unsigned char *)(v1 + 184) = v24;
  swift_beginAccess();
  LOBYTE(v32) = *(unsigned char *)(a1 + 185);
  uint64_t v34 = v46;
  swift_beginAccess();
  *uint64_t v34 = v32;
  swift_beginAccess();
  LOBYTE(v32) = *(unsigned char *)(a1 + 186);
  swift_beginAccess();
  *(unsigned char *)(v1 + 186) = v32;
  uint64_t v35 = a1
      + OBJC_IVAR____TtCV8CipherML28AspirePirPirPreprocessDbArgsP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__command;
  swift_beginAccess();
  uint64_t v36 = v49;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v35, v49, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand?);
  swift_release();
  uint64_t v37 = v48;
  swift_beginAccess();
  outlined assign with take of AMDPbHEConfig.OneOf_Config?(v36, v37, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand?);
  swift_endAccess();
  return v1;
}

uint64_t AspirePirPirPreprocessDbArgs._StorageClass.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of AspirePirPirPreprocessDbArgs.OneOf_Sharding?(*(void *)(v0 + 64), *(void *)(v0 + 72), *(unsigned char *)(v0 + 80));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v0+ OBJC_IVAR____TtCV8CipherML28AspirePirPirPreprocessDbArgsP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__command, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand?);
  return v0;
}

uint64_t AspirePirPirPreprocessDbArgs._StorageClass.__deallocating_deinit()
{
  AspirePirPirPreprocessDbArgs._StorageClass.deinit();
  return swift_deallocClassInstance();
}

uint64_t AspirePirPirPreprocessDbArgs.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspirePirPirParameters.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for AspirePirPirPreprocessDbArgs, (void (*)(void))type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass, AspirePirPirPreprocessDbArgs._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in AspirePirPirPreprocessDbArgs.decodeMessage<A>(decoder:));
}

uint64_t AspirePirPirParameters.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), void (*a5)(void), uint64_t (*a6)(uint64_t), void (*a7)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v13 = *(int *)(a4(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    a5(0);
    swift_allocObject();
    uint64_t v14 = swift_retain();
    *(void *)(v7 + v13) = a6(v14);
    swift_release();
  }
  uint64_t v15 = swift_retain();
  a7(v15, a1, a2, a3);
  return swift_release();
}

uint64_t closure #1 in AspirePirPirPreprocessDbArgs.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2)
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v2 || (v6 & 1) != 0) {
      return result;
    }
    switch(result)
    {
      case 1:
        closure #1 in closure #1 in AspirePirPirPreprocessDbArgs.decodeMessage<A>(decoder:)();
        break;
      case 2:
        closure #2 in closure #1 in AspirePirPirPreprocessDbArgs.decodeMessage<A>(decoder:)();
        break;
      case 3:
        closure #3 in closure #1 in AspirePirPirPreprocessDbArgs.decodeMessage<A>(decoder:)();
        break;
      case 4:
      case 5:
        closure #4 in closure #1 in AspirePirPirPreprocessDbArgs.decodeMessage<A>(decoder:)();
        break;
      case 6:
        closure #6 in closure #1 in AspirePirPirPreprocessDbArgs.decodeMessage<A>(decoder:)(a2, a1);
        break;
      case 7:
        closure #7 in closure #1 in AspirePirPirPreprocessDbArgs.decodeMessage<A>(decoder:)();
        break;
      case 8:
        closure #8 in closure #1 in AspirePirPirPreprocessDbArgs.decodeMessage<A>(decoder:)();
        break;
      case 9:
        closure #9 in closure #1 in AspirePirPirPreprocessDbArgs.decodeMessage<A>(decoder:)();
        break;
      case 10:
        closure #10 in closure #1 in AspirePirPirPreprocessDbArgs.decodeMessage<A>(decoder:)();
        break;
      case 11:
        closure #11 in closure #1 in AspirePirPirPreprocessDbArgs.decodeMessage<A>(decoder:)();
        break;
      case 12:
        closure #12 in closure #1 in AspirePirPirPreprocessDbArgs.decodeMessage<A>(decoder:)();
        break;
      case 13:
        closure #13 in closure #1 in AspirePirPirPreprocessDbArgs.decodeMessage<A>(decoder:)();
        break;
      case 14:
        closure #14 in closure #1 in AspirePirPirPreprocessDbArgs.decodeMessage<A>(decoder:)();
        break;
      case 15:
        closure #15 in closure #1 in AspirePirPirPreprocessDbArgs.decodeMessage<A>(decoder:)();
        break;
      case 16:
        closure #16 in closure #1 in AspirePirPirPreprocessDbArgs.decodeMessage<A>(decoder:)();
        break;
      case 17:
        closure #17 in closure #1 in AspirePirPirPreprocessDbArgs.decodeMessage<A>(decoder:)();
        break;
      default:
        continue;
    }
  }
}

uint64_t closure #1 in closure #1 in AspirePirPirPreprocessDbArgs.decodeMessage<A>(decoder:)()
{
  return swift_endAccess();
}

uint64_t closure #2 in closure #1 in AspirePirPirPreprocessDbArgs.decodeMessage<A>(decoder:)()
{
  return swift_endAccess();
}

uint64_t closure #3 in closure #1 in AspirePirPirPreprocessDbArgs.decodeMessage<A>(decoder:)()
{
  return swift_endAccess();
}

uint64_t closure #4 in closure #1 in AspirePirPirPreprocessDbArgs.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
}

uint64_t closure #6 in closure #1 in AspirePirPirPreprocessDbArgs.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = dispatch thunk of Decoder.decodeSingularStringField(value:)();
  if (v2) {
    return swift_bridgeObjectRelease();
  }
  if (v8)
  {
    if (*(unsigned __int8 *)(a2 + 80) == 255)
    {
      char v5 = -1;
    }
    else
    {
      dispatch thunk of Decoder.handleConflictingOneOf()();
      char v5 = *(unsigned char *)(a2 + 80);
    }
    uint64_t v6 = *(void *)(a2 + 64);
    uint64_t v7 = *(void *)(a2 + 72);
    *(void *)(a2 + 64) = 0;
    *(void *)(a2 + 72) = v8;
    *(unsigned char *)(a2 + 80) = 2;
    return outlined consume of AspirePirPirPreprocessDbArgs.OneOf_Sharding?(v6, v7, v5);
  }
  return result;
}

uint64_t closure #7 in closure #1 in AspirePirPirPreprocessDbArgs.decodeMessage<A>(decoder:)()
{
  return swift_endAccess();
}

uint64_t closure #8 in closure #1 in AspirePirPirPreprocessDbArgs.decodeMessage<A>(decoder:)()
{
  return swift_endAccess();
}

uint64_t closure #9 in closure #1 in AspirePirPirPreprocessDbArgs.decodeMessage<A>(decoder:)()
{
  return swift_endAccess();
}

uint64_t closure #10 in closure #1 in AspirePirPirPreprocessDbArgs.decodeMessage<A>(decoder:)()
{
  return swift_endAccess();
}

uint64_t closure #11 in closure #1 in AspirePirPirPreprocessDbArgs.decodeMessage<A>(decoder:)()
{
  return swift_endAccess();
}

uint64_t closure #12 in closure #1 in AspirePirPirPreprocessDbArgs.decodeMessage<A>(decoder:)()
{
  return swift_endAccess();
}

uint64_t closure #13 in closure #1 in AspirePirPirPreprocessDbArgs.decodeMessage<A>(decoder:)()
{
  return swift_endAccess();
}

uint64_t closure #14 in closure #1 in AspirePirPirPreprocessDbArgs.decodeMessage<A>(decoder:)()
{
  return swift_endAccess();
}

uint64_t closure #15 in closure #1 in AspirePirPirPreprocessDbArgs.decodeMessage<A>(decoder:)()
{
  return swift_endAccess();
}

uint64_t closure #16 in closure #1 in AspirePirPirPreprocessDbArgs.decodeMessage<A>(decoder:)()
{
  return swift_endAccess();
}

uint64_t closure #17 in closure #1 in AspirePirPirPreprocessDbArgs.decodeMessage<A>(decoder:)()
{
  return swift_endAccess();
}

uint64_t AspirePirPirPreprocessDbArgs.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspirePirPirParameters.traverse<A>(visitor:)(a1, a2, a3, (void (*)(void))type metadata accessor for AspirePirPirPreprocessDbArgs, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in AspirePirPirPreprocessDbArgs.traverse<A>(visitor:));
}

uint64_t AspirePirPirParameters.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void), void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  a4(0);
  uint64_t v10 = swift_retain();
  a5(v10, a1, a2, a3);
  uint64_t result = swift_release();
  if (!v5) {
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in AspirePirPirPreprocessDbArgs.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = closure #1 in closure #1 in AspirePirPirPreprocessDbArgs.traverse<A>(visitor:)(a1);
  if (!v4)
  {
    closure #2 in closure #1 in AspirePirPirPreprocessDbArgs.traverse<A>(visitor:)(a1);
    closure #3 in closure #1 in AspirePirPirPreprocessDbArgs.traverse<A>(visitor:)(a1);
    if (*(unsigned __int8 *)(a1 + 80) > 1u)
    {
      if (*(unsigned char *)(a1 + 80) == 2) {
        closure #6 in closure #1 in AspirePirPirPreprocessDbArgs.traverse<A>(visitor:)(a1);
      }
    }
    else if (*(unsigned char *)(a1 + 80))
    {
      closure #5 in closure #1 in AspirePirPirPreprocessDbArgs.traverse<A>(visitor:)(a1);
    }
    else
    {
      closure #4 in closure #1 in AspirePirPirPreprocessDbArgs.traverse<A>(visitor:)(a1);
    }
    closure #7 in closure #1 in AspirePirPirPreprocessDbArgs.traverse<A>(visitor:)(a1);
    closure #8 in closure #1 in AspirePirPirPreprocessDbArgs.traverse<A>(visitor:)(a1);
    closure #9 in closure #1 in AspirePirPirPreprocessDbArgs.traverse<A>(visitor:)(a1);
    closure #10 in closure #1 in AspirePirPirPreprocessDbArgs.traverse<A>(visitor:)(a1);
    closure #11 in closure #1 in AspirePirPirPreprocessDbArgs.traverse<A>(visitor:)(a1);
    closure #12 in closure #1 in AspirePirPirPreprocessDbArgs.traverse<A>(visitor:)(a1);
    closure #13 in closure #1 in AspirePirPirPreprocessDbArgs.traverse<A>(visitor:)(a1);
    closure #14 in closure #1 in AspirePirPirPreprocessDbArgs.traverse<A>(visitor:)(a1);
    closure #15 in closure #1 in AspirePirPirPreprocessDbArgs.traverse<A>(visitor:)(a1);
    closure #16 in closure #1 in AspirePirPirPreprocessDbArgs.traverse<A>(visitor:)(a1);
    return closure #17 in closure #1 in AspirePirPirPreprocessDbArgs.traverse<A>(visitor:)(a1, a2, a3, a4);
  }
  return result;
}

uint64_t closure #1 in closure #1 in AspirePirPirPreprocessDbArgs.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  if (*(void *)(a1 + 24))
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t closure #2 in closure #1 in AspirePirPirPreprocessDbArgs.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  if (*(void *)(a1 + 40))
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t closure #3 in closure #1 in AspirePirPirPreprocessDbArgs.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  if ((*(unsigned char *)(a1 + 57) & 1) == 0)
  {
    lazy protocol witness table accessor for type AspirePirPirAlgorithm and conformance AspirePirPirAlgorithm();
    return dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #4 in closure #1 in AspirePirPirPreprocessDbArgs.traverse<A>(visitor:)(uint64_t result)
{
  if (*(unsigned char *)(result + 80))
  {
    __break(1u);
  }
  else
  {
    outlined copy of AspirePirPirPreprocessDbArgs.OneOf_Sharding(*(void *)(result + 64), *(void *)(result + 72), 0);
    return dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #5 in closure #1 in AspirePirPirPreprocessDbArgs.traverse<A>(visitor:)(uint64_t result)
{
  if (*(unsigned char *)(result + 80) == 1)
  {
    outlined copy of AspirePirPirPreprocessDbArgs.OneOf_Sharding(*(void *)(result + 64), *(void *)(result + 72), 1);
    return dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t closure #6 in closure #1 in AspirePirPirPreprocessDbArgs.traverse<A>(visitor:)(uint64_t result)
{
  if (*(unsigned char *)(result + 80) == 2)
  {
    uint64_t v2 = *(void *)(result + 64);
    uint64_t v1 = *(void *)(result + 72);
    outlined copy of AspirePirPirPreprocessDbArgs.OneOf_Sharding(v2, v1, 2);
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    return outlined consume of AspirePirPirPreprocessDbArgs.OneOf_Sharding?(v2, v1, 2);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t closure #7 in closure #1 in AspirePirPirPreprocessDbArgs.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  if (*(void *)(a1 + 96))
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t closure #8 in closure #1 in AspirePirPirPreprocessDbArgs.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  if ((*(unsigned char *)(a1 + 113) & 1) == 0)
  {
    lazy protocol witness table accessor for type AspireHeHeScheme and conformance AspireHeHeScheme();
    return dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #9 in closure #1 in AspirePirPirPreprocessDbArgs.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  if (*(void *)(a1 + 128))
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t closure #10 in closure #1 in AspirePirPirPreprocessDbArgs.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  if (*(void *)(a1 + 144))
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t closure #11 in closure #1 in AspirePirPirPreprocessDbArgs.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  if (*(void *)(a1 + 160))
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t closure #12 in closure #1 in AspirePirPirPreprocessDbArgs.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  if ((*(unsigned char *)(a1 + 177) & 1) == 0)
  {
    lazy protocol witness table accessor for type AspirePirKeyCompressionStrategy and conformance AspirePirKeyCompressionStrategy();
    return dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #13 in closure #1 in AspirePirPirPreprocessDbArgs.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  if (*(unsigned char *)(a1 + 178) != 2) {
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #14 in closure #1 in AspirePirPirPreprocessDbArgs.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  if ((*(unsigned char *)(a1 + 184) & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #15 in closure #1 in AspirePirPirPreprocessDbArgs.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  if (*(unsigned char *)(a1 + 185) != 2) {
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #16 in closure #1 in AspirePirPirPreprocessDbArgs.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  if (*(unsigned char *)(a1 + 186) != 2) {
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #17 in closure #1 in AspirePirPirPreprocessDbArgs.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AspirePirPirPreprocessDbCommand(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV8CipherML28AspirePirPirPreprocessDbArgsP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__command;
  swift_beginAccess();
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v12, (uint64_t)v7, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v7, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand?);
  }
  outlined init with take of AspirePirPIRShardingFunction((uint64_t)v7, (uint64_t)v11, type metadata accessor for AspirePirPirPreprocessDbCommand);
  _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirPirPreprocessDbCommand and conformance AspirePirPirPreprocessDbCommand, (void (*)(uint64_t))type metadata accessor for AspirePirPirPreprocessDbCommand);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v11, type metadata accessor for AspirePirPirPreprocessDbCommand);
}

uint64_t static AspirePirPirPreprocessDbArgs.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static AspirePirPirPreprocessDbArgs.== infix(_:_:)(a1, a2, (uint64_t (*)(void, double))type metadata accessor for AspirePirPirPreprocessDbArgs, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static AspirePirPirPreprocessDbArgs.== infix(_:_:)) & 1;
}

BOOL closure #1 in static AspirePirPirPreprocessDbArgs.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AspirePirPirPreprocessDbCommand(0);
  uint64_t v78 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v73 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspirePirPirPreprocessDbCommand?, AspirePirPirPreprocessDbCommand?));
  MEMORY[0x270FA5388](v7);
  uint64_t v79 = (uint64_t)&v73 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v73 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v73 - v13;
  swift_beginAccess();
  uint64_t v15 = *(void *)(a1 + 16);
  uint64_t v16 = *(void *)(a1 + 24);
  swift_beginAccess();
  uint64_t v17 = *(void *)(a2 + 24);
  if (!v16)
  {
    if (v17) {
      return 0;
    }
    goto LABEL_8;
  }
  if (!v17) {
    return 0;
  }
  if (v15 == *(void *)(a2 + 16) && v16 == v17
    || (char v18 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v18 & 1) != 0))
  {
LABEL_8:
    swift_beginAccess();
    uint64_t v20 = *(void *)(a1 + 32);
    uint64_t v21 = *(void *)(a1 + 40);
    swift_beginAccess();
    uint64_t v22 = *(void *)(a2 + 40);
    if (v21)
    {
      if (!v22) {
        return 0;
      }
      if (v20 != *(void *)(a2 + 32) || v21 != v22)
      {
        char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
        BOOL result = 0;
        if ((v23 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v22)
    {
      return 0;
    }
    swift_beginAccess();
    uint64_t v24 = *(void *)(a1 + 48);
    char v25 = *(unsigned char *)(a1 + 57);
    swift_beginAccess();
    if (v25)
    {
      if ((*(unsigned char *)(a2 + 57) & 1) == 0) {
        return 0;
      }
LABEL_29:
      uint64_t v28 = *(void *)(a1 + 64);
      uint64_t v27 = *(void *)(a1 + 72);
      int v29 = *(unsigned __int8 *)(a1 + 80);
      uint64_t v31 = *(void *)(a2 + 64);
      uint64_t v30 = *(void *)(a2 + 72);
      int v32 = *(unsigned __int8 *)(a2 + 80);
      uint64_t v76 = v28;
      uint64_t v77 = v27;
      if (v29 == 255)
      {
        uint64_t v74 = v31;
        uint64_t v75 = v30;
        swift_retain();
        swift_retain();
        if (v32 == 255)
        {
LABEL_34:
          swift_beginAccess();
          uint64_t v36 = *(void *)(a1 + 88);
          uint64_t v37 = *(void *)(a1 + 96);
          swift_beginAccess();
          uint64_t v38 = *(void *)(a2 + 96);
          if (v37)
          {
            if (!v38
              || (v36 != *(void *)(a2 + 88) || v37 != v38) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
            {
              goto LABEL_42;
            }
          }
          else if (v38)
          {
            goto LABEL_42;
          }
          swift_beginAccess();
          uint64_t v43 = *(void *)(a1 + 104);
          char v44 = *(unsigned char *)(a1 + 113);
          swift_beginAccess();
          if (v44)
          {
            if ((*(unsigned char *)(a2 + 113) & 1) == 0) {
              goto LABEL_42;
            }
          }
          else
          {
            if (*(unsigned char *)(a2 + 113)) {
              goto LABEL_42;
            }
            uint64_t v48 = *(void *)(a2 + 104);
            if (*(unsigned char *)(a2 + 112))
            {
              if (v48)
              {
                if (v48 == 1)
                {
                  if (v43 != 1) {
                    goto LABEL_42;
                  }
                }
                else if (v43 != 2)
                {
                  goto LABEL_42;
                }
              }
              else if (v43)
              {
                goto LABEL_42;
              }
            }
            else if (v43 != v48)
            {
              goto LABEL_42;
            }
          }
          swift_beginAccess();
          uint64_t v45 = *(void *)(a1 + 120);
          uint64_t v46 = *(void *)(a1 + 128);
          swift_beginAccess();
          uint64_t v47 = *(void *)(a2 + 128);
          if (v46)
          {
            if (!v47
              || (v45 != *(void *)(a2 + 120) || v46 != v47)
              && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
            {
              goto LABEL_42;
            }
          }
          else if (v47)
          {
            goto LABEL_42;
          }
          swift_beginAccess();
          uint64_t v49 = *(void *)(a1 + 136);
          uint64_t v50 = *(void *)(a1 + 144);
          swift_beginAccess();
          uint64_t v51 = *(void *)(a2 + 144);
          if (v50)
          {
            if (!v51
              || (v49 != *(void *)(a2 + 136) || v50 != v51)
              && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
            {
              goto LABEL_42;
            }
          }
          else if (v51)
          {
            goto LABEL_42;
          }
          swift_beginAccess();
          uint64_t v52 = *(void *)(a1 + 152);
          uint64_t v53 = *(void *)(a1 + 160);
          swift_beginAccess();
          uint64_t v54 = *(void *)(a2 + 160);
          if (v53)
          {
            if (!v54
              || (v52 != *(void *)(a2 + 152) || v53 != v54)
              && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
            {
              goto LABEL_42;
            }
          }
          else if (v54)
          {
            goto LABEL_42;
          }
          swift_beginAccess();
          uint64_t v55 = *(void *)(a1 + 168);
          char v56 = *(unsigned char *)(a1 + 177);
          swift_beginAccess();
          if (v56)
          {
            if ((*(unsigned char *)(a2 + 177) & 1) == 0) {
              goto LABEL_42;
            }
          }
          else
          {
            if (*(unsigned char *)(a2 + 177)) {
              goto LABEL_42;
            }
            uint64_t v59 = *(void *)(a2 + 168);
            if (*(unsigned char *)(a2 + 176))
            {
              if (v59)
              {
                if (v59 == 1)
                {
                  if (v55 != 1) {
                    goto LABEL_42;
                  }
                }
                else if (v55 != 2)
                {
                  goto LABEL_42;
                }
              }
              else if (v55)
              {
                goto LABEL_42;
              }
            }
            else if (v55 != v59)
            {
              goto LABEL_42;
            }
          }
          swift_beginAccess();
          int v57 = *(unsigned __int8 *)(a1 + 178);
          swift_beginAccess();
          int v58 = *(unsigned __int8 *)(a2 + 178);
          if (v57 == 2)
          {
            if (v58 != 2) {
              goto LABEL_42;
            }
          }
          else if (v58 == 2 || ((((v58 & 1) == 0) ^ v57) & 1) == 0)
          {
            goto LABEL_42;
          }
          swift_beginAccess();
          int v60 = *(_DWORD *)(a1 + 180);
          char v61 = *(unsigned char *)(a1 + 184);
          swift_beginAccess();
          if (v61)
          {
            if ((*(unsigned char *)(a2 + 184) & 1) == 0) {
              goto LABEL_42;
            }
          }
          else if ((*(unsigned char *)(a2 + 184) & 1) != 0 || v60 != *(_DWORD *)(a2 + 180))
          {
            goto LABEL_42;
          }
          swift_beginAccess();
          int v62 = *(unsigned __int8 *)(a1 + 185);
          swift_beginAccess();
          int v63 = *(unsigned __int8 *)(a2 + 185);
          if (v62 == 2)
          {
            if (v63 != 2) {
              goto LABEL_42;
            }
          }
          else if (v63 == 2 || ((((v63 & 1) == 0) ^ v62) & 1) == 0)
          {
            goto LABEL_42;
          }
          swift_beginAccess();
          int v64 = *(unsigned __int8 *)(a1 + 186);
          swift_beginAccess();
          int v65 = *(unsigned __int8 *)(a2 + 186);
          if (v64 != 2)
          {
            if (v65 == 2 || ((((v65 & 1) == 0) ^ v64) & 1) == 0) {
              goto LABEL_42;
            }
LABEL_114:
            uint64_t v66 = a1
                + OBJC_IVAR____TtCV8CipherML28AspirePirPirPreprocessDbArgsP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__command;
            swift_beginAccess();
            outlined init with copy of AMDPbHEConfig.OneOf_Config?(v66, (uint64_t)v14, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand?);
            uint64_t v67 = a2
                + OBJC_IVAR____TtCV8CipherML28AspirePirPirPreprocessDbArgsP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__command;
            swift_beginAccess();
            uint64_t v68 = *(int *)(v7 + 48);
            uint64_t v69 = v79;
            uint64_t v70 = v79 + v68;
            outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v14, v79, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand?);
            uint64_t v77 = v70;
            outlined init with copy of AMDPbHEConfig.OneOf_Config?(v67, v70, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand?);
            char v71 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v78 + 48);
            if (v71(v69, 1, v4) == 1)
            {
              swift_release();
              swift_release();
              outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v14, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand?);
              if (v71(v77, 1, v4) == 1)
              {
                outlined destroy of AMDPbHEConfig.OneOf_Config?(v79, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand?);
                return 1;
              }
            }
            else
            {
              outlined init with copy of AMDPbHEConfig.OneOf_Config?(v79, (uint64_t)v11, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand?);
              if (v71(v77, 1, v4) != 1)
              {
                outlined init with take of AspirePirPIRShardingFunction(v77, (uint64_t)v6, type metadata accessor for AspirePirPirPreprocessDbCommand);
                char v72 = specialized static AspirePirPirPreprocessDbCommand.== infix(_:_:)((uint64_t)v11, (uint64_t)v6);
                swift_release();
                swift_release();
                _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v6, type metadata accessor for AspirePirPirPreprocessDbCommand);
                outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v14, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand?);
                _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v11, type metadata accessor for AspirePirPirPreprocessDbCommand);
                outlined destroy of AMDPbHEConfig.OneOf_Config?(v79, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand?);
                return (v72 & 1) != 0;
              }
              swift_release();
              swift_release();
              outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v14, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand?);
              _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v11, type metadata accessor for AspirePirPirPreprocessDbCommand);
            }
            outlined destroy of AMDPbHEConfig.OneOf_Config?(v79, &demangling cache variable for type metadata for (AspirePirPirPreprocessDbCommand?, AspirePirPirPreprocessDbCommand?));
            return 0;
          }
          if (v65 == 2) {
            goto LABEL_114;
          }
LABEL_42:
          swift_release();
          swift_release();
          return 0;
        }
      }
      else
      {
        uint64_t v82 = v28;
        uint64_t v83 = v27;
        char v84 = v29;
        if (v32 != 255)
        {
          v80[0] = v31;
          v80[1] = v30;
          char v81 = v32;
          uint64_t v33 = v28;
          outlined copy of AspirePirPirPreprocessDbArgs.OneOf_Sharding?(v28, v27, v29);
          uint64_t v34 = v33;
          uint64_t v35 = v77;
          outlined copy of AspirePirPirPreprocessDbArgs.OneOf_Sharding?(v34, v77, v29);
          swift_retain();
          swift_retain();
          LODWORD(v75) = specialized static AspirePirPirPreprocessDbArgs.OneOf_Sharding.== infix(_:_:)((uint64_t)&v82, (uint64_t)v80);
          outlined consume of AspirePirPirPreprocessDbArgs.OneOf_Sharding(v82, v83, v84);
          outlined consume of AspirePirPirPreprocessDbArgs.OneOf_Sharding?(v76, v35, v29);
          if ((v75 & 1) == 0) {
            goto LABEL_42;
          }
          goto LABEL_34;
        }
        uint64_t v74 = v31;
        uint64_t v75 = v30;
        uint64_t v39 = v28;
        uint64_t v40 = v27;
        outlined copy of AspirePirPirPreprocessDbArgs.OneOf_Sharding?(v28, v27, v29);
        outlined copy of AspirePirPirPreprocessDbArgs.OneOf_Sharding?(v39, v40, v29);
        swift_retain();
        swift_retain();
        outlined consume of AspirePirPirPreprocessDbArgs.OneOf_Sharding(v39, v40, v29);
      }
      uint64_t v42 = v74;
      uint64_t v41 = v75;
      outlined copy of AspirePirPirPreprocessDbArgs.OneOf_Sharding?(v74, v75, v32);
      outlined consume of AspirePirPirPreprocessDbArgs.OneOf_Sharding?(v76, v77, v29);
      outlined consume of AspirePirPirPreprocessDbArgs.OneOf_Sharding?(v42, v41, v32);
      goto LABEL_42;
    }
    if ((*(unsigned char *)(a2 + 57) & 1) == 0)
    {
      uint64_t v26 = *(void *)(a2 + 48);
      if ((*(unsigned char *)(a2 + 56) & 1) == 0)
      {
        if (v24 != v26) {
          return 0;
        }
        goto LABEL_29;
      }
      if (v26)
      {
        if (v26 == 1)
        {
          if (v24 != 1) {
            return 0;
          }
          goto LABEL_29;
        }
        if (v24 == 2) {
          goto LABEL_29;
        }
      }
      else if (!v24)
      {
        goto LABEL_29;
      }
    }
    return 0;
  }
  return result;
}

Swift::Int AspirePirPirPreprocessDbArgs.hashValue.getter()
{
  return AspirePirPirParameters.hashValue.getter((void (*)(void))type metadata accessor for AspirePirPirPreprocessDbArgs, &lazy protocol witness table cache variable for type AspirePirPirPreprocessDbArgs and conformance AspirePirPirPreprocessDbArgs, (void (*)(uint64_t))type metadata accessor for AspirePirPirPreprocessDbArgs);
}

uint64_t protocol witness for Message.init() in conformance AspirePirPirPreprocessDbArgs@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance AspirePirPirParameters(a1, &one-time initialization token for defaultInstance, &static AspirePirPirPreprocessDbArgs._StorageClass.defaultInstance, a2);
}

uint64_t protocol witness for Message.init() in conformance AspirePirPirParameters@<X0>(uint64_t a1@<X0>, void *a2@<X2>, void *a3@<X3>, uint64_t a4@<X8>)
{
  UnknownStorage.init()();
  uint64_t v8 = *(int *)(a1 + 20);
  if (*a2 != -1) {
    swift_once();
  }
  *(void *)(a4 + v8) = *a3;
  return swift_retain();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspirePirPirPreprocessDbArgs()
{
  return 0xD00000000000001ELL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspirePirPirPreprocessDbArgs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspirePirPirPreprocessDbArgs.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspirePirPirPreprocessDbArgs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspirePirPirPreprocessDbArgs.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspirePirPirPreprocessDbArgs(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirPirPreprocessDbArgs and conformance AspirePirPirPreprocessDbArgs, (void (*)(uint64_t))type metadata accessor for AspirePirPirPreprocessDbArgs);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspirePirPirPreprocessDbArgs@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspirePirPirPreprocessDbArgs._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspirePirPirPreprocessDbArgs(uint64_t a1)
{
  uint64_t v2 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirPirPreprocessDbArgs and conformance AspirePirPirPreprocessDbArgs, (void (*)(uint64_t))type metadata accessor for AspirePirPirPreprocessDbArgs);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspirePirPirPreprocessDbArgs(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirPirPreprocessDbArgs and conformance AspirePirPirPreprocessDbArgs, (void (*)(uint64_t))type metadata accessor for AspirePirPirPreprocessDbArgs);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AspirePirPirPreprocessDbArgs(uint64_t a1, uint64_t a2)
{
  return specialized static AspirePirPirPreprocessDbArgs.== infix(_:_:)(a1, a2, (uint64_t (*)(void, double))type metadata accessor for AspirePirPirPreprocessDbArgs, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static AspirePirPirPreprocessDbArgs.== infix(_:_:)) & 1;
}

unint64_t static AspirePirPirPreprocessDbCommand.protoMessageName.getter()
{
  return 0xD000000000000021;
}

uint64_t static AspirePirPirPreprocessDbCommand._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspirePirPirPreprocessDbCommand._protobuf_nameMap, a1);
}

uint64_t AspirePirPirPreprocessDbCommand.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspirePirPIRShardingFunction.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in AspirePirPirPreprocessDbCommand.decodeMessage<A>(decoder:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #2 in AspirePirPirPreprocessDbCommand.decodeMessage<A>(decoder:));
}

uint64_t AspirePirPIRShardingFunction.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t, uint64_t), void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v9 = v5;
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v6 || (v14 & 1) != 0) {
      break;
    }
    if (result == 2)
    {
      a5(v9, a1, a2, a3);
    }
    else if (result == 1)
    {
      a4(v9, a1, a2, a3);
    }
  }
  return result;
}

uint64_t closure #1 in AspirePirPirPreprocessDbCommand.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v50 = a4;
  uint64_t v48 = a2;
  uint64_t v49 = a3;
  uint64_t v5 = type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword(0);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v42 = (uint64_t)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v45 = (char *)&v38 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command(0);
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v38 - v18;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Keyword?);
  MEMORY[0x270FA5388](v20 - 8);
  uint64_t v43 = (uint64_t)&v38 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v23 = MEMORY[0x270FA5388](v22);
  char v25 = (char *)&v38 - v24;
  uint64_t v44 = v6;
  uint64_t v26 = *(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56);
  uint64_t v47 = v5;
  uint64_t v27 = v5;
  uint64_t v28 = v26;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t, double))v26)((char *)&v38 - v24, 1, 1, v27, v23);
  uint64_t v41 = a1;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v12, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
  uint64_t v40 = v14;
  int v29 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if (v29 == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v12, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
    uint64_t v30 = v13;
    uint64_t v31 = v47;
  }
  else
  {
    uint64_t v39 = v28;
    uint64_t v32 = (uint64_t)v45;
    outlined init with take of AspirePirPIRShardingFunction((uint64_t)v12, (uint64_t)v19, type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command);
    outlined init with take of AspirePirPIRShardingFunction((uint64_t)v19, (uint64_t)v16, type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command);
    uint64_t v30 = v13;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v16, type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command);
      uint64_t v31 = v47;
    }
    else
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v25, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Keyword?);
      outlined init with take of AspirePirPIRShardingFunction((uint64_t)v16, v32, type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword);
      outlined init with take of AspirePirPIRShardingFunction(v32, (uint64_t)v25, type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword);
      uint64_t v31 = v47;
      v39(v25, 0, 1, v47);
    }
  }
  uint64_t v33 = v46;
  _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirPirPreprocessDbCommand.Keyword and conformance AspirePirPirPreprocessDbCommand.Keyword, (void (*)(uint64_t))type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v33) {
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v25, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Keyword?);
  }
  uint64_t v35 = v43;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v25, v43, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Keyword?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v44 + 48))(v35, 1, v31) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v25, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Keyword?);
    return outlined destroy of AMDPbHEConfig.OneOf_Config?(v35, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Keyword?);
  }
  else
  {
    uint64_t v36 = v42;
    outlined init with take of AspirePirPIRShardingFunction(v35, v42, type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword);
    if (v29 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v25, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Keyword?);
    uint64_t v37 = v41;
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v41, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
    outlined init with take of AspirePirPIRShardingFunction(v36, v37, type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v30);
  }
}

uint64_t closure #2 in AspirePirPirPreprocessDbCommand.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v50 = a4;
  uint64_t v48 = a2;
  uint64_t v49 = a3;
  uint64_t v5 = type metadata accessor for AspirePirPirPreprocessDbCommand.Index(0);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v42 = (uint64_t)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v45 = (char *)&v38 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command(0);
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v38 - v18;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Index?);
  MEMORY[0x270FA5388](v20 - 8);
  uint64_t v43 = (uint64_t)&v38 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v23 = MEMORY[0x270FA5388](v22);
  char v25 = (char *)&v38 - v24;
  uint64_t v44 = v6;
  uint64_t v26 = *(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56);
  uint64_t v47 = v5;
  uint64_t v27 = v5;
  uint64_t v28 = v26;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t, double))v26)((char *)&v38 - v24, 1, 1, v27, v23);
  uint64_t v41 = a1;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v12, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
  uint64_t v40 = v14;
  int v29 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if (v29 == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v12, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
    uint64_t v30 = v13;
  }
  else
  {
    uint64_t v39 = v28;
    uint64_t v31 = (uint64_t)v45;
    outlined init with take of AspirePirPIRShardingFunction((uint64_t)v12, (uint64_t)v19, type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command);
    outlined init with take of AspirePirPIRShardingFunction((uint64_t)v19, (uint64_t)v16, type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command);
    uint64_t v30 = v13;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v25, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Index?);
      outlined init with take of AspirePirPIRShardingFunction((uint64_t)v16, v31, type metadata accessor for AspirePirPirPreprocessDbCommand.Index);
      outlined init with take of AspirePirPIRShardingFunction(v31, (uint64_t)v25, type metadata accessor for AspirePirPirPreprocessDbCommand.Index);
      uint64_t v32 = v47;
      v39(v25, 0, 1, v47);
      goto LABEL_7;
    }
    _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v16, type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command);
  }
  uint64_t v32 = v47;
LABEL_7:
  uint64_t v33 = v46;
  _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirPirPreprocessDbCommand.Index and conformance AspirePirPirPreprocessDbCommand.Index, (void (*)(uint64_t))type metadata accessor for AspirePirPirPreprocessDbCommand.Index);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v33) {
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v25, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Index?);
  }
  uint64_t v35 = v43;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v25, v43, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Index?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v44 + 48))(v35, 1, v32) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v25, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Index?);
    return outlined destroy of AMDPbHEConfig.OneOf_Config?(v35, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Index?);
  }
  else
  {
    uint64_t v36 = v42;
    outlined init with take of AspirePirPIRShardingFunction(v35, v42, type metadata accessor for AspirePirPirPreprocessDbCommand.Index);
    if (v29 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v25, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Index?);
    uint64_t v37 = v41;
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v41, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
    outlined init with take of AspirePirPIRShardingFunction(v36, v37, type metadata accessor for AspirePirPirPreprocessDbCommand.Index);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v30);
  }
}

uint64_t AspirePirPirPreprocessDbCommand.traverse<A>(visitor:)()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v0, (uint64_t)v4, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
  uint64_t v5 = type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5) == 1) {
    goto LABEL_6;
  }
  if (swift_getEnumCaseMultiPayload() == 1) {
    closure #2 in AspirePirPirPreprocessDbCommand.traverse<A>(visitor:)(v0);
  }
  else {
    closure #1 in AspirePirPirPreprocessDbCommand.traverse<A>(visitor:)(v0);
  }
  uint64_t result = _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v4, type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command);
  if (!v1)
  {
LABEL_6:
    type metadata accessor for AspirePirPirPreprocessDbCommand(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in AspirePirPirPreprocessDbCommand.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword(0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v4, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
  uint64_t v8 = type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v4, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined init with take of AspirePirPIRShardingFunction((uint64_t)v4, (uint64_t)v7, type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword);
    _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirPirPreprocessDbCommand.Keyword and conformance AspirePirPirPreprocessDbCommand.Keyword, (void (*)(uint64_t))type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v7, type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword);
  }
  uint64_t result = _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v4, type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command);
  __break(1u);
  return result;
}

uint64_t closure #2 in AspirePirPirPreprocessDbCommand.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for AspirePirPirPreprocessDbCommand.Index(0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v4, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
  uint64_t v8 = type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v4, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with take of AspirePirPIRShardingFunction((uint64_t)v4, (uint64_t)v7, type metadata accessor for AspirePirPirPreprocessDbCommand.Index);
    _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirPirPreprocessDbCommand.Index and conformance AspirePirPirPreprocessDbCommand.Index, (void (*)(uint64_t))type metadata accessor for AspirePirPirPreprocessDbCommand.Index);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v7, type metadata accessor for AspirePirPirPreprocessDbCommand.Index);
  }
  uint64_t result = _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v4, type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command);
  __break(1u);
  return result;
}

Swift::Int AspirePirPirPreprocessDbCommand.hashValue.getter()
{
  return AspirePirPirParameters.hashValue.getter((void (*)(void))type metadata accessor for AspirePirPirPreprocessDbCommand, &lazy protocol witness table cache variable for type AspirePirPirPreprocessDbCommand and conformance AspirePirPirPreprocessDbCommand, (void (*)(uint64_t))type metadata accessor for AspirePirPirPreprocessDbCommand);
}

uint64_t protocol witness for Message.init() in conformance AspirePirPirPreprocessDbCommand@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Message.init() in conformance AspirePirPIRShardingFunction(type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command, a1);
}

uint64_t protocol witness for Message.init() in conformance AspirePirPIRShardingFunction@<X0>(uint64_t (*a1)(void)@<X2>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(a2, 1, 1, v3);
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspirePirPirPreprocessDbCommand()
{
  return 0xD000000000000021;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspirePirPirPreprocessDbCommand(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspirePirPirPreprocessDbCommand.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspirePirPirPreprocessDbCommand()
{
  return AspirePirPirPreprocessDbCommand.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspirePirPirPreprocessDbCommand(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirPirPreprocessDbCommand and conformance AspirePirPirPreprocessDbCommand, (void (*)(uint64_t))type metadata accessor for AspirePirPirPreprocessDbCommand);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspirePirPirPreprocessDbCommand@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspirePirPirPreprocessDbCommand._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspirePirPirPreprocessDbCommand(uint64_t a1)
{
  uint64_t v2 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirPirPreprocessDbCommand and conformance AspirePirPirPreprocessDbCommand, (void (*)(uint64_t))type metadata accessor for AspirePirPirPreprocessDbCommand);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspirePirPirPreprocessDbCommand(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirPirPreprocessDbCommand and conformance AspirePirPirPreprocessDbCommand, (void (*)(uint64_t))type metadata accessor for AspirePirPirPreprocessDbCommand);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void one-time initialization function for protoMessageName(int a1)
{
  v1._countAndFlagsBits = 0x7865646E492ELL;
  v1._object = (void *)0xE600000000000000;
  one-time initialization function for protoMessageName(a1, v1, static AspirePirPirPreprocessDbCommand.Index.protoMessageName, &static AspirePirPirPreprocessDbCommand.Index.protoMessageName[1]);
}

{
  Swift::String v1;

  v1._countAndFlagsBits = 0x64726F7779654B2ELL;
  v1._object = (void *)0xE800000000000000;
  one-time initialization function for protoMessageName(a1, v1, static AspirePirPirPreprocessDbCommand.Keyword.protoMessageName, &static AspirePirPirPreprocessDbCommand.Keyword.protoMessageName[1]);
}

uint64_t static AspirePirPirPreprocessDbCommand.Index.protoMessageName.getter()
{
  return static AspirePirPirPreprocessDbCommand.Index.protoMessageName.getter(&one-time initialization token for protoMessageName, static AspirePirPirPreprocessDbCommand.Index.protoMessageName);
}

uint64_t static AspirePirPirPreprocessDbCommand.Index._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspirePirPirPreprocessDbCommand.Index._protobuf_nameMap, a1);
}

uint64_t AspirePirPirPreprocessDbCommand.Index.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2 || result == 1) {
        dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t AspirePirPirPreprocessDbCommand.Index.traverse<A>(visitor:)()
{
  if (!*v0 || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v1))
  {
    if (!v0[1] || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v1))
    {
      type metadata accessor for AspirePirPirPreprocessDbCommand.Index(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

Swift::Int AspirePirPirPreprocessDbCommand.Index.hashValue.getter()
{
  return AspirePirPirParameters.hashValue.getter((void (*)(void))type metadata accessor for AspirePirPirPreprocessDbCommand.Index, &lazy protocol witness table cache variable for type AspirePirPirPreprocessDbCommand.Index and conformance AspirePirPirPreprocessDbCommand.Index, (void (*)(uint64_t))type metadata accessor for AspirePirPirPreprocessDbCommand.Index);
}

uint64_t protocol witness for Message.init() in conformance AspirePirPirPreprocessDbCommand.Index@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  return UnknownStorage.init()();
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance AspirePirPirPreprocessDbCommand.Index(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance AspirePirPirPreprocessDbCommand.Index(a1, a2, &one-time initialization token for protoMessageName, static AspirePirPirPreprocessDbCommand.Index.protoMessageName);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspirePirPirPreprocessDbCommand.Index()
{
  return AspirePirPirPreprocessDbCommand.Index.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspirePirPirPreprocessDbCommand.Index()
{
  return AspirePirPirPreprocessDbCommand.Index.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspirePirPirPreprocessDbCommand.Index(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirPirPreprocessDbCommand.Index and conformance AspirePirPirPreprocessDbCommand.Index, (void (*)(uint64_t))type metadata accessor for AspirePirPirPreprocessDbCommand.Index);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspirePirPirPreprocessDbCommand.Index@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspirePirPirPreprocessDbCommand.Index._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspirePirPirPreprocessDbCommand.Index(uint64_t a1)
{
  uint64_t v2 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirPirPreprocessDbCommand.Index and conformance AspirePirPirPreprocessDbCommand.Index, (void (*)(uint64_t))type metadata accessor for AspirePirPirPreprocessDbCommand.Index);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspirePirPirPreprocessDbCommand.Index(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirPirPreprocessDbCommand.Index and conformance AspirePirPirPreprocessDbCommand.Index, (void (*)(uint64_t))type metadata accessor for AspirePirPirPreprocessDbCommand.Index);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void one-time initialization function for protoMessageName(int a1, Swift::String a2, void *a3, void *a4)
{
  *a3 = 0xD000000000000021;
  *a4 = 0x8000000249E97000;
}

uint64_t static AspirePirPirPreprocessDbCommand.Keyword.protoMessageName.getter()
{
  return static AspirePirPirPreprocessDbCommand.Index.protoMessageName.getter(&one-time initialization token for protoMessageName, static AspirePirPirPreprocessDbCommand.Keyword.protoMessageName);
}

uint64_t static AspirePirPirPreprocessDbCommand.Index.protoMessageName.getter(void *a1, uint64_t *a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v3 = *a2;
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t static AspirePirPirPreprocessDbCommand.Keyword._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspirePirPirPreprocessDbCommand.Keyword._protobuf_nameMap, a1);
}

uint64_t AspirePirPirPreprocessDbCommand.Keyword.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v4 || (v10 & 1) != 0) {
      return result;
    }
    switch(result)
    {
      case 1:
      case 2:
        type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword(0);
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
        break;
      case 3:
        closure #3 in AspirePirPirPreprocessDbCommand.Keyword.decodeMessage<A>(decoder:)(v5, a1, a2, a3);
        break;
      case 4:
        closure #4 in AspirePirPirPreprocessDbCommand.Keyword.decodeMessage<A>(decoder:)(v5, a1, a2, a3);
        break;
      default:
        continue;
    }
  }
}

uint64_t closure #3 in AspirePirPirPreprocessDbCommand.Keyword.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v50 = a4;
  uint64_t v48 = a2;
  uint64_t v49 = a3;
  uint64_t v5 = type metadata accessor for AspirePirCuckooTableConfig(0);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v42 = (uint64_t)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v45 = (char *)&v38 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config(0);
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v38 - v18;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
  MEMORY[0x270FA5388](v20 - 8);
  uint64_t v43 = (uint64_t)&v38 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v23 = MEMORY[0x270FA5388](v22);
  char v25 = (char *)&v38 - v24;
  uint64_t v44 = v6;
  uint64_t v26 = *(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56);
  uint64_t v47 = v5;
  uint64_t v27 = v5;
  uint64_t v28 = v26;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t, double))v26)((char *)&v38 - v24, 1, 1, v27, v23);
  uint64_t v41 = a1;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v12, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config?);
  uint64_t v40 = v14;
  int v29 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if (v29 == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v12, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config?);
    uint64_t v30 = v13;
    uint64_t v31 = v47;
  }
  else
  {
    uint64_t v39 = v28;
    uint64_t v32 = (uint64_t)v45;
    outlined init with take of AspirePirPIRShardingFunction((uint64_t)v12, (uint64_t)v19, type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config);
    outlined init with take of AspirePirPIRShardingFunction((uint64_t)v19, (uint64_t)v16, type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config);
    uint64_t v30 = v13;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v16, type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config);
      uint64_t v31 = v47;
    }
    else
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v25, &demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
      outlined init with take of AspirePirPIRShardingFunction((uint64_t)v16, v32, type metadata accessor for AspirePirCuckooTableConfig);
      outlined init with take of AspirePirPIRShardingFunction(v32, (uint64_t)v25, type metadata accessor for AspirePirCuckooTableConfig);
      uint64_t v31 = v47;
      v39(v25, 0, 1, v47);
    }
  }
  uint64_t v33 = v46;
  _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirCuckooTableConfig and conformance AspirePirCuckooTableConfig, (void (*)(uint64_t))type metadata accessor for AspirePirCuckooTableConfig);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v33) {
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v25, &demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
  }
  uint64_t v35 = v43;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v25, v43, &demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v44 + 48))(v35, 1, v31) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v25, &demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
    return outlined destroy of AMDPbHEConfig.OneOf_Config?(v35, &demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
  }
  else
  {
    uint64_t v36 = v42;
    outlined init with take of AspirePirPIRShardingFunction(v35, v42, type metadata accessor for AspirePirCuckooTableConfig);
    if (v29 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v25, &demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
    uint64_t v37 = v41;
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v41, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config?);
    outlined init with take of AspirePirPIRShardingFunction(v36, v37, type metadata accessor for AspirePirCuckooTableConfig);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v30);
  }
}

uint64_t closure #4 in AspirePirPirPreprocessDbCommand.Keyword.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v50 = a4;
  uint64_t v48 = a2;
  uint64_t v49 = a3;
  uint64_t v5 = type metadata accessor for AspirePirBatchKeywordPirConfig(0);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v42 = (uint64_t)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v45 = (char *)&v38 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config(0);
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v38 - v18;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirBatchKeywordPirConfig?);
  MEMORY[0x270FA5388](v20 - 8);
  uint64_t v43 = (uint64_t)&v38 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v23 = MEMORY[0x270FA5388](v22);
  char v25 = (char *)&v38 - v24;
  uint64_t v44 = v6;
  uint64_t v26 = *(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56);
  uint64_t v47 = v5;
  uint64_t v27 = v5;
  uint64_t v28 = v26;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t, double))v26)((char *)&v38 - v24, 1, 1, v27, v23);
  uint64_t v41 = a1;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v12, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config?);
  uint64_t v40 = v14;
  int v29 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if (v29 == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v12, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config?);
    uint64_t v30 = v13;
  }
  else
  {
    uint64_t v39 = v28;
    uint64_t v31 = (uint64_t)v45;
    outlined init with take of AspirePirPIRShardingFunction((uint64_t)v12, (uint64_t)v19, type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config);
    outlined init with take of AspirePirPIRShardingFunction((uint64_t)v19, (uint64_t)v16, type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config);
    uint64_t v30 = v13;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v25, &demangling cache variable for type metadata for AspirePirBatchKeywordPirConfig?);
      outlined init with take of AspirePirPIRShardingFunction((uint64_t)v16, v31, type metadata accessor for AspirePirBatchKeywordPirConfig);
      outlined init with take of AspirePirPIRShardingFunction(v31, (uint64_t)v25, type metadata accessor for AspirePirBatchKeywordPirConfig);
      uint64_t v32 = v47;
      v39(v25, 0, 1, v47);
      goto LABEL_7;
    }
    _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v16, type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config);
  }
  uint64_t v32 = v47;
LABEL_7:
  uint64_t v33 = v46;
  _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirBatchKeywordPirConfig and conformance AspirePirBatchKeywordPirConfig, (void (*)(uint64_t))type metadata accessor for AspirePirBatchKeywordPirConfig);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v33) {
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v25, &demangling cache variable for type metadata for AspirePirBatchKeywordPirConfig?);
  }
  uint64_t v35 = v43;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v25, v43, &demangling cache variable for type metadata for AspirePirBatchKeywordPirConfig?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v44 + 48))(v35, 1, v32) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v25, &demangling cache variable for type metadata for AspirePirBatchKeywordPirConfig?);
    return outlined destroy of AMDPbHEConfig.OneOf_Config?(v35, &demangling cache variable for type metadata for AspirePirBatchKeywordPirConfig?);
  }
  else
  {
    uint64_t v36 = v42;
    outlined init with take of AspirePirPIRShardingFunction(v35, v42, type metadata accessor for AspirePirBatchKeywordPirConfig);
    if (v29 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v25, &demangling cache variable for type metadata for AspirePirBatchKeywordPirConfig?);
    uint64_t v37 = v41;
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v41, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config?);
    outlined init with take of AspirePirPIRShardingFunction(v36, v37, type metadata accessor for AspirePirBatchKeywordPirConfig);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v30);
  }
}

uint64_t AspirePirPirPreprocessDbCommand.Keyword.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = closure #1 in AspirePirPirPreprocessDbCommand.Keyword.traverse<A>(visitor:)(v3);
  if (!v4)
  {
    closure #1 in AspirePirSerializedKeywordDbRow.traverse<A>(visitor:)(v3, a1, a2, a3, type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v3, (uint64_t)v10, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config?);
    uint64_t v12 = type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config(0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48))(v10, 1, v12) != 1)
    {
      if (swift_getEnumCaseMultiPayload() == 1) {
        closure #4 in AspirePirPirPreprocessDbCommand.Keyword.traverse<A>(visitor:)(v3);
      }
      else {
        closure #3 in AspirePirPirPreprocessDbCommand.Keyword.traverse<A>(visitor:)(v3);
      }
      _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v10, type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config);
    }
    type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in AspirePirPirPreprocessDbCommand.Keyword.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword(0);
  if (*(void *)(a1 + *(int *)(result + 24) + 8)) {
    return dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #1 in AspirePirSerializedKeywordDbRow.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t result = a5(0);
  if (*(void *)(a1 + *(int *)(result + 28) + 8)) {
    return dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #3 in AspirePirPirPreprocessDbCommand.Keyword.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for AspirePirCuckooTableConfig(0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v4, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config?);
  uint64_t v8 = type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v4, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined init with take of AspirePirPIRShardingFunction((uint64_t)v4, (uint64_t)v7, type metadata accessor for AspirePirCuckooTableConfig);
    _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirCuckooTableConfig and conformance AspirePirCuckooTableConfig, (void (*)(uint64_t))type metadata accessor for AspirePirCuckooTableConfig);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v7, type metadata accessor for AspirePirCuckooTableConfig);
  }
  uint64_t result = _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v4, type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config);
  __break(1u);
  return result;
}

uint64_t closure #4 in AspirePirPirPreprocessDbCommand.Keyword.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for AspirePirBatchKeywordPirConfig(0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v4, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config?);
  uint64_t v8 = type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v4, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with take of AspirePirPIRShardingFunction((uint64_t)v4, (uint64_t)v7, type metadata accessor for AspirePirBatchKeywordPirConfig);
    _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirBatchKeywordPirConfig and conformance AspirePirBatchKeywordPirConfig, (void (*)(uint64_t))type metadata accessor for AspirePirBatchKeywordPirConfig);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v7, type metadata accessor for AspirePirBatchKeywordPirConfig);
  }
  uint64_t result = _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v4, type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config);
  __break(1u);
  return result;
}

Swift::Int AspirePirPirPreprocessDbCommand.Keyword.hashValue.getter()
{
  return AspirePirPirParameters.hashValue.getter((void (*)(void))type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword, &lazy protocol witness table cache variable for type AspirePirPirPreprocessDbCommand.Keyword and conformance AspirePirPirPreprocessDbCommand.Keyword, (void (*)(uint64_t))type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword);
}

uint64_t protocol witness for Message.init() in conformance AspirePirPirPreprocessDbCommand.Keyword@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(a2, 1, 1, v4);
  uint64_t result = UnknownStorage.init()();
  uint64_t v6 = *(int *)(a1 + 28);
  uint64_t v7 = (void *)(a2 + *(int *)(a1 + 24));
  *uint64_t v7 = 0;
  v7[1] = 0;
  uint64_t v8 = (void *)(a2 + v6);
  *uint64_t v8 = 0;
  v8[1] = 0;
  return result;
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance AspirePirPirPreprocessDbCommand.Keyword(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance AspirePirPirPreprocessDbCommand.Index(a1, a2, &one-time initialization token for protoMessageName, static AspirePirPirPreprocessDbCommand.Keyword.protoMessageName);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance AspirePirPirPreprocessDbCommand.Index(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4)
{
  if (*a3 != -1) {
    swift_once();
  }
  uint64_t v5 = *a4;
  swift_bridgeObjectRetain();
  return v5;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspirePirPirPreprocessDbCommand.Keyword(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspirePirPirPreprocessDbCommand.Keyword.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspirePirPirPreprocessDbCommand.Keyword(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspirePirPirPreprocessDbCommand.Keyword.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspirePirPirPreprocessDbCommand.Keyword(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirPirPreprocessDbCommand.Keyword and conformance AspirePirPirPreprocessDbCommand.Keyword, (void (*)(uint64_t))type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspirePirPirPreprocessDbCommand.Keyword@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspirePirPirPreprocessDbCommand.Keyword._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspirePirPirPreprocessDbCommand.Keyword(uint64_t a1)
{
  uint64_t v2 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirPirPreprocessDbCommand.Keyword and conformance AspirePirPirPreprocessDbCommand.Keyword, (void (*)(uint64_t))type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspirePirPirPreprocessDbCommand.Keyword(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirPirPreprocessDbCommand.Keyword and conformance AspirePirPirPreprocessDbCommand.Keyword, (void (*)(uint64_t))type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

unint64_t static AspirePirSymmetricPirClientConfig.protoMessageName.getter()
{
  return 0xD000000000000023;
}

uint64_t static AspirePirSymmetricPirClientConfig._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspirePirSymmetricPirClientConfig._protobuf_nameMap, a1);
}

uint64_t AspirePirSymmetricPirClientConfig.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        lazy protocol witness table accessor for type AspirePirSymmetricPirConfigType and conformance AspirePirSymmetricPirConfigType();
        dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
      }
      else if (result == 1)
      {
        dispatch thunk of Decoder.decodeSingularBytesField(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t AspirePirSymmetricPirClientConfig.traverse<A>(visitor:)()
{
  uint64_t v2 = *v0;
  unint64_t v3 = v0[1];
  switch(v3 >> 62)
  {
    case 1uLL:
      if ((int)v2 != v2 >> 32) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 2uLL:
      if (*(void *)(v2 + 16) != *(void *)(v2 + 24)) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 3uLL:
      goto LABEL_8;
    default:
      if ((v3 & 0xFF000000000000) == 0) {
        goto LABEL_8;
      }
LABEL_7:
      uint64_t result = dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
      if (!v1)
      {
LABEL_8:
        if (!v0[2]
          || (lazy protocol witness table accessor for type AspirePirSymmetricPirConfigType and conformance AspirePirSymmetricPirConfigType(),
              uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
              !v1))
        {
          type metadata accessor for AspirePirSymmetricPirClientConfig(0);
          return UnknownStorage.traverse<A>(visitor:)();
        }
      }
      return result;
  }
}

Swift::Int AspirePirSymmetricPirClientConfig.hashValue.getter()
{
  return AspirePirPirParameters.hashValue.getter((void (*)(void))type metadata accessor for AspirePirSymmetricPirClientConfig, &lazy protocol witness table cache variable for type AspirePirSymmetricPirClientConfig and conformance AspirePirSymmetricPirClientConfig, (void (*)(uint64_t))type metadata accessor for AspirePirSymmetricPirClientConfig);
}

Swift::Int AspirePirPirParameters.hashValue.getter(void (*a1)(void), unint64_t *a2, void (*a3)(uint64_t))
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Message.init() in conformance AspirePirSymmetricPirClientConfig@<X0>(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_249E85DF0;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 1;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspirePirSymmetricPirClientConfig()
{
  return 0xD000000000000023;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspirePirSymmetricPirClientConfig()
{
  return AspirePirSymmetricPirClientConfig.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspirePirSymmetricPirClientConfig()
{
  return AspirePirSymmetricPirClientConfig.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspirePirSymmetricPirClientConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirSymmetricPirClientConfig and conformance AspirePirSymmetricPirClientConfig, (void (*)(uint64_t))type metadata accessor for AspirePirSymmetricPirClientConfig);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspirePirSymmetricPirClientConfig@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspirePirSymmetricPirClientConfig._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspirePirSymmetricPirClientConfig(uint64_t a1)
{
  uint64_t v2 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirSymmetricPirClientConfig and conformance AspirePirSymmetricPirClientConfig, (void (*)(uint64_t))type metadata accessor for AspirePirSymmetricPirClientConfig);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspirePirSymmetricPirClientConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirSymmetricPirClientConfig and conformance AspirePirSymmetricPirClientConfig, (void (*)(uint64_t))type metadata accessor for AspirePirSymmetricPirClientConfig);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

uint64_t specialized static AspirePirPirPreprocessDbArgs.OneOf_Sharding.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  int v4 = *(unsigned __int8 *)(a1 + 16);
  uint64_t v5 = *(void *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  int v7 = *(unsigned __int8 *)(a2 + 16);
  if (!*(unsigned char *)(a1 + 16))
  {
    if (!*(unsigned char *)(a2 + 16))
    {
      outlined consume of AspirePirPirPreprocessDbArgs.OneOf_Sharding(*(void *)a1, v3, 0);
      uint64_t v8 = v5;
      uint64_t v9 = v6;
      char v10 = 0;
      goto LABEL_7;
    }
LABEL_15:
    outlined copy of AspirePirPirPreprocessDbArgs.OneOf_Sharding(v5, v6, v7);
    outlined consume of AspirePirPirPreprocessDbArgs.OneOf_Sharding(v2, v3, v4);
    outlined consume of AspirePirPirPreprocessDbArgs.OneOf_Sharding(v5, v6, v7);
    char v11 = 0;
    return v11 & 1;
  }
  if (v4 == 1)
  {
    if (v7 == 1)
    {
      outlined consume of AspirePirPirPreprocessDbArgs.OneOf_Sharding(*(void *)a1, v3, 1);
      uint64_t v8 = v5;
      uint64_t v9 = v6;
      char v10 = 1;
LABEL_7:
      outlined consume of AspirePirPirPreprocessDbArgs.OneOf_Sharding(v8, v9, v10);
      char v11 = v2 == v5;
      return v11 & 1;
    }
    goto LABEL_15;
  }
  if (v7 != 2)
  {
    swift_bridgeObjectRetain();
    goto LABEL_15;
  }
  if (v2 == v5 && v3 == v6) {
    char v11 = 1;
  }
  else {
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  outlined copy of AspirePirPirPreprocessDbArgs.OneOf_Sharding(v5, v6, 2);
  outlined copy of AspirePirPirPreprocessDbArgs.OneOf_Sharding(v2, v3, 2);
  outlined consume of AspirePirPirPreprocessDbArgs.OneOf_Sharding(v2, v3, 2);
  outlined consume of AspirePirPirPreprocessDbArgs.OneOf_Sharding(v5, v6, 2);
  return v11 & 1;
}

uint64_t specialized static AspirePirPIRShardingFunctionDoubleMod.== infix(_:_:)(char *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  int v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  char v10 = (char *)&v16 - v9;
  if (*(_DWORD *)a1 == *(_DWORD *)a2)
  {
    uint64_t v11 = type metadata accessor for AspirePirPIRShardingFunctionDoubleMod(0);
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v12(v10, &a1[*(int *)(v11 + 20)], v4);
    v12(v7, &a2[*(int *)(v11 + 20)], v4);
    _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
    v14(v7, v4);
    v14(v10, v4);
  }
  else
  {
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t specialized static AspirePirSerializedKeywordDbRow.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  int v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  char v10 = (char *)&v22 - v9;
  if ((specialized static Data.== infix(_:_:)(*(void *)a1, *(void *)(a1 + 8), *(void *)a2, *(void *)(a2 + 8)) & 1) == 0
    || (specialized static Data.== infix(_:_:)(*(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a2 + 16), *(void *)(a2 + 24)) & 1) == 0)
  {
    goto LABEL_12;
  }
  uint64_t v11 = type metadata accessor for AspirePirSerializedKeywordDbRow(0);
  uint64_t v12 = *(int *)(v11 + 28);
  char v13 = (void *)(a1 + v12);
  uint64_t v14 = *(void *)(a1 + v12 + 8);
  uint64_t v15 = (void *)(a2 + v12);
  uint64_t v16 = v15[1];
  if (!v14)
  {
    if (!v16)
    {
LABEL_14:
      uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      v20(v10, a1 + *(int *)(v11 + 24), v4);
      v20(v7, a2 + *(int *)(v11 + 24), v4);
      _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
      char v18 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v21 = *(void (**)(char *, uint64_t))(v5 + 8);
      v21(v7, v4);
      v21(v10, v4);
      return v18 & 1;
    }
LABEL_12:
    char v18 = 0;
    return v18 & 1;
  }
  if (!v16) {
    goto LABEL_12;
  }
  if (*v13 == *v15 && v14 == v16) {
    goto LABEL_14;
  }
  char v18 = 0;
  if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
    goto LABEL_14;
  }
  return v18 & 1;
}

uint64_t specialized static AspirePirSerializedKeywordDb.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  int v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  char v10 = (char *)&v16 - v9;
  if (specialized static Array<A>.== infix(_:_:)(*a1, *a2))
  {
    uint64_t v11 = type metadata accessor for AspirePirSerializedKeywordDb(0);
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v12(v10, (char *)a1 + *(int *)(v11 + 20), v4);
    v12(v7, (char *)a2 + *(int *)(v11 + 20), v4);
    _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
    v14(v7, v4);
    v14(v10, v4);
  }
  else
  {
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t specialized static AspirePirPIRShardingFunction.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v43 = *(void *)(v4 - 8);
  uint64_t v44 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v42 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v41 = (char *)&v37 - v7;
  uint64_t v8 = type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v38 = (uint64_t)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspirePirPIRShardingFunction.OneOf_Function?, AspirePirPIRShardingFunction.OneOf_Function?));
  uint64_t v12 = v11 - 8;
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)&v37 - v19;
  MEMORY[0x270FA5388](v21);
  double v23 = (char *)&v37 - v22;
  uint64_t v39 = a1;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)&v37 - v22, &demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
  uint64_t v40 = a2;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a2, (uint64_t)v20, &demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
  uint64_t v24 = (uint64_t)&v14[*(int *)(v12 + 56)];
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v23, (uint64_t)v14, &demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v20, v24, &demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
  char v25 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v25((uint64_t)v14, 1, v8) != 1)
  {
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v14, (uint64_t)v17, &demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
    if (v25(v24, 1, v8) != 1)
    {
      uint64_t v26 = v38;
      outlined init with take of AspirePirPIRShardingFunction(v24, v38, type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function);
      char v27 = specialized static AspirePirPIRShardingFunction.OneOf_Function.== infix(_:_:)((uint64_t)v17, v26);
      _s8CipherML28AspireHeEncryptionParametersVWOhTm_2(v26, type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v20, &demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v23, &demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
      _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v17, type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v14, &demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
      if (v27) {
        goto LABEL_8;
      }
LABEL_9:
      char v34 = 0;
      return v34 & 1;
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v20, &demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v23, &demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
    _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v17, type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function);
LABEL_6:
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v14, &demangling cache variable for type metadata for (AspirePirPIRShardingFunction.OneOf_Function?, AspirePirPIRShardingFunction.OneOf_Function?));
    goto LABEL_9;
  }
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v20, &demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v23, &demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
  if (v25(v24, 1, v8) != 1) {
    goto LABEL_6;
  }
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v14, &demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
LABEL_8:
  uint64_t v28 = type metadata accessor for AspirePirPIRShardingFunction(0);
  uint64_t v30 = v43;
  uint64_t v29 = v44;
  uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t))(v43 + 16);
  uint64_t v32 = v41;
  v31(v41, v39 + *(int *)(v28 + 20), v44);
  uint64_t v33 = v42;
  v31(v42, v40 + *(int *)(v28 + 20), v29);
  _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
  char v34 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v35 = *(void (**)(char *, uint64_t))(v30 + 8);
  v35(v33, v29);
  v35(v32, v29);
  return v34 & 1;
}

uint64_t specialized static AspirePirPIRShardingFunction.OneOf_Function.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v25 = a2;
  uint64_t v3 = type metadata accessor for AspirePirPIRShardingFunctionDoubleMod(0);
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (_DWORD *)((char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = type metadata accessor for AspirePirPIRShardingFunctionSHA256(0);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function(0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (_DWORD *)((char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v24 - v13;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspirePirPIRShardingFunction.OneOf_Function, AspirePirPIRShardingFunction.OneOf_Function));
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v17 = (char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = (uint64_t)&v17[*(int *)(v18 + 56)];
  outlined init with copy of AspireHeEncryptionParameters(a1, (uint64_t)v17, type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function);
  outlined init with copy of AspireHeEncryptionParameters(v25, v19, type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined init with copy of AspireHeEncryptionParameters((uint64_t)v17, (uint64_t)v14, type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      outlined init with take of AspirePirPIRShardingFunction(v19, (uint64_t)v8, type metadata accessor for AspirePirPIRShardingFunctionSHA256);
      type metadata accessor for UnknownStorage();
      _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
      char v20 = dispatch thunk of static Equatable.== infix(_:_:)();
      _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v8, type metadata accessor for AspirePirPIRShardingFunctionSHA256);
      _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v14, type metadata accessor for AspirePirPIRShardingFunctionSHA256);
      _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v17, type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function);
      return v20 & 1;
    }
    uint64_t v21 = type metadata accessor for AspirePirPIRShardingFunctionSHA256;
    uint64_t v22 = (uint64_t)v14;
    goto LABEL_9;
  }
  outlined init with copy of AspireHeEncryptionParameters((uint64_t)v17, (uint64_t)v11, type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    uint64_t v21 = type metadata accessor for AspirePirPIRShardingFunctionDoubleMod;
    uint64_t v22 = (uint64_t)v11;
LABEL_9:
    _s8CipherML28AspireHeEncryptionParametersVWOhTm_2(v22, v21);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v17, &demangling cache variable for type metadata for (AspirePirPIRShardingFunction.OneOf_Function, AspirePirPIRShardingFunction.OneOf_Function));
LABEL_12:
    char v20 = 0;
    return v20 & 1;
  }
  outlined init with take of AspirePirPIRShardingFunction(v19, (uint64_t)v5, type metadata accessor for AspirePirPIRShardingFunctionDoubleMod);
  if (*v11 != *v5
    || (type metadata accessor for UnknownStorage(),
        _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]), (dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0))
  {
    _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v5, type metadata accessor for AspirePirPIRShardingFunctionDoubleMod);
    _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v11, type metadata accessor for AspirePirPIRShardingFunctionDoubleMod);
    _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v17, type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function);
    goto LABEL_12;
  }
  _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v5, type metadata accessor for AspirePirPIRShardingFunctionDoubleMod);
  _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v11, type metadata accessor for AspirePirPIRShardingFunctionDoubleMod);
  _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v17, type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function);
  char v20 = 1;
  return v20 & 1;
}

uint64_t type metadata accessor for AspirePirSerializedKeywordDbRow(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspirePirSerializedKeywordDbRow);
}

uint64_t type metadata accessor for AspirePirSerializedKeywordDb(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspirePirSerializedKeywordDb);
}

uint64_t type metadata accessor for AspirePirPirPreprocessDbArgs(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspirePirPirPreprocessDbArgs);
}

uint64_t type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspirePirPirPreprocessDbArgs._StorageClass);
}

uint64_t outlined copy of AspirePirPirPreprocessDbArgs.OneOf_Sharding?(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 != -1) {
    return outlined copy of AspirePirPirPreprocessDbArgs.OneOf_Sharding(a1, a2, a3);
  }
  return a1;
}

uint64_t outlined copy of AspirePirPirPreprocessDbArgs.OneOf_Sharding(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 == 2) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined consume of AspirePirPirPreprocessDbArgs.OneOf_Sharding?(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 != -1) {
    return outlined consume of AspirePirPirPreprocessDbArgs.OneOf_Sharding(a1, a2, a3);
  }
  return a1;
}

uint64_t outlined consume of AspirePirPirPreprocessDbArgs.OneOf_Sharding(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 == 2) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t type metadata accessor for AspirePirPirPreprocessDbCommand(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspirePirPirPreprocessDbCommand);
}

uint64_t type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspirePirPirPreprocessDbCommand.OneOf_Command);
}

uint64_t type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config);
}

uint64_t type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspirePirPirPreprocessDbCommand.Keyword);
}

uint64_t type metadata accessor for AspirePirPirPreprocessDbCommand.Index(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspirePirPirPreprocessDbCommand.Index);
}

uint64_t specialized static AspirePirEncryptedIndices.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v16 - v9;
  if ((specialized static Array<A>.== infix(_:_:)(*a1, *a2) & 1) != 0 && a1[1] == a2[1])
  {
    uint64_t v11 = type metadata accessor for AspirePirEncryptedIndices(0);
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v12(v10, (char *)a1 + *(int *)(v11 + 24), v4);
    v12(v7, (char *)a2 + *(int *)(v11 + 24), v4);
    _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
    v14(v7, v4);
    v14(v10, v4);
  }
  else
  {
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t specialized static AspirePirPirPreprocessDbCommand.Index.== infix(_:_:)(char *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v16 - v9;
  if (*(_DWORD *)a1 == *(_DWORD *)a2 && *((_DWORD *)a1 + 1) == *((_DWORD *)a2 + 1))
  {
    uint64_t v11 = type metadata accessor for AspirePirPirPreprocessDbCommand.Index(0);
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v12(v10, &a1[*(int *)(v11 + 24)], v4);
    v12(v7, &a2[*(int *)(v11 + 24)], v4);
    _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
    v14(v7, v4);
    v14(v10, v4);
  }
  else
  {
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t specialized static AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AspirePirBatchKeywordPirConfig(0);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for AspirePirCuckooTableConfig(0);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config(0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v27 - v14;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config, AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config));
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v18 = (char *)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = (uint64_t)&v18[*(int *)(v19 + 56)];
  outlined init with copy of AspireHeEncryptionParameters(a1, (uint64_t)v18, type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config);
  outlined init with copy of AspireHeEncryptionParameters(a2, v20, type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with copy of AspireHeEncryptionParameters((uint64_t)v18, (uint64_t)v12, type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined init with take of AspirePirPIRShardingFunction(v20, (uint64_t)v6, type metadata accessor for AspirePirBatchKeywordPirConfig);
      char v21 = specialized static AspirePirBatchKeywordPirConfig.== infix(_:_:)((uint64_t)v12, (uint64_t)v6);
      _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v6, type metadata accessor for AspirePirBatchKeywordPirConfig);
      uint64_t v22 = (uint64_t)v12;
      double v23 = type metadata accessor for AspirePirBatchKeywordPirConfig;
LABEL_9:
      _s8CipherML28AspireHeEncryptionParametersVWOhTm_2(v22, v23);
      _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v18, type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config);
      return v21 & 1;
    }
    uint64_t v24 = type metadata accessor for AspirePirBatchKeywordPirConfig;
    uint64_t v25 = (uint64_t)v12;
  }
  else
  {
    outlined init with copy of AspireHeEncryptionParameters((uint64_t)v18, (uint64_t)v15, type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      outlined init with take of AspirePirPIRShardingFunction(v20, (uint64_t)v9, type metadata accessor for AspirePirCuckooTableConfig);
      char v21 = specialized static AspirePirCuckooTableConfig.== infix(_:_:)((uint64_t)v15, (uint64_t)v9);
      _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v9, type metadata accessor for AspirePirCuckooTableConfig);
      uint64_t v22 = (uint64_t)v15;
      double v23 = type metadata accessor for AspirePirCuckooTableConfig;
      goto LABEL_9;
    }
    uint64_t v24 = type metadata accessor for AspirePirCuckooTableConfig;
    uint64_t v25 = (uint64_t)v15;
  }
  _s8CipherML28AspireHeEncryptionParametersVWOhTm_2(v25, v24);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v18, &demangling cache variable for type metadata for (AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config, AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config));
  char v21 = 0;
  return v21 & 1;
}

uint64_t specialized static AspirePirPirPreprocessDbCommand.Keyword.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v57 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  char v56 = (char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v55 = (char *)&v52 - v7;
  uint64_t v8 = type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v54 = (uint64_t)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config?, AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config?));
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config?);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v16 = (char *)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v52 - v18;
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)&v52 - v21;
  uint64_t v23 = type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword(0);
  uint64_t v24 = *(int *)(v23 + 24);
  uint64_t v58 = a1;
  uint64_t v59 = a2;
  uint64_t v25 = (void *)(a1 + v24);
  uint64_t v26 = *(void *)(a1 + v24 + 8);
  uint64_t v27 = (void *)(a2 + v24);
  uint64_t v28 = v27[1];
  if (!v26)
  {
    uint64_t v53 = v4;
    uint64_t v29 = v8;
    if (v28) {
      goto LABEL_23;
    }
    goto LABEL_8;
  }
  if (!v28) {
    goto LABEL_23;
  }
  uint64_t v53 = v4;
  uint64_t v29 = v8;
  if (*v25 == *v27 && v26 == v28
    || (v30 = v23, v31 = _stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t v23 = v30, v32 = 0, (v31 & 1) != 0))
  {
LABEL_8:
    uint64_t v33 = *(int *)(v23 + 28);
    char v34 = (void *)(v58 + v33);
    uint64_t v35 = *(void *)(v58 + v33 + 8);
    uint64_t v36 = (void *)(v59 + v33);
    uint64_t v37 = v36[1];
    if (v35)
    {
      if (!v37) {
        goto LABEL_23;
      }
      if (*v34 != *v36 || v35 != v37)
      {
        uint64_t v38 = v23;
        char v39 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t v23 = v38;
        char v32 = 0;
        if ((v39 & 1) == 0) {
          return v32 & 1;
        }
      }
    }
    else if (v37)
    {
      goto LABEL_23;
    }
    uint64_t v40 = v23;
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v58, (uint64_t)v22, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config?);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v59, (uint64_t)v19, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config?);
    uint64_t v41 = (uint64_t)&v13[*(int *)(v11 + 48)];
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v22, (uint64_t)v13, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config?);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v19, v41, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config?);
    uint64_t v42 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    if (v42((uint64_t)v13, 1, v29) == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v19, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config?);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v22, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config?);
      if (v42(v41, 1, v29) == 1)
      {
        outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v13, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config?);
LABEL_22:
        uint64_t v45 = v57;
        uint64_t v46 = *(void (**)(char *, uint64_t, uint64_t))(v57 + 16);
        uint64_t v47 = v55;
        uint64_t v48 = v53;
        v46(v55, v58 + *(int *)(v40 + 20), v53);
        uint64_t v49 = v56;
        v46(v56, v59 + *(int *)(v40 + 20), v48);
        _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
        char v32 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v50 = *(void (**)(char *, uint64_t))(v45 + 8);
        v50(v49, v48);
        v50(v47, v48);
        return v32 & 1;
      }
      goto LABEL_20;
    }
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v13, (uint64_t)v16, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config?);
    if (v42(v41, 1, v29) == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v19, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config?);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v22, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config?);
      _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v16, type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config);
LABEL_20:
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v13, &demangling cache variable for type metadata for (AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config?, AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config?));
      goto LABEL_23;
    }
    uint64_t v43 = v54;
    outlined init with take of AspirePirPIRShardingFunction(v41, v54, type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config);
    char v44 = specialized static AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config.== infix(_:_:)((uint64_t)v16, v43);
    _s8CipherML28AspireHeEncryptionParametersVWOhTm_2(v43, type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v19, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v22, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config?);
    _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v16, type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v13, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config?);
    if (v44) {
      goto LABEL_22;
    }
LABEL_23:
    char v32 = 0;
  }
  return v32 & 1;
}

uint64_t specialized static AspirePirPirPreprocessDbCommand.OneOf_Command.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v25 = a2;
  uint64_t v3 = type metadata accessor for AspirePirPirPreprocessDbCommand.Index(0);
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (_DWORD *)((char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword(0);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command(0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (_DWORD *)((char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v24 - v13;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspirePirPirPreprocessDbCommand.OneOf_Command, AspirePirPirPreprocessDbCommand.OneOf_Command));
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v17 = (char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = (uint64_t)&v17[*(int *)(v18 + 56)];
  outlined init with copy of AspireHeEncryptionParameters(a1, (uint64_t)v17, type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command);
  outlined init with copy of AspireHeEncryptionParameters(v25, v19, type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined init with copy of AspireHeEncryptionParameters((uint64_t)v17, (uint64_t)v14, type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      outlined init with take of AspirePirPIRShardingFunction(v19, (uint64_t)v8, type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword);
      char v20 = specialized static AspirePirPirPreprocessDbCommand.Keyword.== infix(_:_:)((uint64_t)v14, (uint64_t)v8);
      _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v8, type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword);
      _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v14, type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword);
      _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v17, type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command);
      return v20 & 1;
    }
    uint64_t v21 = type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword;
    uint64_t v22 = (uint64_t)v14;
    goto LABEL_10;
  }
  outlined init with copy of AspireHeEncryptionParameters((uint64_t)v17, (uint64_t)v11, type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    uint64_t v21 = type metadata accessor for AspirePirPirPreprocessDbCommand.Index;
    uint64_t v22 = (uint64_t)v11;
LABEL_10:
    _s8CipherML28AspireHeEncryptionParametersVWOhTm_2(v22, v21);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v17, &demangling cache variable for type metadata for (AspirePirPirPreprocessDbCommand.OneOf_Command, AspirePirPirPreprocessDbCommand.OneOf_Command));
LABEL_13:
    char v20 = 0;
    return v20 & 1;
  }
  outlined init with take of AspirePirPIRShardingFunction(v19, (uint64_t)v5, type metadata accessor for AspirePirPirPreprocessDbCommand.Index);
  if (*v11 != *v5
    || v11[1] != v5[1]
    || (type metadata accessor for UnknownStorage(),
        _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]), (dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0))
  {
    _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v5, type metadata accessor for AspirePirPirPreprocessDbCommand.Index);
    _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v11, type metadata accessor for AspirePirPirPreprocessDbCommand.Index);
    _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v17, type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command);
    goto LABEL_13;
  }
  _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v5, type metadata accessor for AspirePirPirPreprocessDbCommand.Index);
  _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v11, type metadata accessor for AspirePirPirPreprocessDbCommand.Index);
  _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v17, type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command);
  char v20 = 1;
  return v20 & 1;
}

uint64_t specialized static AspirePirPirPreprocessDbCommand.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v43 = *(void *)(v4 - 8);
  uint64_t v44 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v42 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v41 = (char *)&v37 - v7;
  uint64_t v8 = type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v38 = (uint64_t)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspirePirPirPreprocessDbCommand.OneOf_Command?, AspirePirPirPreprocessDbCommand.OneOf_Command?));
  uint64_t v12 = v11 - 8;
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  char v20 = (char *)&v37 - v19;
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = (char *)&v37 - v22;
  uint64_t v39 = a1;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)&v37 - v22, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
  uint64_t v40 = a2;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a2, (uint64_t)v20, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
  uint64_t v24 = (uint64_t)&v14[*(int *)(v12 + 56)];
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v23, (uint64_t)v14, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v20, v24, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
  uint64_t v25 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v25((uint64_t)v14, 1, v8) != 1)
  {
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v14, (uint64_t)v17, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
    if (v25(v24, 1, v8) != 1)
    {
      uint64_t v26 = v38;
      outlined init with take of AspirePirPIRShardingFunction(v24, v38, type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command);
      char v27 = specialized static AspirePirPirPreprocessDbCommand.OneOf_Command.== infix(_:_:)((uint64_t)v17, v26);
      _s8CipherML28AspireHeEncryptionParametersVWOhTm_2(v26, type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v20, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v23, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
      _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v17, type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v14, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
      if (v27) {
        goto LABEL_8;
      }
LABEL_9:
      char v34 = 0;
      return v34 & 1;
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v20, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v23, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
    _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v17, type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command);
LABEL_6:
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v14, &demangling cache variable for type metadata for (AspirePirPirPreprocessDbCommand.OneOf_Command?, AspirePirPirPreprocessDbCommand.OneOf_Command?));
    goto LABEL_9;
  }
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v20, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v23, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
  if (v25(v24, 1, v8) != 1) {
    goto LABEL_6;
  }
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v14, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
LABEL_8:
  uint64_t v28 = type metadata accessor for AspirePirPirPreprocessDbCommand(0);
  uint64_t v30 = v43;
  uint64_t v29 = v44;
  char v31 = *(void (**)(char *, uint64_t, uint64_t))(v43 + 16);
  char v32 = v41;
  v31(v41, v39 + *(int *)(v28 + 20), v44);
  uint64_t v33 = v42;
  v31(v42, v40 + *(int *)(v28 + 20), v29);
  _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
  char v34 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v35 = *(void (**)(char *, uint64_t))(v30 + 8);
  v35(v33, v29);
  v35(v32, v29);
  return v34 & 1;
}

uint64_t specialized static AspirePirPirPreprocessDbArgs.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void, double), uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v13 = MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v24 - v14;
  uint64_t v16 = *(int *)(a3(0, v13) + 20);
  uint64_t v17 = *(void *)(a1 + v16);
  uint64_t v18 = *(void *)(a2 + v16);
  if (v17 == v18
    || (swift_retain(), swift_retain(), char v19 = a4(v17, v18), swift_release(), swift_release(), (v19 & 1) != 0))
  {
    char v20 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
    v20(v15, a1, v8);
    v20(v11, a2, v8);
    _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v22 = *(void (**)(char *, uint64_t))(v9 + 8);
    v22(v11, v8);
    v22(v15, v8);
  }
  else
  {
    char v21 = 0;
  }
  return v21 & 1;
}

uint64_t specialized static AspirePirCuckooTableConfig.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v16 - v9;
  if (*(double *)a1 == *(double *)a2
    && *(void *)(a1 + 8) == *(void *)(a2 + 8)
    && *(void *)(a1 + 16) == *(void *)(a2 + 16)
    && *(double *)(a1 + 24) == *(double *)(a2 + 24)
    && *(void *)(a1 + 32) == *(void *)(a2 + 32)
    && *(unsigned __int8 *)(a1 + 40) == *(unsigned __int8 *)(a2 + 40)
    && *(unsigned __int8 *)(a1 + 41) == *(unsigned __int8 *)(a2 + 41))
  {
    uint64_t v13 = type metadata accessor for AspirePirCuckooTableConfig(0);
    uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v14(v10, a1 + *(int *)(v13 + 44), v4);
    v14(v7, a2 + *(int *)(v13 + 44), v4);
    _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    char v11 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v15 = *(void (**)(char *, uint64_t))(v5 + 8);
    v15(v7, v4);
    v15(v10, v4);
  }
  else
  {
    char v11 = 0;
  }
  return v11 & 1;
}

uint64_t specialized static AspirePirBatchKeywordPirConfig.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v51 = *(void *)(v4 - 8);
  uint64_t v52 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v50 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v49 = (char *)&v48 - v7;
  uint64_t v8 = type metadata accessor for AspirePirCuckooTableConfig(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v53 = (uint64_t)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspirePirCuckooTableConfig?, AspirePirCuckooTableConfig?));
  uint64_t v12 = v11 - 8;
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v17 = (char *)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  char v20 = (char *)&v48 - v19;
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = (char *)&v48 - v22;
  uint64_t v24 = type metadata accessor for AspirePirBatchKeywordPirConfig(0);
  uint64_t v25 = *(int *)(v24 + 40);
  uint64_t v54 = a1;
  uint64_t v26 = a1 + v25;
  char v27 = (int *)v24;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v26, (uint64_t)v23, &demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
  uint64_t v28 = v27[10];
  uint64_t v55 = a2;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a2 + v28, (uint64_t)v20, &demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
  uint64_t v29 = (uint64_t)&v14[*(int *)(v12 + 56)];
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v23, (uint64_t)v14, &demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v20, v29, &demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
  uint64_t v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v30((uint64_t)v14, 1, v8) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v20, &demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v23, &demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
    if (v30(v29, 1, v8) == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v14, &demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
      goto LABEL_8;
    }
  }
  else
  {
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v14, (uint64_t)v17, &demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
    if (v30(v29, 1, v8) != 1)
    {
      uint64_t v32 = v53;
      outlined init with take of AspirePirPIRShardingFunction(v29, v53, type metadata accessor for AspirePirCuckooTableConfig);
      char v33 = specialized static AspirePirCuckooTableConfig.== infix(_:_:)((uint64_t)v17, v32);
      _s8CipherML28AspireHeEncryptionParametersVWOhTm_2(v32, type metadata accessor for AspirePirCuckooTableConfig);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v20, &demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v23, &demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
      _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v17, type metadata accessor for AspirePirCuckooTableConfig);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v14, &demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
      if ((v33 & 1) == 0)
      {
LABEL_15:
        char v31 = 0;
        return v31 & 1;
      }
LABEL_8:
      uint64_t v34 = v55;
      if (*(void *)v54 != *(void *)v55
        || *(double *)(v54 + 8) != *(double *)(v55 + 8)
        || *(void *)(v54 + 16) != *(void *)(v55 + 16)
        || *(void *)(v54 + 24) != *(void *)(v55 + 24)
        || *(void *)(v54 + 32) != *(void *)(v55 + 32))
      {
        goto LABEL_15;
      }
      uint64_t v35 = v27[11];
      uint64_t v36 = (void *)(v54 + v35);
      char v37 = *(unsigned char *)(v54 + v35 + 8);
      uint64_t v38 = (void *)(v55 + v35);
      int v39 = *(unsigned __int8 *)(v55 + v35 + 8);
      if (v37)
      {
        if (!v39) {
          goto LABEL_15;
        }
      }
      else
      {
        if (*v36 != *v38) {
          LOBYTE(v39) = 1;
        }
        if (v39) {
          goto LABEL_15;
        }
      }
      uint64_t v42 = v51;
      uint64_t v41 = v52;
      uint64_t v43 = *(void (**)(char *, uint64_t, uint64_t))(v51 + 16);
      uint64_t v44 = v49;
      v43(v49, v54 + v27[9], v52);
      uint64_t v45 = v34 + v27[9];
      uint64_t v46 = v50;
      v43(v50, v45, v41);
      _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
      char v31 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v47 = *(void (**)(char *, uint64_t))(v42 + 8);
      v47(v46, v41);
      v47(v44, v41);
      return v31 & 1;
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v20, &demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v23, &demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
    _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v17, type metadata accessor for AspirePirCuckooTableConfig);
  }
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v14, &demangling cache variable for type metadata for (AspirePirCuckooTableConfig?, AspirePirCuckooTableConfig?));
  char v31 = 0;
  return v31 & 1;
}

uint64_t _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t specialized static AspirePirSymmetricPirClientConfig.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v18 - v9;
  if ((specialized static Data.== infix(_:_:)(*(void *)a1, *(void *)(a1 + 8), *(void *)a2, *(void *)(a2 + 8)) & 1) == 0) {
    goto LABEL_7;
  }
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = *(void *)(a2 + 16);
  if (*(unsigned char *)(a1 + 24)) {
    uint64_t v11 = v11 != 0;
  }
  if (*(unsigned char *)(a2 + 24) != 1)
  {
    if (v11 != v12) {
      goto LABEL_7;
    }
LABEL_9:
    uint64_t v14 = type metadata accessor for AspirePirSymmetricPirClientConfig(0);
    uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v15(v10, a1 + *(int *)(v14 + 24), v4);
    v15(v7, a2 + *(int *)(v14 + 24), v4);
    _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v16 = *(void (**)(char *, uint64_t))(v5 + 8);
    v16(v7, v4);
    v16(v10, v4);
    return v13 & 1;
  }
  if (!v12)
  {
    if (v11) {
      goto LABEL_7;
    }
    goto LABEL_9;
  }
  if (v11 == 1) {
    goto LABEL_9;
  }
LABEL_7:
  char v13 = 0;
  return v13 & 1;
}

uint64_t specialized static AspirePirKeywordPirParameters.== infix(_:_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UnknownStorage();
  uint64_t v70 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v69 = (char *)&v62 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v68 = (char *)&v62 - v5;
  uint64_t v6 = type metadata accessor for AspirePirPIRShardingFunction(0);
  uint64_t v75 = *(void *)(v6 - 8);
  uint64_t v76 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v67 = (uint64_t)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspirePirPIRShardingFunction?, AspirePirPIRShardingFunction?));
  MEMORY[0x270FA5388](v72);
  uint64_t v77 = (uint64_t)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPIRShardingFunction?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v71 = (uint64_t)&v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v73 = (uint64_t)&v62 - v12;
  MEMORY[0x270FA5388](v13);
  uint64_t v74 = (uint64_t)&v62 - v14;
  uint64_t v15 = type metadata accessor for AspirePirSymmetricPirClientConfig(0);
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v62 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspirePirSymmetricPirClientConfig?, AspirePirSymmetricPirClientConfig?));
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v62 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirSymmetricPirClientConfig?);
  MEMORY[0x270FA5388](v22 - 8);
  uint64_t v24 = (char *)&v62 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v25);
  char v27 = (char *)&v62 - v26;
  MEMORY[0x270FA5388](v28);
  char v31 = (char *)&v62 - v30;
  if (*(void *)a1 != *(void *)v29 || *(unsigned __int8 *)(a1 + 8) != *(unsigned __int8 *)(v29 + 8)) {
    goto LABEL_17;
  }
  uint64_t v62 = v2;
  int v63 = v18;
  uint64_t v32 = a1;
  uint64_t v33 = v29;
  uint64_t v34 = v16;
  uint64_t v35 = type metadata accessor for AspirePirKeywordPirParameters(0);
  uint64_t v36 = *(int *)(v35 + 28);
  uint64_t v65 = v32;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v32 + v36, (uint64_t)v31, &demangling cache variable for type metadata for AspirePirSymmetricPirClientConfig?);
  uint64_t v64 = v35;
  uint64_t v37 = *(int *)(v35 + 28);
  uint64_t v66 = v33;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v33 + v37, (uint64_t)v27, &demangling cache variable for type metadata for AspirePirSymmetricPirClientConfig?);
  uint64_t v38 = (uint64_t)&v21[*(int *)(v19 + 48)];
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v31, (uint64_t)v21, &demangling cache variable for type metadata for AspirePirSymmetricPirClientConfig?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v27, v38, &demangling cache variable for type metadata for AspirePirSymmetricPirClientConfig?);
  int v39 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48);
  if (v39((uint64_t)v21, 1, v15) != 1)
  {
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21, (uint64_t)v24, &demangling cache variable for type metadata for AspirePirSymmetricPirClientConfig?);
    if (v39(v38, 1, v15) != 1)
    {
      uint64_t v42 = (uint64_t)v63;
      outlined init with take of AspirePirPIRShardingFunction(v38, (uint64_t)v63, type metadata accessor for AspirePirSymmetricPirClientConfig);
      char v43 = specialized static AspirePirSymmetricPirClientConfig.== infix(_:_:)((uint64_t)v24, v42);
      _s8CipherML28AspireHeEncryptionParametersVWOhTm_2(v42, type metadata accessor for AspirePirSymmetricPirClientConfig);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v27, &demangling cache variable for type metadata for AspirePirSymmetricPirClientConfig?);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v31, &demangling cache variable for type metadata for AspirePirSymmetricPirClientConfig?);
      _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v24, type metadata accessor for AspirePirSymmetricPirClientConfig);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21, &demangling cache variable for type metadata for AspirePirSymmetricPirClientConfig?);
      if ((v43 & 1) == 0) {
        goto LABEL_17;
      }
      goto LABEL_10;
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v27, &demangling cache variable for type metadata for AspirePirSymmetricPirClientConfig?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v31, &demangling cache variable for type metadata for AspirePirSymmetricPirClientConfig?);
    _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v24, type metadata accessor for AspirePirSymmetricPirClientConfig);
LABEL_8:
    uint64_t v40 = &demangling cache variable for type metadata for (AspirePirSymmetricPirClientConfig?, AspirePirSymmetricPirClientConfig?);
    uint64_t v41 = (uint64_t)v21;
LABEL_16:
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v41, v40);
    goto LABEL_17;
  }
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v27, &demangling cache variable for type metadata for AspirePirSymmetricPirClientConfig?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v31, &demangling cache variable for type metadata for AspirePirSymmetricPirClientConfig?);
  if (v39(v38, 1, v15) != 1) {
    goto LABEL_8;
  }
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21, &demangling cache variable for type metadata for AspirePirSymmetricPirClientConfig?);
LABEL_10:
  uint64_t v44 = v64;
  uint64_t v45 = v74;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v65 + *(int *)(v64 + 32), v74, &demangling cache variable for type metadata for AspirePirPIRShardingFunction?);
  uint64_t v46 = v73;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v66 + *(int *)(v44 + 32), v73, &demangling cache variable for type metadata for AspirePirPIRShardingFunction?);
  uint64_t v47 = v77;
  uint64_t v48 = v77 + *(int *)(v72 + 48);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v45, v77, &demangling cache variable for type metadata for AspirePirPIRShardingFunction?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v46, v48, &demangling cache variable for type metadata for AspirePirPIRShardingFunction?);
  uint64_t v49 = v76;
  uint64_t v50 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v75 + 48);
  if (v50(v47, 1, v76) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v46, &demangling cache variable for type metadata for AspirePirPIRShardingFunction?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v45, &demangling cache variable for type metadata for AspirePirPIRShardingFunction?);
    if (v50(v48, 1, v49) == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v47, &demangling cache variable for type metadata for AspirePirPIRShardingFunction?);
LABEL_20:
      uint64_t v56 = v70;
      uint64_t v57 = *(void (**)(char *, uint64_t, uint64_t))(v70 + 16);
      uint64_t v58 = v68;
      uint64_t v59 = v62;
      v57(v68, v65 + *(int *)(v44 + 24), v62);
      int v60 = v69;
      v57(v69, v66 + *(int *)(v44 + 24), v59);
      _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
      char v52 = dispatch thunk of static Equatable.== infix(_:_:)();
      char v61 = *(void (**)(char *, uint64_t))(v56 + 8);
      v61(v60, v59);
      v61(v58, v59);
      return v52 & 1;
    }
    goto LABEL_15;
  }
  uint64_t v51 = v71;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v47, v71, &demangling cache variable for type metadata for AspirePirPIRShardingFunction?);
  if (v50(v48, 1, v49) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v46, &demangling cache variable for type metadata for AspirePirPIRShardingFunction?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v45, &demangling cache variable for type metadata for AspirePirPIRShardingFunction?);
    _s8CipherML28AspireHeEncryptionParametersVWOhTm_2(v51, type metadata accessor for AspirePirPIRShardingFunction);
LABEL_15:
    uint64_t v40 = &demangling cache variable for type metadata for (AspirePirPIRShardingFunction?, AspirePirPIRShardingFunction?);
    uint64_t v41 = v47;
    goto LABEL_16;
  }
  uint64_t v54 = v67;
  outlined init with take of AspirePirPIRShardingFunction(v48, v67, type metadata accessor for AspirePirPIRShardingFunction);
  char v55 = specialized static AspirePirPIRShardingFunction.== infix(_:_:)(v51, v54);
  _s8CipherML28AspireHeEncryptionParametersVWOhTm_2(v54, type metadata accessor for AspirePirPIRShardingFunction);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v46, &demangling cache variable for type metadata for AspirePirPIRShardingFunction?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v45, &demangling cache variable for type metadata for AspirePirPIRShardingFunction?);
  _s8CipherML28AspireHeEncryptionParametersVWOhTm_2(v51, type metadata accessor for AspirePirPIRShardingFunction);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v47, &demangling cache variable for type metadata for AspirePirPIRShardingFunction?);
  if (v55) {
    goto LABEL_20;
  }
LABEL_17:
  char v52 = 0;
  return v52 & 1;
}

uint64_t specialized static AspirePirBatchPirParameters.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v16 - v9;
  if (*(void *)a1 == *(void *)a2
    && *(void *)(a1 + 8) == *(void *)(a2 + 8)
    && specialized static Array<A>.== infix(_:_:)(*(void **)(a1 + 16), *(void **)(a2 + 16))
    && *(void *)(a1 + 24) == *(void *)(a2 + 24))
  {
    uint64_t v11 = type metadata accessor for AspirePirBatchPirParameters(0);
    uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v12(v10, a1 + *(int *)(v11 + 32), v4);
    v12(v7, a2 + *(int *)(v11 + 32), v4);
    _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
    v14(v7, v4);
    v14(v10, v4);
  }
  else
  {
    char v13 = 0;
  }
  return v13 & 1;
}

unint64_t lazy protocol witness table accessor for type AspirePirSymmetricPirConfigType and conformance AspirePirSymmetricPirConfigType()
{
  unint64_t result = lazy protocol witness table cache variable for type AspirePirSymmetricPirConfigType and conformance AspirePirSymmetricPirConfigType;
  if (!lazy protocol witness table cache variable for type AspirePirSymmetricPirConfigType and conformance AspirePirSymmetricPirConfigType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AspirePirSymmetricPirConfigType and conformance AspirePirSymmetricPirConfigType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AspirePirSymmetricPirConfigType and conformance AspirePirSymmetricPirConfigType;
  if (!lazy protocol witness table cache variable for type AspirePirSymmetricPirConfigType and conformance AspirePirSymmetricPirConfigType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AspirePirSymmetricPirConfigType and conformance AspirePirSymmetricPirConfigType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AspirePirSymmetricPirConfigType and conformance AspirePirSymmetricPirConfigType;
  if (!lazy protocol witness table cache variable for type AspirePirSymmetricPirConfigType and conformance AspirePirSymmetricPirConfigType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AspirePirSymmetricPirConfigType and conformance AspirePirSymmetricPirConfigType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AspirePirSymmetricPirConfigType and conformance AspirePirSymmetricPirConfigType;
  if (!lazy protocol witness table cache variable for type AspirePirSymmetricPirConfigType and conformance AspirePirSymmetricPirConfigType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AspirePirSymmetricPirConfigType and conformance AspirePirSymmetricPirConfigType);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in AspirePirPirAlgorithm()
{
  return lazy protocol witness table accessor for type [AMDPbHE_APICode] and conformance [A](&lazy protocol witness table cache variable for type [AspirePirPirAlgorithm] and conformance [A], &demangling cache variable for type metadata for [AspirePirPirAlgorithm]);
}

unint64_t lazy protocol witness table accessor for type AspirePirKeyCompressionStrategy and conformance AspirePirKeyCompressionStrategy()
{
  unint64_t result = lazy protocol witness table cache variable for type AspirePirKeyCompressionStrategy and conformance AspirePirKeyCompressionStrategy;
  if (!lazy protocol witness table cache variable for type AspirePirKeyCompressionStrategy and conformance AspirePirKeyCompressionStrategy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AspirePirKeyCompressionStrategy and conformance AspirePirKeyCompressionStrategy);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AspirePirKeyCompressionStrategy and conformance AspirePirKeyCompressionStrategy;
  if (!lazy protocol witness table cache variable for type AspirePirKeyCompressionStrategy and conformance AspirePirKeyCompressionStrategy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AspirePirKeyCompressionStrategy and conformance AspirePirKeyCompressionStrategy);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AspirePirKeyCompressionStrategy and conformance AspirePirKeyCompressionStrategy;
  if (!lazy protocol witness table cache variable for type AspirePirKeyCompressionStrategy and conformance AspirePirKeyCompressionStrategy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AspirePirKeyCompressionStrategy and conformance AspirePirKeyCompressionStrategy);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AspirePirKeyCompressionStrategy and conformance AspirePirKeyCompressionStrategy;
  if (!lazy protocol witness table cache variable for type AspirePirKeyCompressionStrategy and conformance AspirePirKeyCompressionStrategy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AspirePirKeyCompressionStrategy and conformance AspirePirKeyCompressionStrategy);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in AspirePirKeyCompressionStrategy()
{
  return lazy protocol witness table accessor for type [AMDPbHE_APICode] and conformance [A](&lazy protocol witness table cache variable for type [AspirePirKeyCompressionStrategy] and conformance [A], &demangling cache variable for type metadata for [AspirePirKeyCompressionStrategy]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in AspirePirSymmetricPirConfigType()
{
  return lazy protocol witness table accessor for type [AMDPbHE_APICode] and conformance [A](&lazy protocol witness table cache variable for type [AspirePirSymmetricPirConfigType] and conformance [A], &demangling cache variable for type metadata for [AspirePirSymmetricPirConfigType]);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspirePirPirParameters()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirPirParameters and conformance AspirePirPirParameters, (void (*)(uint64_t))type metadata accessor for AspirePirPirParameters);
}

uint64_t base witness table accessor for Message in AspirePirPirParameters()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirPirParameters and conformance AspirePirPirParameters, (void (*)(uint64_t))type metadata accessor for AspirePirPirParameters);
}

uint64_t base witness table accessor for Hashable in AspirePirPirParameters()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirPirParameters and conformance AspirePirPirParameters, (void (*)(uint64_t))type metadata accessor for AspirePirPirParameters);
}

uint64_t base witness table accessor for Equatable in AspirePirPirParameters()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirPirParameters and conformance AspirePirPirParameters, (void (*)(uint64_t))type metadata accessor for AspirePirPirParameters);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspirePirCuckooTableConfig()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirCuckooTableConfig and conformance AspirePirCuckooTableConfig, (void (*)(uint64_t))type metadata accessor for AspirePirCuckooTableConfig);
}

uint64_t base witness table accessor for Message in AspirePirCuckooTableConfig()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirCuckooTableConfig and conformance AspirePirCuckooTableConfig, (void (*)(uint64_t))type metadata accessor for AspirePirCuckooTableConfig);
}

uint64_t base witness table accessor for Hashable in AspirePirCuckooTableConfig()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirCuckooTableConfig and conformance AspirePirCuckooTableConfig, (void (*)(uint64_t))type metadata accessor for AspirePirCuckooTableConfig);
}

uint64_t base witness table accessor for Equatable in AspirePirCuckooTableConfig()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirCuckooTableConfig and conformance AspirePirCuckooTableConfig, (void (*)(uint64_t))type metadata accessor for AspirePirCuckooTableConfig);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspirePirBatchKeywordPirConfig()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirBatchKeywordPirConfig and conformance AspirePirBatchKeywordPirConfig, (void (*)(uint64_t))type metadata accessor for AspirePirBatchKeywordPirConfig);
}

uint64_t base witness table accessor for Message in AspirePirBatchKeywordPirConfig()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirBatchKeywordPirConfig and conformance AspirePirBatchKeywordPirConfig, (void (*)(uint64_t))type metadata accessor for AspirePirBatchKeywordPirConfig);
}

uint64_t base witness table accessor for Hashable in AspirePirBatchKeywordPirConfig()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirBatchKeywordPirConfig and conformance AspirePirBatchKeywordPirConfig, (void (*)(uint64_t))type metadata accessor for AspirePirBatchKeywordPirConfig);
}

uint64_t base witness table accessor for Equatable in AspirePirBatchKeywordPirConfig()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirBatchKeywordPirConfig and conformance AspirePirBatchKeywordPirConfig, (void (*)(uint64_t))type metadata accessor for AspirePirBatchKeywordPirConfig);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspirePirBatchPirParameters()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirBatchPirParameters and conformance AspirePirBatchPirParameters, (void (*)(uint64_t))type metadata accessor for AspirePirBatchPirParameters);
}

uint64_t base witness table accessor for Message in AspirePirBatchPirParameters()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirBatchPirParameters and conformance AspirePirBatchPirParameters, (void (*)(uint64_t))type metadata accessor for AspirePirBatchPirParameters);
}

uint64_t base witness table accessor for Hashable in AspirePirBatchPirParameters()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirBatchPirParameters and conformance AspirePirBatchPirParameters, (void (*)(uint64_t))type metadata accessor for AspirePirBatchPirParameters);
}

uint64_t base witness table accessor for Equatable in AspirePirBatchPirParameters()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirBatchPirParameters and conformance AspirePirBatchPirParameters, (void (*)(uint64_t))type metadata accessor for AspirePirBatchPirParameters);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspirePirKeywordPirParameters()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirKeywordPirParameters and conformance AspirePirKeywordPirParameters, (void (*)(uint64_t))type metadata accessor for AspirePirKeywordPirParameters);
}

uint64_t base witness table accessor for Message in AspirePirKeywordPirParameters()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirKeywordPirParameters and conformance AspirePirKeywordPirParameters, (void (*)(uint64_t))type metadata accessor for AspirePirKeywordPirParameters);
}

uint64_t base witness table accessor for Hashable in AspirePirKeywordPirParameters()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirKeywordPirParameters and conformance AspirePirKeywordPirParameters, (void (*)(uint64_t))type metadata accessor for AspirePirKeywordPirParameters);
}

uint64_t base witness table accessor for Equatable in AspirePirKeywordPirParameters()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirKeywordPirParameters and conformance AspirePirKeywordPirParameters, (void (*)(uint64_t))type metadata accessor for AspirePirKeywordPirParameters);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspirePirPIRShardingFunction()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirPIRShardingFunction and conformance AspirePirPIRShardingFunction, (void (*)(uint64_t))type metadata accessor for AspirePirPIRShardingFunction);
}

uint64_t base witness table accessor for Message in AspirePirPIRShardingFunction()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirPIRShardingFunction and conformance AspirePirPIRShardingFunction, (void (*)(uint64_t))type metadata accessor for AspirePirPIRShardingFunction);
}

uint64_t base witness table accessor for Hashable in AspirePirPIRShardingFunction()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirPIRShardingFunction and conformance AspirePirPIRShardingFunction, (void (*)(uint64_t))type metadata accessor for AspirePirPIRShardingFunction);
}

uint64_t base witness table accessor for Equatable in AspirePirPIRShardingFunction()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirPIRShardingFunction and conformance AspirePirPIRShardingFunction, (void (*)(uint64_t))type metadata accessor for AspirePirPIRShardingFunction);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspirePirPIRShardingFunctionSHA256()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirPIRShardingFunctionSHA256 and conformance AspirePirPIRShardingFunctionSHA256, (void (*)(uint64_t))type metadata accessor for AspirePirPIRShardingFunctionSHA256);
}

uint64_t base witness table accessor for Message in AspirePirPIRShardingFunctionSHA256()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirPIRShardingFunctionSHA256 and conformance AspirePirPIRShardingFunctionSHA256, (void (*)(uint64_t))type metadata accessor for AspirePirPIRShardingFunctionSHA256);
}

uint64_t base witness table accessor for Hashable in AspirePirPIRShardingFunctionSHA256()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirPIRShardingFunctionSHA256 and conformance AspirePirPIRShardingFunctionSHA256, (void (*)(uint64_t))type metadata accessor for AspirePirPIRShardingFunctionSHA256);
}

uint64_t base witness table accessor for Equatable in AspirePirPIRShardingFunctionSHA256()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirPIRShardingFunctionSHA256 and conformance AspirePirPIRShardingFunctionSHA256, (void (*)(uint64_t))type metadata accessor for AspirePirPIRShardingFunctionSHA256);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspirePirPIRShardingFunctionDoubleMod()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirPIRShardingFunctionDoubleMod and conformance AspirePirPIRShardingFunctionDoubleMod, (void (*)(uint64_t))type metadata accessor for AspirePirPIRShardingFunctionDoubleMod);
}

uint64_t base witness table accessor for Message in AspirePirPIRShardingFunctionDoubleMod()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirPIRShardingFunctionDoubleMod and conformance AspirePirPIRShardingFunctionDoubleMod, (void (*)(uint64_t))type metadata accessor for AspirePirPIRShardingFunctionDoubleMod);
}

uint64_t base witness table accessor for Hashable in AspirePirPIRShardingFunctionDoubleMod()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirPIRShardingFunctionDoubleMod and conformance AspirePirPIRShardingFunctionDoubleMod, (void (*)(uint64_t))type metadata accessor for AspirePirPIRShardingFunctionDoubleMod);
}

uint64_t base witness table accessor for Equatable in AspirePirPIRShardingFunctionDoubleMod()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirPIRShardingFunctionDoubleMod and conformance AspirePirPIRShardingFunctionDoubleMod, (void (*)(uint64_t))type metadata accessor for AspirePirPIRShardingFunctionDoubleMod);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspirePirEncryptedIndices()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirEncryptedIndices and conformance AspirePirEncryptedIndices, (void (*)(uint64_t))type metadata accessor for AspirePirEncryptedIndices);
}

uint64_t base witness table accessor for Message in AspirePirEncryptedIndices()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirEncryptedIndices and conformance AspirePirEncryptedIndices, (void (*)(uint64_t))type metadata accessor for AspirePirEncryptedIndices);
}

uint64_t base witness table accessor for Hashable in AspirePirEncryptedIndices()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirEncryptedIndices and conformance AspirePirEncryptedIndices, (void (*)(uint64_t))type metadata accessor for AspirePirEncryptedIndices);
}

uint64_t base witness table accessor for Equatable in AspirePirEncryptedIndices()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirEncryptedIndices and conformance AspirePirEncryptedIndices, (void (*)(uint64_t))type metadata accessor for AspirePirEncryptedIndices);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspirePirSerializedKeywordDbRow()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirSerializedKeywordDbRow and conformance AspirePirSerializedKeywordDbRow, (void (*)(uint64_t))type metadata accessor for AspirePirSerializedKeywordDbRow);
}

uint64_t base witness table accessor for Message in AspirePirSerializedKeywordDbRow()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirSerializedKeywordDbRow and conformance AspirePirSerializedKeywordDbRow, (void (*)(uint64_t))type metadata accessor for AspirePirSerializedKeywordDbRow);
}

uint64_t base witness table accessor for Hashable in AspirePirSerializedKeywordDbRow()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirSerializedKeywordDbRow and conformance AspirePirSerializedKeywordDbRow, (void (*)(uint64_t))type metadata accessor for AspirePirSerializedKeywordDbRow);
}

uint64_t base witness table accessor for Equatable in AspirePirSerializedKeywordDbRow()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirSerializedKeywordDbRow and conformance AspirePirSerializedKeywordDbRow, (void (*)(uint64_t))type metadata accessor for AspirePirSerializedKeywordDbRow);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspirePirSerializedKeywordDb()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirSerializedKeywordDb and conformance AspirePirSerializedKeywordDb, (void (*)(uint64_t))type metadata accessor for AspirePirSerializedKeywordDb);
}

uint64_t base witness table accessor for Message in AspirePirSerializedKeywordDb()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirSerializedKeywordDb and conformance AspirePirSerializedKeywordDb, (void (*)(uint64_t))type metadata accessor for AspirePirSerializedKeywordDb);
}

uint64_t base witness table accessor for Hashable in AspirePirSerializedKeywordDb()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirSerializedKeywordDb and conformance AspirePirSerializedKeywordDb, (void (*)(uint64_t))type metadata accessor for AspirePirSerializedKeywordDb);
}

uint64_t base witness table accessor for Equatable in AspirePirSerializedKeywordDb()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirSerializedKeywordDb and conformance AspirePirSerializedKeywordDb, (void (*)(uint64_t))type metadata accessor for AspirePirSerializedKeywordDb);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspirePirPirPreprocessDbArgs()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirPirPreprocessDbArgs and conformance AspirePirPirPreprocessDbArgs, (void (*)(uint64_t))type metadata accessor for AspirePirPirPreprocessDbArgs);
}

uint64_t base witness table accessor for Message in AspirePirPirPreprocessDbArgs()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirPirPreprocessDbArgs and conformance AspirePirPirPreprocessDbArgs, (void (*)(uint64_t))type metadata accessor for AspirePirPirPreprocessDbArgs);
}

uint64_t base witness table accessor for Hashable in AspirePirPirPreprocessDbArgs()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirPirPreprocessDbArgs and conformance AspirePirPirPreprocessDbArgs, (void (*)(uint64_t))type metadata accessor for AspirePirPirPreprocessDbArgs);
}

uint64_t base witness table accessor for Equatable in AspirePirPirPreprocessDbArgs()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirPirPreprocessDbArgs and conformance AspirePirPirPreprocessDbArgs, (void (*)(uint64_t))type metadata accessor for AspirePirPirPreprocessDbArgs);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspirePirPirPreprocessDbCommand()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirPirPreprocessDbCommand and conformance AspirePirPirPreprocessDbCommand, (void (*)(uint64_t))type metadata accessor for AspirePirPirPreprocessDbCommand);
}

uint64_t base witness table accessor for Message in AspirePirPirPreprocessDbCommand()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirPirPreprocessDbCommand and conformance AspirePirPirPreprocessDbCommand, (void (*)(uint64_t))type metadata accessor for AspirePirPirPreprocessDbCommand);
}

uint64_t base witness table accessor for Hashable in AspirePirPirPreprocessDbCommand()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirPirPreprocessDbCommand and conformance AspirePirPirPreprocessDbCommand, (void (*)(uint64_t))type metadata accessor for AspirePirPirPreprocessDbCommand);
}

uint64_t base witness table accessor for Equatable in AspirePirPirPreprocessDbCommand()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirPirPreprocessDbCommand and conformance AspirePirPirPreprocessDbCommand, (void (*)(uint64_t))type metadata accessor for AspirePirPirPreprocessDbCommand);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspirePirPirPreprocessDbCommand.Index()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirPirPreprocessDbCommand.Index and conformance AspirePirPirPreprocessDbCommand.Index, (void (*)(uint64_t))type metadata accessor for AspirePirPirPreprocessDbCommand.Index);
}

uint64_t base witness table accessor for Message in AspirePirPirPreprocessDbCommand.Index()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirPirPreprocessDbCommand.Index and conformance AspirePirPirPreprocessDbCommand.Index, (void (*)(uint64_t))type metadata accessor for AspirePirPirPreprocessDbCommand.Index);
}

uint64_t base witness table accessor for Hashable in AspirePirPirPreprocessDbCommand.Index()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirPirPreprocessDbCommand.Index and conformance AspirePirPirPreprocessDbCommand.Index, (void (*)(uint64_t))type metadata accessor for AspirePirPirPreprocessDbCommand.Index);
}

uint64_t base witness table accessor for Equatable in AspirePirPirPreprocessDbCommand.Index()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirPirPreprocessDbCommand.Index and conformance AspirePirPirPreprocessDbCommand.Index, (void (*)(uint64_t))type metadata accessor for AspirePirPirPreprocessDbCommand.Index);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspirePirPirPreprocessDbCommand.Keyword()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirPirPreprocessDbCommand.Keyword and conformance AspirePirPirPreprocessDbCommand.Keyword, (void (*)(uint64_t))type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword);
}

uint64_t base witness table accessor for Message in AspirePirPirPreprocessDbCommand.Keyword()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirPirPreprocessDbCommand.Keyword and conformance AspirePirPirPreprocessDbCommand.Keyword, (void (*)(uint64_t))type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword);
}

uint64_t base witness table accessor for Hashable in AspirePirPirPreprocessDbCommand.Keyword()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirPirPreprocessDbCommand.Keyword and conformance AspirePirPirPreprocessDbCommand.Keyword, (void (*)(uint64_t))type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword);
}

uint64_t base witness table accessor for Equatable in AspirePirPirPreprocessDbCommand.Keyword()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirPirPreprocessDbCommand.Keyword and conformance AspirePirPirPreprocessDbCommand.Keyword, (void (*)(uint64_t))type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspirePirSymmetricPirClientConfig()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirSymmetricPirClientConfig and conformance AspirePirSymmetricPirClientConfig, (void (*)(uint64_t))type metadata accessor for AspirePirSymmetricPirClientConfig);
}

uint64_t base witness table accessor for Message in AspirePirSymmetricPirClientConfig()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirSymmetricPirClientConfig and conformance AspirePirSymmetricPirClientConfig, (void (*)(uint64_t))type metadata accessor for AspirePirSymmetricPirClientConfig);
}

uint64_t base witness table accessor for Hashable in AspirePirSymmetricPirClientConfig()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirSymmetricPirClientConfig and conformance AspirePirSymmetricPirClientConfig, (void (*)(uint64_t))type metadata accessor for AspirePirSymmetricPirClientConfig);
}

uint64_t base witness table accessor for Equatable in AspirePirSymmetricPirClientConfig()
{
  return _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_1(&lazy protocol witness table cache variable for type AspirePirSymmetricPirClientConfig and conformance AspirePirSymmetricPirClientConfig, (void (*)(uint64_t))type metadata accessor for AspirePirSymmetricPirClientConfig);
}

uint64_t sub_249E00F48@<X0>(uint64_t a1@<X8>)
{
  return AspirePirPirParameters.encryptionParameters.getter(a1);
}

uint64_t sub_249E00F6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AspirePirPirParameters.encryptionParameters : AspirePirPirParameters(a1, a2, a3, a4, type metadata accessor for AspireHeEncryptionParameters, type metadata accessor for AspireHeEncryptionParameters, (uint64_t (*)(char *))AspirePirPirParameters.encryptionParameters.setter);
}

uint64_t sub_249E00FC0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return keypath_get_27Tm(a1, &OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__numEntries, a2);
}

uint64_t sub_249E00FCC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AspirePirPirParameters.numEntries : AspirePirPirParameters(a1, a2, a3, a4, &OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__numEntries);
}

uint64_t sub_249E00FEC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return keypath_get_27Tm(a1, &OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__entrySize, a2);
}

uint64_t keypath_get_27Tm@<X0>(uint64_t a1@<X0>, void *a2@<X3>, void *a3@<X8>)
{
  uint64_t v4 = (void *)(*(void *)(a1 + *(int *)(type metadata accessor for AspirePirPirParameters(0) + 20)) + *a2);
  uint64_t result = swift_beginAccess();
  *a3 = *v4;
  return result;
}

uint64_t sub_249E01064(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AspirePirPirParameters.numEntries : AspirePirPirParameters(a1, a2, a3, a4, &OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__entrySize);
}

uint64_t sub_249E01090(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AspirePirPirParameters.encryptionParameters : AspirePirPirParameters(a1, a2, a3, a4, type metadata accessor for AspirePirKeywordPirParameters, type metadata accessor for AspirePirKeywordPirParameters, (uint64_t (*)(char *))AspirePirPirParameters.keywordPirParams.setter);
}

uint64_t sub_249E010E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for AspirePirPirParameters.algorithm : AspirePirPirParameters(a1, &OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__algorithm, a2);
}

uint64_t sub_249E01104(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AspirePirPirParameters.algorithm : AspirePirPirParameters(a1, a2, a3, a4, &OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__algorithm);
}

uint64_t sub_249E01124@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return keypath_get_27Tm(a1, &OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__batchSize, a2);
}

uint64_t sub_249E01130(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AspirePirPirParameters.numEntries : AspirePirPirParameters(a1, a2, a3, a4, &OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__batchSize);
}

uint64_t sub_249E01154(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AspirePirPirParameters.encryptionParameters : AspirePirPirParameters(a1, a2, a3, a4, type metadata accessor for AspireHeEvaluationKeyConfig, type metadata accessor for AspireHeEvaluationKeyConfig, (uint64_t (*)(char *))AspirePirPirParameters.evaluationKeyConfig.setter);
}

uint64_t sub_249E011A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for AspirePirPirParameters.algorithm : AspirePirPirParameters(a1, &OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__keyCompressionStrategy, a2);
}

uint64_t sub_249E011C8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AspirePirPirParameters.algorithm : AspirePirPirParameters(a1, a2, a3, a4, &OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__keyCompressionStrategy);
}

uint64_t sub_249E011E8@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = (unsigned char *)(*(void *)(a1 + *(int *)(type metadata accessor for AspirePirPirParameters(0) + 20))
               + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__compressVectorizedPirResponse);
  uint64_t result = swift_beginAccess();
  *a2 = *v3 & 1;
  return result;
}

uint64_t sub_249E01260(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AspirePirPirParameters.encryptionParameters : AspirePirPirParameters(a1, a2, a3, a4, type metadata accessor for AspirePirBatchPirParameters, type metadata accessor for AspirePirBatchPirParameters, (uint64_t (*)(char *))AspirePirPirParameters.batchPirParams.setter);
}

uint64_t sub_249E012BC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = type metadata accessor for AspirePirBatchKeywordPirConfig(0);
  uint64_t v5 = (uint64_t *)(a1 + *(int *)(result + 44));
  if (*((unsigned char *)v5 + 8)) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = *v5;
  }
  *a2 = v6;
  return result;
}

uint64_t sub_249E01304(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t result = type metadata accessor for AspirePirBatchKeywordPirConfig(0);
  uint64_t v5 = a2 + *(int *)(result + 44);
  *(void *)uint64_t v5 = v3;
  *(unsigned char *)(v5 + 8) = 0;
  return result;
}

uint64_t sub_249E01360@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return key path getter for AspirePirSerializedKeywordDbRow.shardID : AspirePirSerializedKeywordDbRow(a1, type metadata accessor for AspirePirSerializedKeywordDbRow, a2);
}

uint64_t sub_249E0138C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AspirePirSerializedKeywordDbRow.shardID : AspirePirSerializedKeywordDbRow(a1, a2, a3, a4, type metadata accessor for AspirePirSerializedKeywordDbRow);
}

uint64_t sub_249E013D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20));
  uint64_t v4 = *(void *)(v3 + 64);
  uint64_t v5 = *(void *)(v3 + 72);
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = v5;
  char v6 = *(unsigned char *)(v3 + 80);
  *(unsigned char *)(a2 + 16) = v6;
  return outlined copy of AspirePirPirPreprocessDbArgs.OneOf_Sharding?(v4, v5, v6);
}

uint64_t sub_249E0142C(unsigned int *a1)
{
  return AspirePirPirPreprocessDbArgs.numShards.setter(*a1);
}

uint64_t sub_249E01458(unsigned int *a1)
{
  return AspirePirPirPreprocessDbArgs.numEntriesPerShard.setter(*a1);
}

uint64_t sub_249E01484(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  swift_bridgeObjectRetain();
  return AspirePirPirPreprocessDbArgs.shardID.setter(v1, v2);
}

uint64_t sub_249E014F4@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20));
  uint64_t result = swift_beginAccess();
  *a2 = *(unsigned char *)(v3 + 178) & 1;
  return result;
}

uint64_t sub_249E01554@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20));
  uint64_t result = swift_beginAccess();
  int v5 = *(_DWORD *)(v3 + 180);
  if (*(unsigned char *)(v3 + 184)) {
    int v5 = 0;
  }
  *a2 = v5;
  return result;
}

uint64_t sub_249E015BC@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20));
  uint64_t result = swift_beginAccess();
  *a2 = *(unsigned char *)(v3 + 185) & 1;
  return result;
}

uint64_t sub_249E0161C@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20));
  uint64_t result = swift_beginAccess();
  *a2 = *(unsigned char *)(v3 + 186) & 1;
  return result;
}

uint64_t sub_249E01680(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AspirePirPirParameters.encryptionParameters : AspirePirPirParameters(a1, a2, a3, a4, type metadata accessor for AspirePirPirPreprocessDbCommand, type metadata accessor for AspirePirPirPreprocessDbCommand, (uint64_t (*)(char *))AspirePirPirPreprocessDbArgs.command.setter);
}

uint64_t sub_249E016D4@<X0>(uint64_t a1@<X8>)
{
  return AspirePirPirPreprocessDbCommand.keyword.getter(a1);
}

uint64_t sub_249E0170C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return key path getter for AspirePirSerializedKeywordDbRow.shardID : AspirePirSerializedKeywordDbRow(a1, type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword, a2);
}

uint64_t sub_249E01738(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AspirePirSerializedKeywordDbRow.shardID : AspirePirSerializedKeywordDbRow(a1, a2, a3, a4, type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword);
}

uint64_t sub_249E01764@<X0>(_OWORD *a1@<X8>)
{
  return AspirePirPirPreprocessDbCommand.Keyword.cuckooConfig.getter(a1);
}

uint64_t sub_249E0178C@<X0>(uint64_t a1@<X8>)
{
  return AspirePirPirPreprocessDbCommand.Keyword.batchPirConfig.getter(a1);
}

ValueMetadata *type metadata accessor for AspirePirPirAlgorithm()
{
  return &type metadata for AspirePirPirAlgorithm;
}

ValueMetadata *type metadata accessor for AspirePirKeyCompressionStrategy()
{
  return &type metadata for AspirePirKeyCompressionStrategy;
}

ValueMetadata *type metadata accessor for AspirePirSymmetricPirConfigType()
{
  return &type metadata for AspirePirSymmetricPirConfigType;
}

uint64_t getEnumTagSinglePayload for AspirePirPirParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm);
}

uint64_t storeEnumTagSinglePayload for AspirePirPirParameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm);
}

void *initializeBufferWithCopyOfBuffer for AspirePirCuckooTableConfig(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (void *)(v10 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    long long v5 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(void *)(a1 + 32) = a2[4];
    *(_WORD *)(a1 + 40) = *((_WORD *)a2 + 20);
    uint64_t v6 = *(int *)(a3 + 44);
    uint64_t v7 = a1 + v6;
    uint64_t v8 = (uint64_t)a2 + v6;
    uint64_t v9 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  }
  return v3;
}

uint64_t destroy for AspirePirCuckooTableConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 44);
  uint64_t v3 = type metadata accessor for UnknownStorage();
  int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
  return v4(v2, v3);
}

uint64_t initializeWithCopy for AspirePirCuckooTableConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  uint64_t v5 = *(int *)(a3 + 44);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  return a1;
}

uint64_t assignWithCopy for AspirePirCuckooTableConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 41);
  uint64_t v4 = *(int *)(a3 + 44);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

uint64_t initializeWithTake for AspirePirCuckooTableConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  uint64_t v5 = *(int *)(a3 + 44);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for AspirePirCuckooTableConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v4 = *(int *)(a3 + 44);
  uint64_t v5 = a2 + v4;
  uint64_t v6 = a1 + v4;
  *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 41);
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 40))(v6, v5, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for AspirePirCuckooTableConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_249E01BF0);
}

uint64_t sub_249E01BF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 254)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    BOOL v5 = v4 >= 2;
    int v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5) {
      return (v6 + 1);
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v10 = type metadata accessor for UnknownStorage();
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 44);
    return v11(v13, a2, v12);
  }
}

uint64_t storeEnumTagSinglePayload for AspirePirCuckooTableConfig(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_249E01CB4);
}

uint64_t sub_249E01CB4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 254)
  {
    *(unsigned char *)(result + 40) = a2 + 1;
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 44);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for AspirePirCuckooTableConfig()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for AspirePirBatchKeywordPirConfig(uint64_t a1, uint64_t *a2, int *a3)
{
  unsigned int v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *unsigned int v4 = *a2;
    unsigned int v4 = (void *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    long long v7 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v7;
    *(void *)(a1 + 32) = a2[4];
    uint64_t v8 = a3[9];
    uint64_t v9 = a1 + v8;
    uint64_t v10 = (uint64_t)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
    v12(v9, v10, v11);
    uint64_t v13 = a3[10];
    uint64_t v14 = (_OWORD *)((char *)v4 + v13);
    uint64_t v15 = (_OWORD *)((char *)a2 + v13);
    uint64_t v16 = type metadata accessor for AspirePirCuckooTableConfig(0);
    uint64_t v17 = *(void *)(v16 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      long long v20 = v15[1];
      *uint64_t v14 = *v15;
      v14[1] = v20;
      *((void *)v14 + 4) = *((void *)v15 + 4);
      *((_WORD *)v14 + 20) = *((_WORD *)v15 + 20);
      v12((uint64_t)v14 + *(int *)(v16 + 44), (uint64_t)v15 + *(int *)(v16 + 44), v11);
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
    uint64_t v21 = a3[11];
    uint64_t v22 = (char *)v4 + v21;
    uint64_t v23 = (uint64_t)a2 + v21;
    *(void *)uint64_t v22 = *(void *)v23;
    v22[8] = *(unsigned char *)(v23 + 8);
  }
  return v4;
}

uint64_t destroy for AspirePirBatchKeywordPirConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 36);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v10(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 40);
  uint64_t v7 = type metadata accessor for AspirePirCuckooTableConfig(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7);
  if (!result)
  {
    uint64_t v9 = v6 + *(int *)(v7 + 44);
    return ((uint64_t (*)(uint64_t, uint64_t))v10)(v9, v5);
  }
  return result;
}

uint64_t initializeWithCopy for AspirePirBatchKeywordPirConfig(uint64_t a1, uint64_t a2, int *a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v7 = a3[9];
  uint64_t v8 = (char *)(a1 + v7);
  uint64_t v9 = (char *)(a2 + v7);
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  v11(v8, v9, v10);
  uint64_t v12 = a3[10];
  uint64_t v13 = (_OWORD *)(a1 + v12);
  uint64_t v14 = (_OWORD *)(a2 + v12);
  uint64_t v15 = type metadata accessor for AspirePirCuckooTableConfig(0);
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    long long v18 = v14[1];
    _OWORD *v13 = *v14;
    v13[1] = v18;
    *((void *)v13 + 4) = *((void *)v14 + 4);
    *((_WORD *)v13 + 20) = *((_WORD *)v14 + 20);
    v11((char *)v13 + *(int *)(v15 + 44), (char *)v14 + *(int *)(v15 + 44), v10);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  uint64_t v19 = a3[11];
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  *(void *)uint64_t v20 = *(void *)v21;
  *(unsigned char *)(v20 + 8) = *(unsigned char *)(v21 + 8);
  return a1;
}

void *assignWithCopy for AspirePirBatchKeywordPirConfig(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  uint64_t v6 = a3[9];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v25 = *(void *)(v9 - 8);
  uint64_t v26 = v9;
  uint64_t v10 = *(void (**)(char *, char *))(v25 + 24);
  v10(v7, v8);
  uint64_t v11 = a3[10];
  uint64_t v12 = (uint64_t)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = type metadata accessor for AspirePirCuckooTableConfig(0);
  uint64_t v24 = *(void *)(v14 - 8);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v24 + 48);
  int v16 = v15(v12, 1, v14);
  int v17 = v15((uint64_t)v13, 1, v14);
  if (!v16)
  {
    if (!v17)
    {
      *(void *)uint64_t v12 = *(void *)v13;
      *(void *)(v12 + 8) = *((void *)v13 + 1);
      *(void *)(v12 + 16) = *((void *)v13 + 2);
      *(void *)(v12 + 24) = *((void *)v13 + 3);
      *(void *)(v12 + 32) = *((void *)v13 + 4);
      *(unsigned char *)(v12 + 40) = v13[40];
      *(unsigned char *)(v12 + 41) = v13[41];
      ((void (*)(uint64_t, char *, uint64_t))v10)(v12 + *(int *)(v14 + 44), &v13[*(int *)(v14 + 44)], v26);
      goto LABEL_7;
    }
    _s8CipherML28AspireHeEncryptionParametersVWOhTm_2(v12, type metadata accessor for AspirePirCuckooTableConfig);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
    memcpy((void *)v12, v13, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  *(void *)uint64_t v12 = *(void *)v13;
  *(void *)(v12 + 8) = *((void *)v13 + 1);
  *(void *)(v12 + 16) = *((void *)v13 + 2);
  *(void *)(v12 + 24) = *((void *)v13 + 3);
  *(void *)(v12 + 32) = *((void *)v13 + 4);
  *(unsigned char *)(v12 + 40) = v13[40];
  *(unsigned char *)(v12 + 41) = v13[41];
  (*(void (**)(uint64_t, char *, uint64_t))(v25 + 16))(v12 + *(int *)(v14 + 44), &v13[*(int *)(v14 + 44)], v26);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v24 + 56))(v12, 0, 1, v14);
LABEL_7:
  uint64_t v19 = a3[11];
  uint64_t v20 = (char *)a1 + v19;
  uint64_t v21 = (char *)a2 + v19;
  uint64_t v22 = *(void *)v21;
  v20[8] = v21[8];
  *(void *)uint64_t v20 = v22;
  return a1;
}

uint64_t initializeWithTake for AspirePirBatchKeywordPirConfig(uint64_t a1, uint64_t a2, int *a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v7 = a3[9];
  uint64_t v8 = (char *)(a1 + v7);
  uint64_t v9 = (char *)(a2 + v7);
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  uint64_t v12 = a3[10];
  uint64_t v13 = (_OWORD *)(a1 + v12);
  uint64_t v14 = (_OWORD *)(a2 + v12);
  uint64_t v15 = type metadata accessor for AspirePirCuckooTableConfig(0);
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    long long v18 = v14[1];
    _OWORD *v13 = *v14;
    v13[1] = v18;
    *((void *)v13 + 4) = *((void *)v14 + 4);
    *((_WORD *)v13 + 20) = *((_WORD *)v14 + 20);
    v11((char *)v13 + *(int *)(v15 + 44), (char *)v14 + *(int *)(v15 + 44), v10);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  uint64_t v19 = a3[11];
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  *(void *)uint64_t v20 = *(void *)v21;
  *(unsigned char *)(v20 + 8) = *(unsigned char *)(v21 + 8);
  return a1;
}

uint64_t assignWithTake for AspirePirBatchKeywordPirConfig(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v6 = a3[9];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v25 = *(void *)(v9 - 8);
  uint64_t v26 = v9;
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v25 + 40);
  v10(v7, v8);
  uint64_t v11 = a3[10];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for AspirePirCuckooTableConfig(0);
  uint64_t v24 = *(void *)(v14 - 8);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v24 + 48);
  int v16 = v15(v12, 1, v14);
  int v17 = v15(v13, 1, v14);
  if (!v16)
  {
    if (!v17)
    {
      *(void *)uint64_t v12 = *(void *)v13;
      *(_OWORD *)(v12 + 8) = *(_OWORD *)(v13 + 8);
      *(void *)(v12 + 24) = *(void *)(v13 + 24);
      *(void *)(v12 + 32) = *(void *)(v13 + 32);
      *(unsigned char *)(v12 + 40) = *(unsigned char *)(v13 + 40);
      *(unsigned char *)(v12 + 41) = *(unsigned char *)(v13 + 41);
      ((void (*)(uint64_t, uint64_t, uint64_t))v10)(v12 + *(int *)(v14 + 44), v13 + *(int *)(v14 + 44), v26);
      goto LABEL_7;
    }
    _s8CipherML28AspireHeEncryptionParametersVWOhTm_2(v12, type metadata accessor for AspirePirCuckooTableConfig);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
    memcpy((void *)v12, (const void *)v13, *(void *)(*(void *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  long long v18 = *(_OWORD *)(v13 + 16);
  *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
  *(_OWORD *)(v12 + 16) = v18;
  *(void *)(v12 + 32) = *(void *)(v13 + 32);
  *(_WORD *)(v12 + 40) = *(_WORD *)(v13 + 40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 32))(v12 + *(int *)(v14 + 44), v13 + *(int *)(v14 + 44), v26);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v24 + 56))(v12, 0, 1, v14);
LABEL_7:
  uint64_t v20 = a3[11];
  uint64_t v21 = a1 + v20;
  uint64_t v22 = a2 + v20;
  *(void *)uint64_t v21 = *(void *)v22;
  *(unsigned char *)(v21 + 8) = *(unsigned char *)(v22 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for AspirePirBatchKeywordPirConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_249E029A8);
}

uint64_t sub_249E029A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 36);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a3 + 40);
    return v13(v15, a2, v14);
  }
}

uint64_t storeEnumTagSinglePayload for AspirePirBatchKeywordPirConfig(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_249E02ABC);
}

uint64_t sub_249E02ABC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a4 + 36);
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else
  {
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
    uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
    uint64_t v16 = v14;
    uint64_t v17 = a1 + *(int *)(a4 + 40);
    return v15(v17, a2, a2, v16);
  }
}

void type metadata completion function for AspirePirBatchKeywordPirConfig()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for AspirePirCuckooTableConfig?(319, &lazy cache variable for type metadata for AspirePirCuckooTableConfig?, (void (*)(uint64_t))type metadata accessor for AspirePirCuckooTableConfig);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for AspirePirBatchPirParameters(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v5 = a2[3];
    a1[2] = a2[2];
    a1[3] = v5;
    uint64_t v6 = *(int *)(a3 + 32);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for UnknownStorage();
    uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t destroy for AspirePirBatchPirParameters(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 32);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

uint64_t initializeWithCopy for AspirePirBatchPirParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(int *)(a3 + 32);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

void *assignWithCopy for AspirePirBatchPirParameters(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  uint64_t v6 = *(int *)(a3 + 32);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_OWORD *initializeWithTake for AspirePirBatchPirParameters(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 32);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for AspirePirBatchPirParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v6 = *(int *)(a3 + 32);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for AspirePirBatchPirParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_249E030AC);
}

uint64_t sub_249E030AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 32);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for AspirePirBatchPirParameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_249E03170);
}

uint64_t sub_249E03170(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 16) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 32);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for AspirePirBatchPirParameters()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for AspirePirKeywordPirParameters(uint64_t a1, uint64_t *a2, int *a3)
{
  unint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *unint64_t v4 = *a2;
    unint64_t v4 = (void *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    uint64_t v7 = a3[6];
    uint64_t v8 = a1 + v7;
    uint64_t v9 = (uint64_t)a2 + v7;
    uint64_t v10 = type metadata accessor for UnknownStorage();
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
    v11(v8, v9, v10);
    uint64_t v12 = a3[7];
    uint64_t v13 = (void *)((char *)v4 + v12);
    uint64_t v14 = (uint64_t *)((char *)a2 + v12);
    uint64_t v15 = type metadata accessor for AspirePirSymmetricPirClientConfig(0);
    uint64_t v16 = *(void *)(v15 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirSymmetricPirClientConfig?);
      memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      uint64_t v33 = v10;
      uint64_t v19 = v11;
      uint64_t v20 = *v14;
      unint64_t v21 = v14[1];
      outlined copy of Data._Representation(*v14, v21);
      void *v13 = v20;
      v13[1] = v21;
      uint64_t v11 = v19;
      uint64_t v10 = v33;
      v13[2] = v14[2];
      *((unsigned char *)v13 + 24) = *((unsigned char *)v14 + 24);
      v11((uint64_t)v13 + *(int *)(v15 + 24), (uint64_t)v14 + *(int *)(v15 + 24), v33);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
    uint64_t v22 = a3[8];
    uint64_t v23 = (_DWORD *)((char *)v4 + v22);
    uint64_t v24 = (_DWORD *)((char *)a2 + v22);
    uint64_t v25 = type metadata accessor for AspirePirPIRShardingFunction(0);
    uint64_t v26 = *(void *)(v25 - 8);
    if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
    {
      uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPIRShardingFunction?);
      memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64));
    }
    else
    {
      uint64_t v28 = type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function(0);
      uint64_t v29 = *(void *)(v28 - 8);
      if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v29 + 48))(v24, 1, v28))
      {
        uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
        memcpy(v23, v24, *(void *)(*(void *)(v30 - 8) + 64));
      }
      else
      {
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          *uint64_t v23 = *v24;
          uint64_t v31 = type metadata accessor for AspirePirPIRShardingFunctionDoubleMod(0);
          v11((uint64_t)v23 + *(int *)(v31 + 20), (uint64_t)v24 + *(int *)(v31 + 20), v10);
        }
        else
        {
          v11((uint64_t)v23, (uint64_t)v24, v10);
        }
        swift_storeEnumTagMultiPayload();
        (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v29 + 56))(v23, 0, 1, v28);
      }
      v11((uint64_t)v23 + *(int *)(v25 + 20), (uint64_t)v24 + *(int *)(v25 + 20), v10);
      (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
    }
  }
  return v4;
}

uint64_t destroy for AspirePirKeywordPirParameters(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[6];
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v15 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v15(v4, v5);
  uint64_t v6 = a1 + a2[7];
  uint64_t v7 = type metadata accessor for AspirePirSymmetricPirClientConfig(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7))
  {
    outlined consume of Data._Representation(*(void *)v6, *(void *)(v6 + 8));
    v15(v6 + *(int *)(v7 + 24), v5);
  }
  uint64_t v8 = a1 + a2[8];
  uint64_t v9 = type metadata accessor for AspirePirPIRShardingFunction(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9);
  if (!result)
  {
    uint64_t v11 = type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v8, 1, v11))
    {
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      uint64_t v13 = v8;
      if (EnumCaseMultiPayload == 1) {
        uint64_t v13 = v8 + *(int *)(type metadata accessor for AspirePirPIRShardingFunctionDoubleMod(0) + 20);
      }
      v15(v13, v5);
    }
    uint64_t v14 = v8 + *(int *)(v9 + 20);
    return ((uint64_t (*)(uint64_t, uint64_t))v15)(v14, v5);
  }
  return result;
}

uint64_t initializeWithCopy for AspirePirKeywordPirParameters(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = a3[6];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
  v10(v7, v8, v9);
  uint64_t v11 = a3[7];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (uint64_t *)(a2 + v11);
  uint64_t v14 = type metadata accessor for AspirePirSymmetricPirClientConfig(0);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirSymmetricPirClientConfig?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    uint64_t v31 = v9;
    uint64_t v17 = v10;
    uint64_t v18 = *v13;
    unint64_t v19 = v13[1];
    outlined copy of Data._Representation(*v13, v19);
    *uint64_t v12 = v18;
    v12[1] = v19;
    uint64_t v10 = v17;
    uint64_t v9 = v31;
    v12[2] = v13[2];
    *((unsigned char *)v12 + 24) = *((unsigned char *)v13 + 24);
    v10((uint64_t)v12 + *(int *)(v14 + 24), (uint64_t)v13 + *(int *)(v14 + 24), v31);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  uint64_t v20 = a3[8];
  unint64_t v21 = (_DWORD *)(a1 + v20);
  uint64_t v22 = (_DWORD *)(a2 + v20);
  uint64_t v23 = type metadata accessor for AspirePirPIRShardingFunction(0);
  uint64_t v24 = *(void *)(v23 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
  {
    uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPIRShardingFunction?);
    memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
  }
  else
  {
    uint64_t v26 = type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function(0);
    uint64_t v27 = *(void *)(v26 - 8);
    if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v27 + 48))(v22, 1, v26))
    {
      uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
      memcpy(v21, v22, *(void *)(*(void *)(v28 - 8) + 64));
    }
    else
    {
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        *unint64_t v21 = *v22;
        uint64_t v29 = type metadata accessor for AspirePirPIRShardingFunctionDoubleMod(0);
        v10((uint64_t)v21 + *(int *)(v29 + 20), (uint64_t)v22 + *(int *)(v29 + 20), v9);
      }
      else
      {
        v10((uint64_t)v21, (uint64_t)v22, v9);
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v27 + 56))(v21, 0, 1, v26);
    }
    v10((uint64_t)v21 + *(int *)(v23 + 20), (uint64_t)v22 + *(int *)(v23 + 20), v9);
    (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  }
  return a1;
}

uint64_t assignWithCopy for AspirePirKeywordPirParameters(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = a3[6];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v51 = *(void *)(v9 - 8);
  uint64_t v52 = v9;
  uint64_t v50 = *(void (**)(uint64_t, uint64_t))(v51 + 24);
  v50(v7, v8);
  uint64_t v10 = a3[7];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for AspirePirSymmetricPirClientConfig(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
  int v16 = v15(v11, 1, v13);
  int v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      uint64_t v18 = *(void *)v12;
      unint64_t v19 = *(void *)(v12 + 8);
      outlined copy of Data._Representation(*(void *)v12, v19);
      *(void *)uint64_t v11 = v18;
      *(void *)(v11 + 8) = v19;
      uint64_t v20 = *(void *)(v12 + 16);
      *(unsigned char *)(v11 + 24) = *(unsigned char *)(v12 + 24);
      *(void *)(v11 + 16) = v20;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 16))(v11 + *(int *)(v13 + 24), v12 + *(int *)(v13 + 24), v52);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    _s8CipherML28AspireHeEncryptionParametersVWOhTm_2(v11, type metadata accessor for AspirePirSymmetricPirClientConfig);
LABEL_6:
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirSymmetricPirClientConfig?);
    memcpy((void *)v11, (const void *)v12, *(void *)(*(void *)(v21 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v34 = *(void *)v12;
  unint64_t v35 = *(void *)(v12 + 8);
  outlined copy of Data._Representation(*(void *)v12, v35);
  uint64_t v36 = *(void *)v11;
  unint64_t v37 = *(void *)(v11 + 8);
  *(void *)uint64_t v11 = v34;
  *(void *)(v11 + 8) = v35;
  outlined consume of Data._Representation(v36, v37);
  uint64_t v38 = *(void *)(v12 + 16);
  *(unsigned char *)(v11 + 24) = *(unsigned char *)(v12 + 24);
  *(void *)(v11 + 16) = v38;
  ((void (*)(uint64_t, uint64_t, uint64_t))v50)(v11 + *(int *)(v13 + 24), v12 + *(int *)(v13 + 24), v52);
LABEL_7:
  uint64_t v22 = a3[8];
  uint64_t v23 = (char *)(a1 + v22);
  uint64_t v24 = (char *)(a2 + v22);
  uint64_t v25 = type metadata accessor for AspirePirPIRShardingFunction(0);
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v27 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v26 + 48);
  int v28 = v27(v23, 1, v25);
  int v29 = v27(v24, 1, v25);
  if (!v28)
  {
    if (v29)
    {
      _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v23, type metadata accessor for AspirePirPIRShardingFunction);
      goto LABEL_13;
    }
    uint64_t v39 = type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function(0);
    uint64_t v40 = *(void *)(v39 - 8);
    uint64_t v41 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v40 + 48);
    int v42 = v41(v23, 1, v39);
    int v43 = v41(v24, 1, v39);
    if (v42)
    {
      if (!v43)
      {
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          *(_DWORD *)uint64_t v23 = *(_DWORD *)v24;
          uint64_t v44 = type metadata accessor for AspirePirPIRShardingFunctionDoubleMod(0);
          (*(void (**)(char *, char *, uint64_t))(v51 + 16))(&v23[*(int *)(v44 + 20)], &v24[*(int *)(v44 + 20)], v52);
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v51 + 16))(v23, v24, v52);
        }
        swift_storeEnumTagMultiPayload();
        (*(void (**)(char *, void, uint64_t, uint64_t))(v40 + 56))(v23, 0, 1, v39);
        goto LABEL_33;
      }
    }
    else
    {
      if (!v43)
      {
        if (a1 != a2)
        {
          _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v23, type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function);
          if (swift_getEnumCaseMultiPayload() == 1)
          {
            *(_DWORD *)uint64_t v23 = *(_DWORD *)v24;
            uint64_t v48 = type metadata accessor for AspirePirPIRShardingFunctionDoubleMod(0);
            (*(void (**)(char *, char *, uint64_t))(v51 + 16))(&v23[*(int *)(v48 + 20)], &v24[*(int *)(v48 + 20)], v52);
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v51 + 16))(v23, v24, v52);
          }
          swift_storeEnumTagMultiPayload();
        }
        goto LABEL_33;
      }
      _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v23, type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function);
    }
    uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
    memcpy(v23, v24, *(void *)(*(void *)(v47 - 8) + 64));
LABEL_33:
    ((void (*)(char *, char *, uint64_t))v50)(&v23[*(int *)(v25 + 20)], &v24[*(int *)(v25 + 20)], v52);
    return a1;
  }
  if (v29)
  {
LABEL_13:
    uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPIRShardingFunction?);
    memcpy(v23, v24, *(void *)(*(void *)(v33 - 8) + 64));
    return a1;
  }
  uint64_t v30 = type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function(0);
  uint64_t v31 = *(void *)(v30 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v24, 1, v30))
  {
    uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
    memcpy(v23, v24, *(void *)(*(void *)(v32 - 8) + 64));
    (*(void (**)(char *, char *, uint64_t))(v51 + 16))(&v23[*(int *)(v25 + 20)], &v24[*(int *)(v25 + 20)], v52);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *(_DWORD *)uint64_t v23 = *(_DWORD *)v24;
      uint64_t v45 = type metadata accessor for AspirePirPIRShardingFunctionDoubleMod(0);
      uint64_t v46 = *(void (**)(char *, char *, uint64_t))(v51 + 16);
      v46(&v23[*(int *)(v45 + 20)], &v24[*(int *)(v45 + 20)], v52);
    }
    else
    {
      uint64_t v46 = *(void (**)(char *, char *, uint64_t))(v51 + 16);
      v46(v23, v24, v52);
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, void, uint64_t, uint64_t))(v31 + 56))(v23, 0, 1, v30);
    v46(&v23[*(int *)(v25 + 20)], &v24[*(int *)(v25 + 20)], v52);
  }
  (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
  return a1;
}

uint64_t initializeWithTake for AspirePirKeywordPirParameters(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = a3[6];
  uint64_t v7 = (char *)(a1 + v6);
  uint64_t v8 = (char *)(a2 + v6);
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = a3[7];
  uint64_t v12 = (_OWORD *)(a1 + v11);
  uint64_t v13 = (_OWORD *)(a2 + v11);
  uint64_t v14 = type metadata accessor for AspirePirSymmetricPirClientConfig(0);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirSymmetricPirClientConfig?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    *uint64_t v12 = *v13;
    *((void *)v12 + 2) = *((void *)v13 + 2);
    *((unsigned char *)v12 + 24) = *((unsigned char *)v13 + 24);
    v10((char *)v12 + *(int *)(v14 + 24), (char *)v13 + *(int *)(v14 + 24), v9);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  uint64_t v17 = a3[8];
  uint64_t v18 = (_DWORD *)(a1 + v17);
  unint64_t v19 = (_DWORD *)(a2 + v17);
  uint64_t v20 = type metadata accessor for AspirePirPIRShardingFunction(0);
  uint64_t v21 = *(void *)(v20 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPIRShardingFunction?);
    memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    uint64_t v23 = type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function(0);
    uint64_t v24 = *(void *)(v23 - 8);
    if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v24 + 48))(v19, 1, v23))
    {
      uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
      memcpy(v18, v19, *(void *)(*(void *)(v25 - 8) + 64));
    }
    else
    {
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        *uint64_t v18 = *v19;
        uint64_t v26 = type metadata accessor for AspirePirPIRShardingFunctionDoubleMod(0);
        v10((char *)v18 + *(int *)(v26 + 20), (char *)v19 + *(int *)(v26 + 20), v9);
      }
      else
      {
        v10((char *)v18, (char *)v19, v9);
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v24 + 56))(v18, 0, 1, v23);
    }
    v10((char *)v18 + *(int *)(v20 + 20), (char *)v19 + *(int *)(v20 + 20), v9);
    (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  return a1;
}

uint64_t assignWithTake for AspirePirKeywordPirParameters(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = a3[6];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v45 = *(void *)(v9 - 8);
  uint64_t v46 = v9;
  uint64_t v44 = *(void (**)(uint64_t, uint64_t))(v45 + 40);
  v44(v7, v8);
  uint64_t v10 = a3[7];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for AspirePirSymmetricPirClientConfig(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
  int v16 = v15(v11, 1, v13);
  int v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
      *(void *)(v11 + 16) = *(void *)(v12 + 16);
      *(unsigned char *)(v11 + 24) = *(unsigned char *)(v12 + 24);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v45 + 32))(v11 + *(int *)(v13 + 24), v12 + *(int *)(v13 + 24), v46);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    _s8CipherML28AspireHeEncryptionParametersVWOhTm_2(v11, type metadata accessor for AspirePirSymmetricPirClientConfig);
LABEL_6:
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirSymmetricPirClientConfig?);
    memcpy((void *)v11, (const void *)v12, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v31 = *(void *)v11;
  unint64_t v32 = *(void *)(v11 + 8);
  *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
  outlined consume of Data._Representation(v31, v32);
  *(void *)(v11 + 16) = *(void *)(v12 + 16);
  *(unsigned char *)(v11 + 24) = *(unsigned char *)(v12 + 24);
  ((void (*)(uint64_t, uint64_t, uint64_t))v44)(v11 + *(int *)(v13 + 24), v12 + *(int *)(v13 + 24), v46);
LABEL_7:
  uint64_t v19 = a3[8];
  uint64_t v20 = (char *)(a1 + v19);
  uint64_t v21 = (char *)(a2 + v19);
  uint64_t v22 = type metadata accessor for AspirePirPIRShardingFunction(0);
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48);
  int v25 = v24(v20, 1, v22);
  int v26 = v24(v21, 1, v22);
  if (!v25)
  {
    if (v26)
    {
      _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v20, type metadata accessor for AspirePirPIRShardingFunction);
      goto LABEL_13;
    }
    uint64_t v33 = type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function(0);
    uint64_t v34 = *(void *)(v33 - 8);
    unint64_t v35 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v34 + 48);
    int v36 = v35(v20, 1, v33);
    int v37 = v35(v21, 1, v33);
    if (v36)
    {
      if (!v37)
      {
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          *(_DWORD *)uint64_t v20 = *(_DWORD *)v21;
          uint64_t v38 = type metadata accessor for AspirePirPIRShardingFunctionDoubleMod(0);
          (*(void (**)(char *, char *, uint64_t))(v45 + 32))(&v20[*(int *)(v38 + 20)], &v21[*(int *)(v38 + 20)], v46);
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v20, v21, v46);
        }
        swift_storeEnumTagMultiPayload();
        (*(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56))(v20, 0, 1, v33);
        goto LABEL_33;
      }
    }
    else
    {
      if (!v37)
      {
        if (a1 != a2)
        {
          _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v20, type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function);
          if (swift_getEnumCaseMultiPayload() == 1)
          {
            *(_DWORD *)uint64_t v20 = *(_DWORD *)v21;
            uint64_t v42 = type metadata accessor for AspirePirPIRShardingFunctionDoubleMod(0);
            (*(void (**)(char *, char *, uint64_t))(v45 + 32))(&v20[*(int *)(v42 + 20)], &v21[*(int *)(v42 + 20)], v46);
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v20, v21, v46);
          }
          swift_storeEnumTagMultiPayload();
        }
        goto LABEL_33;
      }
      _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)v20, type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function);
    }
    uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
    memcpy(v20, v21, *(void *)(*(void *)(v41 - 8) + 64));
LABEL_33:
    ((void (*)(char *, char *, uint64_t))v44)(&v20[*(int *)(v22 + 20)], &v21[*(int *)(v22 + 20)], v46);
    return a1;
  }
  if (v26)
  {
LABEL_13:
    uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPIRShardingFunction?);
    memcpy(v20, v21, *(void *)(*(void *)(v30 - 8) + 64));
    return a1;
  }
  uint64_t v27 = type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function(0);
  uint64_t v28 = *(void *)(v27 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v21, 1, v27))
  {
    uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
    memcpy(v20, v21, *(void *)(*(void *)(v29 - 8) + 64));
    (*(void (**)(char *, char *, uint64_t))(v45 + 32))(&v20[*(int *)(v22 + 20)], &v21[*(int *)(v22 + 20)], v46);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *(_DWORD *)uint64_t v20 = *(_DWORD *)v21;
      uint64_t v39 = type metadata accessor for AspirePirPIRShardingFunctionDoubleMod(0);
      uint64_t v40 = *(void (**)(char *, char *, uint64_t))(v45 + 32);
      v40(&v20[*(int *)(v39 + 20)], &v21[*(int *)(v39 + 20)], v46);
    }
    else
    {
      uint64_t v40 = *(void (**)(char *, char *, uint64_t))(v45 + 32);
      v40(v20, v21, v46);
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v20, 0, 1, v27);
    v40(&v20[*(int *)(v22 + 20)], &v21[*(int *)(v22 + 20)], v46);
  }
  (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  return a1;
}

uint64_t getEnumTagSinglePayload for AspirePirKeywordPirParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_249E04E88);
}

uint64_t sub_249E04E88(uint64_t a1, uint64_t a2, int *a3)
{
  if (a2 == 254)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 8);
    BOOL v5 = v4 >= 2;
    int v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5) {
      return (v6 + 1);
    }
    else {
      return 0;
    }
  }
  uint64_t v10 = type metadata accessor for UnknownStorage();
  if (*(_DWORD *)(*(void *)(v10 - 8) + 84) == a2)
  {
    uint64_t v11 = v10;
    uint64_t v12 = *(void *)(v10 - 8);
    uint64_t v13 = a3[6];
LABEL_9:
    uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v15(a1 + v13, a2, v11);
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirSymmetricPirClientConfig?);
  if (*(_DWORD *)(*(void *)(v14 - 8) + 84) == a2)
  {
    uint64_t v11 = v14;
    uint64_t v12 = *(void *)(v14 - 8);
    uint64_t v13 = a3[7];
    goto LABEL_9;
  }
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPIRShardingFunction?);
  int v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48);
  uint64_t v18 = v16;
  uint64_t v19 = a1 + a3[8];
  return v17(v19, a2, v18);
}

uint64_t storeEnumTagSinglePayload for AspirePirKeywordPirParameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_249E0501C);
}

uint64_t sub_249E0501C(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = result;
  if (a3 == 254)
  {
    *(unsigned char *)(result + 8) = a2 + 1;
    return result;
  }
  uint64_t v8 = type metadata accessor for UnknownStorage();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[6];
LABEL_7:
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return v13(v5 + v11, a2, a2, v9);
  }
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirSymmetricPirClientConfig?);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a3)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a4[7];
    goto LABEL_7;
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPIRShardingFunction?);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
  uint64_t v16 = v14;
  uint64_t v17 = v5 + a4[8];
  return v15(v17, a2, a2, v16);
}

void type metadata completion function for AspirePirKeywordPirParameters()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for AspirePirCuckooTableConfig?(319, &lazy cache variable for type metadata for AspirePirSymmetricPirClientConfig?, (void (*)(uint64_t))type metadata accessor for AspirePirSymmetricPirClientConfig);
    if (v1 <= 0x3F)
    {
      type metadata accessor for AspirePirCuckooTableConfig?(319, &lazy cache variable for type metadata for AspirePirPIRShardingFunction?, (void (*)(uint64_t))type metadata accessor for AspirePirPIRShardingFunction);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

void type metadata accessor for AspirePirCuckooTableConfig?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for AspirePirPIRShardingFunction(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function(0);
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        *(_DWORD *)a1 = *(_DWORD *)a2;
        uint64_t v11 = *(int *)(type metadata accessor for AspirePirPIRShardingFunctionDoubleMod(0) + 20);
        uint64_t v12 = (char *)a1 + v11;
        uint64_t v13 = (char *)a2 + v11;
        uint64_t v14 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
      }
      else
      {
        uint64_t v15 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v15 - 8) + 16))(a1, a2, v15);
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    uint64_t v16 = *(int *)(a3 + 20);
    uint64_t v17 = (char *)a1 + v16;
    uint64_t v18 = (char *)a2 + v16;
    uint64_t v19 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
  }
  return a1;
}

uint64_t destroy for AspirePirPIRShardingFunction(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, 1, v4))
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v5 = a1 + *(int *)(type metadata accessor for AspirePirPIRShardingFunctionDoubleMod(0) + 20);
      uint64_t v6 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
    }
    else
    {
      uint64_t v7 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(a1, v7);
    }
  }
  uint64_t v8 = a1 + *(int *)(a2 + 20);
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8);
  return v10(v8, v9);
}

_DWORD *initializeWithCopy for AspirePirPIRShardingFunction(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      uint64_t v9 = *(int *)(type metadata accessor for AspirePirPIRShardingFunctionDoubleMod(0) + 20);
      uint64_t v10 = (char *)a1 + v9;
      uint64_t v11 = (char *)a2 + v9;
      uint64_t v12 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    }
    else
    {
      uint64_t v13 = type metadata accessor for UnknownStorage();
      (*(void (**)(_DWORD *, _DWORD *, uint64_t))(*(void *)(v13 - 8) + 16))(a1, a2, v13);
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v14 = *(int *)(a3 + 20);
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16))(v15, v16, v17);
  return a1;
}

_DWORD *assignWithCopy for AspirePirPIRShardingFunction(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        *a1 = *a2;
        uint64_t v11 = *(int *)(type metadata accessor for AspirePirPIRShardingFunctionDoubleMod(0) + 20);
        uint64_t v12 = (char *)a1 + v11;
        uint64_t v13 = (char *)a2 + v11;
        uint64_t v14 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
      }
      else
      {
        uint64_t v20 = type metadata accessor for UnknownStorage();
        (*(void (**)(_DWORD *, _DWORD *, uint64_t))(*(void *)(v20 - 8) + 16))(a1, a2, v20);
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_14;
    }
LABEL_7:
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
    memcpy(a1, a2, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_14;
  }
  if (v10)
  {
    _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)a1, type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function);
    goto LABEL_7;
  }
  if (a1 != a2)
  {
    _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)a1, type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      uint64_t v16 = *(int *)(type metadata accessor for AspirePirPIRShardingFunctionDoubleMod(0) + 20);
      uint64_t v17 = (char *)a1 + v16;
      uint64_t v18 = (char *)a2 + v16;
      uint64_t v19 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
    }
    else
    {
      uint64_t v26 = type metadata accessor for UnknownStorage();
      (*(void (**)(_DWORD *, _DWORD *, uint64_t))(*(void *)(v26 - 8) + 16))(a1, a2, v26);
    }
    swift_storeEnumTagMultiPayload();
  }
LABEL_14:
  uint64_t v21 = *(int *)(a3 + 20);
  uint64_t v22 = (char *)a1 + v21;
  uint64_t v23 = (char *)a2 + v21;
  uint64_t v24 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 24))(v22, v23, v24);
  return a1;
}

_DWORD *initializeWithTake for AspirePirPIRShardingFunction(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      uint64_t v9 = *(int *)(type metadata accessor for AspirePirPIRShardingFunctionDoubleMod(0) + 20);
      int v10 = (char *)a1 + v9;
      uint64_t v11 = (char *)a2 + v9;
      uint64_t v12 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v10, v11, v12);
    }
    else
    {
      uint64_t v13 = type metadata accessor for UnknownStorage();
      (*(void (**)(_DWORD *, _DWORD *, uint64_t))(*(void *)(v13 - 8) + 32))(a1, a2, v13);
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v14 = *(int *)(a3 + 20);
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 32))(v15, v16, v17);
  return a1;
}

_DWORD *assignWithTake for AspirePirPIRShardingFunction(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        *a1 = *a2;
        uint64_t v11 = *(int *)(type metadata accessor for AspirePirPIRShardingFunctionDoubleMod(0) + 20);
        uint64_t v12 = (char *)a1 + v11;
        uint64_t v13 = (char *)a2 + v11;
        uint64_t v14 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
      }
      else
      {
        uint64_t v20 = type metadata accessor for UnknownStorage();
        (*(void (**)(_DWORD *, _DWORD *, uint64_t))(*(void *)(v20 - 8) + 32))(a1, a2, v20);
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_14;
    }
LABEL_7:
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
    memcpy(a1, a2, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_14;
  }
  if (v10)
  {
    _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)a1, type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function);
    goto LABEL_7;
  }
  if (a1 != a2)
  {
    _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)a1, type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      uint64_t v16 = *(int *)(type metadata accessor for AspirePirPIRShardingFunctionDoubleMod(0) + 20);
      uint64_t v17 = (char *)a1 + v16;
      uint64_t v18 = (char *)a2 + v16;
      uint64_t v19 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 32))(v17, v18, v19);
    }
    else
    {
      uint64_t v26 = type metadata accessor for UnknownStorage();
      (*(void (**)(_DWORD *, _DWORD *, uint64_t))(*(void *)(v26 - 8) + 32))(a1, a2, v26);
    }
    swift_storeEnumTagMultiPayload();
  }
LABEL_14:
  uint64_t v21 = *(int *)(a3 + 20);
  uint64_t v22 = (char *)a1 + v21;
  uint64_t v23 = (char *)a2 + v21;
  uint64_t v24 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 40))(v22, v23, v24);
  return a1;
}

uint64_t getEnumTagSinglePayload for AspirePirPIRShardingFunction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_249E061B8);
}

uint64_t sub_249E061B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_40Tm(a1, a2, a3, &demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
}

uint64_t storeEnumTagSinglePayload for AspirePirPIRShardingFunction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_249E061D8);
}

uint64_t sub_249E061D8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_41Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for AspirePirPIRShardingFunction.OneOf_Function?);
}

void type metadata completion function for AspirePirPIRShardingFunction(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t *initializeBufferWithCopyOfBuffer for AspirePirPIRShardingFunction.OneOf_Function(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *(_DWORD *)a1 = *(_DWORD *)a2;
      uint64_t v6 = *(int *)(type metadata accessor for AspirePirPIRShardingFunctionDoubleMod(0) + 20);
      uint64_t v7 = (char *)a1 + v6;
      uint64_t v8 = (char *)a2 + v6;
      uint64_t v9 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
    }
    else
    {
      uint64_t v11 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v11 - 8) + 16))(a1, a2, v11);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for AspirePirPIRShardingFunction.OneOf_Function(uint64_t a1)
{
  if (swift_getEnumCaseMultiPayload() == 1) {
    a1 += *(int *)(type metadata accessor for AspirePirPIRShardingFunctionDoubleMod(0) + 20);
  }
  uint64_t v2 = type metadata accessor for UnknownStorage();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  return v3(a1, v2);
}

_DWORD *initializeWithCopy for AspirePirPIRShardingFunction.OneOf_Function(_DWORD *a1, _DWORD *a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *a1 = *a2;
    uint64_t v4 = *(int *)(type metadata accessor for AspirePirPIRShardingFunctionDoubleMod(0) + 20);
    int v5 = (char *)a1 + v4;
    uint64_t v6 = (char *)a2 + v4;
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    (*(void (**)(_DWORD *, _DWORD *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_DWORD *assignWithCopy for AspirePirPIRShardingFunction.OneOf_Function(_DWORD *a1, _DWORD *a2)
{
  if (a1 != a2)
  {
    _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)a1, type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      uint64_t v4 = *(int *)(type metadata accessor for AspirePirPIRShardingFunctionDoubleMod(0) + 20);
      int v5 = (char *)a1 + v4;
      uint64_t v6 = (char *)a2 + v4;
      uint64_t v7 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
    }
    else
    {
      uint64_t v8 = type metadata accessor for UnknownStorage();
      (*(void (**)(_DWORD *, _DWORD *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_DWORD *initializeWithTake for AspirePirPIRShardingFunction.OneOf_Function(_DWORD *a1, _DWORD *a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *a1 = *a2;
    uint64_t v4 = *(int *)(type metadata accessor for AspirePirPIRShardingFunctionDoubleMod(0) + 20);
    int v5 = (char *)a1 + v4;
    uint64_t v6 = (char *)a2 + v4;
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    (*(void (**)(_DWORD *, _DWORD *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_DWORD *assignWithTake for AspirePirPIRShardingFunction.OneOf_Function(_DWORD *a1, _DWORD *a2)
{
  if (a1 != a2)
  {
    _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)a1, type metadata accessor for AspirePirPIRShardingFunction.OneOf_Function);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      uint64_t v4 = *(int *)(type metadata accessor for AspirePirPIRShardingFunctionDoubleMod(0) + 20);
      int v5 = (char *)a1 + v4;
      uint64_t v6 = (char *)a2 + v4;
      uint64_t v7 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
    }
    else
    {
      uint64_t v8 = type metadata accessor for UnknownStorage();
      (*(void (**)(_DWORD *, _DWORD *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata completion function for AspirePirPIRShardingFunction.OneOf_Function(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for AspirePirPIRShardingFunction.OneOf_Function(a1, a2, a3, MEMORY[0x263F50560], type metadata accessor for AspirePirPIRShardingFunctionDoubleMod);
}

uint64_t getEnumTagSinglePayload for AspirePirPIRShardingFunctionSHA256(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_249E06848);
}

uint64_t sub_249E06848(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);
  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for AspirePirPIRShardingFunctionSHA256(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_249E068C8);
}

uint64_t sub_249E068C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(a1, a2, a2, v4);
}

uint64_t *initializeBufferWithCopyOfBuffer for AspirePirPIRShardingFunctionDoubleMod(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    uint64_t v5 = *(int *)(a3 + 20);
    uint64_t v6 = (char *)a1 + v5;
    uint64_t v7 = (char *)a2 + v5;
    uint64_t v8 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t destroy for AspirePirPIRShardingFunctionDoubleMod(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 20);
  uint64_t v3 = type metadata accessor for UnknownStorage();
  int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
  return v4(v2, v3);
}

_DWORD *initializeWithCopy for AspirePirPIRShardingFunctionDoubleMod(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

_DWORD *assignWithCopy for AspirePirPIRShardingFunctionDoubleMod(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

_DWORD *initializeWithTake for AspirePirPIRShardingFunctionDoubleMod(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_DWORD *assignWithTake for AspirePirPIRShardingFunctionDoubleMod(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for AspirePirPIRShardingFunctionDoubleMod(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_249E06C70);
}

uint64_t sub_249E06C70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + *(int *)(a3 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48);
  return v6(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for AspirePirPIRShardingFunctionDoubleMod(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_249E06CF4);
}

uint64_t sub_249E06CF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + *(int *)(a4 + 20);
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
  return v7(v5, a2, a2, v6);
}

uint64_t type metadata completion function for AspirePirPIRShardingFunctionDoubleMod()
{
  return type metadata completion function for AspirePirPIRShardingFunctionDoubleMod();
}

{
  uint64_t result;
  unint64_t v1;

  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AspirePirEncryptedIndices(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a1;
    a1[1] = a2[1];
    uint64_t v6 = *(int *)(a3 + 24);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for UnknownStorage();
    uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t destroy for AspirePirEncryptedIndices(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

void *initializeWithCopy for AspirePirEncryptedIndices(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

void *assignWithCopy for AspirePirEncryptedIndices(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

void *assignWithTake for AspirePirEncryptedIndices(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for AspirePirEncryptedIndices(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_249E070B8);
}

uint64_t sub_249E070B8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for AspirePirEncryptedIndices(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_249E0717C);
}

void *sub_249E0717C(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 24);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for AspirePirEncryptedIndices()
{
  return type metadata completion function for AMDPbHEConfigsReply();
}

uint64_t *initializeBufferWithCopyOfBuffer for AspirePirSerializedKeywordDbRow(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    outlined copy of Data._Representation(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = a2[2];
    unint64_t v10 = a2[3];
    outlined copy of Data._Representation(v9, v10);
    a1[2] = v9;
    a1[3] = v10;
    uint64_t v11 = *(int *)(a3 + 24);
    uint64_t v12 = (char *)a1 + v11;
    uint64_t v13 = (char *)a2 + v11;
    uint64_t v14 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
    uint64_t v15 = *(int *)(a3 + 28);
    uint64_t v16 = (uint64_t *)((char *)a1 + v15);
    uint64_t v17 = (uint64_t *)((char *)a2 + v15);
    uint64_t v18 = v17[1];
    void *v16 = *v17;
    v16[1] = v18;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for AspirePirSerializedKeywordDbRow(uint64_t a1, uint64_t a2)
{
  outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
  outlined consume of Data._Representation(*(void *)(a1 + 16), *(void *)(a1 + 24));
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  return swift_bridgeObjectRelease();
}

uint64_t *initializeWithCopy for AspirePirSerializedKeywordDbRow(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  outlined copy of Data._Representation(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  outlined copy of Data._Representation(v8, v9);
  a1[2] = v8;
  a1[3] = v9;
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
  uint64_t v14 = *(int *)(a3 + 28);
  uint64_t v15 = (uint64_t *)((char *)a1 + v14);
  uint64_t v16 = (uint64_t *)((char *)a2 + v14);
  uint64_t v17 = v16[1];
  *uint64_t v15 = *v16;
  v15[1] = v17;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *assignWithCopy for AspirePirSerializedKeywordDbRow(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  outlined copy of Data._Representation(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  outlined consume of Data._Representation(v8, v9);
  uint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  outlined copy of Data._Representation(v10, v11);
  uint64_t v12 = a1[2];
  unint64_t v13 = a1[3];
  a1[2] = v10;
  a1[3] = v11;
  outlined consume of Data._Representation(v12, v13);
  uint64_t v14 = *(int *)(a3 + 24);
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 24))(v15, v16, v17);
  uint64_t v18 = *(int *)(a3 + 28);
  uint64_t v19 = (uint64_t *)((char *)a1 + v18);
  uint64_t v20 = (uint64_t *)((char *)a2 + v18);
  void *v19 = *v20;
  v19[1] = v20[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *initializeWithTake for AspirePirSerializedKeywordDbRow(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = (char *)a1 + v7;
  unint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 28)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 28));
  return a1;
}

uint64_t *assignWithTake for AspirePirSerializedKeywordDbRow(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  outlined consume of Data._Representation(v6, v7);
  uint64_t v8 = a1[2];
  unint64_t v9 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  outlined consume of Data._Representation(v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  unint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 40))(v11, v12, v13);
  uint64_t v14 = *(int *)(a3 + 28);
  uint64_t v15 = (uint64_t *)((char *)a1 + v14);
  uint64_t v16 = (uint64_t *)((char *)a2 + v14);
  uint64_t v18 = *v16;
  uint64_t v17 = v16[1];
  *uint64_t v15 = v18;
  v15[1] = v17;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AspirePirSerializedKeywordDbRow(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_249E0770C);
}

uint64_t sub_249E0770C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 24);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    unint64_t v12 = *(void *)(a1 + *(int *)(a3 + 28) + 8);
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    int v13 = v12 - 1;
    if (v13 < 0) {
      int v13 = -1;
    }
    return (v13 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for AspirePirSerializedKeywordDbRow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_249E077F4);
}

uint64_t sub_249E077F4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + *(int *)(a4 + 24);
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 28) + 8) = a2;
  }
  return result;
}

uint64_t type metadata completion function for AspirePirSerializedKeywordDbRow()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AspirePirSerializedKeywordDb(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_249E0796C);
}

uint64_t sub_249E0796C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for AspirePirSerializedKeywordDb(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_249E07A30);
}

void *sub_249E07A30(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for AspirePirSerializedKeywordDb()
{
  return type metadata completion function for AspirePirPIRShardingFunctionDoubleMod();
}

uint64_t getEnumTagSinglePayload for AspirePirPirPreprocessDbArgs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_249E07B8C);
}

uint64_t __swift_get_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for AspirePirPirPreprocessDbArgs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_249E07C64);
}

uint64_t __swift_store_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t destroy for AspirePirPirPreprocessDbArgs.OneOf_Sharding(uint64_t a1)
{
  return outlined consume of AspirePirPirPreprocessDbArgs.OneOf_Sharding(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for AspirePirPirPreprocessDbArgs.OneOf_Sharding(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of AspirePirPirPreprocessDbArgs.OneOf_Sharding(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for AspirePirPirPreprocessDbArgs.OneOf_Sharding(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of AspirePirPirPreprocessDbArgs.OneOf_Sharding(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of AspirePirPirPreprocessDbArgs.OneOf_Sharding(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for AspirePirPirPreprocessDbArgs.OneOf_Sharding(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of AspirePirPirPreprocessDbArgs.OneOf_Sharding(v4, v5, v6);
  return a1;
}

uint64_t destructiveInjectEnumTag for AspirePirPirPreprocessDbArgs.OneOf_Sharding(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for AspirePirPirPreprocessDbArgs.OneOf_Sharding()
{
  return &type metadata for AspirePirPirPreprocessDbArgs.OneOf_Sharding;
}

uint64_t *initializeBufferWithCopyOfBuffer for AspirePirPirPreprocessDbCommand(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command(0);
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        *a1 = *a2;
        uint64_t v11 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbCommand.Index(0) + 24);
        unint64_t v12 = (char *)a1 + v11;
        int v13 = (char *)a2 + v11;
        uint64_t v14 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
      }
      else
      {
        uint64_t v15 = type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config(0);
        uint64_t v16 = *(void *)(v15 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v16 + 48))(a2, 1, v15))
        {
          uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config?);
          memcpy(a1, a2, *(void *)(*(void *)(v17 - 8) + 64));
        }
        else
        {
          int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
          *a1 = *a2;
          if (EnumCaseMultiPayload == 1)
          {
            uint64_t v59 = v16;
            *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
            *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
            uint64_t v19 = type metadata accessor for AspirePirBatchKeywordPirConfig(0);
            uint64_t v20 = *(int *)(v19 + 36);
            uint64_t v21 = (char *)a1 + v20;
            uint64_t v22 = (char *)a2 + v20;
            uint64_t v23 = type metadata accessor for UnknownStorage();
            uint64_t v56 = *(void (**)(char *, char *))(*(void *)(v23 - 8) + 16);
            uint64_t v57 = v23;
            v56(v21, v22);
            uint64_t v58 = v19;
            uint64_t v24 = *(int *)(v19 + 40);
            int v25 = (_OWORD *)((char *)a1 + v24);
            uint64_t v26 = (_OWORD *)((char *)a2 + v24);
            uint64_t v27 = type metadata accessor for AspirePirCuckooTableConfig(0);
            uint64_t v28 = *(void *)(v27 - 8);
            if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
            {
              uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
              memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
            }
            else
            {
              long long v34 = v26[1];
              *int v25 = *v26;
              v25[1] = v34;
              *((void *)v25 + 4) = *((void *)v26 + 4);
              *((_WORD *)v25 + 20) = *((_WORD *)v26 + 20);
              ((void (*)(char *, char *, uint64_t))v56)((char *)v25 + *(int *)(v27 + 44), (char *)v26 + *(int *)(v27 + 44), v57);
              (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
            }
            uint64_t v16 = v59;
            uint64_t v35 = *(int *)(v58 + 44);
            int v36 = (char *)a1 + v35;
            int v37 = (char *)a2 + v35;
            *(void *)int v36 = *(void *)v37;
            v36[8] = v37[8];
          }
          else
          {
            *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
            *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
            *((_WORD *)a1 + 20) = *((_WORD *)a2 + 20);
            uint64_t v30 = *(int *)(type metadata accessor for AspirePirCuckooTableConfig(0) + 44);
            uint64_t v31 = (char *)a1 + v30;
            unint64_t v32 = (char *)a2 + v30;
            uint64_t v33 = type metadata accessor for UnknownStorage();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v33 - 8) + 16))(v31, v32, v33);
          }
          swift_storeEnumTagMultiPayload();
          (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v16 + 56))(a1, 0, 1, v15);
        }
        uint64_t v38 = (int *)type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword(0);
        uint64_t v39 = v38[5];
        uint64_t v40 = (char *)a1 + v39;
        uint64_t v41 = (char *)a2 + v39;
        uint64_t v42 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v42 - 8) + 16))(v40, v41, v42);
        uint64_t v43 = v38[6];
        uint64_t v44 = (uint64_t *)((char *)a1 + v43);
        uint64_t v45 = (uint64_t *)((char *)a2 + v43);
        uint64_t v46 = v45[1];
        void *v44 = *v45;
        v44[1] = v46;
        uint64_t v47 = v38[7];
        uint64_t v48 = (uint64_t *)((char *)a1 + v47);
        uint64_t v49 = (uint64_t *)((char *)a2 + v47);
        uint64_t v50 = v49[1];
        *uint64_t v48 = *v49;
        v48[1] = v50;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    uint64_t v51 = *(int *)(a3 + 20);
    uint64_t v52 = (char *)a1 + v51;
    uint64_t v53 = (char *)a2 + v51;
    uint64_t v54 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v54 - 8) + 16))(v52, v53, v54);
  }
  return a1;
}

uint64_t destroy for AspirePirPirPreprocessDbCommand(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, 1, v4))
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v5 = a1 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbCommand.Index(0) + 24);
      uint64_t v6 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
    }
    else
    {
      uint64_t v7 = type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(a1, 1, v7))
      {
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          uint64_t v8 = type metadata accessor for AspirePirBatchKeywordPirConfig(0);
          uint64_t v9 = a1 + *(int *)(v8 + 36);
          uint64_t v10 = type metadata accessor for UnknownStorage();
          uint64_t v11 = *(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8);
          v11(v9, v10);
          uint64_t v12 = a1 + *(int *)(v8 + 40);
          uint64_t v13 = type metadata accessor for AspirePirCuckooTableConfig(0);
          if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v12, 1, v13)) {
            v11(v12 + *(int *)(v13 + 44), v10);
          }
        }
        else
        {
          uint64_t v14 = a1 + *(int *)(type metadata accessor for AspirePirCuckooTableConfig(0) + 44);
          uint64_t v15 = type metadata accessor for UnknownStorage();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v14, v15);
        }
      }
      uint64_t v16 = a1 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword(0) + 20);
      uint64_t v17 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(v16, v17);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  uint64_t v18 = a1 + *(int *)(a2 + 20);
  uint64_t v19 = type metadata accessor for UnknownStorage();
  uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8);
  return v20(v18, v19);
}

void *initializeWithCopy for AspirePirPirPreprocessDbCommand(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      uint64_t v9 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbCommand.Index(0) + 24);
      uint64_t v10 = (char *)a1 + v9;
      uint64_t v11 = (char *)a2 + v9;
      uint64_t v12 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    }
    else
    {
      uint64_t v13 = type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config(0);
      uint64_t v14 = *(void *)(v13 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v14 + 48))(a2, 1, v13))
      {
        uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config?);
        memcpy(a1, a2, *(void *)(*(void *)(v15 - 8) + 64));
      }
      else
      {
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        *a1 = *a2;
        if (EnumCaseMultiPayload == 1)
        {
          uint64_t v57 = v14;
          *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
          *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
          uint64_t v17 = type metadata accessor for AspirePirBatchKeywordPirConfig(0);
          uint64_t v18 = *(int *)(v17 + 36);
          uint64_t v19 = (char *)a1 + v18;
          uint64_t v20 = (char *)a2 + v18;
          uint64_t v21 = type metadata accessor for UnknownStorage();
          uint64_t v54 = *(void (**)(char *, char *))(*(void *)(v21 - 8) + 16);
          uint64_t v55 = v21;
          v54(v19, v20);
          uint64_t v56 = v17;
          uint64_t v22 = *(int *)(v17 + 40);
          uint64_t v23 = (_OWORD *)((char *)a1 + v22);
          uint64_t v24 = (_OWORD *)((char *)a2 + v22);
          uint64_t v25 = type metadata accessor for AspirePirCuckooTableConfig(0);
          uint64_t v26 = *(void *)(v25 - 8);
          if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
          {
            uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
            memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64));
          }
          else
          {
            long long v32 = v24[1];
            *uint64_t v23 = *v24;
            v23[1] = v32;
            *((void *)v23 + 4) = *((void *)v24 + 4);
            *((_WORD *)v23 + 20) = *((_WORD *)v24 + 20);
            ((void (*)(char *, char *, uint64_t))v54)((char *)v23 + *(int *)(v25 + 44), (char *)v24 + *(int *)(v25 + 44), v55);
            (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
          }
          uint64_t v14 = v57;
          uint64_t v33 = *(int *)(v56 + 44);
          long long v34 = (char *)a1 + v33;
          uint64_t v35 = (char *)a2 + v33;
          *(void *)long long v34 = *(void *)v35;
          v34[8] = v35[8];
        }
        else
        {
          *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
          *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
          *((_WORD *)a1 + 20) = *((_WORD *)a2 + 20);
          uint64_t v28 = *(int *)(type metadata accessor for AspirePirCuckooTableConfig(0) + 44);
          uint64_t v29 = (char *)a1 + v28;
          uint64_t v30 = (char *)a2 + v28;
          uint64_t v31 = type metadata accessor for UnknownStorage();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 16))(v29, v30, v31);
        }
        swift_storeEnumTagMultiPayload();
        (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(a1, 0, 1, v13);
      }
      int v36 = (int *)type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword(0);
      uint64_t v37 = v36[5];
      uint64_t v38 = (char *)a1 + v37;
      uint64_t v39 = (char *)a2 + v37;
      uint64_t v40 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v40 - 8) + 16))(v38, v39, v40);
      uint64_t v41 = v36[6];
      uint64_t v42 = (void *)((char *)a1 + v41);
      uint64_t v43 = (void *)((char *)a2 + v41);
      uint64_t v44 = v43[1];
      void *v42 = *v43;
      v42[1] = v44;
      uint64_t v45 = v36[7];
      uint64_t v46 = (void *)((char *)a1 + v45);
      uint64_t v47 = (void *)((char *)a2 + v45);
      uint64_t v48 = v47[1];
      *uint64_t v46 = *v47;
      v46[1] = v48;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v49 = *(int *)(a3 + 20);
  uint64_t v50 = (char *)a1 + v49;
  uint64_t v51 = (char *)a2 + v49;
  uint64_t v52 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v52 - 8) + 16))(v50, v51, v52);
  return a1;
}

_DWORD *assignWithCopy for AspirePirPirPreprocessDbCommand(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        *a1 = *a2;
        a1[1] = a2[1];
        uint64_t v11 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbCommand.Index(0) + 24);
        uint64_t v12 = (char *)a1 + v11;
        uint64_t v13 = (char *)a2 + v11;
        uint64_t v14 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
      }
      else
      {
        uint64_t v20 = type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config(0);
        uint64_t v21 = *(void *)(v20 - 8);
        if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v21 + 48))(a2, 1, v20))
        {
          uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config?);
          memcpy(a1, a2, *(void *)(*(void *)(v22 - 8) + 64));
        }
        else
        {
          int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
          *(void *)a1 = *(void *)a2;
          if (EnumCaseMultiPayload == 1)
          {
            uint64_t v98 = v21;
            *((void *)a1 + 1) = *((void *)a2 + 1);
            *((void *)a1 + 2) = *((void *)a2 + 2);
            *((void *)a1 + 3) = *((void *)a2 + 3);
            *((void *)a1 + 4) = *((void *)a2 + 4);
            uint64_t v27 = type metadata accessor for AspirePirBatchKeywordPirConfig(0);
            uint64_t v28 = *(int *)(v27 + 36);
            uint64_t v29 = (char *)a1 + v28;
            uint64_t v30 = (char *)a2 + v28;
            uint64_t v31 = type metadata accessor for UnknownStorage();
            uint64_t v93 = *(void (**)(char *, char *))(*(void *)(v31 - 8) + 16);
            uint64_t v94 = v31;
            v93(v29, v30);
            uint64_t v96 = v27;
            uint64_t v32 = *(int *)(v27 + 40);
            uint64_t v33 = (void *)((char *)a1 + v32);
            long long v34 = (void *)((char *)a2 + v32);
            uint64_t v35 = type metadata accessor for AspirePirCuckooTableConfig(0);
            uint64_t v36 = *(void *)(v35 - 8);
            if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
            {
              uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
              memcpy(v33, v34, *(void *)(*(void *)(v37 - 8) + 64));
            }
            else
            {
              void *v33 = *v34;
              v33[1] = v34[1];
              v33[2] = v34[2];
              v33[3] = v34[3];
              v33[4] = v34[4];
              *((unsigned char *)v33 + 40) = *((unsigned char *)v34 + 40);
              *((unsigned char *)v33 + 41) = *((unsigned char *)v34 + 41);
              ((void (*)(char *, char *, uint64_t))v93)((char *)v33 + *(int *)(v35 + 44), (char *)v34 + *(int *)(v35 + 44), v94);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
            }
            uint64_t v21 = v98;
            uint64_t v54 = *(int *)(v96 + 44);
            uint64_t v55 = (char *)a1 + v54;
            uint64_t v56 = (char *)a2 + v54;
            uint64_t v57 = *(void *)v56;
            v55[8] = v56[8];
            *(void *)uint64_t v55 = v57;
          }
          else
          {
            *((void *)a1 + 1) = *((void *)a2 + 1);
            *((void *)a1 + 2) = *((void *)a2 + 2);
            *((void *)a1 + 3) = *((void *)a2 + 3);
            *((void *)a1 + 4) = *((void *)a2 + 4);
            *((unsigned char *)a1 + 40) = *((unsigned char *)a2 + 40);
            *((unsigned char *)a1 + 41) = *((unsigned char *)a2 + 41);
            uint64_t v38 = *(int *)(type metadata accessor for AspirePirCuckooTableConfig(0) + 44);
            uint64_t v39 = (char *)a1 + v38;
            uint64_t v40 = (char *)a2 + v38;
            uint64_t v41 = type metadata accessor for UnknownStorage();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v41 - 8) + 16))(v39, v40, v41);
          }
          swift_storeEnumTagMultiPayload();
          (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v21 + 56))(a1, 0, 1, v20);
        }
        uint64_t v58 = (int *)type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword(0);
        uint64_t v59 = v58[5];
        int v60 = (char *)a1 + v59;
        char v61 = (char *)a2 + v59;
        uint64_t v62 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v62 - 8) + 16))(v60, v61, v62);
        uint64_t v63 = v58[6];
        uint64_t v64 = (void *)((char *)a1 + v63);
        uint64_t v65 = (void *)((char *)a2 + v63);
        void *v64 = *v65;
        v64[1] = v65[1];
        uint64_t v66 = v58[7];
        uint64_t v67 = (void *)((char *)a1 + v66);
        uint64_t v68 = (void *)((char *)a2 + v66);
        *uint64_t v67 = *v68;
        v67[1] = v68[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_27;
    }
LABEL_7:
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
    memcpy(a1, a2, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_27;
  }
  if (v10)
  {
    _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)a1, type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command);
    goto LABEL_7;
  }
  if (a1 != a2)
  {
    _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)a1, type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      uint64_t v16 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbCommand.Index(0) + 24);
      uint64_t v17 = (char *)a1 + v16;
      uint64_t v18 = (char *)a2 + v16;
      uint64_t v19 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      uint64_t v23 = type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config(0);
      uint64_t v24 = *(void *)(v23 - 8);
      if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v24 + 48))(a2, 1, v23))
      {
        uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config?);
        memcpy(a1, a2, *(void *)(*(void *)(v25 - 8) + 64));
      }
      else
      {
        int v42 = swift_getEnumCaseMultiPayload();
        *(void *)a1 = *(void *)a2;
        if (v42 == 1)
        {
          *((void *)a1 + 1) = *((void *)a2 + 1);
          *((void *)a1 + 2) = *((void *)a2 + 2);
          *((void *)a1 + 3) = *((void *)a2 + 3);
          *((void *)a1 + 4) = *((void *)a2 + 4);
          uint64_t v43 = type metadata accessor for AspirePirBatchKeywordPirConfig(0);
          uint64_t v44 = *(int *)(v43 + 36);
          uint64_t v45 = (char *)a1 + v44;
          uint64_t v46 = (char *)a2 + v44;
          uint64_t v47 = type metadata accessor for UnknownStorage();
          uint64_t v95 = *(void (**)(char *, char *))(*(void *)(v47 - 8) + 16);
          uint64_t v97 = v47;
          v95(v45, v46);
          uint64_t v99 = v43;
          uint64_t v48 = *(int *)(v43 + 40);
          uint64_t v49 = (void *)((char *)a1 + v48);
          uint64_t v50 = (void *)((char *)a2 + v48);
          uint64_t v51 = type metadata accessor for AspirePirCuckooTableConfig(0);
          uint64_t v52 = *(void *)(v51 - 8);
          if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v52 + 48))(v50, 1, v51))
          {
            uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
            memcpy(v49, v50, *(void *)(*(void *)(v53 - 8) + 64));
          }
          else
          {
            *uint64_t v49 = *v50;
            v49[1] = v50[1];
            v49[2] = v50[2];
            v49[3] = v50[3];
            v49[4] = v50[4];
            *((unsigned char *)v49 + 40) = *((unsigned char *)v50 + 40);
            *((unsigned char *)v49 + 41) = *((unsigned char *)v50 + 41);
            ((void (*)(char *, char *, uint64_t))v95)((char *)v49 + *(int *)(v51 + 44), (char *)v50 + *(int *)(v51 + 44), v97);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v52 + 56))(v49, 0, 1, v51);
          }
          uint64_t v78 = *(int *)(v99 + 44);
          uint64_t v79 = (char *)a1 + v78;
          uint64_t v80 = (char *)a2 + v78;
          uint64_t v81 = *(void *)v80;
          v79[8] = v80[8];
          *(void *)uint64_t v79 = v81;
        }
        else
        {
          *((void *)a1 + 1) = *((void *)a2 + 1);
          *((void *)a1 + 2) = *((void *)a2 + 2);
          *((void *)a1 + 3) = *((void *)a2 + 3);
          *((void *)a1 + 4) = *((void *)a2 + 4);
          *((unsigned char *)a1 + 40) = *((unsigned char *)a2 + 40);
          *((unsigned char *)a1 + 41) = *((unsigned char *)a2 + 41);
          uint64_t v74 = *(int *)(type metadata accessor for AspirePirCuckooTableConfig(0) + 44);
          uint64_t v75 = (char *)a1 + v74;
          uint64_t v76 = (char *)a2 + v74;
          uint64_t v77 = type metadata accessor for UnknownStorage();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v77 - 8) + 16))(v75, v76, v77);
        }
        swift_storeEnumTagMultiPayload();
        (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v24 + 56))(a1, 0, 1, v23);
      }
      uint64_t v82 = (int *)type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword(0);
      uint64_t v83 = v82[5];
      char v84 = (char *)a1 + v83;
      uint64_t v85 = (char *)a2 + v83;
      uint64_t v86 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v86 - 8) + 16))(v84, v85, v86);
      uint64_t v87 = v82[6];
      uint64_t v88 = (void *)((char *)a1 + v87);
      uint64_t v89 = (void *)((char *)a2 + v87);
      *uint64_t v88 = *v89;
      v88[1] = v89[1];
      uint64_t v90 = v82[7];
      uint64_t v91 = (void *)((char *)a1 + v90);
      uint64_t v92 = (void *)((char *)a2 + v90);
      void *v91 = *v92;
      v91[1] = v92[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
  }
LABEL_27:
  uint64_t v69 = *(int *)(a3 + 20);
  uint64_t v70 = (char *)a1 + v69;
  uint64_t v71 = (char *)a2 + v69;
  uint64_t v72 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v72 - 8) + 24))(v70, v71, v72);
  return a1;
}

void *initializeWithTake for AspirePirPirPreprocessDbCommand(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      uint64_t v9 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbCommand.Index(0) + 24);
      int v10 = (char *)a1 + v9;
      uint64_t v11 = (char *)a2 + v9;
      uint64_t v12 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v10, v11, v12);
    }
    else
    {
      uint64_t v13 = type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config(0);
      uint64_t v14 = *(void *)(v13 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v14 + 48))(a2, 1, v13))
      {
        uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config?);
        memcpy(a1, a2, *(void *)(*(void *)(v15 - 8) + 64));
      }
      else
      {
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        *a1 = *a2;
        if (EnumCaseMultiPayload == 1)
        {
          uint64_t v49 = v14;
          *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
          *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
          uint64_t v17 = type metadata accessor for AspirePirBatchKeywordPirConfig(0);
          uint64_t v18 = *(int *)(v17 + 36);
          uint64_t v19 = (char *)a1 + v18;
          uint64_t v20 = (char *)a2 + v18;
          uint64_t v21 = type metadata accessor for UnknownStorage();
          uint64_t v46 = *(void (**)(char *, char *))(*(void *)(v21 - 8) + 32);
          uint64_t v47 = v21;
          v46(v19, v20);
          uint64_t v48 = v17;
          uint64_t v22 = *(int *)(v17 + 40);
          uint64_t v23 = (_OWORD *)((char *)a1 + v22);
          uint64_t v24 = (_OWORD *)((char *)a2 + v22);
          uint64_t v25 = type metadata accessor for AspirePirCuckooTableConfig(0);
          uint64_t v26 = *(void *)(v25 - 8);
          if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
          {
            uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
            memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64));
          }
          else
          {
            long long v32 = v24[1];
            *uint64_t v23 = *v24;
            v23[1] = v32;
            *((void *)v23 + 4) = *((void *)v24 + 4);
            *((_WORD *)v23 + 20) = *((_WORD *)v24 + 20);
            ((void (*)(char *, char *, uint64_t))v46)((char *)v23 + *(int *)(v25 + 44), (char *)v24 + *(int *)(v25 + 44), v47);
            (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
          }
          uint64_t v14 = v49;
          uint64_t v33 = *(int *)(v48 + 44);
          long long v34 = (char *)a1 + v33;
          uint64_t v35 = (char *)a2 + v33;
          *(void *)long long v34 = *(void *)v35;
          v34[8] = v35[8];
        }
        else
        {
          *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
          *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
          *((_WORD *)a1 + 20) = *((_WORD *)a2 + 20);
          uint64_t v28 = *(int *)(type metadata accessor for AspirePirCuckooTableConfig(0) + 44);
          uint64_t v29 = (char *)a1 + v28;
          uint64_t v30 = (char *)a2 + v28;
          uint64_t v31 = type metadata accessor for UnknownStorage();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 32))(v29, v30, v31);
        }
        swift_storeEnumTagMultiPayload();
        (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(a1, 0, 1, v13);
      }
      uint64_t v36 = (int *)type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword(0);
      uint64_t v37 = v36[5];
      uint64_t v38 = (char *)a1 + v37;
      uint64_t v39 = (char *)a2 + v37;
      uint64_t v40 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v40 - 8) + 32))(v38, v39, v40);
      *(_OWORD *)((char *)a1 + v36[6]) = *(_OWORD *)((char *)a2 + v36[6]);
      *(_OWORD *)((char *)a1 + v36[7]) = *(_OWORD *)((char *)a2 + v36[7]);
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v41 = *(int *)(a3 + 20);
  int v42 = (char *)a1 + v41;
  uint64_t v43 = (char *)a2 + v41;
  uint64_t v44 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v44 - 8) + 32))(v42, v43, v44);
  return a1;
}

void *assignWithTake for AspirePirPirPreprocessDbCommand(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        *a1 = *a2;
        uint64_t v11 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbCommand.Index(0) + 24);
        uint64_t v12 = (char *)a1 + v11;
        uint64_t v13 = (char *)a2 + v11;
        uint64_t v14 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
      }
      else
      {
        uint64_t v20 = type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config(0);
        uint64_t v21 = *(void *)(v20 - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v21 + 48))(a2, 1, v20))
        {
          uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config?);
          memcpy(a1, a2, *(void *)(*(void *)(v22 - 8) + 64));
        }
        else
        {
          int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
          *a1 = *a2;
          if (EnumCaseMultiPayload == 1)
          {
            uint64_t v86 = v21;
            *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
            *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
            uint64_t v27 = type metadata accessor for AspirePirBatchKeywordPirConfig(0);
            uint64_t v28 = *(int *)(v27 + 36);
            uint64_t v29 = (char *)a1 + v28;
            uint64_t v30 = (char *)a2 + v28;
            uint64_t v31 = type metadata accessor for UnknownStorage();
            uint64_t v81 = *(void (**)(char *, char *))(*(void *)(v31 - 8) + 32);
            uint64_t v82 = v31;
            v81(v29, v30);
            uint64_t v84 = v27;
            uint64_t v32 = *(int *)(v27 + 40);
            uint64_t v33 = (_OWORD *)((char *)a1 + v32);
            long long v34 = (_OWORD *)((char *)a2 + v32);
            uint64_t v35 = type metadata accessor for AspirePirCuckooTableConfig(0);
            uint64_t v36 = *(void *)(v35 - 8);
            if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
            {
              uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
              memcpy(v33, v34, *(void *)(*(void *)(v37 - 8) + 64));
            }
            else
            {
              long long v54 = v34[1];
              _OWORD *v33 = *v34;
              v33[1] = v54;
              *((void *)v33 + 4) = *((void *)v34 + 4);
              *((_WORD *)v33 + 20) = *((_WORD *)v34 + 20);
              ((void (*)(char *, char *, uint64_t))v81)((char *)v33 + *(int *)(v35 + 44), (char *)v34 + *(int *)(v35 + 44), v82);
              (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
            }
            uint64_t v21 = v86;
            uint64_t v55 = *(int *)(v84 + 44);
            uint64_t v56 = (char *)a1 + v55;
            uint64_t v57 = (char *)a2 + v55;
            *(void *)uint64_t v56 = *(void *)v57;
            v56[8] = v57[8];
          }
          else
          {
            *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
            *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
            *((_WORD *)a1 + 20) = *((_WORD *)a2 + 20);
            uint64_t v38 = *(int *)(type metadata accessor for AspirePirCuckooTableConfig(0) + 44);
            uint64_t v39 = (char *)a1 + v38;
            uint64_t v40 = (char *)a2 + v38;
            uint64_t v41 = type metadata accessor for UnknownStorage();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v41 - 8) + 32))(v39, v40, v41);
          }
          swift_storeEnumTagMultiPayload();
          (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(a1, 0, 1, v20);
        }
        uint64_t v58 = (int *)type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword(0);
        uint64_t v59 = v58[5];
        int v60 = (char *)a1 + v59;
        char v61 = (char *)a2 + v59;
        uint64_t v62 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v62 - 8) + 32))(v60, v61, v62);
        *(_OWORD *)((char *)a1 + v58[6]) = *(_OWORD *)((char *)a2 + v58[6]);
        *(_OWORD *)((char *)a1 + v58[7]) = *(_OWORD *)((char *)a2 + v58[7]);
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_27;
    }
LABEL_7:
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
    memcpy(a1, a2, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_27;
  }
  if (v10)
  {
    _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)a1, type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command);
    goto LABEL_7;
  }
  if (a1 != a2)
  {
    _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)a1, type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      uint64_t v16 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbCommand.Index(0) + 24);
      uint64_t v17 = (char *)a1 + v16;
      uint64_t v18 = (char *)a2 + v16;
      uint64_t v19 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 32))(v17, v18, v19);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      uint64_t v23 = type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config(0);
      uint64_t v24 = *(void *)(v23 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v24 + 48))(a2, 1, v23))
      {
        uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config?);
        memcpy(a1, a2, *(void *)(*(void *)(v25 - 8) + 64));
      }
      else
      {
        int v42 = swift_getEnumCaseMultiPayload();
        *a1 = *a2;
        if (v42 == 1)
        {
          *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
          *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
          uint64_t v43 = type metadata accessor for AspirePirBatchKeywordPirConfig(0);
          uint64_t v44 = *(int *)(v43 + 36);
          uint64_t v45 = (char *)a1 + v44;
          uint64_t v46 = (char *)a2 + v44;
          uint64_t v47 = type metadata accessor for UnknownStorage();
          uint64_t v83 = *(void (**)(char *, char *))(*(void *)(v47 - 8) + 32);
          uint64_t v85 = v47;
          v83(v45, v46);
          uint64_t v87 = v43;
          uint64_t v48 = *(int *)(v43 + 40);
          uint64_t v49 = (_OWORD *)((char *)a1 + v48);
          uint64_t v50 = (_OWORD *)((char *)a2 + v48);
          uint64_t v51 = type metadata accessor for AspirePirCuckooTableConfig(0);
          uint64_t v52 = *(void *)(v51 - 8);
          if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v52 + 48))(v50, 1, v51))
          {
            uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
            memcpy(v49, v50, *(void *)(*(void *)(v53 - 8) + 64));
          }
          else
          {
            long long v72 = v50[1];
            *uint64_t v49 = *v50;
            v49[1] = v72;
            *((void *)v49 + 4) = *((void *)v50 + 4);
            *((_WORD *)v49 + 20) = *((_WORD *)v50 + 20);
            ((void (*)(char *, char *, uint64_t))v83)((char *)v49 + *(int *)(v51 + 44), (char *)v50 + *(int *)(v51 + 44), v85);
            (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v52 + 56))(v49, 0, 1, v51);
          }
          uint64_t v73 = *(int *)(v87 + 44);
          uint64_t v74 = (char *)a1 + v73;
          uint64_t v75 = (char *)a2 + v73;
          *(void *)uint64_t v74 = *(void *)v75;
          v74[8] = v75[8];
        }
        else
        {
          *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
          *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
          *((_WORD *)a1 + 20) = *((_WORD *)a2 + 20);
          uint64_t v68 = *(int *)(type metadata accessor for AspirePirCuckooTableConfig(0) + 44);
          uint64_t v69 = (char *)a1 + v68;
          uint64_t v70 = (char *)a2 + v68;
          uint64_t v71 = type metadata accessor for UnknownStorage();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v71 - 8) + 32))(v69, v70, v71);
        }
        swift_storeEnumTagMultiPayload();
        (*(void (**)(void *, void, uint64_t, uint64_t))(v24 + 56))(a1, 0, 1, v23);
      }
      uint64_t v76 = (int *)type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword(0);
      uint64_t v77 = v76[5];
      uint64_t v78 = (char *)a1 + v77;
      uint64_t v79 = (char *)a2 + v77;
      uint64_t v80 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v80 - 8) + 32))(v78, v79, v80);
      *(_OWORD *)((char *)a1 + v76[6]) = *(_OWORD *)((char *)a2 + v76[6]);
      *(_OWORD *)((char *)a1 + v76[7]) = *(_OWORD *)((char *)a2 + v76[7]);
      swift_storeEnumTagMultiPayload();
    }
  }
LABEL_27:
  uint64_t v63 = *(int *)(a3 + 20);
  uint64_t v64 = (char *)a1 + v63;
  uint64_t v65 = (char *)a2 + v63;
  uint64_t v66 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v66 - 8) + 40))(v64, v65, v66);
  return a1;
}

uint64_t getEnumTagSinglePayload for AspirePirPirPreprocessDbCommand(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_249E0A544);
}

uint64_t sub_249E0A544(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_40Tm(a1, a2, a3, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
}

uint64_t storeEnumTagSinglePayload for AspirePirPirPreprocessDbCommand(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_249E0A564);
}

uint64_t sub_249E0A564(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_41Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
}

void type metadata completion function for AspirePirPirPreprocessDbCommand(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void type metadata completion function for AspirePirPIRShardingFunction(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, void (*a5)(uint64_t))
{
  type metadata accessor for AspirePirCuckooTableConfig?(319, a4, a5);
  if (v5 <= 0x3F)
  {
    type metadata accessor for UnknownStorage();
    if (v6 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for AspirePirPirPreprocessDbCommand.OneOf_Command(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      uint64_t v6 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbCommand.Index(0) + 24);
      uint64_t v7 = (char *)a1 + v6;
      uint64_t v8 = (char *)a2 + v6;
      uint64_t v9 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
    }
    else
    {
      uint64_t v11 = type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config(0);
      uint64_t v12 = *(void *)(v11 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v12 + 48))(a2, 1, v11))
      {
        uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config?);
        memcpy(a1, a2, *(void *)(*(void *)(v13 - 8) + 64));
      }
      else
      {
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        *a1 = *a2;
        if (EnumCaseMultiPayload == 1)
        {
          *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
          *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
          uint64_t v15 = type metadata accessor for AspirePirBatchKeywordPirConfig(0);
          uint64_t v16 = *(int *)(v15 + 36);
          uint64_t v17 = (char *)a1 + v16;
          uint64_t v18 = (char *)a2 + v16;
          uint64_t v19 = type metadata accessor for UnknownStorage();
          uint64_t v48 = *(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16);
          v48(v17, v18, v19);
          uint64_t v49 = v15;
          uint64_t v20 = *(int *)(v15 + 40);
          uint64_t v21 = (_OWORD *)((char *)a1 + v20);
          uint64_t v22 = (_OWORD *)((char *)a2 + v20);
          uint64_t v23 = type metadata accessor for AspirePirCuckooTableConfig(0);
          uint64_t v24 = *(void *)(v23 - 8);
          if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
          {
            uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
            memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
          }
          else
          {
            long long v30 = v22[1];
            *uint64_t v21 = *v22;
            v21[1] = v30;
            *((void *)v21 + 4) = *((void *)v22 + 4);
            *((_WORD *)v21 + 20) = *((_WORD *)v22 + 20);
            v48((char *)v21 + *(int *)(v23 + 44), (char *)v22 + *(int *)(v23 + 44), v19);
            (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
          }
          uint64_t v31 = *(int *)(v49 + 44);
          uint64_t v32 = (char *)a1 + v31;
          uint64_t v33 = (char *)a2 + v31;
          *(void *)uint64_t v32 = *(void *)v33;
          v32[8] = v33[8];
        }
        else
        {
          *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
          *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
          *((_WORD *)a1 + 20) = *((_WORD *)a2 + 20);
          uint64_t v26 = *(int *)(type metadata accessor for AspirePirCuckooTableConfig(0) + 44);
          uint64_t v27 = (char *)a1 + v26;
          uint64_t v28 = (char *)a2 + v26;
          uint64_t v29 = type metadata accessor for UnknownStorage();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 16))(v27, v28, v29);
        }
        swift_storeEnumTagMultiPayload();
        (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v12 + 56))(a1, 0, 1, v11);
      }
      long long v34 = (int *)type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword(0);
      uint64_t v35 = v34[5];
      uint64_t v36 = (char *)a1 + v35;
      uint64_t v37 = (char *)a2 + v35;
      uint64_t v38 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v38 - 8) + 16))(v36, v37, v38);
      uint64_t v39 = v34[6];
      uint64_t v40 = (uint64_t *)((char *)a1 + v39);
      uint64_t v41 = (uint64_t *)((char *)a2 + v39);
      uint64_t v42 = v41[1];
      *uint64_t v40 = *v41;
      v40[1] = v42;
      uint64_t v43 = v34[7];
      uint64_t v44 = (uint64_t *)((char *)a1 + v43);
      uint64_t v45 = (uint64_t *)((char *)a2 + v43);
      uint64_t v46 = v45[1];
      void *v44 = *v45;
      v44[1] = v46;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for AspirePirPirPreprocessDbCommand.OneOf_Command(uint64_t a1)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v2 = a1 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbCommand.Index(0) + 24);
    uint64_t v3 = type metadata accessor for UnknownStorage();
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
    return v4(v2, v3);
  }
  else
  {
    uint64_t v6 = type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(a1, 1, v6))
    {
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v7 = type metadata accessor for AspirePirBatchKeywordPirConfig(0);
        uint64_t v8 = a1 + *(int *)(v7 + 36);
        uint64_t v9 = type metadata accessor for UnknownStorage();
        uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8);
        v10(v8, v9);
        uint64_t v11 = a1 + *(int *)(v7 + 40);
        uint64_t v12 = type metadata accessor for AspirePirCuckooTableConfig(0);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48))(v11, 1, v12)) {
          v10(v11 + *(int *)(v12 + 44), v9);
        }
      }
      else
      {
        uint64_t v13 = a1 + *(int *)(type metadata accessor for AspirePirCuckooTableConfig(0) + 44);
        uint64_t v14 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(v13, v14);
      }
    }
    uint64_t v15 = a1 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword(0) + 20);
    uint64_t v16 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(v15, v16);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

void *initializeWithCopy for AspirePirPirPreprocessDbCommand.OneOf_Command(void *a1, void *a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *a1 = *a2;
    uint64_t v4 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbCommand.Index(0) + 24);
    int v5 = (char *)a1 + v4;
    uint64_t v6 = (char *)a2 + v4;
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
  }
  else
  {
    uint64_t v8 = type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config(0);
    uint64_t v9 = *(void *)(v8 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v9 + 48))(a2, 1, v8))
    {
      uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config?);
      memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    }
    else
    {
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      *a1 = *a2;
      if (EnumCaseMultiPayload == 1)
      {
        *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
        *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
        uint64_t v12 = type metadata accessor for AspirePirBatchKeywordPirConfig(0);
        uint64_t v13 = *(int *)(v12 + 36);
        uint64_t v14 = (char *)a1 + v13;
        uint64_t v15 = (char *)a2 + v13;
        uint64_t v16 = type metadata accessor for UnknownStorage();
        uint64_t v45 = *(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16);
        v45(v14, v15, v16);
        uint64_t v46 = v12;
        uint64_t v17 = *(int *)(v12 + 40);
        uint64_t v18 = (_OWORD *)((char *)a1 + v17);
        uint64_t v19 = (_OWORD *)((char *)a2 + v17);
        uint64_t v20 = type metadata accessor for AspirePirCuckooTableConfig(0);
        uint64_t v21 = *(void *)(v20 - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
        {
          uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
          memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
        }
        else
        {
          long long v27 = v19[1];
          *uint64_t v18 = *v19;
          v18[1] = v27;
          *((void *)v18 + 4) = *((void *)v19 + 4);
          *((_WORD *)v18 + 20) = *((_WORD *)v19 + 20);
          v45((char *)v18 + *(int *)(v20 + 44), (char *)v19 + *(int *)(v20 + 44), v16);
          (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
        }
        uint64_t v28 = *(int *)(v46 + 44);
        uint64_t v29 = (char *)a1 + v28;
        long long v30 = (char *)a2 + v28;
        *(void *)uint64_t v29 = *(void *)v30;
        v29[8] = v30[8];
      }
      else
      {
        *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
        *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
        *((_WORD *)a1 + 20) = *((_WORD *)a2 + 20);
        uint64_t v23 = *(int *)(type metadata accessor for AspirePirCuckooTableConfig(0) + 44);
        uint64_t v24 = (char *)a1 + v23;
        uint64_t v25 = (char *)a2 + v23;
        uint64_t v26 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 16))(v24, v25, v26);
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(a1, 0, 1, v8);
    }
    uint64_t v31 = (int *)type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword(0);
    uint64_t v32 = v31[5];
    uint64_t v33 = (char *)a1 + v32;
    long long v34 = (char *)a2 + v32;
    uint64_t v35 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 16))(v33, v34, v35);
    uint64_t v36 = v31[6];
    uint64_t v37 = (void *)((char *)a1 + v36);
    uint64_t v38 = (void *)((char *)a2 + v36);
    uint64_t v39 = v38[1];
    *uint64_t v37 = *v38;
    v37[1] = v39;
    uint64_t v40 = v31[7];
    uint64_t v41 = (void *)((char *)a1 + v40);
    uint64_t v42 = (void *)((char *)a2 + v40);
    uint64_t v43 = v42[1];
    void *v41 = *v42;
    v41[1] = v43;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_DWORD *assignWithCopy for AspirePirPirPreprocessDbCommand.OneOf_Command(_DWORD *a1, _DWORD *a2)
{
  if (a1 != a2)
  {
    _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)a1, type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      uint64_t v4 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbCommand.Index(0) + 24);
      int v5 = (char *)a1 + v4;
      uint64_t v6 = (char *)a2 + v4;
      uint64_t v7 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
    }
    else
    {
      uint64_t v8 = type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config(0);
      uint64_t v9 = *(void *)(v8 - 8);
      if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v9 + 48))(a2, 1, v8))
      {
        uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config?);
        memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
      }
      else
      {
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        *(void *)a1 = *(void *)a2;
        if (EnumCaseMultiPayload == 1)
        {
          *((void *)a1 + 1) = *((void *)a2 + 1);
          *((void *)a1 + 2) = *((void *)a2 + 2);
          *((void *)a1 + 3) = *((void *)a2 + 3);
          *((void *)a1 + 4) = *((void *)a2 + 4);
          uint64_t v12 = type metadata accessor for AspirePirBatchKeywordPirConfig(0);
          uint64_t v13 = *(int *)(v12 + 36);
          uint64_t v14 = (char *)a1 + v13;
          uint64_t v15 = (char *)a2 + v13;
          uint64_t v16 = type metadata accessor for UnknownStorage();
          uint64_t v43 = *(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16);
          v43(v14, v15, v16);
          uint64_t v44 = v12;
          uint64_t v17 = *(int *)(v12 + 40);
          uint64_t v18 = (void *)((char *)a1 + v17);
          uint64_t v19 = (void *)((char *)a2 + v17);
          uint64_t v20 = type metadata accessor for AspirePirCuckooTableConfig(0);
          uint64_t v21 = *(void *)(v20 - 8);
          if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
          {
            uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
            memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
          }
          else
          {
            *uint64_t v18 = *v19;
            v18[1] = v19[1];
            v18[2] = v19[2];
            v18[3] = v19[3];
            v18[4] = v19[4];
            *((unsigned char *)v18 + 40) = *((unsigned char *)v19 + 40);
            *((unsigned char *)v18 + 41) = *((unsigned char *)v19 + 41);
            v43((char *)v18 + *(int *)(v20 + 44), (char *)v19 + *(int *)(v20 + 44), v16);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
          }
          uint64_t v27 = *(int *)(v44 + 44);
          uint64_t v28 = (char *)a1 + v27;
          uint64_t v29 = (char *)a2 + v27;
          uint64_t v30 = *(void *)v29;
          v28[8] = v29[8];
          *(void *)uint64_t v28 = v30;
        }
        else
        {
          *((void *)a1 + 1) = *((void *)a2 + 1);
          *((void *)a1 + 2) = *((void *)a2 + 2);
          *((void *)a1 + 3) = *((void *)a2 + 3);
          *((void *)a1 + 4) = *((void *)a2 + 4);
          *((unsigned char *)a1 + 40) = *((unsigned char *)a2 + 40);
          *((unsigned char *)a1 + 41) = *((unsigned char *)a2 + 41);
          uint64_t v23 = *(int *)(type metadata accessor for AspirePirCuckooTableConfig(0) + 44);
          uint64_t v24 = (char *)a1 + v23;
          uint64_t v25 = (char *)a2 + v23;
          uint64_t v26 = type metadata accessor for UnknownStorage();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 16))(v24, v25, v26);
        }
        swift_storeEnumTagMultiPayload();
        (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v9 + 56))(a1, 0, 1, v8);
      }
      uint64_t v31 = (int *)type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword(0);
      uint64_t v32 = v31[5];
      uint64_t v33 = (char *)a1 + v32;
      long long v34 = (char *)a2 + v32;
      uint64_t v35 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 16))(v33, v34, v35);
      uint64_t v36 = v31[6];
      uint64_t v37 = (void *)((char *)a1 + v36);
      uint64_t v38 = (void *)((char *)a2 + v36);
      *uint64_t v37 = *v38;
      v37[1] = v38[1];
      uint64_t v39 = v31[7];
      uint64_t v40 = (void *)((char *)a1 + v39);
      uint64_t v41 = (void *)((char *)a2 + v39);
      *uint64_t v40 = *v41;
      v40[1] = v41[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *initializeWithTake for AspirePirPirPreprocessDbCommand.OneOf_Command(void *a1, void *a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *a1 = *a2;
    uint64_t v4 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbCommand.Index(0) + 24);
    int v5 = (char *)a1 + v4;
    uint64_t v6 = (char *)a2 + v4;
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  }
  else
  {
    uint64_t v8 = type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config(0);
    uint64_t v9 = *(void *)(v8 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v9 + 48))(a2, 1, v8))
    {
      uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config?);
      memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    }
    else
    {
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      *a1 = *a2;
      if (EnumCaseMultiPayload == 1)
      {
        *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
        *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
        uint64_t v12 = type metadata accessor for AspirePirBatchKeywordPirConfig(0);
        uint64_t v13 = *(int *)(v12 + 36);
        uint64_t v14 = (char *)a1 + v13;
        uint64_t v15 = (char *)a2 + v13;
        uint64_t v16 = type metadata accessor for UnknownStorage();
        uint64_t v37 = *(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32);
        v37(v14, v15, v16);
        uint64_t v38 = v12;
        uint64_t v17 = *(int *)(v12 + 40);
        uint64_t v18 = (_OWORD *)((char *)a1 + v17);
        uint64_t v19 = (_OWORD *)((char *)a2 + v17);
        uint64_t v20 = type metadata accessor for AspirePirCuckooTableConfig(0);
        uint64_t v21 = *(void *)(v20 - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
        {
          uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
          memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
        }
        else
        {
          long long v27 = v19[1];
          *uint64_t v18 = *v19;
          v18[1] = v27;
          *((void *)v18 + 4) = *((void *)v19 + 4);
          *((_WORD *)v18 + 20) = *((_WORD *)v19 + 20);
          v37((char *)v18 + *(int *)(v20 + 44), (char *)v19 + *(int *)(v20 + 44), v16);
          (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
        }
        uint64_t v28 = *(int *)(v38 + 44);
        uint64_t v29 = (char *)a1 + v28;
        uint64_t v30 = (char *)a2 + v28;
        *(void *)uint64_t v29 = *(void *)v30;
        v29[8] = v30[8];
      }
      else
      {
        *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
        *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
        *((_WORD *)a1 + 20) = *((_WORD *)a2 + 20);
        uint64_t v23 = *(int *)(type metadata accessor for AspirePirCuckooTableConfig(0) + 44);
        uint64_t v24 = (char *)a1 + v23;
        uint64_t v25 = (char *)a2 + v23;
        uint64_t v26 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 32))(v24, v25, v26);
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(a1, 0, 1, v8);
    }
    uint64_t v31 = (int *)type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword(0);
    uint64_t v32 = v31[5];
    uint64_t v33 = (char *)a1 + v32;
    long long v34 = (char *)a2 + v32;
    uint64_t v35 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 32))(v33, v34, v35);
    *(_OWORD *)((char *)a1 + v31[6]) = *(_OWORD *)((char *)a2 + v31[6]);
    *(_OWORD *)((char *)a1 + v31[7]) = *(_OWORD *)((char *)a2 + v31[7]);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *assignWithTake for AspirePirPirPreprocessDbCommand.OneOf_Command(void *a1, void *a2)
{
  if (a1 != a2)
  {
    _s8CipherML28AspireHeEncryptionParametersVWOhTm_2((uint64_t)a1, type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      uint64_t v4 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbCommand.Index(0) + 24);
      int v5 = (char *)a1 + v4;
      uint64_t v6 = (char *)a2 + v4;
      uint64_t v7 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
    }
    else
    {
      uint64_t v8 = type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config(0);
      uint64_t v9 = *(void *)(v8 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v9 + 48))(a2, 1, v8))
      {
        uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config?);
        memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
      }
      else
      {
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        *a1 = *a2;
        if (EnumCaseMultiPayload == 1)
        {
          *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
          *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
          uint64_t v12 = type metadata accessor for AspirePirBatchKeywordPirConfig(0);
          uint64_t v13 = *(int *)(v12 + 36);
          uint64_t v14 = (char *)a1 + v13;
          uint64_t v15 = (char *)a2 + v13;
          uint64_t v16 = type metadata accessor for UnknownStorage();
          uint64_t v37 = *(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32);
          v37(v14, v15, v16);
          uint64_t v38 = v12;
          uint64_t v17 = *(int *)(v12 + 40);
          uint64_t v18 = (_OWORD *)((char *)a1 + v17);
          uint64_t v19 = (_OWORD *)((char *)a2 + v17);
          uint64_t v20 = type metadata accessor for AspirePirCuckooTableConfig(0);
          uint64_t v21 = *(void *)(v20 - 8);
          if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
          {
            uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
            memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
          }
          else
          {
            long long v27 = v19[1];
            *uint64_t v18 = *v19;
            v18[1] = v27;
            *((void *)v18 + 4) = *((void *)v19 + 4);
            *((_WORD *)v18 + 20) = *((_WORD *)v19 + 20);
            v37((char *)v18 + *(int *)(v20 + 44), (char *)v19 + *(int *)(v20 + 44), v16);
            (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
          }
          uint64_t v28 = *(int *)(v38 + 44);
          uint64_t v29 = (char *)a1 + v28;
          uint64_t v30 = (char *)a2 + v28;
          *(void *)uint64_t v29 = *(void *)v30;
          v29[8] = v30[8];
        }
        else
        {
          *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
          *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
          *((_WORD *)a1 + 20) = *((_WORD *)a2 + 20);
          uint64_t v23 = *(int *)(type metadata accessor for AspirePirCuckooTableConfig(0) + 44);
          uint64_t v24 = (char *)a1 + v23;
          uint64_t v25 = (char *)a2 + v23;
          uint64_t v26 = type metadata accessor for UnknownStorage();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 32))(v24, v25, v26);
        }
        swift_storeEnumTagMultiPayload();
        (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(a1, 0, 1, v8);
      }
      uint64_t v31 = (int *)type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword(0);
      uint64_t v32 = v31[5];
      uint64_t v33 = (char *)a1 + v32;
      long long v34 = (char *)a2 + v32;
      uint64_t v35 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 32))(v33, v34, v35);
      *(_OWORD *)((char *)a1 + v31[6]) = *(_OWORD *)((char *)a2 + v31[6]);
      *(_OWORD *)((char *)a1 + v31[7]) = *(_OWORD *)((char *)a2 + v31[7]);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata completion function for AspirePirPirPreprocessDbCommand.OneOf_Command(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for AspirePirPIRShardingFunction.OneOf_Function(a1, a2, a3, type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword, type metadata accessor for AspirePirPirPreprocessDbCommand.Index);
}

uint64_t type metadata completion function for AspirePirPIRShardingFunction.OneOf_Function(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t))
{
  uint64_t result = a4(319);
  if (v7 <= 0x3F)
  {
    uint64_t result = a5(319);
    if (v8 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AspirePirPirPreprocessDbCommand.Index(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    uint64_t v5 = *(int *)(a3 + 24);
    uint64_t v6 = (char *)a1 + v5;
    unint64_t v7 = (char *)a2 + v5;
    uint64_t v8 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t destroy for AspirePirPirPreprocessDbCommand.Index(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 24);
  uint64_t v3 = type metadata accessor for UnknownStorage();
  int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
  return v4(v2, v3);
}

void *initializeWithCopy for AspirePirPirPreprocessDbCommand.Index(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

_DWORD *assignWithCopy for AspirePirPirPreprocessDbCommand.Index(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

void *initializeWithTake for AspirePirPirPreprocessDbCommand.Index(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void *assignWithTake for AspirePirPirPreprocessDbCommand.Index(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for AspirePirPirPreprocessDbCommand.Index(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_249E0C324);
}

uint64_t sub_249E0C324(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + *(int *)(a3 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48);
  return v6(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for AspirePirPirPreprocessDbCommand.Index(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_249E0C3A8);
}

uint64_t sub_249E0C3A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + *(int *)(a4 + 24);
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
  return v7(v5, a2, a2, v6);
}

uint64_t type metadata completion function for AspirePirPirPreprocessDbCommand.Index()
{
  return type metadata completion function for AMDPbHEConfigsReply();
}

uint64_t *initializeBufferWithCopyOfBuffer for AspirePirPirPreprocessDbCommand.Keyword(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config(0);
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config?);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      *a1 = *a2;
      if (EnumCaseMultiPayload == 1)
      {
        *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
        *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
        uint64_t v12 = type metadata accessor for AspirePirBatchKeywordPirConfig(0);
        uint64_t v13 = *(int *)(v12 + 36);
        uint64_t v14 = (char *)a1 + v13;
        uint64_t v15 = (char *)a2 + v13;
        uint64_t v16 = type metadata accessor for UnknownStorage();
        uint64_t v44 = *(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16);
        v44(v14, v15, v16);
        uint64_t v45 = v12;
        uint64_t v17 = *(int *)(v12 + 40);
        uint64_t v18 = (_OWORD *)((char *)a1 + v17);
        uint64_t v19 = (_OWORD *)((char *)a2 + v17);
        uint64_t v20 = type metadata accessor for AspirePirCuckooTableConfig(0);
        uint64_t v21 = *(void *)(v20 - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
        {
          uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
          memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
        }
        else
        {
          long long v27 = v19[1];
          *uint64_t v18 = *v19;
          v18[1] = v27;
          *((void *)v18 + 4) = *((void *)v19 + 4);
          *((_WORD *)v18 + 20) = *((_WORD *)v19 + 20);
          v44((char *)v18 + *(int *)(v20 + 44), (char *)v19 + *(int *)(v20 + 44), v16);
          (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
        }
        uint64_t v28 = *(int *)(v45 + 44);
        uint64_t v29 = (char *)a1 + v28;
        uint64_t v30 = (char *)a2 + v28;
        *(void *)uint64_t v29 = *(void *)v30;
        v29[8] = v30[8];
      }
      else
      {
        *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
        *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
        *((_WORD *)a1 + 20) = *((_WORD *)a2 + 20);
        uint64_t v23 = *(int *)(type metadata accessor for AspirePirCuckooTableConfig(0) + 44);
        uint64_t v24 = (char *)a1 + v23;
        uint64_t v25 = (char *)a2 + v23;
        uint64_t v26 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 16))(v24, v25, v26);
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    uint64_t v31 = a3[5];
    uint64_t v32 = (char *)a1 + v31;
    uint64_t v33 = (char *)a2 + v31;
    uint64_t v34 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 16))(v32, v33, v34);
    uint64_t v35 = a3[6];
    uint64_t v36 = a3[7];
    uint64_t v37 = (uint64_t *)((char *)a1 + v35);
    uint64_t v38 = (uint64_t *)((char *)a2 + v35);
    uint64_t v39 = v38[1];
    *uint64_t v37 = *v38;
    v37[1] = v39;
    uint64_t v40 = (uint64_t *)((char *)a1 + v36);
    uint64_t v41 = (uint64_t *)((char *)a2 + v36);
    uint64_t v42 = v41[1];
    *uint64_t v40 = *v41;
    v40[1] = v42;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for AspirePirPirPreprocessDbCommand.Keyword(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, 1, v4))
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v5 = type metadata accessor for AspirePirBatchKeywordPirConfig(0);
      uint64_t v6 = a1 + *(int *)(v5 + 36);
      uint64_t v7 = type metadata accessor for UnknownStorage();
      uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
      v8(v6, v7);
      uint64_t v9 = a1 + *(int *)(v5 + 40);
      uint64_t v10 = type metadata accessor for AspirePirCuckooTableConfig(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v9, 1, v10)) {
        v8(v9 + *(int *)(v10 + 44), v7);
      }
    }
    else
    {
      uint64_t v11 = a1 + *(int *)(type metadata accessor for AspirePirCuckooTableConfig(0) + 44);
      uint64_t v12 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
    }
  }
  uint64_t v13 = a1 + *(int *)(a2 + 20);
  uint64_t v14 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(v13, v14);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for AspirePirPirPreprocessDbCommand.Keyword(void *a1, void *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    *a1 = *a2;
    if (EnumCaseMultiPayload == 1)
    {
      *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
      *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
      uint64_t v10 = type metadata accessor for AspirePirBatchKeywordPirConfig(0);
      uint64_t v11 = *(int *)(v10 + 36);
      uint64_t v12 = (char *)a1 + v11;
      uint64_t v13 = (char *)a2 + v11;
      uint64_t v14 = type metadata accessor for UnknownStorage();
      uint64_t v42 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16);
      v42(v12, v13, v14);
      uint64_t v43 = v10;
      uint64_t v15 = *(int *)(v10 + 40);
      uint64_t v16 = (_OWORD *)((char *)a1 + v15);
      uint64_t v17 = (_OWORD *)((char *)a2 + v15);
      uint64_t v18 = type metadata accessor for AspirePirCuckooTableConfig(0);
      uint64_t v19 = *(void *)(v18 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
      {
        uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
        memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
      }
      else
      {
        long long v25 = v17[1];
        _OWORD *v16 = *v17;
        v16[1] = v25;
        *((void *)v16 + 4) = *((void *)v17 + 4);
        *((_WORD *)v16 + 20) = *((_WORD *)v17 + 20);
        v42((char *)v16 + *(int *)(v18 + 44), (char *)v17 + *(int *)(v18 + 44), v14);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      }
      uint64_t v26 = *(int *)(v43 + 44);
      long long v27 = (char *)a1 + v26;
      uint64_t v28 = (char *)a2 + v26;
      *(void *)long long v27 = *(void *)v28;
      v27[8] = v28[8];
    }
    else
    {
      *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
      *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
      *((_WORD *)a1 + 20) = *((_WORD *)a2 + 20);
      uint64_t v21 = *(int *)(type metadata accessor for AspirePirCuckooTableConfig(0) + 44);
      uint64_t v22 = (char *)a1 + v21;
      uint64_t v23 = (char *)a2 + v21;
      uint64_t v24 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 16))(v22, v23, v24);
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v29 = a3[5];
  uint64_t v30 = (char *)a1 + v29;
  uint64_t v31 = (char *)a2 + v29;
  uint64_t v32 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 16))(v30, v31, v32);
  uint64_t v33 = a3[6];
  uint64_t v34 = a3[7];
  uint64_t v35 = (void *)((char *)a1 + v33);
  uint64_t v36 = (void *)((char *)a2 + v33);
  uint64_t v37 = v36[1];
  void *v35 = *v36;
  v35[1] = v37;
  uint64_t v38 = (void *)((char *)a1 + v34);
  uint64_t v39 = (void *)((char *)a2 + v34);
  uint64_t v40 = v39[1];
  *uint64_t v38 = *v39;
  v38[1] = v40;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AspirePirPirPreprocessDbCommand.Keyword(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      *(void *)a1 = *(void *)a2;
      if (EnumCaseMultiPayload == 1)
      {
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        uint64_t v12 = type metadata accessor for AspirePirBatchKeywordPirConfig(0);
        uint64_t v13 = *(int *)(v12 + 36);
        uint64_t v14 = a1 + v13;
        uint64_t v15 = a2 + v13;
        uint64_t v16 = type metadata accessor for UnknownStorage();
        uint64_t v63 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16);
        v63(v14, v15, v16);
        uint64_t v64 = v12;
        uint64_t v17 = *(int *)(v12 + 40);
        uint64_t v18 = (void *)(a1 + v17);
        uint64_t v19 = (void *)(a2 + v17);
        uint64_t v20 = type metadata accessor for AspirePirCuckooTableConfig(0);
        uint64_t v21 = *(void *)(v20 - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
        {
          uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
          memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
        }
        else
        {
          *uint64_t v18 = *v19;
          v18[1] = v19[1];
          v18[2] = v19[2];
          v18[3] = v19[3];
          v18[4] = v19[4];
          *((unsigned char *)v18 + 40) = *((unsigned char *)v19 + 40);
          *((unsigned char *)v18 + 41) = *((unsigned char *)v19 + 41);
          v63((uint64_t)v18 + *(int *)(v20 + 44), (uint64_t)v19 + *(int *)(v20 + 44), v16);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
        }
        uint64_t v40 = *(int *)(v64 + 44);
        uint64_t v41 = a1 + v40;
        uint64_t v42 = (uint64_t *)(a2 + v40);
        uint64_t v43 = *v42;
        *(unsigned char *)(v41 + 8) = *((unsigned char *)v42 + 8);
        *(void *)uint64_t v41 = v43;
      }
      else
      {
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
        *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 41);
        uint64_t v36 = *(int *)(type metadata accessor for AspirePirCuckooTableConfig(0) + 44);
        uint64_t v37 = a1 + v36;
        uint64_t v38 = a2 + v36;
        uint64_t v39 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 16))(v37, v38, v39);
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_17;
    }
LABEL_8:
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config?);
    memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v23 - 8) + 64));
    goto LABEL_17;
  }
  if (v10)
  {
    _s8CipherML28AspireHeEncryptionParametersVWOhTm_2(a1, type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config);
    goto LABEL_8;
  }
  if (a1 != a2)
  {
    _s8CipherML28AspireHeEncryptionParametersVWOhTm_2(a1, type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config);
    int v24 = swift_getEnumCaseMultiPayload();
    *(void *)a1 = *(void *)a2;
    if (v24 == 1)
    {
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      long long v25 = (int *)type metadata accessor for AspirePirBatchKeywordPirConfig(0);
      uint64_t v26 = v25[9];
      uint64_t v27 = a1 + v26;
      uint64_t v28 = a2 + v26;
      uint64_t v29 = type metadata accessor for UnknownStorage();
      uint64_t v65 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 16);
      v65(v27, v28, v29);
      uint64_t v30 = v25[10];
      uint64_t v31 = (void *)(a1 + v30);
      uint64_t v32 = (void *)(a2 + v30);
      uint64_t v33 = type metadata accessor for AspirePirCuckooTableConfig(0);
      uint64_t v34 = *(void *)(v33 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
      {
        uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
        memcpy(v31, v32, *(void *)(*(void *)(v35 - 8) + 64));
      }
      else
      {
        *uint64_t v31 = *v32;
        v31[1] = v32[1];
        v31[2] = v32[2];
        v31[3] = v32[3];
        v31[4] = v32[4];
        *((unsigned char *)v31 + 40) = *((unsigned char *)v32 + 40);
        *((unsigned char *)v31 + 41) = *((unsigned char *)v32 + 41);
        v65((uint64_t)v31 + *(int *)(v33 + 44), (uint64_t)v32 + *(int *)(v33 + 44), v29);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
      }
      uint64_t v59 = v25[11];
      uint64_t v60 = a1 + v59;
      char v61 = (uint64_t *)(a2 + v59);
      uint64_t v62 = *v61;
      *(unsigned char *)(v60 + 8) = *((unsigned char *)v61 + 8);
      *(void *)uint64_t v60 = v62;
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
      *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 41);
      uint64_t v55 = *(int *)(type metadata accessor for AspirePirCuckooTableConfig(0) + 44);
      uint64_t v56 = a1 + v55;
      uint64_t v57 = a2 + v55;
      uint64_t v58 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v58 - 8) + 16))(v56, v57, v58);
      swift_storeEnumTagMultiPayload();
    }
  }
LABEL_17:
  uint64_t v44 = a3[5];
  uint64_t v45 = a1 + v44;
  uint64_t v46 = a2 + v44;
  uint64_t v47 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 24))(v45, v46, v47);
  uint64_t v48 = a3[6];
  uint64_t v49 = (void *)(a1 + v48);
  uint64_t v50 = (void *)(a2 + v48);
  *uint64_t v49 = *v50;
  v49[1] = v50[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v51 = a3[7];
  uint64_t v52 = (void *)(a1 + v51);
  uint64_t v53 = (void *)(a2 + v51);
  *uint64_t v52 = *v53;
  v52[1] = v53[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *initializeWithTake for AspirePirPirPreprocessDbCommand.Keyword(void *a1, void *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    *a1 = *a2;
    if (EnumCaseMultiPayload == 1)
    {
      *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
      *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
      uint64_t v10 = type metadata accessor for AspirePirBatchKeywordPirConfig(0);
      uint64_t v11 = *(int *)(v10 + 36);
      uint64_t v12 = (char *)a1 + v11;
      uint64_t v13 = (char *)a2 + v11;
      uint64_t v14 = type metadata accessor for UnknownStorage();
      uint64_t v35 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32);
      v35(v12, v13, v14);
      uint64_t v36 = v10;
      uint64_t v15 = *(int *)(v10 + 40);
      uint64_t v16 = (_OWORD *)((char *)a1 + v15);
      uint64_t v17 = (_OWORD *)((char *)a2 + v15);
      uint64_t v18 = type metadata accessor for AspirePirCuckooTableConfig(0);
      uint64_t v19 = *(void *)(v18 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
      {
        uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
        memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
      }
      else
      {
        long long v25 = v17[1];
        _OWORD *v16 = *v17;
        v16[1] = v25;
        *((void *)v16 + 4) = *((void *)v17 + 4);
        *((_WORD *)v16 + 20) = *((_WORD *)v17 + 20);
        v35((char *)v16 + *(int *)(v18 + 44), (char *)v17 + *(int *)(v18 + 44), v14);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      }
      uint64_t v26 = *(int *)(v36 + 44);
      uint64_t v27 = (char *)a1 + v26;
      uint64_t v28 = (char *)a2 + v26;
      *(void *)uint64_t v27 = *(void *)v28;
      v27[8] = v28[8];
    }
    else
    {
      *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
      *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
      *((_WORD *)a1 + 20) = *((_WORD *)a2 + 20);
      uint64_t v21 = *(int *)(type metadata accessor for AspirePirCuckooTableConfig(0) + 44);
      uint64_t v22 = (char *)a1 + v21;
      uint64_t v23 = (char *)a2 + v21;
      uint64_t v24 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 32))(v22, v23, v24);
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v29 = a3[5];
  uint64_t v30 = (char *)a1 + v29;
  uint64_t v31 = (char *)a2 + v29;
  uint64_t v32 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 32))(v30, v31, v32);
  uint64_t v33 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  *(_OWORD *)((char *)a1 + v33) = *(_OWORD *)((char *)a2 + v33);
  return a1;
}

uint64_t assignWithTake for AspirePirPirPreprocessDbCommand.Keyword(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      *(void *)a1 = *(void *)a2;
      if (EnumCaseMultiPayload == 1)
      {
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
        uint64_t v12 = type metadata accessor for AspirePirBatchKeywordPirConfig(0);
        uint64_t v13 = *(int *)(v12 + 36);
        uint64_t v14 = a1 + v13;
        uint64_t v15 = a2 + v13;
        uint64_t v16 = type metadata accessor for UnknownStorage();
        uint64_t v67 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 32);
        v67(v14, v15, v16);
        uint64_t v68 = v12;
        uint64_t v17 = *(int *)(v12 + 40);
        uint64_t v18 = (_OWORD *)(a1 + v17);
        uint64_t v19 = (_OWORD *)(a2 + v17);
        uint64_t v20 = type metadata accessor for AspirePirCuckooTableConfig(0);
        uint64_t v21 = *(void *)(v20 - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
        {
          uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
          memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
        }
        else
        {
          long long v40 = v19[1];
          *uint64_t v18 = *v19;
          v18[1] = v40;
          *((void *)v18 + 4) = *((void *)v19 + 4);
          *((_WORD *)v18 + 20) = *((_WORD *)v19 + 20);
          v67((uint64_t)v18 + *(int *)(v20 + 44), (uint64_t)v19 + *(int *)(v20 + 44), v16);
          (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
        }
        uint64_t v41 = *(int *)(v68 + 44);
        uint64_t v42 = a1 + v41;
        uint64_t v43 = a2 + v41;
        *(void *)uint64_t v42 = *(void *)v43;
        *(unsigned char *)(v42 + 8) = *(unsigned char *)(v43 + 8);
      }
      else
      {
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
        *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
        uint64_t v36 = *(int *)(type metadata accessor for AspirePirCuckooTableConfig(0) + 44);
        uint64_t v37 = a1 + v36;
        uint64_t v38 = a2 + v36;
        uint64_t v39 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 32))(v37, v38, v39);
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_17;
    }
LABEL_8:
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config?);
    memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v23 - 8) + 64));
    goto LABEL_17;
  }
  if (v10)
  {
    _s8CipherML28AspireHeEncryptionParametersVWOhTm_2(a1, type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config);
    goto LABEL_8;
  }
  if (a1 != a2)
  {
    _s8CipherML28AspireHeEncryptionParametersVWOhTm_2(a1, type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config);
    int v24 = swift_getEnumCaseMultiPayload();
    *(void *)a1 = *(void *)a2;
    if (v24 == 1)
    {
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      long long v25 = (int *)type metadata accessor for AspirePirBatchKeywordPirConfig(0);
      uint64_t v26 = v25[9];
      uint64_t v27 = a1 + v26;
      uint64_t v28 = a2 + v26;
      uint64_t v29 = type metadata accessor for UnknownStorage();
      uint64_t v69 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 32);
      v69(v27, v28, v29);
      uint64_t v30 = v25[10];
      uint64_t v31 = (_OWORD *)(a1 + v30);
      uint64_t v32 = (_OWORD *)(a2 + v30);
      uint64_t v33 = type metadata accessor for AspirePirCuckooTableConfig(0);
      uint64_t v34 = *(void *)(v33 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
      {
        uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
        memcpy(v31, v32, *(void *)(*(void *)(v35 - 8) + 64));
      }
      else
      {
        long long v63 = v32[1];
        *uint64_t v31 = *v32;
        v31[1] = v63;
        *((void *)v31 + 4) = *((void *)v32 + 4);
        *((_WORD *)v31 + 20) = *((_WORD *)v32 + 20);
        v69((uint64_t)v31 + *(int *)(v33 + 44), (uint64_t)v32 + *(int *)(v33 + 44), v29);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
      }
      uint64_t v64 = v25[11];
      uint64_t v65 = a1 + v64;
      uint64_t v66 = a2 + v64;
      *(void *)uint64_t v65 = *(void *)v66;
      *(unsigned char *)(v65 + 8) = *(unsigned char *)(v66 + 8);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
      uint64_t v59 = *(int *)(type metadata accessor for AspirePirCuckooTableConfig(0) + 44);
      uint64_t v60 = a1 + v59;
      uint64_t v61 = a2 + v59;
      uint64_t v62 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v62 - 8) + 32))(v60, v61, v62);
      swift_storeEnumTagMultiPayload();
    }
  }
LABEL_17:
  uint64_t v44 = a3[5];
  uint64_t v45 = a1 + v44;
  uint64_t v46 = a2 + v44;
  uint64_t v47 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 40))(v45, v46, v47);
  uint64_t v48 = a3[6];
  uint64_t v49 = (void *)(a1 + v48);
  uint64_t v50 = (uint64_t *)(a2 + v48);
  uint64_t v52 = *v50;
  uint64_t v51 = v50[1];
  *uint64_t v49 = v52;
  v49[1] = v51;
  swift_bridgeObjectRelease();
  uint64_t v53 = a3[7];
  long long v54 = (void *)(a1 + v53);
  uint64_t v55 = (uint64_t *)(a2 + v53);
  uint64_t v57 = *v55;
  uint64_t v56 = v55[1];
  void *v54 = v57;
  v54[1] = v56;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AspirePirPirPreprocessDbCommand.Keyword(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_249E0DE90);
}

uint64_t sub_249E0DE90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config?);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    int v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = type metadata accessor for UnknownStorage();
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    int v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  unint64_t v14 = *(void *)(a1 + *(int *)(a3 + 24) + 8);
  if (v14 >= 0xFFFFFFFF) {
    LODWORD(v14) = -1;
  }
  int v15 = v14 - 1;
  if (v15 < 0) {
    int v15 = -1;
  }
  return (v15 + 1);
}

uint64_t storeEnumTagSinglePayload for AspirePirPirPreprocessDbCommand.Keyword(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_249E0DFCC);
}

uint64_t sub_249E0DFCC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config?);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t result = type metadata accessor for UnknownStorage();
    uint64_t v14 = *(void *)(result - 8);
    if (*(_DWORD *)(v14 + 84) != a3)
    {
      *(void *)(a1 + *(int *)(a4 + 24) + 8) = a2;
      return result;
    }
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void type metadata completion function for AspirePirPirPreprocessDbCommand.Keyword()
{
  type metadata accessor for AspirePirCuckooTableConfig?(319, &lazy cache variable for type metadata for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config?, (void (*)(uint64_t))type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config);
  if (v0 <= 0x3F)
  {
    type metadata accessor for UnknownStorage();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t initializeBufferWithCopyOfBuffer for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *(void *)a1 = *a2;
    a1 = v19 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    *(void *)a1 = *a2;
    if (EnumCaseMultiPayload == 1)
    {
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
      uint64_t v7 = (int *)type metadata accessor for AspirePirBatchKeywordPirConfig(0);
      uint64_t v8 = v7[9];
      uint64_t v9 = (char *)(a1 + v8);
      uint64_t v10 = (char *)a2 + v8;
      uint64_t v11 = type metadata accessor for UnknownStorage();
      uint64_t v12 = (void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
      uint64_t v29 = *v12;
      (*v12)(v9, v10, v11);
      uint64_t v13 = v7[10];
      uint64_t v14 = (_OWORD *)(a1 + v13);
      int v15 = (_OWORD *)((char *)a2 + v13);
      uint64_t v16 = type metadata accessor for AspirePirCuckooTableConfig(0);
      uint64_t v17 = *(void *)(v16 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
      {
        uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
        memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
      }
      else
      {
        long long v24 = v15[1];
        *uint64_t v14 = *v15;
        v14[1] = v24;
        *((void *)v14 + 4) = *((void *)v15 + 4);
        *((_WORD *)v14 + 20) = *((_WORD *)v15 + 20);
        v29((char *)v14 + *(int *)(v16 + 44), (char *)v15 + *(int *)(v16 + 44), v11);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
      }
      uint64_t v25 = v7[11];
      uint64_t v26 = a1 + v25;
      uint64_t v27 = (uint64_t)a2 + v25;
      *(void *)uint64_t v26 = *(void *)v27;
      *(unsigned char *)(v26 + 8) = *(unsigned char *)(v27 + 8);
    }
    else
    {
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
      *(_WORD *)(a1 + 40) = *((_WORD *)a2 + 20);
      uint64_t v20 = *(int *)(type metadata accessor for AspirePirCuckooTableConfig(0) + 44);
      uint64_t v21 = a1 + v20;
      uint64_t v22 = (uint64_t)a2 + v20;
      uint64_t v23 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 16))(v21, v22, v23);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config(uint64_t a1)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v2 = type metadata accessor for AspirePirBatchKeywordPirConfig(0);
    uint64_t v3 = a1 + *(int *)(v2 + 36);
    uint64_t v4 = type metadata accessor for UnknownStorage();
    uint64_t v13 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
    v13(v3, v4);
    uint64_t v5 = a1 + *(int *)(v2 + 40);
    uint64_t v6 = type metadata accessor for AspirePirCuckooTableConfig(0);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6);
    if (result) {
      return result;
    }
    uint64_t v12 = v5 + *(int *)(v6 + 44);
    uint64_t v11 = v4;
    uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t))v13;
  }
  else
  {
    uint64_t v8 = a1 + *(int *)(type metadata accessor for AspirePirCuckooTableConfig(0) + 44);
    uint64_t v9 = type metadata accessor for UnknownStorage();
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8);
    uint64_t v11 = v9;
    uint64_t v12 = v8;
  }
  return v10(v12, v11);
}

uint64_t initializeWithCopy for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  *(void *)a1 = *(void *)a2;
  if (EnumCaseMultiPayload == 1)
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    uint64_t v5 = (int *)type metadata accessor for AspirePirBatchKeywordPirConfig(0);
    uint64_t v6 = v5[9];
    uint64_t v7 = (char *)(a1 + v6);
    uint64_t v8 = (char *)(a2 + v6);
    uint64_t v9 = type metadata accessor for UnknownStorage();
    uint64_t v10 = (void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
    uint64_t v26 = *v10;
    (*v10)(v7, v8, v9);
    uint64_t v11 = v5[10];
    uint64_t v12 = (_OWORD *)(a1 + v11);
    uint64_t v13 = (_OWORD *)(a2 + v11);
    uint64_t v14 = type metadata accessor for AspirePirCuckooTableConfig(0);
    uint64_t v15 = *(void *)(v14 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    {
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
      memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
    }
    else
    {
      long long v21 = v13[1];
      *uint64_t v12 = *v13;
      v12[1] = v21;
      *((void *)v12 + 4) = *((void *)v13 + 4);
      *((_WORD *)v12 + 20) = *((_WORD *)v13 + 20);
      v26((char *)v12 + *(int *)(v14 + 44), (char *)v13 + *(int *)(v14 + 44), v9);
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
    }
    uint64_t v22 = v5[11];
    uint64_t v23 = a1 + v22;
    uint64_t v24 = a2 + v22;
    *(void *)uint64_t v23 = *(void *)v24;
    *(unsigned char *)(v23 + 8) = *(unsigned char *)(v24 + 8);
  }
  else
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
    uint64_t v17 = *(int *)(type metadata accessor for AspirePirCuckooTableConfig(0) + 44);
    uint64_t v18 = a1 + v17;
    uint64_t v19 = a2 + v17;
    uint64_t v20 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 16))(v18, v19, v20);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    _s8CipherML28AspireHeEncryptionParametersVWOhTm_2(a1, type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    *(void *)a1 = *(void *)a2;
    if (EnumCaseMultiPayload == 1)
    {
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      uint64_t v5 = (int *)type metadata accessor for AspirePirBatchKeywordPirConfig(0);
      uint64_t v6 = v5[9];
      uint64_t v7 = (char *)(a1 + v6);
      uint64_t v8 = (char *)(a2 + v6);
      uint64_t v9 = type metadata accessor for UnknownStorage();
      uint64_t v10 = (void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
      uint64_t v26 = *v10;
      (*v10)(v7, v8, v9);
      uint64_t v11 = v5[10];
      uint64_t v12 = (void *)(a1 + v11);
      uint64_t v13 = (void *)(a2 + v11);
      uint64_t v14 = type metadata accessor for AspirePirCuckooTableConfig(0);
      uint64_t v15 = *(void *)(v14 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
      {
        uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
        memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
      }
      else
      {
        *uint64_t v12 = *v13;
        v12[1] = v13[1];
        v12[2] = v13[2];
        v12[3] = v13[3];
        v12[4] = v13[4];
        *((unsigned char *)v12 + 40) = *((unsigned char *)v13 + 40);
        *((unsigned char *)v12 + 41) = *((unsigned char *)v13 + 41);
        v26((char *)v12 + *(int *)(v14 + 44), (char *)v13 + *(int *)(v14 + 44), v9);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      }
      uint64_t v21 = v5[11];
      uint64_t v22 = a1 + v21;
      uint64_t v23 = (uint64_t *)(a2 + v21);
      uint64_t v24 = *v23;
      *(unsigned char *)(v22 + 8) = *((unsigned char *)v23 + 8);
      *(void *)uint64_t v22 = v24;
    }
    else
    {
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
      *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 41);
      uint64_t v17 = *(int *)(type metadata accessor for AspirePirCuckooTableConfig(0) + 44);
      uint64_t v18 = a1 + v17;
      uint64_t v19 = a2 + v17;
      uint64_t v20 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 16))(v18, v19, v20);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t initializeWithTake for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  *(void *)a1 = *(void *)a2;
  if (EnumCaseMultiPayload == 1)
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    uint64_t v5 = (int *)type metadata accessor for AspirePirBatchKeywordPirConfig(0);
    uint64_t v6 = v5[9];
    uint64_t v7 = (char *)(a1 + v6);
    uint64_t v8 = (char *)(a2 + v6);
    uint64_t v9 = type metadata accessor for UnknownStorage();
    uint64_t v10 = (void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
    uint64_t v26 = *v10;
    (*v10)(v7, v8, v9);
    uint64_t v11 = v5[10];
    uint64_t v12 = (_OWORD *)(a1 + v11);
    uint64_t v13 = (_OWORD *)(a2 + v11);
    uint64_t v14 = type metadata accessor for AspirePirCuckooTableConfig(0);
    uint64_t v15 = *(void *)(v14 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    {
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
      memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
    }
    else
    {
      long long v21 = v13[1];
      *uint64_t v12 = *v13;
      v12[1] = v21;
      *((void *)v12 + 4) = *((void *)v13 + 4);
      *((_WORD *)v12 + 20) = *((_WORD *)v13 + 20);
      v26((char *)v12 + *(int *)(v14 + 44), (char *)v13 + *(int *)(v14 + 44), v9);
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
    }
    uint64_t v22 = v5[11];
    uint64_t v23 = a1 + v22;
    uint64_t v24 = a2 + v22;
    *(void *)uint64_t v23 = *(void *)v24;
    *(unsigned char *)(v23 + 8) = *(unsigned char *)(v24 + 8);
  }
  else
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
    uint64_t v17 = *(int *)(type metadata accessor for AspirePirCuckooTableConfig(0) + 44);
    uint64_t v18 = a1 + v17;
    uint64_t v19 = a2 + v17;
    uint64_t v20 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 32))(v18, v19, v20);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithTake for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    _s8CipherML28AspireHeEncryptionParametersVWOhTm_2(a1, type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    *(void *)a1 = *(void *)a2;
    if (EnumCaseMultiPayload == 1)
    {
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      uint64_t v5 = (int *)type metadata accessor for AspirePirBatchKeywordPirConfig(0);
      uint64_t v6 = v5[9];
      uint64_t v7 = (char *)(a1 + v6);
      uint64_t v8 = (char *)(a2 + v6);
      uint64_t v9 = type metadata accessor for UnknownStorage();
      uint64_t v10 = (void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
      uint64_t v26 = *v10;
      (*v10)(v7, v8, v9);
      uint64_t v11 = v5[10];
      uint64_t v12 = (_OWORD *)(a1 + v11);
      uint64_t v13 = (_OWORD *)(a2 + v11);
      uint64_t v14 = type metadata accessor for AspirePirCuckooTableConfig(0);
      uint64_t v15 = *(void *)(v14 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
      {
        uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
        memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
      }
      else
      {
        long long v21 = v13[1];
        *uint64_t v12 = *v13;
        v12[1] = v21;
        *((void *)v12 + 4) = *((void *)v13 + 4);
        *((_WORD *)v12 + 20) = *((_WORD *)v13 + 20);
        v26((char *)v12 + *(int *)(v14 + 44), (char *)v13 + *(int *)(v14 + 44), v9);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      }
      uint64_t v22 = v5[11];
      uint64_t v23 = a1 + v22;
      uint64_t v24 = a2 + v22;
      *(void *)uint64_t v23 = *(void *)v24;
      *(unsigned char *)(v23 + 8) = *(unsigned char *)(v24 + 8);
    }
    else
    {
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
      uint64_t v17 = *(int *)(type metadata accessor for AspirePirCuckooTableConfig(0) + 44);
      uint64_t v18 = a1 + v17;
      uint64_t v19 = a2 + v17;
      uint64_t v20 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 32))(v18, v19, v20);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata completion function for AspirePirPirPreprocessDbCommand.Keyword.OneOf_Config(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for AspirePirPIRShardingFunction.OneOf_Function(a1, a2, a3, type metadata accessor for AspirePirCuckooTableConfig, type metadata accessor for AspirePirBatchKeywordPirConfig);
}

unint64_t initializeBufferWithCopyOfBuffer for AspirePirSymmetricPirClientConfig(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v13 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v7 = *(void *)a2;
    unint64_t v8 = *(void *)(a2 + 8);
    outlined copy of Data._Representation(*(void *)a2, v8);
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
    uint64_t v9 = *(int *)(a3 + 24);
    uint64_t v10 = a1 + v9;
    uint64_t v11 = a2 + v9;
    uint64_t v12 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
  }
  return a1;
}

uint64_t destroy for AspirePirSymmetricPirClientConfig(uint64_t a1, uint64_t a2)
{
  outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

uint64_t initializeWithCopy for AspirePirSymmetricPirClientConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  outlined copy of Data._Representation(*(void *)a2, v7);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  return a1;
}

uint64_t assignWithCopy for AspirePirSymmetricPirClientConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  outlined copy of Data._Representation(*(void *)a2, v7);
  uint64_t v8 = *(void *)a1;
  unint64_t v9 = *(void *)(a1 + 8);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  outlined consume of Data._Representation(v8, v9);
  uint64_t v10 = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = v10;
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 24))(v12, v13, v14);
  return a1;
}

uint64_t initializeWithTake for AspirePirSymmetricPirClientConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for AspirePirSymmetricPirClientConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  outlined consume of Data._Representation(v6, v7);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for AspirePirSymmetricPirClientConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_249E0F454);
}

uint64_t sub_249E0F454(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 8) >> 60;
    if (((4 * v4) & 0xC) != 0) {
      return 16 - ((4 * v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for AspirePirSymmetricPirClientConfig(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_249E0F524);
}

void *sub_249E0F524(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *uint64_t result = 0;
    result[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 24);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for AspirePirSymmetricPirClientConfig()
{
  return type metadata completion function for AMDPbHEConfigsReply();
}

uint64_t ObjC metadata update function for AspirePirPirParameters._StorageClass()
{
  return type metadata accessor for AspirePirPirParameters._StorageClass(0);
}

void type metadata completion function for AspirePirPirParameters._StorageClass()
{
  type metadata accessor for AspirePirCuckooTableConfig?(319, &lazy cache variable for type metadata for AspireHeEncryptionParameters?, (void (*)(uint64_t))type metadata accessor for AspireHeEncryptionParameters);
  if (v0 <= 0x3F)
  {
    type metadata accessor for AspirePirCuckooTableConfig?(319, &lazy cache variable for type metadata for AspirePirKeywordPirParameters?, (void (*)(uint64_t))type metadata accessor for AspirePirKeywordPirParameters);
    if (v1 <= 0x3F)
    {
      type metadata accessor for AspirePirCuckooTableConfig?(319, &lazy cache variable for type metadata for AspireHeEvaluationKeyConfig?, (void (*)(uint64_t))type metadata accessor for AspireHeEvaluationKeyConfig);
      if (v2 <= 0x3F)
      {
        type metadata accessor for AspirePirCuckooTableConfig?(319, &lazy cache variable for type metadata for AspirePirBatchPirParameters?, (void (*)(uint64_t))type metadata accessor for AspirePirBatchPirParameters);
        if (v3 <= 0x3F) {
          swift_updateClassMetadata2();
        }
      }
    }
  }
}

uint64_t ObjC metadata update function for AspirePirPirPreprocessDbArgs._StorageClass()
{
  return type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
}

void type metadata completion function for AspirePirPirPreprocessDbArgs._StorageClass()
{
  type metadata accessor for AspirePirCuckooTableConfig?(319, &lazy cache variable for type metadata for AspirePirPirPreprocessDbCommand?, (void (*)(uint64_t))type metadata accessor for AspirePirPirPreprocessDbCommand);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

unint64_t lazy protocol witness table accessor for type AspireHeHeScheme and conformance AspireHeHeScheme()
{
  unint64_t result = lazy protocol witness table cache variable for type AspireHeHeScheme and conformance AspireHeHeScheme;
  if (!lazy protocol witness table cache variable for type AspireHeHeScheme and conformance AspireHeHeScheme)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AspireHeHeScheme and conformance AspireHeHeScheme);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AspireHeHeScheme and conformance AspireHeHeScheme;
  if (!lazy protocol witness table cache variable for type AspireHeHeScheme and conformance AspireHeHeScheme)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AspireHeHeScheme and conformance AspireHeHeScheme);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AspireHeHeScheme and conformance AspireHeHeScheme;
  if (!lazy protocol witness table cache variable for type AspireHeHeScheme and conformance AspireHeHeScheme)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AspireHeHeScheme and conformance AspireHeHeScheme);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AspireHeHeScheme and conformance AspireHeHeScheme;
  if (!lazy protocol witness table cache variable for type AspireHeHeScheme and conformance AspireHeHeScheme)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AspireHeHeScheme and conformance AspireHeHeScheme);
  }
  return result;
}

uint64_t CMLXPCServer.requestsManager.getter()
{
  return swift_retain();
}

uint64_t CMLXPCServer.cacheCleaner.getter()
{
  return swift_retain();
}

uint64_t CMLXPCServer.rotationTask.getter()
{
  return swift_retain();
}

uint64_t CMLXPCServer.tokenFetcherTask.getter()
{
  return swift_retain();
}

id CMLXPCServer.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

uint64_t CMLXPCServer.init()()
{
  uint64_t ObjectType = swift_getObjectType();
  type metadata accessor for RequestsManager();
  swift_allocObject();
  id v1 = RequestsManager.init(configCache:keyStorage:activeUseCaseTracker:allowList:currentTime:)(0, 0, 0, 0, 0, (uint64_t)closure #1 in default argument 4 of RequestsManager.init(configCache:keyStorage:activeUseCaseTracker:allowList:currentTime:), 0);
  uint64_t v2 = (*(uint64_t (**)(void *))(ObjectType + 112))(v1);
  swift_deallocPartialClassInstance();
  return v2;
}

id CMLXPCServer.__allocating_init(requestsManager:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  id v4 = specialized CMLXPCServer.init(requestsManager:)(a1);
  swift_release();
  return v4;
}

id CMLXPCServer.init(requestsManager:)(void *a1)
{
  id v1 = specialized CMLXPCServer.init(requestsManager:)(a1);
  swift_release();
  return v1;
}

Swift::Void __swiftcall CMLXPCServer.start()()
{
  id v1 = objc_allocWithZone(MEMORY[0x263F08D88]);
  uint64_t v2 = (void *)MEMORY[0x24C5B33F0](0xD000000000000013, 0x8000000249E94420);
  id v7 = objc_msgSend(v1, sel_initWithMachServiceName_, v2);

  objc_msgSend(v7, sel_setDelegate_, v0);
  objc_msgSend(v7, sel_resume);
  if (one-time initialization token for framework != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Logger.framework);
  id v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl(&dword_249C3F000, v4, v5, "XPC Server has started", v6, 2u);
    MEMORY[0x24C5B4790](v6, -1, -1);
  }
}

Swift::Void __swiftcall CMLXPCServer.registerScheduledTasks()()
{
}

void specialized ScheduledActivity.register()()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = self;
  swift_retain();
  id v3 = objc_msgSend(v2, sel_sharedScheduler);
  id v4 = (void *)MEMORY[0x24C5B33F0](0xD00000000000001FLL, 0x8000000249E965E0);
  os_log_type_t v5 = (void *)swift_allocObject();
  v5[2] = 0xD00000000000001FLL;
  v5[3] = 0x8000000249E965E0;
  v5[4] = &async function pointer to partial apply for specialized implicit closure #2 in implicit closure #1 in ScheduledActivity.register();
  v5[5] = v1;
  v7[4] = closure #1 in ScheduledActivity.registerTask(identifier:handler:)partial apply;
  v7[5] = v5;
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 1107296256;
  v7[2] = thunk for @escaping @callee_guaranteed (@guaranteed BGSystemTask) -> ();
  v7[3] = &block_descriptor_24;
  uint64_t v6 = _Block_copy(v7);
  swift_retain();
  swift_release();
  objc_msgSend(v3, sel_registerForTaskWithIdentifier_usingQueue_launchHandler_, v4, 0, v6);
  _Block_release(v6);
  swift_release();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void v7[6];

  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = self;
  swift_retain();
  id v3 = objc_msgSend(v2, sel_sharedScheduler);
  id v4 = (void *)MEMORY[0x24C5B33F0](0xD00000000000001FLL, 0x8000000249E96620);
  os_log_type_t v5 = (void *)swift_allocObject();
  v5[2] = 0xD00000000000001FLL;
  v5[3] = 0x8000000249E96620;
  v5[4] = &async function pointer to partial apply for specialized implicit closure #2 in implicit closure #1 in ScheduledActivity.register();
  v5[5] = v1;
  v7[4] = closure #1 in ScheduledActivity.registerTask(identifier:handler:)partial apply;
  v7[5] = v5;
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 1107296256;
  v7[2] = thunk for @escaping @callee_guaranteed (@guaranteed BGSystemTask) -> ();
  v7[3] = &block_descriptor_14;
  uint64_t v6 = _Block_copy(v7);
  swift_retain();
  swift_release();
  objc_msgSend(v3, sel_registerForTaskWithIdentifier_usingQueue_launchHandler_, v4, 0, v6);
  _Block_release(v6);
  swift_release();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void v7[6];

  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = self;
  swift_retain();
  id v3 = objc_msgSend(v2, sel_sharedScheduler);
  id v4 = (void *)MEMORY[0x24C5B33F0](0xD000000000000023, 0x8000000249E96110);
  os_log_type_t v5 = (void *)swift_allocObject();
  v5[2] = 0xD000000000000023;
  v5[3] = 0x8000000249E96110;
  v5[4] = &async function pointer to partial apply for specialized implicit closure #2 in implicit closure #1 in ScheduledActivity.register();
  v5[5] = v1;
  v7[4] = partial apply for closure #1 in ScheduledActivity.registerTask(identifier:handler:);
  v7[5] = v5;
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 1107296256;
  v7[2] = thunk for @escaping @callee_guaranteed (@guaranteed BGSystemTask) -> ();
  v7[3] = &block_descriptor_4;
  uint64_t v6 = _Block_copy(v7);
  swift_retain();
  swift_release();
  objc_msgSend(v3, sel_registerForTaskWithIdentifier_usingQueue_launchHandler_, v4, 0, v6);
  _Block_release(v6);
  swift_release();
}

Swift::Bool __swiftcall CMLXPCServer.listener(_:shouldAcceptNewConnection:)(NSXPCListener _, NSXPCConnection shouldAcceptNewConnection)
{
  return specialized CMLXPCServer.listener(_:shouldAcceptNewConnection:)(shouldAcceptNewConnection.super.isa);
}

id CMLXPCServer.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CMLXPCServer();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t specialized implicit closure #2 in implicit closure #1 in ScheduledActivity.register()()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = protocol witness for NetworkManager.uploadKeys(evaluationKeys:userId:) in conformance AspireNetworkManager;
  return TokenFetcherTask.run()();
}

{
  void *v0;
  uint64_t Strong;
  void *v2;
  uint64_t (*v4)(void);
  uint64_t v5;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  v0[6] = Strong;
  if (Strong)
  {
    v0[7] = RequestsManager.keyRotation(for:)(0, 0);
    objc_super v2 = (void *)swift_task_alloc();
    v0[8] = v2;
    *objc_super v2 = v0;
    v2[1] = RotationTask.run();
    return KeyRotation.run()();
  }
  else
  {
    id v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
}

{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t *v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  void *v7;
  uint64_t v8;

  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v1 = *(os_unfair_lock_s **)(static TokenCache.shared + OBJC_IVAR____TtC8CipherML10TokenCache_tokensForUserLock);
  objc_super v2 = (uint64_t *)&v1[4];
  uint64_t v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  partial apply for closure #1 in TokenCache.pruneCache()(v2);
  os_unfair_lock_unlock(v3);
  TokenCache.save()();
  if (v4)
  {
    os_log_type_t v5 = *(uint64_t (**)(void))(v0 + 8);
    return v5();
  }
  else
  {
    id v7 = (void *)swift_task_alloc();
    *(void *)(v0 + 24) = v7;
    *id v7 = v0;
    v7[1] = TokenFetcher.backgroundTokenFetch();
    return CacheCleaner.cleanPirCaches()();
  }
}

uint64_t specialized implicit closure #2 in implicit closure #1 in ScheduledActivity.register()(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *(void *)(v1 + 40) = *a1;
  return MEMORY[0x270FA2498](specialized implicit closure #2 in implicit closure #1 in ScheduledActivity.register(), v2, 0);
}

uint64_t specialized implicit closure #2 in implicit closure #1 in ScheduledActivity.register()(void *a1)
{
  *(void *)(v1 + 16) = *a1;
  return MEMORY[0x270FA2498](specialized implicit closure #2 in implicit closure #1 in ScheduledActivity.register(), 0, 0);
}

id specialized CMLXPCServer.init(requestsManager:)(void *a1)
{
  *(void *)&v1[OBJC_IVAR____TtC8CipherML12CMLXPCServer_requestsManager] = a1;
  uint64_t v2 = a1[6];
  uint64_t v3 = a1[7];
  uint64_t v4 = a1[8];
  type metadata accessor for CacheCleaner();
  os_log_type_t v5 = (void *)swift_allocObject();
  v5[2] = v2;
  v5[3] = v3;
  v5[4] = v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ScheduledActivity<CacheCleaner>);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v5;
  *(void *)&v1[OBJC_IVAR____TtC8CipherML12CMLXPCServer_cacheCleaner] = v6;
  type metadata accessor for RotationTask();
  uint64_t v7 = swift_allocObject();
  uint64_t v8 = v1;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_defaultActor_initialize();
  swift_weakInit();
  swift_beginAccess();
  swift_weakAssign();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ScheduledActivity<RotationTask>);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v7;
  *(void *)&v8[OBJC_IVAR____TtC8CipherML12CMLXPCServer_rotationTask] = v9;
  type metadata accessor for TokenFetcherTask();
  uint64_t v10 = (void *)swift_allocObject();
  void v10[2] = v2;
  v10[3] = v3;
  v10[4] = v4;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ScheduledActivity<TokenFetcherTask>);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v10;
  *(void *)&v8[OBJC_IVAR____TtC8CipherML12CMLXPCServer_tokenFetcherTask] = v11;
  swift_retain();
  swift_retain();

  v13.receiver = v8;
  v13.super_class = (Class)type metadata accessor for CMLXPCServer();
  return objc_msgSendSuper2(&v13, sel_init);
}

uint64_t specialized CMLXPCServer.listener(_:shouldAcceptNewConnection:)(void *a1)
{
  uint64_t v3 = (void *)MEMORY[0x24C5B33F0](0xD000000000000021, 0x8000000249E965B0);
  id v4 = objc_msgSend(a1, sel_valueForEntitlement_, v3);

  if (v4)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v15, 0, sizeof(v15));
  }
  outlined init with take of Any?((uint64_t)v15, (uint64_t)v16);
  if (v17)
  {
    if ((swift_dynamicCast() & 1) != 0 && v14 == 1)
    {
      id v5 = objc_msgSend(self, sel_interfaceDescription);
      objc_msgSend(a1, sel_setExportedInterface_, v5);

      uint64_t v6 = *(void *)(v1 + OBJC_IVAR____TtC8CipherML12CMLXPCServer_requestsManager);
      type metadata accessor for XPCHandler();
      uint64_t v7 = swift_allocObject();
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = a1;
      swift_retain();
      id v8 = a1;
      objc_msgSend(v8, sel_setExportedObject_, v7);
      swift_release();
      objc_msgSend(v8, sel_resume);
      return 1;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)v16);
  }
  if (one-time initialization token for framework != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Logger.framework);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v11, v12))
  {
    objc_super v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)objc_super v13 = 0;
    _os_log_impl(&dword_249C3F000, v11, v12, "Client does not have specified entitlement", v13, 2u);
    MEMORY[0x24C5B4790](v13, -1, -1);
  }

  return 0;
}

uint64_t type metadata accessor for CMLXPCServer()
{
  return self;
}

uint64_t method lookup function for CMLXPCServer(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CMLXPCServer);
}

uint64_t dispatch thunk of CMLXPCServer.__allocating_init(requestsManager:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of CMLXPCServer.start()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x78))();
}

uint64_t dispatch thunk of CMLXPCServer.registerScheduledTasks()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x80))();
}

uint64_t dispatch thunk of CMLXPCServer.listener(_:shouldAcceptNewConnection:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x88))();
}

uint64_t outlined destroy of Any?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t partial apply for specialized implicit closure #2 in implicit closure #1 in ScheduledActivity.register()()
{
  *(void *)(v1 + 16) = v0;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 24) = v2;
  *uint64_t v2 = v1;
  v2[1] = partial apply for specialized implicit closure #2 in implicit closure #1 in ScheduledActivity.register();
  uint64_t v3 = async function pointer to specialized implicit closure #2 in implicit closure #1 in ScheduledActivity.register();
  return ((uint64_t (__cdecl *)())((char *)&async function pointer to specialized implicit closure #2 in implicit closure #1 in ScheduledActivity.register()
                                + v3))();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v5;

  *(void *)(v1 + 16) = v0;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 24) = v2;
  *uint64_t v2 = v1;
  v2[1] = partial apply for specialized implicit closure #2 in implicit closure #1 in ScheduledActivity.register();
  uint64_t v3 = async function pointer to specialized implicit closure #2 in implicit closure #1 in ScheduledActivity.register();
  return ((uint64_t (*)(uint64_t *))((char *)&async function pointer to specialized implicit closure #2 in implicit closure #1 in ScheduledActivity.register()
                                            + v3))((uint64_t *)(v1 + 16));
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v5;

  *(void *)(v1 + 16) = v0;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 24) = v2;
  *uint64_t v2 = v1;
  v2[1] = TokenFetcher.backgroundTokenFetch();
  uint64_t v3 = async function pointer to specialized implicit closure #2 in implicit closure #1 in ScheduledActivity.register();
  return ((uint64_t (*)(void *))((char *)&async function pointer to specialized implicit closure #2 in implicit closure #1 in ScheduledActivity.register()
                                           + v3))((void *)(v1 + 16));
}

uint64_t partial apply for closure #1 in ScheduledActivity.registerTask(identifier:handler:)(void *a1)
{
  return closure #1 in ScheduledActivity.registerTask(identifier:handler:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t block_copy_helper_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_4()
{
  return swift_release();
}

uint64_t objectdestroyTm_1()
{
  swift_bridgeObjectRelease();
  swift_release();
  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t AspireHeEvaluationKeyConfig.init()@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = MEMORY[0x263F8EE78];
  *(unsigned char *)(a1 + 8) = 0;
  uint64_t v2 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  UnknownStorage.init()();
  uint64_t v3 = a1 + *(int *)(v2 + 28);
  uint64_t v4 = type metadata accessor for AspireHeEncryptionParameters(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(v3, 1, 1, v4);
}

uint64_t type metadata accessor for AspireHeEvaluationKeyConfig(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireHeEvaluationKeyConfig);
}

uint64_t type metadata accessor for AspireHeEncryptionParameters(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireHeEncryptionParameters);
}

uint64_t AspireHeEncryptionParameters.init()@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 1;
  *(void *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 48) = 1;
  *(void *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 64) = 1;
  type metadata accessor for AspireHeEncryptionParameters(0);
  return UnknownStorage.init()();
}

uint64_t AspireHeSerializedEvaluationKey.init()@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t v2 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  uint64_t v3 = a1 + *(int *)(v2 + 20);
  uint64_t v4 = type metadata accessor for AspireHeSerializedGaloisKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  uint64_t v5 = a1 + *(int *)(v2 + 24);
  uint64_t v6 = type metadata accessor for AspireHeSerializedRelinKey(0);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
  return v7(v5, 1, 1, v6);
}

uint64_t type metadata accessor for AspireHeSerializedEvaluationKey(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireHeSerializedEvaluationKey);
}

uint64_t type metadata accessor for AspireHeSerializedGaloisKey(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireHeSerializedGaloisKey);
}

uint64_t type metadata accessor for AspireHeSerializedRelinKey(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireHeSerializedRelinKey);
}

uint64_t AspireHeEvaluationKeyConfig.encryptionParameters.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + *(int *)(v6 + 28), (uint64_t)v5, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  uint64_t v7 = type metadata accessor for AspireHeEncryptionParameters(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return _s8CipherML28AspireHeEncryptionParametersVWObTm_0((uint64_t)v5, a1, type metadata accessor for AspireHeEncryptionParameters);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 1;
  *(void *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 48) = 1;
  *(void *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 64) = 1;
  UnknownStorage.init()();
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
}

uint64_t AspireHeSerializedKeySwitchKey.keySwitchKey.setter(uint64_t a1)
{
  return AspireHeSerializedKeySwitchKey.keySwitchKey.setter(a1, type metadata accessor for AspireHeSerializedKeySwitchKey, &demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?, type metadata accessor for AspireHeSerializedCiphertextVec, type metadata accessor for AspireHeSerializedCiphertextVec);
}

uint64_t AspireHeSerializedRelinKey.relinKey.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for AspireHeSerializedRelinKey(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + *(int *)(v6 + 20), (uint64_t)v5, &demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
  uint64_t v7 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return _s8CipherML28AspireHeEncryptionParametersVWObTm_0((uint64_t)v5, a1, type metadata accessor for AspireHeSerializedKeySwitchKey);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + *(int *)(v7 + 20);
  uint64_t v9 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
}

uint64_t AspireHeSerializedRelinKey.relinKey.setter(uint64_t a1)
{
  return AspireHeSerializedKeySwitchKey.keySwitchKey.setter(a1, type metadata accessor for AspireHeSerializedRelinKey, &demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?, type metadata accessor for AspireHeSerializedKeySwitchKey, type metadata accessor for AspireHeSerializedKeySwitchKey);
}

uint64_t AspireHeSerializedEvaluationKey.galoisKey.setter(uint64_t a1)
{
  return AspireHeSerializedKeySwitchKey.keySwitchKey.setter(a1, type metadata accessor for AspireHeSerializedEvaluationKey, &demangling cache variable for type metadata for AspireHeSerializedGaloisKey?, type metadata accessor for AspireHeSerializedGaloisKey, type metadata accessor for AspireHeSerializedGaloisKey);
}

uint64_t AspireHeSerializedKeySwitchKey.keySwitchKey.setter(uint64_t a1, uint64_t (*a2)(void), uint64_t *a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t v10 = v5 + *(int *)(a2(0) + 20);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v10, a3);
  _s8CipherML28AspireHeEncryptionParametersVWObTm_0(a1, v10, a4);
  uint64_t v11 = a5(0);
  os_log_type_t v12 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
  return v12(v10, 0, 1, v11);
}

uint64_t AspireHeSerializedEvaluationKey.relinKey.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AspireHeSerializedEvaluationKey(0) + 24);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v3, &demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
  _s8CipherML28AspireHeEncryptionParametersVWObTm_0(a1, v3, type metadata accessor for AspireHeSerializedRelinKey);
  uint64_t v4 = type metadata accessor for AspireHeSerializedRelinKey(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(v3, 0, 1, v4);
}

unint64_t AspireHeSecurityLevel.init(rawValue:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = result < 2;
  *(unsigned char *)(a2 + 9) = 0;
  return result;
}

uint64_t AspireHeSecurityLevel.rawValue.getter()
{
  if (v0[8]) {
    return *(void *)v0 != 0;
  }
  else {
    return *(void *)v0;
  }
}

uint64_t static AspireHeSecurityLevel.allCases.getter()
{
  return static AMDPbHE_APICode.allCases.getter(&one-time initialization token for allCases);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance AspireHeSecurityLevel@<X0>(void *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance AMDPbHE_APICode(&one-time initialization token for allCases, &static AspireHeSecurityLevel.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspireHeSecurityLevel(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type AspireHeSecurityLevel and conformance AspireHeSecurityLevel();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

uint64_t AspireHeErrorStdDev.init(rawValue:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = result == 0;
  *(unsigned char *)(a2 + 9) = 0;
  return result;
}

uint64_t AspireHeErrorStdDev.rawValue.getter()
{
  if (v0[8]) {
    return 0;
  }
  else {
    return *(void *)v0;
  }
}

uint64_t static AspireHeErrorStdDev.allCases.getter()
{
  return static AMDPbHE_APICode.allCases.getter(&one-time initialization token for allCases);
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance AspireHeErrorStdDev@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = result == 0;
  *(unsigned char *)(a2 + 9) = 0;
  return result;
}

uint64_t protocol witness for Enum.rawValue.getter in conformance AspireHeErrorStdDev()
{
  if (v0[8]) {
    return 0;
  }
  else {
    return *(void *)v0;
  }
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance AspireHeErrorStdDev@<X0>(void *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance AMDPbHE_APICode(&one-time initialization token for allCases, &static AspireHeErrorStdDev.allCases, a1);
}

void *protocol witness for RawRepresentable.init(rawValue:) in conformance AspireHeErrorStdDev@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  BOOL v2 = *result == 0;
  *(void *)a2 = *result;
  char v3 = v2;
  *(unsigned char *)(a2 + 8) = v3;
  *(unsigned char *)(a2 + 9) = 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance AspireHeErrorStdDev(void *a1@<X8>)
{
  if (*(unsigned char *)(v1 + 8)) {
    *a1 = 0;
  }
  else {
    *a1 = *(void *)v1;
  }
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspireHeErrorStdDev(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type AspireHeErrorStdDev and conformance AspireHeErrorStdDev();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AspireHeErrorStdDev(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (a1[1]) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *a1;
  }
  if (*((unsigned char *)a2 + 8)) {
    uint64_t v2 = 0;
  }
  return v3 == v2;
}

void AspireHeHeScheme.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
}

unint64_t AspireHeHeScheme.init(rawValue:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = result < 3;
  *(unsigned char *)(a2 + 9) = 0;
  return result;
}

uint64_t AspireHeHeScheme.rawValue.getter()
{
  return *(void *)v0;
}

uint64_t static AspireHeHeScheme.allCases.getter()
{
  return static AMDPbHE_APICode.allCases.getter(&one-time initialization token for allCases);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance AspireHeHeScheme@<X0>(void *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance AMDPbHE_APICode(&one-time initialization token for allCases, &static AspireHeHeScheme.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspireHeHeScheme(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type AspireHeHeScheme and conformance AspireHeHeScheme();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

uint64_t (*AspireHeSerializedDcrtPlaintext.poly.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireHeSerializedDcrtPlaintext.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AspireHeSerializedDcrtPlaintext.unknownFields.getter(type metadata accessor for AspireHeSerializedDcrtPlaintext, a1);
}

uint64_t AspireHeSerializedDcrtPlaintext.unknownFields.setter(uint64_t a1)
{
  return AspireHeSerializedDcrtPlaintext.unknownFields.setter(a1, type metadata accessor for AspireHeSerializedDcrtPlaintext);
}

uint64_t (*AspireHeSerializedDcrtPlaintext.unknownFields.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireHeSerializedDcrtPlaintext.init()@<X0>(_OWORD *a1@<X8>)
{
  return AspireHeSerializedDcrtPlaintext.init()((void (*)(void))type metadata accessor for AspireHeSerializedDcrtPlaintext, a1);
}

uint64_t (*AspireHeSerializedCiphertextVec.ciphertexts.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireHeSerializedCiphertextVec.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AspireHeSerializedDcrtPlaintext.unknownFields.getter(type metadata accessor for AspireHeSerializedCiphertextVec, a1);
}

uint64_t AspireHeSerializedDcrtPlaintext.unknownFields.getter@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1(0) + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t AspireHeSerializedCiphertextVec.unknownFields.setter(uint64_t a1)
{
  return AspireHeSerializedDcrtPlaintext.unknownFields.setter(a1, type metadata accessor for AspireHeSerializedCiphertextVec);
}

uint64_t AspireHeSerializedDcrtPlaintext.unknownFields.setter(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = v2 + *(int *)(a2(0) + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t (*AspireHeSerializedCiphertextVec.unknownFields.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireHeSerializedCiphertextVec.init()@<X0>(void *a1@<X8>)
{
  *a1 = MEMORY[0x263F8EE78];
  type metadata accessor for AspireHeSerializedCiphertextVec(0);
  return UnknownStorage.init()();
}

uint64_t AspireHeSerializedCiphertext.serializedCiphertextType.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1, a1, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
}

uint64_t AspireHeSerializedCiphertext.serializedCiphertextType.setter(uint64_t a1)
{
  return outlined assign with take of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?(a1, v1);
}

uint64_t (*AspireHeSerializedCiphertext.serializedCiphertextType.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireHeSerializedCiphertext.seeded.getter@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  uint64_t v7 = type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
LABEL_5:
    *a1 = xmmword_249E85DF0;
    a1[1] = xmmword_249E85DF0;
    type metadata accessor for AspireHeSerializedSeededCiphertext(0);
    return UnknownStorage.init()();
  }
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType((uint64_t)v6, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
    goto LABEL_5;
  }
  return _s8CipherML28AspireHeEncryptionParametersVWObTm_0((uint64_t)v6, (uint64_t)a1, type metadata accessor for AspireHeSerializedSeededCiphertext);
}

uint64_t AspireHeSerializedCiphertext.seeded.setter(uint64_t a1)
{
  return AspireHeSerializedCiphertext.seeded.setter(a1, type metadata accessor for AspireHeSerializedSeededCiphertext);
}

uint64_t AspireHeSerializedSeededCiphertext.init()@<X0>(_OWORD *a1@<X8>)
{
  *a1 = xmmword_249E85DF0;
  a1[1] = xmmword_249E85DF0;
  type metadata accessor for AspireHeSerializedSeededCiphertext(0);
  return UnknownStorage.init()();
}

void (*AspireHeSerializedCiphertext.seeded.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v2 = v1;
  uint64_t v4 = malloc(0x30uLL);
  *a1 = v4;
  *uint64_t v4 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  uint64_t v6 = malloc(*(void *)(*(void *)(v5 - 8) + 64));
  v4[1] = v6;
  size_t v7 = *(void *)(*(void *)(type metadata accessor for AspireHeSerializedSeededCiphertext(0) - 8) + 64);
  v4[2] = malloc(v7);
  uint64_t v8 = malloc(v7);
  v4[3] = v8;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  uint64_t v9 = type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(0);
  v4[4] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v4[5] = v10;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v6, 1, v9) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      _s8CipherML28AspireHeEncryptionParametersVWObTm_0((uint64_t)v6, (uint64_t)v8, type metadata accessor for AspireHeSerializedSeededCiphertext);
      return AspireHeSerializedCiphertext.seeded.modify;
    }
    outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType((uint64_t)v6, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
  }
  *uint64_t v8 = xmmword_249E85DF0;
  v8[1] = xmmword_249E85DF0;
  UnknownStorage.init()();
  return AspireHeSerializedCiphertext.seeded.modify;
}

void AspireHeSerializedCiphertext.seeded.modify(uint64_t **a1, char a2)
{
}

uint64_t AspireHeSerializedCiphertext.full.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  uint64_t v7 = type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1) {
      return _s8CipherML28AspireHeEncryptionParametersVWObTm_0((uint64_t)v6, a1, type metadata accessor for AspireHeSerializedFullCiphertext);
    }
    outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType((uint64_t)v6, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
  }
  *(_OWORD *)a1 = xmmword_249E85DF0;
  *(void *)(a1 + 16) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 24) = 0;
  type metadata accessor for AspireHeSerializedFullCiphertext(0);
  return UnknownStorage.init()();
}

uint64_t key path setter for AspireHeSerializedCiphertext.seeded : AspireHeSerializedCiphertext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  uint64_t v11 = a5(0);
  MEMORY[0x270FA5388](v11 - 8);
  objc_super v13 = (char *)&v16 - v12;
  outlined init with copy of AspireHeSerializedSeededCiphertext(a1, (uint64_t)&v16 - v12, a6);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(a2, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  _s8CipherML28AspireHeEncryptionParametersVWObTm_0((uint64_t)v13, a2, a7);
  uint64_t v14 = type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(a2, 0, 1, v14);
}

uint64_t AspireHeSerializedCiphertext.full.setter(uint64_t a1)
{
  return AspireHeSerializedCiphertext.seeded.setter(a1, type metadata accessor for AspireHeSerializedFullCiphertext);
}

uint64_t AspireHeSerializedCiphertext.seeded.setter(uint64_t a1, uint64_t (*a2)(void))
{
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v2, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  _s8CipherML28AspireHeEncryptionParametersVWObTm_0(a1, v2, a2);
  uint64_t v5 = type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(0);
  swift_storeEnumTagMultiPayload();
  uint64_t v6 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
  return v6(v2, 0, 1, v5);
}

uint64_t AspireHeSerializedFullCiphertext.init()@<X0>(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_249E85DF0;
  *(void *)(a1 + 16) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 24) = 0;
  type metadata accessor for AspireHeSerializedFullCiphertext(0);
  return UnknownStorage.init()();
}

void (*AspireHeSerializedCiphertext.full.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v2 = v1;
  uint64_t v4 = malloc(0x30uLL);
  *a1 = v4;
  *uint64_t v4 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  uint64_t v6 = malloc(*(void *)(*(void *)(v5 - 8) + 64));
  v4[1] = v6;
  size_t v7 = *(void *)(*(void *)(type metadata accessor for AspireHeSerializedFullCiphertext(0) - 8) + 64);
  v4[2] = malloc(v7);
  uint64_t v8 = malloc(v7);
  v4[3] = v8;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  uint64_t v9 = type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(0);
  v4[4] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v4[5] = v10;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v6, 1, v9) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
LABEL_6:
    *(_OWORD *)uint64_t v8 = xmmword_249E85DF0;
    v8[2] = MEMORY[0x263F8EE78];
    v8[3] = 0;
    UnknownStorage.init()();
    return AspireHeSerializedCiphertext.full.modify;
  }
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType((uint64_t)v6, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
    goto LABEL_6;
  }
  _s8CipherML28AspireHeEncryptionParametersVWObTm_0((uint64_t)v6, (uint64_t)v8, type metadata accessor for AspireHeSerializedFullCiphertext);
  return AspireHeSerializedCiphertext.full.modify;
}

void AspireHeSerializedCiphertext.full.modify(uint64_t **a1, char a2)
{
}

void AspireHeSerializedCiphertext.seeded.modify(uint64_t **a1, char a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  size_t v7 = *a1;
  uint64_t v8 = (*a1)[4];
  uint64_t v9 = (*a1)[5];
  uint64_t v10 = (void *)(*a1)[2];
  uint64_t v11 = (void *)(*a1)[3];
  uint64_t v13 = **a1;
  uint64_t v12 = (void *)(*a1)[1];
  if (a2)
  {
    outlined init with copy of AspireHeSerializedSeededCiphertext((*a1)[3], (uint64_t)v10, a5);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v13, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    _s8CipherML28AspireHeEncryptionParametersVWObTm_0((uint64_t)v10, v13, a3);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56))(v13, 0, 1, v8);
    outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType((uint64_t)v11, a6);
  }
  else
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(**a1, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    _s8CipherML28AspireHeEncryptionParametersVWObTm_0((uint64_t)v11, v13, a3);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56))(v13, 0, 1, v8);
  }
  free(v11);
  free(v10);
  free(v12);
  free(v7);
}

uint64_t AspireHeSerializedCiphertext.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AspireHeSerializedDcrtPlaintext.unknownFields.getter(type metadata accessor for AspireHeSerializedCiphertext, a1);
}

uint64_t AspireHeSerializedCiphertext.unknownFields.setter(uint64_t a1)
{
  return AspireHeSerializedDcrtPlaintext.unknownFields.setter(a1, type metadata accessor for AspireHeSerializedCiphertext);
}

uint64_t (*AspireHeSerializedCiphertext.unknownFields.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireHeSerializedCiphertext.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(a1, 1, 1, v2);
  type metadata accessor for AspireHeSerializedCiphertext(0);
  return UnknownStorage.init()();
}

uint64_t (*AspireHeSerializedSeededCiphertext.poly0.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireHeSerializedSeededCiphertext.seed.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  outlined copy of Data._Representation(v1, *(void *)(v0 + 24));
  return v1;
}

uint64_t AspireHeSerializedSeededCiphertext.seed.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = outlined consume of Data._Representation(*(void *)(v2 + 16), *(void *)(v2 + 24));
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*AspireHeSerializedSeededCiphertext.seed.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireHeSerializedSeededCiphertext.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AspireHeSerializedSeededCiphertext.unknownFields.getter(type metadata accessor for AspireHeSerializedSeededCiphertext, a1);
}

uint64_t AspireHeSerializedSeededCiphertext.unknownFields.setter(uint64_t a1)
{
  return AspireHeSerializedSeededCiphertext.unknownFields.setter(a1, type metadata accessor for AspireHeSerializedSeededCiphertext);
}

uint64_t (*AspireHeSerializedSeededCiphertext.unknownFields.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t (*AspireHeSerializedFullCiphertext.polys.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t (*AspireHeSerializedFullCiphertext.skipLsbs.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireHeSerializedFullCiphertext.correctionFactor.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t AspireHeSerializedFullCiphertext.correctionFactor.setter(uint64_t result)
{
  *(void *)(v1 + 24) = result;
  return result;
}

uint64_t (*AspireHeSerializedFullCiphertext.correctionFactor.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireHeSerializedFullCiphertext.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AspireHeSerializedFullCiphertext(0) + 28);
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t AspireHeSerializedFullCiphertext.unknownFields.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AspireHeSerializedFullCiphertext(0) + 28);
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);
  return v5(v3, a1, v4);
}

uint64_t (*AspireHeSerializedFullCiphertext.unknownFields.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireHeSerializedKeySwitchKey.keySwitchKey.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + *(int *)(v6 + 20), (uint64_t)v5, &demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
  uint64_t v7 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return _s8CipherML28AspireHeEncryptionParametersVWObTm_0((uint64_t)v5, (uint64_t)a1, type metadata accessor for AspireHeSerializedCiphertextVec);
  }
  *a1 = MEMORY[0x263F8EE78];
  UnknownStorage.init()();
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
}

uint64_t key path getter for AspireHeSerializedKeySwitchKey.keySwitchKey : AspireHeSerializedKeySwitchKey@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v7 + 20), (uint64_t)v6, &demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
  uint64_t v8 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v6, 1, v8) != 1) {
    return _s8CipherML28AspireHeEncryptionParametersVWObTm_0((uint64_t)v6, (uint64_t)a2, type metadata accessor for AspireHeSerializedCiphertextVec);
  }
  *a2 = MEMORY[0x263F8EE78];
  UnknownStorage.init()();
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
}

uint64_t key path setter for AspireHeSerializedKeySwitchKey.keySwitchKey : AspireHeSerializedKeySwitchKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AspireHeSerializedSeededCiphertext(a1, (uint64_t)v7, type metadata accessor for AspireHeSerializedCiphertextVec);
  uint64_t v8 = a2 + *(int *)(type metadata accessor for AspireHeSerializedKeySwitchKey(0) + 20);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v8, &demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
  _s8CipherML28AspireHeEncryptionParametersVWObTm_0((uint64_t)v7, v8, type metadata accessor for AspireHeSerializedCiphertextVec);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

void (*AspireHeSerializedKeySwitchKey.keySwitchKey.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for AspireHeSerializedKeySwitchKey(0) + 20);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    *uint64_t v10 = MEMORY[0x263F8EE78];
    UnknownStorage.init()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
  }
  else
  {
    _s8CipherML28AspireHeEncryptionParametersVWObTm_0((uint64_t)v5, (uint64_t)v10, type metadata accessor for AspireHeSerializedCiphertextVec);
  }
  return AspireHeSerializedKeySwitchKey.keySwitchKey.modify;
}

void AspireHeSerializedKeySwitchKey.keySwitchKey.modify(uint64_t a1, char a2)
{
}

BOOL AspireHeSerializedKeySwitchKey.hasKeySwitchKey.getter()
{
  return AspireHeSerializedKeySwitchKey.hasKeySwitchKey.getter(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?, (uint64_t (*)(void, double))type metadata accessor for AspireHeSerializedKeySwitchKey, type metadata accessor for AspireHeSerializedCiphertextVec);
}

Swift::Void __swiftcall AspireHeSerializedKeySwitchKey.clearKeySwitchKey()()
{
}

uint64_t (*AspireHeSerializedKeySwitchKey.unknownFields.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireHeSerializedKeySwitchKey.init()@<X0>(uint64_t a1@<X8>)
{
  return AspireHeSerializedKeySwitchKey.init()(type metadata accessor for AspireHeSerializedKeySwitchKey, type metadata accessor for AspireHeSerializedCiphertextVec, a1);
}

uint64_t (*AspireHeSerializedGaloisKey.keySwitchKeys.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireHeSerializedGaloisKey.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AspireHeSerializedDcrtPlaintext.unknownFields.getter(type metadata accessor for AspireHeSerializedGaloisKey, a1);
}

uint64_t AspireHeSerializedGaloisKey.unknownFields.setter(uint64_t a1)
{
  return AspireHeSerializedDcrtPlaintext.unknownFields.setter(a1, type metadata accessor for AspireHeSerializedGaloisKey);
}

uint64_t (*AspireHeSerializedGaloisKey.unknownFields.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireHeSerializedGaloisKey.init()@<X0>(unint64_t *a1@<X8>)
{
  *a1 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  type metadata accessor for AspireHeSerializedGaloisKey(0);
  return UnknownStorage.init()();
}

uint64_t key path getter for AspireHeSerializedRelinKey.relinKey : AspireHeSerializedRelinKey@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for AspireHeSerializedRelinKey(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v7 + 20), (uint64_t)v6, &demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
  uint64_t v8 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v6, 1, v8) != 1) {
    return _s8CipherML28AspireHeEncryptionParametersVWObTm_0((uint64_t)v6, a2, type metadata accessor for AspireHeSerializedKeySwitchKey);
  }
  UnknownStorage.init()();
  uint64_t v9 = a2 + *(int *)(v8 + 20);
  uint64_t v10 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
}

uint64_t key path setter for AspireHeSerializedRelinKey.relinKey : AspireHeSerializedRelinKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AspireHeSerializedSeededCiphertext(a1, (uint64_t)v7, type metadata accessor for AspireHeSerializedKeySwitchKey);
  uint64_t v8 = a2 + *(int *)(type metadata accessor for AspireHeSerializedRelinKey(0) + 20);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v8, &demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
  _s8CipherML28AspireHeEncryptionParametersVWObTm_0((uint64_t)v7, v8, type metadata accessor for AspireHeSerializedKeySwitchKey);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

void (*AspireHeSerializedRelinKey.relinKey.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for AspireHeSerializedRelinKey(0) + 20);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[*(int *)(v6 + 20)];
    uint64_t v13 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
  }
  else
  {
    _s8CipherML28AspireHeEncryptionParametersVWObTm_0((uint64_t)v5, (uint64_t)v10, type metadata accessor for AspireHeSerializedKeySwitchKey);
  }
  return AspireHeSerializedRelinKey.relinKey.modify;
}

void AspireHeSerializedRelinKey.relinKey.modify(uint64_t a1, char a2)
{
}

BOOL AspireHeSerializedRelinKey.hasRelinKey.getter()
{
  return AspireHeSerializedKeySwitchKey.hasKeySwitchKey.getter(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?, (uint64_t (*)(void, double))type metadata accessor for AspireHeSerializedRelinKey, type metadata accessor for AspireHeSerializedKeySwitchKey);
}

BOOL AspireHeSerializedKeySwitchKey.hasKeySwitchKey.getter(uint64_t *a1, uint64_t (*a2)(void, double), uint64_t (*a3)(void))
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(a1);
  double v8 = MEMORY[0x270FA5388](v7 - 8);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = a2(0, v8);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v3 + *(int *)(v11 + 20), (uint64_t)v10, a1);
  uint64_t v12 = a3(0);
  BOOL v13 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48))(v10, 1, v12) != 1;
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v10, a1);
  return v13;
}

Swift::Void __swiftcall AspireHeSerializedRelinKey.clearRelinKey()()
{
}

uint64_t AspireHeSerializedKeySwitchKey.clearKeySwitchKey()(uint64_t (*a1)(void), uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t v6 = v3 + *(int *)(a1(0) + 20);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v6, a2);
  uint64_t v7 = a3(0);
  double v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
  return v8(v6, 1, 1, v7);
}

uint64_t (*AspireHeSerializedRelinKey.unknownFields.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireHeSerializedRelinKey.init()@<X0>(uint64_t a1@<X8>)
{
  return AspireHeSerializedKeySwitchKey.init()(type metadata accessor for AspireHeSerializedRelinKey, type metadata accessor for AspireHeSerializedKeySwitchKey, a1);
}

uint64_t AspireHeSerializedKeySwitchKey.init()@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X8>)
{
  UnknownStorage.init()();
  uint64_t v6 = a3 + *(int *)(a1(0) + 20);
  uint64_t v7 = a2(0);
  double v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
  return v8(v6, 1, 1, v7);
}

uint64_t AspireHeSerializedSecretKey.polys.getter()
{
  uint64_t v1 = *(void *)v0;
  outlined copy of Data._Representation(*(void *)v0, *(void *)(v0 + 8));
  return v1;
}

uint64_t AspireHeSerializedSecretKey.polys.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = outlined consume of Data._Representation(*(void *)v2, *(void *)(v2 + 8));
  *(void *)uint64_t v2 = a1;
  *(void *)(v2 + 8) = a2;
  return result;
}

uint64_t (*AspireHeSerializedSecretKey.polys.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireHeSerializedSecretKey.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AspireHeSerializedDcrtPlaintext.unknownFields.getter(type metadata accessor for AspireHeSerializedSecretKey, a1);
}

uint64_t AspireHeSerializedSecretKey.unknownFields.setter(uint64_t a1)
{
  return AspireHeSerializedDcrtPlaintext.unknownFields.setter(a1, type metadata accessor for AspireHeSerializedSecretKey);
}

uint64_t (*AspireHeSerializedSecretKey.unknownFields.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireHeSerializedSecretKey.init()@<X0>(_OWORD *a1@<X8>)
{
  return AspireHeSerializedDcrtPlaintext.init()((void (*)(void))type metadata accessor for AspireHeSerializedSecretKey, a1);
}

uint64_t AspireHeSerializedDcrtPlaintext.init()@<X0>(void (*a1)(void)@<X0>, _OWORD *a2@<X8>)
{
  *a2 = xmmword_249E85DF0;
  a1(0);
  return UnknownStorage.init()();
}

uint64_t AspireHeSerializedEvaluationKey.galoisKey.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + *(int *)(v6 + 20), (uint64_t)v5, &demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
  uint64_t v7 = type metadata accessor for AspireHeSerializedGaloisKey(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return _s8CipherML28AspireHeEncryptionParametersVWObTm_0((uint64_t)v5, (uint64_t)a1, type metadata accessor for AspireHeSerializedGaloisKey);
  }
  *a1 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  UnknownStorage.init()();
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
}

uint64_t key path getter for AspireHeSerializedEvaluationKey.galoisKey : AspireHeSerializedEvaluationKey@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v7 + 20), (uint64_t)v6, &demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
  uint64_t v8 = type metadata accessor for AspireHeSerializedGaloisKey(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v6, 1, v8) != 1) {
    return _s8CipherML28AspireHeEncryptionParametersVWObTm_0((uint64_t)v6, (uint64_t)a2, type metadata accessor for AspireHeSerializedGaloisKey);
  }
  *a2 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  UnknownStorage.init()();
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
}

uint64_t key path setter for AspireHeSerializedEvaluationKey.galoisKey : AspireHeSerializedEvaluationKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AspireHeSerializedGaloisKey(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AspireHeSerializedSeededCiphertext(a1, (uint64_t)v7, type metadata accessor for AspireHeSerializedGaloisKey);
  uint64_t v8 = a2 + *(int *)(type metadata accessor for AspireHeSerializedEvaluationKey(0) + 20);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v8, &demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
  _s8CipherML28AspireHeEncryptionParametersVWObTm_0((uint64_t)v7, v8, type metadata accessor for AspireHeSerializedGaloisKey);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

void (*AspireHeSerializedEvaluationKey.galoisKey.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for AspireHeSerializedGaloisKey(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for AspireHeSerializedEvaluationKey(0) + 20);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    *uint64_t v10 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    UnknownStorage.init()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
  }
  else
  {
    _s8CipherML28AspireHeEncryptionParametersVWObTm_0((uint64_t)v5, (uint64_t)v10, type metadata accessor for AspireHeSerializedGaloisKey);
  }
  return AspireHeSerializedEvaluationKey.galoisKey.modify;
}

void AspireHeSerializedEvaluationKey.galoisKey.modify(uint64_t a1, char a2)
{
}

BOOL AspireHeSerializedEvaluationKey.hasGaloisKey.getter()
{
  return AspireHeSerializedKeySwitchKey.hasKeySwitchKey.getter(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?, (uint64_t (*)(void, double))type metadata accessor for AspireHeSerializedEvaluationKey, type metadata accessor for AspireHeSerializedGaloisKey);
}

Swift::Void __swiftcall AspireHeSerializedEvaluationKey.clearGaloisKey()()
{
}

uint64_t AspireHeSerializedEvaluationKey.relinKey.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + *(int *)(v6 + 24), (uint64_t)v5, &demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
  uint64_t v7 = type metadata accessor for AspireHeSerializedRelinKey(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return _s8CipherML28AspireHeEncryptionParametersVWObTm_0((uint64_t)v5, a1, type metadata accessor for AspireHeSerializedRelinKey);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + *(int *)(v7 + 20);
  uint64_t v9 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
}

uint64_t key path getter for AspireHeSerializedEvaluationKey.relinKey : AspireHeSerializedEvaluationKey@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v7 + 24), (uint64_t)v6, &demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
  uint64_t v8 = type metadata accessor for AspireHeSerializedRelinKey(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v6, 1, v8) != 1) {
    return _s8CipherML28AspireHeEncryptionParametersVWObTm_0((uint64_t)v6, a2, type metadata accessor for AspireHeSerializedRelinKey);
  }
  UnknownStorage.init()();
  uint64_t v9 = a2 + *(int *)(v8 + 20);
  uint64_t v10 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
}

uint64_t key path setter for AspireHeSerializedEvaluationKey.relinKey : AspireHeSerializedEvaluationKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AspireHeSerializedRelinKey(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AspireHeSerializedSeededCiphertext(a1, (uint64_t)v7, type metadata accessor for AspireHeSerializedRelinKey);
  uint64_t v8 = a2 + *(int *)(type metadata accessor for AspireHeSerializedEvaluationKey(0) + 24);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v8, &demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
  _s8CipherML28AspireHeEncryptionParametersVWObTm_0((uint64_t)v7, v8, type metadata accessor for AspireHeSerializedRelinKey);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

void (*AspireHeSerializedEvaluationKey.relinKey.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for AspireHeSerializedRelinKey(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for AspireHeSerializedEvaluationKey(0) + 24);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[*(int *)(v6 + 20)];
    uint64_t v13 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
  }
  else
  {
    _s8CipherML28AspireHeEncryptionParametersVWObTm_0((uint64_t)v5, (uint64_t)v10, type metadata accessor for AspireHeSerializedRelinKey);
  }
  return AspireHeSerializedEvaluationKey.relinKey.modify;
}

void AspireHeSerializedEvaluationKey.relinKey.modify(uint64_t a1, char a2)
{
}

BOOL AspireHeSerializedEvaluationKey.hasRelinKey.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v0 + *(int *)(v4 + 24), (uint64_t)v3, &demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
  uint64_t v5 = type metadata accessor for AspireHeSerializedRelinKey(0);
  BOOL v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v3, &demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
  return v6;
}

Swift::Void __swiftcall AspireHeSerializedEvaluationKey.clearRelinKey()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for AspireHeSerializedEvaluationKey(0) + 24);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v1, &demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
  uint64_t v2 = type metadata accessor for AspireHeSerializedRelinKey(0);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);
  v3(v1, 1, 1, v2);
}

uint64_t (*AspireHeSerializedEvaluationKey.unknownFields.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t key path setter for AspireHeEvaluationKeyConfig.encryptionParameters : AspireHeEvaluationKeyConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AspireHeEncryptionParameters(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AspireHeSerializedSeededCiphertext(a1, (uint64_t)v7, type metadata accessor for AspireHeEncryptionParameters);
  uint64_t v8 = a2 + *(int *)(type metadata accessor for AspireHeEvaluationKeyConfig(0) + 28);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v8, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  _s8CipherML28AspireHeEncryptionParametersVWObTm_0((uint64_t)v7, v8, type metadata accessor for AspireHeEncryptionParameters);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

uint64_t AspireHeEvaluationKeyConfig.encryptionParameters.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AspireHeEvaluationKeyConfig(0) + 28);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v3, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  _s8CipherML28AspireHeEncryptionParametersVWObTm_0(a1, v3, type metadata accessor for AspireHeEncryptionParameters);
  uint64_t v4 = type metadata accessor for AspireHeEncryptionParameters(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(v3, 0, 1, v4);
}

void (*AspireHeEvaluationKeyConfig.encryptionParameters.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for AspireHeEncryptionParameters(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for AspireHeEvaluationKeyConfig(0) + 28);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    *uint64_t v10 = 0;
    v10[1] = 0;
    void v10[2] = MEMORY[0x263F8EE78];
    v10[3] = 0;
    *((unsigned char *)v10 + 32) = 1;
    v10[5] = 0;
    *((unsigned char *)v10 + 48) = 1;
    v10[7] = 0;
    *((unsigned char *)v10 + 64) = 1;
    UnknownStorage.init()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  }
  else
  {
    _s8CipherML28AspireHeEncryptionParametersVWObTm_0((uint64_t)v5, (uint64_t)v10, type metadata accessor for AspireHeEncryptionParameters);
  }
  return AspireHeEvaluationKeyConfig.encryptionParameters.modify;
}

void AspireHeEvaluationKeyConfig.encryptionParameters.modify(uint64_t a1, char a2)
{
}

void AspireHeSerializedKeySwitchKey.keySwitchKey.modify(uint64_t a1, char a2, uint64_t *a3, uint64_t (*a4)(void), uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  uint64_t v8 = *(void **)a1;
  uint64_t v9 = *(int *)(*(void *)a1 + 48);
  uint64_t v10 = *(void **)(*(void *)a1 + 32);
  uint64_t v11 = *(void **)(*(void *)a1 + 40);
  uint64_t v12 = *(void *)(*(void *)a1 + 16);
  uint64_t v13 = *(void *)(*(void *)a1 + 24);
  uint64_t v14 = *(void **)(*(void *)a1 + 8);
  uint64_t v15 = **(void **)a1 + v9;
  if (a2)
  {
    outlined init with copy of AspireHeSerializedSeededCiphertext(*(void *)(*(void *)a1 + 40), (uint64_t)v10, a5);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v15, a3);
    _s8CipherML28AspireHeEncryptionParametersVWObTm_0((uint64_t)v10, v15, a4);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(v15, 0, 1, v12);
    outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType((uint64_t)v11, a6);
  }
  else
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(**(void **)a1 + v9, a3);
    _s8CipherML28AspireHeEncryptionParametersVWObTm_0((uint64_t)v11, v15, a4);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(v15, 0, 1, v12);
  }
  free(v11);
  free(v10);
  free(v14);
  free(v8);
}

BOOL AspireHeEvaluationKeyConfig.hasEncryptionParameters.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v0 + *(int *)(v4 + 28), (uint64_t)v3, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  uint64_t v5 = type metadata accessor for AspireHeEncryptionParameters(0);
  BOOL v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v3, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  return v6;
}

Swift::Void __swiftcall AspireHeEvaluationKeyConfig.clearEncryptionParameters()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for AspireHeEvaluationKeyConfig(0) + 28);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v1, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  uint64_t v2 = type metadata accessor for AspireHeEncryptionParameters(0);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);
  v3(v1, 1, 1, v2);
}

uint64_t AspireHeEvaluationKeyConfig.galoisElements.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AspireHeEvaluationKeyConfig.galoisElements.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*AspireHeEvaluationKeyConfig.galoisElements.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireHeEvaluationKeyConfig.hasRelinKey_p.getter()
{
  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t AspireHeEvaluationKeyConfig.hasRelinKey_p.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 8) = result;
  return result;
}

uint64_t (*AspireHeEvaluationKeyConfig.hasRelinKey_p.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireHeEvaluationKeyConfig.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AspireHeSerializedSeededCiphertext.unknownFields.getter(type metadata accessor for AspireHeEvaluationKeyConfig, a1);
}

uint64_t AspireHeSerializedSeededCiphertext.unknownFields.getter@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1(0) + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  BOOL v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t AspireHeEvaluationKeyConfig.unknownFields.setter(uint64_t a1)
{
  return AspireHeSerializedSeededCiphertext.unknownFields.setter(a1, type metadata accessor for AspireHeEvaluationKeyConfig);
}

uint64_t AspireHeSerializedSeededCiphertext.unknownFields.setter(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = v2 + *(int *)(a2(0) + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  BOOL v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t (*AspireHeEvaluationKeyConfig.unknownFields.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireHeEncryptionParameters.polynomialDegree.getter()
{
  return *(void *)v0;
}

uint64_t AspireHeEncryptionParameters.polynomialDegree.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*AspireHeEncryptionParameters.polynomialDegree.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireHeEncryptionParameters.plaintextModulus.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t AspireHeEncryptionParameters.plaintextModulus.setter(uint64_t result)
{
  *(void *)(v1 + 8) = result;
  return result;
}

uint64_t (*AspireHeEncryptionParameters.plaintextModulus.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireHeEncryptionParameters.coefficientModuli.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AspireHeEncryptionParameters.coefficientModuli.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 16) = a1;
  return result;
}

uint64_t (*AspireHeEncryptionParameters.coefficientModuli.modify())()
{
  return Repeated.subscript.readspecialized ;
}

void AspireHeEncryptionParameters.errorStdDev.getter(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 32);
  *(void *)a1 = *(void *)(v1 + 24);
  *(unsigned char *)(a1 + 8) = v2;
}

uint64_t AspireHeEncryptionParameters.errorStdDev.setter(uint64_t result)
{
  char v2 = *(unsigned char *)(result + 8);
  *(void *)(v1 + 24) = *(void *)result;
  *(unsigned char *)(v1 + 32) = v2;
  return result;
}

uint64_t (*AspireHeEncryptionParameters.errorStdDev.modify())()
{
  return Repeated.subscript.readspecialized ;
}

void AspireHeEncryptionParameters.securityLevel.getter(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 48);
  *(void *)a1 = *(void *)(v1 + 40);
  *(unsigned char *)(a1 + 8) = v2;
}

uint64_t AspireHeEncryptionParameters.securityLevel.setter(uint64_t result)
{
  char v2 = *(unsigned char *)(result + 8);
  *(void *)(v1 + 40) = *(void *)result;
  *(unsigned char *)(v1 + 48) = v2;
  return result;
}

uint64_t (*AspireHeEncryptionParameters.securityLevel.modify())()
{
  return Repeated.subscript.readspecialized ;
}

void AspireHeEncryptionParameters.heScheme.getter(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 64);
  *(void *)a1 = *(void *)(v1 + 56);
  *(unsigned char *)(a1 + 8) = v2;
}

uint64_t AspireHeEncryptionParameters.heScheme.setter(uint64_t result)
{
  char v2 = *(unsigned char *)(result + 8);
  *(void *)(v1 + 56) = *(void *)result;
  *(unsigned char *)(v1 + 64) = v2;
  return result;
}

uint64_t (*AspireHeEncryptionParameters.heScheme.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireHeEncryptionParameters.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AspireHeEncryptionParameters(0) + 40);
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t AspireHeEncryptionParameters.unknownFields.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AspireHeEncryptionParameters(0) + 40);
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);
  return v5(v3, a1, v4);
}

uint64_t (*AspireHeEncryptionParameters.unknownFields.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t static AspireHeSecurityLevel._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireHeSecurityLevel._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspireHeSecurityLevel@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireHeSecurityLevel._protobuf_nameMap, a1);
}

uint64_t static AspireHeErrorStdDev._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireHeErrorStdDev._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspireHeErrorStdDev@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireHeErrorStdDev._protobuf_nameMap, a1);
}

uint64_t static AspireHeHeScheme._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireHeHeScheme._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspireHeHeScheme@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireHeHeScheme._protobuf_nameMap, a1);
}

unint64_t static AspireHeSerializedDcrtPlaintext.protoMessageName.getter()
{
  return 0xD000000000000021;
}

uint64_t static AspireHeSerializedDcrtPlaintext._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireHeSerializedDcrtPlaintext._protobuf_nameMap, a1);
}

uint64_t AspireHeSerializedDcrtPlaintext.decodeMessage<A>(decoder:)()
{
  return AspireHeSerializedDcrtPlaintext.decodeMessage<A>(decoder:)();
}

{
  uint64_t v0;
  uint64_t result;
  char v2;

  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0) {
      break;
    }
    if (result == 1) {
      dispatch thunk of Decoder.decodeSingularBytesField(value:)();
    }
  }
  return result;
}

uint64_t AspireHeSerializedDcrtPlaintext.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireHeSerializedDcrtPlaintext.traverse<A>(visitor:)(a1, a2, a3, (void (*)(void))type metadata accessor for AspireHeSerializedDcrtPlaintext);
}

uint64_t static AspireHeSerializedDcrtPlaintext.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static AspireHeSerializedDcrtPlaintext.== infix(_:_:)(a1, a2, type metadata accessor for AspireHeSerializedDcrtPlaintext) & 1;
}

Swift::Int AspireHeSerializedDcrtPlaintext.hashValue.getter()
{
  return AspireHeSerializedDcrtPlaintext.hashValue.getter((void (*)(void))type metadata accessor for AspireHeSerializedDcrtPlaintext, &lazy protocol witness table cache variable for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedDcrtPlaintext);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspireHeSerializedDcrtPlaintext()
{
  return 0xD000000000000021;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspireHeSerializedDcrtPlaintext()
{
  return AspireHeSerializedSecretKey.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspireHeSerializedDcrtPlaintext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireHeSerializedDcrtPlaintext.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspireHeSerializedDcrtPlaintext(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedDcrtPlaintext);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspireHeSerializedDcrtPlaintext@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireHeSerializedDcrtPlaintext._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspireHeSerializedDcrtPlaintext(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedDcrtPlaintext);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspireHeSerializedDcrtPlaintext(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedDcrtPlaintext);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AspireHeSerializedDcrtPlaintext(uint64_t a1, uint64_t a2)
{
  return specialized static AspireHeSerializedDcrtPlaintext.== infix(_:_:)(a1, a2, type metadata accessor for AspireHeSerializedDcrtPlaintext) & 1;
}

unint64_t static AspireHeSerializedCiphertextVec.protoMessageName.getter()
{
  return 0xD000000000000021;
}

uint64_t static AspireHeSerializedCiphertextVec._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireHeSerializedCiphertextVec._protobuf_nameMap, a1);
}

uint64_t AspireHeSerializedCiphertextVec.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 1)
      {
        type metadata accessor for AspireHeSerializedCiphertext(0);
        lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeSerializedCiphertext and conformance AspireHeSerializedCiphertext, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedCiphertext);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t AspireHeSerializedCiphertextVec.traverse<A>(visitor:)()
{
  if (!*(void *)(*(void *)v0 + 16)
    || (type metadata accessor for AspireHeSerializedCiphertext(0),
        lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeSerializedCiphertext and conformance AspireHeSerializedCiphertext, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedCiphertext), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
  {
    type metadata accessor for AspireHeSerializedCiphertextVec(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t static AspireHeSerializedCiphertextVec.== infix(_:_:)(char *a1, char *a2)
{
  return specialized static AspireHeSerializedCiphertextVec.== infix(_:_:)(a1, a2, (uint64_t (*)(void, void, double))specialized static Array<A>.== infix(_:_:), type metadata accessor for AspireHeSerializedCiphertextVec) & 1;
}

Swift::Int AspireHeSerializedCiphertextVec.hashValue.getter()
{
  return AspireHeSerializedDcrtPlaintext.hashValue.getter((void (*)(void))type metadata accessor for AspireHeSerializedCiphertextVec, &lazy protocol witness table cache variable for type AspireHeSerializedCiphertextVec and conformance AspireHeSerializedCiphertextVec, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedCiphertextVec);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspireHeSerializedCiphertextVec()
{
  return 0xD000000000000021;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspireHeSerializedCiphertextVec()
{
  return AspireHeSerializedCiphertextVec.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspireHeSerializedCiphertextVec()
{
  return AspireHeSerializedCiphertextVec.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspireHeSerializedCiphertextVec(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeSerializedCiphertextVec and conformance AspireHeSerializedCiphertextVec, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedCiphertextVec);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspireHeSerializedCiphertextVec@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireHeSerializedCiphertextVec._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspireHeSerializedCiphertextVec(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeSerializedCiphertextVec and conformance AspireHeSerializedCiphertextVec, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedCiphertextVec);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspireHeSerializedCiphertextVec(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeSerializedCiphertextVec and conformance AspireHeSerializedCiphertextVec, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedCiphertextVec);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AspireHeSerializedCiphertextVec(char *a1, char *a2)
{
  return specialized static AspireHeSerializedCiphertextVec.== infix(_:_:)(a1, a2, (uint64_t (*)(void, void, double))specialized static Array<A>.== infix(_:_:), type metadata accessor for AspireHeSerializedCiphertextVec) & 1;
}

unint64_t static AspireHeSerializedCiphertext.protoMessageName.getter()
{
  return 0xD00000000000001ELL;
}

uint64_t static AspireHeSerializedCiphertext._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireHeSerializedCiphertext._protobuf_nameMap, a1);
}

uint64_t AspireHeSerializedCiphertext.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v4 || (v10 & 1) != 0) {
      break;
    }
    if (result == 2)
    {
      closure #2 in AspireHeSerializedCiphertext.decodeMessage<A>(decoder:)(v5, a1, a2, a3);
    }
    else if (result == 1)
    {
      closure #1 in AspireHeSerializedCiphertext.decodeMessage<A>(decoder:)(v5, a1, a2, a3);
    }
  }
  return result;
}

uint64_t closure #1 in AspireHeSerializedCiphertext.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v50 = a4;
  uint64_t v48 = a2;
  uint64_t v49 = a3;
  uint64_t v5 = type metadata accessor for AspireHeSerializedSeededCiphertext(0);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v42 = (uint64_t)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v45 = (char *)&v38 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(0);
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v38 - v18;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedSeededCiphertext?);
  MEMORY[0x270FA5388](v20 - 8);
  uint64_t v43 = (uint64_t)&v38 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v23 = MEMORY[0x270FA5388](v22);
  uint64_t v25 = (char *)&v38 - v24;
  uint64_t v44 = v6;
  uint64_t v26 = *(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56);
  uint64_t v47 = v5;
  uint64_t v27 = v5;
  uint64_t v28 = v26;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t, double))v26)((char *)&v38 - v24, 1, 1, v27, v23);
  uint64_t v41 = a1;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v12, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  uint64_t v40 = v14;
  int v29 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if (v29 == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v12, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    uint64_t v30 = v13;
    uint64_t v31 = v47;
  }
  else
  {
    uint64_t v39 = v28;
    uint64_t v32 = (uint64_t)v45;
    _s8CipherML28AspireHeEncryptionParametersVWObTm_0((uint64_t)v12, (uint64_t)v19, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
    _s8CipherML28AspireHeEncryptionParametersVWObTm_0((uint64_t)v19, (uint64_t)v16, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
    uint64_t v30 = v13;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType((uint64_t)v16, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
      uint64_t v31 = v47;
    }
    else
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v25, &demangling cache variable for type metadata for AspireHeSerializedSeededCiphertext?);
      _s8CipherML28AspireHeEncryptionParametersVWObTm_0((uint64_t)v16, v32, type metadata accessor for AspireHeSerializedSeededCiphertext);
      _s8CipherML28AspireHeEncryptionParametersVWObTm_0(v32, (uint64_t)v25, type metadata accessor for AspireHeSerializedSeededCiphertext);
      uint64_t v31 = v47;
      v39(v25, 0, 1, v47);
    }
  }
  uint64_t v33 = v46;
  lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeSerializedSeededCiphertext and conformance AspireHeSerializedSeededCiphertext, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedSeededCiphertext);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v33) {
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v25, &demangling cache variable for type metadata for AspireHeSerializedSeededCiphertext?);
  }
  uint64_t v35 = v43;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v25, v43, &demangling cache variable for type metadata for AspireHeSerializedSeededCiphertext?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v44 + 48))(v35, 1, v31) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v25, &demangling cache variable for type metadata for AspireHeSerializedSeededCiphertext?);
    return outlined destroy of AMDPbHEConfig.OneOf_Config?(v35, &demangling cache variable for type metadata for AspireHeSerializedSeededCiphertext?);
  }
  else
  {
    uint64_t v36 = v42;
    _s8CipherML28AspireHeEncryptionParametersVWObTm_0(v35, v42, type metadata accessor for AspireHeSerializedSeededCiphertext);
    if (v29 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v25, &demangling cache variable for type metadata for AspireHeSerializedSeededCiphertext?);
    uint64_t v37 = v41;
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v41, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    _s8CipherML28AspireHeEncryptionParametersVWObTm_0(v36, v37, type metadata accessor for AspireHeSerializedSeededCiphertext);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v30);
  }
}

uint64_t closure #2 in AspireHeSerializedCiphertext.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v50 = a4;
  uint64_t v48 = a2;
  uint64_t v49 = a3;
  uint64_t v5 = type metadata accessor for AspireHeSerializedFullCiphertext(0);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v42 = (uint64_t)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v45 = (char *)&v38 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(0);
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v38 - v18;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedFullCiphertext?);
  MEMORY[0x270FA5388](v20 - 8);
  uint64_t v43 = (uint64_t)&v38 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v23 = MEMORY[0x270FA5388](v22);
  uint64_t v25 = (char *)&v38 - v24;
  uint64_t v44 = v6;
  uint64_t v26 = *(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56);
  uint64_t v47 = v5;
  uint64_t v27 = v5;
  uint64_t v28 = v26;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t, double))v26)((char *)&v38 - v24, 1, 1, v27, v23);
  uint64_t v41 = a1;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v12, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  uint64_t v40 = v14;
  int v29 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if (v29 == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v12, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    uint64_t v30 = v13;
  }
  else
  {
    uint64_t v39 = v28;
    uint64_t v31 = (uint64_t)v45;
    _s8CipherML28AspireHeEncryptionParametersVWObTm_0((uint64_t)v12, (uint64_t)v19, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
    _s8CipherML28AspireHeEncryptionParametersVWObTm_0((uint64_t)v19, (uint64_t)v16, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
    uint64_t v30 = v13;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v25, &demangling cache variable for type metadata for AspireHeSerializedFullCiphertext?);
      _s8CipherML28AspireHeEncryptionParametersVWObTm_0((uint64_t)v16, v31, type metadata accessor for AspireHeSerializedFullCiphertext);
      _s8CipherML28AspireHeEncryptionParametersVWObTm_0(v31, (uint64_t)v25, type metadata accessor for AspireHeSerializedFullCiphertext);
      uint64_t v32 = v47;
      v39(v25, 0, 1, v47);
      goto LABEL_7;
    }
    outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType((uint64_t)v16, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
  }
  uint64_t v32 = v47;
LABEL_7:
  uint64_t v33 = v46;
  lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeSerializedFullCiphertext and conformance AspireHeSerializedFullCiphertext, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedFullCiphertext);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v33) {
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v25, &demangling cache variable for type metadata for AspireHeSerializedFullCiphertext?);
  }
  uint64_t v35 = v43;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v25, v43, &demangling cache variable for type metadata for AspireHeSerializedFullCiphertext?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v44 + 48))(v35, 1, v32) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v25, &demangling cache variable for type metadata for AspireHeSerializedFullCiphertext?);
    return outlined destroy of AMDPbHEConfig.OneOf_Config?(v35, &demangling cache variable for type metadata for AspireHeSerializedFullCiphertext?);
  }
  else
  {
    uint64_t v36 = v42;
    _s8CipherML28AspireHeEncryptionParametersVWObTm_0(v35, v42, type metadata accessor for AspireHeSerializedFullCiphertext);
    if (v29 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v25, &demangling cache variable for type metadata for AspireHeSerializedFullCiphertext?);
    uint64_t v37 = v41;
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v41, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    _s8CipherML28AspireHeEncryptionParametersVWObTm_0(v36, v37, type metadata accessor for AspireHeSerializedFullCiphertext);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v30);
  }
}

uint64_t AspireHeSerializedCiphertext.traverse<A>(visitor:)()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v0, (uint64_t)v4, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  uint64_t v5 = type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5) == 1) {
    goto LABEL_6;
  }
  if (swift_getEnumCaseMultiPayload() == 1) {
    closure #2 in AspireHeSerializedCiphertext.traverse<A>(visitor:)(v0);
  }
  else {
    closure #1 in AspireHeSerializedCiphertext.traverse<A>(visitor:)(v0);
  }
  uint64_t result = outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType((uint64_t)v4, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
  if (!v1)
  {
LABEL_6:
    type metadata accessor for AspireHeSerializedCiphertext(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in AspireHeSerializedCiphertext.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for AspireHeSerializedSeededCiphertext(0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v4, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  uint64_t v8 = type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v4, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() != 1)
  {
    _s8CipherML28AspireHeEncryptionParametersVWObTm_0((uint64_t)v4, (uint64_t)v7, type metadata accessor for AspireHeSerializedSeededCiphertext);
    lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeSerializedSeededCiphertext and conformance AspireHeSerializedSeededCiphertext, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedSeededCiphertext);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType((uint64_t)v7, type metadata accessor for AspireHeSerializedSeededCiphertext);
  }
  uint64_t result = outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType((uint64_t)v4, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
  __break(1u);
  return result;
}

uint64_t closure #2 in AspireHeSerializedCiphertext.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for AspireHeSerializedFullCiphertext(0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v4, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  uint64_t v8 = type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v4, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 1)
  {
    _s8CipherML28AspireHeEncryptionParametersVWObTm_0((uint64_t)v4, (uint64_t)v7, type metadata accessor for AspireHeSerializedFullCiphertext);
    lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeSerializedFullCiphertext and conformance AspireHeSerializedFullCiphertext, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedFullCiphertext);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType((uint64_t)v7, type metadata accessor for AspireHeSerializedFullCiphertext);
  }
  uint64_t result = outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType((uint64_t)v4, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
  __break(1u);
  return result;
}

Swift::Int AspireHeSerializedCiphertext.hashValue.getter()
{
  return AspireHeSerializedDcrtPlaintext.hashValue.getter((void (*)(void))type metadata accessor for AspireHeSerializedCiphertext, &lazy protocol witness table cache variable for type AspireHeSerializedCiphertext and conformance AspireHeSerializedCiphertext, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedCiphertext);
}

uint64_t protocol witness for Message.init() in conformance AspireHeSerializedCiphertext@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(a1, 1, 1, v2);
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspireHeSerializedCiphertext()
{
  return 0xD00000000000001ELL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspireHeSerializedCiphertext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireHeSerializedCiphertext.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspireHeSerializedCiphertext()
{
  return AspireHeSerializedCiphertext.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspireHeSerializedCiphertext(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeSerializedCiphertext and conformance AspireHeSerializedCiphertext, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedCiphertext);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspireHeSerializedCiphertext@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireHeSerializedCiphertext._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspireHeSerializedCiphertext(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeSerializedCiphertext and conformance AspireHeSerializedCiphertext, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedCiphertext);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspireHeSerializedCiphertext(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeSerializedCiphertext and conformance AspireHeSerializedCiphertext, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedCiphertext);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

unint64_t static AspireHeSerializedSeededCiphertext.protoMessageName.getter()
{
  return 0xD000000000000024;
}

uint64_t static AspireHeSerializedSeededCiphertext._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireHeSerializedSeededCiphertext._protobuf_nameMap, a1);
}

uint64_t AspireHeSerializedSeededCiphertext.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2 || result == 1) {
        dispatch thunk of Decoder.decodeSingularBytesField(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t AspireHeSerializedSeededCiphertext.traverse<A>(visitor:)()
{
  uint64_t v2 = *v0;
  unint64_t v3 = v0[1];
  switch(v3 >> 62)
  {
    case 1uLL:
      if ((int)v2 != v2 >> 32) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 2uLL:
      if (*(void *)(v2 + 16) != *(void *)(v2 + 24)) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 3uLL:
      goto LABEL_8;
    default:
      if ((v3 & 0xFF000000000000) == 0) {
        goto LABEL_8;
      }
LABEL_7:
      uint64_t result = dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
      if (!v1)
      {
LABEL_8:
        uint64_t v5 = v0[2];
        unint64_t v6 = v0[3];
        switch(v6 >> 62)
        {
          case 1uLL:
            if ((int)v5 != v5 >> 32) {
              goto LABEL_14;
            }
            goto LABEL_15;
          case 2uLL:
            if (*(void *)(v5 + 16) != *(void *)(v5 + 24)) {
              goto LABEL_14;
            }
            goto LABEL_15;
          case 3uLL:
            goto LABEL_15;
          default:
            if ((v6 & 0xFF000000000000) == 0) {
              goto LABEL_15;
            }
LABEL_14:
            uint64_t result = dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
            if (!v1)
            {
LABEL_15:
              type metadata accessor for AspireHeSerializedSeededCiphertext(0);
              uint64_t result = UnknownStorage.traverse<A>(visitor:)();
            }
            break;
        }
      }
      return result;
  }
}

Swift::Int AspireHeSerializedSeededCiphertext.hashValue.getter()
{
  return AspireHeSerializedDcrtPlaintext.hashValue.getter((void (*)(void))type metadata accessor for AspireHeSerializedSeededCiphertext, &lazy protocol witness table cache variable for type AspireHeSerializedSeededCiphertext and conformance AspireHeSerializedSeededCiphertext, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedSeededCiphertext);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspireHeSerializedSeededCiphertext()
{
  return 0xD000000000000024;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspireHeSerializedSeededCiphertext()
{
  return AspireHeSerializedSeededCiphertext.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspireHeSerializedSeededCiphertext()
{
  return AspireHeSerializedSeededCiphertext.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspireHeSerializedSeededCiphertext(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeSerializedSeededCiphertext and conformance AspireHeSerializedSeededCiphertext, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedSeededCiphertext);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspireHeSerializedSeededCiphertext@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireHeSerializedSeededCiphertext._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspireHeSerializedSeededCiphertext(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeSerializedSeededCiphertext and conformance AspireHeSerializedSeededCiphertext, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedSeededCiphertext);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspireHeSerializedSeededCiphertext(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeSerializedSeededCiphertext and conformance AspireHeSerializedSeededCiphertext, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedSeededCiphertext);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

unint64_t static AspireHeSerializedFullCiphertext.protoMessageName.getter()
{
  return 0xD000000000000022;
}

uint64_t static AspireHeSerializedFullCiphertext._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireHeSerializedFullCiphertext._protobuf_nameMap, a1);
}

uint64_t AspireHeSerializedFullCiphertext.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 3:
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
          break;
        case 2:
          dispatch thunk of Decoder.decodeRepeatedUInt32Field(value:)();
          break;
        case 1:
          dispatch thunk of Decoder.decodeSingularBytesField(value:)();
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t AspireHeSerializedFullCiphertext.traverse<A>(visitor:)()
{
  uint64_t v2 = *v0;
  unint64_t v3 = v0[1];
  switch(v3 >> 62)
  {
    case 1uLL:
      if ((int)v2 != v2 >> 32) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 2uLL:
      if (*(void *)(v2 + 16) != *(void *)(v2 + 24)) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 3uLL:
      goto LABEL_8;
    default:
      if ((v3 & 0xFF000000000000) == 0) {
        goto LABEL_8;
      }
LABEL_7:
      uint64_t result = dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
      if (!v1)
      {
LABEL_8:
        if (!*(void *)(v0[2] + 16)
          || (uint64_t result = dispatch thunk of Visitor.visitPackedUInt32Field(value:fieldNumber:)(), !v1))
        {
          if (!v0[3] || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v1))
          {
            type metadata accessor for AspireHeSerializedFullCiphertext(0);
            return UnknownStorage.traverse<A>(visitor:)();
          }
        }
      }
      return result;
  }
}

Swift::Int AspireHeSerializedFullCiphertext.hashValue.getter()
{
  return AspireHeSerializedDcrtPlaintext.hashValue.getter((void (*)(void))type metadata accessor for AspireHeSerializedFullCiphertext, &lazy protocol witness table cache variable for type AspireHeSerializedFullCiphertext and conformance AspireHeSerializedFullCiphertext, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedFullCiphertext);
}

uint64_t protocol witness for Message.init() in conformance AspireHeSerializedFullCiphertext@<X0>(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_249E85DF0;
  *(void *)(a1 + 16) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 24) = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspireHeSerializedFullCiphertext()
{
  return 0xD000000000000022;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspireHeSerializedFullCiphertext()
{
  return AspireHeSerializedFullCiphertext.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspireHeSerializedFullCiphertext()
{
  return AspireHeSerializedFullCiphertext.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspireHeSerializedFullCiphertext(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeSerializedFullCiphertext and conformance AspireHeSerializedFullCiphertext, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedFullCiphertext);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspireHeSerializedFullCiphertext@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireHeSerializedFullCiphertext._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspireHeSerializedFullCiphertext(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeSerializedFullCiphertext and conformance AspireHeSerializedFullCiphertext, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedFullCiphertext);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspireHeSerializedFullCiphertext(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeSerializedFullCiphertext and conformance AspireHeSerializedFullCiphertext, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedFullCiphertext);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

unint64_t static AspireHeSerializedKeySwitchKey.protoMessageName.getter()
{
  return 0xD000000000000020;
}

uint64_t static AspireHeSerializedKeySwitchKey._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireHeSerializedKeySwitchKey._protobuf_nameMap, a1);
}

uint64_t AspireHeSerializedKeySwitchKey.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireHeSerializedKeySwitchKey.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in AspireHeSerializedKeySwitchKey.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in AspireHeSerializedKeySwitchKey.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t AspireHeSerializedKeySwitchKey.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireHeSerializedKeySwitchKey.traverse<A>(visitor:)(a1, a2, a3, closure #1 in AspireHeSerializedKeySwitchKey.traverse<A>(visitor:));
}

uint64_t closure #1 in AspireHeSerializedKeySwitchKey.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v12 + 20), (uint64_t)v7, &demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v7, &demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
  }
  _s8CipherML28AspireHeEncryptionParametersVWObTm_0((uint64_t)v7, (uint64_t)v11, type metadata accessor for AspireHeSerializedCiphertextVec);
  lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeSerializedCiphertextVec and conformance AspireHeSerializedCiphertextVec, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedCiphertextVec);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType((uint64_t)v11, type metadata accessor for AspireHeSerializedCiphertextVec);
}

Swift::Int AspireHeSerializedKeySwitchKey.hashValue.getter()
{
  return AspireHeSerializedDcrtPlaintext.hashValue.getter((void (*)(void))type metadata accessor for AspireHeSerializedKeySwitchKey, &lazy protocol witness table cache variable for type AspireHeSerializedKeySwitchKey and conformance AspireHeSerializedKeySwitchKey, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedKeySwitchKey);
}

uint64_t protocol witness for Message.init() in conformance AspireHeSerializedKeySwitchKey@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance AspireHeSerializedKeySwitchKey(a1, type metadata accessor for AspireHeSerializedCiphertextVec, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspireHeSerializedKeySwitchKey()
{
  return 0xD000000000000020;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspireHeSerializedKeySwitchKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireHeSerializedKeySwitchKey.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspireHeSerializedKeySwitchKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireHeSerializedKeySwitchKey.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspireHeSerializedKeySwitchKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeSerializedKeySwitchKey and conformance AspireHeSerializedKeySwitchKey, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedKeySwitchKey);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspireHeSerializedKeySwitchKey@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireHeSerializedKeySwitchKey._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspireHeSerializedKeySwitchKey(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeSerializedKeySwitchKey and conformance AspireHeSerializedKeySwitchKey, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedKeySwitchKey);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspireHeSerializedKeySwitchKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeSerializedKeySwitchKey and conformance AspireHeSerializedKeySwitchKey, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedKeySwitchKey);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

unint64_t static AspireHeSerializedGaloisKey.protoMessageName.getter()
{
  return 0xD00000000000001DLL;
}

uint64_t static AspireHeSerializedGaloisKey._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireHeSerializedGaloisKey._protobuf_nameMap, a1);
}

uint64_t AspireHeSerializedGaloisKey.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireHeSerializedKeySwitchKey.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in AspireHeSerializedGaloisKey.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in AspireHeSerializedGaloisKey.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeMapField<A, B>(fieldType:value:)();
}

uint64_t AspireHeSerializedGaloisKey.traverse<A>(visitor:)()
{
  if (!*(void *)(*(void *)v0 + 16)
    || (type metadata accessor for ProtobufUInt64(),
        type metadata accessor for AspireHeSerializedKeySwitchKey(0),
        lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeSerializedKeySwitchKey and conformance AspireHeSerializedKeySwitchKey, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedKeySwitchKey), lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeSerializedKeySwitchKey and conformance AspireHeSerializedKeySwitchKey, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedKeySwitchKey), uint64_t result = dispatch thunk of Visitor.visitMapField<A, B>(fieldType:value:fieldNumber:)(), !v1))
  {
    type metadata accessor for AspireHeSerializedGaloisKey(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t static AspireHeSerializedGaloisKey.== infix(_:_:)(char *a1, char *a2)
{
  return specialized static AspireHeSerializedCiphertextVec.== infix(_:_:)(a1, a2, (uint64_t (*)(void, void, double))specialized static Dictionary<>.== infix(_:_:), type metadata accessor for AspireHeSerializedGaloisKey) & 1;
}

Swift::Int AspireHeSerializedGaloisKey.hashValue.getter()
{
  return AspireHeSerializedDcrtPlaintext.hashValue.getter((void (*)(void))type metadata accessor for AspireHeSerializedGaloisKey, &lazy protocol witness table cache variable for type AspireHeSerializedGaloisKey and conformance AspireHeSerializedGaloisKey, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedGaloisKey);
}

uint64_t protocol witness for Message.init() in conformance AspireHeSerializedGaloisKey@<X0>(unint64_t *a1@<X8>)
{
  *a1 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspireHeSerializedGaloisKey()
{
  return 0xD00000000000001DLL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspireHeSerializedGaloisKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireHeSerializedGaloisKey.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspireHeSerializedGaloisKey()
{
  return AspireHeSerializedGaloisKey.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspireHeSerializedGaloisKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeSerializedGaloisKey and conformance AspireHeSerializedGaloisKey, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedGaloisKey);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspireHeSerializedGaloisKey@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireHeSerializedGaloisKey._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspireHeSerializedGaloisKey(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeSerializedGaloisKey and conformance AspireHeSerializedGaloisKey, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedGaloisKey);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspireHeSerializedGaloisKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeSerializedGaloisKey and conformance AspireHeSerializedGaloisKey, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedGaloisKey);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AspireHeSerializedGaloisKey(char *a1, char *a2)
{
  return specialized static AspireHeSerializedCiphertextVec.== infix(_:_:)(a1, a2, (uint64_t (*)(void, void, double))specialized static Dictionary<>.== infix(_:_:), type metadata accessor for AspireHeSerializedGaloisKey) & 1;
}

unint64_t static AspireHeSerializedRelinKey.protoMessageName.getter()
{
  return 0xD00000000000001CLL;
}

uint64_t static AspireHeSerializedRelinKey._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireHeSerializedRelinKey._protobuf_nameMap, a1);
}

uint64_t AspireHeSerializedRelinKey.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireHeSerializedKeySwitchKey.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in AspireHeSerializedRelinKey.decodeMessage<A>(decoder:));
}

uint64_t AspireHeSerializedKeySwitchKey.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v7 = v4;
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v5 || (v12 & 1) != 0) {
      break;
    }
    if (result == 1) {
      a4(a1, v7, a2, a3);
    }
  }
  return result;
}

uint64_t closure #1 in AspireHeSerializedRelinKey.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t AspireHeSerializedRelinKey.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireHeSerializedKeySwitchKey.traverse<A>(visitor:)(a1, a2, a3, closure #1 in AspireHeSerializedRelinKey.traverse<A>(visitor:));
}

uint64_t AspireHeSerializedKeySwitchKey.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t result = a4(v4, a1, a2, a3);
  if (!v5) {
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in AspireHeSerializedRelinKey.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for AspireHeSerializedRelinKey(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v12 + 20), (uint64_t)v7, &demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v7, &demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
  }
  _s8CipherML28AspireHeEncryptionParametersVWObTm_0((uint64_t)v7, (uint64_t)v11, type metadata accessor for AspireHeSerializedKeySwitchKey);
  lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeSerializedKeySwitchKey and conformance AspireHeSerializedKeySwitchKey, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedKeySwitchKey);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType((uint64_t)v11, type metadata accessor for AspireHeSerializedKeySwitchKey);
}

Swift::Int AspireHeSerializedRelinKey.hashValue.getter()
{
  return AspireHeSerializedDcrtPlaintext.hashValue.getter((void (*)(void))type metadata accessor for AspireHeSerializedRelinKey, &lazy protocol witness table cache variable for type AspireHeSerializedRelinKey and conformance AspireHeSerializedRelinKey, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedRelinKey);
}

uint64_t protocol witness for Message.init() in conformance AspireHeSerializedRelinKey@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance AspireHeSerializedKeySwitchKey(a1, type metadata accessor for AspireHeSerializedKeySwitchKey, a2);
}

uint64_t protocol witness for Message.init() in conformance AspireHeSerializedKeySwitchKey@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X2>, uint64_t a3@<X8>)
{
  UnknownStorage.init()();
  uint64_t v6 = a3 + *(int *)(a1 + 20);
  uint64_t v7 = a2(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
  return v8(v6, 1, 1, v7);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspireHeSerializedRelinKey()
{
  return 0xD00000000000001CLL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspireHeSerializedRelinKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireHeSerializedRelinKey.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspireHeSerializedRelinKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireHeSerializedRelinKey.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspireHeSerializedRelinKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeSerializedRelinKey and conformance AspireHeSerializedRelinKey, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedRelinKey);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspireHeSerializedRelinKey@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireHeSerializedRelinKey._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspireHeSerializedRelinKey(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeSerializedRelinKey and conformance AspireHeSerializedRelinKey, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedRelinKey);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspireHeSerializedRelinKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeSerializedRelinKey and conformance AspireHeSerializedRelinKey, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedRelinKey);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

unint64_t static AspireHeSerializedSecretKey.protoMessageName.getter()
{
  return 0xD00000000000001DLL;
}

uint64_t static AspireHeSerializedSecretKey._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireHeSerializedSecretKey._protobuf_nameMap, a1);
}

uint64_t AspireHeSerializedSecretKey.decodeMessage<A>(decoder:)()
{
  return AspireHeSerializedDcrtPlaintext.decodeMessage<A>(decoder:)();
}

uint64_t AspireHeSerializedSecretKey.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireHeSerializedDcrtPlaintext.traverse<A>(visitor:)(a1, a2, a3, (void (*)(void))type metadata accessor for AspireHeSerializedSecretKey);
}

uint64_t AspireHeSerializedDcrtPlaintext.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  uint64_t v6 = *v4;
  unint64_t v7 = v4[1];
  switch(v7 >> 62)
  {
    case 1uLL:
      if ((int)v6 != v6 >> 32) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 2uLL:
      if (*(void *)(v6 + 16) != *(void *)(v6 + 24)) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 3uLL:
      goto LABEL_8;
    default:
      if ((v7 & 0xFF000000000000) == 0) {
        goto LABEL_8;
      }
LABEL_7:
      uint64_t result = dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
      if (!v5)
      {
LABEL_8:
        a4(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
      return result;
  }
}

uint64_t static AspireHeSerializedSecretKey.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static AspireHeSerializedDcrtPlaintext.== infix(_:_:)(a1, a2, type metadata accessor for AspireHeSerializedSecretKey) & 1;
}

Swift::Int AspireHeSerializedSecretKey.hashValue.getter()
{
  return AspireHeSerializedDcrtPlaintext.hashValue.getter((void (*)(void))type metadata accessor for AspireHeSerializedSecretKey, &lazy protocol witness table cache variable for type AspireHeSerializedSecretKey and conformance AspireHeSerializedSecretKey, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedSecretKey);
}

uint64_t protocol witness for Message.init() in conformance AspireHeSerializedSecretKey@<X0>(_OWORD *a1@<X8>)
{
  *a1 = xmmword_249E85DF0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspireHeSerializedSecretKey()
{
  return 0xD00000000000001DLL;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspireHeSerializedSecretKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireHeSerializedSecretKey.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspireHeSerializedSecretKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeSerializedSecretKey and conformance AspireHeSerializedSecretKey, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedSecretKey);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspireHeSerializedSecretKey@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireHeSerializedSecretKey._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspireHeSerializedSecretKey(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeSerializedSecretKey and conformance AspireHeSerializedSecretKey, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedSecretKey);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspireHeSerializedSecretKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeSerializedSecretKey and conformance AspireHeSerializedSecretKey, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedSecretKey);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AspireHeSerializedSecretKey(uint64_t a1, uint64_t a2)
{
  return specialized static AspireHeSerializedDcrtPlaintext.== infix(_:_:)(a1, a2, type metadata accessor for AspireHeSerializedSecretKey) & 1;
}

unint64_t static AspireHeSerializedEvaluationKey.protoMessageName.getter()
{
  return 0xD000000000000021;
}

uint64_t static AspireHeSerializedEvaluationKey._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireHeSerializedEvaluationKey._protobuf_nameMap, a1);
}

uint64_t AspireHeSerializedEvaluationKey.decodeMessage<A>(decoder:)()
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0) {
      break;
    }
    if (result == 2)
    {
      closure #2 in AspireHeSerializedEvaluationKey.decodeMessage<A>(decoder:)();
    }
    else if (result == 1)
    {
      closure #1 in AspireHeSerializedEvaluationKey.decodeMessage<A>(decoder:)();
    }
  }
  return result;
}

uint64_t closure #1 in AspireHeSerializedEvaluationKey.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t closure #2 in AspireHeSerializedEvaluationKey.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t AspireHeSerializedEvaluationKey.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = closure #1 in AspireHeSerializedEvaluationKey.traverse<A>(visitor:)(v3, a1, a2, a3);
  if (!v4)
  {
    closure #2 in AspireHeSerializedEvaluationKey.traverse<A>(visitor:)(v3, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in AspireHeSerializedEvaluationKey.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
  MEMORY[0x270FA5388](v5 - 8);
  unint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AspireHeSerializedGaloisKey(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v12 + 20), (uint64_t)v7, &demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v7, &demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
  }
  _s8CipherML28AspireHeEncryptionParametersVWObTm_0((uint64_t)v7, (uint64_t)v11, type metadata accessor for AspireHeSerializedGaloisKey);
  lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeSerializedGaloisKey and conformance AspireHeSerializedGaloisKey, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedGaloisKey);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType((uint64_t)v11, type metadata accessor for AspireHeSerializedGaloisKey);
}

uint64_t closure #2 in AspireHeSerializedEvaluationKey.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
  MEMORY[0x270FA5388](v5 - 8);
  unint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AspireHeSerializedRelinKey(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v12 + 24), (uint64_t)v7, &demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v7, &demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
  }
  _s8CipherML28AspireHeEncryptionParametersVWObTm_0((uint64_t)v7, (uint64_t)v11, type metadata accessor for AspireHeSerializedRelinKey);
  lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeSerializedRelinKey and conformance AspireHeSerializedRelinKey, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedRelinKey);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType((uint64_t)v11, type metadata accessor for AspireHeSerializedRelinKey);
}

Swift::Int AspireHeSerializedEvaluationKey.hashValue.getter()
{
  return AspireHeSerializedDcrtPlaintext.hashValue.getter((void (*)(void))type metadata accessor for AspireHeSerializedEvaluationKey, &lazy protocol witness table cache variable for type AspireHeSerializedEvaluationKey and conformance AspireHeSerializedEvaluationKey, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedEvaluationKey);
}

uint64_t protocol witness for Message.init() in conformance AspireHeSerializedEvaluationKey@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  uint64_t v4 = a2 + *(int *)(a1 + 20);
  uint64_t v5 = type metadata accessor for AspireHeSerializedGaloisKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v6 = a2 + *(int *)(a1 + 24);
  uint64_t v7 = type metadata accessor for AspireHeSerializedRelinKey(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
  return v8(v6, 1, 1, v7);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspireHeSerializedEvaluationKey()
{
  return 0xD000000000000021;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspireHeSerializedEvaluationKey()
{
  return AspireHeSerializedEvaluationKey.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspireHeSerializedEvaluationKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireHeSerializedEvaluationKey.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspireHeSerializedEvaluationKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeSerializedEvaluationKey and conformance AspireHeSerializedEvaluationKey, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedEvaluationKey);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspireHeSerializedEvaluationKey@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireHeSerializedEvaluationKey._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspireHeSerializedEvaluationKey(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeSerializedEvaluationKey and conformance AspireHeSerializedEvaluationKey, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedEvaluationKey);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspireHeSerializedEvaluationKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeSerializedEvaluationKey and conformance AspireHeSerializedEvaluationKey, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedEvaluationKey);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

unint64_t static AspireHeEvaluationKeyConfig.protoMessageName.getter()
{
  return 0xD00000000000001DLL;
}

uint64_t static AspireHeEvaluationKeyConfig._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireHeEvaluationKeyConfig._protobuf_nameMap, a1);
}

uint64_t AspireHeEvaluationKeyConfig.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 3:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        case 2:
          dispatch thunk of Decoder.decodeRepeatedUInt32Field(value:)();
          break;
        case 1:
          closure #1 in AspireHeEvaluationKeyConfig.decodeMessage<A>(decoder:)();
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #1 in AspireHeEvaluationKeyConfig.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t AspireHeEvaluationKeyConfig.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = closure #1 in AspireHeEvaluationKeyConfig.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3);
  if (!v4)
  {
    if (*(void *)(*(void *)v3 + 16)) {
      dispatch thunk of Visitor.visitPackedUInt32Field(value:fieldNumber:)();
    }
    if (v3[8] == 1) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    }
    type metadata accessor for AspireHeEvaluationKeyConfig(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in AspireHeEvaluationKeyConfig.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AspireHeEncryptionParameters(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v12 + 28), (uint64_t)v7, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v7, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  }
  _s8CipherML28AspireHeEncryptionParametersVWObTm_0((uint64_t)v7, (uint64_t)v11, type metadata accessor for AspireHeEncryptionParameters);
  lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext((unint64_t *)&lazy protocol witness table cache variable for type AspireHeEncryptionParameters and conformance AspireHeEncryptionParameters, (void (*)(uint64_t))type metadata accessor for AspireHeEncryptionParameters);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType((uint64_t)v11, type metadata accessor for AspireHeEncryptionParameters);
}

Swift::Int AspireHeEvaluationKeyConfig.hashValue.getter()
{
  return AspireHeSerializedDcrtPlaintext.hashValue.getter((void (*)(void))type metadata accessor for AspireHeEvaluationKeyConfig, &lazy protocol witness table cache variable for type AspireHeEvaluationKeyConfig and conformance AspireHeEvaluationKeyConfig, (void (*)(uint64_t))type metadata accessor for AspireHeEvaluationKeyConfig);
}

uint64_t protocol witness for Message.init() in conformance AspireHeEvaluationKeyConfig@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = MEMORY[0x263F8EE78];
  *(unsigned char *)(a2 + 8) = 0;
  UnknownStorage.init()();
  uint64_t v4 = a2 + *(int *)(a1 + 28);
  uint64_t v5 = type metadata accessor for AspireHeEncryptionParameters(0);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
  return v6(v4, 1, 1, v5);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspireHeEvaluationKeyConfig()
{
  return 0xD00000000000001DLL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspireHeEvaluationKeyConfig()
{
  return AspireHeEvaluationKeyConfig.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspireHeEvaluationKeyConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireHeEvaluationKeyConfig.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspireHeEvaluationKeyConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeEvaluationKeyConfig and conformance AspireHeEvaluationKeyConfig, (void (*)(uint64_t))type metadata accessor for AspireHeEvaluationKeyConfig);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspireHeEvaluationKeyConfig@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireHeEvaluationKeyConfig._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspireHeEvaluationKeyConfig(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeEvaluationKeyConfig and conformance AspireHeEvaluationKeyConfig, (void (*)(uint64_t))type metadata accessor for AspireHeEvaluationKeyConfig);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspireHeEvaluationKeyConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeEvaluationKeyConfig and conformance AspireHeEvaluationKeyConfig, (void (*)(uint64_t))type metadata accessor for AspireHeEvaluationKeyConfig);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

unint64_t static AspireHeEncryptionParameters.protoMessageName.getter()
{
  return 0xD00000000000001ELL;
}

uint64_t static AspireHeEncryptionParameters._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireHeEncryptionParameters._protobuf_nameMap, a1);
}

uint64_t AspireHeEncryptionParameters.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
          goto LABEL_6;
        case 3:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedUInt64Field(value:)();
          goto LABEL_6;
        case 4:
          lazy protocol witness table accessor for type AspireHeErrorStdDev and conformance AspireHeErrorStdDev();
          goto LABEL_5;
        case 5:
          lazy protocol witness table accessor for type AspireHeSecurityLevel and conformance AspireHeSecurityLevel();
          goto LABEL_5;
        case 6:
          lazy protocol witness table accessor for type AspireHeHeScheme and conformance AspireHeHeScheme();
LABEL_5:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
LABEL_6:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t AspireHeEncryptionParameters.traverse<A>(visitor:)()
{
  if (!*(void *)v0 || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v1))
  {
    if (!*(void *)(v0 + 8)
      || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v1))
    {
      if (!*(void *)(*(void *)(v0 + 16) + 16)
        || (uint64_t result = dispatch thunk of Visitor.visitPackedUInt64Field(value:fieldNumber:)(), !v1))
      {
        if ((*(unsigned char *)(v0 + 32) & 1) != 0
          || !*(void *)(v0 + 24)
          || (lazy protocol witness table accessor for type AspireHeErrorStdDev and conformance AspireHeErrorStdDev(),
              uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
              !v1))
        {
          if (!*(void *)(v0 + 40)
            || (lazy protocol witness table accessor for type AspireHeSecurityLevel and conformance AspireHeSecurityLevel(),
                uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
                !v1))
          {
            if (!*(void *)(v0 + 56)
              || (lazy protocol witness table accessor for type AspireHeHeScheme and conformance AspireHeHeScheme(),
                  uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
                  !v1))
            {
              type metadata accessor for AspireHeEncryptionParameters(0);
              return UnknownStorage.traverse<A>(visitor:)();
            }
          }
        }
      }
    }
  }
  return result;
}

Swift::Int AspireHeEncryptionParameters.hashValue.getter()
{
  return AspireHeSerializedDcrtPlaintext.hashValue.getter((void (*)(void))type metadata accessor for AspireHeEncryptionParameters, &lazy protocol witness table cache variable for type AspireHeEncryptionParameters and conformance AspireHeEncryptionParameters, (void (*)(uint64_t))type metadata accessor for AspireHeEncryptionParameters);
}

Swift::Int AspireHeSerializedDcrtPlaintext.hashValue.getter(void (*a1)(void), unint64_t *a2, void (*a3)(uint64_t))
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Message.init() in conformance AspireHeEncryptionParameters@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 1;
  *(void *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 48) = 1;
  *(void *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 64) = 1;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspireHeEncryptionParameters()
{
  return 0xD00000000000001ELL;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance AspireHeEncryptionParameters@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 40);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance AspireHeEncryptionParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 40);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance AspireHeEncryptionParameters())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspireHeEncryptionParameters()
{
  return AspireHeEncryptionParameters.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspireHeEncryptionParameters()
{
  return AspireHeEncryptionParameters.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspireHeEncryptionParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeEncryptionParameters and conformance AspireHeEncryptionParameters, (void (*)(uint64_t))type metadata accessor for AspireHeEncryptionParameters);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspireHeEncryptionParameters@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireHeEncryptionParameters._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspireHeEncryptionParameters(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext((unint64_t *)&lazy protocol witness table cache variable for type AspireHeEncryptionParameters and conformance AspireHeEncryptionParameters, (void (*)(uint64_t))type metadata accessor for AspireHeEncryptionParameters);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspireHeEncryptionParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext((unint64_t *)&lazy protocol witness table cache variable for type AspireHeEncryptionParameters and conformance AspireHeEncryptionParameters, (void (*)(uint64_t))type metadata accessor for AspireHeEncryptionParameters);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

uint64_t specialized static Dictionary<>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  __s1[2] = *MEMORY[0x263EF8340];
  uint64_t v4 = type metadata accessor for AspireApiPECConfig(0);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v153 = (uint64_t)&v146 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v152 = type metadata accessor for AspireApiPIRConfig(0);
  MEMORY[0x270FA5388](v152);
  uint64_t v151 = (uint64_t)&v146 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v160 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireApiConfig.OneOf_Config, AspireApiConfig.OneOf_Config));
  MEMORY[0x270FA5388](v160);
  uint64_t v8 = (char *)&v146 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v167 = type metadata accessor for AspireApiConfig.OneOf_Config(0);
  uint64_t v9 = *(void *)(v167 - 8);
  MEMORY[0x270FA5388](v167);
  uint64_t v154 = (uint64_t)&v146 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v155 = (uint64_t)&v146 - v12;
  MEMORY[0x270FA5388](v13);
  uint64_t v164 = (uint64_t)&v146 - v14;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v17 = (char *)&v146 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v166 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireApiConfig.OneOf_Config?, AspireApiConfig.OneOf_Config?));
  MEMORY[0x270FA5388](v166);
  uint64_t v19 = (char *)&v146 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v172 = type metadata accessor for AspireApiConfig(0);
  uint64_t v170 = *(void *)(v172 - 8);
  MEMORY[0x270FA5388](v172);
  uint64_t v173 = (uint64_t)&v146 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  double v23 = (char *)&v146 - v22;
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: AspireApiConfig)?);
  MEMORY[0x270FA5388](v24 - 8);
  uint64_t v26 = (uint64_t *)((char *)&v146 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v27);
  int v29 = (uint64_t *)((char *)&v146 - v28);
  if (a1 == a2) {
    return 1;
  }
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  uint64_t v171 = v23;
  int64_t v163 = 0;
  uint64_t v30 = *(void *)(a1 + 64);
  uint64_t v149 = a1 + 64;
  uint64_t v31 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v32 = -1;
  if (v31 < 64) {
    uint64_t v32 = ~(-1 << v31);
  }
  unint64_t v33 = v32 & v30;
  int v161 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  int64_t v150 = (unint64_t)(v31 + 63) >> 6;
  int64_t v148 = v150 - 1;
  uint64_t v159 = a2;
  uint64_t v34 = (uint64_t)v17;
  uint64_t v162 = v17;
  int v165 = v19;
  uint64_t v168 = v26;
  uint64_t v156 = (uint64_t *)((char *)&v146 - v28);
  uint64_t v158 = a1;
  uint64_t v157 = v8;
  if (!v33) {
    goto LABEL_8;
  }
LABEL_6:
  uint64_t v169 = (v33 - 1) & v33;
  unint64_t v35 = __clz(__rbit64(v33)) | (v163 << 6);
LABEL_7:
  uint64_t v36 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v35);
  uint64_t v38 = *v36;
  uint64_t v37 = v36[1];
  uint64_t v39 = *(void *)(a1 + 56) + *(void *)(v170 + 72) * v35;
  uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: AspireApiConfig));
  uint64_t v26 = v168;
  outlined init with copy of AspireHeSerializedSeededCiphertext(v39, (uint64_t)v168 + *(int *)(v40 + 48), type metadata accessor for AspireApiConfig);
  *uint64_t v26 = v38;
  v26[1] = v37;
  (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56))(v26, 0, 1, v40);
  swift_bridgeObjectRetain();
  uint64_t v34 = (uint64_t)v162;
  int v29 = v156;
  while (1)
  {
    outlined init with take of SymmetricPirClientConfig?((uint64_t)v26, (uint64_t)v29, &demangling cache variable for type metadata for (key: String, value: AspireApiConfig)?);
    uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: AspireApiConfig));
    uint64_t v46 = 1;
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v45 - 8) + 48))(v29, 1, v45) == 1) {
      return v46;
    }
    uint64_t v47 = v34;
    uint64_t v48 = (uint64_t)v29 + *(int *)(v45 + 48);
    uint64_t v49 = *v29;
    uint64_t v50 = v29[1];
    uint64_t v51 = (uint64_t)v171;
    _s8CipherML28AspireHeEncryptionParametersVWObTm_0(v48, (uint64_t)v171, type metadata accessor for AspireApiConfig);
    uint64_t v52 = specialized __RawDictionaryStorage.find<A>(_:)(v49, v50);
    char v54 = v53;
    swift_bridgeObjectRelease();
    if ((v54 & 1) == 0) {
      goto LABEL_169;
    }
    uint64_t v55 = *(void *)(a2 + 56) + *(void *)(v170 + 72) * v52;
    uint64_t v56 = v173;
    outlined init with copy of AspireHeSerializedSeededCiphertext(v55, v173, type metadata accessor for AspireApiConfig);
    uint64_t v57 = (uint64_t)v165;
    uint64_t v58 = (uint64_t)&v165[*(int *)(v166 + 48)];
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v56, (uint64_t)v165, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v51, v58, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
    uint64_t v59 = *v161;
    uint64_t v60 = v167;
    if ((*v161)(v57, 1, v167) != 1) {
      break;
    }
    unsigned int v61 = v59(v58, 1, v60);
    uint64_t v34 = v47;
    uint64_t v51 = (uint64_t)v171;
    if (v61 != 1)
    {
      int v142 = &demangling cache variable for type metadata for (AspireApiConfig.OneOf_Config?, AspireApiConfig.OneOf_Config?);
      goto LABEL_167;
    }
LABEL_42:
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v57, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
    uint64_t v73 = *(int *)(v172 + 20);
    uint64_t v74 = *(void *)(v173 + v73);
    unint64_t v75 = *(void *)(v173 + v73 + 8);
    uint64_t v76 = (uint64_t *)(v51 + v73);
    uint64_t v78 = *v76;
    unint64_t v77 = v76[1];
    uint64_t v79 = 0;
    switch(v75 >> 62)
    {
      case 1uLL:
        LODWORD(v79) = HIDWORD(v74) - v74;
        if (__OFSUB__(HIDWORD(v74), v74)) {
          goto LABEL_173;
        }
        uint64_t v79 = (int)v79;
LABEL_47:
        unint64_t v83 = v77 >> 62;
        switch(v77 >> 62)
        {
          case 1uLL:
            LODWORD(v84) = HIDWORD(v78) - v78;
            if (__OFSUB__(HIDWORD(v78), v78)) {
              goto LABEL_175;
            }
            uint64_t v84 = (int)v84;
LABEL_52:
            if (v79 != v84) {
              goto LABEL_168;
            }
            if (v79 < 1) {
              goto LABEL_154;
            }
            break;
          case 2uLL:
            uint64_t v86 = *(void *)(v78 + 16);
            uint64_t v85 = *(void *)(v78 + 24);
            BOOL v82 = __OFSUB__(v85, v86);
            uint64_t v84 = v85 - v86;
            if (!v82) {
              goto LABEL_52;
            }
            goto LABEL_176;
          case 3uLL:
            if (v79) {
              goto LABEL_168;
            }
            goto LABEL_154;
          default:
            uint64_t v84 = BYTE6(v77);
            goto LABEL_52;
        }
        break;
      case 2uLL:
        uint64_t v81 = *(void *)(v74 + 16);
        uint64_t v80 = *(void *)(v74 + 24);
        BOOL v82 = __OFSUB__(v80, v81);
        uint64_t v79 = v80 - v81;
        if (!v82) {
          goto LABEL_47;
        }
        goto LABEL_174;
      case 3uLL:
        goto LABEL_47;
      default:
        uint64_t v79 = BYTE6(v75);
        goto LABEL_47;
    }
    switch(v75 >> 62)
    {
      case 1uLL:
        if ((int)v74 > v74 >> 32) {
          goto LABEL_177;
        }
        outlined copy of Data._Representation(v74, v75);
        uint64_t v92 = __DataStorage._bytes.getter();
        if (v92)
        {
          uint64_t v93 = v92;
          uint64_t v94 = __DataStorage._offset.getter();
          if (__OFSUB__((int)v74, v94)) {
            goto LABEL_179;
          }
          uint64_t v95 = (const void *)(v93 + (int)v74 - v94);
        }
        else
        {
          uint64_t v95 = 0;
        }
        uint64_t v34 = (uint64_t)v162;
        uint64_t v51 = (uint64_t)v171;
        __DataStorage._length.getter();
        if (!v83)
        {
          __s1[0] = v78;
          LOWORD(__s1[1]) = v77;
          BYTE2(__s1[1]) = BYTE2(v77);
          BYTE3(__s1[1]) = BYTE3(v77);
          BYTE4(__s1[1]) = BYTE4(v77);
          BYTE5(__s1[1]) = BYTE5(v77);
          if (!v95) {
            goto LABEL_206;
          }
          int v132 = memcmp(v95, __s1, BYTE6(v77));
LABEL_145:
          outlined consume of Data._Representation(v74, v75);
          if (v132) {
            goto LABEL_168;
          }
          goto LABEL_154;
        }
        if (v83 != 1)
        {
          uint64_t v133 = *(void *)(v78 + 16);
          uint64_t v134 = *(void *)(v78 + 24);
          swift_retain();
          swift_retain();
          uint64_t v135 = (char *)__DataStorage._bytes.getter();
          if (v135)
          {
            uint64_t v136 = __DataStorage._offset.getter();
            if (__OFSUB__(v133, v136)) {
              goto LABEL_194;
            }
            v135 += v133 - v136;
          }
          if (__OFSUB__(v134, v133)) {
            goto LABEL_189;
          }
          uint64_t v137 = __DataStorage._length.getter();
          if (v137 >= v134 - v133) {
            size_t v138 = v134 - v133;
          }
          else {
            size_t v138 = v137;
          }
          uint64_t v51 = (uint64_t)v171;
          if (!v95) {
            goto LABEL_207;
          }
          uint64_t v34 = (uint64_t)v162;
          if (!v135) {
            goto LABEL_208;
          }
          int v132 = memcmp(v95, v135, v138);
          swift_release();
          swift_release();
          goto LABEL_145;
        }
        if (v78 >> 32 < (int)v78) {
          goto LABEL_188;
        }
        swift_retain();
        uint64_t v108 = (char *)__DataStorage._bytes.getter();
        if (v108)
        {
          uint64_t v109 = __DataStorage._offset.getter();
          if (__OFSUB__((int)v78, v109)) {
            goto LABEL_195;
          }
          v108 += (int)v78 - v109;
        }
        uint64_t v34 = (uint64_t)v162;
        uint64_t v110 = __DataStorage._length.getter();
        if (v110 >= (v78 >> 32) - (int)v78) {
          size_t v111 = (v78 >> 32) - (int)v78;
        }
        else {
          size_t v111 = v110;
        }
        if (!v95) {
          goto LABEL_199;
        }
        uint64_t v51 = (uint64_t)v171;
        if (!v108) {
          goto LABEL_200;
        }
        int v112 = memcmp(v95, v108, v111);
        outlined consume of Data._Representation(v78, v77);
        outlined consume of Data._Representation(v74, v75);
        if (v112) {
          goto LABEL_168;
        }
        goto LABEL_154;
      case 2uLL:
        uint64_t v96 = *(void *)(v74 + 16);
        swift_retain();
        swift_retain();
        uint64_t v97 = (char *)__DataStorage._bytes.getter();
        if (!v97) {
          goto LABEL_71;
        }
        uint64_t v98 = __DataStorage._offset.getter();
        if (__OFSUB__(v96, v98)) {
          goto LABEL_178;
        }
        v97 += v96 - v98;
LABEL_71:
        uint64_t v34 = (uint64_t)v162;
        __DataStorage._length.getter();
        if (!v83)
        {
          __s1[0] = v78;
          LOWORD(__s1[1]) = v77;
          BYTE2(__s1[1]) = BYTE2(v77);
          BYTE3(__s1[1]) = BYTE3(v77);
          BYTE4(__s1[1]) = BYTE4(v77);
          BYTE5(__s1[1]) = BYTE5(v77);
          if (!v97) {
            goto LABEL_203;
          }
          int v124 = memcmp(v97, __s1, BYTE6(v77));
          swift_release();
LABEL_131:
          swift_release();
          if (v124) {
            goto LABEL_168;
          }
          goto LABEL_154;
        }
        if (v83 != 1)
        {
          uint64_t v125 = v97;
          uint64_t v126 = *(void *)(v78 + 16);
          uint64_t v127 = *(void *)(v78 + 24);
          swift_retain();
          swift_retain();
          uint64_t v128 = (char *)__DataStorage._bytes.getter();
          if (v128)
          {
            uint64_t v129 = __DataStorage._offset.getter();
            if (__OFSUB__(v126, v129)) {
              goto LABEL_192;
            }
            v128 += v126 - v129;
          }
          if (__OFSUB__(v127, v126)) {
            goto LABEL_187;
          }
          uint64_t v130 = __DataStorage._length.getter();
          if (v130 >= v127 - v126) {
            size_t v131 = v127 - v126;
          }
          else {
            size_t v131 = v130;
          }
          uint64_t v51 = (uint64_t)v171;
          if (!v125) {
            goto LABEL_204;
          }
          uint64_t v34 = (uint64_t)v162;
          if (!v128) {
            goto LABEL_205;
          }
          int v124 = memcmp(v125, v128, v131);
          swift_release();
          swift_release();
          swift_release();
          goto LABEL_131;
        }
        uint64_t v147 = v97;
        if (v78 >> 32 < (int)v78) {
          goto LABEL_182;
        }
        swift_retain();
        uint64_t v99 = __DataStorage._bytes.getter();
        if (v99)
        {
          uint64_t v100 = v99;
          uint64_t v101 = __DataStorage._offset.getter();
          if (__OFSUB__((int)v78, v101)) {
            goto LABEL_193;
          }
          uint64_t v102 = (const void *)(v100 + (int)v78 - v101);
        }
        else
        {
          uint64_t v102 = 0;
        }
        uint64_t v139 = __DataStorage._length.getter();
        if (v139 >= (v78 >> 32) - (int)v78) {
          size_t v140 = (v78 >> 32) - (int)v78;
        }
        else {
          size_t v140 = v139;
        }
        if (!v147) {
          goto LABEL_209;
        }
        uint64_t v51 = (uint64_t)v171;
        if (!v102) {
          goto LABEL_210;
        }
        int v141 = memcmp(v147, v102, v140);
        outlined consume of Data._Representation(v78, v77);
        swift_release();
        swift_release();
        if (v141) {
          goto LABEL_168;
        }
LABEL_154:
        if (*(unsigned __int8 *)(v173 + *(int *)(v172 + 24)) != *(unsigned __int8 *)(v51 + *(int *)(v172 + 24))) {
          goto LABEL_168;
        }
        type metadata accessor for UnknownStorage();
        lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
        if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0) {
          goto LABEL_168;
        }
        outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(v173, type metadata accessor for AspireApiConfig);
        outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(v51, type metadata accessor for AspireApiConfig);
        a1 = v158;
        a2 = v159;
        uint64_t v8 = v157;
        uint64_t v26 = v168;
        unint64_t v33 = v169;
        if (v169) {
          goto LABEL_6;
        }
LABEL_8:
        int64_t v41 = v163 + 1;
        if (__OFADD__(v163, 1))
        {
          __break(1u);
LABEL_173:
          __break(1u);
LABEL_174:
          __break(1u);
LABEL_175:
          __break(1u);
LABEL_176:
          __break(1u);
LABEL_177:
          __break(1u);
LABEL_178:
          __break(1u);
LABEL_179:
          __break(1u);
LABEL_180:
          __break(1u);
LABEL_181:
          __break(1u);
LABEL_182:
          __break(1u);
LABEL_183:
          __break(1u);
LABEL_184:
          __break(1u);
LABEL_185:
          __break(1u);
LABEL_186:
          __break(1u);
LABEL_187:
          __break(1u);
LABEL_188:
          __break(1u);
LABEL_189:
          __break(1u);
LABEL_190:
          __break(1u);
LABEL_191:
          __break(1u);
LABEL_192:
          __break(1u);
LABEL_193:
          __break(1u);
LABEL_194:
          __break(1u);
LABEL_195:
          __break(1u);
LABEL_196:
          __break(1u);
        }
        if (v41 >= v150) {
          goto LABEL_25;
        }
        unint64_t v42 = *(void *)(v149 + 8 * v41);
        if (v42) {
          goto LABEL_11;
        }
        int64_t v43 = v163 + 2;
        ++v163;
        if (v41 + 1 >= v150) {
          goto LABEL_25;
        }
        unint64_t v42 = *(void *)(v149 + 8 * v43);
        if (v42) {
          goto LABEL_14;
        }
        int64_t v163 = v41 + 1;
        if (v41 + 2 >= v150) {
          goto LABEL_25;
        }
        unint64_t v42 = *(void *)(v149 + 8 * (v41 + 2));
        if (v42)
        {
          v41 += 2;
          goto LABEL_11;
        }
        int64_t v43 = v41 + 3;
        int64_t v163 = v41 + 2;
        if (v41 + 3 < v150)
        {
          unint64_t v42 = *(void *)(v149 + 8 * v43);
          if (v42)
          {
LABEL_14:
            int64_t v41 = v43;
LABEL_11:
            uint64_t v169 = (v42 - 1) & v42;
            unint64_t v35 = __clz(__rbit64(v42)) + (v41 << 6);
            int64_t v163 = v41;
            goto LABEL_7;
          }
          while (1)
          {
            int64_t v41 = v43 + 1;
            if (__OFADD__(v43, 1)) {
              goto LABEL_196;
            }
            if (v41 >= v150) {
              break;
            }
            unint64_t v42 = *(void *)(v149 + 8 * v41);
            ++v43;
            if (v42) {
              goto LABEL_11;
            }
          }
          int64_t v163 = v148;
        }
LABEL_25:
        uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: AspireApiConfig));
        (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56))(v26, 1, 1, v44);
        uint64_t v169 = 0;
        break;
      case 3uLL:
        memset(__s1, 0, 14);
        if (!v83) {
          goto LABEL_87;
        }
        if (v83 == 1)
        {
          uint64_t v87 = (v78 >> 32) - (int)v78;
          if (v78 >> 32 < (int)v78) {
            goto LABEL_181;
          }
          swift_retain();
          uint64_t v103 = __DataStorage._bytes.getter();
          if (!v103) {
            goto LABEL_198;
          }
          uint64_t v89 = v103;
          uint64_t v104 = __DataStorage._offset.getter();
          uint64_t v91 = (int)v78 - v104;
          if (__OFSUB__((int)v78, v104)) {
            goto LABEL_186;
          }
LABEL_82:
          uint64_t v105 = __DataStorage._length.getter();
          if (v105 >= v87) {
            size_t v106 = v87;
          }
          else {
            size_t v106 = v105;
          }
          int v107 = memcmp(__s1, (const void *)(v89 + v91), v106);
          outlined consume of Data._Representation(v78, v77);
          uint64_t v34 = (uint64_t)v162;
          uint64_t v51 = (uint64_t)v171;
          if (v107) {
            goto LABEL_168;
          }
        }
        else
        {
          uint64_t v119 = *(void *)(v78 + 16);
          uint64_t v120 = *(void *)(v78 + 24);
          swift_retain();
          swift_retain();
          uint64_t v115 = (char *)__DataStorage._bytes.getter();
          if (v115)
          {
            uint64_t v121 = __DataStorage._offset.getter();
            if (__OFSUB__(v119, v121)) {
              goto LABEL_191;
            }
            v115 += v119 - v121;
          }
          int64_t v117 = v120 - v119;
          if (__OFSUB__(v120, v119)) {
            goto LABEL_184;
          }
          uint64_t v118 = __DataStorage._length.getter();
          if (!v115) {
            goto LABEL_202;
          }
LABEL_114:
          if (v118 >= v117) {
            size_t v122 = v117;
          }
          else {
            size_t v122 = v118;
          }
          int v123 = memcmp(__s1, v115, v122);
          swift_release();
          swift_release();
          uint64_t v34 = (uint64_t)v162;
          if (v123) {
            goto LABEL_168;
          }
        }
        goto LABEL_154;
      default:
        __s1[0] = v74;
        LOWORD(__s1[1]) = v75;
        BYTE2(__s1[1]) = BYTE2(v75);
        BYTE3(__s1[1]) = BYTE3(v75);
        BYTE4(__s1[1]) = BYTE4(v75);
        BYTE5(__s1[1]) = BYTE5(v75);
        if (!v83)
        {
LABEL_87:
          uint64_t __s2 = v78;
          __int16 v175 = v77;
          char v176 = BYTE2(v77);
          char v177 = BYTE3(v77);
          char v178 = BYTE4(v77);
          char v179 = BYTE5(v77);
          if (memcmp(__s1, &__s2, BYTE6(v77))) {
            goto LABEL_168;
          }
          goto LABEL_154;
        }
        if (v83 == 1)
        {
          uint64_t v87 = (v78 >> 32) - (int)v78;
          if (v78 >> 32 < (int)v78) {
            goto LABEL_180;
          }
          swift_retain();
          uint64_t v88 = __DataStorage._bytes.getter();
          if (!v88)
          {
            __DataStorage._length.getter();
            __break(1u);
LABEL_198:
            __DataStorage._length.getter();
            __break(1u);
LABEL_199:
            __break(1u);
LABEL_200:
            __break(1u);
LABEL_201:
            __break(1u);
LABEL_202:
            __break(1u);
LABEL_203:
            __break(1u);
LABEL_204:
            __break(1u);
LABEL_205:
            __break(1u);
LABEL_206:
            __break(1u);
LABEL_207:
            __break(1u);
LABEL_208:
            __break(1u);
LABEL_209:
            __break(1u);
LABEL_210:
            __break(1u);
            JUMPOUT(0x249E1D5ACLL);
          }
          uint64_t v89 = v88;
          uint64_t v90 = __DataStorage._offset.getter();
          uint64_t v91 = (int)v78 - v90;
          if (__OFSUB__((int)v78, v90)) {
            goto LABEL_185;
          }
          goto LABEL_82;
        }
        uint64_t v113 = *(void *)(v78 + 16);
        uint64_t v114 = *(void *)(v78 + 24);
        swift_retain();
        swift_retain();
        uint64_t v115 = (char *)__DataStorage._bytes.getter();
        if (v115)
        {
          uint64_t v116 = __DataStorage._offset.getter();
          if (__OFSUB__(v113, v116)) {
            goto LABEL_190;
          }
          v115 += v113 - v116;
        }
        int64_t v117 = v114 - v113;
        if (__OFSUB__(v114, v113)) {
          goto LABEL_183;
        }
        uint64_t v118 = __DataStorage._length.getter();
        if (!v115) {
          goto LABEL_201;
        }
        goto LABEL_114;
    }
  }
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v57, v47, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
  if (v59(v58, 1, v60) == 1)
  {
    int v142 = &demangling cache variable for type metadata for (AspireApiConfig.OneOf_Config?, AspireApiConfig.OneOf_Config?);
    uint64_t v34 = v47;
    uint64_t v51 = (uint64_t)v171;
    goto LABEL_166;
  }
  uint64_t v62 = v164;
  _s8CipherML28AspireHeEncryptionParametersVWObTm_0(v58, v164, type metadata accessor for AspireApiConfig.OneOf_Config);
  uint64_t v63 = (uint64_t)&v8[*(int *)(v160 + 48)];
  outlined init with copy of AspireHeSerializedSeededCiphertext(v47, (uint64_t)v8, type metadata accessor for AspireApiConfig.OneOf_Config);
  outlined init with copy of AspireHeSerializedSeededCiphertext(v62, v63, type metadata accessor for AspireApiConfig.OneOf_Config);
  uint64_t v34 = v47;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v64 = v154;
    outlined init with copy of AspireHeSerializedSeededCiphertext((uint64_t)v8, v154, type metadata accessor for AspireApiConfig.OneOf_Config);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v65 = v153;
      _s8CipherML28AspireHeEncryptionParametersVWObTm_0(v63, v153, type metadata accessor for AspireApiPECConfig);
      char v66 = static AspireApiPECConfig.== infix(_:_:)(v64, v65);
      outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(v65, type metadata accessor for AspireApiPECConfig);
      outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(v64, type metadata accessor for AspireApiPECConfig);
      uint64_t v51 = (uint64_t)v171;
      if ((v66 & 1) == 0) {
        goto LABEL_161;
      }
      goto LABEL_41;
    }
    int v143 = type metadata accessor for AspireApiPECConfig;
    uint64_t v144 = v64;
LABEL_164:
    outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(v144, v143);
    uint64_t v51 = (uint64_t)v171;
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v8, &demangling cache variable for type metadata for (AspireApiConfig.OneOf_Config, AspireApiConfig.OneOf_Config));
    goto LABEL_165;
  }
  uint64_t v67 = v155;
  outlined init with copy of AspireHeSerializedSeededCiphertext((uint64_t)v8, v155, type metadata accessor for AspireApiConfig.OneOf_Config);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    int v143 = type metadata accessor for AspireApiPIRConfig;
    uint64_t v144 = v67;
    goto LABEL_164;
  }
  uint64_t v68 = v151;
  _s8CipherML28AspireHeEncryptionParametersVWObTm_0(v63, v151, type metadata accessor for AspireApiPIRConfig);
  uint64_t v69 = *(int *)(v152 + 20);
  uint64_t v70 = *(void *)(v67 + v69);
  uint64_t v71 = *(void *)(v68 + v69);
  uint64_t v51 = (uint64_t)v171;
  if (v70 == v71
    || (swift_retain(),
        swift_retain(),
        BOOL v72 = closure #1 in static AspireApiPIRConfig.== infix(_:_:)(v70, v71),
        swift_release(),
        swift_release(),
        v72))
  {
    type metadata accessor for UnknownStorage();
    lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    if (dispatch thunk of static Equatable.== infix(_:_:)())
    {
      outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(v68, type metadata accessor for AspireApiPIRConfig);
      outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(v67, type metadata accessor for AspireApiPIRConfig);
LABEL_41:
      outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType((uint64_t)v8, type metadata accessor for AspireApiConfig.OneOf_Config);
      outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(v164, type metadata accessor for AspireApiConfig.OneOf_Config);
      outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(v34, type metadata accessor for AspireApiConfig.OneOf_Config);
      uint64_t v57 = (uint64_t)v165;
      goto LABEL_42;
    }
  }
  outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(v68, type metadata accessor for AspireApiPIRConfig);
  outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(v67, type metadata accessor for AspireApiPIRConfig);
LABEL_161:
  outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType((uint64_t)v8, type metadata accessor for AspireApiConfig.OneOf_Config);
LABEL_165:
  uint64_t v57 = (uint64_t)v165;
  outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(v164, type metadata accessor for AspireApiConfig.OneOf_Config);
  int v142 = &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?;
LABEL_166:
  outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(v34, type metadata accessor for AspireApiConfig.OneOf_Config);
LABEL_167:
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v57, v142);
LABEL_168:
  outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(v173, type metadata accessor for AspireApiConfig);
LABEL_169:
  outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(v51, type metadata accessor for AspireApiConfig);
  return 0;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  int64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  BOOL v66;
  uint64_t result;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int (*v81)(char *, uint64_t, uint64_t);
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int (*v98)(uint64_t, uint64_t, uint64_t);
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  int v105;
  uint64_t *v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  int EnumCaseMultiPayload;
  uint64_t v113;
  uint64_t *v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  BOOL v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  size_t v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  void *v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  const void *v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  void *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  size_t v176;
  int v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  const void *v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  char v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t v200;
  uint64_t v201;
  char v202;
  unint64_t v203;
  uint64_t v204;
  char v205;
  uint64_t v206;
  uint64_t v207;
  char *v208;
  uint64_t v209;
  int64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  char *v214;
  uint64_t v215;
  int64_t v216;
  uint64_t v217;
  size_t v218;
  int v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  size_t v223;
  int v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  int v228;
  uint64_t v229;
  int v230;
  uint64_t v231;
  int v232;
  int v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  unint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  char v251;
  char v252;
  uint64_t v253;
  unint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  unint64_t v259;
  uint64_t v260;
  unint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  unint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  int64_t *v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  void *v278;
  char *v279;
  uint64_t v280;
  uint64_t v281;
  char v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  unint64_t v287;
  uint64_t v288;
  BOOL v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  char v295;
  uint64_t v296;
  uint64_t v297;
  unint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  char v303;
  char v304;
  uint64_t v305;
  char v306;
  unint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  char v313;
  uint64_t v314;
  char v315;
  int64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t *v319;
  uint64_t (*v320)(uint64_t);
  uint64_t v321;
  unint64_t v322;
  unint64_t v323;
  unint64_t v324;
  unint64_t v325;
  uint64_t v326;
  uint64_t v327;
  const void *v328;
  uint64_t v329;
  int64_t v330;
  uint64_t *v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  char *v335;
  int64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  char *v346;
  unsigned int (**v347)(char *, uint64_t, uint64_t);
  unsigned int (**v348)(uint64_t, uint64_t, uint64_t);
  uint64_t *v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t *v352;
  uint64_t v353;
  uint64_t v354;
  BOOL v355;
  uint64_t v356;
  uint64_t v357;
  int64_t v358;
  unint64_t v359;
  uint64_t v360;
  char *v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t *v368;
  uint64_t *v369;
  char *v370;
  char *v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  char *v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  char *v379;
  uint64_t __s2;
  __int16 v381;
  char v382;
  char v383;
  char v384;
  char v385;
  void __s1[4];

  void __s1[3] = *MEMORY[0x263EF8340];
  v340 = type metadata accessor for AspireHeSerializedFullCiphertext(0);
  MEMORY[0x270FA5388](v340);
  uint64_t v368 = (uint64_t *)((char *)&v321 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v342 = type metadata accessor for AspireHeSerializedSeededCiphertext(0);
  MEMORY[0x270FA5388](v342);
  uint64_t v360 = (uint64_t)&v321 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v351 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType, AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType));
  MEMORY[0x270FA5388](v351);
  uint64_t v7 = (char *)&v321 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v350 = type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(0);
  uint64_t v8 = *(void *)(v350 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v350);
  v369 = (uint64_t *)((char *)&v321 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  v352 = (uint64_t *)((char *)&v321 - v12);
  MEMORY[0x270FA5388](v11);
  uint64_t v363 = (uint64_t)&v321 - v13;
  uint64_t v367 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?, AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?));
  MEMORY[0x270FA5388](v367);
  v374 = (uint64_t)&v321 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  uint64_t v16 = MEMORY[0x270FA5388](v15 - 8);
  v364 = (uint64_t)&v321 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  v373 = (uint64_t)&v321 - v19;
  MEMORY[0x270FA5388](v18);
  v372 = (uint64_t)&v321 - v20;
  v356 = type metadata accessor for AspireHeSerializedCiphertext(0);
  uint64_t v339 = *(void *)(v356 - 8);
  uint64_t v21 = MEMORY[0x270FA5388](v356);
  v361 = (char *)&v321 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  uint64_t v24 = (char *)&v321 - v23;
  uint64_t v25 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
  uint64_t v26 = *(void *)(v25 - 8);
  MEMORY[0x270FA5388](v25);
  v362 = (uint64_t)&v321 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v366 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireHeSerializedCiphertextVec?, AspireHeSerializedCiphertextVec?));
  MEMORY[0x270FA5388](v366);
  int v29 = (char *)&v321 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
  uint64_t v31 = MEMORY[0x270FA5388](v30 - 8);
  unint64_t v33 = (char *)&v321 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = MEMORY[0x270FA5388](v31);
  uint64_t v377 = (uint64_t)&v321 - v35;
  MEMORY[0x270FA5388](v34);
  v376 = (uint64_t)&v321 - v36;
  uint64_t v365 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
  uint64_t v37 = *(void *)(v365 - 8);
  uint64_t v38 = MEMORY[0x270FA5388](v365);
  uint64_t v378 = (uint64_t)&v321 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v38);
  uint64_t v379 = (char *)&v321 - v40;
  int64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UInt64, value: AspireHeSerializedKeySwitchKey)?);
  unint64_t v42 = MEMORY[0x270FA5388](v41 - 8);
  v370 = (char *)&v321 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v42);
  if (a1 == a2) {
    return 1;
  }
  uint64_t v46 = *(void *)(v45 + 16);
  v353 = a2;
  if (v46 != *(void *)(a2 + 16)) {
    return 0;
  }
  uint64_t v349 = (uint64_t *)((char *)&v321 - v44);
  uint64_t v354 = v25;
  uint64_t v47 = 0;
  uint64_t v334 = 0;
  uint64_t v48 = *(void *)(v45 + 64);
  uint64_t v332 = v45 + 64;
  uint64_t v49 = 1 << *(unsigned char *)(v45 + 32);
  uint64_t v50 = -1;
  if (v49 < 64) {
    uint64_t v50 = ~(-1 << v49);
  }
  uint64_t v51 = v50 & v48;
  uint64_t v347 = (unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48);
  uint64_t v348 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  uint64_t v346 = v7;
  uint64_t v336 = (unint64_t)(v49 + 63) >> 6;
  uint64_t v330 = v336 - 1;
  uint64_t v331 = &demangling cache variable for type metadata for (AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?, AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  uint64_t v375 = v24;
  uint64_t v333 = v45;
  uint64_t v335 = v29;
  v371 = v33;
  uint64_t v338 = v37;
  while (1)
  {
    if (v51)
    {
      uint64_t v357 = (v51 - 1) & v51;
      v358 = v47;
      uint64_t v52 = __clz(__rbit64(v51)) | (v47 << 6);
      char v53 = v354;
LABEL_8:
      char v54 = v45;
      uint64_t v55 = *(void *)(*(void *)(v45 + 48) + 8 * v52);
      uint64_t v56 = *(void *)(v45 + 56) + *(void *)(v37 + 72) * v52;
      uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UInt64, value: AspireHeSerializedKeySwitchKey));
      uint64_t v58 = v56;
      uint64_t v59 = v370;
      outlined init with copy of AspireHeSerializedSeededCiphertext(v58, (uint64_t)&v370[*(int *)(v57 + 48)], type metadata accessor for AspireHeSerializedKeySwitchKey);
      *uint64_t v59 = v55;
      (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v57 - 8) + 56))(v59, 0, 1, v57);
      uint64_t v24 = v375;
      uint64_t v60 = (uint64_t)v379;
      goto LABEL_15;
    }
    unsigned int v61 = v47 + 1;
    char v53 = v354;
    if (__OFADD__(v47, 1)) {
      goto LABEL_302;
    }
    if (v61 >= v336)
    {
      char v54 = v45;
      v358 = v47;
      uint64_t v60 = (uint64_t)v379;
      uint64_t v59 = v370;
    }
    else
    {
      uint64_t v62 = *(void *)(v332 + 8 * v61);
      uint64_t v60 = (uint64_t)v379;
      uint64_t v59 = v370;
      if (v62) {
        goto LABEL_12;
      }
      uint64_t v316 = v47 + 2;
      if (v47 + 2 >= v336)
      {
        char v54 = v45;
      }
      else
      {
        uint64_t v62 = *(void *)(v332 + 8 * v316);
        if (v62) {
          goto LABEL_267;
        }
        if (v47 + 3 >= v336)
        {
          char v54 = v45;
          v358 = v47 + 2;
          goto LABEL_14;
        }
        uint64_t v62 = *(void *)(v332 + 8 * (v47 + 3));
        if (v62)
        {
          unsigned int v61 = v47 + 3;
          goto LABEL_12;
        }
        uint64_t v316 = v47 + 4;
        if (v47 + 4 >= v336)
        {
          char v54 = v45;
          v358 = v47 + 3;
          goto LABEL_14;
        }
        uint64_t v62 = *(void *)(v332 + 8 * v316);
        if (v62)
        {
LABEL_267:
          unsigned int v61 = v316;
LABEL_12:
          uint64_t v357 = (v62 - 1) & v62;
          uint64_t v52 = __clz(__rbit64(v62)) + (v61 << 6);
          v358 = v61;
          goto LABEL_8;
        }
        while (1)
        {
          unsigned int v61 = v316 + 1;
          if (__OFADD__(v316, 1)) {
            goto LABEL_341;
          }
          if (v61 >= v336) {
            break;
          }
          uint64_t v62 = *(void *)(v332 + 8 * v61);
          ++v316;
          if (v62) {
            goto LABEL_12;
          }
        }
        char v54 = v45;
        unsigned int v61 = v330;
      }
      v358 = v61;
    }
LABEL_14:
    uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UInt64, value: AspireHeSerializedKeySwitchKey));
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v63 - 8) + 56))(v59, 1, 1, v63);
    uint64_t v357 = 0;
LABEL_15:
    uint64_t v64 = v349;
    outlined init with take of SymmetricPirClientConfig?((uint64_t)v59, (uint64_t)v349, &demangling cache variable for type metadata for (key: UInt64, value: AspireHeSerializedKeySwitchKey)?);
    uint64_t v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UInt64, value: AspireHeSerializedKeySwitchKey));
    char v66 = (*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v65 - 8) + 48))(v64, 1, v65) == 1;
    uint64_t result = v66;
    if (v66) {
      return result;
    }
    v355 = v66;
    uint64_t v68 = (uint64_t)v64 + *(int *)(v65 + 48);
    uint64_t v69 = *v64;
    _s8CipherML28AspireHeEncryptionParametersVWObTm_0(v68, v60, type metadata accessor for AspireHeSerializedKeySwitchKey);
    uint64_t v70 = v69;
    uint64_t v71 = v353;
    BOOL v72 = specialized __RawDictionaryStorage.find<A>(_:)(v70);
    if ((v73 & 1) == 0) {
      goto LABEL_298;
    }
    uint64_t v74 = *(void *)(v71 + 56) + *(void *)(v37 + 72) * v72;
    unint64_t v75 = v378;
    outlined init with copy of AspireHeSerializedSeededCiphertext(v74, v378, type metadata accessor for AspireHeSerializedKeySwitchKey);
    uint64_t v76 = v365;
    unint64_t v77 = v376;
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v75 + *(int *)(v365 + 20), v376, &demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
    uint64_t v78 = v60 + *(int *)(v76 + 20);
    uint64_t v79 = v377;
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v78, v377, &demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
    uint64_t v80 = (uint64_t)&v29[*(int *)(v366 + 48)];
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v77, (uint64_t)v29, &demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v79, v80, &demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
    uint64_t v81 = *v347;
    if ((*v347)(v29, 1, v53) != 1) {
      break;
    }
    if (v81((char *)v80, 1, v53) != 1)
    {
      uint64_t v60 = (uint64_t)v379;
      uint64_t v319 = &demangling cache variable for type metadata for (AspireHeSerializedCiphertextVec?, AspireHeSerializedCiphertextVec?);
      goto LABEL_296;
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v29, &demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v377, &demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v376, &demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
    uint64_t v60 = (uint64_t)v379;
LABEL_263:
    type metadata accessor for UnknownStorage();
    lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    v314 = v378;
    uint64_t v315 = dispatch thunk of static Equatable.== infix(_:_:)();
    outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(v314, type metadata accessor for AspireHeSerializedKeySwitchKey);
    outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(v60, type metadata accessor for AspireHeSerializedKeySwitchKey);
    uint64_t v37 = v338;
    uint64_t v47 = v358;
    uint64_t v51 = v357;
    uint64_t result = v355;
    uint64_t v45 = v54;
    if ((v315 & 1) == 0) {
      return result;
    }
  }
  BOOL v82 = (uint64_t)v371;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v29, (uint64_t)v371, &demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
  if (v81((char *)v80, 1, v53) == 1)
  {
    uint64_t v60 = (uint64_t)v379;
    uint64_t v319 = &demangling cache variable for type metadata for (AspireHeSerializedCiphertextVec?, AspireHeSerializedCiphertextVec?);
    goto LABEL_295;
  }
  unint64_t v83 = v80;
  uint64_t v84 = v362;
  _s8CipherML28AspireHeEncryptionParametersVWObTm_0(v83, v362, type metadata accessor for AspireHeSerializedCiphertextVec);
  uint64_t v85 = *(void *)v82;
  uint64_t v86 = *(void *)v84;
  uint64_t v87 = *(void *)(*(void *)v82 + 16);
  uint64_t v88 = (uint64_t)v361;
  uint64_t v89 = v350;
  uint64_t v60 = (uint64_t)v379;
  if (v87 != *(void *)(*(void *)v84 + 16)) {
    goto LABEL_294;
  }
  if (!v87 || v85 == v86)
  {
LABEL_262:
    uint64_t v312 = v362;
    type metadata accessor for UnknownStorage();
    lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    uint64_t v24 = v375;
    uint64_t v313 = dispatch thunk of static Equatable.== infix(_:_:)();
    outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(v312, type metadata accessor for AspireHeSerializedCiphertextVec);
    uint64_t v60 = (uint64_t)v379;
    outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(v82, type metadata accessor for AspireHeSerializedCiphertextVec);
    int v29 = v335;
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v335, &demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v377, &demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v376, &demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
    char v54 = v333;
    if ((v313 & 1) == 0) {
      goto LABEL_297;
    }
    goto LABEL_263;
  }
  uint64_t v90 = 0;
  uint64_t v91 = (*(unsigned __int8 *)(v339 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v339 + 80);
  v345 = v85 + v91;
  uint64_t v343 = v86 + v91;
  v344 = *(void *)(v339 + 72);
  uint64_t v337 = v87;
  uint64_t v341 = v86;
  while (2)
  {
    uint64_t v92 = v344 * v90;
    outlined init with copy of AspireHeSerializedSeededCiphertext(v345 + v344 * v90, (uint64_t)v24, type metadata accessor for AspireHeSerializedCiphertext);
    if (v90 >= *(void *)(v86 + 16))
    {
      __break(1u);
LABEL_302:
      __break(1u);
LABEL_303:
      __break(1u);
LABEL_304:
      __break(1u);
LABEL_305:
      __break(1u);
LABEL_306:
      __break(1u);
LABEL_307:
      __break(1u);
LABEL_308:
      __break(1u);
LABEL_309:
      __break(1u);
LABEL_310:
      __break(1u);
LABEL_311:
      __break(1u);
LABEL_312:
      __break(1u);
LABEL_313:
      __break(1u);
LABEL_314:
      __break(1u);
LABEL_315:
      __break(1u);
LABEL_316:
      __break(1u);
LABEL_317:
      __break(1u);
LABEL_318:
      __break(1u);
LABEL_319:
      __break(1u);
LABEL_320:
      __break(1u);
LABEL_321:
      __break(1u);
LABEL_322:
      __break(1u);
LABEL_323:
      __break(1u);
LABEL_324:
      __break(1u);
LABEL_325:
      __break(1u);
LABEL_326:
      __break(1u);
LABEL_327:
      __break(1u);
LABEL_328:
      __break(1u);
LABEL_329:
      __break(1u);
LABEL_330:
      __break(1u);
LABEL_331:
      __break(1u);
LABEL_332:
      __break(1u);
LABEL_333:
      __break(1u);
LABEL_334:
      __break(1u);
LABEL_335:
      __break(1u);
LABEL_336:
      __break(1u);
LABEL_337:
      __break(1u);
LABEL_338:
      __break(1u);
LABEL_339:
      __break(1u);
LABEL_340:
      __break(1u);
LABEL_341:
      __break(1u);
LABEL_342:
      __break(1u);
LABEL_343:
      __break(1u);
LABEL_344:
      __break(1u);
LABEL_345:
      __break(1u);
LABEL_346:
      __break(1u);
    }
    uint64_t v359 = v90;
    outlined init with copy of AspireHeSerializedSeededCiphertext(v343 + v92, v88, type metadata accessor for AspireHeSerializedCiphertext);
    uint64_t v93 = v89;
    uint64_t v94 = v372;
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, v372, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    uint64_t v95 = v373;
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v88, v373, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    uint64_t v96 = v374;
    uint64_t v97 = v374 + *(int *)(v367 + 48);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v94, v374, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v95, v97, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    uint64_t v98 = *v348;
    if ((*v348)(v96, 1, v93) == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v95, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v94, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
      char v66 = v98(v97, 1, v93) == 1;
      uint64_t v89 = v93;
      uint64_t v86 = v341;
      uint64_t v99 = v96;
      BOOL v82 = (uint64_t)v371;
      if (!v66) {
        goto LABEL_293;
      }
LABEL_257:
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v99, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
      type metadata accessor for UnknownStorage();
      lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
      uint64_t v24 = v375;
      uint64_t v306 = dispatch thunk of static Equatable.== infix(_:_:)();
      outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(v88, type metadata accessor for AspireHeSerializedCiphertext);
      outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType((uint64_t)v24, type metadata accessor for AspireHeSerializedCiphertext);
      uint64_t v60 = (uint64_t)v379;
      if ((v306 & 1) == 0) {
        goto LABEL_294;
      }
      uint64_t v90 = v359 + 1;
      if (v359 + 1 == v337) {
        goto LABEL_262;
      }
      continue;
    }
    break;
  }
  uint64_t v100 = v364;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v96, v364, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  if (v98(v97, 1, v93) == 1)
  {
    uint64_t v318 = v372;
    uint64_t v317 = v373;
    BOOL v82 = (uint64_t)v371;
    goto LABEL_292;
  }
  uint64_t v89 = v93;
  uint64_t v101 = v363;
  _s8CipherML28AspireHeEncryptionParametersVWObTm_0(v97, v363, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
  uint64_t v102 = (uint64_t)v346;
  uint64_t v103 = (uint64_t)&v346[*(int *)(v351 + 48)];
  outlined init with copy of AspireHeSerializedSeededCiphertext(v100, (uint64_t)v346, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
  outlined init with copy of AspireHeSerializedSeededCiphertext(v101, v103, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    uint64_t v104 = v352;
    outlined init with copy of AspireHeSerializedSeededCiphertext(v102, (uint64_t)v352, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v86 = v341;
    if (EnumCaseMultiPayload == 1)
    {
      v320 = type metadata accessor for AspireHeSerializedSeededCiphertext;
      goto LABEL_290;
    }
    uint64_t v113 = v103;
    uint64_t v114 = (uint64_t *)v360;
    _s8CipherML28AspireHeEncryptionParametersVWObTm_0(v113, v360, type metadata accessor for AspireHeSerializedSeededCiphertext);
    uint64_t v116 = *v104;
    uint64_t v115 = v104[1];
    int64_t v117 = *v114;
    uint64_t v118 = v114[1];
    uint64_t v119 = 0;
    switch(v115 >> 62)
    {
      case 1uLL:
        LODWORD(v119) = HIDWORD(v116) - v116;
        if (__OFSUB__(HIDWORD(v116), v116)) {
          goto LABEL_306;
        }
        uint64_t v119 = (int)v119;
LABEL_45:
        uint64_t v127 = v118 >> 62;
        uint64_t v128 = (uint64_t)v352;
        switch(v118 >> 62)
        {
          case 1uLL:
            LODWORD(v129) = HIDWORD(v117) - v117;
            if (__OFSUB__(HIDWORD(v117), v117)) {
              goto LABEL_309;
            }
            uint64_t v129 = (int)v129;
LABEL_69:
            if (v119 != v129) {
              goto LABEL_284;
            }
            if (v119 < 1) {
              goto LABEL_200;
            }
            break;
          case 2uLL:
            uint64_t v133 = *(void *)(v117 + 16);
            int v132 = *(void *)(v117 + 24);
            size_t v122 = __OFSUB__(v132, v133);
            uint64_t v129 = v132 - v133;
            if (!v122) {
              goto LABEL_69;
            }
            goto LABEL_307;
          case 3uLL:
            if (v119) {
              goto LABEL_284;
            }
            goto LABEL_200;
          default:
            uint64_t v129 = BYTE6(v118);
            goto LABEL_69;
        }
        break;
      case 2uLL:
        uint64_t v126 = *(void *)(v116 + 16);
        uint64_t v125 = *(void *)(v116 + 24);
        size_t v122 = __OFSUB__(v125, v126);
        uint64_t v119 = v125 - v126;
        if (!v122) {
          goto LABEL_45;
        }
        goto LABEL_303;
      case 3uLL:
        goto LABEL_45;
      default:
        uint64_t v119 = BYTE6(v115);
        goto LABEL_45;
    }
    switch(v115 >> 62)
    {
      case 1uLL:
        v329 = v114[1];
        if ((int)v116 > v116 >> 32) {
          goto LABEL_316;
        }
        char v178 = v117;
        outlined copy of Data._Representation(v116, v115);
        char v179 = (char *)__DataStorage._bytes.getter();
        if (!v179) {
          goto LABEL_112;
        }
        uint64_t v180 = __DataStorage._offset.getter();
        if (__OFSUB__((int)v116, v180)) {
          goto LABEL_321;
        }
        v179 += (int)v116 - v180;
LABEL_112:
        __DataStorage._length.getter();
        if (v127)
        {
          if (v127 != 1)
          {
            uint64_t v254 = v329 & 0x3FFFFFFFFFFFFFFFLL;
            uint64_t v255 = *(void *)(v178 + 16);
            uint64_t v256 = *(void *)(v178 + 24);
            swift_retain();
            swift_retain();
            uint64_t v257 = v255;
            uint64_t v258 = v334;
            uint64_t v167 = specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v257, v256, v254, v179);
            uint64_t v334 = v258;
            swift_release();
            swift_release();
            outlined consume of Data._Representation(v116, v115);
            goto LABEL_199;
          }
          uint64_t v181 = (int)v178;
          int v182 = v178 >> 32;
          if (v178 >> 32 < (int)v178) {
            goto LABEL_336;
          }
          uint64_t v183 = (const void *)v178;
          uint64_t v184 = v329;
          uint64_t v328 = v183;
          outlined copy of Data._Representation((uint64_t)v183, v329);
          uint64_t v185 = v182;
          uint64_t v186 = v334;
          int v187 = specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v181, v185, v184 & 0x3FFFFFFFFFFFFFFFLL, v179);
          uint64_t v334 = v186;
          outlined consume of Data._Representation((uint64_t)v328, v184);
        }
        else
        {
          v324 = v324 & 0xFF00000000000000 | v329 & 0xFFFFFFFFFFFFFFLL;
          uint64_t v253 = v334;
          int v187 = specialized Data.InlineData.withUnsafeBytes<A>(_:)(v178, v324, v179);
          uint64_t v334 = v253;
        }
        outlined consume of Data._Representation(v116, v115);
        uint64_t v128 = (uint64_t)v352;
        if ((v187 & 1) == 0) {
          goto LABEL_284;
        }
        goto LABEL_200;
      case 2uLL:
        v329 = v114[1];
        uint64_t v157 = v117;
        uint64_t v158 = *(void *)(v116 + 16);
        swift_retain();
        swift_retain();
        uint64_t v159 = (char *)__DataStorage._bytes.getter();
        if (!v159) {
          goto LABEL_90;
        }
        uint64_t v160 = __DataStorage._offset.getter();
        if (__OFSUB__(v158, v160)) {
          goto LABEL_318;
        }
        v159 += v158 - v160;
LABEL_90:
        __DataStorage._length.getter();
        if (!v127)
        {
          v325 = v325 & 0xFF00000000000000 | v329 & 0xFFFFFFFFFFFFFFLL;
          uint64_t v245 = v334;
          uint64_t v167 = specialized Data.InlineData.withUnsafeBytes<A>(_:)(v157, v325, v159);
          uint64_t v334 = v245;
          goto LABEL_191;
        }
        if (v127 == 1)
        {
          int v161 = (int)v157;
          uint64_t v162 = v157 >> 32;
          if (v157 >> 32 < (int)v157) {
            goto LABEL_329;
          }
          int64_t v163 = (const void *)v157;
          uint64_t v164 = v329;
          uint64_t v328 = v163;
          outlined copy of Data._Representation((uint64_t)v163, v329);
          int v165 = v161;
          uint64_t v166 = v334;
          uint64_t v167 = specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v165, v162, v164 & 0x3FFFFFFFFFFFFFFFLL, v159);
          uint64_t v334 = v166;
          outlined consume of Data._Representation((uint64_t)v328, v164);
LABEL_191:
          swift_release();
          swift_release();
LABEL_199:
          uint64_t v128 = (uint64_t)v352;
          if ((v167 & 1) == 0) {
            goto LABEL_284;
          }
          goto LABEL_200;
        }
        v246 = v329 & 0x3FFFFFFFFFFFFFFFLL;
        uint64_t v247 = *(void *)(v157 + 16);
        uint64_t v248 = *(void *)(v157 + 24);
        swift_retain();
        swift_retain();
        uint64_t v249 = v247;
        uint64_t v250 = v334;
        v251 = specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v249, v248, v246, v159);
        uint64_t v334 = v250;
        if (v250) {
          goto LABEL_353;
        }
        uint64_t v252 = v251;
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        uint64_t v128 = (uint64_t)v352;
        if ((v252 & 1) == 0) {
          goto LABEL_284;
        }
LABEL_200:
        uint64_t v260 = *(void *)(v128 + 16);
        v259 = *(void *)(v128 + 24);
        uint64_t v262 = *(void *)(v360 + 16);
        uint64_t v261 = *(void *)(v360 + 24);
        uint64_t v263 = 0;
        switch(v259 >> 62)
        {
          case 1uLL:
            LODWORD(v263) = HIDWORD(v260) - v260;
            if (__OFSUB__(HIDWORD(v260), v260)) {
              goto LABEL_311;
            }
            uint64_t v263 = (int)v263;
LABEL_205:
            v266 = v261 >> 62;
            switch(v261 >> 62)
            {
              case 1uLL:
                LODWORD(v267) = HIDWORD(v262) - v262;
                if (__OFSUB__(HIDWORD(v262), v262)) {
                  goto LABEL_314;
                }
                uint64_t v267 = (int)v267;
LABEL_214:
                if (v263 != v267) {
                  goto LABEL_284;
                }
                if (v263 < 1) {
                  goto LABEL_254;
                }
                break;
              case 2uLL:
                uint64_t v269 = *(void *)(v262 + 16);
                uint64_t v268 = *(void *)(v262 + 24);
                size_t v122 = __OFSUB__(v268, v269);
                uint64_t v267 = v268 - v269;
                if (!v122) {
                  goto LABEL_214;
                }
                goto LABEL_313;
              case 3uLL:
                if (v263) {
                  goto LABEL_284;
                }
                goto LABEL_254;
              default:
                uint64_t v267 = BYTE6(v261);
                goto LABEL_214;
            }
            break;
          case 2uLL:
            uint64_t v265 = *(void *)(v260 + 16);
            uint64_t v264 = *(void *)(v260 + 24);
            size_t v122 = __OFSUB__(v264, v265);
            uint64_t v263 = v264 - v265;
            if (!v122) {
              goto LABEL_205;
            }
            goto LABEL_312;
          case 3uLL:
            goto LABEL_205;
          default:
            uint64_t v263 = BYTE6(v259);
            goto LABEL_205;
        }
        break;
      case 3uLL:
        memset(__s1, 0, 14);
        if (!v127) {
          goto LABEL_131;
        }
        if (v127 == 1)
        {
          int v188 = (int)v117;
          uint64_t v189 = (v117 >> 32) - (int)v117;
          if (v117 >> 32 < (int)v117) {
            goto LABEL_327;
          }
          uint64_t v190 = v117;
          uint64_t v191 = v118;
          swift_retain();
          uint64_t v192 = __DataStorage._bytes.getter();
          if (v192)
          {
            uint64_t v193 = __DataStorage._offset.getter();
            if (__OFSUB__(v188, v193)) {
              goto LABEL_346;
            }
            v192 += v188 - v193;
          }
          uint64_t v194 = __DataStorage._length.getter();
          if (v194 >= v189) {
            uint64_t v195 = v189;
          }
          else {
            uint64_t v195 = v194;
          }
          uint64_t v196 = v192 + v195;
          if (v192) {
            uint64_t v197 = v196;
          }
          else {
            uint64_t v197 = 0;
          }
          uint64_t v198 = v192;
          uint64_t v199 = v334;
          closure #1 in closure #1 in static Data.== infix(_:_:)(v198, __s1, v197, (BOOL *)&__s2);
          uint64_t v334 = v199;
          outlined consume of Data._Representation(v190, v191);
        }
        else
        {
          uint64_t v234 = *(void *)(v117 + 16);
          int v235 = *(void *)(v117 + 24);
          swift_retain();
          swift_retain();
          uint64_t v236 = __DataStorage._bytes.getter();
          if (v236)
          {
            uint64_t v237 = __DataStorage._offset.getter();
            if (__OFSUB__(v234, v237)) {
              goto LABEL_343;
            }
            v236 += v234 - v237;
          }
          size_t v122 = __OFSUB__(v235, v234);
          uint64_t v238 = v235 - v234;
          if (v122) {
            goto LABEL_328;
          }
          uint64_t v239 = __DataStorage._length.getter();
          if (v239 >= v238) {
            uint64_t v240 = v238;
          }
          else {
            uint64_t v240 = v239;
          }
          uint64_t v241 = v236 + v240;
          if (v236) {
            int v242 = v241;
          }
          else {
            int v242 = 0;
          }
          uint64_t v243 = v236;
          uint64_t v244 = v334;
          closure #1 in closure #1 in static Data.== infix(_:_:)(v243, __s1, v242, (BOOL *)&__s2);
          uint64_t v334 = v244;
          swift_release();
          swift_release();
        }
        if ((__s2 & 1) == 0) {
          goto LABEL_284;
        }
        goto LABEL_200;
      default:
        __s1[0] = v116;
        LOWORD(__s1[1]) = v115;
        BYTE2(__s1[1]) = BYTE2(v115);
        BYTE3(__s1[1]) = BYTE3(v115);
        BYTE4(__s1[1]) = BYTE4(v115);
        BYTE5(__s1[1]) = BYTE5(v115);
        if (v127)
        {
          if (v127 == 1)
          {
            size_t v140 = (int)v117;
            int v141 = (v117 >> 32) - (int)v117;
            if (v117 >> 32 < (int)v117) {
              goto LABEL_325;
            }
            int v142 = (uint64_t)v352;
            int v143 = v117;
            uint64_t v144 = v118;
            outlined copy of Data._Representation(v117, v118);
            uint64_t v145 = __DataStorage._bytes.getter();
            if (!v145)
            {
              __DataStorage._length.getter();
              __break(1u);
LABEL_348:
              __break(1u);
LABEL_349:
              __DataStorage._length.getter();
              __break(1u);
LABEL_350:
              __break(1u);
LABEL_351:
              __DataStorage._length.getter();
              __break(1u);
LABEL_352:
              __break(1u);
LABEL_353:
              swift_release();
              swift_release();
              __break(1u);
LABEL_354:
              swift_release();
              swift_release();
              __break(1u);
              JUMPOUT(0x249E1FF28);
            }
            uint64_t v146 = v145;
            uint64_t v147 = __DataStorage._offset.getter();
            size_t v122 = __OFSUB__(v140, v147);
            int64_t v148 = v140 - v147;
            if (v122) {
              goto LABEL_335;
            }
            uint64_t v149 = __DataStorage._length.getter();
            if (v149 >= v141) {
              int64_t v150 = v141;
            }
            else {
              int64_t v150 = v149;
            }
            uint64_t v151 = memcmp(__s1, (const void *)(v146 + v148), v150);
            outlined consume of Data._Representation(v143, v144);
            uint64_t v128 = v142;
            if (v151) {
              goto LABEL_284;
            }
          }
          else
          {
            uint64_t v212 = *(void *)(v117 + 16);
            uint64_t v213 = *(void *)(v117 + 24);
            swift_retain();
            swift_retain();
            uint64_t v214 = (char *)__DataStorage._bytes.getter();
            if (v214)
            {
              uint64_t v215 = __DataStorage._offset.getter();
              if (__OFSUB__(v212, v215)) {
                goto LABEL_344;
              }
              v214 += v212 - v215;
            }
            size_t v122 = __OFSUB__(v213, v212);
            uint64_t v216 = v213 - v212;
            if (v122) {
              goto LABEL_331;
            }
            uint64_t v217 = __DataStorage._length.getter();
            if (!v214) {
              goto LABEL_348;
            }
            if (v217 >= v216) {
              uint64_t v218 = v216;
            }
            else {
              uint64_t v218 = v217;
            }
            uint64_t v219 = memcmp(__s1, v214, v218);
            swift_release();
            swift_release();
            if (v219)
            {
LABEL_284:
              outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(v360, type metadata accessor for AspireHeSerializedSeededCiphertext);
              outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(v128, type metadata accessor for AspireHeSerializedSeededCiphertext);
              outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType((uint64_t)v346, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
              uint64_t v100 = v364;
              uint64_t v88 = (uint64_t)v361;
              uint64_t v24 = v375;
              uint64_t v318 = v372;
              uint64_t v317 = v373;
              BOOL v82 = (uint64_t)v371;
              goto LABEL_291;
            }
          }
        }
        else
        {
LABEL_131:
          uint64_t __s2 = v117;
          uint64_t v381 = v118;
          uint64_t v382 = BYTE2(v118);
          v383 = BYTE3(v118);
          v384 = BYTE4(v118);
          v385 = BYTE5(v118);
          if (memcmp(__s1, &__s2, BYTE6(v118))) {
            goto LABEL_284;
          }
        }
        goto LABEL_200;
    }
    switch(v259 >> 62)
    {
      case 1uLL:
        v329 = *(void *)(v360 + 24);
        if ((int)v260 > v260 >> 32) {
          goto LABEL_317;
        }
        outlined copy of Data._Representation(v260, v259);
        uint64_t v279 = (char *)__DataStorage._bytes.getter();
        if (!v279) {
          goto LABEL_228;
        }
        v280 = __DataStorage._offset.getter();
        if (__OFSUB__((int)v260, v280)) {
          goto LABEL_323;
        }
        v279 += (int)v260 - v280;
LABEL_228:
        __DataStorage._length.getter();
        uint64_t v128 = (uint64_t)v352;
        if (!v266)
        {
          v322 = v322 & 0xFF00000000000000 | v329 & 0xFFFFFFFFFFFFFFLL;
          uint64_t v305 = v334;
          v282 = specialized Data.InlineData.withUnsafeBytes<A>(_:)(v262, v322, v279);
          uint64_t v334 = v305;
          goto LABEL_252;
        }
        if (v266 == 1)
        {
          if (v262 >> 32 < (int)v262) {
            goto LABEL_340;
          }
          uint64_t v328 = (const void *)(v329 & 0x3FFFFFFFFFFFFFFFLL);
          outlined copy of Data._Representation(v262, v329);
          uint64_t v281 = v334;
          v282 = specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)v262, v262 >> 32, (uint64_t)v328, v279);
          uint64_t v334 = v281;
          outlined consume of Data._Representation(v262, v329);
LABEL_252:
          uint64_t v286 = v260;
LABEL_253:
          outlined consume of Data._Representation(v286, v259);
          if ((v282 & 1) == 0) {
            goto LABEL_284;
          }
          goto LABEL_254;
        }
        v307 = v329 & 0x3FFFFFFFFFFFFFFFLL;
        v329 = (uint64_t)v279;
        uint64_t v308 = *(void *)(v262 + 16);
        uint64_t v309 = *(void *)(v262 + 24);
        swift_retain();
        swift_retain();
        uint64_t v310 = v308;
        uint64_t v311 = v334;
        LOBYTE(v309) = specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v310, v309, v307, (const void *)v329);
        uint64_t v334 = v311;
        swift_release();
        swift_release();
        outlined consume of Data._Representation(v260, v259);
        if ((v309 & 1) == 0) {
          goto LABEL_284;
        }
LABEL_254:
        type metadata accessor for UnknownStorage();
        lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
        if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0) {
          goto LABEL_284;
        }
        outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(v360, type metadata accessor for AspireHeSerializedSeededCiphertext);
        outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(v128, type metadata accessor for AspireHeSerializedSeededCiphertext);
        uint64_t v229 = (uint64_t)v346;
        BOOL v82 = (uint64_t)v371;
        break;
      case 2uLL:
        v329 = *(void *)(v360 + 24);
        uint64_t v274 = *(void *)(v260 + 16);
        swift_retain();
        swift_retain();
        uint64_t v275 = __DataStorage._bytes.getter();
        if (v275)
        {
          v276 = v275;
          uint64_t v277 = __DataStorage._offset.getter();
          if (__OFSUB__(v274, v277)) {
            goto LABEL_322;
          }
          uint64_t v278 = (void *)(v276 + v274 - v277);
        }
        else
        {
          uint64_t v278 = 0;
        }
        __DataStorage._length.getter();
        if (!v266)
        {
          uint64_t v323 = v323 & 0xFF00000000000000 | v329 & 0xFFFFFFFFFFFFFFLL;
          uint64_t v297 = v334;
          v295 = specialized Data.InlineData.withUnsafeBytes<A>(_:)(v262, v323, v278);
          uint64_t v334 = v297;
          goto LABEL_245;
        }
        if (v266 == 1)
        {
          if (v262 >> 32 < (int)v262) {
            goto LABEL_339;
          }
          uint64_t v328 = (const void *)(v329 & 0x3FFFFFFFFFFFFFFFLL);
          outlined copy of Data._Representation(v262, v329);
          uint64_t v296 = v334;
          v295 = specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)v262, v262 >> 32, (uint64_t)v328, v278);
          uint64_t v334 = v296;
          outlined consume of Data._Representation(v262, v329);
LABEL_245:
          swift_release();
LABEL_246:
          swift_release();
          if ((v295 & 1) == 0) {
            goto LABEL_284;
          }
          goto LABEL_254;
        }
        uint64_t v328 = v278;
        uint64_t v298 = v329 & 0x3FFFFFFFFFFFFFFFLL;
        uint64_t v299 = *(void *)(v262 + 16);
        uint64_t v300 = *(void *)(v262 + 24);
        swift_retain();
        swift_retain();
        uint64_t v301 = v299;
        uint64_t v302 = v334;
        uint64_t v303 = specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v301, v300, v298, v328);
        uint64_t v334 = v302;
        if (v302) {
          goto LABEL_354;
        }
        uint64_t v304 = v303;
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        if ((v304 & 1) == 0) {
          goto LABEL_284;
        }
        goto LABEL_254;
      case 3uLL:
        memset(__s1, 0, 14);
        uint64_t v270 = &v358;
        uint64_t v271 = v326;
        if (!v266) {
          goto LABEL_236;
        }
        if (v266 != 1) {
          goto LABEL_238;
        }
        uint64_t v272 = (int)v262;
        int v273 = v262 >> 32;
        if (v262 >> 32 >= (int)v262) {
          goto LABEL_235;
        }
        goto LABEL_338;
      default:
        __s1[0] = *(void *)(v128 + 16);
        LOWORD(__s1[1]) = v259;
        BYTE2(__s1[1]) = BYTE2(v259);
        BYTE3(__s1[1]) = BYTE3(v259);
        BYTE4(__s1[1]) = BYTE4(v259);
        BYTE5(__s1[1]) = BYTE5(v259);
        uint64_t v270 = (int64_t *)&v359;
        uint64_t v271 = v327;
        if (!v266)
        {
LABEL_236:
          uint64_t v287 = v271 & 0xFF00000000000000 | v261 & 0xFFFFFFFFFFFFFFLL;
          *(v270 - 32) = v287;
          v288 = v334;
          v289 = specialized Data.InlineData.withUnsafeBytes<A>(_:)(v262, v287, __s1);
          uint64_t v334 = v288;
          if (!v289) {
            goto LABEL_284;
          }
          goto LABEL_254;
        }
        if (v266 != 1)
        {
LABEL_238:
          uint64_t v290 = v261 & 0x3FFFFFFFFFFFFFFFLL;
          uint64_t v291 = *(void *)(v262 + 16);
          uint64_t v292 = *(void *)(v262 + 24);
          swift_retain();
          swift_retain();
          uint64_t v293 = v291;
          v294 = v334;
          v295 = specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v293, v292, v290, __s1);
          uint64_t v334 = v294;
          swift_release();
          goto LABEL_246;
        }
        uint64_t v272 = (int)v262;
        int v273 = v262 >> 32;
        if (v262 >> 32 < (int)v262) {
          goto LABEL_337;
        }
LABEL_235:
        v283 = v261 & 0x3FFFFFFFFFFFFFFFLL;
        v259 = v261;
        outlined copy of Data._Representation(v262, v261);
        uint64_t v284 = v273;
        uint64_t v285 = v334;
        v282 = specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v272, v284, v283, __s1);
        uint64_t v334 = v285;
        uint64_t v286 = v262;
        goto LABEL_253;
    }
    goto LABEL_256;
  }
  uint64_t v104 = v369;
  outlined init with copy of AspireHeSerializedSeededCiphertext(v102, (uint64_t)v369, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
  uint64_t v105 = swift_getEnumCaseMultiPayload();
  uint64_t v86 = v341;
  if (v105 == 1)
  {
    size_t v106 = v368;
    _s8CipherML28AspireHeEncryptionParametersVWObTm_0(v103, (uint64_t)v368, type metadata accessor for AspireHeSerializedFullCiphertext);
    int v107 = *v104;
    uint64_t v108 = v104[1];
    uint64_t v109 = *v106;
    uint64_t v110 = v106[1];
    BOOL v82 = (uint64_t)v371;
    size_t v111 = 0;
    switch(v108 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v107), v107)) {
          goto LABEL_304;
        }
        size_t v111 = HIDWORD(v107) - (int)v107;
LABEL_42:
        int v123 = v110 >> 62;
        switch(v110 >> 62)
        {
          case 1uLL:
            LODWORD(v124) = HIDWORD(v109) - v109;
            if (__OFSUB__(HIDWORD(v109), v109)) {
              goto LABEL_310;
            }
            int v124 = (int)v124;
LABEL_55:
            if (v111 != v124) {
              goto LABEL_283;
            }
            if (v111 < 1) {
              goto LABEL_164;
            }
            break;
          case 2uLL:
            size_t v131 = *(void *)(v109 + 16);
            uint64_t v130 = *(void *)(v109 + 24);
            size_t v122 = __OFSUB__(v130, v131);
            int v124 = v130 - v131;
            if (!v122) {
              goto LABEL_55;
            }
            goto LABEL_308;
          case 3uLL:
            if (v111) {
              goto LABEL_283;
            }
            goto LABEL_164;
          default:
            int v124 = BYTE6(v110);
            goto LABEL_55;
        }
        break;
      case 2uLL:
        uint64_t v121 = *(void *)(v107 + 16);
        uint64_t v120 = *(void *)(v107 + 24);
        size_t v122 = __OFSUB__(v120, v121);
        size_t v111 = v120 - v121;
        if (!v122) {
          goto LABEL_42;
        }
        goto LABEL_305;
      case 3uLL:
        goto LABEL_42;
      default:
        size_t v111 = BYTE6(v108);
        goto LABEL_42;
    }
    switch(v108 >> 62)
    {
      case 1uLL:
        v329 = *v106;
        if ((int)v107 > v107 >> 32) {
          goto LABEL_315;
        }
        outlined copy of Data._Representation(v107, v108);
        uint64_t v168 = __DataStorage._bytes.getter();
        if (v168)
        {
          uint64_t v169 = v168;
          uint64_t v170 = __DataStorage._offset.getter();
          if (__OFSUB__((int)v107, v170)) {
            goto LABEL_320;
          }
          uint64_t v171 = (void *)(v169 + (int)v107 - v170);
        }
        else
        {
          uint64_t v171 = 0;
        }
        __DataStorage._length.getter();
        uint64_t v203 = v110;
        uint64_t v204 = v334;
        uint64_t v205 = specialized Data._Representation.withUnsafeBytes<A>(_:)(v329, v203, v171);
        uint64_t v334 = v204;
        outlined consume of Data._Representation(v107, v108);
        BOOL v82 = (uint64_t)v371;
        if ((v205 & 1) == 0) {
          goto LABEL_283;
        }
        goto LABEL_164;
      case 2uLL:
        v329 = *v106;
        uint64_t v152 = *(void *)(v107 + 16);
        swift_retain();
        swift_retain();
        uint64_t v153 = __DataStorage._bytes.getter();
        if (v153)
        {
          uint64_t v154 = v153;
          uint64_t v155 = __DataStorage._offset.getter();
          if (__OFSUB__(v152, v155)) {
            goto LABEL_319;
          }
          uint64_t v156 = (void *)(v154 + v152 - v155);
        }
        else
        {
          uint64_t v156 = 0;
        }
        __DataStorage._length.getter();
        uint64_t v200 = v110;
        uint64_t v201 = v334;
        uint64_t v202 = specialized Data._Representation.withUnsafeBytes<A>(_:)(v329, v200, v156);
        uint64_t v334 = v201;
        swift_release();
        swift_release();
        if ((v202 & 1) == 0) {
          goto LABEL_283;
        }
        goto LABEL_164;
      case 3uLL:
        memset(__s1, 0, 14);
        if (!v123) {
          goto LABEL_129;
        }
        if (v123 == 1)
        {
          uint64_t v172 = (int)v109;
          uint64_t v135 = (v109 >> 32) - (int)v109;
          if (v109 >> 32 < (int)v109) {
            goto LABEL_326;
          }
          v329 = v109;
          outlined copy of Data._Representation(v109, v110);
          uint64_t v173 = __DataStorage._bytes.getter();
          if (!v173) {
            goto LABEL_349;
          }
          uint64_t v137 = v173;
          uint64_t v174 = __DataStorage._offset.getter();
          size_t v122 = __OFSUB__(v172, v174);
          uint64_t v139 = v172 - v174;
          if (v122) {
            goto LABEL_334;
          }
LABEL_103:
          __int16 v175 = __DataStorage._length.getter();
          if (v175 >= v135) {
            char v176 = v135;
          }
          else {
            char v176 = v175;
          }
          char v177 = memcmp(__s1, (const void *)(v137 + v139), v176);
          outlined consume of Data._Representation(v329, v110);
          if (v177) {
            goto LABEL_283;
          }
        }
        else
        {
          uint64_t v220 = *(void *)(v109 + 16);
          uint64_t v221 = *(void *)(v109 + 24);
          swift_retain();
          swift_retain();
          uint64_t v208 = (char *)__DataStorage._bytes.getter();
          if (v208)
          {
            uint64_t v222 = __DataStorage._offset.getter();
            if (__OFSUB__(v220, v222)) {
              goto LABEL_345;
            }
            v208 += v220 - v222;
          }
          size_t v122 = __OFSUB__(v221, v220);
          uint64_t v210 = v221 - v220;
          if (v122) {
            goto LABEL_332;
          }
          uint64_t v211 = __DataStorage._length.getter();
          if (!v208) {
            goto LABEL_350;
          }
LABEL_160:
          if (v211 >= v210) {
            uint64_t v223 = v210;
          }
          else {
            uint64_t v223 = v211;
          }
          v224 = memcmp(__s1, v208, v223);
          swift_release();
          swift_release();
          if (v224) {
            goto LABEL_283;
          }
        }
LABEL_164:
        uint64_t v225 = v369[2];
        uint64_t v226 = v368[2];
        uint64_t v227 = *(void *)(v225 + 16);
        if (v227 != *(void *)(v226 + 16)) {
          goto LABEL_283;
        }
        if (v227 && v225 != v226)
        {
          specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, 1, v369[2]);
          uint64_t v228 = *(_DWORD *)(v225 + 32);
          specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, 1, v226);
          if (v228 != *(_DWORD *)(v226 + 32)) {
            goto LABEL_283;
          }
          if (v227 != 1)
          {
            specialized Array._checkSubscript(_:wasNativeTypeChecked:)(1uLL, 1, v225);
            uint64_t v230 = *(_DWORD *)(v225 + 36);
            specialized Array._checkSubscript(_:wasNativeTypeChecked:)(1uLL, 1, v226);
            if (v230 != *(_DWORD *)(v226 + 36)) {
              goto LABEL_283;
            }
            uint64_t v231 = 10;
            while (2 - v227 + v231 != 10)
            {
              specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v231 - 8, 1, v225);
              uint64_t v232 = *(_DWORD *)(v225 + 4 * v231);
              specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v231 - 8, 1, v226);
              uint64_t v233 = *(_DWORD *)(v226 + 4 * v231);
              BOOL v82 = (uint64_t)v371;
              ++v231;
              if (v232 != v233) {
                goto LABEL_283;
              }
            }
          }
        }
        if (v369[3] != v368[3]
          || (type metadata accessor for UnknownStorage(),
              lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]), (dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0))
        {
LABEL_283:
          outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType((uint64_t)v368, type metadata accessor for AspireHeSerializedFullCiphertext);
          outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType((uint64_t)v369, type metadata accessor for AspireHeSerializedFullCiphertext);
          outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType((uint64_t)v346, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
          uint64_t v100 = v364;
          uint64_t v88 = (uint64_t)v361;
          uint64_t v24 = v375;
          uint64_t v318 = v372;
          uint64_t v317 = v373;
          goto LABEL_291;
        }
        outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType((uint64_t)v368, type metadata accessor for AspireHeSerializedFullCiphertext);
        outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType((uint64_t)v369, type metadata accessor for AspireHeSerializedFullCiphertext);
        uint64_t v229 = (uint64_t)v346;
        break;
      default:
        __s1[0] = v107;
        LOWORD(__s1[1]) = v108;
        BYTE2(__s1[1]) = BYTE2(v108);
        BYTE3(__s1[1]) = BYTE3(v108);
        BYTE4(__s1[1]) = BYTE4(v108);
        BYTE5(__s1[1]) = BYTE5(v108);
        if (!v123)
        {
LABEL_129:
          uint64_t __s2 = v109;
          uint64_t v381 = v110;
          uint64_t v382 = BYTE2(v110);
          v383 = BYTE3(v110);
          v384 = BYTE4(v110);
          v385 = BYTE5(v110);
          if (memcmp(__s1, &__s2, BYTE6(v110))) {
            goto LABEL_283;
          }
          goto LABEL_164;
        }
        if (v123 == 1)
        {
          uint64_t v134 = (int)v109;
          uint64_t v135 = (v109 >> 32) - (int)v109;
          if (v109 >> 32 < (int)v109) {
            goto LABEL_324;
          }
          v329 = v109;
          outlined copy of Data._Representation(v109, v110);
          uint64_t v136 = __DataStorage._bytes.getter();
          if (!v136) {
            goto LABEL_351;
          }
          uint64_t v137 = v136;
          size_t v138 = __DataStorage._offset.getter();
          size_t v122 = __OFSUB__(v134, v138);
          uint64_t v139 = v134 - v138;
          if (v122) {
            goto LABEL_333;
          }
          goto LABEL_103;
        }
        uint64_t v206 = *(void *)(v109 + 16);
        uint64_t v207 = *(void *)(v109 + 24);
        swift_retain();
        swift_retain();
        uint64_t v208 = (char *)__DataStorage._bytes.getter();
        if (v208)
        {
          uint64_t v209 = __DataStorage._offset.getter();
          if (__OFSUB__(v206, v209)) {
            goto LABEL_342;
          }
          v208 += v206 - v209;
        }
        size_t v122 = __OFSUB__(v207, v206);
        uint64_t v210 = v207 - v206;
        if (v122) {
          goto LABEL_330;
        }
        uint64_t v211 = __DataStorage._length.getter();
        if (!v208) {
          goto LABEL_352;
        }
        goto LABEL_160;
    }
LABEL_256:
    outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(v229, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
    outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(v363, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v373, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v372, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(v364, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
    uint64_t v99 = v374;
    uint64_t v88 = (uint64_t)v361;
    goto LABEL_257;
  }
  v320 = type metadata accessor for AspireHeSerializedFullCiphertext;
LABEL_290:
  outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType((uint64_t)v104, v320);
  uint64_t v24 = v375;
  BOOL v82 = (uint64_t)v371;
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v102, &demangling cache variable for type metadata for (AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType, AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType));
  uint64_t v318 = v372;
  uint64_t v317 = v373;
  uint64_t v100 = v364;
LABEL_291:
  outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(v363, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
  uint64_t v331 = &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?;
LABEL_292:
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v317, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v318, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(v100, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
  uint64_t v99 = v374;
LABEL_293:
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v99, v331);
  outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(v88, type metadata accessor for AspireHeSerializedCiphertext);
  outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType((uint64_t)v24, type metadata accessor for AspireHeSerializedCiphertext);
  uint64_t v60 = (uint64_t)v379;
LABEL_294:
  outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(v362, type metadata accessor for AspireHeSerializedCiphertextVec);
  uint64_t v319 = &demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?;
  int v29 = v335;
LABEL_295:
  outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(v82, type metadata accessor for AspireHeSerializedCiphertextVec);
LABEL_296:
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v29, v319);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v377, &demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v376, &demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
LABEL_297:
  outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(v378, type metadata accessor for AspireHeSerializedKeySwitchKey);
LABEL_298:
  outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(v60, type metadata accessor for AspireHeSerializedKeySwitchKey);
  return 0;
}

{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t (**v37)(uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  unint64_t v43;
  unint64_t v44;
  void *v45;
  uint64_t *v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int64_t v52;
  unint64_t v53;
  int64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t (*v67)(uint64_t, uint64_t, uint64_t);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int EnumCaseMultiPayload;
  uint64_t v76;
  char v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  char v81;
  uint64_t *v82;
  uint64_t (*v83)(uint64_t);
  uint64_t v84;
  int64_t v85;
  char *v86;
  char *v87;
  char *v88;
  uint64_t v89;
  int64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;

  uint64_t v4 = type metadata accessor for AMDPbPECConfig(0);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v85 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for AMDPbPIRConfig(0);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v85 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v93 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AMDPbHEConfig.OneOf_Config, AMDPbHEConfig.OneOf_Config));
  MEMORY[0x270FA5388](v93);
  uint64_t v98 = (uint64_t)&v85 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for AMDPbHEConfig.OneOf_Config(0);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v85 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x270FA5388](v13);
  uint64_t v91 = (uint64_t)&v85 - v17;
  MEMORY[0x270FA5388](v16);
  uint64_t v101 = (uint64_t)&v85 - v18;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
  MEMORY[0x270FA5388](v19 - 8);
  uint64_t v21 = (char *)&v85 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v102 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AMDPbHEConfig.OneOf_Config?, AMDPbHEConfig.OneOf_Config?));
  MEMORY[0x270FA5388](v102);
  uint64_t v94 = (char *)&v85 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v99 = type metadata accessor for AMDPbHEConfig(0);
  uint64_t v105 = *(void *)(v99 - 8);
  double v23 = MEMORY[0x270FA5388](v99);
  size_t v106 = (uint64_t)&v85 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v23);
  int v107 = (uint64_t)&v85 - v25;
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: AMDPbHEConfig)?);
  uint64_t v27 = MEMORY[0x270FA5388](v26 - 8);
  uint64_t v104 = (char *)&v85 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = MEMORY[0x270FA5388](v27);
  uint64_t v103 = (int64_t *)((char *)&v85 - v30);
  if (a1 == a2) {
    return 1;
  }
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  uint64_t v88 = v15;
  uint64_t v95 = v21;
  uint64_t v86 = v9;
  uint64_t v87 = v6;
  uint64_t v97 = a2;
  uint64_t v100 = 0;
  uint64_t v92 = a1;
  unint64_t v33 = *(void *)(a1 + 64);
  uint64_t v32 = a1 + 64;
  uint64_t v31 = v33;
  uint64_t v34 = 1 << *(unsigned char *)(v32 - 32);
  unint64_t v35 = -1;
  if (v34 < 64) {
    unint64_t v35 = ~(-1 << v34);
  }
  uint64_t v36 = v35 & v31;
  uint64_t v37 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  uint64_t v89 = v32;
  uint64_t v90 = (unint64_t)(v34 + 63) >> 6;
  uint64_t v85 = v90 - 1;
  uint64_t v96 = v11;
  uint64_t v38 = (uint64_t)v94;
  while (1)
  {
    if (v36)
    {
      int64_t v43 = __clz(__rbit64(v36));
      v36 &= v36 - 1;
      uint64_t v44 = v43 | (v100 << 6);
      uint64_t v46 = v103;
      uint64_t v45 = v104;
LABEL_10:
      uint64_t v47 = *(void *)(v92 + 56);
      uint64_t v48 = (void *)(*(void *)(v92 + 48) + 16 * v44);
      uint64_t v49 = v48[1];
      char *v45 = *v48;
      v45[1] = v49;
      uint64_t v50 = v47 + *(void *)(v105 + 72) * v44;
      uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: AMDPbHEConfig));
      outlined init with copy of AspireHeSerializedSeededCiphertext(v50, (uint64_t)v45 + *(int *)(v51 + 48), type metadata accessor for AMDPbHEConfig);
      (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v51 - 8) + 56))(v45, 0, 1, v51);
      swift_bridgeObjectRetain();
      goto LABEL_32;
    }
    uint64_t v52 = v100 + 1;
    uint64_t v46 = v103;
    uint64_t v45 = v104;
    if (__OFADD__(v100, 1))
    {
      __break(1u);
      goto LABEL_56;
    }
    if (v52 < v90)
    {
      char v53 = *(void *)(v89 + 8 * v52);
      if (v53) {
        goto LABEL_14;
      }
      char v54 = v100 + 2;
      ++v100;
      if (v52 + 1 < v90)
      {
        char v53 = *(void *)(v89 + 8 * v54);
        if (v53) {
          goto LABEL_17;
        }
        uint64_t v100 = v52 + 1;
        if (v52 + 2 < v90)
        {
          char v53 = *(void *)(v89 + 8 * (v52 + 2));
          if (v53)
          {
            v52 += 2;
            goto LABEL_14;
          }
          uint64_t v100 = v52 + 2;
          if (v52 + 3 < v90)
          {
            char v53 = *(void *)(v89 + 8 * (v52 + 3));
            if (v53)
            {
              v52 += 3;
              goto LABEL_14;
            }
            char v54 = v52 + 4;
            uint64_t v100 = v52 + 3;
            if (v52 + 4 < v90) {
              break;
            }
          }
        }
      }
    }
LABEL_31:
    uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: AMDPbHEConfig));
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v55 - 8) + 56))(v45, 1, 1, v55);
    uint64_t v36 = 0;
LABEL_32:
    outlined init with take of SymmetricPirClientConfig?((uint64_t)v45, (uint64_t)v46, &demangling cache variable for type metadata for (key: String, value: AMDPbHEConfig)?);
    uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: AMDPbHEConfig));
    uint64_t v57 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v56 - 8) + 48))(v46, 1, v56);
    uint64_t v58 = v57 == 1;
    if (v57 == 1) {
      return v58;
    }
    uint64_t v59 = (uint64_t)v46 + *(int *)(v56 + 48);
    uint64_t v60 = *v46;
    unsigned int v61 = v46[1];
    uint64_t v40 = v107;
    _s8CipherML28AspireHeEncryptionParametersVWObTm_0(v59, v107, type metadata accessor for AMDPbHEConfig);
    uint64_t v62 = v97;
    uint64_t v63 = specialized __RawDictionaryStorage.find<A>(_:)(v60, v61);
    LOBYTE(v60) = v64;
    swift_bridgeObjectRelease();
    if ((v60 & 1) == 0) {
      goto LABEL_52;
    }
    uint64_t v65 = v106;
    outlined init with copy of AspireHeSerializedSeededCiphertext(*(void *)(v62 + 56) + *(void *)(v105 + 72) * v63, v106, type metadata accessor for AMDPbHEConfig);
    char v66 = v38 + *(int *)(v102 + 48);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v65, v38, &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v40, v66, &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
    uint64_t v67 = *v37;
    uint64_t v68 = v96;
    if ((*v37)(v38, 1, v96) == 1)
    {
      uint64_t v39 = v67(v66, 1, v68);
      uint64_t v40 = v107;
      if (v39 != 1)
      {
        BOOL v82 = &demangling cache variable for type metadata for (AMDPbHEConfig.OneOf_Config?, AMDPbHEConfig.OneOf_Config?);
        goto LABEL_51;
      }
    }
    else
    {
      uint64_t v69 = v38;
      uint64_t v70 = (uint64_t)v95;
      outlined init with copy of AMDPbHEConfig.OneOf_Config?(v69, (uint64_t)v95, &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
      if (v67(v66, 1, v68) == 1)
      {
        uint64_t v38 = (uint64_t)v94;
        BOOL v82 = &demangling cache variable for type metadata for (AMDPbHEConfig.OneOf_Config?, AMDPbHEConfig.OneOf_Config?);
        goto LABEL_50;
      }
      uint64_t v71 = v101;
      _s8CipherML28AspireHeEncryptionParametersVWObTm_0(v66, v101, type metadata accessor for AMDPbHEConfig.OneOf_Config);
      BOOL v72 = v98;
      uint64_t v73 = v98 + *(int *)(v93 + 48);
      outlined init with copy of AspireHeSerializedSeededCiphertext(v70, v98, type metadata accessor for AMDPbHEConfig.OneOf_Config);
      outlined init with copy of AspireHeSerializedSeededCiphertext(v71, v73, type metadata accessor for AMDPbHEConfig.OneOf_Config);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v74 = (uint64_t)v88;
        outlined init with copy of AspireHeSerializedSeededCiphertext(v72, (uint64_t)v88, type metadata accessor for AMDPbHEConfig.OneOf_Config);
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        uint64_t v38 = (uint64_t)v94;
        if (EnumCaseMultiPayload != 1)
        {
          unint64_t v83 = type metadata accessor for AMDPbPECConfig;
          uint64_t v84 = v74;
LABEL_48:
          outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(v84, v83);
          outlined destroy of AMDPbHEConfig.OneOf_Config?(v72, &demangling cache variable for type metadata for (AMDPbHEConfig.OneOf_Config, AMDPbHEConfig.OneOf_Config));
LABEL_49:
          outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(v101, type metadata accessor for AMDPbHEConfig.OneOf_Config);
          BOOL v82 = &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?;
LABEL_50:
          outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType((uint64_t)v95, type metadata accessor for AMDPbHEConfig.OneOf_Config);
          uint64_t v40 = v107;
LABEL_51:
          outlined destroy of AMDPbHEConfig.OneOf_Config?(v38, v82);
          outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(v106, type metadata accessor for AMDPbHEConfig);
LABEL_52:
          outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(v40, type metadata accessor for AMDPbHEConfig);
          return 0;
        }
        uint64_t v76 = (uint64_t)v87;
        _s8CipherML28AspireHeEncryptionParametersVWObTm_0(v73, (uint64_t)v87, type metadata accessor for AMDPbPECConfig);
        unint64_t v77 = static AMDPbPECConfig.== infix(_:_:)(v74, v76);
        outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(v76, type metadata accessor for AMDPbPECConfig);
        outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(v74, type metadata accessor for AMDPbPECConfig);
        outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(v98, type metadata accessor for AMDPbHEConfig.OneOf_Config);
        if ((v77 & 1) == 0) {
          goto LABEL_49;
        }
      }
      else
      {
        uint64_t v78 = v91;
        outlined init with copy of AspireHeSerializedSeededCiphertext(v72, v91, type metadata accessor for AMDPbHEConfig.OneOf_Config);
        uint64_t v79 = swift_getEnumCaseMultiPayload();
        uint64_t v38 = (uint64_t)v94;
        if (v79 == 1)
        {
          unint64_t v83 = type metadata accessor for AMDPbPIRConfig;
          uint64_t v84 = v78;
          goto LABEL_48;
        }
        uint64_t v80 = (uint64_t)v86;
        _s8CipherML28AspireHeEncryptionParametersVWObTm_0(v73, (uint64_t)v86, type metadata accessor for AMDPbPIRConfig);
        uint64_t v81 = static AMDPbPIRConfig.== infix(_:_:)(v78, v80);
        outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(v80, type metadata accessor for AMDPbPIRConfig);
        outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(v78, type metadata accessor for AMDPbPIRConfig);
        outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(v72, type metadata accessor for AMDPbHEConfig.OneOf_Config);
        if ((v81 & 1) == 0) {
          goto LABEL_49;
        }
      }
      outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(v101, type metadata accessor for AMDPbHEConfig.OneOf_Config);
      outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType((uint64_t)v95, type metadata accessor for AMDPbHEConfig.OneOf_Config);
      uint64_t v40 = v107;
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v38, &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
    int64_t v41 = v106;
    type metadata accessor for UnknownStorage();
    lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    unint64_t v42 = dispatch thunk of static Equatable.== infix(_:_:)();
    outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(v41, type metadata accessor for AMDPbHEConfig);
    uint64_t result = outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(v40, type metadata accessor for AMDPbHEConfig);
    if ((v42 & 1) == 0) {
      return v58;
    }
  }
  char v53 = *(void *)(v89 + 8 * v54);
  if (v53)
  {
LABEL_17:
    uint64_t v52 = v54;
LABEL_14:
    uint64_t v36 = (v53 - 1) & v53;
    uint64_t v44 = __clz(__rbit64(v53)) + (v52 << 6);
    uint64_t v100 = v52;
    goto LABEL_10;
  }
  while (1)
  {
    uint64_t v52 = v54 + 1;
    if (__OFADD__(v54, 1)) {
      break;
    }
    if (v52 >= v90)
    {
      uint64_t v100 = v85;
      goto LABEL_31;
    }
    char v53 = *(void *)(v89 + 8 * v52);
    ++v54;
    if (v53) {
      goto LABEL_14;
    }
  }
LABEL_56:
  __break(1u);
  return result;
}

BOOL specialized Data.InlineData.withUnsafeBytes<A>(_:)(uint64_t a1, uint64_t a2, void *__s1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t __s2 = a1;
  __int16 v5 = a2;
  char v6 = BYTE2(a2);
  char v7 = BYTE3(a2);
  char v8 = BYTE4(a2);
  char v9 = BYTE5(a2);
  if (!__s1) {
    __break(1u);
  }
  return memcmp(__s1, &__s2, BYTE6(a2)) == 0;
}

uint64_t specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  uint64_t result = __DataStorage._bytes.getter();
  char v8 = (char *)result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_12:
      __break(1u);
      goto LABEL_13;
    }
    v8 += a1 - result;
  }
  BOOL v9 = __OFSUB__(a2, a1);
  int64_t v10 = a2 - a1;
  if (v9)
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t result = __DataStorage._length.getter();
  if (!a4)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!v8)
  {
LABEL_14:
    __break(1u);
    return result;
  }
  if (result >= v10) {
    size_t v11 = v10;
  }
  else {
    size_t v11 = result;
  }
  return memcmp(a4, v8, v11) == 0;
}

uint64_t specialized Data._Representation.withUnsafeBytes<A>(_:)(uint64_t a1, unint64_t a2, void *__s1)
{
  uint64_t v7 = a1;
  switch(a2 >> 62)
  {
    case 1uLL:
      if (a1 >> 32 < (int)a1)
      {
        __break(1u);
        JUMPOUT(0x249E20E0CLL);
      }
      swift_retain();
      char v4 = specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)v7, v7 >> 32, a2 & 0x3FFFFFFFFFFFFFFFLL, __s1);
      outlined consume of Data._Representation(v7, a2);
      break;
    case 2uLL:
      uint64_t v9 = a2 & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t v10 = *(void *)(a1 + 16);
      uint64_t v11 = *(void *)(a1 + 24);
      swift_retain();
      swift_retain();
      char v4 = specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v10, v11, v9, __s1);
      swift_release();
      swift_release();
      break;
    case 3uLL:
      a1 = 0;
      uint64_t v8 = 0;
      goto LABEL_7;
    default:
      uint64_t v8 = a2 & 0xFFFFFFFFFFFFFFLL;
LABEL_7:
      BOOL v12 = specialized Data.InlineData.withUnsafeBytes<A>(_:)(a1, v8, __s1);
      if (!v3) {
        char v4 = v12;
      }
      break;
  }
  return v4 & 1;
}

uint64_t specialized static AspireHeSerializedSeededCiphertext.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v16 - v9;
  if ((specialized static Data.== infix(_:_:)(*(void *)a1, *(void *)(a1 + 8), *(void *)a2, *(void *)(a2 + 8)) & 1) != 0
    && (specialized static Data.== infix(_:_:)(*(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a2 + 16), *(void *)(a2 + 24)) & 1) != 0)
  {
    uint64_t v11 = type metadata accessor for AspireHeSerializedSeededCiphertext(0);
    BOOL v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v12(v10, a1 + *(int *)(v11 + 24), v4);
    v12(v7, a2 + *(int *)(v11 + 24), v4);
    lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
    v14(v7, v4);
    v14(v10, v4);
  }
  else
  {
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t specialized static AspireHeSerializedFullCiphertext.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v16 - v9;
  if ((specialized static Data.== infix(_:_:)(*a1, a1[1], *a2, a2[1]) & 1) != 0
    && specialized static Array<A>.== infix(_:_:)(a1[2], a2[2])
    && a1[3] == a2[3])
  {
    uint64_t v11 = type metadata accessor for AspireHeSerializedFullCiphertext(0);
    BOOL v12 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v12(v10, (char *)a1 + *(int *)(v11 + 28), v4);
    v12(v7, (char *)a2 + *(int *)(v11 + 28), v4);
    lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
    v14(v7, v4);
    v14(v10, v4);
  }
  else
  {
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t specialized static AspireHeSerializedEvaluationKey.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v73 = a2;
  uint64_t v64 = type metadata accessor for UnknownStorage();
  uint64_t v62 = *(void *)(v64 - 8);
  uint64_t v3 = MEMORY[0x270FA5388](v64);
  unsigned int v61 = (char *)&v58 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v60 = (char *)&v58 - v5;
  uint64_t v6 = type metadata accessor for AspireHeSerializedRelinKey(0);
  uint64_t v68 = *(void *)(v6 - 8);
  uint64_t v69 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v59 = (uint64_t)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireHeSerializedRelinKey?, AspireHeSerializedRelinKey?));
  MEMORY[0x270FA5388](v66);
  uint64_t v70 = (uint64_t)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
  uint64_t v10 = MEMORY[0x270FA5388](v9 - 8);
  uint64_t v63 = (uint64_t)&v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v72 = (uint64_t)&v58 - v13;
  MEMORY[0x270FA5388](v12);
  uint64_t v67 = (uint64_t)&v58 - v14;
  uint64_t v15 = type metadata accessor for AspireHeSerializedGaloisKey(0);
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v65 = (uint64_t *)((char *)&v58 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireHeSerializedGaloisKey?, AspireHeSerializedGaloisKey?));
  uint64_t v19 = v18 - 8;
  MEMORY[0x270FA5388](v18);
  uint64_t v21 = (char *)&v58 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
  uint64_t v23 = MEMORY[0x270FA5388](v22 - 8);
  uint64_t v25 = (uint64_t *)((char *)&v58 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v26 = MEMORY[0x270FA5388](v23);
  uint64_t v28 = (char *)&v58 - v27;
  MEMORY[0x270FA5388](v26);
  uint64_t v30 = (char *)&v58 - v29;
  uint64_t v31 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  uint64_t v32 = *(int *)(v31 + 20);
  uint64_t v71 = a1;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + v32, (uint64_t)v30, &demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v73 + *(int *)(v31 + 20), (uint64_t)v28, &demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
  uint64_t v33 = (uint64_t)&v21[*(int *)(v19 + 56)];
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v30, (uint64_t)v21, &demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v28, v33, &demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
  uint64_t v34 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  if (v34((uint64_t)v21, 1, v15) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v28, &demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v30, &demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
    if (v34(v33, 1, v15) == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21, &demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
      goto LABEL_4;
    }
LABEL_9:
    int64_t v43 = &demangling cache variable for type metadata for (AspireHeSerializedGaloisKey?, AspireHeSerializedGaloisKey?);
    uint64_t v44 = (uint64_t)v21;
LABEL_17:
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v44, v43);
    goto LABEL_18;
  }
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21, (uint64_t)v25, &demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
  if (v34(v33, 1, v15) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v28, &demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v30, &demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
    outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType((uint64_t)v25, type metadata accessor for AspireHeSerializedGaloisKey);
    goto LABEL_9;
  }
  uint64_t v45 = v65;
  _s8CipherML28AspireHeEncryptionParametersVWObTm_0(v33, (uint64_t)v65, type metadata accessor for AspireHeSerializedGaloisKey);
  if ((specialized static Dictionary<>.== infix(_:_:)(*v25, *v45) & 1) == 0)
  {
    outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType((uint64_t)v45, type metadata accessor for AspireHeSerializedGaloisKey);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v28, &demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v30, &demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
    outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType((uint64_t)v25, type metadata accessor for AspireHeSerializedGaloisKey);
    uint64_t v44 = (uint64_t)v21;
    int64_t v43 = &demangling cache variable for type metadata for AspireHeSerializedGaloisKey?;
    goto LABEL_17;
  }
  lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
  char v46 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType((uint64_t)v45, type metadata accessor for AspireHeSerializedGaloisKey);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v28, &demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v30, &demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
  outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType((uint64_t)v25, type metadata accessor for AspireHeSerializedGaloisKey);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21, &demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
  if ((v46 & 1) == 0) {
    goto LABEL_18;
  }
LABEL_4:
  uint64_t v35 = v71;
  uint64_t v36 = v67;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v71 + *(int *)(v31 + 24), v67, &demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
  uint64_t v38 = v72;
  uint64_t v37 = v73;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v73 + *(int *)(v31 + 24), v72, &demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
  uint64_t v39 = v70;
  uint64_t v40 = v70 + *(int *)(v66 + 48);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v36, v70, &demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v38, v40, &demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
  uint64_t v41 = v69;
  unint64_t v42 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v68 + 48);
  if (v42(v39, 1, v69) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v38, &demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v36, &demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
    if (v42(v40, 1, v41) == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v39, &demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
LABEL_21:
      uint64_t v52 = v62;
      char v53 = *(void (**)(char *, uint64_t, uint64_t))(v62 + 16);
      char v54 = v60;
      uint64_t v55 = v64;
      v53(v60, v35, v64);
      uint64_t v56 = v61;
      v53(v61, v37, v55);
      lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
      char v48 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v57 = *(void (**)(char *, uint64_t))(v52 + 8);
      v57(v56, v55);
      v57(v54, v55);
      return v48 & 1;
    }
    goto LABEL_15;
  }
  uint64_t v47 = v63;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v39, v63, &demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
  if (v42(v40, 1, v41) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v72, &demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v36, &demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
    outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(v47, type metadata accessor for AspireHeSerializedRelinKey);
LABEL_15:
    int64_t v43 = &demangling cache variable for type metadata for (AspireHeSerializedRelinKey?, AspireHeSerializedRelinKey?);
    uint64_t v44 = v39;
    goto LABEL_17;
  }
  uint64_t v50 = v59;
  _s8CipherML28AspireHeEncryptionParametersVWObTm_0(v40, v59, type metadata accessor for AspireHeSerializedRelinKey);
  char v51 = specialized static AspireHeSerializedRelinKey.== infix(_:_:)(v47, v50);
  outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(v50, type metadata accessor for AspireHeSerializedRelinKey);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v72, &demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v36, &demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
  outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(v47, type metadata accessor for AspireHeSerializedRelinKey);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v39, &demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
  if (v51) {
    goto LABEL_21;
  }
LABEL_18:
  char v48 = 0;
  return v48 & 1;
}

uint64_t specialized static AspireHeSerializedCiphertext.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v43 = *(void *)(v4 - 8);
  uint64_t v44 = v4;
  MEMORY[0x270FA5388](v4);
  unint64_t v42 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v41 = (char *)&v37 - v7;
  uint64_t v8 = type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v38 = (uint64_t)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?, AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?));
  uint64_t v12 = v11 - 8;
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)&v37 - v19;
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = (char *)&v37 - v22;
  uint64_t v39 = a1;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)&v37 - v22, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  uint64_t v40 = a2;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a2, (uint64_t)v20, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  uint64_t v24 = (uint64_t)&v14[*(int *)(v12 + 56)];
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v23, (uint64_t)v14, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v20, v24, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  uint64_t v25 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v25((uint64_t)v14, 1, v8) != 1)
  {
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v14, (uint64_t)v17, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    if (v25(v24, 1, v8) != 1)
    {
      uint64_t v26 = v38;
      _s8CipherML28AspireHeEncryptionParametersVWObTm_0(v24, v38, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
      char v27 = specialized static AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType.== infix(_:_:)((uint64_t)v17, v26);
      outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(v26, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v20, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v23, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
      outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType((uint64_t)v17, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v14, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
      if (v27) {
        goto LABEL_8;
      }
LABEL_9:
      char v34 = 0;
      return v34 & 1;
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v20, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v23, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType((uint64_t)v17, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
LABEL_6:
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v14, &demangling cache variable for type metadata for (AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?, AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?));
    goto LABEL_9;
  }
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v20, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v23, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  if (v25(v24, 1, v8) != 1) {
    goto LABEL_6;
  }
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v14, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
LABEL_8:
  uint64_t v28 = type metadata accessor for AspireHeSerializedCiphertext(0);
  uint64_t v30 = v43;
  uint64_t v29 = v44;
  uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t))(v43 + 16);
  uint64_t v32 = v41;
  v31(v41, v39 + *(int *)(v28 + 20), v44);
  uint64_t v33 = v42;
  v31(v42, v40 + *(int *)(v28 + 20), v29);
  lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
  char v34 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v35 = *(void (**)(char *, uint64_t))(v30 + 8);
  v35(v33, v29);
  v35(v32, v29);
  return v34 & 1;
}

uint64_t specialized static AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v25 = a2;
  uint64_t v3 = type metadata accessor for AspireHeSerializedFullCiphertext(0);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (uint64_t *)((char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = type metadata accessor for AspireHeSerializedSeededCiphertext(0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (uint64_t *)((char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v24 - v13;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType, AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType));
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v17 = (char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = (uint64_t)&v17[*(int *)(v18 + 56)];
  outlined init with copy of AspireHeSerializedSeededCiphertext(a1, (uint64_t)v17, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
  outlined init with copy of AspireHeSerializedSeededCiphertext(v25, v19, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined init with copy of AspireHeSerializedSeededCiphertext((uint64_t)v17, (uint64_t)v14, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      _s8CipherML28AspireHeEncryptionParametersVWObTm_0(v19, (uint64_t)v8, type metadata accessor for AspireHeSerializedSeededCiphertext);
      if (specialized static Data.== infix(_:_:)(*(void *)v14, *((void *)v14 + 1), *(void *)v8, *((void *)v8 + 1)) & 1) != 0&& (specialized static Data.== infix(_:_:)(*((void *)v14 + 2), *((void *)v14 + 3), *((void *)v8 + 2), *((void *)v8 + 3)))
      {
        type metadata accessor for UnknownStorage();
        lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
        if (dispatch thunk of static Equatable.== infix(_:_:)())
        {
          outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType((uint64_t)v8, type metadata accessor for AspireHeSerializedSeededCiphertext);
          outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType((uint64_t)v14, type metadata accessor for AspireHeSerializedSeededCiphertext);
          outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType((uint64_t)v17, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
          char v20 = 1;
          return v20 & 1;
        }
      }
      outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType((uint64_t)v8, type metadata accessor for AspireHeSerializedSeededCiphertext);
      outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType((uint64_t)v14, type metadata accessor for AspireHeSerializedSeededCiphertext);
      outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType((uint64_t)v17, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
LABEL_13:
      char v20 = 0;
      return v20 & 1;
    }
    uint64_t v21 = type metadata accessor for AspireHeSerializedSeededCiphertext;
    uint64_t v22 = (uint64_t)v14;
LABEL_7:
    outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(v22, v21);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v17, &demangling cache variable for type metadata for (AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType, AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType));
    goto LABEL_13;
  }
  outlined init with copy of AspireHeSerializedSeededCiphertext((uint64_t)v17, (uint64_t)v11, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    uint64_t v21 = type metadata accessor for AspireHeSerializedFullCiphertext;
    uint64_t v22 = (uint64_t)v11;
    goto LABEL_7;
  }
  _s8CipherML28AspireHeEncryptionParametersVWObTm_0(v19, (uint64_t)v5, type metadata accessor for AspireHeSerializedFullCiphertext);
  char v20 = specialized static AspireHeSerializedFullCiphertext.== infix(_:_:)(v11, v5);
  outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType((uint64_t)v5, type metadata accessor for AspireHeSerializedFullCiphertext);
  outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType((uint64_t)v11, type metadata accessor for AspireHeSerializedFullCiphertext);
  outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType((uint64_t)v17, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
  return v20 & 1;
}

uint64_t specialized static AspireHeSerializedDcrtPlaintext.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v18 - v11;
  if (specialized static Data.== infix(_:_:)(*(void *)a1, *(void *)(a1 + 8), *(void *)a2, *(void *)(a2 + 8)))
  {
    uint64_t v13 = a3(0);
    uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    v14(v12, a1 + *(int *)(v13 + 20), v6);
    v14(v9, a2 + *(int *)(v13 + 20), v6);
    lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v16 = *(void (**)(char *, uint64_t))(v7 + 8);
    v16(v9, v6);
    v16(v12, v6);
  }
  else
  {
    char v15 = 0;
  }
  return v15 & 1;
}

uint64_t specialized static AspireHeSerializedCiphertextVec.== infix(_:_:)(char *a1, char *a2, uint64_t (*a3)(void, void, double), uint64_t (*a4)(void))
{
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v13 = MEMORY[0x270FA5388](v12);
  char v15 = (char *)&v21 - v14;
  if (a3(*(void *)a1, *(void *)a2, v13))
  {
    uint64_t v16 = a4(0);
    uint64_t v17 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
    v17(v15, &a1[*(int *)(v16 + 20)], v8);
    v17(v11, &a2[*(int *)(v16 + 20)], v8);
    lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    char v18 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v19 = *(void (**)(char *, uint64_t))(v9 + 8);
    v19(v11, v8);
    v19(v15, v8);
  }
  else
  {
    char v18 = 0;
  }
  return v18 & 1;
}

uint64_t specialized static AspireHeSerializedRelinKey.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v44 = *(void *)(v4 - 8);
  uint64_t v45 = v4;
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v43 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  unint64_t v42 = (char *)&v39 - v7;
  uint64_t v8 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v39 = (uint64_t)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireHeSerializedKeySwitchKey?, AspireHeSerializedKeySwitchKey?));
  uint64_t v12 = v11 - 8;
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
  uint64_t v16 = MEMORY[0x270FA5388](v15 - 8);
  uint64_t v46 = (uint64_t)&v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  char v20 = (char *)&v39 - v19;
  MEMORY[0x270FA5388](v18);
  uint64_t v22 = (char *)&v39 - v21;
  uint64_t v23 = type metadata accessor for AspireHeSerializedRelinKey(0);
  uint64_t v24 = *(int *)(v23 + 20);
  uint64_t v40 = a1;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + v24, (uint64_t)v22, &demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
  uint64_t v25 = *(int *)(v23 + 20);
  uint64_t v41 = a2;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a2 + v25, (uint64_t)v20, &demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
  uint64_t v26 = (uint64_t)&v14[*(int *)(v12 + 56)];
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v22, (uint64_t)v14, &demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v20, v26, &demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
  char v27 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v27((uint64_t)v14, 1, v8) != 1)
  {
    uint64_t v28 = v46;
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v14, v46, &demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
    if (v27(v26, 1, v8) != 1)
    {
      uint64_t v29 = v39;
      _s8CipherML28AspireHeEncryptionParametersVWObTm_0(v26, v39, type metadata accessor for AspireHeSerializedKeySwitchKey);
      char v30 = specialized static AspireHeSerializedKeySwitchKey.== infix(_:_:)(v28, v29);
      outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(v29, type metadata accessor for AspireHeSerializedKeySwitchKey);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v20, &demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v22, &demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
      outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(v28, type metadata accessor for AspireHeSerializedKeySwitchKey);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v14, &demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
      if (v30) {
        goto LABEL_8;
      }
LABEL_9:
      char v36 = 0;
      return v36 & 1;
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v20, &demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v22, &demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
    outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(v28, type metadata accessor for AspireHeSerializedKeySwitchKey);
LABEL_6:
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v14, &demangling cache variable for type metadata for (AspireHeSerializedKeySwitchKey?, AspireHeSerializedKeySwitchKey?));
    goto LABEL_9;
  }
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v20, &demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v22, &demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
  if (v27(v26, 1, v8) != 1) {
    goto LABEL_6;
  }
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v14, &demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
LABEL_8:
  uint64_t v32 = v44;
  uint64_t v31 = v45;
  uint64_t v33 = *(void (**)(char *, uint64_t, uint64_t))(v44 + 16);
  char v34 = v42;
  v33(v42, v40, v45);
  uint64_t v35 = v43;
  v33(v43, v41, v31);
  lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
  char v36 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v37 = *(void (**)(char *, uint64_t))(v32 + 8);
  v37(v35, v31);
  v37(v34, v31);
  return v36 & 1;
}

uint64_t specialized static AspireHeEvaluationKeyConfig.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v47 = *(void *)(v4 - 8);
  uint64_t v48 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v46 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v45 = (char *)&v44 - v7;
  uint64_t v8 = type metadata accessor for AspireHeEncryptionParameters(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  char v51 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireHeEncryptionParameters?, AspireHeEncryptionParameters?));
  uint64_t v12 = v11 - 8;
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v17 = (char *)&v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  char v20 = (char *)&v44 - v19;
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = (char *)&v44 - v22;
  uint64_t v24 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  uint64_t v25 = *(int *)(v24 + 28);
  uint64_t v49 = a1;
  uint64_t v26 = (uint64_t)a1 + v25;
  uint64_t v27 = v24;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v26, (uint64_t)v23, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  uint64_t v28 = *(int *)(v27 + 28);
  uint64_t v50 = a2;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)a2 + v28, (uint64_t)v20, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  uint64_t v29 = (uint64_t)&v14[*(int *)(v12 + 56)];
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v23, (uint64_t)v14, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v20, v29, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  char v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v30((uint64_t)v14, 1, v8) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v20, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v23, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    if (v30(v29, 1, v8) == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v14, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v31 = (uint64_t)v51;
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v14, (uint64_t)v17, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    if (v30(v29, 1, v8) != 1)
    {
      _s8CipherML28AspireHeEncryptionParametersVWObTm_0(v29, v31, type metadata accessor for AspireHeEncryptionParameters);
      char v33 = specialized static AspireHeEncryptionParameters.== infix(_:_:)((uint64_t)v17, v31);
      outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(v31, type metadata accessor for AspireHeEncryptionParameters);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v20, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v23, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType((uint64_t)v17, type metadata accessor for AspireHeEncryptionParameters);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v14, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      if ((v33 & 1) == 0)
      {
LABEL_10:
        char v32 = 0;
        return v32 & 1;
      }
LABEL_8:
      char v34 = v49;
      uint64_t v35 = v50;
      if (specialized static Array<A>.== infix(_:_:)(*v49, *v50)
        && *((unsigned __int8 *)v34 + 8) == *((unsigned __int8 *)v35 + 8))
      {
        uint64_t v37 = v47;
        uint64_t v36 = v48;
        uint64_t v38 = *(void (**)(char *, char *, uint64_t))(v47 + 16);
        uint64_t v39 = v45;
        v38(v45, (char *)v34 + *(int *)(v27 + 24), v48);
        uint64_t v40 = (char *)v35 + *(int *)(v27 + 24);
        uint64_t v41 = v46;
        v38(v46, v40, v36);
        lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
        char v32 = dispatch thunk of static Equatable.== infix(_:_:)();
        unint64_t v42 = *(void (**)(char *, uint64_t))(v37 + 8);
        v42(v41, v36);
        v42(v39, v36);
        return v32 & 1;
      }
      goto LABEL_10;
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v20, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v23, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType((uint64_t)v17, type metadata accessor for AspireHeEncryptionParameters);
  }
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v14, &demangling cache variable for type metadata for (AspireHeEncryptionParameters?, AspireHeEncryptionParameters?));
  char v32 = 0;
  return v32 & 1;
}

uint64_t specialized static AspireHeSerializedKeySwitchKey.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v47 = *(void *)(v4 - 8);
  uint64_t v48 = v4;
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v46 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v45 = (char *)&v43 - v7;
  uint64_t v8 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v49 = (uint64_t *)((char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireHeSerializedCiphertextVec?, AspireHeSerializedCiphertextVec?));
  uint64_t v12 = v11 - 8;
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
  uint64_t v16 = MEMORY[0x270FA5388](v15 - 8);
  uint64_t v50 = (uint64_t *)((char *)&v43 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  char v20 = (char *)&v43 - v19;
  MEMORY[0x270FA5388](v18);
  uint64_t v22 = (char *)&v43 - v21;
  uint64_t v23 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
  uint64_t v24 = *(int *)(v23 + 20);
  uint64_t v43 = a1;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + v24, (uint64_t)v22, &demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
  uint64_t v25 = *(int *)(v23 + 20);
  uint64_t v44 = a2;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a2 + v25, (uint64_t)v20, &demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
  uint64_t v26 = (uint64_t)&v14[*(int *)(v12 + 56)];
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v22, (uint64_t)v14, &demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v20, v26, &demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
  uint64_t v27 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v27((uint64_t)v14, 1, v8) != 1)
  {
    uint64_t v35 = v49;
    uint64_t v36 = v50;
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v14, (uint64_t)v50, &demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
    if (v27(v26, 1, v8) != 1)
    {
      uint64_t v40 = v26;
      uint64_t v41 = (uint64_t)v35;
      _s8CipherML28AspireHeEncryptionParametersVWObTm_0(v40, (uint64_t)v35, type metadata accessor for AspireHeSerializedCiphertextVec);
      if (specialized static Array<A>.== infix(_:_:)(*v36, *v35))
      {
        lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
        uint64_t v28 = v48;
        char v42 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(v41, type metadata accessor for AspireHeSerializedCiphertextVec);
        outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v20, &demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
        outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v22, &demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
        outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType((uint64_t)v36, type metadata accessor for AspireHeSerializedCiphertextVec);
        outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v14, &demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
        if (v42) {
          goto LABEL_4;
        }
LABEL_9:
        char v33 = 0;
        return v33 & 1;
      }
      outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType((uint64_t)v35, type metadata accessor for AspireHeSerializedCiphertextVec);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v20, &demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v22, &demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
      outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType((uint64_t)v36, type metadata accessor for AspireHeSerializedCiphertextVec);
      uint64_t v38 = (uint64_t)v14;
      uint64_t v37 = &demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?;
LABEL_8:
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v38, v37);
      goto LABEL_9;
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v20, &demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v22, &demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
    outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType((uint64_t)v36, type metadata accessor for AspireHeSerializedCiphertextVec);
LABEL_7:
    uint64_t v37 = &demangling cache variable for type metadata for (AspireHeSerializedCiphertextVec?, AspireHeSerializedCiphertextVec?);
    uint64_t v38 = (uint64_t)v14;
    goto LABEL_8;
  }
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v20, &demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v22, &demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
  if (v27(v26, 1, v8) != 1) {
    goto LABEL_7;
  }
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v14, &demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
  uint64_t v28 = v48;
LABEL_4:
  uint64_t v29 = v47;
  char v30 = *(void (**)(char *, uint64_t, uint64_t))(v47 + 16);
  uint64_t v31 = v45;
  v30(v45, v43, v28);
  char v32 = v46;
  v30(v46, v44, v28);
  lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
  char v33 = dispatch thunk of static Equatable.== infix(_:_:)();
  char v34 = *(void (**)(char *, uint64_t))(v29 + 8);
  v34(v32, v28);
  v34(v31, v28);
  return v33 & 1;
}

uint64_t specialized static AspireHeEncryptionParameters.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v21 - v9;
  if (*(void *)a1 != *(void *)a2
    || *(void *)(a1 + 8) != *(void *)(a2 + 8)
    || !specialized static Array<A>.== infix(_:_:)(*(void **)(a1 + 16), *(void **)(a2 + 16)))
  {
    goto LABEL_28;
  }
  if (*(unsigned char *)(a1 + 32))
  {
    if (*(unsigned char *)(a2 + 32)) {
      goto LABEL_11;
    }
    uint64_t v11 = 0;
    goto LABEL_10;
  }
  uint64_t v11 = *(void *)(a1 + 24);
  if ((*(unsigned char *)(a2 + 32) & 1) == 0)
  {
LABEL_10:
    if (v11 != *(void *)(a2 + 24)) {
      goto LABEL_28;
    }
    goto LABEL_11;
  }
  if (v11) {
    goto LABEL_28;
  }
LABEL_11:
  uint64_t v12 = *(void *)(a1 + 40);
  uint64_t v13 = *(void *)(a2 + 40);
  if (*(unsigned char *)(a1 + 48)) {
    uint64_t v12 = v12 != 0;
  }
  if (*(unsigned char *)(a2 + 48) == 1)
  {
    if (v13)
    {
      if (v12 != 1) {
        goto LABEL_28;
      }
    }
    else if (v12)
    {
      goto LABEL_28;
    }
  }
  else if (v12 != v13)
  {
    goto LABEL_28;
  }
  uint64_t v14 = *(void *)(a1 + 56);
  uint64_t v15 = *(void *)(a2 + 56);
  if (*(unsigned char *)(a2 + 64) == 1)
  {
    if (v15)
    {
      if (v15 == 1)
      {
        if (v14 == 1) {
          goto LABEL_26;
        }
      }
      else if (v14 == 2)
      {
        goto LABEL_26;
      }
LABEL_28:
      char v18 = 0;
      return v18 & 1;
    }
    if (v14) {
      goto LABEL_28;
    }
  }
  else if (v14 != v15)
  {
    goto LABEL_28;
  }
LABEL_26:
  uint64_t v16 = type metadata accessor for AspireHeEncryptionParameters(0);
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v17(v10, a1 + *(int *)(v16 + 40), v4);
  v17(v7, a2 + *(int *)(v16 + 40), v4);
  lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
  char v18 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v19 = *(void (**)(char *, uint64_t))(v5 + 8);
  v19(v7, v4);
  v19(v10, v4);
  return v18 & 1;
}

uint64_t type metadata accessor for AspireHeSerializedKeySwitchKey(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireHeSerializedKeySwitchKey);
}

uint64_t _s8CipherML28AspireHeEncryptionParametersVWObTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for AspireHeSerializedCiphertextVec(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireHeSerializedCiphertextVec);
}

uint64_t type metadata accessor for AspireHeSerializedDcrtPlaintext(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireHeSerializedDcrtPlaintext);
}

uint64_t outlined assign with take of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
}

uint64_t type metadata accessor for AspireHeSerializedSeededCiphertext(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireHeSerializedSeededCiphertext);
}

uint64_t outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t type metadata accessor for AspireHeSerializedFullCiphertext(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireHeSerializedFullCiphertext);
}

uint64_t outlined init with copy of AspireHeSerializedSeededCiphertext(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for AspireHeSerializedCiphertext(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireHeSerializedCiphertext);
}

uint64_t type metadata accessor for AspireHeSerializedSecretKey(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireHeSerializedSecretKey);
}

uint64_t lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AspireHeErrorStdDev and conformance AspireHeErrorStdDev()
{
  unint64_t result = lazy protocol witness table cache variable for type AspireHeErrorStdDev and conformance AspireHeErrorStdDev;
  if (!lazy protocol witness table cache variable for type AspireHeErrorStdDev and conformance AspireHeErrorStdDev)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AspireHeErrorStdDev and conformance AspireHeErrorStdDev);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AspireHeErrorStdDev and conformance AspireHeErrorStdDev;
  if (!lazy protocol witness table cache variable for type AspireHeErrorStdDev and conformance AspireHeErrorStdDev)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AspireHeErrorStdDev and conformance AspireHeErrorStdDev);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AspireHeErrorStdDev and conformance AspireHeErrorStdDev;
  if (!lazy protocol witness table cache variable for type AspireHeErrorStdDev and conformance AspireHeErrorStdDev)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AspireHeErrorStdDev and conformance AspireHeErrorStdDev);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AspireHeErrorStdDev and conformance AspireHeErrorStdDev;
  if (!lazy protocol witness table cache variable for type AspireHeErrorStdDev and conformance AspireHeErrorStdDev)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AspireHeErrorStdDev and conformance AspireHeErrorStdDev);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AspireHeSecurityLevel and conformance AspireHeSecurityLevel()
{
  unint64_t result = lazy protocol witness table cache variable for type AspireHeSecurityLevel and conformance AspireHeSecurityLevel;
  if (!lazy protocol witness table cache variable for type AspireHeSecurityLevel and conformance AspireHeSecurityLevel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AspireHeSecurityLevel and conformance AspireHeSecurityLevel);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AspireHeSecurityLevel and conformance AspireHeSecurityLevel;
  if (!lazy protocol witness table cache variable for type AspireHeSecurityLevel and conformance AspireHeSecurityLevel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AspireHeSecurityLevel and conformance AspireHeSecurityLevel);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AspireHeSecurityLevel and conformance AspireHeSecurityLevel;
  if (!lazy protocol witness table cache variable for type AspireHeSecurityLevel and conformance AspireHeSecurityLevel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AspireHeSecurityLevel and conformance AspireHeSecurityLevel);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AspireHeSecurityLevel and conformance AspireHeSecurityLevel;
  if (!lazy protocol witness table cache variable for type AspireHeSecurityLevel and conformance AspireHeSecurityLevel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AspireHeSecurityLevel and conformance AspireHeSecurityLevel);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in AspireHeSecurityLevel()
{
  return lazy protocol witness table accessor for type [AMDPbHE_APICode] and conformance [A](&lazy protocol witness table cache variable for type [AspireHeSecurityLevel] and conformance [A], &demangling cache variable for type metadata for [AspireHeSecurityLevel]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in AspireHeErrorStdDev()
{
  return lazy protocol witness table accessor for type [AMDPbHE_APICode] and conformance [A](&lazy protocol witness table cache variable for type [AspireHeErrorStdDev] and conformance [A], &demangling cache variable for type metadata for [AspireHeErrorStdDev]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in AspireHeHeScheme()
{
  return lazy protocol witness table accessor for type [AMDPbHE_APICode] and conformance [A](&lazy protocol witness table cache variable for type [AspireHeHeScheme] and conformance [A], &demangling cache variable for type metadata for [AspireHeHeScheme]);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspireHeSerializedDcrtPlaintext()
{
  return lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedDcrtPlaintext);
}

uint64_t base witness table accessor for Message in AspireHeSerializedDcrtPlaintext()
{
  return lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedDcrtPlaintext);
}

uint64_t base witness table accessor for Hashable in AspireHeSerializedDcrtPlaintext()
{
  return lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedDcrtPlaintext);
}

uint64_t base witness table accessor for Equatable in AspireHeSerializedDcrtPlaintext()
{
  return lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedDcrtPlaintext);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspireHeSerializedCiphertextVec()
{
  return lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeSerializedCiphertextVec and conformance AspireHeSerializedCiphertextVec, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedCiphertextVec);
}

uint64_t base witness table accessor for Message in AspireHeSerializedCiphertextVec()
{
  return lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeSerializedCiphertextVec and conformance AspireHeSerializedCiphertextVec, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedCiphertextVec);
}

uint64_t base witness table accessor for Hashable in AspireHeSerializedCiphertextVec()
{
  return lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeSerializedCiphertextVec and conformance AspireHeSerializedCiphertextVec, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedCiphertextVec);
}

uint64_t base witness table accessor for Equatable in AspireHeSerializedCiphertextVec()
{
  return lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeSerializedCiphertextVec and conformance AspireHeSerializedCiphertextVec, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedCiphertextVec);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspireHeSerializedCiphertext()
{
  return lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeSerializedCiphertext and conformance AspireHeSerializedCiphertext, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedCiphertext);
}

uint64_t base witness table accessor for Message in AspireHeSerializedCiphertext()
{
  return lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeSerializedCiphertext and conformance AspireHeSerializedCiphertext, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedCiphertext);
}

uint64_t base witness table accessor for Hashable in AspireHeSerializedCiphertext()
{
  return lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeSerializedCiphertext and conformance AspireHeSerializedCiphertext, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedCiphertext);
}

uint64_t base witness table accessor for Equatable in AspireHeSerializedCiphertext()
{
  return lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeSerializedCiphertext and conformance AspireHeSerializedCiphertext, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedCiphertext);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspireHeSerializedSeededCiphertext()
{
  return lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeSerializedSeededCiphertext and conformance AspireHeSerializedSeededCiphertext, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedSeededCiphertext);
}

uint64_t base witness table accessor for Message in AspireHeSerializedSeededCiphertext()
{
  return lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeSerializedSeededCiphertext and conformance AspireHeSerializedSeededCiphertext, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedSeededCiphertext);
}

uint64_t base witness table accessor for Hashable in AspireHeSerializedSeededCiphertext()
{
  return lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeSerializedSeededCiphertext and conformance AspireHeSerializedSeededCiphertext, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedSeededCiphertext);
}

uint64_t base witness table accessor for Equatable in AspireHeSerializedSeededCiphertext()
{
  return lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeSerializedSeededCiphertext and conformance AspireHeSerializedSeededCiphertext, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedSeededCiphertext);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspireHeSerializedFullCiphertext()
{
  return lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeSerializedFullCiphertext and conformance AspireHeSerializedFullCiphertext, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedFullCiphertext);
}

uint64_t base witness table accessor for Message in AspireHeSerializedFullCiphertext()
{
  return lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeSerializedFullCiphertext and conformance AspireHeSerializedFullCiphertext, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedFullCiphertext);
}

uint64_t base witness table accessor for Hashable in AspireHeSerializedFullCiphertext()
{
  return lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeSerializedFullCiphertext and conformance AspireHeSerializedFullCiphertext, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedFullCiphertext);
}

uint64_t base witness table accessor for Equatable in AspireHeSerializedFullCiphertext()
{
  return lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeSerializedFullCiphertext and conformance AspireHeSerializedFullCiphertext, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedFullCiphertext);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspireHeSerializedKeySwitchKey()
{
  return lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeSerializedKeySwitchKey and conformance AspireHeSerializedKeySwitchKey, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedKeySwitchKey);
}

uint64_t base witness table accessor for Message in AspireHeSerializedKeySwitchKey()
{
  return lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeSerializedKeySwitchKey and conformance AspireHeSerializedKeySwitchKey, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedKeySwitchKey);
}

uint64_t base witness table accessor for Hashable in AspireHeSerializedKeySwitchKey()
{
  return lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeSerializedKeySwitchKey and conformance AspireHeSerializedKeySwitchKey, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedKeySwitchKey);
}

uint64_t base witness table accessor for Equatable in AspireHeSerializedKeySwitchKey()
{
  return lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeSerializedKeySwitchKey and conformance AspireHeSerializedKeySwitchKey, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedKeySwitchKey);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspireHeSerializedGaloisKey()
{
  return lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeSerializedGaloisKey and conformance AspireHeSerializedGaloisKey, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedGaloisKey);
}

uint64_t base witness table accessor for Message in AspireHeSerializedGaloisKey()
{
  return lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeSerializedGaloisKey and conformance AspireHeSerializedGaloisKey, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedGaloisKey);
}

uint64_t base witness table accessor for Hashable in AspireHeSerializedGaloisKey()
{
  return lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeSerializedGaloisKey and conformance AspireHeSerializedGaloisKey, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedGaloisKey);
}

uint64_t base witness table accessor for Equatable in AspireHeSerializedGaloisKey()
{
  return lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeSerializedGaloisKey and conformance AspireHeSerializedGaloisKey, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedGaloisKey);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspireHeSerializedRelinKey()
{
  return lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeSerializedRelinKey and conformance AspireHeSerializedRelinKey, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedRelinKey);
}

uint64_t base witness table accessor for Message in AspireHeSerializedRelinKey()
{
  return lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeSerializedRelinKey and conformance AspireHeSerializedRelinKey, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedRelinKey);
}

uint64_t base witness table accessor for Hashable in AspireHeSerializedRelinKey()
{
  return lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeSerializedRelinKey and conformance AspireHeSerializedRelinKey, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedRelinKey);
}

uint64_t base witness table accessor for Equatable in AspireHeSerializedRelinKey()
{
  return lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeSerializedRelinKey and conformance AspireHeSerializedRelinKey, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedRelinKey);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspireHeSerializedSecretKey()
{
  return lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeSerializedSecretKey and conformance AspireHeSerializedSecretKey, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedSecretKey);
}

uint64_t base witness table accessor for Message in AspireHeSerializedSecretKey()
{
  return lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeSerializedSecretKey and conformance AspireHeSerializedSecretKey, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedSecretKey);
}

uint64_t base witness table accessor for Hashable in AspireHeSerializedSecretKey()
{
  return lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeSerializedSecretKey and conformance AspireHeSerializedSecretKey, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedSecretKey);
}

uint64_t base witness table accessor for Equatable in AspireHeSerializedSecretKey()
{
  return lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeSerializedSecretKey and conformance AspireHeSerializedSecretKey, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedSecretKey);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspireHeSerializedEvaluationKey()
{
  return lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeSerializedEvaluationKey and conformance AspireHeSerializedEvaluationKey, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedEvaluationKey);
}

uint64_t base witness table accessor for Message in AspireHeSerializedEvaluationKey()
{
  return lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeSerializedEvaluationKey and conformance AspireHeSerializedEvaluationKey, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedEvaluationKey);
}

uint64_t base witness table accessor for Hashable in AspireHeSerializedEvaluationKey()
{
  return lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeSerializedEvaluationKey and conformance AspireHeSerializedEvaluationKey, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedEvaluationKey);
}

uint64_t base witness table accessor for Equatable in AspireHeSerializedEvaluationKey()
{
  return lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeSerializedEvaluationKey and conformance AspireHeSerializedEvaluationKey, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedEvaluationKey);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspireHeEvaluationKeyConfig()
{
  return lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeEvaluationKeyConfig and conformance AspireHeEvaluationKeyConfig, (void (*)(uint64_t))type metadata accessor for AspireHeEvaluationKeyConfig);
}

uint64_t base witness table accessor for Message in AspireHeEvaluationKeyConfig()
{
  return lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeEvaluationKeyConfig and conformance AspireHeEvaluationKeyConfig, (void (*)(uint64_t))type metadata accessor for AspireHeEvaluationKeyConfig);
}

uint64_t base witness table accessor for Hashable in AspireHeEvaluationKeyConfig()
{
  return lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeEvaluationKeyConfig and conformance AspireHeEvaluationKeyConfig, (void (*)(uint64_t))type metadata accessor for AspireHeEvaluationKeyConfig);
}

uint64_t base witness table accessor for Equatable in AspireHeEvaluationKeyConfig()
{
  return lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeEvaluationKeyConfig and conformance AspireHeEvaluationKeyConfig, (void (*)(uint64_t))type metadata accessor for AspireHeEvaluationKeyConfig);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspireHeEncryptionParameters()
{
  return lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeEncryptionParameters and conformance AspireHeEncryptionParameters, (void (*)(uint64_t))type metadata accessor for AspireHeEncryptionParameters);
}

uint64_t base witness table accessor for Message in AspireHeEncryptionParameters()
{
  return lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext((unint64_t *)&lazy protocol witness table cache variable for type AspireHeEncryptionParameters and conformance AspireHeEncryptionParameters, (void (*)(uint64_t))type metadata accessor for AspireHeEncryptionParameters);
}

uint64_t base witness table accessor for Hashable in AspireHeEncryptionParameters()
{
  return lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeEncryptionParameters and conformance AspireHeEncryptionParameters, (void (*)(uint64_t))type metadata accessor for AspireHeEncryptionParameters);
}

uint64_t base witness table accessor for Equatable in AspireHeEncryptionParameters()
{
  return lazy protocol witness table accessor for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext(&lazy protocol witness table cache variable for type AspireHeEncryptionParameters and conformance AspireHeEncryptionParameters, (void (*)(uint64_t))type metadata accessor for AspireHeEncryptionParameters);
}

uint64_t sub_249E24E88@<X0>(_OWORD *a1@<X8>)
{
  return AspireHeSerializedCiphertext.seeded.getter(a1);
}

uint64_t sub_249E24EAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AspireHeSerializedCiphertext.seeded : AspireHeSerializedCiphertext(a1, a2, a3, a4, type metadata accessor for AspireHeSerializedSeededCiphertext, type metadata accessor for AspireHeSerializedSeededCiphertext, type metadata accessor for AspireHeSerializedSeededCiphertext);
}

uint64_t sub_249E24F04@<X0>(uint64_t a1@<X8>)
{
  return AspireHeSerializedCiphertext.full.getter(a1);
}

uint64_t sub_249E24F28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AspireHeSerializedCiphertext.seeded : AspireHeSerializedCiphertext(a1, a2, a3, a4, type metadata accessor for AspireHeSerializedFullCiphertext, type metadata accessor for AspireHeSerializedFullCiphertext, type metadata accessor for AspireHeSerializedFullCiphertext);
}

uint64_t sub_249E24FA0@<X0>(uint64_t a1@<X8>)
{
  return AspireHeEvaluationKeyConfig.encryptionParameters.getter(a1);
}

ValueMetadata *type metadata accessor for AspireHeSecurityLevel()
{
  return &type metadata for AspireHeSecurityLevel;
}

ValueMetadata *type metadata accessor for AspireHeErrorStdDev()
{
  return &type metadata for AspireHeErrorStdDev;
}

ValueMetadata *type metadata accessor for AspireHeHeScheme()
{
  return &type metadata for AspireHeHeScheme;
}

uint64_t getEnumTagSinglePayload for AspireHeSerializedDcrtPlaintext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_0);
}

uint64_t storeEnumTagSinglePayload for AspireHeSerializedDcrtPlaintext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_0);
}

uint64_t type metadata completion function for AspireHeSerializedDcrtPlaintext()
{
  return type metadata completion function for AspirePirPIRShardingFunctionDoubleMod();
}

uint64_t getEnumTagSinglePayload for AspireHeSerializedCiphertextVec(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_56Tm_8);
}

uint64_t storeEnumTagSinglePayload for AspireHeSerializedCiphertextVec(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_57Tm_8);
}

uint64_t *initializeBufferWithCopyOfBuffer for AspireHeSerializedCiphertext(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(0);
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      uint64_t v12 = *a2;
      unint64_t v13 = a2[1];
      outlined copy of Data._Representation(*a2, v13);
      *a1 = v12;
      a1[1] = v13;
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v14 = a2[3];
        a1[2] = a2[2];
        a1[3] = v14;
        uint64_t v15 = *(int *)(type metadata accessor for AspireHeSerializedFullCiphertext(0) + 28);
        char v30 = (char *)a1 + v15;
        uint64_t v16 = (char *)a2 + v15;
        uint64_t v17 = type metadata accessor for UnknownStorage();
        char v18 = *(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16);
        swift_bridgeObjectRetain();
        v18(v30, v16, v17);
      }
      else
      {
        uint64_t v19 = a2[2];
        unint64_t v20 = a2[3];
        outlined copy of Data._Representation(v19, v20);
        a1[2] = v19;
        a1[3] = v20;
        uint64_t v21 = *(int *)(type metadata accessor for AspireHeSerializedSeededCiphertext(0) + 24);
        uint64_t v22 = (char *)a1 + v21;
        uint64_t v23 = (char *)a2 + v21;
        uint64_t v24 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 16))(v22, v23, v24);
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    uint64_t v25 = *(int *)(a3 + 20);
    uint64_t v26 = (char *)a1 + v25;
    uint64_t v27 = (char *)a2 + v25;
    uint64_t v28 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 16))(v26, v27, v28);
  }
  return a1;
}

uint64_t destroy for AspireHeSerializedCiphertext(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, 1, v4))
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
    if (EnumCaseMultiPayload == 1)
    {
      swift_bridgeObjectRelease();
      uint64_t v6 = *(int *)(type metadata accessor for AspireHeSerializedFullCiphertext(0) + 28);
    }
    else
    {
      outlined consume of Data._Representation(*(void *)(a1 + 16), *(void *)(a1 + 24));
      uint64_t v6 = *(int *)(type metadata accessor for AspireHeSerializedSeededCiphertext(0) + 24);
    }
    uint64_t v7 = a1 + v6;
    uint64_t v8 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  }
  uint64_t v9 = a1 + *(int *)(a2 + 20);
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8);
  return v11(v9, v10);
}

void *initializeWithCopy for AspireHeSerializedCiphertext(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v10 = *a2;
    unint64_t v11 = a2[1];
    outlined copy of Data._Representation(*a2, v11);
    *a1 = v10;
    a1[1] = v11;
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v12 = a2[3];
      a1[2] = a2[2];
      a1[3] = v12;
      uint64_t v13 = *(int *)(type metadata accessor for AspireHeSerializedFullCiphertext(0) + 28);
      uint64_t v28 = (char *)a1 + v13;
      uint64_t v14 = (char *)a2 + v13;
      uint64_t v15 = type metadata accessor for UnknownStorage();
      uint64_t v16 = *(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16);
      swift_bridgeObjectRetain();
      v16(v28, v14, v15);
    }
    else
    {
      uint64_t v17 = a2[2];
      unint64_t v18 = a2[3];
      outlined copy of Data._Representation(v17, v18);
      a1[2] = v17;
      a1[3] = v18;
      uint64_t v19 = *(int *)(type metadata accessor for AspireHeSerializedSeededCiphertext(0) + 24);
      unint64_t v20 = (char *)a1 + v19;
      uint64_t v21 = (char *)a2 + v19;
      uint64_t v22 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 16))(v20, v21, v22);
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v23 = *(int *)(a3 + 20);
  uint64_t v24 = (char *)a1 + v23;
  uint64_t v25 = (char *)a2 + v23;
  uint64_t v26 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 16))(v24, v25, v26);
  return a1;
}

uint64_t *assignWithCopy for AspireHeSerializedCiphertext(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      uint64_t v12 = *a2;
      unint64_t v13 = a2[1];
      outlined copy of Data._Representation(*a2, v13);
      *a1 = v12;
      a1[1] = v13;
      if (EnumCaseMultiPayload == 1)
      {
        a1[2] = a2[2];
        a1[3] = a2[3];
        uint64_t v14 = *(int *)(type metadata accessor for AspireHeSerializedFullCiphertext(0) + 28);
        uint64_t v44 = (char *)a1 + v14;
        uint64_t v15 = (char *)a2 + v14;
        uint64_t v16 = type metadata accessor for UnknownStorage();
        uint64_t v17 = *(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16);
        swift_bridgeObjectRetain();
        v17(v44, v15, v16);
      }
      else
      {
        uint64_t v27 = a2[2];
        unint64_t v28 = a2[3];
        outlined copy of Data._Representation(v27, v28);
        a1[2] = v27;
        a1[3] = v28;
        uint64_t v29 = *(int *)(type metadata accessor for AspireHeSerializedSeededCiphertext(0) + 24);
        char v30 = (char *)a1 + v29;
        uint64_t v31 = (char *)a2 + v29;
        uint64_t v32 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 16))(v30, v31, v32);
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_14;
    }
LABEL_7:
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    memcpy(a1, a2, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_14;
  }
  if (v10)
  {
    outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType((uint64_t)a1, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
    goto LABEL_7;
  }
  if (a1 != a2)
  {
    outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType((uint64_t)a1, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
    int v19 = swift_getEnumCaseMultiPayload();
    uint64_t v20 = *a2;
    unint64_t v21 = a2[1];
    outlined copy of Data._Representation(*a2, v21);
    *a1 = v20;
    a1[1] = v21;
    if (v19 == 1)
    {
      a1[2] = a2[2];
      a1[3] = a2[3];
      uint64_t v22 = *(int *)(type metadata accessor for AspireHeSerializedFullCiphertext(0) + 28);
      uint64_t v23 = (char *)a1 + v22;
      uint64_t v24 = (char *)a2 + v22;
      uint64_t v25 = type metadata accessor for UnknownStorage();
      uint64_t v26 = *(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 16);
      swift_bridgeObjectRetain();
      v26(v23, v24, v25);
    }
    else
    {
      uint64_t v38 = a2[2];
      unint64_t v39 = a2[3];
      outlined copy of Data._Representation(v38, v39);
      a1[2] = v38;
      a1[3] = v39;
      uint64_t v40 = *(int *)(type metadata accessor for AspireHeSerializedSeededCiphertext(0) + 24);
      uint64_t v41 = (char *)a1 + v40;
      char v42 = (char *)a2 + v40;
      uint64_t v43 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v43 - 8) + 16))(v41, v42, v43);
    }
    swift_storeEnumTagMultiPayload();
  }
LABEL_14:
  uint64_t v33 = *(int *)(a3 + 20);
  char v34 = (char *)a1 + v33;
  uint64_t v35 = (char *)a2 + v33;
  uint64_t v36 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v36 - 8) + 24))(v34, v35, v36);
  return a1;
}

_OWORD *initializeWithTake for AspireHeSerializedCiphertext(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    *a1 = *a2;
    a1[1] = a2[1];
    if (EnumCaseMultiPayload == 1) {
      uint64_t v10 = *(int *)(type metadata accessor for AspireHeSerializedFullCiphertext(0) + 28);
    }
    else {
      uint64_t v10 = *(int *)(type metadata accessor for AspireHeSerializedSeededCiphertext(0) + 24);
    }
    unint64_t v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    uint64_t v13 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v14 = *(int *)(a3 + 20);
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 32))(v15, v16, v17);
  return a1;
}

_OWORD *assignWithTake for AspireHeSerializedCiphertext(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      *a1 = *a2;
      a1[1] = a2[1];
      if (EnumCaseMultiPayload == 1) {
        uint64_t v12 = *(int *)(type metadata accessor for AspireHeSerializedFullCiphertext(0) + 28);
      }
      else {
        uint64_t v12 = *(int *)(type metadata accessor for AspireHeSerializedSeededCiphertext(0) + 24);
      }
      uint64_t v13 = (char *)a1 + v12;
      uint64_t v14 = (char *)a2 + v12;
      uint64_t v15 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32))(v13, v14, v15);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_14;
    }
LABEL_7:
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    memcpy(a1, a2, *(void *)(*(void *)(v16 - 8) + 64));
    goto LABEL_14;
  }
  if (v10)
  {
    outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType((uint64_t)a1, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
    goto LABEL_7;
  }
  if (a1 != a2)
  {
    outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType((uint64_t)a1, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
    int v17 = swift_getEnumCaseMultiPayload();
    *a1 = *a2;
    a1[1] = a2[1];
    if (v17 == 1) {
      uint64_t v18 = *(int *)(type metadata accessor for AspireHeSerializedFullCiphertext(0) + 28);
    }
    else {
      uint64_t v18 = *(int *)(type metadata accessor for AspireHeSerializedSeededCiphertext(0) + 24);
    }
    int v19 = (char *)a1 + v18;
    uint64_t v20 = (char *)a2 + v18;
    uint64_t v21 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 32))(v19, v20, v21);
    swift_storeEnumTagMultiPayload();
  }
LABEL_14:
  uint64_t v22 = *(int *)(a3 + 20);
  uint64_t v23 = (char *)a1 + v22;
  uint64_t v24 = (char *)a2 + v22;
  uint64_t v25 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 40))(v23, v24, v25);
  return a1;
}

uint64_t getEnumTagSinglePayload for AspireHeSerializedCiphertext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_249E260B0);
}

uint64_t sub_249E260B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = type metadata accessor for UnknownStorage();
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 20);
    return v11(v13, a2, v12);
  }
}

uint64_t storeEnumTagSinglePayload for AspireHeSerializedCiphertext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_249E261C0);
}

uint64_t sub_249E261C0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, v8);
  }
  else
  {
    uint64_t v12 = type metadata accessor for UnknownStorage();
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a4 + 20);
    return v13(v15, a2, a2, v14);
  }
}

void type metadata completion function for AspireHeSerializedCiphertext()
{
  type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?(319, &lazy cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
  if (v0 <= 0x3F)
  {
    type metadata accessor for UnknownStorage();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    outlined copy of Data._Representation(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v9 = a2[3];
      a1[2] = a2[2];
      a1[3] = v9;
      uint64_t v10 = *(int *)(type metadata accessor for AspireHeSerializedFullCiphertext(0) + 28);
      unint64_t v11 = (char *)a1 + v10;
      uint64_t v12 = (char *)a2 + v10;
      uint64_t v13 = type metadata accessor for UnknownStorage();
      uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16);
      swift_bridgeObjectRetain();
      v14(v11, v12, v13);
    }
    else
    {
      uint64_t v16 = a2[2];
      unint64_t v17 = a2[3];
      outlined copy of Data._Representation(v16, v17);
      a1[2] = v16;
      a1[3] = v17;
      uint64_t v18 = *(int *)(type metadata accessor for AspireHeSerializedSeededCiphertext(0) + 24);
      int v19 = (char *)a1 + v18;
      uint64_t v20 = (char *)a2 + v18;
      uint64_t v21 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16))(v19, v20, v21);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(uint64_t a1)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
  if (EnumCaseMultiPayload == 1)
  {
    swift_bridgeObjectRelease();
    uint64_t v3 = *(int *)(type metadata accessor for AspireHeSerializedFullCiphertext(0) + 28);
  }
  else
  {
    outlined consume of Data._Representation(*(void *)(a1 + 16), *(void *)(a1 + 24));
    uint64_t v3 = *(int *)(type metadata accessor for AspireHeSerializedSeededCiphertext(0) + 24);
  }
  uint64_t v4 = a1 + v3;
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

uint64_t *initializeWithCopy for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(uint64_t *a1, uint64_t *a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v5 = *a2;
  unint64_t v6 = a2[1];
  outlined copy of Data._Representation(*a2, v6);
  *a1 = v5;
  a1[1] = v6;
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v7 = a2[3];
    a1[2] = a2[2];
    a1[3] = v7;
    uint64_t v8 = *(int *)(type metadata accessor for AspireHeSerializedFullCiphertext(0) + 28);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
  }
  else
  {
    uint64_t v13 = a2[2];
    unint64_t v14 = a2[3];
    outlined copy of Data._Representation(v13, v14);
    a1[2] = v13;
    a1[3] = v14;
    uint64_t v15 = *(int *)(type metadata accessor for AspireHeSerializedSeededCiphertext(0) + 24);
    uint64_t v16 = (char *)a1 + v15;
    unint64_t v17 = (char *)a2 + v15;
    uint64_t v18 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t *assignWithCopy for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(uint64_t *a1, uint64_t *a2)
{
  if (a1 != a2)
  {
    outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType((uint64_t)a1, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v5 = *a2;
    unint64_t v6 = a2[1];
    outlined copy of Data._Representation(*a2, v6);
    *a1 = v5;
    a1[1] = v6;
    if (EnumCaseMultiPayload == 1)
    {
      a1[2] = a2[2];
      a1[3] = a2[3];
      uint64_t v7 = *(int *)(type metadata accessor for AspireHeSerializedFullCiphertext(0) + 28);
      uint64_t v8 = (char *)a1 + v7;
      uint64_t v9 = (char *)a2 + v7;
      uint64_t v10 = type metadata accessor for UnknownStorage();
      uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
      swift_bridgeObjectRetain();
      v11(v8, v9, v10);
    }
    else
    {
      uint64_t v12 = a2[2];
      unint64_t v13 = a2[3];
      outlined copy of Data._Representation(v12, v13);
      a1[2] = v12;
      a1[3] = v13;
      uint64_t v14 = *(int *)(type metadata accessor for AspireHeSerializedSeededCiphertext(0) + 24);
      uint64_t v15 = (char *)a1 + v14;
      uint64_t v16 = (char *)a2 + v14;
      uint64_t v17 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16))(v15, v16, v17);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_OWORD *initializeWithTake for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(_OWORD *a1, _OWORD *a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  *a1 = *a2;
  a1[1] = a2[1];
  if (EnumCaseMultiPayload == 1) {
    uint64_t v5 = *(int *)(type metadata accessor for AspireHeSerializedFullCiphertext(0) + 28);
  }
  else {
    uint64_t v5 = *(int *)(type metadata accessor for AspireHeSerializedSeededCiphertext(0) + 24);
  }
  unint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  swift_storeEnumTagMultiPayload();
  return a1;
}

_OWORD *assignWithTake for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(_OWORD *a1, _OWORD *a2)
{
  if (a1 != a2)
  {
    outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType((uint64_t)a1, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    *a1 = *a2;
    a1[1] = a2[1];
    if (EnumCaseMultiPayload == 1) {
      uint64_t v5 = *(int *)(type metadata accessor for AspireHeSerializedFullCiphertext(0) + 28);
    }
    else {
      uint64_t v5 = *(int *)(type metadata accessor for AspireHeSerializedSeededCiphertext(0) + 24);
    }
    unint64_t v6 = (char *)a1 + v5;
    uint64_t v7 = (char *)a2 + v5;
    uint64_t v8 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata completion function for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType()
{
  uint64_t result = type metadata accessor for AspireHeSerializedSeededCiphertext(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for AspireHeSerializedFullCiphertext(319);
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AspireHeSerializedSeededCiphertext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_249E26BF8);
}

uint64_t sub_249E26BF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 8) >> 60;
    if (((4 * v4) & 0xC) != 0) {
      return 16 - ((4 * v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for AspireHeSerializedSeededCiphertext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_249E26CC8);
}

void *sub_249E26CC8(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *uint64_t result = 0;
    result[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 24);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for AspireHeSerializedSeededCiphertext()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AspireHeSerializedFullCiphertext(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    outlined copy of Data._Representation(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = a2[3];
    a1[2] = a2[2];
    a1[3] = v9;
    uint64_t v10 = *(int *)(a3 + 28);
    uint64_t v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    uint64_t v13 = type metadata accessor for UnknownStorage();
    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16);
    swift_bridgeObjectRetain();
    v14(v11, v12, v13);
  }
  return a1;
}

uint64_t destroy for AspireHeSerializedFullCiphertext(uint64_t a1, uint64_t a2)
{
  outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

uint64_t *initializeWithCopy for AspireHeSerializedFullCiphertext(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  outlined copy of Data._Representation(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = a2[3];
  a1[2] = a2[2];
  a1[3] = v8;
  uint64_t v9 = *(int *)(a3 + 28);
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for UnknownStorage();
  uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
  swift_bridgeObjectRetain();
  v13(v10, v11, v12);
  return a1;
}

uint64_t *assignWithCopy for AspireHeSerializedFullCiphertext(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  outlined copy of Data._Representation(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  outlined consume of Data._Representation(v8, v9);
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  uint64_t v10 = *(int *)(a3 + 28);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

_OWORD *initializeWithTake for AspireHeSerializedFullCiphertext(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 28);
  uint64_t v6 = (char *)a1 + v5;
  unint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t *assignWithTake for AspireHeSerializedFullCiphertext(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  outlined consume of Data._Representation(v6, v7);
  a1[2] = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  a1[3] = *(void *)(a2 + 24);
  uint64_t v8 = *(int *)(a3 + 28);
  unint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for AspireHeSerializedFullCiphertext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_249E27244);
}

uint64_t sub_249E27244(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 28);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for AspireHeSerializedFullCiphertext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_249E27308);
}

uint64_t sub_249E27308(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 16) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 28);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for AspireHeSerializedFullCiphertext()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

char *initializeBufferWithCopyOfBuffer for AspireHeSerializedKeySwitchKey(char *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *(void *)a1 = *a2;
    a1 = (char *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, (char *)a2, v7);
    uint64_t v9 = *(int *)(a3 + 20);
    uint64_t v10 = &a1[v9];
    uint64_t v11 = (uint64_t *)((char *)a2 + v9);
    uint64_t v12 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
    uint64_t v13 = *(void *)(v12 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      *(void *)uint64_t v10 = *v11;
      uint64_t v16 = *(int *)(v12 + 20);
      uint64_t v17 = &v10[v16];
      uint64_t v18 = (char *)v11 + v16;
      swift_bridgeObjectRetain();
      v8(v17, v18, v7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
  }
  return a1;
}

uint64_t destroy for AspireHeSerializedKeySwitchKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v9(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6);
  if (!result)
  {
    swift_bridgeObjectRelease();
    uint64_t v8 = v5 + *(int *)(v6 + 20);
    return ((uint64_t (*)(uint64_t, uint64_t))v9)(v8, v4);
  }
  return result;
}

uint64_t initializeWithCopy for AspireHeSerializedKeySwitchKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  uint64_t v11 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    *uint64_t v9 = *v10;
    uint64_t v14 = *(int *)(v11 + 20);
    uint64_t v15 = (char *)v9 + v14;
    uint64_t v16 = (char *)v10 + v14;
    swift_bridgeObjectRetain();
    v7((uint64_t)v15, (uint64_t)v16, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  return a1;
}

uint64_t assignWithCopy for AspireHeSerializedKeySwitchKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v22 = *(void *)(v6 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 24);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v23 = a1;
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  uint64_t v11 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  int v14 = v13(v9, 1, v11);
  int v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      *uint64_t v9 = *v10;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v7((uint64_t)v9 + *(int *)(v11 + 20), (uint64_t)v10 + *(int *)(v11 + 20), v6);
      return v23;
    }
    outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType((uint64_t)v9, type metadata accessor for AspireHeSerializedCiphertextVec);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
    memcpy(v9, v10, *(void *)(*(void *)(v20 - 8) + 64));
    return v23;
  }
  *uint64_t v9 = *v10;
  uint64_t v16 = *(int *)(v11 + 20);
  uint64_t v17 = (char *)v9 + v16;
  uint64_t v18 = (char *)v10 + v16;
  int v19 = *(void (**)(char *, char *, uint64_t))(v22 + 16);
  swift_bridgeObjectRetain();
  v19(v17, v18, v6);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  return v23;
}

char *initializeWithTake for AspireHeSerializedKeySwitchKey(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v11 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    *(void *)uint64_t v9 = *(void *)v10;
    v7(&v9[*(int *)(v11 + 20)], &v10[*(int *)(v11 + 20)], v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  return a1;
}

uint64_t assignWithTake for AspireHeSerializedKeySwitchKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v18 = *(void *)(v6 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 40);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v19 = a1;
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  uint64_t v11 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  int v14 = v13(v9, 1, v11);
  int v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      *uint64_t v9 = *v10;
      swift_bridgeObjectRelease();
      v7((uint64_t)v9 + *(int *)(v11 + 20), (uint64_t)v10 + *(int *)(v11 + 20), v6);
      return v19;
    }
    outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType((uint64_t)v9, type metadata accessor for AspireHeSerializedCiphertextVec);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
    memcpy(v9, v10, *(void *)(*(void *)(v16 - 8) + 64));
    return v19;
  }
  *uint64_t v9 = *v10;
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))((char *)v9 + *(int *)(v11 + 20), (char *)v10 + *(int *)(v11 + 20), v6);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  return v19;
}

uint64_t getEnumTagSinglePayload for AspireHeSerializedKeySwitchKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_249E27E58);
}

uint64_t sub_249E27E58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_45Tm(a1, a2, a3, &demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
}

uint64_t storeEnumTagSinglePayload for AspireHeSerializedKeySwitchKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_249E27E78);
}

uint64_t sub_249E27E78(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_46Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
}

void type metadata completion function for AspireHeSerializedKeySwitchKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t getEnumTagSinglePayload for AspireHeSerializedGaloisKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_56Tm_9);
}

uint64_t storeEnumTagSinglePayload for AspireHeSerializedGaloisKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_57Tm_9);
}

uint64_t *initializeBufferWithCopyOfBuffer for AspireHeSerializedRelinKey(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    uint64_t v9 = *(int *)(a3 + 20);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
    uint64_t v13 = *(void *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v10, (uint64_t *)v11, v7);
      uint64_t v16 = *(int *)(v12 + 20);
      __dst = &v10[v16];
      uint64_t v17 = &v11[v16];
      uint64_t v18 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
      uint64_t v19 = *(void *)(v18 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
      {
        uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
        memcpy(__dst, v17, *(void *)(*(void *)(v20 - 8) + 64));
      }
      else
      {
        *(void *)__dst = *(void *)v17;
        uint64_t v21 = *(int *)(v18 + 20);
        uint64_t v24 = &__dst[v21];
        uint64_t v22 = &v17[v21];
        swift_bridgeObjectRetain();
        v8((uint64_t *)v24, (uint64_t *)v22, v7);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(__dst, 0, 1, v18);
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
  }
  return a1;
}

uint64_t destroy for AspireHeSerializedRelinKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v11(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6);
  if (!result)
  {
    v11(v5, v4);
    uint64_t v8 = v5 + *(int *)(v6 + 20);
    uint64_t v9 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9);
    if (!result)
    {
      swift_bridgeObjectRelease();
      uint64_t v10 = v8 + *(int *)(v9 + 20);
      return ((uint64_t (*)(uint64_t, uint64_t))v11)(v10, v4);
    }
  }
  return result;
}

uint64_t initializeWithCopy for AspireHeSerializedRelinKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = *(int *)(v11 + 20);
    __dst = &v9[v14];
    uint64_t v15 = &v10[v14];
    uint64_t v16 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
    uint64_t v17 = *(void *)(v16 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
      memcpy(__dst, v15, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      *(void *)__dst = *(void *)v15;
      uint64_t v19 = *(int *)(v16 + 20);
      uint64_t v22 = &__dst[v19];
      uint64_t v20 = &v15[v19];
      swift_bridgeObjectRetain();
      v7((uint64_t)v22, (uint64_t)v20, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(__dst, 0, 1, v16);
    }
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  return a1;
}

uint64_t assignWithCopy for AspireHeSerializedRelinKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v41 = *(void *)(v6 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 24);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v43 = a1;
  uint64_t v9 = a1 + v8;
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  int v14 = v13(v9, 1, v11);
  int v15 = v13((uint64_t)v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      v7(v9, (uint64_t)v10, v6);
      uint64_t v26 = *(int *)(v11 + 20);
      uint64_t v27 = (char *)(v9 + v26);
      unint64_t v28 = &v10[v26];
      uint64_t v29 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
      uint64_t v30 = *(void *)(v29 - 8);
      uint64_t v31 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v30 + 48);
      int v32 = v31(v27, 1, v29);
      int v33 = v31(v28, 1, v29);
      if (v32)
      {
        if (!v33)
        {
          *(void *)uint64_t v27 = *(void *)v28;
          uint64_t v34 = *(int *)(v29 + 20);
          uint64_t v35 = &v27[v34];
          uint64_t v36 = &v28[v34];
          uint64_t v37 = *(void (**)(char *, char *, uint64_t))(v41 + 16);
          swift_bridgeObjectRetain();
          v37(v35, v36, v6);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
          return v43;
        }
      }
      else
      {
        if (!v33)
        {
          *(void *)uint64_t v27 = *(void *)v28;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          v7((uint64_t)&v27[*(int *)(v29 + 20)], (uint64_t)&v28[*(int *)(v29 + 20)], v6);
          return v43;
        }
        outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType((uint64_t)v27, type metadata accessor for AspireHeSerializedCiphertextVec);
      }
      size_t v23 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?)
                                  - 8)
                      + 64);
      uint64_t v24 = v27;
      uint64_t v25 = v28;
      goto LABEL_8;
    }
    outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(v9, type metadata accessor for AspireHeSerializedKeySwitchKey);
LABEL_7:
    size_t v23 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?)
                                - 8)
                    + 64);
    uint64_t v24 = (void *)v9;
    uint64_t v25 = v10;
LABEL_8:
    memcpy(v24, v25, v23);
    return v43;
  }
  if (v15) {
    goto LABEL_7;
  }
  uint64_t v16 = *(void (**)(uint64_t, char *, uint64_t))(v41 + 16);
  v16(v9, v10, v6);
  uint64_t v17 = *(int *)(v11 + 20);
  uint64_t v18 = (void *)(v9 + v17);
  uint64_t v19 = &v10[v17];
  uint64_t v20 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
  uint64_t v21 = *(void *)(v20 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
    memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    *uint64_t v18 = *(void *)v19;
    uint64_t v38 = *(int *)(v20 + 20);
    char v42 = (char *)v18 + v38;
    unint64_t v39 = &v19[v38];
    swift_bridgeObjectRetain();
    v16((uint64_t)v42, v39, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  return v43;
}

uint64_t initializeWithTake for AspireHeSerializedRelinKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = *(int *)(v11 + 20);
    __dst = &v9[v14];
    int v15 = &v10[v14];
    uint64_t v16 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
    uint64_t v17 = *(void *)(v16 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
      memcpy(__dst, v15, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      *(void *)__dst = *(void *)v15;
      v7((uint64_t)&__dst[*(int *)(v16 + 20)], (uint64_t)&v15[*(int *)(v16 + 20)], v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(__dst, 0, 1, v16);
    }
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  return a1;
}

uint64_t assignWithTake for AspireHeSerializedRelinKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v35 = *(void *)(v6 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 40);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v36 = a1;
  uint64_t v9 = a1 + v8;
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  int v14 = v13(v9, 1, v11);
  int v15 = v13((uint64_t)v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      v7(v9, (uint64_t)v10, v6);
      uint64_t v26 = *(int *)(v11 + 20);
      uint64_t v27 = (char *)(v9 + v26);
      unint64_t v28 = &v10[v26];
      uint64_t v29 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
      uint64_t v30 = *(void *)(v29 - 8);
      uint64_t v31 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v30 + 48);
      int v32 = v31(v27, 1, v29);
      int v33 = v31(v28, 1, v29);
      if (v32)
      {
        if (!v33)
        {
          *(void *)uint64_t v27 = *(void *)v28;
          (*(void (**)(char *, char *, uint64_t))(v35 + 32))(&v27[*(int *)(v29 + 20)], &v28[*(int *)(v29 + 20)], v6);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
          return v36;
        }
      }
      else
      {
        if (!v33)
        {
          *(void *)uint64_t v27 = *(void *)v28;
          swift_bridgeObjectRelease();
          v7((uint64_t)&v27[*(int *)(v29 + 20)], (uint64_t)&v28[*(int *)(v29 + 20)], v6);
          return v36;
        }
        outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType((uint64_t)v27, type metadata accessor for AspireHeSerializedCiphertextVec);
      }
      size_t v23 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?)
                                  - 8)
                      + 64);
      uint64_t v24 = v27;
      uint64_t v25 = v28;
      goto LABEL_8;
    }
    outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(v9, type metadata accessor for AspireHeSerializedKeySwitchKey);
LABEL_7:
    size_t v23 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?)
                                - 8)
                    + 64);
    uint64_t v24 = (void *)v9;
    uint64_t v25 = v10;
LABEL_8:
    memcpy(v24, v25, v23);
    return v36;
  }
  if (v15) {
    goto LABEL_7;
  }
  uint64_t v16 = *(void (**)(uint64_t, char *, uint64_t))(v35 + 32);
  v16(v9, v10, v6);
  uint64_t v17 = *(int *)(v11 + 20);
  uint64_t v18 = (void *)(v9 + v17);
  uint64_t v19 = &v10[v17];
  uint64_t v20 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
  uint64_t v21 = *(void *)(v20 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
    memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    *uint64_t v18 = *(void *)v19;
    v16((uint64_t)v18 + *(int *)(v20 + 20), &v19[*(int *)(v20 + 20)], v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  return v36;
}

uint64_t getEnumTagSinglePayload for AspireHeSerializedRelinKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_249E29058);
}

uint64_t sub_249E29058(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_45Tm(a1, a2, a3, &demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
}

uint64_t __swift_get_extra_inhabitant_index_45Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a2)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    return v10(a1, a2, v8);
  }
  else
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(a4);
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a3 + 20);
    return v13(v15, a2, v14);
  }
}

uint64_t storeEnumTagSinglePayload for AspireHeSerializedRelinKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_249E29174);
}

uint64_t sub_249E29174(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_46Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
}

uint64_t __swift_store_extra_inhabitant_index_46Tm(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void *)(v10 - 8);
  if (*(_DWORD *)(v11 + 84) == a3)
  {
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
    return v12(a1, a2, a2, v10);
  }
  else
  {
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(a5);
    uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
    uint64_t v16 = v14;
    uint64_t v17 = a1 + *(int *)(a4 + 20);
    return v15(v17, a2, a2, v16);
  }
}

void type metadata completion function for AspireHeSerializedRelinKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void type metadata completion function for AspireHeSerializedKeySwitchKey(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, void (*a5)(uint64_t))
{
  type metadata accessor for UnknownStorage();
  if (v7 <= 0x3F)
  {
    type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?(319, a4, a5);
    if (v8 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for AspireHeSerializedDcrtPlaintext(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    outlined copy of Data._Representation(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = *(int *)(a3 + 20);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
  }
  return a1;
}

uint64_t destroy for AspireHeSerializedDcrtPlaintext(uint64_t a1, uint64_t a2)
{
  outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

uint64_t *initializeWithCopy for AspireHeSerializedDcrtPlaintext(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  outlined copy of Data._Representation(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  return a1;
}

uint64_t *assignWithCopy for AspireHeSerializedDcrtPlaintext(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  outlined copy of Data._Representation(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  outlined consume of Data._Representation(v8, v9);
  uint64_t v10 = *(int *)(a3 + 20);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

_OWORD *initializeWithTake for AspireHeSerializedDcrtPlaintext(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t *assignWithTake for AspireHeSerializedDcrtPlaintext(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  outlined consume of Data._Representation(v6, v7);
  uint64_t v8 = *(int *)(a3 + 20);
  unint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for AspireHeSerializedSecretKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_249E29750);
}

uint64_t __swift_get_extra_inhabitant_indexTm_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 8) >> 60;
    if (((4 * v4) & 0xC) != 0) {
      return 16 - ((4 * v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for AspireHeSerializedSecretKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_249E29824);
}

void *__swift_store_extra_inhabitant_indexTm_0(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *uint64_t result = 0;
    result[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AspireHeSerializedEvaluationKey(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    uint64_t v9 = *(int *)(a3 + 20);
    uint64_t v10 = (uint64_t *)((char *)a1 + v9);
    uint64_t v11 = (uint64_t *)((char *)a2 + v9);
    uint64_t v12 = type metadata accessor for AspireHeSerializedGaloisKey(0);
    uint64_t v13 = *(void *)(v12 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      *uint64_t v10 = *v11;
      uint64_t v16 = *(int *)(v12 + 20);
      uint64_t v17 = v8;
      uint64_t v18 = (char *)v10 + v16;
      uint64_t v19 = (char *)v11 + v16;
      swift_bridgeObjectRetain();
      uint64_t v20 = v18;
      uint64_t v8 = v17;
      v17((uint64_t *)v20, (uint64_t *)v19, v7);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    uint64_t v21 = *(int *)(a3 + 24);
    uint64_t v22 = (char *)a1 + v21;
    size_t v23 = (char *)a2 + v21;
    uint64_t v24 = type metadata accessor for AspireHeSerializedRelinKey(0);
    uint64_t v25 = *(void *)(v24 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
    {
      uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
      memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v22, (uint64_t *)v23, v7);
      uint64_t v27 = *(int *)(v24 + 20);
      unint64_t v28 = &v22[v27];
      uint64_t v44 = (void (*)(char *, char *, uint64_t))v8;
      uint64_t v29 = &v23[v27];
      uint64_t v30 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
      uint64_t v31 = *(void *)(v30 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
      {
        uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
        memcpy(v28, v29, *(void *)(*(void *)(v32 - 8) + 64));
      }
      else
      {
        v44(v28, v29, v7);
        uint64_t v33 = *(int *)(v30 + 20);
        char v42 = &v28[v33];
        uint64_t v43 = v28;
        uint64_t v34 = &v29[v33];
        uint64_t v35 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
        uint64_t v40 = *(void *)(v35 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v34, 1, v35))
        {
          uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
          memcpy(v42, v34, *(void *)(*(void *)(v36 - 8) + 64));
        }
        else
        {
          *(void *)char v42 = *(void *)v34;
          uint64_t v37 = *(int *)(v35 + 20);
          unint64_t v39 = &v42[v37];
          uint64_t v41 = &v34[v37];
          swift_bridgeObjectRetain();
          v44(v39, v41, v7);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v40 + 56))(v42, 0, 1, v35);
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v31 + 56))(v43, 0, 1, v30);
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
    }
  }
  return a1;
}

uint64_t destroy for AspireHeSerializedEvaluationKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v15 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v15(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = type metadata accessor for AspireHeSerializedGaloisKey(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6))
  {
    swift_bridgeObjectRelease();
    v15(v5 + *(int *)(v6 + 20), v4);
  }
  uint64_t v7 = a1 + *(int *)(a2 + 24);
  uint64_t v8 = type metadata accessor for AspireHeSerializedRelinKey(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v7, 1, v8);
  if (!result)
  {
    v15(v7, v4);
    uint64_t v10 = v7 + *(int *)(v8 + 20);
    uint64_t v11 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v10, 1, v11);
    if (!result)
    {
      v15(v10, v4);
      uint64_t v12 = v10 + *(int *)(v11 + 20);
      uint64_t v13 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v12, 1, v13);
      if (!result)
      {
        swift_bridgeObjectRelease();
        uint64_t v14 = v12 + *(int *)(v13 + 20);
        return ((uint64_t (*)(uint64_t, uint64_t))v15)(v14, v4);
      }
    }
  }
  return result;
}

uint64_t initializeWithCopy for AspireHeSerializedEvaluationKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  uint64_t v11 = type metadata accessor for AspireHeSerializedGaloisKey(0);
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    *uint64_t v9 = *v10;
    uint64_t v14 = *(int *)(v11 + 20);
    uint64_t v15 = v7;
    uint64_t v16 = (char *)v9 + v14;
    uint64_t v17 = (char *)v10 + v14;
    swift_bridgeObjectRetain();
    uint64_t v18 = v16;
    uint64_t v7 = v15;
    v15((uint64_t)v18, (uint64_t)v17, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  uint64_t v19 = *(int *)(a3 + 24);
  uint64_t v20 = (char *)(a1 + v19);
  uint64_t v21 = (char *)(a2 + v19);
  uint64_t v22 = type metadata accessor for AspireHeSerializedRelinKey(0);
  uint64_t v23 = *(void *)(v22 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
  {
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v20, (uint64_t)v21, v6);
    uint64_t v25 = *(int *)(v22 + 20);
    uint64_t v26 = &v20[v25];
    char v42 = (void (*)(char *, char *, uint64_t))v7;
    uint64_t v27 = &v21[v25];
    uint64_t v28 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
    uint64_t v29 = *(void *)(v28 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
    {
      uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
      memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64));
    }
    else
    {
      v42(v26, v27, v6);
      uint64_t v31 = *(int *)(v28 + 20);
      uint64_t v40 = &v26[v31];
      uint64_t v41 = v26;
      uint64_t v32 = &v27[v31];
      uint64_t v33 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
      uint64_t v38 = *(void *)(v33 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v32, 1, v33))
      {
        uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
        memcpy(v40, v32, *(void *)(*(void *)(v34 - 8) + 64));
      }
      else
      {
        *(void *)uint64_t v40 = *(void *)v32;
        uint64_t v35 = *(int *)(v33 + 20);
        uint64_t v37 = &v40[v35];
        unint64_t v39 = &v32[v35];
        swift_bridgeObjectRetain();
        v42(v37, v39, v6);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v38 + 56))(v40, 0, 1, v33);
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v41, 0, 1, v28);
    }
    (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  }
  return a1;
}

uint64_t assignWithCopy for AspireHeSerializedEvaluationKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v81 = *(void *)(v6 - 8);
  uint64_t v82 = v6;
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v81 + 24);
  v7(a1, a2);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v85 = a1;
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  uint64_t v11 = type metadata accessor for AspireHeSerializedGaloisKey(0);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  int v14 = v13(v9, 1, v11);
  int v15 = v13(v10, 1, v11);
  if (v14)
  {
    if (!v15)
    {
      *uint64_t v9 = *v10;
      uint64_t v16 = *(int *)(v11 + 20);
      uint64_t v17 = (char *)v9 + v16;
      uint64_t v18 = (char *)v10 + v16;
      uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v81 + 16);
      swift_bridgeObjectRetain();
      v19(v17, v18, v82);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
LABEL_7:
      uint64_t v21 = (void (*)(uint64_t, char *, uint64_t))v7;
      uint64_t v22 = a1;
      goto LABEL_8;
    }
LABEL_6:
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
    memcpy(v9, v10, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  if (v15)
  {
    outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType((uint64_t)v9, type metadata accessor for AspireHeSerializedGaloisKey);
    goto LABEL_6;
  }
  *uint64_t v9 = *v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v21 = (void (*)(uint64_t, char *, uint64_t))v7;
  ((void (*)(char *, char *, uint64_t))v7)((char *)v9 + *(int *)(v11 + 20), (char *)v10 + *(int *)(v11 + 20), v82);
  uint64_t v22 = a1;
LABEL_8:
  uint64_t v23 = *(int *)(a3 + 24);
  uint64_t v24 = v22 + v23;
  uint64_t v25 = (char *)(a2 + v23);
  uint64_t v26 = type metadata accessor for AspireHeSerializedRelinKey(0);
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v27 + 48);
  int v29 = v28(v24, 1, v26);
  int v30 = v28((uint64_t)v25, 1, v26);
  if (!v29)
  {
    if (!v30)
    {
      v21(v24, v25, v82);
      uint64_t v40 = *(int *)(v26 + 20);
      uint64_t v41 = v24 + v40;
      char v42 = &v25[v40];
      uint64_t v43 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
      uint64_t v44 = *(void *)(v43 - 8);
      uint64_t v45 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v44 + 48);
      int v46 = v45(v41, 1, v43);
      int v47 = v45((uint64_t)v42, 1, v43);
      if (v46)
      {
        if (!v47)
        {
          uint64_t v84 = *(void (**)(uint64_t, char *, uint64_t))(v81 + 16);
          v84(v41, v42, v82);
          uint64_t v48 = *(int *)(v43 + 20);
          uint64_t v49 = (void *)(v41 + v48);
          uint64_t v50 = &v42[v48];
          uint64_t v51 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
          uint64_t v52 = *(void *)(v51 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v50, 1, v51))
          {
            uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
            memcpy(v49, v50, *(void *)(*(void *)(v53 - 8) + 64));
          }
          else
          {
            *uint64_t v49 = *(void *)v50;
            uint64_t v75 = *(int *)(v51 + 20);
            uint64_t v76 = (char *)v49 + v75;
            unint64_t v77 = &v50[v75];
            swift_bridgeObjectRetain();
            uint64_t v78 = v76;
            uint64_t v22 = v85;
            v84((uint64_t)v78, v77, v82);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v52 + 56))(v49, 0, 1, v51);
          }
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v44 + 56))(v41, 0, 1, v43);
          return v22;
        }
      }
      else
      {
        if (!v47)
        {
          v21(v41, v42, v82);
          uint64_t v63 = *(int *)(v43 + 20);
          uint64_t v64 = (char *)(v41 + v63);
          uint64_t v65 = &v42[v63];
          uint64_t v66 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
          uint64_t v67 = *(void *)(v66 - 8);
          uint64_t v68 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v67 + 48);
          int v69 = v68(v64, 1, v66);
          int v70 = v68(v65, 1, v66);
          if (v69)
          {
            if (!v70)
            {
              *(void *)uint64_t v64 = *(void *)v65;
              uint64_t v71 = *(int *)(v66 + 20);
              uint64_t v72 = &v64[v71];
              uint64_t v73 = &v65[v71];
              uint64_t v74 = *(void (**)(char *, char *, uint64_t))(v81 + 16);
              swift_bridgeObjectRetain();
              v74(v72, v73, v82);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v67 + 56))(v64, 0, 1, v66);
              return v22;
            }
          }
          else
          {
            if (!v70)
            {
              *(void *)uint64_t v64 = *(void *)v65;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease();
              v21((uint64_t)&v64[*(int *)(v66 + 20)], &v65[*(int *)(v66 + 20)], v82);
              return v22;
            }
            outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType((uint64_t)v64, type metadata accessor for AspireHeSerializedCiphertextVec);
          }
          size_t v37 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?)
                                      - 8)
                          + 64);
          uint64_t v38 = v64;
          unint64_t v39 = v65;
          goto LABEL_15;
        }
        outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(v41, type metadata accessor for AspireHeSerializedKeySwitchKey);
      }
      size_t v37 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?)
                                  - 8)
                      + 64);
      uint64_t v38 = (void *)v41;
      unint64_t v39 = v42;
LABEL_15:
      memcpy(v38, v39, v37);
      return v22;
    }
    outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(v24, type metadata accessor for AspireHeSerializedRelinKey);
LABEL_14:
    size_t v37 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?)
                                - 8)
                    + 64);
    uint64_t v38 = (void *)v24;
    unint64_t v39 = v25;
    goto LABEL_15;
  }
  if (v30) {
    goto LABEL_14;
  }
  unint64_t v83 = *(void (**)(uint64_t, char *, uint64_t))(v81 + 16);
  v83(v24, v25, v82);
  uint64_t v31 = *(int *)(v26 + 20);
  uint64_t v32 = (char *)(v24 + v31);
  uint64_t v33 = &v25[v31];
  uint64_t v34 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
  uint64_t v35 = *(void *)(v34 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
  {
    uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
    memcpy(v32, v33, *(void *)(*(void *)(v36 - 8) + 64));
  }
  else
  {
    v83((uint64_t)v32, v33, v82);
    uint64_t v54 = *(int *)(v34 + 20);
    uint64_t v80 = v32;
    uint64_t v55 = &v32[v54];
    uint64_t v56 = &v33[v54];
    uint64_t v57 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
    uint64_t v58 = *(void *)(v57 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48))(v56, 1, v57))
    {
      uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
      memcpy(v55, v56, *(void *)(*(void *)(v59 - 8) + 64));
    }
    else
    {
      *(void *)uint64_t v55 = *(void *)v56;
      uint64_t v60 = *(int *)(v57 + 20);
      uint64_t v79 = &v55[v60];
      unsigned int v61 = &v56[v60];
      swift_bridgeObjectRetain();
      v83((uint64_t)v79, v61, v82);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v58 + 56))(v55, 0, 1, v57);
    }
    uint64_t v22 = v85;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(v80, 0, 1, v34);
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  return v22;
}

uint64_t initializeWithTake for AspireHeSerializedEvaluationKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  uint64_t v11 = type metadata accessor for AspireHeSerializedGaloisKey(0);
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    *uint64_t v9 = *v10;
    v7((uint64_t)v9 + *(int *)(v11 + 20), (uint64_t)v10 + *(int *)(v11 + 20), v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  uint64_t v14 = *(int *)(a3 + 24);
  int v15 = (char *)(a1 + v14);
  uint64_t v16 = (char *)(a2 + v14);
  uint64_t v17 = type metadata accessor for AspireHeSerializedRelinKey(0);
  uint64_t v18 = *(void *)(v17 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
  {
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
    memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    uint64_t v37 = v18;
    v7((uint64_t)v15, (uint64_t)v16, v6);
    uint64_t v20 = *(int *)(v17 + 20);
    uint64_t v21 = &v15[v20];
    uint64_t v22 = &v16[v20];
    uint64_t v23 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
    uint64_t v24 = *(void *)(v23 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
    {
      uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
      memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
      uint64_t v26 = v37;
    }
    else
    {
      uint64_t v34 = v24;
      v7((uint64_t)v21, (uint64_t)v22, v6);
      uint64_t v35 = v23;
      uint64_t v36 = v21;
      uint64_t v27 = *(int *)(v23 + 20);
      uint64_t v28 = &v21[v27];
      int v29 = &v22[v27];
      uint64_t v30 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
      uint64_t v31 = *(void *)(v30 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
      {
        uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
        memcpy(v28, v29, *(void *)(*(void *)(v32 - 8) + 64));
      }
      else
      {
        *(void *)uint64_t v28 = *(void *)v29;
        v7((uint64_t)&v28[*(int *)(v30 + 20)], (uint64_t)&v29[*(int *)(v30 + 20)], v6);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
      }
      uint64_t v26 = v37;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56))(v36, 0, 1, v35);
    }
    (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v15, 0, 1, v17);
  }
  return a1;
}

uint64_t assignWithTake for AspireHeSerializedEvaluationKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v67 = *(void *)(v6 - 8);
  uint64_t v68 = v6;
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v67 + 40);
  v7(a1, a2);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v70 = a1;
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = type metadata accessor for AspireHeSerializedGaloisKey(0);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  int v14 = v13(v9, 1, v11);
  int v15 = v13(v10, 1, v11);
  if (v14)
  {
    if (!v15)
    {
      *(void *)uint64_t v9 = *(void *)v10;
      (*(void (**)(char *, char *, uint64_t))(v67 + 32))(&v9[*(int *)(v11 + 20)], &v10[*(int *)(v11 + 20)], v68);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
LABEL_7:
      uint64_t v17 = (void (*)(uint64_t, char *, uint64_t))v7;
      uint64_t v18 = a1;
      goto LABEL_8;
    }
LABEL_6:
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
    memcpy(v9, v10, *(void *)(*(void *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  if (v15)
  {
    outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType((uint64_t)v9, type metadata accessor for AspireHeSerializedGaloisKey);
    goto LABEL_6;
  }
  *(void *)uint64_t v9 = *(void *)v10;
  swift_bridgeObjectRelease();
  uint64_t v17 = (void (*)(uint64_t, char *, uint64_t))v7;
  ((void (*)(char *, char *, uint64_t))v7)(&v9[*(int *)(v11 + 20)], &v10[*(int *)(v11 + 20)], v68);
  uint64_t v18 = a1;
LABEL_8:
  uint64_t v19 = *(int *)(a3 + 24);
  uint64_t v20 = v18 + v19;
  uint64_t v21 = (char *)(a2 + v19);
  uint64_t v22 = type metadata accessor for AspireHeSerializedRelinKey(0);
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 48);
  int v25 = v24(v20, 1, v22);
  int v26 = v24((uint64_t)v21, 1, v22);
  if (!v25)
  {
    if (!v26)
    {
      v17(v20, v21, v68);
      uint64_t v36 = *(int *)(v22 + 20);
      uint64_t v37 = v20 + v36;
      uint64_t v38 = &v21[v36];
      uint64_t v39 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
      uint64_t v40 = *(void *)(v39 - 8);
      uint64_t v41 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v40 + 48);
      int v42 = v41(v37, 1, v39);
      int v43 = v41((uint64_t)v38, 1, v39);
      if (v42)
      {
        if (!v43)
        {
          uint64_t v44 = *(void (**)(uint64_t, char *, uint64_t))(v67 + 32);
          v44(v37, v38, v68);
          uint64_t v45 = *(int *)(v39 + 20);
          int v46 = (void *)(v37 + v45);
          int v47 = &v38[v45];
          uint64_t v48 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
          uint64_t v49 = *(void *)(v48 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v47, 1, v48))
          {
            uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
            memcpy(v46, v47, *(void *)(*(void *)(v50 - 8) + 64));
          }
          else
          {
            *int v46 = *(void *)v47;
            v44((uint64_t)v46 + *(int *)(v48 + 20), &v47[*(int *)(v48 + 20)], v68);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v49 + 56))(v46, 0, 1, v48);
          }
          uint64_t v18 = v70;
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
          return v18;
        }
      }
      else
      {
        if (!v43)
        {
          v17(v37, v38, v68);
          uint64_t v58 = *(int *)(v39 + 20);
          uint64_t v59 = (char *)(v37 + v58);
          uint64_t v60 = &v38[v58];
          uint64_t v61 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
          uint64_t v62 = *(void *)(v61 - 8);
          uint64_t v63 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v62 + 48);
          int v64 = v63(v59, 1, v61);
          int v65 = v63(v60, 1, v61);
          if (v64)
          {
            if (!v65)
            {
              *(void *)uint64_t v59 = *(void *)v60;
              (*(void (**)(char *, char *, uint64_t))(v67 + 32))(&v59[*(int *)(v61 + 20)], &v60[*(int *)(v61 + 20)], v68);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v62 + 56))(v59, 0, 1, v61);
              return v18;
            }
          }
          else
          {
            if (!v65)
            {
              *(void *)uint64_t v59 = *(void *)v60;
              swift_bridgeObjectRelease();
              v17((uint64_t)&v59[*(int *)(v61 + 20)], &v60[*(int *)(v61 + 20)], v68);
              return v18;
            }
            outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType((uint64_t)v59, type metadata accessor for AspireHeSerializedCiphertextVec);
          }
          size_t v33 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?)
                                      - 8)
                          + 64);
          uint64_t v34 = v59;
          uint64_t v35 = v60;
          goto LABEL_15;
        }
        outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(v37, type metadata accessor for AspireHeSerializedKeySwitchKey);
      }
      size_t v33 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?)
                                  - 8)
                      + 64);
      uint64_t v34 = (void *)v37;
      uint64_t v35 = v38;
LABEL_15:
      memcpy(v34, v35, v33);
      return v18;
    }
    outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(v20, type metadata accessor for AspireHeSerializedRelinKey);
LABEL_14:
    size_t v33 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?)
                                - 8)
                    + 64);
    uint64_t v34 = (void *)v20;
    uint64_t v35 = v21;
    goto LABEL_15;
  }
  if (v26) {
    goto LABEL_14;
  }
  int v69 = *(void (**)(uint64_t, char *, uint64_t))(v67 + 32);
  v69(v20, v21, v68);
  uint64_t v27 = *(int *)(v22 + 20);
  uint64_t v28 = (char *)(v20 + v27);
  int v29 = &v21[v27];
  uint64_t v30 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
  uint64_t v31 = *(void *)(v30 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
  {
    uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
    memcpy(v28, v29, *(void *)(*(void *)(v32 - 8) + 64));
  }
  else
  {
    v69((uint64_t)v28, v29, v68);
    uint64_t v51 = *(int *)(v30 + 20);
    uint64_t v66 = v28;
    uint64_t v52 = &v28[v51];
    uint64_t v53 = &v29[v51];
    uint64_t v54 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
    uint64_t v55 = *(void *)(v54 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v53, 1, v54))
    {
      uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
      memcpy(v52, v53, *(void *)(*(void *)(v56 - 8) + 64));
    }
    else
    {
      *(void *)uint64_t v52 = *(void *)v53;
      v69((uint64_t)&v52[*(int *)(v54 + 20)], &v53[*(int *)(v54 + 20)], v68);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v55 + 56))(v52, 0, 1, v54);
    }
    uint64_t v18 = v70;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v31 + 56))(v66, 0, 1, v30);
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  return v18;
}

uint64_t getEnumTagSinglePayload for AspireHeSerializedEvaluationKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_249E2B9D0);
}

uint64_t sub_249E2B9D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
  int v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
  uint64_t v16 = v14;
  uint64_t v17 = a1 + *(int *)(a3 + 24);
  return v15(v17, a2, v16);
}

uint64_t storeEnumTagSinglePayload for AspireHeSerializedEvaluationKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_249E2BB38);
}

uint64_t sub_249E2BB38(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_5:
    return v11(v12, a2, a2, v10);
  }
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
  uint64_t v14 = *(void *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_5;
  }
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56);
  uint64_t v18 = v16;
  uint64_t v19 = a1 + *(int *)(a4 + 24);
  return v17(v19, a2, a2, v18);
}

void type metadata completion function for AspireHeSerializedEvaluationKey()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?(319, &lazy cache variable for type metadata for AspireHeSerializedGaloisKey?, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedGaloisKey);
    if (v1 <= 0x3F)
    {
      type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?(319, &lazy cache variable for type metadata for AspireHeSerializedRelinKey?, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedRelinKey);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

uint64_t initializeBufferWithCopyOfBuffer for AspireHeEvaluationKeyConfig(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    uint64_t v8 = *(int *)(a3 + 24);
    uint64_t v9 = a1 + v8;
    uint64_t v10 = (uint64_t)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = *(int *)(a3 + 28);
    uint64_t v14 = (_OWORD *)(v7 + v13);
    int v15 = (_OWORD *)((char *)a2 + v13);
    uint64_t v16 = type metadata accessor for AspireHeEncryptionParameters(0);
    uint64_t v17 = *(void *)(v16 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      *uint64_t v14 = *v15;
      uint64_t v19 = *((void *)v15 + 3);
      *((void *)v14 + 2) = *((void *)v15 + 2);
      *((void *)v14 + 3) = v19;
      *((unsigned char *)v14 + 32) = *((unsigned char *)v15 + 32);
      *((void *)v14 + 5) = *((void *)v15 + 5);
      *((unsigned char *)v14 + 48) = *((unsigned char *)v15 + 48);
      *((void *)v14 + 7) = *((void *)v15 + 7);
      *((unsigned char *)v14 + 64) = *((unsigned char *)v15 + 64);
      uint64_t v20 = *(int *)(v16 + 40);
      uint64_t v21 = (char *)v14 + v20;
      uint64_t v22 = (char *)v15 + v20;
      swift_bridgeObjectRetain();
      v12((uint64_t)v21, (uint64_t)v22, v11);
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
  }
  return v7;
}

uint64_t destroy for AspireHeEvaluationKeyConfig(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v10(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 28);
  uint64_t v7 = type metadata accessor for AspireHeEncryptionParameters(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7);
  if (!result)
  {
    swift_bridgeObjectRelease();
    uint64_t v9 = v6 + *(int *)(v7 + 40);
    return ((uint64_t (*)(uint64_t, uint64_t))v10)(v9, v5);
  }
  return result;
}

uint64_t initializeWithCopy for AspireHeEvaluationKeyConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 28);
  uint64_t v12 = (_OWORD *)(a1 + v11);
  uint64_t v13 = (_OWORD *)(a2 + v11);
  uint64_t v14 = type metadata accessor for AspireHeEncryptionParameters(0);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    *uint64_t v12 = *v13;
    uint64_t v17 = *((void *)v13 + 3);
    *((void *)v12 + 2) = *((void *)v13 + 2);
    *((void *)v12 + 3) = v17;
    *((unsigned char *)v12 + 32) = *((unsigned char *)v13 + 32);
    *((void *)v12 + 5) = *((void *)v13 + 5);
    *((unsigned char *)v12 + 48) = *((unsigned char *)v13 + 48);
    *((void *)v12 + 7) = *((void *)v13 + 7);
    *((unsigned char *)v12 + 64) = *((unsigned char *)v13 + 64);
    uint64_t v18 = *(int *)(v14 + 40);
    uint64_t v19 = (char *)v12 + v18;
    uint64_t v20 = (char *)v13 + v18;
    swift_bridgeObjectRetain();
    v10((uint64_t)v19, (uint64_t)v20, v9);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t assignWithCopy for AspireHeEvaluationKeyConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v30 = *(void *)(v9 - 8);
  uint64_t v31 = v9;
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v30 + 24);
  v10(v7, v8);
  uint64_t v11 = *(int *)(a3 + 28);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for AspireHeEncryptionParameters(0);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  LODWORD(v8) = v16(v12, 1, v14);
  int v17 = v16(v13, 1, v14);
  if (!v8)
  {
    if (!v17)
    {
      *(void *)uint64_t v12 = *(void *)v13;
      *(void *)(v12 + 8) = *(void *)(v13 + 8);
      *(void *)(v12 + 16) = *(void *)(v13 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v27 = *(void *)(v13 + 24);
      *(unsigned char *)(v12 + 32) = *(unsigned char *)(v13 + 32);
      *(void *)(v12 + 24) = v27;
      uint64_t v28 = *(void *)(v13 + 40);
      *(unsigned char *)(v12 + 48) = *(unsigned char *)(v13 + 48);
      *(void *)(v12 + 40) = v28;
      uint64_t v29 = *(void *)(v13 + 56);
      *(unsigned char *)(v12 + 64) = *(unsigned char *)(v13 + 64);
      *(void *)(v12 + 56) = v29;
      ((void (*)(uint64_t, uint64_t, uint64_t))v10)(v12 + *(int *)(v14 + 40), v13 + *(int *)(v14 + 40), v31);
      return a1;
    }
    outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(v12, type metadata accessor for AspireHeEncryptionParameters);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    memcpy((void *)v12, (const void *)v13, *(void *)(*(void *)(v25 - 8) + 64));
    return a1;
  }
  *(void *)uint64_t v12 = *(void *)v13;
  *(void *)(v12 + 8) = *(void *)(v13 + 8);
  *(void *)(v12 + 16) = *(void *)(v13 + 16);
  uint64_t v18 = *(void *)(v13 + 24);
  *(unsigned char *)(v12 + 32) = *(unsigned char *)(v13 + 32);
  *(void *)(v12 + 24) = v18;
  uint64_t v19 = *(void *)(v13 + 40);
  *(unsigned char *)(v12 + 48) = *(unsigned char *)(v13 + 48);
  *(void *)(v12 + 40) = v19;
  uint64_t v20 = *(void *)(v13 + 56);
  *(unsigned char *)(v12 + 64) = *(unsigned char *)(v13 + 64);
  *(void *)(v12 + 56) = v20;
  uint64_t v21 = *(int *)(v14 + 40);
  uint64_t v22 = v12 + v21;
  uint64_t v23 = v13 + v21;
  uint64_t v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 16);
  swift_bridgeObjectRetain();
  v24(v22, v23, v31);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  return a1;
}

uint64_t initializeWithTake for AspireHeEvaluationKeyConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)(a1 + v6);
  uint64_t v8 = (char *)(a2 + v6);
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 28);
  uint64_t v12 = (_OWORD *)(a1 + v11);
  uint64_t v13 = (_OWORD *)(a2 + v11);
  uint64_t v14 = type metadata accessor for AspireHeEncryptionParameters(0);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    *uint64_t v12 = *v13;
    uint64_t v17 = *((void *)v13 + 3);
    *((void *)v12 + 2) = *((void *)v13 + 2);
    *((void *)v12 + 3) = v17;
    *((unsigned char *)v12 + 32) = *((unsigned char *)v13 + 32);
    *((void *)v12 + 5) = *((void *)v13 + 5);
    *((unsigned char *)v12 + 48) = *((unsigned char *)v13 + 48);
    *((void *)v12 + 7) = *((void *)v13 + 7);
    *((unsigned char *)v12 + 64) = *((unsigned char *)v13 + 64);
    v10((char *)v12 + *(int *)(v14 + 40), (char *)v13 + *(int *)(v14 + 40), v9);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t assignWithTake for AspireHeEvaluationKeyConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v21 = *(void *)(v9 - 8);
  uint64_t v22 = v9;
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v21 + 40);
  v10(v7, v8);
  uint64_t v11 = *(int *)(a3 + 28);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for AspireHeEncryptionParameters(0);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  LODWORD(v8) = v16(v12, 1, v14);
  int v17 = v16(v13, 1, v14);
  if (!v8)
  {
    if (!v17)
    {
      *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
      *(void *)(v12 + 16) = *(void *)(v13 + 16);
      swift_bridgeObjectRelease();
      *(void *)(v12 + 24) = *(void *)(v13 + 24);
      *(unsigned char *)(v12 + 32) = *(unsigned char *)(v13 + 32);
      *(void *)(v12 + 40) = *(void *)(v13 + 40);
      *(unsigned char *)(v12 + 48) = *(unsigned char *)(v13 + 48);
      *(void *)(v12 + 56) = *(void *)(v13 + 56);
      *(unsigned char *)(v12 + 64) = *(unsigned char *)(v13 + 64);
      ((void (*)(uint64_t, uint64_t, uint64_t))v10)(v12 + *(int *)(v14 + 40), v13 + *(int *)(v14 + 40), v22);
      return a1;
    }
    outlined destroy of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(v12, type metadata accessor for AspireHeEncryptionParameters);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    memcpy((void *)v12, (const void *)v13, *(void *)(*(void *)(v19 - 8) + 64));
    return a1;
  }
  *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
  uint64_t v18 = *(void *)(v13 + 24);
  *(void *)(v12 + 16) = *(void *)(v13 + 16);
  *(void *)(v12 + 24) = v18;
  *(unsigned char *)(v12 + 32) = *(unsigned char *)(v13 + 32);
  *(unsigned char *)(v12 + 48) = *(unsigned char *)(v13 + 48);
  *(void *)(v12 + 40) = *(void *)(v13 + 40);
  *(void *)(v12 + 56) = *(void *)(v13 + 56);
  *(unsigned char *)(v12 + 64) = *(unsigned char *)(v13 + 64);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 32))(v12 + *(int *)(v14 + 40), v13 + *(int *)(v14 + 40), v22);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for AspireHeEvaluationKeyConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_249E2C9C4);
}

uint64_t sub_249E2C9C4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = (char *)a1 + *(int *)(a3 + 24);
      uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = (char *)a1 + *(int *)(a3 + 28);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t storeEnumTagSinglePayload for AspireHeEvaluationKeyConfig(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_249E2CB08);
}

void *sub_249E2CB08(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = (char *)v5 + *(int *)(a4 + 24);
      uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return (void *)v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = (char *)v5 + *(int *)(a4 + 28);
      return (void *)v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void type metadata completion function for AspireHeEvaluationKeyConfig()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?(319, &lazy cache variable for type metadata for AspireHeEncryptionParameters?, (void (*)(uint64_t))type metadata accessor for AspireHeEncryptionParameters);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void *initializeBufferWithCopyOfBuffer for AspireHeEncryptionParameters(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *int v3 = *a2;
    int v3 = (void *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v5 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v5;
    *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
    *(void *)(a1 + 40) = a2[5];
    *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
    *(void *)(a1 + 56) = a2[7];
    uint64_t v6 = *(int *)(a3 + 40);
    uint64_t v7 = (uint64_t)a2 + v6;
    uint64_t v8 = a1 + v6;
    *(unsigned char *)(a1 + 64) = *((unsigned char *)a2 + 64);
    uint64_t v9 = type metadata accessor for UnknownStorage();
    uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v8, v7, v9);
  }
  return v3;
}

uint64_t destroy for AspireHeEncryptionParameters(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 40);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

uint64_t initializeWithCopy for AspireHeEncryptionParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v5 = *(int *)(a3 + 40);
  uint64_t v6 = a2 + v5;
  uint64_t v7 = a1 + v5;
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  v9(v7, v6, v8);
  return a1;
}

uint64_t assignWithCopy for AspireHeEncryptionParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 24) = v6;
  uint64_t v7 = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 40) = v7;
  uint64_t v8 = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 56) = v8;
  uint64_t v9 = *(int *)(a3 + 40);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 24))(v10, v11, v12);
  return a1;
}

uint64_t initializeWithTake for AspireHeEncryptionParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v5 = *(int *)(a3 + 40);
  uint64_t v6 = a2 + v5;
  uint64_t v7 = a1 + v5;
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  uint64_t v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v7, v6, v8);
  return a1;
}

uint64_t assignWithTake for AspireHeEncryptionParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  char v6 = *(unsigned char *)(a2 + 64);
  uint64_t v7 = *(int *)(a3 + 40);
  uint64_t v8 = a2 + v7;
  uint64_t v9 = a1 + v7;
  *(unsigned char *)(a1 + 64) = v6;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v9, v8, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for AspireHeEncryptionParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_249E2D1E4);
}

uint64_t sub_249E2D1E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 40);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for AspireHeEncryptionParameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_249E2D2A8);
}

uint64_t sub_249E2D2A8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 16) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 40);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for AspireHeEncryptionParameters()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t RequestContext.useCase.getter()
{
  id v1 = objc_msgSend(*v0, sel_useCase);
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t RequestContext.networkManager()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for NetworkConfig(0);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for NetworkManagerConfig(0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of NetworkConfig((uint64_t)v2 + *(int *)(a1 + 32), (uint64_t)v7);
  id v11 = objc_msgSend(*v2, sel_sourceApplicationBundleIdentifier);
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v15 = v14;
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v15 = 0;
  }
  outlined init with take of NetworkConfig((uint64_t)v7, (uint64_t)v10);
  uint64_t v16 = (uint64_t *)&v10[*(int *)(v8 + 20)];
  uint64_t *v16 = v13;
  v16[1] = v15;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  (*(void (**)(void *__return_ptr, char *))(*(void *)static NetworkManagerHelper.shared + 96))(v20, v10);
  outlined destroy of NetworkManagerConfig((uint64_t)v10);
  outlined init with copy of NetworkManager?((uint64_t)v20, (uint64_t)&v18);
  if (v19)
  {
    outlined destroy of NetworkManager?((uint64_t)v20);
    return outlined init with take of _HasContiguousBytes(&v18, a2);
  }
  else
  {
    outlined destroy of NetworkManager?((uint64_t)&v18);
    type metadata accessor for CipherMLError();
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError();
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    return outlined destroy of NetworkManager?((uint64_t)v20);
  }
}

uint64_t outlined destroy of NetworkManagerConfig(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NetworkManagerConfig(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of NetworkManager?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NetworkManager?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of NetworkManager?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NetworkManager?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t RequestContext.init(clientConfig:staticConfig:networkConfig:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  *(void *)a5 = a1;
  uint64_t v9 = type metadata accessor for RequestContext();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(&a5[*(int *)(v9 + 28)], a2, a4);
  uint64_t v10 = (uint64_t)&a5[*(int *)(v9 + 32)];
  return outlined init with take of NetworkConfig(a3, v10);
}

uint64_t type metadata accessor for RequestContext()
{
  return __swift_instantiateGenericMetadata();
}

id RequestContext.clientConfig.getter()
{
  return *v0;
}

uint64_t RequestContext.staticConfig.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 28));
}

uint64_t RequestContext.networkConfig.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with copy of NetworkConfig(v2 + *(int *)(a1 + 32), a2);
}

uint64_t type metadata instantiation function for RequestContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 24);
}

uint64_t type metadata completion function for RequestContext()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for NetworkConfig(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

void **initializeBufferWithCopyOfBuffer for RequestContext(void **a1, void **a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  int v7 = *(_DWORD *)(v6 + 80);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v6 + 64);
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int *)(v11 + 84);
  uint64_t v13 = *(_DWORD *)(v11 + 80);
  uint64_t v14 = v13 | 7;
  uint64_t v15 = a1;
  if (v12) {
    int v16 = v12 - 1;
  }
  else {
    int v16 = 0;
  }
  if (v12 <= 0xFE) {
    int v17 = 254;
  }
  else {
    int v17 = *(_DWORD *)(v11 + 84);
  }
  uint64_t v18 = *(void *)(*(void *)(v10 - 8) + 64);
  uint64_t v19 = (v18 + v13) & ~v13;
  if (v12) {
    size_t v20 = *(void *)(*(void *)(v10 - 8) + 64);
  }
  else {
    size_t v20 = v18 + 1;
  }
  int v21 = (*(_DWORD *)(v11 + 80) | v7) & 0x100000;
  uint64_t v22 = (char *)*a2;
  *uint64_t v15 = *a2;
  if ((v13 | (unint64_t)v7) <= 7
    && v21 == 0
    && (((v13 | 7) + v9 + ((v7 + 8) & ~(unint64_t)v7)) & ~(v13 | 7))
     + ((v19 + v20 + 31) & 0xFFFFFFFFFFFFFFF8)
     + 16 <= 0x18)
  {
    int v56 = v17;
    int v57 = v16;
    size_t v58 = v19 + v20;
    uint64_t v59 = v10;
    uint64_t v61 = v18 + v13;
    uint64_t v62 = (v18 + v13) & ~v13;
    uint64_t v63 = v11;
    size_t __n = v20;
    uint64_t v26 = ~v14;
    uint64_t v27 = ~v13;
    uint64_t v60 = v15;
    uint64_t v28 = (char *)a2 + v8;
    uint64_t v29 = ((unint64_t)v15 + v8 + 8) & ~v8;
    uint64_t v30 = (unint64_t)(v28 + 8) & ~v8;
    uint64_t v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
    uint64_t v32 = v22;
    v31(v29, v30, v5);
    uint64_t v33 = (v29 + v9 + v14) & v26;
    uint64_t v34 = (v30 + v9 + v14) & v26;
    if (v12 <= 0xFD)
    {
      uint64_t v39 = v61;
      uint64_t v41 = (char *)((v61 + v34) & v27);
      uint64_t v40 = v27;
      if (v57 == v56)
      {
        if (v12 >= 2)
        {
          uint64_t v55 = v12;
          uint64_t v36 = v59;
          uint64_t v42 = v61;
          uint64_t v25 = v60;
          uint64_t v50 = v62;
          size_t v38 = __n;
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v63 + 48))((v61 + v34) & v27, v55, v59) >= 2)
          {
            memcpy((void *)v33, (const void *)v34, ((v58 + 7) & 0xFFFFFFFFFFFFFFF8) + 17);
            goto LABEL_36;
          }
          goto LABEL_28;
        }
        uint64_t v36 = v59;
        uint64_t v25 = v60;
LABEL_27:
        uint64_t v42 = v39;
LABEL_28:
        int v43 = *(void (**)(uint64_t, uint64_t, uint64_t))(v63 + 16);
        v43(v33, v34, v36);
        uint64_t v44 = (void *)((v42 + v33) & v40);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v63 + 48))(v41, 1, v36))
        {
          size_t v38 = __n;
          memcpy(v44, v41, __n);
        }
        else
        {
          v43((uint64_t)v44, (uint64_t)v41, v36);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v63 + 56))(v44, 0, 1, v36);
          size_t v38 = __n;
        }
        unint64_t v45 = ((unint64_t)v44 + v38 + 7) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v46 = (unint64_t)&v41[v38 + 7];
        unint64_t v47 = v46 & 0xFFFFFFFFFFFFFFF8;
        uint64_t v48 = *(void *)((v46 & 0xFFFFFFFFFFFFFFF8) + 8);
        if ((v48 & 0x3000000000000000) != 0)
        {
          *(_OWORD *)unint64_t v45 = *(_OWORD *)v47;
        }
        else
        {
          uint64_t v49 = *(void *)v47;
          outlined copy of Data._Representation(*(void *)v47, *(void *)((v46 & 0xFFFFFFFFFFFFFFF8) + 8));
          *(void *)unint64_t v45 = v49;
          *(void *)(v45 + 8) = v48;
        }
        *(unsigned char *)(v45 + 16) = *(unsigned char *)(v47 + 16);
        goto LABEL_35;
      }
      size_t v38 = __n;
      uint64_t v36 = v59;
      if (*(unsigned __int8 *)(((unint64_t)&v41[__n + 7] & 0xFFFFFFFFFFFFFFF8) + 16) >= 2u) {
        goto LABEL_21;
      }
    }
    else
    {
      uint64_t v35 = (v30 + v9 + v14) & v26;
      uint64_t v36 = v59;
      int v37 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v63 + 48))(v35, v12, v59);
      size_t v38 = __n;
      uint64_t v39 = v61;
      uint64_t v40 = v27;
      if (v37)
      {
LABEL_21:
        memcpy((void *)v33, (const void *)v34, ((v58 + 7) & 0xFFFFFFFFFFFFFFF8) + 17);
        uint64_t v25 = v60;
LABEL_35:
        uint64_t v50 = v62;
LABEL_36:
        unint64_t v51 = ((v50 + v38 + 7) & 0xFFFFFFFFFFFFFFF8) + 17;
        uint64_t v52 = (void *)((v33 | 7) + v51);
        uint64_t v53 = (void *)((v34 | 7) + v51);
        *uint64_t v52 = *v53;
        v52[1] = v53[1];
        swift_bridgeObjectRetain();
        return v25;
      }
    }
    uint64_t v41 = (char *)((v39 + v34) & v40);
    uint64_t v25 = v60;
    goto LABEL_27;
  }
  uint64_t v25 = (void **)&v22[((v13 | v7) & 0xF8 ^ 0x1F8) & ((v13 | v7) + 16)];
  swift_retain();
  return v25;
}

uint64_t destroy for RequestContext(id *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = v4 + 8;
  unint64_t v6 = ((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  (*(void (**)(unint64_t))(v4 + 8))(v6);
  uint64_t v7 = *(void *)(v5 + 56);
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = (v6 + v7 + (v10 | 7)) & ~(v10 | 7);
  unsigned int v12 = *(_DWORD *)(v9 + 84);
  uint64_t v13 = *(void *)(v9 + 64);
  uint64_t v14 = ~v10;
  if (v12 <= 0xFD)
  {
    uint64_t v15 = (v13 + v10 + v11) & v14;
    if (v12) {
      uint64_t v16 = *(void *)(v9 + 64);
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    if (*(unsigned __int8 *)(((v15 + v16 + 7) & 0xFFFFFFFFFFFFFFF8) + 16) >= 2u) {
      goto LABEL_15;
    }
  }
  else
  {
    if ((*(unsigned int (**)(uint64_t, void, uint64_t))(v9 + 48))(v11, *(unsigned int *)(v9 + 84), v8)) {
      goto LABEL_15;
    }
    uint64_t v15 = (v13 + v10 + v11) & v14;
  }
  int v17 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v17(v11, v8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v15, 1, v8)) {
    v17(v15, v8);
  }
  if (v12) {
    uint64_t v18 = v13;
  }
  else {
    uint64_t v18 = v13 + 1;
  }
  uint64_t v19 = (uint64_t *)((v18 + v15 + 7) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v20 = v19[1];
  if ((v20 & 0x3000000000000000) == 0) {
    outlined consume of Data._Representation(*v19, v20);
  }
LABEL_15:
  return swift_bridgeObjectRelease();
}

void **initializeWithCopy for RequestContext(void **a1, void **a2, uint64_t a3)
{
  int v3 = a1;
  uint64_t v4 = *a2;
  *a1 = *a2;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  uint64_t v8 = v6 + 16;
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = ((unint64_t)a1 + v9 + 8) & ~v9;
  uint64_t v11 = ((unint64_t)a2 + v9 + 8) & ~v9;
  id v12 = v4;
  v7(v10, v11, v5);
  uint64_t v13 = *(void *)(v8 + 48);
  uint64_t v14 = type metadata accessor for URL();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v17 = (v16 | 7) + v13;
  uint64_t v18 = (v17 + v10) & ~(v16 | 7);
  uint64_t v19 = (v17 + v11) & ~(v16 | 7);
  unsigned int v20 = *(_DWORD *)(v15 + 84);
  size_t v21 = *(void *)(v15 + 64);
  uint64_t v22 = ~v16;
  size_t v23 = v21 + v16;
  size_t v24 = (v21 + v16) & ~v16;
  if (v20 <= 0xFD)
  {
    if (v20) {
      size_t v26 = *(void *)(v15 + 64);
    }
    else {
      size_t v26 = v21 + 1;
    }
    if (*(unsigned __int8 *)(((((v23 + v19) & v22) + v26 + 7) & 0xFFFFFFFFFFFFFFF8) + 16) >= 2u) {
      goto LABEL_3;
    }
  }
  else if ((*(unsigned int (**)(uint64_t, void, uint64_t))(v15 + 48))(v19, *(unsigned int *)(v15 + 84), v14))
  {
LABEL_3:
    if (v20) {
      size_t v25 = v21;
    }
    else {
      size_t v25 = v21 + 1;
    }
    memcpy((void *)v18, (const void *)v19, ((v25 + v24 + 7) & 0xFFFFFFFFFFFFFFF8) + 17);
    goto LABEL_23;
  }
  size_t v39 = v24;
  uint64_t v40 = v3;
  size_t v38 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16);
  v38(v18, v19, v14);
  uint64_t v27 = (void *)((v23 + v18) & v22);
  uint64_t v28 = (char *)((v23 + v19) & v22);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v28, 1, v14))
  {
    if (v20) {
      size_t v25 = v21;
    }
    else {
      size_t v25 = v21 + 1;
    }
    memcpy(v27, v28, v25);
  }
  else
  {
    v38((uint64_t)v27, (uint64_t)v28, v14);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v27, 0, 1, v14);
    if (v20) {
      size_t v25 = v21;
    }
    else {
      size_t v25 = v21 + 1;
    }
  }
  unint64_t v29 = ((unint64_t)v27 + v25 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v30 = (unint64_t)&v28[v25 + 7];
  unint64_t v31 = v30 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v32 = *(void *)((v30 & 0xFFFFFFFFFFFFFFF8) + 8);
  if ((v32 & 0x3000000000000000) != 0)
  {
    *(_OWORD *)unint64_t v29 = *(_OWORD *)v31;
  }
  else
  {
    uint64_t v33 = *(void *)v31;
    outlined copy of Data._Representation(*(void *)v31, *(void *)((v30 & 0xFFFFFFFFFFFFFFF8) + 8));
    *(void *)unint64_t v29 = v33;
    *(void *)(v29 + 8) = v32;
  }
  *(unsigned char *)(v29 + 16) = *(unsigned char *)(v31 + 16);
  size_t v24 = v39;
  int v3 = v40;
LABEL_23:
  unint64_t v34 = ((v24 + v25 + 7) & 0xFFFFFFFFFFFFFFF8) + 17;
  uint64_t v35 = (void *)((v18 | 7) + v34);
  uint64_t v36 = (void *)((v19 | 7) + v34);
  void *v35 = *v36;
  v35[1] = v36[1];
  swift_bridgeObjectRetain();
  return v3;
}

void **assignWithCopy for RequestContext(void **a1, void **a2, uint64_t a3)
{
  uint64_t v5 = a1;
  uint64_t v6 = *a2;
  uint64_t v7 = *a1;
  *a1 = *a2;
  id v8 = v6;

  uint64_t v9 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v10 = v9 + 24;
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v12 = ((unint64_t)v5 + v11 + 8) & ~v11;
  uint64_t v13 = ((unint64_t)a2 + v11 + 8) & ~v11;
  (*(void (**)(uint64_t, uint64_t))(v9 + 24))(v12, v13);
  uint64_t v14 = *(void *)(v10 + 40);
  uint64_t v15 = type metadata accessor for URL();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(unsigned __int8 *)(v16 + 80);
  uint64_t v18 = (v17 | 7) + v14;
  uint64_t v19 = (v18 + v12) & ~(v17 | 7);
  uint64_t v20 = (v18 + v13) & ~(v17 | 7);
  uint64_t v21 = *(unsigned int *)(v16 + 84);
  uint64_t v22 = *(char **)(v16 + 64);
  uint64_t v23 = ~v17;
  size_t v24 = &v22[v17];
  uint64_t v84 = v5;
  unint64_t v85 = (unint64_t)&v22[v17] & ~v17;
  if (v21 <= 0xFD)
  {
    if (v21) {
      unint64_t v31 = *(char **)(*(void *)(v15 - 8) + 64);
    }
    else {
      unint64_t v31 = v22 + 1;
    }
    unsigned int v32 = *(unsigned __int8 *)(((unint64_t)&v31[((unint64_t)&v24[v20] & v23) + 7] & 0xFFFFFFFFFFFFFFF8)
                             + 16);
    if (*(unsigned __int8 *)(((unint64_t)&v31[((unint64_t)&v24[v19] & v23) + 7] & 0xFFFFFFFFFFFFFFF8)
                            + 16) >= 2u)
    {
      if (v32 >= 2) {
        goto LABEL_4;
      }
      goto LABEL_20;
    }
    if (v32 >= 2) {
      goto LABEL_26;
    }
    goto LABEL_13;
  }
  uint64_t v74 = ~v17;
  __dst = *(char **)(*(void *)(v15 - 8) + 64);
  size_t v25 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  uint64_t v26 = v15;
  int v27 = v25(v19, v21, v15);
  int v28 = v25(v20, v21, v26);
  if (!v27)
  {
    uint64_t v22 = __dst;
    uint64_t v15 = v26;
    uint64_t v23 = v74;
    if (v28)
    {
LABEL_26:
      __srcb = (void *)v20;
      unint64_t v45 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
      uint64_t v46 = v15;
      v45(v19, v15);
      uint64_t v47 = (unint64_t)&v24[v19] & v23;
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v47, 1, v46)) {
        v45((unint64_t)&v24[v19] & v23, v46);
      }
      BOOL v29 = v21 == 0;
      if (v21) {
        uint64_t v48 = v22;
      }
      else {
        uint64_t v48 = v22 + 1;
      }
      uint64_t v49 = v48 + 7;
      uint64_t v50 = (uint64_t *)((unint64_t)&v48[v47 + 7] & 0xFFFFFFFFFFFFFFF8);
      unint64_t v51 = v50[1];
      if ((v51 & 0x3000000000000000) == 0) {
        outlined consume of Data._Representation(*v50, v51);
      }
      uint64_t v20 = (uint64_t)__srcb;
      memcpy((void *)v19, __srcb, ((unint64_t)&v49[v85] & 0xFFFFFFFFFFFFFFF8) + 17);
      goto LABEL_58;
    }
LABEL_13:
    uint64_t v33 = v23;
    unint64_t v34 = (void *)((unint64_t)&v24[v20] & v23);
    __src = (void *)v20;
    uint64_t v35 = v15;
    uint64_t v73 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 24);
    v73(v19, v20, v15);
    uint64_t v36 = *(uint64_t (**)(void))(v16 + 48);
    uint64_t v76 = (void *)((unint64_t)&v24[v19] & v33);
    int v37 = v36();
    __dsta = v34;
    uint64_t v75 = v35;
    int v38 = ((uint64_t (*)(void *, uint64_t, uint64_t))v36)(v34, 1, v35);
    if (v37)
    {
      if (v38)
      {
        if (v21) {
          size_t v39 = (size_t)v22;
        }
        else {
          size_t v39 = (size_t)(v22 + 1);
        }
        uint64_t v40 = v76;
        goto LABEL_45;
      }
      uint64_t v40 = v76;
      unint64_t v57 = (unint64_t)__dsta;
      (*(void (**)(void *, void *, uint64_t))(v16 + 16))(v76, __dsta, v75);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v76, 0, 1, v75);
    }
    else
    {
      if (v38)
      {
        uint64_t v40 = v76;
        (*(void (**)(void *, uint64_t))(v16 + 8))(v76, v35);
        if (v21) {
          size_t v39 = (size_t)v22;
        }
        else {
          size_t v39 = (size_t)(v22 + 1);
        }
LABEL_45:
        unint64_t v57 = (unint64_t)__dsta;
        memcpy(v40, __dsta, v39);
        goto LABEL_48;
      }
      uint64_t v40 = v76;
      unint64_t v57 = (unint64_t)__dsta;
      v73((uint64_t)v76, (uint64_t)__dsta, v75);
    }
LABEL_48:
    uint64_t v20 = (uint64_t)__src;
    BOOL v29 = v21 == 0;
    if (v21) {
      size_t v58 = v22;
    }
    else {
      size_t v58 = v22 + 1;
    }
    uint64_t v59 = v58 + 7;
    unint64_t v60 = ((unint64_t)v40 + (void)v59) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v61 = (unint64_t)&v59[v57] & 0xFFFFFFFFFFFFFFF8;
    unint64_t v62 = *(void *)(v60 + 8);
    uint64_t v63 = *(void *)(v61 + 8);
    uint64_t v64 = v63 & 0x3000000000000000;
    if ((v62 & 0x3000000000000000) != 0)
    {
      if (!v64)
      {
        uint64_t v65 = *(void *)v61;
        outlined copy of Data._Representation(*(void *)v61, *(void *)(v61 + 8));
        *(void *)unint64_t v60 = v65;
        *(void *)(v60 + 8) = v63;
LABEL_57:
        *(unsigned char *)(v60 + 16) = *(unsigned char *)(v61 + 16);
LABEL_58:
        uint64_t v5 = v84;
        goto LABEL_59;
      }
    }
    else
    {
      if (!v64)
      {
        uint64_t v70 = *(void *)v61;
        outlined copy of Data._Representation(*(void *)v61, *(void *)(v61 + 8));
        uint64_t v71 = *(void *)v60;
        unint64_t v72 = *(void *)(v60 + 8);
        *(void *)unint64_t v60 = v70;
        *(void *)(v60 + 8) = v63;
        outlined consume of Data._Representation(v71, v72);
        goto LABEL_57;
      }
      outlined consume of Data._Representation(*(void *)v60, v62);
    }
    *(_OWORD *)unint64_t v60 = *(_OWORD *)v61;
    goto LABEL_57;
  }
  uint64_t v5 = v84;
  uint64_t v22 = __dst;
  uint64_t v15 = v26;
  uint64_t v23 = v74;
  if (v28)
  {
LABEL_4:
    BOOL v29 = v21 == 0;
    if (v21) {
      unint64_t v30 = v22;
    }
    else {
      unint64_t v30 = v22 + 1;
    }
    memcpy((void *)v19, (const void *)v20, ((unint64_t)&v30[v85 + 7] & 0xFFFFFFFFFFFFFFF8) + 17);
    goto LABEL_59;
  }
LABEL_20:
  uint64_t v41 = v15;
  unint64_t v77 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16);
  v77(v19, v20, v15);
  __dstb = (void *)((unint64_t)&v24[v19] & v23);
  uint64_t v42 = (char *)((unint64_t)&v24[v20] & v23);
  __srca = (void *)v20;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v42, 1, v41))
  {
    BOOL v29 = v21 == 0;
    if (v21) {
      size_t v43 = (size_t)v22;
    }
    else {
      size_t v43 = (size_t)(v22 + 1);
    }
    uint64_t v44 = __dstb;
    memcpy(__dstb, v42, v43);
  }
  else
  {
    uint64_t v44 = __dstb;
    v77((uint64_t)__dstb, (uint64_t)v42, v41);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(__dstb, 0, 1, v41);
    BOOL v29 = v21 == 0;
    if (v21) {
      size_t v43 = (size_t)v22;
    }
    else {
      size_t v43 = (size_t)(v22 + 1);
    }
  }
  unint64_t v52 = ((unint64_t)v44 + v43 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v53 = (unint64_t)&v42[v43 + 7];
  unint64_t v54 = v53 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v55 = *(void *)((v53 & 0xFFFFFFFFFFFFFFF8) + 8);
  uint64_t v5 = v84;
  if ((v55 & 0x3000000000000000) != 0)
  {
    *(_OWORD *)unint64_t v52 = *(_OWORD *)v54;
  }
  else
  {
    uint64_t v56 = *(void *)v54;
    outlined copy of Data._Representation(*(void *)v54, *(void *)((v53 & 0xFFFFFFFFFFFFFFF8) + 8));
    *(void *)unint64_t v52 = v56;
    *(void *)(v52 + 8) = v55;
  }
  *(unsigned char *)(v52 + 16) = *(unsigned char *)(v54 + 16);
  uint64_t v20 = (uint64_t)__srca;
LABEL_59:
  unint64_t v66 = ((unint64_t)&v22[v29 + 7 + v85] & 0xFFFFFFFFFFFFFFF8) + 17;
  uint64_t v67 = (void *)((v19 | 7) + v66);
  uint64_t v68 = (void *)((v20 | 7) + v66);
  *uint64_t v67 = *v68;
  v67[1] = v68[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return v5;
}

void *initializeWithTake for RequestContext(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4 + 32;
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = ((unint64_t)a1 + v6 + 8) & ~v6;
  uint64_t v8 = ((unint64_t)a2 + v6 + 8) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v7, v8);
  uint64_t v9 = *(void *)(v5 + 32);
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v13 = (v12 | 7) + v9;
  uint64_t v14 = (v13 + v7) & ~(v12 | 7);
  uint64_t v15 = (v13 + v8) & ~(v12 | 7);
  unsigned int v16 = *(_DWORD *)(v11 + 84);
  size_t v17 = *(void *)(v11 + 64);
  uint64_t v18 = ~v12;
  size_t v19 = v17 + v12;
  size_t v20 = (v17 + v12) & ~v12;
  if (v16 <= 0xFD)
  {
    if (v16) {
      size_t v22 = *(void *)(v11 + 64);
    }
    else {
      size_t v22 = v17 + 1;
    }
    if (*(unsigned __int8 *)(((((v19 + v15) & v18) + v22 + 7) & 0xFFFFFFFFFFFFFFF8) + 16) >= 2u) {
      goto LABEL_3;
    }
  }
  else if ((*(unsigned int (**)(uint64_t, void, uint64_t))(v11 + 48))(v15, *(unsigned int *)(v11 + 84), v10))
  {
LABEL_3:
    if (v16) {
      size_t v21 = v17;
    }
    else {
      size_t v21 = v17 + 1;
    }
    memcpy((void *)v14, (const void *)v15, ((v21 + v20 + 7) & 0xFFFFFFFFFFFFFFF8) + 17);
    goto LABEL_20;
  }
  int v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32);
  v28(v14, v15, v10);
  __dst = (void *)((v19 + v14) & v18);
  uint64_t v23 = (const void *)((v19 + v15) & v18);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v23, 1, v10))
  {
    if (v16) {
      size_t v21 = v17;
    }
    else {
      size_t v21 = v17 + 1;
    }
    size_t v24 = __dst;
    memcpy(__dst, v23, v21);
  }
  else
  {
    size_t v24 = __dst;
    v28((uint64_t)__dst, (uint64_t)v23, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(__dst, 0, 1, v10);
    if (v16) {
      size_t v21 = v17;
    }
    else {
      size_t v21 = v17 + 1;
    }
  }
  unint64_t v25 = ((unint64_t)v24 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v26 = ((unint64_t)v23 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)unint64_t v25 = *(_OWORD *)v26;
  *(unsigned char *)(v25 + 16) = *(unsigned char *)(v26 + 16);
LABEL_20:
  *(_OWORD *)((v14 | 7) + ((v20 + v21 + 7) & 0xFFFFFFFFFFFFFFF8) + 17) = *(_OWORD *)((v15 | 7)
                                                                                     + ((v20 + v21 + 7) & 0xFFFFFFFFFFFFFFF8)
                                                                                     + 17);
  return a1;
}

void **assignWithTake for RequestContext(void **a1, void **a2, uint64_t a3)
{
  uint64_t v5 = a1;
  uint64_t v6 = *a1;
  *a1 = *a2;

  uint64_t v7 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v8 = v7 + 40;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = ((unint64_t)v5 + v9 + 8) & ~v9;
  uint64_t v11 = ((unint64_t)a2 + v9 + 8) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 40))(v10, v11);
  uint64_t v12 = *(void *)(v8 + 24);
  uint64_t v13 = type metadata accessor for URL();
  uint64_t v14 = v13;
  uint64_t v15 = *(void *)(v13 - 8);
  uint64_t v16 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v17 = (v16 | 7) + v12;
  uint64_t __dst = (v17 + v10) & ~(v16 | 7);
  uint64_t v18 = (v17 + v11) & ~(v16 | 7);
  uint64_t v19 = ~v16;
  size_t v67 = *(void *)(v15 + 64);
  size_t v20 = v67 + v16;
  size_t v21 = (v67 + v16) & ~v16;
  unsigned int v66 = *(_DWORD *)(v15 + 84);
  if (v66 > 0xFD)
  {
    size_t v63 = (v67 + v16) & ~v16;
    uint64_t v65 = v5;
    size_t v22 = *(uint64_t (**)(uint64_t, void, uint64_t))(v15 + 48);
    int v23 = v22(__dst, v66, v13);
    uint64_t v24 = v14;
    int v25 = v22(v18, v66, v14);
    if (v23)
    {
      size_t v21 = v63;
      uint64_t v5 = v65;
      if (v25)
      {
LABEL_4:
        BOOL v26 = v66 == 0;
        size_t v27 = v67;
        if (!v66) {
          size_t v27 = v67 + 1;
        }
        memcpy((void *)__dst, (const void *)v18, ((v27 + v21 + 7) & 0xFFFFFFFFFFFFFFF8) + 17);
        goto LABEL_45;
      }
      goto LABEL_15;
    }
    size_t v21 = v63;
    if (v25) {
      goto LABEL_21;
    }
LABEL_11:
    unint64_t v30 = (void *)((v20 + v18) & v19);
    unint64_t v62 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 40);
    v62(__dst, v18, v24);
    unint64_t v31 = (void *)((v20 + __dst) & v19);
    unsigned int v32 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v15 + 48);
    int v33 = v32(v31, 1, v24);
    int v34 = v32(v30, 1, v24);
    if (v33)
    {
      size_t v35 = v21;
      if (!v34)
      {
        uint64_t v36 = v30;
        (*(void (**)(void *, void *, uint64_t))(v15 + 32))(v31, v30, v24);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v31, 0, 1, v24);
        goto LABEL_38;
      }
    }
    else
    {
      size_t v35 = v21;
      if (!v34)
      {
        uint64_t v36 = v30;
        v62((uint64_t)v31, (uint64_t)v30, v24);
        goto LABEL_38;
      }
      (*(void (**)(void *, uint64_t))(v15 + 8))(v31, v24);
    }
    if (v66) {
      size_t v50 = v67;
    }
    else {
      size_t v50 = v67 + 1;
    }
    uint64_t v36 = v30;
    memcpy(v31, v30, v50);
LABEL_38:
    BOOL v26 = v66 == 0;
    size_t v51 = v67;
    if (!v66) {
      size_t v51 = v67 + 1;
    }
    size_t v52 = v51 + 7;
    unint64_t v53 = ((unint64_t)v31 + v52) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v54 = ((unint64_t)v36 + v52) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v55 = *(void *)(v53 + 8);
    if ((v55 & 0x3000000000000000) == 0)
    {
      uint64_t v56 = *(void *)(v54 + 8);
      if ((v56 & 0x3000000000000000) == 0)
      {
        uint64_t v61 = *(void *)v53;
        *(void *)unint64_t v53 = *(void *)v54;
        *(void *)(v53 + 8) = v56;
        outlined consume of Data._Representation(v61, v55);
        goto LABEL_44;
      }
      outlined consume of Data._Representation(*(void *)v53, v55);
    }
    *(_OWORD *)unint64_t v53 = *(_OWORD *)v54;
LABEL_44:
    *(unsigned char *)(v53 + 16) = *(unsigned char *)(v54 + 16);
    uint64_t v5 = v65;
    size_t v21 = v35;
    goto LABEL_45;
  }
  uint64_t v24 = v13;
  size_t v28 = *(void *)(*(void *)(v13 - 8) + 64);
  if (!v66) {
    size_t v28 = v67 + 1;
  }
  unsigned int v29 = *(unsigned __int8 *)(((((v20 + v18) & v19) + v28 + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
  if (*(unsigned __int8 *)(((((v20 + __dst) & v19) + v28 + 7) & 0xFFFFFFFFFFFFFFF8) + 16) >= 2u)
  {
    if (v29 >= 2) {
      goto LABEL_4;
    }
LABEL_15:
    size_t v64 = v21;
    int v37 = (const void *)((v20 + v18) & v19);
    uint64_t v38 = v24;
    size_t v39 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 32);
    v39(__dst, v18, v38);
    uint64_t v40 = (void *)((v20 + __dst) & v19);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48))(v37, 1, v38))
    {
      BOOL v26 = v66 == 0;
      if (v66) {
        size_t v41 = v67;
      }
      else {
        size_t v41 = v67 + 1;
      }
      memcpy(v40, v37, v41);
    }
    else
    {
      v39((uint64_t)v40, (uint64_t)v37, v38);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v40, 0, 1, v38);
      BOOL v26 = v66 == 0;
      if (v66) {
        size_t v41 = v67;
      }
      else {
        size_t v41 = v67 + 1;
      }
    }
    unint64_t v48 = ((unint64_t)v40 + v41 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v49 = ((unint64_t)v37 + v41 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(_OWORD *)unint64_t v48 = *(_OWORD *)v49;
    *(unsigned char *)(v48 + 16) = *(unsigned char *)(v49 + 16);
    size_t v21 = v64;
    goto LABEL_45;
  }
  uint64_t v65 = v5;
  if (v29 < 2) {
    goto LABEL_11;
  }
LABEL_21:
  uint64_t v42 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
  v42(__dst, v24);
  uint64_t v43 = (v20 + __dst) & v19;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v43, 1, v24)) {
    v42(v43, v24);
  }
  BOOL v26 = v66 == 0;
  size_t v44 = v67;
  if (!v66) {
    size_t v44 = v67 + 1;
  }
  size_t v45 = v44 + 7;
  uint64_t v46 = (uint64_t *)((v44 + 7 + v43) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v47 = v46[1];
  if ((v47 & 0x3000000000000000) == 0) {
    outlined consume of Data._Representation(*v46, v47);
  }
  memcpy((void *)__dst, (const void *)v18, ((v45 + v21) & 0xFFFFFFFFFFFFFFF8) + 17);
  uint64_t v5 = v65;
LABEL_45:
  unint64_t v57 = ((v67 + v26 + v21 + 7) & 0xFFFFFFFFFFFFFFF8) + 17;
  size_t v58 = (void *)((__dst | 7) + v57);
  uint64_t v59 = (void *)((v18 | 7) + v57);
  *size_t v58 = *v59;
  v58[1] = v59[1];
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t getEnumTagSinglePayload for RequestContext(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t v8 = *(void *)(type metadata accessor for URL() - 8);
  uint64_t v9 = v8;
  unsigned int v10 = *(_DWORD *)(v8 + 84);
  if (v10) {
    unsigned int v11 = v10 - 1;
  }
  else {
    unsigned int v11 = 0;
  }
  if (v10 <= 0xFE) {
    int v12 = 254;
  }
  else {
    int v12 = *(_DWORD *)(v8 + 84);
  }
  unsigned int v13 = v12 - 2;
  if ((v12 - 2) <= 0x7FFFFFFE) {
    unsigned int v13 = 2147483646;
  }
  if (v7 <= v13) {
    unsigned int v14 = v13;
  }
  else {
    unsigned int v14 = v7;
  }
  if (v14 <= 0x7FFFFFFF) {
    unsigned int v15 = 0x7FFFFFFF;
  }
  else {
    unsigned int v15 = v14;
  }
  uint64_t v16 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v17 = *(void *)(v6 + 64);
  uint64_t v18 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v19 = *(void *)(v8 + 64);
  if (v10) {
    uint64_t v20 = *(void *)(v8 + 64);
  }
  else {
    uint64_t v20 = v19 + 1;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v21 = v18 | 7;
  uint64_t v22 = v19 + v18;
  uint64_t v23 = v20 + (v22 & ~v18);
  if (v15 < a2)
  {
    unint64_t v24 = ((v21 + v17 + ((v16 + 8) & ~v16)) & ~v21) + ((v23 + 31) & 0xFFFFFFFFFFFFFFF8) + 16;
    if ((v24 & 0xFFFFFFF8) != 0) {
      unsigned int v25 = 2;
    }
    else {
      unsigned int v25 = a2 - v15 + 1;
    }
    if (v25 >= 0x10000) {
      unsigned int v26 = 4;
    }
    else {
      unsigned int v26 = 2;
    }
    if (v25 < 0x100) {
      unsigned int v26 = 1;
    }
    if (v25 >= 2) {
      uint64_t v27 = v26;
    }
    else {
      uint64_t v27 = 0;
    }
    switch(v27)
    {
      case 1:
        int v28 = *((unsigned __int8 *)a1 + v24);
        if (!*((unsigned char *)a1 + v24)) {
          break;
        }
        goto LABEL_35;
      case 2:
        int v28 = *(unsigned __int16 *)((char *)a1 + v24);
        if (*(_WORD *)((char *)a1 + v24)) {
          goto LABEL_35;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x249E2F538);
      case 4:
        int v28 = *(_DWORD *)((char *)a1 + v24);
        if (!v28) {
          break;
        }
LABEL_35:
        int v29 = v28 - 1;
        if ((v24 & 0xFFFFFFF8) != 0)
        {
          int v29 = 0;
          int v30 = *a1;
        }
        else
        {
          int v30 = 0;
        }
        return v15 + (v30 | v29) + 1;
      default:
        break;
    }
  }
  if ((v14 & 0x80000000) == 0)
  {
    uint64_t v31 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v31) = -1;
    }
    return (v31 + 1);
  }
  uint64_t v33 = ((unint64_t)a1 + v16 + 8) & ~v16;
  if (v7 == v15)
  {
    int v34 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
    return v34(v33, v7, v5);
  }
  uint64_t v35 = (v33 + v17 + v21) & ~v21;
  if (v12 <= 1)
  {
    if (v10 < 0xFE)
    {
      uint64_t v39 = (v22 + v35) & ~v18;
      if (v11 == v12)
      {
        if (v10 < 2) {
          return 0;
        }
        unsigned int v40 = (*(uint64_t (**)(uint64_t))(v9 + 48))(v39);
        if (v40 < 2) {
          return 0;
        }
        unsigned int v36 = v40 - 1;
      }
      else
      {
        unsigned int v41 = *(unsigned __int8 *)(((v39 + v20 + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
        if (v41 < 2) {
          return 0;
        }
        unsigned int v36 = ((v41 + 2147483646) & 0x7FFFFFFF) + 1;
      }
    }
    else
    {
      unsigned int v36 = (*(uint64_t (**)(uint64_t))(v9 + 48))(v35);
    }
    BOOL v37 = v36 >= 2;
    uint64_t result = v36 - 2;
    if (result != 0 && v37) {
      return result;
    }
    return 0;
  }
  unint64_t v38 = *(void *)(v35 + ((v23 + 7) & 0xFFFFFFFFFFFFFFF8) + 32);
  if (v38 >= 0xFFFFFFFF) {
    LODWORD(v38) = -1;
  }
  if ((v38 + 1) >= 2) {
    return v38;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for RequestContext(_DWORD *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v45 = v8;
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  uint64_t v10 = *(void *)(type metadata accessor for URL() - 8);
  unsigned int v11 = *(_DWORD *)(v10 + 84);
  if (v11) {
    unsigned int v12 = v11 - 1;
  }
  else {
    unsigned int v12 = 0;
  }
  uint64_t v13 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v14 = *(void *)(v8 + 64);
  uint64_t v15 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v16 = *(void *)(v10 + 64);
  if (v11 <= 0xFE) {
    int v17 = 254;
  }
  else {
    int v17 = *(_DWORD *)(v10 + 84);
  }
  if ((v17 - 2) <= 0x7FFFFFFE) {
    unsigned int v18 = 2147483646;
  }
  else {
    unsigned int v18 = v17 - 2;
  }
  if (v9 <= v18) {
    unsigned int v19 = v18;
  }
  else {
    unsigned int v19 = v9;
  }
  if (v19 <= 0x7FFFFFFF) {
    unsigned int v20 = 0x7FFFFFFF;
  }
  else {
    unsigned int v20 = v19;
  }
  uint64_t v21 = v15 | 7;
  uint64_t v22 = v16 + v15;
  uint64_t v23 = (v16 + v15) & ~v15;
  if (!v11) {
    ++v16;
  }
  uint64_t v24 = v16 + v23;
  unint64_t v25 = (((v15 | 7) + v14 + ((v13 + 8) & ~v13)) & ~(v15 | 7)) + ((v24 + 31) & 0xFFFFFFFFFFFFFFF8) + 16;
  if ((((v15 | 7) + v14 + ((v13 + 8) & ~v13)) & ~(v15 | 7))
     + ((v24 + 31) & 0xFFFFFFF8) == -16)
    unsigned int v26 = a3 - v20 + 1;
  else {
    unsigned int v26 = 2;
  }
  if (v26 >= 0x10000) {
    int v27 = 4;
  }
  else {
    int v27 = 2;
  }
  if (v26 < 0x100) {
    int v27 = 1;
  }
  if (v26 >= 2) {
    unsigned int v28 = v27;
  }
  else {
    unsigned int v28 = 0;
  }
  if (v20 < a3) {
    uint64_t v29 = v28;
  }
  else {
    uint64_t v29 = 0;
  }
  if (a2 > v20)
  {
    if ((((v15 | 7) + v14 + ((v13 + 8) & ~v13)) & ~(v15 | 7))
       + ((v24 + 31) & 0xFFFFFFF8) == -16)
      int v30 = a2 - v20;
    else {
      int v30 = 1;
    }
    if ((((v15 | 7) + v14 + ((v13 + 8) & ~v13)) & ~(v15 | 7))
       + ((v24 + 31) & 0xFFFFFFF8) != -16)
    {
      int v31 = ~v20 + a2;
      bzero(a1, (((v15 | 7) + v14 + ((v13 + 8) & ~v13)) & ~(v15 | 7)) + ((v24 + 31) & 0xFFFFFFFFFFFFFFF8) + 16);
      *a1 = v31;
    }
    switch(v29)
    {
      case 1:
        *((unsigned char *)a1 + v25) = v30;
        return;
      case 2:
        *(_WORD *)((char *)a1 + v25) = v30;
        return;
      case 3:
        goto LABEL_81;
      case 4:
        *(_DWORD *)((char *)a1 + v25) = v30;
        return;
      default:
        return;
    }
  }
  uint64_t v32 = ~v21;
  uint64_t v33 = ~v15;
  switch(v29)
  {
    case 1:
      *((unsigned char *)a1 + v25) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_47;
    case 2:
      *(_WORD *)((char *)a1 + v25) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_47;
    case 3:
LABEL_81:
      __break(1u);
      JUMPOUT(0x249E2F948);
    case 4:
      *(_DWORD *)((char *)a1 + v25) = 0;
      goto LABEL_46;
    default:
LABEL_46:
      if (!a2) {
        return;
      }
LABEL_47:
      if ((v19 & 0x80000000) != 0)
      {
        uint64_t v35 = ((unint64_t)a1 + v13 + 8) & ~v13;
        if (v9 == v20)
        {
          unsigned int v36 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v45 + 56);
          v36(v35, a2, v9, v7);
        }
        else
        {
          BOOL v37 = (unsigned char *)((v35 + v14 + v21) & v32);
          if (v17 > 1)
          {
            unsigned int v41 = &v37[((v24 + 7) & 0xFFFFFFFFFFFFFFF8) + 24];
            if (a2 > 0x7FFFFFFE)
            {
              void *v41 = 0;
              *(void *)&v37[((v24 + 7) & 0xFFFFFFFFFFFFFFF8) + 32] = 0;
              *(_DWORD *)unsigned int v41 = a2 - 0x7FFFFFFF;
            }
            else
            {
              *(void *)&v37[((v24 + 7) & 0xFFFFFFFFFFFFFFF8) + 32] = a2;
            }
          }
          else
          {
            int v38 = (v24 + 7) & 0xFFFFFFF8;
            size_t v39 = (v38 + 17);
            if (v17 - 2 >= a2 && (int)a2 + 2 <= v17)
            {
              if (a2 == -2) {
                return;
              }
              if (v11 < 0xFE)
              {
                uint64_t v43 = (unsigned char *)((unint64_t)&v37[v22] & v33);
                if (v12 != v17)
                {
                  *(unsigned char *)(((unint64_t)&v43[v16 + 7] & 0xFFFFFFFFFFFFFFF8) + 16) = a2 + 3;
                  return;
                }
                if (v11 < 2) {
                  return;
                }
                uint64_t v44 = (a2 + 3);
                uint64_t v42 = *(void (**)(unsigned char *, uint64_t))(v10 + 56);
              }
              else
              {
                uint64_t v42 = *(void (**)(unsigned char *, uint64_t))(v10 + 56);
                uint64_t v43 = v37;
                uint64_t v44 = (a2 + 2);
              }
              v42(v43, v44);
            }
            else
            {
              if (v39 >= 4) {
                int v40 = a2 - v17 + 1;
              }
              else {
                int v40 = (a2 - v17 + 1);
              }
              bzero((void *)((v35 + v14 + v21) & v32), v39);
              if (v38 == -16) {
                *BOOL v37 = v40;
              }
              else {
                *(_DWORD *)BOOL v37 = v40;
              }
            }
          }
        }
      }
      else
      {
        if ((a2 & 0x80000000) != 0) {
          uint64_t v34 = a2 ^ 0x80000000;
        }
        else {
          uint64_t v34 = (a2 - 1);
        }
        *(void *)a1 = v34;
      }
      return;
  }
}

uint64_t KeyRotation.__allocating_init(configCache:keyStorage:allowList:activeUseCaseTracker:networkDelegation:coordinator:currentTime:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v17 = swift_allocObject();
  swift_defaultActor_initialize();
  *(void *)(v17 + 224) = 0;
  *(_OWORD *)(v17 + 192) = 0u;
  *(_OWORD *)(v17 + 208) = 0u;
  *(void *)(v17 + 112) = a1;
  *(void *)(v17 + 120) = a2;
  *(void *)(v17 + 128) = a3;
  *(void *)(v17 + 136) = a4;
  *(void *)(v17 + 144) = a5;
  *(void *)(v17 + 152) = a9;
  *(void *)(v17 + 160) = a10;
  *(void *)(v17 + 168) = a6;
  *(void *)(v17 + 176) = a7;
  *(void *)(v17 + 184) = a8;
  return v17;
}

unint64_t specialized Sequence.compactMap<A>(_:)(void (*a1)(void), uint64_t a2, uint64_t a3)
{
  uint64_t v29 = a2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiKeyStatus?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = type metadata accessor for AspireApiKeyStatus(0);
  MEMORY[0x270FA5388](v28);
  uint64_t v27 = (uint64_t)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v26 = (uint64_t)&v23 - v12;
  uint64_t v13 = *(void *)(a3 + 16);
  if (!v13) {
    return MEMORY[0x263F8EE78];
  }
  unint64_t v14 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v23 = a3;
  unint64_t v24 = v14;
  uint64_t v15 = a3 + v14;
  uint64_t v16 = (unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  uint64_t v17 = *(void *)(v11 + 72);
  swift_bridgeObjectRetain();
  unint64_t v18 = MEMORY[0x263F8EE78];
  unint64_t v25 = a1;
  do
  {
    a1(v15);
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v18;
    }
    if ((*v16)(v8, 1, v28) == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v8, &demangling cache variable for type metadata for AspireApiKeyStatus?);
    }
    else
    {
      uint64_t v19 = v26;
      _s8CipherML12UseCaseGroupVWObTm_1((uint64_t)v8, v26, type metadata accessor for AspireApiKeyStatus);
      _s8CipherML12UseCaseGroupVWObTm_1(v19, v27, type metadata accessor for AspireApiKeyStatus);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v18 + 16) + 1, 1, v18);
      }
      unint64_t v21 = *(void *)(v18 + 16);
      unint64_t v20 = *(void *)(v18 + 24);
      if (v21 >= v20 >> 1) {
        unint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1, v18);
      }
      *(void *)(v18 + 16) = v21 + 1;
      _s8CipherML12UseCaseGroupVWObTm_1(v27, v18 + v24 + v21 * v17, type metadata accessor for AspireApiKeyStatus);
      a1 = v25;
    }
    v15 += v17;
    --v13;
  }
  while (v13);
  swift_bridgeObjectRelease();
  return v18;
}

uint64_t KeyRotation.configCache.getter()
{
  return swift_retain();
}

uint64_t KeyRotation.keyStorage.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t KeyRotation.allowList.getter()
{
  return swift_retain();
}

uint64_t KeyRotation.activeUseCaseTracker.getter()
{
  return swift_retain();
}

uint64_t KeyRotation.currentTime.getter()
{
  uint64_t v1 = *(void *)(v0 + 152);
  swift_retain();
  return v1;
}

uint64_t KeyRotation.networkDelegation.getter()
{
  uint64_t v1 = *(void *)(v0 + 168);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t KeyRotation.coordinator.getter()
{
  return swift_retain();
}

uint64_t key path setter for KeyRotation.keyUploadService : KeyRotation(uint64_t a1, void *a2)
{
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v5, &demangling cache variable for type metadata for NetworkManager?);
  uint64_t v3 = *a2 + 192;
  swift_beginAccess();
  outlined assign with take of NetworkManager?((uint64_t)v5, v3);
  return swift_endAccess();
}

uint64_t KeyRotation.keyUploadService.getter@<X0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  return outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + 192, a1, &demangling cache variable for type metadata for NetworkManager?);
}

uint64_t KeyRotation.keyUploadService.setter(uint64_t a1)
{
  swift_beginAccess();
  outlined assign with take of NetworkManager?(a1, v1 + 192);
  return swift_endAccess();
}

uint64_t (*KeyRotation.keyUploadService.modify())()
{
  return RequestsManager.CMLUseCaseStatusBuilder.keyExpirationTime.modify;
}

uint64_t (*default argument 6 of KeyRotation.init(configCache:keyStorage:allowList:activeUseCaseTracker:networkDelegation:coordinator:currentTime:)())()
{
  return closure #1 in default argument 4 of RequestsManager.init(configCache:keyStorage:activeUseCaseTracker:allowList:currentTime:);
}

uint64_t KeyRotation.init(configCache:keyStorage:allowList:activeUseCaseTracker:networkDelegation:coordinator:currentTime:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  swift_defaultActor_initialize();
  *(void *)(v10 + 224) = 0;
  *(_OWORD *)(v10 + 192) = 0u;
  *(_OWORD *)(v10 + 208) = 0u;
  *(void *)(v10 + 112) = a1;
  *(void *)(v10 + 120) = a2;
  *(void *)(v10 + 128) = a3;
  *(void *)(v10 + 136) = a4;
  *(void *)(v10 + 144) = a5;
  *(void *)(v10 + 152) = a9;
  *(void *)(v10 + 160) = a10;
  *(void *)(v10 + 168) = a6;
  *(void *)(v10 + 176) = a7;
  *(void *)(v10 + 184) = a8;
  return v10;
}

uint64_t KeyRotation.activeGroups(activeUseCases:)()
{
  uint64_t v3 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized KeyRotation.activeGroups(activeUseCases:)
                             + async function pointer to specialized KeyRotation.activeGroups(activeUseCases:));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = KeyRotation.activeGroups(activeUseCases:);
  return v3();
}

uint64_t KeyRotation.activeGroups(activeUseCases:)(uint64_t a1)
{
  uint64_t v5 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(a1);
}

uint64_t KeyRotation.keyCreationCutoff(groupName:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v31 = a3;
  uint64_t v32 = type metadata accessor for Date();
  uint64_t v30 = *(void *)(v32 - 8);
  MEMORY[0x270FA5388](v32);
  uint64_t v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UseCaseGroup?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UseCaseGroup();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  unint64_t v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = v3;
  uint64_t v15 = *(void *)(*(void *)(v3 + 136) + 32);
  uint64_t v16 = *(void *)(v15 + 16);
  uint64_t v33 = a1;
  if (v16)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
    if (v18)
    {
      _s8CipherML12UseCaseGroupVWOcTm_1(*(void *)(v15 + 56) + *(void *)(v12 + 72) * v17, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v10, 0, 1, v11);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v10, 1, 1, v11);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) != 1)
    {
      uint64_t result = _s8CipherML12UseCaseGroupVWObTm_1((uint64_t)v10, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
      uint64_t v28 = *(void *)&v14[*(int *)(v11 + 20)];
      if ((unsigned __int128)(v28 * (__int128)60) >> 64 == (60 * v28) >> 63)
      {
        (*(void (**)(uint64_t))(v29 + 152))(result);
        Date.addingTimeInterval(_:)();
        (*(void (**)(char *, uint64_t))(v30 + 8))(v7, v32);
        return _s8CipherML12UseCaseGroupVWOhTm_2((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
      }
      else
      {
        __break(1u);
      }
      return result;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v10, 1, 1, v11);
  }
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v10, &demangling cache variable for type metadata for UseCaseGroup?);
  if (one-time initialization token for daemon != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  __swift_project_value_buffer(v19, (uint64_t)static Logger.daemon);
  swift_bridgeObjectRetain_n();
  unint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.error.getter();
  BOOL v22 = os_log_type_enabled(v20, v21);
  uint64_t v23 = v33;
  if (v22)
  {
    unint64_t v24 = (uint8_t *)swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    uint64_t v35 = v25;
    *(_DWORD *)unint64_t v24 = 136446210;
    swift_bridgeObjectRetain();
    uint64_t v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, a2, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_249C3F000, v20, v21, "Invalid group '%{public}s'", v24, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5B4790](v25, -1, -1);
    MEMORY[0x24C5B4790](v24, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  type metadata accessor for CipherMLError();
  _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_9((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, 255, (void (*)(uint64_t))type metadata accessor for CipherMLError);
  swift_allocError();
  *uint64_t v26 = v23;
  v26[1] = a2;
  swift_storeEnumTagMultiPayload();
  swift_bridgeObjectRetain();
  return swift_willThrow();
}

uint64_t KeyRotation.areKeysExpired(groupName:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserIdentifier?);
  v3[5] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for UserIdentifier();
  v3[6] = v4;
  v3[7] = *(void *)(v4 - 8);
  v3[8] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Date();
  v3[9] = v5;
  v3[10] = *(void *)(v5 - 8);
  v3[11] = swift_task_alloc();
  return MEMORY[0x270FA2498](KeyRotation.areKeysExpired(groupName:), v2, 0);
}

uint64_t KeyRotation.areKeysExpired(groupName:)()
{
  KeyRotation.keyCreationCutoff(groupName:)(v0[2], v0[3], v0[11]);
  uint64_t v1 = *(void *)(v0[4] + 128);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v1 + 8) + **(int **)(v1 + 8));
  uint64_t v3 = (void *)swift_task_alloc();
  v0[12] = v3;
  *uint64_t v3 = v0;
  v3[1] = KeyRotation.areKeysExpired(groupName:);
  uint64_t v4 = v0[5];
  uint64_t v5 = v0[2];
  uint64_t v6 = v0[3];
  return v8(v4, v5, v6, ObjectType, v1);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 32);
  swift_task_dealloc();
  return MEMORY[0x270FA2498](KeyRotation.areKeysExpired(groupName:), v1, 0);
}

{
  void *v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v11;

  uint64_t v1 = v0[5];
  uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, void))(v0[7] + 48))(v1, 1, v0[6]);
  uint64_t v4 = v0[10];
  uint64_t v3 = v0[11];
  uint64_t v5 = v0[9];
  if (v2 == 1)
  {
    (*(void (**)(void, void))(v4 + 8))(v0[11], v0[9]);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v1, &demangling cache variable for type metadata for UserIdentifier?);
  }
  else
  {
    uint64_t v6 = v0[8];
    _s8CipherML12UseCaseGroupVWObTm_1(v1, v6, (uint64_t (*)(void))type metadata accessor for UserIdentifier);
    uint64_t v7 = static Date.> infix(_:_:)();
    _s8CipherML12UseCaseGroupVWOhTm_2(v6, (uint64_t (*)(void))type metadata accessor for UserIdentifier);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    if (v7)
    {
      uint64_t v8 = 0;
      goto LABEL_6;
    }
  }
  uint64_t v8 = 1;
LABEL_6:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(uint64_t))v0[1];
  return v9(v8);
}

uint64_t KeyRotation.rotateUserId(groupName:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[5] = a3;
  v4[6] = v3;
  v4[3] = a1;
  v4[4] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserIdentifier?);
  v4[7] = swift_task_alloc();
  v4[8] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for UserIdentifier();
  v4[9] = v5;
  v4[10] = *(void *)(v5 - 8);
  v4[11] = swift_task_alloc();
  v4[12] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Date();
  v4[13] = v6;
  v4[14] = *(void *)(v6 - 8);
  v4[15] = swift_task_alloc();
  v4[16] = swift_task_alloc();
  v4[17] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UseCaseGroup?);
  v4[18] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for UseCaseGroup();
  v4[19] = v7;
  v4[20] = *(void *)(v7 - 8);
  v4[21] = swift_task_alloc();
  return MEMORY[0x270FA2498](KeyRotation.rotateUserId(groupName:), v3, 0);
}

uint64_t KeyRotation.rotateUserId(groupName:)()
{
  uint64_t v35 = v0;
  uint64_t v1 = *(void *)(*(void *)(v0[6] + 136) + 32);
  if (!*(void *)(v1 + 16))
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(v0[20] + 56))(v0[18], 1, 1, v0[19]);
LABEL_7:
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v0[18], &demangling cache variable for type metadata for UseCaseGroup?);
    if (one-time initialization token for daemon != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Logger.daemon);
    swift_bridgeObjectRetain_n();
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    BOOL v13 = os_log_type_enabled(v11, v12);
    unint64_t v14 = v0[5];
    if (v13)
    {
      uint64_t v15 = v0[4];
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      uint64_t v34 = v17;
      *(_DWORD *)uint64_t v16 = 136446210;
      swift_bridgeObjectRetain();
      v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v14, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_249C3F000, v11, v12, "Invalid group '%{public}s'", v16, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C5B4790](v17, -1, -1);
      MEMORY[0x24C5B4790](v16, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    uint64_t v19 = v0[4];
    uint64_t v18 = v0[5];
    type metadata accessor for CipherMLError();
    _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_9((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, 255, (void (*)(uint64_t))type metadata accessor for CipherMLError);
    swift_allocError();
    *unint64_t v20 = v19;
    v20[1] = v18;
    swift_storeEnumTagMultiPayload();
    swift_bridgeObjectRetain();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v25 = (uint64_t (*)(void))v0[1];
    return v25();
  }
  uint64_t v3 = v0[4];
  uint64_t v2 = v0[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(v3, v2);
  if (v5)
  {
    _s8CipherML12UseCaseGroupVWOcTm_1(*(void *)(v1 + 56) + *(void *)(v0[20] + 72) * v4, v0[18], (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v6 = 1;
  }
  uint64_t v7 = v0[19];
  uint64_t v8 = v0[20];
  uint64_t v9 = v0[18];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(v9, v6, 1, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v9, 1, v7) == 1) {
    goto LABEL_7;
  }
  uint64_t v21 = v0[21];
  uint64_t v22 = v0[19];
  uint64_t result = _s8CipherML12UseCaseGroupVWObTm_1(v0[18], v21, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
  uint64_t v24 = *(void *)(v21 + *(int *)(v22 + 24));
  if ((unsigned __int128)(v24 * (__int128)60) >> 64 == (60 * v24) >> 63)
  {
    KeyRotation.keyCreationCutoff(groupName:)(v0[4], v0[5], v0[17]);
    uint64_t v26 = v0[6];
    Date.addingTimeInterval(_:)();
    v0[22] = *(void *)(v26 + 120);
    uint64_t v27 = *(void *)(v26 + 128);
    v0[23] = v27;
    uint64_t ObjectType = swift_getObjectType();
    v0[24] = ObjectType;
    uint64_t v33 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v27 + 8)
                                                                              + **(int **)(v27 + 8));
    uint64_t v29 = (void *)swift_task_alloc();
    v0[25] = v29;
    *uint64_t v29 = v0;
    v29[1] = KeyRotation.rotateUserId(groupName:);
    uint64_t v30 = v0[8];
    uint64_t v31 = v0[4];
    uint64_t v32 = v0[5];
    return v33(v30, v31, v32, ObjectType, v27);
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  swift_task_dealloc();
  return MEMORY[0x270FA2498](KeyRotation.rotateUserId(groupName:), v1, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t (*v8)(void);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;

  uint64_t v1 = v0[8];
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(v0[10] + 48))(v1, 1, v0[9]) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v1, &demangling cache variable for type metadata for UserIdentifier?);
LABEL_8:
    uint64_t v27 = v0[23];
    uint64_t v11 = v0[14];
    uint64_t v10 = v0[15];
    os_log_type_t v12 = v0[13];
    unint64_t v14 = v0[10];
    BOOL v13 = v0[11];
    uint64_t v15 = v0[9];
    uint64_t v16 = v0[7];
    uint64_t v17 = v0[3];
    (*(void (**)(void))(v0[6] + 152))();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v13, v10, v12);
    UUID.init()();
    uint64_t v18 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v0[26] = v19;
    v0[27] = (v11 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v19(v10, v12);
    *(void *)(v13 + *(int *)(v15 + 24)) = v18;
    _s8CipherML12UseCaseGroupVWObTm_1(v13, v17, (uint64_t (*)(void))type metadata accessor for UserIdentifier);
    _s8CipherML12UseCaseGroupVWOcTm_1(v17, v16, (uint64_t (*)(void))type metadata accessor for UserIdentifier);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v14 + 56))(v16, 0, 1, v15);
    uint64_t v26 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v27 + 16)
                                                                              + **(int **)(v27 + 16));
    unint64_t v20 = (void *)swift_task_alloc();
    v0[28] = v20;
    *unint64_t v20 = v0;
    v20[1] = KeyRotation.rotateUserId(groupName:);
    uint64_t v22 = v0[23];
    uint64_t v21 = v0[24];
    uint64_t v23 = v0[7];
    uint64_t v25 = v0[4];
    uint64_t v24 = v0[5];
    return v26(v25, v24, v23, v21, v22);
  }
  _s8CipherML12UseCaseGroupVWObTm_1(v1, v0[12], (uint64_t (*)(void))type metadata accessor for UserIdentifier);
  if ((static Date.> infix(_:_:)() & 1) == 0)
  {
    _s8CipherML12UseCaseGroupVWOhTm_2(v0[12], (uint64_t (*)(void))type metadata accessor for UserIdentifier);
    goto LABEL_8;
  }
  uint64_t v2 = v0[21];
  uint64_t v3 = v0[17];
  uint64_t v4 = v0[13];
  char v5 = v0[12];
  uint64_t v6 = v0[3];
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v0[14] + 8);
  v7(v0[16], v4);
  v7(v3, v4);
  _s8CipherML12UseCaseGroupVWOhTm_2(v2, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
  _s8CipherML12UseCaseGroupVWObTm_1(v5, v6, (uint64_t (*)(void))type metadata accessor for UserIdentifier);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  uint64_t v1 = *(void *)(*(void *)v0 + 56);
  uint64_t v2 = *(void *)(*(void *)v0 + 48);
  swift_task_dealloc();
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v1, &demangling cache variable for type metadata for UserIdentifier?);
  return MEMORY[0x270FA2498](KeyRotation.rotateUserId(groupName:), v2, 0);
}

{
  void *v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[26];
  uint64_t v2 = v0[21];
  uint64_t v3 = v0[17];
  uint64_t v4 = v0[13];
  v1(v0[16], v4);
  v1(v3, v4);
  _s8CipherML12UseCaseGroupVWOhTm_2(v2, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t KeyRotation.collectKeyStatusesToUpload(groupName:userId:keyStatuses:activeUseCases:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[7] = a6;
  v7[8] = v6;
  v7[5] = a4;
  void v7[6] = a5;
  v7[3] = a2;
  v7[4] = a3;
  v7[2] = a1;
  uint64_t v8 = type metadata accessor for UserIdentifier();
  v7[9] = v8;
  v7[10] = *(void *)(v8 - 8);
  v7[11] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for UseCaseGroup();
  v7[12] = v9;
  v7[13] = *(void *)(v9 - 8);
  v7[14] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UseCaseGroup?);
  v7[15] = swift_task_alloc();
  v7[16] = swift_task_alloc();
  return MEMORY[0x270FA2498](KeyRotation.collectKeyStatusesToUpload(groupName:userId:keyStatuses:activeUseCases:), v6, 0);
}

uint64_t KeyRotation.collectKeyStatusesToUpload(groupName:userId:keyStatuses:activeUseCases:)()
{
  uint64_t v1 = *(void *)(v0[8] + 136);
  uint64_t v2 = *(void *)(v1 + 32);
  if (*(void *)(v2 + 16))
  {
    uint64_t v4 = v0[3];
    uint64_t v3 = v0[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(v4, v3);
    uint64_t v6 = v0[16];
    uint64_t v7 = v0[12];
    uint64_t v8 = v0[13];
    if (v9)
    {
      _s8CipherML12UseCaseGroupVWOcTm_1(*(void *)(v2 + 56) + *(void *)(v8 + 72) * v5, v0[16], (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
    }
    else
    {
      (*(void (**)(void, uint64_t, uint64_t, uint64_t))(v8 + 56))(v0[16], 1, 1, v7);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(v0[13] + 56))(v0[16], 1, 1, v0[12]);
  }
  uint64_t v10 = v0[15];
  uint64_t v11 = v0[12];
  uint64_t v12 = v0[13];
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v0[16], v10, &demangling cache variable for type metadata for UseCaseGroup?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    uint64_t v13 = v0[16];
    uint64_t v15 = v0[3];
    uint64_t v14 = v0[4];
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v0[15], &demangling cache variable for type metadata for UseCaseGroup?);
    type metadata accessor for CipherMLError();
    _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_9((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, 255, (void (*)(uint64_t))type metadata accessor for CipherMLError);
    swift_allocError();
    void *v16 = v15;
    v16[1] = v14;
    swift_storeEnumTagMultiPayload();
    swift_bridgeObjectRetain();
    swift_willThrow();
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v13, &demangling cache variable for type metadata for UseCaseGroup?);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v17 = (uint64_t (*)(void))v0[1];
    return v17();
  }
  else
  {
    uint64_t v19 = v0[11];
    uint64_t v20 = v0[5];
    _s8CipherML12UseCaseGroupVWObTm_1(v0[15], v0[14], (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
    _s8CipherML12UseCaseGroupVWOcTm_1(v20, v19, (uint64_t (*)(void))type metadata accessor for UserIdentifier);
    uint64_t v21 = *(void *)(v1 + 56);
    if (*(void *)(v21 + 16))
    {
      uint64_t v23 = v0[3];
      uint64_t v22 = v0[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(v23, v22);
      if (v25)
      {
        uint64_t v26 = *(void *)(*(void *)(v21 + 56) + 8 * v24);
        swift_bridgeObjectRetain();
      }
      else
      {
        uint64_t v26 = MEMORY[0x263F8EE78];
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v26 = MEMORY[0x263F8EE78];
    }
    uint64_t v27 = v0[7];
    swift_bridgeObjectRetain();
    uint64_t v28 = specialized _NativeSet.genericIntersection<A>(_:)(v26, v27, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))specialized closure #1 in _NativeSet.genericIntersection<A>(_:));
    v0[17] = v28;
    swift_bridgeObjectRelease();
    uint64_t v31 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized Sequence.asyncCompactMap<A>(_:)
                                                   + async function pointer to specialized Sequence.asyncCompactMap<A>(_:));
    swift_retain();
    uint64_t v29 = (void *)swift_task_alloc();
    v0[18] = v29;
    *uint64_t v29 = v0;
    v29[1] = KeyRotation.collectKeyStatusesToUpload(groupName:userId:keyStatuses:activeUseCases:);
    uint64_t v30 = v0[8];
    return v31(v28, v30);
  }
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void);
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(unint64_t);
  uint64_t v22;

  uint64_t v2 = v0[19];
  uint64_t v1 = v0[20];
  uint64_t v3 = v0[14];
  uint64_t v4 = v0[11];
  uint64_t v5 = v0[8];
  uint64_t v6 = v0[6];
  uint64_t v7 = (void *)swift_task_alloc();
  v7[2] = v5;
  v7[3] = v3;
  v7[4] = v2;
  v7[5] = v4;
  uint64_t v8 = specialized Sequence.compactMap<A>(_:)((void (*)(void))partial apply for closure #2 in KeyRotation.collectKeyStatusesToUpload(groupName:userId:keyStatuses:activeUseCases:), (uint64_t)v7, v6);
  if (v1)
  {
    char v9 = v0[16];
    uint64_t v10 = v0[14];
    uint64_t v11 = v0[11];
    swift_task_dealloc();
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v9, &demangling cache variable for type metadata for UseCaseGroup?);
    swift_bridgeObjectRelease();
    _s8CipherML12UseCaseGroupVWOhTm_2(v10, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
    _s8CipherML12UseCaseGroupVWOhTm_2(v11, (uint64_t (*)(void))type metadata accessor for UserIdentifier);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v12 = (uint64_t (*)(void))v0[1];
    return v12();
  }
  else
  {
    uint64_t v14 = v8;
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    uint64_t v15 = v0[16];
    uint64_t v16 = v0[14];
    if (*(void *)(v14 + 16))
    {
      uint64_t v17 = v0[11];
      uint64_t v18 = v0[2];
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v0[16], &demangling cache variable for type metadata for UseCaseGroup?);
      _s8CipherML12UseCaseGroupVWOhTm_2(v16, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
      _s8CipherML12UseCaseGroupVWOcTm_1(v17, v18, (uint64_t (*)(void))type metadata accessor for UserIdentifier);
      uint64_t v19 = 0;
    }
    else
    {
      swift_bridgeObjectRelease();
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v15, &demangling cache variable for type metadata for UseCaseGroup?);
      _s8CipherML12UseCaseGroupVWOhTm_2(v16, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
      uint64_t v14 = MEMORY[0x263F8EE78];
      uint64_t v19 = 1;
    }
    uint64_t v20 = v0[11];
    (*(void (**)(void, uint64_t, uint64_t, void))(v0[10] + 56))(v0[2], v19, 1, v0[9]);
    _s8CipherML12UseCaseGroupVWOhTm_2(v20, (uint64_t (*)(void))type metadata accessor for UserIdentifier);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v21 = (uint64_t (*)(unint64_t))v0[1];
    return v21(v14);
  }
}

uint64_t KeyRotation.collectKeyStatusesToUpload(groupName:userId:keyStatuses:activeUseCases:)(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 64);
  *(void *)(v3 + 152) = a1;
  *(void *)(v3 + 160) = v1;
  swift_task_dealloc();
  swift_release();
  swift_release();
  return MEMORY[0x270FA2498](KeyRotation.collectKeyStatusesToUpload(groupName:userId:keyStatuses:activeUseCases:), v4, 0);
}

uint64_t closure #2 in KeyRotation.collectKeyStatusesToUpload(groupName:userId:keyStatuses:activeUseCases:)@<X0>(void *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v162 = a5;
  uint64_t v160 = a4;
  uint64_t v164 = a2;
  uint64_t v165 = a3;
  uint64_t v169 = a1;
  uint64_t v166 = a6;
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v157 = *(void *)(v6 - 8);
  uint64_t v158 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v156 = (char *)&v140 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v171 = type metadata accessor for AspireApiKeyStatus(0);
  uint64_t v167 = *(void *)(v171 - 8);
  MEMORY[0x270FA5388](v171);
  uint64_t v153 = (uint64_t)&v140 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v154 = (uint64_t *)((char *)&v140 - v10);
  uint64_t v159 = type metadata accessor for SecretKey();
  int v161 = *(void **)(v159 - 8);
  MEMORY[0x270FA5388](v159);
  uint64_t v149 = (uint64_t *)((char *)&v140 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v12);
  uint64_t v152 = (uint64_t *)((char *)&v140 - v13);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecretKey?);
  MEMORY[0x270FA5388](v14 - 8);
  int64_t v150 = (uint64_t *)((char *)&v140 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v16);
  uint64_t v155 = (uint64_t)&v140 - v17;
  MEMORY[0x270FA5388](v18);
  uint64_t v151 = (uint64_t)&v140 - v19;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  MEMORY[0x270FA5388](v20 - 8);
  uint64_t v22 = (char *)&v140 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v168 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  unint64_t v170 = *(void *)(v168 - 8);
  MEMORY[0x270FA5388](v168);
  uint64_t v24 = (char *)&v140 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v25);
  uint64_t v27 = (char *)&v140 - v26;
  uint64_t v28 = type metadata accessor for AspireHeEncryptionParameters(0);
  int64_t v163 = *(void (***)(char *, uint64_t, uint64_t, uint64_t))(v28 - 8);
  MEMORY[0x270FA5388](v28);
  uint64_t v30 = (char *)&v140 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v31);
  uint64_t v33 = (char *)&v140 - v32;
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  MEMORY[0x270FA5388](v34 - 8);
  uint64_t v36 = (char *)&v140 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v37);
  size_t v39 = (char *)&v140 - v38;
  MEMORY[0x270FA5388](v40);
  uint64_t v42 = (char *)&v140 - v41;
  uint64_t v43 = v172;
  uint64_t result = static Task<>.checkCancellation()();
  if (!v43)
  {
    int64_t v148 = v27;
    uint64_t v146 = v22;
    int v143 = v36;
    uint64_t v144 = v24;
    uint64_t v145 = v30;
    uint64_t v147 = v33;
    uint64_t v172 = 0;
    uint64_t v45 = (uint64_t)v169 + *(int *)(v171 + 24);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v45, (uint64_t)v42, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
    unint64_t v46 = v170 + 48;
    unint64_t v47 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v170 + 48);
    uint64_t v48 = v168;
    unsigned int v49 = v47(v42, 1, v168);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v42, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
    if (v49 == 1)
    {
      if (one-time initialization token for daemon != -1) {
        swift_once();
      }
      uint64_t v50 = type metadata accessor for Logger();
      __swift_project_value_buffer(v50, (uint64_t)static Logger.daemon);
      size_t v51 = Logger.logObject.getter();
      os_log_type_t v52 = static os_log_type_t.error.getter();
      BOOL v53 = os_log_type_enabled(v51, v52);
      uint64_t v54 = v166;
      uint64_t v55 = v171;
      if (v53)
      {
        uint64_t v56 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v56 = 0;
        _os_log_impl(&dword_249C3F000, v51, v52, "Skipping key with empty key configuration", v56, 2u);
        MEMORY[0x24C5B4790](v56, -1, -1);
      }

      uint64_t v57 = 1;
      goto LABEL_8;
    }
    uint64_t v141 = v45;
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v45, (uint64_t)v39, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
    unint64_t v170 = v46;
    int v142 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v47;
    uint64_t v59 = v48;
    if (v47(v39, 1, v48) == 1)
    {
      unint64_t v60 = v148;
      *int64_t v148 = MEMORY[0x263F8EE78];
      *((unsigned char *)v60 + 8) = 0;
      UnknownStorage.init()();
      uint64_t v61 = (char *)v60 + *(int *)(v48 + 28);
      unint64_t v62 = v163;
      uint64_t v63 = v28;
      v163[7](v61, 1, 1, v28);
      uint64_t v64 = (uint64_t)v39;
      uint64_t v65 = v60;
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v64, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
      uint64_t v66 = v172;
      uint64_t v67 = (uint64_t)v147;
      uint64_t v68 = v165;
    }
    else
    {
      uint64_t v69 = (uint64_t)v39;
      uint64_t v65 = v148;
      _s8CipherML12UseCaseGroupVWObTm_1(v69, (uint64_t)v148, type metadata accessor for AspireHeEvaluationKeyConfig);
      uint64_t v66 = v172;
      uint64_t v67 = (uint64_t)v147;
      uint64_t v68 = v165;
      uint64_t v63 = v28;
      unint64_t v62 = v163;
    }
    uint64_t v70 = (uint64_t)v146;
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v65 + *(int *)(v59 + 28), (uint64_t)v146, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v62[6])(v70, 1, v63) == 1)
    {
      *(void *)uint64_t v67 = 0;
      *(void *)(v67 + 8) = 0;
      *(void *)(v67 + 16) = MEMORY[0x263F8EE78];
      *(void *)(v67 + 24) = 0;
      *(unsigned char *)(v67 + 32) = 1;
      *(void *)(v67 + 40) = 0;
      *(unsigned char *)(v67 + 48) = 1;
      *(void *)(v67 + 56) = 0;
      *(unsigned char *)(v67 + 64) = 1;
      UnknownStorage.init()();
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v70, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    }
    else
    {
      _s8CipherML12UseCaseGroupVWObTm_1(v70, v67, type metadata accessor for AspireHeEncryptionParameters);
    }
    _s8CipherML12UseCaseGroupVWOhTm_2((uint64_t)v148, type metadata accessor for AspireHeEvaluationKeyConfig);
    char v71 = AllowList.isAllowListed(group:encryptionParameters:)(v68, v67);
    if (v66) {
      return _s8CipherML12UseCaseGroupVWOhTm_2(v67, type metadata accessor for AspireHeEncryptionParameters);
    }
    if (v71)
    {
      uint64_t v72 = (uint64_t)v143;
      outlined init with copy of AMDPbHEConfig.OneOf_Config?(v141, (uint64_t)v143, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
      if (v142(v72, 1, v59) == 1)
      {
        uint64_t v73 = v144;
        *uint64_t v144 = MEMORY[0x263F8EE78];
        *((unsigned char *)v73 + 8) = 0;
        UnknownStorage.init()();
        v62[7]((char *)v73 + *(int *)(v59 + 28), 1, 1, v63);
        outlined destroy of AMDPbHEConfig.OneOf_Config?(v72, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
      }
      else
      {
        uint64_t v73 = v144;
        _s8CipherML12UseCaseGroupVWObTm_1(v72, (uint64_t)v144, type metadata accessor for AspireHeEvaluationKeyConfig);
      }
      uint64_t v81 = specialized Message.hash()();
      unint64_t v83 = v82;
      _s8CipherML12UseCaseGroupVWOhTm_2((uint64_t)v73, type metadata accessor for AspireHeEvaluationKeyConfig);
      uint64_t v84 = v162;
      if (specialized Sequence<>.contains(_:)((uint64_t)v81, v83, v160))
      {
        uint64_t v164 = &v84[*(int *)(type metadata accessor for UserIdentifier() + 24)];
        uint64_t v85 = *(void *)v164;
        uint64_t v86 = *(void *)(*(void *)v164 + 16);
        uint64_t v172 = 0;
        if (v86)
        {
          outlined copy of Data._Representation((uint64_t)v81, v83);
          uint64_t v87 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v81, v83);
          uint64_t v88 = v159;
          uint64_t v89 = v161;
          if (v90)
          {
            uint64_t v91 = *(void *)(v85 + 56) + v161[9] * v87;
            uint64_t v92 = v151;
            _s8CipherML12UseCaseGroupVWOcTm_1(v91, v151, (uint64_t (*)(void))type metadata accessor for SecretKey);
            uint64_t v93 = (void (**)(char *, uint64_t, uint64_t, uint64_t))v89[7];
            uint64_t v94 = v92;
            uint64_t v95 = 0;
          }
          else
          {
            uint64_t v93 = (void (**)(char *, uint64_t, uint64_t, uint64_t))v161[7];
            uint64_t v92 = v151;
            uint64_t v94 = v151;
            uint64_t v95 = 1;
          }
          int64_t v163 = v93;
          ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v93)(v94, v95, 1, v88);
          outlined consume of Data._Representation((uint64_t)v81, v83);
        }
        else
        {
          uint64_t v89 = v161;
          uint64_t v92 = v151;
          uint64_t v88 = v159;
          int64_t v163 = (void (**)(char *, uint64_t, uint64_t, uint64_t))v161[7];
          ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v163)(v151, 1, 1, v159);
        }
        uint64_t v168 = (uint64_t)v81;
        uint64_t v162 = (char *)v89[6];
        int v105 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v162)(v92, 1, v88);
        size_t v106 = v154;
        int v107 = v152;
        if (v105)
        {
          outlined destroy of AMDPbHEConfig.OneOf_Config?(v92, &demangling cache variable for type metadata for SecretKey?);
          uint64_t v108 = 0;
        }
        else
        {
          _s8CipherML12UseCaseGroupVWOcTm_1(v92, (uint64_t)v152, (uint64_t (*)(void))type metadata accessor for SecretKey);
          outlined destroy of AMDPbHEConfig.OneOf_Config?(v92, &demangling cache variable for type metadata for SecretKey?);
          uint64_t v108 = *v107;
          _s8CipherML12UseCaseGroupVWOhTm_2((uint64_t)v107, (uint64_t (*)(void))type metadata accessor for SecretKey);
        }
        if (one-time initialization token for daemon != -1) {
          swift_once();
        }
        unint64_t v170 = v83;
        uint64_t v109 = type metadata accessor for Logger();
        __swift_project_value_buffer(v109, (uint64_t)static Logger.daemon);
        _s8CipherML12UseCaseGroupVWOcTm_1((uint64_t)v169, (uint64_t)v106, type metadata accessor for AspireApiKeyStatus);
        uint64_t v110 = Logger.logObject.getter();
        os_log_type_t v111 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v110, v111))
        {
          uint64_t v112 = swift_slowAlloc();
          *(_DWORD *)uint64_t v112 = 134218240;
          uint64_t v113 = *v106;
          _s8CipherML12UseCaseGroupVWOhTm_2((uint64_t)v106, type metadata accessor for AspireApiKeyStatus);
          uint64_t v174 = v113;
          uint64_t v88 = v159;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v112 + 12) = 2048;
          uint64_t v174 = v108;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl(&dword_249C3F000, v110, v111, "keyStatus.timestamp = %llu, secretKey.timestamp = %llu", (uint8_t *)v112, 0x16u);
          uint64_t v114 = v112;
          uint64_t v89 = v161;
          MEMORY[0x24C5B4790](v114, -1, -1);
        }
        else
        {
          _s8CipherML12UseCaseGroupVWOhTm_2((uint64_t)v106, type metadata accessor for AspireApiKeyStatus);
        }
        uint64_t v116 = v157;
        uint64_t v115 = v158;
        int64_t v117 = v156;

        uint64_t v118 = *(void *)v164;
        if (!*(void *)(*(void *)v164 + 16))
        {
          uint64_t v124 = v155;
          ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v163)(v155, 1, 1, v88);
          goto LABEL_57;
        }
        uint64_t v119 = v168;
        uint64_t v120 = v170;
        outlined copy of Data._Representation(v168, v170);
        uint64_t v121 = specialized __RawDictionaryStorage.find<A>(_:)(v119, v120);
        if (v122)
        {
          uint64_t v123 = *(void *)(v118 + 56) + v89[9] * v121;
          uint64_t v124 = v155;
          _s8CipherML12UseCaseGroupVWOcTm_1(v123, v155, (uint64_t (*)(void))type metadata accessor for SecretKey);
          uint64_t v125 = 0;
        }
        else
        {
          uint64_t v125 = 1;
          uint64_t v124 = v155;
        }
        ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v163)(v124, v125, 1, v88);
        outlined consume of Data._Representation(v168, v170);
        if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v162)(v124, 1, v88) == 1)
        {
LABEL_57:
          outlined destroy of AMDPbHEConfig.OneOf_Config?(v124, &demangling cache variable for type metadata for SecretKey?);
          outlined copy of Data._Representation(v168, v170);
          Date.init()();
          Date.timeIntervalSince1970.getter();
          double v127 = v126;
          uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v116 + 8))(v117, v115);
          uint64_t v128 = v169;
          if ((~*(void *)&v127 & 0x7FF0000000000000) != 0)
          {
            uint64_t v58 = v167;
            uint64_t v129 = (uint64_t)v150;
            if (v127 > -1.0)
            {
              unint64_t v130 = v170;
              uint64_t v131 = v168;
              if (v127 < 1.84467441e19)
              {
                void *v150 = (unint64_t)v127;
                HE.SerializedSecretKey.init()();
                ((void (*)(uint64_t, void, uint64_t, uint64_t))v163)(v129, 0, 1, v88);
                specialized Dictionary.subscript.setter(v129, v131, v130);
                outlined consume of Data._Representation(v131, v130);
                _s8CipherML12UseCaseGroupVWOhTm_2((uint64_t)v147, type metadata accessor for AspireHeEncryptionParameters);
                uint64_t v54 = v166;
                _s8CipherML12UseCaseGroupVWOcTm_1((uint64_t)v128, v166, type metadata accessor for AspireApiKeyStatus);
                uint64_t v57 = 0;
                uint64_t v55 = v171;
                return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v58 + 56))(v54, v57, 1, v55);
              }
              goto LABEL_70;
            }
          }
          else
          {
            __break(1u);
          }
          __break(1u);
LABEL_70:
          __break(1u);
LABEL_71:
          __break(1u);
          goto LABEL_72;
        }
        int v132 = v149;
        _s8CipherML12UseCaseGroupVWObTm_1(v124, (uint64_t)v149, (uint64_t (*)(void))type metadata accessor for SecretKey);
        uint64_t v133 = type metadata accessor for UseCaseGroup();
        uint64_t v134 = v169;
        if ((*(unsigned char *)(v165 + *(int *)(v133 + 28)) & 1) != 0 || *v169 == *v132)
        {
          outlined consume of Data._Representation(v168, v170);
          _s8CipherML12UseCaseGroupVWOhTm_2((uint64_t)v132, (uint64_t (*)(void))type metadata accessor for SecretKey);
          _s8CipherML12UseCaseGroupVWOhTm_2((uint64_t)v147, type metadata accessor for AspireHeEncryptionParameters);
          uint64_t v57 = 1;
          uint64_t v54 = v166;
          uint64_t v58 = v167;
          uint64_t v55 = v171;
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v58 + 56))(v54, v57, 1, v55);
        }
        outlined copy of Data._Representation(v168, v170);
        Date.init()();
        Date.timeIntervalSince1970.getter();
        double v136 = v135;
        uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v116 + 8))(v117, v115);
        if ((~*(void *)&v136 & 0x7FF0000000000000) == 0) {
          goto LABEL_71;
        }
        uint64_t v137 = (uint64_t)v150;
        if (v136 <= -1.0)
        {
LABEL_72:
          __break(1u);
          goto LABEL_73;
        }
        unint64_t v138 = v170;
        uint64_t v139 = v168;
        if (v136 >= 1.84467441e19)
        {
LABEL_73:
          __break(1u);
          return result;
        }
        void *v150 = (unint64_t)v136;
        HE.SerializedSecretKey.init()();
        ((void (*)(uint64_t, void, uint64_t, uint64_t))v163)(v137, 0, 1, v88);
        specialized Dictionary.subscript.setter(v137, v139, v138);
        outlined consume of Data._Representation(v139, v138);
        _s8CipherML12UseCaseGroupVWOhTm_2((uint64_t)v132, (uint64_t (*)(void))type metadata accessor for SecretKey);
        _s8CipherML12UseCaseGroupVWOhTm_2((uint64_t)v147, type metadata accessor for AspireHeEncryptionParameters);
        uint64_t v54 = v166;
        _s8CipherML12UseCaseGroupVWOcTm_1((uint64_t)v134, v166, type metadata accessor for AspireApiKeyStatus);
        uint64_t v57 = 0;
LABEL_34:
        uint64_t v55 = v171;
LABEL_8:
        uint64_t v58 = v167;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v58 + 56))(v54, v57, 1, v55);
      }
      if (one-time initialization token for daemon != -1) {
        swift_once();
      }
      uint64_t v97 = type metadata accessor for Logger();
      __swift_project_value_buffer(v97, (uint64_t)static Logger.daemon);
      uint64_t v98 = v153;
      _s8CipherML12UseCaseGroupVWOcTm_1((uint64_t)v169, v153, type metadata accessor for AspireApiKeyStatus);
      uint64_t v99 = Logger.logObject.getter();
      os_log_type_t v100 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v99, v100))
      {
        uint64_t v101 = (uint8_t *)swift_slowAlloc();
        uint64_t v102 = swift_slowAlloc();
        unint64_t v170 = v83;
        uint64_t v103 = v102;
        uint64_t v174 = v102;
        *(_DWORD *)uint64_t v101 = 136446210;
        uint64_t v169 = v101 + 4;
        _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_9(&lazy protocol witness table cache variable for type AspireApiKeyStatus and conformance AspireApiKeyStatus, 255, (void (*)(uint64_t))type metadata accessor for AspireApiKeyStatus);
        uint64_t v168 = (uint64_t)v81;
        uint64_t v55 = v171;
        Swift::String v104 = Message.textFormatString()();
        uint64_t v173 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v104._countAndFlagsBits, (unint64_t)v104._object, &v174);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _s8CipherML12UseCaseGroupVWOhTm_2(v98, type metadata accessor for AspireApiKeyStatus);
        _os_log_impl(&dword_249C3F000, v99, v100, "Skipping non-active key: %{public}s", v101, 0xCu);
        uint64_t v57 = 1;
        swift_arrayDestroy();
        MEMORY[0x24C5B4790](v103, -1, -1);
        MEMORY[0x24C5B4790](v101, -1, -1);

        outlined consume of Data._Representation(v168, v170);
        _s8CipherML12UseCaseGroupVWOhTm_2((uint64_t)v147, type metadata accessor for AspireHeEncryptionParameters);
        uint64_t v54 = v166;
        uint64_t v58 = v167;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v58 + 56))(v54, v57, 1, v55);
      }

      outlined consume of Data._Representation((uint64_t)v81, v83);
      _s8CipherML12UseCaseGroupVWOhTm_2(v98, type metadata accessor for AspireApiKeyStatus);
      uint64_t v96 = v67;
    }
    else
    {
      if (one-time initialization token for daemon != -1) {
        swift_once();
      }
      uint64_t v74 = type metadata accessor for Logger();
      __swift_project_value_buffer(v74, (uint64_t)static Logger.daemon);
      uint64_t v75 = (uint64_t)v145;
      _s8CipherML12UseCaseGroupVWOcTm_1(v67, (uint64_t)v145, type metadata accessor for AspireHeEncryptionParameters);
      uint64_t v76 = Logger.logObject.getter();
      os_log_type_t v77 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v76, v77))
      {
        uint64_t v78 = (uint8_t *)swift_slowAlloc();
        uint64_t v172 = swift_slowAlloc();
        uint64_t v174 = v172;
        *(_DWORD *)uint64_t v78 = 136446210;
        _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_9((unint64_t *)&lazy protocol witness table cache variable for type AspireHeEncryptionParameters and conformance AspireHeEncryptionParameters, 255, (void (*)(uint64_t))type metadata accessor for AspireHeEncryptionParameters);
        Swift::String v79 = Message.textFormatString()();
        uint64_t v173 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v79._countAndFlagsBits, (unint64_t)v79._object, &v174);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _s8CipherML12UseCaseGroupVWOhTm_2(v75, type metadata accessor for AspireHeEncryptionParameters);
        _os_log_impl(&dword_249C3F000, v76, v77, "Skipping key with invalid encryption parameters: '%{public}s'", v78, 0xCu);
        uint64_t v80 = v172;
        swift_arrayDestroy();
        MEMORY[0x24C5B4790](v80, -1, -1);
        MEMORY[0x24C5B4790](v78, -1, -1);

        _s8CipherML12UseCaseGroupVWOhTm_2(v67, type metadata accessor for AspireHeEncryptionParameters);
        uint64_t v57 = 1;
LABEL_33:
        uint64_t v54 = v166;
        goto LABEL_34;
      }

      _s8CipherML12UseCaseGroupVWOhTm_2(v75, type metadata accessor for AspireHeEncryptionParameters);
      uint64_t v96 = v67;
    }
    _s8CipherML12UseCaseGroupVWOhTm_2(v96, type metadata accessor for AspireHeEncryptionParameters);
    uint64_t v57 = 1;
    goto LABEL_33;
  }
  return result;
}

uint64_t KeyRotation.uploadKeys(userId:keyStatusesToUpload:networkManagerConfig:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[77] = v3;
  v4[76] = a3;
  v4[75] = a2;
  v4[74] = a1;
  v4[78] = type metadata accessor for AspireApiEvaluationKeys(0);
  v4[79] = swift_task_alloc();
  type metadata accessor for AspireApiEvaluationKey(0);
  v4[80] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecretKey?);
  v4[81] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for SecretKey();
  v4[82] = v5;
  v4[83] = *(void *)(v5 - 8);
  v4[84] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  v4[85] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  v4[86] = v6;
  v4[87] = *(void *)(v6 - 8);
  v4[88] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for AspireApiKeyStatus(0);
  v4[89] = v7;
  v4[90] = *(void *)(v7 - 8);
  v4[91] = swift_task_alloc();
  return MEMORY[0x270FA2498](KeyRotation.uploadKeys(userId:keyStatusesToUpload:networkManagerConfig:), v3, 0);
}

uint64_t KeyRotation.uploadKeys(userId:keyStatusesToUpload:networkManagerConfig:)()
{
  uint64_t v53 = v0;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  (*(void (**)(void))(*(void *)static NetworkManagerHelper.shared + 96))(*(void *)(v0 + 608));
  if (*(void *)(v0 + 80))
  {
    uint64_t v1 = *(void *)(v0 + 616);
    uint64_t v2 = *(void *)(v0 + 600);
    outlined init with take of _HasContiguousBytes((long long *)(v0 + 56), v0 + 16);
    size_t v51 = (void *)(v0 + 16);
    outlined init with copy of NetworkManager(v0 + 16, v0 + 136);
    outlined init with take of SymmetricPirClientConfig?(v0 + 136, v0 + 176, &demangling cache variable for type metadata for NetworkManager?);
    swift_beginAccess();
    outlined assign with take of NetworkManager?(v0 + 176, v1 + 192);
    swift_endAccess();
    uint64_t v3 = *(void *)(v2 + 16);
    *(void *)(v0 + 736) = v3;
    if (v3)
    {
      uint64_t v4 = *(void *)(v0 + 720);
      *(_DWORD *)(v0 + 792) = *(_DWORD *)(v4 + 80);
      *(void *)(v0 + 744) = *(void *)(v4 + 72);
      swift_bridgeObjectRetain();
      uint64_t v5 = 0;
      while (1)
      {
        *(void *)(v0 + 752) = v5;
        _s8CipherML12UseCaseGroupVWOcTm_1(*(void *)(v0 + 600)+ ((*(unsigned __int8 *)(v0 + 792) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 792))+ *(void *)(v0 + 744) * v5, *(void *)(v0 + 728), type metadata accessor for AspireApiKeyStatus);
        static Task<>.checkCancellation()();
        uint64_t v9 = *(void *)(v0 + 696);
        uint64_t v10 = *(void *)(v0 + 688);
        uint64_t v11 = *(void *)(v0 + 680);
        outlined init with copy of AMDPbHEConfig.OneOf_Config?(*(void *)(v0 + 728) + *(int *)(*(void *)(v0 + 712) + 24), v11, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
        int v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v11, 1, v10);
        uint64_t v13 = *(void *)(v0 + 704);
        if (v12 == 1)
        {
          uint64_t v14 = *(void *)(v0 + 688);
          uint64_t v15 = *(void *)(v0 + 680);
          *(void *)uint64_t v13 = MEMORY[0x263F8EE78];
          *(unsigned char *)(v13 + 8) = 0;
          UnknownStorage.init()();
          uint64_t v16 = v13 + *(int *)(v14 + 28);
          uint64_t v17 = type metadata accessor for AspireHeEncryptionParameters(0);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v16, 1, 1, v17);
          outlined destroy of AMDPbHEConfig.OneOf_Config?(v15, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
        }
        else
        {
          _s8CipherML12UseCaseGroupVWObTm_1(*(void *)(v0 + 680), *(void *)(v0 + 704), type metadata accessor for AspireHeEvaluationKeyConfig);
        }
        uint64_t v18 = specialized Message.hash()();
        *(void *)(v0 + 760) = v18;
        *(void *)(v0 + 768) = v19;
        uint64_t v20 = (uint64_t)v18;
        unint64_t v21 = v19;
        uint64_t v22 = *(void *)(v0 + 592);
        uint64_t v23 = type metadata accessor for UserIdentifier();
        uint64_t v24 = *(void *)(v22 + *(int *)(v23 + 24));
        if (*(void *)(v24 + 16))
        {
          uint64_t v25 = v23;
          outlined copy of Data._Representation(v20, v21);
          uint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v21);
          if (v27)
          {
            _s8CipherML12UseCaseGroupVWOcTm_1(*(void *)(v24 + 56) + *(void *)(*(void *)(v0 + 664) + 72) * v26, *(void *)(v0 + 648), (uint64_t (*)(void))type metadata accessor for SecretKey);
            uint64_t v28 = 0;
          }
          else
          {
            uint64_t v28 = 1;
          }
          uint64_t v29 = *(void *)(v0 + 664);
          uint64_t v30 = *(void *)(v0 + 656);
          uint64_t v31 = *(void *)(v0 + 648);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 56))(v31, v28, 1, v30);
          outlined consume of Data._Representation(v20, v21);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v29 + 48))(v31, 1, v30) != 1)
          {
            uint64_t v32 = *(void *)(v0 + 704);
            uint64_t v33 = *(void *)(v0 + 672);
            uint64_t v34 = *(void *)(v0 + 640);
            _s8CipherML12UseCaseGroupVWObTm_1(*(void *)(v0 + 648), v33, (uint64_t (*)(void))type metadata accessor for SecretKey);
            generateEvaluationKey(secretKey:config:)(v33, v32, v34);
            uint64_t v43 = *(void *)(v0 + 640);
            *(void *)(swift_task_alloc() + 16) = v43;
            _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_9(&lazy protocol witness table cache variable for type AspireApiEvaluationKeys and conformance AspireApiEvaluationKeys, 255, (void (*)(uint64_t))type metadata accessor for AspireApiEvaluationKeys);
            static Message.with(_:)();
            swift_task_dealloc();
            static Task<>.checkCancellation()();
            uint64_t v44 = *(void *)(v0 + 592);
            uint64_t v45 = *(void *)(v0 + 40);
            uint64_t v46 = *(void *)(v0 + 48);
            __swift_project_boxed_opaque_existential_1(v51, v45);
            uint64_t v50 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v46 + 24)
                                                                             + **(int **)(v46 + 24));
            uint64_t v47 = v44 + *(int *)(v25 + 20);
            uint64_t v48 = (void *)swift_task_alloc();
            *(void *)(v0 + 776) = v48;
            *uint64_t v48 = v0;
            v48[1] = KeyRotation.uploadKeys(userId:keyStatusesToUpload:networkManagerConfig:);
            uint64_t v49 = *(void *)(v0 + 632);
            return v50(v49, v47, v45, v46);
          }
        }
        else
        {
          (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 664) + 56))(*(void *)(v0 + 648), 1, 1, *(void *)(v0 + 656));
        }
        uint64_t v6 = *(void *)(v0 + 728);
        uint64_t v7 = *(void *)(v0 + 704);
        uint64_t v8 = *(void *)(v0 + 648);
        outlined consume of Data._Representation(v20, v21);
        _s8CipherML12UseCaseGroupVWOhTm_2(v7, type metadata accessor for AspireHeEvaluationKeyConfig);
        _s8CipherML12UseCaseGroupVWOhTm_2(v6, type metadata accessor for AspireApiKeyStatus);
        outlined destroy of AMDPbHEConfig.OneOf_Config?(v8, &demangling cache variable for type metadata for SecretKey?);
        uint64_t v5 = *(void *)(v0 + 752) + 1;
        if (v5 == *(void *)(v0 + 736))
        {
          swift_bridgeObjectRelease();
          break;
        }
      }
    }
    uint64_t v41 = *(void *)(v0 + 616) + 192;
    *(void *)(v0 + 408) = 0;
    *(_OWORD *)(v0 + 376) = 0u;
    *(_OWORD *)(v0 + 392) = 0u;
    swift_beginAccess();
    outlined assign with take of NetworkManager?(v0 + 376, v41);
    swift_endAccess();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v51);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v40 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v0 + 56, &demangling cache variable for type metadata for NetworkManager?);
    if (one-time initialization token for daemon != -1) {
      swift_once();
    }
    uint64_t v35 = type metadata accessor for Logger();
    __swift_project_value_buffer(v35, (uint64_t)static Logger.daemon);
    uint64_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v38 = (uint8_t *)swift_slowAlloc();
      uint64_t v39 = swift_slowAlloc();
      uint64_t v52 = v39;
      *(_DWORD *)uint64_t v38 = 136315138;
      *(void *)(v0 + 584) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000003CLL, 0x8000000249E97BB0, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_249C3F000, v36, v37, "%s called with offline network manager", v38, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C5B4790](v39, -1, -1);
      MEMORY[0x24C5B4790](v38, -1, -1);
    }

    type metadata accessor for CipherMLError();
    _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_9((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, 255, (void (*)(uint64_t))type metadata accessor for CipherMLError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v40 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v40();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *v1;
  *(void *)(v2 + 784) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 616);
  if (v0)
  {
    swift_bridgeObjectRelease();
    uint64_t v4 = KeyRotation.uploadKeys(userId:keyStatusesToUpload:networkManagerConfig:);
  }
  else
  {
    uint64_t v4 = KeyRotation.uploadKeys(userId:keyStatusesToUpload:networkManagerConfig:);
  }
  return MEMORY[0x270FA2498](v4, v3, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  _OWORD *v49;
  uint64_t (*v50)(uint64_t, uint64_t, uint64_t, uint64_t);
  void *v51;
  uint64_t v52;

  size_t v51 = (void *)(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 728);
  uint64_t v2 = *(void *)(v0 + 704);
  uint64_t v3 = *(void *)(v0 + 672);
  uint64_t v4 = *(void *)(v0 + 640);
  uint64_t v5 = *(void *)(v0 + 632);
  outlined consume of Data._Representation(*(void *)(v0 + 760), *(void *)(v0 + 768));
  _s8CipherML12UseCaseGroupVWOhTm_2(v5, type metadata accessor for AspireApiEvaluationKeys);
  _s8CipherML12UseCaseGroupVWOhTm_2(v3, (uint64_t (*)(void))type metadata accessor for SecretKey);
  _s8CipherML12UseCaseGroupVWOhTm_2(v2, type metadata accessor for AspireHeEvaluationKeyConfig);
  _s8CipherML12UseCaseGroupVWOhTm_2(v1, type metadata accessor for AspireApiKeyStatus);
  _s8CipherML12UseCaseGroupVWOhTm_2(v4, type metadata accessor for AspireApiEvaluationKey);
  uint64_t v6 = *(void *)(v0 + 752) + 1;
  if (v6 != *(void *)(v0 + 736))
  {
    uint64_t v49 = (_OWORD *)(v0 + 256);
    uint64_t v9 = *(void *)(v0 + 784);
    do
    {
      *(void *)(v0 + 752) = v6;
      _s8CipherML12UseCaseGroupVWOcTm_1(*(void *)(v0 + 600)+ ((*(unsigned __int8 *)(v0 + 792) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 792))+ *(void *)(v0 + 744) * v6, *(void *)(v0 + 728), type metadata accessor for AspireApiKeyStatus);
      static Task<>.checkCancellation()();
      uint64_t v13 = *(void *)(v0 + 728);
      if (v9)
      {
        uint64_t v40 = *(void *)(v0 + 616) + 192;
        _s8CipherML12UseCaseGroupVWOhTm_2(v13, type metadata accessor for AspireApiKeyStatus);
        swift_bridgeObjectRelease();
        *(void *)(v0 + 288) = 0;
        *uint64_t v49 = 0u;
        *(_OWORD *)(v0 + 272) = 0u;
        swift_beginAccess();
        outlined assign with take of NetworkManager?((uint64_t)v49, v40);
        swift_endAccess();
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v51);
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
        goto LABEL_17;
      }
      uint64_t v14 = *(void *)(v0 + 696);
      uint64_t v15 = *(void *)(v0 + 688);
      uint64_t v16 = *(void *)(v0 + 680);
      outlined init with copy of AMDPbHEConfig.OneOf_Config?(v13 + *(int *)(*(void *)(v0 + 712) + 24), v16, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
      uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v16, 1, v15);
      uint64_t v18 = *(void *)(v0 + 704);
      if (v17 == 1)
      {
        unint64_t v19 = *(void *)(v0 + 688);
        uint64_t v20 = *(void *)(v0 + 680);
        *(void *)uint64_t v18 = MEMORY[0x263F8EE78];
        *(unsigned char *)(v18 + 8) = 0;
        UnknownStorage.init()();
        unint64_t v21 = v18 + *(int *)(v19 + 28);
        uint64_t v22 = type metadata accessor for AspireHeEncryptionParameters(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v21, 1, 1, v22);
        outlined destroy of AMDPbHEConfig.OneOf_Config?(v20, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
      }
      else
      {
        _s8CipherML12UseCaseGroupVWObTm_1(*(void *)(v0 + 680), *(void *)(v0 + 704), type metadata accessor for AspireHeEvaluationKeyConfig);
      }
      uint64_t v23 = specialized Message.hash()();
      *(void *)(v0 + 760) = v23;
      *(void *)(v0 + 768) = v24;
      uint64_t v25 = (uint64_t)v23;
      uint64_t v26 = v24;
      char v27 = *(void *)(v0 + 592);
      uint64_t v28 = type metadata accessor for UserIdentifier();
      uint64_t v29 = *(void *)(v27 + *(int *)(v28 + 24));
      if (*(void *)(v29 + 16))
      {
        uint64_t v30 = v28;
        outlined copy of Data._Representation(v25, v26);
        uint64_t v31 = specialized __RawDictionaryStorage.find<A>(_:)(v25, v26);
        if (v32)
        {
          _s8CipherML12UseCaseGroupVWOcTm_1(*(void *)(v29 + 56) + *(void *)(*(void *)(v0 + 664) + 72) * v31, *(void *)(v0 + 648), (uint64_t (*)(void))type metadata accessor for SecretKey);
          uint64_t v33 = 0;
        }
        else
        {
          uint64_t v33 = 1;
        }
        uint64_t v34 = *(void *)(v0 + 664);
        uint64_t v35 = *(void *)(v0 + 656);
        uint64_t v36 = *(void *)(v0 + 648);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v34 + 56))(v36, v33, 1, v35);
        outlined consume of Data._Representation(v25, v26);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48))(v36, 1, v35) != 1)
        {
          os_log_type_t v37 = *(void *)(v0 + 704);
          uint64_t v38 = *(void *)(v0 + 672);
          uint64_t v39 = *(void *)(v0 + 640);
          _s8CipherML12UseCaseGroupVWObTm_1(*(void *)(v0 + 648), v38, (uint64_t (*)(void))type metadata accessor for SecretKey);
          generateEvaluationKey(secretKey:config:)(v38, v37, v39);
          uint64_t v42 = *(void *)(v0 + 640);
          *(void *)(swift_task_alloc() + 16) = v42;
          _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_9(&lazy protocol witness table cache variable for type AspireApiEvaluationKeys and conformance AspireApiEvaluationKeys, 255, (void (*)(uint64_t))type metadata accessor for AspireApiEvaluationKeys);
          static Message.with(_:)();
          swift_task_dealloc();
          static Task<>.checkCancellation()();
          uint64_t v43 = *(void *)(v0 + 592);
          uint64_t v44 = *(void *)(v0 + 40);
          uint64_t v45 = *(void *)(v0 + 48);
          __swift_project_boxed_opaque_existential_1(v51, v44);
          uint64_t v50 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v45 + 24) + **(int **)(v45 + 24));
          uint64_t v46 = v43 + *(int *)(v30 + 20);
          uint64_t v47 = (void *)swift_task_alloc();
          *(void *)(v0 + 776) = v47;
          char *v47 = v0;
          v47[1] = KeyRotation.uploadKeys(userId:keyStatusesToUpload:networkManagerConfig:);
          uint64_t v48 = *(void *)(v0 + 632);
          return v50(v48, v46, v44, v45);
        }
      }
      else
      {
        (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 664) + 56))(*(void *)(v0 + 648), 1, 1, *(void *)(v0 + 656));
      }
      uint64_t v10 = *(void *)(v0 + 728);
      uint64_t v11 = *(void *)(v0 + 704);
      int v12 = *(void *)(v0 + 648);
      outlined consume of Data._Representation(v25, v26);
      _s8CipherML12UseCaseGroupVWOhTm_2(v11, type metadata accessor for AspireHeEvaluationKeyConfig);
      _s8CipherML12UseCaseGroupVWOhTm_2(v10, type metadata accessor for AspireApiKeyStatus);
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v12, &demangling cache variable for type metadata for SecretKey?);
      uint64_t v9 = 0;
      uint64_t v6 = *(void *)(v0 + 752) + 1;
    }
    while (v6 != *(void *)(v0 + 736));
  }
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(v0 + 616) + 192;
  *(_OWORD *)(v0 + 376) = 0u;
  *(_OWORD *)(v0 + 392) = 0u;
  *(void *)(v0 + 408) = 0;
  swift_beginAccess();
  outlined assign with take of NetworkManager?(v0 + 376, v7);
  swift_endAccess();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v51);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
LABEL_17:
  return v8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  uint64_t v1 = *(void *)(v0 + 728);
  uint64_t v2 = *(void *)(v0 + 704);
  uint64_t v3 = *(void *)(v0 + 672);
  uint64_t v4 = *(void *)(v0 + 640);
  uint64_t v5 = *(void *)(v0 + 632);
  uint64_t v6 = *(void *)(v0 + 616) + 192;
  outlined consume of Data._Representation(*(void *)(v0 + 760), *(void *)(v0 + 768));
  _s8CipherML12UseCaseGroupVWOhTm_2(v5, type metadata accessor for AspireApiEvaluationKeys);
  _s8CipherML12UseCaseGroupVWOhTm_2(v3, (uint64_t (*)(void))type metadata accessor for SecretKey);
  _s8CipherML12UseCaseGroupVWOhTm_2(v2, type metadata accessor for AspireHeEvaluationKeyConfig);
  _s8CipherML12UseCaseGroupVWOhTm_2(v1, type metadata accessor for AspireApiKeyStatus);
  _s8CipherML12UseCaseGroupVWOhTm_2(v4, type metadata accessor for AspireApiEvaluationKey);
  *(_OWORD *)(v0 + 112) = 0u;
  *(void *)(v0 + 128) = 0;
  *(_OWORD *)(v0 + 96) = 0u;
  swift_beginAccess();
  outlined assign with take of NetworkManager?(v0 + 96, v6);
  swift_endAccess();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t closure #1 in KeyRotation.uploadKeys(userId:keyStatusesToUpload:networkManagerConfig:)(uint64_t *a1, uint64_t a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AspireApiEvaluationKey>);
  uint64_t v4 = *(void *)(type metadata accessor for AspireApiEvaluationKey(0) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_249E85E40;
  _s8CipherML12UseCaseGroupVWOcTm_1(a2, v6 + v5, type metadata accessor for AspireApiEvaluationKey);
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v6;
  return result;
}

uint64_t KeyRotation.rotateKeys(groupName:userId:keyStatuses:activeUseCases:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[13] = a6;
  v7[14] = v6;
  v7[11] = a4;
  v7[12] = a5;
  v7[9] = a2;
  v7[10] = a3;
  v7[8] = a1;
  v7[15] = type metadata accessor for NetworkManagerConfig(0);
  v7[16] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UseCaseGroup?);
  v7[17] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for UseCaseGroup();
  v7[18] = v8;
  v7[19] = *(void *)(v8 - 8);
  v7[20] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for UserIdentifier();
  v7[21] = v9;
  v7[22] = *(void *)(v9 - 8);
  v7[23] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserIdentifier?);
  v7[24] = swift_task_alloc();
  v7[25] = swift_task_alloc();
  return MEMORY[0x270FA2498](KeyRotation.rotateKeys(groupName:userId:keyStatuses:activeUseCases:), v6, 0);
}

uint64_t KeyRotation.rotateKeys(groupName:userId:keyStatuses:activeUseCases:)()
{
  uint64_t v2 = v0[12];
  uint64_t v1 = v0[13];
  uint64_t v4 = v0[9];
  uint64_t v3 = v0[10];
  unint64_t v5 = (void *)MEMORY[0x24C5B33F0](0xD000000000000021, 0x8000000249E94C30);
  uint64_t v6 = (void *)swift_allocObject();
  v6[2] = v4;
  v6[3] = v3;
  v6[4] = v2;
  v6[5] = v1;
  v0[6] = partial apply for closure #1 in static Telemetry.reportKeyRotationEvent(groupName:keyStatuses:activeUseCases:);
  v0[7] = v6;
  v0[2] = MEMORY[0x263EF8330];
  v0[3] = 1107296256;
  v0[4] = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
  v0[5] = &block_descriptor_5;
  uint64_t v7 = _Block_copy(v0 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v7);

  uint64_t v8 = (void *)swift_task_alloc();
  v0[26] = v8;
  *uint64_t v8 = v0;
  v8[1] = KeyRotation.rotateKeys(groupName:userId:keyStatuses:activeUseCases:);
  uint64_t v9 = v0[25];
  uint64_t v10 = v0[13];
  uint64_t v11 = v0[11];
  uint64_t v12 = v0[12];
  uint64_t v13 = v0[9];
  uint64_t v14 = v0[10];
  return KeyRotation.collectKeyStatusesToUpload(groupName:userId:keyStatuses:activeUseCases:)(v9, v13, v14, v11, v12, v10);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  uint64_t v1 = v0[25];
  if (!*(void *)(v0[27] + 16))
  {
    uint64_t v6 = v0[21];
    uint64_t v7 = v0[22];
    uint64_t v8 = v0[8];
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v1, &demangling cache variable for type metadata for UserIdentifier?);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(v8, 1, 1, v6);
    goto LABEL_5;
  }
  uint64_t v2 = v0[24];
  uint64_t v3 = v0[21];
  uint64_t v4 = v0[22];
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1, v2, &demangling cache variable for type metadata for UserIdentifier?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    unint64_t v5 = v0[24];
    swift_bridgeObjectRelease();
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v5, &demangling cache variable for type metadata for UserIdentifier?);
    outlined init with take of SymmetricPirClientConfig?(v0[25], v0[8], &demangling cache variable for type metadata for UserIdentifier?);
LABEL_5:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = (uint64_t (*)(void))v0[1];
LABEL_13:
    return v9();
  }
  uint64_t v10 = v0[14];
  _s8CipherML12UseCaseGroupVWObTm_1(v0[24], v0[23], (uint64_t (*)(void))type metadata accessor for UserIdentifier);
  uint64_t v11 = *(void *)(*(void *)(v10 + 136) + 32);
  if (!*(void *)(v11 + 16))
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(v0[19] + 56))(v0[17], 1, 1, v0[18]);
LABEL_12:
    uint64_t v20 = v0[25];
    unint64_t v21 = v0[23];
    uint64_t v22 = v0[17];
    uint64_t v24 = v0[9];
    uint64_t v23 = v0[10];
    swift_bridgeObjectRelease();
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v22, &demangling cache variable for type metadata for UseCaseGroup?);
    type metadata accessor for CipherMLError();
    _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_9((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, 255, (void (*)(uint64_t))type metadata accessor for CipherMLError);
    swift_allocError();
    *uint64_t v25 = v24;
    v25[1] = v23;
    swift_storeEnumTagMultiPayload();
    swift_bridgeObjectRetain();
    swift_willThrow();
    _s8CipherML12UseCaseGroupVWOhTm_2(v21, (uint64_t (*)(void))type metadata accessor for UserIdentifier);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v20, &demangling cache variable for type metadata for UserIdentifier?);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = (uint64_t (*)(void))v0[1];
    goto LABEL_13;
  }
  uint64_t v13 = v0[9];
  uint64_t v12 = v0[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(v13, v12);
  if (v15)
  {
    _s8CipherML12UseCaseGroupVWOcTm_1(*(void *)(v11 + 56) + *(void *)(v0[19] + 72) * v14, v0[17], (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
    uint64_t v16 = 0;
  }
  else
  {
    uint64_t v16 = 1;
  }
  uint64_t v17 = v0[18];
  uint64_t v18 = v0[19];
  unint64_t v19 = v0[17];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56))(v19, v16, 1, v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v19, 1, v17) == 1) {
    goto LABEL_12;
  }
  char v27 = v0[20];
  uint64_t v28 = v0[18];
  uint64_t v30 = v0[15];
  uint64_t v29 = v0[16];
  uint64_t v31 = v0[14];
  _s8CipherML12UseCaseGroupVWObTm_1(v0[17], v27, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
  _s8CipherML12UseCaseGroupVWOcTm_1(v27 + *(int *)(v28 + 36), v29, type metadata accessor for NetworkConfig);
  uint64_t v32 = *(void *)(v31 + 176);
  uint64_t v33 = (void *)(v29 + *(int *)(v30 + 20));
  char *v33 = *(void *)(v31 + 168);
  v33[1] = v32;
  swift_bridgeObjectRetain();
  uint64_t v34 = (void *)swift_task_alloc();
  v0[29] = v34;
  *uint64_t v34 = v0;
  v34[1] = KeyRotation.rotateKeys(groupName:userId:keyStatuses:activeUseCases:);
  uint64_t v35 = v0[27];
  uint64_t v36 = v0[23];
  os_log_type_t v37 = v0[16];
  return KeyRotation.uploadKeys(userId:keyStatusesToUpload:networkManagerConfig:)(v36, v35, v37);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 240) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 112);
  swift_bridgeObjectRelease();
  if (v0) {
    uint64_t v4 = KeyRotation.rotateKeys(groupName:userId:keyStatuses:activeUseCases:);
  }
  else {
    uint64_t v4 = KeyRotation.rotateKeys(groupName:userId:keyStatuses:activeUseCases:);
  }
  return MEMORY[0x270FA2498](v4, v3, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v1 = v0[23];
  uint64_t v2 = v0[20];
  _s8CipherML12UseCaseGroupVWOhTm_2(v0[16], type metadata accessor for NetworkManagerConfig);
  _s8CipherML12UseCaseGroupVWOhTm_2(v2, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
  _s8CipherML12UseCaseGroupVWOhTm_2(v1, (uint64_t (*)(void))type metadata accessor for UserIdentifier);
  outlined init with take of SymmetricPirClientConfig?(v0[25], v0[8], &demangling cache variable for type metadata for UserIdentifier?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = v0[25];
  uint64_t v2 = v0[23];
  uint64_t v3 = v0[20];
  _s8CipherML12UseCaseGroupVWOhTm_2(v0[16], type metadata accessor for NetworkManagerConfig);
  _s8CipherML12UseCaseGroupVWOhTm_2(v3, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
  _s8CipherML12UseCaseGroupVWOhTm_2(v2, (uint64_t (*)(void))type metadata accessor for UserIdentifier);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v1, &demangling cache variable for type metadata for UserIdentifier?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t KeyRotation.rotateKeys(groupName:userId:keyStatuses:activeUseCases:)(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(v4 + 216) = a1;
  *(void *)(v4 + 224) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v3 + 112);
  if (v1) {
    uint64_t v6 = KeyRotation.rotateKeys(groupName:userId:keyStatuses:activeUseCases:);
  }
  else {
    uint64_t v6 = KeyRotation.rotateKeys(groupName:userId:keyStatuses:activeUseCases:);
  }
  return MEMORY[0x270FA2498](v6, v5, 0);
}

uint64_t KeyRotation.rotateGroup(groupName:activeUseCases:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[26] = a3;
  v4[27] = v3;
  v4[24] = a1;
  v4[25] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserIdentifier?);
  v4[28] = swift_task_alloc();
  v4[29] = swift_task_alloc();
  v4[30] = type metadata accessor for NetworkManagerConfig(0);
  v4[31] = swift_task_alloc();
  type metadata accessor for AspireApiConfigResponse(0);
  v4[32] = swift_task_alloc();
  v4[33] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for UserIdentifier();
  v4[34] = v5;
  v4[35] = *(void *)(v5 - 8);
  v4[36] = swift_task_alloc();
  v4[37] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UseCaseGroup?);
  v4[38] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for UseCaseGroup();
  v4[39] = v6;
  v4[40] = *(void *)(v6 - 8);
  v4[41] = swift_task_alloc();
  return MEMORY[0x270FA2498](KeyRotation.rotateGroup(groupName:activeUseCases:), v3, 0);
}

uint64_t KeyRotation.rotateGroup(groupName:activeUseCases:)()
{
  uint64_t v25 = v0;
  uint64_t v1 = *(void *)(*(void *)(v0[27] + 136) + 32);
  if (!*(void *)(v1 + 16))
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(v0[40] + 56))(v0[38], 1, 1, v0[39]);
LABEL_7:
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v0[38], &demangling cache variable for type metadata for UseCaseGroup?);
    if (one-time initialization token for daemon != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Logger.daemon);
    swift_bridgeObjectRetain_n();
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    BOOL v13 = os_log_type_enabled(v11, v12);
    unint64_t v14 = v0[25];
    if (v13)
    {
      uint64_t v15 = v0[24];
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      uint64_t v24 = v17;
      *(_DWORD *)uint64_t v16 = 136446210;
      swift_bridgeObjectRetain();
      v0[20] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v14, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_249C3F000, v11, v12, "RotationTask: did not find group '%{public}s'", v16, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C5B4790](v17, -1, -1);
      MEMORY[0x24C5B4790](v16, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v18 = (uint64_t (*)(void))v0[1];
    return v18();
  }
  uint64_t v3 = v0[24];
  uint64_t v2 = v0[25];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(v3, v2);
  if (v5)
  {
    _s8CipherML12UseCaseGroupVWOcTm_1(*(void *)(v1 + 56) + *(void *)(v0[40] + 72) * v4, v0[38], (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v6 = 1;
  }
  uint64_t v7 = v0[39];
  uint64_t v8 = v0[40];
  uint64_t v9 = v0[38];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(v9, v6, 1, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v9, 1, v7) == 1) {
    goto LABEL_7;
  }
  _s8CipherML12UseCaseGroupVWObTm_1(v0[38], v0[41], (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
  uint64_t v20 = (void *)swift_task_alloc();
  v0[42] = v20;
  *uint64_t v20 = v0;
  v20[1] = KeyRotation.rotateGroup(groupName:activeUseCases:);
  uint64_t v21 = v0[37];
  uint64_t v22 = v0[24];
  uint64_t v23 = v0[25];
  return KeyRotation.rotateUserId(groupName:)(v21, v22, v23);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 344) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 216);
  if (v0) {
    uint64_t v4 = KeyRotation.rotateGroup(groupName:activeUseCases:);
  }
  else {
    uint64_t v4 = KeyRotation.rotateGroup(groupName:activeUseCases:);
  }
  return MEMORY[0x270FA2498](v4, v3, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t (*v17)(void);
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  BOOL v21;
  unint64_t v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  uint64_t v30 = v0;
  uint64_t v1 = *(void *)(v0 + 208);
  swift_bridgeObjectRetain();
  uint64_t v2 = swift_bridgeObjectRetain();
  uint64_t v3 = specialized _NativeSet.genericIntersection<A>(_:)(v2, v1, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))specialized closure #1 in _NativeSet.genericIntersection<A>(_:));
  swift_bridgeObjectRelease();
  uint64_t v4 = specialized _copyCollectionToContiguousArray<A>(_:)(v3);
  *(void *)(v0 + 352) = v4;
  swift_release();
  char v5 = *(void *)(v0 + 328);
  if (v4[2])
  {
    uint64_t v7 = *(void *)(v0 + 240);
    uint64_t v6 = *(void *)(v0 + 248);
    uint64_t v8 = *(void *)(v0 + 216);
    _s8CipherML12UseCaseGroupVWOcTm_1(v5 + *(int *)(*(void *)(v0 + 312) + 36), v6, type metadata accessor for NetworkConfig);
    uint64_t v9 = *(void *)(v8 + 176);
    uint64_t v10 = (void *)(v6 + *(int *)(v7 + 20));
    *uint64_t v10 = *(void *)(v8 + 168);
    v10[1] = v9;
    uint64_t v11 = one-time initialization token for shared;
    swift_bridgeObjectRetain();
    if (v11 != -1) {
      swift_once();
    }
    os_log_type_t v12 = *(void *)(v0 + 248);
    (*(void (**)(uint64_t))(*(void *)static NetworkManagerHelper.shared + 96))(v12);
    _s8CipherML12UseCaseGroupVWOhTm_2(v12, type metadata accessor for NetworkManagerConfig);
    if (*(void *)(v0 + 80))
    {
      outlined init with take of _HasContiguousBytes((long long *)(v0 + 56), v0 + 16);
      uint64_t v28 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized Sequence.asyncMap<A>(_:)
                                                     + async function pointer to specialized Sequence.asyncMap<A>(_:));
      swift_retain();
      BOOL v13 = (void *)swift_task_alloc();
      *(void *)(v0 + 360) = v13;
      _OWORD *v13 = v0;
      v13[1] = KeyRotation.rotateGroup(groupName:activeUseCases:);
      unint64_t v14 = *(void *)(v0 + 216);
      return v28((uint64_t)v4, v14);
    }
    swift_release();
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v0 + 56, &demangling cache variable for type metadata for NetworkManager?);
    if (one-time initialization token for daemon != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    __swift_project_value_buffer(v18, (uint64_t)static Logger.daemon);
    swift_bridgeObjectRetain_n();
    unint64_t v19 = Logger.logObject.getter();
    uint64_t v20 = static os_log_type_t.default.getter();
    uint64_t v21 = os_log_type_enabled(v19, v20);
    uint64_t v22 = *(void *)(v0 + 200);
    if (v21)
    {
      uint64_t v23 = *(void *)(v0 + 192);
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      uint64_t v29 = v25;
      *(_DWORD *)uint64_t v24 = 136446210;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 144) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v22, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_249C3F000, v19, v20, "Missing cached configuration for group: %{public}s", v24, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C5B4790](v25, -1, -1);
      MEMORY[0x24C5B4790](v24, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    uint64_t v26 = *(void *)(v0 + 328);
    char v27 = *(void *)(v0 + 296);
    type metadata accessor for CipherMLError();
    _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_9((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, 255, (void (*)(uint64_t))type metadata accessor for CipherMLError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    _s8CipherML12UseCaseGroupVWOhTm_2(v27, (uint64_t (*)(void))type metadata accessor for UserIdentifier);
    _s8CipherML12UseCaseGroupVWOhTm_2(v26, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v17 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    uint64_t v16 = *(void *)(v0 + 296);
    swift_release();
    _s8CipherML12UseCaseGroupVWOhTm_2(v16, (uint64_t (*)(void))type metadata accessor for UserIdentifier);
    _s8CipherML12UseCaseGroupVWOhTm_2(v5, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v17 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v17();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v11;

  uint64_t v1 = v0[37];
  uint64_t v2 = v0[34];
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v3);
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 + 16) + **(int **)(v4 + 16));
  char v5 = v1 + *(int *)(v2 + 20);
  uint64_t v6 = (void *)swift_task_alloc();
  v0[47] = v6;
  *uint64_t v6 = v0;
  v6[1] = KeyRotation.rotateGroup(groupName:activeUseCases:);
  uint64_t v7 = v0[46];
  uint64_t v8 = v0[32];
  return v10(v8, v7, v5, v3, v4);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 384) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 216);
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v4 = KeyRotation.rotateGroup(groupName:activeUseCases:);
    char v5 = v3;
  }
  else
  {
    uint64_t v6 = *(void *)(v2 + 216);
    swift_bridgeObjectRelease();
    uint64_t v4 = KeyRotation.rotateGroup(groupName:activeUseCases:);
    char v5 = v6;
  }
  return MEMORY[0x270FA2498](v4, v5, 0);
}

{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  void *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;

  BOOL v13 = v0;
  _s8CipherML12UseCaseGroupVWObTm_1(v0[32], v0[33], type metadata accessor for AspireApiConfigResponse);
  if (one-time initialization token for daemon != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[49] = __swift_project_value_buffer(v1, (uint64_t)static Logger.daemon);
  swift_bridgeObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v11 = v0[24];
    uint64_t v4 = (void *)v0[33];
    char v5 = v0[25];
    uint64_t v6 = swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    os_log_type_t v12 = v7;
    *(_DWORD *)uint64_t v6 = 134349570;
    swift_beginAccess();
    v0[21] = *(void *)(*v4 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v6 + 12) = 2050;
    v0[22] = *(void *)(v4[1] + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v6 + 22) = 2082;
    swift_bridgeObjectRetain();
    v0[23] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v5, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_249C3F000, v2, v3, "Received configurations: %{public}ld usecase(s), %{public}ld key(s) for group '%{public}s'", (uint8_t *)v6, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x24C5B4790](v7, -1, -1);
    MEMORY[0x24C5B4790](v6, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v8 = (void *)v0[33];
  uint64_t v9 = *(void *)(v0[27] + 112);
  v0[50] = v9;
  swift_beginAccess();
  v0[51] = *v8;
  swift_bridgeObjectRetain();
  return MEMORY[0x270FA2498](KeyRotation.rotateGroup(groupName:activeUseCases:), v9, 0);
}

{
  Swift::OpaquePointer *v0;
  void *v1;
  void *rawValue;
  uint64_t (*v3)();
  uint64_t v5;

  ConfigCache.update(keys:with:)(v0[44], v0[51]);
  v0[52]._rawValue = v1;
  rawValue = v0[27]._rawValue;
  if (v1)
  {
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v3 = KeyRotation.rotateGroup(groupName:activeUseCases:);
  }
  else
  {
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v3 = KeyRotation.rotateGroup(groupName:activeUseCases:);
  }
  return MEMORY[0x270FA2498](v3, rawValue, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  uint64_t v1 = v0[52];
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 2));
  static Task<>.checkCancellation()();
  if (v1)
  {
    uint64_t v2 = v0[41];
    uint64_t v3 = v0[33];
    _s8CipherML12UseCaseGroupVWOhTm_2(v0[37], (uint64_t (*)(void))type metadata accessor for UserIdentifier);
    _s8CipherML12UseCaseGroupVWOhTm_2(v2, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
    _s8CipherML12UseCaseGroupVWOhTm_2(v3, type metadata accessor for AspireApiConfigResponse);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
  else
  {
    uint64_t v6 = *(void *)(v0[33] + 8);
    v0[53] = v6;
    swift_bridgeObjectRetain();
    uint64_t v7 = (void *)swift_task_alloc();
    v0[54] = v7;
    *uint64_t v7 = v0;
    v7[1] = KeyRotation.rotateGroup(groupName:activeUseCases:);
    uint64_t v8 = v0[37];
    uint64_t v9 = v0[29];
    uint64_t v10 = v0[26];
    uint64_t v11 = v0[24];
    os_log_type_t v12 = v0[25];
    return KeyRotation.rotateKeys(groupName:userId:keyStatuses:activeUseCases:)(v9, v11, v12, v8, v6, v10);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 440) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 216);
  swift_bridgeObjectRelease();
  if (v0) {
    uint64_t v4 = KeyRotation.rotateGroup(groupName:activeUseCases:);
  }
  else {
    uint64_t v4 = KeyRotation.rotateGroup(groupName:activeUseCases:);
  }
  return MEMORY[0x270FA2498](v4, v3, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v18;

  uint64_t v1 = v0[34];
  uint64_t v2 = v0[35];
  uint64_t v3 = v0[29];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    uint64_t v4 = v0[41];
    char v5 = v0[33];
    _s8CipherML12UseCaseGroupVWOhTm_2(v0[37], (uint64_t (*)(void))type metadata accessor for UserIdentifier);
    _s8CipherML12UseCaseGroupVWOhTm_2(v4, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v3, &demangling cache variable for type metadata for UserIdentifier?);
    _s8CipherML12UseCaseGroupVWOhTm_2(v5, type metadata accessor for AspireApiConfigResponse);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = (uint64_t (*)(void))v0[1];
    return v6();
  }
  else
  {
    uint64_t v8 = v0[36];
    uint64_t v9 = v0[27];
    uint64_t v10 = v0[28];
    _s8CipherML12UseCaseGroupVWObTm_1(v3, v8, (uint64_t (*)(void))type metadata accessor for UserIdentifier);
    v0[56] = *(void *)(v9 + 120);
    uint64_t v11 = *(void *)(v9 + 128);
    v0[57] = v11;
    uint64_t ObjectType = swift_getObjectType();
    v0[58] = ObjectType;
    _s8CipherML12UseCaseGroupVWOcTm_1(v8, v10, (uint64_t (*)(void))type metadata accessor for UserIdentifier);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v2 + 56))(v10, 0, 1, v1);
    uint64_t v17 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 + 16)
                                                                              + **(int **)(v11 + 16));
    BOOL v13 = (void *)swift_task_alloc();
    v0[59] = v13;
    _OWORD *v13 = v0;
    v13[1] = KeyRotation.rotateGroup(groupName:activeUseCases:);
    unint64_t v14 = v0[28];
    uint64_t v16 = v0[24];
    uint64_t v15 = v0[25];
    return v17(v16, v15, v14, ObjectType, v11);
  }
}

{
  uint64_t *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;

  uint64_t v1 = (void *)*v0;
  uint64_t v9 = *(void *)(*v0 + 456);
  uint64_t v2 = *(void *)(*v0 + 224);
  uint64_t v3 = *v0;
  swift_task_dealloc();
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v2, &demangling cache variable for type metadata for UserIdentifier?);
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v9 + 24) + **(int **)(v9 + 24));
  uint64_t v4 = (void *)swift_task_alloc();
  v1[60] = v4;
  *uint64_t v4 = v3;
  v4[1] = KeyRotation.rotateGroup(groupName:activeUseCases:);
  char v5 = v1[58];
  uint64_t v6 = v1[57];
  return v8(v5, v6);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 488) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 216);
  if (v0) {
    uint64_t v4 = KeyRotation.rotateGroup(groupName:activeUseCases:);
  }
  else {
    uint64_t v4 = KeyRotation.rotateGroup(groupName:activeUseCases:);
  }
  return MEMORY[0x270FA2498](v4, v3, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = v0[41];
  uint64_t v2 = v0[37];
  uint64_t v3 = v0[33];
  _s8CipherML12UseCaseGroupVWOhTm_2(v0[36], (uint64_t (*)(void))type metadata accessor for UserIdentifier);
  _s8CipherML12UseCaseGroupVWOhTm_2(v2, (uint64_t (*)(void))type metadata accessor for UserIdentifier);
  _s8CipherML12UseCaseGroupVWOhTm_2(v1, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
  _s8CipherML12UseCaseGroupVWOhTm_2(v3, type metadata accessor for AspireApiConfigResponse);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  _s8CipherML12UseCaseGroupVWOhTm_2(*(void *)(v0 + 328), (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = v0[41];
  _s8CipherML12UseCaseGroupVWOhTm_2(v0[37], (uint64_t (*)(void))type metadata accessor for UserIdentifier);
  _s8CipherML12UseCaseGroupVWOhTm_2(v1, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v1 = v0[41];
  uint64_t v2 = v0[33];
  _s8CipherML12UseCaseGroupVWOhTm_2(v0[37], (uint64_t (*)(void))type metadata accessor for UserIdentifier);
  _s8CipherML12UseCaseGroupVWOhTm_2(v1, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 2));
  _s8CipherML12UseCaseGroupVWOhTm_2(v2, type metadata accessor for AspireApiConfigResponse);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v1 = v0[41];
  uint64_t v2 = v0[33];
  _s8CipherML12UseCaseGroupVWOhTm_2(v0[37], (uint64_t (*)(void))type metadata accessor for UserIdentifier);
  _s8CipherML12UseCaseGroupVWOhTm_2(v1, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
  _s8CipherML12UseCaseGroupVWOhTm_2(v2, type metadata accessor for AspireApiConfigResponse);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  uint8_t *v7;
  void *v8;
  id v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(void);
  uint64_t v18;

  uint64_t v1 = *(void **)(v0 + 488);
  uint64_t v2 = v1;
  uint64_t v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  char v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = *(void **)(v0 + 488);
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 138543362;
    uint64_t v9 = v6;
    uint64_t v10 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 152) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v8 = v10;

    _os_log_impl(&dword_249C3F000, v4, v5, "RotationTask: failed to synchronize key storage, but continuing anyway: %{public}@", v7, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x24C5B4790](v8, -1, -1);
    MEMORY[0x24C5B4790](v7, -1, -1);
  }
  else
  {
    uint64_t v11 = *(void **)(v0 + 488);
  }
  os_log_type_t v12 = *(void *)(v0 + 328);
  unint64_t v14 = *(void *)(v0 + 288);
  BOOL v13 = *(void *)(v0 + 296);
  uint64_t v15 = *(void *)(v0 + 264);

  _s8CipherML12UseCaseGroupVWOhTm_2(v14, (uint64_t (*)(void))type metadata accessor for UserIdentifier);
  _s8CipherML12UseCaseGroupVWOhTm_2(v13, (uint64_t (*)(void))type metadata accessor for UserIdentifier);
  _s8CipherML12UseCaseGroupVWOhTm_2(v12, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
  _s8CipherML12UseCaseGroupVWOhTm_2(v15, type metadata accessor for AspireApiConfigResponse);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v16 = *(uint64_t (**)(void))(v0 + 8);
  return v16();
}

uint64_t KeyRotation.rotateGroup(groupName:activeUseCases:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 216);
  *(void *)(*(void *)v1 + 368) = a1;
  swift_task_dealloc();
  swift_release();
  return MEMORY[0x270FA2498](KeyRotation.rotateGroup(groupName:activeUseCases:), v2, 0);
}

uint64_t KeyRotation.run()()
{
  v1[5] = v0;
  uint64_t v2 = type metadata accessor for Date();
  v1[6] = v2;
  v1[7] = *(void *)(v2 - 8);
  v1[8] = swift_task_alloc();
  v1[9] = swift_task_alloc();
  return MEMORY[0x270FA2498](KeyRotation.run(), v0, 0);
}

{
  uint64_t v0;
  uint64_t v1;

  uint64_t v1 = *(void *)(*(void *)(v0 + 40) + 144);
  *(void *)(v0 + 80) = v1;
  return MEMORY[0x270FA2498](KeyRotation.run(), v1, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  uint64_t v1 = v0[9];
  uint64_t v2 = v0[10];
  uint64_t v4 = v0[7];
  uint64_t v3 = v0[8];
  char v5 = v0[5];
  uint64_t v6 = v0[6];
  (*(void (**)(void))(v2 + OBJC_IVAR____TtC8CipherML20ActiveUseCaseTracker_currentDate))();
  Date.addingTimeInterval(_:)();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v7(v3, v6);
  uint64_t v8 = (uint64_t *)(v2 + OBJC_IVAR____TtC8CipherML20ActiveUseCaseTracker_lastUsed);
  swift_beginAccess();
  uint64_t v9 = *v8;
  uint64_t v10 = swift_task_alloc();
  *(void *)(v10 + 16) = v1;
  swift_bridgeObjectRetain();
  uint64_t v11 = specialized _NativeDictionary.filter(_:)((uint64_t)partial apply for closure #1 in ActiveUseCaseTracker.activeUseCases.getter, v10, v9);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  v0[11] = specialized Set.init<A>(_:)(v11);
  v7(v1, v6);
  return MEMORY[0x270FA2498](KeyRotation.run(), v5, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v7;

  uint64_t v1 = v0[11];
  uint64_t v2 = v0[5];
  uint64_t v3 = swift_task_alloc();
  v0[12] = v3;
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_9(&lazy protocol witness table cache variable for type KeyRotation and conformance KeyRotation, v4, (void (*)(uint64_t))type metadata accessor for KeyRotation);
  char v5 = (void *)swift_task_alloc();
  v0[13] = v5;
  *char v5 = v0;
  v5[1] = KeyRotation.run();
  return MEMORY[0x270FA2338]();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;
  uint64_t v7;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 112) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 40);
    uint64_t v4 = KeyRotation.run();
  }
  else
  {
    char v5 = *(void *)(v2 + 40);
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    uint64_t v4 = KeyRotation.run();
    uint64_t v3 = v5;
  }
  return MEMORY[0x270FA2498](v4, v3, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in KeyRotation.run()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = protocol witness for NetworkManager.uploadKeys(evaluationKeys:userId:) in conformance AspireNetworkManager;
  v6[3] = a3;
  v6[4] = a2;
  return MEMORY[0x270FA2498](KeyRotation.run(activeUseCases:), a2, 0);
}

uint64_t closure #2 in KeyRotation.run()(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void *)(v5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
  uint64_t v7 = (void *)swift_allocObject();
  v7[2] = 0;
  v7[3] = 0;
  v7[4] = a1;
  int v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  swift_retain();
  if (v8 == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v4, &demangling cache variable for type metadata for TaskPriority?);
    uint64_t v9 = 0;
    uint64_t v10 = 0;
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
    if (v7[2])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v10 = v11;
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v9 = 0;
      uint64_t v10 = 0;
    }
  }
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = &async function pointer to partial apply for closure #1 in closure #2 in KeyRotation.run();
  *(void *)(v12 + 24) = v7;
  if (v10 | v9)
  {
    v14[0] = 0;
    v14[1] = 0;
    void v14[2] = v9;
    v14[3] = v10;
  }
  swift_task_create();
  return swift_release();
}

uint64_t closure #1 in closure #2 in KeyRotation.run()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v6;
  *uint64_t v6 = v4;
  v6[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  v6[18] = a4;
  return MEMORY[0x270FA2498](KeyRotation.cancel(), a4, 0);
}

uint64_t KeyRotation.runWithCoordinator(useCase:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return MEMORY[0x270FA2498](KeyRotation.runWithCoordinator(useCase:), v2, 0);
}

uint64_t KeyRotation.runWithCoordinator(useCase:)()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  uint64_t v3 = v0[2];
  uint64_t v4 = (void *)swift_allocObject();
  v0[5] = v4;
  v4[2] = v2;
  v4[3] = v3;
  v4[4] = v1;
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized Coordinator.run(key:_:)
                                                                           + async function pointer to specialized Coordinator.run(key:_:));
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v5 = (void *)swift_task_alloc();
  v0[6] = v5;
  *uint64_t v5 = v0;
  v5[1] = KeyRotation.runWithCoordinator(useCase:);
  uint64_t v6 = v0[2];
  uint64_t v7 = v0[3];
  return v9((uint64_t)v9, v6, v7, (uint64_t)&async function pointer to partial apply for closure #1 in KeyRotation.runWithCoordinator(useCase:), (uint64_t)v4);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 56) = v0;
  swift_task_dealloc();
  swift_release();
  uint64_t v3 = *(void *)(v2 + 32);
  if (v0) {
    uint64_t v4 = XPCHandler.configureUseCaseGroup(withName:useCaseGroup:);
  }
  else {
    uint64_t v4 = XPCHandler.configureUseCaseGroup(withName:useCaseGroup:);
  }
  return MEMORY[0x270FA2498](v4, v3, 0);
}

uint64_t closure #1 in KeyRotation.runWithCoordinator(useCase:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[9] = a3;
  v4[10] = a4;
  v4[8] = a2;
  return MEMORY[0x270FA2498](closure #1 in KeyRotation.runWithCoordinator(useCase:), a2, 0);
}

uint64_t closure #1 in KeyRotation.runWithCoordinator(useCase:)()
{
  uint64_t v2 = v0[9];
  uint64_t v1 = v0[10];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_249E85E40;
  *(void *)(inited + 32) = v2;
  *(void *)(inited + 40) = v1;
  swift_bridgeObjectRetain();
  Swift::Int v4 = specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  v0[11] = v4;
  swift_setDeallocating();
  swift_arrayDestroy();
  uint64_t v5 = (void *)swift_task_alloc();
  v0[12] = v5;
  *uint64_t v5 = v0;
  v5[1] = closure #1 in KeyRotation.runWithCoordinator(useCase:);
  uint64_t v6 = v0[8];
  v5[3] = v4;
  v5[4] = v6;
  return MEMORY[0x270FA2498](KeyRotation.run(activeUseCases:), v6, 0);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v2 = (void *)*v1;
  v2[13] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[8];
    return MEMORY[0x270FA2498](closure #1 in KeyRotation.runWithCoordinator(useCase:), v3, 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    Swift::Int v4 = (uint64_t (*)(void))v2[1];
    return v4();
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t KeyRotation.run(activeUseCases:)(uint64_t a1)
{
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = v1;
  return MEMORY[0x270FA2498](KeyRotation.run(activeUseCases:), v1, 0);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  uint64_t v2 = *(void *)(*(void *)v1 + 32);
  *(void *)(*(void *)v1 + 48) = a1;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](KeyRotation.run(activeUseCases:), v2, 0);
}

uint64_t KeyRotation.run(activeUseCases:)()
{
  uint64_t v13 = v0;
  if (one-time initialization token for daemon != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.daemon);
  swift_bridgeObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    Swift::Int v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = swift_slowAlloc();
    uint64_t v12 = v5;
    *(_DWORD *)Swift::Int v4 = 136446210;
    swift_bridgeObjectRetain();
    uint64_t v6 = Set.description.getter();
    unint64_t v8 = v7;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v8, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_249C3F000, v2, v3, "Running rotation task for %{public}s", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5B4790](v5, -1, -1);
    MEMORY[0x24C5B4790](v4, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v11 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized KeyRotation.activeGroups(activeUseCases:)
                              + async function pointer to specialized KeyRotation.activeGroups(activeUseCases:));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v9;
  *uint64_t v9 = v0;
  v9[1] = KeyRotation.run(activeUseCases:);
  return v11();
}

{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(void);
  uint64_t v22;

  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = *(unsigned char *)(v1 + 32);
  *(unsigned char *)(v0 + 104) = v2;
  os_log_type_t v3 = -1;
  Swift::Int v4 = -1 << v2;
  uint64_t v5 = *(void *)(v1 + 56);
  if (-v4 < 64) {
    os_log_type_t v3 = ~(-1 << -(char)v4);
  }
  *(void *)(v0 + 56) = 0;
  uint64_t v6 = v3 & v5;
  if (v6)
  {
    unint64_t v7 = 0;
    unint64_t v8 = __clz(__rbit64(v6));
    uint64_t v9 = (v6 - 1) & v6;
    goto LABEL_5;
  }
  uint64_t v13 = 63 - v4;
  if (v13 > 0x7F)
  {
    uint64_t v14 = *(void *)(v1 + 64);
    if (v14)
    {
      unint64_t v7 = 1;
LABEL_9:
      uint64_t v9 = (v14 - 1) & v14;
      unint64_t v8 = __clz(__rbit64(v14)) + (v7 << 6);
LABEL_5:
      *(void *)(v0 + 64) = v7;
      *(void *)(v0 + 72) = v9;
      uint64_t v10 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v8);
      uint64_t v11 = *v10;
      uint64_t v12 = v10[1];
      *(void *)(v0 + 80) = v12;
      swift_bridgeObjectRetain();
      static Task<>.checkCancellation()();
      uint64_t v15 = (void *)swift_task_alloc();
      *(void *)(v0 + 88) = v15;
      *uint64_t v15 = v0;
      v15[1] = KeyRotation.run(activeUseCases:);
      uint64_t v16 = *(void *)(v0 + 24);
      return KeyRotation.rotateGroup(groupName:activeUseCases:)(v11, v12, v16);
    }
    if (v13 >= 0xC0)
    {
      uint64_t v14 = *(void *)(v1 + 72);
      if (v14)
      {
        unint64_t v7 = 2;
        goto LABEL_9;
      }
      if (v13 >= 0x100)
      {
        uint64_t v14 = *(void *)(v1 + 80);
        if (v14)
        {
          unint64_t v7 = 3;
          goto LABEL_9;
        }
        if (v13 >= 0x140)
        {
          uint64_t v14 = *(void *)(v1 + 88);
          if (v14)
          {
            unint64_t v7 = 4;
            goto LABEL_9;
          }
          uint64_t v18 = 0;
          unint64_t v19 = v13 >> 6;
          if (v19 <= 5) {
            unint64_t v19 = 5;
          }
          uint64_t v20 = v19 - 5;
          while (v20 != v18)
          {
            uint64_t v14 = *(void *)(v1 + 96 + 8 * v18++);
            if (v14)
            {
              unint64_t v7 = v18 + 4;
              goto LABEL_9;
            }
          }
        }
      }
    }
  }
  swift_release();
  uint64_t v21 = *(uint64_t (**)(void))(v0 + 8);
  return v21();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)();
  uint64_t v6;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 96) = v0;
  swift_task_dealloc();
  os_log_type_t v3 = *(void *)(v2 + 32);
  swift_bridgeObjectRelease();
  if (v0) {
    Swift::Int v4 = KeyRotation.run(activeUseCases:);
  }
  else {
    Swift::Int v4 = KeyRotation.run(activeUseCases:);
  }
  return MEMORY[0x270FA2498](v4, v3, 0);
}

void KeyRotation.run(activeUseCases:)()
{
  uint64_t v1 = *(void *)(v0 + 96);
  int64_t v2 = *(void *)(v0 + 64);
  unint64_t v3 = *(void *)(v0 + 72);
  if (v3)
  {
    unint64_t v4 = __clz(__rbit64(v3));
    uint64_t v5 = (v3 - 1) & v3;
    unint64_t v6 = v4 | (v2 << 6);
    uint64_t v7 = *(void *)(v0 + 48);
    goto LABEL_3;
  }
  int64_t v12 = v2 + 1;
  if (__OFADD__(v2, 1))
  {
    __break(1u);
    goto LABEL_30;
  }
  int64_t v13 = (unint64_t)((1 << *(unsigned char *)(v0 + 104)) + 63) >> 6;
  uint64_t v7 = *(void *)(v0 + 48);
  if (v12 >= v13)
  {
LABEL_22:
    uint64_t v19 = *(void *)(v0 + 56);
    swift_release();
    if (!v19)
    {
      uint64_t v20 = *(void (**)(void))(v0 + 8);
      goto LABEL_25;
    }
    swift_willThrow();
LABEL_24:
    uint64_t v20 = *(void (**)(void))(v0 + 8);
LABEL_25:
    v20();
    return;
  }
  uint64_t v14 = v7 + 56;
  unint64_t v15 = *(void *)(v7 + 56 + 8 * v12);
  ++v2;
  if (!v15)
  {
    int64_t v2 = v12 + 1;
    if (v12 + 1 < v13)
    {
      unint64_t v15 = *(void *)(v14 + 8 * v2);
      if (v15) {
        goto LABEL_8;
      }
      int64_t v2 = v12 + 2;
      if (v12 + 2 < v13)
      {
        unint64_t v15 = *(void *)(v14 + 8 * v2);
        if (v15) {
          goto LABEL_8;
        }
        int64_t v18 = v12 + 3;
        if (v18 < v13)
        {
          unint64_t v15 = *(void *)(v14 + 8 * v18);
          if (v15)
          {
            int64_t v2 = v18;
            goto LABEL_8;
          }
          while (1)
          {
            int64_t v2 = v18 + 1;
            if (__OFADD__(v18, 1)) {
              break;
            }
            if (v2 >= v13) {
              goto LABEL_22;
            }
            unint64_t v15 = *(void *)(v14 + 8 * v2);
            ++v18;
            if (v15) {
              goto LABEL_8;
            }
          }
LABEL_30:
          __break(1u);
          return;
        }
      }
    }
    goto LABEL_22;
  }
LABEL_8:
  uint64_t v5 = (v15 - 1) & v15;
  unint64_t v6 = __clz(__rbit64(v15)) + (v2 << 6);
LABEL_3:
  *(void *)(v0 + 64) = v2;
  *(void *)(v0 + 72) = v5;
  unint64_t v8 = (uint64_t *)(*(void *)(v7 + 48) + 16 * v6);
  uint64_t v9 = *v8;
  uint64_t v10 = v8[1];
  *(void *)(v0 + 80) = v10;
  swift_bridgeObjectRetain();
  static Task<>.checkCancellation()();
  if (v1)
  {
    uint64_t v11 = *(void **)(v0 + 56);
    swift_release();

    swift_bridgeObjectRelease();
    goto LABEL_24;
  }
  uint64_t v16 = (void *)swift_task_alloc();
  *(void *)(v0 + 88) = v16;
  void *v16 = v0;
  v16[1] = KeyRotation.run(activeUseCases:);
  uint64_t v17 = *(void *)(v0 + 24);
  KeyRotation.rotateGroup(groupName:activeUseCases:)(v9, v10, v17);
}

{
  uint64_t v0;
  uint64_t v1;
  int64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  int64_t v17;
  void (*v18)(void);
  uint64_t v19;

  uint64_t v1 = *(void *)(v0 + 96);

  int64_t v2 = *(void *)(v0 + 64);
  unint64_t v3 = *(void *)(v0 + 72);
  *(void *)(v0 + 56) = v1;
  if (v3)
  {
    unint64_t v4 = __clz(__rbit64(v3));
    uint64_t v5 = (v3 - 1) & v3;
    unint64_t v6 = v4 | (v2 << 6);
    uint64_t v7 = *(void *)(v0 + 48);
    goto LABEL_3;
  }
  uint64_t v11 = v2 + 1;
  if (__OFADD__(v2, 1))
  {
    __break(1u);
    goto LABEL_28;
  }
  int64_t v12 = (unint64_t)((1 << *(unsigned char *)(v0 + 104)) + 63) >> 6;
  uint64_t v7 = *(void *)(v0 + 48);
  if (v11 < v12)
  {
    int64_t v13 = v7 + 56;
    uint64_t v14 = *(void *)(v7 + 56 + 8 * v11);
    ++v2;
    if (v14)
    {
LABEL_7:
      uint64_t v5 = (v14 - 1) & v14;
      unint64_t v6 = __clz(__rbit64(v14)) + (v2 << 6);
LABEL_3:
      *(void *)(v0 + 64) = v2;
      *(void *)(v0 + 72) = v5;
      unint64_t v8 = (uint64_t *)(*(void *)(v7 + 48) + 16 * v6);
      uint64_t v9 = *v8;
      uint64_t v10 = v8[1];
      *(void *)(v0 + 80) = v10;
      swift_bridgeObjectRetain();
      static Task<>.checkCancellation()();
      unint64_t v15 = (void *)swift_task_alloc();
      *(void *)(v0 + 88) = v15;
      *unint64_t v15 = v0;
      v15[1] = KeyRotation.run(activeUseCases:);
      uint64_t v16 = *(void *)(v0 + 24);
      KeyRotation.rotateGroup(groupName:activeUseCases:)(v9, v10, v16);
      return;
    }
    int64_t v2 = v11 + 1;
    if (v11 + 1 < v12)
    {
      uint64_t v14 = *(void *)(v13 + 8 * v2);
      if (v14) {
        goto LABEL_7;
      }
      int64_t v2 = v11 + 2;
      if (v11 + 2 < v12)
      {
        uint64_t v14 = *(void *)(v13 + 8 * v2);
        if (v14) {
          goto LABEL_7;
        }
        uint64_t v17 = v11 + 3;
        if (v17 < v12)
        {
          uint64_t v14 = *(void *)(v13 + 8 * v17);
          if (v14)
          {
            int64_t v2 = v17;
            goto LABEL_7;
          }
          while (1)
          {
            int64_t v2 = v17 + 1;
            if (__OFADD__(v17, 1)) {
              break;
            }
            if (v2 >= v12) {
              goto LABEL_21;
            }
            uint64_t v14 = *(void *)(v13 + 8 * v2);
            ++v17;
            if (v14) {
              goto LABEL_7;
            }
          }
LABEL_28:
          __break(1u);
          return;
        }
      }
    }
  }
LABEL_21:
  swift_release();
  if (v1) {
    swift_willThrow();
  }
  int64_t v18 = *(void (**)(void))(v0 + 8);
  v18();
}

uint64_t KeyRotation.cancel()()
{
  *(void *)(v1 + 144) = v0;
  return MEMORY[0x270FA2498](KeyRotation.cancel(), v0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;

  uint64_t v1 = *(void *)(v0 + 144) + 192;
  swift_beginAccess();
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1, v0 + 56, &demangling cache variable for type metadata for NetworkManager?);
  if (*(void *)(v0 + 80))
  {
    outlined init with take of _HasContiguousBytes((long long *)(v0 + 56), v0 + 16);
    if (one-time initialization token for daemon != -1) {
      swift_once();
    }
    int64_t v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.daemon);
    unint64_t v3 = Logger.logObject.getter();
    unint64_t v4 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl(&dword_249C3F000, v3, v4, "Canceling key upload", v5, 2u);
      MEMORY[0x24C5B4790](v5, -1, -1);
    }

    unint64_t v6 = *(void *)(v0 + 40);
    uint64_t v7 = *(void *)(v0 + 48);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), v6);
    (*(void (**)(uint64_t, uint64_t))(v7 + 40))(v6, v7);
    *(void *)(v0 + 88) = 0;
    *(_OWORD *)(v0 + 56) = 0u;
    *(_OWORD *)(v0 + 72) = 0u;
    swift_beginAccess();
    outlined assign with take of NetworkManager?(v0 + 56, v1);
    swift_endAccess();
    __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  }
  else
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v0 + 56, &demangling cache variable for type metadata for NetworkManager?);
  }
  unint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t KeyRotation.deinit()
{
  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v0 + 192, &demangling cache variable for type metadata for NetworkManager?);
  swift_defaultActor_destroy();
  return v0;
}

uint64_t KeyRotation.__deallocating_deinit()
{
  KeyRotation.deinit();
  return MEMORY[0x270FA2418](v0);
}

uint64_t KeyRotation.unownedExecutor.getter()
{
  return v0;
}

uint64_t specialized _NativeDictionary.filter(_:)(uint64_t isStackAllocationSafe)
{
  uint64_t v2 = isStackAllocationSafe;
  v10[1] = *MEMORY[0x263EF8340];
  char v3 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v4 = (unint64_t)((1 << v3) + 63) >> 6;
  size_t v5 = 8 * v4;
  if ((v3 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x270FA5388](isStackAllocationSafe);
    bzero((char *)v10 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0), v5);
    specialized closure #1 in _NativeDictionary.filter(_:)((void *)((char *)v10 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0)), v4, v2);
    if (v1) {
      swift_willThrow();
    }
    else {
      return v6;
    }
  }
  else
  {
    uint64_t v7 = (void *)swift_slowAlloc();
    bzero(v7, v5);
    specialized closure #1 in _NativeDictionary.filter(_:)((unint64_t *)v7, v4, v2);
    uint64_t v2 = v8;
    MEMORY[0x24C5B4790](v7, -1, -1);
  }
  return v2;
}

void specialized closure #1 in _NativeDictionary.filter(_:)(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v36 = a2;
  os_log_type_t v37 = a1;
  uint64_t v4 = type metadata accessor for NetworkManagerType(0);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v47 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: UseCaseGroup));
  MEMORY[0x270FA5388](v46);
  uint64_t v45 = (uint64_t *)((char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v7);
  uint64_t v41 = (char *)&v36 - v8;
  uint64_t v9 = type metadata accessor for UseCaseGroup();
  uint64_t v43 = *(void *)(v9 - 8);
  uint64_t v44 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v42 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v11 = 0;
  uint64_t v48 = (void *)a3;
  uint64_t v12 = *(void *)(a3 + 64);
  uint64_t v38 = 0;
  uint64_t v39 = a3 + 64;
  uint64_t v13 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & v12;
  int64_t v40 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v17 = v41;
  uint64_t v16 = (uint64_t)v42;
  while (1)
  {
    if (v15)
    {
      unint64_t v18 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      int64_t v49 = v11;
      unint64_t v19 = v18 | (v11 << 6);
      goto LABEL_5;
    }
    int64_t v31 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v31 >= v40) {
      goto LABEL_24;
    }
    unint64_t v32 = *(void *)(v39 + 8 * v31);
    int64_t v33 = v11 + 1;
    if (!v32)
    {
      int64_t v33 = v11 + 2;
      if (v11 + 2 >= v40) {
        goto LABEL_24;
      }
      unint64_t v32 = *(void *)(v39 + 8 * v33);
      if (!v32)
      {
        int64_t v33 = v11 + 3;
        if (v11 + 3 >= v40) {
          goto LABEL_24;
        }
        unint64_t v32 = *(void *)(v39 + 8 * v33);
        if (!v32) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v15 = (v32 - 1) & v32;
    int64_t v49 = v33;
    unint64_t v19 = __clz(__rbit64(v32)) + (v33 << 6);
LABEL_5:
    uint64_t v20 = (uint64_t *)(v48[6] + 16 * v19);
    uint64_t v21 = *v20;
    uint64_t v22 = v20[1];
    _s8CipherML12UseCaseGroupVWOcTm_1(v48[7] + *(void *)(v43 + 72) * v19, v16, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
    uint64_t v23 = v46;
    uint64_t v24 = (uint64_t)v17 + *(int *)(v46 + 48);
    *uint64_t v17 = v21;
    v17[1] = v22;
    _s8CipherML12UseCaseGroupVWOcTm_1(v16, v24, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
    uint64_t v25 = *(int *)(v23 + 48);
    uint64_t v26 = v45;
    uint64_t v27 = (uint64_t)v45 + v25;
    void *v45 = v21;
    v26[1] = v22;
    _s8CipherML12UseCaseGroupVWOcTm_1(v24, (uint64_t)v26 + v25, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
    uint64_t v28 = v27 + *(int *)(v44 + 36);
    uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
    uint64_t v30 = (uint64_t)v47;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v47, 2, 2, v29);
    swift_bridgeObjectRetain_n();
    LOBYTE(v28) = specialized static NetworkManagerType.== infix(_:_:)(v28, v30);
    _s8CipherML12UseCaseGroupVWOhTm_2(v30, type metadata accessor for NetworkManagerType);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v17, &demangling cache variable for type metadata for (key: String, value: UseCaseGroup));
    _s8CipherML12UseCaseGroupVWOhTm_2(v27, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
    _s8CipherML12UseCaseGroupVWOhTm_2(v16, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
    swift_bridgeObjectRelease();
    int64_t v11 = v49;
    if (v28)
    {
      *(unint64_t *)((char *)v37 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      if (__OFADD__(v38++, 1))
      {
        __break(1u);
LABEL_24:
        specialized _NativeDictionary.extractDictionary(using:count:)(v37, v36, v38, v48, (uint64_t (*)(void))type metadata accessor for UseCaseGroup, &demangling cache variable for type metadata for _DictionaryStorage<String, UseCaseGroup>, (uint64_t (*)(void))type metadata accessor for UseCaseGroup, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
        return;
      }
    }
  }
  uint64_t v34 = v11 + 4;
  if (v11 + 4 >= v40) {
    goto LABEL_24;
  }
  unint64_t v32 = *(void *)(v39 + 8 * v34);
  if (v32)
  {
    int64_t v33 = v11 + 4;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v33 = v34 + 1;
    if (__OFADD__(v34, 1)) {
      break;
    }
    if (v33 >= v40) {
      goto LABEL_24;
    }
    unint64_t v32 = *(void *)(v39 + 8 * v33);
    ++v34;
    if (v32) {
      goto LABEL_20;
    }
  }
LABEL_26:
  __break(1u);
}

uint64_t specialized _NativeDictionary.extractDictionary(using:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v50 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v52 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  int64_t v49 = (char *)&v43 - v12;
  if (!a3) {
    return MEMORY[0x263F8EE80];
  }
  if (a4[2] == a3)
  {
    swift_retain();
    return (uint64_t)a4;
  }
  uint64_t v48 = v11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Date>);
  uint64_t result = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v14 = result;
  uint64_t v43 = a1;
  uint64_t v44 = a2;
  if (a2 < 1) {
    unint64_t v15 = 0;
  }
  else {
    unint64_t v15 = *a1;
  }
  uint64_t v16 = 0;
  uint64_t v46 = v50 + 32;
  uint64_t v47 = v50 + 16;
  uint64_t v17 = result + 64;
  uint64_t v18 = v48;
  uint64_t v45 = a4;
  while (1)
  {
    if (v15)
    {
      unint64_t v19 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      uint64_t v51 = v16;
      unint64_t v20 = v19 | (v16 << 6);
    }
    else
    {
      uint64_t v21 = v16 + 1;
      if (__OFADD__(v16, 1)) {
        goto LABEL_40;
      }
      if (v21 >= v44) {
        return v14;
      }
      unint64_t v22 = v43[v21];
      uint64_t v23 = v16 + 1;
      if (!v22)
      {
        uint64_t v23 = v16 + 2;
        if (v16 + 2 >= v44) {
          return v14;
        }
        unint64_t v22 = v43[v23];
        if (!v22)
        {
          uint64_t v23 = v16 + 3;
          if (v16 + 3 >= v44) {
            return v14;
          }
          unint64_t v22 = v43[v23];
          if (!v22)
          {
            uint64_t v24 = v16 + 4;
            if (v16 + 4 >= v44) {
              return v14;
            }
            unint64_t v22 = v43[v24];
            if (!v22)
            {
              while (1)
              {
                uint64_t v23 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_41;
                }
                if (v23 >= v44) {
                  return v14;
                }
                unint64_t v22 = v43[v23];
                ++v24;
                if (v22) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v23 = v16 + 4;
          }
        }
      }
LABEL_24:
      unint64_t v15 = (v22 - 1) & v22;
      uint64_t v51 = v23;
      unint64_t v20 = __clz(__rbit64(v22)) + (v23 << 6);
    }
    uint64_t v25 = a4[7];
    uint64_t v26 = (uint64_t *)(a4[6] + 16 * v20);
    uint64_t v27 = *v26;
    uint64_t v28 = v26[1];
    uint64_t v29 = v49;
    uint64_t v30 = v50;
    uint64_t v31 = *(void *)(v50 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v50 + 16))(v49, v25 + v31 * v20, v18);
    unint64_t v32 = *(void (**)(char *, char *, uint64_t))(v30 + 32);
    v32(v52, v29, v18);
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v33 = -1 << *(unsigned char *)(v14 + 32);
    unint64_t v34 = result & ~v33;
    unint64_t v35 = v34 >> 6;
    if (((-1 << v34) & ~*(void *)(v17 + 8 * (v34 >> 6))) != 0)
    {
      unint64_t v36 = __clz(__rbit64((-1 << v34) & ~*(void *)(v17 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
      uint64_t v18 = v48;
    }
    else
    {
      char v37 = 0;
      unint64_t v38 = (unint64_t)(63 - v33) >> 6;
      uint64_t v18 = v48;
      do
      {
        if (++v35 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v39 = v35 == v38;
        if (v35 == v38) {
          unint64_t v35 = 0;
        }
        v37 |= v39;
        uint64_t v40 = *(void *)(v17 + 8 * v35);
      }
      while (v40 == -1);
      unint64_t v36 = __clz(__rbit64(~v40)) + (v35 << 6);
    }
    *(void *)(v17 + ((v36 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v36;
    uint64_t v41 = (void *)(*(void *)(v14 + 48) + 16 * v36);
    void *v41 = v27;
    v41[1] = v28;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v32)(*(void *)(v14 + 56) + v36 * v31, v52, v18);
    ++*(void *)(v14 + 16);
    if (__OFSUB__(a3--, 1)) {
      break;
    }
    a4 = v45;
    uint64_t v16 = v51;
    if (!a3) {
      return v14;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.extractDictionary(using:count:)(a1, a2, a3, a4, type metadata accessor for AspireApiConfig, &demangling cache variable for type metadata for _DictionaryStorage<String, AspireApiConfig>, type metadata accessor for AspireApiConfig, type metadata accessor for AspireApiConfig);
}

uint64_t specialized _NativeDictionary.extractDictionary(using:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t (*a5)(void), uint64_t *a6, uint64_t (*a7)(void), uint64_t (*a8)(void))
{
  uint64_t v53 = a7;
  uint64_t v14 = a5(0);
  uint64_t v52 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v55 = (uint64_t)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v51 = (char *)&v47 - v17;
  if (!a3) {
    return MEMORY[0x263F8EE80];
  }
  if (a4[2] == a3)
  {
    swift_retain();
    return (uint64_t)a4;
  }
  uint64_t v50 = a8;
  __swift_instantiateConcreteTypeFromMangledName(a6);
  uint64_t result = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v19 = result;
  uint64_t v48 = a1;
  uint64_t v49 = a2;
  if (a2 < 1) {
    unint64_t v20 = 0;
  }
  else {
    unint64_t v20 = *a1;
  }
  uint64_t v21 = 0;
  uint64_t v22 = result + 64;
  uint64_t v23 = v50;
  uint64_t v24 = (uint64_t)v51;
  while (1)
  {
    if (v20)
    {
      unint64_t v25 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      uint64_t v54 = v21;
      unint64_t v26 = v25 | (v21 << 6);
    }
    else
    {
      uint64_t v27 = v21 + 1;
      if (__OFADD__(v21, 1)) {
        goto LABEL_40;
      }
      if (v27 >= v49) {
        return v19;
      }
      unint64_t v28 = v48[v27];
      uint64_t v29 = v21 + 1;
      if (!v28)
      {
        uint64_t v29 = v21 + 2;
        if (v21 + 2 >= v49) {
          return v19;
        }
        unint64_t v28 = v48[v29];
        if (!v28)
        {
          uint64_t v29 = v21 + 3;
          if (v21 + 3 >= v49) {
            return v19;
          }
          unint64_t v28 = v48[v29];
          if (!v28)
          {
            uint64_t v30 = v21 + 4;
            if (v21 + 4 >= v49) {
              return v19;
            }
            unint64_t v28 = v48[v30];
            if (!v28)
            {
              while (1)
              {
                uint64_t v29 = v30 + 1;
                if (__OFADD__(v30, 1)) {
                  goto LABEL_41;
                }
                if (v29 >= v49) {
                  return v19;
                }
                unint64_t v28 = v48[v29];
                ++v30;
                if (v28) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v29 = v21 + 4;
          }
        }
      }
LABEL_24:
      unint64_t v20 = (v28 - 1) & v28;
      uint64_t v54 = v29;
      unint64_t v26 = __clz(__rbit64(v28)) + (v29 << 6);
    }
    uint64_t v31 = a4[7];
    unint64_t v32 = a4;
    uint64_t v33 = (uint64_t *)(a4[6] + 16 * v26);
    uint64_t v34 = *v33;
    uint64_t v35 = v33[1];
    uint64_t v36 = *(void *)(v52 + 72);
    _s8CipherML12UseCaseGroupVWOcTm_1(v31 + v36 * v26, v24, v53);
    _s8CipherML12UseCaseGroupVWObTm_1(v24, v55, v23);
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v37 = -1 << *(unsigned char *)(v19 + 32);
    unint64_t v38 = result & ~v37;
    unint64_t v39 = v38 >> 6;
    if (((-1 << v38) & ~*(void *)(v22 + 8 * (v38 >> 6))) != 0)
    {
      unint64_t v40 = __clz(__rbit64((-1 << v38) & ~*(void *)(v22 + 8 * (v38 >> 6)))) | v38 & 0x7FFFFFFFFFFFFFC0;
      uint64_t v23 = v50;
    }
    else
    {
      char v41 = 0;
      unint64_t v42 = (unint64_t)(63 - v37) >> 6;
      uint64_t v23 = v50;
      do
      {
        if (++v39 == v42 && (v41 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v43 = v39 == v42;
        if (v39 == v42) {
          unint64_t v39 = 0;
        }
        v41 |= v43;
        uint64_t v44 = *(void *)(v22 + 8 * v39);
      }
      while (v44 == -1);
      unint64_t v40 = __clz(__rbit64(~v44)) + (v39 << 6);
    }
    *(void *)(v22 + ((v40 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v40;
    uint64_t v45 = (void *)(*(void *)(v19 + 48) + 16 * v40);
    void *v45 = v34;
    v45[1] = v35;
    uint64_t result = _s8CipherML12UseCaseGroupVWObTm_1(v55, *(void *)(v19 + 56) + v40 * v36, v23);
    ++*(void *)(v19 + 16);
    if (__OFSUB__(a3--, 1)) {
      break;
    }
    a4 = v32;
    uint64_t v21 = v54;
    if (!a3) {
      return v19;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.subtracting<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v28 = *MEMORY[0x263EF8340];
  if (!*(void *)(a2 + 16))
  {
    swift_release();
    return MEMORY[0x263F8EE88];
  }
  uint64_t v26 = a1;
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = a2 + 56;
    v25[0] = a1 + 32;
    swift_bridgeObjectRetain();
    uint64_t v5 = 0;
    while (1)
    {
      uint64_t v6 = (uint64_t *)(v25[0] + 16 * v5);
      uint64_t v8 = *v6;
      uint64_t v7 = v6[1];
      ++v5;
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      Swift::Int v9 = Hasher._finalize()();
      uint64_t v10 = -1 << *(unsigned char *)(v2 + 32);
      unint64_t v11 = v9 & ~v10;
      if ((*(void *)(v4 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11))
      {
        uint64_t v12 = *(void *)(v2 + 48);
        uint64_t v13 = (void *)(v12 + 16 * v11);
        BOOL v14 = *v13 == v8 && v13[1] == v7;
        if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          uint64_t isStackAllocationSafe = swift_bridgeObjectRelease();
          uint64_t v27 = v5;
LABEL_19:
          char v19 = *(unsigned char *)(v2 + 32);
          unint64_t v20 = (unint64_t)((1 << v19) + 63) >> 6;
          size_t v21 = 8 * v20;
          if ((v19 & 0x3Fu) < 0xE
            || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), isStackAllocationSafe))
          {
            MEMORY[0x270FA5388](isStackAllocationSafe);
            memcpy((char *)v25 - ((v21 + 15) & 0x3FFFFFFFFFFFFFF0), (const void *)(v2 + 56), v21);
            uint64_t v22 = specialized closure #1 in _NativeSet.subtracting<A>(_:)((uint64_t)v25 - ((v21 + 15) & 0x3FFFFFFFFFFFFFF0), v20, v2, v11, &v26);
            swift_release();
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v23 = (void *)swift_slowAlloc();
            memcpy(v23, (const void *)(v2 + 56), v21);
            uint64_t v22 = specialized closure #1 in _NativeSet.subtracting<A>(_:)((uint64_t)v23, v20, v2, v11, &v26);
            swift_release();
            swift_bridgeObjectRelease();
            MEMORY[0x24C5B4790](v23, -1, -1);
          }
          return v22;
        }
        uint64_t v15 = ~v10;
        while (1)
        {
          unint64_t v11 = (v11 + 1) & v15;
          if (((*(void *)(v4 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
            break;
          }
          uint64_t v16 = (void *)(v12 + 16 * v11);
          BOOL v17 = *v16 == v8 && v16[1] == v7;
          if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            uint64_t v27 = v5;
            uint64_t isStackAllocationSafe = swift_bridgeObjectRelease();
            goto LABEL_19;
          }
        }
      }
      swift_bridgeObjectRelease();
      if (v5 == v3)
      {
        swift_bridgeObjectRelease();
        return v2;
      }
    }
  }
  return v2;
}

uint64_t specialized closure #1 in _NativeSet.subtracting<A>(_:)(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v6 = *(void *)(a3 + 16);
  *(void *)(result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  uint64_t v30 = (unint64_t *)result;
  uint64_t v31 = v6 - 1;
  uint64_t v8 = *a5;
  unint64_t v7 = a5[1];
  unint64_t v9 = *(void *)(*a5 + 16);
  if (v7 == v9)
  {
LABEL_2:
    swift_retain();
    return specialized _NativeSet.extractSubset(using:count:)(v30, a2, v31, a3);
  }
  uint64_t v32 = a3 + 56;
  while ((v7 & 0x8000000000000000) == 0)
  {
    if (v7 >= v9) {
      goto LABEL_29;
    }
    uint64_t v11 = v8 + 16 * v7;
    uint64_t v13 = *(void *)(v11 + 32);
    uint64_t v12 = *(void *)(v11 + 40);
    a5[1] = v7 + 1;
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    Swift::Int v14 = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(a3 + 32);
    unint64_t v16 = v14 & ~v15;
    unint64_t v17 = v16 >> 6;
    uint64_t v18 = 1 << v16;
    if (((1 << v16) & *(void *)(v32 + 8 * (v16 >> 6))) == 0) {
      goto LABEL_4;
    }
    uint64_t v19 = *(void *)(a3 + 48);
    unint64_t v20 = (void *)(v19 + 16 * v16);
    BOOL v21 = *v20 == v13 && v20[1] == v12;
    if (!v21 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v24 = ~v15;
      for (unint64_t i = v16 + 1; ; unint64_t i = v26 + 1)
      {
        unint64_t v26 = i & v24;
        if (((*(void *)(v32 + (((i & v24) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v24)) & 1) == 0) {
          break;
        }
        uint64_t v27 = (void *)(v19 + 16 * v26);
        BOOL v28 = *v27 == v13 && v27[1] == v12;
        if (v28 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          uint64_t result = swift_bridgeObjectRelease();
          unint64_t v17 = v26 >> 6;
          uint64_t v18 = 1 << v26;
          goto LABEL_15;
        }
      }
LABEL_4:
      uint64_t result = swift_bridgeObjectRelease();
      goto LABEL_5;
    }
    uint64_t result = swift_bridgeObjectRelease();
LABEL_15:
    unint64_t v22 = v30[v17];
    v30[v17] = v22 & ~v18;
    if ((v18 & v22) != 0)
    {
      uint64_t v23 = v31 - 1;
      if (__OFSUB__(v31, 1)) {
        goto LABEL_30;
      }
      --v31;
      if (!v23) {
        return MEMORY[0x263F8EE88];
      }
    }
LABEL_5:
    uint64_t v8 = *a5;
    unint64_t v7 = a5[1];
    unint64_t v9 = *(void *)(*a5 + 16);
    if (v7 == v9) {
      goto LABEL_2;
    }
  }
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.extractSubset(using:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    uint64_t v8 = MEMORY[0x263F8EE88];
LABEL_36:
    swift_release();
    return v8;
  }
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v8 = result;
  uint64_t v30 = a2;
  if (a2 < 1) {
    unint64_t v9 = 0;
  }
  else {
    unint64_t v9 = *a1;
  }
  uint64_t v10 = 0;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    uint64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      goto LABEL_39;
    }
    if (v14 >= v30) {
      goto LABEL_36;
    }
    unint64_t v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      uint64_t v10 = v14 + 1;
      if (v14 + 1 >= v30) {
        goto LABEL_36;
      }
      unint64_t v15 = a1[v10];
      if (!v15)
      {
        uint64_t v10 = v14 + 2;
        if (v14 + 2 >= v30) {
          goto LABEL_36;
        }
        unint64_t v15 = a1[v10];
        if (!v15) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    unint64_t v17 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v13);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v20 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6))) != 0)
    {
      unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v26 = v22 == v25;
        if (v22 == v25) {
          unint64_t v22 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v11 + 8 * v22);
      }
      while (v27 == -1);
      unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(void *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    BOOL v28 = (void *)(*(void *)(v8 + 48) + 16 * v23);
    *BOOL v28 = v18;
    v28[1] = v19;
    ++*(void *)(v8 + 16);
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5) {
      goto LABEL_36;
    }
  }
  uint64_t v16 = v14 + 3;
  if (v16 >= v30) {
    goto LABEL_36;
  }
  unint64_t v15 = a1[v16];
  if (v15)
  {
    uint64_t v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v10 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v10 >= v30) {
      goto LABEL_36;
    }
    unint64_t v15 = a1[v10];
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.genericIntersection<A>(_:)(uint64_t isStackAllocationSafe, uint64_t a2, uint64_t (*a3)(char *, unint64_t, uint64_t, uint64_t))
{
  uint64_t v5 = isStackAllocationSafe;
  v12[1] = *MEMORY[0x263EF8340];
  char v6 = *(unsigned char *)(a2 + 32);
  unint64_t v7 = (unint64_t)((1 << v6) + 63) >> 6;
  size_t v8 = 8 * v7;
  if ((v6 & 0x3Fu) <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x270FA5388](isStackAllocationSafe);
    bzero((char *)v12 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    uint64_t v9 = a3((char *)v12 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v7, v5, a2);
    swift_release();
  }
  else
  {
    uint64_t v10 = (void *)swift_slowAlloc();
    bzero(v10, v8);
    uint64_t v9 = a3((char *)v10, v7, v5, a2);
    swift_release();
    MEMORY[0x24C5B4790](v10, -1, -1);
  }
  return v9;
}

uint64_t specialized closure #1 in _NativeSet.genericIntersection<A>(_:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  uint64_t v31 = *(void *)(a3 + 16);
  if (!v31)
  {
    uint64_t v26 = 0;
    goto LABEL_27;
  }
  uint64_t v32 = a4 + 56;
  uint64_t v30 = a3 + 32;
  swift_bridgeObjectRetain();
  uint64_t v28 = 0;
  for (uint64_t i = 0; i != v31; ++i)
  {
    unint64_t v7 = (uint64_t *)(v30 + 16 * i);
    uint64_t v9 = *v7;
    uint64_t v8 = v7[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    Swift::Int v10 = Hasher._finalize()();
    uint64_t v11 = -1 << *(unsigned char *)(a4 + 32);
    unint64_t v12 = v10 & ~v11;
    unint64_t v13 = v12 >> 6;
    uint64_t v14 = 1 << v12;
    if (((1 << v12) & *(void *)(v32 + 8 * (v12 >> 6))) == 0) {
      goto LABEL_3;
    }
    uint64_t v15 = *(void *)(a4 + 48);
    uint64_t v16 = (void *)(v15 + 16 * v12);
    BOOL v17 = *v16 == v9 && v16[1] == v8;
    if (!v17 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v21 = ~v11;
      for (unint64_t j = v12 + 1; ; unint64_t j = v23 + 1)
      {
        unint64_t v23 = j & v21;
        if (((*(void *)(v32 + (((j & v21) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (j & v21)) & 1) == 0) {
          break;
        }
        char v24 = (void *)(v15 + 16 * v23);
        BOOL v25 = *v24 == v9 && v24[1] == v8;
        if (v25 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          uint64_t result = swift_bridgeObjectRelease();
          unint64_t v13 = v23 >> 6;
          uint64_t v14 = 1 << v23;
          goto LABEL_12;
        }
      }
LABEL_3:
      swift_bridgeObjectRelease();
      continue;
    }
    uint64_t result = swift_bridgeObjectRelease();
LABEL_12:
    unint64_t v19 = a1[v13];
    a1[v13] = v14 | v19;
    if ((v14 & v19) == 0 && __OFADD__(v28++, 1))
    {
      __break(1u);
      return result;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v5 = a2;
  uint64_t v26 = v28;
LABEL_27:
  swift_retain();
  return specialized _NativeSet.extractSubset(using:count:)(a1, v5, v26, a4);
}

{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  Swift::Int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  BOOL v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t i;
  unint64_t v29;
  void *v30;
  BOOL v31;
  uint64_t v33;
  uint64_t v35;
  int64_t v36;
  uint64_t v39;

  uint64_t v35 = a3 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(a3 + 32);
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  else {
    uint64_t v5 = -1;
  }
  char v6 = v5 & *(void *)(a3 + 64);
  uint64_t v36 = (unint64_t)(v4 + 63) >> 6;
  unint64_t v39 = a4 + 56;
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v8 = 0;
  uint64_t v9 = 0;
LABEL_5:
  uint64_t v33 = v8;
  while (1)
  {
    if (v6)
    {
      Swift::Int v10 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      uint64_t v11 = v10 | (v9 << 6);
      goto LABEL_25;
    }
    unint64_t v12 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_48;
    }
    if (v12 >= v36) {
      goto LABEL_46;
    }
    unint64_t v13 = *(void *)(v35 + 8 * v12);
    ++v9;
    if (!v13)
    {
      uint64_t v9 = v12 + 1;
      if (v12 + 1 >= v36) {
        goto LABEL_46;
      }
      unint64_t v13 = *(void *)(v35 + 8 * v9);
      if (!v13)
      {
        uint64_t v9 = v12 + 2;
        if (v12 + 2 >= v36) {
          goto LABEL_46;
        }
        unint64_t v13 = *(void *)(v35 + 8 * v9);
        if (!v13)
        {
          uint64_t v9 = v12 + 3;
          if (v12 + 3 >= v36) {
            goto LABEL_46;
          }
          unint64_t v13 = *(void *)(v35 + 8 * v9);
          if (!v13) {
            break;
          }
        }
      }
    }
LABEL_24:
    char v6 = (v13 - 1) & v13;
    uint64_t v11 = __clz(__rbit64(v13)) + (v9 << 6);
LABEL_25:
    uint64_t v15 = (uint64_t *)(*(void *)(a3 + 48) + 16 * v11);
    BOOL v17 = *v15;
    uint64_t v16 = v15[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t v18 = Hasher._finalize()();
    unint64_t v19 = -1 << *(unsigned char *)(a4 + 32);
    uint64_t v20 = v18 & ~v19;
    uint64_t v21 = v20 >> 6;
    unint64_t v22 = 1 << v20;
    if (((1 << v20) & *(void *)(v39 + 8 * (v20 >> 6))) == 0) {
      goto LABEL_6;
    }
    unint64_t v23 = *(void *)(a4 + 48);
    char v24 = (void *)(v23 + 16 * v20);
    BOOL v25 = *v24 == v17 && v24[1] == v16;
    if (v25 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      uint64_t result = swift_bridgeObjectRelease();
LABEL_32:
      uint64_t v26 = a1[v21];
      a1[v21] = v22 | v26;
      if ((v22 & v26) == 0)
      {
        uint64_t v8 = v33 + 1;
        if (!__OFADD__(v33, 1)) {
          goto LABEL_5;
        }
        __break(1u);
LABEL_46:
        swift_release();
        swift_retain();
        return specialized _NativeSet.extractSubset(using:count:)(a1, a2, v33, a4);
      }
    }
    else
    {
      uint64_t v27 = ~v19;
      for (uint64_t i = v20 + 1; ; uint64_t i = v29 + 1)
      {
        uint64_t v29 = i & v27;
        if (((*(void *)(v39 + (((i & v27) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v27)) & 1) == 0) {
          break;
        }
        uint64_t v30 = (void *)(v23 + 16 * v29);
        uint64_t v31 = *v30 == v17 && v30[1] == v16;
        if (v31 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          uint64_t result = swift_bridgeObjectRelease();
          uint64_t v21 = v29 >> 6;
          unint64_t v22 = 1 << v29;
          goto LABEL_32;
        }
      }
LABEL_6:
      uint64_t result = swift_bridgeObjectRelease();
    }
  }
  uint64_t v14 = v12 + 4;
  if (v14 >= v36) {
    goto LABEL_46;
  }
  unint64_t v13 = *(void *)(v35 + 8 * v14);
  if (v13)
  {
    uint64_t v9 = v14;
    goto LABEL_24;
  }
  while (1)
  {
    uint64_t v9 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v9 >= v36) {
      goto LABEL_46;
    }
    unint64_t v13 = *(void *)(v35 + 8 * v9);
    ++v14;
    if (v13) {
      goto LABEL_24;
    }
  }
LABEL_48:
  __break(1u);
  return result;
}

uint64_t specialized Dictionary.startIndex.getter(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2;
  }
  unint64_t v8 = v7 - 2;
  uint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 64;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 56;
  uint64_t v5 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a1 + 56);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v10 = 0;
  uint64_t v28 = (void *)MEMORY[0x263F8EE78];
  while (v7)
  {
    unint64_t v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v12 = v11 | (v10 << 6);
LABEL_22:
    uint64_t v16 = *(void *)(*(void *)(a2 + 136) + 48);
    if (*(void *)(v16 + 16))
    {
      BOOL v17 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v12);
      uint64_t v18 = *v17;
      uint64_t v19 = v17[1];
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      uint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v19);
      if (v21)
      {
        unint64_t v22 = (uint64_t *)(*(void *)(v16 + 56) + 16 * v20);
        uint64_t v23 = v22[1];
        uint64_t v27 = *v22;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v28[2] + 1, 1, v28);
          uint64_t v28 = (void *)result;
        }
        unint64_t v25 = v28[2];
        unint64_t v24 = v28[3];
        if (v25 >= v24 >> 1)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v24 > 1), v25 + 1, 1, v28);
          uint64_t v28 = (void *)result;
        }
        v28[2] = v25 + 1;
        uint64_t v26 = &v28[2 * v25];
        v26[4] = v27;
        v26[5] = v23;
      }
      else
      {
        swift_bridgeObjectRelease_n();
        uint64_t result = swift_bridgeObjectRelease();
      }
    }
  }
  int64_t v13 = v10 + 1;
  if (__OFADD__(v10, 1))
  {
    __break(1u);
    goto LABEL_32;
  }
  if (v13 >= v8) {
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v13);
  ++v10;
  if (v14) {
    goto LABEL_21;
  }
  int64_t v10 = v13 + 1;
  if (v13 + 1 >= v8) {
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v10);
  if (v14) {
    goto LABEL_21;
  }
  int64_t v10 = v13 + 2;
  if (v13 + 2 >= v8) {
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v10);
  if (v14) {
    goto LABEL_21;
  }
  int64_t v10 = v13 + 3;
  if (v13 + 3 >= v8) {
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v10);
  if (v14)
  {
LABEL_21:
    unint64_t v7 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v10 << 6);
    goto LABEL_22;
  }
  int64_t v15 = v13 + 4;
  if (v15 >= v8)
  {
LABEL_30:
    swift_release();
    return (uint64_t)v28;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14)
  {
    int64_t v10 = v15;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v10 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v10 >= v8) {
      goto LABEL_30;
    }
    unint64_t v14 = *(void *)(v4 + 8 * v10);
    ++v15;
    if (v14) {
      goto LABEL_21;
    }
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t specialized KeyRotation.activeGroups(activeUseCases:)()
{
  v1[6] = v0;
  uint64_t v2 = type metadata accessor for Date();
  v1[7] = v2;
  v1[8] = *(void *)(v2 - 8);
  v1[9] = swift_task_alloc();
  v1[10] = swift_task_alloc();
  v1[11] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: UseCaseGroup));
  v1[12] = swift_task_alloc();
  v1[13] = swift_task_alloc();
  v1[14] = swift_task_alloc();
  v1[15] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized KeyRotation.activeGroups(activeUseCases:), v0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  void *v44;
  int64_t v45;
  void *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  unint64_t v60 = v0;
  unint64_t v1 = swift_bridgeObjectRetain();
  uint64_t v2 = specialized _NativeDictionary.filter(_:)(v1);
  uint64_t v44 = (void *)(v0 + 48);
  *(void *)(v0 + 128) = 0;
  swift_bridgeObjectRelease();
  uint64_t v3 = *(void *)(v2 + 16);
  if (!v3)
  {
    swift_release();
    unint64_t v22 = MEMORY[0x263F8EE78];
LABEL_29:
    *(void *)(v0 + 136) = v22;
    if (one-time initialization token for daemon != -1) {
      goto LABEL_42;
    }
    goto LABEL_30;
  }
  uint64_t v54 = *(void *)(v0 + 88);
  uint64_t v59 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
  uint64_t v4 = specialized Dictionary.startIndex.getter(v2);
  if (v4 < 0 || v4 >= 1 << *(unsigned char *)(v2 + 32)) {
    goto LABEL_41;
  }
  uint64_t v6 = 0;
  unint64_t v7 = v2 + 64;
  uint64_t v51 = *(void *)(v0 + 112);
  uint64_t v52 = *(void *)(v0 + 120);
  uint64_t v55 = v2 + 80;
  uint64_t v49 = *(void *)(v0 + 96);
  uint64_t v50 = *(void *)(v0 + 104);
  uint64_t v45 = v3;
  uint64_t v46 = (void *)v0;
  uint64_t v53 = v2;
  uint64_t v47 = v5;
  uint64_t v48 = v2 + 64;
  while (1)
  {
    int64_t v8 = (unint64_t)v4 >> 6;
    if ((*(void *)(v7 + 8 * ((unint64_t)v4 >> 6)) & (1 << v4)) == 0) {
      break;
    }
    if (*(_DWORD *)(v2 + 36) != v5) {
      goto LABEL_37;
    }
    uint64_t v56 = v6;
    uint64_t v57 = 1 << v4;
    int64_t v10 = *(void **)(v0 + 112);
    uint64_t v9 = *(void **)(v0 + 120);
    unint64_t v11 = (uint64_t)v9 + *(int *)(v54 + 48);
    unint64_t v12 = *(uint64_t **)(v0 + 104);
    uint64_t v58 = *(uint64_t **)(v0 + 96);
    int64_t v13 = *(void *)(v2 + 56);
    unint64_t v14 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v4);
    uint64_t v16 = *v14;
    int64_t v15 = v14[1];
    uint64_t v0 = v4;
    BOOL v17 = type metadata accessor for UseCaseGroup();
    _s8CipherML12UseCaseGroupVWOcTm_1(v13 + *(void *)(*(void *)(v17 - 8) + 72) * v0, v11, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
    *uint64_t v9 = v16;
    *(void *)(v52 + 8) = v15;
    *int64_t v10 = v16;
    *(void *)(v51 + 8) = v15;
    _s8CipherML12UseCaseGroupVWOcTm_1(v11, (uint64_t)v10 + *(int *)(v54 + 48), (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
    outlined init with take of SymmetricPirClientConfig?((uint64_t)v10, (uint64_t)v12, &demangling cache variable for type metadata for (key: String, value: UseCaseGroup));
    swift_bridgeObjectRetain_n();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v9, &demangling cache variable for type metadata for (key: String, value: UseCaseGroup));
    uint64_t v18 = *(int *)(v54 + 48);
    uint64_t v19 = (uint64_t)v58 + v18;
    uint64_t v20 = *v12;
    char v21 = *(void *)(v50 + 8);
    *uint64_t v58 = *v12;
    *(void *)(v49 + 8) = v21;
    _s8CipherML12UseCaseGroupVWOcTm_1((uint64_t)v12 + v18, (uint64_t)v58 + v18, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
    swift_bridgeObjectRetain();
    _s8CipherML12UseCaseGroupVWOhTm_2(v19, (uint64_t (*)(void))type metadata accessor for UseCaseGroup);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v12, &demangling cache variable for type metadata for (key: String, value: UseCaseGroup));
    unint64_t v22 = v59;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v59 + 16) + 1, 1);
      unint64_t v22 = v59;
    }
    unint64_t v24 = *(void *)(v22 + 16);
    uint64_t v23 = *(void *)(v22 + 24);
    uint64_t v2 = v53;
    if (v24 >= v23 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v23 > 1, v24 + 1, 1);
      unint64_t v22 = v59;
    }
    *(void *)(v22 + 16) = v24 + 1;
    unint64_t v25 = v22 + 16 * v24;
    *(void *)(v25 + 32) = v20;
    *(void *)(v25 + 40) = v21;
    uint64_t v26 = 1 << *(unsigned char *)(v53 + 32);
    if (v0 >= v26) {
      goto LABEL_38;
    }
    unint64_t v7 = v48;
    uint64_t v27 = *(void *)(v48 + 8 * v8);
    if ((v27 & v57) == 0) {
      goto LABEL_39;
    }
    uint64_t v5 = v47;
    if (*(_DWORD *)(v53 + 36) != v47) {
      goto LABEL_40;
    }
    uint64_t v28 = v27 & (-2 << (v0 & 0x3F));
    if (v28)
    {
      uint64_t v4 = __clz(__rbit64(v28)) | v0 & 0xFFFFFFFFFFFFFFC0;
      uint64_t v29 = v45;
      uint64_t v0 = (uint64_t)v46;
      goto LABEL_23;
    }
    uint64_t v30 = v8 + 1;
    uint64_t v31 = (unint64_t)(v26 + 63) >> 6;
    uint64_t v29 = v45;
    uint64_t v0 = (uint64_t)v46;
    if (v8 + 1 < v31)
    {
      uint64_t v32 = *(void *)(v48 + 8 * v30);
      if (v32)
      {
LABEL_21:
        uint64_t v4 = __clz(__rbit64(v32)) + (v30 << 6);
        goto LABEL_23;
      }
      while (v31 - 2 != v8)
      {
        uint64_t v32 = *(void *)(v55 + 8 * v8++);
        if (v32)
        {
          uint64_t v30 = v8 + 1;
          goto LABEL_21;
        }
      }
    }
    uint64_t v4 = 1 << *(unsigned char *)(v53 + 32);
LABEL_23:
    uint64_t v6 = v56 + 1;
    if (v56 + 1 == v29)
    {
      swift_release();
      goto LABEL_29;
    }
    if (v4 < 0 || v4 >= v26) {
      goto LABEL_41;
    }
  }
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  swift_once();
LABEL_30:
  uint64_t v33 = type metadata accessor for Logger();
  __swift_project_value_buffer(v33, (uint64_t)static Logger.daemon);
  swift_bridgeObjectRetain_n();
  uint64_t v34 = Logger.logObject.getter();
  uint64_t v35 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v34, v35))
  {
    uint64_t v36 = (uint8_t *)swift_slowAlloc();
    uint64_t v37 = swift_slowAlloc();
    *(_DWORD *)uint64_t v36 = 136315138;
    uint64_t v59 = v37;
    unint64_t v38 = swift_bridgeObjectRetain();
    unint64_t v39 = MEMORY[0x24C5B3560](v38, MEMORY[0x263F8D310]);
    char v41 = v40;
    swift_bridgeObjectRelease();
    *(v44 - 1) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v41, &v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_249C3F000, v34, v35, "Skipping groups that manage their own networking: %s", v36, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5B4790](v37, -1, -1);
    MEMORY[0x24C5B4790](v36, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  unint64_t v42 = *(void *)(*(void *)(v0 + 48) + 144);
  *(void *)(v0 + 144) = v42;
  return MEMORY[0x270FA2498](specialized KeyRotation.activeGroups(activeUseCases:), v42, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  unint64_t v1 = v0[18];
  uint64_t v2 = v0[16];
  uint64_t v4 = v0[9];
  uint64_t v3 = v0[10];
  uint64_t v5 = v0[7];
  uint64_t v6 = v0[8];
  int64_t v13 = v0[6];
  (*(void (**)(void))(v1 + OBJC_IVAR____TtC8CipherML20ActiveUseCaseTracker_currentDate))();
  Date.addingTimeInterval(_:)();
  unint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v4, v5);
  int64_t v8 = (uint64_t *)(v1 + OBJC_IVAR____TtC8CipherML20ActiveUseCaseTracker_lastUsed);
  swift_beginAccess();
  uint64_t v9 = *v8;
  int64_t v10 = swift_task_alloc();
  *(void *)(v10 + 16) = v3;
  swift_bridgeObjectRetain();
  unint64_t v11 = specialized _NativeDictionary.filter(_:)((uint64_t)closure #1 in ActiveUseCaseTracker.activeUseCases.getterpartial apply, v10, v9);
  v0[19] = v2;
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  v0[20] = specialized Set.init<A>(_:)(v11);
  v7(v3, v5);
  return MEMORY[0x270FA2498](specialized KeyRotation.activeGroups(activeUseCases:), v13, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v9;

  unint64_t v1 = v0[20];
  uint64_t v2 = v0[17];
  uint64_t v3 = v0[6];
  swift_retain();
  uint64_t v4 = specialized Sequence.compactMap<A>(_:)(v1, v3);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v5 = specialized Set.init<A>(_:)(v4);
  swift_bridgeObjectRelease();
  uint64_t v6 = specialized _NativeSet.subtracting<A>(_:)(v2, v5);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v7 = (uint64_t (*)(uint64_t))v0[1];
  return v7(v6);
}

uint64_t partial apply for closure #2 in KeyRotation.collectKeyStatusesToUpload(groupName:userId:keyStatuses:activeUseCases:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return closure #2 in KeyRotation.collectKeyStatusesToUpload(groupName:userId:keyStatuses:activeUseCases:)(a1, *(char **)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(char **)(v2 + 40), a2);
}

uint64_t outlined init with copy of NetworkManager(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t partial apply for closure #1 in KeyRotation.uploadKeys(userId:keyStatusesToUpload:networkManagerConfig:)(uint64_t *a1)
{
  return closure #1 in KeyRotation.uploadKeys(userId:keyStatusesToUpload:networkManagerConfig:)(a1, *(void *)(v1 + 16));
}

uint64_t sub_249E3CCE0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t block_copy_helper_5(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_5()
{
  return swift_release();
}

uint64_t partial apply for closure #1 in KeyRotation.run()(uint64_t a1)
{
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return closure #1 in KeyRotation.run()(a1, v5, v4);
}

uint64_t partial apply for closure #2 in KeyRotation.run()()
{
  return closure #2 in KeyRotation.run()(v0);
}

uint64_t type metadata accessor for KeyRotation()
{
  return self;
}

uint64_t sub_249E3CE18()
{
  return objectdestroy_25Tm(MEMORY[0x263F8EED8], MEMORY[0x263F8EEA0]);
}

uint64_t sub_249E3CE44@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1 + 192;
  swift_beginAccess();
  return outlined init with copy of AMDPbHEConfig.OneOf_Config?(v3, a2, &demangling cache variable for type metadata for NetworkManager?);
}

uint64_t method lookup function for KeyRotation(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for KeyRotation);
}

uint64_t dispatch thunk of KeyRotation.keyUploadService.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of KeyRotation.keyUploadService.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of KeyRotation.keyUploadService.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of KeyRotation.__allocating_init(configCache:keyStorage:allowList:activeUseCaseTracker:networkDelegation:coordinator:currentTime:)()
{
  return (*(uint64_t (**)(void))(v0 + 176))();
}

uint64_t dispatch thunk of KeyRotation.activeGroups(activeUseCases:)(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)v1 + 184) + **(int **)(*(void *)v1 + 184));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = dispatch thunk of KeyRotation.activeGroups(activeUseCases:);
  return v6(a1);
}

uint64_t dispatch thunk of KeyRotation.keyCreationCutoff(groupName:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of KeyRotation.areKeysExpired(groupName:)(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(*(void *)v2 + 200) + **(int **)(*(void *)v2 + 200));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = dispatch thunk of XPCHandler.queryStatus(for:options:);
  return v8(a1, a2);
}

uint64_t dispatch thunk of KeyRotation.rotateUserId(groupName:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)v3 + 208)
                                                          + **(int **)(*(void *)v3 + 208));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  *uint64_t v8 = v4;
  v8[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return v10(a1, a2, a3);
}

uint64_t dispatch thunk of KeyRotation.collectKeyStatusesToUpload(groupName:userId:keyStatuses:activeUseCases:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v16 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)v6 + 216)
                                                                                     + **(int **)(*(void *)v6 + 216));
  unint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v7 + 16) = v14;
  *unint64_t v14 = v7;
  v14[1] = dispatch thunk of XPCHandler.queryStatus(for:options:);
  return v16(a1, a2, a3, a4, a5, a6);
}

uint64_t dispatch thunk of KeyRotation.uploadKeys(userId:keyStatusesToUpload:networkManagerConfig:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)v3 + 224)
                                                          + **(int **)(*(void *)v3 + 224));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  *uint64_t v8 = v4;
  v8[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return v10(a1, a2, a3);
}

uint64_t dispatch thunk of KeyRotation.rotateKeys(groupName:userId:keyStatuses:activeUseCases:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v16 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)v6 + 232)
                                                                                     + **(int **)(*(void *)v6 + 232));
  unint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v7 + 16) = v14;
  *unint64_t v14 = v7;
  v14[1] = protocol witness for NetworkManager.uploadKeys(evaluationKeys:userId:) in conformance AspireNetworkManager;
  return v16(a1, a2, a3, a4, a5, a6);
}

uint64_t dispatch thunk of KeyRotation.rotateGroup(groupName:activeUseCases:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)v3 + 240)
                                                          + **(int **)(*(void *)v3 + 240));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  *uint64_t v8 = v4;
  v8[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return v10(a1, a2, a3);
}

uint64_t dispatch thunk of KeyRotation.run()()
{
  uint64_t v4 = (uint64_t (*)(void))(*(void *)(*(void *)v0 + 248) + **(int **)(*(void *)v0 + 248));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return v4();
}

uint64_t dispatch thunk of KeyRotation.runWithCoordinator(useCase:)(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(*(void *)v2 + 256) + **(int **)(*(void *)v2 + 256));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return v8(a1, a2);
}

uint64_t dispatch thunk of KeyRotation.run(activeUseCases:)(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)v1 + 264) + **(int **)(*(void *)v1 + 264));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return v6(a1);
}

uint64_t dispatch thunk of KeyRotation.cancel()()
{
  uint64_t v4 = (uint64_t (*)(void))(*(void *)(*(void *)v0 + 272) + **(int **)(*(void *)v0 + 272));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return v4();
}

uint64_t sub_249E3DB70()
{
  return objectdestroy_25Tm(MEMORY[0x263F8EEE8], MEMORY[0x263F8EED8]);
}

uint64_t objectdestroy_25Tm(void (*a1)(void), void (*a2)(void))
{
  a1(*(void *)(v2 + 16));
  a2(*(void *)(v2 + 32));
  return MEMORY[0x270FA0238](v2, 40, 7);
}

uint64_t partial apply for closure #1 in closure #2 in KeyRotation.run()(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = protocol witness for NetworkManager.uploadKeys(evaluationKeys:userId:) in conformance AspireNetworkManager;
  return closure #1 in closure #2 in KeyRotation.run()(a1, v4, v5, v6);
}

uint64_t sub_249E3DCA8()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t _s8CipherML0A7MLErrorOACs5ErrorAAWlTm_9(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s8CipherML12UseCaseGroupVWOhTm_2(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _s8CipherML12UseCaseGroupVWOcTm_1(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t _s8CipherML12UseCaseGroupVWObTm_1(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

Swift::Int specialized Set.init(_nonEmptyArrayLiteral:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
    uint64_t v3 = static _SetStorage.allocate(capacity:)();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v25 = a1 + 32;
    while (1)
    {
      uint64_t v6 = (uint64_t *)(v25 + 16 * v4);
      uint64_t v8 = *v6;
      uint64_t v7 = v6[1];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      Swift::Int result = Hasher._finalize()();
      uint64_t v10 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v11 = result & ~v10;
      unint64_t v12 = v11 >> 6;
      uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
      uint64_t v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        uint64_t v15 = *(void *)(v3 + 48);
        uint64_t v16 = (void *)(v15 + 16 * v11);
        BOOL v17 = *v16 == v8 && v16[1] == v7;
        if (v17 || (Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
        {
LABEL_3:
          swift_bridgeObjectRelease();
          goto LABEL_4;
        }
        uint64_t v18 = ~v10;
        while (1)
        {
          unint64_t v11 = (v11 + 1) & v18;
          unint64_t v12 = v11 >> 6;
          uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
          uint64_t v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0) {
            break;
          }
          uint64_t v19 = (void *)(v15 + 16 * v11);
          if (*v19 != v8 || v19[1] != v7)
          {
            Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)();
            if ((result & 1) == 0) {
              continue;
            }
          }
          goto LABEL_3;
        }
      }
      *(void *)(v5 + 8 * v12) = v14 | v13;
      char v21 = (void *)(*(void *)(v3 + 48) + 16 * v11);
      *char v21 = v8;
      v21[1] = v7;
      uint64_t v22 = *(void *)(v3 + 16);
      BOOL v23 = __OFADD__(v22, 1);
      uint64_t v24 = v22 + 1;
      if (v23)
      {
        __break(1u);
        return result;
      }
      *(void *)(v3 + 16) = v24;
LABEL_4:
      if (++v4 == v1) {
        return v3;
      }
    }
  }
  return MEMORY[0x263F8EE88];
}

uint64_t closure #1 in ActiveUseCaseTracker.activeUseCases.getterpartial apply(uint64_t *a1, uint64_t a2)
{
  return partial apply for closure #1 in ActiveUseCaseTracker.activeUseCases.getter(a1, a2) & 1;
}

uint64_t ScheduledActivity.__allocating_init(handler:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v2 + 80) - 8) + 32))(v2 + *(void *)(*(void *)v2 + 96), a1);
  return v2;
}

Swift::Void __swiftcall ScheduledActivity.register()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = *(void *)(*v0 + 80);
  uint64_t v4 = *(void *)(v2 + 88);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v3, v4);
  uint64_t v7 = v6;
  uint64_t v8 = implicit closure #1 in ScheduledActivity.register()((uint64_t)v1 + *(void *)(*v1 + 96), v3, v4);
  uint64_t v10 = v9;
  id v11 = objc_msgSend(self, sel_sharedScheduler);
  unint64_t v12 = (void *)MEMORY[0x24C5B33F0](v5, v7);
  uint64_t v13 = (void *)swift_allocObject();
  v13[2] = v5;
  v13[3] = v7;
  v13[4] = v8;
  v13[5] = v10;
  v15[4] = partial apply for closure #1 in ScheduledActivity.registerTask(identifier:handler:);
  v15[5] = v13;
  v15[0] = MEMORY[0x263EF8330];
  v15[1] = 1107296256;
  _OWORD v15[2] = thunk for @escaping @callee_guaranteed (@guaranteed BGSystemTask) -> ();
  v15[3] = &block_descriptor_6;
  uint64_t v14 = _Block_copy(v15);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  objc_msgSend(v11, sel_registerForTaskWithIdentifier_usingQueue_launchHandler_, v12, 0, v14);
  _Block_release(v14);
  swift_bridgeObjectRelease();
  swift_release();
}

uint64_t SendableBGSystemTask.lock.getter()
{
  return swift_retain();
}

uint64_t SendableBGSystemTask.__allocating_init(task:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<BGSystemTask, os_unfair_lock_s>);
  uint64_t v3 = swift_allocObject();
  *(_DWORD *)(v3 + 24) = 0;
  *(void *)(v3 + 16) = a1;
  *(void *)(v2 + 16) = v3;
  return v2;
}

uint64_t SendableBGSystemTask.init(task:)(uint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<BGSystemTask, os_unfair_lock_s>);
  uint64_t v3 = swift_allocObject();
  *(_DWORD *)(v3 + 24) = 0;
  *(void *)(v3 + 16) = a1;
  *(void *)(v1 + 16) = v3;
  return v1;
}

Swift::Void __swiftcall SendableBGSystemTask.setTaskCompleted()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v2 = (id *)&v1[4];
  uint64_t v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  closure #1 in SendableBGSystemTask.setTaskCompleted()(v2);
  os_unfair_lock_unlock(v3);
}

id closure #1 in SendableBGSystemTask.setTaskCompleted()(id *a1)
{
  return objc_msgSend(*a1, sel_setTaskCompleted);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SendableBGSystemTask.setTaskExpiredWithRetryAfter(_:)(Swift::Double a1)
{
  uint64_t v2 = *(os_unfair_lock_s **)(v1 + 16);
  uint64_t v3 = (void **)&v2[4];
  uint64_t v4 = v2 + 6;
  os_unfair_lock_lock(v2 + 6);
  partial apply for closure #1 in SendableBGSystemTask.setTaskExpiredWithRetryAfter(_:)(v3);
  os_unfair_lock_unlock(v4);
}

id closure #1 in SendableBGSystemTask.setTaskExpiredWithRetryAfter(_:)(void **a1)
{
  v4[1] = *(id *)MEMORY[0x263EF8340];
  uint64_t v1 = *a1;
  v4[0] = 0;
  if (objc_msgSend(v1, sel_setTaskExpiredWithRetryAfter_error_, v4)) {
    return v4[0];
  }
  id v3 = v4[0];
  _convertNSErrorToError(_:)();

  return (id)swift_willThrow();
}

void SendableBGSystemTask.setExpirationHandler(_:)()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v2 = (void **)&v1[4];
  id v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  partial apply for closure #1 in SendableBGSystemTask.setExpirationHandler(_:)(v2);
  os_unfair_lock_unlock(v3);
}

void closure #1 in SendableBGSystemTask.setExpirationHandler(_:)(void **a1, uint64_t a2, uint64_t a3)
{
  id v3 = *a1;
  v5[4] = a2;
  v5[5] = a3;
  v5[0] = MEMORY[0x263EF8330];
  v5[1] = 1107296256;
  v5[2] = thunk for @escaping @callee_guaranteed () -> ();
  v5[3] = &block_descriptor_7_0;
  uint64_t v4 = _Block_copy(v5);
  swift_retain();
  swift_release();
  objc_msgSend(v3, sel_setExpirationHandler_, v4);
  _Block_release(v4);
}

uint64_t thunk for @escaping @callee_guaranteed () -> ()(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);
  return swift_release();
}

uint64_t SendableBGSystemTask.deinit()
{
  swift_release();
  return v0;
}

uint64_t SendableBGSystemTask.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t ScheduledActivity.handler.getter@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v1 + 80) - 8) + 16))(a1, v1 + *(void *)(*(void *)v1 + 96));
}

uint64_t ScheduledActivity.init(handler:)(uint64_t a1)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v1 + 80) - 8) + 32))(v1 + *(void *)(*(void *)v1 + 96), a1);
  return v1;
}

void *implicit closure #1 in ScheduledActivity.register()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a2 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  double v7 = MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v5 + 16))(v8, v7);
  unint64_t v9 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a2;
  *(void *)(v10 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v10 + v9, v8, a2);
  return &async function pointer to partial apply for implicit closure #2 in implicit closure #1 in ScheduledActivity.register();
}

uint64_t implicit closure #2 in implicit closure #1 in ScheduledActivity.register()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(a3 + 16) + **(int **)(a3 + 16));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = protocol witness for NetworkManager.uploadKeys(evaluationKeys:userId:) in conformance AspireNetworkManager;
  return v8(a2, a3);
}

uint64_t closure #1 in ScheduledActivity.registerTask(identifier:handler:)(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for daemon != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Logger.daemon);
  swift_bridgeObjectRetain_n();
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v33 = a1;
    uint64_t v16 = swift_slowAlloc();
    uint64_t v34 = a4;
    BOOL v17 = (uint8_t *)v16;
    uint64_t v18 = swift_slowAlloc();
    uint64_t v36 = v18;
    *(_DWORD *)BOOL v17 = 136446210;
    swift_bridgeObjectRetain();
    uint64_t v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, &v36);
    a1 = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_249C3F000, v14, v15, "ScheduledActivity(%{public}s) run", v17, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5B4790](v18, -1, -1);
    uint64_t v19 = v17;
    a4 = v34;
    MEMORY[0x24C5B4790](v19, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  type metadata accessor for SendableBGSystemTask();
  uint64_t v20 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<BGSystemTask, os_unfair_lock_s>);
  uint64_t v21 = swift_allocObject();
  *(_DWORD *)(v21 + 24) = 0;
  *(void *)(v21 + 16) = a1;
  *(void *)(v20 + 16) = v21;
  uint64_t v22 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v12, 1, 1, v22);
  BOOL v23 = (void *)swift_allocObject();
  v23[2] = 0;
  v23[3] = 0;
  v23[4] = a2;
  v23[5] = a3;
  v23[6] = v20;
  v23[7] = a4;
  v23[8] = a5;
  swift_bridgeObjectRetain();
  id v24 = a1;
  swift_retain();
  swift_retain();
  uint64_t v25 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v12, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in ScheduledActivity.registerTask(identifier:handler:), (uint64_t)v23);
  uint64_t v26 = (void *)swift_allocObject();
  v26[2] = a2;
  v26[3] = a3;
  v26[4] = v25;
  MEMORY[0x270FA5388](v26);
  *(&v32 - 2) = (uint64_t)partial apply for closure #2 in closure #1 in ScheduledActivity.registerTask(identifier:handler:);
  *(&v32 - 1) = v27;
  uint64_t v29 = (void **)(v28 + 16);
  uint64_t v30 = (os_unfair_lock_s *)(v28 + 24);
  swift_bridgeObjectRetain();
  swift_retain();
  os_unfair_lock_lock(v30);
  closure #1 in SendableBGSystemTask.setExpirationHandler(_:)partial apply(v29);
  os_unfair_lock_unlock(v30);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t closure #1 in closure #1 in ScheduledActivity.registerTask(identifier:handler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  *(void *)(v7 + 48) = a5;
  *(void *)(v7 + 56) = a6;
  *(void *)(v7 + 40) = a4;
  uint64_t v9 = type metadata accessor for CancellationError();
  *(void *)(v7 + 64) = v9;
  *(void *)(v7 + 72) = *(void *)(v9 - 8);
  *(void *)(v7 + 80) = swift_task_alloc();
  *(unsigned char *)(v7 + 104) = 0;
  uint64_t v12 = (uint64_t (*)(void))((char *)a7 + *a7);
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v7 + 88) = v10;
  *uint64_t v10 = v7;
  v10[1] = closure #1 in closure #1 in ScheduledActivity.registerTask(identifier:handler:);
  return v12();
}

uint64_t closure #1 in closure #1 in ScheduledActivity.registerTask(identifier:handler:)()
{
  *(void *)(*(void *)v1 + 96) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = closure #1 in closure #1 in ScheduledActivity.registerTask(identifier:handler:);
  }
  else {
    uint64_t v2 = closure #1 in closure #1 in ScheduledActivity.registerTask(identifier:handler:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  $defer #1 <A>() in closure #1 in closure #1 in ScheduledActivity.registerTask(identifier:handler:)((unsigned char *)(v0 + 104), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56));
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  void *v1;
  unsigned char *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  BOOL v13;
  void *v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t (*v20)(void);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  uint64_t v25 = v0;
  uint64_t v1 = *(void **)(v0 + 96);
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = (unsigned char *)(v0 + 104);
  uint64_t v3 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if (swift_dynamicCast())
  {
    uint64_t v5 = *(void *)(v0 + 72);
    uint64_t v4 = *(void *)(v0 + 80);
    uint64_t v6 = *(void *)(v0 + 64);

    *(unsigned char *)(v0 + 104) = 1;
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  }
  else
  {

    if (one-time initialization token for daemon != -1) {
      swift_once();
    }
    uint64_t v7 = *(void **)(v0 + 96);
    uint64_t v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Logger.daemon);
    swift_bridgeObjectRetain();
    uint64_t v9 = v7;
    swift_bridgeObjectRetain();
    uint64_t v10 = v7;
    uint64_t v11 = Logger.logObject.getter();
    uint64_t v12 = static os_log_type_t.error.getter();
    uint64_t v13 = os_log_type_enabled(v11, v12);
    uint64_t v14 = *(void **)(v0 + 96);
    os_log_type_t v15 = *(void *)(v0 + 48);
    if (v13)
    {
      uint64_t v22 = *(void *)(v0 + 40);
      uint64_t v16 = swift_slowAlloc();
      BOOL v17 = (void *)swift_slowAlloc();
      BOOL v23 = swift_slowAlloc();
      id v24 = v23;
      *(_DWORD *)uint64_t v16 = 136446466;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v15, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v16 + 12) = 2114;
      uint64_t v18 = v14;
      uint64_t v19 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 32) = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *BOOL v17 = v19;

      _os_log_impl(&dword_249C3F000, v11, v12, "ScheduledActivity(%{public}s) threw error: %{public}@", (uint8_t *)v16, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x24C5B4790](v17, -1, -1);
      swift_arrayDestroy();
      uint64_t v2 = (unsigned char *)(v0 + 104);
      MEMORY[0x24C5B4790](v23, -1, -1);
      MEMORY[0x24C5B4790](v16, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
  $defer #1 <A>() in closure #1 in closure #1 in ScheduledActivity.registerTask(identifier:handler:)(v2, *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56));
  swift_task_dealloc();
  uint64_t v20 = *(uint64_t (**)(void))(v0 + 8);
  return v20();
}

void $defer #1 <A>() in closure #1 in closure #1 in ScheduledActivity.registerTask(identifier:handler:)(unsigned char *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (*a1 == 1)
  {
    if (one-time initialization token for daemon != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.daemon);
    swift_bridgeObjectRetain_n();
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      v23[0] = v10;
      *(_DWORD *)uint64_t v9 = 136446210;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_249C3F000, v7, v8, "ScheduledActivity(%{public}s) expired", v9, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C5B4790](v10, -1, -1);
      MEMORY[0x24C5B4790](v9, -1, -1);
    }
    else
    {

      uint64_t v11 = swift_bridgeObjectRelease_n();
    }
    MEMORY[0x270FA5388](v11);
    uint64_t v21 = (void **)&v20[4];
    uint64_t v22 = v20 + 6;
    os_unfair_lock_lock(v20 + 6);
    closure #1 in SendableBGSystemTask.setTaskExpiredWithRetryAfter(_:)partial apply(v21);
    os_unfair_lock_unlock(v22);
  }
  else
  {
    uint64_t v12 = *(os_unfair_lock_s **)(a4 + 16);
    uint64_t v13 = (id *)&v12[4];
    uint64_t v14 = v12 + 6;
    os_unfair_lock_lock(v12 + 6);
    closure #1 in SendableBGSystemTask.setTaskCompleted()(v13);
    os_unfair_lock_unlock(v14);
    if (one-time initialization token for daemon != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Logger.daemon);
    swift_bridgeObjectRetain_n();
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      v23[0] = v19;
      *(_DWORD *)uint64_t v18 = 136446210;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_249C3F000, v16, v17, "ScheduledActivity(%{public}s) completed", v18, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C5B4790](v19, -1, -1);
      MEMORY[0x24C5B4790](v18, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

uint64_t closure #2 in closure #1 in ScheduledActivity.registerTask(identifier:handler:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (one-time initialization token for daemon != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.daemon);
  swift_bridgeObjectRetain_n();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    uint64_t v12 = v10;
    *(_DWORD *)uint64_t v9 = 136446210;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_249C3F000, v7, v8, "ScheduledActivity(%{public}s) deferred", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5B4790](v10, -1, -1);
    MEMORY[0x24C5B4790](v9, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  return MEMORY[0x24C5B3640](a3, MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E628], MEMORY[0x263F8E658]);
}

void thunk for @escaping @callee_guaranteed (@guaranteed BGSystemTask) -> ()(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

uint64_t ScheduledActivity.deinit()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 80) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 96));
  return v0;
}

uint64_t ScheduledActivity.__deallocating_deinit()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 80) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 96));
  return swift_deallocClassInstance();
}

void specialized ScheduledActivity.registerTask(identifier:handler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v8 = objc_msgSend(self, sel_sharedScheduler);
  uint64_t v9 = (void *)MEMORY[0x24C5B33F0](a1, a2);
  uint64_t v10 = (void *)swift_allocObject();
  void v10[2] = a1;
  v10[3] = a2;
  v10[4] = a3;
  v10[5] = a4;
  v12[4] = closure #1 in ScheduledActivity.registerTask(identifier:handler:)partial apply;
  v12[5] = v10;
  v12[0] = MEMORY[0x263EF8330];
  v12[1] = 1107296256;
  void v12[2] = thunk for @escaping @callee_guaranteed (@guaranteed BGSystemTask) -> ();
  v12[3] = &block_descriptor_24_0;
  uint64_t v11 = _Block_copy(v12);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  objc_msgSend(v8, sel_registerForTaskWithIdentifier_usingQueue_launchHandler_, v9, 0, v11);
  _Block_release(v11);
}

uint64_t block_copy_helper_6(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_6()
{
  return swift_release();
}

id partial apply for closure #1 in SendableBGSystemTask.setTaskExpiredWithRetryAfter(_:)(void **a1)
{
  return closure #1 in SendableBGSystemTask.setTaskExpiredWithRetryAfter(_:)(a1);
}

void partial apply for closure #1 in SendableBGSystemTask.setExpirationHandler(_:)(void **a1)
{
  closure #1 in SendableBGSystemTask.setExpirationHandler(_:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t dispatch thunk of static ScheduledActivityHandler.identifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ScheduledActivityHandler.run@Sendable ()(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(a2 + 16) + **(int **)(a2 + 16));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return v7(a1, a2);
}

uint64_t type metadata accessor for SendableBGSystemTask()
{
  return self;
}

uint64_t method lookup function for SendableBGSystemTask(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for SendableBGSystemTask);
}

uint64_t dispatch thunk of SendableBGSystemTask.__allocating_init(task:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t type metadata completion function for ScheduledActivity()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for ScheduledActivity()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t method lookup function for ScheduledActivity(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for ScheduledActivity);
}

uint64_t dispatch thunk of ScheduledActivity.__allocating_init(handler:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t sub_249E40014()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return MEMORY[0x270FA0238](v0, 72, 7);
}

uint64_t partial apply for closure #1 in closure #1 in ScheduledActivity.registerTask(identifier:handler:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (int *)v1[7];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = protocol witness for NetworkManager.uploadKeys(evaluationKeys:userId:) in conformance AspireNetworkManager;
  return closure #1 in closure #1 in ScheduledActivity.registerTask(identifier:handler:)(a1, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_249E40140()
{
  swift_bridgeObjectRelease();
  swift_release();
  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t partial apply for closure #2 in closure #1 in ScheduledActivity.registerTask(identifier:handler:)()
{
  return closure #2 in closure #1 in ScheduledActivity.registerTask(identifier:handler:)(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_249E40190()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t v5 = v2 | 7;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);
  return MEMORY[0x270FA0238](v0, v4, v5);
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in ScheduledActivity.register()()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = v0
     + ((*(unsigned __int8 *)(*(void *)(v2 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v2 - 8) + 80));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = protocol witness for NetworkManager.uploadKeys(evaluationKeys:userId:) in conformance AspireNetworkManager;
  return implicit closure #2 in implicit closure #1 in ScheduledActivity.register()(v4, v2, v3);
}

void closure #1 in SendableBGSystemTask.setExpirationHandler(_:)partial apply(void **a1)
{
}

id closure #1 in SendableBGSystemTask.setTaskExpiredWithRetryAfter(_:)partial apply(void **a1)
{
  return partial apply for closure #1 in SendableBGSystemTask.setTaskExpiredWithRetryAfter(_:)(a1);
}

BOOL specialized TokenIssuerDirectory.isValid(tokenKey:currentTime:)(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v76 = *MEMORY[0x263EF8340];
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(*(void *)(a3 + *(int *)(type metadata accessor for TokenIssuerDirectory() + 20)) + 16);
  if (!v10) {
    return 0;
  }
  uint64_t v44 = v9;
  uint64_t v45 = v7;
  uint64_t v46 = v6;
  unint64_t v68 = a2 >> 62;
  unint64_t v59 = HIDWORD(a1);
  BOOL v11 = __OFSUB__(HIDWORD(a1), a1);
  BOOL v64 = v11;
  uint64_t v62 = HIDWORD(a1) - (int)a1;
  uint64_t v66 = a2 & 0x3FFFFFFFFFFFFFFFLL;
  uint64_t v60 = (int)a1;
  uint64_t v58 = (uint64_t)a1 >> 32;
  uint64_t v56 = ((uint64_t)a1 >> 32) - (int)a1;
  uint64_t v63 = BYTE6(a2);
  uint64_t v57 = (char *)&__s1 + BYTE6(a2);
  uint64_t v12 = swift_bridgeObjectRetain();
  uint64_t v67 = 0;
  uint64_t v61 = v12;
  uint64_t v13 = (unsigned __int8 *)(v12 + 64);
  unint64_t v65 = a2;
  while (1)
  {
    if (*((_WORD *)v13 - 16) != 2) {
      goto LABEL_8;
    }
    uint64_t v14 = *((void *)v13 - 2);
    unint64_t v69 = *((void *)v13 - 1);
    int v70 = *v13;
    *(void *)&long long __s1 = *((void *)v13 - 3);
    *((void *)&__s1 + 1) = v14;
    uint64_t v73 = 45;
    unint64_t v74 = 0xE100000000000000;
    uint64_t v71 = 43;
    unint64_t v72 = 0xE100000000000000;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain();
    *(void *)&long long __s1 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    *((void *)&__s1 + 1) = v15;
    uint64_t v73 = 95;
    unint64_t v74 = 0xE100000000000000;
    uint64_t v71 = 47;
    unint64_t v72 = 0xE100000000000000;
    StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    swift_bridgeObjectRelease();
    uint64_t v16 = Data.init(base64Encoded:options:)();
    unint64_t v18 = v17;
    outlined copy of Data?(v16, v17);
    swift_bridgeObjectRelease();
    if (v18 >> 60 != 15) {
      break;
    }
    outlined copy of Data._Representation(a1, a2);
    outlined consume of Data?(a1, a2);
    outlined consume of Data?(v16, v18);
LABEL_7:
    swift_bridgeObjectRelease();
LABEL_8:
    v13 += 40;
    if (!--v10)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  outlined consume of Data?(v16, v18);
  uint64_t v19 = v68;
  uint64_t v20 = 0;
  switch((int)v68)
  {
    case 1:
      if (v64)
      {
        __break(1u);
LABEL_64:
        __break(1u);
LABEL_65:
        __break(1u);
LABEL_66:
        __break(1u);
LABEL_67:
        __break(1u);
LABEL_68:
        __break(1u);
LABEL_69:
        __break(1u);
LABEL_70:
        __break(1u);
LABEL_71:
        __break(1u);
LABEL_72:
        __break(1u);
LABEL_73:
        __break(1u);
      }
      outlined copy of Data._Representation(a1, a2);
      outlined copy of Data._Representation(a1, a2);
      uint64_t v20 = v62;
LABEL_17:
      switch(v18 >> 62)
      {
        case 1uLL:
          if (__OFSUB__(HIDWORD(v16), v16)) {
            goto LABEL_65;
          }
          if (v20 == HIDWORD(v16) - v16) {
            goto LABEL_27;
          }
          goto LABEL_31;
        case 2uLL:
          uint64_t v24 = *(void *)(v16 + 16);
          uint64_t v23 = *(void *)(v16 + 24);
          BOOL v25 = __OFSUB__(v23, v24);
          uint64_t v26 = v23 - v24;
          if (v25) {
            goto LABEL_66;
          }
          if (v20 != v26)
          {
LABEL_31:
            outlined consume of Data?(v16, v18);
            outlined consume of Data._Representation(a1, a2);
            outlined consume of Data._Representation(a1, a2);
            goto LABEL_7;
          }
LABEL_27:
          if (v20 >= 1)
          {
            outlined copy of Data._Representation(v16, v18);
            outlined copy of Data._Representation(v16, v18);
            switch(v19)
            {
              case 1:
                if (v58 < v60) {
                  goto LABEL_67;
                }
                outlined copy of Data?(v16, v18);
                outlined copy of Data?(v16, v18);
                outlined copy of Data?(v16, v18);
                outlined copy of Data._Representation(a1, a2);
                uint64_t v36 = __DataStorage._bytes.getter();
                if (!v36) {
                  goto LABEL_44;
                }
                uint64_t v37 = __DataStorage._offset.getter();
                if (__OFSUB__(v60, v37)) {
                  goto LABEL_70;
                }
                v36 += v60 - v37;
LABEL_44:
                __DataStorage._length.getter();
                uint64_t v38 = v67;
                closure #1 in static Data.== infix(_:_:)(v36, v16, v18, (char *)&__s1);
                outlined consume of Data?(v16, v18);
                uint64_t v67 = v38;
                if (v38) {
                  goto LABEL_76;
                }
                a2 = v65;
                outlined consume of Data._Representation(a1, v65);
                outlined consume of Data?(v16, v18);
                int v29 = __s1;
                uint64_t v34 = a1;
                break;
              case 2:
                uint64_t v30 = *(void *)(a1 + 16);
                unint64_t v55 = *(void *)(a1 + 24);
                outlined copy of Data?(v16, v18);
                outlined copy of Data?(v16, v18);
                outlined copy of Data?(v16, v18);
                swift_retain();
                swift_retain();
                uint64_t v31 = __DataStorage._bytes.getter();
                if (!v31) {
                  goto LABEL_35;
                }
                uint64_t v32 = __DataStorage._offset.getter();
                if (__OFSUB__(v30, v32)) {
                  goto LABEL_69;
                }
                v31 += v30 - v32;
LABEL_35:
                if (__OFSUB__(v55, v30)) {
                  goto LABEL_68;
                }
                __DataStorage._length.getter();
                uint64_t v33 = v67;
                closure #1 in static Data.== infix(_:_:)(v31, v16, v18, (char *)&__s1);
                outlined consume of Data?(v16, v18);
                uint64_t v67 = v33;
                if (v33)
                {
                  outlined consume of Data?(v16, v18);
                  outlined consume of Data._Representation(v16, v18);
                  outlined consume of Data._Representation(v16, v18);
                  outlined consume of Data._Representation(v16, v18);
                  swift_release();
                  swift_release();
                  __break(1u);
LABEL_75:
                  outlined consume of Data._Representation(v16, v18);
                  outlined consume of Data._Representation(v16, v18);
                  outlined consume of Data._Representation(v16, v18);
                  __break(1u);
LABEL_76:
                  outlined consume of Data?(v16, v18);
                  outlined consume of Data._Representation(v16, v18);
                  outlined consume of Data._Representation(v16, v18);
                  outlined consume of Data._Representation(v16, v18);
                  outlined consume of Data._Representation(a1, v65);
                  __break(1u);
                  JUMPOUT(0x249E40D48);
                }
                swift_release();
                swift_release();
                int v29 = __s1;
                outlined consume of Data?(v16, v18);
                uint64_t v34 = a1;
                a2 = v65;
                break;
              case 3:
                outlined copy of Data?(v16, v18);
                *(void *)((char *)&__s1 + 6) = 0;
                *(void *)&long long __s1 = 0;
                outlined copy of Data?(v16, v18);
                outlined copy of Data?(v16, v18);
                uint64_t v35 = v67;
                closure #1 in static Data.== infix(_:_:)((uint64_t)&__s1, v16, v18, (char *)&v73);
                outlined consume of Data?(v16, v18);
                outlined consume of Data?(v16, v18);
                uint64_t v67 = v35;
                if (v35) {
                  goto LABEL_75;
                }
                a2 = v65;
                outlined consume of Data._Representation(a1, v65);
                int v29 = v73;
                goto LABEL_47;
              default:
                unint64_t v55 = a2 >> 40;
                unint64_t v54 = HIDWORD(a2);
                unint64_t v53 = a2 >> 24;
                unint64_t v52 = a2 >> 16;
                unint64_t v51 = a2 >> 8;
                unint64_t v50 = HIBYTE(a1);
                unint64_t v49 = HIWORD(a1);
                unint64_t v48 = a1 >> 40;
                unint64_t v47 = a1 >> 24;
                unint64_t v27 = a2;
                outlined copy of Data?(v16, v18);
                LOWORD(__s1) = a1;
                BYTE2(__s1) = BYTE2(a1);
                BYTE3(__s1) = v47;
                BYTE4(__s1) = v59;
                BYTE5(__s1) = v48;
                BYTE6(__s1) = v49;
                BYTE7(__s1) = v50;
                BYTE8(__s1) = a2;
                BYTE9(__s1) = v51;
                BYTE10(__s1) = v52;
                BYTE11(__s1) = v53;
                BYTE12(__s1) = v54;
                BYTE13(__s1) = v55;
                outlined copy of Data?(v16, v18);
                outlined copy of Data?(v16, v18);
                uint64_t v28 = v67;
                closure #1 in static Data.== infix(_:_:)((uint64_t)&__s1, v16, v18, (char *)&v73);
                outlined consume of Data?(v16, v18);
                outlined consume of Data?(v16, v18);
                uint64_t v67 = v28;
                if (v28) {
                  goto LABEL_75;
                }
                outlined consume of Data._Representation(a1, v27);
                int v29 = v73;
                a2 = v27;
                goto LABEL_47;
            }
            outlined consume of Data._Representation(v34, a2);
LABEL_47:
            outlined consume of Data?(v16, v18);
            outlined consume of Data?(v16, v18);
            outlined consume of Data._Representation(v16, v18);
            outlined consume of Data._Representation(v16, v18);
            outlined consume of Data._Representation(a1, a2);
            if (v29) {
              goto LABEL_52;
            }
            goto LABEL_7;
          }
LABEL_51:
          outlined consume of Data?(v16, v18);
          outlined consume of Data._Representation(a1, a2);
          outlined consume of Data._Representation(a1, a2);
LABEL_52:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v70) {
            return 1;
          }
          unint64_t v40 = v44;
          Date.init()();
          Date.timeIntervalSince1970.getter();
          double v42 = v41;
          (*(void (**)(char *, uint64_t))(v45 + 8))(v40, v46);
          if ((~*(void *)&v42 & 0x7FF0000000000000) == 0) {
            goto LABEL_71;
          }
          if (v42 <= -9.22337204e18) {
            goto LABEL_72;
          }
          if (v42 >= 9.22337204e18) {
            goto LABEL_73;
          }
          return (uint64_t)v42 >= 0 && v69 <= (uint64_t)v42;
        case 3uLL:
          if (!v20) {
            goto LABEL_51;
          }
          goto LABEL_31;
        default:
          if (v20 != BYTE6(v18)) {
            goto LABEL_31;
          }
          goto LABEL_27;
      }
    case 2:
      uint64_t v22 = *(void *)(a1 + 16);
      uint64_t v21 = *(void *)(a1 + 24);
      uint64_t v20 = v21 - v22;
      if (__OFSUB__(v21, v22)) {
        goto LABEL_64;
      }
      outlined copy of Data._Representation(a1, a2);
      outlined copy of Data._Representation(a1, a2);
      goto LABEL_17;
    case 3:
      goto LABEL_17;
    default:
      uint64_t v20 = v63;
      goto LABEL_17;
  }
}

BOOL TokenIssuerDirectory.isValid(tokenKey:currentTime:)(unint64_t a1, unint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v80 = *MEMORY[0x263EF8340];
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v63 = (char *)v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(*(void *)(v4 + *(int *)(type metadata accessor for TokenIssuerDirectory() + 20)) + 16);
  if (!v12) {
    return 0;
  }
  v47[0] = v10;
  v47[1] = a4;
  unint64_t v48 = a3;
  uint64_t v49 = v9;
  unint64_t v72 = a2 >> 62;
  unint64_t v62 = HIDWORD(a1);
  BOOL v13 = __OFSUB__(HIDWORD(a1), a1);
  BOOL v68 = v13;
  uint64_t v66 = HIDWORD(a1) - (int)a1;
  uint64_t v70 = a2 & 0x3FFFFFFFFFFFFFFFLL;
  uint64_t v64 = (int)a1;
  uint64_t v61 = (uint64_t)a1 >> 32;
  uint64_t v59 = ((uint64_t)a1 >> 32) - (int)a1;
  uint64_t v67 = BYTE6(a2);
  uint64_t v60 = (char *)&__s1 + BYTE6(a2);
  uint64_t v14 = swift_bridgeObjectRetain();
  uint64_t v71 = 0;
  uint64_t v65 = v14;
  uint64_t v15 = (unsigned __int8 *)(v14 + 64);
  unint64_t v69 = a2;
  while (1)
  {
    if (*((_WORD *)v15 - 16) != 2) {
      goto LABEL_8;
    }
    uint64_t v16 = *((void *)v15 - 2);
    unint64_t v73 = *((void *)v15 - 1);
    int v74 = *v15;
    *(void *)&long long __s1 = *((void *)v15 - 3);
    *((void *)&__s1 + 1) = v16;
    uint64_t v77 = 45;
    unint64_t v78 = 0xE100000000000000;
    uint64_t v75 = 43;
    unint64_t v76 = 0xE100000000000000;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain();
    *(void *)&long long __s1 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    *((void *)&__s1 + 1) = v17;
    uint64_t v77 = 95;
    unint64_t v78 = 0xE100000000000000;
    uint64_t v75 = 47;
    unint64_t v76 = 0xE100000000000000;
    StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    swift_bridgeObjectRelease();
    uint64_t v18 = Data.init(base64Encoded:options:)();
    unint64_t v20 = v19;
    outlined copy of Data?(v18, v19);
    swift_bridgeObjectRelease();
    if (v20 >> 60 != 15) {
      break;
    }
    outlined copy of Data._Representation(a1, a2);
    outlined consume of Data?(a1, a2);
    outlined consume of Data?(v18, v20);
LABEL_7:
    swift_bridgeObjectRelease();
LABEL_8:
    v15 += 40;
    if (!--v12)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  outlined consume of Data?(v18, v20);
  uint64_t v21 = v72;
  uint64_t v22 = 0;
  switch((int)v72)
  {
    case 1:
      if (v68)
      {
        __break(1u);
LABEL_64:
        __break(1u);
LABEL_65:
        __break(1u);
LABEL_66:
        __break(1u);
LABEL_67:
        __break(1u);
LABEL_68:
        __break(1u);
LABEL_69:
        __break(1u);
LABEL_70:
        __break(1u);
LABEL_71:
        __break(1u);
LABEL_72:
        __break(1u);
LABEL_73:
        __break(1u);
      }
      outlined copy of Data._Representation(a1, a2);
      outlined copy of Data._Representation(a1, a2);
      uint64_t v22 = v66;
LABEL_17:
      switch(v20 >> 62)
      {
        case 1uLL:
          if (__OFSUB__(HIDWORD(v18), v18)) {
            goto LABEL_65;
          }
          if (v22 == HIDWORD(v18) - v18) {
            goto LABEL_27;
          }
          goto LABEL_31;
        case 2uLL:
          uint64_t v26 = *(void *)(v18 + 16);
          uint64_t v25 = *(void *)(v18 + 24);
          BOOL v27 = __OFSUB__(v25, v26);
          uint64_t v28 = v25 - v26;
          if (v27) {
            goto LABEL_66;
          }
          if (v22 != v28)
          {
LABEL_31:
            outlined consume of Data?(v18, v20);
            outlined consume of Data._Representation(a1, a2);
            outlined consume of Data._Representation(a1, a2);
            goto LABEL_7;
          }
LABEL_27:
          if (v22 >= 1)
          {
            outlined copy of Data._Representation(v18, v20);
            outlined copy of Data._Representation(v18, v20);
            switch(v21)
            {
              case 1:
                if (v61 < v64) {
                  goto LABEL_67;
                }
                outlined copy of Data?(v18, v20);
                outlined copy of Data?(v18, v20);
                outlined copy of Data?(v18, v20);
                outlined copy of Data._Representation(a1, a2);
                uint64_t v38 = __DataStorage._bytes.getter();
                if (!v38) {
                  goto LABEL_44;
                }
                uint64_t v39 = __DataStorage._offset.getter();
                if (__OFSUB__(v64, v39)) {
                  goto LABEL_70;
                }
                v38 += v64 - v39;
LABEL_44:
                __DataStorage._length.getter();
                uint64_t v40 = v71;
                closure #1 in static Data.== infix(_:_:)(v38, v18, v20, (char *)&__s1);
                outlined consume of Data?(v18, v20);
                uint64_t v71 = v40;
                if (v40) {
                  goto LABEL_76;
                }
                a2 = v69;
                outlined consume of Data._Representation(a1, v69);
                outlined consume of Data?(v18, v20);
                char v31 = __s1;
                uint64_t v36 = a1;
                break;
              case 2:
                uint64_t v32 = *(void *)(a1 + 16);
                unint64_t v58 = *(void *)(a1 + 24);
                outlined copy of Data?(v18, v20);
                outlined copy of Data?(v18, v20);
                outlined copy of Data?(v18, v20);
                swift_retain();
                swift_retain();
                uint64_t v33 = __DataStorage._bytes.getter();
                if (!v33) {
                  goto LABEL_35;
                }
                uint64_t v34 = __DataStorage._offset.getter();
                if (__OFSUB__(v32, v34)) {
                  goto LABEL_69;
                }
                v33 += v32 - v34;
LABEL_35:
                if (__OFSUB__(v58, v32)) {
                  goto LABEL_68;
                }
                __DataStorage._length.getter();
                uint64_t v35 = v71;
                closure #1 in static Data.== infix(_:_:)(v33, v18, v20, (char *)&__s1);
                outlined consume of Data?(v18, v20);
                uint64_t v71 = v35;
                if (v35)
                {
                  outlined consume of Data?(v18, v20);
                  outlined consume of Data._Representation(v18, v20);
                  outlined consume of Data._Representation(v18, v20);
                  outlined consume of Data._Representation(v18, v20);
                  swift_release();
                  swift_release();
                  __break(1u);
LABEL_75:
                  outlined consume of Data._Representation(v18, v20);
                  outlined consume of Data._Representation(v18, v20);
                  outlined consume of Data._Representation(v18, v20);
                  __break(1u);
LABEL_76:
                  outlined consume of Data?(v18, v20);
                  outlined consume of Data._Representation(v18, v20);
                  outlined consume of Data._Representation(v18, v20);
                  outlined consume of Data._Representation(v18, v20);
                  outlined consume of Data._Representation(a1, v69);
                  __break(1u);
                  JUMPOUT(0x249E417B8);
                }
                swift_release();
                swift_release();
                char v31 = __s1;
                outlined consume of Data?(v18, v20);
                uint64_t v36 = a1;
                a2 = v69;
                break;
              case 3:
                outlined copy of Data?(v18, v20);
                *(void *)((char *)&__s1 + 6) = 0;
                *(void *)&long long __s1 = 0;
                outlined copy of Data?(v18, v20);
                outlined copy of Data?(v18, v20);
                uint64_t v37 = v71;
                closure #1 in static Data.== infix(_:_:)((uint64_t)&__s1, v18, v20, (char *)&v77);
                outlined consume of Data?(v18, v20);
                outlined consume of Data?(v18, v20);
                uint64_t v71 = v37;
                if (v37) {
                  goto LABEL_75;
                }
                a2 = v69;
                outlined consume of Data._Representation(a1, v69);
                char v31 = v77;
                goto LABEL_47;
              default:
                unint64_t v58 = a2 >> 40;
                unint64_t v57 = HIDWORD(a2);
                unint64_t v56 = a2 >> 24;
                unint64_t v55 = a2 >> 16;
                unint64_t v54 = a2 >> 8;
                unint64_t v53 = HIBYTE(a1);
                unint64_t v52 = HIWORD(a1);
                unint64_t v51 = a1 >> 40;
                unint64_t v50 = a1 >> 24;
                unint64_t v29 = a2;
                outlined copy of Data?(v18, v20);
                LOWORD(__s1) = a1;
                BYTE2(__s1) = BYTE2(a1);
                BYTE3(__s1) = v50;
                BYTE4(__s1) = v62;
                BYTE5(__s1) = v51;
                BYTE6(__s1) = v52;
                BYTE7(__s1) = v53;
                BYTE8(__s1) = a2;
                BYTE9(__s1) = v54;
                BYTE10(__s1) = v55;
                BYTE11(__s1) = v56;
                BYTE12(__s1) = v57;
                BYTE13(__s1) = v58;
                outlined copy of Data?(v18, v20);
                outlined copy of Data?(v18, v20);
                uint64_t v30 = v71;
                closure #1 in static Data.== infix(_:_:)((uint64_t)&__s1, v18, v20, (char *)&v77);
                outlined consume of Data?(v18, v20);
                outlined consume of Data?(v18, v20);
                uint64_t v71 = v30;
                if (v30) {
                  goto LABEL_75;
                }
                outlined consume of Data._Representation(a1, v29);
                char v31 = v77;
                a2 = v29;
                goto LABEL_47;
            }
            outlined consume of Data._Representation(v36, a2);
LABEL_47:
            outlined consume of Data?(v18, v20);
            outlined consume of Data?(v18, v20);
            outlined consume of Data._Representation(v18, v20);
            outlined consume of Data._Representation(v18, v20);
            outlined consume of Data._Representation(a1, a2);
            if (v31) {
              goto LABEL_52;
            }
            goto LABEL_7;
          }
LABEL_51:
          outlined consume of Data?(v18, v20);
          outlined consume of Data._Representation(a1, a2);
          outlined consume of Data._Representation(a1, a2);
LABEL_52:
          swift_bridgeObjectRelease();
          uint64_t v42 = swift_bridgeObjectRelease();
          if (v74) {
            return 1;
          }
          BOOL v43 = v63;
          v48(v42);
          Date.timeIntervalSince1970.getter();
          double v45 = v44;
          (*(void (**)(char *, uint64_t))(v47[0] + 8))(v43, v49);
          if ((~*(void *)&v45 & 0x7FF0000000000000) == 0) {
            goto LABEL_71;
          }
          if (v45 <= -9.22337204e18) {
            goto LABEL_72;
          }
          if (v45 >= 9.22337204e18) {
            goto LABEL_73;
          }
          return (uint64_t)v45 >= 0 && v73 <= (uint64_t)v45;
        case 3uLL:
          if (!v22) {
            goto LABEL_51;
          }
          goto LABEL_31;
        default:
          if (v22 != BYTE6(v20)) {
            goto LABEL_31;
          }
          goto LABEL_27;
      }
    case 2:
      uint64_t v24 = *(void *)(a1 + 16);
      uint64_t v23 = *(void *)(a1 + 24);
      uint64_t v22 = v23 - v24;
      if (__OFSUB__(v23, v24)) {
        goto LABEL_64;
      }
      outlined copy of Data._Representation(a1, a2);
      outlined copy of Data._Representation(a1, a2);
      goto LABEL_17;
    case 3:
      goto LABEL_17;
    default:
      uint64_t v22 = v67;
      goto LABEL_17;
  }
}

CipherML::TokenKey::CodingKeys_optional __swiftcall TokenKey.CodingKeys.init(stringValue:)(Swift::String stringValue)
{
  object = stringValue._object;
  v2._countAndFlagsBits = stringValue._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of TokenKey.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return (CipherML::TokenKey::CodingKeys_optional)3;
  }
  else {
    return (CipherML::TokenKey::CodingKeys_optional)v3;
  }
}

CipherML::TokenKey::CodingKeys_optional __swiftcall TokenKey.CodingKeys.init(intValue:)(Swift::Int intValue)
{
  return (CipherML::TokenKey::CodingKeys_optional)3;
}

uint64_t TokenKey.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t TokenKey.CodingKeys.rawValue.getter(char a1)
{
  if (!a1) {
    return 0x79742D6E656B6F74;
  }
  if (a1 == 1) {
    return 0x656B2D6E656B6F74;
  }
  return 0x6F6665622D746F6ELL;
}

uint64_t TokenKey.CodingKeys.stringValue.getter(char a1)
{
  if (!a1) {
    return 0x79742D6E656B6F74;
  }
  if (a1 == 1) {
    return 0x656B2D6E656B6F74;
  }
  return 0x6F6665622D746F6ELL;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance TokenKey.CodingKeys(unsigned char *a1, unsigned char *a2)
{
  int v2 = *a1;
  uint64_t v3 = 0x656B2D6E656B6F74;
  unint64_t v4 = 0xE900000000000079;
  unint64_t v5 = 0xEA00000000006572;
  if (v2 != 1)
  {
    uint64_t v3 = 0x6F6665622D746F6ELL;
    unint64_t v4 = 0xEA00000000006572;
  }
  if (*a1) {
    uint64_t v6 = v3;
  }
  else {
    uint64_t v6 = 0x79742D6E656B6F74;
  }
  if (v2) {
    unint64_t v7 = v4;
  }
  else {
    unint64_t v7 = 0xEA00000000006570;
  }
  uint64_t v8 = 0x656B2D6E656B6F74;
  if (*a2 == 1) {
    unint64_t v5 = 0xE900000000000079;
  }
  else {
    uint64_t v8 = 0x6F6665622D746F6ELL;
  }
  if (*a2) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0x79742D6E656B6F74;
  }
  if (*a2) {
    unint64_t v10 = v5;
  }
  else {
    unint64_t v10 = 0xEA00000000006570;
  }
  if (v6 == v9 && v7 == v10) {
    char v11 = 1;
  }
  else {
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v11 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance TokenKey.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance TokenKey.CodingKeys()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TokenKey.CodingKeys()
{
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance TokenKey.CodingKeys@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized TokenKey.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance TokenKey.CodingKeys(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xEA00000000006570;
  int v3 = *v1;
  unint64_t v4 = 0xE900000000000079;
  uint64_t v5 = 0x656B2D6E656B6F74;
  if (v3 != 1)
  {
    uint64_t v5 = 0x6F6665622D746F6ELL;
    unint64_t v4 = 0xEA00000000006572;
  }
  BOOL v6 = v3 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x79742D6E656B6F74;
  }
  if (!v6) {
    unint64_t v2 = v4;
  }
  *a1 = v7;
  a1[1] = v2;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TokenKey.CodingKeys()
{
  uint64_t v1 = 0x656B2D6E656B6F74;
  if (*v0 != 1) {
    uint64_t v1 = 0x6F6665622D746F6ELL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x79742D6E656B6F74;
  }
}

unint64_t protocol witness for CodingKey.init(stringValue:) in conformance TokenKey.CodingKeys@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized TokenKey.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TokenKey.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TokenKey.CodingKeys and conformance TokenKey.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TokenKey.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TokenKey.CodingKeys and conformance TokenKey.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t TokenKey.tokenType.getter()
{
  return *v0;
}

uint64_t TokenKey.tokenKeyBase64Url.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t TokenKey.notBefore.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t TokenKey.tokenKey.getter()
{
  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  swift_bridgeObjectRelease();
  uint64_t v0 = Data.init(base64Encoded:options:)();
  unint64_t v2 = v1;
  outlined copy of Data?(v0, v1);
  swift_bridgeObjectRelease();
  if (v2 >> 60 != 15) {
    outlined consume of Data?(v0, v2);
  }
  return v0;
}

uint64_t TokenKey.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TokenKey.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  BOOL v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TokenKey.CodingKeys and conformance TokenKey.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

double TokenKey.init(from:)@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  specialized TokenKey.init(from:)(a1, (uint64_t)v6);
  if (!v2)
  {
    double result = *(double *)v6;
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(unsigned char *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t TokenKey.init(tokenType:tokenKeyBase64Url:notBefore:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  *(_WORD *)a6 = result;
  *(void *)(a6 + 8) = a2;
  *(void *)(a6 + 16) = a3;
  *(void *)(a6 + 24) = a4;
  *(unsigned char *)(a6 + 32) = a5 & 1;
  return result;
}

double protocol witness for Decodable.init(from:) in conformance TokenKey@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  specialized TokenKey.init(from:)(a1, (uint64_t)v6);
  if (!v2)
  {
    double result = *(double *)v6;
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(unsigned char *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TokenKey(void *a1)
{
  return TokenKey.encode(to:)(a1);
}

CipherML::TokenIssuerDirectory::CodingKeys_optional __swiftcall TokenIssuerDirectory.CodingKeys.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v2._countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of TokenIssuerDirectory.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 == 1) {
    v4.value = CipherML_TokenIssuerDirectory_CodingKeys_tokenKeys;
  }
  else {
    v4.value = CipherML_TokenIssuerDirectory_CodingKeys_unknownDefault;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0;
  }
}

CipherML::TokenIssuerDirectory::CodingKeys_optional __swiftcall TokenIssuerDirectory.CodingKeys.init(stringValue:)(Swift::String stringValue)
{
  object = stringValue._object;
  v2._countAndFlagsBits = stringValue._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of TokenIssuerDirectory.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 == 1) {
    v4.value = CipherML_TokenIssuerDirectory_CodingKeys_tokenKeys;
  }
  else {
    v4.value = CipherML_TokenIssuerDirectory_CodingKeys_unknownDefault;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0;
  }
}

CipherML::TokenIssuerDirectory::CodingKeys_optional __swiftcall TokenIssuerDirectory.CodingKeys.init(intValue:)(Swift::Int intValue)
{
  return (CipherML::TokenIssuerDirectory::CodingKeys_optional)2;
}

uint64_t TokenIssuerDirectory.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t TokenIssuerDirectory.CodingKeys.rawValue.getter(char a1)
{
  if (a1) {
    return 0x656B2D6E656B6F74;
  }
  else {
    return 0xD000000000000012;
  }
}

uint64_t TokenIssuerDirectory.CodingKeys.stringValue.getter(char a1)
{
  if (a1) {
    return 0x656B2D6E656B6F74;
  }
  else {
    return 0xD000000000000012;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance TokenIssuerDirectory.CodingKeys(unsigned char *a1, unsigned char *a2)
{
  BOOL v2 = *a1 == 0;
  if (*a1) {
    unint64_t v3 = 0x656B2D6E656B6F74;
  }
  else {
    unint64_t v3 = 0xD000000000000012;
  }
  if (v2) {
    unint64_t v4 = 0x8000000249E93C40;
  }
  else {
    unint64_t v4 = 0xEA00000000007379;
  }
  if (*a2) {
    unint64_t v5 = 0x656B2D6E656B6F74;
  }
  else {
    unint64_t v5 = 0xD000000000000012;
  }
  if (*a2) {
    unint64_t v6 = 0xEA00000000007379;
  }
  else {
    unint64_t v6 = 0x8000000249E93C40;
  }
  if (v3 == v5 && v4 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance TokenIssuerDirectory.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance TokenIssuerDirectory.CodingKeys()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TokenIssuerDirectory.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance TokenIssuerDirectory.CodingKeys@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of TokenIssuerDirectory.CodingKeys.init(rawValue:), *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance TokenIssuerDirectory.CodingKeys(unint64_t *a1@<X8>)
{
  unint64_t v2 = 0xD000000000000012;
  if (*v1) {
    unint64_t v2 = 0x656B2D6E656B6F74;
  }
  unint64_t v3 = 0x8000000249E93C40;
  if (*v1) {
    unint64_t v3 = 0xEA00000000007379;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TokenIssuerDirectory.CodingKeys()
{
  if (*v0) {
    return 0x656B2D6E656B6F74;
  }
  else {
    return 0xD000000000000012;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TokenIssuerDirectory.CodingKeys@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of TokenIssuerDirectory.CodingKeys.init(rawValue:), v3);
  uint64_t result = swift_bridgeObjectRelease();
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *a2 = v7;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TokenIssuerDirectory.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TokenIssuerDirectory.CodingKeys and conformance TokenIssuerDirectory.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TokenIssuerDirectory.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TokenIssuerDirectory.CodingKeys and conformance TokenIssuerDirectory.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t TokenIssuerDirectory.issuerRequestUri.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for URL();
  unint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);
  return v4(a1, v1, v3);
}

uint64_t TokenIssuerDirectory.tokenKeys.getter()
{
  type metadata accessor for TokenIssuerDirectory();
  return swift_bridgeObjectRetain();
}

uint64_t TokenIssuerDirectory.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TokenIssuerDirectory.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  char v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TokenIssuerDirectory.CodingKeys and conformance TokenIssuerDirectory.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v12 = 0;
  type metadata accessor for URL();
  lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type URL and conformance URL);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v11 = *(void *)(v3 + *(int *)(type metadata accessor for TokenIssuerDirectory() + 20));
    v10[15] = 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [TokenKey]);
    lazy protocol witness table accessor for type [TokenKey] and conformance <A> [A](&lazy protocol witness table cache variable for type [TokenKey] and conformance <A> [A], (void (*)(void))lazy protocol witness table accessor for type TokenKey and conformance TokenKey);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t TokenIssuerDirectory.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v22 = a2;
  uint64_t v26 = type metadata accessor for URL();
  uint64_t v23 = *(void *)(v26 - 8);
  MEMORY[0x270FA5388](v26);
  uint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TokenIssuerDirectory.CodingKeys>);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v24 = v6;
  uint64_t v25 = v7;
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for TokenIssuerDirectory();
  MEMORY[0x270FA5388](v10);
  char v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TokenIssuerDirectory.CodingKeys and conformance TokenIssuerDirectory.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  }
  uint64_t v21 = v10;
  BOOL v13 = v12;
  uint64_t v14 = v23;
  char v29 = 0;
  lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type URL and conformance URL);
  uint64_t v15 = v26;
  uint64_t v16 = v24;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v17 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
  uint64_t v20 = (uint64_t)v13;
  v17(v13, v5, v15);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [TokenKey]);
  char v28 = 1;
  lazy protocol witness table accessor for type [TokenKey] and conformance <A> [A](&lazy protocol witness table cache variable for type [TokenKey] and conformance <A> [A], (void (*)(void))lazy protocol witness table accessor for type TokenKey and conformance TokenKey);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v25 + 8))(v9, v16);
  uint64_t v18 = v20;
  *(void *)(v20 + *(int *)(v21 + 20)) = v27;
  outlined init with copy of TokenIssuerDirectory(v18, v22);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  return outlined destroy of TokenIssuerDirectory(v18);
}

uint64_t TokenIssuerDirectory.init(issuerRequestUri:tokenKeys:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a3, a1, v6);
  uint64_t result = type metadata accessor for TokenIssuerDirectory();
  *(void *)(a3 + *(int *)(result + 20)) = a2;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance TokenIssuerDirectory@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return TokenIssuerDirectory.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TokenIssuerDirectory(void *a1)
{
  return TokenIssuerDirectory.encode(to:)(a1);
}

uint64_t closure #1 in static Data.== infix(_:_:)@<X0>(uint64_t __s1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, char *a4@<X8>)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  uint64_t v7 = (const void *)__s1;
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v9 = (a2 >> 32) - (int)a2;
      if (a2 >> 32 < (int)a2)
      {
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
      outlined copy of Data._Representation(a2, a3);
      uint64_t v10 = (char *)__DataStorage._bytes.getter();
      if (!v10) {
        goto LABEL_8;
      }
      uint64_t v11 = __DataStorage._offset.getter();
      if (__OFSUB__((int)a2, v11)) {
LABEL_33:
      }
        __break(1u);
      v10 += (int)a2 - v11;
LABEL_8:
      uint64_t v12 = __DataStorage._length.getter();
      if (v12 >= v9) {
        size_t v13 = (a2 >> 32) - (int)a2;
      }
      else {
        size_t v13 = v12;
      }
      if (!v7)
      {
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        JUMPOUT(0x249E42FC4);
      }
      if (!v10) {
        goto LABEL_36;
      }
      int v14 = memcmp(v7, v10, v13);
      long long __s1 = outlined consume of Data._Representation(a2, a3);
      BOOL v8 = v14 == 0;
LABEL_24:
      char v24 = v8;
LABEL_29:
      *a4 = v24;
      return __s1;
    case 2uLL:
      uint64_t v15 = *(void *)(a2 + 16);
      uint64_t v16 = *(void *)(a2 + 24);
      swift_retain();
      swift_retain();
      uint64_t v17 = (char *)__DataStorage._bytes.getter();
      if (!v17) {
        goto LABEL_17;
      }
      uint64_t v18 = __DataStorage._offset.getter();
      if (__OFSUB__(v15, v18)) {
        goto LABEL_32;
      }
      v17 += v15 - v18;
LABEL_17:
      BOOL v19 = __OFSUB__(v16, v15);
      int64_t v20 = v16 - v15;
      if (v19) {
        goto LABEL_31;
      }
      uint64_t v21 = __DataStorage._length.getter();
      if (v21 >= v20) {
        size_t v22 = v20;
      }
      else {
        size_t v22 = v21;
      }
      if (!v7) {
        goto LABEL_37;
      }
      if (!v17) {
        goto LABEL_38;
      }
      int v23 = memcmp(v7, v17, v22);
      swift_release();
      long long __s1 = swift_release();
      BOOL v8 = v23 == 0;
      goto LABEL_24;
    case 3uLL:
      if (!__s1) {
        goto LABEL_39;
      }
      char v24 = 1;
      goto LABEL_29;
    default:
      uint64_t __s2 = a2;
      __int16 v26 = a3;
      char v27 = BYTE2(a3);
      char v28 = BYTE3(a3);
      char v29 = BYTE4(a3);
      char v30 = BYTE5(a3);
      if (__s1)
      {
        long long __s1 = memcmp((const void *)__s1, &__s2, BYTE6(a3));
        BOOL v8 = __s1 == 0;
        goto LABEL_24;
      }
      __break(1u);
      goto LABEL_35;
  }
}

uint64_t specialized Data.InlineData.withUnsafeBytes<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t __s1 = a1;
  __int16 v9 = a2;
  char v10 = BYTE2(a2);
  char v11 = BYTE3(a2);
  char v12 = BYTE4(a2);
  char v13 = BYTE5(a2);
  closure #1 in static Data.== infix(_:_:)((uint64_t)&__s1, a3, a4, &v7);
  if (!v4) {
    char v5 = v7;
  }
  return v5 & 1;
}

uint64_t specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v11 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_9:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  __DataStorage._length.getter();
  closure #1 in static Data.== infix(_:_:)(v11, a4, a5, &v13);
  if (!v5) {
    char v12 = v13;
  }
  return v12 & 1;
}

uint64_t type metadata accessor for TokenIssuerDirectory()
{
  uint64_t result = type metadata singleton initialization cache for TokenIssuerDirectory;
  if (!type metadata singleton initialization cache for TokenIssuerDirectory) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t specialized TokenKey.CodingKeys.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of TokenKey.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return 3;
  }
  else {
    return v3;
  }
}

unint64_t lazy protocol witness table accessor for type TokenKey.CodingKeys and conformance TokenKey.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type TokenKey.CodingKeys and conformance TokenKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type TokenKey.CodingKeys and conformance TokenKey.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenKey.CodingKeys and conformance TokenKey.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TokenKey.CodingKeys and conformance TokenKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type TokenKey.CodingKeys and conformance TokenKey.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenKey.CodingKeys and conformance TokenKey.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TokenKey.CodingKeys and conformance TokenKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type TokenKey.CodingKeys and conformance TokenKey.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenKey.CodingKeys and conformance TokenKey.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TokenKey.CodingKeys and conformance TokenKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type TokenKey.CodingKeys and conformance TokenKey.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenKey.CodingKeys and conformance TokenKey.CodingKeys);
  }
  return result;
}

uint64_t specialized TokenKey.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TokenKey.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  BOOL v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TokenKey.CodingKeys and conformance TokenKey.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  }
  char v22 = 0;
  __int16 v9 = KeyedDecodingContainer.decode(_:forKey:)();
  char v21 = 1;
  uint64_t v10 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v12 = v11;
  uint64_t v19 = v10;
  char v20 = 2;
  swift_bridgeObjectRetain();
  uint64_t v13 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v14 = v8;
  char v16 = v15;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v14, v5);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  uint64_t result = swift_bridgeObjectRelease();
  *(_WORD *)a2 = v9;
  *(void *)(a2 + 8) = v19;
  *(void *)(a2 + 16) = v12;
  *(void *)(a2 + 24) = v13;
  *(unsigned char *)(a2 + 32) = v16 & 1;
  return result;
}

unint64_t lazy protocol witness table accessor for type TokenIssuerDirectory.CodingKeys and conformance TokenIssuerDirectory.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type TokenIssuerDirectory.CodingKeys and conformance TokenIssuerDirectory.CodingKeys;
  if (!lazy protocol witness table cache variable for type TokenIssuerDirectory.CodingKeys and conformance TokenIssuerDirectory.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenIssuerDirectory.CodingKeys and conformance TokenIssuerDirectory.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TokenIssuerDirectory.CodingKeys and conformance TokenIssuerDirectory.CodingKeys;
  if (!lazy protocol witness table cache variable for type TokenIssuerDirectory.CodingKeys and conformance TokenIssuerDirectory.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenIssuerDirectory.CodingKeys and conformance TokenIssuerDirectory.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TokenIssuerDirectory.CodingKeys and conformance TokenIssuerDirectory.CodingKeys;
  if (!lazy protocol witness table cache variable for type TokenIssuerDirectory.CodingKeys and conformance TokenIssuerDirectory.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenIssuerDirectory.CodingKeys and conformance TokenIssuerDirectory.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TokenIssuerDirectory.CodingKeys and conformance TokenIssuerDirectory.CodingKeys;
  if (!lazy protocol witness table cache variable for type TokenIssuerDirectory.CodingKeys and conformance TokenIssuerDirectory.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenIssuerDirectory.CodingKeys and conformance TokenIssuerDirectory.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TokenKey and conformance TokenKey()
{
  unint64_t result = lazy protocol witness table cache variable for type TokenKey and conformance TokenKey;
  if (!lazy protocol witness table cache variable for type TokenKey and conformance TokenKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenKey and conformance TokenKey);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TokenKey and conformance TokenKey;
  if (!lazy protocol witness table cache variable for type TokenKey and conformance TokenKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenKey and conformance TokenKey);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type URL and conformance URL(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for URL();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [TokenKey] and conformance <A> [A](unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [TokenKey]);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with copy of TokenIssuerDirectory(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TokenIssuerDirectory();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of TokenIssuerDirectory(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for TokenIssuerDirectory();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t destroy for TokenKey()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TokenKey(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TokenKey(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 24) = v4;
  return a1;
}

__n128 __swift_memcpy33_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for TokenKey(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for TokenKey(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 33)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TokenKey(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 33) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TokenKey()
{
  return &type metadata for TokenKey;
}

unsigned char *storeEnumTagSinglePayload for TokenKey.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x249E43B84);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TokenKey.CodingKeys()
{
  return &type metadata for TokenKey.CodingKeys;
}

uint64_t *initializeBufferWithCopyOfBuffer for TokenIssuerDirectory(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for URL();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for TokenIssuerDirectory(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TokenIssuerDirectory(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TokenIssuerDirectory(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for TokenIssuerDirectory(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for TokenIssuerDirectory(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TokenIssuerDirectory(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_249E43F20);
}

uint64_t sub_249E43F20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for TokenIssuerDirectory(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_249E43FF4);
}

uint64_t sub_249E43FF4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for URL();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata completion function for TokenIssuerDirectory()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for TokenIssuerDirectory.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x249E44214);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TokenIssuerDirectory.CodingKeys()
{
  return &type metadata for TokenIssuerDirectory.CodingKeys;
}

uint64_t AspireSimilarityPlaintextPacking.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(a1, 1, 1, v2);
  type metadata accessor for AspireSimilarityPlaintextPacking(0);
  return UnknownStorage.init()();
}

uint64_t type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
}

uint64_t type metadata accessor for AspireSimilarityPlaintextPacking(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireSimilarityPlaintextPacking);
}

uint64_t AspireSimilaritySerializedCiphertextMatrix.init()@<X0>(void *a1@<X8>)
{
  return AspireSimilaritySerializedCiphertextMatrix.init()(type metadata accessor for AspireSimilaritySerializedCiphertextMatrix, a1);
}

uint64_t type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireSimilaritySerializedCiphertextMatrix);
}

uint64_t specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  __s1[2] = *MEMORY[0x263EF8340];
  uint64_t v90 = type metadata accessor for AspireHeSerializedDcrtPlaintext(0);
  MEMORY[0x270FA5388](v90);
  uint64_t v5 = (uint64_t *)((char *)&v85 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (uint64_t *)((char *)&v85 - v8);
  uint64_t v91 = a1;
  uint64_t v10 = *(void *)(a1 + 16);
  if (v10 == *(void *)(a2 + 16))
  {
    if (v10 && v91 != a2)
    {
      unint64_t v11 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
      uint64_t v88 = *(void *)(v7 + 72);
      uint64_t v89 = v5;
      uint64_t v12 = v10 - 1;
      uint64_t v86 = a2;
      while (1)
      {
        outlined init with copy of AspireSimilarityPlaintextPackingDenseRow(v91 + v11, (uint64_t)v9, type metadata accessor for AspireHeSerializedDcrtPlaintext);
        outlined init with copy of AspireSimilarityPlaintextPackingDenseRow(a2 + v11, (uint64_t)v5, type metadata accessor for AspireHeSerializedDcrtPlaintext);
        uint64_t v14 = *v9;
        unint64_t v13 = v9[1];
        uint64_t v15 = *v5;
        unint64_t v16 = v5[1];
        uint64_t v17 = 0;
        switch(v13 >> 62)
        {
          case 1uLL:
            LODWORD(v17) = HIDWORD(v14) - v14;
            if (__OFSUB__(HIDWORD(v14), v14))
            {
              __break(1u);
LABEL_123:
              __break(1u);
LABEL_124:
              __break(1u);
LABEL_125:
              __break(1u);
LABEL_126:
              __break(1u);
LABEL_127:
              __break(1u);
LABEL_128:
              __break(1u);
LABEL_129:
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              __break(1u);
LABEL_139:
              __break(1u);
LABEL_140:
              __break(1u);
LABEL_141:
              __break(1u);
LABEL_142:
              __break(1u);
LABEL_143:
              __break(1u);
LABEL_144:
              __break(1u);
            }
            uint64_t v17 = (int)v17;
LABEL_10:
            unint64_t v21 = v16 >> 62;
            switch(v16 >> 62)
            {
              case 1uLL:
                LODWORD(v22) = HIDWORD(v15) - v15;
                if (__OFSUB__(HIDWORD(v15), v15)) {
                  goto LABEL_124;
                }
                uint64_t v22 = (int)v22;
LABEL_15:
                if (v17 != v22) {
                  goto LABEL_119;
                }
                if (v17 < 1) {
                  goto LABEL_112;
                }
                break;
              case 2uLL:
                uint64_t v24 = *(void *)(v15 + 16);
                uint64_t v23 = *(void *)(v15 + 24);
                BOOL v20 = __OFSUB__(v23, v24);
                uint64_t v22 = v23 - v24;
                if (!v20) {
                  goto LABEL_15;
                }
                goto LABEL_125;
              case 3uLL:
                if (v17) {
                  goto LABEL_119;
                }
                goto LABEL_112;
              default:
                uint64_t v22 = BYTE6(v16);
                goto LABEL_15;
            }
            break;
          case 2uLL:
            uint64_t v19 = *(void *)(v14 + 16);
            uint64_t v18 = *(void *)(v14 + 24);
            BOOL v20 = __OFSUB__(v18, v19);
            uint64_t v17 = v18 - v19;
            if (!v20) {
              goto LABEL_10;
            }
            goto LABEL_123;
          case 3uLL:
            goto LABEL_10;
          default:
            uint64_t v17 = BYTE6(v13);
            goto LABEL_10;
        }
        uint64_t v87 = v15;
        switch(v13 >> 62)
        {
          case 1uLL:
            if ((int)v14 > v14 >> 32) {
              goto LABEL_126;
            }
            outlined copy of Data._Representation(v14, v13);
            uint64_t v31 = (char *)__DataStorage._bytes.getter();
            if (!v31) {
              goto LABEL_31;
            }
            uint64_t v32 = __DataStorage._offset.getter();
            if (__OFSUB__((int)v14, v32)) {
              goto LABEL_128;
            }
            v31 += (int)v14 - v32;
LABEL_31:
            a2 = v86;
            __DataStorage._length.getter();
            if (v21)
            {
              uint64_t v85 = v31;
              if (v21 == 1)
              {
                uint64_t v33 = (int)v87;
                uint64_t v34 = (v87 >> 32) - (int)v87;
                if (v87 >> 32 < (int)v87) {
                  goto LABEL_137;
                }
                swift_retain();
                uint64_t v35 = (char *)__DataStorage._bytes.getter();
                if (v35)
                {
                  uint64_t v36 = __DataStorage._offset.getter();
                  if (__OFSUB__(v33, v36)) {
                    goto LABEL_144;
                  }
                  v35 += v33 - v36;
                }
                a2 = v86;
                uint64_t v37 = __DataStorage._length.getter();
                if (v37 >= v34) {
                  size_t v38 = v34;
                }
                else {
                  size_t v38 = v37;
                }
                if (!v85) {
                  goto LABEL_146;
                }
                if (!v35) {
                  goto LABEL_147;
                }
                int v39 = memcmp(v85, v35, v38);
                outlined consume of Data._Representation(v87, v16);
              }
              else
              {
                uint64_t v74 = *(void *)(v87 + 16);
                uint64_t v75 = *(void *)(v87 + 24);
                swift_retain();
                swift_retain();
                unint64_t v76 = (char *)__DataStorage._bytes.getter();
                if (v76)
                {
                  uint64_t v77 = __DataStorage._offset.getter();
                  if (__OFSUB__(v74, v77)) {
                    goto LABEL_143;
                  }
                  v76 += v74 - v77;
                }
                BOOL v20 = __OFSUB__(v75, v74);
                int64_t v78 = v75 - v74;
                if (v20) {
                  goto LABEL_138;
                }
                uint64_t v79 = __DataStorage._length.getter();
                if (v79 >= v78) {
                  size_t v80 = v78;
                }
                else {
                  size_t v80 = v79;
                }
                if (!v85) {
                  goto LABEL_157;
                }
                if (!v76) {
                  goto LABEL_158;
                }
                int v39 = memcmp(v85, v76, v80);
                swift_release();
                swift_release();
              }
            }
            else
            {
              __s1[0] = v87;
              LOWORD(__s1[1]) = v16;
              BYTE2(__s1[1]) = BYTE2(v16);
              BYTE3(__s1[1]) = BYTE3(v16);
              BYTE4(__s1[1]) = BYTE4(v16);
              BYTE5(__s1[1]) = BYTE5(v16);
              if (!v31) {
                goto LABEL_156;
              }
              int v39 = memcmp(v31, __s1, BYTE6(v16));
            }
            uint64_t v55 = v14;
            unint64_t v56 = v13;
            goto LABEL_111;
          case 2uLL:
            uint64_t v40 = *(void *)(v14 + 16);
            swift_retain();
            swift_retain();
            double v41 = (char *)__DataStorage._bytes.getter();
            if (!v41) {
              goto LABEL_46;
            }
            uint64_t v42 = __DataStorage._offset.getter();
            if (__OFSUB__(v40, v42)) {
              goto LABEL_127;
            }
            v41 += v40 - v42;
LABEL_46:
            __DataStorage._length.getter();
            if (v21)
            {
              uint64_t v85 = v41;
              if (v21 == 1)
              {
                uint64_t v43 = (int)v87;
                uint64_t v44 = (v87 >> 32) - (int)v87;
                if (v87 >> 32 < (int)v87) {
                  goto LABEL_132;
                }
                swift_retain();
                double v45 = (char *)__DataStorage._bytes.getter();
                if (v45)
                {
                  uint64_t v46 = __DataStorage._offset.getter();
                  if (__OFSUB__(v43, v46)) {
                    goto LABEL_142;
                  }
                  v45 += v43 - v46;
                }
                uint64_t v47 = __DataStorage._length.getter();
                if (v47 >= v44) {
                  size_t v48 = v44;
                }
                else {
                  size_t v48 = v47;
                }
                a2 = v86;
                if (!v85) {
                  goto LABEL_148;
                }
                if (!v45) {
                  goto LABEL_149;
                }
                int v49 = memcmp(v85, v45, v48);
                outlined consume of Data._Representation(v87, v16);
              }
              else
              {
                uint64_t v67 = *(void *)(v87 + 16);
                uint64_t v68 = *(void *)(v87 + 24);
                swift_retain();
                swift_retain();
                unint64_t v69 = (char *)__DataStorage._bytes.getter();
                if (v69)
                {
                  uint64_t v70 = __DataStorage._offset.getter();
                  if (__OFSUB__(v67, v70)) {
                    goto LABEL_141;
                  }
                  v69 += v67 - v70;
                }
                a2 = v86;
                BOOL v20 = __OFSUB__(v68, v67);
                int64_t v71 = v68 - v67;
                if (v20) {
                  goto LABEL_136;
                }
                uint64_t v72 = __DataStorage._length.getter();
                if (v72 >= v71) {
                  size_t v73 = v71;
                }
                else {
                  size_t v73 = v72;
                }
                if (!v85) {
                  goto LABEL_154;
                }
                if (!v69) {
                  goto LABEL_155;
                }
                int v49 = memcmp(v85, v69, v73);
                swift_release();
                swift_release();
              }
            }
            else
            {
              __s1[0] = v87;
              LOWORD(__s1[1]) = v16;
              BYTE2(__s1[1]) = BYTE2(v16);
              BYTE3(__s1[1]) = BYTE3(v16);
              BYTE4(__s1[1]) = BYTE4(v16);
              BYTE5(__s1[1]) = BYTE5(v16);
              a2 = v86;
              if (!v41) {
                goto LABEL_153;
              }
              int v49 = memcmp(v41, __s1, BYTE6(v16));
            }
            goto LABEL_96;
          case 3uLL:
            memset(__s1, 0, 14);
            if (!v21) {
              goto LABEL_67;
            }
            if (v21 != 1)
            {
              uint64_t v63 = *(void *)(v15 + 16);
              uint64_t v64 = *(void *)(v15 + 24);
              swift_retain();
              swift_retain();
              uint64_t v59 = (char *)__DataStorage._bytes.getter();
              if (v59)
              {
                uint64_t v65 = __DataStorage._offset.getter();
                if (__OFSUB__(v63, v65)) {
                  goto LABEL_140;
                }
                v59 += v63 - v65;
              }
              BOOL v20 = __OFSUB__(v64, v63);
              int64_t v61 = v64 - v63;
              if (v20) {
                goto LABEL_135;
              }
              uint64_t v62 = __DataStorage._length.getter();
              if (!v59) {
                goto LABEL_152;
              }
LABEL_80:
              if (v62 >= v61) {
                size_t v66 = v61;
              }
              else {
                size_t v66 = v62;
              }
              int v49 = memcmp(__s1, v59, v66);
LABEL_96:
              swift_release();
              swift_release();
              if (v49) {
                goto LABEL_119;
              }
              goto LABEL_112;
            }
            uint64_t v50 = (int)v15;
            uint64_t v26 = (v15 >> 32) - (int)v15;
            if (v15 >> 32 < (int)v15) {
              goto LABEL_130;
            }
            swift_retain();
            uint64_t v51 = __DataStorage._bytes.getter();
            if (!v51) {
              goto LABEL_150;
            }
            uint64_t v28 = v51;
            uint64_t v52 = __DataStorage._offset.getter();
            BOOL v20 = __OFSUB__(v50, v52);
            uint64_t v30 = v50 - v52;
            if (v20) {
              goto LABEL_133;
            }
            break;
          default:
            __s1[0] = v14;
            LOWORD(__s1[1]) = v13;
            BYTE2(__s1[1]) = BYTE2(v13);
            BYTE3(__s1[1]) = BYTE3(v13);
            BYTE4(__s1[1]) = BYTE4(v13);
            BYTE5(__s1[1]) = BYTE5(v13);
            if (!v21)
            {
LABEL_67:
              uint64_t __s2 = v15;
              __int16 v93 = v16;
              char v94 = BYTE2(v16);
              char v95 = BYTE3(v16);
              char v96 = BYTE4(v16);
              char v97 = BYTE5(v16);
              if (memcmp(__s1, &__s2, BYTE6(v16))) {
                goto LABEL_119;
              }
              goto LABEL_112;
            }
            if (v21 != 1)
            {
              uint64_t v57 = *(void *)(v15 + 16);
              uint64_t v58 = *(void *)(v15 + 24);
              swift_retain();
              swift_retain();
              uint64_t v59 = (char *)__DataStorage._bytes.getter();
              if (v59)
              {
                uint64_t v60 = __DataStorage._offset.getter();
                if (__OFSUB__(v57, v60)) {
                  goto LABEL_139;
                }
                v59 += v57 - v60;
              }
              BOOL v20 = __OFSUB__(v58, v57);
              int64_t v61 = v58 - v57;
              if (v20) {
                goto LABEL_134;
              }
              uint64_t v62 = __DataStorage._length.getter();
              if (!v59) {
                goto LABEL_151;
              }
              goto LABEL_80;
            }
            uint64_t v25 = (int)v15;
            uint64_t v26 = (v15 >> 32) - (int)v15;
            if (v15 >> 32 < (int)v15) {
              goto LABEL_129;
            }
            swift_retain();
            uint64_t v27 = __DataStorage._bytes.getter();
            if (!v27)
            {
              __DataStorage._length.getter();
              __break(1u);
LABEL_146:
              __break(1u);
LABEL_147:
              __break(1u);
LABEL_148:
              __break(1u);
LABEL_149:
              __break(1u);
LABEL_150:
              __DataStorage._length.getter();
              __break(1u);
LABEL_151:
              __break(1u);
LABEL_152:
              __break(1u);
LABEL_153:
              __break(1u);
LABEL_154:
              __break(1u);
LABEL_155:
              __break(1u);
LABEL_156:
              __break(1u);
LABEL_157:
              __break(1u);
LABEL_158:
              __break(1u);
              JUMPOUT(0x249E44D48);
            }
            uint64_t v28 = v27;
            uint64_t v29 = __DataStorage._offset.getter();
            BOOL v20 = __OFSUB__(v25, v29);
            uint64_t v30 = v25 - v29;
            if (v20) {
              goto LABEL_131;
            }
            break;
        }
        uint64_t v53 = __DataStorage._length.getter();
        if (v53 >= v26) {
          size_t v54 = v26;
        }
        else {
          size_t v54 = v53;
        }
        int v39 = memcmp(__s1, (const void *)(v28 + v30), v54);
        uint64_t v55 = v87;
        unint64_t v56 = v16;
LABEL_111:
        outlined consume of Data._Representation(v55, v56);
        if (v39)
        {
LABEL_119:
          outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v89, type metadata accessor for AspireHeSerializedDcrtPlaintext);
          outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v9, type metadata accessor for AspireHeSerializedDcrtPlaintext);
          goto LABEL_120;
        }
LABEL_112:
        uint64_t v5 = v89;
        type metadata accessor for UnknownStorage();
        _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_2(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
        char v81 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v5, type metadata accessor for AspireHeSerializedDcrtPlaintext);
        outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v9, type metadata accessor for AspireHeSerializedDcrtPlaintext);
        BOOL v83 = v12-- != 0;
        if (v81)
        {
          v11 += v88;
          if (v83) {
            continue;
          }
        }
        return v81 & 1;
      }
    }
    char v81 = 1;
  }
  else
  {
LABEL_120:
    char v81 = 0;
  }
  return v81 & 1;
}

{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  size_t v36;
  int v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  size_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  size_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  int64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  size_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  int64_t v65;
  uint64_t v66;
  size_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  int64_t v72;
  uint64_t v73;
  size_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  size_t v96;
  int v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  size_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  size_t v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  int64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  size_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  int64_t v125;
  uint64_t v126;
  size_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  int64_t v132;
  uint64_t v133;
  size_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  void *v138;
  uint64_t v139;
  BOOL v140;
  char v141;
  const void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t __s2;
  __int16 v151;
  char v152;
  char v153;
  char v154;
  char v155;
  void __s1[3];

  __s1[2] = *MEMORY[0x263EF8340];
  uint64_t v149 = type metadata accessor for AspirePirSerializedKeywordDbRow(0);
  MEMORY[0x270FA5388](v149);
  uint64_t v5 = (uint64_t *)((char *)&v143 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v143 - v8;
  uint64_t v10 = *(void *)(a1 + 16);
  if (v10 == *(void *)(a2 + 16))
  {
    if (v10 && a1 != a2)
    {
      unint64_t v11 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
      uint64_t v12 = *(void *)(v7 + 72);
      uint64_t v144 = a2;
      uint64_t v145 = v12;
      unint64_t v13 = v10 - 1;
      uint64_t v146 = a1;
      while (1)
      {
        int64_t v148 = v13;
        outlined init with copy of AspireSimilarityPlaintextPackingDenseRow(a1 + v11, (uint64_t)v9, type metadata accessor for AspirePirSerializedKeywordDbRow);
        uint64_t v147 = v11;
        outlined init with copy of AspireSimilarityPlaintextPackingDenseRow(a2 + v11, (uint64_t)v5, type metadata accessor for AspirePirSerializedKeywordDbRow);
        uint64_t v15 = *(void *)v9;
        uint64_t v14 = *((void *)v9 + 1);
        unint64_t v16 = *v5;
        uint64_t v17 = v5[1];
        uint64_t v18 = 0;
        switch(v14 >> 62)
        {
          case 1uLL:
            LODWORD(v18) = HIDWORD(v15) - v15;
            if (__OFSUB__(HIDWORD(v15), v15))
            {
              __break(1u);
LABEL_238:
              __break(1u);
LABEL_239:
              __break(1u);
LABEL_240:
              __break(1u);
LABEL_241:
              __break(1u);
LABEL_242:
              __break(1u);
LABEL_243:
              __break(1u);
LABEL_244:
              __break(1u);
LABEL_245:
              __break(1u);
LABEL_246:
              __break(1u);
LABEL_247:
              __break(1u);
LABEL_248:
              __break(1u);
LABEL_249:
              __break(1u);
LABEL_250:
              __break(1u);
LABEL_251:
              __break(1u);
LABEL_252:
              __break(1u);
LABEL_253:
              __break(1u);
LABEL_254:
              __break(1u);
LABEL_255:
              __break(1u);
LABEL_256:
              __break(1u);
LABEL_257:
              __break(1u);
LABEL_258:
              __break(1u);
LABEL_259:
              __break(1u);
LABEL_260:
              __break(1u);
LABEL_261:
              __break(1u);
LABEL_262:
              __break(1u);
LABEL_263:
              __break(1u);
LABEL_264:
              __break(1u);
LABEL_265:
              __break(1u);
LABEL_266:
              __break(1u);
LABEL_267:
              __break(1u);
LABEL_268:
              __break(1u);
LABEL_269:
              __break(1u);
LABEL_270:
              __break(1u);
LABEL_271:
              __break(1u);
LABEL_272:
              __break(1u);
LABEL_273:
              __break(1u);
LABEL_274:
              __break(1u);
LABEL_275:
              __break(1u);
LABEL_276:
              __break(1u);
LABEL_277:
              __break(1u);
LABEL_278:
              __break(1u);
LABEL_279:
              __break(1u);
LABEL_280:
              __break(1u);
LABEL_281:
              __break(1u);
LABEL_282:
              __break(1u);
            }
            uint64_t v18 = (int)v18;
LABEL_10:
            uint64_t v22 = v17 >> 62;
            switch(v17 >> 62)
            {
              case 1uLL:
                LODWORD(v23) = HIDWORD(v16) - v16;
                if (__OFSUB__(HIDWORD(v16), v16)) {
                  goto LABEL_240;
                }
                uint64_t v23 = (int)v23;
LABEL_17:
                if (v18 != v23) {
                  goto LABEL_234;
                }
                if (v18 < 1) {
                  goto LABEL_114;
                }
                break;
              case 2uLL:
                uint64_t v25 = *(void *)(v16 + 16);
                uint64_t v24 = *(void *)(v16 + 24);
                unint64_t v21 = __OFSUB__(v24, v25);
                uint64_t v23 = v24 - v25;
                if (!v21) {
                  goto LABEL_17;
                }
                goto LABEL_239;
              case 3uLL:
                if (v18) {
                  goto LABEL_234;
                }
                goto LABEL_114;
              default:
                uint64_t v23 = BYTE6(v17);
                goto LABEL_17;
            }
            break;
          case 2uLL:
            BOOL v20 = *(void *)(v15 + 16);
            uint64_t v19 = *(void *)(v15 + 24);
            unint64_t v21 = __OFSUB__(v19, v20);
            uint64_t v18 = v19 - v20;
            if (!v21) {
              goto LABEL_10;
            }
            goto LABEL_238;
          case 3uLL:
            goto LABEL_10;
          default:
            uint64_t v18 = BYTE6(v14);
            goto LABEL_10;
        }
        switch(v14 >> 62)
        {
          case 1uLL:
            if ((int)v15 > v15 >> 32) {
              goto LABEL_245;
            }
            outlined copy of Data._Representation(*(void *)v9, *((void *)v9 + 1));
            uint64_t v31 = (char *)__DataStorage._bytes.getter();
            if (!v31) {
              goto LABEL_33;
            }
            uint64_t v32 = __DataStorage._offset.getter();
            if (__OFSUB__((int)v15, v32)) {
              goto LABEL_248;
            }
            v31 += (int)v15 - v32;
LABEL_33:
            a2 = v144;
            __DataStorage._length.getter();
            if (v22)
            {
              int v143 = v31;
              if (v22 == 1)
              {
                if (v16 >> 32 < (int)v16) {
                  goto LABEL_259;
                }
                swift_retain();
                uint64_t v33 = (char *)__DataStorage._bytes.getter();
                if (v33)
                {
                  uint64_t v34 = __DataStorage._offset.getter();
                  if (__OFSUB__((int)v16, v34)) {
                    goto LABEL_276;
                  }
                  v33 += (int)v16 - v34;
                }
                a2 = v144;
                uint64_t v35 = __DataStorage._length.getter();
                if (v35 >= (v16 >> 32) - (int)v16) {
                  uint64_t v36 = (v16 >> 32) - (int)v16;
                }
                else {
                  uint64_t v36 = v35;
                }
                if (!v143) {
                  goto LABEL_284;
                }
                if (!v33) {
                  goto LABEL_285;
                }
                uint64_t v37 = memcmp(v143, v33, v36);
                outlined consume of Data._Representation(v16, v17);
              }
              else
              {
                uint64_t v68 = *(void *)(v16 + 16);
                unint64_t v69 = *(void *)(v16 + 24);
                swift_retain();
                swift_retain();
                uint64_t v70 = (char *)__DataStorage._bytes.getter();
                if (v70)
                {
                  int64_t v71 = __DataStorage._offset.getter();
                  if (__OFSUB__(v68, v71)) {
                    goto LABEL_275;
                  }
                  v70 += v68 - v71;
                }
                unint64_t v21 = __OFSUB__(v69, v68);
                uint64_t v72 = v69 - v68;
                if (v21) {
                  goto LABEL_260;
                }
                size_t v73 = __DataStorage._length.getter();
                if (v73 >= v72) {
                  uint64_t v74 = v72;
                }
                else {
                  uint64_t v74 = v73;
                }
                if (!v143) {
                  goto LABEL_295;
                }
                if (!v70) {
                  goto LABEL_296;
                }
                uint64_t v37 = memcmp(v143, v70, v74);
                swift_release();
                swift_release();
              }
            }
            else
            {
              __s1[0] = v16;
              LOWORD(__s1[1]) = v17;
              BYTE2(__s1[1]) = BYTE2(v17);
              BYTE3(__s1[1]) = BYTE3(v17);
              BYTE4(__s1[1]) = BYTE4(v17);
              BYTE5(__s1[1]) = BYTE5(v17);
              if (!v31) {
                goto LABEL_294;
              }
              uint64_t v37 = memcmp(v31, __s1, BYTE6(v17));
            }
            outlined consume of Data._Representation(v15, v14);
            if (v37) {
              goto LABEL_234;
            }
            goto LABEL_114;
          case 2uLL:
            size_t v38 = *(void *)(v15 + 16);
            swift_retain();
            swift_retain();
            int v39 = (char *)__DataStorage._bytes.getter();
            if (!v39) {
              goto LABEL_48;
            }
            uint64_t v40 = __DataStorage._offset.getter();
            if (__OFSUB__(v38, v40)) {
              goto LABEL_247;
            }
            v39 += v38 - v40;
LABEL_48:
            a2 = v144;
            __DataStorage._length.getter();
            if (v22)
            {
              int v143 = v39;
              if (v22 == 1)
              {
                if (v16 >> 32 < (int)v16) {
                  goto LABEL_254;
                }
                swift_retain();
                double v41 = (char *)__DataStorage._bytes.getter();
                if (v41)
                {
                  uint64_t v42 = __DataStorage._offset.getter();
                  if (__OFSUB__((int)v16, v42)) {
                    goto LABEL_274;
                  }
                  v41 += (int)v16 - v42;
                }
                uint64_t v43 = __DataStorage._length.getter();
                if (v43 >= (v16 >> 32) - (int)v16) {
                  uint64_t v44 = (v16 >> 32) - (int)v16;
                }
                else {
                  uint64_t v44 = v43;
                }
                a2 = v144;
                if (!v143) {
                  goto LABEL_286;
                }
                if (!v41) {
                  goto LABEL_287;
                }
                double v45 = memcmp(v143, v41, v44);
                outlined consume of Data._Representation(v16, v17);
              }
              else
              {
                int64_t v61 = *(void *)(v16 + 16);
                uint64_t v62 = *(void *)(v16 + 24);
                swift_retain();
                swift_retain();
                uint64_t v63 = (char *)__DataStorage._bytes.getter();
                if (v63)
                {
                  uint64_t v64 = __DataStorage._offset.getter();
                  if (__OFSUB__(v61, v64)) {
                    goto LABEL_273;
                  }
                  v63 += v61 - v64;
                }
                unint64_t v21 = __OFSUB__(v62, v61);
                uint64_t v65 = v62 - v61;
                if (v21) {
                  goto LABEL_258;
                }
                size_t v66 = __DataStorage._length.getter();
                if (v66 >= v65) {
                  uint64_t v67 = v65;
                }
                else {
                  uint64_t v67 = v66;
                }
                if (!v143) {
                  goto LABEL_292;
                }
                if (!v63) {
                  goto LABEL_293;
                }
                double v45 = memcmp(v143, v63, v67);
                swift_release();
                swift_release();
              }
            }
            else
            {
              __s1[0] = v16;
              LOWORD(__s1[1]) = v17;
              BYTE2(__s1[1]) = BYTE2(v17);
              BYTE3(__s1[1]) = BYTE3(v17);
              BYTE4(__s1[1]) = BYTE4(v17);
              BYTE5(__s1[1]) = BYTE5(v17);
              if (!v39) {
                goto LABEL_291;
              }
              double v45 = memcmp(v39, __s1, BYTE6(v17));
            }
            goto LABEL_99;
          case 3uLL:
            memset(__s1, 0, 14);
            if (!v22) {
              goto LABEL_70;
            }
            if (v22 != 1)
            {
              uint64_t v57 = *(void *)(v16 + 16);
              uint64_t v58 = *(void *)(v16 + 24);
              swift_retain();
              swift_retain();
              uint64_t v53 = (char *)__DataStorage._bytes.getter();
              if (v53)
              {
                uint64_t v59 = __DataStorage._offset.getter();
                if (__OFSUB__(v57, v59)) {
                  goto LABEL_272;
                }
                v53 += v57 - v59;
              }
              unint64_t v21 = __OFSUB__(v58, v57);
              uint64_t v55 = v58 - v57;
              if (v21) {
                goto LABEL_257;
              }
              unint64_t v56 = __DataStorage._length.getter();
              if (!v53) {
                goto LABEL_290;
              }
LABEL_83:
              if (v56 >= v55) {
                uint64_t v60 = v55;
              }
              else {
                uint64_t v60 = v56;
              }
              double v45 = memcmp(__s1, v53, v60);
LABEL_99:
              swift_release();
              swift_release();
              if (v45) {
                goto LABEL_234;
              }
              goto LABEL_114;
            }
            uint64_t v26 = (v16 >> 32) - (int)v16;
            if (v16 >> 32 < (int)v16) {
              goto LABEL_252;
            }
            swift_retain();
            uint64_t v46 = __DataStorage._bytes.getter();
            if (!v46) {
              goto LABEL_288;
            }
            uint64_t v28 = v46;
            uint64_t v47 = __DataStorage._offset.getter();
            uint64_t v30 = (int)v16 - v47;
            if (__OFSUB__((int)v16, v47)) {
              goto LABEL_255;
            }
            goto LABEL_65;
          default:
            __s1[0] = *(void *)v9;
            LOWORD(__s1[1]) = v14;
            BYTE2(__s1[1]) = BYTE2(v14);
            BYTE3(__s1[1]) = BYTE3(v14);
            BYTE4(__s1[1]) = BYTE4(v14);
            BYTE5(__s1[1]) = BYTE5(v14);
            if (v22)
            {
              if (v22 != 1)
              {
                uint64_t v51 = *(void *)(v16 + 16);
                uint64_t v52 = *(void *)(v16 + 24);
                swift_retain();
                swift_retain();
                uint64_t v53 = (char *)__DataStorage._bytes.getter();
                if (v53)
                {
                  size_t v54 = __DataStorage._offset.getter();
                  if (__OFSUB__(v51, v54)) {
                    goto LABEL_271;
                  }
                  v53 += v51 - v54;
                }
                unint64_t v21 = __OFSUB__(v52, v51);
                uint64_t v55 = v52 - v51;
                if (v21) {
                  goto LABEL_256;
                }
                unint64_t v56 = __DataStorage._length.getter();
                if (!v53) {
                  goto LABEL_289;
                }
                goto LABEL_83;
              }
              uint64_t v26 = (v16 >> 32) - (int)v16;
              if (v16 >> 32 < (int)v16) {
                goto LABEL_251;
              }
              swift_retain();
              uint64_t v27 = __DataStorage._bytes.getter();
              if (!v27)
              {
                __DataStorage._length.getter();
                __break(1u);
LABEL_284:
                __break(1u);
LABEL_285:
                __break(1u);
LABEL_286:
                __break(1u);
LABEL_287:
                __break(1u);
LABEL_288:
                __DataStorage._length.getter();
                __break(1u);
LABEL_289:
                __break(1u);
LABEL_290:
                __break(1u);
LABEL_291:
                __break(1u);
LABEL_292:
                __break(1u);
LABEL_293:
                __break(1u);
LABEL_294:
                __break(1u);
LABEL_295:
                __break(1u);
LABEL_296:
                __break(1u);
LABEL_297:
                __DataStorage._length.getter();
                __break(1u);
LABEL_298:
                __break(1u);
LABEL_299:
                __break(1u);
LABEL_300:
                __break(1u);
LABEL_301:
                __break(1u);
LABEL_302:
                __DataStorage._length.getter();
                __break(1u);
LABEL_303:
                __break(1u);
LABEL_304:
                __break(1u);
LABEL_305:
                __break(1u);
LABEL_306:
                __break(1u);
LABEL_307:
                __break(1u);
LABEL_308:
                __break(1u);
LABEL_309:
                __break(1u);
LABEL_310:
                __break(1u);
                JUMPOUT(0x249E45FDCLL);
              }
              uint64_t v28 = v27;
              uint64_t v29 = __DataStorage._offset.getter();
              uint64_t v30 = (int)v16 - v29;
              if (__OFSUB__((int)v16, v29)) {
                goto LABEL_253;
              }
LABEL_65:
              size_t v48 = __DataStorage._length.getter();
              if (v48 >= v26) {
                int v49 = v26;
              }
              else {
                int v49 = v48;
              }
              uint64_t v50 = memcmp(__s1, (const void *)(v28 + v30), v49);
              outlined consume of Data._Representation(v16, v17);
              a2 = v144;
              if (v50)
              {
LABEL_234:
                outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v5, type metadata accessor for AspirePirSerializedKeywordDbRow);
                outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v9, type metadata accessor for AspirePirSerializedKeywordDbRow);
                goto LABEL_235;
              }
            }
            else
            {
LABEL_70:
              uint64_t __s2 = v16;
              uint64_t v151 = v17;
              uint64_t v152 = BYTE2(v17);
              uint64_t v153 = BYTE3(v17);
              uint64_t v154 = BYTE4(v17);
              uint64_t v155 = BYTE5(v17);
              if (memcmp(__s1, &__s2, BYTE6(v17))) {
                goto LABEL_234;
              }
            }
LABEL_114:
            unint64_t v76 = *((void *)v9 + 2);
            uint64_t v75 = *((void *)v9 + 3);
            uint64_t v77 = v5[2];
            int64_t v78 = v5[3];
            uint64_t v79 = 0;
            switch(v75 >> 62)
            {
              case 1uLL:
                LODWORD(v79) = HIDWORD(v76) - v76;
                if (__OFSUB__(HIDWORD(v76), v76)) {
                  goto LABEL_241;
                }
                uint64_t v79 = (int)v79;
LABEL_119:
                unint64_t v82 = v78 >> 62;
                switch(v78 >> 62)
                {
                  case 1uLL:
                    LODWORD(v83) = HIDWORD(v77) - v77;
                    if (__OFSUB__(HIDWORD(v77), v77)) {
                      goto LABEL_243;
                    }
                    BOOL v83 = (int)v83;
LABEL_124:
                    if (v79 != v83) {
                      goto LABEL_234;
                    }
                    if (v79 < 1) {
                      goto LABEL_221;
                    }
                    break;
                  case 2uLL:
                    uint64_t v85 = *(void *)(v77 + 16);
                    uint64_t v84 = *(void *)(v77 + 24);
                    unint64_t v21 = __OFSUB__(v84, v85);
                    BOOL v83 = v84 - v85;
                    if (!v21) {
                      goto LABEL_124;
                    }
                    goto LABEL_244;
                  case 3uLL:
                    if (v79) {
                      goto LABEL_234;
                    }
                    goto LABEL_221;
                  default:
                    BOOL v83 = BYTE6(v78);
                    goto LABEL_124;
                }
                break;
              case 2uLL:
                char v81 = *(void *)(v76 + 16);
                size_t v80 = *(void *)(v76 + 24);
                unint64_t v21 = __OFSUB__(v80, v81);
                uint64_t v79 = v80 - v81;
                if (!v21) {
                  goto LABEL_119;
                }
                goto LABEL_242;
              case 3uLL:
                goto LABEL_119;
              default:
                uint64_t v79 = BYTE6(v75);
                goto LABEL_119;
            }
            switch(v75 >> 62)
            {
              case 1uLL:
                if ((int)v76 > v76 >> 32) {
                  goto LABEL_246;
                }
                outlined copy of Data._Representation(*((void *)v9 + 2), *((void *)v9 + 3));
                uint64_t v91 = (char *)__DataStorage._bytes.getter();
                if (!v91) {
                  goto LABEL_140;
                }
                uint64_t v92 = __DataStorage._offset.getter();
                if (__OFSUB__((int)v76, v92)) {
                  goto LABEL_250;
                }
                v91 += (int)v76 - v92;
LABEL_140:
                a2 = v144;
                __DataStorage._length.getter();
                if (v82)
                {
                  int v143 = v91;
                  if (v82 == 1)
                  {
                    if (v77 >> 32 < (int)v77) {
                      goto LABEL_269;
                    }
                    swift_retain();
                    __int16 v93 = (char *)__DataStorage._bytes.getter();
                    if (v93)
                    {
                      char v94 = __DataStorage._offset.getter();
                      if (__OFSUB__((int)v77, v94)) {
                        goto LABEL_282;
                      }
                      v93 += (int)v77 - v94;
                    }
                    a2 = v144;
                    char v95 = __DataStorage._length.getter();
                    if (v95 >= (v77 >> 32) - (int)v77) {
                      char v96 = (v77 >> 32) - (int)v77;
                    }
                    else {
                      char v96 = v95;
                    }
                    if (!v143) {
                      goto LABEL_298;
                    }
                    if (!v93) {
                      goto LABEL_299;
                    }
                    char v97 = memcmp(v143, v93, v96);
                    outlined consume of Data._Representation(v77, v78);
                  }
                  else
                  {
                    uint64_t v128 = *(void *)(v77 + 16);
                    uint64_t v129 = *(void *)(v77 + 24);
                    swift_retain();
                    swift_retain();
                    unint64_t v130 = (char *)__DataStorage._bytes.getter();
                    if (v130)
                    {
                      uint64_t v131 = __DataStorage._offset.getter();
                      if (__OFSUB__(v128, v131)) {
                        goto LABEL_281;
                      }
                      v130 += v128 - v131;
                    }
                    unint64_t v21 = __OFSUB__(v129, v128);
                    int v132 = v129 - v128;
                    if (v21) {
                      goto LABEL_270;
                    }
                    uint64_t v133 = __DataStorage._length.getter();
                    if (v133 >= v132) {
                      uint64_t v134 = v132;
                    }
                    else {
                      uint64_t v134 = v133;
                    }
                    if (!v143) {
                      goto LABEL_309;
                    }
                    if (!v130) {
                      goto LABEL_310;
                    }
                    char v97 = memcmp(v143, v130, v134);
                    swift_release();
                    swift_release();
                  }
                }
                else
                {
                  __s1[0] = v77;
                  LOWORD(__s1[1]) = v78;
                  BYTE2(__s1[1]) = BYTE2(v78);
                  BYTE3(__s1[1]) = BYTE3(v78);
                  BYTE4(__s1[1]) = BYTE4(v78);
                  BYTE5(__s1[1]) = BYTE5(v78);
                  if (!v91) {
                    goto LABEL_308;
                  }
                  char v97 = memcmp(v91, __s1, BYTE6(v78));
                }
                outlined consume of Data._Representation(v76, v75);
                if (v97) {
                  goto LABEL_234;
                }
LABEL_221:
                double v135 = *(int *)(v149 + 28);
                double v136 = &v9[v135];
                uint64_t v137 = *(void *)&v9[v135 + 8];
                unint64_t v138 = (uint64_t *)((char *)v5 + v135);
                uint64_t v139 = v138[1];
                if (v137)
                {
                  if (!v139) {
                    goto LABEL_234;
                  }
                  uint64_t v140 = *(void *)v136 == *v138 && v137 == v139;
                  if (!v140 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
                    goto LABEL_234;
                  }
                }
                else if (v139)
                {
                  goto LABEL_234;
                }
                type metadata accessor for UnknownStorage();
                _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_2(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
                uint64_t v141 = dispatch thunk of static Equatable.== infix(_:_:)();
                outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v5, type metadata accessor for AspirePirSerializedKeywordDbRow);
                outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v9, type metadata accessor for AspirePirSerializedKeywordDbRow);
                unint64_t v13 = v148 - 1;
                if ((v141 & 1) == 0) {
                  return v141 & 1;
                }
                a1 = v146;
                unint64_t v11 = v147 + v145;
                if (!v148) {
                  return v141 & 1;
                }
                break;
              case 2uLL:
                uint64_t v98 = *(void *)(v76 + 16);
                swift_retain();
                swift_retain();
                uint64_t v99 = (char *)__DataStorage._bytes.getter();
                if (!v99) {
                  goto LABEL_155;
                }
                os_log_type_t v100 = __DataStorage._offset.getter();
                if (__OFSUB__(v98, v100)) {
                  goto LABEL_249;
                }
                v99 += v98 - v100;
LABEL_155:
                a2 = v144;
                __DataStorage._length.getter();
                if (v82)
                {
                  int v143 = v99;
                  if (v82 == 1)
                  {
                    if (v77 >> 32 < (int)v77) {
                      goto LABEL_264;
                    }
                    swift_retain();
                    uint64_t v101 = (char *)__DataStorage._bytes.getter();
                    if (v101)
                    {
                      uint64_t v102 = __DataStorage._offset.getter();
                      if (__OFSUB__((int)v77, v102)) {
                        goto LABEL_280;
                      }
                      v101 += (int)v77 - v102;
                    }
                    a2 = v144;
                    uint64_t v103 = __DataStorage._length.getter();
                    if (v103 >= (v77 >> 32) - (int)v77) {
                      Swift::String v104 = (v77 >> 32) - (int)v77;
                    }
                    else {
                      Swift::String v104 = v103;
                    }
                    if (!v143) {
                      goto LABEL_300;
                    }
                    if (!v101) {
                      goto LABEL_301;
                    }
                    int v105 = memcmp(v143, v101, v104);
                    outlined consume of Data._Representation(v77, v78);
                  }
                  else
                  {
                    uint64_t v121 = *(void *)(v77 + 16);
                    char v122 = *(void *)(v77 + 24);
                    swift_retain();
                    swift_retain();
                    uint64_t v123 = (char *)__DataStorage._bytes.getter();
                    if (v123)
                    {
                      uint64_t v124 = __DataStorage._offset.getter();
                      if (__OFSUB__(v121, v124)) {
                        goto LABEL_279;
                      }
                      v123 += v121 - v124;
                    }
                    unint64_t v21 = __OFSUB__(v122, v121);
                    uint64_t v125 = v122 - v121;
                    if (v21) {
                      goto LABEL_268;
                    }
                    double v126 = __DataStorage._length.getter();
                    if (v126 >= v125) {
                      double v127 = v125;
                    }
                    else {
                      double v127 = v126;
                    }
                    if (!v143) {
                      goto LABEL_306;
                    }
                    if (!v123) {
                      goto LABEL_307;
                    }
                    int v105 = memcmp(v143, v123, v127);
                    swift_release();
                    swift_release();
                  }
                }
                else
                {
                  __s1[0] = v77;
                  LOWORD(__s1[1]) = v78;
                  BYTE2(__s1[1]) = BYTE2(v78);
                  BYTE3(__s1[1]) = BYTE3(v78);
                  BYTE4(__s1[1]) = BYTE4(v78);
                  BYTE5(__s1[1]) = BYTE5(v78);
                  if (!v99) {
                    goto LABEL_305;
                  }
                  int v105 = memcmp(v99, __s1, BYTE6(v78));
                }
LABEL_206:
                swift_release();
                swift_release();
                if (v105) {
                  goto LABEL_234;
                }
                goto LABEL_221;
              case 3uLL:
                memset(__s1, 0, 14);
                if (!v82) {
                  goto LABEL_177;
                }
                if (v82 == 1)
                {
                  uint64_t v86 = (v77 >> 32) - (int)v77;
                  if (v77 >> 32 < (int)v77) {
                    goto LABEL_262;
                  }
                  swift_retain();
                  size_t v106 = __DataStorage._bytes.getter();
                  if (!v106) {
                    goto LABEL_302;
                  }
                  uint64_t v88 = v106;
                  int v107 = __DataStorage._offset.getter();
                  uint64_t v90 = (int)v77 - v107;
                  if (__OFSUB__((int)v77, v107)) {
                    goto LABEL_265;
                  }
LABEL_172:
                  uint64_t v108 = __DataStorage._length.getter();
                  if (v108 >= v86) {
                    uint64_t v109 = v86;
                  }
                  else {
                    uint64_t v109 = v108;
                  }
                  uint64_t v110 = memcmp(__s1, (const void *)(v88 + v90), v109);
                  outlined consume of Data._Representation(v77, v78);
                  a2 = v144;
                  if (v110) {
                    goto LABEL_234;
                  }
                  goto LABEL_221;
                }
                int64_t v117 = *(void *)(v77 + 16);
                uint64_t v118 = *(void *)(v77 + 24);
                swift_retain();
                swift_retain();
                uint64_t v113 = (char *)__DataStorage._bytes.getter();
                if (v113)
                {
                  uint64_t v119 = __DataStorage._offset.getter();
                  if (__OFSUB__(v117, v119)) {
                    goto LABEL_278;
                  }
                  v113 += v117 - v119;
                }
                unint64_t v21 = __OFSUB__(v118, v117);
                uint64_t v115 = v118 - v117;
                if (v21) {
                  goto LABEL_267;
                }
                uint64_t v116 = __DataStorage._length.getter();
                if (!v113) {
                  goto LABEL_304;
                }
LABEL_190:
                if (v116 >= v115) {
                  uint64_t v120 = v115;
                }
                else {
                  uint64_t v120 = v116;
                }
                int v105 = memcmp(__s1, v113, v120);
                goto LABEL_206;
              default:
                __s1[0] = *((void *)v9 + 2);
                LOWORD(__s1[1]) = v75;
                BYTE2(__s1[1]) = BYTE2(v75);
                BYTE3(__s1[1]) = BYTE3(v75);
                BYTE4(__s1[1]) = BYTE4(v75);
                BYTE5(__s1[1]) = BYTE5(v75);
                if (!v82)
                {
LABEL_177:
                  uint64_t __s2 = v77;
                  uint64_t v151 = v78;
                  uint64_t v152 = BYTE2(v78);
                  uint64_t v153 = BYTE3(v78);
                  uint64_t v154 = BYTE4(v78);
                  uint64_t v155 = BYTE5(v78);
                  if (memcmp(__s1, &__s2, BYTE6(v78))) {
                    goto LABEL_234;
                  }
                  goto LABEL_221;
                }
                if (v82 == 1)
                {
                  uint64_t v86 = (v77 >> 32) - (int)v77;
                  if (v77 >> 32 < (int)v77) {
                    goto LABEL_261;
                  }
                  swift_retain();
                  uint64_t v87 = __DataStorage._bytes.getter();
                  if (!v87) {
                    goto LABEL_297;
                  }
                  uint64_t v88 = v87;
                  uint64_t v89 = __DataStorage._offset.getter();
                  uint64_t v90 = (int)v77 - v89;
                  if (__OFSUB__((int)v77, v89)) {
                    goto LABEL_263;
                  }
                  goto LABEL_172;
                }
                os_log_type_t v111 = *(void *)(v77 + 16);
                uint64_t v112 = *(void *)(v77 + 24);
                swift_retain();
                swift_retain();
                uint64_t v113 = (char *)__DataStorage._bytes.getter();
                if (v113)
                {
                  uint64_t v114 = __DataStorage._offset.getter();
                  if (__OFSUB__(v111, v114)) {
                    goto LABEL_277;
                  }
                  v113 += v111 - v114;
                }
                unint64_t v21 = __OFSUB__(v112, v111);
                uint64_t v115 = v112 - v111;
                if (v21) {
                  goto LABEL_266;
                }
                uint64_t v116 = __DataStorage._length.getter();
                if (!v113) {
                  goto LABEL_303;
                }
                goto LABEL_190;
            }
            break;
        }
      }
    }
    uint64_t v141 = 1;
  }
  else
  {
LABEL_235:
    uint64_t v141 = 0;
  }
  return v141 & 1;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int (*v61)(char *, uint64_t, uint64_t);
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  BOOL v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int *v125;
  int *v126;
  uint64_t v127;
  int v128;
  int v129;
  int v130;
  char v131;
  uint64_t (*v132)(uint64_t);
  uint64_t (*v133)(uint64_t);
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char v160;
  char v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t (*v166)(uint64_t, uint64_t, uint64_t);
  uint64_t v167;
  int v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char v172;
  char v173;
  uint64_t (*v174)(uint64_t);
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t *v179;
  uint64_t (*v180)(uint64_t);
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  uint64_t (**v188)(uint64_t, uint64_t, uint64_t);
  uint64_t v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  unsigned int (**v200)(char *, uint64_t, uint64_t);
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t *v210;
  unint64_t v211;
  uint64_t *v212;
  uint64_t v213;
  void *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t *v219;
  uint64_t v220;
  char *v221;
  uint64_t v222;
  char v223;
  void __s1[4];

  void __s1[3] = *MEMORY[0x263EF8340];
  uint64_t v4 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v201 = (uint64_t)&v181 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v202 = (uint64_t)&v181 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v206 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireSimilarityPlaintextPacking?, AspireSimilarityPlaintextPacking?));
  MEMORY[0x270FA5388](v206);
  uint64_t v207 = (uint64_t)&v181 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v203 = type metadata accessor for AspireHeSerializedFullCiphertext(0);
  MEMORY[0x270FA5388](v203);
  uint64_t v219 = (uint64_t *)((char *)&v181 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v205 = type metadata accessor for AspireHeSerializedSeededCiphertext(0);
  MEMORY[0x270FA5388](v205);
  uint64_t v214 = (uint64_t *)((char *)&v181 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v209 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType, AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType));
  MEMORY[0x270FA5388](v209);
  uint64_t v215 = (uint64_t)&v181 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v13 = type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(0);
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v210 = (uint64_t *)((char *)&v181 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v16);
  uint64_t v212 = (uint64_t *)((char *)&v181 - v17);
  MEMORY[0x270FA5388](v18);
  uint64_t v216 = (uint64_t)&v181 - v19;
  uint64_t v218 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?, AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?));
  MEMORY[0x270FA5388](v218);
  unint64_t v21 = (char *)&v181 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  MEMORY[0x270FA5388](v22 - 8);
  uint64_t v217 = (uint64_t)&v181 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v24);
  uint64_t v222 = (uint64_t)&v181 - v25;
  MEMORY[0x270FA5388](v26);
  uint64_t v220 = (uint64_t)&v181 - v27;
  uint64_t v213 = type metadata accessor for AspireHeSerializedCiphertext(0);
  uint64_t v204 = *(void *)(v213 - 8);
  MEMORY[0x270FA5388](v213);
  uint64_t v29 = (char *)&v181 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v30);
  uint64_t v221 = (char *)&v181 - v31;
  uint64_t v32 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
  MEMORY[0x270FA5388](v32);
  MEMORY[0x270FA5388](v33);
  size_t v38 = (char *)&v181 - v36;
  int v39 = *(void *)(a1 + 16);
  if (v39 != *(void *)(a2 + 16)) {
    goto LABEL_147;
  }
  if (!v39 || a1 == a2)
  {
    uint64_t v173 = 1;
    return v173 & 1;
  }
  uint64_t v199 = v13;
  uint64_t v193 = v34;
  uint64_t v189 = v4;
  uint64_t v40 = 0;
  uint64_t v192 = 0;
  double v41 = (*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80);
  uint64_t v42 = a1 + v41;
  uint64_t v43 = a2 + v41;
  uint64_t v44 = *(void *)(v35 + 72);
  uint64_t v200 = (unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
  int v188 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  double v45 = (uint64_t)v221;
  uint64_t v46 = v37;
  uint64_t v186 = v39;
  uint64_t v185 = v42;
  uint64_t v184 = a2 + v41;
  uint64_t v183 = v44;
  int v187 = (char *)&v181 - v36;
  while (1)
  {
    uint64_t v191 = v40;
    uint64_t v47 = v44 * v40;
    outlined init with copy of AspireSimilarityPlaintextPackingDenseRow(v42 + v44 * v40, (uint64_t)v38, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
    outlined init with copy of AspireSimilarityPlaintextPackingDenseRow(v43 + v47, v46, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
    if (*(_DWORD *)v38 != *(_DWORD *)v46) {
      goto LABEL_146;
    }
    if (*((_DWORD *)v38 + 1) != *(_DWORD *)(v46 + 4)) {
      goto LABEL_146;
    }
    size_t v48 = *((void *)v38 + 1);
    int v49 = *(void *)(v46 + 8);
    uint64_t v50 = *(void *)(v48 + 16);
    if (v50 != *(void *)(v49 + 16)) {
      goto LABEL_146;
    }
    if (v50)
    {
      uint64_t v51 = v222;
      if (v48 != v49) {
        break;
      }
    }
LABEL_131:
    uint64_t v162 = *(int *)(v193 + 32);
    int64_t v163 = v46 + v162;
    uint64_t v164 = v207;
    uint64_t v165 = v207 + *(int *)(v206 + 48);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)&v38[v162], v207, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v163, v165, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    uint64_t v166 = *v188;
    uint64_t v167 = v189;
    if ((*v188)(v164, 1, v189) == 1)
    {
      uint64_t v168 = v166(v165, 1, v167);
      size_t v38 = v187;
      if (v168 != 1) {
        goto LABEL_154;
      }
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v164, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
      double v45 = (uint64_t)v221;
    }
    else
    {
      uint64_t v169 = v46;
      unint64_t v170 = v202;
      outlined init with copy of AMDPbHEConfig.OneOf_Config?(v164, v202, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
      if (v166(v165, 1, v167) == 1)
      {
        outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v170, type metadata accessor for AspireSimilarityPlaintextPacking);
        uint64_t v46 = v169;
        size_t v38 = v187;
LABEL_154:
        outlined destroy of AMDPbHEConfig.OneOf_Config?(v164, &demangling cache variable for type metadata for (AspireSimilarityPlaintextPacking?, AspireSimilarityPlaintextPacking?));
        goto LABEL_146;
      }
      uint64_t v171 = v201;
      _s8CipherML32AspireSimilarityPlaintextPackingVWObTm_0(v165, v201, type metadata accessor for AspireSimilarityPlaintextPacking);
      uint64_t v172 = specialized static AspireSimilarityPlaintextPacking.== infix(_:_:)(v170, v171);
      outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v171, type metadata accessor for AspireSimilarityPlaintextPacking);
      outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v170, type metadata accessor for AspireSimilarityPlaintextPacking);
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v164, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
      uint64_t v46 = v169;
      double v45 = (uint64_t)v221;
      size_t v38 = v187;
      if ((v172 & 1) == 0) {
        goto LABEL_146;
      }
    }
    type metadata accessor for UnknownStorage();
    _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_2(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    uint64_t v173 = dispatch thunk of static Equatable.== infix(_:_:)();
    outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v46, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
    outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v38, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
    if (v173)
    {
      uint64_t v40 = v191 + 1;
      uint64_t v42 = v185;
      uint64_t v43 = v184;
      uint64_t v44 = v183;
      if (v191 + 1 != v186) {
        continue;
      }
    }
    return v173 & 1;
  }
  uint64_t v52 = 0;
  uint64_t v53 = (*(unsigned __int8 *)(v204 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v204 + 80);
  uint64_t v198 = v48 + v53;
  uint64_t v196 = v49 + v53;
  uint64_t v197 = *(void *)(v204 + 72);
  uint64_t v190 = v29;
  uint64_t v208 = v46;
  uint64_t v195 = v49;
  uint64_t v194 = v50;
  while (1)
  {
    size_t v54 = v52;
    uint64_t v55 = v197 * v52;
    outlined init with copy of AspireSimilarityPlaintextPackingDenseRow(v198 + v197 * v52, v45, type metadata accessor for AspireHeSerializedCiphertext);
    unint64_t v56 = *(void *)(v49 + 16);
    uint64_t v211 = v54;
    if (v54 >= v56)
    {
      __break(1u);
LABEL_156:
      __break(1u);
LABEL_157:
      __break(1u);
LABEL_158:
      __break(1u);
LABEL_159:
      __break(1u);
LABEL_160:
      __break(1u);
LABEL_161:
      __break(1u);
LABEL_162:
      __break(1u);
LABEL_163:
      __break(1u);
LABEL_164:
      __break(1u);
LABEL_165:
      __break(1u);
LABEL_166:
      __break(1u);
LABEL_167:
      __break(1u);
LABEL_168:
      __break(1u);
LABEL_169:
      __break(1u);
LABEL_170:
      __break(1u);
LABEL_171:
      __break(1u);
LABEL_172:
      __break(1u);
LABEL_173:
      __break(1u);
LABEL_174:
      __break(1u);
LABEL_175:
      __break(1u);
LABEL_176:
      __break(1u);
LABEL_177:
      __break(1u);
LABEL_178:
      __break(1u);
LABEL_179:
      __break(1u);
    }
    uint64_t v57 = v38;
    outlined init with copy of AspireSimilarityPlaintextPackingDenseRow(v196 + v55, (uint64_t)v29, type metadata accessor for AspireHeSerializedCiphertext);
    uint64_t v58 = v199;
    uint64_t v59 = v220;
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v45, v220, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v29, v51, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    uint64_t v60 = (uint64_t)&v21[*(int *)(v218 + 48)];
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v59, (uint64_t)v21, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v51, v60, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    int64_t v61 = *v200;
    if ((*v200)(v21, 1, v58) != 1) {
      break;
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v51, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v59, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    uint64_t v62 = v61((char *)v60, 1, v58);
    uint64_t v46 = v208;
    double v45 = (uint64_t)v221;
    if (v62 != 1)
    {
      char v179 = &demangling cache variable for type metadata for (AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?, AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
      goto LABEL_145;
    }
LABEL_129:
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    type metadata accessor for UnknownStorage();
    _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_2(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    int v161 = dispatch thunk of static Equatable.== infix(_:_:)();
    outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v29, type metadata accessor for AspireHeSerializedCiphertext);
    outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v45, type metadata accessor for AspireHeSerializedCiphertext);
    size_t v38 = v57;
    int v49 = v195;
    if ((v161 & 1) == 0) {
      goto LABEL_146;
    }
    uint64_t v52 = v211 + 1;
    uint64_t v51 = v222;
    if (v211 + 1 == v194) {
      goto LABEL_131;
    }
  }
  uint64_t v63 = v208;
  uint64_t v64 = v217;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21, v217, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  if (v61((char *)v60, 1, v58) == 1)
  {
    char v177 = v64;
    uint64_t v46 = v63;
    uint64_t v29 = v190;
    double v45 = (uint64_t)v221;
    char v179 = &demangling cache variable for type metadata for (AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?, AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    goto LABEL_144;
  }
  uint64_t v65 = v216;
  _s8CipherML32AspireSimilarityPlaintextPackingVWObTm_0(v60, v216, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
  size_t v66 = v215;
  uint64_t v67 = v215 + *(int *)(v209 + 48);
  outlined init with copy of AspireSimilarityPlaintextPackingDenseRow(v64, v215, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
  outlined init with copy of AspireSimilarityPlaintextPackingDenseRow(v65, v67, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v68 = v210;
    outlined init with copy of AspireSimilarityPlaintextPackingDenseRow(v66, (uint64_t)v210, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      unint64_t v69 = v67;
      uint64_t v70 = v219;
      _s8CipherML32AspireSimilarityPlaintextPackingVWObTm_0(v69, (uint64_t)v219, type metadata accessor for AspireHeSerializedFullCiphertext);
      uint64_t v72 = *v68;
      int64_t v71 = v68[1];
      size_t v73 = *v70;
      uint64_t v74 = v70[1];
      uint64_t v75 = 0;
      unint64_t v76 = (uint64_t)v68;
      uint64_t v29 = v190;
      double v45 = (uint64_t)v221;
      switch(v71 >> 62)
      {
        case 1uLL:
          LODWORD(v75) = HIDWORD(v72) - v72;
          if (__OFSUB__(HIDWORD(v72), v72)) {
            goto LABEL_156;
          }
          uint64_t v75 = (int)v75;
LABEL_26:
          switch(v74 >> 62)
          {
            case 1uLL:
              LODWORD(v86) = HIDWORD(v73) - v73;
              if (__OFSUB__(HIDWORD(v73), v73)) {
                goto LABEL_160;
              }
              uint64_t v86 = (int)v86;
LABEL_36:
              if (v75 != v86) {
                goto LABEL_140;
              }
              if (v75 < 1) {
                goto LABEL_80;
              }
              break;
            case 2uLL:
              uint64_t v91 = *(void *)(v73 + 16);
              uint64_t v90 = *(void *)(v73 + 24);
              uint64_t v85 = __OFSUB__(v90, v91);
              uint64_t v86 = v90 - v91;
              if (!v85) {
                goto LABEL_36;
              }
              goto LABEL_161;
            case 3uLL:
              if (v75) {
                goto LABEL_140;
              }
              goto LABEL_80;
            default:
              uint64_t v86 = BYTE6(v74);
              goto LABEL_36;
          }
          break;
        case 2uLL:
          uint64_t v84 = *(void *)(v72 + 16);
          BOOL v83 = *(void *)(v72 + 24);
          uint64_t v85 = __OFSUB__(v83, v84);
          uint64_t v75 = v83 - v84;
          if (!v85) {
            goto LABEL_26;
          }
          goto LABEL_157;
        case 3uLL:
          goto LABEL_26;
        default:
          uint64_t v75 = BYTE6(v71);
          goto LABEL_26;
      }
      switch(v71 >> 62)
      {
        case 1uLL:
          int v182 = *v70;
          uint64_t v181 = (v72 >> 32) - (int)v72;
          if (v72 >> 32 < (int)v72) {
            goto LABEL_168;
          }
          outlined copy of Data._Representation(v72, v71);
          char v94 = __DataStorage._bytes.getter();
          if (v94)
          {
            char v95 = v94;
            char v96 = __DataStorage._offset.getter();
            if (__OFSUB__((int)v72, v96)) {
              goto LABEL_174;
            }
            char v97 = v95 + (int)v72 - v96;
          }
          else
          {
            char v97 = 0;
          }
          __DataStorage._length.getter();
          uint64_t v120 = v97;
          uint64_t v121 = v192;
          closure #1 in static Data.== infix(_:_:)(v120, v182, v74, (char *)__s1);
          uint64_t v192 = v121;
          outlined consume of Data._Representation(v72, v71);
          goto LABEL_79;
        case 2uLL:
          int v182 = *v70;
          uint64_t v98 = *(void *)(v72 + 16);
          uint64_t v99 = *(void *)(v72 + 24);
          swift_retain();
          swift_retain();
          os_log_type_t v100 = __DataStorage._bytes.getter();
          if (v100)
          {
            uint64_t v101 = v100;
            uint64_t v102 = __DataStorage._offset.getter();
            if (__OFSUB__(v98, v102)) {
              goto LABEL_175;
            }
            uint64_t v103 = v98;
            Swift::String v104 = v101 + v98 - v102;
          }
          else
          {
            uint64_t v103 = v98;
            Swift::String v104 = 0;
          }
          if (__OFSUB__(v99, v103)) {
            goto LABEL_170;
          }
          __DataStorage._length.getter();
          uint64_t v118 = v192;
          closure #1 in static Data.== infix(_:_:)(v104, v182, v74, (char *)__s1);
          uint64_t v192 = v118;
          swift_release();
          swift_release();
LABEL_79:
          unint64_t v76 = (uint64_t)v210;
          if ((__s1[0] & 1) == 0) {
            goto LABEL_140;
          }
LABEL_80:
          char v122 = *(void *)(v76 + 16);
          uint64_t v123 = v219[2];
          uint64_t v124 = *(void *)(v122 + 16);
          if (v124 != *(void *)(v123 + 16)) {
            goto LABEL_140;
          }
          if (!v124 || v122 == v123) {
            goto LABEL_88;
          }
          if (*(_DWORD *)(v122 + 32) != *(_DWORD *)(v123 + 32)) {
            goto LABEL_140;
          }
          uint64_t v125 = (int *)(v122 + 36);
          double v126 = (int *)(v123 + 36);
          double v127 = v124 - 1;
          while (v127)
          {
            uint64_t v129 = *v125++;
            uint64_t v128 = v129;
            unint64_t v130 = *v126++;
            --v127;
            if (v128 != v130) {
              goto LABEL_140;
            }
          }
LABEL_88:
          if (*(void *)(v76 + 24) != v219[3]
            || (type metadata accessor for UnknownStorage(),
                _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_2(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]), v131 = dispatch thunk of static Equatable.== infix(_:_:)(), unint64_t v76 = (uint64_t)v210, (v131 & 1) == 0))
          {
LABEL_140:
            uint64_t v174 = type metadata accessor for AspireHeSerializedFullCiphertext;
            __int16 v175 = v76;
            outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v219, type metadata accessor for AspireHeSerializedFullCiphertext);
            char v176 = v175;
            goto LABEL_142;
          }
          uint64_t v57 = v38;
          int v132 = type metadata accessor for AspireHeSerializedFullCiphertext;
          uint64_t v133 = type metadata accessor for AspireHeSerializedFullCiphertext;
          uint64_t v134 = v219;
          uint64_t v68 = v210;
          break;
        case 3uLL:
          memset(__s1, 0, 14);
          goto LABEL_59;
        default:
          __s1[0] = *v68;
          LOWORD(__s1[1]) = v71;
          BYTE2(__s1[1]) = BYTE2(v71);
          BYTE3(__s1[1]) = BYTE3(v71);
          BYTE4(__s1[1]) = BYTE4(v71);
          BYTE5(__s1[1]) = BYTE5(v71);
LABEL_59:
          int v105 = v192;
          closure #1 in static Data.== infix(_:_:)((uint64_t)__s1, v73, v74, &v223);
          unint64_t v76 = (uint64_t)v210;
          uint64_t v192 = v105;
          if ((v223 & 1) == 0) {
            goto LABEL_140;
          }
          goto LABEL_80;
      }
      goto LABEL_128;
    }
    uint64_t v180 = type metadata accessor for AspireHeSerializedFullCiphertext;
LABEL_152:
    outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v68, v180);
    uint64_t v46 = v63;
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v66, &demangling cache variable for type metadata for (AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType, AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType));
    char v177 = v217;
    uint64_t v29 = v190;
    double v45 = (uint64_t)v221;
    uint64_t v51 = v222;
    goto LABEL_143;
  }
  uint64_t v68 = v212;
  outlined init with copy of AspireSimilarityPlaintextPackingDenseRow(v66, (uint64_t)v212, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v180 = type metadata accessor for AspireHeSerializedSeededCiphertext;
    goto LABEL_152;
  }
  _s8CipherML32AspireSimilarityPlaintextPackingVWObTm_0(v67, (uint64_t)v214, type metadata accessor for AspireHeSerializedSeededCiphertext);
  uint64_t v77 = v214;
  uint64_t v79 = *v68;
  int64_t v78 = v68[1];
  size_t v80 = *v214;
  char v81 = v214[1];
  unint64_t v82 = 0;
  uint64_t v29 = v190;
  double v45 = (uint64_t)v221;
  switch(v78 >> 62)
  {
    case 1uLL:
      LODWORD(v82) = HIDWORD(v79) - v79;
      if (__OFSUB__(HIDWORD(v79), v79)) {
        goto LABEL_158;
      }
      unint64_t v82 = (int)v82;
LABEL_31:
      switch(v81 >> 62)
      {
        case 1uLL:
          LODWORD(v89) = HIDWORD(v80) - v80;
          if (__OFSUB__(HIDWORD(v80), v80)) {
            goto LABEL_162;
          }
          uint64_t v89 = (int)v89;
LABEL_45:
          if (v82 != v89) {
            goto LABEL_141;
          }
          if (v82 < 1) {
            goto LABEL_94;
          }
          break;
        case 2uLL:
          __int16 v93 = *(void *)(v80 + 16);
          uint64_t v92 = *(void *)(v80 + 24);
          uint64_t v85 = __OFSUB__(v92, v93);
          uint64_t v89 = v92 - v93;
          if (!v85) {
            goto LABEL_45;
          }
          goto LABEL_163;
        case 3uLL:
          if (v82) {
            goto LABEL_141;
          }
          goto LABEL_94;
        default:
          uint64_t v89 = BYTE6(v81);
          goto LABEL_45;
      }
      break;
    case 2uLL:
      uint64_t v88 = *(void *)(v79 + 16);
      uint64_t v87 = *(void *)(v79 + 24);
      uint64_t v85 = __OFSUB__(v87, v88);
      unint64_t v82 = v87 - v88;
      if (!v85) {
        goto LABEL_31;
      }
      goto LABEL_159;
    case 3uLL:
      goto LABEL_31;
    default:
      unint64_t v82 = BYTE6(v78);
      goto LABEL_31;
  }
  switch(v78 >> 62)
  {
    case 1uLL:
      int v182 = *v214;
      uint64_t v181 = (v79 >> 32) - (int)v79;
      if (v79 >> 32 < (int)v79) {
        goto LABEL_169;
      }
      outlined copy of Data._Representation(v79, v78);
      size_t v106 = __DataStorage._bytes.getter();
      if (v106)
      {
        int v107 = v106;
        uint64_t v108 = __DataStorage._offset.getter();
        if (__OFSUB__((int)v79, v108)) {
          goto LABEL_176;
        }
        uint64_t v109 = v107 + (int)v79 - v108;
      }
      else
      {
        uint64_t v109 = 0;
      }
      __DataStorage._length.getter();
      double v135 = v109;
      double v136 = v192;
      closure #1 in static Data.== infix(_:_:)(v135, v182, v81, (char *)__s1);
      uint64_t v192 = v136;
      outlined consume of Data._Representation(v79, v78);
      goto LABEL_93;
    case 2uLL:
      int v182 = *v214;
      uint64_t v110 = *(void *)(v79 + 16);
      os_log_type_t v111 = *(void *)(v79 + 24);
      swift_retain();
      swift_retain();
      uint64_t v112 = __DataStorage._bytes.getter();
      if (v112)
      {
        uint64_t v113 = v112;
        uint64_t v114 = __DataStorage._offset.getter();
        if (__OFSUB__(v110, v114)) {
          goto LABEL_177;
        }
        uint64_t v115 = v110;
        uint64_t v116 = v113 + v110 - v114;
      }
      else
      {
        uint64_t v115 = v110;
        uint64_t v116 = 0;
      }
      if (__OFSUB__(v111, v115)) {
        goto LABEL_171;
      }
      __DataStorage._length.getter();
      uint64_t v119 = v192;
      closure #1 in static Data.== infix(_:_:)(v116, v182, v81, (char *)__s1);
      uint64_t v192 = v119;
      swift_release();
      swift_release();
LABEL_93:
      uint64_t v68 = v212;
      uint64_t v77 = v214;
      if ((__s1[0] & 1) == 0) {
        goto LABEL_141;
      }
LABEL_94:
      unint64_t v138 = v68[2];
      uint64_t v137 = v68[3];
      uint64_t v140 = v77[2];
      uint64_t v139 = v77[3];
      uint64_t v141 = 0;
      switch(v137 >> 62)
      {
        case 1uLL:
          LODWORD(v141) = HIDWORD(v138) - v138;
          if (__OFSUB__(HIDWORD(v138), v138)) {
            goto LABEL_164;
          }
          uint64_t v141 = (int)v141;
LABEL_99:
          switch(v139 >> 62)
          {
            case 1uLL:
              LODWORD(v144) = HIDWORD(v140) - v140;
              if (__OFSUB__(HIDWORD(v140), v140)) {
                goto LABEL_166;
              }
              uint64_t v144 = (int)v144;
LABEL_104:
              if (v141 != v144) {
                goto LABEL_141;
              }
              if (v141 < 1) {
                goto LABEL_126;
              }
              break;
            case 2uLL:
              uint64_t v146 = *(void *)(v140 + 16);
              uint64_t v145 = *(void *)(v140 + 24);
              uint64_t v85 = __OFSUB__(v145, v146);
              uint64_t v144 = v145 - v146;
              if (!v85) {
                goto LABEL_104;
              }
              goto LABEL_167;
            case 3uLL:
              if (v141) {
                goto LABEL_141;
              }
              goto LABEL_126;
            default:
              uint64_t v144 = BYTE6(v139);
              goto LABEL_104;
          }
          break;
        case 2uLL:
          int v143 = *(void *)(v138 + 16);
          int v142 = *(void *)(v138 + 24);
          uint64_t v85 = __OFSUB__(v142, v143);
          uint64_t v141 = v142 - v143;
          if (!v85) {
            goto LABEL_99;
          }
          goto LABEL_165;
        case 3uLL:
          goto LABEL_99;
        default:
          uint64_t v141 = BYTE6(v137);
          goto LABEL_99;
      }
      break;
    case 3uLL:
      memset(__s1, 0, 14);
      goto LABEL_69;
    default:
      __s1[0] = *v68;
      LOWORD(__s1[1]) = v78;
      BYTE2(__s1[1]) = BYTE2(v78);
      BYTE3(__s1[1]) = BYTE3(v78);
      BYTE4(__s1[1]) = BYTE4(v78);
      BYTE5(__s1[1]) = BYTE5(v78);
LABEL_69:
      int64_t v117 = v192;
      closure #1 in static Data.== infix(_:_:)((uint64_t)__s1, v80, v81, &v223);
      uint64_t v77 = v214;
      uint64_t v192 = v117;
      uint64_t v68 = v212;
      if ((v223 & 1) == 0) {
        goto LABEL_141;
      }
      goto LABEL_94;
  }
  switch(v137 >> 62)
  {
    case 1uLL:
      int v182 = (v138 >> 32) - (int)v138;
      if (v138 >> 32 < (int)v138) {
        goto LABEL_172;
      }
      outlined copy of Data._Representation(v138, v137);
      uint64_t v147 = __DataStorage._bytes.getter();
      if (v147)
      {
        uint64_t v181 = v147;
        int64_t v148 = __DataStorage._offset.getter();
        if (__OFSUB__((int)v138, v148)) {
          goto LABEL_178;
        }
        uint64_t v149 = v181 + (int)v138 - v148;
      }
      else
      {
        uint64_t v149 = 0;
      }
      __DataStorage._length.getter();
      uint64_t v158 = v149;
      uint64_t v159 = v192;
      closure #1 in static Data.== infix(_:_:)(v158, v140, v139, (char *)__s1);
      uint64_t v192 = v159;
      outlined consume of Data._Representation(v138, v137);
      goto LABEL_125;
    case 2uLL:
      int64_t v150 = *(void *)(v138 + 16);
      int v182 = *(void *)(v138 + 24);
      swift_retain();
      swift_retain();
      uint64_t v151 = __DataStorage._bytes.getter();
      if (v151)
      {
        uint64_t v152 = v151;
        uint64_t v153 = __DataStorage._offset.getter();
        if (__OFSUB__(v150, v153)) {
          goto LABEL_179;
        }
        uint64_t v154 = v150;
        uint64_t v155 = v152 + v150 - v153;
      }
      else
      {
        uint64_t v154 = v150;
        uint64_t v155 = 0;
      }
      if (__OFSUB__(v182, v154)) {
        goto LABEL_173;
      }
      __DataStorage._length.getter();
      uint64_t v157 = v192;
      closure #1 in static Data.== infix(_:_:)(v155, v140, v139, (char *)__s1);
      uint64_t v192 = v157;
      swift_release();
      swift_release();
LABEL_125:
      uint64_t v68 = v212;
      uint64_t v77 = v214;
      if ((__s1[0] & 1) == 0) {
        goto LABEL_141;
      }
LABEL_126:
      type metadata accessor for UnknownStorage();
      _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_2(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
      uint64_t v68 = v212;
      uint64_t v160 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v77 = v214;
      if (v160)
      {
        uint64_t v57 = v38;
        int v132 = type metadata accessor for AspireHeSerializedSeededCiphertext;
        uint64_t v133 = type metadata accessor for AspireHeSerializedSeededCiphertext;
        uint64_t v134 = v214;
LABEL_128:
        outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v134, v132);
        outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v68, v133);
        outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v215, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
        outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v216, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
        outlined destroy of AMDPbHEConfig.OneOf_Config?(v222, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
        outlined destroy of AMDPbHEConfig.OneOf_Config?(v220, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
        outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v217, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
        uint64_t v46 = v208;
        goto LABEL_129;
      }
LABEL_141:
      uint64_t v174 = type metadata accessor for AspireHeSerializedSeededCiphertext;
      outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v77, type metadata accessor for AspireHeSerializedSeededCiphertext);
      char v176 = (uint64_t)v68;
LABEL_142:
      outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v176, v174);
      outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v215, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
      char v177 = v217;
      uint64_t v51 = v222;
      uint64_t v46 = v208;
LABEL_143:
      outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v216, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
      char v179 = &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?;
LABEL_144:
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v51, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v220, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
      outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v177, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
LABEL_145:
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21, v179);
      outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v29, type metadata accessor for AspireHeSerializedCiphertext);
      outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v45, type metadata accessor for AspireHeSerializedCiphertext);
LABEL_146:
      outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v46, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
      outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v38, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
LABEL_147:
      uint64_t v173 = 0;
      return v173 & 1;
    case 3uLL:
      memset(__s1, 0, 14);
      goto LABEL_118;
    default:
      __s1[0] = v68[2];
      LOWORD(__s1[1]) = v137;
      BYTE2(__s1[1]) = BYTE2(v137);
      BYTE3(__s1[1]) = BYTE3(v137);
      BYTE4(__s1[1]) = BYTE4(v137);
      BYTE5(__s1[1]) = BYTE5(v137);
LABEL_118:
      uint64_t v156 = v192;
      closure #1 in static Data.== infix(_:_:)((uint64_t)__s1, v140, v139, &v223);
      uint64_t v77 = v214;
      uint64_t v192 = v156;
      uint64_t v68 = v212;
      if ((v223 & 1) == 0) {
        goto LABEL_141;
      }
      goto LABEL_126;
  }
}

{
  uint64_t v2;
  unint64_t *v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  size_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  size_t v37;
  int v38;
  void *v39;
  uint64_t *v40;
  size_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  size_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  size_t v55;
  void *v56;
  const void *v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  int64_t v63;
  uint64_t v64;
  size_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  void *v73;
  char *v74;
  unint64_t *v75;
  unint64_t *v76;
  unint64_t *v77;
  uint64_t v78;
  __int16 v79;
  char v80;
  char v81;
  char v82;
  char v83;
  void __s1[3];

  __s1[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v2 && a1 != a2)
  {
    int v3 = (unint64_t *)(a1 + 40);
    uint64_t v4 = (unint64_t *)(a2 + 40);
    while (1)
    {
      uint64_t v6 = *(v3 - 1);
      uint64_t v5 = *v3;
      uint64_t v8 = *(v4 - 1);
      uint64_t v7 = *v4;
      uint64_t v9 = *v3 >> 62;
      v3 += 2;
      v4 += 2;
      uint64_t v10 = 0;
      switch(v9)
      {
        case 1uLL:
          if (__OFSUB__(HIDWORD(v6), v6))
          {
            __break(1u);
LABEL_124:
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
LABEL_135:
            __break(1u);
LABEL_136:
            __break(1u);
LABEL_137:
            __break(1u);
LABEL_138:
            __break(1u);
LABEL_139:
            __break(1u);
LABEL_140:
            __break(1u);
LABEL_141:
            __break(1u);
LABEL_142:
            __break(1u);
LABEL_143:
            __break(1u);
LABEL_144:
            __break(1u);
LABEL_145:
            __break(1u);
          }
          uint64_t v10 = HIDWORD(v6) - (int)v6;
LABEL_13:
          outlined copy of Data._Representation(v6, v5);
          break;
        case 2uLL:
          uint64_t v12 = *(void *)(v6 + 16);
          unint64_t v11 = *(void *)(v6 + 24);
          uint64_t v10 = v11 - v12;
          if (!__OFSUB__(v11, v12)) {
            goto LABEL_13;
          }
          goto LABEL_124;
        case 3uLL:
          break;
        default:
          uint64_t v10 = BYTE6(v5);
          break;
      }
      unint64_t v13 = v7 >> 62;
      switch(v7 >> 62)
      {
        case 1uLL:
          LODWORD(v14) = HIDWORD(v8) - v8;
          if (__OFSUB__(HIDWORD(v8), v8)) {
            goto LABEL_125;
          }
          uint64_t v14 = (int)v14;
LABEL_19:
          if (v10 != v14) {
            goto LABEL_121;
          }
          if (v10 < 1)
          {
LABEL_6:
            outlined consume of Data._Representation(v6, v5);
          }
          else
          {
            switch((int)v9)
            {
              case 1:
                unint64_t v76 = v3;
                if ((int)v6 > v6 >> 32) {
                  goto LABEL_127;
                }
                outlined copy of Data._Representation(v8, v7);
                uint64_t v23 = (char *)__DataStorage._bytes.getter();
                if (!v23) {
                  goto LABEL_33;
                }
                uint64_t v24 = __DataStorage._offset.getter();
                if (__OFSUB__((int)v6, v24)) {
                  goto LABEL_129;
                }
                v23 += (int)v6 - v24;
LABEL_33:
                __DataStorage._length.getter();
                if (!v13)
                {
                  __s1[0] = v8;
                  LOWORD(__s1[1]) = v7;
                  BYTE2(__s1[1]) = BYTE2(v7);
                  BYTE3(__s1[1]) = BYTE3(v7);
                  BYTE4(__s1[1]) = BYTE4(v7);
                  BYTE5(__s1[1]) = BYTE5(v7);
                  if (!v23) {
                    goto LABEL_157;
                  }
                  double v41 = BYTE6(v7);
                  uint64_t v40 = __s1;
                  int v39 = v23;
LABEL_103:
                  uint64_t v29 = memcmp(v39, v40, v41);
                  goto LABEL_104;
                }
                if (v13 == 1)
                {
                  if (v8 >> 32 < (int)v8) {
                    goto LABEL_138;
                  }
                  swift_retain();
                  uint64_t v25 = (char *)__DataStorage._bytes.getter();
                  if (v25)
                  {
                    uint64_t v26 = __DataStorage._offset.getter();
                    if (__OFSUB__((int)v8, v26)) {
                      goto LABEL_145;
                    }
                    v25 += (int)v8 - v26;
                  }
                  uint64_t v27 = __DataStorage._length.getter();
                  if (v27 >= (v8 >> 32) - (int)v8) {
                    uint64_t v28 = (v8 >> 32) - (int)v8;
                  }
                  else {
                    uint64_t v28 = v27;
                  }
                  if (!v23) {
                    goto LABEL_147;
                  }
                  if (!v25) {
                    goto LABEL_148;
                  }
                  uint64_t v29 = memcmp(v23, v25, v28);
                  outlined consume of Data._Representation(v8, v7);
                  goto LABEL_72;
                }
                uint64_t v67 = *(void *)(v8 + 16);
                uint64_t v74 = *(char **)(v8 + 24);
                swift_retain();
                swift_retain();
                uint64_t v68 = __DataStorage._bytes.getter();
                if (v68)
                {
                  unint64_t v69 = __DataStorage._offset.getter();
                  if (__OFSUB__(v67, v69)) {
                    goto LABEL_144;
                  }
                  v68 += v67 - v69;
                }
                if (__OFSUB__(v74, v67)) {
                  goto LABEL_139;
                }
                uint64_t v70 = __DataStorage._length.getter();
                if (v70 >= (uint64_t)&v74[-v67]) {
                  int64_t v71 = &v74[-v67];
                }
                else {
                  int64_t v71 = (char *)v70;
                }
                unint64_t v56 = v23;
                int v3 = v76;
                if (!v23) {
                  goto LABEL_158;
                }
                if (!v68) {
                  goto LABEL_159;
                }
                uint64_t v55 = (size_t)v71;
                uint64_t v57 = (const void *)v68;
LABEL_116:
                uint64_t v58 = memcmp(v56, v57, v55);
                swift_release();
                goto LABEL_117;
              case 2:
                uint64_t v77 = v3;
                uint64_t v30 = *(void *)(v6 + 16);
                outlined copy of Data._Representation(v8, v7);
                swift_retain();
                swift_retain();
                uint64_t v31 = __DataStorage._bytes.getter();
                if (v31)
                {
                  uint64_t v32 = v31;
                  uint64_t v33 = __DataStorage._offset.getter();
                  if (__OFSUB__(v30, v33)) {
                    goto LABEL_128;
                  }
                  size_t v73 = (void *)(v32 + v30 - v33);
                }
                else
                {
                  size_t v73 = 0;
                }
                __DataStorage._length.getter();
                int v3 = v77;
                if (v13)
                {
                  if (v13 == 1)
                  {
                    if (v8 >> 32 < (int)v8) {
                      goto LABEL_134;
                    }
                    swift_retain();
                    uint64_t v42 = (char *)__DataStorage._bytes.getter();
                    if (v42)
                    {
                      uint64_t v43 = __DataStorage._offset.getter();
                      if (__OFSUB__((int)v8, v43)) {
                        goto LABEL_143;
                      }
                      v42 += (int)v8 - v43;
                    }
                    uint64_t v44 = __DataStorage._length.getter();
                    if (v44 >= (v8 >> 32) - (int)v8) {
                      double v45 = (v8 >> 32) - (int)v8;
                    }
                    else {
                      double v45 = v44;
                    }
                    if (!v73) {
                      goto LABEL_150;
                    }
                    int v3 = v77;
                    if (!v42) {
                      goto LABEL_151;
                    }
                    uint64_t v29 = memcmp(v73, v42, v45);
                    outlined consume of Data._Representation(v8, v7);
                    swift_release();
                    swift_release();
LABEL_72:
                    outlined consume of Data._Representation(v8, v7);
LABEL_104:
                    outlined consume of Data._Representation(v6, v5);
                    if (v29) {
                      return 0;
                    }
                  }
                  else
                  {
                    uint64_t v60 = *(void *)(v8 + 16);
                    uint64_t v59 = *(void *)(v8 + 24);
                    swift_retain();
                    swift_retain();
                    int64_t v61 = (char *)__DataStorage._bytes.getter();
                    if (v61)
                    {
                      uint64_t v62 = __DataStorage._offset.getter();
                      if (__OFSUB__(v60, v62)) {
                        goto LABEL_142;
                      }
                      v61 += v60 - v62;
                    }
                    uint64_t v17 = __OFSUB__(v59, v60);
                    uint64_t v63 = v59 - v60;
                    if (v17) {
                      goto LABEL_137;
                    }
                    uint64_t v64 = __DataStorage._length.getter();
                    if (v64 >= v63) {
                      uint64_t v65 = v63;
                    }
                    else {
                      uint64_t v65 = v64;
                    }
                    int v3 = v77;
                    if (!v73) {
                      goto LABEL_155;
                    }
                    if (!v61) {
                      goto LABEL_156;
                    }
                    size_t v66 = memcmp(v73, v61, v65);
                    swift_release();
                    swift_release();
                    swift_release();
                    swift_release();
                    outlined consume of Data._Representation(v8, v7);
                    outlined consume of Data._Representation(v6, v5);
                    if (v66) {
                      return 0;
                    }
                  }
                }
                else
                {
                  __s1[0] = v8;
                  LOWORD(__s1[1]) = v7;
                  BYTE2(__s1[1]) = BYTE2(v7);
                  BYTE3(__s1[1]) = BYTE3(v7);
                  BYTE4(__s1[1]) = BYTE4(v7);
                  BYTE5(__s1[1]) = BYTE5(v7);
                  if (!v73) {
                    goto LABEL_154;
                  }
                  uint64_t v58 = memcmp(v73, __s1, BYTE6(v7));
                  swift_release();
LABEL_117:
                  swift_release();
                  outlined consume of Data._Representation(v8, v7);
                  outlined consume of Data._Representation(v6, v5);
                  if (v58) {
                    return 0;
                  }
                }
                break;
              case 3:
                memset(__s1, 0, 14);
                if (!v13) {
                  goto LABEL_58;
                }
                uint64_t v75 = v3;
                if (v13 == 1)
                {
                  uint64_t v18 = (v8 >> 32) - (int)v8;
                  if (v8 >> 32 < (int)v8) {
                    goto LABEL_131;
                  }
                  outlined copy of Data._Representation(v8, v7);
                  uint64_t v34 = __DataStorage._bytes.getter();
                  if (!v34) {
                    goto LABEL_149;
                  }
                  BOOL v20 = v34;
                  uint64_t v35 = __DataStorage._offset.getter();
                  uint64_t v22 = (int)v8 - v35;
                  if (__OFSUB__((int)v8, v35)) {
                    goto LABEL_133;
                  }
LABEL_53:
                  uint64_t v36 = __DataStorage._length.getter();
                  if (v36 >= v18) {
                    uint64_t v37 = v18;
                  }
                  else {
                    uint64_t v37 = v36;
                  }
                  size_t v38 = memcmp(__s1, (const void *)(v20 + v22), v37);
                  outlined consume of Data._Representation(v8, v7);
                  outlined consume of Data._Representation(v6, v5);
                  int v3 = v75;
                  if (v38) {
                    return 0;
                  }
                  break;
                }
                uint64_t v52 = *(void *)(v8 + 16);
                uint64_t v53 = *(void *)(v8 + 24);
                outlined copy of Data._Representation(v8, v7);
                swift_retain();
                swift_retain();
                size_t v48 = __DataStorage._bytes.getter();
                if (v48)
                {
                  size_t v54 = __DataStorage._offset.getter();
                  if (__OFSUB__(v52, v54)) {
                    goto LABEL_141;
                  }
                  v48 += v52 - v54;
                }
                uint64_t v17 = __OFSUB__(v53, v52);
                uint64_t v50 = v53 - v52;
                if (v17) {
                  goto LABEL_136;
                }
                uint64_t v51 = __DataStorage._length.getter();
                int v3 = v75;
                if (!v48) {
                  goto LABEL_153;
                }
LABEL_84:
                if (v51 >= v50) {
                  uint64_t v55 = v50;
                }
                else {
                  uint64_t v55 = v51;
                }
                unint64_t v56 = __s1;
                uint64_t v57 = (const void *)v48;
                goto LABEL_116;
              default:
                __s1[0] = v6;
                LOWORD(__s1[1]) = v5;
                BYTE2(__s1[1]) = BYTE2(v5);
                BYTE3(__s1[1]) = BYTE3(v5);
                BYTE4(__s1[1]) = BYTE4(v5);
                BYTE5(__s1[1]) = BYTE5(v5);
                if (!v13)
                {
LABEL_58:
                  int64_t v78 = v8;
                  uint64_t v79 = v7;
                  size_t v80 = BYTE2(v7);
                  char v81 = BYTE3(v7);
                  unint64_t v82 = BYTE4(v7);
                  BOOL v83 = BYTE5(v7);
                  outlined copy of Data._Representation(v8, v7);
                  int v39 = __s1;
                  uint64_t v40 = &v78;
                  double v41 = BYTE6(v7);
                  goto LABEL_103;
                }
                uint64_t v75 = v3;
                if (v13 == 1)
                {
                  uint64_t v18 = (v8 >> 32) - (int)v8;
                  if (v8 >> 32 < (int)v8) {
                    goto LABEL_130;
                  }
                  outlined copy of Data._Representation(v8, v7);
                  uint64_t v19 = __DataStorage._bytes.getter();
                  if (!v19)
                  {
                    __DataStorage._length.getter();
                    __break(1u);
LABEL_147:
                    __break(1u);
LABEL_148:
                    __break(1u);
LABEL_149:
                    __DataStorage._length.getter();
                    __break(1u);
LABEL_150:
                    __break(1u);
LABEL_151:
                    __break(1u);
LABEL_152:
                    __break(1u);
LABEL_153:
                    __break(1u);
LABEL_154:
                    __break(1u);
LABEL_155:
                    __break(1u);
LABEL_156:
                    __break(1u);
LABEL_157:
                    __break(1u);
LABEL_158:
                    __break(1u);
LABEL_159:
                    __break(1u);
                    JUMPOUT(0x249E48520);
                  }
                  BOOL v20 = v19;
                  unint64_t v21 = __DataStorage._offset.getter();
                  uint64_t v22 = (int)v8 - v21;
                  if (__OFSUB__((int)v8, v21)) {
                    goto LABEL_132;
                  }
                  goto LABEL_53;
                }
                uint64_t v46 = *(void *)(v8 + 16);
                uint64_t v47 = *(void *)(v8 + 24);
                outlined copy of Data._Representation(v8, v7);
                swift_retain();
                swift_retain();
                size_t v48 = __DataStorage._bytes.getter();
                if (v48)
                {
                  int v49 = __DataStorage._offset.getter();
                  if (__OFSUB__(v46, v49)) {
                    goto LABEL_140;
                  }
                  v48 += v46 - v49;
                }
                uint64_t v17 = __OFSUB__(v47, v46);
                uint64_t v50 = v47 - v46;
                if (v17) {
                  goto LABEL_135;
                }
                uint64_t v51 = __DataStorage._length.getter();
                int v3 = v75;
                if (!v48) {
                  goto LABEL_152;
                }
                goto LABEL_84;
            }
          }
          if (!--v2) {
            return 1;
          }
          break;
        case 2uLL:
          unint64_t v16 = *(void *)(v8 + 16);
          uint64_t v15 = *(void *)(v8 + 24);
          uint64_t v17 = __OFSUB__(v15, v16);
          uint64_t v14 = v15 - v16;
          if (!v17) {
            goto LABEL_19;
          }
          goto LABEL_126;
        case 3uLL:
          if (!v10) {
            goto LABEL_6;
          }
          outlined copy of Data._Representation(v8, v7);
LABEL_121:
          outlined consume of Data._Representation(v6, v5);
          return 0;
        default:
          uint64_t v14 = BYTE6(v7);
          goto LABEL_19;
      }
    }
  }
  return 1;
}

{
  return specialized static Array<A>.== infix(_:_:)(a1, a2, type metadata accessor for AspireApiEvaluationKey, type metadata accessor for AspireApiEvaluationKey, (uint64_t (*)(char *, char *))static AspireApiEvaluationKey.== infix(_:_:), type metadata accessor for AspireApiEvaluationKey);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int (**v28)(char *, uint64_t, uint64_t);
  unsigned __int8 *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int (*v40)(uint64_t, uint64_t, uint64_t);
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  void *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int *v63;
  int *v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  char v69;
  char v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t *v73;
  unsigned __int8 *v75;
  unsigned int (**v76)(uint64_t, uint64_t, uint64_t);
  uint64_t v77;
  unsigned int (**v78)(char *, uint64_t, uint64_t);
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned __int8 *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;

  uint64_t v4 = type metadata accessor for AspireHeEncryptionParameters(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v85 = (uint64_t)&v75 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v87 = (uint64_t)&v75 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireHeEncryptionParameters?, AspireHeEncryptionParameters?));
  MEMORY[0x270FA5388](v88);
  uint64_t v90 = (uint64_t)&v75 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  unint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v89 = (unsigned __int8 *)&v75 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v15 = (unsigned __int8 *)&v75 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v91 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireHeEvaluationKeyConfig?, AspireHeEvaluationKeyConfig?));
  MEMORY[0x270FA5388](v91);
  uint64_t v17 = (char *)&v75 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v92 = type metadata accessor for AspireApiKeyStatus(0);
  MEMORY[0x270FA5388](v92);
  uint64_t v19 = (unsigned __int8 **)((char *)&v75 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v20);
  uint64_t v23 = (unsigned __int8 **)((char *)&v75 - v22);
  uint64_t v24 = *(void *)(a1 + 16);
  if (v24 == *(void *)(a2 + 16))
  {
    if (v24 && a1 != a2)
    {
      uint64_t v25 = 0;
      uint64_t v26 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
      BOOL v83 = a2 + v26;
      uint64_t v84 = a1 + v26;
      uint64_t v27 = *(void *)(v21 + 72);
      char v81 = v17;
      unint64_t v82 = v27;
      uint64_t v28 = (unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
      unint64_t v76 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
      uint64_t v77 = v4;
      uint64_t v29 = v89;
      int64_t v78 = v28;
      uint64_t v79 = v24;
      uint64_t v75 = v15;
      size_t v80 = (char *)&v75 - v22;
      while (1)
      {
        uint64_t v86 = v25;
        uint64_t v30 = v82 * v25;
        outlined init with copy of AspireSimilarityPlaintextPackingDenseRow(v84 + v82 * v25, (uint64_t)v23, type metadata accessor for AspireApiKeyStatus);
        outlined init with copy of AspireSimilarityPlaintextPackingDenseRow(v83 + v30, (uint64_t)v19, type metadata accessor for AspireApiKeyStatus);
        if (*v23 != *v19)
        {
LABEL_71:
          outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v19, type metadata accessor for AspireApiKeyStatus);
          outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v23, type metadata accessor for AspireApiKeyStatus);
          goto LABEL_72;
        }
        uint64_t v31 = *(int *)(v92 + 24);
        uint64_t v32 = (uint64_t)v19 + v31;
        uint64_t v33 = (uint64_t)&v17[*(int *)(v91 + 48)];
        outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v23 + v31, (uint64_t)v17, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
        outlined init with copy of AMDPbHEConfig.OneOf_Config?(v32, v33, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
        uint64_t v34 = *v28;
        if ((*v28)(v17, 1, v10) != 1) {
          break;
        }
        if (v34((char *)v33, 1, v10) != 1)
        {
          size_t v73 = &demangling cache variable for type metadata for (AspireHeEvaluationKeyConfig?, AspireHeEvaluationKeyConfig?);
          uint64_t v23 = v80;
          uint64_t v17 = v81;
          goto LABEL_70;
        }
        uint64_t v17 = v81;
        outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v81, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
        uint64_t v23 = v80;
LABEL_61:
        type metadata accessor for UnknownStorage();
        _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_2(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
        uint64_t v70 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v19, type metadata accessor for AspireApiKeyStatus);
        outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v23, type metadata accessor for AspireApiKeyStatus);
        if (v70)
        {
          uint64_t v25 = v86 + 1;
          uint64_t v28 = v78;
          if (v86 + 1 != v79) {
            continue;
          }
        }
        return v70 & 1;
      }
      outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v17, (uint64_t)v15, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
      if (v34((char *)v33, 1, v10) == 1)
      {
        size_t v73 = &demangling cache variable for type metadata for (AspireHeEvaluationKeyConfig?, AspireHeEvaluationKeyConfig?);
        uint64_t v23 = v80;
        uint64_t v17 = v81;
        goto LABEL_69;
      }
      _s8CipherML32AspireSimilarityPlaintextPackingVWObTm_0(v33, (uint64_t)v29, type metadata accessor for AspireHeEvaluationKeyConfig);
      uint64_t v35 = *(int *)(v10 + 28);
      uint64_t v36 = (uint64_t)&v29[v35];
      uint64_t v37 = v90;
      size_t v38 = v90 + *(int *)(v88 + 48);
      outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)&v15[v35], v90, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      outlined init with copy of AMDPbHEConfig.OneOf_Config?(v36, v38, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      int v39 = v77;
      uint64_t v40 = *v76;
      double v41 = (*v76)(v37, 1, v77);
      uint64_t v17 = v81;
      if (v41 == 1)
      {
        if (v40(v38, 1, v39) != 1)
        {
          uint64_t v29 = v89;
          uint64_t v72 = v90;
          int64_t v71 = &demangling cache variable for type metadata for (AspireHeEncryptionParameters?, AspireHeEncryptionParameters?);
          uint64_t v15 = v75;
          uint64_t v23 = v80;
          goto LABEL_67;
        }
        outlined destroy of AMDPbHEConfig.OneOf_Config?(v90, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
        uint64_t v29 = v89;
        uint64_t v15 = v75;
        uint64_t v23 = v80;
        goto LABEL_51;
      }
      uint64_t v42 = v37;
      uint64_t v43 = v87;
      outlined init with copy of AMDPbHEConfig.OneOf_Config?(v42, v87, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      if (v40(v38, 1, v39) == 1)
      {
        int64_t v71 = &demangling cache variable for type metadata for (AspireHeEncryptionParameters?, AspireHeEncryptionParameters?);
        uint64_t v15 = v75;
        uint64_t v23 = v80;
LABEL_66:
        outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v43, type metadata accessor for AspireHeEncryptionParameters);
        uint64_t v29 = v89;
        uint64_t v72 = v90;
LABEL_67:
        outlined destroy of AMDPbHEConfig.OneOf_Config?(v72, v71);
LABEL_68:
        outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v29, type metadata accessor for AspireHeEvaluationKeyConfig);
        size_t v73 = &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?;
LABEL_69:
        outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v15, type metadata accessor for AspireHeEvaluationKeyConfig);
LABEL_70:
        outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v17, v73);
        goto LABEL_71;
      }
      uint64_t v44 = v85;
      _s8CipherML32AspireSimilarityPlaintextPackingVWObTm_0(v38, v85, type metadata accessor for AspireHeEncryptionParameters);
      uint64_t v15 = v75;
      uint64_t v23 = v80;
      if (*(void *)v43 != *(void *)v44
        || *(void *)(v43 + 8) != *(void *)(v44 + 8)
        || (v45 = *(void **)(v43 + 16), uint64_t v46 = *(void **)(v44 + 16), v47 = v45[2], v47 != v46[2]))
      {
LABEL_65:
        outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v44, type metadata accessor for AspireHeEncryptionParameters);
        int64_t v71 = &demangling cache variable for type metadata for AspireHeEncryptionParameters?;
        goto LABEL_66;
      }
      if (v47 && v45 != v46)
      {
        if (v45[4] != v46[4]) {
          goto LABEL_65;
        }
        size_t v48 = v45 + 5;
        int v49 = v46 + 5;
        uint64_t v50 = v47 - 1;
        while (v50)
        {
          uint64_t v52 = *v48++;
          uint64_t v51 = v52;
          uint64_t v53 = *v49++;
          --v50;
          if (v51 != v53) {
            goto LABEL_65;
          }
        }
      }
      if (*(unsigned char *)(v43 + 32))
      {
        if (*(unsigned char *)(v44 + 32)) {
          goto LABEL_31;
        }
        size_t v54 = 0;
      }
      else
      {
        size_t v54 = *(void *)(v43 + 24);
        if (*(unsigned char *)(v44 + 32))
        {
          if (v54) {
            goto LABEL_65;
          }
          goto LABEL_31;
        }
      }
      if (v54 != *(void *)(v44 + 24)) {
        goto LABEL_65;
      }
LABEL_31:
      uint64_t v55 = *(void *)(v43 + 40);
      unint64_t v56 = *(void *)(v44 + 40);
      if (*(unsigned char *)(v43 + 48)) {
        uint64_t v55 = v55 != 0;
      }
      if (*(unsigned char *)(v44 + 48) == 1)
      {
        if (v56)
        {
          if (v55 != 1) {
            goto LABEL_65;
          }
        }
        else if (v55)
        {
          goto LABEL_65;
        }
      }
      else if (v55 != v56)
      {
        goto LABEL_65;
      }
      uint64_t v57 = *(void *)(v43 + 56);
      uint64_t v58 = *(void *)(v44 + 56);
      if (*(unsigned char *)(v44 + 64) == 1)
      {
        if (v58)
        {
          if (v58 == 1)
          {
            if (v57 != 1) {
              goto LABEL_65;
            }
          }
          else if (v57 != 2)
          {
            goto LABEL_65;
          }
        }
        else if (v57)
        {
          goto LABEL_65;
        }
      }
      else if (v57 != v58)
      {
        goto LABEL_65;
      }
      type metadata accessor for UnknownStorage();
      _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_2(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
      uint64_t v59 = dispatch thunk of static Equatable.== infix(_:_:)();
      outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v44, type metadata accessor for AspireHeEncryptionParameters);
      outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v87, type metadata accessor for AspireHeEncryptionParameters);
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v90, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      uint64_t v29 = v89;
      if ((v59 & 1) == 0) {
        goto LABEL_68;
      }
LABEL_51:
      uint64_t v60 = *(void *)v15;
      int64_t v61 = *(void *)v29;
      uint64_t v62 = *(void *)(*(void *)v15 + 16);
      if (v62 != *(void *)(*(void *)v29 + 16)) {
        goto LABEL_68;
      }
      if (v62 && v60 != v61)
      {
        if (*(_DWORD *)(v60 + 32) != *(_DWORD *)(v61 + 32)) {
          goto LABEL_68;
        }
        uint64_t v63 = (int *)(v60 + 36);
        uint64_t v64 = (int *)(v61 + 36);
        uint64_t v65 = v62 - 1;
        while (v65)
        {
          uint64_t v67 = *v63++;
          size_t v66 = v67;
          uint64_t v68 = *v64++;
          --v65;
          if (v66 != v68) {
            goto LABEL_68;
          }
        }
      }
      if (v15[8] != v29[8]) {
        goto LABEL_68;
      }
      type metadata accessor for UnknownStorage();
      _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_2(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
      unint64_t v69 = dispatch thunk of static Equatable.== infix(_:_:)();
      outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v29, type metadata accessor for AspireHeEvaluationKeyConfig);
      outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v15, type metadata accessor for AspireHeEvaluationKeyConfig);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v17, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
      if ((v69 & 1) == 0) {
        goto LABEL_71;
      }
      goto LABEL_61;
    }
    uint64_t v70 = 1;
  }
  else
  {
LABEL_72:
    uint64_t v70 = 0;
  }
  return v70 & 1;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  _DWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int (*v82)(char *, uint64_t, uint64_t);
  uint64_t v83;
  unsigned int v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t *v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  BOOL v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  void *v128;
  uint64_t v129;
  char v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  void *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  size_t v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char v161;
  uint64_t v162;
  char v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t *v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  int64_t v171;
  uint64_t v172;
  uint64_t v173;
  BOOL v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char v178;
  uint64_t (*v179)(uint64_t);
  uint64_t v180;
  uint64_t v181;
  int *v182;
  int *v183;
  uint64_t v184;
  int v185;
  int v186;
  int v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  size_t v191;
  int v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  char v198;
  char v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  unint64_t v206;
  uint64_t v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  void *v224;
  uint64_t v225;
  uint64_t v226;
  const void *v227;
  uint64_t v228;
  char v229;
  uint64_t v230;
  char v231;
  unint64_t v232;
  uint64_t v233;
  BOOL v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  char v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  char v246;
  char v247;
  void *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  const void *v252;
  uint64_t v253;
  char v254;
  char *v255;
  uint64_t v256;
  char *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t (*v263)(uint64_t, uint64_t, uint64_t);
  uint64_t v264;
  unsigned int v265;
  uint64_t v266;
  uint64_t v267;
  char *v268;
  uint64_t v269;
  unsigned int v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  unsigned int (*v275)(uint64_t, uint64_t, uint64_t);
  uint64_t v276;
  uint64_t v277;
  char v278;
  uint64_t v279;
  char v280;
  char v281;
  unint64_t v282;
  void *v283;
  void *v284;
  uint64_t v285;
  BOOL v286;
  uint64_t v287;
  char v288;
  uint64_t *v289;
  uint64_t *v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t (*v295)(uint64_t);
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t (*v300)(uint64_t);
  uint64_t v301;
  uint64_t *v302;
  uint64_t v303;
  unint64_t v304;
  unint64_t v305;
  unint64_t v306;
  uint64_t v307;
  uint64_t v308;
  unint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  unsigned int (**v313)(uint64_t, uint64_t, uint64_t);
  char *v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t *v321;
  uint64_t (**v322)(uint64_t, uint64_t, uint64_t);
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  unint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  unsigned int (**v336)(char *, uint64_t, uint64_t);
  uint64_t v337;
  char *v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  unint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  char *v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t *v353;
  uint64_t v354;
  char *v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t *v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  char *v368;
  uint64_t v369;
  uint64_t __s2;
  __int16 v371;
  char v372;
  char v373;
  char v374;
  char v375;
  void __s1[4];

  void __s1[3] = *MEMORY[0x263EF8340];
  uint64_t v4 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v303 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v339 = (uint64_t)&v303 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v340 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?, AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?));
  MEMORY[0x270FA5388](v340);
  uint64_t v349 = (char *)&v303 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v350 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  unint64_t v11 = *(void *)(v350 - 8);
  MEMORY[0x270FA5388](v350);
  uint64_t v346 = (uint64_t)&v303 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v347 = (uint64_t)&v303 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v348 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireSimilarityPlaintextPacking?, AspireSimilarityPlaintextPacking?));
  MEMORY[0x270FA5388](v348);
  v351 = (uint64_t)&v303 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v343 = type metadata accessor for AspireHeSerializedFullCiphertext(0);
  MEMORY[0x270FA5388](v343);
  v364 = (uint64_t *)((char *)&v303 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v344 = type metadata accessor for AspireHeSerializedSeededCiphertext(0);
  MEMORY[0x270FA5388](v344);
  uint64_t v357 = (uint64_t)&v303 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v352 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType, AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType));
  MEMORY[0x270FA5388](v352);
  uint64_t v359 = (uint64_t)&v303 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v363 = type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(0);
  uint64_t v19 = *(void *)(v363 - 8);
  MEMORY[0x270FA5388](v363);
  v353 = (uint64_t *)((char *)&v303 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v21);
  v358 = (uint64_t)&v303 - v22;
  MEMORY[0x270FA5388](v23);
  uint64_t v360 = (uint64_t)&v303 - v24;
  v362 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?, AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?));
  MEMORY[0x270FA5388](v362);
  uint64_t v26 = (char *)&v303 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  MEMORY[0x270FA5388](v27 - 8);
  v361 = (uint64_t)&v303 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v29);
  uint64_t v365 = (uint64_t)&v303 - v30;
  MEMORY[0x270FA5388](v31);
  uint64_t v366 = (uint64_t)&v303 - v32;
  v356 = type metadata accessor for AspireHeSerializedCiphertext(0);
  uint64_t v341 = *(void *)(v356 - 8);
  MEMORY[0x270FA5388](v356);
  uint64_t v34 = (char *)&v303 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v35);
  uint64_t v37 = (char *)&v303 - v36;
  uint64_t v354 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
  v345 = *(void *)(v354 - 8);
  MEMORY[0x270FA5388](v354);
  v369 = (uint64_t)&v303 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v39);
  uint64_t v368 = (char *)&v303 - v40;
  double v41 = type metadata accessor for AspireApiPECShardResponse(0);
  MEMORY[0x270FA5388](v41);
  v355 = (char *)&v303 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v43);
  uint64_t v367 = (uint64_t)&v303 - v46;
  uint64_t v47 = *(void *)(a1 + 16);
  if (v47 != *(void *)(a2 + 16)) {
    goto LABEL_258;
  }
  if (!v47 || a1 == a2)
  {
    v288 = 1;
    return v288 & 1;
  }
  uint64_t v326 = v44;
  size_t v48 = 0;
  v329 = 0;
  int v49 = (*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80);
  uint64_t v50 = a1 + v49;
  uint64_t v51 = a2 + v49;
  uint64_t v52 = *(void *)(v45 + 72);
  uint64_t v336 = (unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
  v322 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  uint64_t v313 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  uint64_t v321 = &demangling cache variable for type metadata for (AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?, AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  uint64_t v315 = v4;
  v314 = v7;
  uint64_t v53 = v355;
  size_t v54 = (uint64_t)v34;
  v325 = v47;
  v324 = v50;
  uint64_t v323 = v52;
  while (1)
  {
    uint64_t v330 = v48;
    uint64_t v55 = v52 * v48;
    unint64_t v56 = v367;
    outlined init with copy of AspireSimilarityPlaintextPackingDenseRow(v50 + v52 * v48, v367, type metadata accessor for AspireApiPECShardResponse);
    outlined init with copy of AspireSimilarityPlaintextPackingDenseRow(v51 + v55, (uint64_t)v53, type metadata accessor for AspireApiPECShardResponse);
    uint64_t v57 = *(void *)v56;
    uint64_t v58 = *v53;
    uint64_t v59 = *(void *)(*(void *)v56 + 16);
    uint64_t v60 = (uint64_t)v368;
    int64_t v61 = v365;
    if (v59 != *(void *)(*v53 + 16)) {
      goto LABEL_257;
    }
    if (v59 && v57 != v58) {
      break;
    }
LABEL_233:
    v283 = *(void **)(v367 + 8);
    uint64_t v284 = (void *)v53[1];
    uint64_t v285 = v283[2];
    if (v285 != v284[2]) {
      goto LABEL_257;
    }
    if (v285) {
      uint64_t v286 = v283 == v284;
    }
    else {
      uint64_t v286 = 1;
    }
    if (!v286)
    {
      if (v283[4] != v284[4]) {
        goto LABEL_257;
      }
      if (v285 != 1)
      {
        if (v283[5] != v284[5]) {
          goto LABEL_257;
        }
        v289 = v283 + 6;
        uint64_t v290 = v284 + 6;
        uint64_t v291 = v285 - 2;
        while (v291)
        {
          uint64_t v293 = *v289++;
          uint64_t v292 = v293;
          v294 = *v290++;
          --v291;
          if (v292 != v294) {
            goto LABEL_257;
          }
        }
      }
    }
    if ((specialized static Array<A>.== infix(_:_:)(*(void *)(v367 + 16), v53[2]) & 1) == 0) {
      goto LABEL_257;
    }
    uint64_t v287 = v367;
    type metadata accessor for UnknownStorage();
    _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_2(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    v288 = dispatch thunk of static Equatable.== infix(_:_:)();
    outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v53, type metadata accessor for AspireApiPECShardResponse);
    outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v287, type metadata accessor for AspireApiPECShardResponse);
    if (v288)
    {
      size_t v48 = v330 + 1;
      uint64_t v50 = v324;
      uint64_t v52 = v323;
      if (v330 + 1 != v325) {
        continue;
      }
    }
    return v288 & 1;
  }
  uint64_t v62 = 0;
  uint64_t v63 = (*(unsigned __int8 *)(v345 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v345 + 80);
  uint64_t v64 = v57 + v63;
  uint64_t v327 = v58 + v63;
  uint64_t v65 = *(void *)(v345 + 72);
  size_t v66 = v58;
  v320 = v51;
  uint64_t v338 = v37;
  uint64_t v337 = v54;
  uint64_t v319 = v58;
  uint64_t v318 = v59;
  uint64_t v317 = v64;
  uint64_t v316 = v65;
  while (1)
  {
    uint64_t v67 = v62;
    uint64_t v68 = v65 * v62;
    outlined init with copy of AspireSimilarityPlaintextPackingDenseRow(v64 + v68, v60, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
    unint64_t v69 = *(void *)(v66 + 16);
    uint64_t v328 = v67;
    if (v67 >= v69) {
      goto LABEL_271;
    }
    uint64_t v70 = v327 + v68;
    int64_t v71 = (_DWORD *)v369;
    outlined init with copy of AspireSimilarityPlaintextPackingDenseRow(v70, v369, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
    if (*(_DWORD *)v60 != *v71) {
      goto LABEL_256;
    }
    if (*(_DWORD *)(v60 + 4) != *(_DWORD *)(v369 + 4)) {
      goto LABEL_256;
    }
    uint64_t v72 = *(void *)(v60 + 8);
    size_t v73 = *(void *)(v369 + 8);
    uint64_t v74 = *(void *)(v72 + 16);
    if (v74 != *(void *)(v73 + 16)) {
      goto LABEL_256;
    }
    if (v74 && v72 != v73) {
      break;
    }
LABEL_219:
    uint64_t v255 = v37;
    uint64_t v256 = v54;
    uint64_t v257 = v26;
    uint64_t v258 = *(int *)(v354 + 32);
    v259 = v60 + v258;
    uint64_t v260 = v369 + v258;
    uint64_t v261 = v351;
    uint64_t v262 = v351 + *(int *)(v348 + 48);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v259, v351, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v260, v262, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    uint64_t v263 = *v322;
    uint64_t v264 = v350;
    uint64_t v265 = (*v322)(v261, 1, v350);
    v266 = (uint64_t)v349;
    if (v265 == 1)
    {
      uint64_t v286 = v263(v262, 1, v264) == 1;
      uint64_t v267 = v261;
      if (!v286) {
        goto LABEL_265;
      }
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v261, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
      uint64_t v26 = v257;
      size_t v54 = v256;
      uint64_t v51 = v320;
      uint64_t v37 = v255;
      int64_t v61 = v365;
    }
    else
    {
      uint64_t v268 = v257;
      uint64_t v269 = v347;
      outlined init with copy of AMDPbHEConfig.OneOf_Config?(v261, v347, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
      uint64_t v270 = v263(v262, 1, v264);
      uint64_t v271 = v315;
      uint64_t v272 = (uint64_t)v314;
      if (v270 == 1)
      {
        outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v269, type metadata accessor for AspireSimilarityPlaintextPacking);
        uint64_t v267 = v351;
LABEL_265:
        uint64_t v302 = &demangling cache variable for type metadata for (AspireSimilarityPlaintextPacking?, AspireSimilarityPlaintextPacking?);
        goto LABEL_269;
      }
      int v273 = v346;
      _s8CipherML32AspireSimilarityPlaintextPackingVWObTm_0(v262, v346, type metadata accessor for AspireSimilarityPlaintextPacking);
      uint64_t v274 = v266 + *(int *)(v340 + 48);
      outlined init with copy of AMDPbHEConfig.OneOf_Config?(v269, v266, &demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
      outlined init with copy of AMDPbHEConfig.OneOf_Config?(v273, v274, &demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
      uint64_t v275 = *v313;
      if ((*v313)(v266, 1, v271) == 1)
      {
        if (v275(v274, 1, v271) != 1) {
          goto LABEL_267;
        }
        outlined destroy of AMDPbHEConfig.OneOf_Config?(v266, &demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
        v276 = v347;
      }
      else
      {
        uint64_t v277 = v339;
        outlined init with copy of AMDPbHEConfig.OneOf_Config?(v266, v339, &demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
        if (v275(v274, 1, v271) == 1)
        {
          outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v277, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
LABEL_267:
          outlined destroy of AMDPbHEConfig.OneOf_Config?(v266, &demangling cache variable for type metadata for (AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?, AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?));
          v276 = v347;
LABEL_268:
          outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v346, type metadata accessor for AspireSimilarityPlaintextPacking);
          outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v276, type metadata accessor for AspireSimilarityPlaintextPacking);
          uint64_t v302 = (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?;
          uint64_t v267 = v351;
LABEL_269:
          outlined destroy of AMDPbHEConfig.OneOf_Config?(v267, v302);
          uint64_t v60 = (uint64_t)v368;
          goto LABEL_256;
        }
        _s8CipherML32AspireSimilarityPlaintextPackingVWObTm_0(v274, v272, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
        uint64_t v278 = specialized static AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType.== infix(_:_:)(v277, v272);
        outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v272, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
        outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v277, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
        outlined destroy of AMDPbHEConfig.OneOf_Config?(v266, &demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
        v276 = v347;
        if ((v278 & 1) == 0) {
          goto LABEL_268;
        }
      }
      uint64_t v279 = v346;
      type metadata accessor for UnknownStorage();
      _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_2(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
      v280 = dispatch thunk of static Equatable.== infix(_:_:)();
      outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v279, type metadata accessor for AspireSimilarityPlaintextPacking);
      outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v276, type metadata accessor for AspireSimilarityPlaintextPacking);
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v351, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
      uint64_t v60 = (uint64_t)v368;
      uint64_t v51 = v320;
      uint64_t v26 = v268;
      size_t v54 = v337;
      uint64_t v37 = v338;
      int64_t v61 = v365;
      if ((v280 & 1) == 0) {
        goto LABEL_256;
      }
    }
    type metadata accessor for UnknownStorage();
    _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_2(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    uint64_t v281 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v60 = (uint64_t)v368;
    if ((v281 & 1) == 0) {
      goto LABEL_256;
    }
    v282 = v328 + 1;
    outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v369, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
    uint64_t v62 = v282;
    outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v60, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
    uint64_t v286 = v282 == v318;
    uint64_t v53 = v355;
    size_t v66 = v319;
    uint64_t v64 = v317;
    uint64_t v65 = v316;
    if (v286) {
      goto LABEL_233;
    }
  }
  uint64_t v75 = 0;
  unint64_t v76 = (*(unsigned __int8 *)(v341 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v341 + 80);
  uint64_t v335 = v72 + v76;
  uint64_t v333 = v73 + v76;
  uint64_t v334 = *(void *)(v341 + 72);
  uint64_t v332 = v73;
  uint64_t v331 = v74;
  while (1)
  {
    uint64_t v77 = v75;
    int64_t v78 = v334 * v75;
    outlined init with copy of AspireSimilarityPlaintextPackingDenseRow(v335 + v334 * v75, (uint64_t)v37, type metadata accessor for AspireHeSerializedCiphertext);
    uint64_t v79 = *(void *)(v73 + 16);
    v342 = v77;
    if (v77 >= v79)
    {
      __break(1u);
LABEL_271:
      __break(1u);
LABEL_272:
      __break(1u);
LABEL_273:
      __break(1u);
LABEL_274:
      __break(1u);
LABEL_275:
      __break(1u);
LABEL_276:
      __break(1u);
LABEL_277:
      __break(1u);
LABEL_278:
      __break(1u);
LABEL_279:
      __break(1u);
LABEL_280:
      __break(1u);
LABEL_281:
      __break(1u);
LABEL_282:
      __break(1u);
LABEL_283:
      __break(1u);
LABEL_284:
      __break(1u);
LABEL_285:
      __break(1u);
LABEL_286:
      __break(1u);
LABEL_287:
      __break(1u);
LABEL_288:
      __break(1u);
LABEL_289:
      __break(1u);
LABEL_290:
      __break(1u);
LABEL_291:
      __break(1u);
LABEL_292:
      __break(1u);
LABEL_293:
      __break(1u);
LABEL_294:
      __break(1u);
LABEL_295:
      __break(1u);
LABEL_296:
      __break(1u);
LABEL_297:
      __break(1u);
LABEL_298:
      __break(1u);
LABEL_299:
      __break(1u);
LABEL_300:
      __break(1u);
LABEL_301:
      __break(1u);
LABEL_302:
      __break(1u);
LABEL_303:
      __break(1u);
LABEL_304:
      __break(1u);
LABEL_305:
      __break(1u);
LABEL_306:
      __break(1u);
LABEL_307:
      __break(1u);
LABEL_308:
      __break(1u);
    }
    outlined init with copy of AspireSimilarityPlaintextPackingDenseRow(v333 + v78, v54, type metadata accessor for AspireHeSerializedCiphertext);
    size_t v80 = v366;
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v37, v366, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v54, v61, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    char v81 = (uint64_t)&v26[*(int *)(v362 + 48)];
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v80, (uint64_t)v26, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v61, v81, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    unint64_t v82 = *v336;
    BOOL v83 = v363;
    if ((*v336)(v26, 1, v363) != 1) {
      break;
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v61, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v80, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    uint64_t v84 = v82((char *)v81, 1, v83);
    size_t v54 = v337;
    uint64_t v37 = v338;
    if (v84 != 1)
    {
      uint64_t v60 = (uint64_t)v368;
      goto LABEL_255;
    }
LABEL_217:
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v26, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    type metadata accessor for UnknownStorage();
    _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_2(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    uint64_t v254 = dispatch thunk of static Equatable.== infix(_:_:)();
    outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v54, type metadata accessor for AspireHeSerializedCiphertext);
    outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v37, type metadata accessor for AspireHeSerializedCiphertext);
    uint64_t v60 = (uint64_t)v368;
    size_t v73 = v332;
    if ((v254 & 1) == 0) {
      goto LABEL_256;
    }
    uint64_t v75 = v342 + 1;
    if (v342 + 1 == v331) {
      goto LABEL_219;
    }
  }
  uint64_t v85 = v26;
  uint64_t v86 = v361;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v26, v361, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  if (v82((char *)v81, 1, v83) == 1)
  {
    uint64_t v60 = (uint64_t)v368;
    uint64_t v298 = v366;
    uint64_t v37 = v338;
    goto LABEL_254;
  }
  uint64_t v87 = v360;
  _s8CipherML32AspireSimilarityPlaintextPackingVWObTm_0(v81, v360, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
  uint64_t v88 = v359;
  uint64_t v89 = v359 + *(int *)(v352 + 48);
  outlined init with copy of AspireSimilarityPlaintextPackingDenseRow(v86, v359, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
  outlined init with copy of AspireSimilarityPlaintextPackingDenseRow(v87, v89, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v90 = v353;
    outlined init with copy of AspireSimilarityPlaintextPackingDenseRow(v88, (uint64_t)v353, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v91 = v89;
      uint64_t v92 = v364;
      _s8CipherML32AspireSimilarityPlaintextPackingVWObTm_0(v91, (uint64_t)v364, type metadata accessor for AspireHeSerializedFullCiphertext);
      char v94 = *v90;
      __int16 v93 = v90[1];
      char v95 = *v92;
      char v96 = v92[1];
      char v97 = 0;
      uint64_t v98 = (uint64_t)v90;
      uint64_t v37 = v338;
      uint64_t v26 = v85;
      switch(v93 >> 62)
      {
        case 1uLL:
          if (__OFSUB__(HIDWORD(v94), v94)) {
            goto LABEL_273;
          }
          char v97 = HIDWORD(v94) - (int)v94;
LABEL_31:
          uint64_t v109 = v96 >> 62;
          switch(v96 >> 62)
          {
            case 1uLL:
              LODWORD(v110) = HIDWORD(v95) - v95;
              if (__OFSUB__(HIDWORD(v95), v95)) {
                goto LABEL_277;
              }
              uint64_t v110 = (int)v110;
LABEL_50:
              if (v97 != v110) {
                goto LABEL_250;
              }
              if (v97 < 1) {
                goto LABEL_125;
              }
              break;
            case 2uLL:
              uint64_t v116 = *(void *)(v95 + 16);
              uint64_t v115 = *(void *)(v95 + 24);
              uint64_t v108 = __OFSUB__(v115, v116);
              uint64_t v110 = v115 - v116;
              if (!v108) {
                goto LABEL_50;
              }
              goto LABEL_276;
            case 3uLL:
              if (v97) {
                goto LABEL_250;
              }
              goto LABEL_125;
            default:
              uint64_t v110 = BYTE6(v96);
              goto LABEL_50;
          }
          break;
        case 2uLL:
          int v107 = *(void *)(v94 + 16);
          size_t v106 = *(void *)(v94 + 24);
          uint64_t v108 = __OFSUB__(v106, v107);
          char v97 = v106 - v107;
          if (!v108) {
            goto LABEL_31;
          }
          goto LABEL_272;
        case 3uLL:
          goto LABEL_31;
        default:
          char v97 = BYTE6(v93);
          goto LABEL_31;
      }
      switch(v93 >> 62)
      {
        case 1uLL:
          if ((int)v94 > v94 >> 32) {
            goto LABEL_285;
          }
          outlined copy of Data._Representation(v94, v93);
          double v126 = __DataStorage._bytes.getter();
          if (!v126) {
            goto LABEL_73;
          }
          double v127 = __DataStorage._offset.getter();
          if (__OFSUB__((int)v94, v127)) {
            goto LABEL_289;
          }
          v126 += (int)v94 - v127;
LABEL_73:
          __DataStorage._length.getter();
          uint64_t v128 = (void *)v126;
          uint64_t v129 = v329;
          unint64_t v130 = specialized Data._Representation.withUnsafeBytes<A>(_:)(v95, v96, v128);
          v329 = v129;
          outlined consume of Data._Representation(v94, v93);
LABEL_78:
          uint64_t v98 = (uint64_t)v353;
          if ((v130 & 1) == 0) {
            goto LABEL_250;
          }
          goto LABEL_125;
        case 2uLL:
          uint64_t v131 = *(void *)(v94 + 16);
          swift_retain();
          swift_retain();
          int v132 = __DataStorage._bytes.getter();
          if (!v132) {
            goto LABEL_77;
          }
          uint64_t v133 = __DataStorage._offset.getter();
          if (__OFSUB__(v131, v133)) {
            goto LABEL_287;
          }
          v132 += v131 - v133;
LABEL_77:
          __DataStorage._length.getter();
          uint64_t v134 = (void *)v132;
          double v135 = v329;
          unint64_t v130 = specialized Data._Representation.withUnsafeBytes<A>(_:)(v95, v96, v134);
          v329 = v135;
          swift_release();
          swift_release();
          goto LABEL_78;
        case 3uLL:
          memset(__s1, 0, 14);
          if (!v109)
          {
            uint64_t v164 = v310 & 0xFF00000000000000 | v96 & 0xFFFFFFFFFFFFFFLL;
            uint64_t v165 = v95;
            uint64_t v166 = (uint64_t *)&v342;
            goto LABEL_124;
          }
          if (v109 != 1) {
            goto LABEL_104;
          }
          uint64_t v119 = (int)v95;
          uint64_t v120 = v95 >> 32;
          if (v95 >> 32 < (int)v95) {
            goto LABEL_293;
          }
          goto LABEL_83;
        default:
          __s1[0] = *v90;
          LOWORD(__s1[1]) = v93;
          BYTE2(__s1[1]) = BYTE2(v93);
          BYTE3(__s1[1]) = BYTE3(v93);
          BYTE4(__s1[1]) = BYTE4(v93);
          BYTE5(__s1[1]) = BYTE5(v93);
          if (v109)
          {
            if (v109 == 1)
            {
              uint64_t v119 = (int)v95;
              uint64_t v120 = v95 >> 32;
              if (v95 >> 32 < (int)v95) {
                goto LABEL_296;
              }
LABEL_83:
              outlined copy of Data._Representation(v95, v96);
              double v136 = v120;
              uint64_t v137 = v329;
              unint64_t v138 = specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v119, v136, v96 & 0x3FFFFFFFFFFFFFFFLL, __s1);
              v329 = v137;
              outlined consume of Data._Representation(v95, v96);
              uint64_t v98 = (uint64_t)v353;
              if ((v138 & 1) == 0) {
                goto LABEL_250;
              }
            }
            else
            {
LABEL_104:
              uint64_t v156 = *(void *)(v95 + 16);
              uint64_t v157 = *(void *)(v95 + 24);
              swift_retain();
              swift_retain();
              uint64_t v158 = v156;
              uint64_t v159 = v329;
              LOBYTE(v157) = specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v158, v157, v96 & 0x3FFFFFFFFFFFFFFFLL, __s1);
              v329 = v159;
              swift_release();
              swift_release();
              uint64_t v98 = (uint64_t)v353;
              if ((v157 & 1) == 0) {
                goto LABEL_250;
              }
            }
          }
          else
          {
            uint64_t v164 = v311 & 0xFF00000000000000 | v96 & 0xFFFFFFFFFFFFFFLL;
            uint64_t v165 = v95;
            uint64_t v166 = &v343;
LABEL_124:
            *(v166 - 32) = v164;
            uint64_t v173 = v329;
            uint64_t v174 = specialized Data.InlineData.withUnsafeBytes<A>(_:)(v165, v164, __s1);
            uint64_t v98 = (uint64_t)v353;
            v329 = v173;
            if (!v174) {
              goto LABEL_250;
            }
          }
LABEL_125:
          __int16 v175 = *(void *)(v98 + 16);
          char v176 = v364[2];
          char v177 = *(void *)(v175 + 16);
          if (v177 != *(void *)(v176 + 16)) {
            goto LABEL_250;
          }
          if (!v177 || v175 == v176) {
            goto LABEL_130;
          }
          if (*(_DWORD *)(v175 + 32) != *(_DWORD *)(v176 + 32)) {
            goto LABEL_250;
          }
          if (v177 == 1) {
            goto LABEL_130;
          }
          if (*(_DWORD *)(v175 + 36) != *(_DWORD *)(v176 + 36)) {
            goto LABEL_250;
          }
          int v182 = (int *)(v175 + 40);
          uint64_t v183 = (int *)(v176 + 40);
          uint64_t v184 = v177 - 2;
          while (v184)
          {
            uint64_t v186 = *v182++;
            uint64_t v185 = v186;
            int v187 = *v183++;
            --v184;
            if (v185 != v187) {
              goto LABEL_250;
            }
          }
LABEL_130:
          if (*(void *)(v98 + 24) != v364[3]
            || (type metadata accessor for UnknownStorage(),
                _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_2(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]), v178 = dispatch thunk of static Equatable.== infix(_:_:)(), uint64_t v98 = (uint64_t)v353, (v178 & 1) == 0))
          {
LABEL_250:
            v295 = type metadata accessor for AspireHeSerializedFullCiphertext;
            uint64_t v296 = v98;
            outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v364, type metadata accessor for AspireHeSerializedFullCiphertext);
            uint64_t v297 = v296;
            goto LABEL_252;
          }
          char v179 = type metadata accessor for AspireHeSerializedFullCiphertext;
          uint64_t v180 = (uint64_t)v353;
          outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v364, type metadata accessor for AspireHeSerializedFullCiphertext);
          uint64_t v181 = v180;
          break;
      }
      goto LABEL_216;
    }
    uint64_t v300 = type metadata accessor for AspireHeSerializedFullCiphertext;
    uint64_t v301 = (uint64_t)v90;
LABEL_263:
    outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v301, v300);
    uint64_t v60 = (uint64_t)v368;
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v88, &demangling cache variable for type metadata for (AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType, AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType));
    uint64_t v298 = v366;
    uint64_t v37 = v338;
    uint64_t v26 = v85;
    goto LABEL_253;
  }
  uint64_t v99 = v358;
  outlined init with copy of AspireSimilarityPlaintextPackingDenseRow(v88, v358, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v300 = type metadata accessor for AspireHeSerializedSeededCiphertext;
    uint64_t v301 = v99;
    goto LABEL_263;
  }
  os_log_type_t v100 = (uint64_t *)v357;
  _s8CipherML32AspireSimilarityPlaintextPackingVWObTm_0(v89, v357, type metadata accessor for AspireHeSerializedSeededCiphertext);
  uint64_t v101 = *(void *)v99;
  uint64_t v102 = *(void *)(v99 + 8);
  uint64_t v103 = *v100;
  Swift::String v104 = v100[1];
  int v105 = 0;
  uint64_t v37 = v338;
  uint64_t v26 = v85;
  switch(v102 >> 62)
  {
    case 1uLL:
      LODWORD(v105) = HIDWORD(v101) - v101;
      if (__OFSUB__(HIDWORD(v101), v101)) {
        goto LABEL_274;
      }
      int v105 = (int)v105;
LABEL_36:
      uint64_t v113 = v104 >> 62;
      switch(v104 >> 62)
      {
        case 1uLL:
          LODWORD(v114) = HIDWORD(v103) - v103;
          if (__OFSUB__(HIDWORD(v103), v103)) {
            goto LABEL_278;
          }
          uint64_t v114 = (int)v114;
LABEL_59:
          if (v105 != v114) {
            goto LABEL_251;
          }
          if (v105 < 1) {
            goto LABEL_158;
          }
          break;
        case 2uLL:
          uint64_t v118 = *(void *)(v103 + 16);
          int64_t v117 = *(void *)(v103 + 24);
          uint64_t v108 = __OFSUB__(v117, v118);
          uint64_t v114 = v117 - v118;
          if (!v108) {
            goto LABEL_59;
          }
          goto LABEL_279;
        case 3uLL:
          if (v105) {
            goto LABEL_251;
          }
          goto LABEL_158;
        default:
          uint64_t v114 = BYTE6(v104);
          goto LABEL_59;
      }
      break;
    case 2uLL:
      uint64_t v112 = *(void *)(v101 + 16);
      os_log_type_t v111 = *(void *)(v101 + 24);
      uint64_t v108 = __OFSUB__(v111, v112);
      int v105 = v111 - v112;
      if (!v108) {
        goto LABEL_36;
      }
      goto LABEL_275;
    case 3uLL:
      goto LABEL_36;
    default:
      int v105 = BYTE6(v102);
      goto LABEL_36;
  }
  switch(v102 >> 62)
  {
    case 1uLL:
      uint64_t v139 = (int)v101;
      if ((int)v101 > v101 >> 32) {
        goto LABEL_284;
      }
      uint64_t v140 = *(void *)v99;
      outlined copy of Data._Representation(v101, *(void *)(v99 + 8));
      uint64_t v141 = __DataStorage._bytes.getter();
      if (v141)
      {
        int v142 = v141;
        int v143 = __DataStorage._offset.getter();
        if (__OFSUB__(v139, v143)) {
          goto LABEL_290;
        }
        uint64_t v144 = (void *)(v142 + v139 - v143);
      }
      else
      {
        uint64_t v144 = 0;
      }
      __DataStorage._length.getter();
      if (!v113)
      {
        uint64_t v306 = v306 & 0xFF00000000000000 | v104 & 0xFFFFFFFFFFFFFFLL;
        uint64_t v200 = v329;
        int64_t v163 = specialized Data.InlineData.withUnsafeBytes<A>(_:)(v103, v306, v144);
        v329 = v200;
        goto LABEL_155;
      }
      if (v113 == 1)
      {
        if (v103 >> 32 < (int)v103) {
          goto LABEL_302;
        }
        outlined copy of Data._Representation(v103, v104);
        uint64_t v162 = v329;
        int64_t v163 = specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)v103, v103 >> 32, v104 & 0x3FFFFFFFFFFFFFFFLL, v144);
        v329 = v162;
        outlined consume of Data._Representation(v103, v104);
LABEL_155:
        outlined consume of Data._Representation(v140, v102);
        if ((v163 & 1) == 0) {
          goto LABEL_251;
        }
        goto LABEL_158;
      }
      uint64_t v201 = *(void *)(v103 + 16);
      uint64_t v202 = *(void *)(v103 + 24);
      swift_retain();
      swift_retain();
      uint64_t v203 = v201;
      uint64_t v204 = v329;
      LOBYTE(v202) = specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v203, v202, v104 & 0x3FFFFFFFFFFFFFFFLL, v144);
      v329 = v204;
      swift_release();
      swift_release();
      outlined consume of Data._Representation(v140, v102);
      if ((v202 & 1) == 0) {
        goto LABEL_251;
      }
      goto LABEL_158;
    case 2uLL:
      uint64_t v145 = *(void *)(v101 + 16);
      uint64_t v312 = *(void *)v99;
      swift_retain();
      swift_retain();
      uint64_t v146 = __DataStorage._bytes.getter();
      if (v146)
      {
        uint64_t v147 = v146;
        int64_t v148 = __DataStorage._offset.getter();
        uint64_t v149 = v309;
        if (__OFSUB__(v145, v148)) {
          goto LABEL_288;
        }
        int64_t v150 = (void *)(v147 + v145 - v148);
      }
      else
      {
        int64_t v150 = 0;
        uint64_t v149 = v309;
      }
      __DataStorage._length.getter();
      if (!v113)
      {
        uint64_t v309 = v149 & 0xFF00000000000000 | v104 & 0xFFFFFFFFFFFFFFLL;
        uint64_t v193 = v329;
        int v161 = specialized Data.InlineData.withUnsafeBytes<A>(_:)(v103, v309, v150);
        v329 = v193;
        goto LABEL_149;
      }
      if (v113 == 1)
      {
        if (v103 >> 32 < (int)v103) {
          goto LABEL_297;
        }
        outlined copy of Data._Representation(v103, v104);
        uint64_t v160 = v329;
        int v161 = specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)v103, v103 >> 32, v104 & 0x3FFFFFFFFFFFFFFFLL, v150);
        v329 = v160;
        outlined consume of Data._Representation(v103, v104);
LABEL_149:
        swift_release();
        swift_release();
        if ((v161 & 1) == 0) {
          goto LABEL_251;
        }
        goto LABEL_158;
      }
      uint64_t v194 = *(void *)(v103 + 16);
      uint64_t v195 = *(void *)(v103 + 24);
      swift_retain();
      swift_retain();
      uint64_t v196 = v194;
      uint64_t v197 = v329;
      uint64_t v198 = specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v196, v195, v104 & 0x3FFFFFFFFFFFFFFFLL, v150);
      v329 = v197;
      if (v197) {
        goto LABEL_313;
      }
      uint64_t v199 = v198;
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      if ((v199 & 1) == 0) {
        goto LABEL_251;
      }
LABEL_158:
      uint64_t v205 = *(void *)(v358 + 16);
      uint64_t v206 = *(void *)(v358 + 24);
      uint64_t v207 = *(void *)(v357 + 16);
      uint64_t v208 = *(void *)(v357 + 24);
      uint64_t v209 = 0;
      switch(v206 >> 62)
      {
        case 1uLL:
          LODWORD(v209) = HIDWORD(v205) - v205;
          if (__OFSUB__(HIDWORD(v205), v205)) {
            goto LABEL_280;
          }
          uint64_t v209 = (int)v209;
LABEL_163:
          uint64_t v212 = v208 >> 62;
          switch(v208 >> 62)
          {
            case 1uLL:
              LODWORD(v213) = HIDWORD(v207) - v207;
              if (__OFSUB__(HIDWORD(v207), v207)) {
                goto LABEL_283;
              }
              uint64_t v213 = (int)v213;
LABEL_170:
              if (v209 != v213) {
                goto LABEL_251;
              }
              if (v209 < 1) {
                goto LABEL_214;
              }
              break;
            case 2uLL:
              uint64_t v215 = *(void *)(v207 + 16);
              uint64_t v214 = *(void *)(v207 + 24);
              uint64_t v108 = __OFSUB__(v214, v215);
              uint64_t v213 = v214 - v215;
              if (!v108) {
                goto LABEL_170;
              }
              goto LABEL_282;
            case 3uLL:
              if (v209) {
                goto LABEL_251;
              }
              goto LABEL_214;
            default:
              uint64_t v213 = BYTE6(v208);
              goto LABEL_170;
          }
          break;
        case 2uLL:
          uint64_t v211 = *(void *)(v205 + 16);
          uint64_t v210 = *(void *)(v205 + 24);
          uint64_t v108 = __OFSUB__(v210, v211);
          uint64_t v209 = v210 - v211;
          if (!v108) {
            goto LABEL_163;
          }
          goto LABEL_281;
        case 3uLL:
          goto LABEL_163;
        default:
          uint64_t v209 = BYTE6(v206);
          goto LABEL_163;
      }
      break;
    case 3uLL:
      memset(__s1, 0, 14);
      if (!v113) {
        goto LABEL_102;
      }
      if (v113 == 1)
      {
        uint64_t v121 = (v103 >> 32) - (int)v103;
        if (v103 >> 32 < (int)v103) {
          goto LABEL_295;
        }
        outlined copy of Data._Representation(v103, v104);
        uint64_t v151 = __DataStorage._bytes.getter();
        if (!v151) {
          goto LABEL_310;
        }
        uint64_t v123 = v151;
        uint64_t v152 = __DataStorage._offset.getter();
        uint64_t v125 = (int)v103 - v152;
        if (__OFSUB__((int)v103, v152)) {
          goto LABEL_301;
        }
LABEL_97:
        uint64_t v153 = __DataStorage._length.getter();
        if (v153 >= v121) {
          uint64_t v154 = v121;
        }
        else {
          uint64_t v154 = v153;
        }
        uint64_t v155 = memcmp(__s1, (const void *)(v123 + v125), v154);
        outlined consume of Data._Representation(v103, v104);
        if (v155) {
          goto LABEL_251;
        }
      }
      else
      {
        int v188 = *(void *)(v103 + 16);
        uint64_t v189 = *(void *)(v103 + 24);
        swift_retain();
        swift_retain();
        uint64_t v169 = (char *)__DataStorage._bytes.getter();
        if (v169)
        {
          uint64_t v190 = __DataStorage._offset.getter();
          if (__OFSUB__(v188, v190)) {
            goto LABEL_307;
          }
          v169 += v188 - v190;
        }
        uint64_t v108 = __OFSUB__(v189, v188);
        uint64_t v171 = v189 - v188;
        if (v108) {
          goto LABEL_299;
        }
        uint64_t v172 = __DataStorage._length.getter();
        if (!v169) {
          goto LABEL_312;
        }
LABEL_143:
        if (v172 >= v171) {
          uint64_t v191 = v171;
        }
        else {
          uint64_t v191 = v172;
        }
        uint64_t v192 = memcmp(__s1, v169, v191);
        swift_release();
        swift_release();
        if (v192) {
          goto LABEL_251;
        }
      }
      goto LABEL_158;
    default:
      __s1[0] = *(void *)v99;
      LOWORD(__s1[1]) = v102;
      BYTE2(__s1[1]) = BYTE2(v102);
      BYTE3(__s1[1]) = BYTE3(v102);
      BYTE4(__s1[1]) = BYTE4(v102);
      BYTE5(__s1[1]) = BYTE5(v102);
      if (!v113)
      {
LABEL_102:
        uint64_t __s2 = v103;
        v371 = v104;
        v372 = BYTE2(v104);
        v373 = BYTE3(v104);
        v374 = BYTE4(v104);
        uint64_t v375 = BYTE5(v104);
        if (memcmp(__s1, &__s2, BYTE6(v104))) {
          goto LABEL_251;
        }
        goto LABEL_158;
      }
      if (v113 == 1)
      {
        uint64_t v121 = (v103 >> 32) - (int)v103;
        if (v103 >> 32 < (int)v103) {
          goto LABEL_294;
        }
        outlined copy of Data._Representation(v103, v104);
        char v122 = __DataStorage._bytes.getter();
        if (!v122)
        {
          __DataStorage._length.getter();
          __break(1u);
LABEL_310:
          __DataStorage._length.getter();
          __break(1u);
LABEL_311:
          __break(1u);
LABEL_312:
          __break(1u);
LABEL_313:
          swift_release();
          swift_release();
          __break(1u);
          JUMPOUT(0x249E4B938);
        }
        uint64_t v123 = v122;
        uint64_t v124 = __DataStorage._offset.getter();
        uint64_t v125 = (int)v103 - v124;
        if (__OFSUB__((int)v103, v124)) {
          goto LABEL_300;
        }
        goto LABEL_97;
      }
      uint64_t v167 = *(void *)(v103 + 16);
      uint64_t v168 = *(void *)(v103 + 24);
      swift_retain();
      swift_retain();
      uint64_t v169 = (char *)__DataStorage._bytes.getter();
      if (v169)
      {
        unint64_t v170 = __DataStorage._offset.getter();
        if (__OFSUB__(v167, v170)) {
          goto LABEL_308;
        }
        v169 += v167 - v170;
      }
      uint64_t v108 = __OFSUB__(v168, v167);
      uint64_t v171 = v168 - v167;
      if (v108) {
        goto LABEL_298;
      }
      uint64_t v172 = __DataStorage._length.getter();
      if (!v169) {
        goto LABEL_311;
      }
      goto LABEL_143;
  }
  switch(v206 >> 62)
  {
    case 1uLL:
      if ((int)v205 > v205 >> 32) {
        goto LABEL_286;
      }
      outlined copy of Data._Representation(*(void *)(v358 + 16), *(void *)(v358 + 24));
      uint64_t v225 = __DataStorage._bytes.getter();
      if (!v225) {
        goto LABEL_186;
      }
      uint64_t v226 = __DataStorage._offset.getter();
      if (__OFSUB__((int)v205, v226)) {
        goto LABEL_292;
      }
      v225 += (int)v205 - v226;
LABEL_186:
      __DataStorage._length.getter();
      if (!v212)
      {
        uint64_t v304 = v304 & 0xFF00000000000000 | v208 & 0xFFFFFFFFFFFFFFLL;
        uint64_t v248 = (void *)v225;
        uint64_t v249 = v329;
        uint64_t v229 = specialized Data.InlineData.withUnsafeBytes<A>(_:)(v207, v304, v248);
        v329 = v249;
        goto LABEL_211;
      }
      if (v212 == 1)
      {
        if (v207 >> 32 < (int)v207) {
          goto LABEL_306;
        }
        outlined copy of Data._Representation(v207, v208);
        uint64_t v227 = (const void *)v225;
        uint64_t v228 = v329;
        uint64_t v229 = specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)v207, v207 >> 32, v208 & 0x3FFFFFFFFFFFFFFFLL, v227);
        v329 = v228;
        outlined consume of Data._Representation(v207, v208);
LABEL_211:
        outlined consume of Data._Representation(v205, v206);
        if ((v229 & 1) == 0) {
          goto LABEL_251;
        }
        goto LABEL_214;
      }
      uint64_t v250 = *(void *)(v207 + 16);
      v251 = *(void *)(v207 + 24);
      swift_retain();
      swift_retain();
      uint64_t v252 = (const void *)v225;
      uint64_t v253 = v329;
      LOBYTE(v250) = specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v250, v251, v208 & 0x3FFFFFFFFFFFFFFFLL, v252);
      v329 = v253;
      swift_release();
      swift_release();
      outlined consume of Data._Representation(v205, v206);
      if ((v250 & 1) == 0) {
        goto LABEL_251;
      }
      goto LABEL_214;
    case 2uLL:
      uint64_t v220 = *(void *)(v205 + 16);
      swift_retain();
      swift_retain();
      uint64_t v221 = __DataStorage._bytes.getter();
      if (v221)
      {
        uint64_t v222 = v221;
        uint64_t v223 = __DataStorage._offset.getter();
        if (__OFSUB__(v220, v223)) {
          goto LABEL_291;
        }
        v224 = (void *)(v222 + v220 - v223);
      }
      else
      {
        v224 = 0;
      }
      __DataStorage._length.getter();
      if (!v212)
      {
        uint64_t v305 = v305 & 0xFF00000000000000 | v208 & 0xFFFFFFFFFFFFFFLL;
        uint64_t v241 = v329;
        uint64_t v240 = specialized Data.InlineData.withUnsafeBytes<A>(_:)(v207, v305, v224);
        v329 = v241;
        goto LABEL_205;
      }
      if (v212 == 1)
      {
        if (v207 >> 32 < (int)v207) {
          goto LABEL_305;
        }
        outlined copy of Data._Representation(v207, v208);
        uint64_t v239 = v329;
        uint64_t v240 = specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)v207, v207 >> 32, v208 & 0x3FFFFFFFFFFFFFFFLL, v224);
        v329 = v239;
        outlined consume of Data._Representation(v207, v208);
LABEL_205:
        swift_release();
        swift_release();
        if ((v240 & 1) == 0) {
          goto LABEL_251;
        }
LABEL_214:
        type metadata accessor for UnknownStorage();
        _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_2(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
        if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0) {
          goto LABEL_251;
        }
        char v179 = type metadata accessor for AspireHeSerializedSeededCiphertext;
        outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v357, type metadata accessor for AspireHeSerializedSeededCiphertext);
        uint64_t v181 = v358;
LABEL_216:
        outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v181, v179);
        outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v359, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
        outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v360, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
        int64_t v61 = v365;
        outlined destroy of AMDPbHEConfig.OneOf_Config?(v365, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
        outlined destroy of AMDPbHEConfig.OneOf_Config?(v366, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
        outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v361, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
        size_t v54 = v337;
        goto LABEL_217;
      }
      int v242 = *(void *)(v207 + 16);
      uint64_t v243 = *(void *)(v207 + 24);
      swift_retain();
      swift_retain();
      uint64_t v244 = v242;
      uint64_t v245 = v329;
      v246 = specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v244, v243, v208 & 0x3FFFFFFFFFFFFFFFLL, v224);
      v329 = v245;
      if (v245) {
        goto LABEL_313;
      }
      uint64_t v247 = v246;
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      if (v247) {
        goto LABEL_214;
      }
LABEL_251:
      v295 = type metadata accessor for AspireHeSerializedSeededCiphertext;
      outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v357, type metadata accessor for AspireHeSerializedSeededCiphertext);
      uint64_t v297 = v358;
LABEL_252:
      outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v297, v295);
      outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v359, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
      uint64_t v60 = (uint64_t)v368;
      uint64_t v86 = v361;
      int64_t v61 = v365;
      uint64_t v298 = v366;
LABEL_253:
      outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v360, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
      uint64_t v321 = &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?;
LABEL_254:
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v61, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v298, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
      outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v86, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
      size_t v54 = v337;
LABEL_255:
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v26, v321);
      outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v54, type metadata accessor for AspireHeSerializedCiphertext);
      outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v37, type metadata accessor for AspireHeSerializedCiphertext);
LABEL_256:
      outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v369, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
      outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v60, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
      uint64_t v53 = v355;
LABEL_257:
      outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v53, type metadata accessor for AspireApiPECShardResponse);
      outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v367, type metadata accessor for AspireApiPECShardResponse);
LABEL_258:
      v288 = 0;
      return v288 & 1;
    case 3uLL:
      memset(__s1, 0, 14);
      uint64_t v216 = &v339;
      uint64_t v217 = v307;
      if (!v212) {
        goto LABEL_195;
      }
      if (v212 != 1) {
        goto LABEL_197;
      }
      uint64_t v218 = (int)v207;
      uint64_t v219 = v207 >> 32;
      if (v207 >> 32 >= (int)v207) {
        goto LABEL_193;
      }
      goto LABEL_304;
    default:
      __s1[0] = *(void *)(v358 + 16);
      LOWORD(__s1[1]) = v206;
      BYTE2(__s1[1]) = BYTE2(v206);
      BYTE3(__s1[1]) = BYTE3(v206);
      BYTE4(__s1[1]) = BYTE4(v206);
      BYTE5(__s1[1]) = BYTE5(v206);
      uint64_t v216 = &v340;
      uint64_t v217 = v308;
      if (v212)
      {
        if (v212 == 1)
        {
          uint64_t v218 = (int)v207;
          uint64_t v219 = v207 >> 32;
          if (v207 >> 32 < (int)v207) {
            goto LABEL_303;
          }
LABEL_193:
          outlined copy of Data._Representation(v207, v208);
          uint64_t v230 = v329;
          uint64_t v231 = specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v218, v219, v208 & 0x3FFFFFFFFFFFFFFFLL, __s1);
          v329 = v230;
          outlined consume of Data._Representation(v207, v208);
          if ((v231 & 1) == 0) {
            goto LABEL_251;
          }
        }
        else
        {
LABEL_197:
          int v235 = *(void *)(v207 + 16);
          uint64_t v236 = *(void *)(v207 + 24);
          swift_retain();
          swift_retain();
          uint64_t v237 = v236;
          uint64_t v238 = v329;
          LOBYTE(v235) = specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v235, v237, v208 & 0x3FFFFFFFFFFFFFFFLL, __s1);
          v329 = v238;
          swift_release();
          swift_release();
          if ((v235 & 1) == 0) {
            goto LABEL_251;
          }
        }
      }
      else
      {
LABEL_195:
        uint64_t v232 = v217 & 0xFF00000000000000 | v208 & 0xFFFFFFFFFFFFFFLL;
        *(v216 - 32) = v232;
        uint64_t v233 = v329;
        uint64_t v234 = specialized Data.InlineData.withUnsafeBytes<A>(_:)(v207, v232, __s1);
        v329 = v233;
        if (!v234) {
          goto LABEL_251;
        }
      }
      goto LABEL_214;
  }
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unsigned int (**v34)(char *, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int (*v38)(char *, uint64_t, uint64_t);
  unsigned int (**v39)(char *, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int *v107;
  int *v108;
  uint64_t v109;
  int v110;
  int v111;
  int v112;
  char v113;
  uint64_t (*v114)(uint64_t);
  uint64_t (*v115)(uint64_t);
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char v143;
  uint64_t (*v144)(uint64_t);
  uint64_t (*v145)(uint64_t);
  uint64_t v146;
  uint64_t *v148;
  uint64_t (*v149)(uint64_t);
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  unsigned int (**v154)(char *, uint64_t, uint64_t);
  char *v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t *v165;
  uint64_t *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t *v174;
  uint64_t v175;
  char v176;
  void __s1[5];

  void __s1[3] = *MEMORY[0x263EF8340];
  uint64_t v4 = type metadata accessor for AspireHeSerializedFullCiphertext(0);
  MEMORY[0x270FA5388](v4);
  uint64_t v174 = (uint64_t *)((char *)&v150 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v159 = type metadata accessor for AspireHeSerializedSeededCiphertext(0);
  MEMORY[0x270FA5388](v159);
  uint64_t v168 = (uint64_t)&v150 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v164 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType, AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType));
  MEMORY[0x270FA5388](v164);
  uint64_t v8 = (char *)&v150 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v173 = type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(0);
  uint64_t v9 = *(void *)(v173 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v173);
  uint64_t v165 = (uint64_t *)((char *)&v150 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v166 = (uint64_t *)((char *)&v150 - v13);
  MEMORY[0x270FA5388](v12);
  unint64_t v170 = (uint64_t)&v150 - v14;
  uint64_t v172 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?, AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?));
  MEMORY[0x270FA5388](v172);
  unint64_t v16 = (char *)&v150 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  uint64_t v18 = MEMORY[0x270FA5388](v17 - 8);
  uint64_t v171 = (uint64_t)&v150 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  BOOL v20 = MEMORY[0x270FA5388](v18);
  uint64_t v22 = (char *)&v150 - v21;
  MEMORY[0x270FA5388](v20);
  __int16 v175 = (uint64_t)&v150 - v23;
  uint64_t v167 = type metadata accessor for AspireHeSerializedCiphertext(0);
  uint64_t v24 = MEMORY[0x270FA5388](v167);
  uint64_t v26 = (char *)&v150 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v24);
  uint64_t v29 = (char *)&v150 - v28;
  uint64_t v30 = *(void *)(a1 + 16);
  if (v30 != *(void *)(a2 + 16)) {
    goto LABEL_132;
  }
  if (!v30 || a1 == a2)
  {
    int v143 = 1;
    return v143 & 1;
  }
  uint64_t v153 = v4;
  uint64_t v31 = 0;
  uint64_t v157 = 0;
  uint64_t v32 = (*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80);
  uint64_t v162 = a2 + v32;
  int64_t v163 = a1 + v32;
  uint64_t v33 = *(void *)(v27 + 72);
  uint64_t v160 = v8;
  int v161 = v33;
  uint64_t v34 = (unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  uint64_t v35 = v175;
  uint64_t v156 = v16;
  uint64_t v158 = v30;
  uint64_t v155 = (char *)&v150 - v28;
  uint64_t v154 = (unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  while (1)
  {
    uint64_t v169 = v31;
    uint64_t v36 = v161 * v31;
    outlined init with copy of AspireSimilarityPlaintextPackingDenseRow(v163 + v161 * v31, (uint64_t)v29, type metadata accessor for AspireHeSerializedCiphertext);
    outlined init with copy of AspireSimilarityPlaintextPackingDenseRow(v162 + v36, (uint64_t)v26, type metadata accessor for AspireHeSerializedCiphertext);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v29, v35, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v26, (uint64_t)v22, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    uint64_t v37 = (uint64_t)&v16[*(int *)(v172 + 48)];
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v35, (uint64_t)v16, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v22, v37, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    size_t v38 = *v34;
    int v39 = v34;
    uint64_t v40 = v35;
    double v41 = v173;
    if (v38(v16, 1, v173) != 1) {
      break;
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v22, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v40, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    uint64_t v34 = v39;
    if (v38((char *)v37, 1, v41) != 1)
    {
      int64_t v148 = &demangling cache variable for type metadata for (AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?, AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
      goto LABEL_131;
    }
LABEL_122:
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v16, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    type metadata accessor for UnknownStorage();
    _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_2(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    int v143 = dispatch thunk of static Equatable.== infix(_:_:)();
    outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v26, type metadata accessor for AspireHeSerializedCiphertext);
    outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v29, type metadata accessor for AspireHeSerializedCiphertext);
    if (v143)
    {
      uint64_t v31 = v169 + 1;
      uint64_t v35 = v175;
      if (v169 + 1 != v158) {
        continue;
      }
    }
    return v143 & 1;
  }
  uint64_t v42 = v171;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v16, v171, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  if (v38((char *)v37, 1, v41) == 1)
  {
    int64_t v148 = &demangling cache variable for type metadata for (AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?, AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    goto LABEL_130;
  }
  uint64_t v43 = v26;
  uint64_t v44 = v42;
  double v45 = v170;
  _s8CipherML32AspireSimilarityPlaintextPackingVWObTm_0(v37, v170, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
  uint64_t v46 = (uint64_t)v160;
  uint64_t v47 = (uint64_t)&v160[*(int *)(v164 + 48)];
  outlined init with copy of AspireSimilarityPlaintextPackingDenseRow(v44, (uint64_t)v160, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
  outlined init with copy of AspireSimilarityPlaintextPackingDenseRow(v45, v47, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    size_t v48 = v165;
    outlined init with copy of AspireSimilarityPlaintextPackingDenseRow(v46, (uint64_t)v165, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      int v49 = v47;
      uint64_t v50 = v174;
      _s8CipherML32AspireSimilarityPlaintextPackingVWObTm_0(v49, (uint64_t)v174, type metadata accessor for AspireHeSerializedFullCiphertext);
      uint64_t v52 = *v48;
      uint64_t v51 = v48[1];
      uint64_t v53 = *v50;
      size_t v54 = v50[1];
      uint64_t v55 = 0;
      unint64_t v56 = (uint64_t)v48;
      uint64_t v29 = v155;
      unint64_t v16 = v156;
      uint64_t v34 = v154;
      switch(v51 >> 62)
      {
        case 1uLL:
          LODWORD(v55) = HIDWORD(v52) - v52;
          if (__OFSUB__(HIDWORD(v52), v52))
          {
            __break(1u);
LABEL_139:
            __break(1u);
LABEL_140:
            __break(1u);
LABEL_141:
            __break(1u);
LABEL_142:
            __break(1u);
LABEL_143:
            __break(1u);
LABEL_144:
            __break(1u);
LABEL_145:
            __break(1u);
LABEL_146:
            __break(1u);
LABEL_147:
            __break(1u);
LABEL_148:
            __break(1u);
LABEL_149:
            __break(1u);
LABEL_150:
            __break(1u);
LABEL_151:
            __break(1u);
LABEL_152:
            __break(1u);
LABEL_153:
            __break(1u);
LABEL_154:
            __break(1u);
LABEL_155:
            __break(1u);
LABEL_156:
            __break(1u);
LABEL_157:
            __break(1u);
LABEL_158:
            __break(1u);
LABEL_159:
            __break(1u);
LABEL_160:
            __break(1u);
LABEL_161:
            __break(1u);
          }
          uint64_t v55 = (int)v55;
LABEL_19:
          uint64_t v26 = v43;
          switch(v54 >> 62)
          {
            case 1uLL:
              LODWORD(v67) = HIDWORD(v53) - v53;
              if (__OFSUB__(HIDWORD(v53), v53)) {
                goto LABEL_142;
              }
              uint64_t v67 = (int)v67;
LABEL_29:
              if (v55 != v67) {
                goto LABEL_126;
              }
              if (v55 < 1) {
                goto LABEL_72;
              }
              break;
            case 2uLL:
              uint64_t v72 = *(void *)(v53 + 16);
              int64_t v71 = *(void *)(v53 + 24);
              size_t v66 = __OFSUB__(v71, v72);
              uint64_t v67 = v71 - v72;
              if (!v66) {
                goto LABEL_29;
              }
              goto LABEL_143;
            case 3uLL:
              if (v55) {
                goto LABEL_126;
              }
              goto LABEL_72;
            default:
              uint64_t v67 = BYTE6(v54);
              goto LABEL_29;
          }
          break;
        case 2uLL:
          uint64_t v65 = *(void *)(v52 + 16);
          uint64_t v64 = *(void *)(v52 + 24);
          size_t v66 = __OFSUB__(v64, v65);
          uint64_t v55 = v64 - v65;
          if (!v66) {
            goto LABEL_19;
          }
          goto LABEL_139;
        case 3uLL:
          goto LABEL_19;
        default:
          uint64_t v55 = BYTE6(v51);
          goto LABEL_19;
      }
      switch(v51 >> 62)
      {
        case 1uLL:
          uint64_t v151 = *v50;
          uint64_t v152 = v54;
          int64_t v150 = (v52 >> 32) - (int)v52;
          if (v52 >> 32 < (int)v52) {
            goto LABEL_150;
          }
          outlined copy of Data._Representation(v52, v51);
          uint64_t v75 = __DataStorage._bytes.getter();
          if (v75)
          {
            unint64_t v76 = v75;
            uint64_t v77 = __DataStorage._offset.getter();
            if (__OFSUB__((int)v52, v77)) {
              goto LABEL_156;
            }
            int64_t v78 = v76 + (int)v52 - v77;
          }
          else
          {
            int64_t v78 = 0;
          }
          __DataStorage._length.getter();
          uint64_t v102 = v78;
          uint64_t v103 = v157;
          closure #1 in static Data.== infix(_:_:)(v102, v151, v152, (char *)__s1);
          uint64_t v157 = v103;
          outlined consume of Data._Representation(v52, v51);
          goto LABEL_71;
        case 2uLL:
          uint64_t v151 = *v50;
          uint64_t v152 = v54;
          uint64_t v79 = *(void *)(v52 + 16);
          size_t v80 = *(void *)(v52 + 24);
          swift_retain();
          swift_retain();
          char v81 = __DataStorage._bytes.getter();
          if (v81)
          {
            unint64_t v82 = v81;
            BOOL v83 = __DataStorage._offset.getter();
            if (__OFSUB__(v79, v83)) {
              goto LABEL_157;
            }
            uint64_t v84 = v79;
            uint64_t v85 = v82 + v79 - v83;
          }
          else
          {
            uint64_t v84 = v79;
            uint64_t v85 = 0;
          }
          if (__OFSUB__(v80, v84)) {
            goto LABEL_152;
          }
          __DataStorage._length.getter();
          os_log_type_t v100 = v157;
          closure #1 in static Data.== infix(_:_:)(v85, v151, v152, (char *)__s1);
          uint64_t v157 = v100;
          swift_release();
          swift_release();
LABEL_71:
          unint64_t v56 = (uint64_t)v165;
          if ((__s1[0] & 1) == 0) {
            goto LABEL_126;
          }
LABEL_72:
          Swift::String v104 = *(void *)(v56 + 16);
          int v105 = v174[2];
          size_t v106 = *(void *)(v104 + 16);
          if (v106 != *(void *)(v105 + 16)) {
            goto LABEL_126;
          }
          if (!v106 || v104 == v105) {
            goto LABEL_80;
          }
          if (*(_DWORD *)(v104 + 32) != *(_DWORD *)(v105 + 32)) {
            goto LABEL_126;
          }
          int v107 = (int *)(v104 + 36);
          uint64_t v108 = (int *)(v105 + 36);
          uint64_t v109 = v106 - 1;
          while (v109)
          {
            os_log_type_t v111 = *v107++;
            uint64_t v110 = v111;
            uint64_t v112 = *v108++;
            --v109;
            if (v110 != v112) {
              goto LABEL_126;
            }
          }
LABEL_80:
          if (*(void *)(v56 + 24) != v174[3]
            || (type metadata accessor for UnknownStorage(),
                _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_2(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]), uint64_t v113 = dispatch thunk of static Equatable.== infix(_:_:)(), v56 = (uint64_t)v165, (v113 & 1) == 0))
          {
LABEL_126:
            uint64_t v144 = type metadata accessor for AspireHeSerializedFullCiphertext;
            uint64_t v145 = type metadata accessor for AspireHeSerializedFullCiphertext;
            uint64_t v146 = (uint64_t)v174;
            size_t v48 = (uint64_t *)v56;
            goto LABEL_128;
          }
          uint64_t v114 = type metadata accessor for AspireHeSerializedFullCiphertext;
          uint64_t v115 = type metadata accessor for AspireHeSerializedFullCiphertext;
          uint64_t v116 = (uint64_t)v174;
          size_t v48 = v165;
          break;
        case 3uLL:
          memset(__s1, 0, 14);
          goto LABEL_52;
        default:
          __s1[0] = *v48;
          LOWORD(__s1[1]) = v51;
          BYTE2(__s1[1]) = BYTE2(v51);
          BYTE3(__s1[1]) = BYTE3(v51);
          BYTE4(__s1[1]) = BYTE4(v51);
          BYTE5(__s1[1]) = BYTE5(v51);
LABEL_52:
          uint64_t v86 = v157;
          closure #1 in static Data.== infix(_:_:)((uint64_t)__s1, v53, v54, &v176);
          unint64_t v56 = (uint64_t)v165;
          uint64_t v157 = v86;
          if ((v176 & 1) == 0) {
            goto LABEL_126;
          }
          goto LABEL_72;
      }
      goto LABEL_121;
    }
    uint64_t v149 = type metadata accessor for AspireHeSerializedFullCiphertext;
LABEL_137:
    outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v48, v149);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v46, &demangling cache variable for type metadata for (AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType, AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType));
    uint64_t v42 = v171;
    uint64_t v26 = v43;
    uint64_t v29 = v155;
    unint64_t v16 = v156;
    goto LABEL_129;
  }
  size_t v48 = v166;
  outlined init with copy of AspireSimilarityPlaintextPackingDenseRow(v46, (uint64_t)v166, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v149 = type metadata accessor for AspireHeSerializedSeededCiphertext;
    goto LABEL_137;
  }
  uint64_t v57 = v47;
  uint64_t v58 = (uint64_t *)v168;
  _s8CipherML32AspireSimilarityPlaintextPackingVWObTm_0(v57, v168, type metadata accessor for AspireHeSerializedSeededCiphertext);
  uint64_t v60 = *v48;
  uint64_t v59 = v48[1];
  int64_t v61 = *v58;
  uint64_t v62 = v58[1];
  uint64_t v63 = 0;
  uint64_t v29 = v155;
  unint64_t v16 = v156;
  uint64_t v34 = v154;
  switch(v59 >> 62)
  {
    case 1uLL:
      LODWORD(v63) = HIDWORD(v60) - v60;
      if (__OFSUB__(HIDWORD(v60), v60)) {
        goto LABEL_140;
      }
      uint64_t v63 = (int)v63;
LABEL_24:
      uint64_t v26 = v43;
      switch(v62 >> 62)
      {
        case 1uLL:
          LODWORD(v70) = HIDWORD(v61) - v61;
          if (__OFSUB__(HIDWORD(v61), v61)) {
            goto LABEL_144;
          }
          uint64_t v70 = (int)v70;
LABEL_38:
          if (v63 != v70) {
            goto LABEL_127;
          }
          if (v63 < 1) {
            goto LABEL_87;
          }
          break;
        case 2uLL:
          uint64_t v74 = *(void *)(v61 + 16);
          size_t v73 = *(void *)(v61 + 24);
          size_t v66 = __OFSUB__(v73, v74);
          uint64_t v70 = v73 - v74;
          if (!v66) {
            goto LABEL_38;
          }
          goto LABEL_145;
        case 3uLL:
          if (v63) {
            goto LABEL_127;
          }
          goto LABEL_87;
        default:
          uint64_t v70 = BYTE6(v62);
          goto LABEL_38;
      }
      break;
    case 2uLL:
      unint64_t v69 = *(void *)(v60 + 16);
      uint64_t v68 = *(void *)(v60 + 24);
      size_t v66 = __OFSUB__(v68, v69);
      uint64_t v63 = v68 - v69;
      if (!v66) {
        goto LABEL_24;
      }
      goto LABEL_141;
    case 3uLL:
      goto LABEL_24;
    default:
      uint64_t v63 = BYTE6(v59);
      goto LABEL_24;
  }
  switch(v59 >> 62)
  {
    case 1uLL:
      uint64_t v151 = *v58;
      uint64_t v152 = v62;
      int64_t v150 = (v60 >> 32) - (int)v60;
      if (v60 >> 32 < (int)v60) {
        goto LABEL_151;
      }
      outlined copy of Data._Representation(v60, v59);
      uint64_t v87 = __DataStorage._bytes.getter();
      if (v87)
      {
        uint64_t v88 = v87;
        uint64_t v89 = __DataStorage._offset.getter();
        if (__OFSUB__((int)v60, v89)) {
          goto LABEL_158;
        }
        uint64_t v90 = v88 + (int)v60 - v89;
      }
      else
      {
        uint64_t v90 = 0;
      }
      __DataStorage._length.getter();
      int64_t v117 = v90;
      uint64_t v118 = v157;
      closure #1 in static Data.== infix(_:_:)(v117, v151, v152, (char *)__s1);
      uint64_t v157 = v118;
      outlined consume of Data._Representation(v60, v59);
      goto LABEL_85;
    case 2uLL:
      uint64_t v151 = *v58;
      uint64_t v152 = v62;
      uint64_t v91 = *(void *)(v60 + 16);
      uint64_t v92 = *(void *)(v60 + 24);
      swift_retain();
      swift_retain();
      __int16 v93 = __DataStorage._bytes.getter();
      if (v93)
      {
        char v94 = v93;
        char v95 = __DataStorage._offset.getter();
        if (__OFSUB__(v91, v95)) {
          goto LABEL_159;
        }
        char v96 = v91;
        char v97 = v94 + v91 - v95;
      }
      else
      {
        char v96 = v91;
        char v97 = 0;
      }
      if (__OFSUB__(v92, v96)) {
        goto LABEL_153;
      }
      __DataStorage._length.getter();
      uint64_t v101 = v157;
      closure #1 in static Data.== infix(_:_:)(v97, v151, v152, (char *)__s1);
      uint64_t v157 = v101;
      swift_release();
      swift_release();
LABEL_85:
      uint64_t v99 = __s1[0];
LABEL_86:
      size_t v48 = v166;
      if ((v99 & 1) == 0) {
        goto LABEL_127;
      }
LABEL_87:
      uint64_t v120 = v48[2];
      uint64_t v119 = v48[3];
      uint64_t v121 = *(void *)(v168 + 16);
      char v122 = *(void *)(v168 + 24);
      uint64_t v123 = 0;
      switch(v119 >> 62)
      {
        case 1uLL:
          LODWORD(v123) = HIDWORD(v120) - v120;
          if (__OFSUB__(HIDWORD(v120), v120)) {
            goto LABEL_146;
          }
          uint64_t v123 = (int)v123;
LABEL_92:
          switch(v122 >> 62)
          {
            case 1uLL:
              LODWORD(v126) = HIDWORD(v121) - v121;
              if (__OFSUB__(HIDWORD(v121), v121)) {
                goto LABEL_148;
              }
              double v126 = (int)v126;
LABEL_97:
              if (v123 != v126) {
                goto LABEL_127;
              }
              if (v123 < 1) {
                goto LABEL_119;
              }
              break;
            case 2uLL:
              uint64_t v128 = *(void *)(v121 + 16);
              double v127 = *(void *)(v121 + 24);
              size_t v66 = __OFSUB__(v127, v128);
              double v126 = v127 - v128;
              if (!v66) {
                goto LABEL_97;
              }
              goto LABEL_149;
            case 3uLL:
              if (v123) {
                goto LABEL_127;
              }
              goto LABEL_119;
            default:
              double v126 = BYTE6(v122);
              goto LABEL_97;
          }
          break;
        case 2uLL:
          uint64_t v125 = *(void *)(v120 + 16);
          uint64_t v124 = *(void *)(v120 + 24);
          size_t v66 = __OFSUB__(v124, v125);
          uint64_t v123 = v124 - v125;
          if (!v66) {
            goto LABEL_92;
          }
          goto LABEL_147;
        case 3uLL:
          goto LABEL_92;
        default:
          uint64_t v123 = BYTE6(v119);
          goto LABEL_92;
      }
      break;
    case 3uLL:
      memset(__s1, 0, 14);
      goto LABEL_62;
    default:
      __s1[0] = *v48;
      LOWORD(__s1[1]) = v59;
      BYTE2(__s1[1]) = BYTE2(v59);
      BYTE3(__s1[1]) = BYTE3(v59);
      BYTE4(__s1[1]) = BYTE4(v59);
      BYTE5(__s1[1]) = BYTE5(v59);
LABEL_62:
      uint64_t v98 = v157;
      closure #1 in static Data.== infix(_:_:)((uint64_t)__s1, v61, v62, &v176);
      uint64_t v157 = v98;
      uint64_t v99 = v176;
      goto LABEL_86;
  }
  switch(v119 >> 62)
  {
    case 1uLL:
      uint64_t v152 = *(void *)(v168 + 16);
      uint64_t v151 = (v120 >> 32) - (int)v120;
      if (v120 >> 32 < (int)v120) {
        goto LABEL_154;
      }
      outlined copy of Data._Representation(v120, v119);
      uint64_t v129 = __DataStorage._bytes.getter();
      if (v129)
      {
        int64_t v150 = v129;
        unint64_t v130 = __DataStorage._offset.getter();
        if (__OFSUB__((int)v120, v130)) {
          goto LABEL_160;
        }
        uint64_t v131 = v150 + (int)v120 - v130;
      }
      else
      {
        uint64_t v131 = 0;
      }
      __DataStorage._length.getter();
      uint64_t v141 = v131;
      int v142 = v157;
      closure #1 in static Data.== infix(_:_:)(v141, v152, v122, (char *)__s1);
      uint64_t v157 = v142;
      outlined consume of Data._Representation(v120, v119);
      goto LABEL_117;
    case 2uLL:
      uint64_t v152 = *(void *)(v168 + 16);
      int v132 = *(void *)(v120 + 16);
      uint64_t v151 = *(void *)(v120 + 24);
      swift_retain();
      swift_retain();
      uint64_t v133 = __DataStorage._bytes.getter();
      if (v133)
      {
        uint64_t v134 = v133;
        double v135 = __DataStorage._offset.getter();
        if (__OFSUB__(v132, v135)) {
          goto LABEL_161;
        }
        double v136 = v132;
        uint64_t v137 = v134 + v132 - v135;
      }
      else
      {
        double v136 = v132;
        uint64_t v137 = 0;
      }
      if (__OFSUB__(v151, v136)) {
        goto LABEL_155;
      }
      __DataStorage._length.getter();
      uint64_t v140 = v157;
      closure #1 in static Data.== infix(_:_:)(v137, v152, v122, (char *)__s1);
      uint64_t v157 = v140;
      swift_release();
      swift_release();
LABEL_117:
      uint64_t v139 = __s1[0];
LABEL_118:
      size_t v48 = v166;
      if ((v139 & 1) == 0) {
        goto LABEL_127;
      }
LABEL_119:
      type metadata accessor for UnknownStorage();
      _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_2(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
      size_t v48 = v166;
      if (dispatch thunk of static Equatable.== infix(_:_:)())
      {
        uint64_t v114 = type metadata accessor for AspireHeSerializedSeededCiphertext;
        uint64_t v115 = type metadata accessor for AspireHeSerializedSeededCiphertext;
        uint64_t v116 = v168;
LABEL_121:
        outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v116, v114);
        outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v48, v115);
        outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v160, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
        outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v170, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
        outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v22, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
        outlined destroy of AMDPbHEConfig.OneOf_Config?(v175, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
        outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v171, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
        goto LABEL_122;
      }
LABEL_127:
      uint64_t v144 = type metadata accessor for AspireHeSerializedSeededCiphertext;
      uint64_t v145 = type metadata accessor for AspireHeSerializedSeededCiphertext;
      uint64_t v146 = v168;
LABEL_128:
      outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v146, v144);
      outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v48, v145);
      outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v160, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
      uint64_t v42 = v171;
LABEL_129:
      uint64_t v40 = v175;
      outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v170, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
      int64_t v148 = &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?;
LABEL_130:
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v22, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v40, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
      outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v42, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
LABEL_131:
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v16, v148);
      outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v26, type metadata accessor for AspireHeSerializedCiphertext);
      outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v29, type metadata accessor for AspireHeSerializedCiphertext);
LABEL_132:
      int v143 = 0;
      return v143 & 1;
    case 3uLL:
      memset(__s1, 0, 14);
      goto LABEL_111;
    default:
      __s1[0] = v48[2];
      LOWORD(__s1[1]) = v119;
      BYTE2(__s1[1]) = BYTE2(v119);
      BYTE3(__s1[1]) = BYTE3(v119);
      BYTE4(__s1[1]) = BYTE4(v119);
      BYTE5(__s1[1]) = BYTE5(v119);
LABEL_111:
      unint64_t v138 = v157;
      closure #1 in static Data.== infix(_:_:)((uint64_t)__s1, v121, v122, &v176);
      uint64_t v157 = v138;
      uint64_t v139 = v176;
      goto LABEL_118;
  }
}

{
  return specialized static Array<A>.== infix(_:_:)(a1, a2, type metadata accessor for AMDPbEvaluationKey, type metadata accessor for AMDPbEvaluationKey, (uint64_t (*)(char *, char *))static AMDPbEvaluationKey.== infix(_:_:), type metadata accessor for AMDPbEvaluationKey);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  BOOL v33;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int (**v43)(char *, uint64_t, uint64_t);
  uint64_t v44;

  uint64_t v4 = type metadata accessor for AspireApiResponse.OneOf_Response(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireApiResponse.OneOf_Response?, AspireApiResponse.OneOf_Response?));
  MEMORY[0x270FA5388](v11);
  unint64_t v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for AspireApiResponse(0);
  MEMORY[0x270FA5388](v14);
  unint64_t v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  unint64_t v21 = (char *)&v35 - v20;
  uint64_t v22 = *(void *)(a1 + 16);
  if (v22 != *(void *)(a2 + 16)) {
    goto LABEL_20;
  }
  uint64_t v37 = v10;
  size_t v38 = v4;
  if (!v22 || a1 == a2)
  {
    uint64_t v31 = 1;
    return v31 & 1;
  }
  uint64_t v44 = v11;
  uint64_t v35 = v7;
  uint64_t v36 = (char *)&v35 - v20;
  uint64_t v23 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  int v39 = *(void *)(v19 + 72);
  uint64_t v40 = a1;
  uint64_t v42 = v18;
  uint64_t v43 = (unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
  uint64_t v24 = v22 - 1;
  double v41 = a2;
  uint64_t v25 = v38;
  while (1)
  {
    outlined init with copy of AspireSimilarityPlaintextPackingDenseRow(a1 + v23, (uint64_t)v21, type metadata accessor for AspireApiResponse);
    outlined init with copy of AspireSimilarityPlaintextPackingDenseRow(a2 + v23, (uint64_t)v16, type metadata accessor for AspireApiResponse);
    uint64_t v26 = (uint64_t)&v13[*(int *)(v44 + 48)];
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21, (uint64_t)v13, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v16, v26, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
    uint64_t v27 = *v43;
    if ((*v43)(v13, 1, v25) != 1) {
      break;
    }
    if (v27((char *)v26, 1, v25) != 1) {
      goto LABEL_18;
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v13, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
LABEL_10:
    type metadata accessor for UnknownStorage();
    _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_2(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    uint64_t v31 = dispatch thunk of static Equatable.== infix(_:_:)();
    outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v16, type metadata accessor for AspireApiResponse);
    outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v21, type metadata accessor for AspireApiResponse);
    uint64_t v33 = v24-- != 0;
    if (v31)
    {
      a1 = v40;
      v23 += v39;
      a2 = v41;
      if (v33) {
        continue;
      }
    }
    return v31 & 1;
  }
  uint64_t v28 = (uint64_t)v37;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v13, (uint64_t)v37, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  if (v27((char *)v26, 1, v25) != 1)
  {
    uint64_t v29 = (uint64_t)v35;
    _s8CipherML32AspireSimilarityPlaintextPackingVWObTm_0(v26, (uint64_t)v35, type metadata accessor for AspireApiResponse.OneOf_Response);
    uint64_t v30 = static AspireApiResponse.OneOf_Response.== infix(_:_:)(v28, v29);
    outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v29, type metadata accessor for AspireApiResponse.OneOf_Response);
    uint64_t v25 = v38;
    outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v28, type metadata accessor for AspireApiResponse.OneOf_Response);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v13, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
    unint64_t v21 = v36;
    if ((v30 & 1) == 0) {
      goto LABEL_19;
    }
    goto LABEL_10;
  }
  outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v28, type metadata accessor for AspireApiResponse.OneOf_Response);
  unint64_t v21 = v36;
LABEL_18:
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v13, &demangling cache variable for type metadata for (AspireApiResponse.OneOf_Response?, AspireApiResponse.OneOf_Response?));
LABEL_19:
  outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v16, type metadata accessor for AspireApiResponse);
  outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v21, type metadata accessor for AspireApiResponse);
LABEL_20:
  uint64_t v31 = 0;
  return v31 & 1;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t (*v58)(uint64_t, uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  int EnumCaseMultiPayload;
  uint64_t v70;
  uint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  BOOL v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  const void *v119;
  uint64_t v120;
  char v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  const void *v130;
  uint64_t v131;
  char v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  uint64_t v151;
  char v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  size_t v159;
  int v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  void *v198;
  uint64_t v199;
  BOOL v200;
  uint64_t v201;
  BOOL v202;
  uint64_t v203;
  const void *v204;
  uint64_t v205;
  char v206;
  char v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  char v212;
  void *v213;
  uint64_t v214;
  BOOL v215;
  int v216;
  uint64_t v217;
  const void *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  char v223;
  uint64_t v224;
  int *v225;
  int *v226;
  uint64_t v227;
  int v228;
  int v229;
  int v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t v236;
  uint64_t v237;
  uint64_t v238;
  unint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  unint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  void *v255;
  uint64_t v256;
  uint64_t v257;
  char v258;
  uint64_t v259;
  unint64_t v260;
  uint64_t v261;
  uint64_t v262;
  unint64_t v263;
  uint64_t v264;
  const void *v265;
  uint64_t v266;
  unint64_t v267;
  uint64_t v268;
  BOOL v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  char v275;
  uint64_t v276;
  uint64_t v277;
  char v278;
  uint64_t v279;
  BOOL v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  char v285;
  void *v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  const void *v291;
  uint64_t v292;
  char v293;
  uint64_t v294;
  char v295;
  uint64_t (*v296)(uint64_t);
  uint64_t (*v297)(uint64_t);
  uint64_t v298;
  uint64_t v299;
  uint64_t *v301;
  unint64_t v302;
  unint64_t v303;
  unint64_t v304;
  unint64_t v305;
  uint64_t v306;
  uint64_t v307;
  unint64_t v308;
  const void *v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  char *v317;
  char *v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  char *v324;
  uint64_t v325;
  char *v326;
  uint64_t (**v327)(uint64_t, uint64_t, uint64_t);
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t *v332;
  uint64_t *v333;
  char *v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t *v340;
  unint64_t v341;
  uint64_t v342;
  uint64_t v343;
  char *v344;
  uint64_t __s2;
  __int16 v346;
  char v347;
  char v348;
  char v349;
  char v350;
  void __s1[4];

  void __s1[3] = *MEMORY[0x263EF8340];
  uint64_t v4 = type metadata accessor for AspireHeSerializedFullCiphertext(0);
  MEMORY[0x270FA5388](v4);
  v340 = (uint64_t *)((char *)&v302 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v325 = type metadata accessor for AspireHeSerializedSeededCiphertext(0);
  MEMORY[0x270FA5388](v325);
  uint64_t v336 = (uint64_t)&v302 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v331 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType, AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType));
  MEMORY[0x270FA5388](v331);
  uint64_t v8 = (char *)&v302 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v339 = type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(0);
  uint64_t v9 = *(void *)(v339 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v339);
  uint64_t v332 = (uint64_t *)((char *)&v302 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v333 = (uint64_t *)((char *)&v302 - v13);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v302 - v14;
  uint64_t v338 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?, AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?));
  MEMORY[0x270FA5388](v338);
  uint64_t v17 = (char *)&v302 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  uint64_t v19 = MEMORY[0x270FA5388](v18 - 8);
  unint64_t v21 = (char *)&v302 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = MEMORY[0x270FA5388](v19);
  uint64_t v343 = (uint64_t)&v302 - v23;
  MEMORY[0x270FA5388](v22);
  uint64_t v25 = (char *)&v302 - v24;
  uint64_t v335 = type metadata accessor for AspireHeSerializedCiphertext(0);
  uint64_t v323 = *(void *)(v335 - 8);
  uint64_t v26 = MEMORY[0x270FA5388](v335);
  v344 = (char *)&v302 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v26);
  v342 = (uint64_t)&v302 - v28;
  uint64_t v29 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
  uint64_t v30 = MEMORY[0x270FA5388](v29);
  uint64_t v32 = (char *)&v302 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = MEMORY[0x270FA5388](v30);
  uint64_t v337 = (uint64_t)&v302 - v35;
  uint64_t v36 = *(void *)(a1 + 16);
  if (v36 != *(void *)(a2 + 16)) {
    goto LABEL_303;
  }
  if (!v36 || a1 == a2)
  {
    v295 = 1;
    return v295 & 1;
  }
  uint64_t v326 = v8;
  uint64_t v37 = v17;
  uint64_t v316 = v33;
  uint64_t v311 = v4;
  size_t v38 = 0;
  uint64_t v319 = 0;
  int v39 = (*(unsigned __int8 *)(v34 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80);
  uint64_t v40 = a1 + v39;
  double v41 = a2 + v39;
  uint64_t v42 = *(void *)(v34 + 72);
  uint64_t v327 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  v324 = v15;
  uint64_t v317 = v21;
  uint64_t v43 = (uint64_t)v344;
  uint64_t v313 = a2 + v39;
  uint64_t v334 = v25;
  uint64_t v318 = v32;
  uint64_t v315 = v36;
  v314 = a1 + v39;
  uint64_t v312 = v42;
  while (1)
  {
    v320 = v38;
    uint64_t v44 = v42 * v38;
    double v45 = v337;
    outlined init with copy of AspireSimilarityPlaintextPackingDenseRow(v40 + v42 * v38, v337, type metadata accessor for AspireHeSerializedCiphertextVec);
    outlined init with copy of AspireSimilarityPlaintextPackingDenseRow(v41 + v44, (uint64_t)v32, type metadata accessor for AspireHeSerializedCiphertextVec);
    uint64_t v46 = *(void *)v45;
    uint64_t v47 = *(void *)v32;
    size_t v48 = *(void *)(*(void *)v45 + 16);
    int v49 = v342;
    if (v48 != *(void *)(*(void *)v32 + 16)) {
      goto LABEL_302;
    }
    uint64_t v50 = (uint64_t)v37;
    if (v48)
    {
      uint64_t v51 = v343;
      if (v46 != v47) {
        break;
      }
    }
LABEL_292:
    v294 = v337;
    uint64_t v32 = v318;
    type metadata accessor for UnknownStorage();
    _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_2(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    v295 = dispatch thunk of static Equatable.== infix(_:_:)();
    outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v32, type metadata accessor for AspireHeSerializedCiphertextVec);
    outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v294, type metadata accessor for AspireHeSerializedCiphertextVec);
    if (v295)
    {
      uint64_t v37 = (char *)v50;
      size_t v38 = v320 + 1;
      uint64_t v40 = v314;
      double v41 = v313;
      uint64_t v42 = v312;
      if (v320 + 1 != v315) {
        continue;
      }
    }
    return v295 & 1;
  }
  uint64_t v52 = 0;
  uint64_t v53 = (*(unsigned __int8 *)(v323 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v323 + 80);
  uint64_t v330 = v46 + v53;
  uint64_t v328 = v47 + v53;
  v329 = *(void *)(v323 + 72);
  v322 = v47;
  uint64_t v321 = v48;
  while (1)
  {
    size_t v54 = v329 * v52;
    outlined init with copy of AspireSimilarityPlaintextPackingDenseRow(v330 + v329 * v52, v49, type metadata accessor for AspireHeSerializedCiphertext);
    if (v52 >= *(void *)(v47 + 16))
    {
      __break(1u);
LABEL_310:
      __break(1u);
LABEL_311:
      __break(1u);
LABEL_312:
      __break(1u);
LABEL_313:
      __break(1u);
LABEL_314:
      __break(1u);
LABEL_315:
      __break(1u);
LABEL_316:
      __break(1u);
LABEL_317:
      __break(1u);
LABEL_318:
      __break(1u);
LABEL_319:
      __break(1u);
LABEL_320:
      __break(1u);
LABEL_321:
      __break(1u);
LABEL_322:
      __break(1u);
LABEL_323:
      __break(1u);
LABEL_324:
      __break(1u);
LABEL_325:
      __break(1u);
LABEL_326:
      __break(1u);
LABEL_327:
      __break(1u);
LABEL_328:
      __break(1u);
LABEL_329:
      __break(1u);
LABEL_330:
      __break(1u);
LABEL_331:
      __break(1u);
LABEL_332:
      __break(1u);
LABEL_333:
      __break(1u);
LABEL_334:
      __break(1u);
LABEL_335:
      __break(1u);
LABEL_336:
      __break(1u);
LABEL_337:
      __break(1u);
LABEL_338:
      __break(1u);
LABEL_339:
      __break(1u);
LABEL_340:
      __break(1u);
LABEL_341:
      __break(1u);
LABEL_342:
      __break(1u);
LABEL_343:
      __break(1u);
LABEL_344:
      __break(1u);
LABEL_345:
      __break(1u);
LABEL_346:
      __break(1u);
LABEL_347:
      __break(1u);
LABEL_348:
      __break(1u);
LABEL_349:
      __break(1u);
LABEL_350:
      __break(1u);
LABEL_351:
      __break(1u);
LABEL_352:
      __break(1u);
LABEL_353:
      __break(1u);
LABEL_354:
      __break(1u);
LABEL_355:
      __break(1u);
    }
    uint64_t v341 = v52;
    outlined init with copy of AspireSimilarityPlaintextPackingDenseRow(v328 + v54, v43, type metadata accessor for AspireHeSerializedCiphertext);
    uint64_t v55 = v49;
    unint64_t v56 = (uint64_t)v334;
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v55, (uint64_t)v334, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v43, v51, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    uint64_t v57 = v50 + *(int *)(v338 + 48);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v56, v50, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v51, v57, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    uint64_t v58 = *v327;
    uint64_t v59 = v50;
    uint64_t v60 = v50;
    int64_t v61 = v339;
    if ((*v327)(v59, 1, v339) != 1) {
      break;
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v51, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v56, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    uint64_t v62 = v58(v57, 1, v61);
    uint64_t v50 = v60;
    uint64_t v63 = v341;
    int v49 = v342;
    uint64_t v43 = (uint64_t)v344;
    if (v62 != 1)
    {
      uint64_t v301 = &demangling cache variable for type metadata for (AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?, AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
      goto LABEL_301;
    }
LABEL_290:
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v50, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    type metadata accessor for UnknownStorage();
    _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_2(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    uint64_t v293 = dispatch thunk of static Equatable.== infix(_:_:)();
    outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v43, type metadata accessor for AspireHeSerializedCiphertext);
    outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v49, type metadata accessor for AspireHeSerializedCiphertext);
    uint64_t v47 = v322;
    if ((v293 & 1) == 0) {
      goto LABEL_302;
    }
    uint64_t v52 = v63 + 1;
    uint64_t v51 = v343;
    if (v52 == v321) {
      goto LABEL_292;
    }
  }
  uint64_t v64 = v60;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v60, (uint64_t)v21, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  if (v58(v57, 1, v61) == 1)
  {
    uint64_t v299 = (uint64_t)v334;
    uint64_t v50 = v60;
    uint64_t v301 = &demangling cache variable for type metadata for (AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?, AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    uint64_t v43 = (uint64_t)v344;
    goto LABEL_300;
  }
  uint64_t v65 = (uint64_t)v324;
  _s8CipherML32AspireSimilarityPlaintextPackingVWObTm_0(v57, (uint64_t)v324, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
  size_t v66 = (uint64_t)v326;
  uint64_t v67 = (uint64_t)&v326[*(int *)(v331 + 48)];
  outlined init with copy of AspireSimilarityPlaintextPackingDenseRow((uint64_t)v21, (uint64_t)v326, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
  outlined init with copy of AspireSimilarityPlaintextPackingDenseRow(v65, v67, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v68 = v332;
    outlined init with copy of AspireSimilarityPlaintextPackingDenseRow(v66, (uint64_t)v332, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v63 = v341;
    uint64_t v43 = (uint64_t)v344;
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v70 = v67;
      int64_t v71 = v340;
      _s8CipherML32AspireSimilarityPlaintextPackingVWObTm_0(v70, (uint64_t)v340, type metadata accessor for AspireHeSerializedFullCiphertext);
      size_t v73 = *v68;
      uint64_t v72 = v68[1];
      uint64_t v74 = *v71;
      uint64_t v75 = v71[1];
      unint64_t v76 = 0;
      uint64_t v50 = v64;
      int v49 = v342;
      switch(v72 >> 62)
      {
        case 1uLL:
          LODWORD(v76) = HIDWORD(v73) - v73;
          if (__OFSUB__(HIDWORD(v73), v73)) {
            goto LABEL_312;
          }
          unint64_t v76 = (int)v76;
LABEL_26:
          uint64_t v88 = v75 >> 62;
          switch(v75 >> 62)
          {
            case 1uLL:
              LODWORD(v89) = HIDWORD(v74) - v74;
              if (__OFSUB__(HIDWORD(v74), v74)) {
                goto LABEL_317;
              }
              uint64_t v89 = (int)v89;
LABEL_43:
              if (v76 != v89) {
                goto LABEL_296;
              }
              if (v76 < 1) {
                goto LABEL_217;
              }
              break;
            case 2uLL:
              char v95 = *(void *)(v74 + 16);
              char v94 = *(void *)(v74 + 24);
              uint64_t v87 = __OFSUB__(v94, v95);
              uint64_t v89 = v94 - v95;
              if (!v87) {
                goto LABEL_43;
              }
              goto LABEL_316;
            case 3uLL:
              if (v76) {
                goto LABEL_296;
              }
              goto LABEL_217;
            default:
              uint64_t v89 = BYTE6(v75);
              goto LABEL_43;
          }
          break;
        case 2uLL:
          uint64_t v86 = *(void *)(v73 + 16);
          uint64_t v85 = *(void *)(v73 + 24);
          uint64_t v87 = __OFSUB__(v85, v86);
          unint64_t v76 = v85 - v86;
          if (!v87) {
            goto LABEL_26;
          }
          goto LABEL_311;
        case 3uLL:
          goto LABEL_26;
        default:
          unint64_t v76 = BYTE6(v72);
          goto LABEL_26;
      }
      switch(v72 >> 62)
      {
        case 1uLL:
          uint64_t v310 = *v71;
          if ((int)v73 > v73 >> 32) {
            goto LABEL_323;
          }
          outlined copy of Data._Representation(v73, v72);
          double v127 = __DataStorage._bytes.getter();
          if (!v127) {
            goto LABEL_92;
          }
          uint64_t v128 = __DataStorage._offset.getter();
          if (__OFSUB__((int)v73, v128)) {
            goto LABEL_328;
          }
          v127 += (int)v73 - v128;
LABEL_92:
          uint64_t v63 = v341;
          __DataStorage._length.getter();
          if (v88)
          {
            if (v88 == 1)
            {
              uint64_t v129 = v310;
              if (v129 >> 32 < (int)v129) {
                goto LABEL_341;
              }
              uint64_t v309 = (const void *)(v75 & 0x3FFFFFFFFFFFFFFFLL);
              swift_retain();
              unint64_t v130 = (const void *)v127;
              uint64_t v131 = v319;
              int v132 = specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)v129, v129 >> 32, (uint64_t)v309, v130);
              uint64_t v319 = v131;
              outlined consume of Data._Representation(v129, v75);
              outlined consume of Data._Representation(v73, v72);
              uint64_t v68 = v332;
              uint64_t v63 = v341;
              if ((v132 & 1) == 0) {
                goto LABEL_296;
              }
            }
            else
            {
              uint64_t v217 = *(void *)(v310 + 24);
              uint64_t v341 = *(void *)(v310 + 16);
              swift_retain();
              swift_retain();
              uint64_t v218 = (const void *)v127;
              uint64_t v219 = v319;
              LOBYTE(v217) = specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v341, v217, v75 & 0x3FFFFFFFFFFFFFFFLL, v218);
              uint64_t v319 = v219;
              swift_release();
              swift_release();
              outlined consume of Data._Representation(v73, v72);
              uint64_t v68 = v332;
              if ((v217 & 1) == 0) {
                goto LABEL_296;
              }
            }
          }
          else
          {
            uint64_t v302 = v302 & 0xFF00000000000000 | v75 & 0xFFFFFFFFFFFFFFLL;
            uint64_t v213 = (void *)v127;
            uint64_t v214 = v319;
            uint64_t v215 = specialized Data.InlineData.withUnsafeBytes<A>(_:)(v310, v302, v213);
            uint64_t v319 = v214;
            outlined consume of Data._Representation(v73, v72);
            uint64_t v68 = v332;
            if (!v215) {
              goto LABEL_296;
            }
          }
          goto LABEL_217;
        case 2uLL:
          uint64_t v310 = *v71;
          uint64_t v115 = *(void *)(v73 + 16);
          swift_retain();
          swift_retain();
          uint64_t v116 = __DataStorage._bytes.getter();
          if (!v116) {
            goto LABEL_80;
          }
          int64_t v117 = __DataStorage._offset.getter();
          if (__OFSUB__(v115, v117)) {
            goto LABEL_326;
          }
          v116 += v115 - v117;
LABEL_80:
          __DataStorage._length.getter();
          if (v88)
          {
            if (v88 == 1)
            {
              uint64_t v118 = v310;
              if (v118 >> 32 < (int)v118) {
                goto LABEL_338;
              }
              uint64_t v309 = (const void *)(v75 & 0x3FFFFFFFFFFFFFFFLL);
              swift_retain();
              uint64_t v119 = (const void *)v116;
              uint64_t v120 = v319;
              uint64_t v121 = specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)v118, v118 >> 32, (uint64_t)v309, v119);
              uint64_t v319 = v120;
              outlined consume of Data._Representation(v118, v75);
              swift_release();
              swift_release();
              uint64_t v68 = v332;
              uint64_t v63 = v341;
              if ((v121 & 1) == 0) {
                goto LABEL_296;
              }
            }
            else
            {
              uint64_t v203 = *(void *)(v310 + 16);
              uint64_t v309 = *(const void **)(v310 + 24);
              swift_retain();
              swift_retain();
              uint64_t v204 = (const void *)v116;
              uint64_t v205 = v319;
              uint64_t v206 = specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v203, (uint64_t)v309, v75 & 0x3FFFFFFFFFFFFFFFLL, v204);
              uint64_t v319 = v205;
              if (v205) {
                goto LABEL_359;
              }
              uint64_t v207 = v206;
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              uint64_t v68 = v332;
              if ((v207 & 1) == 0) {
                goto LABEL_296;
              }
            }
          }
          else
          {
            uint64_t v303 = v303 & 0xFF00000000000000 | v75 & 0xFFFFFFFFFFFFFFLL;
            uint64_t v198 = (void *)v116;
            uint64_t v199 = v319;
            uint64_t v200 = specialized Data.InlineData.withUnsafeBytes<A>(_:)(v310, v303, v198);
            uint64_t v319 = v199;
            swift_release();
            swift_release();
            uint64_t v68 = v332;
            if (!v200) {
              goto LABEL_296;
            }
          }
LABEL_217:
          uint64_t v220 = v68[2];
          uint64_t v221 = v340[2];
          uint64_t v222 = *(void *)(v220 + 16);
          if (v222 != *(void *)(v221 + 16)) {
            goto LABEL_296;
          }
          if (v222 && v220 != v221)
          {
            if (*(_DWORD *)(v220 + 32) != *(_DWORD *)(v221 + 32)) {
              goto LABEL_296;
            }
            if (v222 != 1)
            {
              if (*(_DWORD *)(v220 + 36) != *(_DWORD *)(v221 + 36)) {
                goto LABEL_296;
              }
              uint64_t v225 = (int *)(v220 + 40);
              uint64_t v226 = (int *)(v221 + 40);
              uint64_t v227 = v222 - 2;
              while (v227)
              {
                uint64_t v229 = *v225++;
                uint64_t v228 = v229;
                uint64_t v230 = *v226++;
                --v227;
                if (v228 != v230) {
                  goto LABEL_296;
                }
              }
            }
          }
          if (v68[3] != v340[3]
            || (type metadata accessor for UnknownStorage(),
                _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_2(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]), v223 = dispatch thunk of static Equatable.== infix(_:_:)(), uint64_t v68 = v332, (v223 & 1) == 0))
          {
LABEL_296:
            uint64_t v296 = type metadata accessor for AspireHeSerializedFullCiphertext;
            uint64_t v297 = type metadata accessor for AspireHeSerializedFullCiphertext;
            uint64_t v298 = (uint64_t)v340;
            goto LABEL_298;
          }
          outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v340, type metadata accessor for AspireHeSerializedFullCiphertext);
          outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v68, type metadata accessor for AspireHeSerializedFullCiphertext);
          v224 = (uint64_t)v326;
          break;
        case 3uLL:
          memset(__s1, 0, 14);
          if (!v88) {
            goto LABEL_129;
          }
          if (v88 == 1)
          {
            uint64_t v133 = (int)v74;
            uint64_t v134 = (v74 >> 32) - (int)v74;
            if (v74 >> 32 < (int)v74) {
              goto LABEL_333;
            }
            os_log_type_t v100 = v74;
            swift_retain();
            double v135 = __DataStorage._bytes.getter();
            if (v135)
            {
              double v136 = __DataStorage._offset.getter();
              if (__OFSUB__(v133, v136)) {
                goto LABEL_354;
              }
              v135 += v133 - v136;
            }
            uint64_t v137 = __DataStorage._length.getter();
            if (v137 >= v134) {
              unint64_t v138 = v134;
            }
            else {
              unint64_t v138 = v137;
            }
            uint64_t v139 = v135 + v138;
            if (v135) {
              size_t v106 = v139;
            }
            else {
              size_t v106 = 0;
            }
            int v107 = v135;
LABEL_110:
            uint64_t v140 = v319;
            closure #1 in closure #1 in static Data.== infix(_:_:)(v107, __s1, v106, (BOOL *)&__s2);
            uint64_t v319 = v140;
            outlined consume of Data._Representation(v100, v75);
          }
          else
          {
            uint64_t v180 = *(void *)(v74 + 16);
            uint64_t v181 = *(void *)(v74 + 24);
            swift_retain();
            swift_retain();
            int64_t v163 = __DataStorage._bytes.getter();
            if (v163)
            {
              int v182 = __DataStorage._offset.getter();
              if (__OFSUB__(v180, v182)) {
                goto LABEL_348;
              }
              v163 += v180 - v182;
            }
            uint64_t v87 = __OFSUB__(v181, v180);
            uint64_t v183 = v181 - v180;
            if (v87) {
              goto LABEL_336;
            }
            uint64_t v184 = __DataStorage._length.getter();
            if (v184 >= v183) {
              uint64_t v185 = v183;
            }
            else {
              uint64_t v185 = v184;
            }
            uint64_t v186 = v163 + v185;
            if (v163) {
              uint64_t v169 = v186;
            }
            else {
              uint64_t v169 = 0;
            }
LABEL_183:
            int v187 = v163;
            int v188 = v319;
            closure #1 in closure #1 in static Data.== infix(_:_:)(v187, __s1, v169, (BOOL *)&__s2);
            uint64_t v319 = v188;
            swift_release();
            swift_release();
          }
          uint64_t v68 = v332;
          if ((__s2 & 1) == 0) {
            goto LABEL_296;
          }
          goto LABEL_217;
        default:
          __s1[0] = *v68;
          LOWORD(__s1[1]) = v72;
          BYTE2(__s1[1]) = BYTE2(v72);
          BYTE3(__s1[1]) = BYTE3(v72);
          BYTE4(__s1[1]) = BYTE4(v72);
          BYTE5(__s1[1]) = BYTE5(v72);
          if (!v88)
          {
LABEL_129:
            uint64_t __s2 = v74;
            uint64_t v346 = v75;
            uint64_t v347 = BYTE2(v75);
            uint64_t v348 = BYTE3(v75);
            uint64_t v349 = BYTE4(v75);
            uint64_t v350 = BYTE5(v75);
            int64_t v150 = memcmp(__s1, &__s2, BYTE6(v75));
            uint64_t v68 = v332;
            if (v150) {
              goto LABEL_296;
            }
            goto LABEL_217;
          }
          if (v88 == 1)
          {
            uint64_t v98 = (int)v74;
            uint64_t v99 = (v74 >> 32) - (int)v74;
            if (v74 >> 32 < (int)v74) {
              goto LABEL_331;
            }
            os_log_type_t v100 = v74;
            swift_retain();
            uint64_t v101 = __DataStorage._bytes.getter();
            if (v101)
            {
              uint64_t v102 = __DataStorage._offset.getter();
              if (__OFSUB__(v98, v102)) {
                goto LABEL_353;
              }
              v101 += v98 - v102;
            }
            uint64_t v63 = v341;
            uint64_t v103 = __DataStorage._length.getter();
            if (v103 >= v99) {
              Swift::String v104 = v99;
            }
            else {
              Swift::String v104 = v103;
            }
            int v105 = v101 + v104;
            if (v101) {
              size_t v106 = v105;
            }
            else {
              size_t v106 = 0;
            }
            int v107 = v101;
            goto LABEL_110;
          }
          int v161 = *(void *)(v74 + 16);
          uint64_t v162 = *(void *)(v74 + 24);
          swift_retain();
          swift_retain();
          int64_t v163 = __DataStorage._bytes.getter();
          if (v163)
          {
            uint64_t v164 = __DataStorage._offset.getter();
            if (__OFSUB__(v161, v164)) {
              goto LABEL_350;
            }
            v163 += v161 - v164;
          }
          uint64_t v87 = __OFSUB__(v162, v161);
          uint64_t v165 = v162 - v161;
          if (v87) {
            goto LABEL_339;
          }
          uint64_t v166 = __DataStorage._length.getter();
          if (v166 >= v165) {
            uint64_t v167 = v165;
          }
          else {
            uint64_t v167 = v166;
          }
          uint64_t v168 = v163 + v167;
          if (v163) {
            uint64_t v169 = v168;
          }
          else {
            uint64_t v169 = 0;
          }
          goto LABEL_183;
      }
      goto LABEL_289;
    }
    outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v68, type metadata accessor for AspireHeSerializedFullCiphertext);
    uint64_t v50 = v64;
    size_t v66 = (uint64_t)v326;
LABEL_308:
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v66, &demangling cache variable for type metadata for (AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType, AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType));
    goto LABEL_299;
  }
  uint64_t v68 = v333;
  outlined init with copy of AspireSimilarityPlaintextPackingDenseRow(v66, (uint64_t)v333, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
  uint64_t v77 = swift_getEnumCaseMultiPayload();
  uint64_t v43 = (uint64_t)v344;
  if (v77 == 1)
  {
    outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v68, type metadata accessor for AspireHeSerializedSeededCiphertext);
    uint64_t v50 = v64;
    goto LABEL_308;
  }
  int64_t v78 = v67;
  uint64_t v79 = (uint64_t *)v336;
  _s8CipherML32AspireSimilarityPlaintextPackingVWObTm_0(v78, v336, type metadata accessor for AspireHeSerializedSeededCiphertext);
  char v81 = *v68;
  size_t v80 = v68[1];
  BOOL v83 = *v79;
  unint64_t v82 = v79[1];
  uint64_t v84 = 0;
  uint64_t v50 = v64;
  int v49 = v342;
  switch(v80 >> 62)
  {
    case 1uLL:
      LODWORD(v84) = HIDWORD(v81) - v81;
      if (__OFSUB__(HIDWORD(v81), v81)) {
        goto LABEL_310;
      }
      uint64_t v84 = (int)v84;
LABEL_29:
      uint64_t v92 = v82 >> 62;
      switch(v82 >> 62)
      {
        case 1uLL:
          LODWORD(v93) = HIDWORD(v83) - v83;
          if (__OFSUB__(HIDWORD(v83), v83)) {
            goto LABEL_314;
          }
          __int16 v93 = (int)v93;
LABEL_61:
          if (v84 != v93) {
            goto LABEL_297;
          }
          if (v84 < 1) {
            goto LABEL_231;
          }
          break;
        case 2uLL:
          char v97 = *(void *)(v83 + 16);
          char v96 = *(void *)(v83 + 24);
          uint64_t v87 = __OFSUB__(v96, v97);
          __int16 v93 = v96 - v97;
          if (!v87) {
            goto LABEL_61;
          }
          goto LABEL_315;
        case 3uLL:
          if (v84) {
            goto LABEL_297;
          }
          goto LABEL_231;
        default:
          __int16 v93 = BYTE6(v82);
          goto LABEL_61;
      }
      break;
    case 2uLL:
      uint64_t v91 = *(void *)(v81 + 16);
      uint64_t v90 = *(void *)(v81 + 24);
      uint64_t v87 = __OFSUB__(v90, v91);
      uint64_t v84 = v90 - v91;
      if (!v87) {
        goto LABEL_29;
      }
      goto LABEL_313;
    case 3uLL:
      goto LABEL_29;
    default:
      uint64_t v84 = BYTE6(v80);
      goto LABEL_29;
  }
  switch(v80 >> 62)
  {
    case 1uLL:
      uint64_t v310 = *v79;
      if ((int)v81 > v81 >> 32) {
        goto LABEL_322;
      }
      outlined copy of Data._Representation(v81, v80);
      uint64_t v141 = __DataStorage._bytes.getter();
      if (v141)
      {
        int v142 = v141;
        int v143 = __DataStorage._offset.getter();
        if (__OFSUB__((int)v81, v143)) {
          goto LABEL_327;
        }
        uint64_t v309 = (const void *)(v142 + (int)v81 - v143);
      }
      else
      {
        uint64_t v309 = 0;
      }
      uint64_t v68 = v333;
      uint64_t v153 = v310;
      __DataStorage._length.getter();
      if (!v92)
      {
        __s1[0] = v153;
        LOWORD(__s1[1]) = v82;
        BYTE2(__s1[1]) = BYTE2(v82);
        BYTE3(__s1[1]) = BYTE3(v82);
        BYTE4(__s1[1]) = BYTE4(v82);
        BYTE5(__s1[1]) = BYTE5(v82);
        if (!v309) {
          goto LABEL_358;
        }
        uint64_t v216 = memcmp(v309, __s1, BYTE6(v82));
        outlined consume of Data._Representation(v81, v80);
        if (v216) {
          goto LABEL_297;
        }
        goto LABEL_231;
      }
      if (v92 != 1)
      {
        uint64_t v231 = v82 & 0x3FFFFFFFFFFFFFFFLL;
        uint64_t v232 = *(void *)(v153 + 16);
        uint64_t v233 = *(void *)(v153 + 24);
        swift_retain();
        swift_retain();
        uint64_t v234 = v232;
        int v235 = v319;
        LOBYTE(v233) = specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v234, v233, v231, v309);
        uint64_t v319 = v235;
        uint64_t v68 = v333;
        swift_release();
        swift_release();
        outlined consume of Data._Representation(v81, v80);
        if ((v233 & 1) == 0) {
          goto LABEL_297;
        }
LABEL_231:
        uint64_t v237 = v68[2];
        uint64_t v236 = v68[3];
        uint64_t v238 = *(void *)(v336 + 16);
        uint64_t v239 = *(void *)(v336 + 24);
        uint64_t v240 = 0;
        switch(v236 >> 62)
        {
          case 1uLL:
            LODWORD(v240) = HIDWORD(v237) - v237;
            if (__OFSUB__(HIDWORD(v237), v237)) {
              goto LABEL_319;
            }
            uint64_t v240 = (int)v240;
LABEL_236:
            uint64_t v243 = v239 >> 62;
            switch(v239 >> 62)
            {
              case 1uLL:
                LODWORD(v244) = HIDWORD(v238) - v238;
                if (__OFSUB__(HIDWORD(v238), v238)) {
                  goto LABEL_320;
                }
                uint64_t v244 = (int)v244;
LABEL_245:
                if (v240 != v244) {
                  goto LABEL_297;
                }
                if (v240 < 1) {
                  goto LABEL_287;
                }
                break;
              case 2uLL:
                v246 = *(void *)(v238 + 16);
                uint64_t v245 = *(void *)(v238 + 24);
                uint64_t v87 = __OFSUB__(v245, v246);
                uint64_t v244 = v245 - v246;
                if (!v87) {
                  goto LABEL_245;
                }
                goto LABEL_321;
              case 3uLL:
                if (v240) {
                  goto LABEL_297;
                }
                goto LABEL_287;
              default:
                uint64_t v244 = BYTE6(v239);
                goto LABEL_245;
            }
            break;
          case 2uLL:
            int v242 = *(void *)(v237 + 16);
            uint64_t v241 = *(void *)(v237 + 24);
            uint64_t v87 = __OFSUB__(v241, v242);
            uint64_t v240 = v241 - v242;
            if (!v87) {
              goto LABEL_236;
            }
            goto LABEL_318;
          case 3uLL:
            goto LABEL_236;
          default:
            uint64_t v240 = BYTE6(v236);
            goto LABEL_236;
        }
        switch(v236 >> 62)
        {
          case 1uLL:
            uint64_t v310 = *(void *)(v336 + 16);
            if ((int)v237 > v237 >> 32) {
              goto LABEL_324;
            }
            outlined copy of Data._Representation(v237, v236);
            uint64_t v261 = __DataStorage._bytes.getter();
            if (!v261) {
              goto LABEL_263;
            }
            uint64_t v262 = __DataStorage._offset.getter();
            if (__OFSUB__((int)v237, v262)) {
              goto LABEL_330;
            }
            v261 += (int)v237 - v262;
LABEL_263:
            uint64_t v263 = v304;
            __DataStorage._length.getter();
            if (v243)
            {
              if (v243 != 1)
              {
                v288 = v239 & 0x3FFFFFFFFFFFFFFFLL;
                v289 = *(void *)(v310 + 16);
                uint64_t v290 = *(void *)(v310 + 24);
                swift_retain();
                swift_retain();
                uint64_t v291 = (const void *)v261;
                uint64_t v292 = v319;
                uint64_t v275 = specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v289, v290, v288, v291);
                uint64_t v319 = v292;
                swift_release();
                swift_release();
                outlined consume of Data._Representation(v237, v236);
LABEL_286:
                uint64_t v68 = v333;
                if ((v275 & 1) == 0) {
                  goto LABEL_297;
                }
LABEL_287:
                type metadata accessor for UnknownStorage();
                _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_2(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
                uint64_t v68 = v333;
                if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0) {
                  goto LABEL_297;
                }
                outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v336, type metadata accessor for AspireHeSerializedSeededCiphertext);
                outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v68, type metadata accessor for AspireHeSerializedSeededCiphertext);
                v224 = (uint64_t)v326;
                uint64_t v63 = v341;
LABEL_289:
                outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v224, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
                outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v324, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
                outlined destroy of AMDPbHEConfig.OneOf_Config?(v343, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
                outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v334, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
                unint64_t v21 = v317;
                outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v317, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
                uint64_t v43 = (uint64_t)v344;
                goto LABEL_290;
              }
              uint64_t v264 = v310;
              if (v264 >> 32 < (int)v264) {
                goto LABEL_346;
              }
              uint64_t v309 = (const void *)(v239 & 0x3FFFFFFFFFFFFFFFLL);
              outlined copy of Data._Representation(v310, v239);
              uint64_t v265 = (const void *)v261;
              v266 = v319;
              uint64_t v258 = specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)v264, v264 >> 32, (uint64_t)v309, v265);
              uint64_t v319 = v266;
              outlined consume of Data._Representation(v264, v239);
            }
            else
            {
              uint64_t v304 = v263 & 0xFF00000000000000 | v239 & 0xFFFFFFFFFFFFFFLL;
              uint64_t v286 = (void *)v261;
              uint64_t v287 = v319;
              uint64_t v258 = specialized Data.InlineData.withUnsafeBytes<A>(_:)(v310, v304, v286);
              uint64_t v319 = v287;
            }
            v259 = v237;
            uint64_t v260 = v236;
            goto LABEL_283;
          case 2uLL:
            uint64_t v310 = *(void *)(v336 + 16);
            v251 = *(void *)(v237 + 16);
            swift_retain();
            swift_retain();
            uint64_t v252 = __DataStorage._bytes.getter();
            if (v252)
            {
              uint64_t v253 = v252;
              uint64_t v254 = __DataStorage._offset.getter();
              if (__OFSUB__(v251, v254)) {
                goto LABEL_329;
              }
              uint64_t v255 = (void *)(v253 + v251 - v254);
            }
            else
            {
              uint64_t v255 = 0;
            }
            v276 = v310;
            __DataStorage._length.getter();
            if (v243)
            {
              if (v243 == 1)
              {
                if (v276 >> 32 < (int)v276) {
                  goto LABEL_345;
                }
                uint64_t v310 = v239 & 0x3FFFFFFFFFFFFFFFLL;
                outlined copy of Data._Representation(v276, v239);
                uint64_t v277 = v319;
                uint64_t v278 = specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)v276, v276 >> 32, v310, v255);
                uint64_t v319 = v277;
                outlined consume of Data._Representation(v276, v239);
                swift_release();
              }
              else
              {
                uint64_t v281 = *(void *)(v276 + 16);
                v282 = *(void *)(v276 + 24);
                swift_retain();
                swift_retain();
                v283 = v281;
                uint64_t v284 = v319;
                uint64_t v285 = specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v283, v282, v239 & 0x3FFFFFFFFFFFFFFFLL, v255);
                uint64_t v319 = v284;
                if (v284) {
                  goto LABEL_361;
                }
                uint64_t v278 = v285;
                swift_release();
                swift_release();
                swift_release();
              }
              swift_release();
              uint64_t v68 = v333;
              if ((v278 & 1) == 0) {
                goto LABEL_297;
              }
            }
            else
            {
              uint64_t v305 = v305 & 0xFF00000000000000 | v239 & 0xFFFFFFFFFFFFFFLL;
              uint64_t v279 = v319;
              v280 = specialized Data.InlineData.withUnsafeBytes<A>(_:)(v276, v305, v255);
              uint64_t v319 = v279;
              swift_release();
              swift_release();
              uint64_t v68 = v333;
              if (!v280) {
                goto LABEL_297;
              }
            }
            goto LABEL_287;
          case 3uLL:
            memset(__s1, 0, 14);
            uint64_t v247 = &v338;
            uint64_t v248 = v306;
            if (!v243) {
              goto LABEL_267;
            }
            if (v243 != 1) {
              goto LABEL_269;
            }
            uint64_t v249 = (int)v238;
            uint64_t v250 = v238 >> 32;
            if (v238 >> 32 >= (int)v238) {
              goto LABEL_258;
            }
            goto LABEL_343;
          default:
            __s1[0] = v68[2];
            LOWORD(__s1[1]) = v236;
            BYTE2(__s1[1]) = BYTE2(v236);
            BYTE3(__s1[1]) = BYTE3(v236);
            BYTE4(__s1[1]) = BYTE4(v236);
            BYTE5(__s1[1]) = BYTE5(v236);
            uint64_t v247 = &v339;
            uint64_t v248 = v307;
            if (v243)
            {
              if (v243 != 1)
              {
LABEL_269:
                uint64_t v270 = v239 & 0x3FFFFFFFFFFFFFFFLL;
                uint64_t v271 = *(void *)(v238 + 16);
                uint64_t v272 = *(void *)(v238 + 24);
                swift_retain();
                swift_retain();
                int v273 = v271;
                uint64_t v274 = v319;
                uint64_t v275 = specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v273, v272, v270, __s1);
                uint64_t v319 = v274;
                swift_release();
                swift_release();
                goto LABEL_286;
              }
              uint64_t v249 = (int)v238;
              uint64_t v250 = v238 >> 32;
              if (v238 >> 32 < (int)v238) {
                goto LABEL_344;
              }
LABEL_258:
              outlined copy of Data._Representation(v238, v239);
              uint64_t v256 = v250;
              uint64_t v257 = v319;
              uint64_t v258 = specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v249, v256, v239 & 0x3FFFFFFFFFFFFFFFLL, __s1);
              uint64_t v319 = v257;
              v259 = v238;
              uint64_t v260 = v239;
LABEL_283:
              outlined consume of Data._Representation(v259, v260);
              uint64_t v68 = v333;
              if ((v258 & 1) == 0) {
                goto LABEL_297;
              }
            }
            else
            {
LABEL_267:
              uint64_t v267 = v248 & 0xFF00000000000000 | v239 & 0xFFFFFFFFFFFFFFLL;
              *(v247 - 32) = v267;
              uint64_t v268 = v319;
              uint64_t v269 = specialized Data.InlineData.withUnsafeBytes<A>(_:)(v238, v267, __s1);
              uint64_t v319 = v268;
              uint64_t v68 = v333;
              if (!v269) {
                goto LABEL_297;
              }
            }
            goto LABEL_287;
        }
      }
      uint64_t v154 = (v153 >> 32) - (int)v153;
      if (v153 >> 32 < (int)v153) {
        goto LABEL_342;
      }
      swift_retain();
      uint64_t v155 = (char *)__DataStorage._bytes.getter();
      if (v155)
      {
        uint64_t v156 = __DataStorage._offset.getter();
        if (__OFSUB__((int)v153, v156)) {
          goto LABEL_355;
        }
        v155 += (int)v153 - v156;
      }
      uint64_t v157 = v310;
      uint64_t v158 = __DataStorage._length.getter();
      if (v158 >= v154) {
        uint64_t v159 = v154;
      }
      else {
        uint64_t v159 = v158;
      }
      if (!v309)
      {
        __break(1u);
LABEL_357:
        __break(1u);
LABEL_358:
        __break(1u);
LABEL_359:
        swift_release();
        swift_release();
        __break(1u);
LABEL_360:
        swift_release();
        swift_release();
        __break(1u);
LABEL_361:
        swift_release();
        swift_release();
        __break(1u);
        JUMPOUT(0x249E4F95CLL);
      }
      if (!v155) {
        goto LABEL_357;
      }
      uint64_t v160 = memcmp(v309, v155, v159);
      outlined consume of Data._Representation(v157, v82);
      outlined consume of Data._Representation(v81, v80);
      uint64_t v68 = v333;
      if (!v160) {
        goto LABEL_231;
      }
LABEL_297:
      uint64_t v296 = type metadata accessor for AspireHeSerializedSeededCiphertext;
      uint64_t v297 = type metadata accessor for AspireHeSerializedSeededCiphertext;
      uint64_t v298 = v336;
LABEL_298:
      outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v298, v296);
      outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v68, v297);
      outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v326, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
      uint64_t v65 = (uint64_t)v324;
      unint64_t v21 = v317;
      uint64_t v51 = v343;
      uint64_t v43 = (uint64_t)v344;
LABEL_299:
      uint64_t v299 = (uint64_t)v334;
      outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v65, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
      uint64_t v301 = &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?;
LABEL_300:
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v51, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v299, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
      outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v21, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
LABEL_301:
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v50, v301);
      outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v43, type metadata accessor for AspireHeSerializedCiphertext);
      outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v342, type metadata accessor for AspireHeSerializedCiphertext);
LABEL_302:
      outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v318, type metadata accessor for AspireHeSerializedCiphertextVec);
      outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v337, type metadata accessor for AspireHeSerializedCiphertextVec);
LABEL_303:
      v295 = 0;
      return v295 & 1;
    case 2uLL:
      char v122 = *(void *)(v81 + 16);
      swift_retain();
      swift_retain();
      uint64_t v123 = __DataStorage._bytes.getter();
      if (v123)
      {
        uint64_t v124 = v123;
        uint64_t v125 = __DataStorage._offset.getter();
        if (__OFSUB__(v122, v125)) {
          goto LABEL_325;
        }
        double v126 = (void *)(v124 + v122 - v125);
      }
      else
      {
        double v126 = 0;
      }
      __DataStorage._length.getter();
      if (v92)
      {
        if (v92 == 1)
        {
          if (v83 >> 32 < (int)v83) {
            goto LABEL_335;
          }
          uint64_t v310 = v82 & 0x3FFFFFFFFFFFFFFFLL;
          outlined copy of Data._Representation(v83, v82);
          uint64_t v151 = v319;
          uint64_t v152 = specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)v83, v83 >> 32, v310, v126);
          uint64_t v319 = v151;
          outlined consume of Data._Representation(v83, v82);
          swift_release();
        }
        else
        {
          uint64_t v208 = *(void *)(v83 + 16);
          uint64_t v209 = *(void *)(v83 + 24);
          swift_retain();
          swift_retain();
          uint64_t v210 = v208;
          uint64_t v211 = v319;
          uint64_t v212 = specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v210, v209, v82 & 0x3FFFFFFFFFFFFFFFLL, v126);
          uint64_t v319 = v211;
          if (v211) {
            goto LABEL_360;
          }
          uint64_t v152 = v212;
          swift_release();
          swift_release();
          swift_release();
        }
        swift_release();
        uint64_t v68 = v333;
        if ((v152 & 1) == 0) {
          goto LABEL_297;
        }
      }
      else
      {
        uint64_t v308 = v308 & 0xFF00000000000000 | v82 & 0xFFFFFFFFFFFFFFLL;
        uint64_t v201 = v319;
        uint64_t v202 = specialized Data.InlineData.withUnsafeBytes<A>(_:)(v83, v308, v126);
        uint64_t v319 = v201;
        swift_release();
        swift_release();
        uint64_t v68 = v333;
        if (!v202) {
          goto LABEL_297;
        }
      }
      goto LABEL_231;
    case 3uLL:
      memset(__s1, 0, 14);
      if (!v92) {
        goto LABEL_131;
      }
      if (v92 == 1)
      {
        if (v83 >> 32 < (int)v83) {
          goto LABEL_332;
        }
        swift_retain();
        uint64_t v144 = __DataStorage._bytes.getter();
        if (v144)
        {
          uint64_t v145 = __DataStorage._offset.getter();
          if (__OFSUB__((int)v83, v145)) {
            goto LABEL_352;
          }
          v144 += (int)v83 - v145;
        }
        uint64_t v146 = __DataStorage._length.getter();
        if (v146 >= (v83 >> 32) - (int)v83) {
          uint64_t v147 = (v83 >> 32) - (int)v83;
        }
        else {
          uint64_t v147 = v146;
        }
        int64_t v148 = v144 + v147;
        if (v144) {
          uint64_t v113 = v148;
        }
        else {
          uint64_t v113 = 0;
        }
        uint64_t v114 = v144;
LABEL_128:
        uint64_t v149 = v319;
        closure #1 in closure #1 in static Data.== infix(_:_:)(v114, __s1, v113, (BOOL *)&__s2);
        uint64_t v319 = v149;
        outlined consume of Data._Representation(v83, v82);
      }
      else
      {
        uint64_t v189 = *(void *)(v83 + 16);
        uint64_t v190 = *(void *)(v83 + 24);
        swift_retain();
        swift_retain();
        uint64_t v191 = __DataStorage._bytes.getter();
        if (v191)
        {
          uint64_t v192 = __DataStorage._offset.getter();
          if (__OFSUB__(v189, v192)) {
            goto LABEL_349;
          }
          v191 += v189 - v192;
        }
        uint64_t v87 = __OFSUB__(v190, v189);
        uint64_t v193 = v190 - v189;
        if (v87) {
          goto LABEL_337;
        }
        uint64_t v194 = __DataStorage._length.getter();
        if (v194 >= v193) {
          uint64_t v195 = v193;
        }
        else {
          uint64_t v195 = v194;
        }
        uint64_t v196 = v191 + v195;
        if (v191) {
          char v178 = v196;
        }
        else {
          char v178 = 0;
        }
        char v179 = v191;
LABEL_197:
        uint64_t v197 = v319;
        closure #1 in closure #1 in static Data.== infix(_:_:)(v179, __s1, v178, (BOOL *)&__s2);
        uint64_t v319 = v197;
        swift_release();
        swift_release();
      }
      uint64_t v68 = v333;
      if ((__s2 & 1) == 0) {
        goto LABEL_297;
      }
      goto LABEL_231;
    default:
      __s1[0] = *v68;
      LOWORD(__s1[1]) = v80;
      BYTE2(__s1[1]) = BYTE2(v80);
      BYTE3(__s1[1]) = BYTE3(v80);
      BYTE4(__s1[1]) = BYTE4(v80);
      BYTE5(__s1[1]) = BYTE5(v80);
      if (!v92)
      {
LABEL_131:
        uint64_t __s2 = v83;
        uint64_t v346 = v82;
        uint64_t v347 = BYTE2(v82);
        uint64_t v348 = BYTE3(v82);
        uint64_t v349 = BYTE4(v82);
        uint64_t v350 = BYTE5(v82);
        if (memcmp(__s1, &__s2, BYTE6(v82))) {
          goto LABEL_297;
        }
        goto LABEL_231;
      }
      if (v92 == 1)
      {
        if (v83 >> 32 < (int)v83) {
          goto LABEL_334;
        }
        swift_retain();
        uint64_t v108 = __DataStorage._bytes.getter();
        if (v108)
        {
          uint64_t v109 = __DataStorage._offset.getter();
          if (__OFSUB__((int)v83, v109)) {
            goto LABEL_351;
          }
          v108 += (int)v83 - v109;
        }
        uint64_t v110 = __DataStorage._length.getter();
        if (v110 >= (v83 >> 32) - (int)v83) {
          os_log_type_t v111 = (v83 >> 32) - (int)v83;
        }
        else {
          os_log_type_t v111 = v110;
        }
        uint64_t v112 = v108 + v111;
        if (v108) {
          uint64_t v113 = v112;
        }
        else {
          uint64_t v113 = 0;
        }
        uint64_t v114 = v108;
        goto LABEL_128;
      }
      unint64_t v170 = *(void *)(v83 + 16);
      uint64_t v171 = *(void *)(v83 + 24);
      swift_retain();
      swift_retain();
      uint64_t v172 = __DataStorage._bytes.getter();
      if (v172)
      {
        uint64_t v173 = __DataStorage._offset.getter();
        if (__OFSUB__(v170, v173)) {
          goto LABEL_347;
        }
        v172 += v170 - v173;
      }
      uint64_t v87 = __OFSUB__(v171, v170);
      uint64_t v174 = v171 - v170;
      if (v87) {
        goto LABEL_340;
      }
      __int16 v175 = __DataStorage._length.getter();
      if (v175 >= v174) {
        char v176 = v174;
      }
      else {
        char v176 = v175;
      }
      char v177 = v172 + v176;
      if (v172) {
        char v178 = v177;
      }
      else {
        char v178 = 0;
      }
      char v179 = v172;
      goto LABEL_197;
  }
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  BOOL v37;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int (**v46)(char *, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;

  uint64_t v4 = type metadata accessor for AspireApiRequest.OneOf_Request(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireApiRequest.OneOf_Request?, AspireApiRequest.OneOf_Request?));
  MEMORY[0x270FA5388](v11);
  unint64_t v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for AspireApiRequest(0);
  MEMORY[0x270FA5388](v14);
  unint64_t v16 = (uint64_t *)((char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v17);
  unint64_t v21 = (uint64_t *)((char *)&v39 - v20);
  uint64_t v22 = *(void *)(a1 + 16);
  if (v22 != *(void *)(a2 + 16))
  {
LABEL_25:
    uint64_t v35 = 0;
    return v35 & 1;
  }
  uint64_t v42 = v11;
  uint64_t v47 = v4;
  if (v22 && a1 != a2)
  {
    size_t v48 = v18;
    uint64_t v40 = v7;
    double v41 = v10;
    uint64_t v23 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
    uint64_t v43 = *(void *)(v19 + 72);
    uint64_t v44 = a1;
    double v45 = a2;
    uint64_t v46 = (unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
    uint64_t v24 = v22 - 1;
    uint64_t v25 = v42;
    while (1)
    {
      outlined init with copy of AspireSimilarityPlaintextPackingDenseRow(a1 + v23, (uint64_t)v21, type metadata accessor for AspireApiRequest);
      outlined init with copy of AspireSimilarityPlaintextPackingDenseRow(a2 + v23, (uint64_t)v16, type metadata accessor for AspireApiRequest);
      uint64_t v26 = *v21 == *v16 && v21[1] == v16[1];
      if (!v26 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        break;
      }
      uint64_t v27 = *(int *)(v48 + 20);
      uint64_t v28 = (uint64_t)v16 + v27;
      uint64_t v29 = (uint64_t)&v13[*(int *)(v25 + 48)];
      outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21 + v27, (uint64_t)v13, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
      outlined init with copy of AMDPbHEConfig.OneOf_Config?(v28, v29, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
      uint64_t v30 = v47;
      uint64_t v31 = *v46;
      if ((*v46)(v13, 1, v47) == 1)
      {
        if (v31((char *)v29, 1, v30) != 1) {
          goto LABEL_23;
        }
        outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v13, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
      }
      else
      {
        uint64_t v32 = (uint64_t)v41;
        outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v13, (uint64_t)v41, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
        if (v31((char *)v29, 1, v30) == 1)
        {
          outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v32, type metadata accessor for AspireApiRequest.OneOf_Request);
LABEL_23:
          outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v13, &demangling cache variable for type metadata for (AspireApiRequest.OneOf_Request?, AspireApiRequest.OneOf_Request?));
          break;
        }
        uint64_t v33 = (uint64_t)v40;
        _s8CipherML32AspireSimilarityPlaintextPackingVWObTm_0(v29, (uint64_t)v40, type metadata accessor for AspireApiRequest.OneOf_Request);
        uint64_t v34 = static AspireApiRequest.OneOf_Request.== infix(_:_:)(v32, v33);
        outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v33, type metadata accessor for AspireApiRequest.OneOf_Request);
        outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v32, type metadata accessor for AspireApiRequest.OneOf_Request);
        outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v13, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
        uint64_t v25 = v42;
        if ((v34 & 1) == 0) {
          break;
        }
      }
      type metadata accessor for UnknownStorage();
      _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_2(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
      uint64_t v35 = dispatch thunk of static Equatable.== infix(_:_:)();
      outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v16, type metadata accessor for AspireApiRequest);
      outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v21, type metadata accessor for AspireApiRequest);
      uint64_t v37 = v24-- != 0;
      if (v35)
      {
        a1 = v44;
        v23 += v43;
        a2 = v45;
        if (v37) {
          continue;
        }
      }
      return v35 & 1;
    }
    outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v16, type metadata accessor for AspireApiRequest);
    outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v21, type metadata accessor for AspireApiRequest);
    goto LABEL_25;
  }
  uint64_t v35 = 1;
  return v35 & 1;
}

{
  uint64_t v2;
  uint64_t *v3;
  unsigned char *i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v2 && a1 != a2)
  {
    int v3 = (uint64_t *)(a1 + 32);
    for (uint64_t i = (unsigned char *)(a2 + 40); ; i += 16)
    {
      uint64_t v6 = *v3;
      v3 += 2;
      uint64_t v5 = v6;
      uint64_t v7 = *((void *)i - 1);
      if (*i == 1)
      {
        switch(v7)
        {
          case 1:
            if (v5 != 1) {
              return 0;
            }
            goto LABEL_6;
          case 2:
            if (v5 != 2) {
              return 0;
            }
            goto LABEL_6;
          case 3:
            if (v5 != 3) {
              return 0;
            }
            goto LABEL_6;
          case 4:
            if (v5 != 4) {
              return 0;
            }
            goto LABEL_6;
          case 5:
            if (v5 != 5) {
              return 0;
            }
            goto LABEL_6;
          default:
            if (v5) {
              return 0;
            }
            goto LABEL_6;
        }
      }
      if (v5 != v7) {
        break;
      }
LABEL_6:
      if (!--v2) {
        return 1;
      }
    }
    return 0;
  }
  return 1;
}

{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unsigned __int8 *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int (*v41)(uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int8 *v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int (*v48)(uint64_t, uint64_t, uint64_t);
  uint64_t v49;
  unsigned __int8 *v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  void *v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int *v71;
  int *v72;
  uint64_t v73;
  int v74;
  int v75;
  int v76;
  char v77;
  char v78;
  uint64_t *v79;
  uint64_t *v80;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  unsigned int (**v85)(uint64_t, uint64_t, uint64_t);
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned __int8 *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  unsigned int (**v96)(uint64_t, uint64_t, uint64_t);
  char *v97;
  void *v98;
  uint64_t v99;

  uint64_t v99 = a1;
  char v94 = type metadata accessor for AspireHeEncryptionParameters(0);
  char v97 = *(char **)(v94 - 8);
  MEMORY[0x270FA5388](v94);
  uint64_t v4 = (char *)&v82 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v82 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireHeEncryptionParameters?, AspireHeEncryptionParameters?));
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v82 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  char v96 = *(unsigned int (***)(uint64_t, uint64_t, uint64_t))(v11 - 8);
  MEMORY[0x270FA5388](v11);
  unint64_t v13 = (unsigned __int8 *)&v82 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  MEMORY[0x270FA5388](v14 - 8);
  unint64_t v16 = (unsigned __int8 *)&v82 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireHeEvaluationKeyConfig?, AspireHeEvaluationKeyConfig?));
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v82 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  BOOL v20 = type metadata accessor for AMDPbHEKeyStatus(0);
  unint64_t v21 = MEMORY[0x270FA5388](v20);
  uint64_t v22 = MEMORY[0x270FA5388](v21);
  uint64_t v26 = *(void *)(v99 + 16);
  if (v26 == *(void *)(a2 + 16))
  {
    uint64_t v27 = (uint64_t)v97;
    uint64_t v91 = v17;
    uint64_t v92 = v11;
    uint64_t v98 = (uint64_t *)((char *)&v82 - v24);
    char v95 = v25;
    uint64_t v90 = v13;
    uint64_t v86 = v4;
    if (v26 && v99 != a2)
    {
      __int16 v93 = v22;
      uint64_t v28 = 0;
      uint64_t v29 = (*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
      v99 += v29;
      uint64_t v88 = *(void *)(v23 + 72);
      uint64_t v89 = a2 + v29;
      v96 += 6;
      char v97 = v19;
      uint64_t v84 = v8;
      uint64_t v85 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48);
      BOOL v83 = v7;
      uint64_t v30 = (uint64_t)v10;
      uint64_t v31 = v16;
      uint64_t v32 = (uint64_t)v19;
      uint64_t v33 = v95;
      uint64_t v87 = v26;
      while (1)
      {
        uint64_t v34 = v88 * v28;
        uint64_t v35 = v98;
        outlined init with copy of AspireSimilarityPlaintextPackingDenseRow(v99 + v88 * v28, (uint64_t)v98, type metadata accessor for AMDPbHEKeyStatus);
        outlined init with copy of AspireSimilarityPlaintextPackingDenseRow(v89 + v34, (uint64_t)v33, type metadata accessor for AMDPbHEKeyStatus);
        if (*v35 != *v33)
        {
LABEL_74:
          outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v33, type metadata accessor for AMDPbHEKeyStatus);
          outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v35, type metadata accessor for AMDPbHEKeyStatus);
          goto LABEL_75;
        }
        uint64_t v36 = v30;
        uint64_t v37 = *(int *)(v93 + 28);
        size_t v38 = (uint64_t)v35 + v37;
        int v39 = (uint64_t)v33 + v37;
        uint64_t v40 = v32 + *(int *)(v91 + 48);
        outlined init with copy of AMDPbHEConfig.OneOf_Config?(v38, v32, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
        outlined init with copy of AMDPbHEConfig.OneOf_Config?(v39, v40, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
        double v41 = *v96;
        uint64_t v42 = v92;
        if ((*v96)(v32, 1, v92) != 1) {
          break;
        }
        if (v41(v40, 1, v42) != 1)
        {
          uint64_t v32 = (uint64_t)v97;
          uint64_t v35 = v98;
          size_t v80 = &demangling cache variable for type metadata for (AspireHeEvaluationKeyConfig?, AspireHeEvaluationKeyConfig?);
          goto LABEL_73;
        }
        uint64_t v32 = (uint64_t)v97;
        outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v97, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
        uint64_t v35 = v98;
LABEL_61:
        if ((v35[1] != v33[1] || v35[2] != v33[2]) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
          goto LABEL_74;
        }
        type metadata accessor for UnknownStorage();
        _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_2(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
        uint64_t v33 = v95;
        int64_t v78 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v33, type metadata accessor for AMDPbHEKeyStatus);
        outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v35, type metadata accessor for AMDPbHEKeyStatus);
        if ((v78 & 1) != 0 && ++v28 != v87) {
          continue;
        }
        return v78 & 1;
      }
      outlined init with copy of AMDPbHEConfig.OneOf_Config?(v32, (uint64_t)v31, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
      if (v41(v40, 1, v42) == 1)
      {
        uint64_t v32 = (uint64_t)v97;
        uint64_t v35 = v98;
        size_t v80 = &demangling cache variable for type metadata for (AspireHeEvaluationKeyConfig?, AspireHeEvaluationKeyConfig?);
        goto LABEL_72;
      }
      uint64_t v43 = (uint64_t)v90;
      _s8CipherML32AspireSimilarityPlaintextPackingVWObTm_0(v40, (uint64_t)v90, type metadata accessor for AspireHeEvaluationKeyConfig);
      uint64_t v44 = *(int *)(v42 + 28);
      double v45 = (unsigned __int8 *)v43;
      uint64_t v46 = v43 + v44;
      uint64_t v30 = v36;
      uint64_t v47 = v36 + *(int *)(v84 + 48);
      outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)&v31[v44], v36, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      outlined init with copy of AMDPbHEConfig.OneOf_Config?(v46, v47, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      size_t v48 = *v85;
      int v49 = v94;
      if ((*v85)(v36, 1, v94) == 1)
      {
        if (v48(v47, 1, v49) != 1)
        {
          uint64_t v79 = &demangling cache variable for type metadata for (AspireHeEncryptionParameters?, AspireHeEncryptionParameters?);
          uint64_t v50 = v45;
          uint64_t v32 = (uint64_t)v97;
          goto LABEL_70;
        }
        outlined destroy of AMDPbHEConfig.OneOf_Config?(v36, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
        uint64_t v50 = v45;
        uint64_t v32 = (uint64_t)v97;
        goto LABEL_51;
      }
      unint64_t v82 = v36;
      uint64_t v51 = (uint64_t)v83;
      outlined init with copy of AMDPbHEConfig.OneOf_Config?(v36, (uint64_t)v83, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      if (v48(v47, 1, v49) == 1)
      {
        uint64_t v79 = &demangling cache variable for type metadata for (AspireHeEncryptionParameters?, AspireHeEncryptionParameters?);
        uint64_t v50 = v45;
        uint64_t v32 = (uint64_t)v97;
LABEL_69:
        outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v83, type metadata accessor for AspireHeEncryptionParameters);
        uint64_t v30 = v82;
LABEL_70:
        outlined destroy of AMDPbHEConfig.OneOf_Config?(v30, v79);
LABEL_71:
        outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v50, type metadata accessor for AspireHeEvaluationKeyConfig);
        size_t v80 = &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?;
        uint64_t v33 = v95;
        uint64_t v35 = v98;
LABEL_72:
        outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v31, type metadata accessor for AspireHeEvaluationKeyConfig);
LABEL_73:
        outlined destroy of AMDPbHEConfig.OneOf_Config?(v32, v80);
        goto LABEL_74;
      }
      uint64_t v52 = (uint64_t)v86;
      _s8CipherML32AspireSimilarityPlaintextPackingVWObTm_0(v47, (uint64_t)v86, type metadata accessor for AspireHeEncryptionParameters);
      uint64_t v50 = v45;
      uint64_t v32 = (uint64_t)v97;
      if (*(void *)v51 != *(void *)v52
        || *(void *)(v51 + 8) != *(void *)(v52 + 8)
        || (uint64_t v53 = *(void **)(v51 + 16), v54 = *(void **)(v52 + 16), v55 = v53[2], v55 != v54[2]))
      {
LABEL_68:
        outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v52, type metadata accessor for AspireHeEncryptionParameters);
        uint64_t v79 = &demangling cache variable for type metadata for AspireHeEncryptionParameters?;
        goto LABEL_69;
      }
      if (v55 && v53 != v54)
      {
        if (v53[4] != v54[4]) {
          goto LABEL_68;
        }
        unint64_t v56 = v53 + 5;
        uint64_t v57 = v54 + 5;
        uint64_t v58 = v55 - 1;
        while (v58)
        {
          uint64_t v60 = *v56++;
          uint64_t v59 = v60;
          int64_t v61 = *v57++;
          --v58;
          if (v59 != v61) {
            goto LABEL_68;
          }
        }
      }
      if (*(unsigned char *)(v51 + 32))
      {
        if (*(unsigned char *)(v52 + 32)) {
          goto LABEL_31;
        }
        uint64_t v62 = 0;
      }
      else
      {
        uint64_t v62 = *(void *)(v51 + 24);
        if (*(unsigned char *)(v52 + 32))
        {
          if (v62) {
            goto LABEL_68;
          }
          goto LABEL_31;
        }
      }
      if (v62 != *(void *)(v52 + 24)) {
        goto LABEL_68;
      }
LABEL_31:
      uint64_t v63 = *(void *)(v51 + 40);
      uint64_t v64 = *(void *)(v52 + 40);
      if (*(unsigned char *)(v51 + 48)) {
        uint64_t v63 = v63 != 0;
      }
      if (*(unsigned char *)(v52 + 48) == 1)
      {
        if (v64)
        {
          if (v63 != 1) {
            goto LABEL_68;
          }
        }
        else if (v63)
        {
          goto LABEL_68;
        }
      }
      else if (v63 != v64)
      {
        goto LABEL_68;
      }
      uint64_t v65 = *(void *)(v51 + 56);
      size_t v66 = *(void *)(v52 + 56);
      if (*(unsigned char *)(v52 + 64) == 1)
      {
        if (v66)
        {
          if (v66 == 1)
          {
            if (v65 != 1) {
              goto LABEL_68;
            }
          }
          else if (v65 != 2)
          {
            goto LABEL_68;
          }
        }
        else if (v65)
        {
          goto LABEL_68;
        }
      }
      else if (v65 != v66)
      {
        goto LABEL_68;
      }
      type metadata accessor for UnknownStorage();
      _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_2(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
      uint64_t v67 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v50 = v90;
      outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v52, type metadata accessor for AspireHeEncryptionParameters);
      outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v51, type metadata accessor for AspireHeEncryptionParameters);
      uint64_t v30 = v82;
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v82, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      if ((v67 & 1) == 0) {
        goto LABEL_71;
      }
LABEL_51:
      uint64_t v68 = *(void *)v31;
      unint64_t v69 = *(void *)v50;
      uint64_t v70 = *(void *)(*(void *)v31 + 16);
      if (v70 != *(void *)(*(void *)v50 + 16)) {
        goto LABEL_71;
      }
      if (v70 && v68 != v69)
      {
        if (*(_DWORD *)(v68 + 32) != *(_DWORD *)(v69 + 32)) {
          goto LABEL_71;
        }
        int64_t v71 = (int *)(v68 + 36);
        uint64_t v72 = (int *)(v69 + 36);
        size_t v73 = v70 - 1;
        while (v73)
        {
          uint64_t v75 = *v71++;
          uint64_t v74 = v75;
          unint64_t v76 = *v72++;
          --v73;
          if (v74 != v76) {
            goto LABEL_71;
          }
        }
      }
      if (v31[8] != v50[8]) {
        goto LABEL_71;
      }
      type metadata accessor for UnknownStorage();
      _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_2(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
      uint64_t v77 = dispatch thunk of static Equatable.== infix(_:_:)();
      outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v50, type metadata accessor for AspireHeEvaluationKeyConfig);
      outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v31, type metadata accessor for AspireHeEvaluationKeyConfig);
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v32, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
      uint64_t v33 = v95;
      uint64_t v35 = v98;
      if ((v77 & 1) == 0) {
        goto LABEL_74;
      }
      goto LABEL_61;
    }
    int64_t v78 = 1;
  }
  else
  {
LABEL_75:
    int64_t v78 = 0;
  }
  return v78 & 1;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unsigned int (**v71)(char *, uint64_t, uint64_t);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  unsigned int (*v77)(char *, uint64_t, uint64_t);
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int (*v109)(uint64_t, uint64_t, uint64_t);
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  _DWORD *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unsigned int (*v132)(uint64_t, uint64_t, uint64_t);
  uint64_t v133;
  unsigned int v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t *v139;
  int v140;
  uint64_t *v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  int v148;
  uint64_t *v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  BOOL v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  int *v197;
  int *v198;
  uint64_t v199;
  int v200;
  int v201;
  int v202;
  char v203;
  uint64_t (*v204)(uint64_t);
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t v209;
  uint64_t v210;
  unint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  char v233;
  uint64_t v234;
  char v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  unsigned int (*v241)(uint64_t, uint64_t, uint64_t);
  uint64_t v242;
  BOOL v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t (*v249)(uint64_t, uint64_t, uint64_t);
  uint64_t v250;
  int v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  int v255;
  uint64_t v256;
  char v257;
  uint64_t v258;
  char v259;
  uint64_t v260;
  char v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t *v265;
  uint64_t *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t *v271;
  char v272;
  char v273;
  uint64_t v274;
  uint64_t *v275;
  int EnumCaseMultiPayload;
  uint64_t *v277;
  char v278;
  uint64_t *v279;
  uint64_t v280;
  uint64_t (*v281)(uint64_t);
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t *v285;
  uint64_t *v287;
  uint64_t (*v288)(uint64_t);
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t (**v300)(uint64_t, uint64_t, uint64_t);
  uint64_t v301;
  uint64_t v302;
  unsigned int (**v303)(uint64_t, uint64_t, uint64_t);
  char *v304;
  uint64_t v305;
  uint64_t v306;
  unint64_t v307;
  unint64_t v308;
  unsigned int (**v309)(uint64_t, uint64_t, uint64_t);
  unsigned int (**v310)(uint64_t, uint64_t, uint64_t);
  char *v311;
  unsigned int (**v312)(char *, uint64_t, uint64_t);
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t *v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t *v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t *v345;
  uint64_t *v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  char *v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  char *v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t *v361;
  uint64_t v362;
  uint64_t *v363;
  uint64_t v364;
  uint64_t *v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  char v373;
  void __s1[4];

  void __s1[3] = *MEMORY[0x263EF8340];
  uint64_t v4 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
  uint64_t v338 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v313 = (uint64_t)&v289 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
  MEMORY[0x270FA5388](v6 - 8);
  v314 = (uint64_t)&v289 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v315 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?, AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?));
  MEMORY[0x270FA5388](v315);
  uint64_t v319 = (uint64_t)&v289 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v326 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  uint64_t v9 = *(void *)(v326 - 8);
  MEMORY[0x270FA5388](v326);
  v320 = (uint64_t)&v289 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v321 = (uint64_t)&v289 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v322 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireSimilarityPlaintextPacking?, AspireSimilarityPlaintextPacking?));
  MEMORY[0x270FA5388](v322);
  uint64_t v327 = (uint64_t)&v289 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v316 = type metadata accessor for AspireHeSerializedFullCiphertext(0);
  MEMORY[0x270FA5388](v316);
  uint64_t v337 = (uint64_t *)((char *)&v289 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v318 = type metadata accessor for AspireHeSerializedSeededCiphertext(0);
  MEMORY[0x270FA5388](v318);
  uint64_t v331 = (uint64_t)&v289 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v325 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType, AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType));
  MEMORY[0x270FA5388](v325);
  uint64_t v336 = (uint64_t)&v289 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v344 = type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(0);
  uint64_t v17 = *(void *)(v344 - 8);
  uint64_t v18 = MEMORY[0x270FA5388](v344);
  v324 = (uint64_t *)((char *)&v289 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  BOOL v20 = MEMORY[0x270FA5388](v18);
  uint64_t v332 = (uint64_t)&v289 - v21;
  MEMORY[0x270FA5388](v20);
  uint64_t v333 = (uint64_t)&v289 - v22;
  uint64_t v335 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?, AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?));
  MEMORY[0x270FA5388](v335);
  uint64_t v349 = (uint64_t)&v289 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  uint64_t v25 = MEMORY[0x270FA5388](v24 - 8);
  uint64_t v334 = (uint64_t)&v289 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = MEMORY[0x270FA5388](v25);
  uint64_t v348 = (uint64_t)&v289 - v28;
  MEMORY[0x270FA5388](v27);
  uint64_t v347 = (uint64_t)&v289 - v29;
  v329 = type metadata accessor for AspireHeSerializedCiphertext(0);
  uint64_t v317 = *(void *)(v329 - 8);
  uint64_t v30 = MEMORY[0x270FA5388](v329);
  uint64_t v354 = (uint64_t)&v289 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v30);
  uint64_t v350 = (char *)&v289 - v32;
  v352 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
  uint64_t v33 = *(void *)(v352 - 8);
  MEMORY[0x270FA5388](v352);
  uint64_t v359 = (uint64_t)&v289 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v339 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireSimilaritySerializedCiphertextMatrix?, AspireSimilaritySerializedCiphertextMatrix?));
  MEMORY[0x270FA5388](v339);
  uint64_t v357 = (uint64_t)&v289 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
  uint64_t v37 = MEMORY[0x270FA5388](v36 - 8);
  v356 = (uint64_t)&v289 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v39 = MEMORY[0x270FA5388](v37);
  v355 = (uint64_t)&v289 - v40;
  MEMORY[0x270FA5388](v39);
  v351 = (uint64_t)&v289 - v41;
  v353 = type metadata accessor for AMDPbPECShardReply(0);
  uint64_t v328 = *(void *)(v353 - 8);
  uint64_t v42 = MEMORY[0x270FA5388](v353);
  uint64_t v363 = (uint64_t *)((char *)&v289 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v42);
  uint64_t v365 = (uint64_t *)((char *)&v289 - v44);
  uint64_t v330 = type metadata accessor for AMDPbPECReply(0);
  MEMORY[0x270FA5388](v330);
  v361 = (uint64_t *)((char *)&v289 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0));
  v340 = type metadata accessor for AMDPbPIRReply(0);
  MEMORY[0x270FA5388](v340);
  uint64_t v346 = (uint64_t *)((char *)&v289 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v360 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AMDPbHEReply.OneOf_Reply, AMDPbHEReply.OneOf_Reply));
  MEMORY[0x270FA5388](v360);
  uint64_t v367 = (uint64_t)&v289 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  v371 = type metadata accessor for AMDPbHEReply.OneOf_Reply(0);
  size_t v48 = *(void *)(v371 - 8);
  int v49 = MEMORY[0x270FA5388](v371);
  v362 = (uint64_t)&v289 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = MEMORY[0x270FA5388](v49);
  v345 = (uint64_t *)((char *)&v289 - v52);
  MEMORY[0x270FA5388](v51);
  uint64_t v368 = (uint64_t)&v289 - v53;
  v370 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AMDPbHEReply.OneOf_Reply?, AMDPbHEReply.OneOf_Reply?));
  MEMORY[0x270FA5388](v370);
  uint64_t v55 = (char *)&v289 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
  uint64_t v57 = MEMORY[0x270FA5388](v56 - 8);
  v369 = (uint64_t)&v289 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = MEMORY[0x270FA5388](v57);
  v364 = (uint64_t)&v289 - v60;
  MEMORY[0x270FA5388](v59);
  v372 = (uint64_t)&v289 - v61;
  uint64_t v366 = type metadata accessor for AMDPbHEReply(0);
  uint64_t v62 = MEMORY[0x270FA5388](v366);
  uint64_t v64 = (char *)&v289 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v62);
  uint64_t v67 = (char *)&v289 - v66;
  uint64_t v68 = *(void *)(a1 + 16);
  if (v68 != *(void *)(a2 + 16)) {
    goto LABEL_201;
  }
  if (!v68 || a1 == a2)
  {
    uint64_t v278 = 1;
    return v278 & 1;
  }
  uint64_t v301 = v4;
  unint64_t v69 = 0;
  uint64_t v306 = 0;
  uint64_t v70 = (*(unsigned __int8 *)(v65 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v65 + 80);
  uint64_t v343 = a1 + v70;
  v342 = a2 + v70;
  uint64_t v341 = *(void *)(v65 + 72);
  int64_t v71 = (unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48);
  uint64_t v310 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v33 + 48);
  uint64_t v309 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  uint64_t v303 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  uint64_t v300 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v338 + 48);
  uint64_t v72 = v364;
  uint64_t v323 = v68;
  uint64_t v312 = (unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48);
  v358 = (char *)&v289 - v66;
  uint64_t v311 = v55;
  while (1)
  {
    size_t v73 = v341 * v69;
    outlined init with copy of AspireSimilarityPlaintextPackingDenseRow(v343 + v341 * v69, (uint64_t)v67, type metadata accessor for AMDPbHEReply);
    outlined init with copy of AspireSimilarityPlaintextPackingDenseRow(v342 + v73, (uint64_t)v64, type metadata accessor for AMDPbHEReply);
    uint64_t v74 = v372;
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v67, v372, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
    uint64_t v75 = v64;
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v64, v72, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
    unint64_t v76 = (uint64_t)&v55[*(int *)(v370 + 48)];
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v74, (uint64_t)v55, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v72, v76, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
    uint64_t v77 = *v71;
    int64_t v78 = v371;
    if ((*v71)(v55, 1, v371) != 1) {
      break;
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v72, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v74, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
    uint64_t v79 = v77((char *)v76, 1, v78);
    uint64_t v64 = v75;
    uint64_t v67 = v358;
    if (v79 != 1)
    {
      uint64_t v279 = &demangling cache variable for type metadata for (AMDPbHEReply.OneOf_Reply?, AMDPbHEReply.OneOf_Reply?);
      goto LABEL_200;
    }
LABEL_176:
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v55, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
    type metadata accessor for UnknownStorage();
    _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_2(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    uint64_t v278 = dispatch thunk of static Equatable.== infix(_:_:)();
    outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v64, type metadata accessor for AMDPbHEReply);
    outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v67, type metadata accessor for AMDPbHEReply);
    if ((v278 & 1) != 0 && ++v69 != v323) {
      continue;
    }
    return v278 & 1;
  }
  size_t v80 = v369;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v55, v369, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
  if (v77((char *)v76, 1, v78) == 1)
  {
    uint64_t v64 = v75;
    uint64_t v67 = v358;
    uint64_t v55 = v311;
    uint64_t v279 = &demangling cache variable for type metadata for (AMDPbHEReply.OneOf_Reply?, AMDPbHEReply.OneOf_Reply?);
    v280 = v72;
    goto LABEL_199;
  }
  char v81 = v80;
  unint64_t v82 = v368;
  _s8CipherML32AspireSimilarityPlaintextPackingVWObTm_0(v76, v368, type metadata accessor for AMDPbHEReply.OneOf_Reply);
  BOOL v83 = v367;
  uint64_t v84 = v367 + *(int *)(v360 + 48);
  outlined init with copy of AspireSimilarityPlaintextPackingDenseRow(v81, v367, type metadata accessor for AMDPbHEReply.OneOf_Reply);
  outlined init with copy of AspireSimilarityPlaintextPackingDenseRow(v82, v84, type metadata accessor for AMDPbHEReply.OneOf_Reply);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    uint64_t v274 = v83;
    uint64_t v275 = v345;
    outlined init with copy of AspireSimilarityPlaintextPackingDenseRow(v274, (uint64_t)v345, type metadata accessor for AMDPbHEReply.OneOf_Reply);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v277 = v346;
    if (EnumCaseMultiPayload != 1)
    {
      _s8CipherML32AspireSimilarityPlaintextPackingVWObTm_0(v84, (uint64_t)v346, type metadata accessor for AMDPbPIRReply);
      uint64_t v64 = v75;
      if (specialized static Array<A>.== infix(_:_:)(*v275, *v277))
      {
        type metadata accessor for UnknownStorage();
        _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_2(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
        if (dispatch thunk of static Equatable.== infix(_:_:)())
        {
          outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v277, type metadata accessor for AMDPbPIRReply);
          outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v275, type metadata accessor for AMDPbPIRReply);
          uint64_t v67 = v358;
          uint64_t v55 = v311;
          int64_t v71 = v312;
LABEL_175:
          outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v367, type metadata accessor for AMDPbHEReply.OneOf_Reply);
          outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v368, type metadata accessor for AMDPbHEReply.OneOf_Reply);
          uint64_t v72 = v364;
          outlined destroy of AMDPbHEConfig.OneOf_Config?(v364, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
          outlined destroy of AMDPbHEConfig.OneOf_Config?(v372, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
          outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v369, type metadata accessor for AMDPbHEReply.OneOf_Reply);
          goto LABEL_176;
        }
      }
      outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v277, type metadata accessor for AMDPbPIRReply);
      outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v275, type metadata accessor for AMDPbPIRReply);
      outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v367, type metadata accessor for AMDPbHEReply.OneOf_Reply);
      size_t v80 = v369;
LABEL_186:
      uint64_t v67 = v358;
      uint64_t v55 = v311;
      goto LABEL_198;
    }
    outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v275, type metadata accessor for AMDPbPIRReply);
    size_t v80 = v369;
    uint64_t v64 = v75;
    BOOL v83 = v367;
LABEL_185:
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v83, &demangling cache variable for type metadata for (AMDPbHEReply.OneOf_Reply, AMDPbHEReply.OneOf_Reply));
    goto LABEL_186;
  }
  uint64_t v85 = v362;
  outlined init with copy of AspireSimilarityPlaintextPackingDenseRow(v83, v362, type metadata accessor for AMDPbHEReply.OneOf_Reply);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v85, type metadata accessor for AMDPbPECReply);
    size_t v80 = v369;
    uint64_t v64 = v75;
    goto LABEL_185;
  }
  uint64_t v86 = v84;
  uint64_t v87 = v361;
  _s8CipherML32AspireSimilarityPlaintextPackingVWObTm_0(v86, (uint64_t)v361, type metadata accessor for AMDPbPECReply);
  uint64_t v88 = (uint64_t)v87;
  uint64_t v89 = *(void *)v85;
  uint64_t v90 = *(void *)(*(void *)v85 + 16);
  uint64_t v338 = *v87;
  uint64_t v64 = v75;
  uint64_t v67 = v358;
  uint64_t v55 = v311;
  int64_t v71 = v312;
  if (v90 != *(void *)(v338 + 16)) {
    goto LABEL_197;
  }
  if (!v90 || (uint64_t v91 = v338, v92 = v355, v89 == v338))
  {
LABEL_169:
    type metadata accessor for UnknownStorage();
    _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_2(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    int v273 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v88 = (uint64_t)v361;
    uint64_t v85 = v362;
    if ((v273 & 1) == 0) {
      goto LABEL_197;
    }
    outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v361, type metadata accessor for AMDPbPECReply);
    outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v85, type metadata accessor for AMDPbPECReply);
    goto LABEL_175;
  }
  __int16 v93 = 0;
  char v94 = (*(unsigned __int8 *)(v328 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v328 + 80);
  char v95 = v89 + v94;
  uint64_t v305 = v338 + v94;
  char v96 = *(void *)(v328 + 72);
  uint64_t v302 = v69;
  uint64_t v296 = v90;
  v295 = v95;
  v294 = v96;
  uint64_t v304 = v64;
  while (1)
  {
    char v97 = v67;
    uint64_t v98 = v55;
    uint64_t v99 = v93;
    os_log_type_t v100 = v96 * v93;
    uint64_t v101 = (uint64_t)v365;
    outlined init with copy of AspireSimilarityPlaintextPackingDenseRow(v95 + v96 * v93, (uint64_t)v365, type metadata accessor for AMDPbPECShardReply);
    uint64_t v102 = *(void *)(v91 + 16);
    v307 = v99;
    if (v99 >= v102)
    {
      __break(1u);
LABEL_215:
      __break(1u);
LABEL_216:
      __break(1u);
LABEL_217:
      __break(1u);
LABEL_218:
      __break(1u);
LABEL_219:
      __break(1u);
LABEL_220:
      __break(1u);
LABEL_221:
      __break(1u);
LABEL_222:
      __break(1u);
LABEL_223:
      __break(1u);
LABEL_224:
      __break(1u);
LABEL_225:
      __break(1u);
LABEL_226:
      __break(1u);
LABEL_227:
      __break(1u);
LABEL_228:
      __break(1u);
LABEL_229:
      __break(1u);
LABEL_230:
      __break(1u);
LABEL_231:
      __break(1u);
LABEL_232:
      __break(1u);
LABEL_233:
      __break(1u);
LABEL_234:
      __break(1u);
LABEL_235:
      __break(1u);
LABEL_236:
      __break(1u);
LABEL_237:
      __break(1u);
LABEL_238:
      __break(1u);
LABEL_239:
      __break(1u);
    }
    uint64_t v103 = v305 + v100;
    Swift::String v104 = v363;
    outlined init with copy of AspireSimilarityPlaintextPackingDenseRow(v103, (uint64_t)v363, type metadata accessor for AMDPbPECShardReply);
    int v105 = v353;
    size_t v106 = v351;
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v101 + *(int *)(v353 + 28), v351, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v104 + *(int *)(v105 + 28), v92, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
    int v107 = v357;
    uint64_t v108 = v357 + *(int *)(v339 + 48);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v106, v357, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v92, v108, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
    uint64_t v109 = *v310;
    uint64_t v110 = v352;
    if ((*v310)(v107, 1, v352) == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v92, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v106, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
      if (v109(v108, 1, v110) != 1)
      {
        uint64_t v285 = &demangling cache variable for type metadata for (AspireSimilaritySerializedCiphertextMatrix?, AspireSimilaritySerializedCiphertextMatrix?);
        uint64_t v55 = v98;
        uint64_t v67 = v97;
        uint64_t v64 = v304;
        os_log_type_t v111 = v365;
        goto LABEL_195;
      }
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v357, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
      uint64_t v55 = v98;
      uint64_t v67 = v97;
      uint64_t v64 = v304;
      unint64_t v69 = v302;
      os_log_type_t v111 = v365;
    }
    else
    {
      uint64_t v112 = v356;
      outlined init with copy of AMDPbHEConfig.OneOf_Config?(v107, v356, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
      if (v109(v108, 1, v110) == 1)
      {
        uint64_t v115 = v112;
        uint64_t v285 = &demangling cache variable for type metadata for (AspireSimilaritySerializedCiphertextMatrix?, AspireSimilaritySerializedCiphertextMatrix?);
        uint64_t v55 = v98;
        uint64_t v67 = v97;
        uint64_t v64 = v304;
        os_log_type_t v111 = v365;
        goto LABEL_194;
      }
      uint64_t v113 = v108;
      uint64_t v114 = (_DWORD *)v359;
      _s8CipherML32AspireSimilarityPlaintextPackingVWObTm_0(v113, v359, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
      uint64_t v115 = v112;
      uint64_t v116 = (uint64_t)v350;
      uint64_t v55 = v98;
      uint64_t v67 = v97;
      uint64_t v64 = v304;
      os_log_type_t v111 = v365;
      if (*(_DWORD *)v112 != *v114) {
        goto LABEL_193;
      }
      if (*(_DWORD *)(v112 + 4) != *(_DWORD *)(v359 + 4)) {
        goto LABEL_193;
      }
      int64_t v117 = *(void *)(v112 + 8);
      uint64_t v118 = *(void *)(v359 + 8);
      uint64_t v119 = *(void *)(v117 + 16);
      if (v119 != *(void *)(v118 + 16)) {
        goto LABEL_193;
      }
      if (v119 && v117 != v118)
      {
        uint64_t v120 = 0;
        uint64_t v121 = (*(unsigned __int8 *)(v317 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v317 + 80);
        uint64_t v299 = v117 + v121;
        uint64_t v297 = v118 + v121;
        uint64_t v298 = *(void *)(v317 + 72);
        uint64_t v293 = v118;
        uint64_t v292 = v119;
        do
        {
          char v122 = v120;
          uint64_t v123 = v298 * v120;
          outlined init with copy of AspireSimilarityPlaintextPackingDenseRow(v299 + v298 * v120, v116, type metadata accessor for AspireHeSerializedCiphertext);
          uint64_t v124 = *(void *)(v118 + 16);
          uint64_t v308 = v122;
          if (v122 >= v124) {
            goto LABEL_215;
          }
          uint64_t v125 = v297 + v123;
          double v126 = v354;
          outlined init with copy of AspireSimilarityPlaintextPackingDenseRow(v125, v354, type metadata accessor for AspireHeSerializedCiphertext);
          double v127 = v116;
          uint64_t v128 = v347;
          outlined init with copy of AMDPbHEConfig.OneOf_Config?(v127, v347, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
          uint64_t v129 = v348;
          outlined init with copy of AMDPbHEConfig.OneOf_Config?(v126, v348, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
          unint64_t v130 = v349;
          uint64_t v131 = v349 + *(int *)(v335 + 48);
          outlined init with copy of AMDPbHEConfig.OneOf_Config?(v128, v349, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
          outlined init with copy of AMDPbHEConfig.OneOf_Config?(v129, v131, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
          int v132 = *v309;
          uint64_t v133 = v344;
          if ((*v309)(v130, 1, v344) == 1)
          {
            outlined destroy of AMDPbHEConfig.OneOf_Config?(v129, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
            outlined destroy of AMDPbHEConfig.OneOf_Config?(v128, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
            uint64_t v134 = v132(v131, 1, v133);
            uint64_t v67 = v358;
            uint64_t v116 = (uint64_t)v350;
            if (v134 != 1)
            {
              uint64_t v115 = v356;
              uint64_t v287 = &demangling cache variable for type metadata for (AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?, AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
              goto LABEL_191;
            }
          }
          else
          {
            double v135 = v334;
            outlined init with copy of AMDPbHEConfig.OneOf_Config?(v130, v334, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
            if (v132(v131, 1, v133) == 1)
            {
              uint64_t v115 = v356;
              v283 = v348;
              uint64_t v284 = v347;
              uint64_t v287 = &demangling cache variable for type metadata for (AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?, AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
              uint64_t v67 = v358;
              goto LABEL_190;
            }
            double v136 = v333;
            _s8CipherML32AspireSimilarityPlaintextPackingVWObTm_0(v131, v333, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
            uint64_t v137 = v336;
            unint64_t v138 = v336 + *(int *)(v325 + 48);
            outlined init with copy of AspireSimilarityPlaintextPackingDenseRow(v135, v336, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
            outlined init with copy of AspireSimilarityPlaintextPackingDenseRow(v136, v138, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
            if (swift_getEnumCaseMultiPayload() == 1)
            {
              uint64_t v139 = v324;
              outlined init with copy of AspireSimilarityPlaintextPackingDenseRow(v137, (uint64_t)v324, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
              uint64_t v140 = swift_getEnumCaseMultiPayload();
              uint64_t v67 = v358;
              if (v140 != 1)
              {
                v288 = type metadata accessor for AspireHeSerializedFullCiphertext;
LABEL_208:
                outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v139, v288);
                outlined destroy of AMDPbHEConfig.OneOf_Config?(v137, &demangling cache variable for type metadata for (AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType, AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType));
                goto LABEL_189;
              }
              uint64_t v141 = v337;
              _s8CipherML32AspireSimilarityPlaintextPackingVWObTm_0(v138, (uint64_t)v337, type metadata accessor for AspireHeSerializedFullCiphertext);
              int v142 = *v139;
              int v143 = v139[1];
              uint64_t v144 = *v141;
              uint64_t v145 = v141[1];
              uint64_t v116 = (uint64_t)v350;
              uint64_t v146 = 0;
              uint64_t v147 = (uint64_t)v324;
              switch(v143 >> 62)
              {
                case 1uLL:
                  LODWORD(v146) = HIDWORD(v142) - v142;
                  if (__OFSUB__(HIDWORD(v142), v142)) {
                    goto LABEL_216;
                  }
                  uint64_t v146 = (int)v146;
LABEL_41:
                  switch(v145 >> 62)
                  {
                    case 1uLL:
                      LODWORD(v158) = HIDWORD(v144) - v144;
                      if (__OFSUB__(HIDWORD(v144), v144)) {
                        goto LABEL_220;
                      }
                      uint64_t v158 = (int)v158;
LABEL_51:
                      if (v146 != v158) {
                        goto LABEL_182;
                      }
                      if (v146 < 1) {
                        goto LABEL_95;
                      }
                      break;
                    case 2uLL:
                      int64_t v163 = *(void *)(v144 + 16);
                      uint64_t v162 = *(void *)(v144 + 24);
                      uint64_t v157 = __OFSUB__(v162, v163);
                      uint64_t v158 = v162 - v163;
                      if (!v157) {
                        goto LABEL_51;
                      }
                      goto LABEL_221;
                    case 3uLL:
                      if (v146) {
                        goto LABEL_182;
                      }
                      goto LABEL_95;
                    default:
                      uint64_t v158 = BYTE6(v145);
                      goto LABEL_51;
                  }
                  break;
                case 2uLL:
                  uint64_t v156 = *(void *)(v142 + 16);
                  uint64_t v155 = *(void *)(v142 + 24);
                  uint64_t v157 = __OFSUB__(v155, v156);
                  uint64_t v146 = v155 - v156;
                  if (!v157) {
                    goto LABEL_41;
                  }
                  goto LABEL_217;
                case 3uLL:
                  goto LABEL_41;
                default:
                  uint64_t v146 = BYTE6(v143);
                  goto LABEL_41;
              }
              switch(v143 >> 62)
              {
                case 1uLL:
                  uint64_t v291 = *v141;
                  uint64_t v166 = (int)v142;
                  v289 = (v142 >> 32) - (int)v142;
                  if (v142 >> 32 < (int)v142) {
                    goto LABEL_228;
                  }
                  uint64_t v290 = v142;
                  outlined copy of Data._Representation(v142, v143);
                  uint64_t v167 = __DataStorage._bytes.getter();
                  if (v167)
                  {
                    uint64_t v168 = v167;
                    uint64_t v169 = __DataStorage._offset.getter();
                    if (__OFSUB__(v166, v169)) {
                      goto LABEL_234;
                    }
                    unint64_t v170 = v168 + v166 - v169;
                  }
                  else
                  {
                    unint64_t v170 = 0;
                  }
                  __DataStorage._length.getter();
                  uint64_t v192 = v170;
                  uint64_t v193 = v306;
                  closure #1 in static Data.== infix(_:_:)(v192, v291, v145, (char *)__s1);
                  uint64_t v306 = v193;
                  outlined consume of Data._Representation(v290, v143);
                  goto LABEL_94;
                case 2uLL:
                  uint64_t v291 = *v141;
                  uint64_t v171 = *(void *)(v142 + 16);
                  v289 = *(void *)(v142 + 24);
                  uint64_t v290 = v142;
                  swift_retain();
                  swift_retain();
                  uint64_t v172 = __DataStorage._bytes.getter();
                  if (v172)
                  {
                    uint64_t v173 = v172;
                    uint64_t v174 = __DataStorage._offset.getter();
                    if (__OFSUB__(v171, v174)) {
                      goto LABEL_235;
                    }
                    __int16 v175 = v171;
                    char v176 = v173 + v171 - v174;
                  }
                  else
                  {
                    __int16 v175 = v171;
                    char v176 = 0;
                  }
                  if (__OFSUB__(v289, v175)) {
                    goto LABEL_230;
                  }
                  __DataStorage._length.getter();
                  uint64_t v190 = v306;
                  closure #1 in static Data.== infix(_:_:)(v176, v291, v145, (char *)__s1);
                  uint64_t v306 = v190;
                  swift_release();
                  swift_release();
LABEL_94:
                  uint64_t v137 = v336;
                  if ((__s1[0] & 1) == 0) {
                    goto LABEL_182;
                  }
LABEL_95:
                  uint64_t v194 = *(void *)(v147 + 16);
                  uint64_t v195 = v337[2];
                  uint64_t v196 = *(void *)(v194 + 16);
                  if (v196 != *(void *)(v195 + 16)) {
                    goto LABEL_182;
                  }
                  if (!v196 || v194 == v195) {
                    goto LABEL_103;
                  }
                  if (*(_DWORD *)(v194 + 32) != *(_DWORD *)(v195 + 32)) {
                    goto LABEL_182;
                  }
                  uint64_t v197 = (int *)(v194 + 36);
                  uint64_t v198 = (int *)(v195 + 36);
                  uint64_t v199 = v196 - 1;
                  while (v199)
                  {
                    uint64_t v201 = *v197++;
                    uint64_t v200 = v201;
                    uint64_t v202 = *v198++;
                    --v199;
                    if (v200 != v202) {
                      goto LABEL_182;
                    }
                  }
LABEL_103:
                  if (*(void *)(v147 + 24) != v337[3]
                    || (type metadata accessor for UnknownStorage(),
                        _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_2(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]), unint64_t v130 = v349, v203 = dispatch thunk of static Equatable.== infix(_:_:)(), v137 = v336, (v203 & 1) == 0))
                  {
LABEL_182:
                    uint64_t v281 = type metadata accessor for AspireHeSerializedFullCiphertext;
                    outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v337, type metadata accessor for AspireHeSerializedFullCiphertext);
                    v282 = v147;
                    goto LABEL_188;
                  }
                  uint64_t v204 = type metadata accessor for AspireHeSerializedFullCiphertext;
                  outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v337, type metadata accessor for AspireHeSerializedFullCiphertext);
                  uint64_t v205 = v147;
                  break;
                case 3uLL:
                  memset(__s1, 0, 14);
                  goto LABEL_74;
                default:
                  __s1[0] = *v139;
                  LOWORD(__s1[1]) = v143;
                  BYTE2(__s1[1]) = BYTE2(v143);
                  BYTE3(__s1[1]) = BYTE3(v143);
                  BYTE4(__s1[1]) = BYTE4(v143);
                  BYTE5(__s1[1]) = BYTE5(v143);
LABEL_74:
                  char v177 = v306;
                  closure #1 in static Data.== infix(_:_:)((uint64_t)__s1, v144, v145, &v373);
                  uint64_t v306 = v177;
                  if ((v373 & 1) == 0) {
                    goto LABEL_182;
                  }
                  goto LABEL_95;
              }
            }
            else
            {
              uint64_t v139 = (uint64_t *)v332;
              outlined init with copy of AspireSimilarityPlaintextPackingDenseRow(v137, v332, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
              int64_t v148 = swift_getEnumCaseMultiPayload();
              uint64_t v67 = v358;
              if (v148 == 1)
              {
                v288 = type metadata accessor for AspireHeSerializedSeededCiphertext;
                goto LABEL_208;
              }
              uint64_t v149 = (uint64_t *)v331;
              _s8CipherML32AspireSimilarityPlaintextPackingVWObTm_0(v138, v331, type metadata accessor for AspireHeSerializedSeededCiphertext);
              int64_t v150 = *v139;
              uint64_t v151 = v139[1];
              uint64_t v152 = *v149;
              uint64_t v153 = v149[1];
              uint64_t v116 = (uint64_t)v350;
              uint64_t v154 = 0;
              switch(v151 >> 62)
              {
                case 1uLL:
                  LODWORD(v154) = HIDWORD(v150) - v150;
                  if (__OFSUB__(HIDWORD(v150), v150)) {
                    goto LABEL_218;
                  }
                  uint64_t v154 = (int)v154;
LABEL_46:
                  switch(v153 >> 62)
                  {
                    case 1uLL:
                      LODWORD(v161) = HIDWORD(v152) - v152;
                      if (__OFSUB__(HIDWORD(v152), v152)) {
                        goto LABEL_222;
                      }
                      int v161 = (int)v161;
LABEL_60:
                      if (v154 != v161) {
                        goto LABEL_187;
                      }
                      if (v154 < 1) {
                        goto LABEL_109;
                      }
                      break;
                    case 2uLL:
                      uint64_t v165 = *(void *)(v152 + 16);
                      uint64_t v164 = *(void *)(v152 + 24);
                      uint64_t v157 = __OFSUB__(v164, v165);
                      int v161 = v164 - v165;
                      if (!v157) {
                        goto LABEL_60;
                      }
                      goto LABEL_223;
                    case 3uLL:
                      if (v154) {
                        goto LABEL_187;
                      }
                      goto LABEL_109;
                    default:
                      int v161 = BYTE6(v153);
                      goto LABEL_60;
                  }
                  break;
                case 2uLL:
                  uint64_t v160 = *(void *)(v150 + 16);
                  uint64_t v159 = *(void *)(v150 + 24);
                  uint64_t v157 = __OFSUB__(v159, v160);
                  uint64_t v154 = v159 - v160;
                  if (!v157) {
                    goto LABEL_46;
                  }
                  goto LABEL_219;
                case 3uLL:
                  goto LABEL_46;
                default:
                  uint64_t v154 = BYTE6(v151);
                  goto LABEL_46;
              }
              switch(v151 >> 62)
              {
                case 1uLL:
                  uint64_t v291 = *v149;
                  char v178 = (int)v150;
                  v289 = (v150 >> 32) - (int)v150;
                  if (v150 >> 32 < (int)v150) {
                    goto LABEL_229;
                  }
                  uint64_t v290 = v150;
                  outlined copy of Data._Representation(v150, v151);
                  char v179 = __DataStorage._bytes.getter();
                  if (v179)
                  {
                    uint64_t v180 = v179;
                    uint64_t v181 = __DataStorage._offset.getter();
                    if (__OFSUB__(v178, v181)) {
                      goto LABEL_236;
                    }
                    int v182 = v180 + v178 - v181;
                  }
                  else
                  {
                    int v182 = 0;
                  }
                  __DataStorage._length.getter();
                  uint64_t v206 = v182;
                  uint64_t v207 = v306;
                  closure #1 in static Data.== infix(_:_:)(v206, v291, v153, (char *)__s1);
                  uint64_t v306 = v207;
                  outlined consume of Data._Representation(v290, v151);
                  goto LABEL_108;
                case 2uLL:
                  uint64_t v291 = *v149;
                  uint64_t v183 = *(void *)(v150 + 16);
                  v289 = *(void *)(v150 + 24);
                  uint64_t v290 = v150;
                  swift_retain();
                  swift_retain();
                  uint64_t v184 = __DataStorage._bytes.getter();
                  if (v184)
                  {
                    uint64_t v185 = v184;
                    uint64_t v186 = __DataStorage._offset.getter();
                    if (__OFSUB__(v183, v186)) {
                      goto LABEL_237;
                    }
                    int v187 = v183;
                    int v188 = v185 + v183 - v186;
                  }
                  else
                  {
                    int v187 = v183;
                    int v188 = 0;
                  }
                  if (__OFSUB__(v289, v187)) {
                    goto LABEL_231;
                  }
                  __DataStorage._length.getter();
                  uint64_t v191 = v306;
                  closure #1 in static Data.== infix(_:_:)(v188, v291, v153, (char *)__s1);
                  uint64_t v306 = v191;
                  swift_release();
                  swift_release();
LABEL_108:
                  uint64_t v137 = v336;
                  if ((__s1[0] & 1) == 0) {
                    goto LABEL_187;
                  }
LABEL_109:
                  uint64_t v208 = *(void *)(v332 + 16);
                  uint64_t v209 = *(void *)(v332 + 24);
                  uint64_t v210 = *(void *)(v331 + 16);
                  uint64_t v211 = *(void *)(v331 + 24);
                  uint64_t v212 = 0;
                  switch(v209 >> 62)
                  {
                    case 1uLL:
                      LODWORD(v212) = HIDWORD(v208) - v208;
                      if (__OFSUB__(HIDWORD(v208), v208)) {
                        goto LABEL_224;
                      }
                      uint64_t v212 = (int)v212;
LABEL_114:
                      switch(v211 >> 62)
                      {
                        case 1uLL:
                          LODWORD(v215) = HIDWORD(v210) - v210;
                          if (__OFSUB__(HIDWORD(v210), v210)) {
                            goto LABEL_226;
                          }
                          uint64_t v215 = (int)v215;
LABEL_119:
                          if (v212 != v215) {
                            goto LABEL_187;
                          }
                          if (v212 < 1) {
                            goto LABEL_141;
                          }
                          break;
                        case 2uLL:
                          uint64_t v217 = *(void *)(v210 + 16);
                          uint64_t v216 = *(void *)(v210 + 24);
                          uint64_t v157 = __OFSUB__(v216, v217);
                          uint64_t v215 = v216 - v217;
                          if (!v157) {
                            goto LABEL_119;
                          }
                          goto LABEL_227;
                        case 3uLL:
                          if (v212) {
                            goto LABEL_187;
                          }
                          goto LABEL_141;
                        default:
                          uint64_t v215 = BYTE6(v211);
                          goto LABEL_119;
                      }
                      break;
                    case 2uLL:
                      uint64_t v214 = *(void *)(v208 + 16);
                      uint64_t v213 = *(void *)(v208 + 24);
                      uint64_t v157 = __OFSUB__(v213, v214);
                      uint64_t v212 = v213 - v214;
                      if (!v157) {
                        goto LABEL_114;
                      }
                      goto LABEL_225;
                    case 3uLL:
                      goto LABEL_114;
                    default:
                      uint64_t v212 = BYTE6(v209);
                      goto LABEL_114;
                  }
                  break;
                case 3uLL:
                  memset(__s1, 0, 14);
                  goto LABEL_84;
                default:
                  __s1[0] = *v139;
                  LOWORD(__s1[1]) = v151;
                  BYTE2(__s1[1]) = BYTE2(v151);
                  BYTE3(__s1[1]) = BYTE3(v151);
                  BYTE4(__s1[1]) = BYTE4(v151);
                  BYTE5(__s1[1]) = BYTE5(v151);
LABEL_84:
                  uint64_t v189 = v306;
                  closure #1 in static Data.== infix(_:_:)((uint64_t)__s1, v152, v153, &v373);
                  uint64_t v306 = v189;
                  if ((v373 & 1) == 0) {
                    goto LABEL_187;
                  }
                  goto LABEL_109;
              }
              switch(v209 >> 62)
              {
                case 1uLL:
                  uint64_t v291 = *(void *)(v331 + 16);
                  uint64_t v218 = (int)v208;
                  if (v208 >> 32 < (int)v208) {
                    goto LABEL_232;
                  }
                  uint64_t v290 = v208;
                  outlined copy of Data._Representation(v208, v209);
                  uint64_t v219 = __DataStorage._bytes.getter();
                  if (v219)
                  {
                    uint64_t v220 = v219;
                    uint64_t v221 = __DataStorage._offset.getter();
                    if (__OFSUB__(v218, v221)) {
                      goto LABEL_238;
                    }
                    uint64_t v222 = v220 + v218 - v221;
                  }
                  else
                  {
                    uint64_t v222 = 0;
                  }
                  __DataStorage._length.getter();
                  uint64_t v231 = v222;
                  uint64_t v232 = v306;
                  closure #1 in static Data.== infix(_:_:)(v231, v291, v211, (char *)__s1);
                  uint64_t v306 = v232;
                  outlined consume of Data._Representation(v290, v209);
                  goto LABEL_140;
                case 2uLL:
                  uint64_t v291 = *(void *)(v331 + 16);
                  uint64_t v223 = *(void *)(v208 + 16);
                  v289 = *(void *)(v208 + 24);
                  uint64_t v290 = v208;
                  swift_retain();
                  swift_retain();
                  v224 = __DataStorage._bytes.getter();
                  if (v224)
                  {
                    uint64_t v225 = v224;
                    uint64_t v226 = __DataStorage._offset.getter();
                    if (__OFSUB__(v223, v226)) {
                      goto LABEL_239;
                    }
                    uint64_t v227 = v223;
                    uint64_t v228 = v225 + v223 - v226;
                  }
                  else
                  {
                    uint64_t v227 = v223;
                    uint64_t v228 = 0;
                  }
                  if (__OFSUB__(v289, v227)) {
                    goto LABEL_233;
                  }
                  __DataStorage._length.getter();
                  uint64_t v230 = v306;
                  closure #1 in static Data.== infix(_:_:)(v228, v291, v211, (char *)__s1);
                  uint64_t v306 = v230;
                  swift_release();
                  swift_release();
LABEL_140:
                  uint64_t v137 = v336;
                  if ((__s1[0] & 1) == 0) {
                    goto LABEL_187;
                  }
LABEL_141:
                  type metadata accessor for UnknownStorage();
                  _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_2(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
                  unint64_t v130 = v349;
                  uint64_t v233 = dispatch thunk of static Equatable.== infix(_:_:)();
                  uint64_t v137 = v336;
                  if ((v233 & 1) == 0)
                  {
LABEL_187:
                    uint64_t v281 = type metadata accessor for AspireHeSerializedSeededCiphertext;
                    outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v331, type metadata accessor for AspireHeSerializedSeededCiphertext);
                    v282 = v332;
LABEL_188:
                    outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v282, v281);
                    outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v137, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
LABEL_189:
                    double v135 = v334;
                    v283 = v348;
                    uint64_t v284 = v347;
                    outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v333, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
                    uint64_t v287 = &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?;
                    uint64_t v115 = v356;
LABEL_190:
                    outlined destroy of AMDPbHEConfig.OneOf_Config?(v283, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
                    outlined destroy of AMDPbHEConfig.OneOf_Config?(v284, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
                    outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v135, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
                    uint64_t v116 = (uint64_t)v350;
LABEL_191:
                    outlined destroy of AMDPbHEConfig.OneOf_Config?(v349, v287);
                    outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v354, type metadata accessor for AspireHeSerializedCiphertext);
                    outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v116, type metadata accessor for AspireHeSerializedCiphertext);
LABEL_192:
                    os_log_type_t v111 = v365;
LABEL_193:
                    outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v359, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
                    uint64_t v285 = &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?;
LABEL_194:
                    outlined destroy of AMDPbHEConfig.OneOf_Config?(v355, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
                    outlined destroy of AMDPbHEConfig.OneOf_Config?(v351, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
                    outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v115, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
LABEL_195:
                    outlined destroy of AMDPbHEConfig.OneOf_Config?(v357, v285);
                    goto LABEL_196;
                  }
                  uint64_t v204 = type metadata accessor for AspireHeSerializedSeededCiphertext;
                  outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v331, type metadata accessor for AspireHeSerializedSeededCiphertext);
                  uint64_t v205 = v332;
                  break;
                case 3uLL:
                  memset(__s1, 0, 14);
                  goto LABEL_133;
                default:
                  __s1[0] = *(void *)(v332 + 16);
                  LOWORD(__s1[1]) = v209;
                  BYTE2(__s1[1]) = BYTE2(v209);
                  BYTE3(__s1[1]) = BYTE3(v209);
                  BYTE4(__s1[1]) = BYTE4(v209);
                  BYTE5(__s1[1]) = BYTE5(v209);
LABEL_133:
                  uint64_t v229 = v306;
                  closure #1 in static Data.== infix(_:_:)((uint64_t)__s1, v210, v211, &v373);
                  uint64_t v306 = v229;
                  if ((v373 & 1) == 0) {
                    goto LABEL_187;
                  }
                  goto LABEL_141;
              }
            }
            outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v205, v204);
            outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v137, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
            outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v333, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
            outlined destroy of AMDPbHEConfig.OneOf_Config?(v348, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
            outlined destroy of AMDPbHEConfig.OneOf_Config?(v347, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
            outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v334, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
          }
          outlined destroy of AMDPbHEConfig.OneOf_Config?(v130, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
          uint64_t v234 = v354;
          type metadata accessor for UnknownStorage();
          _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_2(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
          int v235 = dispatch thunk of static Equatable.== infix(_:_:)();
          outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v234, type metadata accessor for AspireHeSerializedCiphertext);
          outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v116, type metadata accessor for AspireHeSerializedCiphertext);
          uint64_t v115 = v356;
          os_log_type_t v111 = v365;
          uint64_t v118 = v293;
          if ((v235 & 1) == 0) {
            goto LABEL_193;
          }
          uint64_t v120 = v308 + 1;
        }
        while (v308 + 1 != v292);
      }
      uint64_t v236 = *(int *)(v352 + 32);
      uint64_t v237 = v115 + v236;
      uint64_t v238 = v359 + v236;
      uint64_t v239 = v327;
      uint64_t v240 = v327 + *(int *)(v322 + 48);
      outlined init with copy of AMDPbHEConfig.OneOf_Config?(v237, v327, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
      outlined init with copy of AMDPbHEConfig.OneOf_Config?(v238, v240, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
      uint64_t v241 = *v303;
      int v242 = v326;
      if ((*v303)(v239, 1, v326) == 1)
      {
        uint64_t v243 = v241(v240, 1, v242) == 1;
        unint64_t v69 = v302;
        uint64_t v244 = v239;
        if (!v243) {
          goto LABEL_210;
        }
        outlined destroy of AMDPbHEConfig.OneOf_Config?(v239, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
      }
      else
      {
        uint64_t v245 = v321;
        outlined init with copy of AMDPbHEConfig.OneOf_Config?(v239, v321, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
        if (v241(v240, 1, v242) == 1)
        {
          outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v245, type metadata accessor for AspireSimilarityPlaintextPacking);
          uint64_t v244 = v327;
          os_log_type_t v111 = v365;
LABEL_210:
          outlined destroy of AMDPbHEConfig.OneOf_Config?(v244, &demangling cache variable for type metadata for (AspireSimilarityPlaintextPacking?, AspireSimilarityPlaintextPacking?));
          uint64_t v115 = v356;
          goto LABEL_193;
        }
        v246 = v320;
        _s8CipherML32AspireSimilarityPlaintextPackingVWObTm_0(v240, v320, type metadata accessor for AspireSimilarityPlaintextPacking);
        uint64_t v247 = v319;
        uint64_t v248 = v319 + *(int *)(v315 + 48);
        outlined init with copy of AMDPbHEConfig.OneOf_Config?(v245, v319, &demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
        outlined init with copy of AMDPbHEConfig.OneOf_Config?(v246, v248, &demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
        uint64_t v249 = *v300;
        uint64_t v250 = v301;
        if ((*v300)(v247, 1, v301) == 1)
        {
          v251 = v249(v248, 1, v250);
          unint64_t v69 = v302;
          if (v251 != 1) {
            goto LABEL_212;
          }
          outlined destroy of AMDPbHEConfig.OneOf_Config?(v247, &demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
          uint64_t v252 = v321;
        }
        else
        {
          uint64_t v253 = v247;
          uint64_t v254 = v314;
          outlined init with copy of AMDPbHEConfig.OneOf_Config?(v253, v314, &demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
          uint64_t v255 = v249(v248, 1, v250);
          unint64_t v69 = v302;
          if (v255 == 1)
          {
            outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v254, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
            uint64_t v247 = v319;
LABEL_212:
            outlined destroy of AMDPbHEConfig.OneOf_Config?(v247, &demangling cache variable for type metadata for (AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?, AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?));
            uint64_t v252 = v321;
LABEL_213:
            outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v320, type metadata accessor for AspireSimilarityPlaintextPacking);
            outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v252, type metadata accessor for AspireSimilarityPlaintextPacking);
            outlined destroy of AMDPbHEConfig.OneOf_Config?(v327, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
            uint64_t v115 = v356;
            goto LABEL_192;
          }
          uint64_t v256 = v313;
          _s8CipherML32AspireSimilarityPlaintextPackingVWObTm_0(v248, v313, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
          uint64_t v257 = specialized static AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType.== infix(_:_:)(v254, v256);
          outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v256, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
          outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v254, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
          outlined destroy of AMDPbHEConfig.OneOf_Config?(v319, &demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
          uint64_t v252 = v321;
          if ((v257 & 1) == 0) {
            goto LABEL_213;
          }
        }
        uint64_t v258 = v320;
        type metadata accessor for UnknownStorage();
        _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_2(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
        v259 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v258, type metadata accessor for AspireSimilarityPlaintextPacking);
        outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v252, type metadata accessor for AspireSimilarityPlaintextPacking);
        outlined destroy of AMDPbHEConfig.OneOf_Config?(v327, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
        uint64_t v115 = v356;
        os_log_type_t v111 = v365;
        if ((v259 & 1) == 0) {
          goto LABEL_193;
        }
      }
      uint64_t v260 = v359;
      type metadata accessor for UnknownStorage();
      _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_2(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
      uint64_t v261 = dispatch thunk of static Equatable.== infix(_:_:)();
      outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v260, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v355, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v351, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
      outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v356, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v357, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
      if ((v261 & 1) == 0) {
        break;
      }
    }
    uint64_t v262 = *v111;
    uint64_t v263 = *v363;
    uint64_t v264 = *(void *)(*v111 + 16);
    if (v264 != *(void *)(*v363 + 16)) {
      break;
    }
    if (v264 && v262 != v263)
    {
      if (*(void *)(v262 + 32) != *(void *)(v263 + 32)) {
        break;
      }
      uint64_t v265 = (uint64_t *)(v262 + 40);
      v266 = (uint64_t *)(v263 + 40);
      uint64_t v267 = v264 - 1;
      while (v267)
      {
        uint64_t v269 = *v265++;
        uint64_t v268 = v269;
        uint64_t v270 = *v266++;
        --v267;
        if (v268 != v270) {
          goto LABEL_196;
        }
      }
    }
    if ((specialized static Array<A>.== infix(_:_:)(v111[1], v363[1]) & 1) == 0) {
      break;
    }
    uint64_t v271 = v363;
    type metadata accessor for UnknownStorage();
    _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_2(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    uint64_t v272 = dispatch thunk of static Equatable.== infix(_:_:)();
    outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v271, type metadata accessor for AMDPbPECShardReply);
    outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v365, type metadata accessor for AMDPbPECShardReply);
    uint64_t v88 = (uint64_t)v361;
    uint64_t v85 = v362;
    int64_t v71 = v312;
    if ((v272 & 1) == 0) {
      goto LABEL_197;
    }
    __int16 v93 = v307 + 1;
    uint64_t v92 = v355;
    uint64_t v91 = v338;
    char v95 = v295;
    char v96 = v294;
    if (v307 + 1 == v296) {
      goto LABEL_169;
    }
  }
LABEL_196:
  outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v363, type metadata accessor for AMDPbPECShardReply);
  outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v111, type metadata accessor for AMDPbPECShardReply);
  uint64_t v88 = (uint64_t)v361;
  uint64_t v85 = v362;
LABEL_197:
  outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v88, type metadata accessor for AMDPbPECReply);
  outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v85, type metadata accessor for AMDPbPECReply);
  outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v367, type metadata accessor for AMDPbHEReply.OneOf_Reply);
  size_t v80 = v369;
LABEL_198:
  outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v368, type metadata accessor for AMDPbHEReply.OneOf_Reply);
  uint64_t v279 = &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?;
  v280 = v364;
LABEL_199:
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v280, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v372, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
  outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v80, type metadata accessor for AMDPbHEReply.OneOf_Reply);
LABEL_200:
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v55, v279);
  outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v64, type metadata accessor for AMDPbHEReply);
  outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v67, type metadata accessor for AMDPbHEReply);
LABEL_201:
  uint64_t v278 = 0;
  return v278 & 1;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int (*v43)(uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t (*v63)(uint64_t);
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int (**v72)(uint64_t, uint64_t, uint64_t);
  char *v73;
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  void *v81;
  void *v82;

  int64_t v78 = a2;
  int v3 = type metadata accessor for AMDPbPECQuery(0);
  MEMORY[0x270FA5388](v3 - 8);
  unint64_t v69 = (uint64_t)&v65 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for AMDPbPIRQuery(0);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v68 = (uint64_t)&v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AMDPbHEQuery.OneOf_Query, AMDPbHEQuery.OneOf_Query));
  MEMORY[0x270FA5388](v70);
  uint64_t v8 = (char *)&v65 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for AMDPbHEQuery.OneOf_Query(0);
  uint64_t v74 = *(char **)(v9 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v13 = MEMORY[0x270FA5388](v10);
  uint64_t v15 = (char *)&v65 - v14;
  MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v65 - v16;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
  MEMORY[0x270FA5388](v18 - 8);
  BOOL v20 = (char *)&v65 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AMDPbHEQuery.OneOf_Query?, AMDPbHEQuery.OneOf_Query?));
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = (char *)&v65 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for AMDPbHEQuery(0);
  uint64_t v25 = MEMORY[0x270FA5388](v24);
  uint64_t v26 = MEMORY[0x270FA5388](v25);
  uint64_t v30 = a1;
  uint64_t v31 = *(void *)(a1 + 16);
  uint64_t v32 = v78;
  if (v31 != *(void *)(v78 + 16))
  {
LABEL_33:
    uint64_t v60 = 0;
    return v60 & 1;
  }
  uint64_t v75 = v21;
  unint64_t v76 = v20;
  char v81 = (uint64_t *)((char *)&v65 - v28);
  unint64_t v82 = (void *)v29;
  size_t v66 = v15;
  uint64_t v67 = v12;
  size_t v80 = v23;
  uint64_t v77 = v9;
  size_t v73 = v17;
  if (v31 && v30 != v78)
  {
    uint64_t v79 = v26;
    uint64_t v33 = (*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80);
    int64_t v71 = *(void *)(v27 + 72);
    uint64_t v72 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v74 + 48);
    uint64_t v34 = v31 - 1;
    uint64_t v74 = v8;
    while (1)
    {
      uint64_t v35 = v81;
      outlined init with copy of AspireSimilarityPlaintextPackingDenseRow(v30 + v33, (uint64_t)v81, type metadata accessor for AMDPbHEQuery);
      uint64_t v36 = v82;
      outlined init with copy of AspireSimilarityPlaintextPackingDenseRow(v32 + v33, (uint64_t)v82, type metadata accessor for AMDPbHEQuery);
      uint64_t v37 = *v35 == *v36 && v35[1] == v36[1];
      if (!v37 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        break;
      }
      int64_t v78 = v34;
      size_t v38 = *(int *)(v79 + 20);
      int v39 = (uint64_t)v35 + v38;
      uint64_t v40 = (uint64_t)v36 + v38;
      double v41 = (uint64_t)v80;
      uint64_t v42 = (uint64_t)&v80[*(int *)(v75 + 48)];
      outlined init with copy of AMDPbHEConfig.OneOf_Config?(v39, (uint64_t)v80, &demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
      outlined init with copy of AMDPbHEConfig.OneOf_Config?(v40, v42, &demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
      uint64_t v43 = *v72;
      uint64_t v44 = v77;
      if ((*v72)(v41, 1, v77) == 1)
      {
        if (v43(v42, 1, v44) != 1)
        {
          int64_t v61 = (uint64_t)v80;
          uint64_t v35 = v81;
          uint64_t v36 = v82;
          uint64_t v62 = &demangling cache variable for type metadata for (AMDPbHEQuery.OneOf_Query?, AMDPbHEQuery.OneOf_Query?);
          goto LABEL_31;
        }
      }
      else
      {
        double v45 = v41;
        uint64_t v46 = (uint64_t)v76;
        outlined init with copy of AMDPbHEConfig.OneOf_Config?(v45, (uint64_t)v76, &demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
        if (v43(v42, 1, v44) == 1)
        {
          int64_t v61 = (uint64_t)v80;
          uint64_t v35 = v81;
          uint64_t v36 = v82;
          uint64_t v62 = &demangling cache variable for type metadata for (AMDPbHEQuery.OneOf_Query?, AMDPbHEQuery.OneOf_Query?);
          goto LABEL_30;
        }
        uint64_t v47 = (uint64_t)v73;
        _s8CipherML32AspireSimilarityPlaintextPackingVWObTm_0(v42, (uint64_t)v73, type metadata accessor for AMDPbHEQuery.OneOf_Query);
        size_t v48 = (uint64_t)&v8[*(int *)(v70 + 48)];
        outlined init with copy of AspireSimilarityPlaintextPackingDenseRow(v46, (uint64_t)v8, type metadata accessor for AMDPbHEQuery.OneOf_Query);
        outlined init with copy of AspireSimilarityPlaintextPackingDenseRow(v47, v48, type metadata accessor for AMDPbHEQuery.OneOf_Query);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          int v49 = (uint64_t)v67;
          outlined init with copy of AspireSimilarityPlaintextPackingDenseRow((uint64_t)v8, (uint64_t)v67, type metadata accessor for AMDPbHEQuery.OneOf_Query);
          if (swift_getEnumCaseMultiPayload() != 1)
          {
            uint64_t v63 = type metadata accessor for AMDPbPECQuery;
LABEL_28:
            outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v49, v63);
            outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v8, &demangling cache variable for type metadata for (AMDPbHEQuery.OneOf_Query, AMDPbHEQuery.OneOf_Query));
            uint64_t v52 = (uint64_t)v73;
LABEL_29:
            outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v52, type metadata accessor for AMDPbHEQuery.OneOf_Query);
            uint64_t v62 = &demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?;
            int64_t v61 = (uint64_t)v80;
            uint64_t v35 = v81;
            uint64_t v36 = v82;
LABEL_30:
            outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v76, type metadata accessor for AMDPbHEQuery.OneOf_Query);
LABEL_31:
            outlined destroy of AMDPbHEConfig.OneOf_Config?(v61, v62);
            break;
          }
          uint64_t v50 = v69;
          _s8CipherML32AspireSimilarityPlaintextPackingVWObTm_0(v48, v69, type metadata accessor for AMDPbPECQuery);
          uint64_t v51 = static AMDPbPECQuery.== infix(_:_:)(v49, v50);
          outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v50, type metadata accessor for AMDPbPECQuery);
          outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v49, type metadata accessor for AMDPbPECQuery);
          outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v74, type metadata accessor for AMDPbHEQuery.OneOf_Query);
          uint64_t v52 = (uint64_t)v73;
          uint64_t v53 = (uint64_t)v76;
          if ((v51 & 1) == 0) {
            goto LABEL_29;
          }
        }
        else
        {
          int v49 = (uint64_t)v66;
          outlined init with copy of AspireSimilarityPlaintextPackingDenseRow((uint64_t)v8, (uint64_t)v66, type metadata accessor for AMDPbHEQuery.OneOf_Query);
          if (swift_getEnumCaseMultiPayload() == 1)
          {
            uint64_t v63 = type metadata accessor for AMDPbPIRQuery;
            goto LABEL_28;
          }
          size_t v54 = v68;
          _s8CipherML32AspireSimilarityPlaintextPackingVWObTm_0(v48, v68, type metadata accessor for AMDPbPIRQuery);
          uint64_t v55 = static AMDPbPIRQuery.== infix(_:_:)(v49, v54);
          outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v54, type metadata accessor for AMDPbPIRQuery);
          outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v49, type metadata accessor for AMDPbPIRQuery);
          outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v8, type metadata accessor for AMDPbHEQuery.OneOf_Query);
          uint64_t v52 = (uint64_t)v73;
          uint64_t v53 = (uint64_t)v76;
          if ((v55 & 1) == 0) {
            goto LABEL_29;
          }
        }
        outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v52, type metadata accessor for AMDPbHEQuery.OneOf_Query);
        outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v53, type metadata accessor for AMDPbHEQuery.OneOf_Query);
      }
      unint64_t v56 = v30;
      uint64_t v57 = v32;
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v80, &demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
      uint64_t v59 = (uint64_t)v81;
      uint64_t v58 = (uint64_t)v82;
      type metadata accessor for UnknownStorage();
      _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_2(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
      uint64_t v60 = dispatch thunk of static Equatable.== infix(_:_:)();
      outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v58, type metadata accessor for AMDPbHEQuery);
      outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v59, type metadata accessor for AMDPbHEQuery);
      uint64_t v34 = v78 - 1;
      if (v60)
      {
        v33 += v71;
        uint64_t v32 = v57;
        uint64_t v30 = v56;
        uint64_t v8 = v74;
        if (v78) {
          continue;
        }
      }
      return v60 & 1;
    }
    outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v36, type metadata accessor for AMDPbHEQuery);
    outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v35, type metadata accessor for AMDPbHEQuery);
    goto LABEL_33;
  }
  uint64_t v60 = 1;
  return v60 & 1;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int (**v52)(uint64_t, uint64_t, uint64_t);
  uint64_t *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int (*v62)(uint64_t, uint64_t, uint64_t);
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  _DWORD *v74;
  uint64_t v75;
  unsigned int (**v76)(uint64_t, uint64_t, uint64_t);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int (*v88)(uint64_t, uint64_t, uint64_t);
  uint64_t v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  int EnumCaseMultiPayload;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  void *v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  BOOL v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  int *v154;
  int *v155;
  uint64_t v156;
  int v157;
  int v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char v186;
  uint64_t v187;
  char v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unsigned int (*v193)(uint64_t, uint64_t, uint64_t);
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  char v197;
  uint64_t v198;
  char v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t *v203;
  uint64_t *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  char v209;
  uint64_t (*v210)(uint64_t);
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t *v214;
  uint64_t (*v216)(uint64_t);
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t v220;
  uint64_t *v221;
  unsigned int (**v222)(uint64_t, uint64_t, uint64_t);
  uint64_t v223;
  uint64_t v224;
  char *v225;
  uint64_t v226;
  unsigned int (**v227)(uint64_t, uint64_t, uint64_t);
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  unsigned int (**v235)(uint64_t, uint64_t, uint64_t);
  uint64_t *v236;
  uint64_t v237;
  uint64_t v238;
  unint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t *v250;
  uint64_t v251;
  void *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t *v258;
  uint64_t v259;
  uint64_t *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  char *v266;
  char *v267;
  uint64_t v268;
  uint64_t *v269;
  uint64_t v270;
  char v271;
  void __s1[4];

  void __s1[3] = *MEMORY[0x263EF8340];
  uint64_t v248 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  uint64_t v4 = *(void *)(v248 - 8);
  MEMORY[0x270FA5388](v248);
  uint64_t v241 = (uint64_t)&v217 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  MEMORY[0x270FA5388](v6 - 8);
  int v242 = (uint64_t)&v217 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v246 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireSimilarityPlaintextPacking?, AspireSimilarityPlaintextPacking?));
  MEMORY[0x270FA5388](v246);
  uint64_t v247 = (uint64_t)&v217 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v243 = type metadata accessor for AspireHeSerializedFullCiphertext(0);
  MEMORY[0x270FA5388](v243);
  uint64_t v258 = (uint64_t *)((char *)&v217 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v245 = type metadata accessor for AspireHeSerializedSeededCiphertext(0);
  MEMORY[0x270FA5388](v245);
  uint64_t v252 = (uint64_t *)((char *)&v217 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v249 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType, AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType));
  MEMORY[0x270FA5388](v249);
  uint64_t v253 = (uint64_t)&v217 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v257 = type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(0);
  uint64_t v12 = *(void *)(v257 - 8);
  unint64_t v13 = MEMORY[0x270FA5388](v257);
  uint64_t v15 = (uint64_t *)((char *)&v217 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v16 = MEMORY[0x270FA5388](v13);
  uint64_t v250 = (uint64_t *)((char *)&v217 - v17);
  MEMORY[0x270FA5388](v16);
  uint64_t v254 = (uint64_t)&v217 - v18;
  uint64_t v256 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?, AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?));
  MEMORY[0x270FA5388](v256);
  BOOL v20 = (char *)&v217 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  uint64_t v22 = MEMORY[0x270FA5388](v21 - 8);
  uint64_t v255 = (uint64_t)&v217 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = MEMORY[0x270FA5388](v22);
  uint64_t v261 = (uint64_t)&v217 - v25;
  MEMORY[0x270FA5388](v24);
  v259 = (uint64_t)&v217 - v26;
  v251 = type metadata accessor for AspireHeSerializedCiphertext(0);
  uint64_t v244 = *(void *)(v251 - 8);
  uint64_t v27 = MEMORY[0x270FA5388](v251);
  uint64_t v268 = (uint64_t)&v217 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v27);
  uint64_t v267 = (char *)&v217 - v29;
  uint64_t v265 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
  uint64_t v30 = *(void *)(v265 - 8);
  MEMORY[0x270FA5388](v265);
  uint64_t v270 = (uint64_t)&v217 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireSimilaritySerializedCiphertextMatrix?, AspireSimilaritySerializedCiphertextMatrix?));
  MEMORY[0x270FA5388](v32);
  uint64_t v264 = (uint64_t)&v217 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
  uint64_t v35 = MEMORY[0x270FA5388](v34 - 8);
  uint64_t v262 = (uint64_t)&v217 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = MEMORY[0x270FA5388](v35);
  v266 = (char *)&v217 - v38;
  MEMORY[0x270FA5388](v37);
  uint64_t v263 = (uint64_t)&v217 - v39;
  uint64_t v40 = type metadata accessor for AMDPbPECShardReply(0);
  double v41 = MEMORY[0x270FA5388](v40);
  uint64_t v260 = (uint64_t *)((char *)&v217 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v43 = MEMORY[0x270FA5388](v41);
  uint64_t v269 = (uint64_t *)((char *)&v217 - v45);
  uint64_t v46 = *(void *)(a1 + 16);
  if (v46 != *(void *)(a2 + 16))
  {
LABEL_164:
    uint64_t v209 = 0;
    return v209 & 1;
  }
  if (v46 && a1 != a2)
  {
    uint64_t v240 = v43;
    uint64_t v237 = v32;
    uint64_t v236 = v15;
    uint64_t v47 = 0;
    uint64_t v226 = 0;
    size_t v48 = (*(unsigned __int8 *)(v44 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80);
    int v49 = a1 + v48;
    uint64_t v50 = a2 + v48;
    uint64_t v51 = *(void *)(v44 + 72);
    uint64_t v52 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v30 + 48);
    int v235 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    uint64_t v53 = &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?;
    uint64_t v222 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
    uint64_t v221 = &demangling cache variable for type metadata for (AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?, AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    size_t v54 = v260;
    uint64_t v55 = (uint64_t)v269;
    unint64_t v56 = (uint64_t)v266;
    uint64_t v227 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v30 + 48);
    uint64_t v230 = v46;
    uint64_t v229 = v49;
    uint64_t v234 = v50;
    uint64_t v228 = v51;
    uint64_t v225 = v20;
    while (1)
    {
      uint64_t v238 = v47;
      uint64_t v57 = v51 * v47;
      outlined init with copy of AspireSimilarityPlaintextPackingDenseRow(v49 + v51 * v47, v55, type metadata accessor for AMDPbPECShardReply);
      outlined init with copy of AspireSimilarityPlaintextPackingDenseRow(v50 + v57, (uint64_t)v54, type metadata accessor for AMDPbPECShardReply);
      uint64_t v58 = v240;
      uint64_t v59 = v263;
      outlined init with copy of AMDPbHEConfig.OneOf_Config?(v55 + *(int *)(v240 + 28), v263, v53);
      outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v54 + *(int *)(v58 + 28), v56, v53);
      uint64_t v60 = v264;
      int64_t v61 = v264 + *(int *)(v237 + 48);
      outlined init with copy of AMDPbHEConfig.OneOf_Config?(v59, v264, v53);
      outlined init with copy of AMDPbHEConfig.OneOf_Config?(v56, v61, v53);
      uint64_t v62 = *v52;
      uint64_t v63 = v56;
      uint64_t v64 = v265;
      if ((*v52)(v60, 1, v265) == 1)
      {
        uint64_t v65 = v54;
        size_t v66 = v63;
        outlined destroy of AMDPbHEConfig.OneOf_Config?(v63, v53);
        outlined destroy of AMDPbHEConfig.OneOf_Config?(v59, v53);
        if (v62(v61, 1, v64) != 1)
        {
          uint64_t v214 = &demangling cache variable for type metadata for (AspireSimilaritySerializedCiphertextMatrix?, AspireSimilaritySerializedCiphertextMatrix?);
          size_t v54 = v65;
          goto LABEL_162;
        }
        uint64_t v67 = v53;
        outlined destroy of AMDPbHEConfig.OneOf_Config?(v60, v53);
        uint64_t v50 = v234;
        unint64_t v56 = v66;
        size_t v54 = v65;
        uint64_t v68 = v269;
      }
      else
      {
        unint64_t v69 = v53;
        uint64_t v70 = v262;
        outlined init with copy of AMDPbHEConfig.OneOf_Config?(v60, v262, v69);
        int64_t v71 = v62(v61, 1, v64);
        uint64_t v72 = (uint64_t)v267;
        if (v71 == 1)
        {
          uint64_t v214 = &demangling cache variable for type metadata for (AspireSimilaritySerializedCiphertextMatrix?, AspireSimilaritySerializedCiphertextMatrix?);
          unint64_t v56 = v63;
          goto LABEL_161;
        }
        size_t v73 = v61;
        uint64_t v74 = (_DWORD *)v270;
        _s8CipherML32AspireSimilarityPlaintextPackingVWObTm_0(v73, v270, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
        uint64_t v75 = (uint64_t)v225;
        unint64_t v76 = v235;
        uint64_t v77 = v259;
        unint64_t v56 = v63;
        if (*(_DWORD *)v70 != *v74) {
          goto LABEL_160;
        }
        if (*(_DWORD *)(v70 + 4) != *(_DWORD *)(v270 + 4)) {
          goto LABEL_160;
        }
        int64_t v78 = *(void *)(v70 + 8);
        uint64_t v79 = *(void *)(v270 + 8);
        size_t v80 = *(void *)(v78 + 16);
        if (v80 != *(void *)(v79 + 16)) {
          goto LABEL_160;
        }
        if (v80 && v78 != v79)
        {
          char v81 = 0;
          unint64_t v82 = (*(unsigned __int8 *)(v244 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v244 + 80);
          uint64_t v233 = v78 + v82;
          uint64_t v231 = v79 + v82;
          uint64_t v232 = *(void *)(v244 + 72);
          v224 = v79;
          uint64_t v223 = v80;
          do
          {
            BOOL v83 = v232 * v81;
            outlined init with copy of AspireSimilarityPlaintextPackingDenseRow(v233 + v232 * v81, v72, type metadata accessor for AspireHeSerializedCiphertext);
            if (v81 >= *(void *)(v79 + 16))
            {
              __break(1u);
LABEL_175:
              __break(1u);
LABEL_176:
              __break(1u);
LABEL_177:
              __break(1u);
LABEL_178:
              __break(1u);
LABEL_179:
              __break(1u);
LABEL_180:
              __break(1u);
LABEL_181:
              __break(1u);
LABEL_182:
              __break(1u);
LABEL_183:
              __break(1u);
LABEL_184:
              __break(1u);
LABEL_185:
              __break(1u);
LABEL_186:
              __break(1u);
LABEL_187:
              __break(1u);
LABEL_188:
              __break(1u);
LABEL_189:
              __break(1u);
LABEL_190:
              __break(1u);
LABEL_191:
              __break(1u);
LABEL_192:
              __break(1u);
LABEL_193:
              __break(1u);
LABEL_194:
              __break(1u);
LABEL_195:
              __break(1u);
LABEL_196:
              __break(1u);
LABEL_197:
              __break(1u);
LABEL_198:
              __break(1u);
            }
            uint64_t v239 = v81;
            uint64_t v84 = v231 + v83;
            uint64_t v85 = v268;
            outlined init with copy of AspireSimilarityPlaintextPackingDenseRow(v84, v268, type metadata accessor for AspireHeSerializedCiphertext);
            outlined init with copy of AMDPbHEConfig.OneOf_Config?(v72, v77, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
            uint64_t v86 = v261;
            outlined init with copy of AMDPbHEConfig.OneOf_Config?(v85, v261, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
            uint64_t v87 = v75 + *(int *)(v256 + 48);
            outlined init with copy of AMDPbHEConfig.OneOf_Config?(v77, v75, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
            outlined init with copy of AMDPbHEConfig.OneOf_Config?(v86, v87, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
            uint64_t v88 = *v76;
            uint64_t v89 = v257;
            if ((*v76)(v75, 1, v257) == 1)
            {
              outlined destroy of AMDPbHEConfig.OneOf_Config?(v86, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
              outlined destroy of AMDPbHEConfig.OneOf_Config?(v77, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
              uint64_t v90 = v88(v87, 1, v89);
              uint64_t v70 = v262;
              unint64_t v56 = (uint64_t)v266;
              if (v90 != 1) {
                goto LABEL_159;
              }
            }
            else
            {
              uint64_t v91 = v249;
              uint64_t v92 = v255;
              outlined init with copy of AMDPbHEConfig.OneOf_Config?(v75, v255, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
              if (v88(v87, 1, v89) == 1)
              {
                uint64_t v212 = v92;
                uint64_t v213 = v261;
                uint64_t v70 = v262;
                unint64_t v56 = (uint64_t)v266;
                goto LABEL_158;
              }
              __int16 v93 = v254;
              _s8CipherML32AspireSimilarityPlaintextPackingVWObTm_0(v87, v254, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
              char v94 = v253;
              char v95 = v253 + *(int *)(v91 + 48);
              outlined init with copy of AspireSimilarityPlaintextPackingDenseRow(v92, v253, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
              outlined init with copy of AspireSimilarityPlaintextPackingDenseRow(v93, v95, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
              if (swift_getEnumCaseMultiPayload() == 1)
              {
                char v96 = v236;
                outlined init with copy of AspireSimilarityPlaintextPackingDenseRow(v94, (uint64_t)v236, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
                int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
                uint64_t v70 = v262;
                if (EnumCaseMultiPayload != 1)
                {
                  uint64_t v216 = type metadata accessor for AspireHeSerializedFullCiphertext;
LABEL_171:
                  outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v96, v216);
                  unint64_t v56 = (uint64_t)v266;
                  outlined destroy of AMDPbHEConfig.OneOf_Config?(v94, &demangling cache variable for type metadata for (AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType, AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType));
                  goto LABEL_157;
                }
                uint64_t v98 = v95;
                uint64_t v99 = v258;
                _s8CipherML32AspireSimilarityPlaintextPackingVWObTm_0(v98, (uint64_t)v258, type metadata accessor for AspireHeSerializedFullCiphertext);
                os_log_type_t v100 = *v96;
                uint64_t v101 = v96[1];
                uint64_t v103 = *v99;
                uint64_t v102 = v99[1];
                unint64_t v56 = (uint64_t)v266;
                Swift::String v104 = 0;
                unint64_t v76 = v235;
                switch(v101 >> 62)
                {
                  case 1uLL:
                    LODWORD(v104) = HIDWORD(v100) - v100;
                    if (__OFSUB__(HIDWORD(v100), v100)) {
                      goto LABEL_175;
                    }
                    Swift::String v104 = (int)v104;
LABEL_30:
                    switch(v102 >> 62)
                    {
                      case 1uLL:
                        LODWORD(v116) = HIDWORD(v103) - v103;
                        if (__OFSUB__(HIDWORD(v103), v103)) {
                          goto LABEL_179;
                        }
                        uint64_t v116 = (int)v116;
LABEL_40:
                        if (v104 != v116) {
                          goto LABEL_154;
                        }
                        if (v104 < 1) {
                          goto LABEL_85;
                        }
                        break;
                      case 2uLL:
                        uint64_t v121 = *(void *)(v103 + 16);
                        uint64_t v120 = *(void *)(v103 + 24);
                        uint64_t v115 = __OFSUB__(v120, v121);
                        uint64_t v116 = v120 - v121;
                        if (!v115) {
                          goto LABEL_40;
                        }
                        goto LABEL_180;
                      case 3uLL:
                        if (v104) {
                          goto LABEL_154;
                        }
                        goto LABEL_85;
                      default:
                        uint64_t v116 = BYTE6(v102);
                        goto LABEL_40;
                    }
                    break;
                  case 2uLL:
                    uint64_t v114 = *(void *)(v100 + 16);
                    uint64_t v113 = *(void *)(v100 + 24);
                    uint64_t v115 = __OFSUB__(v113, v114);
                    Swift::String v104 = v113 - v114;
                    if (!v115) {
                      goto LABEL_30;
                    }
                    goto LABEL_176;
                  case 3uLL:
                    goto LABEL_30;
                  default:
                    Swift::String v104 = BYTE6(v101);
                    goto LABEL_30;
                }
                switch(v101 >> 62)
                {
                  case 1uLL:
                    uint64_t v124 = (int)v100;
                    uint64_t v219 = (v100 >> 32) - (int)v100;
                    if (v100 >> 32 < (int)v100) {
                      goto LABEL_187;
                    }
                    uint64_t v220 = v100;
                    outlined copy of Data._Representation(v100, v101);
                    uint64_t v125 = __DataStorage._bytes.getter();
                    if (v125)
                    {
                      uint64_t v218 = v125;
                      double v126 = __DataStorage._offset.getter();
                      if (__OFSUB__(v124, v126)) {
                        goto LABEL_193;
                      }
                      double v127 = v218 + v124 - v126;
                    }
                    else
                    {
                      double v127 = 0;
                    }
                    __DataStorage._length.getter();
                    uint64_t v149 = v127;
                    int64_t v150 = v226;
                    closure #1 in static Data.== infix(_:_:)(v149, v103, v102, (char *)__s1);
                    uint64_t v226 = v150;
                    outlined consume of Data._Representation(v220, v101);
                    goto LABEL_84;
                  case 2uLL:
                    uint64_t v128 = *(void *)(v100 + 16);
                    uint64_t v219 = *(void *)(v100 + 24);
                    uint64_t v220 = v100;
                    swift_retain();
                    swift_retain();
                    uint64_t v129 = __DataStorage._bytes.getter();
                    if (v129)
                    {
                      unint64_t v130 = v129;
                      uint64_t v131 = __DataStorage._offset.getter();
                      if (__OFSUB__(v128, v131)) {
                        goto LABEL_194;
                      }
                      int v132 = v128;
                      uint64_t v133 = v130 + v128 - v131;
                    }
                    else
                    {
                      int v132 = v128;
                      uint64_t v133 = 0;
                    }
                    if (__OFSUB__(v219, v132)) {
                      goto LABEL_189;
                    }
                    __DataStorage._length.getter();
                    uint64_t v147 = v226;
                    closure #1 in static Data.== infix(_:_:)(v133, v103, v102, (char *)__s1);
                    uint64_t v226 = v147;
                    swift_release();
                    swift_release();
LABEL_84:
                    if ((__s1[0] & 1) == 0) {
                      goto LABEL_154;
                    }
LABEL_85:
                    uint64_t v151 = v236[2];
                    uint64_t v152 = v258[2];
                    uint64_t v153 = *(void *)(v151 + 16);
                    if (v153 != *(void *)(v152 + 16)) {
                      goto LABEL_154;
                    }
                    if (!v153 || v151 == v152) {
                      goto LABEL_93;
                    }
                    if (*(_DWORD *)(v151 + 32) != *(_DWORD *)(v152 + 32)) {
                      goto LABEL_154;
                    }
                    uint64_t v154 = (int *)(v151 + 36);
                    uint64_t v155 = (int *)(v152 + 36);
                    uint64_t v156 = v153 - 1;
                    while (v156)
                    {
                      uint64_t v158 = *v154++;
                      uint64_t v157 = v158;
                      uint64_t v159 = *v155++;
                      --v156;
                      if (v157 != v159) {
                        goto LABEL_154;
                      }
                    }
LABEL_93:
                    if (v236[3] != v258[3]
                      || (type metadata accessor for UnknownStorage(),
                          _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_2(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]), (dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0))
                    {
LABEL_154:
                      uint64_t v210 = type metadata accessor for AspireHeSerializedFullCiphertext;
                      outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v258, type metadata accessor for AspireHeSerializedFullCiphertext);
                      uint64_t v211 = (uint64_t)v236;
                      goto LABEL_156;
                    }
                    outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v258, type metadata accessor for AspireHeSerializedFullCiphertext);
                    outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v236, type metadata accessor for AspireHeSerializedFullCiphertext);
                    break;
                  case 3uLL:
                    memset(__s1, 0, 14);
                    goto LABEL_63;
                  default:
                    __s1[0] = *v96;
                    LOWORD(__s1[1]) = v101;
                    BYTE2(__s1[1]) = BYTE2(v101);
                    BYTE3(__s1[1]) = BYTE3(v101);
                    BYTE4(__s1[1]) = BYTE4(v101);
                    BYTE5(__s1[1]) = BYTE5(v101);
LABEL_63:
                    uint64_t v134 = v226;
                    closure #1 in static Data.== infix(_:_:)((uint64_t)__s1, v103, v102, &v271);
                    uint64_t v226 = v134;
                    if ((v271 & 1) == 0) {
                      goto LABEL_154;
                    }
                    goto LABEL_85;
                }
              }
              else
              {
                char v96 = v250;
                outlined init with copy of AspireSimilarityPlaintextPackingDenseRow(v94, (uint64_t)v250, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
                int v105 = swift_getEnumCaseMultiPayload();
                uint64_t v70 = v262;
                if (v105 == 1)
                {
                  uint64_t v216 = type metadata accessor for AspireHeSerializedSeededCiphertext;
                  goto LABEL_171;
                }
                _s8CipherML32AspireSimilarityPlaintextPackingVWObTm_0(v95, (uint64_t)v252, type metadata accessor for AspireHeSerializedSeededCiphertext);
                size_t v106 = v252;
                int v107 = *v96;
                uint64_t v108 = v96[1];
                uint64_t v110 = *v252;
                uint64_t v109 = v252[1];
                unint64_t v56 = (uint64_t)v266;
                os_log_type_t v111 = 0;
                uint64_t v112 = (uint64_t)v250;
                switch(v108 >> 62)
                {
                  case 1uLL:
                    LODWORD(v111) = HIDWORD(v107) - v107;
                    if (__OFSUB__(HIDWORD(v107), v107)) {
                      goto LABEL_177;
                    }
                    os_log_type_t v111 = (int)v111;
LABEL_35:
                    switch(v109 >> 62)
                    {
                      case 1uLL:
                        LODWORD(v119) = HIDWORD(v110) - v110;
                        if (__OFSUB__(HIDWORD(v110), v110)) {
                          goto LABEL_181;
                        }
                        uint64_t v119 = (int)v119;
LABEL_49:
                        if (v111 != v119) {
                          goto LABEL_155;
                        }
                        if (v111 < 1) {
                          goto LABEL_98;
                        }
                        break;
                      case 2uLL:
                        uint64_t v123 = *(void *)(v110 + 16);
                        char v122 = *(void *)(v110 + 24);
                        uint64_t v115 = __OFSUB__(v122, v123);
                        uint64_t v119 = v122 - v123;
                        if (!v115) {
                          goto LABEL_49;
                        }
                        goto LABEL_182;
                      case 3uLL:
                        if (v111) {
                          goto LABEL_155;
                        }
                        goto LABEL_98;
                      default:
                        uint64_t v119 = BYTE6(v109);
                        goto LABEL_49;
                    }
                    break;
                  case 2uLL:
                    uint64_t v118 = *(void *)(v107 + 16);
                    int64_t v117 = *(void *)(v107 + 24);
                    uint64_t v115 = __OFSUB__(v117, v118);
                    os_log_type_t v111 = v117 - v118;
                    if (!v115) {
                      goto LABEL_35;
                    }
                    goto LABEL_178;
                  case 3uLL:
                    goto LABEL_35;
                  default:
                    os_log_type_t v111 = BYTE6(v108);
                    goto LABEL_35;
                }
                switch(v108 >> 62)
                {
                  case 1uLL:
                    double v135 = (int)v107;
                    uint64_t v219 = (v107 >> 32) - (int)v107;
                    if (v107 >> 32 < (int)v107) {
                      goto LABEL_188;
                    }
                    uint64_t v220 = v107;
                    outlined copy of Data._Representation(v107, v108);
                    double v136 = __DataStorage._bytes.getter();
                    if (v136)
                    {
                      uint64_t v137 = v136;
                      unint64_t v138 = __DataStorage._offset.getter();
                      if (__OFSUB__(v135, v138)) {
                        goto LABEL_195;
                      }
                      uint64_t v139 = v137 + v135 - v138;
                    }
                    else
                    {
                      uint64_t v139 = 0;
                    }
                    __DataStorage._length.getter();
                    uint64_t v160 = v139;
                    int v161 = v226;
                    closure #1 in static Data.== infix(_:_:)(v160, v110, v109, (char *)__s1);
                    uint64_t v226 = v161;
                    outlined consume of Data._Representation(v220, v108);
                    size_t v106 = v252;
                    uint64_t v112 = (uint64_t)v250;
                    if (__s1[0]) {
                      goto LABEL_98;
                    }
                    goto LABEL_155;
                  case 2uLL:
                    uint64_t v140 = *(void *)(v107 + 16);
                    uint64_t v219 = *(void *)(v107 + 24);
                    uint64_t v220 = v107;
                    swift_retain();
                    swift_retain();
                    uint64_t v141 = __DataStorage._bytes.getter();
                    if (v141)
                    {
                      int v142 = v141;
                      int v143 = __DataStorage._offset.getter();
                      if (__OFSUB__(v140, v143)) {
                        goto LABEL_196;
                      }
                      uint64_t v144 = v140;
                      uint64_t v145 = v142 + v140 - v143;
                    }
                    else
                    {
                      uint64_t v144 = v140;
                      uint64_t v145 = 0;
                    }
                    if (__OFSUB__(v219, v144)) {
                      goto LABEL_190;
                    }
                    __DataStorage._length.getter();
                    int64_t v148 = v226;
                    closure #1 in static Data.== infix(_:_:)(v145, v110, v109, (char *)__s1);
                    uint64_t v226 = v148;
                    swift_release();
                    swift_release();
                    size_t v106 = v252;
                    if ((__s1[0] & 1) == 0) {
                      goto LABEL_155;
                    }
LABEL_98:
                    uint64_t v162 = *(void *)(v112 + 16);
                    int64_t v163 = *(void *)(v112 + 24);
                    uint64_t v165 = v106[2];
                    uint64_t v164 = v106[3];
                    uint64_t v166 = 0;
                    switch(v163 >> 62)
                    {
                      case 1uLL:
                        LODWORD(v166) = HIDWORD(v162) - v162;
                        if (__OFSUB__(HIDWORD(v162), v162)) {
                          goto LABEL_183;
                        }
                        uint64_t v166 = (int)v166;
LABEL_103:
                        switch(v164 >> 62)
                        {
                          case 1uLL:
                            LODWORD(v169) = HIDWORD(v165) - v165;
                            if (__OFSUB__(HIDWORD(v165), v165)) {
                              goto LABEL_185;
                            }
                            uint64_t v169 = (int)v169;
LABEL_108:
                            if (v166 != v169) {
                              goto LABEL_155;
                            }
                            if (v166 < 1) {
                              goto LABEL_130;
                            }
                            break;
                          case 2uLL:
                            uint64_t v171 = *(void *)(v165 + 16);
                            unint64_t v170 = *(void *)(v165 + 24);
                            uint64_t v115 = __OFSUB__(v170, v171);
                            uint64_t v169 = v170 - v171;
                            if (!v115) {
                              goto LABEL_108;
                            }
                            goto LABEL_186;
                          case 3uLL:
                            if (v166) {
                              goto LABEL_155;
                            }
                            goto LABEL_130;
                          default:
                            uint64_t v169 = BYTE6(v164);
                            goto LABEL_108;
                        }
                        break;
                      case 2uLL:
                        uint64_t v168 = *(void *)(v162 + 16);
                        uint64_t v167 = *(void *)(v162 + 24);
                        uint64_t v115 = __OFSUB__(v167, v168);
                        uint64_t v166 = v167 - v168;
                        if (!v115) {
                          goto LABEL_103;
                        }
                        goto LABEL_184;
                      case 3uLL:
                        goto LABEL_103;
                      default:
                        uint64_t v166 = BYTE6(v163);
                        goto LABEL_103;
                    }
                    break;
                  case 3uLL:
                    memset(__s1, 0, 14);
                    goto LABEL_73;
                  default:
                    __s1[0] = *v96;
                    LOWORD(__s1[1]) = v108;
                    BYTE2(__s1[1]) = BYTE2(v108);
                    BYTE3(__s1[1]) = BYTE3(v108);
                    BYTE4(__s1[1]) = BYTE4(v108);
                    BYTE5(__s1[1]) = BYTE5(v108);
LABEL_73:
                    uint64_t v146 = v226;
                    closure #1 in static Data.== infix(_:_:)((uint64_t)__s1, v110, v109, &v271);
                    size_t v106 = v252;
                    uint64_t v226 = v146;
                    if ((v271 & 1) == 0) {
                      goto LABEL_155;
                    }
                    goto LABEL_98;
                }
                switch(v163 >> 62)
                {
                  case 1uLL:
                    uint64_t v219 = v106[2];
                    uint64_t v220 = v164;
                    uint64_t v218 = (v162 >> 32) - (int)v162;
                    if (v162 >> 32 < (int)v162) {
                      goto LABEL_191;
                    }
                    outlined copy of Data._Representation(v162, v163);
                    uint64_t v172 = __DataStorage._bytes.getter();
                    if (v172)
                    {
                      uint64_t v173 = v172;
                      uint64_t v174 = __DataStorage._offset.getter();
                      if (__OFSUB__((int)v162, v174)) {
                        goto LABEL_197;
                      }
                      __int16 v175 = v173 + (int)v162 - v174;
                    }
                    else
                    {
                      __int16 v175 = 0;
                    }
                    __DataStorage._length.getter();
                    uint64_t v184 = v175;
                    uint64_t v185 = v226;
                    closure #1 in static Data.== infix(_:_:)(v184, v219, v220, (char *)__s1);
                    uint64_t v226 = v185;
                    outlined consume of Data._Representation(v162, v163);
                    goto LABEL_129;
                  case 2uLL:
                    uint64_t v220 = v106[3];
                    char v176 = *(void *)(v162 + 16);
                    uint64_t v219 = *(void *)(v162 + 24);
                    swift_retain();
                    swift_retain();
                    char v177 = __DataStorage._bytes.getter();
                    if (v177)
                    {
                      char v178 = v177;
                      char v179 = __DataStorage._offset.getter();
                      if (__OFSUB__(v176, v179)) {
                        goto LABEL_198;
                      }
                      uint64_t v180 = v176;
                      uint64_t v181 = v178 + v176 - v179;
                    }
                    else
                    {
                      uint64_t v180 = v176;
                      uint64_t v181 = 0;
                    }
                    if (__OFSUB__(v219, v180)) {
                      goto LABEL_192;
                    }
                    __DataStorage._length.getter();
                    uint64_t v183 = v226;
                    closure #1 in static Data.== infix(_:_:)(v181, v165, v220, (char *)__s1);
                    uint64_t v226 = v183;
                    swift_release();
                    swift_release();
LABEL_129:
                    size_t v106 = v252;
                    if ((__s1[0] & 1) == 0) {
                      goto LABEL_155;
                    }
LABEL_130:
                    type metadata accessor for UnknownStorage();
                    _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_2(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
                    uint64_t v186 = dispatch thunk of static Equatable.== infix(_:_:)();
                    size_t v106 = v252;
                    if ((v186 & 1) == 0)
                    {
LABEL_155:
                      uint64_t v210 = type metadata accessor for AspireHeSerializedSeededCiphertext;
                      outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v106, type metadata accessor for AspireHeSerializedSeededCiphertext);
                      uint64_t v211 = v112;
LABEL_156:
                      outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v211, v210);
                      outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v253, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
LABEL_157:
                      uint64_t v212 = v255;
                      uint64_t v72 = (uint64_t)v267;
                      uint64_t v213 = v261;
                      outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v254, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
                      uint64_t v221 = &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?;
LABEL_158:
                      outlined destroy of AMDPbHEConfig.OneOf_Config?(v213, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
                      outlined destroy of AMDPbHEConfig.OneOf_Config?(v259, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
                      outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v212, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
LABEL_159:
                      outlined destroy of AMDPbHEConfig.OneOf_Config?(v75, v221);
                      outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v268, type metadata accessor for AspireHeSerializedCiphertext);
                      outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v72, type metadata accessor for AspireHeSerializedCiphertext);
LABEL_160:
                      outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v270, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
                      uint64_t v214 = &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?;
                      size_t v54 = v260;
LABEL_161:
                      outlined destroy of AMDPbHEConfig.OneOf_Config?(v56, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
                      outlined destroy of AMDPbHEConfig.OneOf_Config?(v263, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
                      outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v70, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
LABEL_162:
                      uint64_t v68 = v269;
                      outlined destroy of AMDPbHEConfig.OneOf_Config?(v264, v214);
                      goto LABEL_163;
                    }
                    outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v252, type metadata accessor for AspireHeSerializedSeededCiphertext);
                    outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v112, type metadata accessor for AspireHeSerializedSeededCiphertext);
                    unint64_t v76 = v235;
                    break;
                  case 3uLL:
                    memset(__s1, 0, 14);
                    goto LABEL_122;
                  default:
                    __s1[0] = *(void *)(v112 + 16);
                    LOWORD(__s1[1]) = v163;
                    BYTE2(__s1[1]) = BYTE2(v163);
                    BYTE3(__s1[1]) = BYTE3(v163);
                    BYTE4(__s1[1]) = BYTE4(v163);
                    BYTE5(__s1[1]) = BYTE5(v163);
LABEL_122:
                    int v182 = v226;
                    closure #1 in static Data.== infix(_:_:)((uint64_t)__s1, v165, v164, &v271);
                    size_t v106 = v252;
                    uint64_t v226 = v182;
                    if ((v271 & 1) == 0) {
                      goto LABEL_155;
                    }
                    goto LABEL_130;
                }
              }
              outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v253, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
              outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v254, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
              outlined destroy of AMDPbHEConfig.OneOf_Config?(v261, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
              uint64_t v77 = v259;
              outlined destroy of AMDPbHEConfig.OneOf_Config?(v259, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
              outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v255, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
            }
            outlined destroy of AMDPbHEConfig.OneOf_Config?(v75, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
            int v187 = v268;
            type metadata accessor for UnknownStorage();
            _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_2(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
            uint64_t v72 = (uint64_t)v267;
            int v188 = dispatch thunk of static Equatable.== infix(_:_:)();
            outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v187, type metadata accessor for AspireHeSerializedCiphertext);
            outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v72, type metadata accessor for AspireHeSerializedCiphertext);
            uint64_t v79 = v224;
            if ((v188 & 1) == 0) {
              goto LABEL_160;
            }
            char v81 = v239 + 1;
          }
          while (v239 + 1 != v223);
        }
        uint64_t v189 = *(int *)(v265 + 32);
        uint64_t v190 = v270 + v189;
        uint64_t v191 = v247;
        uint64_t v192 = v247 + *(int *)(v246 + 48);
        outlined init with copy of AMDPbHEConfig.OneOf_Config?(v70 + v189, v247, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
        outlined init with copy of AMDPbHEConfig.OneOf_Config?(v190, v192, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
        uint64_t v193 = *v222;
        uint64_t v194 = v248;
        if ((*v222)(v191, 1, v248) == 1)
        {
          if (v193(v192, 1, v194) != 1) {
            goto LABEL_173;
          }
          outlined destroy of AMDPbHEConfig.OneOf_Config?(v191, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
          unint64_t v56 = (uint64_t)v266;
          uint64_t v50 = v234;
        }
        else
        {
          uint64_t v195 = v242;
          outlined init with copy of AMDPbHEConfig.OneOf_Config?(v191, v242, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
          if (v193(v192, 1, v194) == 1)
          {
            outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v195, type metadata accessor for AspireSimilarityPlaintextPacking);
LABEL_173:
            outlined destroy of AMDPbHEConfig.OneOf_Config?(v191, &demangling cache variable for type metadata for (AspireSimilarityPlaintextPacking?, AspireSimilarityPlaintextPacking?));
            unint64_t v56 = (uint64_t)v266;
            goto LABEL_160;
          }
          uint64_t v196 = v241;
          _s8CipherML32AspireSimilarityPlaintextPackingVWObTm_0(v192, v241, type metadata accessor for AspireSimilarityPlaintextPacking);
          uint64_t v197 = specialized static AspireSimilarityPlaintextPacking.== infix(_:_:)(v195, v196);
          outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v196, type metadata accessor for AspireSimilarityPlaintextPacking);
          outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v195, type metadata accessor for AspireSimilarityPlaintextPacking);
          outlined destroy of AMDPbHEConfig.OneOf_Config?(v191, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
          unint64_t v56 = (uint64_t)v266;
          uint64_t v50 = v234;
          if ((v197 & 1) == 0) {
            goto LABEL_160;
          }
        }
        uint64_t v198 = v270;
        type metadata accessor for UnknownStorage();
        _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_2(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
        uint64_t v199 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v198, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
        outlined destroy of AMDPbHEConfig.OneOf_Config?(v56, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
        outlined destroy of AMDPbHEConfig.OneOf_Config?(v263, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
        outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v70, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
        uint64_t v67 = &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?;
        outlined destroy of AMDPbHEConfig.OneOf_Config?(v264, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
        uint64_t v68 = v269;
        size_t v54 = v260;
        if ((v199 & 1) == 0) {
          break;
        }
      }
      uint64_t v200 = *v68;
      uint64_t v201 = *v54;
      uint64_t v202 = *(void *)(*v68 + 16);
      if (v202 != *(void *)(*v54 + 16)) {
        break;
      }
      if (v202 && v200 != v201)
      {
        if (*(void *)(v200 + 32) != *(void *)(v201 + 32)) {
          break;
        }
        uint64_t v203 = (uint64_t *)(v200 + 40);
        uint64_t v204 = (uint64_t *)(v201 + 40);
        uint64_t v205 = v202 - 1;
        while (v205)
        {
          uint64_t v207 = *v203++;
          uint64_t v206 = v207;
          uint64_t v208 = *v204++;
          --v205;
          if (v206 != v208) {
            goto LABEL_163;
          }
        }
      }
      if ((specialized static Array<A>.== infix(_:_:)(v68[1], v54[1]) & 1) == 0) {
        break;
      }
      type metadata accessor for UnknownStorage();
      _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_2(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
      uint64_t v55 = (uint64_t)v269;
      uint64_t v209 = dispatch thunk of static Equatable.== infix(_:_:)();
      outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v54, type metadata accessor for AMDPbPECShardReply);
      outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v55, type metadata accessor for AMDPbPECShardReply);
      if (v209)
      {
        uint64_t v47 = v238 + 1;
        int v49 = v229;
        uint64_t v51 = v228;
        uint64_t v52 = v227;
        uint64_t v53 = v67;
        if (v238 + 1 != v230) {
          continue;
        }
      }
      return v209 & 1;
    }
LABEL_163:
    outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v54, type metadata accessor for AMDPbPECShardReply);
    outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v68, type metadata accessor for AMDPbPECShardReply);
    goto LABEL_164;
  }
  uint64_t v209 = 1;
  return v209 & 1;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  BOOL v19;
  char v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;

  uint64_t v4 = type metadata accessor for AMDPbPIRShardConfig(0);
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v7 = (uint64_t *)((char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v5);
  uint64_t v10 = (uint64_t *)((char *)&v28 - v9);
  unint64_t v11 = *(void *)(a1 + 16);
  if (v11 == *(void *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      BOOL v20 = 1;
      return v20 & 1;
    }
    uint64_t v12 = 0;
    unint64_t v13 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    uint64_t v29 = a1 + v13;
    uint64_t v14 = a2 + v13;
    uint64_t v15 = *(void *)(v8 + 72);
    while (1)
    {
      outlined init with copy of AspireSimilarityPlaintextPackingDenseRow(v29 + v15 * v12, (uint64_t)v10, type metadata accessor for AMDPbPIRShardConfig);
      outlined init with copy of AspireSimilarityPlaintextPackingDenseRow(v14 + v15 * v12, (uint64_t)v7, type metadata accessor for AMDPbPIRShardConfig);
      if (*v10 != *v7) {
        break;
      }
      if (v10[1] != v7[1]) {
        break;
      }
      unint64_t v16 = (void *)v10[2];
      uint64_t v17 = (void *)v7[2];
      uint64_t v18 = v16[2];
      if (v18 != v17[2]) {
        break;
      }
      if (v18) {
        uint64_t v19 = v16 == v17;
      }
      else {
        uint64_t v19 = 1;
      }
      if (!v19)
      {
        if (v16[4] != v17[4]) {
          break;
        }
        if (v18 != 1)
        {
          if (v16[5] != v17[5]) {
            break;
          }
          unint64_t v21 = v16 + 6;
          uint64_t v22 = v17 + 6;
          uint64_t v23 = v18 - 2;
          while (v23)
          {
            uint64_t v25 = *v21++;
            uint64_t v24 = v25;
            uint64_t v26 = *v22++;
            --v23;
            if (v24 != v26) {
              goto LABEL_21;
            }
          }
        }
      }
      type metadata accessor for UnknownStorage();
      _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_2(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
      BOOL v20 = dispatch thunk of static Equatable.== infix(_:_:)();
      outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v7, type metadata accessor for AMDPbPIRShardConfig);
      outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v10, type metadata accessor for AMDPbPIRShardConfig);
      if ((v20 & 1) != 0 && ++v12 != v11) {
        continue;
      }
      return v20 & 1;
    }
LABEL_21:
    outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v7, type metadata accessor for AMDPbPIRShardConfig);
    outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v10, type metadata accessor for AMDPbPIRShardConfig);
  }
  BOOL v20 = 0;
  return v20 & 1;
}

{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int (**v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v35;
  char *v36;
  char *v37;
  unsigned int (**v38)(char *, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  uint64_t v44 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  uint64_t v4 = *(void *)(v44 - 8);
  MEMORY[0x270FA5388](v44);
  uint64_t v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireSimilarityPlaintextPacking?, AspireSimilarityPlaintextPacking?));
  MEMORY[0x270FA5388](v40);
  unint64_t v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = type metadata accessor for AspireSimilaritySerializedDcrtPlaintextMatrix(0);
  MEMORY[0x270FA5388](v43);
  unint64_t v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v35 - v16;
  uint64_t v42 = a1;
  uint64_t v18 = *(void *)(a1 + 16);
  if (v18 != *(void *)(a2 + 16))
  {
LABEL_20:
    uint64_t v33 = 0;
    return v33 & 1;
  }
  if (v18)
  {
    uint64_t v19 = a2;
    if (v42 != a2)
    {
      uint64_t v36 = v6;
      uint64_t v37 = v9;
      BOOL v20 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
      unint64_t v21 = *(void *)(v15 + 72);
      uint64_t v22 = (unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48);
      uint64_t v23 = v18 - 1;
      size_t v38 = (unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48);
      int v39 = v21;
      while (1)
      {
        double v41 = v23;
        outlined init with copy of AspireSimilarityPlaintextPackingDenseRow(v42 + v20, (uint64_t)v17, type metadata accessor for AspireSimilaritySerializedDcrtPlaintextMatrix);
        outlined init with copy of AspireSimilarityPlaintextPackingDenseRow(v19 + v20, (uint64_t)v13, type metadata accessor for AspireSimilaritySerializedDcrtPlaintextMatrix);
        if (*(_DWORD *)v17 != *(_DWORD *)v13
          || *((_DWORD *)v17 + 1) != *((_DWORD *)v13 + 1)
          || (specialized static Array<A>.== infix(_:_:)(*((void *)v17 + 1), *((void *)v13 + 1)) & 1) == 0)
        {
          break;
        }
        uint64_t v24 = *(int *)(v43 + 32);
        uint64_t v25 = (uint64_t)&v13[v24];
        uint64_t v26 = (uint64_t)&v11[*(int *)(v40 + 48)];
        outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)&v17[v24], (uint64_t)v11, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
        outlined init with copy of AMDPbHEConfig.OneOf_Config?(v25, v26, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
        uint64_t v27 = *v22;
        if ((*v22)(v11, 1, v44) == 1)
        {
          if (v27((char *)v26, 1, v44) != 1) {
            goto LABEL_18;
          }
          outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v11, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
        }
        else
        {
          uint64_t v28 = (uint64_t)v11;
          uint64_t v29 = (uint64_t)v11;
          uint64_t v30 = (uint64_t)v37;
          outlined init with copy of AMDPbHEConfig.OneOf_Config?(v28, (uint64_t)v37, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
          if (v27((char *)v26, 1, v44) == 1)
          {
            outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v30, type metadata accessor for AspireSimilarityPlaintextPacking);
            unint64_t v11 = (char *)v29;
LABEL_18:
            outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v11, &demangling cache variable for type metadata for (AspireSimilarityPlaintextPacking?, AspireSimilarityPlaintextPacking?));
            break;
          }
          uint64_t v31 = (uint64_t)v36;
          _s8CipherML32AspireSimilarityPlaintextPackingVWObTm_0(v26, (uint64_t)v36, type metadata accessor for AspireSimilarityPlaintextPacking);
          uint64_t v32 = specialized static AspireSimilarityPlaintextPacking.== infix(_:_:)(v30, v31);
          outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v31, type metadata accessor for AspireSimilarityPlaintextPacking);
          outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(v30, type metadata accessor for AspireSimilarityPlaintextPacking);
          outlined destroy of AMDPbHEConfig.OneOf_Config?(v29, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
          unint64_t v11 = (char *)v29;
          if ((v32 & 1) == 0) {
            break;
          }
        }
        type metadata accessor for UnknownStorage();
        _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_2(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
        uint64_t v33 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v13, type metadata accessor for AspireSimilaritySerializedDcrtPlaintextMatrix);
        outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v17, type metadata accessor for AspireSimilaritySerializedDcrtPlaintextMatrix);
        uint64_t v23 = v41 - 1;
        if (v33)
        {
          uint64_t v22 = v38;
          v20 += v39;
          if (v41) {
            continue;
          }
        }
        return v33 & 1;
      }
      outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v13, type metadata accessor for AspireSimilaritySerializedDcrtPlaintextMatrix);
      outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v17, type metadata accessor for AspireSimilaritySerializedDcrtPlaintextMatrix);
      goto LABEL_20;
    }
  }
  uint64_t v33 = 1;
  return v33 & 1;
}

{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  size_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  size_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  size_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  int64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  size_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  size_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  const void *v80;
  char *v81;
  uint64_t v82;
  size_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  BOOL v88;
  char v89;
  float *v90;
  float *v91;
  uint64_t v92;
  float v93;
  float v94;
  float v95;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t __s2;
  __int16 v105;
  char v106;
  char v107;
  char v108;
  char v109;
  void __s1[3];

  __s1[2] = *MEMORY[0x263EF8340];
  uint64_t v4 = type metadata accessor for AspireSimilaritySimilarityDbRow(0);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char **)((char *)&v97 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char **)((char *)&v97 - v9);
  unint64_t v11 = *(void *)(a1 + 16);
  if (v11 == *(void *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      uint64_t v89 = 1;
      return v89 & 1;
    }
    uint64_t v12 = 0;
    unint64_t v13 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    uint64_t v101 = a2 + v13;
    uint64_t v102 = a1 + v13;
    uint64_t v14 = *(void *)(v8 + 72);
    uint64_t v99 = v4;
    os_log_type_t v100 = v14;
    uint64_t v98 = v11;
    while (1)
    {
      uint64_t v15 = v12;
      unint64_t v16 = v100 * v12;
      outlined init with copy of AspireSimilarityPlaintextPackingDenseRow(v102 + v100 * v12, (uint64_t)v10, type metadata accessor for AspireSimilaritySimilarityDbRow);
      outlined init with copy of AspireSimilarityPlaintextPackingDenseRow(v101 + v16, (uint64_t)v6, type metadata accessor for AspireSimilaritySimilarityDbRow);
      if (*v10 != *v6) {
        break;
      }
      uint64_t v17 = v10[1];
      uint64_t v18 = v10[2];
      uint64_t v19 = v6[1];
      BOOL v20 = v6[2];
      unint64_t v21 = 0;
      switch(v18 >> 62)
      {
        case 1uLL:
          LODWORD(v21) = HIDWORD(v17) - v17;
          if (__OFSUB__(HIDWORD(v17), v17))
          {
            __break(1u);
LABEL_137:
            __break(1u);
LABEL_138:
            __break(1u);
LABEL_139:
            __break(1u);
LABEL_140:
            __break(1u);
LABEL_141:
            __break(1u);
LABEL_142:
            __break(1u);
LABEL_143:
            __break(1u);
LABEL_144:
            __break(1u);
LABEL_145:
            __break(1u);
LABEL_146:
            __break(1u);
LABEL_147:
            __break(1u);
LABEL_148:
            __break(1u);
LABEL_149:
            __break(1u);
LABEL_150:
            __break(1u);
LABEL_151:
            __break(1u);
LABEL_152:
            __break(1u);
LABEL_153:
            __break(1u);
LABEL_154:
            __break(1u);
LABEL_155:
            __break(1u);
LABEL_156:
            __break(1u);
LABEL_157:
            __break(1u);
LABEL_158:
            __break(1u);
          }
          unint64_t v21 = (int)v21;
LABEL_11:
          uint64_t v25 = v20 >> 62;
          uint64_t v103 = v15 + 1;
          switch(v20 >> 62)
          {
            case 1uLL:
              LODWORD(v26) = HIDWORD(v19) - v19;
              if (__OFSUB__(HIDWORD(v19), v19)) {
                goto LABEL_138;
              }
              uint64_t v26 = (int)v26;
LABEL_16:
              if (v21 != v26) {
                goto LABEL_132;
              }
              if (v21 < 1) {
                goto LABEL_118;
              }
              break;
            case 2uLL:
              uint64_t v28 = *(void *)(v19 + 16);
              uint64_t v27 = *(void *)(v19 + 24);
              uint64_t v24 = __OFSUB__(v27, v28);
              uint64_t v26 = v27 - v28;
              if (!v24) {
                goto LABEL_16;
              }
              goto LABEL_139;
            case 3uLL:
              if (v21) {
                goto LABEL_132;
              }
              goto LABEL_118;
            default:
              uint64_t v26 = BYTE6(v20);
              goto LABEL_16;
          }
          break;
        case 2uLL:
          uint64_t v23 = *(void *)(v17 + 16);
          uint64_t v22 = *(void *)(v17 + 24);
          uint64_t v24 = __OFSUB__(v22, v23);
          unint64_t v21 = v22 - v23;
          if (!v24) {
            goto LABEL_11;
          }
          goto LABEL_137;
        case 3uLL:
          goto LABEL_11;
        default:
          unint64_t v21 = BYTE6(v18);
          goto LABEL_11;
      }
      switch(v18 >> 62)
      {
        case 1uLL:
          if ((int)v17 > v17 >> 32) {
            goto LABEL_140;
          }
          outlined copy of Data._Representation(v17, v18);
          uint64_t v34 = __DataStorage._bytes.getter();
          if (v34)
          {
            uint64_t v35 = v34;
            uint64_t v36 = __DataStorage._offset.getter();
            if (__OFSUB__((int)v17, v36)) {
              goto LABEL_142;
            }
            uint64_t v37 = (char *)(v35 + (int)v17 - v36);
            __DataStorage._length.getter();
            if (!v25)
            {
LABEL_71:
              __s1[0] = v19;
              LOWORD(__s1[1]) = v20;
              BYTE2(__s1[1]) = BYTE2(v20);
              BYTE3(__s1[1]) = BYTE3(v20);
              BYTE4(__s1[1]) = BYTE4(v20);
              BYTE5(__s1[1]) = BYTE5(v20);
              if (!v37) {
                goto LABEL_165;
              }
              uint64_t v43 = memcmp(v37, __s1, BYTE6(v20));
              goto LABEL_73;
            }
          }
          else
          {
            uint64_t v37 = 0;
            __DataStorage._length.getter();
            if (!v25) {
              goto LABEL_71;
            }
          }
          if (v25 == 1)
          {
            char v97 = v37;
            if (v19 >> 32 < (int)v19) {
              goto LABEL_151;
            }
            swift_retain();
            size_t v38 = (char *)__DataStorage._bytes.getter();
            if (v38)
            {
              int v39 = __DataStorage._offset.getter();
              if (__OFSUB__((int)v19, v39)) {
                goto LABEL_158;
              }
              v38 += (int)v19 - v39;
            }
            uint64_t v40 = v97;
            double v41 = __DataStorage._length.getter();
            if (v41 >= (v19 >> 32) - (int)v19) {
              uint64_t v42 = (v19 >> 32) - (int)v19;
            }
            else {
              uint64_t v42 = v41;
            }
            if (!v40) {
              goto LABEL_160;
            }
            if (!v38) {
              goto LABEL_161;
            }
            uint64_t v43 = memcmp(v40, v38, v42);
            outlined consume of Data._Representation(v19, v20);
LABEL_73:
            uint64_t v53 = v17;
            size_t v54 = v18;
LABEL_74:
            outlined consume of Data._Representation(v53, v54);
            if (v43) {
              goto LABEL_132;
            }
            goto LABEL_118;
          }
          uint64_t v77 = *(void *)(v19 + 16);
          char v97 = *(char **)(v19 + 24);
          swift_retain();
          swift_retain();
          int64_t v78 = (char *)__DataStorage._bytes.getter();
          if (v78)
          {
            uint64_t v79 = __DataStorage._offset.getter();
            if (__OFSUB__(v77, v79)) {
              goto LABEL_157;
            }
            size_t v80 = v37;
            v78 += v77 - v79;
          }
          else
          {
            size_t v80 = v37;
          }
          char v81 = &v97[-v77];
          if (__OFSUB__(v97, v77)) {
            goto LABEL_152;
          }
          unint64_t v82 = __DataStorage._length.getter();
          if (v82 >= (uint64_t)v81) {
            BOOL v83 = (size_t)v81;
          }
          else {
            BOOL v83 = v82;
          }
          if (!v80) {
            goto LABEL_171;
          }
          if (!v78) {
            goto LABEL_172;
          }
          uint64_t v84 = memcmp(v80, v78, v83);
          swift_release();
          swift_release();
          outlined consume of Data._Representation(v17, v18);
          if (v84) {
            goto LABEL_132;
          }
LABEL_118:
          uint64_t v85 = v10[3];
          uint64_t v86 = v6[3];
          uint64_t v87 = *(void *)(v85 + 16);
          if (v87 != *(void *)(v86 + 16)) {
            goto LABEL_132;
          }
          if (v87) {
            uint64_t v88 = v85 == v86;
          }
          else {
            uint64_t v88 = 1;
          }
          if (!v88)
          {
            if (*(float *)(v85 + 32) != *(float *)(v86 + 32)) {
              goto LABEL_132;
            }
            if (v87 != 1)
            {
              if (*(float *)(v85 + 36) != *(float *)(v86 + 36)) {
                goto LABEL_132;
              }
              uint64_t v90 = (float *)(v85 + 40);
              uint64_t v91 = (float *)(v86 + 40);
              uint64_t v92 = v87 - 2;
              while (v92)
              {
                __int16 v93 = *v90++;
                char v94 = v93;
                char v95 = *v91++;
                --v92;
                if (v94 != v95) {
                  goto LABEL_132;
                }
              }
            }
          }
          type metadata accessor for UnknownStorage();
          _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_2(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
          uint64_t v89 = dispatch thunk of static Equatable.== infix(_:_:)();
          outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v6, type metadata accessor for AspireSimilaritySimilarityDbRow);
          outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v10, type metadata accessor for AspireSimilaritySimilarityDbRow);
          if ((v89 & 1) == 0) {
            return v89 & 1;
          }
          uint64_t v12 = v103;
          if (v103 == v98) {
            return v89 & 1;
          }
          break;
        case 2uLL:
          uint64_t v44 = *(void *)(v17 + 16);
          swift_retain();
          swift_retain();
          double v45 = __DataStorage._bytes.getter();
          if (v45)
          {
            uint64_t v46 = v45;
            uint64_t v47 = __DataStorage._offset.getter();
            if (__OFSUB__(v44, v47)) {
              goto LABEL_141;
            }
            size_t v48 = (char *)(v46 + v44 - v47);
          }
          else
          {
            size_t v48 = 0;
          }
          __DataStorage._length.getter();
          if (!v25)
          {
            __s1[0] = v19;
            LOWORD(__s1[1]) = v20;
            BYTE2(__s1[1]) = BYTE2(v20);
            BYTE3(__s1[1]) = BYTE3(v20);
            BYTE4(__s1[1]) = BYTE4(v20);
            BYTE5(__s1[1]) = BYTE5(v20);
            if (!v48) {
              goto LABEL_168;
            }
            uint64_t v59 = memcmp(v48, __s1, BYTE6(v20));
LABEL_93:
            swift_release();
            swift_release();
            if (v59) {
              goto LABEL_132;
            }
            goto LABEL_118;
          }
          char v97 = v48;
          if (v25 == 1)
          {
            if (v19 >> 32 < (int)v19) {
              goto LABEL_147;
            }
            swift_retain();
            uint64_t v55 = (char *)__DataStorage._bytes.getter();
            if (v55)
            {
              unint64_t v56 = __DataStorage._offset.getter();
              if (__OFSUB__((int)v19, v56)) {
                goto LABEL_156;
              }
              v55 += (int)v19 - v56;
            }
            uint64_t v57 = __DataStorage._length.getter();
            if (v57 >= (v19 >> 32) - (int)v19) {
              uint64_t v58 = (v19 >> 32) - (int)v19;
            }
            else {
              uint64_t v58 = v57;
            }
            if (!v97) {
              goto LABEL_163;
            }
            if (!v55) {
              goto LABEL_164;
            }
            uint64_t v59 = memcmp(v97, v55, v58);
            outlined consume of Data._Representation(v19, v20);
            goto LABEL_93;
          }
          int64_t v71 = *(void *)(v19 + 16);
          uint64_t v72 = *(void *)(v19 + 24);
          swift_retain();
          swift_retain();
          size_t v73 = (char *)__DataStorage._bytes.getter();
          if (v73)
          {
            uint64_t v74 = __DataStorage._offset.getter();
            if (__OFSUB__(v71, v74)) {
              goto LABEL_155;
            }
            v73 += v71 - v74;
          }
          if (__OFSUB__(v72, v71)) {
            goto LABEL_150;
          }
          uint64_t v75 = __DataStorage._length.getter();
          if (v75 >= v72 - v71) {
            unint64_t v76 = v72 - v71;
          }
          else {
            unint64_t v76 = v75;
          }
          if (!v97) {
            goto LABEL_169;
          }
          if (!v73) {
            goto LABEL_170;
          }
          uint64_t v70 = memcmp(v97, v73, v76);
          swift_release();
          swift_release();
LABEL_105:
          swift_release();
          swift_release();
          if (v70) {
            goto LABEL_132;
          }
          goto LABEL_118;
        case 3uLL:
          memset(__s1, 0, 14);
          if (!v25) {
            goto LABEL_55;
          }
          if (v25 == 1)
          {
            uint64_t v29 = (v19 >> 32) - (int)v19;
            if (v19 >> 32 < (int)v19) {
              goto LABEL_144;
            }
            swift_retain();
            int v49 = __DataStorage._bytes.getter();
            if (!v49) {
              goto LABEL_162;
            }
            uint64_t v31 = v49;
            uint64_t v50 = __DataStorage._offset.getter();
            uint64_t v33 = (int)v19 - v50;
            if (__OFSUB__((int)v19, v50)) {
              goto LABEL_146;
            }
LABEL_51:
            uint64_t v51 = __DataStorage._length.getter();
            if (v51 >= v29) {
              uint64_t v52 = v29;
            }
            else {
              uint64_t v52 = v51;
            }
            uint64_t v43 = memcmp(__s1, (const void *)(v31 + v33), v52);
            uint64_t v53 = v19;
            size_t v54 = v20;
            goto LABEL_74;
          }
          size_t v66 = *(void *)(v19 + 16);
          uint64_t v67 = *(void *)(v19 + 24);
          swift_retain();
          swift_retain();
          uint64_t v62 = (char *)__DataStorage._bytes.getter();
          if (v62)
          {
            uint64_t v68 = __DataStorage._offset.getter();
            if (__OFSUB__(v66, v68)) {
              goto LABEL_154;
            }
            v62 += v66 - v68;
          }
          uint64_t v64 = v67 - v66;
          if (__OFSUB__(v67, v66)) {
            goto LABEL_149;
          }
          uint64_t v65 = __DataStorage._length.getter();
          if (!v62) {
            goto LABEL_167;
          }
LABEL_87:
          if (v65 >= v64) {
            unint64_t v69 = v64;
          }
          else {
            unint64_t v69 = v65;
          }
          uint64_t v70 = memcmp(__s1, v62, v69);
          goto LABEL_105;
        default:
          __s1[0] = v17;
          LOWORD(__s1[1]) = v18;
          BYTE2(__s1[1]) = BYTE2(v18);
          BYTE3(__s1[1]) = BYTE3(v18);
          BYTE4(__s1[1]) = BYTE4(v18);
          BYTE5(__s1[1]) = BYTE5(v18);
          if (!v25)
          {
LABEL_55:
            uint64_t __s2 = v19;
            int v105 = v20;
            size_t v106 = BYTE2(v20);
            int v107 = BYTE3(v20);
            uint64_t v108 = BYTE4(v20);
            uint64_t v109 = BYTE5(v20);
            if (memcmp(__s1, &__s2, BYTE6(v20))) {
              goto LABEL_132;
            }
            goto LABEL_118;
          }
          if (v25 == 1)
          {
            uint64_t v29 = (v19 >> 32) - (int)v19;
            if (v19 >> 32 < (int)v19) {
              goto LABEL_143;
            }
            swift_retain();
            uint64_t v30 = __DataStorage._bytes.getter();
            if (!v30)
            {
              __DataStorage._length.getter();
              __break(1u);
LABEL_160:
              __break(1u);
LABEL_161:
              __break(1u);
LABEL_162:
              __DataStorage._length.getter();
              __break(1u);
LABEL_163:
              __break(1u);
LABEL_164:
              __break(1u);
LABEL_165:
              __break(1u);
LABEL_166:
              __break(1u);
LABEL_167:
              __break(1u);
LABEL_168:
              __break(1u);
LABEL_169:
              __break(1u);
LABEL_170:
              __break(1u);
LABEL_171:
              __break(1u);
LABEL_172:
              __break(1u);
              JUMPOUT(0x249E57804);
            }
            uint64_t v31 = v30;
            uint64_t v32 = __DataStorage._offset.getter();
            uint64_t v33 = (int)v19 - v32;
            if (__OFSUB__((int)v19, v32)) {
              goto LABEL_145;
            }
            goto LABEL_51;
          }
          uint64_t v60 = *(void *)(v19 + 16);
          int64_t v61 = *(void *)(v19 + 24);
          swift_retain();
          swift_retain();
          uint64_t v62 = (char *)__DataStorage._bytes.getter();
          if (v62)
          {
            uint64_t v63 = __DataStorage._offset.getter();
            if (__OFSUB__(v60, v63)) {
              goto LABEL_153;
            }
            v62 += v60 - v63;
          }
          uint64_t v64 = v61 - v60;
          if (__OFSUB__(v61, v60)) {
            goto LABEL_148;
          }
          uint64_t v65 = __DataStorage._length.getter();
          if (!v62) {
            goto LABEL_166;
          }
          goto LABEL_87;
      }
    }
LABEL_132:
    outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v6, type metadata accessor for AspireSimilaritySimilarityDbRow);
    outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v10, type metadata accessor for AspireSimilaritySimilarityDbRow);
  }
  uint64_t v89 = 0;
  return v89 & 1;
}

{
  int *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  void *v30;
  char v31;
  void *v32;
  int v33;
  char v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;

  uint64_t v4 = (int *)type metadata accessor for AspireApiPIRShardConfig(0);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (uint64_t *)((char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (uint64_t *)((char *)&v42 - v9);
  unint64_t v11 = *(void *)(a1 + 16);
  if (v11 == *(void *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      uint64_t v34 = 1;
      return v34 & 1;
    }
    uint64_t v12 = 0;
    unint64_t v13 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    uint64_t v43 = a1 + v13;
    uint64_t v14 = a2 + v13;
    uint64_t v15 = *(void *)(v8 + 72);
    while (1)
    {
      outlined init with copy of AspireSimilarityPlaintextPackingDenseRow(v43 + v15 * v12, (uint64_t)v10, type metadata accessor for AspireApiPIRShardConfig);
      outlined init with copy of AspireSimilarityPlaintextPackingDenseRow(v14 + v15 * v12, (uint64_t)v6, type metadata accessor for AspireApiPIRShardConfig);
      if (*v10 != *v6) {
        break;
      }
      if (v10[1] != v6[1]) {
        break;
      }
      unint64_t v16 = (void *)v10[2];
      uint64_t v17 = (void *)v6[2];
      uint64_t v18 = v16[2];
      if (v18 != v17[2]) {
        break;
      }
      if (v18) {
        uint64_t v19 = v16 == v17;
      }
      else {
        uint64_t v19 = 1;
      }
      if (!v19)
      {
        if (v16[4] != v17[4]) {
          break;
        }
        if (v18 != 1)
        {
          if (v16[5] != v17[5]) {
            break;
          }
          uint64_t v35 = v16 + 6;
          uint64_t v36 = v17 + 6;
          uint64_t v37 = v18 - 2;
          while (v37)
          {
            int v39 = *v35++;
            size_t v38 = v39;
            uint64_t v40 = *v36++;
            --v37;
            if (v38 != v40) {
              goto LABEL_41;
            }
          }
        }
      }
      BOOL v20 = v4[8];
      unint64_t v21 = (void *)((char *)v10 + v20);
      uint64_t v22 = *(void *)((char *)v10 + v20 + 8);
      uint64_t v23 = (void *)((char *)v6 + v20);
      uint64_t v24 = v23[1];
      if (v22)
      {
        if (!v24) {
          break;
        }
        uint64_t v25 = *v21 == *v23 && v22 == v24;
        if (!v25 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
          break;
        }
      }
      else if (v24)
      {
        break;
      }
      uint64_t v26 = v4[9];
      uint64_t v27 = *((unsigned __int8 *)v10 + v26);
      uint64_t v28 = *((unsigned __int8 *)v6 + v26);
      if (v27 == 2)
      {
        if (v28 != 2) {
          break;
        }
      }
      else if (v28 == 2 || ((((v28 & 1) == 0) ^ v27) & 1) == 0)
      {
        break;
      }
      uint64_t v29 = v4[10];
      uint64_t v30 = (void *)((char *)v10 + v29);
      uint64_t v31 = *((unsigned char *)v10 + v29 + 8);
      uint64_t v32 = (void *)((char *)v6 + v29);
      uint64_t v33 = *((unsigned __int8 *)v6 + v29 + 8);
      if (v31)
      {
        if (!v33) {
          break;
        }
      }
      else
      {
        if (*v30 != *v32) {
          LOBYTE(v33) = 1;
        }
        if (v33) {
          break;
        }
      }
      type metadata accessor for UnknownStorage();
      _s21InternalSwiftProtobuf14UnknownStorageVACSQAAWlTm_2(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
      uint64_t v34 = dispatch thunk of static Equatable.== infix(_:_:)();
      outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v6, type metadata accessor for AspireApiPIRShardConfig);
      outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v10, type metadata accessor for AspireApiPIRShardConfig);
      if ((v34 & 1) != 0 && ++v12 != v11) {
        continue;
      }
      return v34 & 1;
    }
LABEL_41:
    outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v6, type metadata accessor for AspireApiPIRShardConfig);
    outlined destroy of AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType((uint64_t)v10, type metadata accessor for AspireApiPIRShardConfig);
  }
  uint64_t v34 = 0;
  return v34 & 1;
}